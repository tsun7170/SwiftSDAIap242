/* file: validate_dependently_instantiable_entity_data_types.swift 	 generated: Sun Oct 31 15:32:10 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -RULE DEFINITION in EXPRESS
/*

  RULE validate_dependently_instantiable_entity_data_types FOR ( aggregate_id_attribute, attribute_value_role, 
    camera_model_d2, classification_assignment_relationship, concept_feature_relationship, 
    concept_feature_relationship_with_condition, data_equivalence_assessment_specification, 
    data_equivalence_criteria_representation, data_equivalence_criterion, 
    data_equivalence_inspection_instance_report_item, data_equivalence_inspection_requirement, 
    data_equivalence_inspection_result_representation, document_usage_constraint, edge_blended_solid, 
    effectivity_context_role, event_occurrence_role, explicit_procedural_representation_item_relationship, 
    founded_item, indirectly_selected_elements, location_representation_role, location_role, 
    modified_solid_with_placed_configuration, one_direction_repeat_factor, organization_type_role, 
    procedural_representation, procedural_representation_sequence, product_definition_effectivity, 
    product_definition_relationship_relationship, runout_zone_orientation, solid_with_depression, 
    solid_with_hole, solid_with_pocket, solid_with_protrusion, solid_with_shape_element_pattern, 
    solid_with_slot, swept_area_solid, symbol_target, two_direction_repeat_factor, user_selected_elements );

    LOCAL
      number_of_input_instances : INTEGER;
      previous_in_chain         : LIST OF GENERIC := [];
      set_of_input_types        : SET OF STRING := [];
      all_instances             : SET OF GENERIC := [];
    END_LOCAL;
    all_instances := all_instances + aggregate_id_attribute;
    all_instances := all_instances + attribute_value_role;
    all_instances := all_instances + camera_model_d2;
    all_instances := all_instances + classification_assignment_relationship;
    all_instances := all_instances + concept_feature_relationship;
    all_instances := all_instances + concept_feature_relationship_with_condition;
    all_instances := all_instances + data_equivalence_assessment_specification;
    all_instances := all_instances + data_equivalence_criteria_representation;
    all_instances := all_instances + data_equivalence_criterion;
    all_instances := all_instances + data_equivalence_inspection_instance_report_item;
    all_instances := all_instances + data_equivalence_inspection_requirement;
    all_instances := all_instances + data_equivalence_inspection_result_representation;
    all_instances := all_instances + document_usage_constraint;
    all_instances := all_instances + edge_blended_solid;
    all_instances := all_instances + effectivity_context_role;
    all_instances := all_instances + event_occurrence_role;
    all_instances := all_instances + explicit_procedural_representation_item_relationship;
    all_instances := all_instances + founded_item;
    all_instances := all_instances + indirectly_selected_elements;
    all_instances := all_instances + location_representation_role;
    all_instances := all_instances + location_role;
    all_instances := all_instances + modified_solid_with_placed_configuration;
    all_instances := all_instances + one_direction_repeat_factor;
    all_instances := all_instances + organization_type_role;
    all_instances := all_instances + procedural_representation;
    all_instances := all_instances + procedural_representation_sequence;
    all_instances := all_instances + product_definition_effectivity;
    all_instances := all_instances + product_definition_relationship_relationship;
    all_instances := all_instances + runout_zone_orientation;
    all_instances := all_instances + solid_with_depression;
    all_instances := all_instances + solid_with_hole;
    all_instances := all_instances + solid_with_pocket;
    all_instances := all_instances + solid_with_protrusion;
    all_instances := all_instances + solid_with_shape_element_pattern;
    all_instances := all_instances + solid_with_slot;
    all_instances := all_instances + swept_area_solid;
    all_instances := all_instances + symbol_target;
    all_instances := all_instances + two_direction_repeat_factor;
    all_instances := all_instances + user_selected_elements;
    number_of_input_instances := SIZEOF( all_instances );
    REPEAT i := 1 TO number_of_input_instances BY 1;
      set_of_input_types := set_of_input_types + TYPEOF( all_instances[i] );
    END_REPEAT;

  WHERE
    wr1: dependently_instantiated( all_instances, set_of_input_types, previous_in_chain );

  END_RULE; -- validate_dependently_instantiable_entity_data_types (line:50066 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static
  func VALIDATE_DEPENDENTLY_INSTANTIABLE_ENTITY_DATA_TYPES( 
    allComplexEntities: AnySequence<SDAI.ComplexEntity> ) -> [SDAI.WhereLabel:SDAI.LOGICAL] {

    //ENTITY REFERENCES
    let AGGREGATE_ID_ATTRIBUTE = SDAI.POPULATION(OF: eAGGREGATE_ID_ATTRIBUTE.self, FROM: allComplexEntities)
    let ATTRIBUTE_VALUE_ROLE = SDAI.POPULATION(OF: eATTRIBUTE_VALUE_ROLE.self, FROM: allComplexEntities)
    let CAMERA_MODEL_D2 = SDAI.POPULATION(OF: eCAMERA_MODEL_D2.self, FROM: allComplexEntities)
    let CLASSIFICATION_ASSIGNMENT_RELATIONSHIP = 
      SDAI.POPULATION(OF: eCLASSIFICATION_ASSIGNMENT_RELATIONSHIP.self, FROM: allComplexEntities)
    let CONCEPT_FEATURE_RELATIONSHIP = 
      SDAI.POPULATION(OF: eCONCEPT_FEATURE_RELATIONSHIP.self, FROM: allComplexEntities)
    let CONCEPT_FEATURE_RELATIONSHIP_WITH_CONDITION = 
      SDAI.POPULATION(OF: eCONCEPT_FEATURE_RELATIONSHIP_WITH_CONDITION.self, FROM: allComplexEntities)
    let DATA_EQUIVALENCE_ASSESSMENT_SPECIFICATION = 
      SDAI.POPULATION(OF: eDATA_EQUIVALENCE_ASSESSMENT_SPECIFICATION.self, FROM: allComplexEntities)
    let DATA_EQUIVALENCE_CRITERIA_REPRESENTATION = 
      SDAI.POPULATION(OF: eDATA_EQUIVALENCE_CRITERIA_REPRESENTATION.self, FROM: allComplexEntities)
    let DATA_EQUIVALENCE_CRITERION = 
      SDAI.POPULATION(OF: eDATA_EQUIVALENCE_CRITERION.self, FROM: allComplexEntities)
    let DATA_EQUIVALENCE_INSPECTION_INSTANCE_REPORT_ITEM = 
      SDAI.POPULATION(OF: eDATA_EQUIVALENCE_INSPECTION_INSTANCE_REPORT_ITEM.self, FROM: allComplexEntities)
    let DATA_EQUIVALENCE_INSPECTION_REQUIREMENT = 
      SDAI.POPULATION(OF: eDATA_EQUIVALENCE_INSPECTION_REQUIREMENT.self, FROM: allComplexEntities)
    let DATA_EQUIVALENCE_INSPECTION_RESULT_REPRESENTATION = 
      SDAI.POPULATION(OF: eDATA_EQUIVALENCE_INSPECTION_RESULT_REPRESENTATION.self, FROM: allComplexEntities)
    let DOCUMENT_USAGE_CONSTRAINT = 
      SDAI.POPULATION(OF: eDOCUMENT_USAGE_CONSTRAINT.self, FROM: allComplexEntities)
    let EDGE_BLENDED_SOLID = SDAI.POPULATION(OF: eEDGE_BLENDED_SOLID.self, FROM: allComplexEntities)
    let EFFECTIVITY_CONTEXT_ROLE = 
      SDAI.POPULATION(OF: eEFFECTIVITY_CONTEXT_ROLE.self, FROM: allComplexEntities)
    let EVENT_OCCURRENCE_ROLE = SDAI.POPULATION(OF: eEVENT_OCCURRENCE_ROLE.self, FROM: allComplexEntities)
    let EXPLICIT_PROCEDURAL_REPRESENTATION_ITEM_RELATIONSHIP = SDAI.POPULATION(OF: eEXPLICIT_PROCEDURAL_REPRESENTATION_ITEM_RELATIONSHIP.self, FROM: allComplexEntities)
    let FOUNDED_ITEM = SDAI.POPULATION(OF: eFOUNDED_ITEM.self, FROM: allComplexEntities)
    let INDIRECTLY_SELECTED_ELEMENTS = 
      SDAI.POPULATION(OF: eINDIRECTLY_SELECTED_ELEMENTS.self, FROM: allComplexEntities)
    let LOCATION_REPRESENTATION_ROLE = 
      SDAI.POPULATION(OF: eLOCATION_REPRESENTATION_ROLE.self, FROM: allComplexEntities)
    let LOCATION_ROLE = SDAI.POPULATION(OF: eLOCATION_ROLE.self, FROM: allComplexEntities)
    let MODIFIED_SOLID_WITH_PLACED_CONFIGURATION = 
      SDAI.POPULATION(OF: eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION.self, FROM: allComplexEntities)
    let ONE_DIRECTION_REPEAT_FACTOR = 
      SDAI.POPULATION(OF: eONE_DIRECTION_REPEAT_FACTOR.self, FROM: allComplexEntities)
    let ORGANIZATION_TYPE_ROLE = SDAI.POPULATION(OF: eORGANIZATION_TYPE_ROLE.self, FROM: allComplexEntities)
    let PROCEDURAL_REPRESENTATION = 
      SDAI.POPULATION(OF: ePROCEDURAL_REPRESENTATION.self, FROM: allComplexEntities)
    let PROCEDURAL_REPRESENTATION_SEQUENCE = 
      SDAI.POPULATION(OF: ePROCEDURAL_REPRESENTATION_SEQUENCE.self, FROM: allComplexEntities)
    let PRODUCT_DEFINITION_EFFECTIVITY = 
      SDAI.POPULATION(OF: ePRODUCT_DEFINITION_EFFECTIVITY.self, FROM: allComplexEntities)
    let PRODUCT_DEFINITION_RELATIONSHIP_RELATIONSHIP = 
      SDAI.POPULATION(OF: ePRODUCT_DEFINITION_RELATIONSHIP_RELATIONSHIP.self, FROM: allComplexEntities)
    let RUNOUT_ZONE_ORIENTATION = 
      SDAI.POPULATION(OF: eRUNOUT_ZONE_ORIENTATION.self, FROM: allComplexEntities)
    let SOLID_WITH_DEPRESSION = SDAI.POPULATION(OF: eSOLID_WITH_DEPRESSION.self, FROM: allComplexEntities)
    let SOLID_WITH_HOLE = SDAI.POPULATION(OF: eSOLID_WITH_HOLE.self, FROM: allComplexEntities)
    let SOLID_WITH_POCKET = SDAI.POPULATION(OF: eSOLID_WITH_POCKET.self, FROM: allComplexEntities)
    let SOLID_WITH_PROTRUSION = SDAI.POPULATION(OF: eSOLID_WITH_PROTRUSION.self, FROM: allComplexEntities)
    let SOLID_WITH_SHAPE_ELEMENT_PATTERN = 
      SDAI.POPULATION(OF: eSOLID_WITH_SHAPE_ELEMENT_PATTERN.self, FROM: allComplexEntities)
    let SOLID_WITH_SLOT = SDAI.POPULATION(OF: eSOLID_WITH_SLOT.self, FROM: allComplexEntities)
    let SWEPT_AREA_SOLID = SDAI.POPULATION(OF: eSWEPT_AREA_SOLID.self, FROM: allComplexEntities)
    let SYMBOL_TARGET = SDAI.POPULATION(OF: eSYMBOL_TARGET.self, FROM: allComplexEntities)
    let TWO_DIRECTION_REPEAT_FACTOR = 
      SDAI.POPULATION(OF: eTWO_DIRECTION_REPEAT_FACTOR.self, FROM: allComplexEntities)
    let USER_SELECTED_ELEMENTS = SDAI.POPULATION(OF: eUSER_SELECTED_ELEMENTS.self, FROM: allComplexEntities)

    //LOCAL
    var NUMBER_OF_INPUT_INSTANCES: SDAI.INTEGER? 
    var PREVIOUS_IN_CHAIN: SDAI.LIST<SDAI.GENERIC>?  = SDAI.LIST<SDAI.GENERIC>(SDAI.EMPLY_AGGREGATE); SDAI.TOUCH(var: &PREVIOUS_IN_CHAIN)
    var SET_OF_INPUT_TYPES: SDAI.SET<SDAI.STRING>?  = SDAI.SET<SDAI.STRING>(SDAI.EMPLY_AGGREGATE); SDAI.TOUCH(var: &SET_OF_INPUT_TYPES)
    var ALL_INSTANCES: SDAI.SET<SDAI.GENERIC>?  = SDAI.SET<SDAI.GENERIC>(SDAI.EMPLY_AGGREGATE); SDAI.TOUCH(var: &ALL_INSTANCES)
    //END_LOCAL

    
    let _TEMP1 = ALL_INSTANCES + SDAI.FORCE_OPTIONAL(SDAI.SET<SDAI.GENERIC>(/*SDAI.SET<
      eAGGREGATE_ID_ATTRIBUTE>*/AGGREGATE_ID_ATTRIBUTE))
    ALL_INSTANCES = _TEMP1
    
    let _TEMP2 = ALL_INSTANCES + SDAI.FORCE_OPTIONAL(SDAI.SET<SDAI.GENERIC>(/*SDAI.SET<eATTRIBUTE_VALUE_ROLE>*/
      ATTRIBUTE_VALUE_ROLE))
    ALL_INSTANCES = _TEMP2
    
    let _TEMP3 = ALL_INSTANCES + SDAI.FORCE_OPTIONAL(SDAI.SET<SDAI.GENERIC>(/*SDAI.SET<eCAMERA_MODEL_D2>*/
      CAMERA_MODEL_D2))
    ALL_INSTANCES = _TEMP3
    
    let _TEMP4 = ALL_INSTANCES + SDAI.FORCE_OPTIONAL(SDAI.SET<SDAI.GENERIC>(/*SDAI.SET<
      eCLASSIFICATION_ASSIGNMENT_RELATIONSHIP>*/CLASSIFICATION_ASSIGNMENT_RELATIONSHIP))
    ALL_INSTANCES = _TEMP4
    
    let _TEMP5 = ALL_INSTANCES + SDAI.FORCE_OPTIONAL(SDAI.SET<SDAI.GENERIC>(/*SDAI.SET<
      eCONCEPT_FEATURE_RELATIONSHIP>*/CONCEPT_FEATURE_RELATIONSHIP))
    ALL_INSTANCES = _TEMP5
    
    let _TEMP6 = ALL_INSTANCES + SDAI.FORCE_OPTIONAL(SDAI.SET<SDAI.GENERIC>(/*SDAI.SET<
      eCONCEPT_FEATURE_RELATIONSHIP_WITH_CONDITION>*/CONCEPT_FEATURE_RELATIONSHIP_WITH_CONDITION))
    ALL_INSTANCES = _TEMP6
    
    let _TEMP7 = ALL_INSTANCES + SDAI.FORCE_OPTIONAL(SDAI.SET<SDAI.GENERIC>(/*SDAI.SET<
      eDATA_EQUIVALENCE_ASSESSMENT_SPECIFICATION>*/DATA_EQUIVALENCE_ASSESSMENT_SPECIFICATION))
    ALL_INSTANCES = _TEMP7
    
    let _TEMP8 = ALL_INSTANCES + SDAI.FORCE_OPTIONAL(SDAI.SET<SDAI.GENERIC>(/*SDAI.SET<
      eDATA_EQUIVALENCE_CRITERIA_REPRESENTATION>*/DATA_EQUIVALENCE_CRITERIA_REPRESENTATION))
    ALL_INSTANCES = _TEMP8
    
    let _TEMP9 = ALL_INSTANCES + SDAI.FORCE_OPTIONAL(SDAI.SET<SDAI.GENERIC>(/*SDAI.SET<
      eDATA_EQUIVALENCE_CRITERION>*/DATA_EQUIVALENCE_CRITERION))
    ALL_INSTANCES = _TEMP9
    
    let _TEMP10 = ALL_INSTANCES + SDAI.FORCE_OPTIONAL(SDAI.SET<SDAI.GENERIC>(/*SDAI.SET<
      eDATA_EQUIVALENCE_INSPECTION_INSTANCE_REPORT_ITEM>*/DATA_EQUIVALENCE_INSPECTION_INSTANCE_REPORT_ITEM))
    ALL_INSTANCES = _TEMP10
    
    let _TEMP11 = ALL_INSTANCES + SDAI.FORCE_OPTIONAL(SDAI.SET<SDAI.GENERIC>(/*SDAI.SET<
      eDATA_EQUIVALENCE_INSPECTION_REQUIREMENT>*/DATA_EQUIVALENCE_INSPECTION_REQUIREMENT))
    ALL_INSTANCES = _TEMP11
    
    let _TEMP12 = ALL_INSTANCES + SDAI.FORCE_OPTIONAL(SDAI.SET<SDAI.GENERIC>(/*SDAI.SET<
      eDATA_EQUIVALENCE_INSPECTION_RESULT_REPRESENTATION>*/DATA_EQUIVALENCE_INSPECTION_RESULT_REPRESENTATION))
    ALL_INSTANCES = _TEMP12
    
    let _TEMP13 = ALL_INSTANCES + SDAI.FORCE_OPTIONAL(SDAI.SET<SDAI.GENERIC>(/*SDAI.SET<
      eDOCUMENT_USAGE_CONSTRAINT>*/DOCUMENT_USAGE_CONSTRAINT))
    ALL_INSTANCES = _TEMP13
    
    let _TEMP14 = ALL_INSTANCES + SDAI.FORCE_OPTIONAL(SDAI.SET<SDAI.GENERIC>(/*SDAI.SET<eEDGE_BLENDED_SOLID>*/
      EDGE_BLENDED_SOLID))
    ALL_INSTANCES = _TEMP14
    
    let _TEMP15 = ALL_INSTANCES + SDAI.FORCE_OPTIONAL(SDAI.SET<SDAI.GENERIC>(/*SDAI.SET<
      eEFFECTIVITY_CONTEXT_ROLE>*/EFFECTIVITY_CONTEXT_ROLE))
    ALL_INSTANCES = _TEMP15
    
    let _TEMP16 = ALL_INSTANCES + SDAI.FORCE_OPTIONAL(SDAI.SET<SDAI.GENERIC>(/*SDAI.SET<
      eEVENT_OCCURRENCE_ROLE>*/EVENT_OCCURRENCE_ROLE))
    ALL_INSTANCES = _TEMP16
    
    let _TEMP17 = ALL_INSTANCES + SDAI.FORCE_OPTIONAL(SDAI.SET<SDAI.GENERIC>(/*SDAI.SET<
      eEXPLICIT_PROCEDURAL_REPRESENTATION_ITEM_RELATIONSHIP>*/
      EXPLICIT_PROCEDURAL_REPRESENTATION_ITEM_RELATIONSHIP))
    ALL_INSTANCES = _TEMP17
    
    let _TEMP18 = ALL_INSTANCES + SDAI.FORCE_OPTIONAL(SDAI.SET<SDAI.GENERIC>(/*SDAI.SET<eFOUNDED_ITEM>*/
      FOUNDED_ITEM))
    ALL_INSTANCES = _TEMP18
    
    let _TEMP19 = ALL_INSTANCES + SDAI.FORCE_OPTIONAL(SDAI.SET<SDAI.GENERIC>(/*SDAI.SET<
      eINDIRECTLY_SELECTED_ELEMENTS>*/INDIRECTLY_SELECTED_ELEMENTS))
    ALL_INSTANCES = _TEMP19
    
    let _TEMP20 = ALL_INSTANCES + SDAI.FORCE_OPTIONAL(SDAI.SET<SDAI.GENERIC>(/*SDAI.SET<
      eLOCATION_REPRESENTATION_ROLE>*/LOCATION_REPRESENTATION_ROLE))
    ALL_INSTANCES = _TEMP20
    
    let _TEMP21 = ALL_INSTANCES + SDAI.FORCE_OPTIONAL(SDAI.SET<SDAI.GENERIC>(/*SDAI.SET<eLOCATION_ROLE>*/
      LOCATION_ROLE))
    ALL_INSTANCES = _TEMP21
    
    let _TEMP22 = ALL_INSTANCES + SDAI.FORCE_OPTIONAL(SDAI.SET<SDAI.GENERIC>(/*SDAI.SET<
      eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION>*/MODIFIED_SOLID_WITH_PLACED_CONFIGURATION))
    ALL_INSTANCES = _TEMP22
    
    let _TEMP23 = ALL_INSTANCES + SDAI.FORCE_OPTIONAL(SDAI.SET<SDAI.GENERIC>(/*SDAI.SET<
      eONE_DIRECTION_REPEAT_FACTOR>*/ONE_DIRECTION_REPEAT_FACTOR))
    ALL_INSTANCES = _TEMP23
    
    let _TEMP24 = ALL_INSTANCES + SDAI.FORCE_OPTIONAL(SDAI.SET<SDAI.GENERIC>(/*SDAI.SET<
      eORGANIZATION_TYPE_ROLE>*/ORGANIZATION_TYPE_ROLE))
    ALL_INSTANCES = _TEMP24
    
    let _TEMP25 = ALL_INSTANCES + SDAI.FORCE_OPTIONAL(SDAI.SET<SDAI.GENERIC>(/*SDAI.SET<
      ePROCEDURAL_REPRESENTATION>*/PROCEDURAL_REPRESENTATION))
    ALL_INSTANCES = _TEMP25
    
    let _TEMP26 = ALL_INSTANCES + SDAI.FORCE_OPTIONAL(SDAI.SET<SDAI.GENERIC>(/*SDAI.SET<
      ePROCEDURAL_REPRESENTATION_SEQUENCE>*/PROCEDURAL_REPRESENTATION_SEQUENCE))
    ALL_INSTANCES = _TEMP26
    
    let _TEMP27 = ALL_INSTANCES + SDAI.FORCE_OPTIONAL(SDAI.SET<SDAI.GENERIC>(/*SDAI.SET<
      ePRODUCT_DEFINITION_EFFECTIVITY>*/PRODUCT_DEFINITION_EFFECTIVITY))
    ALL_INSTANCES = _TEMP27
    
    let _TEMP28 = ALL_INSTANCES + SDAI.FORCE_OPTIONAL(SDAI.SET<SDAI.GENERIC>(/*SDAI.SET<
      ePRODUCT_DEFINITION_RELATIONSHIP_RELATIONSHIP>*/PRODUCT_DEFINITION_RELATIONSHIP_RELATIONSHIP))
    ALL_INSTANCES = _TEMP28
    
    let _TEMP29 = ALL_INSTANCES + SDAI.FORCE_OPTIONAL(SDAI.SET<SDAI.GENERIC>(/*SDAI.SET<
      eRUNOUT_ZONE_ORIENTATION>*/RUNOUT_ZONE_ORIENTATION))
    ALL_INSTANCES = _TEMP29
    
    let _TEMP30 = ALL_INSTANCES + SDAI.FORCE_OPTIONAL(SDAI.SET<SDAI.GENERIC>(/*SDAI.SET<
      eSOLID_WITH_DEPRESSION>*/SOLID_WITH_DEPRESSION))
    ALL_INSTANCES = _TEMP30
    
    let _TEMP31 = ALL_INSTANCES + SDAI.FORCE_OPTIONAL(SDAI.SET<SDAI.GENERIC>(/*SDAI.SET<eSOLID_WITH_HOLE>*/
      SOLID_WITH_HOLE))
    ALL_INSTANCES = _TEMP31
    
    let _TEMP32 = ALL_INSTANCES + SDAI.FORCE_OPTIONAL(SDAI.SET<SDAI.GENERIC>(/*SDAI.SET<eSOLID_WITH_POCKET>*/
      SOLID_WITH_POCKET))
    ALL_INSTANCES = _TEMP32
    
    let _TEMP33 = ALL_INSTANCES + SDAI.FORCE_OPTIONAL(SDAI.SET<SDAI.GENERIC>(/*SDAI.SET<
      eSOLID_WITH_PROTRUSION>*/SOLID_WITH_PROTRUSION))
    ALL_INSTANCES = _TEMP33
    
    let _TEMP34 = ALL_INSTANCES + SDAI.FORCE_OPTIONAL(SDAI.SET<SDAI.GENERIC>(/*SDAI.SET<
      eSOLID_WITH_SHAPE_ELEMENT_PATTERN>*/SOLID_WITH_SHAPE_ELEMENT_PATTERN))
    ALL_INSTANCES = _TEMP34
    
    let _TEMP35 = ALL_INSTANCES + SDAI.FORCE_OPTIONAL(SDAI.SET<SDAI.GENERIC>(/*SDAI.SET<eSOLID_WITH_SLOT>*/
      SOLID_WITH_SLOT))
    ALL_INSTANCES = _TEMP35
    
    let _TEMP36 = ALL_INSTANCES + SDAI.FORCE_OPTIONAL(SDAI.SET<SDAI.GENERIC>(/*SDAI.SET<eSWEPT_AREA_SOLID>*/
      SWEPT_AREA_SOLID))
    ALL_INSTANCES = _TEMP36
    
    let _TEMP37 = ALL_INSTANCES + SDAI.FORCE_OPTIONAL(SDAI.SET<SDAI.GENERIC>(/*SDAI.SET<eSYMBOL_TARGET>*/
      SYMBOL_TARGET))
    ALL_INSTANCES = _TEMP37
    
    let _TEMP38 = ALL_INSTANCES + SDAI.FORCE_OPTIONAL(SDAI.SET<SDAI.GENERIC>(/*SDAI.SET<
      eTWO_DIRECTION_REPEAT_FACTOR>*/TWO_DIRECTION_REPEAT_FACTOR))
    ALL_INSTANCES = _TEMP38
    
    let _TEMP39 = ALL_INSTANCES + SDAI.FORCE_OPTIONAL(SDAI.SET<SDAI.GENERIC>(/*SDAI.SET<
      eUSER_SELECTED_ELEMENTS>*/USER_SELECTED_ELEMENTS))
    ALL_INSTANCES = _TEMP39
    
    let _TEMP40 = SDAI.SIZEOF(ALL_INSTANCES)
    NUMBER_OF_INPUT_INSTANCES = _TEMP40
    if let incrementControl/*SDAI.INTEGER*/ = SDAI.FROM(/*SDAI.INTEGER*/1, TO:/*SDAI.INTEGER*/
      NUMBER_OF_INPUT_INSTANCES) {
      for I in incrementControl {
        
        let _TEMP41 = ALL_INSTANCES?[I]
        let _TEMP42 = SDAI.TYPEOF(_TEMP41)
        let _TEMP43 = SET_OF_INPUT_TYPES + SDAI.FORCE_OPTIONAL(_TEMP42)
        SET_OF_INPUT_TYPES = _TEMP43
      }
    }

    //WHERE
    var _conformance: [SDAI.WhereLabel:SDAI.LOGICAL] = [:]

    let _TEMP44 = DEPENDENTLY_INSTANTIATED(
      SET_OF_INPUT_INSTANCES: ALL_INSTANCES, 
      SET_OF_INPUT_TYPES: SET_OF_INPUT_TYPES, 
      PREVIOUS_IN_CHAIN: PREVIOUS_IN_CHAIN)
    let WHERE_wr1 = SDAI.LOGICAL(/*SDAI.BOOLEAN*/_TEMP44)
    _conformance["WHERE_wr1"] = WHERE_wr1


    return _conformance
  }

}
