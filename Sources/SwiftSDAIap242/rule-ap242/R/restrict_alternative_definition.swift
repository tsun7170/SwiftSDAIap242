/* file: restrict_alternative_definition.swift 	 generated: Sat Aug 14 13:46:02 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -RULE DEFINITION in EXPRESS
/*

  RULE restrict_alternative_definition FOR ( product_definition );

    LOCAL
      solution_definitions : SET OF product_definition := [];
    END_LOCAL;
    solution_definitions := QUERY ( pd <* product_definition | ( pd.frame_of_reference.name = 
        'alternative definition'  ) );

  WHERE
    wr1: ( SIZEOF( QUERY ( pd <* solution_definitions | ( SIZEOF( QUERY ( pdr <* USEDIN( pd, 
             'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PRODUCT_DEFINITION_RELATIONSHIP.'
             + 'RELATED_PRODUCT_DEFINITION'  ) | ( pdr.name = 'solution alternative definition' ) ) ) <> 1 ) ) ) 
             = 0 );
    wr2: ( SIZEOF( QUERY ( pd <* solution_definitions | ( NOT ( pd.name IN [ 'technical', 'supplier', 
             'technical supplier' , ''] ) ) ) ) = 0 );
    wr3: ( SIZEOF( QUERY ( pd <* solution_definitions | ( ( pd.name IN [ 'supplier', 'technical supplier'] ) 
             AND ( SIZEOF( QUERY ( aoa <* USEDIN( pd.formation, 
             'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.APPLIED_ORGANIZATION_ASSIGNMENT.ITEMS'  ) | ( 
             aoa.role.name = 'supplier' ) ) ) <> 1 ) ) ) ) = 0 );

  END_RULE; -- restrict_alternative_definition (line:49347 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static
  func RESTRICT_ALTERNATIVE_DEFINITION( 
    allComplexEntities: AnySequence<SDAI.ComplexEntity> ) -> [SDAI.WhereLabel:SDAI.LOGICAL] {

    //ENTITY REFERENCES
    let PRODUCT_DEFINITION = SDAI.POPULATION(OF: ePRODUCT_DEFINITION.self, FROM: allComplexEntities)

    //LOCAL
    var SOLUTION_DEFINITIONS: SDAI.SET<ePRODUCT_DEFINITION>?  = SDAI.SET<ePRODUCT_DEFINITION>(
                                                                SDAI.EMPLY_AGGREGATE); SDAI.TOUCH(var: &SOLUTION_DEFINITIONS)

    
    let _TEMP1 = PRODUCT_DEFINITION.QUERY{ PD in 

        let _TEMP1 = PD.FRAME_OF_REFERENCE
        let _TEMP2 = _TEMP1.NAME
        let _TEMP3 = SDAI.FORCE_OPTIONAL(_TEMP2) .==. SDAI.FORCE_OPTIONAL(SDAI.STRING("alternative definition"))
        return _TEMP3 }
    SOLUTION_DEFINITIONS = _TEMP1

    //WHERE
    var _conformance: [SDAI.WhereLabel:SDAI.LOGICAL] = [:]

    let _TEMP2 = SOLUTION_DEFINITIONS?
      .QUERY{ PD in 

        let _TEMP1 = SDAI.USEDIN(T: PD, ROLE: \AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF
          .ePRODUCT_DEFINITION_RELATIONSHIP.RELATED_PRODUCT_DEFINITION)
        let _TEMP2 = _TEMP1?.QUERY{ PDR in 

            let _TEMP1 = /*runtime*/PDR.NAME
            let _TEMP2 = SDAI.FORCE_OPTIONAL(/*runtime*/_TEMP1) .==. SDAI.FORCE_OPTIONAL(SDAI.STRING(
              "solution alternative definition"))
            return _TEMP2 }
        let _TEMP3 = SDAI.SIZEOF(_TEMP2)
        let _TEMP4 = _TEMP3 .!=. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
        return _TEMP4 }
    let _TEMP3 = SDAI.SIZEOF(_TEMP2)
    let _TEMP4 = _TEMP3 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
    let WHERE_wr1 = _TEMP4
    _conformance["WHERE_wr1"] = WHERE_wr1


    let _TEMP5 = SOLUTION_DEFINITIONS?
      .QUERY{ PD in 

        let _TEMP1 = PD.NAME
        let _TEMP2 = ([SDAI.AIE(SDAI.STRING("technical")), 
          SDAI.AIE(SDAI.STRING("supplier")), 
          SDAI.AIE(SDAI.STRING("technical supplier")), 
          SDAI.AIE(SDAI.STRING(""))] as [SDAI.AggregationInitializerElement<SDAI.STRING>])
        let _TEMP3 = SDAI.aggregate(_TEMP2, contains: SDAI.STRING(/*tLABEL*/_TEMP1))
        let _TEMP4 =  !_TEMP3
        return _TEMP4 }
    let _TEMP6 = SDAI.SIZEOF(_TEMP5)
    let _TEMP7 = _TEMP6 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
    let WHERE_wr2 = _TEMP7
    _conformance["WHERE_wr2"] = WHERE_wr2


    let _TEMP8 = SOLUTION_DEFINITIONS?
      .QUERY{ PD in 

        let _TEMP1 = PD.NAME
        let _TEMP2 = ([SDAI.AIE(SDAI.STRING("supplier")), 
          SDAI.AIE(SDAI.STRING("technical supplier"))] as [SDAI.AggregationInitializerElement<SDAI.STRING>])
        let _TEMP3 = SDAI.aggregate(_TEMP2, contains: SDAI.STRING(/*tLABEL*/_TEMP1))
        let _TEMP4 = PD.FORMATION
        let _TEMP5 = SDAI.USEDIN(T: _TEMP4, ROLE: \AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF
          .eAPPLIED_ORGANIZATION_ASSIGNMENT.ITEMS)
        let _TEMP6 = _TEMP5?.QUERY{ AOA in 

            let _TEMP1 = /*runtime*/AOA.ROLE
            let _TEMP2 = /*runtime*/SDAI.FORCE_OPTIONAL(_TEMP1)?.NAME
            let _TEMP3 = SDAI.FORCE_OPTIONAL(/*runtime*/_TEMP2) .==. SDAI.FORCE_OPTIONAL(SDAI.STRING("supplier"))
            return _TEMP3 }
        let _TEMP7 = SDAI.SIZEOF(_TEMP6)
        let _TEMP8 = _TEMP7 .!=. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
        let _TEMP9 = _TEMP3 && _TEMP8
        return _TEMP9 }
    let _TEMP9 = SDAI.SIZEOF(_TEMP8)
    let _TEMP10 = _TEMP9 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
    let WHERE_wr3 = _TEMP10
    _conformance["WHERE_wr3"] = WHERE_wr3


    return _conformance
  }

}
