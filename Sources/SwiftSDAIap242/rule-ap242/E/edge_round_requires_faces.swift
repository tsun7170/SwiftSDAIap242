/* file: edge_round_requires_faces.swift 	 generated: Sun Oct 31 15:32:10 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -RULE DEFINITION in EXPRESS
/*

  RULE edge_round_requires_faces FOR ( edge_round, property_definition_representation );

  WHERE
    wr1: ( 0 = SIZEOF( QUERY ( er <* edge_round | ( NOT ( 1 = SIZEOF( QUERY ( pdr <* 
             property_definition_representation | ( ( pdr\property_definition_representation.definition\
             property_definition.definition = er ) AND ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
             + 'FACE_SHAPE_REPRESENTATION'  IN TYPEOF( pdr.used_representation ) ) AND ( pdr.
             used_representation.name = 'edge round face' ) ) ) ) ) ) ) ) );
    wr2: ( SIZEOF( QUERY ( er <* edge_round | ( NOT ( 1 = SIZEOF( QUERY ( pdr <* 
             property_definition_representation | ( ( pdr\property_definition_representation.definition\
             property_definition.definition = er ) AND ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
             + 'FACE_SHAPE_REPRESENTATION'  IN TYPEOF( pdr.used_representation ) ) AND ( pdr.
             used_representation.name = 'first face shape' ) ) ) ) ) ) ) ) = 0 );
    wr3: ( SIZEOF( QUERY ( er <* edge_round | ( NOT ( 1 = SIZEOF( QUERY ( pdr <* 
             property_definition_representation | ( ( pdr\property_definition_representation.definition\
             property_definition.definition = er ) AND ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
             + 'FACE_SHAPE_REPRESENTATION'  IN TYPEOF( pdr.used_representation ) ) AND ( pdr.
             used_representation.name = 'second face shape' ) ) ) ) ) ) ) ) = 0 );

  END_RULE; -- edge_round_requires_faces (line:49097 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static
  func EDGE_ROUND_REQUIRES_FACES( 
    allComplexEntities: AnySequence<SDAI.ComplexEntity> ) -> [SDAI.WhereLabel:SDAI.LOGICAL] {

    //ENTITY REFERENCES
    let EDGE_ROUND = SDAI.POPULATION(OF: eEDGE_ROUND.self, FROM: allComplexEntities)
    let PROPERTY_DEFINITION_REPRESENTATION = 
      SDAI.POPULATION(OF: ePROPERTY_DEFINITION_REPRESENTATION.self, FROM: allComplexEntities)


    //WHERE
    var _conformance: [SDAI.WhereLabel:SDAI.LOGICAL] = [:]

    let _TEMP1 = EDGE_ROUND.QUERY{ ER in 

        let _TEMP1 = PROPERTY_DEFINITION_REPRESENTATION
          .QUERY{ PDR in 

            let _TEMP1 = PDR.GROUP_REF(ePROPERTY_DEFINITION_REPRESENTATION.self)
            let _TEMP2 = _TEMP1?.DEFINITION
            let _TEMP3 = _TEMP2?.GROUP_REF(ePROPERTY_DEFINITION.self)
            let _TEMP4 = _TEMP3?.DEFINITION
            let _TEMP5 = _TEMP4 .==. SDAI.FORCE_OPTIONAL(ER)
            let _TEMP6 = SDAI.TYPEOF(PDR.USED_REPRESENTATION, IS: eFACE_SHAPE_REPRESENTATION.self)
            let _TEMP7 = _TEMP5 && _TEMP6
            let _TEMP8 = PDR.USED_REPRESENTATION
            let _TEMP9 = _TEMP8.NAME
            let _TEMP10 = SDAI.FORCE_OPTIONAL(_TEMP9) .==. SDAI.FORCE_OPTIONAL(SDAI.STRING("edge round face"))
            let _TEMP11 = _TEMP7 && _TEMP10
            return _TEMP11 }
        let _TEMP2 = SDAI.SIZEOF(_TEMP1)
        let _TEMP3 = SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1)) .==. _TEMP2
        let _TEMP4 =  !_TEMP3
        return _TEMP4 }
    let _TEMP2 = SDAI.SIZEOF(_TEMP1)
    let _TEMP3 = SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0)) .==. _TEMP2
    let WHERE_wr1 = _TEMP3
    _conformance["WHERE_wr1"] = WHERE_wr1


    let _TEMP4 = EDGE_ROUND.QUERY{ ER in 

        let _TEMP1 = PROPERTY_DEFINITION_REPRESENTATION
          .QUERY{ PDR in 

            let _TEMP1 = PDR.GROUP_REF(ePROPERTY_DEFINITION_REPRESENTATION.self)
            let _TEMP2 = _TEMP1?.DEFINITION
            let _TEMP3 = _TEMP2?.GROUP_REF(ePROPERTY_DEFINITION.self)
            let _TEMP4 = _TEMP3?.DEFINITION
            let _TEMP5 = _TEMP4 .==. SDAI.FORCE_OPTIONAL(ER)
            let _TEMP6 = SDAI.TYPEOF(PDR.USED_REPRESENTATION, IS: eFACE_SHAPE_REPRESENTATION.self)
            let _TEMP7 = _TEMP5 && _TEMP6
            let _TEMP8 = PDR.USED_REPRESENTATION
            let _TEMP9 = _TEMP8.NAME
            let _TEMP10 = SDAI.FORCE_OPTIONAL(_TEMP9) .==. SDAI.FORCE_OPTIONAL(SDAI.STRING("first face shape"))
            let _TEMP11 = _TEMP7 && _TEMP10
            return _TEMP11 }
        let _TEMP2 = SDAI.SIZEOF(_TEMP1)
        let _TEMP3 = SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1)) .==. _TEMP2
        let _TEMP4 =  !_TEMP3
        return _TEMP4 }
    let _TEMP5 = SDAI.SIZEOF(_TEMP4)
    let _TEMP6 = _TEMP5 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
    let WHERE_wr2 = _TEMP6
    _conformance["WHERE_wr2"] = WHERE_wr2


    let _TEMP7 = EDGE_ROUND.QUERY{ ER in 

        let _TEMP1 = PROPERTY_DEFINITION_REPRESENTATION
          .QUERY{ PDR in 

            let _TEMP1 = PDR.GROUP_REF(ePROPERTY_DEFINITION_REPRESENTATION.self)
            let _TEMP2 = _TEMP1?.DEFINITION
            let _TEMP3 = _TEMP2?.GROUP_REF(ePROPERTY_DEFINITION.self)
            let _TEMP4 = _TEMP3?.DEFINITION
            let _TEMP5 = _TEMP4 .==. SDAI.FORCE_OPTIONAL(ER)
            let _TEMP6 = SDAI.TYPEOF(PDR.USED_REPRESENTATION, IS: eFACE_SHAPE_REPRESENTATION.self)
            let _TEMP7 = _TEMP5 && _TEMP6
            let _TEMP8 = PDR.USED_REPRESENTATION
            let _TEMP9 = _TEMP8.NAME
            let _TEMP10 = SDAI.FORCE_OPTIONAL(_TEMP9) .==. SDAI.FORCE_OPTIONAL(SDAI.STRING("second face shape"))
            let _TEMP11 = _TEMP7 && _TEMP10
            return _TEMP11 }
        let _TEMP2 = SDAI.SIZEOF(_TEMP1)
        let _TEMP3 = SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1)) .==. _TEMP2
        let _TEMP4 =  !_TEMP3
        return _TEMP4 }
    let _TEMP8 = SDAI.SIZEOF(_TEMP7)
    let _TEMP9 = _TEMP8 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
    let WHERE_wr3 = _TEMP9
    _conformance["WHERE_wr3"] = WHERE_wr3


    return _conformance
  }

}
