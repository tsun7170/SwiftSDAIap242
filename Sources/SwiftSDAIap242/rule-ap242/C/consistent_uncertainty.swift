/* file: consistent_uncertainty.swift 	 generated: Sun Oct 31 15:32:10 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -RULE DEFINITION in EXPRESS
/*

  RULE consistent_uncertainty FOR ( global_uncertainty_assigned_context, qualified_representation_item, 
    uncertainty_assigned_representation );

  WHERE
    wr1: ( SIZEOF( QUERY ( guac <* global_uncertainty_assigned_context | ( SIZEOF( QUERY ( u1 <* guac.
             uncertainty | ( SIZEOF( QUERY ( u2 <* guac.uncertainty | ( u2.name = u1.name ) ) ) > 1 ) ) ) > 0 ) ) ) 
             = 0 );
    wr2: ( SIZEOF( QUERY ( uar <* uncertainty_assigned_representation | ( SIZEOF( QUERY ( u1 <* uar.
             uncertainty | ( SIZEOF( QUERY ( u2 <* uar.uncertainty | ( u2.name = u1.name ) ) ) > 1 ) ) ) > 0 ) ) ) 
             = 0 );
    wr3: ( SIZEOF( QUERY ( qri <* qualified_representation_item | ( SIZEOF( QUERY ( u1 <* qri.qualifiers | ( 
             ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.UNCERTAINTY_QUALIFIER' IN TYPEOF( u1 ) ) AND 
             ( SIZEOF( QUERY ( u2 <* qri.qualifiers | ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
             + 'UNCERTAINTY_QUALIFIER'  IN TYPEOF( u2 ) ) AND ( u2\uncertainty_qualifier.measure_name = u1\
             uncertainty_qualifier.measure_name ) ) ) ) > 1 ) ) ) ) > 0 ) ) ) = 0 );

  END_RULE; -- consistent_uncertainty (line:48973 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static
  func CONSISTENT_UNCERTAINTY( 
    allComplexEntities: AnySequence<SDAI.ComplexEntity> ) -> [SDAI.WhereLabel:SDAI.LOGICAL] {

    //ENTITY REFERENCES
    let GLOBAL_UNCERTAINTY_ASSIGNED_CONTEXT = 
      SDAI.POPULATION(OF: eGLOBAL_UNCERTAINTY_ASSIGNED_CONTEXT.self, FROM: allComplexEntities)
    let QUALIFIED_REPRESENTATION_ITEM = 
      SDAI.POPULATION(OF: eQUALIFIED_REPRESENTATION_ITEM.self, FROM: allComplexEntities)
    let UNCERTAINTY_ASSIGNED_REPRESENTATION = 
      SDAI.POPULATION(OF: eUNCERTAINTY_ASSIGNED_REPRESENTATION.self, FROM: allComplexEntities)


    //WHERE
    var _conformance: [SDAI.WhereLabel:SDAI.LOGICAL] = [:]

    let _TEMP1 = GLOBAL_UNCERTAINTY_ASSIGNED_CONTEXT
      .QUERY{ GUAC in 

        let _TEMP1 = GUAC.UNCERTAINTY
        let _TEMP2 = _TEMP1.QUERY{ U1 in 

            let _TEMP1 = GUAC.UNCERTAINTY
            let _TEMP2 = _TEMP1.QUERY{ U2 in 

                let _TEMP1 = U2.NAME
                let _TEMP2 = U1.NAME
                let _TEMP3 = SDAI.FORCE_OPTIONAL(_TEMP1) .==. SDAI.FORCE_OPTIONAL(_TEMP2)
                return _TEMP3 }
            let _TEMP3 = SDAI.SIZEOF(_TEMP2)
            let _TEMP4 = _TEMP3 > SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
            return _TEMP4 }
        let _TEMP3 = SDAI.SIZEOF(_TEMP2)
        let _TEMP4 = _TEMP3 > SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
        return _TEMP4 }
    let _TEMP2 = SDAI.SIZEOF(_TEMP1)
    let _TEMP3 = _TEMP2 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
    let WHERE_wr1 = _TEMP3
    _conformance["WHERE_wr1"] = WHERE_wr1


    let _TEMP4 = UNCERTAINTY_ASSIGNED_REPRESENTATION
      .QUERY{ UAR in 

        let _TEMP1 = UAR.UNCERTAINTY
        let _TEMP2 = _TEMP1.QUERY{ U1 in 

            let _TEMP1 = UAR.UNCERTAINTY
            let _TEMP2 = _TEMP1.QUERY{ U2 in 

                let _TEMP1 = U2.NAME
                let _TEMP2 = U1.NAME
                let _TEMP3 = SDAI.FORCE_OPTIONAL(_TEMP1) .==. SDAI.FORCE_OPTIONAL(_TEMP2)
                return _TEMP3 }
            let _TEMP3 = SDAI.SIZEOF(_TEMP2)
            let _TEMP4 = _TEMP3 > SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
            return _TEMP4 }
        let _TEMP3 = SDAI.SIZEOF(_TEMP2)
        let _TEMP4 = _TEMP3 > SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
        return _TEMP4 }
    let _TEMP5 = SDAI.SIZEOF(_TEMP4)
    let _TEMP6 = _TEMP5 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
    let WHERE_wr2 = _TEMP6
    _conformance["WHERE_wr2"] = WHERE_wr2


    let _TEMP7 = QUALIFIED_REPRESENTATION_ITEM
      .QUERY{ QRI in 

        let _TEMP1 = QRI.QUALIFIERS
        let _TEMP2 = _TEMP1.QUERY{ U1 in 

            let _TEMP1 = SDAI.TYPEOF(U1, IS: eUNCERTAINTY_QUALIFIER.self)
            let _TEMP2 = QRI.QUALIFIERS
            let _TEMP3 = _TEMP2.QUERY{ U2 in 

                let _TEMP1 = SDAI.TYPEOF(U2, IS: eUNCERTAINTY_QUALIFIER.self)
                let _TEMP2 = U2.GROUP_REF(eUNCERTAINTY_QUALIFIER.self)
                let _TEMP3 = _TEMP2?.MEASURE_NAME
                let _TEMP4 = U1.GROUP_REF(eUNCERTAINTY_QUALIFIER.self)
                let _TEMP5 = _TEMP4?.MEASURE_NAME
                let _TEMP6 = _TEMP3 .==. _TEMP5
                let _TEMP7 = _TEMP1 && _TEMP6
                return _TEMP7 }
            let _TEMP4 = SDAI.SIZEOF(_TEMP3)
            let _TEMP5 = _TEMP4 > SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
            let _TEMP6 = _TEMP1 && _TEMP5
            return _TEMP6 }
        let _TEMP3 = SDAI.SIZEOF(_TEMP2)
        let _TEMP4 = _TEMP3 > SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
        return _TEMP4 }
    let _TEMP8 = SDAI.SIZEOF(_TEMP7)
    let _TEMP9 = _TEMP8 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
    let WHERE_wr3 = _TEMP9
    _conformance["WHERE_wr3"] = WHERE_wr3


    return _conformance
  }

}
