/* file: alternative_solution_requires_solution_definition.swift 	 generated: Sun Oct 31 15:32:10 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -RULE DEFINITION in EXPRESS
/*

  RULE alternative_solution_requires_solution_definition FOR ( product_definition_formation );

    LOCAL
      solution_versions : SET OF product_definition_formation := [];
    END_LOCAL;
    solution_versions := QUERY ( pdf <* product_definition_formation | ( SIZEOF( QUERY ( prpc <* USEDIN( pdf.
        of_product, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PRODUCT_RELATED_PRODUCT_CATEGORY.'
        + 'PRODUCTS'  ) | ( prpc.name = 'alternative solution' ) ) ) = 1 ) );

  WHERE
    wr1: ( SIZEOF( QUERY ( pdf <* solution_versions | ( SIZEOF( QUERY ( pd <* USEDIN( pdf, 
             'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PRODUCT_DEFINITION.FORMATION'  ) | ( pd.
             frame_of_reference.name = 'alternative definition' ) ) ) <> 1 ) ) ) = 0 );

  END_RULE; -- alternative_solution_requires_solution_definition (line:48818 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static
  func ALTERNATIVE_SOLUTION_REQUIRES_SOLUTION_DEFINITION( 
    allComplexEntities: AnySequence<SDAI.ComplexEntity> ) -> [SDAI.WhereLabel:SDAI.LOGICAL] {

    //ENTITY REFERENCES
    let PRODUCT_DEFINITION_FORMATION = 
      SDAI.POPULATION(OF: ePRODUCT_DEFINITION_FORMATION.self, FROM: allComplexEntities)

    //LOCAL
    var SOLUTION_VERSIONS: SDAI.SET<ePRODUCT_DEFINITION_FORMATION>?  = SDAI.SET<ePRODUCT_DEFINITION_FORMATION>(
                                                                       SDAI.EMPLY_AGGREGATE); SDAI.TOUCH(var: &SOLUTION_VERSIONS)

    
    let _TEMP1 = PRODUCT_DEFINITION_FORMATION
      .QUERY{ PDF in 

        let _TEMP1 = PDF.OF_PRODUCT
        let _TEMP2 = SDAI.USEDIN(T: _TEMP1, ROLE: \AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF
          .ePRODUCT_RELATED_PRODUCT_CATEGORY.PRODUCTS)
        let _TEMP3 = _TEMP2.QUERY{ PRPC in 

            let _TEMP1 = /*runtime*/PRPC.NAME
            let _TEMP2 = SDAI.FORCE_OPTIONAL(/*runtime*/_TEMP1) .==. SDAI.FORCE_OPTIONAL(SDAI.STRING(
              "alternative solution"))
            return _TEMP2 }
        let _TEMP4 = SDAI.SIZEOF(_TEMP3)
        let _TEMP5 = _TEMP4 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
        return _TEMP5 }
    SOLUTION_VERSIONS = _TEMP1

    //WHERE
    var _conformance: [SDAI.WhereLabel:SDAI.LOGICAL] = [:]

    let _TEMP2 = SOLUTION_VERSIONS?.QUERY{ PDF in 

        let _TEMP1 = SDAI.USEDIN(T: PDF, ROLE: \AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF
          .ePRODUCT_DEFINITION.FORMATION)
        let _TEMP2 = _TEMP1.QUERY{ PD in 

            let _TEMP1 = /*runtime*/PD.FRAME_OF_REFERENCE
            let _TEMP2 = /*runtime*/SDAI.FORCE_OPTIONAL(_TEMP1)?.NAME
            let _TEMP3 = SDAI.FORCE_OPTIONAL(/*runtime*/_TEMP2) .==. SDAI.FORCE_OPTIONAL(SDAI.STRING(
              "alternative definition"))
            return _TEMP3 }
        let _TEMP3 = SDAI.SIZEOF(_TEMP2)
        let _TEMP4 = _TEMP3 .!=. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
        return _TEMP4 }
    let _TEMP3 = SDAI.SIZEOF(_TEMP2)
    let _TEMP4 = _TEMP3 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
    let WHERE_wr1 = _TEMP4
    _conformance["WHERE_wr1"] = WHERE_wr1


    return _conformance
  }

}
