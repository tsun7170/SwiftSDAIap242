/* file: transformation.swift 	 generated: Sat Aug 14 13:46:02 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -TYPE DEFINITION in EXPRESS
/*
  TYPE transformation = SELECT
    ( functionally_defined_transformation (*ENTITY*),
     item_defined_transformation (*ENTITY*),
     list_item_defined_transformation (*TYPE*),
     set_item_defined_transformation (*TYPE*) );
  END_TYPE; -- transformation (line:5866 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES FOR SELECT
/*
  functionally_defined_transformation (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  scale: REAL
  ATTR:  u: (AMBIGUOUS (CASE LEVEL))
  ATTR:  local_origin: cartesian_point
  ATTR:  scl: REAL
  ATTR:  axis3: direction
  ATTR:  axis2: direction
  ATTR:  axis1: direction
  ATTR:  name: label *** Multiple Select Case Sources ***

  item_defined_transformation (*ENTITY*):
  ATTR:  lower_limit_pitch: (AMBIGUOUS (CASE LEVEL))
  ATTR:  range_on_surface_1: rectangular_trimmed_surface
  ATTR:  range_on_surface_2: rectangular_trimmed_surface
  ATTR:  range_on_pair_curve: trimmed_curve
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  curve_1: curve
  ATTR:  curve_2: curve
  ATTR:  range_on_curve_2: trimmed_curve
  ATTR:  range_on_curve_1: trimmed_curve
  ATTR:  gear_ratio: REAL
  ATTR:  r_y: (AMBIGUOUS (CASE LEVEL))
  ATTR:  r_x: (AMBIGUOUS (CASE LEVEL))
  ATTR:  pinion_radius: (AMBIGUOUS (CASE LEVEL))
  ATTR:  r_z: (AMBIGUOUS (CASE LEVEL))
  ATTR:  link_representation_associations: SET [1 : ?] OF pair_representation_relationship
  ATTR:  upper_limit_actual_translation_z: length_measure
  ATTR:  lower_limit_rack_displacement: length_measure
  ATTR:  upper_limit_actual_translation_x: (AMBIGUOUS (CASE LEVEL))
  ATTR:  upper_limit_actual_translation_y: (AMBIGUOUS (CASE LEVEL))
  ATTR:  orientation: (AMBIGUOUS (CASE LEVEL))
  ATTR:  pitch: length_measure
  ATTR:  upper_limit_actual_rotation_1: plane_angle_measure
  ATTR:  bevel: plane_angle_measure
  ATTR:  orientation_angle: plane_angle_measure
  ATTR:  transform_item_1: representation_item
  ATTR:  transform_item_2: representation_item
  ATTR:  lower_limit_second_rotation: plane_angle_measure
  ATTR:  radius_second_link: length_measure
  ATTR:  upper_limit_first_rotation: plane_angle_measure
  ATTR:  lower_limit_actual_rotation_1: plane_angle_measure
  ATTR:  lower_limit_actual_translation_z: length_measure
  ATTR:  lower_limit_actual_translation_y: (AMBIGUOUS (CASE LEVEL))
  ATTR:  lower_limit_actual_translation_x: (AMBIGUOUS (CASE LEVEL))
  ATTR:  upper_limit_roll: (AMBIGUOUS (CASE LEVEL))
  ATTR:  lower_limit_yaw: (AMBIGUOUS (CASE LEVEL))
  ATTR:  helical_angle: plane_angle_measure
  ATTR:  pair_surface: surface
  ATTR:  input_skew_angle: plane_angle_measure
  ATTR:  skew_angle: plane_angle_measure
  ATTR:  upper_limit_actual_rotation_y: plane_angle_measure
  ATTR:  upper_limit_actual_rotation_x: plane_angle_measure
  ATTR:  upper_limit_actual_rotation_z: plane_angle_measure
  ATTR:  pair_curve: (AMBIGUOUS (CASE LEVEL))
  ATTR:  range_on_pair_surface: rectangular_trimmed_surface
  ATTR:  joint: kinematic_joint
  ATTR:  lower_limit_actual_rotation: (AMBIGUOUS (CASE LEVEL))
  ATTR:  upper_limit_rack_displacement: length_measure
  ATTR:  lower_limit_actual_rotation_x: plane_angle_measure
  ATTR:  lower_limit_actual_rotation_y: plane_angle_measure
  ATTR:  lower_limit_actual_rotation_z: plane_angle_measure
  ATTR:  lower_limit_first_rotation: plane_angle_measure
  ATTR:  t_z: (AMBIGUOUS (CASE LEVEL))
  ATTR:  t_y: (AMBIGUOUS (CASE LEVEL))
  ATTR:  t_x: (AMBIGUOUS (CASE LEVEL))
  ATTR:  upper_limit_pitch: (AMBIGUOUS (CASE LEVEL))
  ATTR:  upper_limit_yaw: (AMBIGUOUS (CASE LEVEL))
  ATTR:  radius_first_link: length_measure
  ATTR:  surface_2: surface
  ATTR:  associated_link_representations_1: SET [1 : ?] OF kinematic_link_representation
  ATTR:  surface_1: surface
  ATTR:  associated_link_representations_2: SET [1 : ?] OF kinematic_link_representation
  ATTR:  upper_limit_second_rotation: plane_angle_measure
  ATTR:  upper_limit_actual_rotation: (AMBIGUOUS (CASE LEVEL))
  ATTR:  lower_limit_roll: (AMBIGUOUS (CASE LEVEL))
  ATTR:  upper_limit_actual_translation: (AMBIGUOUS (CASE LEVEL))
  ATTR:  name: label *** Multiple Select Case Sources ***
  ATTR:  lower_limit_actual_translation: (AMBIGUOUS (CASE LEVEL))

  list_item_defined_transformation (*TYPE*): list_item_defined_transformation

  set_item_defined_transformation (*TYPE*): set_item_defined_transformation

*/

/** SELECT type
- EXPRESS:
```express
  TYPE transformation = SELECT
    ( functionally_defined_transformation (*ENTITY*),
     item_defined_transformation (*ENTITY*),
     list_item_defined_transformation (*TYPE*),
     set_item_defined_transformation (*TYPE*) );
  END_TYPE; -- transformation (line:5866 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public enum sTRANSFORMATION : SDAIValue, AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sTRANSFORMATION__type {

    /// SELECT case ``eFUNCTIONALLY_DEFINED_TRANSFORMATION`` (ENTITY) in ``sTRANSFORMATION``
    case _FUNCTIONALLY_DEFINED_TRANSFORMATION(eFUNCTIONALLY_DEFINED_TRANSFORMATION)	// (ENTITY)

    /// SELECT case ``eITEM_DEFINED_TRANSFORMATION`` (ENTITY) in ``sTRANSFORMATION``
    case _ITEM_DEFINED_TRANSFORMATION(eITEM_DEFINED_TRANSFORMATION)	// (ENTITY)

    /// SELECT case ``tLIST_ITEM_DEFINED_TRANSFORMATION`` (TYPE) in ``sTRANSFORMATION``
    case _LIST_ITEM_DEFINED_TRANSFORMATION(tLIST_ITEM_DEFINED_TRANSFORMATION)	// (TYPE)

    /// SELECT case ``tSET_ITEM_DEFINED_TRANSFORMATION`` (TYPE) in ``sTRANSFORMATION``
    case _SET_ITEM_DEFINED_TRANSFORMATION(tSET_ITEM_DEFINED_TRANSFORMATION)	// (TYPE)

    //MARK: - CONSTRUCTORS
    public init(fundamental: FundamentalType) { self = fundamental }

    public init?<T: SDAIUnderlyingType>(possiblyFrom underlyingType: T?){
      guard let underlyingType = underlyingType else { return nil }

      if let base = underlyingType as? tLIST_ITEM_DEFINED_TRANSFORMATION {
        self = ._LIST_ITEM_DEFINED_TRANSFORMATION(base)
      }
      else if let base = underlyingType as? tSET_ITEM_DEFINED_TRANSFORMATION {
        self = ._SET_ITEM_DEFINED_TRANSFORMATION(base)
      }
      else if let fundamental = underlyingType.asFundamentalType as? tLIST_ITEM_DEFINED_TRANSFORMATION.FundamentalType {
        self = ._LIST_ITEM_DEFINED_TRANSFORMATION( tLIST_ITEM_DEFINED_TRANSFORMATION(fundamental: fundamental) )
      }
      else if let fundamental = underlyingType.asFundamentalType as? tSET_ITEM_DEFINED_TRANSFORMATION.FundamentalType {
        self = ._SET_ITEM_DEFINED_TRANSFORMATION( tSET_ITEM_DEFINED_TRANSFORMATION(fundamental: fundamental) )
      }
      else { return nil }
    }

    public init?(possiblyFrom complex: SDAI.ComplexEntity?) {
      guard let complex = complex else { return nil }

      if let base = complex.entityReference(eFUNCTIONALLY_DEFINED_TRANSFORMATION.self) {self = ._FUNCTIONALLY_DEFINED_TRANSFORMATION(base) }
      else if let base = complex.entityReference(eITEM_DEFINED_TRANSFORMATION.self) {self = ._ITEM_DEFINED_TRANSFORMATION(base) }
      else { return nil }
    }

    public init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let select = generic else { return nil }

      if let fundamental = select as? Self {
        self.init(fundamental: fundamental)
      }
      else if let base = eFUNCTIONALLY_DEFINED_TRANSFORMATION.convert(fromGeneric: select) {
        self = ._FUNCTIONALLY_DEFINED_TRANSFORMATION(base)
      }
      else if let base = eITEM_DEFINED_TRANSFORMATION.convert(fromGeneric: select) {
        self = ._ITEM_DEFINED_TRANSFORMATION(base)
      }
      else if let base = tLIST_ITEM_DEFINED_TRANSFORMATION.convert(fromGeneric: select) {
        self = ._LIST_ITEM_DEFINED_TRANSFORMATION(base)
      }
      else if let base = tSET_ITEM_DEFINED_TRANSFORMATION.convert(fromGeneric: select) {
        self = ._SET_ITEM_DEFINED_TRANSFORMATION(base)
      }
      else { return nil }
    }

    // InitializableByP21Parameter
    public static var bareTypeName: String = "TRANSFORMATION"

    public init?(p21typedParam: P21Decode.ExchangeStructure.TypedParameter, from exchangeStructure: P21Decode.ExchangeStructure) {
      guard let keyword = p21typedParam.keyword.asStandardKeyword else { exchangeStructure.error = "unexpected p21parameter(\(p21typedParam)) while resolving \(Self.bareTypeName) select value"; return nil }

      switch(keyword) {
      case tLIST_ITEM_DEFINED_TRANSFORMATION.bareTypeName:
        guard let base = tLIST_ITEM_DEFINED_TRANSFORMATION(p21typedParam: p21typedParam, from: exchangeStructure) else { exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) select value"); return nil }
        self = ._LIST_ITEM_DEFINED_TRANSFORMATION(base)

      case tSET_ITEM_DEFINED_TRANSFORMATION.bareTypeName:
        guard let base = tSET_ITEM_DEFINED_TRANSFORMATION(p21typedParam: p21typedParam, from: exchangeStructure) else { exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) select value"); return nil }
        self = ._SET_ITEM_DEFINED_TRANSFORMATION(base)

      default:
        exchangeStructure.error = "unexpected p21parameter(\(p21typedParam)) while resolving \(Self.bareTypeName) select value"
        return nil
      }
    }

    public init?(p21untypedParam: P21Decode.ExchangeStructure.UntypedParameter, from exchangeStructure: P21Decode.ExchangeStructure) {
      switch p21untypedParam {
      case .rhsOccurenceName(let rhsname):
        switch rhsname {
        case .constantEntityName(let name):
          guard let entity = exchangeStructure.resolve(constantEntityName: name) else {exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) instance"); return nil }
          self.init(possiblyFrom: entity.complexEntity)

        case .entityInstanceName(let name):
          guard let complex = exchangeStructure.resolve(entityInstanceName: name) else {exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) instance"); return nil }
          self.init(possiblyFrom: complex)

        default:
          exchangeStructure.error = "unexpected p21parameter(\(p21untypedParam)) while resolving \(Self.bareTypeName) select instance"
          return nil
        }

      default:
        exchangeStructure.error = "unexpected p21parameter(\(p21untypedParam)) while resolving \(Self.bareTypeName) select instance"
        return nil
      }
    }

    public init?(p21omittedParamfrom exchangeStructure: P21Decode.ExchangeStructure) {
      return nil
    }


    //MARK: - NON-ENTITY UNDERLYING TYPE REFERENCES
    public var super_tLIST_ITEM_DEFINED_TRANSFORMATION: tLIST_ITEM_DEFINED_TRANSFORMATION? {
      switch self {
      case ._LIST_ITEM_DEFINED_TRANSFORMATION(let selectValue): return selectValue
      default: return nil
      }
    }

    public var super_tSET_ITEM_DEFINED_TRANSFORMATION: tSET_ITEM_DEFINED_TRANSFORMATION? {
      switch self {
      case ._SET_ITEM_DEFINED_TRANSFORMATION(let selectValue): return selectValue
      default: return nil
      }
    }

    //MARK: - ENTITY UNDERLYING TYPE REFERENCES
    public var super_eITEM_DEFINED_TRANSFORMATION: eITEM_DEFINED_TRANSFORMATION? {
      switch self {
      case ._ITEM_DEFINED_TRANSFORMATION(let entity): return entity
      default: return nil
      }
    }

    public var super_eFUNCTIONALLY_DEFINED_TRANSFORMATION: eFUNCTIONALLY_DEFINED_TRANSFORMATION? {
      switch self {
      case ._FUNCTIONALLY_DEFINED_TRANSFORMATION(let entity): return entity
      default: return nil
      }
    }


    //MARK: - ENTITY ATTRIBUTE REFERENCES
    /// attribute of SELECT type ``sTRANSFORMATION``
    /// - origin: ENTITY( ``eITEM_DEFINED_TRANSFORMATION`` )
    public var RANGE_ON_SURFACE_1: eRECTANGULAR_TRIMMED_SURFACE?  {
      switch self {
      case ._ITEM_DEFINED_TRANSFORMATION(let entity): return entity.RANGE_ON_SURFACE_1
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRANSFORMATION``
    /// - origin: ENTITY( ``eITEM_DEFINED_TRANSFORMATION`` )
    public var RANGE_ON_SURFACE_2: eRECTANGULAR_TRIMMED_SURFACE?  {
      switch self {
      case ._ITEM_DEFINED_TRANSFORMATION(let entity): return entity.RANGE_ON_SURFACE_2
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRANSFORMATION``
    /// - origin: ENTITY( ``eITEM_DEFINED_TRANSFORMATION`` )
    public var RANGE_ON_PAIR_CURVE: eTRIMMED_CURVE?  {
      switch self {
      case ._ITEM_DEFINED_TRANSFORMATION(let entity): return entity.RANGE_ON_PAIR_CURVE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRANSFORMATION``
    /// - origin: ENTITY( ``eFUNCTIONALLY_DEFINED_TRANSFORMATION`` )
    /// - origin: ENTITY( ``eITEM_DEFINED_TRANSFORMATION`` )
    public var DESCRIPTION: tTEXT?  {
      switch self {
      case ._FUNCTIONALLY_DEFINED_TRANSFORMATION(let entity): return entity.DESCRIPTION
      case ._ITEM_DEFINED_TRANSFORMATION(let entity): return entity.DESCRIPTION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRANSFORMATION``
    /// - origin: ENTITY( ``eITEM_DEFINED_TRANSFORMATION`` )
    public var CURVE_1: eCURVE?  {
      switch self {
      case ._ITEM_DEFINED_TRANSFORMATION(let entity): return entity.CURVE_1
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRANSFORMATION``
    /// - origin: ENTITY( ``eITEM_DEFINED_TRANSFORMATION`` )
    public var CURVE_2: eCURVE?  {
      switch self {
      case ._ITEM_DEFINED_TRANSFORMATION(let entity): return entity.CURVE_2
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRANSFORMATION``
    /// - origin: ENTITY( ``eFUNCTIONALLY_DEFINED_TRANSFORMATION`` )
    public var SCALE: SDAI.REAL?  {
      switch self {
      case ._FUNCTIONALLY_DEFINED_TRANSFORMATION(let entity): return entity.SCALE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRANSFORMATION``
    /// - origin: ENTITY( ``eITEM_DEFINED_TRANSFORMATION`` )
    public var RANGE_ON_CURVE_2: eTRIMMED_CURVE?  {
      switch self {
      case ._ITEM_DEFINED_TRANSFORMATION(let entity): return entity.RANGE_ON_CURVE_2
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRANSFORMATION``
    /// - origin: ENTITY( ``eITEM_DEFINED_TRANSFORMATION`` )
    public var RANGE_ON_CURVE_1: eTRIMMED_CURVE?  {
      switch self {
      case ._ITEM_DEFINED_TRANSFORMATION(let entity): return entity.RANGE_ON_CURVE_1
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRANSFORMATION``
    /// - origin: ENTITY( ``eITEM_DEFINED_TRANSFORMATION`` )
    public var GEAR_RATIO: SDAI.REAL?  {
      switch self {
      case ._ITEM_DEFINED_TRANSFORMATION(let entity): return entity.GEAR_RATIO
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRANSFORMATION``
    /// - origin: ENTITY( ``eITEM_DEFINED_TRANSFORMATION`` )
    public var LINK_REPRESENTATION_ASSOCIATIONS: (SDAI.SET<ePAIR_REPRESENTATION_RELATIONSHIP>/*[1:nil]*/ )?  {
      switch self {
      case ._ITEM_DEFINED_TRANSFORMATION(let entity): return entity.LINK_REPRESENTATION_ASSOCIATIONS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRANSFORMATION``
    /// - origin: ENTITY( ``eITEM_DEFINED_TRANSFORMATION`` )
    public var UPPER_LIMIT_ACTUAL_TRANSLATION_Z: tLENGTH_MEASURE?  {
      switch self {
      case ._ITEM_DEFINED_TRANSFORMATION(let entity): return entity.UPPER_LIMIT_ACTUAL_TRANSLATION_Z
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRANSFORMATION``
    /// - origin: ENTITY( ``eITEM_DEFINED_TRANSFORMATION`` )
    public var LOWER_LIMIT_RACK_DISPLACEMENT: tLENGTH_MEASURE?  {
      switch self {
      case ._ITEM_DEFINED_TRANSFORMATION(let entity): return entity.LOWER_LIMIT_RACK_DISPLACEMENT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRANSFORMATION``
    /// - origin: ENTITY( ``eITEM_DEFINED_TRANSFORMATION`` )
    public var PITCH: tLENGTH_MEASURE?  {
      switch self {
      case ._ITEM_DEFINED_TRANSFORMATION(let entity): return entity.PITCH
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRANSFORMATION``
    /// - origin: ENTITY( ``eITEM_DEFINED_TRANSFORMATION`` )
    public var UPPER_LIMIT_ACTUAL_ROTATION_1: tPLANE_ANGLE_MEASURE?  {
      switch self {
      case ._ITEM_DEFINED_TRANSFORMATION(let entity): return entity.UPPER_LIMIT_ACTUAL_ROTATION_1
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRANSFORMATION``
    /// - origin: ENTITY( ``eITEM_DEFINED_TRANSFORMATION`` )
    public var BEVEL: tPLANE_ANGLE_MEASURE?  {
      switch self {
      case ._ITEM_DEFINED_TRANSFORMATION(let entity): return entity.BEVEL
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRANSFORMATION``
    /// - origin: ENTITY( ``eITEM_DEFINED_TRANSFORMATION`` )
    public var ORIENTATION_ANGLE: tPLANE_ANGLE_MEASURE?  {
      switch self {
      case ._ITEM_DEFINED_TRANSFORMATION(let entity): return entity.ORIENTATION_ANGLE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRANSFORMATION``
    /// - origin: ENTITY( ``eFUNCTIONALLY_DEFINED_TRANSFORMATION`` )
    public var LOCAL_ORIGIN: eCARTESIAN_POINT?  {
      switch self {
      case ._FUNCTIONALLY_DEFINED_TRANSFORMATION(let entity): return entity.LOCAL_ORIGIN
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRANSFORMATION``
    /// - origin: ENTITY( ``eFUNCTIONALLY_DEFINED_TRANSFORMATION`` )
    public var SCL: SDAI.REAL?  {
      switch self {
      case ._FUNCTIONALLY_DEFINED_TRANSFORMATION(let entity): return entity.SCL
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRANSFORMATION``
    /// - origin: ENTITY( ``eITEM_DEFINED_TRANSFORMATION`` )
    public var TRANSFORM_ITEM_1: eREPRESENTATION_ITEM?  {
      switch self {
      case ._ITEM_DEFINED_TRANSFORMATION(let entity): return entity.TRANSFORM_ITEM_1
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRANSFORMATION``
    /// - origin: ENTITY( ``eITEM_DEFINED_TRANSFORMATION`` )
    public var TRANSFORM_ITEM_2: eREPRESENTATION_ITEM?  {
      switch self {
      case ._ITEM_DEFINED_TRANSFORMATION(let entity): return entity.TRANSFORM_ITEM_2
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRANSFORMATION``
    /// - origin: ENTITY( ``eITEM_DEFINED_TRANSFORMATION`` )
    public var LOWER_LIMIT_SECOND_ROTATION: tPLANE_ANGLE_MEASURE?  {
      switch self {
      case ._ITEM_DEFINED_TRANSFORMATION(let entity): return entity.LOWER_LIMIT_SECOND_ROTATION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRANSFORMATION``
    /// - origin: ENTITY( ``eITEM_DEFINED_TRANSFORMATION`` )
    public var RADIUS_SECOND_LINK: tLENGTH_MEASURE?  {
      switch self {
      case ._ITEM_DEFINED_TRANSFORMATION(let entity): return entity.RADIUS_SECOND_LINK
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRANSFORMATION``
    /// - origin: ENTITY( ``eITEM_DEFINED_TRANSFORMATION`` )
    public var UPPER_LIMIT_FIRST_ROTATION: tPLANE_ANGLE_MEASURE?  {
      switch self {
      case ._ITEM_DEFINED_TRANSFORMATION(let entity): return entity.UPPER_LIMIT_FIRST_ROTATION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRANSFORMATION``
    /// - origin: ENTITY( ``eITEM_DEFINED_TRANSFORMATION`` )
    public var LOWER_LIMIT_ACTUAL_ROTATION_1: tPLANE_ANGLE_MEASURE?  {
      switch self {
      case ._ITEM_DEFINED_TRANSFORMATION(let entity): return entity.LOWER_LIMIT_ACTUAL_ROTATION_1
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRANSFORMATION``
    /// - origin: ENTITY( ``eITEM_DEFINED_TRANSFORMATION`` )
    public var LOWER_LIMIT_ACTUAL_TRANSLATION_Z: tLENGTH_MEASURE?  {
      switch self {
      case ._ITEM_DEFINED_TRANSFORMATION(let entity): return entity.LOWER_LIMIT_ACTUAL_TRANSLATION_Z
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRANSFORMATION``
    /// - origin: ENTITY( ``eITEM_DEFINED_TRANSFORMATION`` )
    public var HELICAL_ANGLE: tPLANE_ANGLE_MEASURE?  {
      switch self {
      case ._ITEM_DEFINED_TRANSFORMATION(let entity): return entity.HELICAL_ANGLE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRANSFORMATION``
    /// - origin: ENTITY( ``eITEM_DEFINED_TRANSFORMATION`` )
    public var PAIR_SURFACE: eSURFACE?  {
      switch self {
      case ._ITEM_DEFINED_TRANSFORMATION(let entity): return entity.PAIR_SURFACE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRANSFORMATION``
    /// - origin: ENTITY( ``eFUNCTIONALLY_DEFINED_TRANSFORMATION`` )
    public var AXIS3: eDIRECTION?  {
      switch self {
      case ._FUNCTIONALLY_DEFINED_TRANSFORMATION(let entity): return entity.AXIS3
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRANSFORMATION``
    /// - origin: ENTITY( ``eFUNCTIONALLY_DEFINED_TRANSFORMATION`` )
    public var AXIS2: eDIRECTION?  {
      switch self {
      case ._FUNCTIONALLY_DEFINED_TRANSFORMATION(let entity): return entity.AXIS2
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRANSFORMATION``
    /// - origin: ENTITY( ``eFUNCTIONALLY_DEFINED_TRANSFORMATION`` )
    public var AXIS1: eDIRECTION?  {
      switch self {
      case ._FUNCTIONALLY_DEFINED_TRANSFORMATION(let entity): return entity.AXIS1
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRANSFORMATION``
    /// - origin: ENTITY( ``eITEM_DEFINED_TRANSFORMATION`` )
    public var INPUT_SKEW_ANGLE: tPLANE_ANGLE_MEASURE?  {
      switch self {
      case ._ITEM_DEFINED_TRANSFORMATION(let entity): return entity.INPUT_SKEW_ANGLE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRANSFORMATION``
    /// - origin: ENTITY( ``eITEM_DEFINED_TRANSFORMATION`` )
    public var SKEW_ANGLE: tPLANE_ANGLE_MEASURE?  {
      switch self {
      case ._ITEM_DEFINED_TRANSFORMATION(let entity): return entity.SKEW_ANGLE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRANSFORMATION``
    /// - origin: ENTITY( ``eITEM_DEFINED_TRANSFORMATION`` )
    public var UPPER_LIMIT_ACTUAL_ROTATION_Y: tPLANE_ANGLE_MEASURE?  {
      switch self {
      case ._ITEM_DEFINED_TRANSFORMATION(let entity): return entity.UPPER_LIMIT_ACTUAL_ROTATION_Y
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRANSFORMATION``
    /// - origin: ENTITY( ``eITEM_DEFINED_TRANSFORMATION`` )
    public var UPPER_LIMIT_ACTUAL_ROTATION_X: tPLANE_ANGLE_MEASURE?  {
      switch self {
      case ._ITEM_DEFINED_TRANSFORMATION(let entity): return entity.UPPER_LIMIT_ACTUAL_ROTATION_X
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRANSFORMATION``
    /// - origin: ENTITY( ``eITEM_DEFINED_TRANSFORMATION`` )
    public var UPPER_LIMIT_ACTUAL_ROTATION_Z: tPLANE_ANGLE_MEASURE?  {
      switch self {
      case ._ITEM_DEFINED_TRANSFORMATION(let entity): return entity.UPPER_LIMIT_ACTUAL_ROTATION_Z
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRANSFORMATION``
    /// - origin: ENTITY( ``eITEM_DEFINED_TRANSFORMATION`` )
    public var RANGE_ON_PAIR_SURFACE: eRECTANGULAR_TRIMMED_SURFACE?  {
      switch self {
      case ._ITEM_DEFINED_TRANSFORMATION(let entity): return entity.RANGE_ON_PAIR_SURFACE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRANSFORMATION``
    /// - origin: ENTITY( ``eITEM_DEFINED_TRANSFORMATION`` )
    public var JOINT: eKINEMATIC_JOINT?  {
      switch self {
      case ._ITEM_DEFINED_TRANSFORMATION(let entity): return entity.JOINT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRANSFORMATION``
    /// - origin: ENTITY( ``eITEM_DEFINED_TRANSFORMATION`` )
    public var UPPER_LIMIT_RACK_DISPLACEMENT: tLENGTH_MEASURE?  {
      switch self {
      case ._ITEM_DEFINED_TRANSFORMATION(let entity): return entity.UPPER_LIMIT_RACK_DISPLACEMENT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRANSFORMATION``
    /// - origin: ENTITY( ``eITEM_DEFINED_TRANSFORMATION`` )
    public var LOWER_LIMIT_ACTUAL_ROTATION_X: tPLANE_ANGLE_MEASURE?  {
      switch self {
      case ._ITEM_DEFINED_TRANSFORMATION(let entity): return entity.LOWER_LIMIT_ACTUAL_ROTATION_X
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRANSFORMATION``
    /// - origin: ENTITY( ``eITEM_DEFINED_TRANSFORMATION`` )
    public var LOWER_LIMIT_ACTUAL_ROTATION_Y: tPLANE_ANGLE_MEASURE?  {
      switch self {
      case ._ITEM_DEFINED_TRANSFORMATION(let entity): return entity.LOWER_LIMIT_ACTUAL_ROTATION_Y
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRANSFORMATION``
    /// - origin: ENTITY( ``eITEM_DEFINED_TRANSFORMATION`` )
    public var LOWER_LIMIT_ACTUAL_ROTATION_Z: tPLANE_ANGLE_MEASURE?  {
      switch self {
      case ._ITEM_DEFINED_TRANSFORMATION(let entity): return entity.LOWER_LIMIT_ACTUAL_ROTATION_Z
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRANSFORMATION``
    /// - origin: ENTITY( ``eITEM_DEFINED_TRANSFORMATION`` )
    public var LOWER_LIMIT_FIRST_ROTATION: tPLANE_ANGLE_MEASURE?  {
      switch self {
      case ._ITEM_DEFINED_TRANSFORMATION(let entity): return entity.LOWER_LIMIT_FIRST_ROTATION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRANSFORMATION``
    /// - origin: ENTITY( ``eITEM_DEFINED_TRANSFORMATION`` )
    public var RADIUS_FIRST_LINK: tLENGTH_MEASURE?  {
      switch self {
      case ._ITEM_DEFINED_TRANSFORMATION(let entity): return entity.RADIUS_FIRST_LINK
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRANSFORMATION``
    /// - origin: ENTITY( ``eITEM_DEFINED_TRANSFORMATION`` )
    public var SURFACE_2: eSURFACE?  {
      switch self {
      case ._ITEM_DEFINED_TRANSFORMATION(let entity): return entity.SURFACE_2
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRANSFORMATION``
    /// - origin: ENTITY( ``eITEM_DEFINED_TRANSFORMATION`` )
    public var ASSOCIATED_LINK_REPRESENTATIONS_1: (SDAI.SET<eKINEMATIC_LINK_REPRESENTATION>/*[1:nil]*/ )?  {
      switch self {
      case ._ITEM_DEFINED_TRANSFORMATION(let entity): return entity.ASSOCIATED_LINK_REPRESENTATIONS_1
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRANSFORMATION``
    /// - origin: ENTITY( ``eITEM_DEFINED_TRANSFORMATION`` )
    public var SURFACE_1: eSURFACE?  {
      switch self {
      case ._ITEM_DEFINED_TRANSFORMATION(let entity): return entity.SURFACE_1
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRANSFORMATION``
    /// - origin: ENTITY( ``eITEM_DEFINED_TRANSFORMATION`` )
    public var ASSOCIATED_LINK_REPRESENTATIONS_2: (SDAI.SET<eKINEMATIC_LINK_REPRESENTATION>/*[1:nil]*/ )?  {
      switch self {
      case ._ITEM_DEFINED_TRANSFORMATION(let entity): return entity.ASSOCIATED_LINK_REPRESENTATIONS_2
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRANSFORMATION``
    /// - origin: ENTITY( ``eITEM_DEFINED_TRANSFORMATION`` )
    public var UPPER_LIMIT_SECOND_ROTATION: tPLANE_ANGLE_MEASURE?  {
      switch self {
      case ._ITEM_DEFINED_TRANSFORMATION(let entity): return entity.UPPER_LIMIT_SECOND_ROTATION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRANSFORMATION``
    /// - origin: ENTITY( ``eFUNCTIONALLY_DEFINED_TRANSFORMATION`` )
    /// - origin: ENTITY( ``eITEM_DEFINED_TRANSFORMATION`` )
    public var NAME: tLABEL?  {
      switch self {
      case ._FUNCTIONALLY_DEFINED_TRANSFORMATION(let entity): return entity.NAME
      case ._ITEM_DEFINED_TRANSFORMATION(let entity): return entity.NAME
      default: return nil
      }
    }


    //MARK: - SDAIValue
    public func isValueEqual<T: SDAIValue>(to rhs: T) -> Bool {
      switch self {
      case ._FUNCTIONALLY_DEFINED_TRANSFORMATION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._ITEM_DEFINED_TRANSFORMATION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._LIST_ITEM_DEFINED_TRANSFORMATION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._SET_ITEM_DEFINED_TRANSFORMATION(let selection): return selection.value.isValueEqual(to: rhs)
      }
    }

    public func isValueEqualOptionally<T: SDAIValue>(to rhs: T?) -> Bool? {
      switch self {
      case ._FUNCTIONALLY_DEFINED_TRANSFORMATION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._ITEM_DEFINED_TRANSFORMATION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._LIST_ITEM_DEFINED_TRANSFORMATION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._SET_ITEM_DEFINED_TRANSFORMATION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      }
    }

    public func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      switch self {
      case ._FUNCTIONALLY_DEFINED_TRANSFORMATION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._ITEM_DEFINED_TRANSFORMATION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._LIST_ITEM_DEFINED_TRANSFORMATION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._SET_ITEM_DEFINED_TRANSFORMATION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      }
    }

    public func isValueEqual<T: SDAIValue>(to rhs: T, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      switch self {
      case ._FUNCTIONALLY_DEFINED_TRANSFORMATION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._ITEM_DEFINED_TRANSFORMATION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._LIST_ITEM_DEFINED_TRANSFORMATION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._SET_ITEM_DEFINED_TRANSFORMATION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      }
    }

    public func isValueEqualOptionally<T: SDAIValue>(to rhs: T?, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      switch self {
      case ._FUNCTIONALLY_DEFINED_TRANSFORMATION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._ITEM_DEFINED_TRANSFORMATION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._LIST_ITEM_DEFINED_TRANSFORMATION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._SET_ITEM_DEFINED_TRANSFORMATION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      }
    }


    //MARK: SDAIGenericTypeBase
    public func copy() -> Self {
      switch self {
      case ._FUNCTIONALLY_DEFINED_TRANSFORMATION(let selection): return ._FUNCTIONALLY_DEFINED_TRANSFORMATION(selection.copy())
      case ._ITEM_DEFINED_TRANSFORMATION(let selection): return ._ITEM_DEFINED_TRANSFORMATION(selection.copy())
      case ._LIST_ITEM_DEFINED_TRANSFORMATION(let selection): return ._LIST_ITEM_DEFINED_TRANSFORMATION(selection.copy())
      case ._SET_ITEM_DEFINED_TRANSFORMATION(let selection): return ._SET_ITEM_DEFINED_TRANSFORMATION(selection.copy())
      }
    }

    //MARK: SDAIGenericType
    public var typeMembers: Set<SDAI.STRING> {
      var members: Set<SDAI.STRING> = [SDAI.STRING(Self.typeName)]
      switch self {
      case ._FUNCTIONALLY_DEFINED_TRANSFORMATION(let selection): members.formUnion(selection.typeMembers)
      case ._ITEM_DEFINED_TRANSFORMATION(let selection): members.formUnion(selection.typeMembers)
      case ._LIST_ITEM_DEFINED_TRANSFORMATION(let selection): members.formUnion(selection.typeMembers)
      case ._SET_ITEM_DEFINED_TRANSFORMATION(let selection): members.formUnion(selection.typeMembers)
      }
      return members
    }

    public var entityReference: SDAI.EntityReference? {
      switch self {
      case ._FUNCTIONALLY_DEFINED_TRANSFORMATION(let selection): return selection.entityReference
      case ._ITEM_DEFINED_TRANSFORMATION(let selection): return selection.entityReference
      case ._LIST_ITEM_DEFINED_TRANSFORMATION(let selection): return selection.entityReference
      case ._SET_ITEM_DEFINED_TRANSFORMATION(let selection): return selection.entityReference
      }
    }
    public var stringValue: SDAI.STRING? {
      switch self {
      case ._FUNCTIONALLY_DEFINED_TRANSFORMATION(let selection): return selection.stringValue
      case ._ITEM_DEFINED_TRANSFORMATION(let selection): return selection.stringValue
      case ._LIST_ITEM_DEFINED_TRANSFORMATION(let selection): return selection.stringValue
      case ._SET_ITEM_DEFINED_TRANSFORMATION(let selection): return selection.stringValue
      }
    }
    public var binaryValue: SDAI.BINARY? {
      switch self {
      case ._FUNCTIONALLY_DEFINED_TRANSFORMATION(let selection): return selection.binaryValue
      case ._ITEM_DEFINED_TRANSFORMATION(let selection): return selection.binaryValue
      case ._LIST_ITEM_DEFINED_TRANSFORMATION(let selection): return selection.binaryValue
      case ._SET_ITEM_DEFINED_TRANSFORMATION(let selection): return selection.binaryValue
      }
    }
    public var logicalValue: SDAI.LOGICAL? {
      switch self {
      case ._FUNCTIONALLY_DEFINED_TRANSFORMATION(let selection): return selection.logicalValue
      case ._ITEM_DEFINED_TRANSFORMATION(let selection): return selection.logicalValue
      case ._LIST_ITEM_DEFINED_TRANSFORMATION(let selection): return selection.logicalValue
      case ._SET_ITEM_DEFINED_TRANSFORMATION(let selection): return selection.logicalValue
      }
    }
    public var booleanValue: SDAI.BOOLEAN? {
      switch self {
      case ._FUNCTIONALLY_DEFINED_TRANSFORMATION(let selection): return selection.booleanValue
      case ._ITEM_DEFINED_TRANSFORMATION(let selection): return selection.booleanValue
      case ._LIST_ITEM_DEFINED_TRANSFORMATION(let selection): return selection.booleanValue
      case ._SET_ITEM_DEFINED_TRANSFORMATION(let selection): return selection.booleanValue
      }
    }
    public var numberValue: SDAI.NUMBER? {
      switch self {
      case ._FUNCTIONALLY_DEFINED_TRANSFORMATION(let selection): return selection.numberValue
      case ._ITEM_DEFINED_TRANSFORMATION(let selection): return selection.numberValue
      case ._LIST_ITEM_DEFINED_TRANSFORMATION(let selection): return selection.numberValue
      case ._SET_ITEM_DEFINED_TRANSFORMATION(let selection): return selection.numberValue
      }
    }
    public var realValue: SDAI.REAL? {
      switch self {
      case ._FUNCTIONALLY_DEFINED_TRANSFORMATION(let selection): return selection.realValue
      case ._ITEM_DEFINED_TRANSFORMATION(let selection): return selection.realValue
      case ._LIST_ITEM_DEFINED_TRANSFORMATION(let selection): return selection.realValue
      case ._SET_ITEM_DEFINED_TRANSFORMATION(let selection): return selection.realValue
      }
    }
    public var integerValue: SDAI.INTEGER? {
      switch self {
      case ._FUNCTIONALLY_DEFINED_TRANSFORMATION(let selection): return selection.integerValue
      case ._ITEM_DEFINED_TRANSFORMATION(let selection): return selection.integerValue
      case ._LIST_ITEM_DEFINED_TRANSFORMATION(let selection): return selection.integerValue
      case ._SET_ITEM_DEFINED_TRANSFORMATION(let selection): return selection.integerValue
      }
    }
    public var genericEnumValue: SDAI.GenericEnumValue? {
      switch self {
      case ._FUNCTIONALLY_DEFINED_TRANSFORMATION(let selection): return selection.genericEnumValue
      case ._ITEM_DEFINED_TRANSFORMATION(let selection): return selection.genericEnumValue
      case ._LIST_ITEM_DEFINED_TRANSFORMATION(let selection): return selection.genericEnumValue
      case ._SET_ITEM_DEFINED_TRANSFORMATION(let selection): return selection.genericEnumValue
      }
    }
    public func arrayOptionalValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.ARRAY_OPTIONAL<ELEM>? {
      switch self {
      case ._FUNCTIONALLY_DEFINED_TRANSFORMATION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._ITEM_DEFINED_TRANSFORMATION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._LIST_ITEM_DEFINED_TRANSFORMATION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._SET_ITEM_DEFINED_TRANSFORMATION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      }
    }
    public func arrayValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.ARRAY<ELEM>? {
      switch self {
      case ._FUNCTIONALLY_DEFINED_TRANSFORMATION(let selection): return selection.arrayValue(elementType:elementType)
      case ._ITEM_DEFINED_TRANSFORMATION(let selection): return selection.arrayValue(elementType:elementType)
      case ._LIST_ITEM_DEFINED_TRANSFORMATION(let selection): return selection.arrayValue(elementType:elementType)
      case ._SET_ITEM_DEFINED_TRANSFORMATION(let selection): return selection.arrayValue(elementType:elementType)
      }
    }
    public func listValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.LIST<ELEM>? {
      switch self {
      case ._FUNCTIONALLY_DEFINED_TRANSFORMATION(let selection): return selection.listValue(elementType:elementType)
      case ._ITEM_DEFINED_TRANSFORMATION(let selection): return selection.listValue(elementType:elementType)
      case ._LIST_ITEM_DEFINED_TRANSFORMATION(let selection): return selection.listValue(elementType:elementType)
      case ._SET_ITEM_DEFINED_TRANSFORMATION(let selection): return selection.listValue(elementType:elementType)
      }
    }
    public func bagValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.BAG<ELEM>? {
      switch self {
      case ._FUNCTIONALLY_DEFINED_TRANSFORMATION(let selection): return selection.bagValue(elementType:elementType)
      case ._ITEM_DEFINED_TRANSFORMATION(let selection): return selection.bagValue(elementType:elementType)
      case ._LIST_ITEM_DEFINED_TRANSFORMATION(let selection): return selection.bagValue(elementType:elementType)
      case ._SET_ITEM_DEFINED_TRANSFORMATION(let selection): return selection.bagValue(elementType:elementType)
      }
    }
    public func setValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.SET<ELEM>? {
      switch self {
      case ._FUNCTIONALLY_DEFINED_TRANSFORMATION(let selection): return selection.setValue(elementType:elementType)
      case ._ITEM_DEFINED_TRANSFORMATION(let selection): return selection.setValue(elementType:elementType)
      case ._LIST_ITEM_DEFINED_TRANSFORMATION(let selection): return selection.setValue(elementType:elementType)
      case ._SET_ITEM_DEFINED_TRANSFORMATION(let selection): return selection.setValue(elementType:elementType)
      }
    }
    public func enumValue<ENUM:SDAIEnumerationType>(enumType:ENUM.Type) -> ENUM? {
      switch self {
      case ._FUNCTIONALLY_DEFINED_TRANSFORMATION(let selection): return selection.enumValue(enumType:enumType)
      case ._ITEM_DEFINED_TRANSFORMATION(let selection): return selection.enumValue(enumType:enumType)
      case ._LIST_ITEM_DEFINED_TRANSFORMATION(let selection): return selection.enumValue(enumType:enumType)
      case ._SET_ITEM_DEFINED_TRANSFORMATION(let selection): return selection.enumValue(enumType:enumType)
      }
    }

    //MARK: SDAIUnderlyingType
    public typealias FundamentalType = Self
    public static var typeName: String = "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.TRANSFORMATION"
    public var asFundamentalType: FundamentalType { return self }

    //MARK: SDAIObservableAggregateElement
    public var entityReferences: AnySequence<SDAI.EntityReference> {
      switch self {
      case ._FUNCTIONALLY_DEFINED_TRANSFORMATION(let entity): return entity.entityReferences
      case ._ITEM_DEFINED_TRANSFORMATION(let entity): return entity.entityReferences
      case ._LIST_ITEM_DEFINED_TRANSFORMATION(let observable): return observable.entityReferences
      case ._SET_ITEM_DEFINED_TRANSFORMATION(let observable): return observable.entityReferences
      }
    }

    public mutating func configure(with observer: SDAI.EntityReferenceObserver) {
      switch self {
      case ._FUNCTIONALLY_DEFINED_TRANSFORMATION(let entity): 
        entity.configure(with: observer)
        self = ._FUNCTIONALLY_DEFINED_TRANSFORMATION(entity)
      case ._ITEM_DEFINED_TRANSFORMATION(let entity): 
        entity.configure(with: observer)
        self = ._ITEM_DEFINED_TRANSFORMATION(entity)
      case ._LIST_ITEM_DEFINED_TRANSFORMATION(var observable): 
        observable.configure(with: observer)
        self = ._LIST_ITEM_DEFINED_TRANSFORMATION(observable)
      case ._SET_ITEM_DEFINED_TRANSFORMATION(var observable): 
        observable.configure(with: observer)
        self = ._SET_ITEM_DEFINED_TRANSFORMATION(observable)
      }
    }

    public mutating func teardownObserver() {
      switch self {
      case ._FUNCTIONALLY_DEFINED_TRANSFORMATION(let entity): 
        entity.teardownObserver()
        self = ._FUNCTIONALLY_DEFINED_TRANSFORMATION(entity)
      case ._ITEM_DEFINED_TRANSFORMATION(let entity): 
        entity.teardownObserver()
        self = ._ITEM_DEFINED_TRANSFORMATION(entity)
      case ._LIST_ITEM_DEFINED_TRANSFORMATION(var observable): 
        observable.teardownObserver()
        self = ._LIST_ITEM_DEFINED_TRANSFORMATION(observable)
      case ._SET_ITEM_DEFINED_TRANSFORMATION(var observable): 
        observable.teardownObserver()
        self = ._SET_ITEM_DEFINED_TRANSFORMATION(observable)
      }
    }

    //MARK: SDAIAggregationBehavior
    public var aggregationHiBound: Int? {
      switch self {
      case ._LIST_ITEM_DEFINED_TRANSFORMATION(let aggregate): return aggregate.hiBound
      case ._SET_ITEM_DEFINED_TRANSFORMATION(let aggregate): return aggregate.hiBound
      default: return nil
      }
    }
    public var aggregationHiIndex: Int? {
      switch self {
      case ._LIST_ITEM_DEFINED_TRANSFORMATION(let aggregate): return aggregate.hiIndex
      case ._SET_ITEM_DEFINED_TRANSFORMATION(let aggregate): return aggregate.hiIndex
      default: return nil
      }
    }
    public var aggregationLoBound: Int? {
      switch self {
      case ._LIST_ITEM_DEFINED_TRANSFORMATION(let aggregate): return aggregate.loBound
      case ._SET_ITEM_DEFINED_TRANSFORMATION(let aggregate): return aggregate.loBound
      default: return nil
      }
    }
    public var aggregationLoIndex: Int? {
      switch self {
      case ._LIST_ITEM_DEFINED_TRANSFORMATION(let aggregate): return aggregate.loIndex
      case ._SET_ITEM_DEFINED_TRANSFORMATION(let aggregate): return aggregate.loIndex
      default: return nil
      }
    }
    public var aggregationSize: Int? {
      switch self {
      case ._LIST_ITEM_DEFINED_TRANSFORMATION(let aggregate): return aggregate.size
      case ._SET_ITEM_DEFINED_TRANSFORMATION(let aggregate): return aggregate.size
      default: return nil
      }
    }

    //MARK: WHERE RULE VALIDATION (SELECT TYPE)
    public static func validateWhereRules(instance:Self?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      var result: [SDAI.WhereLabel:SDAI.LOGICAL] = [:]
      switch instance {
      case ._FUNCTIONALLY_DEFINED_TRANSFORMATION(let selectValue): 
        result = eFUNCTIONALLY_DEFINED_TRANSFORMATION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\FUNCTIONALLY_DEFINED_TRANSFORMATION")
      case ._ITEM_DEFINED_TRANSFORMATION(let selectValue): 
        result = eITEM_DEFINED_TRANSFORMATION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\ITEM_DEFINED_TRANSFORMATION")
      case ._LIST_ITEM_DEFINED_TRANSFORMATION(let selectValue): 
        result = tLIST_ITEM_DEFINED_TRANSFORMATION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\LIST_ITEM_DEFINED_TRANSFORMATION")
      case ._SET_ITEM_DEFINED_TRANSFORMATION(let selectValue): 
        result = tSET_ITEM_DEFINED_TRANSFORMATION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\SET_ITEM_DEFINED_TRANSFORMATION")
      case nil: break
      }

      return result
    }

  }

}


//MARK: - SELECT TYPE HIERARCHY
public protocol AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sTRANSFORMATION__type: SDAISelectType {

  //MARK: GROUP REFERENCES
  var super_tLIST_ITEM_DEFINED_TRANSFORMATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLIST_ITEM_DEFINED_TRANSFORMATION? { get }
  var super_tSET_ITEM_DEFINED_TRANSFORMATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tSET_ITEM_DEFINED_TRANSFORMATION? { get }
  var super_eITEM_DEFINED_TRANSFORMATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eITEM_DEFINED_TRANSFORMATION? { get }
  var super_eFUNCTIONALLY_DEFINED_TRANSFORMATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFUNCTIONALLY_DEFINED_TRANSFORMATION? { get }

  //MARK: ENTITY ATTRIBUTE REFERENCES
  var RANGE_ON_SURFACE_1: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eRECTANGULAR_TRIMMED_SURFACE?  { get }
  var RANGE_ON_SURFACE_2: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eRECTANGULAR_TRIMMED_SURFACE?  { get }
  var RANGE_ON_PAIR_CURVE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eTRIMMED_CURVE?  { get }
  var DESCRIPTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT?  { get }
  var CURVE_1: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCURVE?  { get }
  var CURVE_2: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCURVE?  { get }
  var SCALE: SDAI.REAL?  { get }
  var RANGE_ON_CURVE_2: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eTRIMMED_CURVE?  { get }
  var RANGE_ON_CURVE_1: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eTRIMMED_CURVE?  { get }
  var GEAR_RATIO: SDAI.REAL?  { get }
  var LINK_REPRESENTATION_ASSOCIATIONS: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePAIR_REPRESENTATION_RELATIONSHIP>/*[1:nil]*/ )?  { get }
  var UPPER_LIMIT_ACTUAL_TRANSLATION_Z: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE?  { get }
  var LOWER_LIMIT_RACK_DISPLACEMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE?  { get }
  var PITCH: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE?  { get }
  var UPPER_LIMIT_ACTUAL_ROTATION_1: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { get }
  var BEVEL: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { get }
  var ORIENTATION_ANGLE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { get }
  var LOCAL_ORIGIN: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCARTESIAN_POINT?  { get }
  var SCL: SDAI.REAL?  { get }
  var TRANSFORM_ITEM_1: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_ITEM?  { get }
  var TRANSFORM_ITEM_2: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_ITEM?  { get }
  var LOWER_LIMIT_SECOND_ROTATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { get }
  var RADIUS_SECOND_LINK: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE?  { get }
  var UPPER_LIMIT_FIRST_ROTATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { get }
  var LOWER_LIMIT_ACTUAL_ROTATION_1: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { get }
  var LOWER_LIMIT_ACTUAL_TRANSLATION_Z: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE?  { get }
  var HELICAL_ANGLE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { get }
  var PAIR_SURFACE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSURFACE?  { get }
  var AXIS3: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDIRECTION?  { get }
  var AXIS2: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDIRECTION?  { get }
  var AXIS1: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDIRECTION?  { get }
  var INPUT_SKEW_ANGLE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { get }
  var SKEW_ANGLE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { get }
  var UPPER_LIMIT_ACTUAL_ROTATION_Y: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { get }
  var UPPER_LIMIT_ACTUAL_ROTATION_X: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { get }
  var UPPER_LIMIT_ACTUAL_ROTATION_Z: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { get }
  var RANGE_ON_PAIR_SURFACE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eRECTANGULAR_TRIMMED_SURFACE?  { get }
  var JOINT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eKINEMATIC_JOINT?  { get }
  var UPPER_LIMIT_RACK_DISPLACEMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE?  { get }
  var LOWER_LIMIT_ACTUAL_ROTATION_X: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { get }
  var LOWER_LIMIT_ACTUAL_ROTATION_Y: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { get }
  var LOWER_LIMIT_ACTUAL_ROTATION_Z: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { get }
  var LOWER_LIMIT_FIRST_ROTATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { get }
  var RADIUS_FIRST_LINK: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE?  { get }
  var SURFACE_2: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSURFACE?  { get }
  var ASSOCIATED_LINK_REPRESENTATIONS_1: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eKINEMATIC_LINK_REPRESENTATION>/*[1:nil]*/ )?  { get }
  var SURFACE_1: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSURFACE?  { get }
  var ASSOCIATED_LINK_REPRESENTATIONS_2: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eKINEMATIC_LINK_REPRESENTATION>/*[1:nil]*/ )?  { get }
  var UPPER_LIMIT_SECOND_ROTATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { get }
  var NAME: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { get }
}

public protocol AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sTRANSFORMATION__subtype: 
  AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sTRANSFORMATION__type, SDAIDefinedType
where Supertype: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sTRANSFORMATION__type
{}

public extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sTRANSFORMATION__subtype {
  //MARK: CONSTRUCTORS
  init?(possiblyFrom complex: SDAI.ComplexEntity?) {
    self.init(fundamental: FundamentalType(possiblyFrom: complex))
  }

  init?<T: SDAIUnderlyingType>(possiblyFrom underlyingType: T?) {
    self.init(fundamental: FundamentalType(possiblyFrom: underlyingType))
  }

  init?<G: SDAIGenericType>(fromGeneric generic: G?) {
    self.init(fundamental: FundamentalType.convert(fromGeneric: generic))
  }

  //MARK: GROUP REFERENCES
  var super_tLIST_ITEM_DEFINED_TRANSFORMATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLIST_ITEM_DEFINED_TRANSFORMATION? { rep.super_tLIST_ITEM_DEFINED_TRANSFORMATION }
  var super_tSET_ITEM_DEFINED_TRANSFORMATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tSET_ITEM_DEFINED_TRANSFORMATION? { rep.super_tSET_ITEM_DEFINED_TRANSFORMATION }
  var super_eITEM_DEFINED_TRANSFORMATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eITEM_DEFINED_TRANSFORMATION? { rep.super_eITEM_DEFINED_TRANSFORMATION }
  var super_eFUNCTIONALLY_DEFINED_TRANSFORMATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFUNCTIONALLY_DEFINED_TRANSFORMATION? { rep.super_eFUNCTIONALLY_DEFINED_TRANSFORMATION }

  //MARK: ENTITY ATTRIBUTE REFERENCES
  var RANGE_ON_SURFACE_1: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eRECTANGULAR_TRIMMED_SURFACE?  { rep.RANGE_ON_SURFACE_1 }
  var RANGE_ON_SURFACE_2: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eRECTANGULAR_TRIMMED_SURFACE?  { rep.RANGE_ON_SURFACE_2 }
  var RANGE_ON_PAIR_CURVE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eTRIMMED_CURVE?  { rep.RANGE_ON_PAIR_CURVE }
  var DESCRIPTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT?  { rep.DESCRIPTION }
  var CURVE_1: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCURVE?  { rep.CURVE_1 }
  var CURVE_2: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCURVE?  { rep.CURVE_2 }
  var SCALE: SDAI.REAL?  { rep.SCALE }
  var RANGE_ON_CURVE_2: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eTRIMMED_CURVE?  { rep.RANGE_ON_CURVE_2 }
  var RANGE_ON_CURVE_1: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eTRIMMED_CURVE?  { rep.RANGE_ON_CURVE_1 }
  var GEAR_RATIO: SDAI.REAL?  { rep.GEAR_RATIO }
  var LINK_REPRESENTATION_ASSOCIATIONS: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePAIR_REPRESENTATION_RELATIONSHIP>/*[1:nil]*/ )?  { rep.LINK_REPRESENTATION_ASSOCIATIONS }
  var UPPER_LIMIT_ACTUAL_TRANSLATION_Z: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE?  { rep.UPPER_LIMIT_ACTUAL_TRANSLATION_Z }
  var LOWER_LIMIT_RACK_DISPLACEMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE?  { rep.LOWER_LIMIT_RACK_DISPLACEMENT }
  var PITCH: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE?  { rep.PITCH }
  var UPPER_LIMIT_ACTUAL_ROTATION_1: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { rep.UPPER_LIMIT_ACTUAL_ROTATION_1 }
  var BEVEL: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { rep.BEVEL }
  var ORIENTATION_ANGLE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { rep.ORIENTATION_ANGLE }
  var LOCAL_ORIGIN: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCARTESIAN_POINT?  { rep.LOCAL_ORIGIN }
  var SCL: SDAI.REAL?  { rep.SCL }
  var TRANSFORM_ITEM_1: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_ITEM?  { rep.TRANSFORM_ITEM_1 }
  var TRANSFORM_ITEM_2: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_ITEM?  { rep.TRANSFORM_ITEM_2 }
  var LOWER_LIMIT_SECOND_ROTATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { rep.LOWER_LIMIT_SECOND_ROTATION }
  var RADIUS_SECOND_LINK: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE?  { rep.RADIUS_SECOND_LINK }
  var UPPER_LIMIT_FIRST_ROTATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { rep.UPPER_LIMIT_FIRST_ROTATION }
  var LOWER_LIMIT_ACTUAL_ROTATION_1: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { rep.LOWER_LIMIT_ACTUAL_ROTATION_1 }
  var LOWER_LIMIT_ACTUAL_TRANSLATION_Z: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE?  { rep.LOWER_LIMIT_ACTUAL_TRANSLATION_Z }
  var HELICAL_ANGLE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { rep.HELICAL_ANGLE }
  var PAIR_SURFACE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSURFACE?  { rep.PAIR_SURFACE }
  var AXIS3: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDIRECTION?  { rep.AXIS3 }
  var AXIS2: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDIRECTION?  { rep.AXIS2 }
  var AXIS1: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDIRECTION?  { rep.AXIS1 }
  var INPUT_SKEW_ANGLE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { rep.INPUT_SKEW_ANGLE }
  var SKEW_ANGLE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { rep.SKEW_ANGLE }
  var UPPER_LIMIT_ACTUAL_ROTATION_Y: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { rep.UPPER_LIMIT_ACTUAL_ROTATION_Y }
  var UPPER_LIMIT_ACTUAL_ROTATION_X: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { rep.UPPER_LIMIT_ACTUAL_ROTATION_X }
  var UPPER_LIMIT_ACTUAL_ROTATION_Z: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { rep.UPPER_LIMIT_ACTUAL_ROTATION_Z }
  var RANGE_ON_PAIR_SURFACE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eRECTANGULAR_TRIMMED_SURFACE?  { rep.RANGE_ON_PAIR_SURFACE }
  var JOINT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eKINEMATIC_JOINT?  { rep.JOINT }
  var UPPER_LIMIT_RACK_DISPLACEMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE?  { rep.UPPER_LIMIT_RACK_DISPLACEMENT }
  var LOWER_LIMIT_ACTUAL_ROTATION_X: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { rep.LOWER_LIMIT_ACTUAL_ROTATION_X }
  var LOWER_LIMIT_ACTUAL_ROTATION_Y: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { rep.LOWER_LIMIT_ACTUAL_ROTATION_Y }
  var LOWER_LIMIT_ACTUAL_ROTATION_Z: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { rep.LOWER_LIMIT_ACTUAL_ROTATION_Z }
  var LOWER_LIMIT_FIRST_ROTATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { rep.LOWER_LIMIT_FIRST_ROTATION }
  var RADIUS_FIRST_LINK: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE?  { rep.RADIUS_FIRST_LINK }
  var SURFACE_2: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSURFACE?  { rep.SURFACE_2 }
  var ASSOCIATED_LINK_REPRESENTATIONS_1: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eKINEMATIC_LINK_REPRESENTATION>/*[1:nil]*/ )?  { rep.ASSOCIATED_LINK_REPRESENTATIONS_1 }
  var SURFACE_1: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSURFACE?  { rep.SURFACE_1 }
  var ASSOCIATED_LINK_REPRESENTATIONS_2: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eKINEMATIC_LINK_REPRESENTATION>/*[1:nil]*/ )?  { rep.ASSOCIATED_LINK_REPRESENTATIONS_2 }
  var UPPER_LIMIT_SECOND_ROTATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { rep.UPPER_LIMIT_SECOND_ROTATION }
  var NAME: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { rep.NAME }
}

