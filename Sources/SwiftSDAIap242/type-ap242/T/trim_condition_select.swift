/* file: trim_condition_select.swift 	 generated: Sun Oct 31 15:32:10 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -TYPE DEFINITION in EXPRESS
/*
  TYPE trim_condition_select = SELECT
    ( generalized_surface_select (*SELECT*),
     length_measure (*TYPE*),
     plane_angle_measure (*TYPE*),
     solid_model (*ENTITY*) );
  END_TYPE; -- trim_condition_select (line:5880 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES FOR SELECT
/*
  generalized_surface_select (*SELECT*):
  ATTR:  knot_v_upper: INTEGER
  ATTR:  major_radius: positive_length_measure
  ATTR:  cfs_faces: SET [1 : ?] OF face
  ATTR:  generalised_major_radius: positive_length_measure
  ATTR:  u_b_splines: LIST [4 : ?] OF local_b_spline
  ATTR:  u_multiplicities: LIST [2 : ?] OF INTEGER
  ATTR:  vsense: BOOLEAN
  ATTR:  swept_curve: curve
  ATTR:  bounds: SET [1 : ?] OF face_bound
  ATTR:  n_u: INTEGER
  ATTR:  reference_surface: surface
  ATTR:  n_v: INTEGER
  ATTR:  linearly_independent: linearly_independent_enum
  ATTR:  v_degree: INTEGER
  ATTR:  locally_refined_spline_type: locally_refined_spline_type_enum
  ATTR:  v_multiplicities: LIST [2 : ?] OF INTEGER
  ATTR:  boundaries: SET [1 : ?] OF boundary_curve
  ATTR:  select_outer: BOOLEAN
  ATTR:  minor_radius: positive_length_measure
  ATTR:  v_upper: INTEGER
  ATTR:  orientation: BOOLEAN
  ATTR:  axis_position: axis1_placement
  ATTR:  permanent_aggregate_id: identifier
  ATTR:  u1: parameter_value
  ATTR:  u2: parameter_value
  ATTR:  skewness: length_measure
  ATTR:  parent_surface: surface
  ATTR:  usense: BOOLEAN
  ATTR:  surface_form: b_spline_surface_form
  ATTR:  scaling_factors: LIST [4 : ?] OF REAL
  ATTR:  distance: length_measure
  ATTR:  position: axis2_placement_3d
  ATTR:  transformation: cartesian_transformation_operator_3d
  ATTR:  generalised_minor_radius: positive_length_measure
  ATTR:  v2: parameter_value
  ATTR:  v1: parameter_value
  ATTR:  axis_line: line
  ATTR:  semi_angle: plane_angle_measure
  ATTR:  knot_spec: knot_type
  ATTR:  face_geometry: surface
  ATTR:  segments: LIST [1 : ?] OF LIST [1 : ?] OF surface_patch (AMBIGUOUS (SELECT LEVEL))
  ATTR:  fixed_reference: direction
  ATTR:  control_points: ARRAY [0 : u_upper] OF ARRAY [0 : v_upper] OF cartesian_point
  ATTR:  u_degree: INTEGER
  ATTR:  same_sense: BOOLEAN
  ATTR:  implicit_outer: BOOLEAN
  ATTR:  knot_u_upper: INTEGER
  ATTR:  permanent_id: identifier
  ATTR:  u_upper: INTEGER
  ATTR:  v_b_splines: LIST [4 : ?] OF local_b_spline
  ATTR:  domain: LIST [2 : 2] OF LIST [2 : 2] OF REAL
  ATTR:  name: label
  ATTR:  extrusion_axis: vector
  ATTR:  weights: ARRAY [0 : u_upper] OF ARRAY [0 : v_upper] OF REAL
  ATTR:  dim: dimension_count

  length_measure (*TYPE*): length_measure

  plane_angle_measure (*TYPE*): plane_angle_measure

  solid_model (*ENTITY*):
  ATTR:  offset_distance: (AMBIGUOUS (CASE LEVEL))
  ATTR:  slot_width: positive_length_measure
  ATTR:  end_exit_faces: LIST [2 : 2] OF SET [0 : ?] OF face_surface
  ATTR:  replicate_count: positive_integer
  ATTR:  radius_list: LIST [2 : ?] OF positive_length_measure
  ATTR:  angular_spacing: plane_angle_measure
  ATTR:  offset1: length_measure
  ATTR:  floor_blend_radius: non_negative_length_measure
  ATTR:  second_trim_condition: (AMBIGUOUS (CASE LEVEL))
  ATTR:  offset2: length_measure
  ATTR:  base_element: generalized_surface_select
  ATTR:  radial_alignment: BOOLEAN
  ATTR:  segment_radii: LIST [1 : segments] OF positive_length_measure
  ATTR:  left_offset: BOOLEAN
  ATTR:  row_spacing: length_measure
  ATTR:  tip_radius: non_negative_length_measure
  ATTR:  thickness: length_measure
  ATTR:  reference_surface: surface *** Multiple Select Case Sources ***
  ATTR:  tee_section_width: positive_length_measure
  ATTR:  fillet_radius: non_negative_length_measure
  ATTR:  first_trim_intent: trim_intent
  ATTR:  second_trim_intent: trim_intent
  ATTR:  inner_radius: positive_length_measure
  ATTR:  protrusion_height: positive_length_measure
  ATTR:  row_count: positive_integer
  ATTR:  pocket_length: positive_length_measure
  ATTR:  external_groove: BOOLEAN
  ATTR:  replicated_element: modified_solid_with_placed_configuration
  ATTR:  swept_face: face_surface
  ATTR:  end_conditions: LIST [2 : 2] OF blend_end_condition_select
  ATTR:  end_param: (AMBIGUOUS (CASE LEVEL))
  ATTR:  conical_transitions: SET [1 : ?] OF conical_stepped_hole_transition
  ATTR:  first_trim_condition: (AMBIGUOUS (CASE LEVEL))
  ATTR:  protrusion_draft_angle: plane_angle_measure
  ATTR:  protrusion_length: positive_length_measure
  ATTR:  point_list: LIST [2 : ?] OF point
  ATTR:  pocket_radius: positive_length_measure
  ATTR:  thickened_face_list: LIST [1 : ?] OF SET [1 : ?] OF face_surface
  ATTR:  corner_radius: non_negative_length_measure
  ATTR:  radius: (AMBIGUOUS (CASE LEVEL))
  ATTR:  omitted_instances: (AMBIGUOUS (CASE LEVEL))
  ATTR:  slot_length: positive_length_measure
  ATTR:  rationale: text
  ATTR:  right_offset_distance: positive_length_measure
  ATTR:  transformation: cartesian_transformation_operator_3d *** Multiple Select Case Sources ***
  ATTR:  groove_width: positive_length_measure
  ATTR:  tree_root_expression: csg_select
  ATTR:  pocket_width: positive_length_measure
  ATTR:  positive_side: BOOLEAN
  ATTR:  base_solid: base_solid_select
  ATTR:  deleted_face_set: SET [1 : ?] OF face_surface
  ATTR:  drafted_edges: LIST [2 : ?] OF SET [1 : ?] OF edge_curve
  ATTR:  axis_line: (AMBIGUOUS (CASE LEVEL))
  ATTR:  offset_angle: positive_plane_angle_measure
  ATTR:  left_offset_distance: positive_length_measure
  ATTR:  segment_depths: LIST [1 : segments] OF positive_length_measure
  ATTR:  angle: (AMBIGUOUS (CASE LEVEL))
  ATTR:  collar_depth: positive_length_measure
  ATTR:  axis: (AMBIGUOUS (CASE LEVEL))
  ATTR:  closed_ends: LIST [2 : 2] OF LOGICAL
  ATTR:  directrix: (AMBIGUOUS (CASE LEVEL))
  ATTR:  reference_point: (AMBIGUOUS (CASE LEVEL))
  ATTR:  groove_radius: positive_length_measure
  ATTR:  sphere_radius: positive_length_measure
  ATTR:  first_offset: non_negative_length_measure
  ATTR:  draft_angles: LIST [2 : ?] OF plane_angle_measure
  ATTR:  extruded_direction: (AMBIGUOUS (CASE LEVEL))
  ATTR:  column_count: positive_integer
  ATTR:  segments: positive_integer (AMBIGUOUS (SELECT LEVEL))
  ATTR:  thickness_list: LIST [1 : ?] OF length_measure
  ATTR:  column_spacing: length_measure
  ATTR:  protrusion_corner_radius: non_negative_length_measure
  ATTR:  swept_area: curve_bounded_surface
  ATTR:  sculpturing_element: generalized_surface_select
  ATTR:  start_param: (AMBIGUOUS (CASE LEVEL))
  ATTR:  profile: (AMBIGUOUS (CASE LEVEL))
  ATTR:  thickness2: length_measure
  ATTR:  second_offset: non_negative_length_measure
  ATTR:  protrusion_width: positive_length_measure
  ATTR:  protrusion_radius: positive_length_measure
  ATTR:  slot_centreline: bounded_curve
  ATTR:  semi_apex_angle: positive_plane_angle_measure
  ATTR:  blended_edges: LIST [1 : ?] OF UNIQUE edge_curve
  ATTR:  draft_angle: (AMBIGUOUS (CASE LEVEL))
  ATTR:  outer: closed_shell
  ATTR:  edge_function_list: LIST [1 : ?] OF blend_radius_variation_type
  ATTR:  exit_faces: SET [1 : ?] OF face_surface
  ATTR:  placing: axis2_placement_3d
  ATTR:  name: label
  ATTR:  depth: (AMBIGUOUS (CASE LEVEL))
  ATTR:  parent_solid: solid_model
  ATTR:  voids: SET [1 : ?] OF oriented_closed_shell
  ATTR:  floor_fillet_radius: (AMBIGUOUS (CASE LEVEL))
  ATTR:  dim: dimension_count

*/

/** SELECT type
- EXPRESS:
```express
  TYPE trim_condition_select = SELECT
    ( generalized_surface_select (*SELECT*),
     length_measure (*TYPE*),
     plane_angle_measure (*TYPE*),
     solid_model (*ENTITY*) );
  END_TYPE; -- trim_condition_select (line:5880 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public enum sTRIM_CONDITION_SELECT : SDAIValue, AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sTRIM_CONDITION_SELECT__type {

    /// SELECT case ``sGENERALIZED_SURFACE_SELECT`` (SELECT) in ``sTRIM_CONDITION_SELECT``
    case _GENERALIZED_SURFACE_SELECT(sGENERALIZED_SURFACE_SELECT)	// (SELECT)

    /// SELECT case ``tLENGTH_MEASURE`` (TYPE) in ``sTRIM_CONDITION_SELECT``
    case _LENGTH_MEASURE(tLENGTH_MEASURE)	// (TYPE)

    /// SELECT case ``tPLANE_ANGLE_MEASURE`` (TYPE) in ``sTRIM_CONDITION_SELECT``
    case _PLANE_ANGLE_MEASURE(tPLANE_ANGLE_MEASURE)	// (TYPE)

    /// SELECT case ``eSOLID_MODEL`` (ENTITY) in ``sTRIM_CONDITION_SELECT``
    case _SOLID_MODEL(eSOLID_MODEL)	// (ENTITY)

    //MARK: - CONSTRUCTORS
    public init(fundamental: FundamentalType) { self = fundamental }

    public init?<T: SDAIUnderlyingType>(possiblyFrom underlyingType: T?){
      guard let underlyingType = underlyingType else { return nil }

      if let base = underlyingType as? sGENERALIZED_SURFACE_SELECT {
        self = ._GENERALIZED_SURFACE_SELECT(base)
      }
      else if let base = underlyingType as? tLENGTH_MEASURE {
        self = ._LENGTH_MEASURE(base)
      }
      else if let base = underlyingType as? tPLANE_ANGLE_MEASURE {
        self = ._PLANE_ANGLE_MEASURE(base)
      }
      else if let base = sGENERALIZED_SURFACE_SELECT(possiblyFrom: underlyingType) {
        self = ._GENERALIZED_SURFACE_SELECT(base)
      }
      else if let fundamental = underlyingType.asFundamentalType as? tLENGTH_MEASURE.FundamentalType {
        self = ._LENGTH_MEASURE( tLENGTH_MEASURE(fundamental: fundamental) )
      }
      else if let fundamental = underlyingType.asFundamentalType as? tPLANE_ANGLE_MEASURE.FundamentalType {
        self = ._PLANE_ANGLE_MEASURE( tPLANE_ANGLE_MEASURE(fundamental: fundamental) )
      }
      else { return nil }
    }

    public init?(possiblyFrom complex: SDAI.ComplexEntity?) {
      guard let complex = complex else { return nil }

      if let base = sGENERALIZED_SURFACE_SELECT(possiblyFrom: complex) {
        self = ._GENERALIZED_SURFACE_SELECT(base)
      }
      else if let base = complex.entityReference(eSOLID_MODEL.self) {self = ._SOLID_MODEL(base) }
      else { return nil }
    }

    public init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let select = generic else { return nil }

      if let fundamental = select as? Self {
        self.init(fundamental: fundamental)
      }
      else if let base = sGENERALIZED_SURFACE_SELECT.convert(fromGeneric: select) {
        self = ._GENERALIZED_SURFACE_SELECT(base)
      }
      else if let base = tLENGTH_MEASURE.convert(fromGeneric: select) {
        self = ._LENGTH_MEASURE(base)
      }
      else if let base = tPLANE_ANGLE_MEASURE.convert(fromGeneric: select) {
        self = ._PLANE_ANGLE_MEASURE(base)
      }
      else if let base = eSOLID_MODEL.convert(fromGeneric: select) {
        self = ._SOLID_MODEL(base)
      }
      else { return nil }
    }

    // InitializableByP21Parameter
    public static var bareTypeName: String = "TRIM_CONDITION_SELECT"

    public init?(p21typedParam: P21Decode.ExchangeStructure.TypedParameter, from exchangeStructure: P21Decode.ExchangeStructure) {
      guard let keyword = p21typedParam.keyword.asStandardKeyword else { exchangeStructure.error = "unexpected p21parameter(\(p21typedParam)) while resolving \(Self.bareTypeName) select value"; return nil }

      switch(keyword) {
      case sGENERALIZED_SURFACE_SELECT.bareTypeName:
        guard let base = sGENERALIZED_SURFACE_SELECT(p21typedParam: p21typedParam, from: exchangeStructure) else { exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) select value"); return nil }
        self = ._GENERALIZED_SURFACE_SELECT(base)

      case tLENGTH_MEASURE.bareTypeName:
        guard let base = tLENGTH_MEASURE(p21typedParam: p21typedParam, from: exchangeStructure) else { exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) select value"); return nil }
        self = ._LENGTH_MEASURE(base)

      case tPLANE_ANGLE_MEASURE.bareTypeName:
        guard let base = tPLANE_ANGLE_MEASURE(p21typedParam: p21typedParam, from: exchangeStructure) else { exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) select value"); return nil }
        self = ._PLANE_ANGLE_MEASURE(base)

      default:
        exchangeStructure.error = "unexpected p21parameter(\(p21typedParam)) while resolving \(Self.bareTypeName) select value"
        return nil
      }
    }

    public init?(p21untypedParam: P21Decode.ExchangeStructure.UntypedParameter, from exchangeStructure: P21Decode.ExchangeStructure) {
      switch p21untypedParam {
      case .rhsOccurenceName(let rhsname):
        switch rhsname {
        case .constantEntityName(let name):
          guard let entity = exchangeStructure.resolve(constantEntityName: name) else {exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) instance"); return nil }
          self.init(possiblyFrom: entity.complexEntity)

        case .entityInstanceName(let name):
          guard let complex = exchangeStructure.resolve(entityInstanceName: name) else {exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) instance"); return nil }
          self.init(possiblyFrom: complex)

        default:
          exchangeStructure.error = "unexpected p21parameter(\(p21untypedParam)) while resolving \(Self.bareTypeName) select instance"
          return nil
        }

      default:
        exchangeStructure.error = "unexpected p21parameter(\(p21untypedParam)) while resolving \(Self.bareTypeName) select instance"
        return nil
      }
    }

    public init?(p21omittedParamfrom exchangeStructure: P21Decode.ExchangeStructure) {
      return nil
    }


    //MARK: - NON-ENTITY UNDERLYING TYPE REFERENCES
    public var super_sGENERALIZED_SURFACE_SELECT: sGENERALIZED_SURFACE_SELECT? {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let selectValue): return selectValue
      default: return nil
      }
    }

    public var super_tLENGTH_MEASURE: tLENGTH_MEASURE? {
      switch self {
      case ._LENGTH_MEASURE(let selectValue): return selectValue
      default: return nil
      }
    }

    public var super_tPLANE_ANGLE_MEASURE: tPLANE_ANGLE_MEASURE? {
      switch self {
      case ._PLANE_ANGLE_MEASURE(let selectValue): return selectValue
      default: return nil
      }
    }

    //MARK: - ENTITY UNDERLYING TYPE REFERENCES
    public var super_eSURFACED_OPEN_SHELL: eSURFACED_OPEN_SHELL? {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let select): return select.super_eSURFACED_OPEN_SHELL
      default: return nil
      }
    }

    public var super_eFACE_SURFACE: eFACE_SURFACE? {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let select): return select.super_eFACE_SURFACE
      default: return nil
      }
    }

    public var super_eTOPOLOGICAL_REPRESENTATION_ITEM: eTOPOLOGICAL_REPRESENTATION_ITEM? {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let select): return select.super_eTOPOLOGICAL_REPRESENTATION_ITEM
      default: return nil
      }
    }

    public var super_eOPEN_SHELL: eOPEN_SHELL? {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let select): return select.super_eOPEN_SHELL
      default: return nil
      }
    }

    public var super_eCONNECTED_FACE_SET: eCONNECTED_FACE_SET? {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let select): return select.super_eCONNECTED_FACE_SET
      default: return nil
      }
    }

    public var super_eSOLID_MODEL: eSOLID_MODEL? {
      switch self {
      case ._SOLID_MODEL(let entity): return entity
      default: return nil
      }
    }

    public var super_eFACE: eFACE? {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let select): return select.super_eFACE
      default: return nil
      }
    }

    public var super_eREPRESENTATION_ITEM: eREPRESENTATION_ITEM? {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let select): return select.super_eREPRESENTATION_ITEM
      case ._SOLID_MODEL(let entity): return entity.super_eREPRESENTATION_ITEM
      default: return nil
      }
    }

    public var super_eSURFACE: eSURFACE? {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let select): return select.super_eSURFACE
      default: return nil
      }
    }

    public var super_eGEOMETRIC_REPRESENTATION_ITEM: eGEOMETRIC_REPRESENTATION_ITEM? {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let select): return select.super_eGEOMETRIC_REPRESENTATION_ITEM
      case ._SOLID_MODEL(let entity): return entity.super_eGEOMETRIC_REPRESENTATION_ITEM
      default: return nil
      }
    }


    //MARK: - ENTITY ATTRIBUTE REFERENCES
    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: SELECT( ``sGENERALIZED_SURFACE_SELECT`` )
    public var KNOT_V_UPPER: SDAI.INTEGER?  {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let select): return select.KNOT_V_UPPER
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: SELECT( ``sGENERALIZED_SURFACE_SELECT`` )
    public var MAJOR_RADIUS: tPOSITIVE_LENGTH_MEASURE?  {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let select): return select.MAJOR_RADIUS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var SLOT_WIDTH: tPOSITIVE_LENGTH_MEASURE?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.SLOT_WIDTH
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var END_EXIT_FACES: (SDAI.LIST<SDAI.SET<eFACE_SURFACE>/*[0:nil]*/ >/*[2:2]*/ )?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.END_EXIT_FACES
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var REPLICATE_COUNT: tPOSITIVE_INTEGER?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.REPLICATE_COUNT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: SELECT( ``sGENERALIZED_SURFACE_SELECT`` )
    public var CFS_FACES: (SDAI.SET<eFACE>/*[1:nil]*/ )?  {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let select): return select.CFS_FACES
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var RADIUS_LIST: (SDAI.LIST<tPOSITIVE_LENGTH_MEASURE>/*[2:nil]*/ )?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.RADIUS_LIST
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var ANGULAR_SPACING: tPLANE_ANGLE_MEASURE?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.ANGULAR_SPACING
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var OFFSET1: tLENGTH_MEASURE?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.OFFSET1
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var FLOOR_BLEND_RADIUS: tNON_NEGATIVE_LENGTH_MEASURE?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.FLOOR_BLEND_RADIUS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: SELECT( ``sGENERALIZED_SURFACE_SELECT`` )
    public var GENERALISED_MAJOR_RADIUS: tPOSITIVE_LENGTH_MEASURE?  {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let select): return select.GENERALISED_MAJOR_RADIUS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: SELECT( ``sGENERALIZED_SURFACE_SELECT`` )
    public var U_B_SPLINES: (SDAI.LIST<eLOCAL_B_SPLINE>/*[4:nil]*/ )?  {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let select): return select.U_B_SPLINES
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var OFFSET2: tLENGTH_MEASURE?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.OFFSET2
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var BASE_ELEMENT: sGENERALIZED_SURFACE_SELECT?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.BASE_ELEMENT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: SELECT( ``sGENERALIZED_SURFACE_SELECT`` )
    public var U_MULTIPLICITIES: (SDAI.LIST<SDAI.INTEGER>/*[2:nil]*/ )?  {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let select): return select.U_MULTIPLICITIES
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: SELECT( ``sGENERALIZED_SURFACE_SELECT`` )
    public var VSENSE: SDAI.BOOLEAN?  {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let select): return select.VSENSE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var RADIAL_ALIGNMENT: SDAI.BOOLEAN?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.RADIAL_ALIGNMENT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var SEGMENT_RADII: (SDAI.LIST<tPOSITIVE_LENGTH_MEASURE>/*[1:SEGMENTS]*/ )?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.SEGMENT_RADII
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var LEFT_OFFSET: SDAI.BOOLEAN?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.LEFT_OFFSET
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var ROW_SPACING: tLENGTH_MEASURE?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.ROW_SPACING
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var TIP_RADIUS: tNON_NEGATIVE_LENGTH_MEASURE?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.TIP_RADIUS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: SELECT( ``sGENERALIZED_SURFACE_SELECT`` )
    public var SWEPT_CURVE: eCURVE?  {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let select): return select.SWEPT_CURVE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: SELECT( ``sGENERALIZED_SURFACE_SELECT`` )
    public var BOUNDS: (SDAI.SET<eFACE_BOUND>/*[1:nil]*/ )?  {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let select): return select.BOUNDS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: SELECT( ``sGENERALIZED_SURFACE_SELECT`` )
    public var N_U: SDAI.INTEGER?  {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let select): return select.N_U
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var THICKNESS: tLENGTH_MEASURE?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.THICKNESS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: SELECT( ``sGENERALIZED_SURFACE_SELECT`` )
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var REFERENCE_SURFACE: eSURFACE?  {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let select): return select.REFERENCE_SURFACE
      case ._SOLID_MODEL(let entity): return entity.REFERENCE_SURFACE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var TEE_SECTION_WIDTH: tPOSITIVE_LENGTH_MEASURE?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.TEE_SECTION_WIDTH
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var FILLET_RADIUS: tNON_NEGATIVE_LENGTH_MEASURE?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.FILLET_RADIUS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: SELECT( ``sGENERALIZED_SURFACE_SELECT`` )
    public var N_V: SDAI.INTEGER?  {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let select): return select.N_V
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var FIRST_TRIM_INTENT: nTRIM_INTENT?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.FIRST_TRIM_INTENT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: SELECT( ``sGENERALIZED_SURFACE_SELECT`` )
    public var LINEARLY_INDEPENDENT: nLINEARLY_INDEPENDENT_ENUM?  {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let select): return select.LINEARLY_INDEPENDENT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var SECOND_TRIM_INTENT: nTRIM_INTENT?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.SECOND_TRIM_INTENT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var INNER_RADIUS: tPOSITIVE_LENGTH_MEASURE?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.INNER_RADIUS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var PROTRUSION_HEIGHT: tPOSITIVE_LENGTH_MEASURE?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.PROTRUSION_HEIGHT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: SELECT( ``sGENERALIZED_SURFACE_SELECT`` )
    public var V_DEGREE: SDAI.INTEGER?  {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let select): return select.V_DEGREE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: SELECT( ``sGENERALIZED_SURFACE_SELECT`` )
    public var LOCALLY_REFINED_SPLINE_TYPE: nLOCALLY_REFINED_SPLINE_TYPE_ENUM?  {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let select): return select.LOCALLY_REFINED_SPLINE_TYPE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: SELECT( ``sGENERALIZED_SURFACE_SELECT`` )
    public var V_MULTIPLICITIES: (SDAI.LIST<SDAI.INTEGER>/*[2:nil]*/ )?  {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let select): return select.V_MULTIPLICITIES
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: SELECT( ``sGENERALIZED_SURFACE_SELECT`` )
    public var BOUNDARIES: (SDAI.SET<eBOUNDARY_CURVE>/*[1:nil]*/ )?  {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let select): return select.BOUNDARIES
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var ROW_COUNT: tPOSITIVE_INTEGER?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.ROW_COUNT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var POCKET_LENGTH: tPOSITIVE_LENGTH_MEASURE?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.POCKET_LENGTH
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var EXTERNAL_GROOVE: SDAI.BOOLEAN?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.EXTERNAL_GROOVE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var REPLICATED_ELEMENT: eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.REPLICATED_ELEMENT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: SELECT( ``sGENERALIZED_SURFACE_SELECT`` )
    public var SELECT_OUTER: SDAI.BOOLEAN?  {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let select): return select.SELECT_OUTER
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: SELECT( ``sGENERALIZED_SURFACE_SELECT`` )
    public var MINOR_RADIUS: tPOSITIVE_LENGTH_MEASURE?  {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let select): return select.MINOR_RADIUS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var SWEPT_FACE: eFACE_SURFACE?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.SWEPT_FACE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var END_CONDITIONS: (SDAI.LIST<sBLEND_END_CONDITION_SELECT>/*[2:2]*/ )?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.END_CONDITIONS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: SELECT( ``sGENERALIZED_SURFACE_SELECT`` )
    public var V_UPPER: SDAI.INTEGER?  {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let select): return select.V_UPPER
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: SELECT( ``sGENERALIZED_SURFACE_SELECT`` )
    public var ORIENTATION: SDAI.BOOLEAN?  {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let select): return select.ORIENTATION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: SELECT( ``sGENERALIZED_SURFACE_SELECT`` )
    public var AXIS_POSITION: eAXIS1_PLACEMENT?  {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let select): return select.AXIS_POSITION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: SELECT( ``sGENERALIZED_SURFACE_SELECT`` )
    public var PERMANENT_AGGREGATE_ID: tIDENTIFIER?  {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let select): return select.PERMANENT_AGGREGATE_ID
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var CONICAL_TRANSITIONS: (SDAI.SET<eCONICAL_STEPPED_HOLE_TRANSITION>/*[1:nil]*/ )?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.CONICAL_TRANSITIONS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: SELECT( ``sGENERALIZED_SURFACE_SELECT`` )
    public var U1: tPARAMETER_VALUE?  {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let select): return select.U1
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: SELECT( ``sGENERALIZED_SURFACE_SELECT`` )
    public var U2: tPARAMETER_VALUE?  {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let select): return select.U2
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: SELECT( ``sGENERALIZED_SURFACE_SELECT`` )
    public var SKEWNESS: tLENGTH_MEASURE?  {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let select): return select.SKEWNESS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var PROTRUSION_DRAFT_ANGLE: tPLANE_ANGLE_MEASURE?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.PROTRUSION_DRAFT_ANGLE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var PROTRUSION_LENGTH: tPOSITIVE_LENGTH_MEASURE?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.PROTRUSION_LENGTH
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var POINT_LIST: (SDAI.LIST<ePOINT>/*[2:nil]*/ )?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.POINT_LIST
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var POCKET_RADIUS: tPOSITIVE_LENGTH_MEASURE?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.POCKET_RADIUS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var THICKENED_FACE_LIST: (SDAI.LIST<SDAI.SET<eFACE_SURFACE>/*[1:nil]*/ >/*[1:nil]*/ )?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.THICKENED_FACE_LIST
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var CORNER_RADIUS: tNON_NEGATIVE_LENGTH_MEASURE?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.CORNER_RADIUS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: SELECT( ``sGENERALIZED_SURFACE_SELECT`` )
    public var PARENT_SURFACE: eSURFACE?  {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let select): return select.PARENT_SURFACE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: SELECT( ``sGENERALIZED_SURFACE_SELECT`` )
    public var USENSE: SDAI.BOOLEAN?  {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let select): return select.USENSE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: SELECT( ``sGENERALIZED_SURFACE_SELECT`` )
    public var SURFACE_FORM: nB_SPLINE_SURFACE_FORM?  {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let select): return select.SURFACE_FORM
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: SELECT( ``sGENERALIZED_SURFACE_SELECT`` )
    public var SCALING_FACTORS: (SDAI.LIST<SDAI.REAL>/*[4:nil]*/ )?  {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let select): return select.SCALING_FACTORS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: SELECT( ``sGENERALIZED_SURFACE_SELECT`` )
    public var DISTANCE: tLENGTH_MEASURE?  {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let select): return select.DISTANCE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var SLOT_LENGTH: tPOSITIVE_LENGTH_MEASURE?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.SLOT_LENGTH
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: SELECT( ``sGENERALIZED_SURFACE_SELECT`` )
    public var POSITION: eAXIS2_PLACEMENT_3D?  {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let select): return select.POSITION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var RATIONALE: tTEXT?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.RATIONALE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var RIGHT_OFFSET_DISTANCE: tPOSITIVE_LENGTH_MEASURE?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.RIGHT_OFFSET_DISTANCE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: SELECT( ``sGENERALIZED_SURFACE_SELECT`` )
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var TRANSFORMATION: eCARTESIAN_TRANSFORMATION_OPERATOR_3D?  {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let select): return select.TRANSFORMATION
      case ._SOLID_MODEL(let entity): return entity.TRANSFORMATION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: SELECT( ``sGENERALIZED_SURFACE_SELECT`` )
    public var GENERALISED_MINOR_RADIUS: tPOSITIVE_LENGTH_MEASURE?  {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let select): return select.GENERALISED_MINOR_RADIUS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: SELECT( ``sGENERALIZED_SURFACE_SELECT`` )
    public var V2: tPARAMETER_VALUE?  {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let select): return select.V2
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var GROOVE_WIDTH: tPOSITIVE_LENGTH_MEASURE?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.GROOVE_WIDTH
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var TREE_ROOT_EXPRESSION: sCSG_SELECT?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.TREE_ROOT_EXPRESSION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var POCKET_WIDTH: tPOSITIVE_LENGTH_MEASURE?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.POCKET_WIDTH
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: SELECT( ``sGENERALIZED_SURFACE_SELECT`` )
    public var V1: tPARAMETER_VALUE?  {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let select): return select.V1
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var POSITIVE_SIDE: SDAI.BOOLEAN?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.POSITIVE_SIDE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var BASE_SOLID: sBASE_SOLID_SELECT?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.BASE_SOLID
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var DELETED_FACE_SET: (SDAI.SET<eFACE_SURFACE>/*[1:nil]*/ )?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.DELETED_FACE_SET
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var DRAFTED_EDGES: (SDAI.LIST<SDAI.SET<eEDGE_CURVE>/*[1:nil]*/ >/*[2:nil]*/ )?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.DRAFTED_EDGES
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: SELECT( ``sGENERALIZED_SURFACE_SELECT`` )
    public var AXIS_LINE: eLINE?  {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let select): return select.AXIS_LINE
      case ._SOLID_MODEL/*(let entity)*/: return nil // AMBIGUOUS ATTRIBUTE for eSOLID_MODEL
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var OFFSET_ANGLE: tPOSITIVE_PLANE_ANGLE_MEASURE?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.OFFSET_ANGLE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var LEFT_OFFSET_DISTANCE: tPOSITIVE_LENGTH_MEASURE?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.LEFT_OFFSET_DISTANCE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var SEGMENT_DEPTHS: (SDAI.LIST<tPOSITIVE_LENGTH_MEASURE>/*[1:SEGMENTS]*/ )?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.SEGMENT_DEPTHS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var COLLAR_DEPTH: tPOSITIVE_LENGTH_MEASURE?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.COLLAR_DEPTH
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var CLOSED_ENDS: (SDAI.LIST<SDAI.LOGICAL>/*[2:2]*/ )?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.CLOSED_ENDS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: SELECT( ``sGENERALIZED_SURFACE_SELECT`` )
    public var SEMI_ANGLE: tPLANE_ANGLE_MEASURE?  {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let select): return select.SEMI_ANGLE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var GROOVE_RADIUS: tPOSITIVE_LENGTH_MEASURE?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.GROOVE_RADIUS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: SELECT( ``sGENERALIZED_SURFACE_SELECT`` )
    public var KNOT_SPEC: nKNOT_TYPE?  {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let select): return select.KNOT_SPEC
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var SPHERE_RADIUS: tPOSITIVE_LENGTH_MEASURE?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.SPHERE_RADIUS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var FIRST_OFFSET: tNON_NEGATIVE_LENGTH_MEASURE?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.FIRST_OFFSET
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var DRAFT_ANGLES: (SDAI.LIST<tPLANE_ANGLE_MEASURE>/*[2:nil]*/ )?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.DRAFT_ANGLES
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: SELECT( ``sGENERALIZED_SURFACE_SELECT`` )
    public var FACE_GEOMETRY: eSURFACE?  {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let select): return select.FACE_GEOMETRY
      default: return nil
      }
    }

    //MARK: var SEGMENTS: (AMBIGUOUS)

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var COLUMN_COUNT: tPOSITIVE_INTEGER?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.COLUMN_COUNT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var THICKNESS_LIST: (SDAI.LIST<tLENGTH_MEASURE>/*[1:nil]*/ )?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.THICKNESS_LIST
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var COLUMN_SPACING: tLENGTH_MEASURE?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.COLUMN_SPACING
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var PROTRUSION_CORNER_RADIUS: tNON_NEGATIVE_LENGTH_MEASURE?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.PROTRUSION_CORNER_RADIUS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var SWEPT_AREA: eCURVE_BOUNDED_SURFACE?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.SWEPT_AREA
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var SCULPTURING_ELEMENT: sGENERALIZED_SURFACE_SELECT?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.SCULPTURING_ELEMENT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var THICKNESS2: tLENGTH_MEASURE?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.THICKNESS2
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: SELECT( ``sGENERALIZED_SURFACE_SELECT`` )
    public var FIXED_REFERENCE: eDIRECTION?  {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let select): return select.FIXED_REFERENCE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var SECOND_OFFSET: tNON_NEGATIVE_LENGTH_MEASURE?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.SECOND_OFFSET
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: SELECT( ``sGENERALIZED_SURFACE_SELECT`` )
    public var CONTROL_POINTS: (SDAI.ARRAY<SDAI.ARRAY<eCARTESIAN_POINT>/*[0:V_UPPER]*/ >/*[0:U_UPPER]*/ )?  {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let select): return select.CONTROL_POINTS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var PROTRUSION_WIDTH: tPOSITIVE_LENGTH_MEASURE?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.PROTRUSION_WIDTH
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var PROTRUSION_RADIUS: tPOSITIVE_LENGTH_MEASURE?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.PROTRUSION_RADIUS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var SLOT_CENTRELINE: eBOUNDED_CURVE?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.SLOT_CENTRELINE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var SEMI_APEX_ANGLE: tPOSITIVE_PLANE_ANGLE_MEASURE?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.SEMI_APEX_ANGLE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var BLENDED_EDGES: (SDAI.LIST_UNIQUE<eEDGE_CURVE>/*[1:nil]*/ )?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.BLENDED_EDGES
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var OUTER: eCLOSED_SHELL?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.OUTER
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var EDGE_FUNCTION_LIST: (SDAI.LIST<nBLEND_RADIUS_VARIATION_TYPE>/*[1:nil]*/ )?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.EDGE_FUNCTION_LIST
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: SELECT( ``sGENERALIZED_SURFACE_SELECT`` )
    public var U_DEGREE: SDAI.INTEGER?  {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let select): return select.U_DEGREE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: SELECT( ``sGENERALIZED_SURFACE_SELECT`` )
    public var SAME_SENSE: SDAI.BOOLEAN?  {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let select): return select.SAME_SENSE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: SELECT( ``sGENERALIZED_SURFACE_SELECT`` )
    public var IMPLICIT_OUTER: SDAI.BOOLEAN?  {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let select): return select.IMPLICIT_OUTER
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: SELECT( ``sGENERALIZED_SURFACE_SELECT`` )
    public var KNOT_U_UPPER: SDAI.INTEGER?  {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let select): return select.KNOT_U_UPPER
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var EXIT_FACES: (SDAI.SET<eFACE_SURFACE>/*[1:nil]*/ )?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.EXIT_FACES
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: SELECT( ``sGENERALIZED_SURFACE_SELECT`` )
    public var PERMANENT_ID: tIDENTIFIER?  {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let select): return select.PERMANENT_ID
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: SELECT( ``sGENERALIZED_SURFACE_SELECT`` )
    public var U_UPPER: SDAI.INTEGER?  {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let select): return select.U_UPPER
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var PLACING: eAXIS2_PLACEMENT_3D?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.PLACING
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: SELECT( ``sGENERALIZED_SURFACE_SELECT`` )
    public var V_B_SPLINES: (SDAI.LIST<eLOCAL_B_SPLINE>/*[4:nil]*/ )?  {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let select): return select.V_B_SPLINES
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: SELECT( ``sGENERALIZED_SURFACE_SELECT`` )
    public var DOMAIN: (SDAI.LIST<SDAI.LIST<SDAI.REAL>/*[2:2]*/ >/*[2:2]*/ )?  {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let select): return select.DOMAIN
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: SELECT( ``sGENERALIZED_SURFACE_SELECT`` )
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var NAME: tLABEL?  {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let select): return select.NAME
      case ._SOLID_MODEL(let entity): return entity.NAME
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var PARENT_SOLID: eSOLID_MODEL?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.PARENT_SOLID
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: SELECT( ``sGENERALIZED_SURFACE_SELECT`` )
    public var EXTRUSION_AXIS: eVECTOR?  {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let select): return select.EXTRUSION_AXIS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var VOIDS: (SDAI.SET<eORIENTED_CLOSED_SHELL>/*[1:nil]*/ )?  {
      switch self {
      case ._SOLID_MODEL(let entity): return entity.VOIDS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: SELECT( ``sGENERALIZED_SURFACE_SELECT`` )
    public var WEIGHTS: (SDAI.ARRAY<SDAI.ARRAY<SDAI.REAL>/*[0:V_UPPER]*/ >/*[0:U_UPPER]*/ )?  {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let select): return select.WEIGHTS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sTRIM_CONDITION_SELECT``
    /// - origin: SELECT( ``sGENERALIZED_SURFACE_SELECT`` )
    /// - origin: ENTITY( ``eSOLID_MODEL`` )
    public var DIM: tDIMENSION_COUNT?  {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let select): return select.DIM
      case ._SOLID_MODEL(let entity): return entity.DIM
      default: return nil
      }
    }


    //MARK: - SDAIValue
    public func isValueEqual<T: SDAIValue>(to rhs: T) -> Bool {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let selection): return selection.value.isValueEqual(to: rhs)
      case ._LENGTH_MEASURE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PLANE_ANGLE_MEASURE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._SOLID_MODEL(let selection): return selection.value.isValueEqual(to: rhs)
      }
    }

    public func isValueEqualOptionally<T: SDAIValue>(to rhs: T?) -> Bool? {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._LENGTH_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PLANE_ANGLE_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._SOLID_MODEL(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      }
    }

    public func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._LENGTH_MEASURE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PLANE_ANGLE_MEASURE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._SOLID_MODEL(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      }
    }

    public func isValueEqual<T: SDAIValue>(to rhs: T, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._LENGTH_MEASURE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PLANE_ANGLE_MEASURE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._SOLID_MODEL(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      }
    }

    public func isValueEqualOptionally<T: SDAIValue>(to rhs: T?, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._LENGTH_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PLANE_ANGLE_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._SOLID_MODEL(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      }
    }


    //MARK: SDAIGenericTypeBase
    public func copy() -> Self {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let selection): return ._GENERALIZED_SURFACE_SELECT(selection.copy())
      case ._LENGTH_MEASURE(let selection): return ._LENGTH_MEASURE(selection.copy())
      case ._PLANE_ANGLE_MEASURE(let selection): return ._PLANE_ANGLE_MEASURE(selection.copy())
      case ._SOLID_MODEL(let selection): return ._SOLID_MODEL(selection.copy())
      }
    }

    //MARK: SDAIGenericType
    public var typeMembers: Set<SDAI.STRING> {
      var members: Set<SDAI.STRING> = [SDAI.STRING(Self.typeName)]
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let selection): members.formUnion(selection.typeMembers)
      case ._LENGTH_MEASURE(let selection): members.formUnion(selection.typeMembers)
      case ._PLANE_ANGLE_MEASURE(let selection): members.formUnion(selection.typeMembers)
      case ._SOLID_MODEL(let selection): members.formUnion(selection.typeMembers)
      }
      return members
    }

    public var entityReference: SDAI.EntityReference? {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let selection): return selection.entityReference
      case ._LENGTH_MEASURE(let selection): return selection.entityReference
      case ._PLANE_ANGLE_MEASURE(let selection): return selection.entityReference
      case ._SOLID_MODEL(let selection): return selection.entityReference
      }
    }
    public var stringValue: SDAI.STRING? {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let selection): return selection.stringValue
      case ._LENGTH_MEASURE(let selection): return selection.stringValue
      case ._PLANE_ANGLE_MEASURE(let selection): return selection.stringValue
      case ._SOLID_MODEL(let selection): return selection.stringValue
      }
    }
    public var binaryValue: SDAI.BINARY? {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let selection): return selection.binaryValue
      case ._LENGTH_MEASURE(let selection): return selection.binaryValue
      case ._PLANE_ANGLE_MEASURE(let selection): return selection.binaryValue
      case ._SOLID_MODEL(let selection): return selection.binaryValue
      }
    }
    public var logicalValue: SDAI.LOGICAL? {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let selection): return selection.logicalValue
      case ._LENGTH_MEASURE(let selection): return selection.logicalValue
      case ._PLANE_ANGLE_MEASURE(let selection): return selection.logicalValue
      case ._SOLID_MODEL(let selection): return selection.logicalValue
      }
    }
    public var booleanValue: SDAI.BOOLEAN? {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let selection): return selection.booleanValue
      case ._LENGTH_MEASURE(let selection): return selection.booleanValue
      case ._PLANE_ANGLE_MEASURE(let selection): return selection.booleanValue
      case ._SOLID_MODEL(let selection): return selection.booleanValue
      }
    }
    public var numberValue: SDAI.NUMBER? {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let selection): return selection.numberValue
      case ._LENGTH_MEASURE(let selection): return selection.numberValue
      case ._PLANE_ANGLE_MEASURE(let selection): return selection.numberValue
      case ._SOLID_MODEL(let selection): return selection.numberValue
      }
    }
    public var realValue: SDAI.REAL? {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let selection): return selection.realValue
      case ._LENGTH_MEASURE(let selection): return selection.realValue
      case ._PLANE_ANGLE_MEASURE(let selection): return selection.realValue
      case ._SOLID_MODEL(let selection): return selection.realValue
      }
    }
    public var integerValue: SDAI.INTEGER? {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let selection): return selection.integerValue
      case ._LENGTH_MEASURE(let selection): return selection.integerValue
      case ._PLANE_ANGLE_MEASURE(let selection): return selection.integerValue
      case ._SOLID_MODEL(let selection): return selection.integerValue
      }
    }
    public var genericEnumValue: SDAI.GenericEnumValue? {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let selection): return selection.genericEnumValue
      case ._LENGTH_MEASURE(let selection): return selection.genericEnumValue
      case ._PLANE_ANGLE_MEASURE(let selection): return selection.genericEnumValue
      case ._SOLID_MODEL(let selection): return selection.genericEnumValue
      }
    }
    public func arrayOptionalValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.ARRAY_OPTIONAL<ELEM>? {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._LENGTH_MEASURE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PLANE_ANGLE_MEASURE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._SOLID_MODEL(let selection): return selection.arrayOptionalValue(elementType:elementType)
      }
    }
    public func arrayValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.ARRAY<ELEM>? {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let selection): return selection.arrayValue(elementType:elementType)
      case ._LENGTH_MEASURE(let selection): return selection.arrayValue(elementType:elementType)
      case ._PLANE_ANGLE_MEASURE(let selection): return selection.arrayValue(elementType:elementType)
      case ._SOLID_MODEL(let selection): return selection.arrayValue(elementType:elementType)
      }
    }
    public func listValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.LIST<ELEM>? {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let selection): return selection.listValue(elementType:elementType)
      case ._LENGTH_MEASURE(let selection): return selection.listValue(elementType:elementType)
      case ._PLANE_ANGLE_MEASURE(let selection): return selection.listValue(elementType:elementType)
      case ._SOLID_MODEL(let selection): return selection.listValue(elementType:elementType)
      }
    }
    public func bagValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.BAG<ELEM>? {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let selection): return selection.bagValue(elementType:elementType)
      case ._LENGTH_MEASURE(let selection): return selection.bagValue(elementType:elementType)
      case ._PLANE_ANGLE_MEASURE(let selection): return selection.bagValue(elementType:elementType)
      case ._SOLID_MODEL(let selection): return selection.bagValue(elementType:elementType)
      }
    }
    public func setValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.SET<ELEM>? {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let selection): return selection.setValue(elementType:elementType)
      case ._LENGTH_MEASURE(let selection): return selection.setValue(elementType:elementType)
      case ._PLANE_ANGLE_MEASURE(let selection): return selection.setValue(elementType:elementType)
      case ._SOLID_MODEL(let selection): return selection.setValue(elementType:elementType)
      }
    }
    public func enumValue<ENUM:SDAIEnumerationType>(enumType:ENUM.Type) -> ENUM? {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let selection): return selection.enumValue(enumType:enumType)
      case ._LENGTH_MEASURE(let selection): return selection.enumValue(enumType:enumType)
      case ._PLANE_ANGLE_MEASURE(let selection): return selection.enumValue(enumType:enumType)
      case ._SOLID_MODEL(let selection): return selection.enumValue(enumType:enumType)
      }
    }

    //MARK: SDAIUnderlyingType
    public typealias FundamentalType = Self
    public static var typeName: String = 
      "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.TRIM_CONDITION_SELECT"
    public var asFundamentalType: FundamentalType { return self }

    //MARK: SDAIObservableAggregateElement
    public var entityReferences: AnySequence<SDAI.EntityReference> {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let select): return select.entityReferences
      case ._LENGTH_MEASURE: return AnySequence<SDAI.EntityReference>(EmptyCollection<SDAI.EntityReference>())
      case ._PLANE_ANGLE_MEASURE: return AnySequence<SDAI.EntityReference>(EmptyCollection<SDAI.EntityReference>())
      case ._SOLID_MODEL(let entity): return entity.entityReferences
      }
    }

    public mutating func configure(with observer: SDAI.EntityReferenceObserver) {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(var select): 
        select.configure(with: observer)
        self = ._GENERALIZED_SURFACE_SELECT(select)
      case ._LENGTH_MEASURE: break
      case ._PLANE_ANGLE_MEASURE: break
      case ._SOLID_MODEL(let entity): 
        entity.configure(with: observer)
        self = ._SOLID_MODEL(entity)
      }
    }

    public mutating func teardownObserver() {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(var select): 
        select.teardownObserver()
        self = ._GENERALIZED_SURFACE_SELECT(select)
      case ._LENGTH_MEASURE: break
      case ._PLANE_ANGLE_MEASURE: break
      case ._SOLID_MODEL(let entity): 
        entity.teardownObserver()
        self = ._SOLID_MODEL(entity)
      }
    }

    //MARK: SDAIAggregationBehavior
    public var aggregationHiBound: Int? {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let selection): return selection.aggregationHiBound
      default: return nil
      }
    }
    public var aggregationHiIndex: Int? {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let selection): return selection.aggregationHiIndex
      default: return nil
      }
    }
    public var aggregationLoBound: Int? {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let selection): return selection.aggregationLoBound
      default: return nil
      }
    }
    public var aggregationLoIndex: Int? {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let selection): return selection.aggregationLoIndex
      default: return nil
      }
    }
    public var aggregationSize: Int? {
      switch self {
      case ._GENERALIZED_SURFACE_SELECT(let selection): return selection.aggregationSize
      default: return nil
      }
    }

    //MARK: WHERE RULE VALIDATION (SELECT TYPE)
    public static func validateWhereRules(instance:Self?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      var result: [SDAI.WhereLabel:SDAI.LOGICAL] = [:]
      switch instance {
      case ._GENERALIZED_SURFACE_SELECT(let selectValue): 
        result = sGENERALIZED_SURFACE_SELECT.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\GENERALIZED_SURFACE_SELECT")
      case ._LENGTH_MEASURE(let selectValue): 
        result = tLENGTH_MEASURE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\LENGTH_MEASURE")
      case ._PLANE_ANGLE_MEASURE(let selectValue): 
        result = tPLANE_ANGLE_MEASURE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PLANE_ANGLE_MEASURE")
      case ._SOLID_MODEL(let selectValue): result = eSOLID_MODEL.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\SOLID_MODEL")
      case nil: break
      }

      return result
    }

  }

}


//MARK: - SELECT TYPE HIERARCHY
public protocol AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sTRIM_CONDITION_SELECT__type: SDAISelectType {

  //MARK: GROUP REFERENCES
  var super_sGENERALIZED_SURFACE_SELECT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sGENERALIZED_SURFACE_SELECT? { get }
  var super_tLENGTH_MEASURE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE? { get }
  var super_tPLANE_ANGLE_MEASURE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE? { get }
  var super_eSURFACED_OPEN_SHELL: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSURFACED_OPEN_SHELL? { get }
  var super_eFACE_SURFACE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFACE_SURFACE? { get }
  var super_eTOPOLOGICAL_REPRESENTATION_ITEM: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eTOPOLOGICAL_REPRESENTATION_ITEM? { get }
  var super_eOPEN_SHELL: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eOPEN_SHELL? { get }
  var super_eCONNECTED_FACE_SET: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONNECTED_FACE_SET? { get }
  var super_eSOLID_MODEL: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSOLID_MODEL? { get }
  var super_eFACE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFACE? { get }
  var super_eREPRESENTATION_ITEM: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_ITEM? { get }
  var super_eSURFACE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSURFACE? { get }
  var super_eGEOMETRIC_REPRESENTATION_ITEM: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGEOMETRIC_REPRESENTATION_ITEM? { get }

  //MARK: ENTITY ATTRIBUTE REFERENCES
  var KNOT_V_UPPER: SDAI.INTEGER?  { get }
  var MAJOR_RADIUS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { get }
  var SLOT_WIDTH: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { get }
  var END_EXIT_FACES: (SDAI.LIST<SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFACE_SURFACE>/*[0:
    nil]*/ >/*[2:2]*/ )?  { get }
  var REPLICATE_COUNT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_INTEGER?  { get }
  var CFS_FACES: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFACE>/*[1:nil]*/ )?  { get }
  var RADIUS_LIST: (SDAI.LIST<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE>/*[2:
    nil]*/ )?  { get }
  var ANGULAR_SPACING: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { get }
  var OFFSET1: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE?  { get }
  var FLOOR_BLEND_RADIUS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tNON_NEGATIVE_LENGTH_MEASURE?  { get }
  var GENERALISED_MAJOR_RADIUS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { get }
  var U_B_SPLINES: (SDAI.LIST<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eLOCAL_B_SPLINE>/*[4:nil]*/ )?  { get }
  var OFFSET2: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE?  { get }
  var BASE_ELEMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sGENERALIZED_SURFACE_SELECT?  { get }
  var U_MULTIPLICITIES: (SDAI.LIST<SDAI.INTEGER>/*[2:nil]*/ )?  { get }
  var VSENSE: SDAI.BOOLEAN?  { get }
  var RADIAL_ALIGNMENT: SDAI.BOOLEAN?  { get }
  var SEGMENT_RADII: (SDAI.LIST<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE>/*[1:
    SEGMENTS]*/ )?  { get }
  var LEFT_OFFSET: SDAI.BOOLEAN?  { get }
  var ROW_SPACING: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE?  { get }
  var TIP_RADIUS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tNON_NEGATIVE_LENGTH_MEASURE?  { get }
  var SWEPT_CURVE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCURVE?  { get }
  var BOUNDS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFACE_BOUND>/*[1:nil]*/ )?  { get }
  var N_U: SDAI.INTEGER?  { get }
  var THICKNESS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE?  { get }
  var REFERENCE_SURFACE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSURFACE?  { get }
  var TEE_SECTION_WIDTH: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { get }
  var FILLET_RADIUS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tNON_NEGATIVE_LENGTH_MEASURE?  { get }
  var N_V: SDAI.INTEGER?  { get }
  var FIRST_TRIM_INTENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nTRIM_INTENT?  { get }
  var LINEARLY_INDEPENDENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nLINEARLY_INDEPENDENT_ENUM?  { get }
  var SECOND_TRIM_INTENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nTRIM_INTENT?  { get }
  var INNER_RADIUS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { get }
  var PROTRUSION_HEIGHT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { get }
  var V_DEGREE: SDAI.INTEGER?  { get }
  var LOCALLY_REFINED_SPLINE_TYPE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nLOCALLY_REFINED_SPLINE_TYPE_ENUM?  { get }
  var V_MULTIPLICITIES: (SDAI.LIST<SDAI.INTEGER>/*[2:nil]*/ )?  { get }
  var BOUNDARIES: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eBOUNDARY_CURVE>/*[1:nil]*/ )?  { get }
  var ROW_COUNT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_INTEGER?  { get }
  var POCKET_LENGTH: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { get }
  var EXTERNAL_GROOVE: SDAI.BOOLEAN?  { get }
  var REPLICATED_ELEMENT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION?  { get }
  var SELECT_OUTER: SDAI.BOOLEAN?  { get }
  var MINOR_RADIUS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { get }
  var SWEPT_FACE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFACE_SURFACE?  { get }
  var END_CONDITIONS: (SDAI.LIST<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sBLEND_END_CONDITION_SELECT>
    /*[2:2]*/ )?  { get }
  var V_UPPER: SDAI.INTEGER?  { get }
  var ORIENTATION: SDAI.BOOLEAN?  { get }
  var AXIS_POSITION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eAXIS1_PLACEMENT?  { get }
  var PERMANENT_AGGREGATE_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { get }
  var CONICAL_TRANSITIONS: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONICAL_STEPPED_HOLE_TRANSITION>/*[1:nil]*/ )?  { get }
  var U1: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPARAMETER_VALUE?  { get }
  var U2: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPARAMETER_VALUE?  { get }
  var SKEWNESS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE?  { get }
  var PROTRUSION_DRAFT_ANGLE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { get }
  var PROTRUSION_LENGTH: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { get }
  var POINT_LIST: (SDAI.LIST<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePOINT>/*[2:nil]*/ )?  { get }
  var POCKET_RADIUS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { get }
  var THICKENED_FACE_LIST: (SDAI.LIST<SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFACE_SURFACE>
    /*[1:nil]*/ >/*[1:nil]*/ )?  { get }
  var CORNER_RADIUS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tNON_NEGATIVE_LENGTH_MEASURE?  { get }
  var PARENT_SURFACE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSURFACE?  { get }
  var USENSE: SDAI.BOOLEAN?  { get }
  var SURFACE_FORM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nB_SPLINE_SURFACE_FORM?  { get }
  var SCALING_FACTORS: (SDAI.LIST<SDAI.REAL>/*[4:nil]*/ )?  { get }
  var DISTANCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE?  { get }
  var SLOT_LENGTH: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { get }
  var POSITION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eAXIS2_PLACEMENT_3D?  { get }
  var RATIONALE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT?  { get }
  var RIGHT_OFFSET_DISTANCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { get }
  var TRANSFORMATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCARTESIAN_TRANSFORMATION_OPERATOR_3D?  { get }
  var GENERALISED_MINOR_RADIUS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { get }
  var V2: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPARAMETER_VALUE?  { get }
  var GROOVE_WIDTH: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { get }
  var TREE_ROOT_EXPRESSION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sCSG_SELECT?  { get }
  var POCKET_WIDTH: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { get }
  var V1: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPARAMETER_VALUE?  { get }
  var POSITIVE_SIDE: SDAI.BOOLEAN?  { get }
  var BASE_SOLID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sBASE_SOLID_SELECT?  { get }
  var DELETED_FACE_SET: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFACE_SURFACE>/*[1:nil]*/ )?  { get }
  var DRAFTED_EDGES: (SDAI.LIST<SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEDGE_CURVE>/*[1:nil]*/ >
    /*[2:nil]*/ )?  { get }
  var AXIS_LINE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eLINE?  { get }
  var OFFSET_ANGLE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_PLANE_ANGLE_MEASURE?  { get }
  var LEFT_OFFSET_DISTANCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { get }
  var SEGMENT_DEPTHS: (SDAI.LIST<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE>/*[
    1:SEGMENTS]*/ )?  { get }
  var COLLAR_DEPTH: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { get }
  var CLOSED_ENDS: (SDAI.LIST<SDAI.LOGICAL>/*[2:2]*/ )?  { get }
  var SEMI_ANGLE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { get }
  var GROOVE_RADIUS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { get }
  var KNOT_SPEC: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nKNOT_TYPE?  { get }
  var SPHERE_RADIUS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { get }
  var FIRST_OFFSET: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tNON_NEGATIVE_LENGTH_MEASURE?  { get }
  var DRAFT_ANGLES: (SDAI.LIST<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE>/*[2:nil]*/ )?  { get }
  var FACE_GEOMETRY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSURFACE?  { get }
  var COLUMN_COUNT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_INTEGER?  { get }
  var THICKNESS_LIST: (SDAI.LIST<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE>/*[1:nil]*/ )?  { get }
  var COLUMN_SPACING: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE?  { get }
  var PROTRUSION_CORNER_RADIUS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tNON_NEGATIVE_LENGTH_MEASURE?  { get }
  var SWEPT_AREA: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCURVE_BOUNDED_SURFACE?  { get }
  var SCULPTURING_ELEMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sGENERALIZED_SURFACE_SELECT?  { get }
  var THICKNESS2: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE?  { get }
  var FIXED_REFERENCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDIRECTION?  { get }
  var SECOND_OFFSET: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tNON_NEGATIVE_LENGTH_MEASURE?  { get }
  var CONTROL_POINTS: (SDAI.ARRAY<SDAI.ARRAY<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCARTESIAN_POINT>
    /*[0:V_UPPER]*/ >/*[0:U_UPPER]*/ )?  { get }
  var PROTRUSION_WIDTH: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { get }
  var PROTRUSION_RADIUS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { get }
  var SLOT_CENTRELINE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eBOUNDED_CURVE?  { get }
  var SEMI_APEX_ANGLE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_PLANE_ANGLE_MEASURE?  { get }
  var BLENDED_EDGES: (SDAI.LIST_UNIQUE<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEDGE_CURVE>/*[1:nil]*/ )?  { get }
  var OUTER: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCLOSED_SHELL?  { get }
  var EDGE_FUNCTION_LIST: (SDAI.LIST<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nBLEND_RADIUS_VARIATION_TYPE>/*[1:nil]*/ )?  { get }
  var U_DEGREE: SDAI.INTEGER?  { get }
  var SAME_SENSE: SDAI.BOOLEAN?  { get }
  var IMPLICIT_OUTER: SDAI.BOOLEAN?  { get }
  var KNOT_U_UPPER: SDAI.INTEGER?  { get }
  var EXIT_FACES: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFACE_SURFACE>/*[1:nil]*/ )?  { get }
  var PERMANENT_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { get }
  var U_UPPER: SDAI.INTEGER?  { get }
  var PLACING: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eAXIS2_PLACEMENT_3D?  { get }
  var V_B_SPLINES: (SDAI.LIST<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eLOCAL_B_SPLINE>/*[4:nil]*/ )?  { get }
  var DOMAIN: (SDAI.LIST<SDAI.LIST<SDAI.REAL>/*[2:2]*/ >/*[2:2]*/ )?  { get }
  var NAME: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { get }
  var PARENT_SOLID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSOLID_MODEL?  { get }
  var EXTRUSION_AXIS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eVECTOR?  { get }
  var VOIDS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eORIENTED_CLOSED_SHELL>/*[1:nil]*/ )?  { get }
  var WEIGHTS: (SDAI.ARRAY<SDAI.ARRAY<SDAI.REAL>/*[0:V_UPPER]*/ >/*[0:U_UPPER]*/ )?  { get }
  var DIM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tDIMENSION_COUNT?  { get }
}

public protocol AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sTRIM_CONDITION_SELECT__subtype: 
  AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sTRIM_CONDITION_SELECT__type, SDAIDefinedType
where Supertype: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sTRIM_CONDITION_SELECT__type
{}

public extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sTRIM_CONDITION_SELECT__subtype {
  //MARK: CONSTRUCTORS
  init?(possiblyFrom complex: SDAI.ComplexEntity?) {
    self.init(fundamental: FundamentalType(possiblyFrom: complex))
  }

  init?<T: SDAIUnderlyingType>(possiblyFrom underlyingType: T?) {
    self.init(fundamental: FundamentalType(possiblyFrom: underlyingType))
  }

  init?<G: SDAIGenericType>(fromGeneric generic: G?) {
    self.init(fundamental: FundamentalType.convert(fromGeneric: generic))
  }

  //MARK: GROUP REFERENCES
  var super_sGENERALIZED_SURFACE_SELECT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sGENERALIZED_SURFACE_SELECT? { rep.super_sGENERALIZED_SURFACE_SELECT }
  var super_tLENGTH_MEASURE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE? { rep.super_tLENGTH_MEASURE }
  var super_tPLANE_ANGLE_MEASURE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE? { rep.super_tPLANE_ANGLE_MEASURE }
  var super_eSURFACED_OPEN_SHELL: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSURFACED_OPEN_SHELL? { rep.super_eSURFACED_OPEN_SHELL }
  var super_eFACE_SURFACE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFACE_SURFACE? { rep.super_eFACE_SURFACE }
  var super_eTOPOLOGICAL_REPRESENTATION_ITEM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eTOPOLOGICAL_REPRESENTATION_ITEM? { rep.super_eTOPOLOGICAL_REPRESENTATION_ITEM }
  var super_eOPEN_SHELL: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eOPEN_SHELL? { rep.super_eOPEN_SHELL }
  var super_eCONNECTED_FACE_SET: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONNECTED_FACE_SET? { rep.super_eCONNECTED_FACE_SET }
  var super_eSOLID_MODEL: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSOLID_MODEL? { rep.super_eSOLID_MODEL }
  var super_eFACE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFACE? { rep.super_eFACE }
  var super_eREPRESENTATION_ITEM: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_ITEM? { rep.super_eREPRESENTATION_ITEM }
  var super_eSURFACE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSURFACE? { rep.super_eSURFACE }
  var super_eGEOMETRIC_REPRESENTATION_ITEM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGEOMETRIC_REPRESENTATION_ITEM? { rep.super_eGEOMETRIC_REPRESENTATION_ITEM }

  //MARK: ENTITY ATTRIBUTE REFERENCES
  var KNOT_V_UPPER: SDAI.INTEGER?  { rep.KNOT_V_UPPER }
  var MAJOR_RADIUS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { rep.MAJOR_RADIUS }
  var SLOT_WIDTH: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { rep.SLOT_WIDTH }
  var END_EXIT_FACES: (SDAI.LIST<SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFACE_SURFACE>/*[0:
    nil]*/ >/*[2:2]*/ )?  { rep.END_EXIT_FACES }
  var REPLICATE_COUNT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_INTEGER?  { rep.REPLICATE_COUNT }
  var CFS_FACES: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFACE>/*[1:nil]*/ )?  { rep.CFS_FACES }
  var RADIUS_LIST: (SDAI.LIST<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE>/*[2:
    nil]*/ )?  { rep.RADIUS_LIST }
  var ANGULAR_SPACING: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { rep.ANGULAR_SPACING }
  var OFFSET1: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE?  { rep.OFFSET1 }
  var FLOOR_BLEND_RADIUS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tNON_NEGATIVE_LENGTH_MEASURE?  { rep.FLOOR_BLEND_RADIUS }
  var GENERALISED_MAJOR_RADIUS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { rep.GENERALISED_MAJOR_RADIUS }
  var U_B_SPLINES: (SDAI.LIST<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eLOCAL_B_SPLINE>/*[4:nil]*/ )?  { rep.U_B_SPLINES }
  var OFFSET2: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE?  { rep.OFFSET2 }
  var BASE_ELEMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sGENERALIZED_SURFACE_SELECT?  { rep.BASE_ELEMENT }
  var U_MULTIPLICITIES: (SDAI.LIST<SDAI.INTEGER>/*[2:nil]*/ )?  { rep.U_MULTIPLICITIES }
  var VSENSE: SDAI.BOOLEAN?  { rep.VSENSE }
  var RADIAL_ALIGNMENT: SDAI.BOOLEAN?  { rep.RADIAL_ALIGNMENT }
  var SEGMENT_RADII: (SDAI.LIST<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE>/*[1:
    SEGMENTS]*/ )?  { rep.SEGMENT_RADII }
  var LEFT_OFFSET: SDAI.BOOLEAN?  { rep.LEFT_OFFSET }
  var ROW_SPACING: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE?  { rep.ROW_SPACING }
  var TIP_RADIUS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tNON_NEGATIVE_LENGTH_MEASURE?  { rep.TIP_RADIUS }
  var SWEPT_CURVE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCURVE?  { rep.SWEPT_CURVE }
  var BOUNDS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFACE_BOUND>/*[1:nil]*/ )?  { rep.BOUNDS }
  var N_U: SDAI.INTEGER?  { rep.N_U }
  var THICKNESS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE?  { rep.THICKNESS }
  var REFERENCE_SURFACE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSURFACE?  { rep.REFERENCE_SURFACE }
  var TEE_SECTION_WIDTH: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { rep.TEE_SECTION_WIDTH }
  var FILLET_RADIUS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tNON_NEGATIVE_LENGTH_MEASURE?  { rep.FILLET_RADIUS }
  var N_V: SDAI.INTEGER?  { rep.N_V }
  var FIRST_TRIM_INTENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nTRIM_INTENT?  { rep.FIRST_TRIM_INTENT }
  var LINEARLY_INDEPENDENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nLINEARLY_INDEPENDENT_ENUM?  { rep.LINEARLY_INDEPENDENT }
  var SECOND_TRIM_INTENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nTRIM_INTENT?  { rep.SECOND_TRIM_INTENT }
  var INNER_RADIUS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { rep.INNER_RADIUS }
  var PROTRUSION_HEIGHT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { rep.PROTRUSION_HEIGHT }
  var V_DEGREE: SDAI.INTEGER?  { rep.V_DEGREE }
  var LOCALLY_REFINED_SPLINE_TYPE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nLOCALLY_REFINED_SPLINE_TYPE_ENUM?  { rep.LOCALLY_REFINED_SPLINE_TYPE }
  var V_MULTIPLICITIES: (SDAI.LIST<SDAI.INTEGER>/*[2:nil]*/ )?  { rep.V_MULTIPLICITIES }
  var BOUNDARIES: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eBOUNDARY_CURVE>/*[1:nil]*/ )?  { rep.BOUNDARIES }
  var ROW_COUNT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_INTEGER?  { rep.ROW_COUNT }
  var POCKET_LENGTH: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { rep.POCKET_LENGTH }
  var EXTERNAL_GROOVE: SDAI.BOOLEAN?  { rep.EXTERNAL_GROOVE }
  var REPLICATED_ELEMENT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION?  { rep.REPLICATED_ELEMENT }
  var SELECT_OUTER: SDAI.BOOLEAN?  { rep.SELECT_OUTER }
  var MINOR_RADIUS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { rep.MINOR_RADIUS }
  var SWEPT_FACE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFACE_SURFACE?  { rep.SWEPT_FACE }
  var END_CONDITIONS: (SDAI.LIST<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sBLEND_END_CONDITION_SELECT>
    /*[2:2]*/ )?  { rep.END_CONDITIONS }
  var V_UPPER: SDAI.INTEGER?  { rep.V_UPPER }
  var ORIENTATION: SDAI.BOOLEAN?  { rep.ORIENTATION }
  var AXIS_POSITION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eAXIS1_PLACEMENT?  { rep.AXIS_POSITION }
  var PERMANENT_AGGREGATE_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { rep.PERMANENT_AGGREGATE_ID }
  var CONICAL_TRANSITIONS: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONICAL_STEPPED_HOLE_TRANSITION>/*[1:nil]*/ )?  { rep.CONICAL_TRANSITIONS }
  var U1: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPARAMETER_VALUE?  { rep.U1 }
  var U2: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPARAMETER_VALUE?  { rep.U2 }
  var SKEWNESS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE?  { rep.SKEWNESS }
  var PROTRUSION_DRAFT_ANGLE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { rep.PROTRUSION_DRAFT_ANGLE }
  var PROTRUSION_LENGTH: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { rep.PROTRUSION_LENGTH }
  var POINT_LIST: (SDAI.LIST<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePOINT>/*[2:nil]*/ )?  { rep.POINT_LIST }
  var POCKET_RADIUS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { rep.POCKET_RADIUS }
  var THICKENED_FACE_LIST: (SDAI.LIST<SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFACE_SURFACE>
    /*[1:nil]*/ >/*[1:nil]*/ )?  { rep.THICKENED_FACE_LIST }
  var CORNER_RADIUS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tNON_NEGATIVE_LENGTH_MEASURE?  { rep.CORNER_RADIUS }
  var PARENT_SURFACE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSURFACE?  { rep.PARENT_SURFACE }
  var USENSE: SDAI.BOOLEAN?  { rep.USENSE }
  var SURFACE_FORM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nB_SPLINE_SURFACE_FORM?  { rep.SURFACE_FORM }
  var SCALING_FACTORS: (SDAI.LIST<SDAI.REAL>/*[4:nil]*/ )?  { rep.SCALING_FACTORS }
  var DISTANCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE?  { rep.DISTANCE }
  var SLOT_LENGTH: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { rep.SLOT_LENGTH }
  var POSITION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eAXIS2_PLACEMENT_3D?  { rep.POSITION }
  var RATIONALE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT?  { rep.RATIONALE }
  var RIGHT_OFFSET_DISTANCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { rep.RIGHT_OFFSET_DISTANCE }
  var TRANSFORMATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCARTESIAN_TRANSFORMATION_OPERATOR_3D?  { rep.TRANSFORMATION }
  var GENERALISED_MINOR_RADIUS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { rep.GENERALISED_MINOR_RADIUS }
  var V2: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPARAMETER_VALUE?  { rep.V2 }
  var GROOVE_WIDTH: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { rep.GROOVE_WIDTH }
  var TREE_ROOT_EXPRESSION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sCSG_SELECT?  { rep.TREE_ROOT_EXPRESSION }
  var POCKET_WIDTH: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { rep.POCKET_WIDTH }
  var V1: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPARAMETER_VALUE?  { rep.V1 }
  var POSITIVE_SIDE: SDAI.BOOLEAN?  { rep.POSITIVE_SIDE }
  var BASE_SOLID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sBASE_SOLID_SELECT?  { rep.BASE_SOLID }
  var DELETED_FACE_SET: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFACE_SURFACE>/*[1:nil]*/ )?  { rep.DELETED_FACE_SET }
  var DRAFTED_EDGES: (SDAI.LIST<SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEDGE_CURVE>/*[1:nil]*/ >
    /*[2:nil]*/ )?  { rep.DRAFTED_EDGES }
  var AXIS_LINE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eLINE?  { rep.AXIS_LINE }
  var OFFSET_ANGLE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_PLANE_ANGLE_MEASURE?  { rep.OFFSET_ANGLE }
  var LEFT_OFFSET_DISTANCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { rep.LEFT_OFFSET_DISTANCE }
  var SEGMENT_DEPTHS: (SDAI.LIST<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE>/*[
    1:SEGMENTS]*/ )?  { rep.SEGMENT_DEPTHS }
  var COLLAR_DEPTH: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { rep.COLLAR_DEPTH }
  var CLOSED_ENDS: (SDAI.LIST<SDAI.LOGICAL>/*[2:2]*/ )?  { rep.CLOSED_ENDS }
  var SEMI_ANGLE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { rep.SEMI_ANGLE }
  var GROOVE_RADIUS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { rep.GROOVE_RADIUS }
  var KNOT_SPEC: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nKNOT_TYPE?  { rep.KNOT_SPEC }
  var SPHERE_RADIUS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { rep.SPHERE_RADIUS }
  var FIRST_OFFSET: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tNON_NEGATIVE_LENGTH_MEASURE?  { rep.FIRST_OFFSET }
  var DRAFT_ANGLES: (SDAI.LIST<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE>/*[2:nil]*/ )?  { rep.DRAFT_ANGLES }
  var FACE_GEOMETRY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSURFACE?  { rep.FACE_GEOMETRY }
  var COLUMN_COUNT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_INTEGER?  { rep.COLUMN_COUNT }
  var THICKNESS_LIST: (SDAI.LIST<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE>/*[1:nil]*/ )?  { rep.THICKNESS_LIST }
  var COLUMN_SPACING: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE?  { rep.COLUMN_SPACING }
  var PROTRUSION_CORNER_RADIUS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tNON_NEGATIVE_LENGTH_MEASURE?  { rep.PROTRUSION_CORNER_RADIUS }
  var SWEPT_AREA: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCURVE_BOUNDED_SURFACE?  { rep.SWEPT_AREA }
  var SCULPTURING_ELEMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sGENERALIZED_SURFACE_SELECT?  { rep.SCULPTURING_ELEMENT }
  var THICKNESS2: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE?  { rep.THICKNESS2 }
  var FIXED_REFERENCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDIRECTION?  { rep.FIXED_REFERENCE }
  var SECOND_OFFSET: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tNON_NEGATIVE_LENGTH_MEASURE?  { rep.SECOND_OFFSET }
  var CONTROL_POINTS: (SDAI.ARRAY<SDAI.ARRAY<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCARTESIAN_POINT>
    /*[0:V_UPPER]*/ >/*[0:U_UPPER]*/ )?  { rep.CONTROL_POINTS }
  var PROTRUSION_WIDTH: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { rep.PROTRUSION_WIDTH }
  var PROTRUSION_RADIUS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { rep.PROTRUSION_RADIUS }
  var SLOT_CENTRELINE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eBOUNDED_CURVE?  { rep.SLOT_CENTRELINE }
  var SEMI_APEX_ANGLE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_PLANE_ANGLE_MEASURE?  { rep.SEMI_APEX_ANGLE }
  var BLENDED_EDGES: (SDAI.LIST_UNIQUE<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEDGE_CURVE>/*[1:nil]*/ )?  { rep.BLENDED_EDGES }
  var OUTER: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCLOSED_SHELL?  { rep.OUTER }
  var EDGE_FUNCTION_LIST: (SDAI.LIST<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nBLEND_RADIUS_VARIATION_TYPE>/*[1:nil]*/ )?  { rep.EDGE_FUNCTION_LIST }
  var U_DEGREE: SDAI.INTEGER?  { rep.U_DEGREE }
  var SAME_SENSE: SDAI.BOOLEAN?  { rep.SAME_SENSE }
  var IMPLICIT_OUTER: SDAI.BOOLEAN?  { rep.IMPLICIT_OUTER }
  var KNOT_U_UPPER: SDAI.INTEGER?  { rep.KNOT_U_UPPER }
  var EXIT_FACES: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFACE_SURFACE>/*[1:nil]*/ )?  { rep.EXIT_FACES }
  var PERMANENT_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { rep.PERMANENT_ID }
  var U_UPPER: SDAI.INTEGER?  { rep.U_UPPER }
  var PLACING: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eAXIS2_PLACEMENT_3D?  { rep.PLACING }
  var V_B_SPLINES: (SDAI.LIST<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eLOCAL_B_SPLINE>/*[4:nil]*/ )?  { rep.V_B_SPLINES }
  var DOMAIN: (SDAI.LIST<SDAI.LIST<SDAI.REAL>/*[2:2]*/ >/*[2:2]*/ )?  { rep.DOMAIN }
  var NAME: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { rep.NAME }
  var PARENT_SOLID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSOLID_MODEL?  { rep.PARENT_SOLID }
  var EXTRUSION_AXIS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eVECTOR?  { rep.EXTRUSION_AXIS }
  var VOIDS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eORIENTED_CLOSED_SHELL>/*[1:nil]*/ )?  { rep.VOIDS }
  var WEIGHTS: (SDAI.ARRAY<SDAI.ARRAY<SDAI.REAL>/*[0:V_UPPER]*/ >/*[0:U_UPPER]*/ )?  { rep.WEIGHTS }
  var DIM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tDIMENSION_COUNT?  { rep.DIM }
}

