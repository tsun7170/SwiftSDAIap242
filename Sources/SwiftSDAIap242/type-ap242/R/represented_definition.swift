/* file: represented_definition.swift 	 generated: Sun Oct 31 15:32:10 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -TYPE DEFINITION in EXPRESS
/*
  TYPE represented_definition = SELECT
    ( general_property (*ENTITY*),
     property_definition (*ENTITY*),
     property_definition_relationship (*ENTITY*),
     shape_aspect (*ENTITY*),
     shape_aspect_relationship (*ENTITY*) );
  END_TYPE; -- represented_definition (line:5056 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES FOR SELECT
/*
  general_property (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  property_definition (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  items: SET [0 : ?] OF product_definition
  ATTR:  of_shape: mated_part_relationship *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  representation_relation: kinematic_property_definition_representation
  ATTR:  assigned_group: mated_part_relationship
  ATTR:  definition: characterized_definition
  ATTR:  name: label *** Multiple Select Case Sources ***

  property_definition_relationship (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  relating_property_definition: property_definition
  ATTR:  related_property_definition: property_definition
  ATTR:  name: label *** Multiple Select Case Sources ***

  shape_aspect (*ENTITY*):
  ATTR:  deriving_relationships: SET [1 : ?] OF shape_aspect_deriving_relationship
  ATTR:  product_definitional: LOGICAL
  ATTR:  owner: (AMBIGUOUS (CASE LEVEL))
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  form: tolerance_zone_form
  ATTR:  target_id: identifier
  ATTR:  component_shape_aspect: internal_or_reflected_shape_aspect
  ATTR:  parent: shape_aspect
  ATTR:  orientation: oriented_tolerance_zone_type
  ATTR:  items: (AMBIGUOUS (CASE LEVEL))
  ATTR:  of_shape: product_definition_shape *** Multiple Select Case Sources ***
  ATTR:  datum_reference: datum_system
  ATTR:  identification: identifier
  ATTR:  established_by_relationships: SET [1 : ?] OF shape_aspect_relationship
  ATTR:  constituents: LIST [1 : 3] OF UNIQUE datum_reference_compartment
  ATTR:  representation_associations: SET [0 : ?] OF property_definition_representation
  ATTR:  angle: plane_angle_measure_with_unit
  ATTR:  modified_components: (AMBIGUOUS (CASE LEVEL))
  ATTR:  modifiers: SET [1 : ?] OF datum_reference_modifier
  ATTR:  component_relationships: SET [2 : ?] OF shape_aspect_relationship
  ATTR:  base: datum_or_common_datum
  ATTR:  base_common_datum_list: common_datum_list
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  feature_basis_relationship: SET [1 : ?] OF shape_aspect_relationship
  ATTR:  direction: directed_tolerance_zone_type
  ATTR:  related_shape_aspect: component_feature *** Multiple Select Case Sources ***
  ATTR:  defining_tolerance: SET [1 : ?] OF tolerance_zone_target
  ATTR:  assigned_group: mated_part_relationship
  ATTR:  location: multi_or_next_assembly_usage_occurrence
  ATTR:  definition: (AMBIGUOUS (CASE LEVEL))
  ATTR:  name: label *** Multiple Select Case Sources ***
  ATTR:  basis_relationships: SET [1 : ?] OF shape_aspect_deriving_relationship
  ATTR:  relating_shape_aspect: component_feature *** Multiple Select Case Sources ***
  ATTR:  offset: measure_with_unit
  ATTR:  target_basis_relationship: SET [1 : ?] OF shape_aspect_relationship

  shape_aspect_relationship (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  path: shape_aspect
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  related_shape_aspect: shape_aspect *** Multiple Select Case Sources ***
  ATTR:  angle_selection: angle_relator
  ATTR:  name: label *** Multiple Select Case Sources ***
  ATTR:  relating_shape_aspect: shape_aspect *** Multiple Select Case Sources ***

*/

/** SELECT type
- EXPRESS:
```express
  TYPE represented_definition = SELECT
    ( general_property (*ENTITY*),
     property_definition (*ENTITY*),
     property_definition_relationship (*ENTITY*),
     shape_aspect (*ENTITY*),
     shape_aspect_relationship (*ENTITY*) );
  END_TYPE; -- represented_definition (line:5056 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public enum sREPRESENTED_DEFINITION : SDAIValue, AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sREPRESENTED_DEFINITION__type {

    /// SELECT case ``eGENERAL_PROPERTY`` (ENTITY) in ``sREPRESENTED_DEFINITION``
    case _GENERAL_PROPERTY(eGENERAL_PROPERTY)	// (ENTITY)

    /// SELECT case ``ePROPERTY_DEFINITION`` (ENTITY) in ``sREPRESENTED_DEFINITION``
    case _PROPERTY_DEFINITION(ePROPERTY_DEFINITION)	// (ENTITY)

    /// SELECT case ``ePROPERTY_DEFINITION_RELATIONSHIP`` (ENTITY) in ``sREPRESENTED_DEFINITION``
    case _PROPERTY_DEFINITION_RELATIONSHIP(ePROPERTY_DEFINITION_RELATIONSHIP)	// (ENTITY)

    /// SELECT case ``eSHAPE_ASPECT`` (ENTITY) in ``sREPRESENTED_DEFINITION``
    case _SHAPE_ASPECT(eSHAPE_ASPECT)	// (ENTITY)

    /// SELECT case ``eSHAPE_ASPECT_RELATIONSHIP`` (ENTITY) in ``sREPRESENTED_DEFINITION``
    case _SHAPE_ASPECT_RELATIONSHIP(eSHAPE_ASPECT_RELATIONSHIP)	// (ENTITY)

    //MARK: - CONSTRUCTORS
    public init(fundamental: FundamentalType) { self = fundamental }

    public init?<T: SDAIUnderlyingType>(possiblyFrom underlyingType: T?){
      return nil
    }

    public init?(possiblyFrom complex: SDAI.ComplexEntity?) {
      guard let complex = complex else { return nil }

      if let base = complex.entityReference(eGENERAL_PROPERTY.self) {self = ._GENERAL_PROPERTY(base) }
      else if let base = complex.entityReference(ePROPERTY_DEFINITION.self) {self = ._PROPERTY_DEFINITION(base) }
      else if let base = complex.entityReference(ePROPERTY_DEFINITION_RELATIONSHIP.self) {self = ._PROPERTY_DEFINITION_RELATIONSHIP(base) }
      else if let base = complex.entityReference(eSHAPE_ASPECT.self) {self = ._SHAPE_ASPECT(base) }
      else if let base = complex.entityReference(eSHAPE_ASPECT_RELATIONSHIP.self) {self = ._SHAPE_ASPECT_RELATIONSHIP(base) }
      else { return nil }
    }

    public init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let select = generic else { return nil }

      if let fundamental = select as? Self {
        self.init(fundamental: fundamental)
      }
      else if let base = eGENERAL_PROPERTY.convert(fromGeneric: select) {
        self = ._GENERAL_PROPERTY(base)
      }
      else if let base = ePROPERTY_DEFINITION.convert(fromGeneric: select) {
        self = ._PROPERTY_DEFINITION(base)
      }
      else if let base = ePROPERTY_DEFINITION_RELATIONSHIP.convert(fromGeneric: select) {
        self = ._PROPERTY_DEFINITION_RELATIONSHIP(base)
      }
      else if let base = eSHAPE_ASPECT.convert(fromGeneric: select) {
        self = ._SHAPE_ASPECT(base)
      }
      else if let base = eSHAPE_ASPECT_RELATIONSHIP.convert(fromGeneric: select) {
        self = ._SHAPE_ASPECT_RELATIONSHIP(base)
      }
      else { return nil }
    }

    // InitializableByP21Parameter
    public static var bareTypeName: String = "REPRESENTED_DEFINITION"

    public init?(p21typedParam: P21Decode.ExchangeStructure.TypedParameter, from exchangeStructure: P21Decode.ExchangeStructure) {
      guard let keyword = p21typedParam.keyword.asStandardKeyword else { exchangeStructure.error = "unexpected p21parameter(\(p21typedParam)) while resolving \(Self.bareTypeName) select value"; return nil }

      switch(keyword) {
      default:
        exchangeStructure.error = "unexpected p21parameter(\(p21typedParam)) while resolving \(Self.bareTypeName) select value"
        return nil
      }
    }

    public init?(p21untypedParam: P21Decode.ExchangeStructure.UntypedParameter, from exchangeStructure: P21Decode.ExchangeStructure) {
      switch p21untypedParam {
      case .rhsOccurenceName(let rhsname):
        switch rhsname {
        case .constantEntityName(let name):
          guard let entity = exchangeStructure.resolve(constantEntityName: name) else {exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) instance"); return nil }
          self.init(possiblyFrom: entity.complexEntity)

        case .entityInstanceName(let name):
          guard let complex = exchangeStructure.resolve(entityInstanceName: name) else {exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) instance"); return nil }
          self.init(possiblyFrom: complex)

        default:
          exchangeStructure.error = "unexpected p21parameter(\(p21untypedParam)) while resolving \(Self.bareTypeName) select instance"
          return nil
        }

      default:
        exchangeStructure.error = "unexpected p21parameter(\(p21untypedParam)) while resolving \(Self.bareTypeName) select instance"
        return nil
      }
    }

    public init?(p21omittedParamfrom exchangeStructure: P21Decode.ExchangeStructure) {
      return nil
    }


    //MARK: - ENTITY UNDERLYING TYPE REFERENCES
    public var super_eSHAPE_ASPECT_RELATIONSHIP: eSHAPE_ASPECT_RELATIONSHIP? {
      switch self {
      case ._SHAPE_ASPECT_RELATIONSHIP(let entity): return entity
      default: return nil
      }
    }

    public var super_ePROPERTY_DEFINITION: ePROPERTY_DEFINITION? {
      switch self {
      case ._PROPERTY_DEFINITION(let entity): return entity
      default: return nil
      }
    }

    public var super_eGENERAL_PROPERTY: eGENERAL_PROPERTY? {
      switch self {
      case ._GENERAL_PROPERTY(let entity): return entity
      default: return nil
      }
    }

    public var super_eSHAPE_ASPECT: eSHAPE_ASPECT? {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity
      default: return nil
      }
    }

    public var super_ePROPERTY_DEFINITION_RELATIONSHIP: ePROPERTY_DEFINITION_RELATIONSHIP? {
      switch self {
      case ._PROPERTY_DEFINITION_RELATIONSHIP(let entity): return entity
      default: return nil
      }
    }


    //MARK: - ENTITY ATTRIBUTE REFERENCES
    /// attribute of SELECT type ``sREPRESENTED_DEFINITION``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var DERIVING_RELATIONSHIPS: (SDAI.SET<eSHAPE_ASPECT_DERIVING_RELATIONSHIP>/*[1:nil]*/ )?  {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity.DERIVING_RELATIONSHIPS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sREPRESENTED_DEFINITION``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var PRODUCT_DEFINITIONAL: SDAI.LOGICAL {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity.PRODUCT_DEFINITIONAL
      default: return nil
      }
    }

    /// attribute of SELECT type ``sREPRESENTED_DEFINITION``
    /// - origin: ENTITY( ``eGENERAL_PROPERTY`` )
    /// - origin: ENTITY( ``ePROPERTY_DEFINITION`` )
    /// - origin: ENTITY( ``ePROPERTY_DEFINITION_RELATIONSHIP`` )
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    /// - origin: ENTITY( ``eSHAPE_ASPECT_RELATIONSHIP`` )
    public var DESCRIPTION: tTEXT?  {
      switch self {
      case ._GENERAL_PROPERTY(let entity): return entity.DESCRIPTION
      case ._PROPERTY_DEFINITION(let entity): return entity.DESCRIPTION
      case ._PROPERTY_DEFINITION_RELATIONSHIP(let entity): return entity.DESCRIPTION
      case ._SHAPE_ASPECT(let entity): return entity.DESCRIPTION
      case ._SHAPE_ASPECT_RELATIONSHIP(let entity): return entity.DESCRIPTION
      }
    }

    /// attribute of SELECT type ``sREPRESENTED_DEFINITION``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var FORM: eTOLERANCE_ZONE_FORM?  {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity.FORM
      default: return nil
      }
    }

    /// attribute of SELECT type ``sREPRESENTED_DEFINITION``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var TARGET_ID: tIDENTIFIER?  {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity.TARGET_ID
      default: return nil
      }
    }

    /// attribute of SELECT type ``sREPRESENTED_DEFINITION``
    /// - origin: ENTITY( ``eSHAPE_ASPECT_RELATIONSHIP`` )
    public var PATH: eSHAPE_ASPECT?  {
      switch self {
      case ._SHAPE_ASPECT_RELATIONSHIP(let entity): return entity.PATH
      default: return nil
      }
    }

    /// attribute of SELECT type ``sREPRESENTED_DEFINITION``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var COMPONENT_SHAPE_ASPECT: sINTERNAL_OR_REFLECTED_SHAPE_ASPECT?  {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity.COMPONENT_SHAPE_ASPECT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sREPRESENTED_DEFINITION``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var PARENT: eSHAPE_ASPECT?  {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity.PARENT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sREPRESENTED_DEFINITION``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var ORIENTATION: nORIENTED_TOLERANCE_ZONE_TYPE?  {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity.ORIENTATION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sREPRESENTED_DEFINITION``
    /// - origin: ENTITY( ``ePROPERTY_DEFINITION`` )
    public var ITEMS: (SDAI.SET<ePRODUCT_DEFINITION>/*[0:nil]*/ )?  {
      switch self {
      case ._PROPERTY_DEFINITION(let entity): return entity.ITEMS
      case ._SHAPE_ASPECT/*(let entity)*/: return nil // AMBIGUOUS ATTRIBUTE for eSHAPE_ASPECT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sREPRESENTED_DEFINITION``
    /// - origin: ENTITY( ``ePROPERTY_DEFINITION`` )
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var OF_SHAPE: ePRODUCT_DEFINITION_SHAPE?  {
      switch self {
      case ._PROPERTY_DEFINITION(let entity): return ePRODUCT_DEFINITION_SHAPE(entity.OF_SHAPE)
      case ._SHAPE_ASPECT(let entity): return entity.OF_SHAPE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sREPRESENTED_DEFINITION``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var DATUM_REFERENCE: eDATUM_SYSTEM?  {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity.DATUM_REFERENCE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sREPRESENTED_DEFINITION``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var IDENTIFICATION: tIDENTIFIER?  {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity.IDENTIFICATION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sREPRESENTED_DEFINITION``
    /// - origin: ENTITY( ``ePROPERTY_DEFINITION_RELATIONSHIP`` )
    public var RELATING_PROPERTY_DEFINITION: ePROPERTY_DEFINITION?  {
      switch self {
      case ._PROPERTY_DEFINITION_RELATIONSHIP(let entity): return entity.RELATING_PROPERTY_DEFINITION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sREPRESENTED_DEFINITION``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var ESTABLISHED_BY_RELATIONSHIPS: (SDAI.SET<eSHAPE_ASPECT_RELATIONSHIP>/*[1:nil]*/ )?  {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity.ESTABLISHED_BY_RELATIONSHIPS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sREPRESENTED_DEFINITION``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var CONSTITUENTS: (SDAI.LIST_UNIQUE<eDATUM_REFERENCE_COMPARTMENT>/*[1:3]*/ )?  {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity.CONSTITUENTS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sREPRESENTED_DEFINITION``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var REPRESENTATION_ASSOCIATIONS: (SDAI.SET<ePROPERTY_DEFINITION_REPRESENTATION>/*[0:nil]*/ )?  {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity.REPRESENTATION_ASSOCIATIONS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sREPRESENTED_DEFINITION``
    /// - origin: ENTITY( ``ePROPERTY_DEFINITION_RELATIONSHIP`` )
    public var RELATED_PROPERTY_DEFINITION: ePROPERTY_DEFINITION?  {
      switch self {
      case ._PROPERTY_DEFINITION_RELATIONSHIP(let entity): return entity.RELATED_PROPERTY_DEFINITION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sREPRESENTED_DEFINITION``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var ANGLE: ePLANE_ANGLE_MEASURE_WITH_UNIT?  {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity.ANGLE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sREPRESENTED_DEFINITION``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var MODIFIERS: (SDAI.SET<sDATUM_REFERENCE_MODIFIER>/*[1:nil]*/ )?  {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity.MODIFIERS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sREPRESENTED_DEFINITION``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var COMPONENT_RELATIONSHIPS: (SDAI.SET<eSHAPE_ASPECT_RELATIONSHIP>/*[2:nil]*/ )?  {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity.COMPONENT_RELATIONSHIPS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sREPRESENTED_DEFINITION``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var BASE: sDATUM_OR_COMMON_DATUM?  {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity.BASE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sREPRESENTED_DEFINITION``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var BASE_COMMON_DATUM_LIST: tCOMMON_DATUM_LIST?  {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity.BASE_COMMON_DATUM_LIST
      default: return nil
      }
    }

    /// attribute of SELECT type ``sREPRESENTED_DEFINITION``
    /// - origin: ENTITY( ``eGENERAL_PROPERTY`` )
    /// - origin: ENTITY( ``ePROPERTY_DEFINITION`` )
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    /// - origin: ENTITY( ``eSHAPE_ASPECT_RELATIONSHIP`` )
    public var ID: tIDENTIFIER?  {
      switch self {
      case ._GENERAL_PROPERTY(let entity): return entity.ID
      case ._PROPERTY_DEFINITION(let entity): return entity.ID
      case ._SHAPE_ASPECT(let entity): return entity.ID
      case ._SHAPE_ASPECT_RELATIONSHIP(let entity): return entity.ID
      default: return nil
      }
    }

    /// attribute of SELECT type ``sREPRESENTED_DEFINITION``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var FEATURE_BASIS_RELATIONSHIP: (SDAI.SET<eSHAPE_ASPECT_RELATIONSHIP>/*[1:nil]*/ )?  {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity.FEATURE_BASIS_RELATIONSHIP
      default: return nil
      }
    }

    /// attribute of SELECT type ``sREPRESENTED_DEFINITION``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var DIRECTION: nDIRECTED_TOLERANCE_ZONE_TYPE?  {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity.DIRECTION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sREPRESENTED_DEFINITION``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    /// - origin: ENTITY( ``eSHAPE_ASPECT_RELATIONSHIP`` )
    public var RELATED_SHAPE_ASPECT: eSHAPE_ASPECT?  {
      switch self {
      case ._SHAPE_ASPECT(let entity): return eSHAPE_ASPECT(entity.RELATED_SHAPE_ASPECT)
      case ._SHAPE_ASPECT_RELATIONSHIP(let entity): return entity.RELATED_SHAPE_ASPECT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sREPRESENTED_DEFINITION``
    /// - origin: ENTITY( ``eSHAPE_ASPECT_RELATIONSHIP`` )
    public var ANGLE_SELECTION: nANGLE_RELATOR?  {
      switch self {
      case ._SHAPE_ASPECT_RELATIONSHIP(let entity): return entity.ANGLE_SELECTION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sREPRESENTED_DEFINITION``
    /// - origin: ENTITY( ``ePROPERTY_DEFINITION`` )
    public var REPRESENTATION_RELATION: eKINEMATIC_PROPERTY_DEFINITION_REPRESENTATION?  {
      switch self {
      case ._PROPERTY_DEFINITION(let entity): return entity.REPRESENTATION_RELATION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sREPRESENTED_DEFINITION``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var DEFINING_TOLERANCE: (SDAI.SET<sTOLERANCE_ZONE_TARGET>/*[1:nil]*/ )?  {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity.DEFINING_TOLERANCE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sREPRESENTED_DEFINITION``
    /// - origin: ENTITY( ``ePROPERTY_DEFINITION`` )
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var ASSIGNED_GROUP: eMATED_PART_RELATIONSHIP?  {
      switch self {
      case ._PROPERTY_DEFINITION(let entity): return entity.ASSIGNED_GROUP
      case ._SHAPE_ASPECT(let entity): return entity.ASSIGNED_GROUP
      default: return nil
      }
    }

    /// attribute of SELECT type ``sREPRESENTED_DEFINITION``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var LOCATION: sMULTI_OR_NEXT_ASSEMBLY_USAGE_OCCURRENCE?  {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity.LOCATION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sREPRESENTED_DEFINITION``
    /// - origin: ENTITY( ``ePROPERTY_DEFINITION`` )
    public var DEFINITION: sCHARACTERIZED_DEFINITION?  {
      switch self {
      case ._PROPERTY_DEFINITION(let entity): return entity.DEFINITION
      case ._SHAPE_ASPECT/*(let entity)*/: return nil // AMBIGUOUS ATTRIBUTE for eSHAPE_ASPECT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sREPRESENTED_DEFINITION``
    /// - origin: ENTITY( ``eGENERAL_PROPERTY`` )
    /// - origin: ENTITY( ``ePROPERTY_DEFINITION`` )
    /// - origin: ENTITY( ``ePROPERTY_DEFINITION_RELATIONSHIP`` )
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    /// - origin: ENTITY( ``eSHAPE_ASPECT_RELATIONSHIP`` )
    public var NAME: tLABEL?  {
      switch self {
      case ._GENERAL_PROPERTY(let entity): return entity.NAME
      case ._PROPERTY_DEFINITION(let entity): return entity.NAME
      case ._PROPERTY_DEFINITION_RELATIONSHIP(let entity): return entity.NAME
      case ._SHAPE_ASPECT(let entity): return entity.NAME
      case ._SHAPE_ASPECT_RELATIONSHIP(let entity): return entity.NAME
      }
    }

    /// attribute of SELECT type ``sREPRESENTED_DEFINITION``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var BASIS_RELATIONSHIPS: (SDAI.SET<eSHAPE_ASPECT_DERIVING_RELATIONSHIP>/*[1:nil]*/ )?  {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity.BASIS_RELATIONSHIPS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sREPRESENTED_DEFINITION``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    /// - origin: ENTITY( ``eSHAPE_ASPECT_RELATIONSHIP`` )
    public var RELATING_SHAPE_ASPECT: eSHAPE_ASPECT?  {
      switch self {
      case ._SHAPE_ASPECT(let entity): return eSHAPE_ASPECT(entity.RELATING_SHAPE_ASPECT)
      case ._SHAPE_ASPECT_RELATIONSHIP(let entity): return entity.RELATING_SHAPE_ASPECT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sREPRESENTED_DEFINITION``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var OFFSET: eMEASURE_WITH_UNIT?  {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity.OFFSET
      default: return nil
      }
    }

    /// attribute of SELECT type ``sREPRESENTED_DEFINITION``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var TARGET_BASIS_RELATIONSHIP: (SDAI.SET<eSHAPE_ASPECT_RELATIONSHIP>/*[1:nil]*/ )?  {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity.TARGET_BASIS_RELATIONSHIP
      default: return nil
      }
    }


    //MARK: - SDAIValue
    public func isValueEqual<T: SDAIValue>(to rhs: T) -> Bool {
      switch self {
      case ._GENERAL_PROPERTY(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PROPERTY_DEFINITION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PROPERTY_DEFINITION_RELATIONSHIP(let selection): return selection.value.isValueEqual(to: rhs)
      case ._SHAPE_ASPECT(let selection): return selection.value.isValueEqual(to: rhs)
      case ._SHAPE_ASPECT_RELATIONSHIP(let selection): return selection.value.isValueEqual(to: rhs)
      }
    }

    public func isValueEqualOptionally<T: SDAIValue>(to rhs: T?) -> Bool? {
      switch self {
      case ._GENERAL_PROPERTY(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PROPERTY_DEFINITION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PROPERTY_DEFINITION_RELATIONSHIP(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._SHAPE_ASPECT(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._SHAPE_ASPECT_RELATIONSHIP(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      }
    }

    public func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      switch self {
      case ._GENERAL_PROPERTY(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PROPERTY_DEFINITION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PROPERTY_DEFINITION_RELATIONSHIP(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._SHAPE_ASPECT(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._SHAPE_ASPECT_RELATIONSHIP(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      }
    }

    public func isValueEqual<T: SDAIValue>(to rhs: T, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      switch self {
      case ._GENERAL_PROPERTY(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PROPERTY_DEFINITION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PROPERTY_DEFINITION_RELATIONSHIP(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._SHAPE_ASPECT(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._SHAPE_ASPECT_RELATIONSHIP(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      }
    }

    public func isValueEqualOptionally<T: SDAIValue>(to rhs: T?, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      switch self {
      case ._GENERAL_PROPERTY(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PROPERTY_DEFINITION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PROPERTY_DEFINITION_RELATIONSHIP(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._SHAPE_ASPECT(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._SHAPE_ASPECT_RELATIONSHIP(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      }
    }


    //MARK: SDAIGenericTypeBase
    public func copy() -> Self {
      switch self {
      case ._GENERAL_PROPERTY(let selection): return ._GENERAL_PROPERTY(selection.copy())
      case ._PROPERTY_DEFINITION(let selection): return ._PROPERTY_DEFINITION(selection.copy())
      case ._PROPERTY_DEFINITION_RELATIONSHIP(let selection): return ._PROPERTY_DEFINITION_RELATIONSHIP(selection.copy())
      case ._SHAPE_ASPECT(let selection): return ._SHAPE_ASPECT(selection.copy())
      case ._SHAPE_ASPECT_RELATIONSHIP(let selection): return ._SHAPE_ASPECT_RELATIONSHIP(selection.copy())
      }
    }

    //MARK: SDAIGenericType
    public var typeMembers: Set<SDAI.STRING> {
      var members: Set<SDAI.STRING> = [SDAI.STRING(Self.typeName)]
      switch self {
      case ._GENERAL_PROPERTY(let selection): members.formUnion(selection.typeMembers)
      case ._PROPERTY_DEFINITION(let selection): members.formUnion(selection.typeMembers)
      case ._PROPERTY_DEFINITION_RELATIONSHIP(let selection): members.formUnion(selection.typeMembers)
      case ._SHAPE_ASPECT(let selection): members.formUnion(selection.typeMembers)
      case ._SHAPE_ASPECT_RELATIONSHIP(let selection): members.formUnion(selection.typeMembers)
      }
      //SELECT data types (indirectly) referencing the current type as a member of the select list
      members.insert(SDAI.STRING(sITEM_IDENTIFIED_REPRESENTATION_USAGE_DEFINITION.typeName)) // -> Self
      return members
    }

    public var entityReference: SDAI.EntityReference? {
      switch self {
      case ._GENERAL_PROPERTY(let selection): return selection.entityReference
      case ._PROPERTY_DEFINITION(let selection): return selection.entityReference
      case ._PROPERTY_DEFINITION_RELATIONSHIP(let selection): return selection.entityReference
      case ._SHAPE_ASPECT(let selection): return selection.entityReference
      case ._SHAPE_ASPECT_RELATIONSHIP(let selection): return selection.entityReference
      }
    }
    public var stringValue: SDAI.STRING? {
      switch self {
      case ._GENERAL_PROPERTY(let selection): return selection.stringValue
      case ._PROPERTY_DEFINITION(let selection): return selection.stringValue
      case ._PROPERTY_DEFINITION_RELATIONSHIP(let selection): return selection.stringValue
      case ._SHAPE_ASPECT(let selection): return selection.stringValue
      case ._SHAPE_ASPECT_RELATIONSHIP(let selection): return selection.stringValue
      }
    }
    public var binaryValue: SDAI.BINARY? {
      switch self {
      case ._GENERAL_PROPERTY(let selection): return selection.binaryValue
      case ._PROPERTY_DEFINITION(let selection): return selection.binaryValue
      case ._PROPERTY_DEFINITION_RELATIONSHIP(let selection): return selection.binaryValue
      case ._SHAPE_ASPECT(let selection): return selection.binaryValue
      case ._SHAPE_ASPECT_RELATIONSHIP(let selection): return selection.binaryValue
      }
    }
    public var logicalValue: SDAI.LOGICAL? {
      switch self {
      case ._GENERAL_PROPERTY(let selection): return selection.logicalValue
      case ._PROPERTY_DEFINITION(let selection): return selection.logicalValue
      case ._PROPERTY_DEFINITION_RELATIONSHIP(let selection): return selection.logicalValue
      case ._SHAPE_ASPECT(let selection): return selection.logicalValue
      case ._SHAPE_ASPECT_RELATIONSHIP(let selection): return selection.logicalValue
      }
    }
    public var booleanValue: SDAI.BOOLEAN? {
      switch self {
      case ._GENERAL_PROPERTY(let selection): return selection.booleanValue
      case ._PROPERTY_DEFINITION(let selection): return selection.booleanValue
      case ._PROPERTY_DEFINITION_RELATIONSHIP(let selection): return selection.booleanValue
      case ._SHAPE_ASPECT(let selection): return selection.booleanValue
      case ._SHAPE_ASPECT_RELATIONSHIP(let selection): return selection.booleanValue
      }
    }
    public var numberValue: SDAI.NUMBER? {
      switch self {
      case ._GENERAL_PROPERTY(let selection): return selection.numberValue
      case ._PROPERTY_DEFINITION(let selection): return selection.numberValue
      case ._PROPERTY_DEFINITION_RELATIONSHIP(let selection): return selection.numberValue
      case ._SHAPE_ASPECT(let selection): return selection.numberValue
      case ._SHAPE_ASPECT_RELATIONSHIP(let selection): return selection.numberValue
      }
    }
    public var realValue: SDAI.REAL? {
      switch self {
      case ._GENERAL_PROPERTY(let selection): return selection.realValue
      case ._PROPERTY_DEFINITION(let selection): return selection.realValue
      case ._PROPERTY_DEFINITION_RELATIONSHIP(let selection): return selection.realValue
      case ._SHAPE_ASPECT(let selection): return selection.realValue
      case ._SHAPE_ASPECT_RELATIONSHIP(let selection): return selection.realValue
      }
    }
    public var integerValue: SDAI.INTEGER? {
      switch self {
      case ._GENERAL_PROPERTY(let selection): return selection.integerValue
      case ._PROPERTY_DEFINITION(let selection): return selection.integerValue
      case ._PROPERTY_DEFINITION_RELATIONSHIP(let selection): return selection.integerValue
      case ._SHAPE_ASPECT(let selection): return selection.integerValue
      case ._SHAPE_ASPECT_RELATIONSHIP(let selection): return selection.integerValue
      }
    }
    public var genericEnumValue: SDAI.GenericEnumValue? {
      switch self {
      case ._GENERAL_PROPERTY(let selection): return selection.genericEnumValue
      case ._PROPERTY_DEFINITION(let selection): return selection.genericEnumValue
      case ._PROPERTY_DEFINITION_RELATIONSHIP(let selection): return selection.genericEnumValue
      case ._SHAPE_ASPECT(let selection): return selection.genericEnumValue
      case ._SHAPE_ASPECT_RELATIONSHIP(let selection): return selection.genericEnumValue
      }
    }
    public func arrayOptionalValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.ARRAY_OPTIONAL<ELEM>? {
      switch self {
      case ._GENERAL_PROPERTY(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PROPERTY_DEFINITION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PROPERTY_DEFINITION_RELATIONSHIP(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._SHAPE_ASPECT(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._SHAPE_ASPECT_RELATIONSHIP(let selection): return selection.arrayOptionalValue(elementType:elementType)
      }
    }
    public func arrayValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.ARRAY<ELEM>? {
      switch self {
      case ._GENERAL_PROPERTY(let selection): return selection.arrayValue(elementType:elementType)
      case ._PROPERTY_DEFINITION(let selection): return selection.arrayValue(elementType:elementType)
      case ._PROPERTY_DEFINITION_RELATIONSHIP(let selection): return selection.arrayValue(elementType:elementType)
      case ._SHAPE_ASPECT(let selection): return selection.arrayValue(elementType:elementType)
      case ._SHAPE_ASPECT_RELATIONSHIP(let selection): return selection.arrayValue(elementType:elementType)
      }
    }
    public func listValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.LIST<ELEM>? {
      switch self {
      case ._GENERAL_PROPERTY(let selection): return selection.listValue(elementType:elementType)
      case ._PROPERTY_DEFINITION(let selection): return selection.listValue(elementType:elementType)
      case ._PROPERTY_DEFINITION_RELATIONSHIP(let selection): return selection.listValue(elementType:elementType)
      case ._SHAPE_ASPECT(let selection): return selection.listValue(elementType:elementType)
      case ._SHAPE_ASPECT_RELATIONSHIP(let selection): return selection.listValue(elementType:elementType)
      }
    }
    public func bagValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.BAG<ELEM>? {
      switch self {
      case ._GENERAL_PROPERTY(let selection): return selection.bagValue(elementType:elementType)
      case ._PROPERTY_DEFINITION(let selection): return selection.bagValue(elementType:elementType)
      case ._PROPERTY_DEFINITION_RELATIONSHIP(let selection): return selection.bagValue(elementType:elementType)
      case ._SHAPE_ASPECT(let selection): return selection.bagValue(elementType:elementType)
      case ._SHAPE_ASPECT_RELATIONSHIP(let selection): return selection.bagValue(elementType:elementType)
      }
    }
    public func setValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.SET<ELEM>? {
      switch self {
      case ._GENERAL_PROPERTY(let selection): return selection.setValue(elementType:elementType)
      case ._PROPERTY_DEFINITION(let selection): return selection.setValue(elementType:elementType)
      case ._PROPERTY_DEFINITION_RELATIONSHIP(let selection): return selection.setValue(elementType:elementType)
      case ._SHAPE_ASPECT(let selection): return selection.setValue(elementType:elementType)
      case ._SHAPE_ASPECT_RELATIONSHIP(let selection): return selection.setValue(elementType:elementType)
      }
    }
    public func enumValue<ENUM:SDAIEnumerationType>(enumType:ENUM.Type) -> ENUM? {
      switch self {
      case ._GENERAL_PROPERTY(let selection): return selection.enumValue(enumType:enumType)
      case ._PROPERTY_DEFINITION(let selection): return selection.enumValue(enumType:enumType)
      case ._PROPERTY_DEFINITION_RELATIONSHIP(let selection): return selection.enumValue(enumType:enumType)
      case ._SHAPE_ASPECT(let selection): return selection.enumValue(enumType:enumType)
      case ._SHAPE_ASPECT_RELATIONSHIP(let selection): return selection.enumValue(enumType:enumType)
      }
    }

    //MARK: SDAIUnderlyingType
    public typealias FundamentalType = Self
    public static var typeName: String = 
      "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.REPRESENTED_DEFINITION"
    public var asFundamentalType: FundamentalType { return self }

    //MARK: SDAIObservableAggregateElement
    public var entityReferences: AnySequence<SDAI.EntityReference> {
      switch self {
      case ._GENERAL_PROPERTY(let entity): return entity.entityReferences
      case ._PROPERTY_DEFINITION(let entity): return entity.entityReferences
      case ._PROPERTY_DEFINITION_RELATIONSHIP(let entity): return entity.entityReferences
      case ._SHAPE_ASPECT(let entity): return entity.entityReferences
      case ._SHAPE_ASPECT_RELATIONSHIP(let entity): return entity.entityReferences
      }
    }

    public mutating func configure(with observer: SDAI.EntityReferenceObserver) {
      switch self {
      case ._GENERAL_PROPERTY(let entity): 
        entity.configure(with: observer)
        self = ._GENERAL_PROPERTY(entity)
      case ._PROPERTY_DEFINITION(let entity): 
        entity.configure(with: observer)
        self = ._PROPERTY_DEFINITION(entity)
      case ._PROPERTY_DEFINITION_RELATIONSHIP(let entity): 
        entity.configure(with: observer)
        self = ._PROPERTY_DEFINITION_RELATIONSHIP(entity)
      case ._SHAPE_ASPECT(let entity): 
        entity.configure(with: observer)
        self = ._SHAPE_ASPECT(entity)
      case ._SHAPE_ASPECT_RELATIONSHIP(let entity): 
        entity.configure(with: observer)
        self = ._SHAPE_ASPECT_RELATIONSHIP(entity)
      }
    }

    public mutating func teardownObserver() {
      switch self {
      case ._GENERAL_PROPERTY(let entity): 
        entity.teardownObserver()
        self = ._GENERAL_PROPERTY(entity)
      case ._PROPERTY_DEFINITION(let entity): 
        entity.teardownObserver()
        self = ._PROPERTY_DEFINITION(entity)
      case ._PROPERTY_DEFINITION_RELATIONSHIP(let entity): 
        entity.teardownObserver()
        self = ._PROPERTY_DEFINITION_RELATIONSHIP(entity)
      case ._SHAPE_ASPECT(let entity): 
        entity.teardownObserver()
        self = ._SHAPE_ASPECT(entity)
      case ._SHAPE_ASPECT_RELATIONSHIP(let entity): 
        entity.teardownObserver()
        self = ._SHAPE_ASPECT_RELATIONSHIP(entity)
      }
    }

    //MARK: SDAIAggregationBehavior
    public var aggregationHiBound: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationHiIndex: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationLoBound: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationLoIndex: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationSize: Int? {
      switch self {
      default: return nil
      }
    }

    //MARK: WHERE RULE VALIDATION (SELECT TYPE)
    public static func validateWhereRules(instance:Self?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      var result: [SDAI.WhereLabel:SDAI.LOGICAL] = [:]
      switch instance {
      case ._GENERAL_PROPERTY(let selectValue): 
        result = eGENERAL_PROPERTY.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\GENERAL_PROPERTY")
      case ._PROPERTY_DEFINITION(let selectValue): 
        result = ePROPERTY_DEFINITION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PROPERTY_DEFINITION")
      case ._PROPERTY_DEFINITION_RELATIONSHIP(let selectValue): 
        result = ePROPERTY_DEFINITION_RELATIONSHIP.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PROPERTY_DEFINITION_RELATIONSHIP")
      case ._SHAPE_ASPECT(let selectValue): result = eSHAPE_ASPECT.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\SHAPE_ASPECT")
      case ._SHAPE_ASPECT_RELATIONSHIP(let selectValue): 
        result = eSHAPE_ASPECT_RELATIONSHIP.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\SHAPE_ASPECT_RELATIONSHIP")
      case nil: break
      }

      return result
    }

  }

}


//MARK: - SELECT TYPE HIERARCHY
public protocol AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sREPRESENTED_DEFINITION__type: 
  SDAISelectType {

  //MARK: GROUP REFERENCES
  var super_eSHAPE_ASPECT_RELATIONSHIP: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_ASPECT_RELATIONSHIP? { get }
  var super_ePROPERTY_DEFINITION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePROPERTY_DEFINITION? { get }
  var super_eGENERAL_PROPERTY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGENERAL_PROPERTY? { get }
  var super_eSHAPE_ASPECT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_ASPECT? { get }
  var super_ePROPERTY_DEFINITION_RELATIONSHIP: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePROPERTY_DEFINITION_RELATIONSHIP? { get }

  //MARK: ENTITY ATTRIBUTE REFERENCES
  var DERIVING_RELATIONSHIPS: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_ASPECT_DERIVING_RELATIONSHIP>/*[1:nil]*/ )?  { get }
  var PRODUCT_DEFINITIONAL: SDAI.LOGICAL { get }
  var DESCRIPTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT?  { get }
  var FORM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eTOLERANCE_ZONE_FORM?  { get }
  var TARGET_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { get }
  var PATH: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_ASPECT?  { get }
  var COMPONENT_SHAPE_ASPECT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sINTERNAL_OR_REFLECTED_SHAPE_ASPECT?  { get }
  var PARENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_ASPECT?  { get }
  var ORIENTATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nORIENTED_TOLERANCE_ZONE_TYPE?  { get }
  var ITEMS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION>/*[0:nil]*/ )?  { get }
  var OF_SHAPE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_SHAPE?  { get }
  var DATUM_REFERENCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDATUM_SYSTEM?  { get }
  var IDENTIFICATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { get }
  var RELATING_PROPERTY_DEFINITION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePROPERTY_DEFINITION?  { get }
  var ESTABLISHED_BY_RELATIONSHIPS: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_ASPECT_RELATIONSHIP>/*[1:nil]*/ )?  { get }
  var CONSTITUENTS: (SDAI.LIST_UNIQUE<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDATUM_REFERENCE_COMPARTMENT>/*[1:3]*/ )?  { get }
  var REPRESENTATION_ASSOCIATIONS: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePROPERTY_DEFINITION_REPRESENTATION>/*[0:nil]*/ )?  { get }
  var RELATED_PROPERTY_DEFINITION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePROPERTY_DEFINITION?  { get }
  var ANGLE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePLANE_ANGLE_MEASURE_WITH_UNIT?  { get }
  var MODIFIERS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sDATUM_REFERENCE_MODIFIER>/*[1:nil]*/ )?  { get }
  var COMPONENT_RELATIONSHIPS: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_ASPECT_RELATIONSHIP>/*[2:nil]*/ )?  { get }
  var BASE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sDATUM_OR_COMMON_DATUM?  { get }
  var BASE_COMMON_DATUM_LIST: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tCOMMON_DATUM_LIST?  { get }
  var ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { get }
  var FEATURE_BASIS_RELATIONSHIP: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_ASPECT_RELATIONSHIP>/*[1:nil]*/ )?  { get }
  var DIRECTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nDIRECTED_TOLERANCE_ZONE_TYPE?  { get }
  var RELATED_SHAPE_ASPECT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_ASPECT?  { get }
  var ANGLE_SELECTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nANGLE_RELATOR?  { get }
  var REPRESENTATION_RELATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eKINEMATIC_PROPERTY_DEFINITION_REPRESENTATION?  { get }
  var DEFINING_TOLERANCE: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sTOLERANCE_ZONE_TARGET>
    /*[1:nil]*/ )?  { get }
  var ASSIGNED_GROUP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMATED_PART_RELATIONSHIP?  { get }
  var LOCATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sMULTI_OR_NEXT_ASSEMBLY_USAGE_OCCURRENCE?  { get }
  var DEFINITION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sCHARACTERIZED_DEFINITION?  { get }
  var NAME: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { get }
  var BASIS_RELATIONSHIPS: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_ASPECT_DERIVING_RELATIONSHIP>/*[1:nil]*/ )?  { get }
  var RELATING_SHAPE_ASPECT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_ASPECT?  { get }
  var OFFSET: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMEASURE_WITH_UNIT?  { get }
  var TARGET_BASIS_RELATIONSHIP: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_ASPECT_RELATIONSHIP>/*[1:nil]*/ )?  { get }
}

public protocol AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sREPRESENTED_DEFINITION__subtype: 
  AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sREPRESENTED_DEFINITION__type, SDAIDefinedType
where Supertype: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sREPRESENTED_DEFINITION__type
{}

public extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sREPRESENTED_DEFINITION__subtype {
  //MARK: CONSTRUCTORS
  init?(possiblyFrom complex: SDAI.ComplexEntity?) {
    self.init(fundamental: FundamentalType(possiblyFrom: complex))
  }

  init?<T: SDAIUnderlyingType>(possiblyFrom underlyingType: T?) {
    self.init(fundamental: FundamentalType(possiblyFrom: underlyingType))
  }

  init?<G: SDAIGenericType>(fromGeneric generic: G?) {
    self.init(fundamental: FundamentalType.convert(fromGeneric: generic))
  }

  //MARK: GROUP REFERENCES
  var super_eSHAPE_ASPECT_RELATIONSHIP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_ASPECT_RELATIONSHIP? { rep.super_eSHAPE_ASPECT_RELATIONSHIP }
  var super_ePROPERTY_DEFINITION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePROPERTY_DEFINITION? { rep.super_ePROPERTY_DEFINITION }
  var super_eGENERAL_PROPERTY: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGENERAL_PROPERTY? { rep.super_eGENERAL_PROPERTY }
  var super_eSHAPE_ASPECT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_ASPECT? { rep.super_eSHAPE_ASPECT }
  var super_ePROPERTY_DEFINITION_RELATIONSHIP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePROPERTY_DEFINITION_RELATIONSHIP? { rep.super_ePROPERTY_DEFINITION_RELATIONSHIP }

  //MARK: ENTITY ATTRIBUTE REFERENCES
  var DERIVING_RELATIONSHIPS: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_ASPECT_DERIVING_RELATIONSHIP>/*[1:nil]*/ )?  { rep.DERIVING_RELATIONSHIPS }
  var PRODUCT_DEFINITIONAL: SDAI.LOGICAL { rep.PRODUCT_DEFINITIONAL }
  var DESCRIPTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT?  { rep.DESCRIPTION }
  var FORM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eTOLERANCE_ZONE_FORM?  { rep.FORM }
  var TARGET_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { rep.TARGET_ID }
  var PATH: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_ASPECT?  { rep.PATH }
  var COMPONENT_SHAPE_ASPECT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sINTERNAL_OR_REFLECTED_SHAPE_ASPECT?  { rep.COMPONENT_SHAPE_ASPECT }
  var PARENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_ASPECT?  { rep.PARENT }
  var ORIENTATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nORIENTED_TOLERANCE_ZONE_TYPE?  { rep.ORIENTATION }
  var ITEMS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION>/*[0:nil]*/ )?  { rep.ITEMS }
  var OF_SHAPE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_SHAPE?  { rep.OF_SHAPE }
  var DATUM_REFERENCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDATUM_SYSTEM?  { rep.DATUM_REFERENCE }
  var IDENTIFICATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { rep.IDENTIFICATION }
  var RELATING_PROPERTY_DEFINITION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePROPERTY_DEFINITION?  { rep.RELATING_PROPERTY_DEFINITION }
  var ESTABLISHED_BY_RELATIONSHIPS: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_ASPECT_RELATIONSHIP>/*[1:nil]*/ )?  { rep.ESTABLISHED_BY_RELATIONSHIPS }
  var CONSTITUENTS: (SDAI.LIST_UNIQUE<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDATUM_REFERENCE_COMPARTMENT>/*[1:3]*/ )?  { rep.CONSTITUENTS }
  var REPRESENTATION_ASSOCIATIONS: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePROPERTY_DEFINITION_REPRESENTATION>/*[0:nil]*/ )?  { rep.REPRESENTATION_ASSOCIATIONS }
  var RELATED_PROPERTY_DEFINITION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePROPERTY_DEFINITION?  { rep.RELATED_PROPERTY_DEFINITION }
  var ANGLE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePLANE_ANGLE_MEASURE_WITH_UNIT?  { rep.ANGLE }
  var MODIFIERS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sDATUM_REFERENCE_MODIFIER>/*[1:nil]*/ )?  { rep.MODIFIERS }
  var COMPONENT_RELATIONSHIPS: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_ASPECT_RELATIONSHIP>/*[2:nil]*/ )?  { rep.COMPONENT_RELATIONSHIPS }
  var BASE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sDATUM_OR_COMMON_DATUM?  { rep.BASE }
  var BASE_COMMON_DATUM_LIST: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tCOMMON_DATUM_LIST?  { rep.BASE_COMMON_DATUM_LIST }
  var ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { rep.ID }
  var FEATURE_BASIS_RELATIONSHIP: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_ASPECT_RELATIONSHIP>/*[1:nil]*/ )?  { rep.FEATURE_BASIS_RELATIONSHIP }
  var DIRECTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nDIRECTED_TOLERANCE_ZONE_TYPE?  { rep.DIRECTION }
  var RELATED_SHAPE_ASPECT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_ASPECT?  { rep.RELATED_SHAPE_ASPECT }
  var ANGLE_SELECTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nANGLE_RELATOR?  { rep.ANGLE_SELECTION }
  var REPRESENTATION_RELATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eKINEMATIC_PROPERTY_DEFINITION_REPRESENTATION?  { rep.REPRESENTATION_RELATION }
  var DEFINING_TOLERANCE: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sTOLERANCE_ZONE_TARGET>
    /*[1:nil]*/ )?  { rep.DEFINING_TOLERANCE }
  var ASSIGNED_GROUP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMATED_PART_RELATIONSHIP?  { rep.ASSIGNED_GROUP }
  var LOCATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sMULTI_OR_NEXT_ASSEMBLY_USAGE_OCCURRENCE?  { rep.LOCATION }
  var DEFINITION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sCHARACTERIZED_DEFINITION?  { rep.DEFINITION }
  var NAME: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { rep.NAME }
  var BASIS_RELATIONSHIPS: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_ASPECT_DERIVING_RELATIONSHIP>/*[1:nil]*/ )?  { rep.BASIS_RELATIONSHIPS }
  var RELATING_SHAPE_ASPECT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_ASPECT?  { rep.RELATING_SHAPE_ASPECT }
  var OFFSET: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMEASURE_WITH_UNIT?  { rep.OFFSET }
  var TARGET_BASIS_RELATIONSHIP: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_ASPECT_RELATIONSHIP>/*[1:nil]*/ )?  { rep.TARGET_BASIS_RELATIONSHIP }
}

