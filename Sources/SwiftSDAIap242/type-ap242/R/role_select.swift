/* file: role_select.swift 	 generated: Sun Oct 31 15:32:10 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -TYPE DEFINITION in EXPRESS
/*
  TYPE role_select = SELECT
    ( action_assignment (*ENTITY*),
     action_request_assignment (*ENTITY*),
     approval_assignment (*ENTITY*),
     approval_date_time (*ENTITY*),
     certification_assignment (*ENTITY*),
     contract_assignment (*ENTITY*),
     directed_action_assignment (*ENTITY*),
     document_reference (*ENTITY*),
     effectivity_assignment (*ENTITY*),
     group_assignment (*ENTITY*),
     name_assignment (*ENTITY*),
     security_classification_assignment (*ENTITY*) );
  END_TYPE; -- role_select (line:5153 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES FOR SELECT
/*
  action_assignment (*ENTITY*):
  ATTR:  role: object_role *** Multiple Select Case Sources ***
  ATTR:  items: (AMBIGUOUS (CASE LEVEL))
  ATTR:  assigned_action: action

  action_request_assignment (*ENTITY*):
  ATTR:  role: object_role *** Multiple Select Case Sources ***
  ATTR:  items: (AMBIGUOUS (CASE LEVEL))
  ATTR:  assigned_action_request: versioned_action_request

  approval_assignment (*ENTITY*):
  ATTR:  role: object_role *** Multiple Select Case Sources ***
  ATTR:  assigned_approval: approval
  ATTR:  items: (AMBIGUOUS (CASE LEVEL))

  approval_date_time (*ENTITY*):
  ATTR:  date_time: date_time_select
  ATTR:  role: object_role *** Multiple Select Case Sources ***
  ATTR:  dated_approval: approval

  certification_assignment (*ENTITY*):
  ATTR:  role: object_role *** Multiple Select Case Sources ***
  ATTR:  items: (AMBIGUOUS (CASE LEVEL))
  ATTR:  assigned_certification: certification

  contract_assignment (*ENTITY*):
  ATTR:  role: object_role *** Multiple Select Case Sources ***
  ATTR:  items: (AMBIGUOUS (CASE LEVEL))
  ATTR:  assigned_contract: contract

  directed_action_assignment (*ENTITY*):
  ATTR:  assigned_directed_action: directed_action
  ATTR:  role: object_role *** Multiple Select Case Sources ***
  ATTR:  items: SET [1 : ?] OF action_request_item

  document_reference (*ENTITY*):
  ATTR:  role: object_role *** Multiple Select Case Sources ***
  ATTR:  items: (AMBIGUOUS (CASE LEVEL))
  ATTR:  specified_items: SET [1 : ?] OF specified_item
  ATTR:  source: label
  ATTR:  assigned_document: document

  effectivity_assignment (*ENTITY*):
  ATTR:  role: object_role *** Multiple Select Case Sources ***
  ATTR:  items: (AMBIGUOUS (CASE LEVEL))
  ATTR:  assigned_effectivity: effectivity

  group_assignment (*ENTITY*):
  ATTR:  product_group_rules: (AMBIGUOUS (CASE LEVEL))
  ATTR:  item: change_relationship_select (AMBIGUOUS (SELECT LEVEL))
  ATTR:  role: object_role *** Multiple Select Case Sources ***
  ATTR:  product_group_attributes: SET [1 : 1] OF product_group_attributes
  ATTR:  items: (AMBIGUOUS (CASE LEVEL))
  ATTR:  of_shape: mated_part_relationship
  ATTR:  attributes: SET [1 : 1] OF attribute_select
  ATTR:  member: product_select
  ATTR:  assigned_group: group
  ATTR:  definition: mated_part_relationship
  ATTR:  message_contents_group: (AMBIGUOUS (CASE LEVEL))

  name_assignment (*ENTITY*):
  ATTR:  item: name_item (AMBIGUOUS (SELECT LEVEL))
  ATTR:  role: object_role *** Multiple Select Case Sources ***
  ATTR:  assigned_name: label

  security_classification_assignment (*ENTITY*):
  ATTR:  assigned_security_classification: security_classification
  ATTR:  role: object_role *** Multiple Select Case Sources ***
  ATTR:  items: (AMBIGUOUS (CASE LEVEL))

*/

/** SELECT type
- EXPRESS:
```express
  TYPE role_select = SELECT
    ( action_assignment (*ENTITY*),
     action_request_assignment (*ENTITY*),
     approval_assignment (*ENTITY*),
     approval_date_time (*ENTITY*),
     certification_assignment (*ENTITY*),
     contract_assignment (*ENTITY*),
     directed_action_assignment (*ENTITY*),
     document_reference (*ENTITY*),
     effectivity_assignment (*ENTITY*),
     group_assignment (*ENTITY*),
     name_assignment (*ENTITY*),
     security_classification_assignment (*ENTITY*) );
  END_TYPE; -- role_select (line:5153 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public enum sROLE_SELECT : SDAIValue, AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sROLE_SELECT__type {

    /// SELECT case ``eACTION_ASSIGNMENT`` (ENTITY) in ``sROLE_SELECT``
    case _ACTION_ASSIGNMENT(eACTION_ASSIGNMENT)	// (ENTITY)

    /// SELECT case ``eACTION_REQUEST_ASSIGNMENT`` (ENTITY) in ``sROLE_SELECT``
    case _ACTION_REQUEST_ASSIGNMENT(eACTION_REQUEST_ASSIGNMENT)	// (ENTITY)

    /// SELECT case ``eAPPROVAL_ASSIGNMENT`` (ENTITY) in ``sROLE_SELECT``
    case _APPROVAL_ASSIGNMENT(eAPPROVAL_ASSIGNMENT)	// (ENTITY)

    /// SELECT case ``eAPPROVAL_DATE_TIME`` (ENTITY) in ``sROLE_SELECT``
    case _APPROVAL_DATE_TIME(eAPPROVAL_DATE_TIME)	// (ENTITY)

    /// SELECT case ``eCERTIFICATION_ASSIGNMENT`` (ENTITY) in ``sROLE_SELECT``
    case _CERTIFICATION_ASSIGNMENT(eCERTIFICATION_ASSIGNMENT)	// (ENTITY)

    /// SELECT case ``eCONTRACT_ASSIGNMENT`` (ENTITY) in ``sROLE_SELECT``
    case _CONTRACT_ASSIGNMENT(eCONTRACT_ASSIGNMENT)	// (ENTITY)

    /// SELECT case ``eDIRECTED_ACTION_ASSIGNMENT`` (ENTITY) in ``sROLE_SELECT``
    case _DIRECTED_ACTION_ASSIGNMENT(eDIRECTED_ACTION_ASSIGNMENT)	// (ENTITY)

    /// SELECT case ``eDOCUMENT_REFERENCE`` (ENTITY) in ``sROLE_SELECT``
    case _DOCUMENT_REFERENCE(eDOCUMENT_REFERENCE)	// (ENTITY)

    /// SELECT case ``eEFFECTIVITY_ASSIGNMENT`` (ENTITY) in ``sROLE_SELECT``
    case _EFFECTIVITY_ASSIGNMENT(eEFFECTIVITY_ASSIGNMENT)	// (ENTITY)

    /// SELECT case ``eGROUP_ASSIGNMENT`` (ENTITY) in ``sROLE_SELECT``
    case _GROUP_ASSIGNMENT(eGROUP_ASSIGNMENT)	// (ENTITY)

    /// SELECT case ``eNAME_ASSIGNMENT`` (ENTITY) in ``sROLE_SELECT``
    case _NAME_ASSIGNMENT(eNAME_ASSIGNMENT)	// (ENTITY)

    /// SELECT case ``eSECURITY_CLASSIFICATION_ASSIGNMENT`` (ENTITY) in ``sROLE_SELECT``
    case _SECURITY_CLASSIFICATION_ASSIGNMENT(eSECURITY_CLASSIFICATION_ASSIGNMENT)	// (ENTITY)

    //MARK: - CONSTRUCTORS
    public init(fundamental: FundamentalType) { self = fundamental }

    public init?<T: SDAIUnderlyingType>(possiblyFrom underlyingType: T?){
      return nil
    }

    public init?(possiblyFrom complex: SDAI.ComplexEntity?) {
      guard let complex = complex else { return nil }

      if let base = complex.entityReference(eACTION_ASSIGNMENT.self) {self = ._ACTION_ASSIGNMENT(base) }
      else if let base = complex.entityReference(eACTION_REQUEST_ASSIGNMENT.self) {self = ._ACTION_REQUEST_ASSIGNMENT(base) }
      else if let base = complex.entityReference(eAPPROVAL_ASSIGNMENT.self) {self = ._APPROVAL_ASSIGNMENT(base) }
      else if let base = complex.entityReference(eAPPROVAL_DATE_TIME.self) {self = ._APPROVAL_DATE_TIME(base) }
      else if let base = complex.entityReference(eCERTIFICATION_ASSIGNMENT.self) {self = ._CERTIFICATION_ASSIGNMENT(base) }
      else if let base = complex.entityReference(eCONTRACT_ASSIGNMENT.self) {self = ._CONTRACT_ASSIGNMENT(base) }
      else if let base = complex.entityReference(eDIRECTED_ACTION_ASSIGNMENT.self) {self = ._DIRECTED_ACTION_ASSIGNMENT(base) }
      else if let base = complex.entityReference(eDOCUMENT_REFERENCE.self) {self = ._DOCUMENT_REFERENCE(base) }
      else if let base = complex.entityReference(eEFFECTIVITY_ASSIGNMENT.self) {self = ._EFFECTIVITY_ASSIGNMENT(base) }
      else if let base = complex.entityReference(eGROUP_ASSIGNMENT.self) {self = ._GROUP_ASSIGNMENT(base) }
      else if let base = complex.entityReference(eNAME_ASSIGNMENT.self) {self = ._NAME_ASSIGNMENT(base) }
      else if let base = complex.entityReference(eSECURITY_CLASSIFICATION_ASSIGNMENT.self) {self = ._SECURITY_CLASSIFICATION_ASSIGNMENT(base) }
      else { return nil }
    }

    public init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let select = generic else { return nil }

      if let fundamental = select as? Self {
        self.init(fundamental: fundamental)
      }
      else if let base = eACTION_ASSIGNMENT.convert(fromGeneric: select) {
        self = ._ACTION_ASSIGNMENT(base)
      }
      else if let base = eACTION_REQUEST_ASSIGNMENT.convert(fromGeneric: select) {
        self = ._ACTION_REQUEST_ASSIGNMENT(base)
      }
      else if let base = eAPPROVAL_ASSIGNMENT.convert(fromGeneric: select) {
        self = ._APPROVAL_ASSIGNMENT(base)
      }
      else if let base = eAPPROVAL_DATE_TIME.convert(fromGeneric: select) {
        self = ._APPROVAL_DATE_TIME(base)
      }
      else if let base = eCERTIFICATION_ASSIGNMENT.convert(fromGeneric: select) {
        self = ._CERTIFICATION_ASSIGNMENT(base)
      }
      else if let base = eCONTRACT_ASSIGNMENT.convert(fromGeneric: select) {
        self = ._CONTRACT_ASSIGNMENT(base)
      }
      else if let base = eDIRECTED_ACTION_ASSIGNMENT.convert(fromGeneric: select) {
        self = ._DIRECTED_ACTION_ASSIGNMENT(base)
      }
      else if let base = eDOCUMENT_REFERENCE.convert(fromGeneric: select) {
        self = ._DOCUMENT_REFERENCE(base)
      }
      else if let base = eEFFECTIVITY_ASSIGNMENT.convert(fromGeneric: select) {
        self = ._EFFECTIVITY_ASSIGNMENT(base)
      }
      else if let base = eGROUP_ASSIGNMENT.convert(fromGeneric: select) {
        self = ._GROUP_ASSIGNMENT(base)
      }
      else if let base = eNAME_ASSIGNMENT.convert(fromGeneric: select) {
        self = ._NAME_ASSIGNMENT(base)
      }
      else if let base = eSECURITY_CLASSIFICATION_ASSIGNMENT.convert(fromGeneric: select) {
        self = ._SECURITY_CLASSIFICATION_ASSIGNMENT(base)
      }
      else { return nil }
    }

    // InitializableByP21Parameter
    public static var bareTypeName: String = "ROLE_SELECT"

    public init?(p21typedParam: P21Decode.ExchangeStructure.TypedParameter, from exchangeStructure: P21Decode.ExchangeStructure) {
      guard let keyword = p21typedParam.keyword.asStandardKeyword else { exchangeStructure.error = "unexpected p21parameter(\(p21typedParam)) while resolving \(Self.bareTypeName) select value"; return nil }

      switch(keyword) {
      default:
        exchangeStructure.error = "unexpected p21parameter(\(p21typedParam)) while resolving \(Self.bareTypeName) select value"
        return nil
      }
    }

    public init?(p21untypedParam: P21Decode.ExchangeStructure.UntypedParameter, from exchangeStructure: P21Decode.ExchangeStructure) {
      switch p21untypedParam {
      case .rhsOccurenceName(let rhsname):
        switch rhsname {
        case .constantEntityName(let name):
          guard let entity = exchangeStructure.resolve(constantEntityName: name) else {exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) instance"); return nil }
          self.init(possiblyFrom: entity.complexEntity)

        case .entityInstanceName(let name):
          guard let complex = exchangeStructure.resolve(entityInstanceName: name) else {exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) instance"); return nil }
          self.init(possiblyFrom: complex)

        default:
          exchangeStructure.error = "unexpected p21parameter(\(p21untypedParam)) while resolving \(Self.bareTypeName) select instance"
          return nil
        }

      default:
        exchangeStructure.error = "unexpected p21parameter(\(p21untypedParam)) while resolving \(Self.bareTypeName) select instance"
        return nil
      }
    }

    public init?(p21omittedParamfrom exchangeStructure: P21Decode.ExchangeStructure) {
      return nil
    }


    //MARK: - ENTITY UNDERLYING TYPE REFERENCES
    public var super_eEFFECTIVITY_ASSIGNMENT: eEFFECTIVITY_ASSIGNMENT? {
      switch self {
      case ._EFFECTIVITY_ASSIGNMENT(let entity): return entity
      default: return nil
      }
    }

    public var super_eGROUP_ASSIGNMENT: eGROUP_ASSIGNMENT? {
      switch self {
      case ._GROUP_ASSIGNMENT(let entity): return entity
      default: return nil
      }
    }

    public var super_eCONTRACT_ASSIGNMENT: eCONTRACT_ASSIGNMENT? {
      switch self {
      case ._CONTRACT_ASSIGNMENT(let entity): return entity
      default: return nil
      }
    }

    public var super_eACTION_REQUEST_ASSIGNMENT: eACTION_REQUEST_ASSIGNMENT? {
      switch self {
      case ._ACTION_REQUEST_ASSIGNMENT(let entity): return entity
      default: return nil
      }
    }

    public var super_eSECURITY_CLASSIFICATION_ASSIGNMENT: eSECURITY_CLASSIFICATION_ASSIGNMENT? {
      switch self {
      case ._SECURITY_CLASSIFICATION_ASSIGNMENT(let entity): return entity
      default: return nil
      }
    }

    public var super_eDIRECTED_ACTION_ASSIGNMENT: eDIRECTED_ACTION_ASSIGNMENT? {
      switch self {
      case ._DIRECTED_ACTION_ASSIGNMENT(let entity): return entity
      default: return nil
      }
    }

    public var super_eNAME_ASSIGNMENT: eNAME_ASSIGNMENT? {
      switch self {
      case ._NAME_ASSIGNMENT(let entity): return entity
      default: return nil
      }
    }

    public var super_eACTION_ASSIGNMENT: eACTION_ASSIGNMENT? {
      switch self {
      case ._ACTION_ASSIGNMENT(let entity): return entity
      default: return nil
      }
    }

    public var super_eAPPROVAL_ASSIGNMENT: eAPPROVAL_ASSIGNMENT? {
      switch self {
      case ._APPROVAL_ASSIGNMENT(let entity): return entity
      default: return nil
      }
    }

    public var super_eDOCUMENT_REFERENCE: eDOCUMENT_REFERENCE? {
      switch self {
      case ._DOCUMENT_REFERENCE(let entity): return entity
      default: return nil
      }
    }

    public var super_eCERTIFICATION_ASSIGNMENT: eCERTIFICATION_ASSIGNMENT? {
      switch self {
      case ._CERTIFICATION_ASSIGNMENT(let entity): return entity
      default: return nil
      }
    }

    public var super_eAPPROVAL_DATE_TIME: eAPPROVAL_DATE_TIME? {
      switch self {
      case ._APPROVAL_DATE_TIME(let entity): return entity
      default: return nil
      }
    }


    //MARK: - ENTITY ATTRIBUTE REFERENCES
    /// attribute of SELECT type ``sROLE_SELECT``
    /// - origin: ENTITY( ``eSECURITY_CLASSIFICATION_ASSIGNMENT`` )
    public var ASSIGNED_SECURITY_CLASSIFICATION: eSECURITY_CLASSIFICATION?  {
      switch self {
      case ._SECURITY_CLASSIFICATION_ASSIGNMENT(let entity): return entity.ASSIGNED_SECURITY_CLASSIFICATION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sROLE_SELECT``
    /// - origin: ENTITY( ``eAPPROVAL_DATE_TIME`` )
    public var DATE_TIME: sDATE_TIME_SELECT?  {
      switch self {
      case ._APPROVAL_DATE_TIME(let entity): return entity.DATE_TIME
      default: return nil
      }
    }

    /// attribute of SELECT type ``sROLE_SELECT``
    /// - origin: ENTITY( ``eDIRECTED_ACTION_ASSIGNMENT`` )
    public var ASSIGNED_DIRECTED_ACTION: eDIRECTED_ACTION?  {
      switch self {
      case ._DIRECTED_ACTION_ASSIGNMENT(let entity): return entity.ASSIGNED_DIRECTED_ACTION
      default: return nil
      }
    }

    //MARK: var ITEM: (AMBIGUOUS)

    /// attribute of SELECT type ``sROLE_SELECT``
    /// - origin: ENTITY( ``eACTION_ASSIGNMENT`` )
    /// - origin: ENTITY( ``eACTION_REQUEST_ASSIGNMENT`` )
    /// - origin: ENTITY( ``eAPPROVAL_ASSIGNMENT`` )
    /// - origin: ENTITY( ``eAPPROVAL_DATE_TIME`` )
    /// - origin: ENTITY( ``eCERTIFICATION_ASSIGNMENT`` )
    /// - origin: ENTITY( ``eCONTRACT_ASSIGNMENT`` )
    /// - origin: ENTITY( ``eDIRECTED_ACTION_ASSIGNMENT`` )
    /// - origin: ENTITY( ``eDOCUMENT_REFERENCE`` )
    /// - origin: ENTITY( ``eEFFECTIVITY_ASSIGNMENT`` )
    /// - origin: ENTITY( ``eGROUP_ASSIGNMENT`` )
    /// - origin: ENTITY( ``eNAME_ASSIGNMENT`` )
    /// - origin: ENTITY( ``eSECURITY_CLASSIFICATION_ASSIGNMENT`` )
    public var ROLE: eOBJECT_ROLE?  {
      switch self {
      case ._ACTION_ASSIGNMENT(let entity): return entity.ROLE
      case ._ACTION_REQUEST_ASSIGNMENT(let entity): return entity.ROLE
      case ._APPROVAL_ASSIGNMENT(let entity): return entity.ROLE
      case ._APPROVAL_DATE_TIME(let entity): return entity.ROLE
      case ._CERTIFICATION_ASSIGNMENT(let entity): return entity.ROLE
      case ._CONTRACT_ASSIGNMENT(let entity): return entity.ROLE
      case ._DIRECTED_ACTION_ASSIGNMENT(let entity): return entity.ROLE
      case ._DOCUMENT_REFERENCE(let entity): return entity.ROLE
      case ._EFFECTIVITY_ASSIGNMENT(let entity): return entity.ROLE
      case ._GROUP_ASSIGNMENT(let entity): return entity.ROLE
      case ._NAME_ASSIGNMENT(let entity): return entity.ROLE
      case ._SECURITY_CLASSIFICATION_ASSIGNMENT(let entity): return entity.ROLE
      }
    }

    /// attribute of SELECT type ``sROLE_SELECT``
    /// - origin: ENTITY( ``eGROUP_ASSIGNMENT`` )
    public var PRODUCT_GROUP_ATTRIBUTES: (SDAI.SET<ePRODUCT_GROUP_ATTRIBUTES>/*[1:1]*/ )?  {
      switch self {
      case ._GROUP_ASSIGNMENT(let entity): return entity.PRODUCT_GROUP_ATTRIBUTES
      default: return nil
      }
    }

    /// attribute of SELECT type ``sROLE_SELECT``
    /// - origin: ENTITY( ``eAPPROVAL_ASSIGNMENT`` )
    public var ASSIGNED_APPROVAL: eAPPROVAL?  {
      switch self {
      case ._APPROVAL_ASSIGNMENT(let entity): return entity.ASSIGNED_APPROVAL
      default: return nil
      }
    }

    /// attribute of SELECT type ``sROLE_SELECT``
    /// - origin: ENTITY( ``eNAME_ASSIGNMENT`` )
    public var ASSIGNED_NAME: tLABEL?  {
      switch self {
      case ._NAME_ASSIGNMENT(let entity): return entity.ASSIGNED_NAME
      default: return nil
      }
    }

    /// attribute of SELECT type ``sROLE_SELECT``
    /// - origin: ENTITY( ``eDIRECTED_ACTION_ASSIGNMENT`` )
    public var ITEMS: (SDAI.SET<sACTION_REQUEST_ITEM>/*[1:nil]*/ )?  {
      switch self {
      case ._ACTION_ASSIGNMENT/*(let entity)*/: return nil // AMBIGUOUS ATTRIBUTE for eACTION_ASSIGNMENT
      case ._ACTION_REQUEST_ASSIGNMENT/*(let entity)*/: return nil // AMBIGUOUS ATTRIBUTE for eACTION_REQUEST_ASSIGNMENT
      case ._APPROVAL_ASSIGNMENT/*(let entity)*/: return nil // AMBIGUOUS ATTRIBUTE for eAPPROVAL_ASSIGNMENT
      case ._CERTIFICATION_ASSIGNMENT/*(let entity)*/: return nil // AMBIGUOUS ATTRIBUTE for eCERTIFICATION_ASSIGNMENT
      case ._CONTRACT_ASSIGNMENT/*(let entity)*/: return nil // AMBIGUOUS ATTRIBUTE for eCONTRACT_ASSIGNMENT
      case ._DIRECTED_ACTION_ASSIGNMENT(let entity): return entity.ITEMS
      case ._DOCUMENT_REFERENCE/*(let entity)*/: return nil // AMBIGUOUS ATTRIBUTE for eDOCUMENT_REFERENCE
      case ._EFFECTIVITY_ASSIGNMENT/*(let entity)*/: return nil // AMBIGUOUS ATTRIBUTE for eEFFECTIVITY_ASSIGNMENT
      case ._GROUP_ASSIGNMENT/*(let entity)*/: return nil // AMBIGUOUS ATTRIBUTE for eGROUP_ASSIGNMENT
      case ._SECURITY_CLASSIFICATION_ASSIGNMENT/*(let entity)*/: return nil // AMBIGUOUS ATTRIBUTE for eSECURITY_CLASSIFICATION_ASSIGNMENT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sROLE_SELECT``
    /// - origin: ENTITY( ``eDOCUMENT_REFERENCE`` )
    public var SPECIFIED_ITEMS: (SDAI.SET<sSPECIFIED_ITEM>/*[1:nil]*/ )?  {
      switch self {
      case ._DOCUMENT_REFERENCE(let entity): return entity.SPECIFIED_ITEMS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sROLE_SELECT``
    /// - origin: ENTITY( ``eGROUP_ASSIGNMENT`` )
    public var OF_SHAPE: eMATED_PART_RELATIONSHIP?  {
      switch self {
      case ._GROUP_ASSIGNMENT(let entity): return entity.OF_SHAPE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sROLE_SELECT``
    /// - origin: ENTITY( ``eAPPROVAL_DATE_TIME`` )
    public var DATED_APPROVAL: eAPPROVAL?  {
      switch self {
      case ._APPROVAL_DATE_TIME(let entity): return entity.DATED_APPROVAL
      default: return nil
      }
    }

    /// attribute of SELECT type ``sROLE_SELECT``
    /// - origin: ENTITY( ``eGROUP_ASSIGNMENT`` )
    public var ATTRIBUTES: (SDAI.SET<sATTRIBUTE_SELECT>/*[1:1]*/ )?  {
      switch self {
      case ._GROUP_ASSIGNMENT(let entity): return entity.ATTRIBUTES
      default: return nil
      }
    }

    /// attribute of SELECT type ``sROLE_SELECT``
    /// - origin: ENTITY( ``eCERTIFICATION_ASSIGNMENT`` )
    public var ASSIGNED_CERTIFICATION: eCERTIFICATION?  {
      switch self {
      case ._CERTIFICATION_ASSIGNMENT(let entity): return entity.ASSIGNED_CERTIFICATION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sROLE_SELECT``
    /// - origin: ENTITY( ``eACTION_ASSIGNMENT`` )
    public var ASSIGNED_ACTION: eACTION?  {
      switch self {
      case ._ACTION_ASSIGNMENT(let entity): return entity.ASSIGNED_ACTION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sROLE_SELECT``
    /// - origin: ENTITY( ``eACTION_REQUEST_ASSIGNMENT`` )
    public var ASSIGNED_ACTION_REQUEST: eVERSIONED_ACTION_REQUEST?  {
      switch self {
      case ._ACTION_REQUEST_ASSIGNMENT(let entity): return entity.ASSIGNED_ACTION_REQUEST
      default: return nil
      }
    }

    /// attribute of SELECT type ``sROLE_SELECT``
    /// - origin: ENTITY( ``eGROUP_ASSIGNMENT`` )
    public var MEMBER: sPRODUCT_SELECT?  {
      switch self {
      case ._GROUP_ASSIGNMENT(let entity): return entity.MEMBER
      default: return nil
      }
    }

    /// attribute of SELECT type ``sROLE_SELECT``
    /// - origin: ENTITY( ``eCONTRACT_ASSIGNMENT`` )
    public var ASSIGNED_CONTRACT: eCONTRACT?  {
      switch self {
      case ._CONTRACT_ASSIGNMENT(let entity): return entity.ASSIGNED_CONTRACT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sROLE_SELECT``
    /// - origin: ENTITY( ``eDOCUMENT_REFERENCE`` )
    public var SOURCE: tLABEL?  {
      switch self {
      case ._DOCUMENT_REFERENCE(let entity): return entity.SOURCE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sROLE_SELECT``
    /// - origin: ENTITY( ``eEFFECTIVITY_ASSIGNMENT`` )
    public var ASSIGNED_EFFECTIVITY: eEFFECTIVITY?  {
      switch self {
      case ._EFFECTIVITY_ASSIGNMENT(let entity): return entity.ASSIGNED_EFFECTIVITY
      default: return nil
      }
    }

    /// attribute of SELECT type ``sROLE_SELECT``
    /// - origin: ENTITY( ``eDOCUMENT_REFERENCE`` )
    public var ASSIGNED_DOCUMENT: eDOCUMENT?  {
      switch self {
      case ._DOCUMENT_REFERENCE(let entity): return entity.ASSIGNED_DOCUMENT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sROLE_SELECT``
    /// - origin: ENTITY( ``eGROUP_ASSIGNMENT`` )
    public var ASSIGNED_GROUP: eGROUP?  {
      switch self {
      case ._GROUP_ASSIGNMENT(let entity): return entity.ASSIGNED_GROUP
      default: return nil
      }
    }

    /// attribute of SELECT type ``sROLE_SELECT``
    /// - origin: ENTITY( ``eGROUP_ASSIGNMENT`` )
    public var DEFINITION: eMATED_PART_RELATIONSHIP?  {
      switch self {
      case ._GROUP_ASSIGNMENT(let entity): return entity.DEFINITION
      default: return nil
      }
    }


    //MARK: - SDAIValue
    public func isValueEqual<T: SDAIValue>(to rhs: T) -> Bool {
      switch self {
      case ._ACTION_ASSIGNMENT(let selection): return selection.value.isValueEqual(to: rhs)
      case ._ACTION_REQUEST_ASSIGNMENT(let selection): return selection.value.isValueEqual(to: rhs)
      case ._APPROVAL_ASSIGNMENT(let selection): return selection.value.isValueEqual(to: rhs)
      case ._APPROVAL_DATE_TIME(let selection): return selection.value.isValueEqual(to: rhs)
      case ._CERTIFICATION_ASSIGNMENT(let selection): return selection.value.isValueEqual(to: rhs)
      case ._CONTRACT_ASSIGNMENT(let selection): return selection.value.isValueEqual(to: rhs)
      case ._DIRECTED_ACTION_ASSIGNMENT(let selection): return selection.value.isValueEqual(to: rhs)
      case ._DOCUMENT_REFERENCE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._EFFECTIVITY_ASSIGNMENT(let selection): return selection.value.isValueEqual(to: rhs)
      case ._GROUP_ASSIGNMENT(let selection): return selection.value.isValueEqual(to: rhs)
      case ._NAME_ASSIGNMENT(let selection): return selection.value.isValueEqual(to: rhs)
      case ._SECURITY_CLASSIFICATION_ASSIGNMENT(let selection): return selection.value.isValueEqual(to: rhs)
      }
    }

    public func isValueEqualOptionally<T: SDAIValue>(to rhs: T?) -> Bool? {
      switch self {
      case ._ACTION_ASSIGNMENT(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._ACTION_REQUEST_ASSIGNMENT(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._APPROVAL_ASSIGNMENT(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._APPROVAL_DATE_TIME(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._CERTIFICATION_ASSIGNMENT(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._CONTRACT_ASSIGNMENT(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._DIRECTED_ACTION_ASSIGNMENT(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._DOCUMENT_REFERENCE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._EFFECTIVITY_ASSIGNMENT(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._GROUP_ASSIGNMENT(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._NAME_ASSIGNMENT(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._SECURITY_CLASSIFICATION_ASSIGNMENT(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      }
    }

    public func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      switch self {
      case ._ACTION_ASSIGNMENT(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._ACTION_REQUEST_ASSIGNMENT(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._APPROVAL_ASSIGNMENT(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._APPROVAL_DATE_TIME(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._CERTIFICATION_ASSIGNMENT(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._CONTRACT_ASSIGNMENT(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._DIRECTED_ACTION_ASSIGNMENT(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._DOCUMENT_REFERENCE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._EFFECTIVITY_ASSIGNMENT(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._GROUP_ASSIGNMENT(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._NAME_ASSIGNMENT(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._SECURITY_CLASSIFICATION_ASSIGNMENT(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      }
    }

    public func isValueEqual<T: SDAIValue>(to rhs: T, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      switch self {
      case ._ACTION_ASSIGNMENT(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._ACTION_REQUEST_ASSIGNMENT(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._APPROVAL_ASSIGNMENT(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._APPROVAL_DATE_TIME(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._CERTIFICATION_ASSIGNMENT(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._CONTRACT_ASSIGNMENT(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._DIRECTED_ACTION_ASSIGNMENT(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._DOCUMENT_REFERENCE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._EFFECTIVITY_ASSIGNMENT(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._GROUP_ASSIGNMENT(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._NAME_ASSIGNMENT(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._SECURITY_CLASSIFICATION_ASSIGNMENT(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      }
    }

    public func isValueEqualOptionally<T: SDAIValue>(to rhs: T?, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      switch self {
      case ._ACTION_ASSIGNMENT(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._ACTION_REQUEST_ASSIGNMENT(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._APPROVAL_ASSIGNMENT(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._APPROVAL_DATE_TIME(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._CERTIFICATION_ASSIGNMENT(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._CONTRACT_ASSIGNMENT(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._DIRECTED_ACTION_ASSIGNMENT(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._DOCUMENT_REFERENCE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._EFFECTIVITY_ASSIGNMENT(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._GROUP_ASSIGNMENT(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._NAME_ASSIGNMENT(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._SECURITY_CLASSIFICATION_ASSIGNMENT(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      }
    }


    //MARK: SDAIGenericTypeBase
    public func copy() -> Self {
      switch self {
      case ._ACTION_ASSIGNMENT(let selection): return ._ACTION_ASSIGNMENT(selection.copy())
      case ._ACTION_REQUEST_ASSIGNMENT(let selection): return ._ACTION_REQUEST_ASSIGNMENT(selection.copy())
      case ._APPROVAL_ASSIGNMENT(let selection): return ._APPROVAL_ASSIGNMENT(selection.copy())
      case ._APPROVAL_DATE_TIME(let selection): return ._APPROVAL_DATE_TIME(selection.copy())
      case ._CERTIFICATION_ASSIGNMENT(let selection): return ._CERTIFICATION_ASSIGNMENT(selection.copy())
      case ._CONTRACT_ASSIGNMENT(let selection): return ._CONTRACT_ASSIGNMENT(selection.copy())
      case ._DIRECTED_ACTION_ASSIGNMENT(let selection): return ._DIRECTED_ACTION_ASSIGNMENT(selection.copy())
      case ._DOCUMENT_REFERENCE(let selection): return ._DOCUMENT_REFERENCE(selection.copy())
      case ._EFFECTIVITY_ASSIGNMENT(let selection): return ._EFFECTIVITY_ASSIGNMENT(selection.copy())
      case ._GROUP_ASSIGNMENT(let selection): return ._GROUP_ASSIGNMENT(selection.copy())
      case ._NAME_ASSIGNMENT(let selection): return ._NAME_ASSIGNMENT(selection.copy())
      case ._SECURITY_CLASSIFICATION_ASSIGNMENT(let selection): return ._SECURITY_CLASSIFICATION_ASSIGNMENT(selection.copy())
      }
    }

    //MARK: SDAIGenericType
    public var typeMembers: Set<SDAI.STRING> {
      var members: Set<SDAI.STRING> = [SDAI.STRING(Self.typeName)]
      switch self {
      case ._ACTION_ASSIGNMENT(let selection): members.formUnion(selection.typeMembers)
      case ._ACTION_REQUEST_ASSIGNMENT(let selection): members.formUnion(selection.typeMembers)
      case ._APPROVAL_ASSIGNMENT(let selection): members.formUnion(selection.typeMembers)
      case ._APPROVAL_DATE_TIME(let selection): members.formUnion(selection.typeMembers)
      case ._CERTIFICATION_ASSIGNMENT(let selection): members.formUnion(selection.typeMembers)
      case ._CONTRACT_ASSIGNMENT(let selection): members.formUnion(selection.typeMembers)
      case ._DIRECTED_ACTION_ASSIGNMENT(let selection): members.formUnion(selection.typeMembers)
      case ._DOCUMENT_REFERENCE(let selection): members.formUnion(selection.typeMembers)
      case ._EFFECTIVITY_ASSIGNMENT(let selection): members.formUnion(selection.typeMembers)
      case ._GROUP_ASSIGNMENT(let selection): members.formUnion(selection.typeMembers)
      case ._NAME_ASSIGNMENT(let selection): members.formUnion(selection.typeMembers)
      case ._SECURITY_CLASSIFICATION_ASSIGNMENT(let selection): members.formUnion(selection.typeMembers)
      }
      return members
    }

    public var entityReference: SDAI.EntityReference? {
      switch self {
      case ._ACTION_ASSIGNMENT(let selection): return selection.entityReference
      case ._ACTION_REQUEST_ASSIGNMENT(let selection): return selection.entityReference
      case ._APPROVAL_ASSIGNMENT(let selection): return selection.entityReference
      case ._APPROVAL_DATE_TIME(let selection): return selection.entityReference
      case ._CERTIFICATION_ASSIGNMENT(let selection): return selection.entityReference
      case ._CONTRACT_ASSIGNMENT(let selection): return selection.entityReference
      case ._DIRECTED_ACTION_ASSIGNMENT(let selection): return selection.entityReference
      case ._DOCUMENT_REFERENCE(let selection): return selection.entityReference
      case ._EFFECTIVITY_ASSIGNMENT(let selection): return selection.entityReference
      case ._GROUP_ASSIGNMENT(let selection): return selection.entityReference
      case ._NAME_ASSIGNMENT(let selection): return selection.entityReference
      case ._SECURITY_CLASSIFICATION_ASSIGNMENT(let selection): return selection.entityReference
      }
    }
    public var stringValue: SDAI.STRING? {
      switch self {
      case ._ACTION_ASSIGNMENT(let selection): return selection.stringValue
      case ._ACTION_REQUEST_ASSIGNMENT(let selection): return selection.stringValue
      case ._APPROVAL_ASSIGNMENT(let selection): return selection.stringValue
      case ._APPROVAL_DATE_TIME(let selection): return selection.stringValue
      case ._CERTIFICATION_ASSIGNMENT(let selection): return selection.stringValue
      case ._CONTRACT_ASSIGNMENT(let selection): return selection.stringValue
      case ._DIRECTED_ACTION_ASSIGNMENT(let selection): return selection.stringValue
      case ._DOCUMENT_REFERENCE(let selection): return selection.stringValue
      case ._EFFECTIVITY_ASSIGNMENT(let selection): return selection.stringValue
      case ._GROUP_ASSIGNMENT(let selection): return selection.stringValue
      case ._NAME_ASSIGNMENT(let selection): return selection.stringValue
      case ._SECURITY_CLASSIFICATION_ASSIGNMENT(let selection): return selection.stringValue
      }
    }
    public var binaryValue: SDAI.BINARY? {
      switch self {
      case ._ACTION_ASSIGNMENT(let selection): return selection.binaryValue
      case ._ACTION_REQUEST_ASSIGNMENT(let selection): return selection.binaryValue
      case ._APPROVAL_ASSIGNMENT(let selection): return selection.binaryValue
      case ._APPROVAL_DATE_TIME(let selection): return selection.binaryValue
      case ._CERTIFICATION_ASSIGNMENT(let selection): return selection.binaryValue
      case ._CONTRACT_ASSIGNMENT(let selection): return selection.binaryValue
      case ._DIRECTED_ACTION_ASSIGNMENT(let selection): return selection.binaryValue
      case ._DOCUMENT_REFERENCE(let selection): return selection.binaryValue
      case ._EFFECTIVITY_ASSIGNMENT(let selection): return selection.binaryValue
      case ._GROUP_ASSIGNMENT(let selection): return selection.binaryValue
      case ._NAME_ASSIGNMENT(let selection): return selection.binaryValue
      case ._SECURITY_CLASSIFICATION_ASSIGNMENT(let selection): return selection.binaryValue
      }
    }
    public var logicalValue: SDAI.LOGICAL? {
      switch self {
      case ._ACTION_ASSIGNMENT(let selection): return selection.logicalValue
      case ._ACTION_REQUEST_ASSIGNMENT(let selection): return selection.logicalValue
      case ._APPROVAL_ASSIGNMENT(let selection): return selection.logicalValue
      case ._APPROVAL_DATE_TIME(let selection): return selection.logicalValue
      case ._CERTIFICATION_ASSIGNMENT(let selection): return selection.logicalValue
      case ._CONTRACT_ASSIGNMENT(let selection): return selection.logicalValue
      case ._DIRECTED_ACTION_ASSIGNMENT(let selection): return selection.logicalValue
      case ._DOCUMENT_REFERENCE(let selection): return selection.logicalValue
      case ._EFFECTIVITY_ASSIGNMENT(let selection): return selection.logicalValue
      case ._GROUP_ASSIGNMENT(let selection): return selection.logicalValue
      case ._NAME_ASSIGNMENT(let selection): return selection.logicalValue
      case ._SECURITY_CLASSIFICATION_ASSIGNMENT(let selection): return selection.logicalValue
      }
    }
    public var booleanValue: SDAI.BOOLEAN? {
      switch self {
      case ._ACTION_ASSIGNMENT(let selection): return selection.booleanValue
      case ._ACTION_REQUEST_ASSIGNMENT(let selection): return selection.booleanValue
      case ._APPROVAL_ASSIGNMENT(let selection): return selection.booleanValue
      case ._APPROVAL_DATE_TIME(let selection): return selection.booleanValue
      case ._CERTIFICATION_ASSIGNMENT(let selection): return selection.booleanValue
      case ._CONTRACT_ASSIGNMENT(let selection): return selection.booleanValue
      case ._DIRECTED_ACTION_ASSIGNMENT(let selection): return selection.booleanValue
      case ._DOCUMENT_REFERENCE(let selection): return selection.booleanValue
      case ._EFFECTIVITY_ASSIGNMENT(let selection): return selection.booleanValue
      case ._GROUP_ASSIGNMENT(let selection): return selection.booleanValue
      case ._NAME_ASSIGNMENT(let selection): return selection.booleanValue
      case ._SECURITY_CLASSIFICATION_ASSIGNMENT(let selection): return selection.booleanValue
      }
    }
    public var numberValue: SDAI.NUMBER? {
      switch self {
      case ._ACTION_ASSIGNMENT(let selection): return selection.numberValue
      case ._ACTION_REQUEST_ASSIGNMENT(let selection): return selection.numberValue
      case ._APPROVAL_ASSIGNMENT(let selection): return selection.numberValue
      case ._APPROVAL_DATE_TIME(let selection): return selection.numberValue
      case ._CERTIFICATION_ASSIGNMENT(let selection): return selection.numberValue
      case ._CONTRACT_ASSIGNMENT(let selection): return selection.numberValue
      case ._DIRECTED_ACTION_ASSIGNMENT(let selection): return selection.numberValue
      case ._DOCUMENT_REFERENCE(let selection): return selection.numberValue
      case ._EFFECTIVITY_ASSIGNMENT(let selection): return selection.numberValue
      case ._GROUP_ASSIGNMENT(let selection): return selection.numberValue
      case ._NAME_ASSIGNMENT(let selection): return selection.numberValue
      case ._SECURITY_CLASSIFICATION_ASSIGNMENT(let selection): return selection.numberValue
      }
    }
    public var realValue: SDAI.REAL? {
      switch self {
      case ._ACTION_ASSIGNMENT(let selection): return selection.realValue
      case ._ACTION_REQUEST_ASSIGNMENT(let selection): return selection.realValue
      case ._APPROVAL_ASSIGNMENT(let selection): return selection.realValue
      case ._APPROVAL_DATE_TIME(let selection): return selection.realValue
      case ._CERTIFICATION_ASSIGNMENT(let selection): return selection.realValue
      case ._CONTRACT_ASSIGNMENT(let selection): return selection.realValue
      case ._DIRECTED_ACTION_ASSIGNMENT(let selection): return selection.realValue
      case ._DOCUMENT_REFERENCE(let selection): return selection.realValue
      case ._EFFECTIVITY_ASSIGNMENT(let selection): return selection.realValue
      case ._GROUP_ASSIGNMENT(let selection): return selection.realValue
      case ._NAME_ASSIGNMENT(let selection): return selection.realValue
      case ._SECURITY_CLASSIFICATION_ASSIGNMENT(let selection): return selection.realValue
      }
    }
    public var integerValue: SDAI.INTEGER? {
      switch self {
      case ._ACTION_ASSIGNMENT(let selection): return selection.integerValue
      case ._ACTION_REQUEST_ASSIGNMENT(let selection): return selection.integerValue
      case ._APPROVAL_ASSIGNMENT(let selection): return selection.integerValue
      case ._APPROVAL_DATE_TIME(let selection): return selection.integerValue
      case ._CERTIFICATION_ASSIGNMENT(let selection): return selection.integerValue
      case ._CONTRACT_ASSIGNMENT(let selection): return selection.integerValue
      case ._DIRECTED_ACTION_ASSIGNMENT(let selection): return selection.integerValue
      case ._DOCUMENT_REFERENCE(let selection): return selection.integerValue
      case ._EFFECTIVITY_ASSIGNMENT(let selection): return selection.integerValue
      case ._GROUP_ASSIGNMENT(let selection): return selection.integerValue
      case ._NAME_ASSIGNMENT(let selection): return selection.integerValue
      case ._SECURITY_CLASSIFICATION_ASSIGNMENT(let selection): return selection.integerValue
      }
    }
    public var genericEnumValue: SDAI.GenericEnumValue? {
      switch self {
      case ._ACTION_ASSIGNMENT(let selection): return selection.genericEnumValue
      case ._ACTION_REQUEST_ASSIGNMENT(let selection): return selection.genericEnumValue
      case ._APPROVAL_ASSIGNMENT(let selection): return selection.genericEnumValue
      case ._APPROVAL_DATE_TIME(let selection): return selection.genericEnumValue
      case ._CERTIFICATION_ASSIGNMENT(let selection): return selection.genericEnumValue
      case ._CONTRACT_ASSIGNMENT(let selection): return selection.genericEnumValue
      case ._DIRECTED_ACTION_ASSIGNMENT(let selection): return selection.genericEnumValue
      case ._DOCUMENT_REFERENCE(let selection): return selection.genericEnumValue
      case ._EFFECTIVITY_ASSIGNMENT(let selection): return selection.genericEnumValue
      case ._GROUP_ASSIGNMENT(let selection): return selection.genericEnumValue
      case ._NAME_ASSIGNMENT(let selection): return selection.genericEnumValue
      case ._SECURITY_CLASSIFICATION_ASSIGNMENT(let selection): return selection.genericEnumValue
      }
    }
    public func arrayOptionalValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.ARRAY_OPTIONAL<ELEM>? {
      switch self {
      case ._ACTION_ASSIGNMENT(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._ACTION_REQUEST_ASSIGNMENT(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._APPROVAL_ASSIGNMENT(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._APPROVAL_DATE_TIME(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._CERTIFICATION_ASSIGNMENT(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._CONTRACT_ASSIGNMENT(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._DIRECTED_ACTION_ASSIGNMENT(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._DOCUMENT_REFERENCE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._EFFECTIVITY_ASSIGNMENT(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._GROUP_ASSIGNMENT(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._NAME_ASSIGNMENT(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._SECURITY_CLASSIFICATION_ASSIGNMENT(let selection): return selection.arrayOptionalValue(elementType:elementType)
      }
    }
    public func arrayValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.ARRAY<ELEM>? {
      switch self {
      case ._ACTION_ASSIGNMENT(let selection): return selection.arrayValue(elementType:elementType)
      case ._ACTION_REQUEST_ASSIGNMENT(let selection): return selection.arrayValue(elementType:elementType)
      case ._APPROVAL_ASSIGNMENT(let selection): return selection.arrayValue(elementType:elementType)
      case ._APPROVAL_DATE_TIME(let selection): return selection.arrayValue(elementType:elementType)
      case ._CERTIFICATION_ASSIGNMENT(let selection): return selection.arrayValue(elementType:elementType)
      case ._CONTRACT_ASSIGNMENT(let selection): return selection.arrayValue(elementType:elementType)
      case ._DIRECTED_ACTION_ASSIGNMENT(let selection): return selection.arrayValue(elementType:elementType)
      case ._DOCUMENT_REFERENCE(let selection): return selection.arrayValue(elementType:elementType)
      case ._EFFECTIVITY_ASSIGNMENT(let selection): return selection.arrayValue(elementType:elementType)
      case ._GROUP_ASSIGNMENT(let selection): return selection.arrayValue(elementType:elementType)
      case ._NAME_ASSIGNMENT(let selection): return selection.arrayValue(elementType:elementType)
      case ._SECURITY_CLASSIFICATION_ASSIGNMENT(let selection): return selection.arrayValue(elementType:elementType)
      }
    }
    public func listValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.LIST<ELEM>? {
      switch self {
      case ._ACTION_ASSIGNMENT(let selection): return selection.listValue(elementType:elementType)
      case ._ACTION_REQUEST_ASSIGNMENT(let selection): return selection.listValue(elementType:elementType)
      case ._APPROVAL_ASSIGNMENT(let selection): return selection.listValue(elementType:elementType)
      case ._APPROVAL_DATE_TIME(let selection): return selection.listValue(elementType:elementType)
      case ._CERTIFICATION_ASSIGNMENT(let selection): return selection.listValue(elementType:elementType)
      case ._CONTRACT_ASSIGNMENT(let selection): return selection.listValue(elementType:elementType)
      case ._DIRECTED_ACTION_ASSIGNMENT(let selection): return selection.listValue(elementType:elementType)
      case ._DOCUMENT_REFERENCE(let selection): return selection.listValue(elementType:elementType)
      case ._EFFECTIVITY_ASSIGNMENT(let selection): return selection.listValue(elementType:elementType)
      case ._GROUP_ASSIGNMENT(let selection): return selection.listValue(elementType:elementType)
      case ._NAME_ASSIGNMENT(let selection): return selection.listValue(elementType:elementType)
      case ._SECURITY_CLASSIFICATION_ASSIGNMENT(let selection): return selection.listValue(elementType:elementType)
      }
    }
    public func bagValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.BAG<ELEM>? {
      switch self {
      case ._ACTION_ASSIGNMENT(let selection): return selection.bagValue(elementType:elementType)
      case ._ACTION_REQUEST_ASSIGNMENT(let selection): return selection.bagValue(elementType:elementType)
      case ._APPROVAL_ASSIGNMENT(let selection): return selection.bagValue(elementType:elementType)
      case ._APPROVAL_DATE_TIME(let selection): return selection.bagValue(elementType:elementType)
      case ._CERTIFICATION_ASSIGNMENT(let selection): return selection.bagValue(elementType:elementType)
      case ._CONTRACT_ASSIGNMENT(let selection): return selection.bagValue(elementType:elementType)
      case ._DIRECTED_ACTION_ASSIGNMENT(let selection): return selection.bagValue(elementType:elementType)
      case ._DOCUMENT_REFERENCE(let selection): return selection.bagValue(elementType:elementType)
      case ._EFFECTIVITY_ASSIGNMENT(let selection): return selection.bagValue(elementType:elementType)
      case ._GROUP_ASSIGNMENT(let selection): return selection.bagValue(elementType:elementType)
      case ._NAME_ASSIGNMENT(let selection): return selection.bagValue(elementType:elementType)
      case ._SECURITY_CLASSIFICATION_ASSIGNMENT(let selection): return selection.bagValue(elementType:elementType)
      }
    }
    public func setValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.SET<ELEM>? {
      switch self {
      case ._ACTION_ASSIGNMENT(let selection): return selection.setValue(elementType:elementType)
      case ._ACTION_REQUEST_ASSIGNMENT(let selection): return selection.setValue(elementType:elementType)
      case ._APPROVAL_ASSIGNMENT(let selection): return selection.setValue(elementType:elementType)
      case ._APPROVAL_DATE_TIME(let selection): return selection.setValue(elementType:elementType)
      case ._CERTIFICATION_ASSIGNMENT(let selection): return selection.setValue(elementType:elementType)
      case ._CONTRACT_ASSIGNMENT(let selection): return selection.setValue(elementType:elementType)
      case ._DIRECTED_ACTION_ASSIGNMENT(let selection): return selection.setValue(elementType:elementType)
      case ._DOCUMENT_REFERENCE(let selection): return selection.setValue(elementType:elementType)
      case ._EFFECTIVITY_ASSIGNMENT(let selection): return selection.setValue(elementType:elementType)
      case ._GROUP_ASSIGNMENT(let selection): return selection.setValue(elementType:elementType)
      case ._NAME_ASSIGNMENT(let selection): return selection.setValue(elementType:elementType)
      case ._SECURITY_CLASSIFICATION_ASSIGNMENT(let selection): return selection.setValue(elementType:elementType)
      }
    }
    public func enumValue<ENUM:SDAIEnumerationType>(enumType:ENUM.Type) -> ENUM? {
      switch self {
      case ._ACTION_ASSIGNMENT(let selection): return selection.enumValue(enumType:enumType)
      case ._ACTION_REQUEST_ASSIGNMENT(let selection): return selection.enumValue(enumType:enumType)
      case ._APPROVAL_ASSIGNMENT(let selection): return selection.enumValue(enumType:enumType)
      case ._APPROVAL_DATE_TIME(let selection): return selection.enumValue(enumType:enumType)
      case ._CERTIFICATION_ASSIGNMENT(let selection): return selection.enumValue(enumType:enumType)
      case ._CONTRACT_ASSIGNMENT(let selection): return selection.enumValue(enumType:enumType)
      case ._DIRECTED_ACTION_ASSIGNMENT(let selection): return selection.enumValue(enumType:enumType)
      case ._DOCUMENT_REFERENCE(let selection): return selection.enumValue(enumType:enumType)
      case ._EFFECTIVITY_ASSIGNMENT(let selection): return selection.enumValue(enumType:enumType)
      case ._GROUP_ASSIGNMENT(let selection): return selection.enumValue(enumType:enumType)
      case ._NAME_ASSIGNMENT(let selection): return selection.enumValue(enumType:enumType)
      case ._SECURITY_CLASSIFICATION_ASSIGNMENT(let selection): return selection.enumValue(enumType:enumType)
      }
    }

    //MARK: SDAIUnderlyingType
    public typealias FundamentalType = Self
    public static var typeName: String = "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ROLE_SELECT"
    public var asFundamentalType: FundamentalType { return self }

    //MARK: SDAIObservableAggregateElement
    public var entityReferences: AnySequence<SDAI.EntityReference> {
      switch self {
      case ._ACTION_ASSIGNMENT(let entity): return entity.entityReferences
      case ._ACTION_REQUEST_ASSIGNMENT(let entity): return entity.entityReferences
      case ._APPROVAL_ASSIGNMENT(let entity): return entity.entityReferences
      case ._APPROVAL_DATE_TIME(let entity): return entity.entityReferences
      case ._CERTIFICATION_ASSIGNMENT(let entity): return entity.entityReferences
      case ._CONTRACT_ASSIGNMENT(let entity): return entity.entityReferences
      case ._DIRECTED_ACTION_ASSIGNMENT(let entity): return entity.entityReferences
      case ._DOCUMENT_REFERENCE(let entity): return entity.entityReferences
      case ._EFFECTIVITY_ASSIGNMENT(let entity): return entity.entityReferences
      case ._GROUP_ASSIGNMENT(let entity): return entity.entityReferences
      case ._NAME_ASSIGNMENT(let entity): return entity.entityReferences
      case ._SECURITY_CLASSIFICATION_ASSIGNMENT(let entity): return entity.entityReferences
      }
    }

    public mutating func configure(with observer: SDAI.EntityReferenceObserver) {
      switch self {
      case ._ACTION_ASSIGNMENT(let entity): 
        entity.configure(with: observer)
        self = ._ACTION_ASSIGNMENT(entity)
      case ._ACTION_REQUEST_ASSIGNMENT(let entity): 
        entity.configure(with: observer)
        self = ._ACTION_REQUEST_ASSIGNMENT(entity)
      case ._APPROVAL_ASSIGNMENT(let entity): 
        entity.configure(with: observer)
        self = ._APPROVAL_ASSIGNMENT(entity)
      case ._APPROVAL_DATE_TIME(let entity): 
        entity.configure(with: observer)
        self = ._APPROVAL_DATE_TIME(entity)
      case ._CERTIFICATION_ASSIGNMENT(let entity): 
        entity.configure(with: observer)
        self = ._CERTIFICATION_ASSIGNMENT(entity)
      case ._CONTRACT_ASSIGNMENT(let entity): 
        entity.configure(with: observer)
        self = ._CONTRACT_ASSIGNMENT(entity)
      case ._DIRECTED_ACTION_ASSIGNMENT(let entity): 
        entity.configure(with: observer)
        self = ._DIRECTED_ACTION_ASSIGNMENT(entity)
      case ._DOCUMENT_REFERENCE(let entity): 
        entity.configure(with: observer)
        self = ._DOCUMENT_REFERENCE(entity)
      case ._EFFECTIVITY_ASSIGNMENT(let entity): 
        entity.configure(with: observer)
        self = ._EFFECTIVITY_ASSIGNMENT(entity)
      case ._GROUP_ASSIGNMENT(let entity): 
        entity.configure(with: observer)
        self = ._GROUP_ASSIGNMENT(entity)
      case ._NAME_ASSIGNMENT(let entity): 
        entity.configure(with: observer)
        self = ._NAME_ASSIGNMENT(entity)
      case ._SECURITY_CLASSIFICATION_ASSIGNMENT(let entity): 
        entity.configure(with: observer)
        self = ._SECURITY_CLASSIFICATION_ASSIGNMENT(entity)
      }
    }

    public mutating func teardownObserver() {
      switch self {
      case ._ACTION_ASSIGNMENT(let entity): 
        entity.teardownObserver()
        self = ._ACTION_ASSIGNMENT(entity)
      case ._ACTION_REQUEST_ASSIGNMENT(let entity): 
        entity.teardownObserver()
        self = ._ACTION_REQUEST_ASSIGNMENT(entity)
      case ._APPROVAL_ASSIGNMENT(let entity): 
        entity.teardownObserver()
        self = ._APPROVAL_ASSIGNMENT(entity)
      case ._APPROVAL_DATE_TIME(let entity): 
        entity.teardownObserver()
        self = ._APPROVAL_DATE_TIME(entity)
      case ._CERTIFICATION_ASSIGNMENT(let entity): 
        entity.teardownObserver()
        self = ._CERTIFICATION_ASSIGNMENT(entity)
      case ._CONTRACT_ASSIGNMENT(let entity): 
        entity.teardownObserver()
        self = ._CONTRACT_ASSIGNMENT(entity)
      case ._DIRECTED_ACTION_ASSIGNMENT(let entity): 
        entity.teardownObserver()
        self = ._DIRECTED_ACTION_ASSIGNMENT(entity)
      case ._DOCUMENT_REFERENCE(let entity): 
        entity.teardownObserver()
        self = ._DOCUMENT_REFERENCE(entity)
      case ._EFFECTIVITY_ASSIGNMENT(let entity): 
        entity.teardownObserver()
        self = ._EFFECTIVITY_ASSIGNMENT(entity)
      case ._GROUP_ASSIGNMENT(let entity): 
        entity.teardownObserver()
        self = ._GROUP_ASSIGNMENT(entity)
      case ._NAME_ASSIGNMENT(let entity): 
        entity.teardownObserver()
        self = ._NAME_ASSIGNMENT(entity)
      case ._SECURITY_CLASSIFICATION_ASSIGNMENT(let entity): 
        entity.teardownObserver()
        self = ._SECURITY_CLASSIFICATION_ASSIGNMENT(entity)
      }
    }

    //MARK: SDAIAggregationBehavior
    public var aggregationHiBound: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationHiIndex: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationLoBound: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationLoIndex: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationSize: Int? {
      switch self {
      default: return nil
      }
    }

    //MARK: WHERE RULE VALIDATION (SELECT TYPE)
    public static func validateWhereRules(instance:Self?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      var result: [SDAI.WhereLabel:SDAI.LOGICAL] = [:]
      switch instance {
      case ._ACTION_ASSIGNMENT(let selectValue): 
        result = eACTION_ASSIGNMENT.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\ACTION_ASSIGNMENT")
      case ._ACTION_REQUEST_ASSIGNMENT(let selectValue): 
        result = eACTION_REQUEST_ASSIGNMENT.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\ACTION_REQUEST_ASSIGNMENT")
      case ._APPROVAL_ASSIGNMENT(let selectValue): 
        result = eAPPROVAL_ASSIGNMENT.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\APPROVAL_ASSIGNMENT")
      case ._APPROVAL_DATE_TIME(let selectValue): 
        result = eAPPROVAL_DATE_TIME.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\APPROVAL_DATE_TIME")
      case ._CERTIFICATION_ASSIGNMENT(let selectValue): 
        result = eCERTIFICATION_ASSIGNMENT.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\CERTIFICATION_ASSIGNMENT")
      case ._CONTRACT_ASSIGNMENT(let selectValue): 
        result = eCONTRACT_ASSIGNMENT.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\CONTRACT_ASSIGNMENT")
      case ._DIRECTED_ACTION_ASSIGNMENT(let selectValue): 
        result = eDIRECTED_ACTION_ASSIGNMENT.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\DIRECTED_ACTION_ASSIGNMENT")
      case ._DOCUMENT_REFERENCE(let selectValue): 
        result = eDOCUMENT_REFERENCE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\DOCUMENT_REFERENCE")
      case ._EFFECTIVITY_ASSIGNMENT(let selectValue): 
        result = eEFFECTIVITY_ASSIGNMENT.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\EFFECTIVITY_ASSIGNMENT")
      case ._GROUP_ASSIGNMENT(let selectValue): 
        result = eGROUP_ASSIGNMENT.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\GROUP_ASSIGNMENT")
      case ._NAME_ASSIGNMENT(let selectValue): 
        result = eNAME_ASSIGNMENT.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\NAME_ASSIGNMENT")
      case ._SECURITY_CLASSIFICATION_ASSIGNMENT(let selectValue): 
        result = eSECURITY_CLASSIFICATION_ASSIGNMENT.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\SECURITY_CLASSIFICATION_ASSIGNMENT")
      case nil: break
      }

      return result
    }

  }

}


//MARK: - SELECT TYPE HIERARCHY
public protocol AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sROLE_SELECT__type: SDAISelectType {

  //MARK: GROUP REFERENCES
  var super_eEFFECTIVITY_ASSIGNMENT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEFFECTIVITY_ASSIGNMENT? { get }
  var super_eGROUP_ASSIGNMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGROUP_ASSIGNMENT? { get }
  var super_eCONTRACT_ASSIGNMENT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONTRACT_ASSIGNMENT? { get }
  var super_eACTION_REQUEST_ASSIGNMENT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION_REQUEST_ASSIGNMENT? { get }
  var super_eSECURITY_CLASSIFICATION_ASSIGNMENT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSECURITY_CLASSIFICATION_ASSIGNMENT? { get }
  var super_eDIRECTED_ACTION_ASSIGNMENT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDIRECTED_ACTION_ASSIGNMENT? { get }
  var super_eNAME_ASSIGNMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eNAME_ASSIGNMENT? { get }
  var super_eACTION_ASSIGNMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION_ASSIGNMENT? { get }
  var super_eAPPROVAL_ASSIGNMENT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eAPPROVAL_ASSIGNMENT? { get }
  var super_eDOCUMENT_REFERENCE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDOCUMENT_REFERENCE? { get }
  var super_eCERTIFICATION_ASSIGNMENT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCERTIFICATION_ASSIGNMENT? { get }
  var super_eAPPROVAL_DATE_TIME: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eAPPROVAL_DATE_TIME? { get }

  //MARK: ENTITY ATTRIBUTE REFERENCES
  var ASSIGNED_SECURITY_CLASSIFICATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSECURITY_CLASSIFICATION?  { get }
  var DATE_TIME: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sDATE_TIME_SELECT?  { get }
  var ASSIGNED_DIRECTED_ACTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDIRECTED_ACTION?  { get }
  var ROLE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eOBJECT_ROLE?  { get }
  var PRODUCT_GROUP_ATTRIBUTES: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_GROUP_ATTRIBUTES>/*[1:1]*/ )?  { get }
  var ASSIGNED_APPROVAL: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eAPPROVAL?  { get }
  var ASSIGNED_NAME: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { get }
  var ITEMS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sACTION_REQUEST_ITEM>/*[1:nil]*/ )?  { get }
  var SPECIFIED_ITEMS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sSPECIFIED_ITEM>/*[1:nil]*/ )?  { get }
  var OF_SHAPE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMATED_PART_RELATIONSHIP?  { get }
  var DATED_APPROVAL: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eAPPROVAL?  { get }
  var ATTRIBUTES: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sATTRIBUTE_SELECT>/*[1:1]*/ )?  { get }
  var ASSIGNED_CERTIFICATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCERTIFICATION?  { get }
  var ASSIGNED_ACTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION?  { get }
  var ASSIGNED_ACTION_REQUEST: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eVERSIONED_ACTION_REQUEST?  { get }
  var MEMBER: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sPRODUCT_SELECT?  { get }
  var ASSIGNED_CONTRACT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONTRACT?  { get }
  var SOURCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { get }
  var ASSIGNED_EFFECTIVITY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEFFECTIVITY?  { get }
  var ASSIGNED_DOCUMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDOCUMENT?  { get }
  var ASSIGNED_GROUP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGROUP?  { get }
  var DEFINITION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMATED_PART_RELATIONSHIP?  { get }
}

public protocol AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sROLE_SELECT__subtype: 
  AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sROLE_SELECT__type, SDAIDefinedType
where Supertype: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sROLE_SELECT__type
{}

public extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sROLE_SELECT__subtype {
  //MARK: CONSTRUCTORS
  init?(possiblyFrom complex: SDAI.ComplexEntity?) {
    self.init(fundamental: FundamentalType(possiblyFrom: complex))
  }

  init?<T: SDAIUnderlyingType>(possiblyFrom underlyingType: T?) {
    self.init(fundamental: FundamentalType(possiblyFrom: underlyingType))
  }

  init?<G: SDAIGenericType>(fromGeneric generic: G?) {
    self.init(fundamental: FundamentalType.convert(fromGeneric: generic))
  }

  //MARK: GROUP REFERENCES
  var super_eEFFECTIVITY_ASSIGNMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEFFECTIVITY_ASSIGNMENT? { rep.super_eEFFECTIVITY_ASSIGNMENT }
  var super_eGROUP_ASSIGNMENT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGROUP_ASSIGNMENT? { rep.super_eGROUP_ASSIGNMENT }
  var super_eCONTRACT_ASSIGNMENT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONTRACT_ASSIGNMENT? { rep.super_eCONTRACT_ASSIGNMENT }
  var super_eACTION_REQUEST_ASSIGNMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION_REQUEST_ASSIGNMENT? { rep.super_eACTION_REQUEST_ASSIGNMENT }
  var super_eSECURITY_CLASSIFICATION_ASSIGNMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSECURITY_CLASSIFICATION_ASSIGNMENT? { rep.super_eSECURITY_CLASSIFICATION_ASSIGNMENT }
  var super_eDIRECTED_ACTION_ASSIGNMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDIRECTED_ACTION_ASSIGNMENT? { rep.super_eDIRECTED_ACTION_ASSIGNMENT }
  var super_eNAME_ASSIGNMENT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eNAME_ASSIGNMENT? { rep.super_eNAME_ASSIGNMENT }
  var super_eACTION_ASSIGNMENT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION_ASSIGNMENT? { rep.super_eACTION_ASSIGNMENT }
  var super_eAPPROVAL_ASSIGNMENT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eAPPROVAL_ASSIGNMENT? { rep.super_eAPPROVAL_ASSIGNMENT }
  var super_eDOCUMENT_REFERENCE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDOCUMENT_REFERENCE? { rep.super_eDOCUMENT_REFERENCE }
  var super_eCERTIFICATION_ASSIGNMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCERTIFICATION_ASSIGNMENT? { rep.super_eCERTIFICATION_ASSIGNMENT }
  var super_eAPPROVAL_DATE_TIME: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eAPPROVAL_DATE_TIME? { rep.super_eAPPROVAL_DATE_TIME }

  //MARK: ENTITY ATTRIBUTE REFERENCES
  var ASSIGNED_SECURITY_CLASSIFICATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSECURITY_CLASSIFICATION?  { rep.ASSIGNED_SECURITY_CLASSIFICATION }
  var DATE_TIME: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sDATE_TIME_SELECT?  { rep.DATE_TIME }
  var ASSIGNED_DIRECTED_ACTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDIRECTED_ACTION?  { rep.ASSIGNED_DIRECTED_ACTION }
  var ROLE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eOBJECT_ROLE?  { rep.ROLE }
  var PRODUCT_GROUP_ATTRIBUTES: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_GROUP_ATTRIBUTES>/*[1:1]*/ )?  { rep.PRODUCT_GROUP_ATTRIBUTES }
  var ASSIGNED_APPROVAL: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eAPPROVAL?  { rep.ASSIGNED_APPROVAL }
  var ASSIGNED_NAME: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { rep.ASSIGNED_NAME }
  var ITEMS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sACTION_REQUEST_ITEM>/*[1:nil]*/ )?  { rep.ITEMS }
  var SPECIFIED_ITEMS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sSPECIFIED_ITEM>/*[1:nil]*/ )?  { rep.SPECIFIED_ITEMS }
  var OF_SHAPE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMATED_PART_RELATIONSHIP?  { rep.OF_SHAPE }
  var DATED_APPROVAL: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eAPPROVAL?  { rep.DATED_APPROVAL }
  var ATTRIBUTES: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sATTRIBUTE_SELECT>/*[1:1]*/ )?  { rep.ATTRIBUTES }
  var ASSIGNED_CERTIFICATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCERTIFICATION?  { rep.ASSIGNED_CERTIFICATION }
  var ASSIGNED_ACTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION?  { rep.ASSIGNED_ACTION }
  var ASSIGNED_ACTION_REQUEST: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eVERSIONED_ACTION_REQUEST?  { rep.ASSIGNED_ACTION_REQUEST }
  var MEMBER: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sPRODUCT_SELECT?  { rep.MEMBER }
  var ASSIGNED_CONTRACT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONTRACT?  { rep.ASSIGNED_CONTRACT }
  var SOURCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { rep.SOURCE }
  var ASSIGNED_EFFECTIVITY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEFFECTIVITY?  { rep.ASSIGNED_EFFECTIVITY }
  var ASSIGNED_DOCUMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDOCUMENT?  { rep.ASSIGNED_DOCUMENT }
  var ASSIGNED_GROUP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGROUP?  { rep.ASSIGNED_GROUP }
  var DEFINITION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMATED_PART_RELATIONSHIP?  { rep.DEFINITION }
}

