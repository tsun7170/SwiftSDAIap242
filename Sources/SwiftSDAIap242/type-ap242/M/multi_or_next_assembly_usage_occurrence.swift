/* file: multi_or_next_assembly_usage_occurrence.swift 	 generated: Sat Aug 14 13:46:02 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -TYPE DEFINITION in EXPRESS
/*
  TYPE multi_or_next_assembly_usage_occurrence = SELECT
    ( multi_level_reference_designator (*ENTITY*),
     next_assembly_usage_occurrence (*ENTITY*) );
  END_TYPE; -- multi_or_next_assembly_usage_occurrence (line:4463 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES FOR SELECT
/*
  multi_level_reference_designator (*ENTITY*):
  ATTR:  description: text
  ATTR:  leaf: product_definition_or_reference
  ATTR:  reference_designator: identifier
  ATTR:  root: product_definition
  ATTR:  relating_product_definition: product_definition *** Multiple Select Case Sources ***
  ATTR:  id: identifier
  ATTR:  location: LIST [1 : ?] OF UNIQUE next_assembly_usage_occurrence
  ATTR:  related_product_definition: product_definition_or_reference *** Multiple Select Case Sources ***
  ATTR:  name: label

  next_assembly_usage_occurrence (*ENTITY*):
  ATTR:  description: text
  ATTR:  reference_designator: identifier
  ATTR:  relating_product_definition: product_definition_or_reference *** Multiple Select Case Sources ***
  ATTR:  id: identifier
  ATTR:  product_definition_occurrence_id: identifier
  ATTR:  related_product_definition: product_definition_or_reference *** Multiple Select Case Sources ***
  ATTR:  name: label

*/

/** SELECT type
- EXPRESS:
```express
  TYPE multi_or_next_assembly_usage_occurrence = SELECT
    ( multi_level_reference_designator (*ENTITY*),
     next_assembly_usage_occurrence (*ENTITY*) );
  END_TYPE; -- multi_or_next_assembly_usage_occurrence (line:4463 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public enum sMULTI_OR_NEXT_ASSEMBLY_USAGE_OCCURRENCE : SDAIValue, AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sMULTI_OR_NEXT_ASSEMBLY_USAGE_OCCURRENCE__type {

    /// SELECT case ``eMULTI_LEVEL_REFERENCE_DESIGNATOR`` (ENTITY) in ``sMULTI_OR_NEXT_ASSEMBLY_USAGE_OCCURRENCE``
    case _MULTI_LEVEL_REFERENCE_DESIGNATOR(eMULTI_LEVEL_REFERENCE_DESIGNATOR)	// (ENTITY)

    /// SELECT case ``eNEXT_ASSEMBLY_USAGE_OCCURRENCE`` (ENTITY) in ``sMULTI_OR_NEXT_ASSEMBLY_USAGE_OCCURRENCE``
    case _NEXT_ASSEMBLY_USAGE_OCCURRENCE(eNEXT_ASSEMBLY_USAGE_OCCURRENCE)	// (ENTITY)

    //MARK: - CONSTRUCTORS
    public init(fundamental: FundamentalType) { self = fundamental }

    public init?<T: SDAIUnderlyingType>(possiblyFrom underlyingType: T?){
      return nil
    }

    public init?(possiblyFrom complex: SDAI.ComplexEntity?) {
      guard let complex = complex else { return nil }

      if let base = complex.entityReference(eMULTI_LEVEL_REFERENCE_DESIGNATOR.self) {self = ._MULTI_LEVEL_REFERENCE_DESIGNATOR(base) }
      else if let base = complex.entityReference(eNEXT_ASSEMBLY_USAGE_OCCURRENCE.self) {self = ._NEXT_ASSEMBLY_USAGE_OCCURRENCE(base) }
      else { return nil }
    }

    public init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let select = generic else { return nil }

      if let fundamental = select as? Self {
        self.init(fundamental: fundamental)
      }
      else if let base = eMULTI_LEVEL_REFERENCE_DESIGNATOR.convert(fromGeneric: select) {
        self = ._MULTI_LEVEL_REFERENCE_DESIGNATOR(base)
      }
      else if let base = eNEXT_ASSEMBLY_USAGE_OCCURRENCE.convert(fromGeneric: select) {
        self = ._NEXT_ASSEMBLY_USAGE_OCCURRENCE(base)
      }
      else { return nil }
    }

    // InitializableByP21Parameter
    public static var bareTypeName: String = "MULTI_OR_NEXT_ASSEMBLY_USAGE_OCCURRENCE"

    public init?(p21typedParam: P21Decode.ExchangeStructure.TypedParameter, from exchangeStructure: P21Decode.ExchangeStructure) {
      guard let keyword = p21typedParam.keyword.asStandardKeyword else { exchangeStructure.error = "unexpected p21parameter(\(p21typedParam)) while resolving \(Self.bareTypeName) select value"; return nil }

      switch(keyword) {
      default:
        exchangeStructure.error = "unexpected p21parameter(\(p21typedParam)) while resolving \(Self.bareTypeName) select value"
        return nil
      }
    }

    public init?(p21untypedParam: P21Decode.ExchangeStructure.UntypedParameter, from exchangeStructure: P21Decode.ExchangeStructure) {
      switch p21untypedParam {
      case .rhsOccurenceName(let rhsname):
        switch rhsname {
        case .constantEntityName(let name):
          guard let entity = exchangeStructure.resolve(constantEntityName: name) else {exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) instance"); return nil }
          self.init(possiblyFrom: entity.complexEntity)

        case .entityInstanceName(let name):
          guard let complex = exchangeStructure.resolve(entityInstanceName: name) else {exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) instance"); return nil }
          self.init(possiblyFrom: complex)

        default:
          exchangeStructure.error = "unexpected p21parameter(\(p21untypedParam)) while resolving \(Self.bareTypeName) select instance"
          return nil
        }

      default:
        exchangeStructure.error = "unexpected p21parameter(\(p21untypedParam)) while resolving \(Self.bareTypeName) select instance"
        return nil
      }
    }

    public init?(p21omittedParamfrom exchangeStructure: P21Decode.ExchangeStructure) {
      return nil
    }


    //MARK: - ENTITY UNDERLYING TYPE REFERENCES
    public var super_ePRODUCT_DEFINITION_USAGE: ePRODUCT_DEFINITION_USAGE? {
      switch self {
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let entity): return entity.super_ePRODUCT_DEFINITION_USAGE
      case ._NEXT_ASSEMBLY_USAGE_OCCURRENCE(let entity): return entity.super_ePRODUCT_DEFINITION_USAGE
      }
    }

    public var super_eNEXT_ASSEMBLY_USAGE_OCCURRENCE: eNEXT_ASSEMBLY_USAGE_OCCURRENCE? {
      switch self {
      case ._NEXT_ASSEMBLY_USAGE_OCCURRENCE(let entity): return entity
      default: return nil
      }
    }

    public var super_eASSEMBLY_COMPONENT_USAGE: eASSEMBLY_COMPONENT_USAGE? {
      switch self {
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let entity): return entity.super_eASSEMBLY_COMPONENT_USAGE
      case ._NEXT_ASSEMBLY_USAGE_OCCURRENCE(let entity): return entity.super_eASSEMBLY_COMPONENT_USAGE
      }
    }

    public var super_eMULTI_LEVEL_REFERENCE_DESIGNATOR: eMULTI_LEVEL_REFERENCE_DESIGNATOR? {
      switch self {
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let entity): return entity
      default: return nil
      }
    }

    public var super_ePRODUCT_DEFINITION_RELATIONSHIP: ePRODUCT_DEFINITION_RELATIONSHIP? {
      switch self {
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let entity): return entity
        .super_ePRODUCT_DEFINITION_RELATIONSHIP
      case ._NEXT_ASSEMBLY_USAGE_OCCURRENCE(let entity): return entity.super_ePRODUCT_DEFINITION_RELATIONSHIP
      }
    }


    //MARK: - ENTITY ATTRIBUTE REFERENCES
    /// attribute of SELECT type ``sMULTI_OR_NEXT_ASSEMBLY_USAGE_OCCURRENCE``
    /// - origin: ENTITY( ``eMULTI_LEVEL_REFERENCE_DESIGNATOR`` )
    /// - origin: ENTITY( ``eNEXT_ASSEMBLY_USAGE_OCCURRENCE`` )
    public var DESCRIPTION: tTEXT?  {
      switch self {
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let entity): return entity.DESCRIPTION
      case ._NEXT_ASSEMBLY_USAGE_OCCURRENCE(let entity): return entity.DESCRIPTION
      }
    }

    /// attribute of SELECT type ``sMULTI_OR_NEXT_ASSEMBLY_USAGE_OCCURRENCE``
    /// - origin: ENTITY( ``eMULTI_LEVEL_REFERENCE_DESIGNATOR`` )
    public var LEAF: sPRODUCT_DEFINITION_OR_REFERENCE?  {
      switch self {
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let entity): return entity.LEAF
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMULTI_OR_NEXT_ASSEMBLY_USAGE_OCCURRENCE``
    /// - origin: ENTITY( ``eMULTI_LEVEL_REFERENCE_DESIGNATOR`` )
    /// - origin: ENTITY( ``eNEXT_ASSEMBLY_USAGE_OCCURRENCE`` )
    public var REFERENCE_DESIGNATOR: tIDENTIFIER?  {
      switch self {
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let entity): return entity.REFERENCE_DESIGNATOR
      case ._NEXT_ASSEMBLY_USAGE_OCCURRENCE(let entity): return entity.REFERENCE_DESIGNATOR
      }
    }

    /// attribute of SELECT type ``sMULTI_OR_NEXT_ASSEMBLY_USAGE_OCCURRENCE``
    /// - origin: ENTITY( ``eMULTI_LEVEL_REFERENCE_DESIGNATOR`` )
    public var ROOT: ePRODUCT_DEFINITION?  {
      switch self {
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let entity): return entity.ROOT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMULTI_OR_NEXT_ASSEMBLY_USAGE_OCCURRENCE``
    /// - origin: ENTITY( ``eMULTI_LEVEL_REFERENCE_DESIGNATOR`` )
    /// - origin: ENTITY( ``eNEXT_ASSEMBLY_USAGE_OCCURRENCE`` )
    public var RELATING_PRODUCT_DEFINITION: sPRODUCT_DEFINITION_OR_REFERENCE?  {
      switch self {
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let entity): return sPRODUCT_DEFINITION_OR_REFERENCE(
        entity.RELATING_PRODUCT_DEFINITION)
      case ._NEXT_ASSEMBLY_USAGE_OCCURRENCE(let entity): return entity.RELATING_PRODUCT_DEFINITION
      }
    }

    /// attribute of SELECT type ``sMULTI_OR_NEXT_ASSEMBLY_USAGE_OCCURRENCE``
    /// - origin: ENTITY( ``eMULTI_LEVEL_REFERENCE_DESIGNATOR`` )
    /// - origin: ENTITY( ``eNEXT_ASSEMBLY_USAGE_OCCURRENCE`` )
    public var ID: tIDENTIFIER?  {
      switch self {
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let entity): return entity.ID
      case ._NEXT_ASSEMBLY_USAGE_OCCURRENCE(let entity): return entity.ID
      }
    }

    /// attribute of SELECT type ``sMULTI_OR_NEXT_ASSEMBLY_USAGE_OCCURRENCE``
    /// - origin: ENTITY( ``eNEXT_ASSEMBLY_USAGE_OCCURRENCE`` )
    public var PRODUCT_DEFINITION_OCCURRENCE_ID: tIDENTIFIER?  {
      switch self {
      case ._NEXT_ASSEMBLY_USAGE_OCCURRENCE(let entity): return entity.PRODUCT_DEFINITION_OCCURRENCE_ID
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMULTI_OR_NEXT_ASSEMBLY_USAGE_OCCURRENCE``
    /// - origin: ENTITY( ``eMULTI_LEVEL_REFERENCE_DESIGNATOR`` )
    public var LOCATION: (SDAI.LIST_UNIQUE<eNEXT_ASSEMBLY_USAGE_OCCURRENCE>/*[1:nil]*/ )?  {
      switch self {
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let entity): return entity.LOCATION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMULTI_OR_NEXT_ASSEMBLY_USAGE_OCCURRENCE``
    /// - origin: ENTITY( ``eMULTI_LEVEL_REFERENCE_DESIGNATOR`` )
    /// - origin: ENTITY( ``eNEXT_ASSEMBLY_USAGE_OCCURRENCE`` )
    public var RELATED_PRODUCT_DEFINITION: sPRODUCT_DEFINITION_OR_REFERENCE?  {
      switch self {
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let entity): return entity.RELATED_PRODUCT_DEFINITION
      case ._NEXT_ASSEMBLY_USAGE_OCCURRENCE(let entity): return entity.RELATED_PRODUCT_DEFINITION
      }
    }

    /// attribute of SELECT type ``sMULTI_OR_NEXT_ASSEMBLY_USAGE_OCCURRENCE``
    /// - origin: ENTITY( ``eMULTI_LEVEL_REFERENCE_DESIGNATOR`` )
    /// - origin: ENTITY( ``eNEXT_ASSEMBLY_USAGE_OCCURRENCE`` )
    public var NAME: tLABEL?  {
      switch self {
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let entity): return entity.NAME
      case ._NEXT_ASSEMBLY_USAGE_OCCURRENCE(let entity): return entity.NAME
      }
    }


    //MARK: - SDAIValue
    public func isValueEqual<T: SDAIValue>(to rhs: T) -> Bool {
      switch self {
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let selection): return selection.value.isValueEqual(to: rhs)
      case ._NEXT_ASSEMBLY_USAGE_OCCURRENCE(let selection): return selection.value.isValueEqual(to: rhs)
      }
    }

    public func isValueEqualOptionally<T: SDAIValue>(to rhs: T?) -> Bool? {
      switch self {
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._NEXT_ASSEMBLY_USAGE_OCCURRENCE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      }
    }

    public func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      switch self {
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._NEXT_ASSEMBLY_USAGE_OCCURRENCE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      }
    }

    public func isValueEqual<T: SDAIValue>(to rhs: T, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      switch self {
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._NEXT_ASSEMBLY_USAGE_OCCURRENCE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      }
    }

    public func isValueEqualOptionally<T: SDAIValue>(to rhs: T?, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      switch self {
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._NEXT_ASSEMBLY_USAGE_OCCURRENCE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      }
    }


    //MARK: SDAIGenericTypeBase
    public func copy() -> Self {
      switch self {
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let selection): return ._MULTI_LEVEL_REFERENCE_DESIGNATOR(selection.copy())
      case ._NEXT_ASSEMBLY_USAGE_OCCURRENCE(let selection): return ._NEXT_ASSEMBLY_USAGE_OCCURRENCE(selection.copy())
      }
    }

    //MARK: SDAIGenericType
    public var typeMembers: Set<SDAI.STRING> {
      var members: Set<SDAI.STRING> = [SDAI.STRING(Self.typeName)]
      switch self {
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let selection): members.formUnion(selection.typeMembers)
      case ._NEXT_ASSEMBLY_USAGE_OCCURRENCE(let selection): members.formUnion(selection.typeMembers)
      }
      return members
    }

    public var entityReference: SDAI.EntityReference? {
      switch self {
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let selection): return selection.entityReference
      case ._NEXT_ASSEMBLY_USAGE_OCCURRENCE(let selection): return selection.entityReference
      }
    }
    public var stringValue: SDAI.STRING? {
      switch self {
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let selection): return selection.stringValue
      case ._NEXT_ASSEMBLY_USAGE_OCCURRENCE(let selection): return selection.stringValue
      }
    }
    public var binaryValue: SDAI.BINARY? {
      switch self {
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let selection): return selection.binaryValue
      case ._NEXT_ASSEMBLY_USAGE_OCCURRENCE(let selection): return selection.binaryValue
      }
    }
    public var logicalValue: SDAI.LOGICAL? {
      switch self {
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let selection): return selection.logicalValue
      case ._NEXT_ASSEMBLY_USAGE_OCCURRENCE(let selection): return selection.logicalValue
      }
    }
    public var booleanValue: SDAI.BOOLEAN? {
      switch self {
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let selection): return selection.booleanValue
      case ._NEXT_ASSEMBLY_USAGE_OCCURRENCE(let selection): return selection.booleanValue
      }
    }
    public var numberValue: SDAI.NUMBER? {
      switch self {
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let selection): return selection.numberValue
      case ._NEXT_ASSEMBLY_USAGE_OCCURRENCE(let selection): return selection.numberValue
      }
    }
    public var realValue: SDAI.REAL? {
      switch self {
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let selection): return selection.realValue
      case ._NEXT_ASSEMBLY_USAGE_OCCURRENCE(let selection): return selection.realValue
      }
    }
    public var integerValue: SDAI.INTEGER? {
      switch self {
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let selection): return selection.integerValue
      case ._NEXT_ASSEMBLY_USAGE_OCCURRENCE(let selection): return selection.integerValue
      }
    }
    public var genericEnumValue: SDAI.GenericEnumValue? {
      switch self {
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let selection): return selection.genericEnumValue
      case ._NEXT_ASSEMBLY_USAGE_OCCURRENCE(let selection): return selection.genericEnumValue
      }
    }
    public func arrayOptionalValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.ARRAY_OPTIONAL<ELEM>? {
      switch self {
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._NEXT_ASSEMBLY_USAGE_OCCURRENCE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      }
    }
    public func arrayValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.ARRAY<ELEM>? {
      switch self {
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let selection): return selection.arrayValue(elementType:elementType)
      case ._NEXT_ASSEMBLY_USAGE_OCCURRENCE(let selection): return selection.arrayValue(elementType:elementType)
      }
    }
    public func listValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.LIST<ELEM>? {
      switch self {
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let selection): return selection.listValue(elementType:elementType)
      case ._NEXT_ASSEMBLY_USAGE_OCCURRENCE(let selection): return selection.listValue(elementType:elementType)
      }
    }
    public func bagValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.BAG<ELEM>? {
      switch self {
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let selection): return selection.bagValue(elementType:elementType)
      case ._NEXT_ASSEMBLY_USAGE_OCCURRENCE(let selection): return selection.bagValue(elementType:elementType)
      }
    }
    public func setValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.SET<ELEM>? {
      switch self {
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let selection): return selection.setValue(elementType:elementType)
      case ._NEXT_ASSEMBLY_USAGE_OCCURRENCE(let selection): return selection.setValue(elementType:elementType)
      }
    }
    public func enumValue<ENUM:SDAIEnumerationType>(enumType:ENUM.Type) -> ENUM? {
      switch self {
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let selection): return selection.enumValue(enumType:enumType)
      case ._NEXT_ASSEMBLY_USAGE_OCCURRENCE(let selection): return selection.enumValue(enumType:enumType)
      }
    }

    //MARK: SDAIUnderlyingType
    public typealias FundamentalType = Self
    public static var typeName: String = 
      "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.MULTI_OR_NEXT_ASSEMBLY_USAGE_OCCURRENCE"
    public var asFundamentalType: FundamentalType { return self }

    //MARK: SDAIObservableAggregateElement
    public var entityReferences: AnySequence<SDAI.EntityReference> {
      switch self {
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let entity): return entity.entityReferences
      case ._NEXT_ASSEMBLY_USAGE_OCCURRENCE(let entity): return entity.entityReferences
      }
    }

    public mutating func configure(with observer: SDAI.EntityReferenceObserver) {
      switch self {
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let entity): 
        entity.configure(with: observer)
        self = ._MULTI_LEVEL_REFERENCE_DESIGNATOR(entity)
      case ._NEXT_ASSEMBLY_USAGE_OCCURRENCE(let entity): 
        entity.configure(with: observer)
        self = ._NEXT_ASSEMBLY_USAGE_OCCURRENCE(entity)
      }
    }

    public mutating func teardownObserver() {
      switch self {
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let entity): 
        entity.teardownObserver()
        self = ._MULTI_LEVEL_REFERENCE_DESIGNATOR(entity)
      case ._NEXT_ASSEMBLY_USAGE_OCCURRENCE(let entity): 
        entity.teardownObserver()
        self = ._NEXT_ASSEMBLY_USAGE_OCCURRENCE(entity)
      }
    }

    //MARK: SDAIAggregationBehavior
    public var aggregationHiBound: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationHiIndex: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationLoBound: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationLoIndex: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationSize: Int? {
      switch self {
      default: return nil
      }
    }

    //MARK: WHERE RULE VALIDATION (SELECT TYPE)
    public static func validateWhereRules(instance:Self?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      var result: [SDAI.WhereLabel:SDAI.LOGICAL] = [:]
      switch instance {
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let selectValue): 
        result = eMULTI_LEVEL_REFERENCE_DESIGNATOR.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\MULTI_LEVEL_REFERENCE_DESIGNATOR")
      case ._NEXT_ASSEMBLY_USAGE_OCCURRENCE(let selectValue): 
        result = eNEXT_ASSEMBLY_USAGE_OCCURRENCE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\NEXT_ASSEMBLY_USAGE_OCCURRENCE")
      case nil: break
      }

      return result
    }

  }

}


//MARK: - SELECT TYPE HIERARCHY
public protocol AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sMULTI_OR_NEXT_ASSEMBLY_USAGE_OCCURRENCE__type: 
  SDAISelectType {

  //MARK: GROUP REFERENCES
  var super_ePRODUCT_DEFINITION_USAGE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_USAGE? { get }
  var super_eNEXT_ASSEMBLY_USAGE_OCCURRENCE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eNEXT_ASSEMBLY_USAGE_OCCURRENCE? { get }
  var super_eASSEMBLY_COMPONENT_USAGE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eASSEMBLY_COMPONENT_USAGE? { get }
  var super_eMULTI_LEVEL_REFERENCE_DESIGNATOR: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMULTI_LEVEL_REFERENCE_DESIGNATOR? { get }
  var super_ePRODUCT_DEFINITION_RELATIONSHIP: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_RELATIONSHIP? { get }

  //MARK: ENTITY ATTRIBUTE REFERENCES
  var DESCRIPTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT?  { get }
  var LEAF: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sPRODUCT_DEFINITION_OR_REFERENCE?  { get }
  var REFERENCE_DESIGNATOR: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { get }
  var ROOT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION?  { get }
  var RELATING_PRODUCT_DEFINITION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sPRODUCT_DEFINITION_OR_REFERENCE?  { get }
  var ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { get }
  var PRODUCT_DEFINITION_OCCURRENCE_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { get }
  var LOCATION: (SDAI.LIST_UNIQUE<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eNEXT_ASSEMBLY_USAGE_OCCURRENCE>/*[1:nil]*/ )?  { get }
  var RELATED_PRODUCT_DEFINITION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sPRODUCT_DEFINITION_OR_REFERENCE?  { get }
  var NAME: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { get }
}

public protocol AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sMULTI_OR_NEXT_ASSEMBLY_USAGE_OCCURRENCE__subtype: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sMULTI_OR_NEXT_ASSEMBLY_USAGE_OCCURRENCE__type, SDAIDefinedType
where Supertype: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sMULTI_OR_NEXT_ASSEMBLY_USAGE_OCCURRENCE__type
{}

public extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sMULTI_OR_NEXT_ASSEMBLY_USAGE_OCCURRENCE__subtype {
  //MARK: CONSTRUCTORS
  init?(possiblyFrom complex: SDAI.ComplexEntity?) {
    self.init(fundamental: FundamentalType(possiblyFrom: complex))
  }

  init?<T: SDAIUnderlyingType>(possiblyFrom underlyingType: T?) {
    self.init(fundamental: FundamentalType(possiblyFrom: underlyingType))
  }

  init?<G: SDAIGenericType>(fromGeneric generic: G?) {
    self.init(fundamental: FundamentalType.convert(fromGeneric: generic))
  }

  //MARK: GROUP REFERENCES
  var super_ePRODUCT_DEFINITION_USAGE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_USAGE? { rep.super_ePRODUCT_DEFINITION_USAGE }
  var super_eNEXT_ASSEMBLY_USAGE_OCCURRENCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eNEXT_ASSEMBLY_USAGE_OCCURRENCE? { rep.super_eNEXT_ASSEMBLY_USAGE_OCCURRENCE }
  var super_eASSEMBLY_COMPONENT_USAGE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eASSEMBLY_COMPONENT_USAGE? { rep.super_eASSEMBLY_COMPONENT_USAGE }
  var super_eMULTI_LEVEL_REFERENCE_DESIGNATOR: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMULTI_LEVEL_REFERENCE_DESIGNATOR? { rep.super_eMULTI_LEVEL_REFERENCE_DESIGNATOR }
  var super_ePRODUCT_DEFINITION_RELATIONSHIP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_RELATIONSHIP? { rep.super_ePRODUCT_DEFINITION_RELATIONSHIP }

  //MARK: ENTITY ATTRIBUTE REFERENCES
  var DESCRIPTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT?  { rep.DESCRIPTION }
  var LEAF: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sPRODUCT_DEFINITION_OR_REFERENCE?  { rep.LEAF }
  var REFERENCE_DESIGNATOR: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { rep.REFERENCE_DESIGNATOR }
  var ROOT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION?  { rep.ROOT }
  var RELATING_PRODUCT_DEFINITION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sPRODUCT_DEFINITION_OR_REFERENCE?  { rep.RELATING_PRODUCT_DEFINITION }
  var ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { rep.ID }
  var PRODUCT_DEFINITION_OCCURRENCE_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { rep.PRODUCT_DEFINITION_OCCURRENCE_ID }
  var LOCATION: (SDAI.LIST_UNIQUE<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eNEXT_ASSEMBLY_USAGE_OCCURRENCE>/*[1:nil]*/ )?  { rep.LOCATION }
  var RELATED_PRODUCT_DEFINITION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sPRODUCT_DEFINITION_OR_REFERENCE?  { rep.RELATED_PRODUCT_DEFINITION }
  var NAME: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { rep.NAME }
}

