/* file: measure_value.swift 	 generated: Sat Aug 14 13:46:02 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -TYPE DEFINITION in EXPRESS
/*
  TYPE measure_value = SELECT
    ( absorbed_dose_measure (*TYPE*),
     acceleration_measure (*TYPE*),
     amount_of_substance_measure (*TYPE*),
     area_measure (*TYPE*),
     capacitance_measure (*TYPE*),
     celsius_temperature_measure (*TYPE*),
     conductance_measure (*TYPE*),
     context_dependent_measure (*TYPE*),
     count_measure (*TYPE*),
     descriptive_measure (*TYPE*),
     dose_equivalent_measure (*TYPE*),
     electric_charge_measure (*TYPE*),
     electric_current_measure (*TYPE*),
     electric_potential_measure (*TYPE*),
     energy_measure (*TYPE*),
     force_measure (*TYPE*),
     frequency_measure (*TYPE*),
     illuminance_measure (*TYPE*),
     inductance_measure (*TYPE*),
     length_measure (*TYPE*),
     luminous_flux_measure (*TYPE*),
     luminous_intensity_measure (*TYPE*),
     magnetic_flux_density_measure (*TYPE*),
     magnetic_flux_measure (*TYPE*),
     mass_measure (*TYPE*),
     non_negative_length_measure (*TYPE*),
     numeric_measure (*TYPE*),
     parameter_value (*TYPE*),
     plane_angle_measure (*TYPE*),
     positive_length_measure (*TYPE*),
     positive_plane_angle_measure (*TYPE*),
     positive_ratio_measure (*TYPE*),
     power_measure (*TYPE*),
     pressure_measure (*TYPE*),
     radioactivity_measure (*TYPE*),
     ratio_measure (*TYPE*),
     resistance_measure (*TYPE*),
     solid_angle_measure (*TYPE*),
     thermodynamic_temperature_measure (*TYPE*),
     time_measure (*TYPE*),
     velocity_measure (*TYPE*),
     volume_measure (*TYPE*) );
  END_TYPE; -- measure_value (line:4170 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES FOR SELECT
/*
  absorbed_dose_measure (*TYPE*): absorbed_dose_measure

  acceleration_measure (*TYPE*): acceleration_measure

  amount_of_substance_measure (*TYPE*): amount_of_substance_measure

  area_measure (*TYPE*): area_measure

  capacitance_measure (*TYPE*): capacitance_measure

  celsius_temperature_measure (*TYPE*): celsius_temperature_measure

  conductance_measure (*TYPE*): conductance_measure

  context_dependent_measure (*TYPE*): context_dependent_measure

  count_measure (*TYPE*): count_measure

  descriptive_measure (*TYPE*): descriptive_measure

  dose_equivalent_measure (*TYPE*): dose_equivalent_measure

  electric_charge_measure (*TYPE*): electric_charge_measure

  electric_current_measure (*TYPE*): electric_current_measure

  electric_potential_measure (*TYPE*): electric_potential_measure

  energy_measure (*TYPE*): energy_measure

  force_measure (*TYPE*): force_measure

  frequency_measure (*TYPE*): frequency_measure

  illuminance_measure (*TYPE*): illuminance_measure

  inductance_measure (*TYPE*): inductance_measure

  length_measure (*TYPE*): length_measure

  luminous_flux_measure (*TYPE*): luminous_flux_measure

  luminous_intensity_measure (*TYPE*): luminous_intensity_measure

  magnetic_flux_density_measure (*TYPE*): magnetic_flux_density_measure

  magnetic_flux_measure (*TYPE*): magnetic_flux_measure

  mass_measure (*TYPE*): mass_measure

  non_negative_length_measure (*TYPE*): non_negative_length_measure

  numeric_measure (*TYPE*): numeric_measure

  parameter_value (*TYPE*): parameter_value

  plane_angle_measure (*TYPE*): plane_angle_measure

  positive_length_measure (*TYPE*): positive_length_measure

  positive_plane_angle_measure (*TYPE*): positive_plane_angle_measure

  positive_ratio_measure (*TYPE*): positive_ratio_measure

  power_measure (*TYPE*): power_measure

  pressure_measure (*TYPE*): pressure_measure

  radioactivity_measure (*TYPE*): radioactivity_measure

  ratio_measure (*TYPE*): ratio_measure

  resistance_measure (*TYPE*): resistance_measure

  solid_angle_measure (*TYPE*): solid_angle_measure

  thermodynamic_temperature_measure (*TYPE*): thermodynamic_temperature_measure

  time_measure (*TYPE*): time_measure

  velocity_measure (*TYPE*): velocity_measure

  volume_measure (*TYPE*): volume_measure

*/

/** SELECT type
- EXPRESS:
```express
  TYPE measure_value = SELECT
    ( absorbed_dose_measure (*TYPE*),
     acceleration_measure (*TYPE*),
     amount_of_substance_measure (*TYPE*),
     area_measure (*TYPE*),
     capacitance_measure (*TYPE*),
     celsius_temperature_measure (*TYPE*),
     conductance_measure (*TYPE*),
     context_dependent_measure (*TYPE*),
     count_measure (*TYPE*),
     descriptive_measure (*TYPE*),
     dose_equivalent_measure (*TYPE*),
     electric_charge_measure (*TYPE*),
     electric_current_measure (*TYPE*),
     electric_potential_measure (*TYPE*),
     energy_measure (*TYPE*),
     force_measure (*TYPE*),
     frequency_measure (*TYPE*),
     illuminance_measure (*TYPE*),
     inductance_measure (*TYPE*),
     length_measure (*TYPE*),
     luminous_flux_measure (*TYPE*),
     luminous_intensity_measure (*TYPE*),
     magnetic_flux_density_measure (*TYPE*),
     magnetic_flux_measure (*TYPE*),
     mass_measure (*TYPE*),
     non_negative_length_measure (*TYPE*),
     numeric_measure (*TYPE*),
     parameter_value (*TYPE*),
     plane_angle_measure (*TYPE*),
     positive_length_measure (*TYPE*),
     positive_plane_angle_measure (*TYPE*),
     positive_ratio_measure (*TYPE*),
     power_measure (*TYPE*),
     pressure_measure (*TYPE*),
     radioactivity_measure (*TYPE*),
     ratio_measure (*TYPE*),
     resistance_measure (*TYPE*),
     solid_angle_measure (*TYPE*),
     thermodynamic_temperature_measure (*TYPE*),
     time_measure (*TYPE*),
     velocity_measure (*TYPE*),
     volume_measure (*TYPE*) );
  END_TYPE; -- measure_value (line:4170 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public enum sMEASURE_VALUE : SDAIValue, AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sMEASURE_VALUE__type {

    /// SELECT case ``tABSORBED_DOSE_MEASURE`` (TYPE) in ``sMEASURE_VALUE``
    case _ABSORBED_DOSE_MEASURE(tABSORBED_DOSE_MEASURE)	// (TYPE)

    /// SELECT case ``tACCELERATION_MEASURE`` (TYPE) in ``sMEASURE_VALUE``
    case _ACCELERATION_MEASURE(tACCELERATION_MEASURE)	// (TYPE)

    /// SELECT case ``tAMOUNT_OF_SUBSTANCE_MEASURE`` (TYPE) in ``sMEASURE_VALUE``
    case _AMOUNT_OF_SUBSTANCE_MEASURE(tAMOUNT_OF_SUBSTANCE_MEASURE)	// (TYPE)

    /// SELECT case ``tAREA_MEASURE`` (TYPE) in ``sMEASURE_VALUE``
    case _AREA_MEASURE(tAREA_MEASURE)	// (TYPE)

    /// SELECT case ``tCAPACITANCE_MEASURE`` (TYPE) in ``sMEASURE_VALUE``
    case _CAPACITANCE_MEASURE(tCAPACITANCE_MEASURE)	// (TYPE)

    /// SELECT case ``tCELSIUS_TEMPERATURE_MEASURE`` (TYPE) in ``sMEASURE_VALUE``
    case _CELSIUS_TEMPERATURE_MEASURE(tCELSIUS_TEMPERATURE_MEASURE)	// (TYPE)

    /// SELECT case ``tCONDUCTANCE_MEASURE`` (TYPE) in ``sMEASURE_VALUE``
    case _CONDUCTANCE_MEASURE(tCONDUCTANCE_MEASURE)	// (TYPE)

    /// SELECT case ``tCONTEXT_DEPENDENT_MEASURE`` (TYPE) in ``sMEASURE_VALUE``
    case _CONTEXT_DEPENDENT_MEASURE(tCONTEXT_DEPENDENT_MEASURE)	// (TYPE)

    /// SELECT case ``tCOUNT_MEASURE`` (TYPE) in ``sMEASURE_VALUE``
    case _COUNT_MEASURE(tCOUNT_MEASURE)	// (TYPE)

    /// SELECT case ``tDESCRIPTIVE_MEASURE`` (TYPE) in ``sMEASURE_VALUE``
    case _DESCRIPTIVE_MEASURE(tDESCRIPTIVE_MEASURE)	// (TYPE)

    /// SELECT case ``tDOSE_EQUIVALENT_MEASURE`` (TYPE) in ``sMEASURE_VALUE``
    case _DOSE_EQUIVALENT_MEASURE(tDOSE_EQUIVALENT_MEASURE)	// (TYPE)

    /// SELECT case ``tELECTRIC_CHARGE_MEASURE`` (TYPE) in ``sMEASURE_VALUE``
    case _ELECTRIC_CHARGE_MEASURE(tELECTRIC_CHARGE_MEASURE)	// (TYPE)

    /// SELECT case ``tELECTRIC_CURRENT_MEASURE`` (TYPE) in ``sMEASURE_VALUE``
    case _ELECTRIC_CURRENT_MEASURE(tELECTRIC_CURRENT_MEASURE)	// (TYPE)

    /// SELECT case ``tELECTRIC_POTENTIAL_MEASURE`` (TYPE) in ``sMEASURE_VALUE``
    case _ELECTRIC_POTENTIAL_MEASURE(tELECTRIC_POTENTIAL_MEASURE)	// (TYPE)

    /// SELECT case ``tENERGY_MEASURE`` (TYPE) in ``sMEASURE_VALUE``
    case _ENERGY_MEASURE(tENERGY_MEASURE)	// (TYPE)

    /// SELECT case ``tFORCE_MEASURE`` (TYPE) in ``sMEASURE_VALUE``
    case _FORCE_MEASURE(tFORCE_MEASURE)	// (TYPE)

    /// SELECT case ``tFREQUENCY_MEASURE`` (TYPE) in ``sMEASURE_VALUE``
    case _FREQUENCY_MEASURE(tFREQUENCY_MEASURE)	// (TYPE)

    /// SELECT case ``tILLUMINANCE_MEASURE`` (TYPE) in ``sMEASURE_VALUE``
    case _ILLUMINANCE_MEASURE(tILLUMINANCE_MEASURE)	// (TYPE)

    /// SELECT case ``tINDUCTANCE_MEASURE`` (TYPE) in ``sMEASURE_VALUE``
    case _INDUCTANCE_MEASURE(tINDUCTANCE_MEASURE)	// (TYPE)

    /// SELECT case ``tLENGTH_MEASURE`` (TYPE) in ``sMEASURE_VALUE``
    case _LENGTH_MEASURE(tLENGTH_MEASURE)	// (TYPE)

    /// SELECT case ``tLUMINOUS_FLUX_MEASURE`` (TYPE) in ``sMEASURE_VALUE``
    case _LUMINOUS_FLUX_MEASURE(tLUMINOUS_FLUX_MEASURE)	// (TYPE)

    /// SELECT case ``tLUMINOUS_INTENSITY_MEASURE`` (TYPE) in ``sMEASURE_VALUE``
    case _LUMINOUS_INTENSITY_MEASURE(tLUMINOUS_INTENSITY_MEASURE)	// (TYPE)

    /// SELECT case ``tMAGNETIC_FLUX_DENSITY_MEASURE`` (TYPE) in ``sMEASURE_VALUE``
    case _MAGNETIC_FLUX_DENSITY_MEASURE(tMAGNETIC_FLUX_DENSITY_MEASURE)	// (TYPE)

    /// SELECT case ``tMAGNETIC_FLUX_MEASURE`` (TYPE) in ``sMEASURE_VALUE``
    case _MAGNETIC_FLUX_MEASURE(tMAGNETIC_FLUX_MEASURE)	// (TYPE)

    /// SELECT case ``tMASS_MEASURE`` (TYPE) in ``sMEASURE_VALUE``
    case _MASS_MEASURE(tMASS_MEASURE)	// (TYPE)

    /// SELECT case ``tNON_NEGATIVE_LENGTH_MEASURE`` (TYPE) in ``sMEASURE_VALUE``
    case _NON_NEGATIVE_LENGTH_MEASURE(tNON_NEGATIVE_LENGTH_MEASURE)	// (TYPE)

    /// SELECT case ``tNUMERIC_MEASURE`` (TYPE) in ``sMEASURE_VALUE``
    case _NUMERIC_MEASURE(tNUMERIC_MEASURE)	// (TYPE)

    /// SELECT case ``tPARAMETER_VALUE`` (TYPE) in ``sMEASURE_VALUE``
    case _PARAMETER_VALUE(tPARAMETER_VALUE)	// (TYPE)

    /// SELECT case ``tPLANE_ANGLE_MEASURE`` (TYPE) in ``sMEASURE_VALUE``
    case _PLANE_ANGLE_MEASURE(tPLANE_ANGLE_MEASURE)	// (TYPE)

    /// SELECT case ``tPOSITIVE_LENGTH_MEASURE`` (TYPE) in ``sMEASURE_VALUE``
    case _POSITIVE_LENGTH_MEASURE(tPOSITIVE_LENGTH_MEASURE)	// (TYPE)

    /// SELECT case ``tPOSITIVE_PLANE_ANGLE_MEASURE`` (TYPE) in ``sMEASURE_VALUE``
    case _POSITIVE_PLANE_ANGLE_MEASURE(tPOSITIVE_PLANE_ANGLE_MEASURE)	// (TYPE)

    /// SELECT case ``tPOSITIVE_RATIO_MEASURE`` (TYPE) in ``sMEASURE_VALUE``
    case _POSITIVE_RATIO_MEASURE(tPOSITIVE_RATIO_MEASURE)	// (TYPE)

    /// SELECT case ``tPOWER_MEASURE`` (TYPE) in ``sMEASURE_VALUE``
    case _POWER_MEASURE(tPOWER_MEASURE)	// (TYPE)

    /// SELECT case ``tPRESSURE_MEASURE`` (TYPE) in ``sMEASURE_VALUE``
    case _PRESSURE_MEASURE(tPRESSURE_MEASURE)	// (TYPE)

    /// SELECT case ``tRADIOACTIVITY_MEASURE`` (TYPE) in ``sMEASURE_VALUE``
    case _RADIOACTIVITY_MEASURE(tRADIOACTIVITY_MEASURE)	// (TYPE)

    /// SELECT case ``tRATIO_MEASURE`` (TYPE) in ``sMEASURE_VALUE``
    case _RATIO_MEASURE(tRATIO_MEASURE)	// (TYPE)

    /// SELECT case ``tRESISTANCE_MEASURE`` (TYPE) in ``sMEASURE_VALUE``
    case _RESISTANCE_MEASURE(tRESISTANCE_MEASURE)	// (TYPE)

    /// SELECT case ``tSOLID_ANGLE_MEASURE`` (TYPE) in ``sMEASURE_VALUE``
    case _SOLID_ANGLE_MEASURE(tSOLID_ANGLE_MEASURE)	// (TYPE)

    /// SELECT case ``tTHERMODYNAMIC_TEMPERATURE_MEASURE`` (TYPE) in ``sMEASURE_VALUE``
    case _THERMODYNAMIC_TEMPERATURE_MEASURE(tTHERMODYNAMIC_TEMPERATURE_MEASURE)	// (TYPE)

    /// SELECT case ``tTIME_MEASURE`` (TYPE) in ``sMEASURE_VALUE``
    case _TIME_MEASURE(tTIME_MEASURE)	// (TYPE)

    /// SELECT case ``tVELOCITY_MEASURE`` (TYPE) in ``sMEASURE_VALUE``
    case _VELOCITY_MEASURE(tVELOCITY_MEASURE)	// (TYPE)

    /// SELECT case ``tVOLUME_MEASURE`` (TYPE) in ``sMEASURE_VALUE``
    case _VOLUME_MEASURE(tVOLUME_MEASURE)	// (TYPE)

    //MARK: - CONSTRUCTORS
    public init(fundamental: FundamentalType) { self = fundamental }

    public init?<T: SDAIUnderlyingType>(possiblyFrom underlyingType: T?){
      guard let underlyingType = underlyingType else { return nil }

      if let base = underlyingType as? tABSORBED_DOSE_MEASURE {
        self = ._ABSORBED_DOSE_MEASURE(base)
      }
      else if let base = underlyingType as? tACCELERATION_MEASURE {
        self = ._ACCELERATION_MEASURE(base)
      }
      else if let base = underlyingType as? tAMOUNT_OF_SUBSTANCE_MEASURE {
        self = ._AMOUNT_OF_SUBSTANCE_MEASURE(base)
      }
      else if let base = underlyingType as? tAREA_MEASURE {
        self = ._AREA_MEASURE(base)
      }
      else if let base = underlyingType as? tCAPACITANCE_MEASURE {
        self = ._CAPACITANCE_MEASURE(base)
      }
      else if let base = underlyingType as? tCELSIUS_TEMPERATURE_MEASURE {
        self = ._CELSIUS_TEMPERATURE_MEASURE(base)
      }
      else if let base = underlyingType as? tCONDUCTANCE_MEASURE {
        self = ._CONDUCTANCE_MEASURE(base)
      }
      else if let base = underlyingType as? tCONTEXT_DEPENDENT_MEASURE {
        self = ._CONTEXT_DEPENDENT_MEASURE(base)
      }
      else if let base = underlyingType as? tCOUNT_MEASURE {
        self = ._COUNT_MEASURE(base)
      }
      else if let base = underlyingType as? tDESCRIPTIVE_MEASURE {
        self = ._DESCRIPTIVE_MEASURE(base)
      }
      else if let base = underlyingType as? tDOSE_EQUIVALENT_MEASURE {
        self = ._DOSE_EQUIVALENT_MEASURE(base)
      }
      else if let base = underlyingType as? tELECTRIC_CHARGE_MEASURE {
        self = ._ELECTRIC_CHARGE_MEASURE(base)
      }
      else if let base = underlyingType as? tELECTRIC_CURRENT_MEASURE {
        self = ._ELECTRIC_CURRENT_MEASURE(base)
      }
      else if let base = underlyingType as? tELECTRIC_POTENTIAL_MEASURE {
        self = ._ELECTRIC_POTENTIAL_MEASURE(base)
      }
      else if let base = underlyingType as? tENERGY_MEASURE {
        self = ._ENERGY_MEASURE(base)
      }
      else if let base = underlyingType as? tFORCE_MEASURE {
        self = ._FORCE_MEASURE(base)
      }
      else if let base = underlyingType as? tFREQUENCY_MEASURE {
        self = ._FREQUENCY_MEASURE(base)
      }
      else if let base = underlyingType as? tILLUMINANCE_MEASURE {
        self = ._ILLUMINANCE_MEASURE(base)
      }
      else if let base = underlyingType as? tINDUCTANCE_MEASURE {
        self = ._INDUCTANCE_MEASURE(base)
      }
      else if let base = underlyingType as? tLENGTH_MEASURE {
        self = ._LENGTH_MEASURE(base)
      }
      else if let base = underlyingType as? tLUMINOUS_FLUX_MEASURE {
        self = ._LUMINOUS_FLUX_MEASURE(base)
      }
      else if let base = underlyingType as? tLUMINOUS_INTENSITY_MEASURE {
        self = ._LUMINOUS_INTENSITY_MEASURE(base)
      }
      else if let base = underlyingType as? tMAGNETIC_FLUX_DENSITY_MEASURE {
        self = ._MAGNETIC_FLUX_DENSITY_MEASURE(base)
      }
      else if let base = underlyingType as? tMAGNETIC_FLUX_MEASURE {
        self = ._MAGNETIC_FLUX_MEASURE(base)
      }
      else if let base = underlyingType as? tMASS_MEASURE {
        self = ._MASS_MEASURE(base)
      }
      else if let base = underlyingType as? tNON_NEGATIVE_LENGTH_MEASURE {
        self = ._NON_NEGATIVE_LENGTH_MEASURE(base)
      }
      else if let base = underlyingType as? tNUMERIC_MEASURE {
        self = ._NUMERIC_MEASURE(base)
      }
      else if let base = underlyingType as? tPARAMETER_VALUE {
        self = ._PARAMETER_VALUE(base)
      }
      else if let base = underlyingType as? tPLANE_ANGLE_MEASURE {
        self = ._PLANE_ANGLE_MEASURE(base)
      }
      else if let base = underlyingType as? tPOSITIVE_LENGTH_MEASURE {
        self = ._POSITIVE_LENGTH_MEASURE(base)
      }
      else if let base = underlyingType as? tPOSITIVE_PLANE_ANGLE_MEASURE {
        self = ._POSITIVE_PLANE_ANGLE_MEASURE(base)
      }
      else if let base = underlyingType as? tPOSITIVE_RATIO_MEASURE {
        self = ._POSITIVE_RATIO_MEASURE(base)
      }
      else if let base = underlyingType as? tPOWER_MEASURE {
        self = ._POWER_MEASURE(base)
      }
      else if let base = underlyingType as? tPRESSURE_MEASURE {
        self = ._PRESSURE_MEASURE(base)
      }
      else if let base = underlyingType as? tRADIOACTIVITY_MEASURE {
        self = ._RADIOACTIVITY_MEASURE(base)
      }
      else if let base = underlyingType as? tRATIO_MEASURE {
        self = ._RATIO_MEASURE(base)
      }
      else if let base = underlyingType as? tRESISTANCE_MEASURE {
        self = ._RESISTANCE_MEASURE(base)
      }
      else if let base = underlyingType as? tSOLID_ANGLE_MEASURE {
        self = ._SOLID_ANGLE_MEASURE(base)
      }
      else if let base = underlyingType as? tTHERMODYNAMIC_TEMPERATURE_MEASURE {
        self = ._THERMODYNAMIC_TEMPERATURE_MEASURE(base)
      }
      else if let base = underlyingType as? tTIME_MEASURE {
        self = ._TIME_MEASURE(base)
      }
      else if let base = underlyingType as? tVELOCITY_MEASURE {
        self = ._VELOCITY_MEASURE(base)
      }
      else if let base = underlyingType as? tVOLUME_MEASURE {
        self = ._VOLUME_MEASURE(base)
      }
      else if let fundamental = underlyingType.asFundamentalType as? tABSORBED_DOSE_MEASURE.FundamentalType {
        self = ._ABSORBED_DOSE_MEASURE( tABSORBED_DOSE_MEASURE(fundamental: fundamental) )
      }
      else if let fundamental = underlyingType.asFundamentalType as? tACCELERATION_MEASURE.FundamentalType {
        self = ._ACCELERATION_MEASURE( tACCELERATION_MEASURE(fundamental: fundamental) )
      }
      else if let fundamental = underlyingType.asFundamentalType as? tAMOUNT_OF_SUBSTANCE_MEASURE.FundamentalType {
        self = ._AMOUNT_OF_SUBSTANCE_MEASURE( tAMOUNT_OF_SUBSTANCE_MEASURE(fundamental: fundamental) )
      }
      else if let fundamental = underlyingType.asFundamentalType as? tAREA_MEASURE.FundamentalType {
        self = ._AREA_MEASURE( tAREA_MEASURE(fundamental: fundamental) )
      }
      else if let fundamental = underlyingType.asFundamentalType as? tCAPACITANCE_MEASURE.FundamentalType {
        self = ._CAPACITANCE_MEASURE( tCAPACITANCE_MEASURE(fundamental: fundamental) )
      }
      else if let fundamental = underlyingType.asFundamentalType as? tCELSIUS_TEMPERATURE_MEASURE.FundamentalType {
        self = ._CELSIUS_TEMPERATURE_MEASURE( tCELSIUS_TEMPERATURE_MEASURE(fundamental: fundamental) )
      }
      else if let fundamental = underlyingType.asFundamentalType as? tCONDUCTANCE_MEASURE.FundamentalType {
        self = ._CONDUCTANCE_MEASURE( tCONDUCTANCE_MEASURE(fundamental: fundamental) )
      }
      else if let fundamental = underlyingType.asFundamentalType as? tCONTEXT_DEPENDENT_MEASURE.FundamentalType {
        self = ._CONTEXT_DEPENDENT_MEASURE( tCONTEXT_DEPENDENT_MEASURE(fundamental: fundamental) )
      }
      else if let fundamental = underlyingType.asFundamentalType as? tCOUNT_MEASURE.FundamentalType {
        self = ._COUNT_MEASURE( tCOUNT_MEASURE(fundamental: fundamental) )
      }
      else if let fundamental = underlyingType.asFundamentalType as? tDESCRIPTIVE_MEASURE.FundamentalType {
        self = ._DESCRIPTIVE_MEASURE( tDESCRIPTIVE_MEASURE(fundamental: fundamental) )
      }
      else if let fundamental = underlyingType.asFundamentalType as? tDOSE_EQUIVALENT_MEASURE.FundamentalType {
        self = ._DOSE_EQUIVALENT_MEASURE( tDOSE_EQUIVALENT_MEASURE(fundamental: fundamental) )
      }
      else if let fundamental = underlyingType.asFundamentalType as? tELECTRIC_CHARGE_MEASURE.FundamentalType {
        self = ._ELECTRIC_CHARGE_MEASURE( tELECTRIC_CHARGE_MEASURE(fundamental: fundamental) )
      }
      else if let fundamental = underlyingType.asFundamentalType as? tELECTRIC_CURRENT_MEASURE.FundamentalType {
        self = ._ELECTRIC_CURRENT_MEASURE( tELECTRIC_CURRENT_MEASURE(fundamental: fundamental) )
      }
      else if let fundamental = underlyingType.asFundamentalType as? tELECTRIC_POTENTIAL_MEASURE.FundamentalType {
        self = ._ELECTRIC_POTENTIAL_MEASURE( tELECTRIC_POTENTIAL_MEASURE(fundamental: fundamental) )
      }
      else if let fundamental = underlyingType.asFundamentalType as? tENERGY_MEASURE.FundamentalType {
        self = ._ENERGY_MEASURE( tENERGY_MEASURE(fundamental: fundamental) )
      }
      else if let fundamental = underlyingType.asFundamentalType as? tFORCE_MEASURE.FundamentalType {
        self = ._FORCE_MEASURE( tFORCE_MEASURE(fundamental: fundamental) )
      }
      else if let fundamental = underlyingType.asFundamentalType as? tFREQUENCY_MEASURE.FundamentalType {
        self = ._FREQUENCY_MEASURE( tFREQUENCY_MEASURE(fundamental: fundamental) )
      }
      else if let fundamental = underlyingType.asFundamentalType as? tILLUMINANCE_MEASURE.FundamentalType {
        self = ._ILLUMINANCE_MEASURE( tILLUMINANCE_MEASURE(fundamental: fundamental) )
      }
      else if let fundamental = underlyingType.asFundamentalType as? tINDUCTANCE_MEASURE.FundamentalType {
        self = ._INDUCTANCE_MEASURE( tINDUCTANCE_MEASURE(fundamental: fundamental) )
      }
      else if let fundamental = underlyingType.asFundamentalType as? tLENGTH_MEASURE.FundamentalType {
        self = ._LENGTH_MEASURE( tLENGTH_MEASURE(fundamental: fundamental) )
      }
      else if let fundamental = underlyingType.asFundamentalType as? tLUMINOUS_FLUX_MEASURE.FundamentalType {
        self = ._LUMINOUS_FLUX_MEASURE( tLUMINOUS_FLUX_MEASURE(fundamental: fundamental) )
      }
      else if let fundamental = underlyingType.asFundamentalType as? tLUMINOUS_INTENSITY_MEASURE.FundamentalType {
        self = ._LUMINOUS_INTENSITY_MEASURE( tLUMINOUS_INTENSITY_MEASURE(fundamental: fundamental) )
      }
      else if let fundamental = underlyingType.asFundamentalType as? tMAGNETIC_FLUX_DENSITY_MEASURE.FundamentalType {
        self = ._MAGNETIC_FLUX_DENSITY_MEASURE( tMAGNETIC_FLUX_DENSITY_MEASURE(fundamental: fundamental) )
      }
      else if let fundamental = underlyingType.asFundamentalType as? tMAGNETIC_FLUX_MEASURE.FundamentalType {
        self = ._MAGNETIC_FLUX_MEASURE( tMAGNETIC_FLUX_MEASURE(fundamental: fundamental) )
      }
      else if let fundamental = underlyingType.asFundamentalType as? tMASS_MEASURE.FundamentalType {
        self = ._MASS_MEASURE( tMASS_MEASURE(fundamental: fundamental) )
      }
      else if let fundamental = underlyingType.asFundamentalType as? tNON_NEGATIVE_LENGTH_MEASURE.FundamentalType {
        self = ._NON_NEGATIVE_LENGTH_MEASURE( tNON_NEGATIVE_LENGTH_MEASURE(fundamental: fundamental) )
      }
      else if let fundamental = underlyingType.asFundamentalType as? tNUMERIC_MEASURE.FundamentalType {
        self = ._NUMERIC_MEASURE( tNUMERIC_MEASURE(fundamental: fundamental) )
      }
      else if let fundamental = underlyingType.asFundamentalType as? tPARAMETER_VALUE.FundamentalType {
        self = ._PARAMETER_VALUE( tPARAMETER_VALUE(fundamental: fundamental) )
      }
      else if let fundamental = underlyingType.asFundamentalType as? tPLANE_ANGLE_MEASURE.FundamentalType {
        self = ._PLANE_ANGLE_MEASURE( tPLANE_ANGLE_MEASURE(fundamental: fundamental) )
      }
      else if let fundamental = underlyingType.asFundamentalType as? tPOSITIVE_LENGTH_MEASURE.FundamentalType {
        self = ._POSITIVE_LENGTH_MEASURE( tPOSITIVE_LENGTH_MEASURE(fundamental: fundamental) )
      }
      else if let fundamental = underlyingType.asFundamentalType as? tPOSITIVE_PLANE_ANGLE_MEASURE.FundamentalType {
        self = ._POSITIVE_PLANE_ANGLE_MEASURE( tPOSITIVE_PLANE_ANGLE_MEASURE(fundamental: fundamental) )
      }
      else if let fundamental = underlyingType.asFundamentalType as? tPOSITIVE_RATIO_MEASURE.FundamentalType {
        self = ._POSITIVE_RATIO_MEASURE( tPOSITIVE_RATIO_MEASURE(fundamental: fundamental) )
      }
      else if let fundamental = underlyingType.asFundamentalType as? tPOWER_MEASURE.FundamentalType {
        self = ._POWER_MEASURE( tPOWER_MEASURE(fundamental: fundamental) )
      }
      else if let fundamental = underlyingType.asFundamentalType as? tPRESSURE_MEASURE.FundamentalType {
        self = ._PRESSURE_MEASURE( tPRESSURE_MEASURE(fundamental: fundamental) )
      }
      else if let fundamental = underlyingType.asFundamentalType as? tRADIOACTIVITY_MEASURE.FundamentalType {
        self = ._RADIOACTIVITY_MEASURE( tRADIOACTIVITY_MEASURE(fundamental: fundamental) )
      }
      else if let fundamental = underlyingType.asFundamentalType as? tRATIO_MEASURE.FundamentalType {
        self = ._RATIO_MEASURE( tRATIO_MEASURE(fundamental: fundamental) )
      }
      else if let fundamental = underlyingType.asFundamentalType as? tRESISTANCE_MEASURE.FundamentalType {
        self = ._RESISTANCE_MEASURE( tRESISTANCE_MEASURE(fundamental: fundamental) )
      }
      else if let fundamental = underlyingType.asFundamentalType as? tSOLID_ANGLE_MEASURE.FundamentalType {
        self = ._SOLID_ANGLE_MEASURE( tSOLID_ANGLE_MEASURE(fundamental: fundamental) )
      }
      else if let fundamental = underlyingType.asFundamentalType as? tTHERMODYNAMIC_TEMPERATURE_MEASURE.FundamentalType {
        self = ._THERMODYNAMIC_TEMPERATURE_MEASURE( tTHERMODYNAMIC_TEMPERATURE_MEASURE(fundamental: fundamental) )
      }
      else if let fundamental = underlyingType.asFundamentalType as? tTIME_MEASURE.FundamentalType {
        self = ._TIME_MEASURE( tTIME_MEASURE(fundamental: fundamental) )
      }
      else if let fundamental = underlyingType.asFundamentalType as? tVELOCITY_MEASURE.FundamentalType {
        self = ._VELOCITY_MEASURE( tVELOCITY_MEASURE(fundamental: fundamental) )
      }
      else if let fundamental = underlyingType.asFundamentalType as? tVOLUME_MEASURE.FundamentalType {
        self = ._VOLUME_MEASURE( tVOLUME_MEASURE(fundamental: fundamental) )
      }
      else { return nil }
    }

    public init?(possiblyFrom complex: SDAI.ComplexEntity?) {
      return nil
    }

    public init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let select = generic else { return nil }

      if let fundamental = select as? Self {
        self.init(fundamental: fundamental)
      }
      else if let base = tABSORBED_DOSE_MEASURE.convert(fromGeneric: select) {
        self = ._ABSORBED_DOSE_MEASURE(base)
      }
      else if let base = tACCELERATION_MEASURE.convert(fromGeneric: select) {
        self = ._ACCELERATION_MEASURE(base)
      }
      else if let base = tAMOUNT_OF_SUBSTANCE_MEASURE.convert(fromGeneric: select) {
        self = ._AMOUNT_OF_SUBSTANCE_MEASURE(base)
      }
      else if let base = tAREA_MEASURE.convert(fromGeneric: select) {
        self = ._AREA_MEASURE(base)
      }
      else if let base = tCAPACITANCE_MEASURE.convert(fromGeneric: select) {
        self = ._CAPACITANCE_MEASURE(base)
      }
      else if let base = tCELSIUS_TEMPERATURE_MEASURE.convert(fromGeneric: select) {
        self = ._CELSIUS_TEMPERATURE_MEASURE(base)
      }
      else if let base = tCONDUCTANCE_MEASURE.convert(fromGeneric: select) {
        self = ._CONDUCTANCE_MEASURE(base)
      }
      else if let base = tCONTEXT_DEPENDENT_MEASURE.convert(fromGeneric: select) {
        self = ._CONTEXT_DEPENDENT_MEASURE(base)
      }
      else if let base = tCOUNT_MEASURE.convert(fromGeneric: select) {
        self = ._COUNT_MEASURE(base)
      }
      else if let base = tDESCRIPTIVE_MEASURE.convert(fromGeneric: select) {
        self = ._DESCRIPTIVE_MEASURE(base)
      }
      else if let base = tDOSE_EQUIVALENT_MEASURE.convert(fromGeneric: select) {
        self = ._DOSE_EQUIVALENT_MEASURE(base)
      }
      else if let base = tELECTRIC_CHARGE_MEASURE.convert(fromGeneric: select) {
        self = ._ELECTRIC_CHARGE_MEASURE(base)
      }
      else if let base = tELECTRIC_CURRENT_MEASURE.convert(fromGeneric: select) {
        self = ._ELECTRIC_CURRENT_MEASURE(base)
      }
      else if let base = tELECTRIC_POTENTIAL_MEASURE.convert(fromGeneric: select) {
        self = ._ELECTRIC_POTENTIAL_MEASURE(base)
      }
      else if let base = tENERGY_MEASURE.convert(fromGeneric: select) {
        self = ._ENERGY_MEASURE(base)
      }
      else if let base = tFORCE_MEASURE.convert(fromGeneric: select) {
        self = ._FORCE_MEASURE(base)
      }
      else if let base = tFREQUENCY_MEASURE.convert(fromGeneric: select) {
        self = ._FREQUENCY_MEASURE(base)
      }
      else if let base = tILLUMINANCE_MEASURE.convert(fromGeneric: select) {
        self = ._ILLUMINANCE_MEASURE(base)
      }
      else if let base = tINDUCTANCE_MEASURE.convert(fromGeneric: select) {
        self = ._INDUCTANCE_MEASURE(base)
      }
      else if let base = tLENGTH_MEASURE.convert(fromGeneric: select) {
        self = ._LENGTH_MEASURE(base)
      }
      else if let base = tLUMINOUS_FLUX_MEASURE.convert(fromGeneric: select) {
        self = ._LUMINOUS_FLUX_MEASURE(base)
      }
      else if let base = tLUMINOUS_INTENSITY_MEASURE.convert(fromGeneric: select) {
        self = ._LUMINOUS_INTENSITY_MEASURE(base)
      }
      else if let base = tMAGNETIC_FLUX_DENSITY_MEASURE.convert(fromGeneric: select) {
        self = ._MAGNETIC_FLUX_DENSITY_MEASURE(base)
      }
      else if let base = tMAGNETIC_FLUX_MEASURE.convert(fromGeneric: select) {
        self = ._MAGNETIC_FLUX_MEASURE(base)
      }
      else if let base = tMASS_MEASURE.convert(fromGeneric: select) {
        self = ._MASS_MEASURE(base)
      }
      else if let base = tNON_NEGATIVE_LENGTH_MEASURE.convert(fromGeneric: select) {
        self = ._NON_NEGATIVE_LENGTH_MEASURE(base)
      }
      else if let base = tNUMERIC_MEASURE.convert(fromGeneric: select) {
        self = ._NUMERIC_MEASURE(base)
      }
      else if let base = tPARAMETER_VALUE.convert(fromGeneric: select) {
        self = ._PARAMETER_VALUE(base)
      }
      else if let base = tPLANE_ANGLE_MEASURE.convert(fromGeneric: select) {
        self = ._PLANE_ANGLE_MEASURE(base)
      }
      else if let base = tPOSITIVE_LENGTH_MEASURE.convert(fromGeneric: select) {
        self = ._POSITIVE_LENGTH_MEASURE(base)
      }
      else if let base = tPOSITIVE_PLANE_ANGLE_MEASURE.convert(fromGeneric: select) {
        self = ._POSITIVE_PLANE_ANGLE_MEASURE(base)
      }
      else if let base = tPOSITIVE_RATIO_MEASURE.convert(fromGeneric: select) {
        self = ._POSITIVE_RATIO_MEASURE(base)
      }
      else if let base = tPOWER_MEASURE.convert(fromGeneric: select) {
        self = ._POWER_MEASURE(base)
      }
      else if let base = tPRESSURE_MEASURE.convert(fromGeneric: select) {
        self = ._PRESSURE_MEASURE(base)
      }
      else if let base = tRADIOACTIVITY_MEASURE.convert(fromGeneric: select) {
        self = ._RADIOACTIVITY_MEASURE(base)
      }
      else if let base = tRATIO_MEASURE.convert(fromGeneric: select) {
        self = ._RATIO_MEASURE(base)
      }
      else if let base = tRESISTANCE_MEASURE.convert(fromGeneric: select) {
        self = ._RESISTANCE_MEASURE(base)
      }
      else if let base = tSOLID_ANGLE_MEASURE.convert(fromGeneric: select) {
        self = ._SOLID_ANGLE_MEASURE(base)
      }
      else if let base = tTHERMODYNAMIC_TEMPERATURE_MEASURE.convert(fromGeneric: select) {
        self = ._THERMODYNAMIC_TEMPERATURE_MEASURE(base)
      }
      else if let base = tTIME_MEASURE.convert(fromGeneric: select) {
        self = ._TIME_MEASURE(base)
      }
      else if let base = tVELOCITY_MEASURE.convert(fromGeneric: select) {
        self = ._VELOCITY_MEASURE(base)
      }
      else if let base = tVOLUME_MEASURE.convert(fromGeneric: select) {
        self = ._VOLUME_MEASURE(base)
      }
      else { return nil }
    }

    // InitializableByP21Parameter
    public static var bareTypeName: String = "MEASURE_VALUE"

    public init?(p21typedParam: P21Decode.ExchangeStructure.TypedParameter, from exchangeStructure: P21Decode.ExchangeStructure) {
      guard let keyword = p21typedParam.keyword.asStandardKeyword else { exchangeStructure.error = "unexpected p21parameter(\(p21typedParam)) while resolving \(Self.bareTypeName) select value"; return nil }

      switch(keyword) {
      case tABSORBED_DOSE_MEASURE.bareTypeName:
        guard let base = tABSORBED_DOSE_MEASURE(p21typedParam: p21typedParam, from: exchangeStructure) else { exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) select value"); return nil }
        self = ._ABSORBED_DOSE_MEASURE(base)

      case tACCELERATION_MEASURE.bareTypeName:
        guard let base = tACCELERATION_MEASURE(p21typedParam: p21typedParam, from: exchangeStructure) else { exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) select value"); return nil }
        self = ._ACCELERATION_MEASURE(base)

      case tAMOUNT_OF_SUBSTANCE_MEASURE.bareTypeName:
        guard let base = tAMOUNT_OF_SUBSTANCE_MEASURE(p21typedParam: p21typedParam, from: exchangeStructure) else { exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) select value"); return nil }
        self = ._AMOUNT_OF_SUBSTANCE_MEASURE(base)

      case tAREA_MEASURE.bareTypeName:
        guard let base = tAREA_MEASURE(p21typedParam: p21typedParam, from: exchangeStructure) else { exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) select value"); return nil }
        self = ._AREA_MEASURE(base)

      case tCAPACITANCE_MEASURE.bareTypeName:
        guard let base = tCAPACITANCE_MEASURE(p21typedParam: p21typedParam, from: exchangeStructure) else { exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) select value"); return nil }
        self = ._CAPACITANCE_MEASURE(base)

      case tCELSIUS_TEMPERATURE_MEASURE.bareTypeName:
        guard let base = tCELSIUS_TEMPERATURE_MEASURE(p21typedParam: p21typedParam, from: exchangeStructure) else { exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) select value"); return nil }
        self = ._CELSIUS_TEMPERATURE_MEASURE(base)

      case tCONDUCTANCE_MEASURE.bareTypeName:
        guard let base = tCONDUCTANCE_MEASURE(p21typedParam: p21typedParam, from: exchangeStructure) else { exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) select value"); return nil }
        self = ._CONDUCTANCE_MEASURE(base)

      case tCONTEXT_DEPENDENT_MEASURE.bareTypeName:
        guard let base = tCONTEXT_DEPENDENT_MEASURE(p21typedParam: p21typedParam, from: exchangeStructure) else { exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) select value"); return nil }
        self = ._CONTEXT_DEPENDENT_MEASURE(base)

      case tCOUNT_MEASURE.bareTypeName:
        guard let base = tCOUNT_MEASURE(p21typedParam: p21typedParam, from: exchangeStructure) else { exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) select value"); return nil }
        self = ._COUNT_MEASURE(base)

      case tDESCRIPTIVE_MEASURE.bareTypeName:
        guard let base = tDESCRIPTIVE_MEASURE(p21typedParam: p21typedParam, from: exchangeStructure) else { exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) select value"); return nil }
        self = ._DESCRIPTIVE_MEASURE(base)

      case tDOSE_EQUIVALENT_MEASURE.bareTypeName:
        guard let base = tDOSE_EQUIVALENT_MEASURE(p21typedParam: p21typedParam, from: exchangeStructure) else { exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) select value"); return nil }
        self = ._DOSE_EQUIVALENT_MEASURE(base)

      case tELECTRIC_CHARGE_MEASURE.bareTypeName:
        guard let base = tELECTRIC_CHARGE_MEASURE(p21typedParam: p21typedParam, from: exchangeStructure) else { exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) select value"); return nil }
        self = ._ELECTRIC_CHARGE_MEASURE(base)

      case tELECTRIC_CURRENT_MEASURE.bareTypeName:
        guard let base = tELECTRIC_CURRENT_MEASURE(p21typedParam: p21typedParam, from: exchangeStructure) else { exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) select value"); return nil }
        self = ._ELECTRIC_CURRENT_MEASURE(base)

      case tELECTRIC_POTENTIAL_MEASURE.bareTypeName:
        guard let base = tELECTRIC_POTENTIAL_MEASURE(p21typedParam: p21typedParam, from: exchangeStructure) else { exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) select value"); return nil }
        self = ._ELECTRIC_POTENTIAL_MEASURE(base)

      case tENERGY_MEASURE.bareTypeName:
        guard let base = tENERGY_MEASURE(p21typedParam: p21typedParam, from: exchangeStructure) else { exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) select value"); return nil }
        self = ._ENERGY_MEASURE(base)

      case tFORCE_MEASURE.bareTypeName:
        guard let base = tFORCE_MEASURE(p21typedParam: p21typedParam, from: exchangeStructure) else { exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) select value"); return nil }
        self = ._FORCE_MEASURE(base)

      case tFREQUENCY_MEASURE.bareTypeName:
        guard let base = tFREQUENCY_MEASURE(p21typedParam: p21typedParam, from: exchangeStructure) else { exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) select value"); return nil }
        self = ._FREQUENCY_MEASURE(base)

      case tILLUMINANCE_MEASURE.bareTypeName:
        guard let base = tILLUMINANCE_MEASURE(p21typedParam: p21typedParam, from: exchangeStructure) else { exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) select value"); return nil }
        self = ._ILLUMINANCE_MEASURE(base)

      case tINDUCTANCE_MEASURE.bareTypeName:
        guard let base = tINDUCTANCE_MEASURE(p21typedParam: p21typedParam, from: exchangeStructure) else { exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) select value"); return nil }
        self = ._INDUCTANCE_MEASURE(base)

      case tLENGTH_MEASURE.bareTypeName:
        guard let base = tLENGTH_MEASURE(p21typedParam: p21typedParam, from: exchangeStructure) else { exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) select value"); return nil }
        self = ._LENGTH_MEASURE(base)

      case tLUMINOUS_FLUX_MEASURE.bareTypeName:
        guard let base = tLUMINOUS_FLUX_MEASURE(p21typedParam: p21typedParam, from: exchangeStructure) else { exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) select value"); return nil }
        self = ._LUMINOUS_FLUX_MEASURE(base)

      case tLUMINOUS_INTENSITY_MEASURE.bareTypeName:
        guard let base = tLUMINOUS_INTENSITY_MEASURE(p21typedParam: p21typedParam, from: exchangeStructure) else { exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) select value"); return nil }
        self = ._LUMINOUS_INTENSITY_MEASURE(base)

      case tMAGNETIC_FLUX_DENSITY_MEASURE.bareTypeName:
        guard let base = tMAGNETIC_FLUX_DENSITY_MEASURE(p21typedParam: p21typedParam, from: exchangeStructure) else { exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) select value"); return nil }
        self = ._MAGNETIC_FLUX_DENSITY_MEASURE(base)

      case tMAGNETIC_FLUX_MEASURE.bareTypeName:
        guard let base = tMAGNETIC_FLUX_MEASURE(p21typedParam: p21typedParam, from: exchangeStructure) else { exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) select value"); return nil }
        self = ._MAGNETIC_FLUX_MEASURE(base)

      case tMASS_MEASURE.bareTypeName:
        guard let base = tMASS_MEASURE(p21typedParam: p21typedParam, from: exchangeStructure) else { exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) select value"); return nil }
        self = ._MASS_MEASURE(base)

      case tNON_NEGATIVE_LENGTH_MEASURE.bareTypeName:
        guard let base = tNON_NEGATIVE_LENGTH_MEASURE(p21typedParam: p21typedParam, from: exchangeStructure) else { exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) select value"); return nil }
        self = ._NON_NEGATIVE_LENGTH_MEASURE(base)

      case tNUMERIC_MEASURE.bareTypeName:
        guard let base = tNUMERIC_MEASURE(p21typedParam: p21typedParam, from: exchangeStructure) else { exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) select value"); return nil }
        self = ._NUMERIC_MEASURE(base)

      case tPARAMETER_VALUE.bareTypeName:
        guard let base = tPARAMETER_VALUE(p21typedParam: p21typedParam, from: exchangeStructure) else { exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) select value"); return nil }
        self = ._PARAMETER_VALUE(base)

      case tPLANE_ANGLE_MEASURE.bareTypeName:
        guard let base = tPLANE_ANGLE_MEASURE(p21typedParam: p21typedParam, from: exchangeStructure) else { exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) select value"); return nil }
        self = ._PLANE_ANGLE_MEASURE(base)

      case tPOSITIVE_LENGTH_MEASURE.bareTypeName:
        guard let base = tPOSITIVE_LENGTH_MEASURE(p21typedParam: p21typedParam, from: exchangeStructure) else { exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) select value"); return nil }
        self = ._POSITIVE_LENGTH_MEASURE(base)

      case tPOSITIVE_PLANE_ANGLE_MEASURE.bareTypeName:
        guard let base = tPOSITIVE_PLANE_ANGLE_MEASURE(p21typedParam: p21typedParam, from: exchangeStructure) else { exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) select value"); return nil }
        self = ._POSITIVE_PLANE_ANGLE_MEASURE(base)

      case tPOSITIVE_RATIO_MEASURE.bareTypeName:
        guard let base = tPOSITIVE_RATIO_MEASURE(p21typedParam: p21typedParam, from: exchangeStructure) else { exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) select value"); return nil }
        self = ._POSITIVE_RATIO_MEASURE(base)

      case tPOWER_MEASURE.bareTypeName:
        guard let base = tPOWER_MEASURE(p21typedParam: p21typedParam, from: exchangeStructure) else { exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) select value"); return nil }
        self = ._POWER_MEASURE(base)

      case tPRESSURE_MEASURE.bareTypeName:
        guard let base = tPRESSURE_MEASURE(p21typedParam: p21typedParam, from: exchangeStructure) else { exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) select value"); return nil }
        self = ._PRESSURE_MEASURE(base)

      case tRADIOACTIVITY_MEASURE.bareTypeName:
        guard let base = tRADIOACTIVITY_MEASURE(p21typedParam: p21typedParam, from: exchangeStructure) else { exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) select value"); return nil }
        self = ._RADIOACTIVITY_MEASURE(base)

      case tRATIO_MEASURE.bareTypeName:
        guard let base = tRATIO_MEASURE(p21typedParam: p21typedParam, from: exchangeStructure) else { exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) select value"); return nil }
        self = ._RATIO_MEASURE(base)

      case tRESISTANCE_MEASURE.bareTypeName:
        guard let base = tRESISTANCE_MEASURE(p21typedParam: p21typedParam, from: exchangeStructure) else { exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) select value"); return nil }
        self = ._RESISTANCE_MEASURE(base)

      case tSOLID_ANGLE_MEASURE.bareTypeName:
        guard let base = tSOLID_ANGLE_MEASURE(p21typedParam: p21typedParam, from: exchangeStructure) else { exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) select value"); return nil }
        self = ._SOLID_ANGLE_MEASURE(base)

      case tTHERMODYNAMIC_TEMPERATURE_MEASURE.bareTypeName:
        guard let base = tTHERMODYNAMIC_TEMPERATURE_MEASURE(p21typedParam: p21typedParam, from: exchangeStructure) else { exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) select value"); return nil }
        self = ._THERMODYNAMIC_TEMPERATURE_MEASURE(base)

      case tTIME_MEASURE.bareTypeName:
        guard let base = tTIME_MEASURE(p21typedParam: p21typedParam, from: exchangeStructure) else { exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) select value"); return nil }
        self = ._TIME_MEASURE(base)

      case tVELOCITY_MEASURE.bareTypeName:
        guard let base = tVELOCITY_MEASURE(p21typedParam: p21typedParam, from: exchangeStructure) else { exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) select value"); return nil }
        self = ._VELOCITY_MEASURE(base)

      case tVOLUME_MEASURE.bareTypeName:
        guard let base = tVOLUME_MEASURE(p21typedParam: p21typedParam, from: exchangeStructure) else { exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) select value"); return nil }
        self = ._VOLUME_MEASURE(base)

      default:
        exchangeStructure.error = "unexpected p21parameter(\(p21typedParam)) while resolving \(Self.bareTypeName) select value"
        return nil
      }
    }

    public init?(p21untypedParam: P21Decode.ExchangeStructure.UntypedParameter, from exchangeStructure: P21Decode.ExchangeStructure) {
      switch p21untypedParam {
      case .rhsOccurenceName(let rhsname):
        switch rhsname {
        case .constantEntityName(let name):
          guard let entity = exchangeStructure.resolve(constantEntityName: name) else {exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) instance"); return nil }
          self.init(possiblyFrom: entity.complexEntity)

        case .entityInstanceName(let name):
          guard let complex = exchangeStructure.resolve(entityInstanceName: name) else {exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) instance"); return nil }
          self.init(possiblyFrom: complex)

        default:
          exchangeStructure.error = "unexpected p21parameter(\(p21untypedParam)) while resolving \(Self.bareTypeName) select instance"
          return nil
        }

      default:
        exchangeStructure.error = "unexpected p21parameter(\(p21untypedParam)) while resolving \(Self.bareTypeName) select instance"
        return nil
      }
    }

    public init?(p21omittedParamfrom exchangeStructure: P21Decode.ExchangeStructure) {
      return nil
    }


    //MARK: - NON-ENTITY UNDERLYING TYPE REFERENCES
    public var super_tABSORBED_DOSE_MEASURE: tABSORBED_DOSE_MEASURE? {
      switch self {
      case ._ABSORBED_DOSE_MEASURE(let selectValue): return selectValue
      default: return nil
      }
    }

    public var super_tACCELERATION_MEASURE: tACCELERATION_MEASURE? {
      switch self {
      case ._ACCELERATION_MEASURE(let selectValue): return selectValue
      default: return nil
      }
    }

    public var super_tAMOUNT_OF_SUBSTANCE_MEASURE: tAMOUNT_OF_SUBSTANCE_MEASURE? {
      switch self {
      case ._AMOUNT_OF_SUBSTANCE_MEASURE(let selectValue): return selectValue
      default: return nil
      }
    }

    public var super_tAREA_MEASURE: tAREA_MEASURE? {
      switch self {
      case ._AREA_MEASURE(let selectValue): return selectValue
      default: return nil
      }
    }

    public var super_tCAPACITANCE_MEASURE: tCAPACITANCE_MEASURE? {
      switch self {
      case ._CAPACITANCE_MEASURE(let selectValue): return selectValue
      default: return nil
      }
    }

    public var super_tCELSIUS_TEMPERATURE_MEASURE: tCELSIUS_TEMPERATURE_MEASURE? {
      switch self {
      case ._CELSIUS_TEMPERATURE_MEASURE(let selectValue): return selectValue
      default: return nil
      }
    }

    public var super_tCONDUCTANCE_MEASURE: tCONDUCTANCE_MEASURE? {
      switch self {
      case ._CONDUCTANCE_MEASURE(let selectValue): return selectValue
      default: return nil
      }
    }

    public var super_tCONTEXT_DEPENDENT_MEASURE: tCONTEXT_DEPENDENT_MEASURE? {
      switch self {
      case ._CONTEXT_DEPENDENT_MEASURE(let selectValue): return selectValue
      default: return nil
      }
    }

    public var super_tCOUNT_MEASURE: tCOUNT_MEASURE? {
      switch self {
      case ._COUNT_MEASURE(let selectValue): return selectValue
      default: return nil
      }
    }

    public var super_tDESCRIPTIVE_MEASURE: tDESCRIPTIVE_MEASURE? {
      switch self {
      case ._DESCRIPTIVE_MEASURE(let selectValue): return selectValue
      default: return nil
      }
    }

    public var super_tDOSE_EQUIVALENT_MEASURE: tDOSE_EQUIVALENT_MEASURE? {
      switch self {
      case ._DOSE_EQUIVALENT_MEASURE(let selectValue): return selectValue
      default: return nil
      }
    }

    public var super_tELECTRIC_CHARGE_MEASURE: tELECTRIC_CHARGE_MEASURE? {
      switch self {
      case ._ELECTRIC_CHARGE_MEASURE(let selectValue): return selectValue
      default: return nil
      }
    }

    public var super_tELECTRIC_CURRENT_MEASURE: tELECTRIC_CURRENT_MEASURE? {
      switch self {
      case ._ELECTRIC_CURRENT_MEASURE(let selectValue): return selectValue
      default: return nil
      }
    }

    public var super_tELECTRIC_POTENTIAL_MEASURE: tELECTRIC_POTENTIAL_MEASURE? {
      switch self {
      case ._ELECTRIC_POTENTIAL_MEASURE(let selectValue): return selectValue
      default: return nil
      }
    }

    public var super_tENERGY_MEASURE: tENERGY_MEASURE? {
      switch self {
      case ._ENERGY_MEASURE(let selectValue): return selectValue
      default: return nil
      }
    }

    public var super_tFORCE_MEASURE: tFORCE_MEASURE? {
      switch self {
      case ._FORCE_MEASURE(let selectValue): return selectValue
      default: return nil
      }
    }

    public var super_tFREQUENCY_MEASURE: tFREQUENCY_MEASURE? {
      switch self {
      case ._FREQUENCY_MEASURE(let selectValue): return selectValue
      default: return nil
      }
    }

    public var super_tILLUMINANCE_MEASURE: tILLUMINANCE_MEASURE? {
      switch self {
      case ._ILLUMINANCE_MEASURE(let selectValue): return selectValue
      default: return nil
      }
    }

    public var super_tINDUCTANCE_MEASURE: tINDUCTANCE_MEASURE? {
      switch self {
      case ._INDUCTANCE_MEASURE(let selectValue): return selectValue
      default: return nil
      }
    }

    public var super_tLENGTH_MEASURE: tLENGTH_MEASURE? {
      switch self {
      case ._LENGTH_MEASURE(let selectValue): return selectValue
      default: return nil
      }
    }

    public var super_tLUMINOUS_FLUX_MEASURE: tLUMINOUS_FLUX_MEASURE? {
      switch self {
      case ._LUMINOUS_FLUX_MEASURE(let selectValue): return selectValue
      default: return nil
      }
    }

    public var super_tLUMINOUS_INTENSITY_MEASURE: tLUMINOUS_INTENSITY_MEASURE? {
      switch self {
      case ._LUMINOUS_INTENSITY_MEASURE(let selectValue): return selectValue
      default: return nil
      }
    }

    public var super_tMAGNETIC_FLUX_DENSITY_MEASURE: tMAGNETIC_FLUX_DENSITY_MEASURE? {
      switch self {
      case ._MAGNETIC_FLUX_DENSITY_MEASURE(let selectValue): return selectValue
      default: return nil
      }
    }

    public var super_tMAGNETIC_FLUX_MEASURE: tMAGNETIC_FLUX_MEASURE? {
      switch self {
      case ._MAGNETIC_FLUX_MEASURE(let selectValue): return selectValue
      default: return nil
      }
    }

    public var super_tMASS_MEASURE: tMASS_MEASURE? {
      switch self {
      case ._MASS_MEASURE(let selectValue): return selectValue
      default: return nil
      }
    }

    public var super_tNON_NEGATIVE_LENGTH_MEASURE: tNON_NEGATIVE_LENGTH_MEASURE? {
      switch self {
      case ._NON_NEGATIVE_LENGTH_MEASURE(let selectValue): return selectValue
      default: return nil
      }
    }

    public var super_tNUMERIC_MEASURE: tNUMERIC_MEASURE? {
      switch self {
      case ._NUMERIC_MEASURE(let selectValue): return selectValue
      default: return nil
      }
    }

    public var super_tPARAMETER_VALUE: tPARAMETER_VALUE? {
      switch self {
      case ._PARAMETER_VALUE(let selectValue): return selectValue
      default: return nil
      }
    }

    public var super_tPLANE_ANGLE_MEASURE: tPLANE_ANGLE_MEASURE? {
      switch self {
      case ._PLANE_ANGLE_MEASURE(let selectValue): return selectValue
      default: return nil
      }
    }

    public var super_tPOSITIVE_LENGTH_MEASURE: tPOSITIVE_LENGTH_MEASURE? {
      switch self {
      case ._POSITIVE_LENGTH_MEASURE(let selectValue): return selectValue
      default: return nil
      }
    }

    public var super_tPOSITIVE_PLANE_ANGLE_MEASURE: tPOSITIVE_PLANE_ANGLE_MEASURE? {
      switch self {
      case ._POSITIVE_PLANE_ANGLE_MEASURE(let selectValue): return selectValue
      default: return nil
      }
    }

    public var super_tPOSITIVE_RATIO_MEASURE: tPOSITIVE_RATIO_MEASURE? {
      switch self {
      case ._POSITIVE_RATIO_MEASURE(let selectValue): return selectValue
      default: return nil
      }
    }

    public var super_tPOWER_MEASURE: tPOWER_MEASURE? {
      switch self {
      case ._POWER_MEASURE(let selectValue): return selectValue
      default: return nil
      }
    }

    public var super_tPRESSURE_MEASURE: tPRESSURE_MEASURE? {
      switch self {
      case ._PRESSURE_MEASURE(let selectValue): return selectValue
      default: return nil
      }
    }

    public var super_tRADIOACTIVITY_MEASURE: tRADIOACTIVITY_MEASURE? {
      switch self {
      case ._RADIOACTIVITY_MEASURE(let selectValue): return selectValue
      default: return nil
      }
    }

    public var super_tRATIO_MEASURE: tRATIO_MEASURE? {
      switch self {
      case ._RATIO_MEASURE(let selectValue): return selectValue
      default: return nil
      }
    }

    public var super_tRESISTANCE_MEASURE: tRESISTANCE_MEASURE? {
      switch self {
      case ._RESISTANCE_MEASURE(let selectValue): return selectValue
      default: return nil
      }
    }

    public var super_tSOLID_ANGLE_MEASURE: tSOLID_ANGLE_MEASURE? {
      switch self {
      case ._SOLID_ANGLE_MEASURE(let selectValue): return selectValue
      default: return nil
      }
    }

    public var super_tTHERMODYNAMIC_TEMPERATURE_MEASURE: tTHERMODYNAMIC_TEMPERATURE_MEASURE? {
      switch self {
      case ._THERMODYNAMIC_TEMPERATURE_MEASURE(let selectValue): return selectValue
      default: return nil
      }
    }

    public var super_tTIME_MEASURE: tTIME_MEASURE? {
      switch self {
      case ._TIME_MEASURE(let selectValue): return selectValue
      default: return nil
      }
    }

    public var super_tVELOCITY_MEASURE: tVELOCITY_MEASURE? {
      switch self {
      case ._VELOCITY_MEASURE(let selectValue): return selectValue
      default: return nil
      }
    }

    public var super_tVOLUME_MEASURE: tVOLUME_MEASURE? {
      switch self {
      case ._VOLUME_MEASURE(let selectValue): return selectValue
      default: return nil
      }
    }



    //MARK: - SDAIValue
    public func isValueEqual<T: SDAIValue>(to rhs: T) -> Bool {
      switch self {
      case ._ABSORBED_DOSE_MEASURE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._ACCELERATION_MEASURE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._AMOUNT_OF_SUBSTANCE_MEASURE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._AREA_MEASURE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._CAPACITANCE_MEASURE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._CELSIUS_TEMPERATURE_MEASURE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._CONDUCTANCE_MEASURE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._CONTEXT_DEPENDENT_MEASURE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._COUNT_MEASURE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._DESCRIPTIVE_MEASURE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._DOSE_EQUIVALENT_MEASURE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._ELECTRIC_CHARGE_MEASURE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._ELECTRIC_CURRENT_MEASURE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._ELECTRIC_POTENTIAL_MEASURE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._ENERGY_MEASURE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._FORCE_MEASURE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._FREQUENCY_MEASURE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._ILLUMINANCE_MEASURE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._INDUCTANCE_MEASURE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._LENGTH_MEASURE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._LUMINOUS_FLUX_MEASURE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._LUMINOUS_INTENSITY_MEASURE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._MAGNETIC_FLUX_DENSITY_MEASURE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._MAGNETIC_FLUX_MEASURE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._MASS_MEASURE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._NON_NEGATIVE_LENGTH_MEASURE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._NUMERIC_MEASURE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PARAMETER_VALUE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PLANE_ANGLE_MEASURE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._POSITIVE_LENGTH_MEASURE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._POSITIVE_PLANE_ANGLE_MEASURE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._POSITIVE_RATIO_MEASURE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._POWER_MEASURE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PRESSURE_MEASURE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._RADIOACTIVITY_MEASURE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._RATIO_MEASURE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._RESISTANCE_MEASURE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._SOLID_ANGLE_MEASURE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._THERMODYNAMIC_TEMPERATURE_MEASURE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._TIME_MEASURE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._VELOCITY_MEASURE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._VOLUME_MEASURE(let selection): return selection.value.isValueEqual(to: rhs)
      }
    }

    public func isValueEqualOptionally<T: SDAIValue>(to rhs: T?) -> Bool? {
      switch self {
      case ._ABSORBED_DOSE_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._ACCELERATION_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._AMOUNT_OF_SUBSTANCE_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._AREA_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._CAPACITANCE_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._CELSIUS_TEMPERATURE_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._CONDUCTANCE_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._CONTEXT_DEPENDENT_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._COUNT_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._DESCRIPTIVE_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._DOSE_EQUIVALENT_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._ELECTRIC_CHARGE_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._ELECTRIC_CURRENT_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._ELECTRIC_POTENTIAL_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._ENERGY_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._FORCE_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._FREQUENCY_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._ILLUMINANCE_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._INDUCTANCE_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._LENGTH_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._LUMINOUS_FLUX_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._LUMINOUS_INTENSITY_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._MAGNETIC_FLUX_DENSITY_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._MAGNETIC_FLUX_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._MASS_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._NON_NEGATIVE_LENGTH_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._NUMERIC_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PARAMETER_VALUE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PLANE_ANGLE_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._POSITIVE_LENGTH_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._POSITIVE_PLANE_ANGLE_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._POSITIVE_RATIO_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._POWER_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PRESSURE_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._RADIOACTIVITY_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._RATIO_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._RESISTANCE_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._SOLID_ANGLE_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._THERMODYNAMIC_TEMPERATURE_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._TIME_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._VELOCITY_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._VOLUME_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      }
    }

    public func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      switch self {
      case ._ABSORBED_DOSE_MEASURE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._ACCELERATION_MEASURE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._AMOUNT_OF_SUBSTANCE_MEASURE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._AREA_MEASURE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._CAPACITANCE_MEASURE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._CELSIUS_TEMPERATURE_MEASURE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._CONDUCTANCE_MEASURE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._CONTEXT_DEPENDENT_MEASURE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._COUNT_MEASURE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._DESCRIPTIVE_MEASURE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._DOSE_EQUIVALENT_MEASURE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._ELECTRIC_CHARGE_MEASURE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._ELECTRIC_CURRENT_MEASURE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._ELECTRIC_POTENTIAL_MEASURE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._ENERGY_MEASURE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._FORCE_MEASURE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._FREQUENCY_MEASURE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._ILLUMINANCE_MEASURE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._INDUCTANCE_MEASURE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._LENGTH_MEASURE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._LUMINOUS_FLUX_MEASURE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._LUMINOUS_INTENSITY_MEASURE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._MAGNETIC_FLUX_DENSITY_MEASURE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._MAGNETIC_FLUX_MEASURE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._MASS_MEASURE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._NON_NEGATIVE_LENGTH_MEASURE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._NUMERIC_MEASURE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PARAMETER_VALUE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PLANE_ANGLE_MEASURE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._POSITIVE_LENGTH_MEASURE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._POSITIVE_PLANE_ANGLE_MEASURE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._POSITIVE_RATIO_MEASURE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._POWER_MEASURE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PRESSURE_MEASURE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._RADIOACTIVITY_MEASURE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._RATIO_MEASURE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._RESISTANCE_MEASURE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._SOLID_ANGLE_MEASURE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._THERMODYNAMIC_TEMPERATURE_MEASURE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._TIME_MEASURE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._VELOCITY_MEASURE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._VOLUME_MEASURE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      }
    }

    public func isValueEqual<T: SDAIValue>(to rhs: T, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      switch self {
      case ._ABSORBED_DOSE_MEASURE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._ACCELERATION_MEASURE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._AMOUNT_OF_SUBSTANCE_MEASURE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._AREA_MEASURE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._CAPACITANCE_MEASURE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._CELSIUS_TEMPERATURE_MEASURE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._CONDUCTANCE_MEASURE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._CONTEXT_DEPENDENT_MEASURE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._COUNT_MEASURE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._DESCRIPTIVE_MEASURE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._DOSE_EQUIVALENT_MEASURE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._ELECTRIC_CHARGE_MEASURE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._ELECTRIC_CURRENT_MEASURE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._ELECTRIC_POTENTIAL_MEASURE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._ENERGY_MEASURE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._FORCE_MEASURE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._FREQUENCY_MEASURE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._ILLUMINANCE_MEASURE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._INDUCTANCE_MEASURE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._LENGTH_MEASURE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._LUMINOUS_FLUX_MEASURE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._LUMINOUS_INTENSITY_MEASURE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._MAGNETIC_FLUX_DENSITY_MEASURE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._MAGNETIC_FLUX_MEASURE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._MASS_MEASURE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._NON_NEGATIVE_LENGTH_MEASURE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._NUMERIC_MEASURE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PARAMETER_VALUE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PLANE_ANGLE_MEASURE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._POSITIVE_LENGTH_MEASURE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._POSITIVE_PLANE_ANGLE_MEASURE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._POSITIVE_RATIO_MEASURE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._POWER_MEASURE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PRESSURE_MEASURE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._RADIOACTIVITY_MEASURE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._RATIO_MEASURE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._RESISTANCE_MEASURE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._SOLID_ANGLE_MEASURE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._THERMODYNAMIC_TEMPERATURE_MEASURE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._TIME_MEASURE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._VELOCITY_MEASURE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._VOLUME_MEASURE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      }
    }

    public func isValueEqualOptionally<T: SDAIValue>(to rhs: T?, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      switch self {
      case ._ABSORBED_DOSE_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._ACCELERATION_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._AMOUNT_OF_SUBSTANCE_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._AREA_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._CAPACITANCE_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._CELSIUS_TEMPERATURE_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._CONDUCTANCE_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._CONTEXT_DEPENDENT_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._COUNT_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._DESCRIPTIVE_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._DOSE_EQUIVALENT_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._ELECTRIC_CHARGE_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._ELECTRIC_CURRENT_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._ELECTRIC_POTENTIAL_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._ENERGY_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._FORCE_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._FREQUENCY_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._ILLUMINANCE_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._INDUCTANCE_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._LENGTH_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._LUMINOUS_FLUX_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._LUMINOUS_INTENSITY_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._MAGNETIC_FLUX_DENSITY_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._MAGNETIC_FLUX_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._MASS_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._NON_NEGATIVE_LENGTH_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._NUMERIC_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PARAMETER_VALUE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PLANE_ANGLE_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._POSITIVE_LENGTH_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._POSITIVE_PLANE_ANGLE_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._POSITIVE_RATIO_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._POWER_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PRESSURE_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._RADIOACTIVITY_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._RATIO_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._RESISTANCE_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._SOLID_ANGLE_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._THERMODYNAMIC_TEMPERATURE_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._TIME_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._VELOCITY_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._VOLUME_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      }
    }


    //MARK: SDAIGenericTypeBase
    public func copy() -> Self {
      switch self {
      case ._ABSORBED_DOSE_MEASURE(let selection): return ._ABSORBED_DOSE_MEASURE(selection.copy())
      case ._ACCELERATION_MEASURE(let selection): return ._ACCELERATION_MEASURE(selection.copy())
      case ._AMOUNT_OF_SUBSTANCE_MEASURE(let selection): return ._AMOUNT_OF_SUBSTANCE_MEASURE(selection.copy())
      case ._AREA_MEASURE(let selection): return ._AREA_MEASURE(selection.copy())
      case ._CAPACITANCE_MEASURE(let selection): return ._CAPACITANCE_MEASURE(selection.copy())
      case ._CELSIUS_TEMPERATURE_MEASURE(let selection): return ._CELSIUS_TEMPERATURE_MEASURE(selection.copy())
      case ._CONDUCTANCE_MEASURE(let selection): return ._CONDUCTANCE_MEASURE(selection.copy())
      case ._CONTEXT_DEPENDENT_MEASURE(let selection): return ._CONTEXT_DEPENDENT_MEASURE(selection.copy())
      case ._COUNT_MEASURE(let selection): return ._COUNT_MEASURE(selection.copy())
      case ._DESCRIPTIVE_MEASURE(let selection): return ._DESCRIPTIVE_MEASURE(selection.copy())
      case ._DOSE_EQUIVALENT_MEASURE(let selection): return ._DOSE_EQUIVALENT_MEASURE(selection.copy())
      case ._ELECTRIC_CHARGE_MEASURE(let selection): return ._ELECTRIC_CHARGE_MEASURE(selection.copy())
      case ._ELECTRIC_CURRENT_MEASURE(let selection): return ._ELECTRIC_CURRENT_MEASURE(selection.copy())
      case ._ELECTRIC_POTENTIAL_MEASURE(let selection): return ._ELECTRIC_POTENTIAL_MEASURE(selection.copy())
      case ._ENERGY_MEASURE(let selection): return ._ENERGY_MEASURE(selection.copy())
      case ._FORCE_MEASURE(let selection): return ._FORCE_MEASURE(selection.copy())
      case ._FREQUENCY_MEASURE(let selection): return ._FREQUENCY_MEASURE(selection.copy())
      case ._ILLUMINANCE_MEASURE(let selection): return ._ILLUMINANCE_MEASURE(selection.copy())
      case ._INDUCTANCE_MEASURE(let selection): return ._INDUCTANCE_MEASURE(selection.copy())
      case ._LENGTH_MEASURE(let selection): return ._LENGTH_MEASURE(selection.copy())
      case ._LUMINOUS_FLUX_MEASURE(let selection): return ._LUMINOUS_FLUX_MEASURE(selection.copy())
      case ._LUMINOUS_INTENSITY_MEASURE(let selection): return ._LUMINOUS_INTENSITY_MEASURE(selection.copy())
      case ._MAGNETIC_FLUX_DENSITY_MEASURE(let selection): return ._MAGNETIC_FLUX_DENSITY_MEASURE(selection.copy())
      case ._MAGNETIC_FLUX_MEASURE(let selection): return ._MAGNETIC_FLUX_MEASURE(selection.copy())
      case ._MASS_MEASURE(let selection): return ._MASS_MEASURE(selection.copy())
      case ._NON_NEGATIVE_LENGTH_MEASURE(let selection): return ._NON_NEGATIVE_LENGTH_MEASURE(selection.copy())
      case ._NUMERIC_MEASURE(let selection): return ._NUMERIC_MEASURE(selection.copy())
      case ._PARAMETER_VALUE(let selection): return ._PARAMETER_VALUE(selection.copy())
      case ._PLANE_ANGLE_MEASURE(let selection): return ._PLANE_ANGLE_MEASURE(selection.copy())
      case ._POSITIVE_LENGTH_MEASURE(let selection): return ._POSITIVE_LENGTH_MEASURE(selection.copy())
      case ._POSITIVE_PLANE_ANGLE_MEASURE(let selection): return ._POSITIVE_PLANE_ANGLE_MEASURE(selection.copy())
      case ._POSITIVE_RATIO_MEASURE(let selection): return ._POSITIVE_RATIO_MEASURE(selection.copy())
      case ._POWER_MEASURE(let selection): return ._POWER_MEASURE(selection.copy())
      case ._PRESSURE_MEASURE(let selection): return ._PRESSURE_MEASURE(selection.copy())
      case ._RADIOACTIVITY_MEASURE(let selection): return ._RADIOACTIVITY_MEASURE(selection.copy())
      case ._RATIO_MEASURE(let selection): return ._RATIO_MEASURE(selection.copy())
      case ._RESISTANCE_MEASURE(let selection): return ._RESISTANCE_MEASURE(selection.copy())
      case ._SOLID_ANGLE_MEASURE(let selection): return ._SOLID_ANGLE_MEASURE(selection.copy())
      case ._THERMODYNAMIC_TEMPERATURE_MEASURE(let selection): return ._THERMODYNAMIC_TEMPERATURE_MEASURE(selection.copy())
      case ._TIME_MEASURE(let selection): return ._TIME_MEASURE(selection.copy())
      case ._VELOCITY_MEASURE(let selection): return ._VELOCITY_MEASURE(selection.copy())
      case ._VOLUME_MEASURE(let selection): return ._VOLUME_MEASURE(selection.copy())
      }
    }

    //MARK: SDAIGenericType
    public var typeMembers: Set<SDAI.STRING> {
      var members: Set<SDAI.STRING> = [SDAI.STRING(Self.typeName)]
      switch self {
      case ._ABSORBED_DOSE_MEASURE(let selection): members.formUnion(selection.typeMembers)
      case ._ACCELERATION_MEASURE(let selection): members.formUnion(selection.typeMembers)
      case ._AMOUNT_OF_SUBSTANCE_MEASURE(let selection): members.formUnion(selection.typeMembers)
      case ._AREA_MEASURE(let selection): members.formUnion(selection.typeMembers)
      case ._CAPACITANCE_MEASURE(let selection): members.formUnion(selection.typeMembers)
      case ._CELSIUS_TEMPERATURE_MEASURE(let selection): members.formUnion(selection.typeMembers)
      case ._CONDUCTANCE_MEASURE(let selection): members.formUnion(selection.typeMembers)
      case ._CONTEXT_DEPENDENT_MEASURE(let selection): members.formUnion(selection.typeMembers)
      case ._COUNT_MEASURE(let selection): members.formUnion(selection.typeMembers)
      case ._DESCRIPTIVE_MEASURE(let selection): members.formUnion(selection.typeMembers)
      case ._DOSE_EQUIVALENT_MEASURE(let selection): members.formUnion(selection.typeMembers)
      case ._ELECTRIC_CHARGE_MEASURE(let selection): members.formUnion(selection.typeMembers)
      case ._ELECTRIC_CURRENT_MEASURE(let selection): members.formUnion(selection.typeMembers)
      case ._ELECTRIC_POTENTIAL_MEASURE(let selection): members.formUnion(selection.typeMembers)
      case ._ENERGY_MEASURE(let selection): members.formUnion(selection.typeMembers)
      case ._FORCE_MEASURE(let selection): members.formUnion(selection.typeMembers)
      case ._FREQUENCY_MEASURE(let selection): members.formUnion(selection.typeMembers)
      case ._ILLUMINANCE_MEASURE(let selection): members.formUnion(selection.typeMembers)
      case ._INDUCTANCE_MEASURE(let selection): members.formUnion(selection.typeMembers)
      case ._LENGTH_MEASURE(let selection): members.formUnion(selection.typeMembers)
      case ._LUMINOUS_FLUX_MEASURE(let selection): members.formUnion(selection.typeMembers)
      case ._LUMINOUS_INTENSITY_MEASURE(let selection): members.formUnion(selection.typeMembers)
      case ._MAGNETIC_FLUX_DENSITY_MEASURE(let selection): members.formUnion(selection.typeMembers)
      case ._MAGNETIC_FLUX_MEASURE(let selection): members.formUnion(selection.typeMembers)
      case ._MASS_MEASURE(let selection): members.formUnion(selection.typeMembers)
      case ._NON_NEGATIVE_LENGTH_MEASURE(let selection): members.formUnion(selection.typeMembers)
      case ._NUMERIC_MEASURE(let selection): members.formUnion(selection.typeMembers)
      case ._PARAMETER_VALUE(let selection): members.formUnion(selection.typeMembers)
      case ._PLANE_ANGLE_MEASURE(let selection): members.formUnion(selection.typeMembers)
      case ._POSITIVE_LENGTH_MEASURE(let selection): members.formUnion(selection.typeMembers)
      case ._POSITIVE_PLANE_ANGLE_MEASURE(let selection): members.formUnion(selection.typeMembers)
      case ._POSITIVE_RATIO_MEASURE(let selection): members.formUnion(selection.typeMembers)
      case ._POWER_MEASURE(let selection): members.formUnion(selection.typeMembers)
      case ._PRESSURE_MEASURE(let selection): members.formUnion(selection.typeMembers)
      case ._RADIOACTIVITY_MEASURE(let selection): members.formUnion(selection.typeMembers)
      case ._RATIO_MEASURE(let selection): members.formUnion(selection.typeMembers)
      case ._RESISTANCE_MEASURE(let selection): members.formUnion(selection.typeMembers)
      case ._SOLID_ANGLE_MEASURE(let selection): members.formUnion(selection.typeMembers)
      case ._THERMODYNAMIC_TEMPERATURE_MEASURE(let selection): members.formUnion(selection.typeMembers)
      case ._TIME_MEASURE(let selection): members.formUnion(selection.typeMembers)
      case ._VELOCITY_MEASURE(let selection): members.formUnion(selection.typeMembers)
      case ._VOLUME_MEASURE(let selection): members.formUnion(selection.typeMembers)
      }
      //SELECT data types (indirectly) referencing the current type as a member of the select list
      members.insert(SDAI.STRING(sMEASURED_VALUE_SELECT.typeName)) // -> Self
      return members
    }

    public var entityReference: SDAI.EntityReference? {
      switch self {
      case ._ABSORBED_DOSE_MEASURE(let selection): return selection.entityReference
      case ._ACCELERATION_MEASURE(let selection): return selection.entityReference
      case ._AMOUNT_OF_SUBSTANCE_MEASURE(let selection): return selection.entityReference
      case ._AREA_MEASURE(let selection): return selection.entityReference
      case ._CAPACITANCE_MEASURE(let selection): return selection.entityReference
      case ._CELSIUS_TEMPERATURE_MEASURE(let selection): return selection.entityReference
      case ._CONDUCTANCE_MEASURE(let selection): return selection.entityReference
      case ._CONTEXT_DEPENDENT_MEASURE(let selection): return selection.entityReference
      case ._COUNT_MEASURE(let selection): return selection.entityReference
      case ._DESCRIPTIVE_MEASURE(let selection): return selection.entityReference
      case ._DOSE_EQUIVALENT_MEASURE(let selection): return selection.entityReference
      case ._ELECTRIC_CHARGE_MEASURE(let selection): return selection.entityReference
      case ._ELECTRIC_CURRENT_MEASURE(let selection): return selection.entityReference
      case ._ELECTRIC_POTENTIAL_MEASURE(let selection): return selection.entityReference
      case ._ENERGY_MEASURE(let selection): return selection.entityReference
      case ._FORCE_MEASURE(let selection): return selection.entityReference
      case ._FREQUENCY_MEASURE(let selection): return selection.entityReference
      case ._ILLUMINANCE_MEASURE(let selection): return selection.entityReference
      case ._INDUCTANCE_MEASURE(let selection): return selection.entityReference
      case ._LENGTH_MEASURE(let selection): return selection.entityReference
      case ._LUMINOUS_FLUX_MEASURE(let selection): return selection.entityReference
      case ._LUMINOUS_INTENSITY_MEASURE(let selection): return selection.entityReference
      case ._MAGNETIC_FLUX_DENSITY_MEASURE(let selection): return selection.entityReference
      case ._MAGNETIC_FLUX_MEASURE(let selection): return selection.entityReference
      case ._MASS_MEASURE(let selection): return selection.entityReference
      case ._NON_NEGATIVE_LENGTH_MEASURE(let selection): return selection.entityReference
      case ._NUMERIC_MEASURE(let selection): return selection.entityReference
      case ._PARAMETER_VALUE(let selection): return selection.entityReference
      case ._PLANE_ANGLE_MEASURE(let selection): return selection.entityReference
      case ._POSITIVE_LENGTH_MEASURE(let selection): return selection.entityReference
      case ._POSITIVE_PLANE_ANGLE_MEASURE(let selection): return selection.entityReference
      case ._POSITIVE_RATIO_MEASURE(let selection): return selection.entityReference
      case ._POWER_MEASURE(let selection): return selection.entityReference
      case ._PRESSURE_MEASURE(let selection): return selection.entityReference
      case ._RADIOACTIVITY_MEASURE(let selection): return selection.entityReference
      case ._RATIO_MEASURE(let selection): return selection.entityReference
      case ._RESISTANCE_MEASURE(let selection): return selection.entityReference
      case ._SOLID_ANGLE_MEASURE(let selection): return selection.entityReference
      case ._THERMODYNAMIC_TEMPERATURE_MEASURE(let selection): return selection.entityReference
      case ._TIME_MEASURE(let selection): return selection.entityReference
      case ._VELOCITY_MEASURE(let selection): return selection.entityReference
      case ._VOLUME_MEASURE(let selection): return selection.entityReference
      }
    }
    public var stringValue: SDAI.STRING? {
      switch self {
      case ._ABSORBED_DOSE_MEASURE(let selection): return selection.stringValue
      case ._ACCELERATION_MEASURE(let selection): return selection.stringValue
      case ._AMOUNT_OF_SUBSTANCE_MEASURE(let selection): return selection.stringValue
      case ._AREA_MEASURE(let selection): return selection.stringValue
      case ._CAPACITANCE_MEASURE(let selection): return selection.stringValue
      case ._CELSIUS_TEMPERATURE_MEASURE(let selection): return selection.stringValue
      case ._CONDUCTANCE_MEASURE(let selection): return selection.stringValue
      case ._CONTEXT_DEPENDENT_MEASURE(let selection): return selection.stringValue
      case ._COUNT_MEASURE(let selection): return selection.stringValue
      case ._DESCRIPTIVE_MEASURE(let selection): return selection.stringValue
      case ._DOSE_EQUIVALENT_MEASURE(let selection): return selection.stringValue
      case ._ELECTRIC_CHARGE_MEASURE(let selection): return selection.stringValue
      case ._ELECTRIC_CURRENT_MEASURE(let selection): return selection.stringValue
      case ._ELECTRIC_POTENTIAL_MEASURE(let selection): return selection.stringValue
      case ._ENERGY_MEASURE(let selection): return selection.stringValue
      case ._FORCE_MEASURE(let selection): return selection.stringValue
      case ._FREQUENCY_MEASURE(let selection): return selection.stringValue
      case ._ILLUMINANCE_MEASURE(let selection): return selection.stringValue
      case ._INDUCTANCE_MEASURE(let selection): return selection.stringValue
      case ._LENGTH_MEASURE(let selection): return selection.stringValue
      case ._LUMINOUS_FLUX_MEASURE(let selection): return selection.stringValue
      case ._LUMINOUS_INTENSITY_MEASURE(let selection): return selection.stringValue
      case ._MAGNETIC_FLUX_DENSITY_MEASURE(let selection): return selection.stringValue
      case ._MAGNETIC_FLUX_MEASURE(let selection): return selection.stringValue
      case ._MASS_MEASURE(let selection): return selection.stringValue
      case ._NON_NEGATIVE_LENGTH_MEASURE(let selection): return selection.stringValue
      case ._NUMERIC_MEASURE(let selection): return selection.stringValue
      case ._PARAMETER_VALUE(let selection): return selection.stringValue
      case ._PLANE_ANGLE_MEASURE(let selection): return selection.stringValue
      case ._POSITIVE_LENGTH_MEASURE(let selection): return selection.stringValue
      case ._POSITIVE_PLANE_ANGLE_MEASURE(let selection): return selection.stringValue
      case ._POSITIVE_RATIO_MEASURE(let selection): return selection.stringValue
      case ._POWER_MEASURE(let selection): return selection.stringValue
      case ._PRESSURE_MEASURE(let selection): return selection.stringValue
      case ._RADIOACTIVITY_MEASURE(let selection): return selection.stringValue
      case ._RATIO_MEASURE(let selection): return selection.stringValue
      case ._RESISTANCE_MEASURE(let selection): return selection.stringValue
      case ._SOLID_ANGLE_MEASURE(let selection): return selection.stringValue
      case ._THERMODYNAMIC_TEMPERATURE_MEASURE(let selection): return selection.stringValue
      case ._TIME_MEASURE(let selection): return selection.stringValue
      case ._VELOCITY_MEASURE(let selection): return selection.stringValue
      case ._VOLUME_MEASURE(let selection): return selection.stringValue
      }
    }
    public var binaryValue: SDAI.BINARY? {
      switch self {
      case ._ABSORBED_DOSE_MEASURE(let selection): return selection.binaryValue
      case ._ACCELERATION_MEASURE(let selection): return selection.binaryValue
      case ._AMOUNT_OF_SUBSTANCE_MEASURE(let selection): return selection.binaryValue
      case ._AREA_MEASURE(let selection): return selection.binaryValue
      case ._CAPACITANCE_MEASURE(let selection): return selection.binaryValue
      case ._CELSIUS_TEMPERATURE_MEASURE(let selection): return selection.binaryValue
      case ._CONDUCTANCE_MEASURE(let selection): return selection.binaryValue
      case ._CONTEXT_DEPENDENT_MEASURE(let selection): return selection.binaryValue
      case ._COUNT_MEASURE(let selection): return selection.binaryValue
      case ._DESCRIPTIVE_MEASURE(let selection): return selection.binaryValue
      case ._DOSE_EQUIVALENT_MEASURE(let selection): return selection.binaryValue
      case ._ELECTRIC_CHARGE_MEASURE(let selection): return selection.binaryValue
      case ._ELECTRIC_CURRENT_MEASURE(let selection): return selection.binaryValue
      case ._ELECTRIC_POTENTIAL_MEASURE(let selection): return selection.binaryValue
      case ._ENERGY_MEASURE(let selection): return selection.binaryValue
      case ._FORCE_MEASURE(let selection): return selection.binaryValue
      case ._FREQUENCY_MEASURE(let selection): return selection.binaryValue
      case ._ILLUMINANCE_MEASURE(let selection): return selection.binaryValue
      case ._INDUCTANCE_MEASURE(let selection): return selection.binaryValue
      case ._LENGTH_MEASURE(let selection): return selection.binaryValue
      case ._LUMINOUS_FLUX_MEASURE(let selection): return selection.binaryValue
      case ._LUMINOUS_INTENSITY_MEASURE(let selection): return selection.binaryValue
      case ._MAGNETIC_FLUX_DENSITY_MEASURE(let selection): return selection.binaryValue
      case ._MAGNETIC_FLUX_MEASURE(let selection): return selection.binaryValue
      case ._MASS_MEASURE(let selection): return selection.binaryValue
      case ._NON_NEGATIVE_LENGTH_MEASURE(let selection): return selection.binaryValue
      case ._NUMERIC_MEASURE(let selection): return selection.binaryValue
      case ._PARAMETER_VALUE(let selection): return selection.binaryValue
      case ._PLANE_ANGLE_MEASURE(let selection): return selection.binaryValue
      case ._POSITIVE_LENGTH_MEASURE(let selection): return selection.binaryValue
      case ._POSITIVE_PLANE_ANGLE_MEASURE(let selection): return selection.binaryValue
      case ._POSITIVE_RATIO_MEASURE(let selection): return selection.binaryValue
      case ._POWER_MEASURE(let selection): return selection.binaryValue
      case ._PRESSURE_MEASURE(let selection): return selection.binaryValue
      case ._RADIOACTIVITY_MEASURE(let selection): return selection.binaryValue
      case ._RATIO_MEASURE(let selection): return selection.binaryValue
      case ._RESISTANCE_MEASURE(let selection): return selection.binaryValue
      case ._SOLID_ANGLE_MEASURE(let selection): return selection.binaryValue
      case ._THERMODYNAMIC_TEMPERATURE_MEASURE(let selection): return selection.binaryValue
      case ._TIME_MEASURE(let selection): return selection.binaryValue
      case ._VELOCITY_MEASURE(let selection): return selection.binaryValue
      case ._VOLUME_MEASURE(let selection): return selection.binaryValue
      }
    }
    public var logicalValue: SDAI.LOGICAL? {
      switch self {
      case ._ABSORBED_DOSE_MEASURE(let selection): return selection.logicalValue
      case ._ACCELERATION_MEASURE(let selection): return selection.logicalValue
      case ._AMOUNT_OF_SUBSTANCE_MEASURE(let selection): return selection.logicalValue
      case ._AREA_MEASURE(let selection): return selection.logicalValue
      case ._CAPACITANCE_MEASURE(let selection): return selection.logicalValue
      case ._CELSIUS_TEMPERATURE_MEASURE(let selection): return selection.logicalValue
      case ._CONDUCTANCE_MEASURE(let selection): return selection.logicalValue
      case ._CONTEXT_DEPENDENT_MEASURE(let selection): return selection.logicalValue
      case ._COUNT_MEASURE(let selection): return selection.logicalValue
      case ._DESCRIPTIVE_MEASURE(let selection): return selection.logicalValue
      case ._DOSE_EQUIVALENT_MEASURE(let selection): return selection.logicalValue
      case ._ELECTRIC_CHARGE_MEASURE(let selection): return selection.logicalValue
      case ._ELECTRIC_CURRENT_MEASURE(let selection): return selection.logicalValue
      case ._ELECTRIC_POTENTIAL_MEASURE(let selection): return selection.logicalValue
      case ._ENERGY_MEASURE(let selection): return selection.logicalValue
      case ._FORCE_MEASURE(let selection): return selection.logicalValue
      case ._FREQUENCY_MEASURE(let selection): return selection.logicalValue
      case ._ILLUMINANCE_MEASURE(let selection): return selection.logicalValue
      case ._INDUCTANCE_MEASURE(let selection): return selection.logicalValue
      case ._LENGTH_MEASURE(let selection): return selection.logicalValue
      case ._LUMINOUS_FLUX_MEASURE(let selection): return selection.logicalValue
      case ._LUMINOUS_INTENSITY_MEASURE(let selection): return selection.logicalValue
      case ._MAGNETIC_FLUX_DENSITY_MEASURE(let selection): return selection.logicalValue
      case ._MAGNETIC_FLUX_MEASURE(let selection): return selection.logicalValue
      case ._MASS_MEASURE(let selection): return selection.logicalValue
      case ._NON_NEGATIVE_LENGTH_MEASURE(let selection): return selection.logicalValue
      case ._NUMERIC_MEASURE(let selection): return selection.logicalValue
      case ._PARAMETER_VALUE(let selection): return selection.logicalValue
      case ._PLANE_ANGLE_MEASURE(let selection): return selection.logicalValue
      case ._POSITIVE_LENGTH_MEASURE(let selection): return selection.logicalValue
      case ._POSITIVE_PLANE_ANGLE_MEASURE(let selection): return selection.logicalValue
      case ._POSITIVE_RATIO_MEASURE(let selection): return selection.logicalValue
      case ._POWER_MEASURE(let selection): return selection.logicalValue
      case ._PRESSURE_MEASURE(let selection): return selection.logicalValue
      case ._RADIOACTIVITY_MEASURE(let selection): return selection.logicalValue
      case ._RATIO_MEASURE(let selection): return selection.logicalValue
      case ._RESISTANCE_MEASURE(let selection): return selection.logicalValue
      case ._SOLID_ANGLE_MEASURE(let selection): return selection.logicalValue
      case ._THERMODYNAMIC_TEMPERATURE_MEASURE(let selection): return selection.logicalValue
      case ._TIME_MEASURE(let selection): return selection.logicalValue
      case ._VELOCITY_MEASURE(let selection): return selection.logicalValue
      case ._VOLUME_MEASURE(let selection): return selection.logicalValue
      }
    }
    public var booleanValue: SDAI.BOOLEAN? {
      switch self {
      case ._ABSORBED_DOSE_MEASURE(let selection): return selection.booleanValue
      case ._ACCELERATION_MEASURE(let selection): return selection.booleanValue
      case ._AMOUNT_OF_SUBSTANCE_MEASURE(let selection): return selection.booleanValue
      case ._AREA_MEASURE(let selection): return selection.booleanValue
      case ._CAPACITANCE_MEASURE(let selection): return selection.booleanValue
      case ._CELSIUS_TEMPERATURE_MEASURE(let selection): return selection.booleanValue
      case ._CONDUCTANCE_MEASURE(let selection): return selection.booleanValue
      case ._CONTEXT_DEPENDENT_MEASURE(let selection): return selection.booleanValue
      case ._COUNT_MEASURE(let selection): return selection.booleanValue
      case ._DESCRIPTIVE_MEASURE(let selection): return selection.booleanValue
      case ._DOSE_EQUIVALENT_MEASURE(let selection): return selection.booleanValue
      case ._ELECTRIC_CHARGE_MEASURE(let selection): return selection.booleanValue
      case ._ELECTRIC_CURRENT_MEASURE(let selection): return selection.booleanValue
      case ._ELECTRIC_POTENTIAL_MEASURE(let selection): return selection.booleanValue
      case ._ENERGY_MEASURE(let selection): return selection.booleanValue
      case ._FORCE_MEASURE(let selection): return selection.booleanValue
      case ._FREQUENCY_MEASURE(let selection): return selection.booleanValue
      case ._ILLUMINANCE_MEASURE(let selection): return selection.booleanValue
      case ._INDUCTANCE_MEASURE(let selection): return selection.booleanValue
      case ._LENGTH_MEASURE(let selection): return selection.booleanValue
      case ._LUMINOUS_FLUX_MEASURE(let selection): return selection.booleanValue
      case ._LUMINOUS_INTENSITY_MEASURE(let selection): return selection.booleanValue
      case ._MAGNETIC_FLUX_DENSITY_MEASURE(let selection): return selection.booleanValue
      case ._MAGNETIC_FLUX_MEASURE(let selection): return selection.booleanValue
      case ._MASS_MEASURE(let selection): return selection.booleanValue
      case ._NON_NEGATIVE_LENGTH_MEASURE(let selection): return selection.booleanValue
      case ._NUMERIC_MEASURE(let selection): return selection.booleanValue
      case ._PARAMETER_VALUE(let selection): return selection.booleanValue
      case ._PLANE_ANGLE_MEASURE(let selection): return selection.booleanValue
      case ._POSITIVE_LENGTH_MEASURE(let selection): return selection.booleanValue
      case ._POSITIVE_PLANE_ANGLE_MEASURE(let selection): return selection.booleanValue
      case ._POSITIVE_RATIO_MEASURE(let selection): return selection.booleanValue
      case ._POWER_MEASURE(let selection): return selection.booleanValue
      case ._PRESSURE_MEASURE(let selection): return selection.booleanValue
      case ._RADIOACTIVITY_MEASURE(let selection): return selection.booleanValue
      case ._RATIO_MEASURE(let selection): return selection.booleanValue
      case ._RESISTANCE_MEASURE(let selection): return selection.booleanValue
      case ._SOLID_ANGLE_MEASURE(let selection): return selection.booleanValue
      case ._THERMODYNAMIC_TEMPERATURE_MEASURE(let selection): return selection.booleanValue
      case ._TIME_MEASURE(let selection): return selection.booleanValue
      case ._VELOCITY_MEASURE(let selection): return selection.booleanValue
      case ._VOLUME_MEASURE(let selection): return selection.booleanValue
      }
    }
    public var numberValue: SDAI.NUMBER? {
      switch self {
      case ._ABSORBED_DOSE_MEASURE(let selection): return selection.numberValue
      case ._ACCELERATION_MEASURE(let selection): return selection.numberValue
      case ._AMOUNT_OF_SUBSTANCE_MEASURE(let selection): return selection.numberValue
      case ._AREA_MEASURE(let selection): return selection.numberValue
      case ._CAPACITANCE_MEASURE(let selection): return selection.numberValue
      case ._CELSIUS_TEMPERATURE_MEASURE(let selection): return selection.numberValue
      case ._CONDUCTANCE_MEASURE(let selection): return selection.numberValue
      case ._CONTEXT_DEPENDENT_MEASURE(let selection): return selection.numberValue
      case ._COUNT_MEASURE(let selection): return selection.numberValue
      case ._DESCRIPTIVE_MEASURE(let selection): return selection.numberValue
      case ._DOSE_EQUIVALENT_MEASURE(let selection): return selection.numberValue
      case ._ELECTRIC_CHARGE_MEASURE(let selection): return selection.numberValue
      case ._ELECTRIC_CURRENT_MEASURE(let selection): return selection.numberValue
      case ._ELECTRIC_POTENTIAL_MEASURE(let selection): return selection.numberValue
      case ._ENERGY_MEASURE(let selection): return selection.numberValue
      case ._FORCE_MEASURE(let selection): return selection.numberValue
      case ._FREQUENCY_MEASURE(let selection): return selection.numberValue
      case ._ILLUMINANCE_MEASURE(let selection): return selection.numberValue
      case ._INDUCTANCE_MEASURE(let selection): return selection.numberValue
      case ._LENGTH_MEASURE(let selection): return selection.numberValue
      case ._LUMINOUS_FLUX_MEASURE(let selection): return selection.numberValue
      case ._LUMINOUS_INTENSITY_MEASURE(let selection): return selection.numberValue
      case ._MAGNETIC_FLUX_DENSITY_MEASURE(let selection): return selection.numberValue
      case ._MAGNETIC_FLUX_MEASURE(let selection): return selection.numberValue
      case ._MASS_MEASURE(let selection): return selection.numberValue
      case ._NON_NEGATIVE_LENGTH_MEASURE(let selection): return selection.numberValue
      case ._NUMERIC_MEASURE(let selection): return selection.numberValue
      case ._PARAMETER_VALUE(let selection): return selection.numberValue
      case ._PLANE_ANGLE_MEASURE(let selection): return selection.numberValue
      case ._POSITIVE_LENGTH_MEASURE(let selection): return selection.numberValue
      case ._POSITIVE_PLANE_ANGLE_MEASURE(let selection): return selection.numberValue
      case ._POSITIVE_RATIO_MEASURE(let selection): return selection.numberValue
      case ._POWER_MEASURE(let selection): return selection.numberValue
      case ._PRESSURE_MEASURE(let selection): return selection.numberValue
      case ._RADIOACTIVITY_MEASURE(let selection): return selection.numberValue
      case ._RATIO_MEASURE(let selection): return selection.numberValue
      case ._RESISTANCE_MEASURE(let selection): return selection.numberValue
      case ._SOLID_ANGLE_MEASURE(let selection): return selection.numberValue
      case ._THERMODYNAMIC_TEMPERATURE_MEASURE(let selection): return selection.numberValue
      case ._TIME_MEASURE(let selection): return selection.numberValue
      case ._VELOCITY_MEASURE(let selection): return selection.numberValue
      case ._VOLUME_MEASURE(let selection): return selection.numberValue
      }
    }
    public var realValue: SDAI.REAL? {
      switch self {
      case ._ABSORBED_DOSE_MEASURE(let selection): return selection.realValue
      case ._ACCELERATION_MEASURE(let selection): return selection.realValue
      case ._AMOUNT_OF_SUBSTANCE_MEASURE(let selection): return selection.realValue
      case ._AREA_MEASURE(let selection): return selection.realValue
      case ._CAPACITANCE_MEASURE(let selection): return selection.realValue
      case ._CELSIUS_TEMPERATURE_MEASURE(let selection): return selection.realValue
      case ._CONDUCTANCE_MEASURE(let selection): return selection.realValue
      case ._CONTEXT_DEPENDENT_MEASURE(let selection): return selection.realValue
      case ._COUNT_MEASURE(let selection): return selection.realValue
      case ._DESCRIPTIVE_MEASURE(let selection): return selection.realValue
      case ._DOSE_EQUIVALENT_MEASURE(let selection): return selection.realValue
      case ._ELECTRIC_CHARGE_MEASURE(let selection): return selection.realValue
      case ._ELECTRIC_CURRENT_MEASURE(let selection): return selection.realValue
      case ._ELECTRIC_POTENTIAL_MEASURE(let selection): return selection.realValue
      case ._ENERGY_MEASURE(let selection): return selection.realValue
      case ._FORCE_MEASURE(let selection): return selection.realValue
      case ._FREQUENCY_MEASURE(let selection): return selection.realValue
      case ._ILLUMINANCE_MEASURE(let selection): return selection.realValue
      case ._INDUCTANCE_MEASURE(let selection): return selection.realValue
      case ._LENGTH_MEASURE(let selection): return selection.realValue
      case ._LUMINOUS_FLUX_MEASURE(let selection): return selection.realValue
      case ._LUMINOUS_INTENSITY_MEASURE(let selection): return selection.realValue
      case ._MAGNETIC_FLUX_DENSITY_MEASURE(let selection): return selection.realValue
      case ._MAGNETIC_FLUX_MEASURE(let selection): return selection.realValue
      case ._MASS_MEASURE(let selection): return selection.realValue
      case ._NON_NEGATIVE_LENGTH_MEASURE(let selection): return selection.realValue
      case ._NUMERIC_MEASURE(let selection): return selection.realValue
      case ._PARAMETER_VALUE(let selection): return selection.realValue
      case ._PLANE_ANGLE_MEASURE(let selection): return selection.realValue
      case ._POSITIVE_LENGTH_MEASURE(let selection): return selection.realValue
      case ._POSITIVE_PLANE_ANGLE_MEASURE(let selection): return selection.realValue
      case ._POSITIVE_RATIO_MEASURE(let selection): return selection.realValue
      case ._POWER_MEASURE(let selection): return selection.realValue
      case ._PRESSURE_MEASURE(let selection): return selection.realValue
      case ._RADIOACTIVITY_MEASURE(let selection): return selection.realValue
      case ._RATIO_MEASURE(let selection): return selection.realValue
      case ._RESISTANCE_MEASURE(let selection): return selection.realValue
      case ._SOLID_ANGLE_MEASURE(let selection): return selection.realValue
      case ._THERMODYNAMIC_TEMPERATURE_MEASURE(let selection): return selection.realValue
      case ._TIME_MEASURE(let selection): return selection.realValue
      case ._VELOCITY_MEASURE(let selection): return selection.realValue
      case ._VOLUME_MEASURE(let selection): return selection.realValue
      }
    }
    public var integerValue: SDAI.INTEGER? {
      switch self {
      case ._ABSORBED_DOSE_MEASURE(let selection): return selection.integerValue
      case ._ACCELERATION_MEASURE(let selection): return selection.integerValue
      case ._AMOUNT_OF_SUBSTANCE_MEASURE(let selection): return selection.integerValue
      case ._AREA_MEASURE(let selection): return selection.integerValue
      case ._CAPACITANCE_MEASURE(let selection): return selection.integerValue
      case ._CELSIUS_TEMPERATURE_MEASURE(let selection): return selection.integerValue
      case ._CONDUCTANCE_MEASURE(let selection): return selection.integerValue
      case ._CONTEXT_DEPENDENT_MEASURE(let selection): return selection.integerValue
      case ._COUNT_MEASURE(let selection): return selection.integerValue
      case ._DESCRIPTIVE_MEASURE(let selection): return selection.integerValue
      case ._DOSE_EQUIVALENT_MEASURE(let selection): return selection.integerValue
      case ._ELECTRIC_CHARGE_MEASURE(let selection): return selection.integerValue
      case ._ELECTRIC_CURRENT_MEASURE(let selection): return selection.integerValue
      case ._ELECTRIC_POTENTIAL_MEASURE(let selection): return selection.integerValue
      case ._ENERGY_MEASURE(let selection): return selection.integerValue
      case ._FORCE_MEASURE(let selection): return selection.integerValue
      case ._FREQUENCY_MEASURE(let selection): return selection.integerValue
      case ._ILLUMINANCE_MEASURE(let selection): return selection.integerValue
      case ._INDUCTANCE_MEASURE(let selection): return selection.integerValue
      case ._LENGTH_MEASURE(let selection): return selection.integerValue
      case ._LUMINOUS_FLUX_MEASURE(let selection): return selection.integerValue
      case ._LUMINOUS_INTENSITY_MEASURE(let selection): return selection.integerValue
      case ._MAGNETIC_FLUX_DENSITY_MEASURE(let selection): return selection.integerValue
      case ._MAGNETIC_FLUX_MEASURE(let selection): return selection.integerValue
      case ._MASS_MEASURE(let selection): return selection.integerValue
      case ._NON_NEGATIVE_LENGTH_MEASURE(let selection): return selection.integerValue
      case ._NUMERIC_MEASURE(let selection): return selection.integerValue
      case ._PARAMETER_VALUE(let selection): return selection.integerValue
      case ._PLANE_ANGLE_MEASURE(let selection): return selection.integerValue
      case ._POSITIVE_LENGTH_MEASURE(let selection): return selection.integerValue
      case ._POSITIVE_PLANE_ANGLE_MEASURE(let selection): return selection.integerValue
      case ._POSITIVE_RATIO_MEASURE(let selection): return selection.integerValue
      case ._POWER_MEASURE(let selection): return selection.integerValue
      case ._PRESSURE_MEASURE(let selection): return selection.integerValue
      case ._RADIOACTIVITY_MEASURE(let selection): return selection.integerValue
      case ._RATIO_MEASURE(let selection): return selection.integerValue
      case ._RESISTANCE_MEASURE(let selection): return selection.integerValue
      case ._SOLID_ANGLE_MEASURE(let selection): return selection.integerValue
      case ._THERMODYNAMIC_TEMPERATURE_MEASURE(let selection): return selection.integerValue
      case ._TIME_MEASURE(let selection): return selection.integerValue
      case ._VELOCITY_MEASURE(let selection): return selection.integerValue
      case ._VOLUME_MEASURE(let selection): return selection.integerValue
      }
    }
    public var genericEnumValue: SDAI.GenericEnumValue? {
      switch self {
      case ._ABSORBED_DOSE_MEASURE(let selection): return selection.genericEnumValue
      case ._ACCELERATION_MEASURE(let selection): return selection.genericEnumValue
      case ._AMOUNT_OF_SUBSTANCE_MEASURE(let selection): return selection.genericEnumValue
      case ._AREA_MEASURE(let selection): return selection.genericEnumValue
      case ._CAPACITANCE_MEASURE(let selection): return selection.genericEnumValue
      case ._CELSIUS_TEMPERATURE_MEASURE(let selection): return selection.genericEnumValue
      case ._CONDUCTANCE_MEASURE(let selection): return selection.genericEnumValue
      case ._CONTEXT_DEPENDENT_MEASURE(let selection): return selection.genericEnumValue
      case ._COUNT_MEASURE(let selection): return selection.genericEnumValue
      case ._DESCRIPTIVE_MEASURE(let selection): return selection.genericEnumValue
      case ._DOSE_EQUIVALENT_MEASURE(let selection): return selection.genericEnumValue
      case ._ELECTRIC_CHARGE_MEASURE(let selection): return selection.genericEnumValue
      case ._ELECTRIC_CURRENT_MEASURE(let selection): return selection.genericEnumValue
      case ._ELECTRIC_POTENTIAL_MEASURE(let selection): return selection.genericEnumValue
      case ._ENERGY_MEASURE(let selection): return selection.genericEnumValue
      case ._FORCE_MEASURE(let selection): return selection.genericEnumValue
      case ._FREQUENCY_MEASURE(let selection): return selection.genericEnumValue
      case ._ILLUMINANCE_MEASURE(let selection): return selection.genericEnumValue
      case ._INDUCTANCE_MEASURE(let selection): return selection.genericEnumValue
      case ._LENGTH_MEASURE(let selection): return selection.genericEnumValue
      case ._LUMINOUS_FLUX_MEASURE(let selection): return selection.genericEnumValue
      case ._LUMINOUS_INTENSITY_MEASURE(let selection): return selection.genericEnumValue
      case ._MAGNETIC_FLUX_DENSITY_MEASURE(let selection): return selection.genericEnumValue
      case ._MAGNETIC_FLUX_MEASURE(let selection): return selection.genericEnumValue
      case ._MASS_MEASURE(let selection): return selection.genericEnumValue
      case ._NON_NEGATIVE_LENGTH_MEASURE(let selection): return selection.genericEnumValue
      case ._NUMERIC_MEASURE(let selection): return selection.genericEnumValue
      case ._PARAMETER_VALUE(let selection): return selection.genericEnumValue
      case ._PLANE_ANGLE_MEASURE(let selection): return selection.genericEnumValue
      case ._POSITIVE_LENGTH_MEASURE(let selection): return selection.genericEnumValue
      case ._POSITIVE_PLANE_ANGLE_MEASURE(let selection): return selection.genericEnumValue
      case ._POSITIVE_RATIO_MEASURE(let selection): return selection.genericEnumValue
      case ._POWER_MEASURE(let selection): return selection.genericEnumValue
      case ._PRESSURE_MEASURE(let selection): return selection.genericEnumValue
      case ._RADIOACTIVITY_MEASURE(let selection): return selection.genericEnumValue
      case ._RATIO_MEASURE(let selection): return selection.genericEnumValue
      case ._RESISTANCE_MEASURE(let selection): return selection.genericEnumValue
      case ._SOLID_ANGLE_MEASURE(let selection): return selection.genericEnumValue
      case ._THERMODYNAMIC_TEMPERATURE_MEASURE(let selection): return selection.genericEnumValue
      case ._TIME_MEASURE(let selection): return selection.genericEnumValue
      case ._VELOCITY_MEASURE(let selection): return selection.genericEnumValue
      case ._VOLUME_MEASURE(let selection): return selection.genericEnumValue
      }
    }
    public func arrayOptionalValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.ARRAY_OPTIONAL<ELEM>? {
      switch self {
      case ._ABSORBED_DOSE_MEASURE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._ACCELERATION_MEASURE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._AMOUNT_OF_SUBSTANCE_MEASURE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._AREA_MEASURE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._CAPACITANCE_MEASURE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._CELSIUS_TEMPERATURE_MEASURE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._CONDUCTANCE_MEASURE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._CONTEXT_DEPENDENT_MEASURE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._COUNT_MEASURE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._DESCRIPTIVE_MEASURE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._DOSE_EQUIVALENT_MEASURE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._ELECTRIC_CHARGE_MEASURE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._ELECTRIC_CURRENT_MEASURE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._ELECTRIC_POTENTIAL_MEASURE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._ENERGY_MEASURE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._FORCE_MEASURE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._FREQUENCY_MEASURE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._ILLUMINANCE_MEASURE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._INDUCTANCE_MEASURE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._LENGTH_MEASURE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._LUMINOUS_FLUX_MEASURE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._LUMINOUS_INTENSITY_MEASURE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._MAGNETIC_FLUX_DENSITY_MEASURE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._MAGNETIC_FLUX_MEASURE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._MASS_MEASURE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._NON_NEGATIVE_LENGTH_MEASURE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._NUMERIC_MEASURE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PARAMETER_VALUE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PLANE_ANGLE_MEASURE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._POSITIVE_LENGTH_MEASURE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._POSITIVE_PLANE_ANGLE_MEASURE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._POSITIVE_RATIO_MEASURE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._POWER_MEASURE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PRESSURE_MEASURE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._RADIOACTIVITY_MEASURE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._RATIO_MEASURE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._RESISTANCE_MEASURE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._SOLID_ANGLE_MEASURE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._THERMODYNAMIC_TEMPERATURE_MEASURE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._TIME_MEASURE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._VELOCITY_MEASURE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._VOLUME_MEASURE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      }
    }
    public func arrayValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.ARRAY<ELEM>? {
      switch self {
      case ._ABSORBED_DOSE_MEASURE(let selection): return selection.arrayValue(elementType:elementType)
      case ._ACCELERATION_MEASURE(let selection): return selection.arrayValue(elementType:elementType)
      case ._AMOUNT_OF_SUBSTANCE_MEASURE(let selection): return selection.arrayValue(elementType:elementType)
      case ._AREA_MEASURE(let selection): return selection.arrayValue(elementType:elementType)
      case ._CAPACITANCE_MEASURE(let selection): return selection.arrayValue(elementType:elementType)
      case ._CELSIUS_TEMPERATURE_MEASURE(let selection): return selection.arrayValue(elementType:elementType)
      case ._CONDUCTANCE_MEASURE(let selection): return selection.arrayValue(elementType:elementType)
      case ._CONTEXT_DEPENDENT_MEASURE(let selection): return selection.arrayValue(elementType:elementType)
      case ._COUNT_MEASURE(let selection): return selection.arrayValue(elementType:elementType)
      case ._DESCRIPTIVE_MEASURE(let selection): return selection.arrayValue(elementType:elementType)
      case ._DOSE_EQUIVALENT_MEASURE(let selection): return selection.arrayValue(elementType:elementType)
      case ._ELECTRIC_CHARGE_MEASURE(let selection): return selection.arrayValue(elementType:elementType)
      case ._ELECTRIC_CURRENT_MEASURE(let selection): return selection.arrayValue(elementType:elementType)
      case ._ELECTRIC_POTENTIAL_MEASURE(let selection): return selection.arrayValue(elementType:elementType)
      case ._ENERGY_MEASURE(let selection): return selection.arrayValue(elementType:elementType)
      case ._FORCE_MEASURE(let selection): return selection.arrayValue(elementType:elementType)
      case ._FREQUENCY_MEASURE(let selection): return selection.arrayValue(elementType:elementType)
      case ._ILLUMINANCE_MEASURE(let selection): return selection.arrayValue(elementType:elementType)
      case ._INDUCTANCE_MEASURE(let selection): return selection.arrayValue(elementType:elementType)
      case ._LENGTH_MEASURE(let selection): return selection.arrayValue(elementType:elementType)
      case ._LUMINOUS_FLUX_MEASURE(let selection): return selection.arrayValue(elementType:elementType)
      case ._LUMINOUS_INTENSITY_MEASURE(let selection): return selection.arrayValue(elementType:elementType)
      case ._MAGNETIC_FLUX_DENSITY_MEASURE(let selection): return selection.arrayValue(elementType:elementType)
      case ._MAGNETIC_FLUX_MEASURE(let selection): return selection.arrayValue(elementType:elementType)
      case ._MASS_MEASURE(let selection): return selection.arrayValue(elementType:elementType)
      case ._NON_NEGATIVE_LENGTH_MEASURE(let selection): return selection.arrayValue(elementType:elementType)
      case ._NUMERIC_MEASURE(let selection): return selection.arrayValue(elementType:elementType)
      case ._PARAMETER_VALUE(let selection): return selection.arrayValue(elementType:elementType)
      case ._PLANE_ANGLE_MEASURE(let selection): return selection.arrayValue(elementType:elementType)
      case ._POSITIVE_LENGTH_MEASURE(let selection): return selection.arrayValue(elementType:elementType)
      case ._POSITIVE_PLANE_ANGLE_MEASURE(let selection): return selection.arrayValue(elementType:elementType)
      case ._POSITIVE_RATIO_MEASURE(let selection): return selection.arrayValue(elementType:elementType)
      case ._POWER_MEASURE(let selection): return selection.arrayValue(elementType:elementType)
      case ._PRESSURE_MEASURE(let selection): return selection.arrayValue(elementType:elementType)
      case ._RADIOACTIVITY_MEASURE(let selection): return selection.arrayValue(elementType:elementType)
      case ._RATIO_MEASURE(let selection): return selection.arrayValue(elementType:elementType)
      case ._RESISTANCE_MEASURE(let selection): return selection.arrayValue(elementType:elementType)
      case ._SOLID_ANGLE_MEASURE(let selection): return selection.arrayValue(elementType:elementType)
      case ._THERMODYNAMIC_TEMPERATURE_MEASURE(let selection): return selection.arrayValue(elementType:elementType)
      case ._TIME_MEASURE(let selection): return selection.arrayValue(elementType:elementType)
      case ._VELOCITY_MEASURE(let selection): return selection.arrayValue(elementType:elementType)
      case ._VOLUME_MEASURE(let selection): return selection.arrayValue(elementType:elementType)
      }
    }
    public func listValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.LIST<ELEM>? {
      switch self {
      case ._ABSORBED_DOSE_MEASURE(let selection): return selection.listValue(elementType:elementType)
      case ._ACCELERATION_MEASURE(let selection): return selection.listValue(elementType:elementType)
      case ._AMOUNT_OF_SUBSTANCE_MEASURE(let selection): return selection.listValue(elementType:elementType)
      case ._AREA_MEASURE(let selection): return selection.listValue(elementType:elementType)
      case ._CAPACITANCE_MEASURE(let selection): return selection.listValue(elementType:elementType)
      case ._CELSIUS_TEMPERATURE_MEASURE(let selection): return selection.listValue(elementType:elementType)
      case ._CONDUCTANCE_MEASURE(let selection): return selection.listValue(elementType:elementType)
      case ._CONTEXT_DEPENDENT_MEASURE(let selection): return selection.listValue(elementType:elementType)
      case ._COUNT_MEASURE(let selection): return selection.listValue(elementType:elementType)
      case ._DESCRIPTIVE_MEASURE(let selection): return selection.listValue(elementType:elementType)
      case ._DOSE_EQUIVALENT_MEASURE(let selection): return selection.listValue(elementType:elementType)
      case ._ELECTRIC_CHARGE_MEASURE(let selection): return selection.listValue(elementType:elementType)
      case ._ELECTRIC_CURRENT_MEASURE(let selection): return selection.listValue(elementType:elementType)
      case ._ELECTRIC_POTENTIAL_MEASURE(let selection): return selection.listValue(elementType:elementType)
      case ._ENERGY_MEASURE(let selection): return selection.listValue(elementType:elementType)
      case ._FORCE_MEASURE(let selection): return selection.listValue(elementType:elementType)
      case ._FREQUENCY_MEASURE(let selection): return selection.listValue(elementType:elementType)
      case ._ILLUMINANCE_MEASURE(let selection): return selection.listValue(elementType:elementType)
      case ._INDUCTANCE_MEASURE(let selection): return selection.listValue(elementType:elementType)
      case ._LENGTH_MEASURE(let selection): return selection.listValue(elementType:elementType)
      case ._LUMINOUS_FLUX_MEASURE(let selection): return selection.listValue(elementType:elementType)
      case ._LUMINOUS_INTENSITY_MEASURE(let selection): return selection.listValue(elementType:elementType)
      case ._MAGNETIC_FLUX_DENSITY_MEASURE(let selection): return selection.listValue(elementType:elementType)
      case ._MAGNETIC_FLUX_MEASURE(let selection): return selection.listValue(elementType:elementType)
      case ._MASS_MEASURE(let selection): return selection.listValue(elementType:elementType)
      case ._NON_NEGATIVE_LENGTH_MEASURE(let selection): return selection.listValue(elementType:elementType)
      case ._NUMERIC_MEASURE(let selection): return selection.listValue(elementType:elementType)
      case ._PARAMETER_VALUE(let selection): return selection.listValue(elementType:elementType)
      case ._PLANE_ANGLE_MEASURE(let selection): return selection.listValue(elementType:elementType)
      case ._POSITIVE_LENGTH_MEASURE(let selection): return selection.listValue(elementType:elementType)
      case ._POSITIVE_PLANE_ANGLE_MEASURE(let selection): return selection.listValue(elementType:elementType)
      case ._POSITIVE_RATIO_MEASURE(let selection): return selection.listValue(elementType:elementType)
      case ._POWER_MEASURE(let selection): return selection.listValue(elementType:elementType)
      case ._PRESSURE_MEASURE(let selection): return selection.listValue(elementType:elementType)
      case ._RADIOACTIVITY_MEASURE(let selection): return selection.listValue(elementType:elementType)
      case ._RATIO_MEASURE(let selection): return selection.listValue(elementType:elementType)
      case ._RESISTANCE_MEASURE(let selection): return selection.listValue(elementType:elementType)
      case ._SOLID_ANGLE_MEASURE(let selection): return selection.listValue(elementType:elementType)
      case ._THERMODYNAMIC_TEMPERATURE_MEASURE(let selection): return selection.listValue(elementType:elementType)
      case ._TIME_MEASURE(let selection): return selection.listValue(elementType:elementType)
      case ._VELOCITY_MEASURE(let selection): return selection.listValue(elementType:elementType)
      case ._VOLUME_MEASURE(let selection): return selection.listValue(elementType:elementType)
      }
    }
    public func bagValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.BAG<ELEM>? {
      switch self {
      case ._ABSORBED_DOSE_MEASURE(let selection): return selection.bagValue(elementType:elementType)
      case ._ACCELERATION_MEASURE(let selection): return selection.bagValue(elementType:elementType)
      case ._AMOUNT_OF_SUBSTANCE_MEASURE(let selection): return selection.bagValue(elementType:elementType)
      case ._AREA_MEASURE(let selection): return selection.bagValue(elementType:elementType)
      case ._CAPACITANCE_MEASURE(let selection): return selection.bagValue(elementType:elementType)
      case ._CELSIUS_TEMPERATURE_MEASURE(let selection): return selection.bagValue(elementType:elementType)
      case ._CONDUCTANCE_MEASURE(let selection): return selection.bagValue(elementType:elementType)
      case ._CONTEXT_DEPENDENT_MEASURE(let selection): return selection.bagValue(elementType:elementType)
      case ._COUNT_MEASURE(let selection): return selection.bagValue(elementType:elementType)
      case ._DESCRIPTIVE_MEASURE(let selection): return selection.bagValue(elementType:elementType)
      case ._DOSE_EQUIVALENT_MEASURE(let selection): return selection.bagValue(elementType:elementType)
      case ._ELECTRIC_CHARGE_MEASURE(let selection): return selection.bagValue(elementType:elementType)
      case ._ELECTRIC_CURRENT_MEASURE(let selection): return selection.bagValue(elementType:elementType)
      case ._ELECTRIC_POTENTIAL_MEASURE(let selection): return selection.bagValue(elementType:elementType)
      case ._ENERGY_MEASURE(let selection): return selection.bagValue(elementType:elementType)
      case ._FORCE_MEASURE(let selection): return selection.bagValue(elementType:elementType)
      case ._FREQUENCY_MEASURE(let selection): return selection.bagValue(elementType:elementType)
      case ._ILLUMINANCE_MEASURE(let selection): return selection.bagValue(elementType:elementType)
      case ._INDUCTANCE_MEASURE(let selection): return selection.bagValue(elementType:elementType)
      case ._LENGTH_MEASURE(let selection): return selection.bagValue(elementType:elementType)
      case ._LUMINOUS_FLUX_MEASURE(let selection): return selection.bagValue(elementType:elementType)
      case ._LUMINOUS_INTENSITY_MEASURE(let selection): return selection.bagValue(elementType:elementType)
      case ._MAGNETIC_FLUX_DENSITY_MEASURE(let selection): return selection.bagValue(elementType:elementType)
      case ._MAGNETIC_FLUX_MEASURE(let selection): return selection.bagValue(elementType:elementType)
      case ._MASS_MEASURE(let selection): return selection.bagValue(elementType:elementType)
      case ._NON_NEGATIVE_LENGTH_MEASURE(let selection): return selection.bagValue(elementType:elementType)
      case ._NUMERIC_MEASURE(let selection): return selection.bagValue(elementType:elementType)
      case ._PARAMETER_VALUE(let selection): return selection.bagValue(elementType:elementType)
      case ._PLANE_ANGLE_MEASURE(let selection): return selection.bagValue(elementType:elementType)
      case ._POSITIVE_LENGTH_MEASURE(let selection): return selection.bagValue(elementType:elementType)
      case ._POSITIVE_PLANE_ANGLE_MEASURE(let selection): return selection.bagValue(elementType:elementType)
      case ._POSITIVE_RATIO_MEASURE(let selection): return selection.bagValue(elementType:elementType)
      case ._POWER_MEASURE(let selection): return selection.bagValue(elementType:elementType)
      case ._PRESSURE_MEASURE(let selection): return selection.bagValue(elementType:elementType)
      case ._RADIOACTIVITY_MEASURE(let selection): return selection.bagValue(elementType:elementType)
      case ._RATIO_MEASURE(let selection): return selection.bagValue(elementType:elementType)
      case ._RESISTANCE_MEASURE(let selection): return selection.bagValue(elementType:elementType)
      case ._SOLID_ANGLE_MEASURE(let selection): return selection.bagValue(elementType:elementType)
      case ._THERMODYNAMIC_TEMPERATURE_MEASURE(let selection): return selection.bagValue(elementType:elementType)
      case ._TIME_MEASURE(let selection): return selection.bagValue(elementType:elementType)
      case ._VELOCITY_MEASURE(let selection): return selection.bagValue(elementType:elementType)
      case ._VOLUME_MEASURE(let selection): return selection.bagValue(elementType:elementType)
      }
    }
    public func setValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.SET<ELEM>? {
      switch self {
      case ._ABSORBED_DOSE_MEASURE(let selection): return selection.setValue(elementType:elementType)
      case ._ACCELERATION_MEASURE(let selection): return selection.setValue(elementType:elementType)
      case ._AMOUNT_OF_SUBSTANCE_MEASURE(let selection): return selection.setValue(elementType:elementType)
      case ._AREA_MEASURE(let selection): return selection.setValue(elementType:elementType)
      case ._CAPACITANCE_MEASURE(let selection): return selection.setValue(elementType:elementType)
      case ._CELSIUS_TEMPERATURE_MEASURE(let selection): return selection.setValue(elementType:elementType)
      case ._CONDUCTANCE_MEASURE(let selection): return selection.setValue(elementType:elementType)
      case ._CONTEXT_DEPENDENT_MEASURE(let selection): return selection.setValue(elementType:elementType)
      case ._COUNT_MEASURE(let selection): return selection.setValue(elementType:elementType)
      case ._DESCRIPTIVE_MEASURE(let selection): return selection.setValue(elementType:elementType)
      case ._DOSE_EQUIVALENT_MEASURE(let selection): return selection.setValue(elementType:elementType)
      case ._ELECTRIC_CHARGE_MEASURE(let selection): return selection.setValue(elementType:elementType)
      case ._ELECTRIC_CURRENT_MEASURE(let selection): return selection.setValue(elementType:elementType)
      case ._ELECTRIC_POTENTIAL_MEASURE(let selection): return selection.setValue(elementType:elementType)
      case ._ENERGY_MEASURE(let selection): return selection.setValue(elementType:elementType)
      case ._FORCE_MEASURE(let selection): return selection.setValue(elementType:elementType)
      case ._FREQUENCY_MEASURE(let selection): return selection.setValue(elementType:elementType)
      case ._ILLUMINANCE_MEASURE(let selection): return selection.setValue(elementType:elementType)
      case ._INDUCTANCE_MEASURE(let selection): return selection.setValue(elementType:elementType)
      case ._LENGTH_MEASURE(let selection): return selection.setValue(elementType:elementType)
      case ._LUMINOUS_FLUX_MEASURE(let selection): return selection.setValue(elementType:elementType)
      case ._LUMINOUS_INTENSITY_MEASURE(let selection): return selection.setValue(elementType:elementType)
      case ._MAGNETIC_FLUX_DENSITY_MEASURE(let selection): return selection.setValue(elementType:elementType)
      case ._MAGNETIC_FLUX_MEASURE(let selection): return selection.setValue(elementType:elementType)
      case ._MASS_MEASURE(let selection): return selection.setValue(elementType:elementType)
      case ._NON_NEGATIVE_LENGTH_MEASURE(let selection): return selection.setValue(elementType:elementType)
      case ._NUMERIC_MEASURE(let selection): return selection.setValue(elementType:elementType)
      case ._PARAMETER_VALUE(let selection): return selection.setValue(elementType:elementType)
      case ._PLANE_ANGLE_MEASURE(let selection): return selection.setValue(elementType:elementType)
      case ._POSITIVE_LENGTH_MEASURE(let selection): return selection.setValue(elementType:elementType)
      case ._POSITIVE_PLANE_ANGLE_MEASURE(let selection): return selection.setValue(elementType:elementType)
      case ._POSITIVE_RATIO_MEASURE(let selection): return selection.setValue(elementType:elementType)
      case ._POWER_MEASURE(let selection): return selection.setValue(elementType:elementType)
      case ._PRESSURE_MEASURE(let selection): return selection.setValue(elementType:elementType)
      case ._RADIOACTIVITY_MEASURE(let selection): return selection.setValue(elementType:elementType)
      case ._RATIO_MEASURE(let selection): return selection.setValue(elementType:elementType)
      case ._RESISTANCE_MEASURE(let selection): return selection.setValue(elementType:elementType)
      case ._SOLID_ANGLE_MEASURE(let selection): return selection.setValue(elementType:elementType)
      case ._THERMODYNAMIC_TEMPERATURE_MEASURE(let selection): return selection.setValue(elementType:elementType)
      case ._TIME_MEASURE(let selection): return selection.setValue(elementType:elementType)
      case ._VELOCITY_MEASURE(let selection): return selection.setValue(elementType:elementType)
      case ._VOLUME_MEASURE(let selection): return selection.setValue(elementType:elementType)
      }
    }
    public func enumValue<ENUM:SDAIEnumerationType>(enumType:ENUM.Type) -> ENUM? {
      switch self {
      case ._ABSORBED_DOSE_MEASURE(let selection): return selection.enumValue(enumType:enumType)
      case ._ACCELERATION_MEASURE(let selection): return selection.enumValue(enumType:enumType)
      case ._AMOUNT_OF_SUBSTANCE_MEASURE(let selection): return selection.enumValue(enumType:enumType)
      case ._AREA_MEASURE(let selection): return selection.enumValue(enumType:enumType)
      case ._CAPACITANCE_MEASURE(let selection): return selection.enumValue(enumType:enumType)
      case ._CELSIUS_TEMPERATURE_MEASURE(let selection): return selection.enumValue(enumType:enumType)
      case ._CONDUCTANCE_MEASURE(let selection): return selection.enumValue(enumType:enumType)
      case ._CONTEXT_DEPENDENT_MEASURE(let selection): return selection.enumValue(enumType:enumType)
      case ._COUNT_MEASURE(let selection): return selection.enumValue(enumType:enumType)
      case ._DESCRIPTIVE_MEASURE(let selection): return selection.enumValue(enumType:enumType)
      case ._DOSE_EQUIVALENT_MEASURE(let selection): return selection.enumValue(enumType:enumType)
      case ._ELECTRIC_CHARGE_MEASURE(let selection): return selection.enumValue(enumType:enumType)
      case ._ELECTRIC_CURRENT_MEASURE(let selection): return selection.enumValue(enumType:enumType)
      case ._ELECTRIC_POTENTIAL_MEASURE(let selection): return selection.enumValue(enumType:enumType)
      case ._ENERGY_MEASURE(let selection): return selection.enumValue(enumType:enumType)
      case ._FORCE_MEASURE(let selection): return selection.enumValue(enumType:enumType)
      case ._FREQUENCY_MEASURE(let selection): return selection.enumValue(enumType:enumType)
      case ._ILLUMINANCE_MEASURE(let selection): return selection.enumValue(enumType:enumType)
      case ._INDUCTANCE_MEASURE(let selection): return selection.enumValue(enumType:enumType)
      case ._LENGTH_MEASURE(let selection): return selection.enumValue(enumType:enumType)
      case ._LUMINOUS_FLUX_MEASURE(let selection): return selection.enumValue(enumType:enumType)
      case ._LUMINOUS_INTENSITY_MEASURE(let selection): return selection.enumValue(enumType:enumType)
      case ._MAGNETIC_FLUX_DENSITY_MEASURE(let selection): return selection.enumValue(enumType:enumType)
      case ._MAGNETIC_FLUX_MEASURE(let selection): return selection.enumValue(enumType:enumType)
      case ._MASS_MEASURE(let selection): return selection.enumValue(enumType:enumType)
      case ._NON_NEGATIVE_LENGTH_MEASURE(let selection): return selection.enumValue(enumType:enumType)
      case ._NUMERIC_MEASURE(let selection): return selection.enumValue(enumType:enumType)
      case ._PARAMETER_VALUE(let selection): return selection.enumValue(enumType:enumType)
      case ._PLANE_ANGLE_MEASURE(let selection): return selection.enumValue(enumType:enumType)
      case ._POSITIVE_LENGTH_MEASURE(let selection): return selection.enumValue(enumType:enumType)
      case ._POSITIVE_PLANE_ANGLE_MEASURE(let selection): return selection.enumValue(enumType:enumType)
      case ._POSITIVE_RATIO_MEASURE(let selection): return selection.enumValue(enumType:enumType)
      case ._POWER_MEASURE(let selection): return selection.enumValue(enumType:enumType)
      case ._PRESSURE_MEASURE(let selection): return selection.enumValue(enumType:enumType)
      case ._RADIOACTIVITY_MEASURE(let selection): return selection.enumValue(enumType:enumType)
      case ._RATIO_MEASURE(let selection): return selection.enumValue(enumType:enumType)
      case ._RESISTANCE_MEASURE(let selection): return selection.enumValue(enumType:enumType)
      case ._SOLID_ANGLE_MEASURE(let selection): return selection.enumValue(enumType:enumType)
      case ._THERMODYNAMIC_TEMPERATURE_MEASURE(let selection): return selection.enumValue(enumType:enumType)
      case ._TIME_MEASURE(let selection): return selection.enumValue(enumType:enumType)
      case ._VELOCITY_MEASURE(let selection): return selection.enumValue(enumType:enumType)
      case ._VOLUME_MEASURE(let selection): return selection.enumValue(enumType:enumType)
      }
    }

    //MARK: SDAIUnderlyingType
    public typealias FundamentalType = Self
    public static var typeName: String = "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.MEASURE_VALUE"
    public var asFundamentalType: FundamentalType { return self }

    //MARK: SDAIObservableAggregateElement
    public var entityReferences: AnySequence<SDAI.EntityReference> {
      switch self {
      case ._ABSORBED_DOSE_MEASURE: return AnySequence<SDAI.EntityReference>(EmptyCollection<SDAI.EntityReference>())
      case ._ACCELERATION_MEASURE: return AnySequence<SDAI.EntityReference>(EmptyCollection<SDAI.EntityReference>())
      case ._AMOUNT_OF_SUBSTANCE_MEASURE: return AnySequence<SDAI.EntityReference>(EmptyCollection<SDAI.EntityReference>())
      case ._AREA_MEASURE: return AnySequence<SDAI.EntityReference>(EmptyCollection<SDAI.EntityReference>())
      case ._CAPACITANCE_MEASURE: return AnySequence<SDAI.EntityReference>(EmptyCollection<SDAI.EntityReference>())
      case ._CELSIUS_TEMPERATURE_MEASURE: return AnySequence<SDAI.EntityReference>(EmptyCollection<SDAI.EntityReference>())
      case ._CONDUCTANCE_MEASURE: return AnySequence<SDAI.EntityReference>(EmptyCollection<SDAI.EntityReference>())
      case ._CONTEXT_DEPENDENT_MEASURE: return AnySequence<SDAI.EntityReference>(EmptyCollection<SDAI.EntityReference>())
      case ._COUNT_MEASURE: return AnySequence<SDAI.EntityReference>(EmptyCollection<SDAI.EntityReference>())
      case ._DESCRIPTIVE_MEASURE: return AnySequence<SDAI.EntityReference>(EmptyCollection<SDAI.EntityReference>())
      case ._DOSE_EQUIVALENT_MEASURE: return AnySequence<SDAI.EntityReference>(EmptyCollection<SDAI.EntityReference>())
      case ._ELECTRIC_CHARGE_MEASURE: return AnySequence<SDAI.EntityReference>(EmptyCollection<SDAI.EntityReference>())
      case ._ELECTRIC_CURRENT_MEASURE: return AnySequence<SDAI.EntityReference>(EmptyCollection<SDAI.EntityReference>())
      case ._ELECTRIC_POTENTIAL_MEASURE: return AnySequence<SDAI.EntityReference>(EmptyCollection<SDAI.EntityReference>())
      case ._ENERGY_MEASURE: return AnySequence<SDAI.EntityReference>(EmptyCollection<SDAI.EntityReference>())
      case ._FORCE_MEASURE: return AnySequence<SDAI.EntityReference>(EmptyCollection<SDAI.EntityReference>())
      case ._FREQUENCY_MEASURE: return AnySequence<SDAI.EntityReference>(EmptyCollection<SDAI.EntityReference>())
      case ._ILLUMINANCE_MEASURE: return AnySequence<SDAI.EntityReference>(EmptyCollection<SDAI.EntityReference>())
      case ._INDUCTANCE_MEASURE: return AnySequence<SDAI.EntityReference>(EmptyCollection<SDAI.EntityReference>())
      case ._LENGTH_MEASURE: return AnySequence<SDAI.EntityReference>(EmptyCollection<SDAI.EntityReference>())
      case ._LUMINOUS_FLUX_MEASURE: return AnySequence<SDAI.EntityReference>(EmptyCollection<SDAI.EntityReference>())
      case ._LUMINOUS_INTENSITY_MEASURE: return AnySequence<SDAI.EntityReference>(EmptyCollection<SDAI.EntityReference>())
      case ._MAGNETIC_FLUX_DENSITY_MEASURE: return AnySequence<SDAI.EntityReference>(EmptyCollection<SDAI.EntityReference>())
      case ._MAGNETIC_FLUX_MEASURE: return AnySequence<SDAI.EntityReference>(EmptyCollection<SDAI.EntityReference>())
      case ._MASS_MEASURE: return AnySequence<SDAI.EntityReference>(EmptyCollection<SDAI.EntityReference>())
      case ._NON_NEGATIVE_LENGTH_MEASURE: return AnySequence<SDAI.EntityReference>(EmptyCollection<SDAI.EntityReference>())
      case ._NUMERIC_MEASURE: return AnySequence<SDAI.EntityReference>(EmptyCollection<SDAI.EntityReference>())
      case ._PARAMETER_VALUE: return AnySequence<SDAI.EntityReference>(EmptyCollection<SDAI.EntityReference>())
      case ._PLANE_ANGLE_MEASURE: return AnySequence<SDAI.EntityReference>(EmptyCollection<SDAI.EntityReference>())
      case ._POSITIVE_LENGTH_MEASURE: return AnySequence<SDAI.EntityReference>(EmptyCollection<SDAI.EntityReference>())
      case ._POSITIVE_PLANE_ANGLE_MEASURE: return AnySequence<SDAI.EntityReference>(EmptyCollection<SDAI.EntityReference>())
      case ._POSITIVE_RATIO_MEASURE: return AnySequence<SDAI.EntityReference>(EmptyCollection<SDAI.EntityReference>())
      case ._POWER_MEASURE: return AnySequence<SDAI.EntityReference>(EmptyCollection<SDAI.EntityReference>())
      case ._PRESSURE_MEASURE: return AnySequence<SDAI.EntityReference>(EmptyCollection<SDAI.EntityReference>())
      case ._RADIOACTIVITY_MEASURE: return AnySequence<SDAI.EntityReference>(EmptyCollection<SDAI.EntityReference>())
      case ._RATIO_MEASURE: return AnySequence<SDAI.EntityReference>(EmptyCollection<SDAI.EntityReference>())
      case ._RESISTANCE_MEASURE: return AnySequence<SDAI.EntityReference>(EmptyCollection<SDAI.EntityReference>())
      case ._SOLID_ANGLE_MEASURE: return AnySequence<SDAI.EntityReference>(EmptyCollection<SDAI.EntityReference>())
      case ._THERMODYNAMIC_TEMPERATURE_MEASURE: return AnySequence<SDAI.EntityReference>(EmptyCollection<SDAI.EntityReference>())
      case ._TIME_MEASURE: return AnySequence<SDAI.EntityReference>(EmptyCollection<SDAI.EntityReference>())
      case ._VELOCITY_MEASURE: return AnySequence<SDAI.EntityReference>(EmptyCollection<SDAI.EntityReference>())
      case ._VOLUME_MEASURE: return AnySequence<SDAI.EntityReference>(EmptyCollection<SDAI.EntityReference>())
      }
    }

    public mutating func configure(with observer: SDAI.EntityReferenceObserver) {
      switch self {
      case ._ABSORBED_DOSE_MEASURE: break
      case ._ACCELERATION_MEASURE: break
      case ._AMOUNT_OF_SUBSTANCE_MEASURE: break
      case ._AREA_MEASURE: break
      case ._CAPACITANCE_MEASURE: break
      case ._CELSIUS_TEMPERATURE_MEASURE: break
      case ._CONDUCTANCE_MEASURE: break
      case ._CONTEXT_DEPENDENT_MEASURE: break
      case ._COUNT_MEASURE: break
      case ._DESCRIPTIVE_MEASURE: break
      case ._DOSE_EQUIVALENT_MEASURE: break
      case ._ELECTRIC_CHARGE_MEASURE: break
      case ._ELECTRIC_CURRENT_MEASURE: break
      case ._ELECTRIC_POTENTIAL_MEASURE: break
      case ._ENERGY_MEASURE: break
      case ._FORCE_MEASURE: break
      case ._FREQUENCY_MEASURE: break
      case ._ILLUMINANCE_MEASURE: break
      case ._INDUCTANCE_MEASURE: break
      case ._LENGTH_MEASURE: break
      case ._LUMINOUS_FLUX_MEASURE: break
      case ._LUMINOUS_INTENSITY_MEASURE: break
      case ._MAGNETIC_FLUX_DENSITY_MEASURE: break
      case ._MAGNETIC_FLUX_MEASURE: break
      case ._MASS_MEASURE: break
      case ._NON_NEGATIVE_LENGTH_MEASURE: break
      case ._NUMERIC_MEASURE: break
      case ._PARAMETER_VALUE: break
      case ._PLANE_ANGLE_MEASURE: break
      case ._POSITIVE_LENGTH_MEASURE: break
      case ._POSITIVE_PLANE_ANGLE_MEASURE: break
      case ._POSITIVE_RATIO_MEASURE: break
      case ._POWER_MEASURE: break
      case ._PRESSURE_MEASURE: break
      case ._RADIOACTIVITY_MEASURE: break
      case ._RATIO_MEASURE: break
      case ._RESISTANCE_MEASURE: break
      case ._SOLID_ANGLE_MEASURE: break
      case ._THERMODYNAMIC_TEMPERATURE_MEASURE: break
      case ._TIME_MEASURE: break
      case ._VELOCITY_MEASURE: break
      case ._VOLUME_MEASURE: break
      }
    }

    public mutating func teardownObserver() {
      switch self {
      case ._ABSORBED_DOSE_MEASURE: break
      case ._ACCELERATION_MEASURE: break
      case ._AMOUNT_OF_SUBSTANCE_MEASURE: break
      case ._AREA_MEASURE: break
      case ._CAPACITANCE_MEASURE: break
      case ._CELSIUS_TEMPERATURE_MEASURE: break
      case ._CONDUCTANCE_MEASURE: break
      case ._CONTEXT_DEPENDENT_MEASURE: break
      case ._COUNT_MEASURE: break
      case ._DESCRIPTIVE_MEASURE: break
      case ._DOSE_EQUIVALENT_MEASURE: break
      case ._ELECTRIC_CHARGE_MEASURE: break
      case ._ELECTRIC_CURRENT_MEASURE: break
      case ._ELECTRIC_POTENTIAL_MEASURE: break
      case ._ENERGY_MEASURE: break
      case ._FORCE_MEASURE: break
      case ._FREQUENCY_MEASURE: break
      case ._ILLUMINANCE_MEASURE: break
      case ._INDUCTANCE_MEASURE: break
      case ._LENGTH_MEASURE: break
      case ._LUMINOUS_FLUX_MEASURE: break
      case ._LUMINOUS_INTENSITY_MEASURE: break
      case ._MAGNETIC_FLUX_DENSITY_MEASURE: break
      case ._MAGNETIC_FLUX_MEASURE: break
      case ._MASS_MEASURE: break
      case ._NON_NEGATIVE_LENGTH_MEASURE: break
      case ._NUMERIC_MEASURE: break
      case ._PARAMETER_VALUE: break
      case ._PLANE_ANGLE_MEASURE: break
      case ._POSITIVE_LENGTH_MEASURE: break
      case ._POSITIVE_PLANE_ANGLE_MEASURE: break
      case ._POSITIVE_RATIO_MEASURE: break
      case ._POWER_MEASURE: break
      case ._PRESSURE_MEASURE: break
      case ._RADIOACTIVITY_MEASURE: break
      case ._RATIO_MEASURE: break
      case ._RESISTANCE_MEASURE: break
      case ._SOLID_ANGLE_MEASURE: break
      case ._THERMODYNAMIC_TEMPERATURE_MEASURE: break
      case ._TIME_MEASURE: break
      case ._VELOCITY_MEASURE: break
      case ._VOLUME_MEASURE: break
      }
    }

    //MARK: SDAIAggregationBehavior
    public var aggregationHiBound: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationHiIndex: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationLoBound: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationLoIndex: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationSize: Int? {
      switch self {
      default: return nil
      }
    }

    //MARK: WHERE RULE VALIDATION (SELECT TYPE)
    public static func validateWhereRules(instance:Self?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      var result: [SDAI.WhereLabel:SDAI.LOGICAL] = [:]
      switch instance {
      case ._ABSORBED_DOSE_MEASURE(let selectValue): 
        result = tABSORBED_DOSE_MEASURE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\ABSORBED_DOSE_MEASURE")
      case ._ACCELERATION_MEASURE(let selectValue): 
        result = tACCELERATION_MEASURE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\ACCELERATION_MEASURE")
      case ._AMOUNT_OF_SUBSTANCE_MEASURE(let selectValue): 
        result = tAMOUNT_OF_SUBSTANCE_MEASURE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\AMOUNT_OF_SUBSTANCE_MEASURE")
      case ._AREA_MEASURE(let selectValue): result = tAREA_MEASURE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\AREA_MEASURE")
      case ._CAPACITANCE_MEASURE(let selectValue): 
        result = tCAPACITANCE_MEASURE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\CAPACITANCE_MEASURE")
      case ._CELSIUS_TEMPERATURE_MEASURE(let selectValue): 
        result = tCELSIUS_TEMPERATURE_MEASURE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\CELSIUS_TEMPERATURE_MEASURE")
      case ._CONDUCTANCE_MEASURE(let selectValue): 
        result = tCONDUCTANCE_MEASURE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\CONDUCTANCE_MEASURE")
      case ._CONTEXT_DEPENDENT_MEASURE(let selectValue): 
        result = tCONTEXT_DEPENDENT_MEASURE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\CONTEXT_DEPENDENT_MEASURE")
      case ._COUNT_MEASURE(let selectValue): 
        result = tCOUNT_MEASURE.validateWhereRules(instance:selectValue, prefix:prefix + "\\COUNT_MEASURE")
      case ._DESCRIPTIVE_MEASURE(let selectValue): 
        result = tDESCRIPTIVE_MEASURE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\DESCRIPTIVE_MEASURE")
      case ._DOSE_EQUIVALENT_MEASURE(let selectValue): 
        result = tDOSE_EQUIVALENT_MEASURE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\DOSE_EQUIVALENT_MEASURE")
      case ._ELECTRIC_CHARGE_MEASURE(let selectValue): 
        result = tELECTRIC_CHARGE_MEASURE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\ELECTRIC_CHARGE_MEASURE")
      case ._ELECTRIC_CURRENT_MEASURE(let selectValue): 
        result = tELECTRIC_CURRENT_MEASURE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\ELECTRIC_CURRENT_MEASURE")
      case ._ELECTRIC_POTENTIAL_MEASURE(let selectValue): 
        result = tELECTRIC_POTENTIAL_MEASURE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\ELECTRIC_POTENTIAL_MEASURE")
      case ._ENERGY_MEASURE(let selectValue): 
        result = tENERGY_MEASURE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\ENERGY_MEASURE")
      case ._FORCE_MEASURE(let selectValue): 
        result = tFORCE_MEASURE.validateWhereRules(instance:selectValue, prefix:prefix + "\\FORCE_MEASURE")
      case ._FREQUENCY_MEASURE(let selectValue): 
        result = tFREQUENCY_MEASURE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\FREQUENCY_MEASURE")
      case ._ILLUMINANCE_MEASURE(let selectValue): 
        result = tILLUMINANCE_MEASURE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\ILLUMINANCE_MEASURE")
      case ._INDUCTANCE_MEASURE(let selectValue): 
        result = tINDUCTANCE_MEASURE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\INDUCTANCE_MEASURE")
      case ._LENGTH_MEASURE(let selectValue): 
        result = tLENGTH_MEASURE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\LENGTH_MEASURE")
      case ._LUMINOUS_FLUX_MEASURE(let selectValue): 
        result = tLUMINOUS_FLUX_MEASURE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\LUMINOUS_FLUX_MEASURE")
      case ._LUMINOUS_INTENSITY_MEASURE(let selectValue): 
        result = tLUMINOUS_INTENSITY_MEASURE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\LUMINOUS_INTENSITY_MEASURE")
      case ._MAGNETIC_FLUX_DENSITY_MEASURE(let selectValue): 
        result = tMAGNETIC_FLUX_DENSITY_MEASURE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\MAGNETIC_FLUX_DENSITY_MEASURE")
      case ._MAGNETIC_FLUX_MEASURE(let selectValue): 
        result = tMAGNETIC_FLUX_MEASURE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\MAGNETIC_FLUX_MEASURE")
      case ._MASS_MEASURE(let selectValue): result = tMASS_MEASURE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\MASS_MEASURE")
      case ._NON_NEGATIVE_LENGTH_MEASURE(let selectValue): 
        result = tNON_NEGATIVE_LENGTH_MEASURE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\NON_NEGATIVE_LENGTH_MEASURE")
      case ._NUMERIC_MEASURE(let selectValue): 
        result = tNUMERIC_MEASURE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\NUMERIC_MEASURE")
      case ._PARAMETER_VALUE(let selectValue): 
        result = tPARAMETER_VALUE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PARAMETER_VALUE")
      case ._PLANE_ANGLE_MEASURE(let selectValue): 
        result = tPLANE_ANGLE_MEASURE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PLANE_ANGLE_MEASURE")
      case ._POSITIVE_LENGTH_MEASURE(let selectValue): 
        result = tPOSITIVE_LENGTH_MEASURE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\POSITIVE_LENGTH_MEASURE")
      case ._POSITIVE_PLANE_ANGLE_MEASURE(let selectValue): 
        result = tPOSITIVE_PLANE_ANGLE_MEASURE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\POSITIVE_PLANE_ANGLE_MEASURE")
      case ._POSITIVE_RATIO_MEASURE(let selectValue): 
        result = tPOSITIVE_RATIO_MEASURE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\POSITIVE_RATIO_MEASURE")
      case ._POWER_MEASURE(let selectValue): 
        result = tPOWER_MEASURE.validateWhereRules(instance:selectValue, prefix:prefix + "\\POWER_MEASURE")
      case ._PRESSURE_MEASURE(let selectValue): 
        result = tPRESSURE_MEASURE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PRESSURE_MEASURE")
      case ._RADIOACTIVITY_MEASURE(let selectValue): 
        result = tRADIOACTIVITY_MEASURE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\RADIOACTIVITY_MEASURE")
      case ._RATIO_MEASURE(let selectValue): 
        result = tRATIO_MEASURE.validateWhereRules(instance:selectValue, prefix:prefix + "\\RATIO_MEASURE")
      case ._RESISTANCE_MEASURE(let selectValue): 
        result = tRESISTANCE_MEASURE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\RESISTANCE_MEASURE")
      case ._SOLID_ANGLE_MEASURE(let selectValue): 
        result = tSOLID_ANGLE_MEASURE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\SOLID_ANGLE_MEASURE")
      case ._THERMODYNAMIC_TEMPERATURE_MEASURE(let selectValue): 
        result = tTHERMODYNAMIC_TEMPERATURE_MEASURE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\THERMODYNAMIC_TEMPERATURE_MEASURE")
      case ._TIME_MEASURE(let selectValue): result = tTIME_MEASURE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\TIME_MEASURE")
      case ._VELOCITY_MEASURE(let selectValue): 
        result = tVELOCITY_MEASURE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\VELOCITY_MEASURE")
      case ._VOLUME_MEASURE(let selectValue): 
        result = tVOLUME_MEASURE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\VOLUME_MEASURE")
      case nil: break
      }

      return result
    }

  }

}


//MARK: - SELECT TYPE HIERARCHY
public protocol AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sMEASURE_VALUE__type: SDAISelectType {

  //MARK: GROUP REFERENCES
  var super_tABSORBED_DOSE_MEASURE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tABSORBED_DOSE_MEASURE? { get }
  var super_tACCELERATION_MEASURE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tACCELERATION_MEASURE? { get }
  var super_tAMOUNT_OF_SUBSTANCE_MEASURE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tAMOUNT_OF_SUBSTANCE_MEASURE? { get }
  var super_tAREA_MEASURE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tAREA_MEASURE? { get }
  var super_tCAPACITANCE_MEASURE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tCAPACITANCE_MEASURE? { get }
  var super_tCELSIUS_TEMPERATURE_MEASURE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tCELSIUS_TEMPERATURE_MEASURE? { get }
  var super_tCONDUCTANCE_MEASURE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tCONDUCTANCE_MEASURE? { get }
  var super_tCONTEXT_DEPENDENT_MEASURE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tCONTEXT_DEPENDENT_MEASURE? { get }
  var super_tCOUNT_MEASURE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tCOUNT_MEASURE? { get }
  var super_tDESCRIPTIVE_MEASURE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tDESCRIPTIVE_MEASURE? { get }
  var super_tDOSE_EQUIVALENT_MEASURE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tDOSE_EQUIVALENT_MEASURE? { get }
  var super_tELECTRIC_CHARGE_MEASURE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tELECTRIC_CHARGE_MEASURE? { get }
  var super_tELECTRIC_CURRENT_MEASURE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tELECTRIC_CURRENT_MEASURE? { get }
  var super_tELECTRIC_POTENTIAL_MEASURE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tELECTRIC_POTENTIAL_MEASURE? { get }
  var super_tENERGY_MEASURE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tENERGY_MEASURE? { get }
  var super_tFORCE_MEASURE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tFORCE_MEASURE? { get }
  var super_tFREQUENCY_MEASURE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tFREQUENCY_MEASURE? { get }
  var super_tILLUMINANCE_MEASURE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tILLUMINANCE_MEASURE? { get }
  var super_tINDUCTANCE_MEASURE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tINDUCTANCE_MEASURE? { get }
  var super_tLENGTH_MEASURE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE? { get }
  var super_tLUMINOUS_FLUX_MEASURE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLUMINOUS_FLUX_MEASURE? { get }
  var super_tLUMINOUS_INTENSITY_MEASURE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLUMINOUS_INTENSITY_MEASURE? { get }
  var super_tMAGNETIC_FLUX_DENSITY_MEASURE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tMAGNETIC_FLUX_DENSITY_MEASURE? { get }
  var super_tMAGNETIC_FLUX_MEASURE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tMAGNETIC_FLUX_MEASURE? { get }
  var super_tMASS_MEASURE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tMASS_MEASURE? { get }
  var super_tNON_NEGATIVE_LENGTH_MEASURE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tNON_NEGATIVE_LENGTH_MEASURE? { get }
  var super_tNUMERIC_MEASURE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tNUMERIC_MEASURE? { get }
  var super_tPARAMETER_VALUE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPARAMETER_VALUE? { get }
  var super_tPLANE_ANGLE_MEASURE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE? { get }
  var super_tPOSITIVE_LENGTH_MEASURE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE? { get }
  var super_tPOSITIVE_PLANE_ANGLE_MEASURE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_PLANE_ANGLE_MEASURE? { get }
  var super_tPOSITIVE_RATIO_MEASURE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_RATIO_MEASURE? { get }
  var super_tPOWER_MEASURE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOWER_MEASURE? { get }
  var super_tPRESSURE_MEASURE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPRESSURE_MEASURE? { get }
  var super_tRADIOACTIVITY_MEASURE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tRADIOACTIVITY_MEASURE? { get }
  var super_tRATIO_MEASURE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tRATIO_MEASURE? { get }
  var super_tRESISTANCE_MEASURE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tRESISTANCE_MEASURE? { get }
  var super_tSOLID_ANGLE_MEASURE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tSOLID_ANGLE_MEASURE? { get }
  var super_tTHERMODYNAMIC_TEMPERATURE_MEASURE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTHERMODYNAMIC_TEMPERATURE_MEASURE? { get }
  var super_tTIME_MEASURE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTIME_MEASURE? { get }
  var super_tVELOCITY_MEASURE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tVELOCITY_MEASURE? { get }
  var super_tVOLUME_MEASURE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tVOLUME_MEASURE? { get }

}

public protocol AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sMEASURE_VALUE__subtype: 
  AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sMEASURE_VALUE__type, SDAIDefinedType
where Supertype: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sMEASURE_VALUE__type
{}

public extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sMEASURE_VALUE__subtype {
  //MARK: CONSTRUCTORS
  init?(possiblyFrom complex: SDAI.ComplexEntity?) {
    self.init(fundamental: FundamentalType(possiblyFrom: complex))
  }

  init?<T: SDAIUnderlyingType>(possiblyFrom underlyingType: T?) {
    self.init(fundamental: FundamentalType(possiblyFrom: underlyingType))
  }

  init?<G: SDAIGenericType>(fromGeneric generic: G?) {
    self.init(fundamental: FundamentalType.convert(fromGeneric: generic))
  }

  //MARK: GROUP REFERENCES
  var super_tABSORBED_DOSE_MEASURE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tABSORBED_DOSE_MEASURE? { rep.super_tABSORBED_DOSE_MEASURE }
  var super_tACCELERATION_MEASURE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tACCELERATION_MEASURE? { rep.super_tACCELERATION_MEASURE }
  var super_tAMOUNT_OF_SUBSTANCE_MEASURE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tAMOUNT_OF_SUBSTANCE_MEASURE? { rep.super_tAMOUNT_OF_SUBSTANCE_MEASURE }
  var super_tAREA_MEASURE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tAREA_MEASURE? { rep.super_tAREA_MEASURE }
  var super_tCAPACITANCE_MEASURE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tCAPACITANCE_MEASURE? { rep.super_tCAPACITANCE_MEASURE }
  var super_tCELSIUS_TEMPERATURE_MEASURE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tCELSIUS_TEMPERATURE_MEASURE? { rep.super_tCELSIUS_TEMPERATURE_MEASURE }
  var super_tCONDUCTANCE_MEASURE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tCONDUCTANCE_MEASURE? { rep.super_tCONDUCTANCE_MEASURE }
  var super_tCONTEXT_DEPENDENT_MEASURE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tCONTEXT_DEPENDENT_MEASURE? { rep.super_tCONTEXT_DEPENDENT_MEASURE }
  var super_tCOUNT_MEASURE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tCOUNT_MEASURE? { rep.super_tCOUNT_MEASURE }
  var super_tDESCRIPTIVE_MEASURE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tDESCRIPTIVE_MEASURE? { rep.super_tDESCRIPTIVE_MEASURE }
  var super_tDOSE_EQUIVALENT_MEASURE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tDOSE_EQUIVALENT_MEASURE? { rep.super_tDOSE_EQUIVALENT_MEASURE }
  var super_tELECTRIC_CHARGE_MEASURE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tELECTRIC_CHARGE_MEASURE? { rep.super_tELECTRIC_CHARGE_MEASURE }
  var super_tELECTRIC_CURRENT_MEASURE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tELECTRIC_CURRENT_MEASURE? { rep.super_tELECTRIC_CURRENT_MEASURE }
  var super_tELECTRIC_POTENTIAL_MEASURE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tELECTRIC_POTENTIAL_MEASURE? { rep.super_tELECTRIC_POTENTIAL_MEASURE }
  var super_tENERGY_MEASURE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tENERGY_MEASURE? { rep.super_tENERGY_MEASURE }
  var super_tFORCE_MEASURE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tFORCE_MEASURE? { rep.super_tFORCE_MEASURE }
  var super_tFREQUENCY_MEASURE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tFREQUENCY_MEASURE? { rep.super_tFREQUENCY_MEASURE }
  var super_tILLUMINANCE_MEASURE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tILLUMINANCE_MEASURE? { rep.super_tILLUMINANCE_MEASURE }
  var super_tINDUCTANCE_MEASURE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tINDUCTANCE_MEASURE? { rep.super_tINDUCTANCE_MEASURE }
  var super_tLENGTH_MEASURE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE? { rep.super_tLENGTH_MEASURE }
  var super_tLUMINOUS_FLUX_MEASURE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLUMINOUS_FLUX_MEASURE? { rep.super_tLUMINOUS_FLUX_MEASURE }
  var super_tLUMINOUS_INTENSITY_MEASURE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLUMINOUS_INTENSITY_MEASURE? { rep.super_tLUMINOUS_INTENSITY_MEASURE }
  var super_tMAGNETIC_FLUX_DENSITY_MEASURE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tMAGNETIC_FLUX_DENSITY_MEASURE? { rep.super_tMAGNETIC_FLUX_DENSITY_MEASURE }
  var super_tMAGNETIC_FLUX_MEASURE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tMAGNETIC_FLUX_MEASURE? { rep.super_tMAGNETIC_FLUX_MEASURE }
  var super_tMASS_MEASURE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tMASS_MEASURE? { rep.super_tMASS_MEASURE }
  var super_tNON_NEGATIVE_LENGTH_MEASURE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tNON_NEGATIVE_LENGTH_MEASURE? { rep.super_tNON_NEGATIVE_LENGTH_MEASURE }
  var super_tNUMERIC_MEASURE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tNUMERIC_MEASURE? { rep.super_tNUMERIC_MEASURE }
  var super_tPARAMETER_VALUE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPARAMETER_VALUE? { rep.super_tPARAMETER_VALUE }
  var super_tPLANE_ANGLE_MEASURE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE? { rep.super_tPLANE_ANGLE_MEASURE }
  var super_tPOSITIVE_LENGTH_MEASURE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE? { rep.super_tPOSITIVE_LENGTH_MEASURE }
  var super_tPOSITIVE_PLANE_ANGLE_MEASURE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_PLANE_ANGLE_MEASURE? { rep.super_tPOSITIVE_PLANE_ANGLE_MEASURE }
  var super_tPOSITIVE_RATIO_MEASURE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_RATIO_MEASURE? { rep.super_tPOSITIVE_RATIO_MEASURE }
  var super_tPOWER_MEASURE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOWER_MEASURE? { rep.super_tPOWER_MEASURE }
  var super_tPRESSURE_MEASURE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPRESSURE_MEASURE? { rep.super_tPRESSURE_MEASURE }
  var super_tRADIOACTIVITY_MEASURE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tRADIOACTIVITY_MEASURE? { rep.super_tRADIOACTIVITY_MEASURE }
  var super_tRATIO_MEASURE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tRATIO_MEASURE? { rep.super_tRATIO_MEASURE }
  var super_tRESISTANCE_MEASURE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tRESISTANCE_MEASURE? { rep.super_tRESISTANCE_MEASURE }
  var super_tSOLID_ANGLE_MEASURE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tSOLID_ANGLE_MEASURE? { rep.super_tSOLID_ANGLE_MEASURE }
  var super_tTHERMODYNAMIC_TEMPERATURE_MEASURE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTHERMODYNAMIC_TEMPERATURE_MEASURE? { rep.super_tTHERMODYNAMIC_TEMPERATURE_MEASURE }
  var super_tTIME_MEASURE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTIME_MEASURE? { rep.super_tTIME_MEASURE }
  var super_tVELOCITY_MEASURE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tVELOCITY_MEASURE? { rep.super_tVELOCITY_MEASURE }
  var super_tVOLUME_MEASURE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tVOLUME_MEASURE? { rep.super_tVOLUME_MEASURE }

}

