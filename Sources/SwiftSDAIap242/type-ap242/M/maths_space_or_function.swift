/* file: maths_space_or_function.swift 	 generated: Sat Aug 14 13:46:02 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -TYPE DEFINITION in EXPRESS
/*
  TYPE maths_space_or_function = SELECT
    ( maths_function (*ENTITY*),
     maths_space (*ENTITY*) );
  END_TYPE; -- maths_space_or_function (line:4147 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES FOR SELECT
/*
  maths_function (*ENTITY*):
  ATTR:  input_repack: repackage_options
  ATTR:  final_function: maths_function_select
  ATTR:  coef: maths_function
  ATTR:  value_range: (AMBIGUOUS (CASE LEVEL))
  ATTR:  pairs: SET [1 : ?] OF LIST [2 : 2] OF maths_value
  ATTR:  shape: LIST [1 : ?] OF positive_integer
  ATTR:  increments: LIST [1 : ?] OF INTEGER
  ATTR:  default_entry: (AMBIGUOUS (CASE LEVEL))
  ATTR:  repeated_knots: LIST [2 : ?] OF REAL
  ATTR:  expr: (AMBIGUOUS (CASE LEVEL))
  ATTR:  variable_of_integration: input_selector
  ATTR:  degree: nonnegative_integer
  ATTR:  parameters: LIST OF maths_value
  ATTR:  sole_output: maths_value
  ATTR:  extension: extension_options
  ATTR:  basis: LIST [1 : ?] OF b_spline_basis
  ATTR:  lo_up: lower_upper
  ATTR:  symmetry: symmetry_type
  ATTR:  index_base: zero_or_one
  ATTR:  geometry: (AMBIGUOUS (CASE LEVEL))
  ATTR:  derivand: maths_function
  ATTR:  below: INTEGER
  ATTR:  explicit_range: tuple_space
  ATTR:  order: (AMBIGUOUS (CASE LEVEL))
  ATTR:  val: maths_function
  ATTR:  source_of_domain: (AMBIGUOUS (CASE LEVEL))
  ATTR:  values: (AMBIGUOUS (CASE LEVEL))
  ATTR:  parametric_domain: (AMBIGUOUS (CASE LEVEL))
  ATTR:  fun: maths_function
  ATTR:  func_id: elementary_function_enumerators
  ATTR:  integrand: maths_function
  ATTR:  loc: maths_function
  ATTR:  upper_limit_pos_infinity: BOOLEAN
  ATTR:  first: INTEGER
  ATTR:  d_variables: LIST [1 : ?] OF input_selector
  ATTR:  operands: LIST [2 : ?] OF maths_function
  ATTR:  selector: input_selector
  ATTR:  mat: (AMBIGUOUS (CASE LEVEL))
  ATTR:  sum_index: (AMBIGUOUS (CASE LEVEL))
  ATTR:  starting_indices: LIST [1 : ?] OF INTEGER
  ATTR:  index: maths_function
  ATTR:  variables: LIST [1 : ?] OF UNIQUE generic_variable
  ATTR:  source: maths_function
  ATTR:  main_diagonal_value: maths_value
  ATTR:  num_basis: positive_integer
  ATTR:  operand: maths_space
  ATTR:  explicit_domain: tuple_space
  ATTR:  selected_output: nonnegative_integer
  ATTR:  above: (AMBIGUOUS (CASE LEVEL))
  ATTR:  lower_limit_neg_infinity: BOOLEAN
  ATTR:  prep_functions: LIST [1 : ?] OF maths_function
  ATTR:  domain: tuple_space
  ATTR:  triangle: lower_upper
  ATTR:  range: tuple_space
  ATTR:  output_repack: repackage_options

  maths_space (*ENTITY*):
  ATTR:  range_argument: maths_space
  ATTR:  extender: maths_space
  ATTR:  direction_constraint: finite_real_interval
  ATTR:  exponent: positive_integer
  ATTR:  domain_constraint: space_constraint_type
  ATTR:  factors: LIST OF maths_space
  ATTR:  centre: complex_number_literal
  ATTR:  min: (AMBIGUOUS (CASE LEVEL))
  ATTR:  range_constraint: space_constraint_type
  ATTR:  imag_constraint: real_interval
  ATTR:  start_value: maths_number
  ATTR:  distance_constraint: real_interval
  ATTR:  size: positive_integer
  ATTR:  domain_argument: maths_space
  ATTR:  real_constraint: real_interval
  ATTR:  space_id: elementary_space_enumerators
  ATTR:  min_closure: (AMBIGUOUS (CASE LEVEL))
  ATTR:  members: SET OF maths_value
  ATTR:  increment_number: positive_integer
  ATTR:  max: (AMBIGUOUS (CASE LEVEL))
  ATTR:  base: (AMBIGUOUS (CASE LEVEL))
  ATTR:  max_closure: (AMBIGUOUS (CASE LEVEL))
  ATTR:  increment_value: maths_number

*/

/** SELECT type
- EXPRESS:
```express
  TYPE maths_space_or_function = SELECT
    ( maths_function (*ENTITY*),
     maths_space (*ENTITY*) );
  END_TYPE; -- maths_space_or_function (line:4147 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public enum sMATHS_SPACE_OR_FUNCTION : SDAIValue, AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sMATHS_SPACE_OR_FUNCTION__type {

    /// SELECT case ``eMATHS_FUNCTION`` (ENTITY) in ``sMATHS_SPACE_OR_FUNCTION``
    case _MATHS_FUNCTION(eMATHS_FUNCTION)	// (ENTITY)

    /// SELECT case ``eMATHS_SPACE`` (ENTITY) in ``sMATHS_SPACE_OR_FUNCTION``
    case _MATHS_SPACE(eMATHS_SPACE)	// (ENTITY)

    //MARK: - CONSTRUCTORS
    public init(fundamental: FundamentalType) { self = fundamental }

    public init?<T: SDAIUnderlyingType>(possiblyFrom underlyingType: T?){
      return nil
    }

    public init?(possiblyFrom complex: SDAI.ComplexEntity?) {
      guard let complex = complex else { return nil }

      if let base = complex.entityReference(eMATHS_FUNCTION.self) {self = ._MATHS_FUNCTION(base) }
      else if let base = complex.entityReference(eMATHS_SPACE.self) {self = ._MATHS_SPACE(base) }
      else { return nil }
    }

    public init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let select = generic else { return nil }

      if let fundamental = select as? Self {
        self.init(fundamental: fundamental)
      }
      else if let base = eMATHS_FUNCTION.convert(fromGeneric: select) {
        self = ._MATHS_FUNCTION(base)
      }
      else if let base = eMATHS_SPACE.convert(fromGeneric: select) {
        self = ._MATHS_SPACE(base)
      }
      else { return nil }
    }

    // InitializableByP21Parameter
    public static var bareTypeName: String = "MATHS_SPACE_OR_FUNCTION"

    public init?(p21typedParam: P21Decode.ExchangeStructure.TypedParameter, from exchangeStructure: P21Decode.ExchangeStructure) {
      guard let keyword = p21typedParam.keyword.asStandardKeyword else { exchangeStructure.error = "unexpected p21parameter(\(p21typedParam)) while resolving \(Self.bareTypeName) select value"; return nil }

      switch(keyword) {
      default:
        exchangeStructure.error = "unexpected p21parameter(\(p21typedParam)) while resolving \(Self.bareTypeName) select value"
        return nil
      }
    }

    public init?(p21untypedParam: P21Decode.ExchangeStructure.UntypedParameter, from exchangeStructure: P21Decode.ExchangeStructure) {
      switch p21untypedParam {
      case .rhsOccurenceName(let rhsname):
        switch rhsname {
        case .constantEntityName(let name):
          guard let entity = exchangeStructure.resolve(constantEntityName: name) else {exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) instance"); return nil }
          self.init(possiblyFrom: entity.complexEntity)

        case .entityInstanceName(let name):
          guard let complex = exchangeStructure.resolve(entityInstanceName: name) else {exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) instance"); return nil }
          self.init(possiblyFrom: complex)

        default:
          exchangeStructure.error = "unexpected p21parameter(\(p21untypedParam)) while resolving \(Self.bareTypeName) select instance"
          return nil
        }

      default:
        exchangeStructure.error = "unexpected p21parameter(\(p21untypedParam)) while resolving \(Self.bareTypeName) select instance"
        return nil
      }
    }

    public init?(p21omittedParamfrom exchangeStructure: P21Decode.ExchangeStructure) {
      return nil
    }


    //MARK: - ENTITY UNDERLYING TYPE REFERENCES
    public var super_eMATHS_SPACE: eMATHS_SPACE? {
      switch self {
      case ._MATHS_SPACE(let entity): return entity
      default: return nil
      }
    }

    public var super_eMATHS_FUNCTION: eMATHS_FUNCTION? {
      switch self {
      case ._MATHS_FUNCTION(let entity): return entity
      default: return nil
      }
    }

    public var super_eGENERIC_EXPRESSION: eGENERIC_EXPRESSION? {
      switch self {
      case ._MATHS_FUNCTION(let entity): return entity.super_eGENERIC_EXPRESSION
      case ._MATHS_SPACE(let entity): return entity.super_eGENERIC_EXPRESSION
      }
    }


    //MARK: - ENTITY ATTRIBUTE REFERENCES
    /// attribute of SELECT type ``sMATHS_SPACE_OR_FUNCTION``
    /// - origin: ENTITY( ``eMATHS_SPACE`` )
    public var RANGE_ARGUMENT: eMATHS_SPACE?  {
      switch self {
      case ._MATHS_SPACE(let entity): return entity.RANGE_ARGUMENT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMATHS_SPACE_OR_FUNCTION``
    /// - origin: ENTITY( ``eMATHS_FUNCTION`` )
    public var INPUT_REPACK: nREPACKAGE_OPTIONS?  {
      switch self {
      case ._MATHS_FUNCTION(let entity): return entity.INPUT_REPACK
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMATHS_SPACE_OR_FUNCTION``
    /// - origin: ENTITY( ``eMATHS_SPACE`` )
    public var EXTENDER: eMATHS_SPACE?  {
      switch self {
      case ._MATHS_SPACE(let entity): return entity.EXTENDER
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMATHS_SPACE_OR_FUNCTION``
    /// - origin: ENTITY( ``eMATHS_FUNCTION`` )
    public var FINAL_FUNCTION: sMATHS_FUNCTION_SELECT?  {
      switch self {
      case ._MATHS_FUNCTION(let entity): return entity.FINAL_FUNCTION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMATHS_SPACE_OR_FUNCTION``
    /// - origin: ENTITY( ``eMATHS_FUNCTION`` )
    public var COEF: eMATHS_FUNCTION?  {
      switch self {
      case ._MATHS_FUNCTION(let entity): return entity.COEF
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMATHS_SPACE_OR_FUNCTION``
    /// - origin: ENTITY( ``eMATHS_SPACE`` )
    public var DIRECTION_CONSTRAINT: eFINITE_REAL_INTERVAL?  {
      switch self {
      case ._MATHS_SPACE(let entity): return entity.DIRECTION_CONSTRAINT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMATHS_SPACE_OR_FUNCTION``
    /// - origin: ENTITY( ``eMATHS_SPACE`` )
    public var EXPONENT: tPOSITIVE_INTEGER?  {
      switch self {
      case ._MATHS_SPACE(let entity): return entity.EXPONENT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMATHS_SPACE_OR_FUNCTION``
    /// - origin: ENTITY( ``eMATHS_SPACE`` )
    public var DOMAIN_CONSTRAINT: nSPACE_CONSTRAINT_TYPE?  {
      switch self {
      case ._MATHS_SPACE(let entity): return entity.DOMAIN_CONSTRAINT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMATHS_SPACE_OR_FUNCTION``
    /// - origin: ENTITY( ``eMATHS_SPACE`` )
    public var FACTORS: SDAI.LIST<eMATHS_SPACE>?  {
      switch self {
      case ._MATHS_SPACE(let entity): return entity.FACTORS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMATHS_SPACE_OR_FUNCTION``
    /// - origin: ENTITY( ``eMATHS_SPACE`` )
    public var CENTRE: eCOMPLEX_NUMBER_LITERAL?  {
      switch self {
      case ._MATHS_SPACE(let entity): return entity.CENTRE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMATHS_SPACE_OR_FUNCTION``
    /// - origin: ENTITY( ``eMATHS_FUNCTION`` )
    public var PAIRS: (SDAI.SET<SDAI.LIST<sMATHS_VALUE>/*[2:2]*/ >/*[1:nil]*/ )?  {
      switch self {
      case ._MATHS_FUNCTION(let entity): return entity.PAIRS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMATHS_SPACE_OR_FUNCTION``
    /// - origin: ENTITY( ``eMATHS_FUNCTION`` )
    public var SHAPE: (SDAI.LIST<tPOSITIVE_INTEGER>/*[1:nil]*/ )?  {
      switch self {
      case ._MATHS_FUNCTION(let entity): return entity.SHAPE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMATHS_SPACE_OR_FUNCTION``
    /// - origin: ENTITY( ``eMATHS_FUNCTION`` )
    public var INCREMENTS: (SDAI.LIST<SDAI.INTEGER>/*[1:nil]*/ )?  {
      switch self {
      case ._MATHS_FUNCTION(let entity): return entity.INCREMENTS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMATHS_SPACE_OR_FUNCTION``
    /// - origin: ENTITY( ``eMATHS_FUNCTION`` )
    public var REPEATED_KNOTS: (SDAI.LIST<SDAI.REAL>/*[2:nil]*/ )?  {
      switch self {
      case ._MATHS_FUNCTION(let entity): return entity.REPEATED_KNOTS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMATHS_SPACE_OR_FUNCTION``
    /// - origin: ENTITY( ``eMATHS_FUNCTION`` )
    public var VARIABLE_OF_INTEGRATION: tINPUT_SELECTOR?  {
      switch self {
      case ._MATHS_FUNCTION(let entity): return entity.VARIABLE_OF_INTEGRATION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMATHS_SPACE_OR_FUNCTION``
    /// - origin: ENTITY( ``eMATHS_FUNCTION`` )
    public var DEGREE: tNONNEGATIVE_INTEGER?  {
      switch self {
      case ._MATHS_FUNCTION(let entity): return entity.DEGREE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMATHS_SPACE_OR_FUNCTION``
    /// - origin: ENTITY( ``eMATHS_FUNCTION`` )
    public var PARAMETERS: SDAI.LIST<sMATHS_VALUE>?  {
      switch self {
      case ._MATHS_FUNCTION(let entity): return entity.PARAMETERS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMATHS_SPACE_OR_FUNCTION``
    /// - origin: ENTITY( ``eMATHS_FUNCTION`` )
    public var SOLE_OUTPUT: sMATHS_VALUE?  {
      switch self {
      case ._MATHS_FUNCTION(let entity): return entity.SOLE_OUTPUT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMATHS_SPACE_OR_FUNCTION``
    /// - origin: ENTITY( ``eMATHS_FUNCTION`` )
    public var EXTENSION: nEXTENSION_OPTIONS?  {
      switch self {
      case ._MATHS_FUNCTION(let entity): return entity.EXTENSION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMATHS_SPACE_OR_FUNCTION``
    /// - origin: ENTITY( ``eMATHS_FUNCTION`` )
    public var BASIS: (SDAI.LIST<eB_SPLINE_BASIS>/*[1:nil]*/ )?  {
      switch self {
      case ._MATHS_FUNCTION(let entity): return entity.BASIS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMATHS_SPACE_OR_FUNCTION``
    /// - origin: ENTITY( ``eMATHS_FUNCTION`` )
    public var LO_UP: nLOWER_UPPER?  {
      switch self {
      case ._MATHS_FUNCTION(let entity): return entity.LO_UP
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMATHS_SPACE_OR_FUNCTION``
    /// - origin: ENTITY( ``eMATHS_FUNCTION`` )
    public var SYMMETRY: nSYMMETRY_TYPE?  {
      switch self {
      case ._MATHS_FUNCTION(let entity): return entity.SYMMETRY
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMATHS_SPACE_OR_FUNCTION``
    /// - origin: ENTITY( ``eMATHS_SPACE`` )
    public var RANGE_CONSTRAINT: nSPACE_CONSTRAINT_TYPE?  {
      switch self {
      case ._MATHS_SPACE(let entity): return entity.RANGE_CONSTRAINT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMATHS_SPACE_OR_FUNCTION``
    /// - origin: ENTITY( ``eMATHS_FUNCTION`` )
    public var INDEX_BASE: tZERO_OR_ONE?  {
      switch self {
      case ._MATHS_FUNCTION(let entity): return entity.INDEX_BASE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMATHS_SPACE_OR_FUNCTION``
    /// - origin: ENTITY( ``eMATHS_SPACE`` )
    public var IMAG_CONSTRAINT: sREAL_INTERVAL?  {
      switch self {
      case ._MATHS_SPACE(let entity): return entity.IMAG_CONSTRAINT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMATHS_SPACE_OR_FUNCTION``
    /// - origin: ENTITY( ``eMATHS_FUNCTION`` )
    public var DERIVAND: eMATHS_FUNCTION?  {
      switch self {
      case ._MATHS_FUNCTION(let entity): return entity.DERIVAND
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMATHS_SPACE_OR_FUNCTION``
    /// - origin: ENTITY( ``eMATHS_FUNCTION`` )
    public var BELOW: SDAI.INTEGER?  {
      switch self {
      case ._MATHS_FUNCTION(let entity): return entity.BELOW
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMATHS_SPACE_OR_FUNCTION``
    /// - origin: ENTITY( ``eMATHS_FUNCTION`` )
    public var EXPLICIT_RANGE: sTUPLE_SPACE?  {
      switch self {
      case ._MATHS_FUNCTION(let entity): return entity.EXPLICIT_RANGE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMATHS_SPACE_OR_FUNCTION``
    /// - origin: ENTITY( ``eMATHS_SPACE`` )
    public var START_VALUE: tMATHS_NUMBER?  {
      switch self {
      case ._MATHS_SPACE(let entity): return entity.START_VALUE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMATHS_SPACE_OR_FUNCTION``
    /// - origin: ENTITY( ``eMATHS_SPACE`` )
    public var DISTANCE_CONSTRAINT: sREAL_INTERVAL?  {
      switch self {
      case ._MATHS_SPACE(let entity): return entity.DISTANCE_CONSTRAINT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMATHS_SPACE_OR_FUNCTION``
    /// - origin: ENTITY( ``eMATHS_FUNCTION`` )
    public var VAL: eMATHS_FUNCTION?  {
      switch self {
      case ._MATHS_FUNCTION(let entity): return entity.VAL
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMATHS_SPACE_OR_FUNCTION``
    /// - origin: ENTITY( ``eMATHS_SPACE`` )
    public var SIZE: tPOSITIVE_INTEGER?  {
      switch self {
      case ._MATHS_SPACE(let entity): return entity.SIZE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMATHS_SPACE_OR_FUNCTION``
    /// - origin: ENTITY( ``eMATHS_SPACE`` )
    public var DOMAIN_ARGUMENT: eMATHS_SPACE?  {
      switch self {
      case ._MATHS_SPACE(let entity): return entity.DOMAIN_ARGUMENT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMATHS_SPACE_OR_FUNCTION``
    /// - origin: ENTITY( ``eMATHS_SPACE`` )
    public var REAL_CONSTRAINT: sREAL_INTERVAL?  {
      switch self {
      case ._MATHS_SPACE(let entity): return entity.REAL_CONSTRAINT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMATHS_SPACE_OR_FUNCTION``
    /// - origin: ENTITY( ``eMATHS_FUNCTION`` )
    public var FUN: eMATHS_FUNCTION?  {
      switch self {
      case ._MATHS_FUNCTION(let entity): return entity.FUN
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMATHS_SPACE_OR_FUNCTION``
    /// - origin: ENTITY( ``eMATHS_FUNCTION`` )
    public var FUNC_ID: nELEMENTARY_FUNCTION_ENUMERATORS?  {
      switch self {
      case ._MATHS_FUNCTION(let entity): return entity.FUNC_ID
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMATHS_SPACE_OR_FUNCTION``
    /// - origin: ENTITY( ``eMATHS_FUNCTION`` )
    public var INTEGRAND: eMATHS_FUNCTION?  {
      switch self {
      case ._MATHS_FUNCTION(let entity): return entity.INTEGRAND
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMATHS_SPACE_OR_FUNCTION``
    /// - origin: ENTITY( ``eMATHS_FUNCTION`` )
    public var LOC: eMATHS_FUNCTION?  {
      switch self {
      case ._MATHS_FUNCTION(let entity): return entity.LOC
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMATHS_SPACE_OR_FUNCTION``
    /// - origin: ENTITY( ``eMATHS_SPACE`` )
    public var SPACE_ID: nELEMENTARY_SPACE_ENUMERATORS?  {
      switch self {
      case ._MATHS_SPACE(let entity): return entity.SPACE_ID
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMATHS_SPACE_OR_FUNCTION``
    /// - origin: ENTITY( ``eMATHS_FUNCTION`` )
    public var UPPER_LIMIT_POS_INFINITY: SDAI.BOOLEAN?  {
      switch self {
      case ._MATHS_FUNCTION(let entity): return entity.UPPER_LIMIT_POS_INFINITY
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMATHS_SPACE_OR_FUNCTION``
    /// - origin: ENTITY( ``eMATHS_FUNCTION`` )
    public var FIRST: SDAI.INTEGER?  {
      switch self {
      case ._MATHS_FUNCTION(let entity): return entity.FIRST
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMATHS_SPACE_OR_FUNCTION``
    /// - origin: ENTITY( ``eMATHS_FUNCTION`` )
    public var D_VARIABLES: (SDAI.LIST<tINPUT_SELECTOR>/*[1:nil]*/ )?  {
      switch self {
      case ._MATHS_FUNCTION(let entity): return entity.D_VARIABLES
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMATHS_SPACE_OR_FUNCTION``
    /// - origin: ENTITY( ``eMATHS_FUNCTION`` )
    public var OPERANDS: (SDAI.LIST<eMATHS_FUNCTION>/*[2:nil]*/ )?  {
      switch self {
      case ._MATHS_FUNCTION(let entity): return entity.OPERANDS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMATHS_SPACE_OR_FUNCTION``
    /// - origin: ENTITY( ``eMATHS_FUNCTION`` )
    public var SELECTOR: tINPUT_SELECTOR?  {
      switch self {
      case ._MATHS_FUNCTION(let entity): return entity.SELECTOR
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMATHS_SPACE_OR_FUNCTION``
    /// - origin: ENTITY( ``eMATHS_SPACE`` )
    public var MEMBERS: SDAI.SET<sMATHS_VALUE>?  {
      switch self {
      case ._MATHS_SPACE(let entity): return entity.MEMBERS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMATHS_SPACE_OR_FUNCTION``
    /// - origin: ENTITY( ``eMATHS_SPACE`` )
    public var INCREMENT_NUMBER: tPOSITIVE_INTEGER?  {
      switch self {
      case ._MATHS_SPACE(let entity): return entity.INCREMENT_NUMBER
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMATHS_SPACE_OR_FUNCTION``
    /// - origin: ENTITY( ``eMATHS_FUNCTION`` )
    public var STARTING_INDICES: (SDAI.LIST<SDAI.INTEGER>/*[1:nil]*/ )?  {
      switch self {
      case ._MATHS_FUNCTION(let entity): return entity.STARTING_INDICES
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMATHS_SPACE_OR_FUNCTION``
    /// - origin: ENTITY( ``eMATHS_FUNCTION`` )
    public var INDEX: eMATHS_FUNCTION?  {
      switch self {
      case ._MATHS_FUNCTION(let entity): return entity.INDEX
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMATHS_SPACE_OR_FUNCTION``
    /// - origin: ENTITY( ``eMATHS_FUNCTION`` )
    public var VARIABLES: (SDAI.LIST_UNIQUE<eGENERIC_VARIABLE>/*[1:nil]*/ )?  {
      switch self {
      case ._MATHS_FUNCTION(let entity): return entity.VARIABLES
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMATHS_SPACE_OR_FUNCTION``
    /// - origin: ENTITY( ``eMATHS_FUNCTION`` )
    public var SOURCE: eMATHS_FUNCTION?  {
      switch self {
      case ._MATHS_FUNCTION(let entity): return entity.SOURCE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMATHS_SPACE_OR_FUNCTION``
    /// - origin: ENTITY( ``eMATHS_FUNCTION`` )
    public var MAIN_DIAGONAL_VALUE: sMATHS_VALUE?  {
      switch self {
      case ._MATHS_FUNCTION(let entity): return entity.MAIN_DIAGONAL_VALUE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMATHS_SPACE_OR_FUNCTION``
    /// - origin: ENTITY( ``eMATHS_FUNCTION`` )
    public var NUM_BASIS: tPOSITIVE_INTEGER?  {
      switch self {
      case ._MATHS_FUNCTION(let entity): return entity.NUM_BASIS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMATHS_SPACE_OR_FUNCTION``
    /// - origin: ENTITY( ``eMATHS_FUNCTION`` )
    public var OPERAND: eMATHS_SPACE?  {
      switch self {
      case ._MATHS_FUNCTION(let entity): return entity.OPERAND
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMATHS_SPACE_OR_FUNCTION``
    /// - origin: ENTITY( ``eMATHS_FUNCTION`` )
    public var EXPLICIT_DOMAIN: sTUPLE_SPACE?  {
      switch self {
      case ._MATHS_FUNCTION(let entity): return entity.EXPLICIT_DOMAIN
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMATHS_SPACE_OR_FUNCTION``
    /// - origin: ENTITY( ``eMATHS_FUNCTION`` )
    public var SELECTED_OUTPUT: tNONNEGATIVE_INTEGER?  {
      switch self {
      case ._MATHS_FUNCTION(let entity): return entity.SELECTED_OUTPUT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMATHS_SPACE_OR_FUNCTION``
    /// - origin: ENTITY( ``eMATHS_FUNCTION`` )
    public var LOWER_LIMIT_NEG_INFINITY: SDAI.BOOLEAN?  {
      switch self {
      case ._MATHS_FUNCTION(let entity): return entity.LOWER_LIMIT_NEG_INFINITY
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMATHS_SPACE_OR_FUNCTION``
    /// - origin: ENTITY( ``eMATHS_FUNCTION`` )
    public var PREP_FUNCTIONS: (SDAI.LIST<eMATHS_FUNCTION>/*[1:nil]*/ )?  {
      switch self {
      case ._MATHS_FUNCTION(let entity): return entity.PREP_FUNCTIONS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMATHS_SPACE_OR_FUNCTION``
    /// - origin: ENTITY( ``eMATHS_FUNCTION`` )
    public var DOMAIN: sTUPLE_SPACE?  {
      switch self {
      case ._MATHS_FUNCTION(let entity): return entity.DOMAIN
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMATHS_SPACE_OR_FUNCTION``
    /// - origin: ENTITY( ``eMATHS_FUNCTION`` )
    public var TRIANGLE: nLOWER_UPPER?  {
      switch self {
      case ._MATHS_FUNCTION(let entity): return entity.TRIANGLE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMATHS_SPACE_OR_FUNCTION``
    /// - origin: ENTITY( ``eMATHS_SPACE`` )
    public var INCREMENT_VALUE: tMATHS_NUMBER?  {
      switch self {
      case ._MATHS_SPACE(let entity): return entity.INCREMENT_VALUE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMATHS_SPACE_OR_FUNCTION``
    /// - origin: ENTITY( ``eMATHS_FUNCTION`` )
    public var RANGE: sTUPLE_SPACE?  {
      switch self {
      case ._MATHS_FUNCTION(let entity): return entity.RANGE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMATHS_SPACE_OR_FUNCTION``
    /// - origin: ENTITY( ``eMATHS_FUNCTION`` )
    public var OUTPUT_REPACK: nREPACKAGE_OPTIONS?  {
      switch self {
      case ._MATHS_FUNCTION(let entity): return entity.OUTPUT_REPACK
      default: return nil
      }
    }


    //MARK: - SDAIValue
    public func isValueEqual<T: SDAIValue>(to rhs: T) -> Bool {
      switch self {
      case ._MATHS_FUNCTION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._MATHS_SPACE(let selection): return selection.value.isValueEqual(to: rhs)
      }
    }

    public func isValueEqualOptionally<T: SDAIValue>(to rhs: T?) -> Bool? {
      switch self {
      case ._MATHS_FUNCTION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._MATHS_SPACE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      }
    }

    public func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      switch self {
      case ._MATHS_FUNCTION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._MATHS_SPACE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      }
    }

    public func isValueEqual<T: SDAIValue>(to rhs: T, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      switch self {
      case ._MATHS_FUNCTION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._MATHS_SPACE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      }
    }

    public func isValueEqualOptionally<T: SDAIValue>(to rhs: T?, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      switch self {
      case ._MATHS_FUNCTION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._MATHS_SPACE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      }
    }


    //MARK: SDAIGenericTypeBase
    public func copy() -> Self {
      switch self {
      case ._MATHS_FUNCTION(let selection): return ._MATHS_FUNCTION(selection.copy())
      case ._MATHS_SPACE(let selection): return ._MATHS_SPACE(selection.copy())
      }
    }

    //MARK: SDAIGenericType
    public var typeMembers: Set<SDAI.STRING> {
      var members: Set<SDAI.STRING> = [SDAI.STRING(Self.typeName)]
      switch self {
      case ._MATHS_FUNCTION(let selection): members.formUnion(selection.typeMembers)
      case ._MATHS_SPACE(let selection): members.formUnion(selection.typeMembers)
      }
      return members
    }

    public var entityReference: SDAI.EntityReference? {
      switch self {
      case ._MATHS_FUNCTION(let selection): return selection.entityReference
      case ._MATHS_SPACE(let selection): return selection.entityReference
      }
    }
    public var stringValue: SDAI.STRING? {
      switch self {
      case ._MATHS_FUNCTION(let selection): return selection.stringValue
      case ._MATHS_SPACE(let selection): return selection.stringValue
      }
    }
    public var binaryValue: SDAI.BINARY? {
      switch self {
      case ._MATHS_FUNCTION(let selection): return selection.binaryValue
      case ._MATHS_SPACE(let selection): return selection.binaryValue
      }
    }
    public var logicalValue: SDAI.LOGICAL? {
      switch self {
      case ._MATHS_FUNCTION(let selection): return selection.logicalValue
      case ._MATHS_SPACE(let selection): return selection.logicalValue
      }
    }
    public var booleanValue: SDAI.BOOLEAN? {
      switch self {
      case ._MATHS_FUNCTION(let selection): return selection.booleanValue
      case ._MATHS_SPACE(let selection): return selection.booleanValue
      }
    }
    public var numberValue: SDAI.NUMBER? {
      switch self {
      case ._MATHS_FUNCTION(let selection): return selection.numberValue
      case ._MATHS_SPACE(let selection): return selection.numberValue
      }
    }
    public var realValue: SDAI.REAL? {
      switch self {
      case ._MATHS_FUNCTION(let selection): return selection.realValue
      case ._MATHS_SPACE(let selection): return selection.realValue
      }
    }
    public var integerValue: SDAI.INTEGER? {
      switch self {
      case ._MATHS_FUNCTION(let selection): return selection.integerValue
      case ._MATHS_SPACE(let selection): return selection.integerValue
      }
    }
    public var genericEnumValue: SDAI.GenericEnumValue? {
      switch self {
      case ._MATHS_FUNCTION(let selection): return selection.genericEnumValue
      case ._MATHS_SPACE(let selection): return selection.genericEnumValue
      }
    }
    public func arrayOptionalValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.ARRAY_OPTIONAL<ELEM>? {
      switch self {
      case ._MATHS_FUNCTION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._MATHS_SPACE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      }
    }
    public func arrayValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.ARRAY<ELEM>? {
      switch self {
      case ._MATHS_FUNCTION(let selection): return selection.arrayValue(elementType:elementType)
      case ._MATHS_SPACE(let selection): return selection.arrayValue(elementType:elementType)
      }
    }
    public func listValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.LIST<ELEM>? {
      switch self {
      case ._MATHS_FUNCTION(let selection): return selection.listValue(elementType:elementType)
      case ._MATHS_SPACE(let selection): return selection.listValue(elementType:elementType)
      }
    }
    public func bagValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.BAG<ELEM>? {
      switch self {
      case ._MATHS_FUNCTION(let selection): return selection.bagValue(elementType:elementType)
      case ._MATHS_SPACE(let selection): return selection.bagValue(elementType:elementType)
      }
    }
    public func setValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.SET<ELEM>? {
      switch self {
      case ._MATHS_FUNCTION(let selection): return selection.setValue(elementType:elementType)
      case ._MATHS_SPACE(let selection): return selection.setValue(elementType:elementType)
      }
    }
    public func enumValue<ENUM:SDAIEnumerationType>(enumType:ENUM.Type) -> ENUM? {
      switch self {
      case ._MATHS_FUNCTION(let selection): return selection.enumValue(enumType:enumType)
      case ._MATHS_SPACE(let selection): return selection.enumValue(enumType:enumType)
      }
    }

    //MARK: SDAIUnderlyingType
    public typealias FundamentalType = Self
    public static var typeName: String = 
      "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.MATHS_SPACE_OR_FUNCTION"
    public var asFundamentalType: FundamentalType { return self }

    //MARK: SDAIObservableAggregateElement
    public var entityReferences: AnySequence<SDAI.EntityReference> {
      switch self {
      case ._MATHS_FUNCTION(let entity): return entity.entityReferences
      case ._MATHS_SPACE(let entity): return entity.entityReferences
      }
    }

    public mutating func configure(with observer: SDAI.EntityReferenceObserver) {
      switch self {
      case ._MATHS_FUNCTION(let entity): 
        entity.configure(with: observer)
        self = ._MATHS_FUNCTION(entity)
      case ._MATHS_SPACE(let entity): 
        entity.configure(with: observer)
        self = ._MATHS_SPACE(entity)
      }
    }

    public mutating func teardownObserver() {
      switch self {
      case ._MATHS_FUNCTION(let entity): 
        entity.teardownObserver()
        self = ._MATHS_FUNCTION(entity)
      case ._MATHS_SPACE(let entity): 
        entity.teardownObserver()
        self = ._MATHS_SPACE(entity)
      }
    }

    //MARK: SDAIAggregationBehavior
    public var aggregationHiBound: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationHiIndex: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationLoBound: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationLoIndex: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationSize: Int? {
      switch self {
      default: return nil
      }
    }

    //MARK: WHERE RULE VALIDATION (SELECT TYPE)
    public static func validateWhereRules(instance:Self?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      var result: [SDAI.WhereLabel:SDAI.LOGICAL] = [:]
      switch instance {
      case ._MATHS_FUNCTION(let selectValue): 
        result = eMATHS_FUNCTION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\MATHS_FUNCTION")
      case ._MATHS_SPACE(let selectValue): result = eMATHS_SPACE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\MATHS_SPACE")
      case nil: break
      }

      return result
    }

  }

}


//MARK: - SELECT TYPE HIERARCHY
public protocol AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sMATHS_SPACE_OR_FUNCTION__type: 
  SDAISelectType {

  //MARK: GROUP REFERENCES
  var super_eMATHS_SPACE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMATHS_SPACE? { get }
  var super_eMATHS_FUNCTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMATHS_FUNCTION? { get }
  var super_eGENERIC_EXPRESSION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGENERIC_EXPRESSION? { get }

  //MARK: ENTITY ATTRIBUTE REFERENCES
  var RANGE_ARGUMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMATHS_SPACE?  { get }
  var INPUT_REPACK: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nREPACKAGE_OPTIONS?  { get }
  var EXTENDER: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMATHS_SPACE?  { get }
  var FINAL_FUNCTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sMATHS_FUNCTION_SELECT?  { get }
  var COEF: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMATHS_FUNCTION?  { get }
  var DIRECTION_CONSTRAINT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFINITE_REAL_INTERVAL?  { get }
  var EXPONENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_INTEGER?  { get }
  var DOMAIN_CONSTRAINT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nSPACE_CONSTRAINT_TYPE?  { get }
  var FACTORS: SDAI.LIST<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMATHS_SPACE>?  { get }
  var CENTRE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOMPLEX_NUMBER_LITERAL?  { get }
  var PAIRS: (SDAI.SET<SDAI.LIST<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sMATHS_VALUE>/*[2:2]*/ >/*[1:
    nil]*/ )?  { get }
  var SHAPE: (SDAI.LIST<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_INTEGER>/*[1:nil]*/ )?  { get }
  var INCREMENTS: (SDAI.LIST<SDAI.INTEGER>/*[1:nil]*/ )?  { get }
  var REPEATED_KNOTS: (SDAI.LIST<SDAI.REAL>/*[2:nil]*/ )?  { get }
  var VARIABLE_OF_INTEGRATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tINPUT_SELECTOR?  { get }
  var DEGREE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tNONNEGATIVE_INTEGER?  { get }
  var PARAMETERS: SDAI.LIST<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sMATHS_VALUE>?  { get }
  var SOLE_OUTPUT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sMATHS_VALUE?  { get }
  var EXTENSION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nEXTENSION_OPTIONS?  { get }
  var BASIS: (SDAI.LIST<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eB_SPLINE_BASIS>/*[1:nil]*/ )?  { get }
  var LO_UP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nLOWER_UPPER?  { get }
  var SYMMETRY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nSYMMETRY_TYPE?  { get }
  var RANGE_CONSTRAINT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nSPACE_CONSTRAINT_TYPE?  { get }
  var INDEX_BASE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tZERO_OR_ONE?  { get }
  var IMAG_CONSTRAINT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sREAL_INTERVAL?  { get }
  var DERIVAND: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMATHS_FUNCTION?  { get }
  var BELOW: SDAI.INTEGER?  { get }
  var EXPLICIT_RANGE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sTUPLE_SPACE?  { get }
  var START_VALUE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tMATHS_NUMBER?  { get }
  var DISTANCE_CONSTRAINT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sREAL_INTERVAL?  { get }
  var VAL: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMATHS_FUNCTION?  { get }
  var SIZE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_INTEGER?  { get }
  var DOMAIN_ARGUMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMATHS_SPACE?  { get }
  var REAL_CONSTRAINT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sREAL_INTERVAL?  { get }
  var FUN: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMATHS_FUNCTION?  { get }
  var FUNC_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nELEMENTARY_FUNCTION_ENUMERATORS?  { get }
  var INTEGRAND: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMATHS_FUNCTION?  { get }
  var LOC: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMATHS_FUNCTION?  { get }
  var SPACE_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nELEMENTARY_SPACE_ENUMERATORS?  { get }
  var UPPER_LIMIT_POS_INFINITY: SDAI.BOOLEAN?  { get }
  var FIRST: SDAI.INTEGER?  { get }
  var D_VARIABLES: (SDAI.LIST<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tINPUT_SELECTOR>/*[1:nil]*/ )?  { get }
  var OPERANDS: (SDAI.LIST<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMATHS_FUNCTION>/*[2:nil]*/ )?  { get }
  var SELECTOR: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tINPUT_SELECTOR?  { get }
  var MEMBERS: SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sMATHS_VALUE>?  { get }
  var INCREMENT_NUMBER: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_INTEGER?  { get }
  var STARTING_INDICES: (SDAI.LIST<SDAI.INTEGER>/*[1:nil]*/ )?  { get }
  var INDEX: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMATHS_FUNCTION?  { get }
  var VARIABLES: (SDAI.LIST_UNIQUE<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGENERIC_VARIABLE>/*[1:nil]*/ )?  { get }
  var SOURCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMATHS_FUNCTION?  { get }
  var MAIN_DIAGONAL_VALUE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sMATHS_VALUE?  { get }
  var NUM_BASIS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_INTEGER?  { get }
  var OPERAND: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMATHS_SPACE?  { get }
  var EXPLICIT_DOMAIN: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sTUPLE_SPACE?  { get }
  var SELECTED_OUTPUT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tNONNEGATIVE_INTEGER?  { get }
  var LOWER_LIMIT_NEG_INFINITY: SDAI.BOOLEAN?  { get }
  var PREP_FUNCTIONS: (SDAI.LIST<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMATHS_FUNCTION>/*[1:nil]*/ )?  { get }
  var DOMAIN: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sTUPLE_SPACE?  { get }
  var TRIANGLE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nLOWER_UPPER?  { get }
  var INCREMENT_VALUE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tMATHS_NUMBER?  { get }
  var RANGE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sTUPLE_SPACE?  { get }
  var OUTPUT_REPACK: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nREPACKAGE_OPTIONS?  { get }
}

public protocol AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sMATHS_SPACE_OR_FUNCTION__subtype: 
  AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sMATHS_SPACE_OR_FUNCTION__type, SDAIDefinedType
where Supertype: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sMATHS_SPACE_OR_FUNCTION__type
{}

public extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sMATHS_SPACE_OR_FUNCTION__subtype {
  //MARK: CONSTRUCTORS
  init?(possiblyFrom complex: SDAI.ComplexEntity?) {
    self.init(fundamental: FundamentalType(possiblyFrom: complex))
  }

  init?<T: SDAIUnderlyingType>(possiblyFrom underlyingType: T?) {
    self.init(fundamental: FundamentalType(possiblyFrom: underlyingType))
  }

  init?<G: SDAIGenericType>(fromGeneric generic: G?) {
    self.init(fundamental: FundamentalType.convert(fromGeneric: generic))
  }

  //MARK: GROUP REFERENCES
  var super_eMATHS_SPACE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMATHS_SPACE? { rep.super_eMATHS_SPACE }
  var super_eMATHS_FUNCTION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMATHS_FUNCTION? { rep.super_eMATHS_FUNCTION }
  var super_eGENERIC_EXPRESSION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGENERIC_EXPRESSION? { rep.super_eGENERIC_EXPRESSION }

  //MARK: ENTITY ATTRIBUTE REFERENCES
  var RANGE_ARGUMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMATHS_SPACE?  { rep.RANGE_ARGUMENT }
  var INPUT_REPACK: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nREPACKAGE_OPTIONS?  { rep.INPUT_REPACK }
  var EXTENDER: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMATHS_SPACE?  { rep.EXTENDER }
  var FINAL_FUNCTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sMATHS_FUNCTION_SELECT?  { rep.FINAL_FUNCTION }
  var COEF: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMATHS_FUNCTION?  { rep.COEF }
  var DIRECTION_CONSTRAINT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFINITE_REAL_INTERVAL?  { rep.DIRECTION_CONSTRAINT }
  var EXPONENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_INTEGER?  { rep.EXPONENT }
  var DOMAIN_CONSTRAINT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nSPACE_CONSTRAINT_TYPE?  { rep.DOMAIN_CONSTRAINT }
  var FACTORS: SDAI.LIST<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMATHS_SPACE>?  { rep.FACTORS }
  var CENTRE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOMPLEX_NUMBER_LITERAL?  { rep.CENTRE }
  var PAIRS: (SDAI.SET<SDAI.LIST<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sMATHS_VALUE>/*[2:2]*/ >/*[1:
    nil]*/ )?  { rep.PAIRS }
  var SHAPE: (SDAI.LIST<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_INTEGER>/*[1:nil]*/ )?  { rep.SHAPE }
  var INCREMENTS: (SDAI.LIST<SDAI.INTEGER>/*[1:nil]*/ )?  { rep.INCREMENTS }
  var REPEATED_KNOTS: (SDAI.LIST<SDAI.REAL>/*[2:nil]*/ )?  { rep.REPEATED_KNOTS }
  var VARIABLE_OF_INTEGRATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tINPUT_SELECTOR?  { rep.VARIABLE_OF_INTEGRATION }
  var DEGREE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tNONNEGATIVE_INTEGER?  { rep.DEGREE }
  var PARAMETERS: SDAI.LIST<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sMATHS_VALUE>?  { rep.PARAMETERS }
  var SOLE_OUTPUT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sMATHS_VALUE?  { rep.SOLE_OUTPUT }
  var EXTENSION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nEXTENSION_OPTIONS?  { rep.EXTENSION }
  var BASIS: (SDAI.LIST<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eB_SPLINE_BASIS>/*[1:nil]*/ )?  { rep.BASIS }
  var LO_UP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nLOWER_UPPER?  { rep.LO_UP }
  var SYMMETRY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nSYMMETRY_TYPE?  { rep.SYMMETRY }
  var RANGE_CONSTRAINT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nSPACE_CONSTRAINT_TYPE?  { rep.RANGE_CONSTRAINT }
  var INDEX_BASE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tZERO_OR_ONE?  { rep.INDEX_BASE }
  var IMAG_CONSTRAINT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sREAL_INTERVAL?  { rep.IMAG_CONSTRAINT }
  var DERIVAND: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMATHS_FUNCTION?  { rep.DERIVAND }
  var BELOW: SDAI.INTEGER?  { rep.BELOW }
  var EXPLICIT_RANGE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sTUPLE_SPACE?  { rep.EXPLICIT_RANGE }
  var START_VALUE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tMATHS_NUMBER?  { rep.START_VALUE }
  var DISTANCE_CONSTRAINT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sREAL_INTERVAL?  { rep.DISTANCE_CONSTRAINT }
  var VAL: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMATHS_FUNCTION?  { rep.VAL }
  var SIZE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_INTEGER?  { rep.SIZE }
  var DOMAIN_ARGUMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMATHS_SPACE?  { rep.DOMAIN_ARGUMENT }
  var REAL_CONSTRAINT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sREAL_INTERVAL?  { rep.REAL_CONSTRAINT }
  var FUN: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMATHS_FUNCTION?  { rep.FUN }
  var FUNC_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nELEMENTARY_FUNCTION_ENUMERATORS?  { rep.FUNC_ID }
  var INTEGRAND: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMATHS_FUNCTION?  { rep.INTEGRAND }
  var LOC: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMATHS_FUNCTION?  { rep.LOC }
  var SPACE_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nELEMENTARY_SPACE_ENUMERATORS?  { rep.SPACE_ID }
  var UPPER_LIMIT_POS_INFINITY: SDAI.BOOLEAN?  { rep.UPPER_LIMIT_POS_INFINITY }
  var FIRST: SDAI.INTEGER?  { rep.FIRST }
  var D_VARIABLES: (SDAI.LIST<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tINPUT_SELECTOR>/*[1:nil]*/ )?  { rep.D_VARIABLES }
  var OPERANDS: (SDAI.LIST<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMATHS_FUNCTION>/*[2:nil]*/ )?  { rep.OPERANDS }
  var SELECTOR: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tINPUT_SELECTOR?  { rep.SELECTOR }
  var MEMBERS: SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sMATHS_VALUE>?  { rep.MEMBERS }
  var INCREMENT_NUMBER: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_INTEGER?  { rep.INCREMENT_NUMBER }
  var STARTING_INDICES: (SDAI.LIST<SDAI.INTEGER>/*[1:nil]*/ )?  { rep.STARTING_INDICES }
  var INDEX: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMATHS_FUNCTION?  { rep.INDEX }
  var VARIABLES: (SDAI.LIST_UNIQUE<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGENERIC_VARIABLE>/*[1:nil]*/ )?  { rep.VARIABLES }
  var SOURCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMATHS_FUNCTION?  { rep.SOURCE }
  var MAIN_DIAGONAL_VALUE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sMATHS_VALUE?  { rep.MAIN_DIAGONAL_VALUE }
  var NUM_BASIS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_INTEGER?  { rep.NUM_BASIS }
  var OPERAND: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMATHS_SPACE?  { rep.OPERAND }
  var EXPLICIT_DOMAIN: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sTUPLE_SPACE?  { rep.EXPLICIT_DOMAIN }
  var SELECTED_OUTPUT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tNONNEGATIVE_INTEGER?  { rep.SELECTED_OUTPUT }
  var LOWER_LIMIT_NEG_INFINITY: SDAI.BOOLEAN?  { rep.LOWER_LIMIT_NEG_INFINITY }
  var PREP_FUNCTIONS: (SDAI.LIST<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMATHS_FUNCTION>/*[1:nil]*/ )?  { rep.PREP_FUNCTIONS }
  var DOMAIN: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sTUPLE_SPACE?  { rep.DOMAIN }
  var TRIANGLE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nLOWER_UPPER?  { rep.TRIANGLE }
  var INCREMENT_VALUE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tMATHS_NUMBER?  { rep.INCREMENT_VALUE }
  var RANGE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sTUPLE_SPACE?  { rep.RANGE }
  var OUTPUT_REPACK: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nREPACKAGE_OPTIONS?  { rep.OUTPUT_REPACK }
}

