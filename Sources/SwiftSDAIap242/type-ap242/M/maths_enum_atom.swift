/* file: maths_enum_atom.swift 	 generated: Sat Aug 14 13:46:02 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -TYPE DEFINITION in EXPRESS
/*
  TYPE maths_enum_atom = SELECT
    ( elementary_function_enumerators (*ENUM*),
     elementary_space_enumerators (*ENUM*),
     extension_options (*ENUM*),
     lower_upper (*ENUM*),
     open_closed (*ENUM*),
     ordering_type (*ENUM*),
     repackage_options (*ENUM*),
     space_constraint_type (*ENUM*),
     symmetry_type (*ENUM*) );
  END_TYPE; -- maths_enum_atom (line:4102 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES FOR SELECT
/*
  elementary_function_enumerators (*ENUM*): elementary_function_enumerators

  elementary_space_enumerators (*ENUM*): elementary_space_enumerators

  extension_options (*ENUM*): extension_options

  lower_upper (*ENUM*): lower_upper

  open_closed (*ENUM*): open_closed

  ordering_type (*ENUM*): ordering_type

  repackage_options (*ENUM*): repackage_options

  space_constraint_type (*ENUM*): space_constraint_type

  symmetry_type (*ENUM*): symmetry_type

*/

/** SELECT type
- EXPRESS:
```express
  TYPE maths_enum_atom = SELECT
    ( elementary_function_enumerators (*ENUM*),
     elementary_space_enumerators (*ENUM*),
     extension_options (*ENUM*),
     lower_upper (*ENUM*),
     open_closed (*ENUM*),
     ordering_type (*ENUM*),
     repackage_options (*ENUM*),
     space_constraint_type (*ENUM*),
     symmetry_type (*ENUM*) );
  END_TYPE; -- maths_enum_atom (line:4102 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public enum sMATHS_ENUM_ATOM : SDAIValue, AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sMATHS_ENUM_ATOM__type {

    /// SELECT case ``nELEMENTARY_FUNCTION_ENUMERATORS`` (ENUM) in ``sMATHS_ENUM_ATOM``
    case _ELEMENTARY_FUNCTION_ENUMERATORS(nELEMENTARY_FUNCTION_ENUMERATORS)	// (ENUM)

    /// SELECT case ``nELEMENTARY_SPACE_ENUMERATORS`` (ENUM) in ``sMATHS_ENUM_ATOM``
    case _ELEMENTARY_SPACE_ENUMERATORS(nELEMENTARY_SPACE_ENUMERATORS)	// (ENUM)

    /// SELECT case ``nEXTENSION_OPTIONS`` (ENUM) in ``sMATHS_ENUM_ATOM``
    case _EXTENSION_OPTIONS(nEXTENSION_OPTIONS)	// (ENUM)

    /// SELECT case ``nLOWER_UPPER`` (ENUM) in ``sMATHS_ENUM_ATOM``
    case _LOWER_UPPER(nLOWER_UPPER)	// (ENUM)

    /// SELECT case ``nOPEN_CLOSED`` (ENUM) in ``sMATHS_ENUM_ATOM``
    case _OPEN_CLOSED(nOPEN_CLOSED)	// (ENUM)

    /// SELECT case ``nORDERING_TYPE`` (ENUM) in ``sMATHS_ENUM_ATOM``
    case _ORDERING_TYPE(nORDERING_TYPE)	// (ENUM)

    /// SELECT case ``nREPACKAGE_OPTIONS`` (ENUM) in ``sMATHS_ENUM_ATOM``
    case _REPACKAGE_OPTIONS(nREPACKAGE_OPTIONS)	// (ENUM)

    /// SELECT case ``nSPACE_CONSTRAINT_TYPE`` (ENUM) in ``sMATHS_ENUM_ATOM``
    case _SPACE_CONSTRAINT_TYPE(nSPACE_CONSTRAINT_TYPE)	// (ENUM)

    /// SELECT case ``nSYMMETRY_TYPE`` (ENUM) in ``sMATHS_ENUM_ATOM``
    case _SYMMETRY_TYPE(nSYMMETRY_TYPE)	// (ENUM)

    //MARK: - CONSTRUCTORS
    public init(fundamental: FundamentalType) { self = fundamental }

    public init?<T: SDAIUnderlyingType>(possiblyFrom underlyingType: T?){
      guard let underlyingType = underlyingType else { return nil }

      if let base = underlyingType as? nELEMENTARY_FUNCTION_ENUMERATORS {
        self = ._ELEMENTARY_FUNCTION_ENUMERATORS(base)
      }
      else if let base = underlyingType as? nELEMENTARY_SPACE_ENUMERATORS {
        self = ._ELEMENTARY_SPACE_ENUMERATORS(base)
      }
      else if let base = underlyingType as? nEXTENSION_OPTIONS {
        self = ._EXTENSION_OPTIONS(base)
      }
      else if let base = underlyingType as? nLOWER_UPPER {
        self = ._LOWER_UPPER(base)
      }
      else if let base = underlyingType as? nOPEN_CLOSED {
        self = ._OPEN_CLOSED(base)
      }
      else if let base = underlyingType as? nORDERING_TYPE {
        self = ._ORDERING_TYPE(base)
      }
      else if let base = underlyingType as? nREPACKAGE_OPTIONS {
        self = ._REPACKAGE_OPTIONS(base)
      }
      else if let base = underlyingType as? nSPACE_CONSTRAINT_TYPE {
        self = ._SPACE_CONSTRAINT_TYPE(base)
      }
      else if let base = underlyingType as? nSYMMETRY_TYPE {
        self = ._SYMMETRY_TYPE(base)
      }
      else if let fundamental = underlyingType.asFundamentalType as? nELEMENTARY_FUNCTION_ENUMERATORS.FundamentalType {
        self = ._ELEMENTARY_FUNCTION_ENUMERATORS( nELEMENTARY_FUNCTION_ENUMERATORS(fundamental: fundamental) )
      }
      else if let fundamental = underlyingType.asFundamentalType as? nELEMENTARY_SPACE_ENUMERATORS.FundamentalType {
        self = ._ELEMENTARY_SPACE_ENUMERATORS( nELEMENTARY_SPACE_ENUMERATORS(fundamental: fundamental) )
      }
      else if let fundamental = underlyingType.asFundamentalType as? nEXTENSION_OPTIONS.FundamentalType {
        self = ._EXTENSION_OPTIONS( nEXTENSION_OPTIONS(fundamental: fundamental) )
      }
      else if let fundamental = underlyingType.asFundamentalType as? nLOWER_UPPER.FundamentalType {
        self = ._LOWER_UPPER( nLOWER_UPPER(fundamental: fundamental) )
      }
      else if let fundamental = underlyingType.asFundamentalType as? nOPEN_CLOSED.FundamentalType {
        self = ._OPEN_CLOSED( nOPEN_CLOSED(fundamental: fundamental) )
      }
      else if let fundamental = underlyingType.asFundamentalType as? nORDERING_TYPE.FundamentalType {
        self = ._ORDERING_TYPE( nORDERING_TYPE(fundamental: fundamental) )
      }
      else if let fundamental = underlyingType.asFundamentalType as? nREPACKAGE_OPTIONS.FundamentalType {
        self = ._REPACKAGE_OPTIONS( nREPACKAGE_OPTIONS(fundamental: fundamental) )
      }
      else if let fundamental = underlyingType.asFundamentalType as? nSPACE_CONSTRAINT_TYPE.FundamentalType {
        self = ._SPACE_CONSTRAINT_TYPE( nSPACE_CONSTRAINT_TYPE(fundamental: fundamental) )
      }
      else if let fundamental = underlyingType.asFundamentalType as? nSYMMETRY_TYPE.FundamentalType {
        self = ._SYMMETRY_TYPE( nSYMMETRY_TYPE(fundamental: fundamental) )
      }
      else { return nil }
    }

    public init?(possiblyFrom complex: SDAI.ComplexEntity?) {
      return nil
    }

    public init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let select = generic else { return nil }

      if let fundamental = select as? Self {
        self.init(fundamental: fundamental)
      }
      else if let base = nELEMENTARY_FUNCTION_ENUMERATORS.convert(fromGeneric: select) {
        self = ._ELEMENTARY_FUNCTION_ENUMERATORS(base)
      }
      else if let base = nELEMENTARY_SPACE_ENUMERATORS.convert(fromGeneric: select) {
        self = ._ELEMENTARY_SPACE_ENUMERATORS(base)
      }
      else if let base = nEXTENSION_OPTIONS.convert(fromGeneric: select) {
        self = ._EXTENSION_OPTIONS(base)
      }
      else if let base = nLOWER_UPPER.convert(fromGeneric: select) {
        self = ._LOWER_UPPER(base)
      }
      else if let base = nOPEN_CLOSED.convert(fromGeneric: select) {
        self = ._OPEN_CLOSED(base)
      }
      else if let base = nORDERING_TYPE.convert(fromGeneric: select) {
        self = ._ORDERING_TYPE(base)
      }
      else if let base = nREPACKAGE_OPTIONS.convert(fromGeneric: select) {
        self = ._REPACKAGE_OPTIONS(base)
      }
      else if let base = nSPACE_CONSTRAINT_TYPE.convert(fromGeneric: select) {
        self = ._SPACE_CONSTRAINT_TYPE(base)
      }
      else if let base = nSYMMETRY_TYPE.convert(fromGeneric: select) {
        self = ._SYMMETRY_TYPE(base)
      }
      else { return nil }
    }

    // InitializableByP21Parameter
    public static var bareTypeName: String = "MATHS_ENUM_ATOM"

    public init?(p21typedParam: P21Decode.ExchangeStructure.TypedParameter, from exchangeStructure: P21Decode.ExchangeStructure) {
      guard let keyword = p21typedParam.keyword.asStandardKeyword else { exchangeStructure.error = "unexpected p21parameter(\(p21typedParam)) while resolving \(Self.bareTypeName) select value"; return nil }

      switch(keyword) {
      case nELEMENTARY_FUNCTION_ENUMERATORS.bareTypeName:
        guard let base = nELEMENTARY_FUNCTION_ENUMERATORS(p21typedParam: p21typedParam, from: exchangeStructure) else { exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) select value"); return nil }
        self = ._ELEMENTARY_FUNCTION_ENUMERATORS(base)

      case nELEMENTARY_SPACE_ENUMERATORS.bareTypeName:
        guard let base = nELEMENTARY_SPACE_ENUMERATORS(p21typedParam: p21typedParam, from: exchangeStructure) else { exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) select value"); return nil }
        self = ._ELEMENTARY_SPACE_ENUMERATORS(base)

      case nEXTENSION_OPTIONS.bareTypeName:
        guard let base = nEXTENSION_OPTIONS(p21typedParam: p21typedParam, from: exchangeStructure) else { exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) select value"); return nil }
        self = ._EXTENSION_OPTIONS(base)

      case nLOWER_UPPER.bareTypeName:
        guard let base = nLOWER_UPPER(p21typedParam: p21typedParam, from: exchangeStructure) else { exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) select value"); return nil }
        self = ._LOWER_UPPER(base)

      case nOPEN_CLOSED.bareTypeName:
        guard let base = nOPEN_CLOSED(p21typedParam: p21typedParam, from: exchangeStructure) else { exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) select value"); return nil }
        self = ._OPEN_CLOSED(base)

      case nORDERING_TYPE.bareTypeName:
        guard let base = nORDERING_TYPE(p21typedParam: p21typedParam, from: exchangeStructure) else { exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) select value"); return nil }
        self = ._ORDERING_TYPE(base)

      case nREPACKAGE_OPTIONS.bareTypeName:
        guard let base = nREPACKAGE_OPTIONS(p21typedParam: p21typedParam, from: exchangeStructure) else { exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) select value"); return nil }
        self = ._REPACKAGE_OPTIONS(base)

      case nSPACE_CONSTRAINT_TYPE.bareTypeName:
        guard let base = nSPACE_CONSTRAINT_TYPE(p21typedParam: p21typedParam, from: exchangeStructure) else { exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) select value"); return nil }
        self = ._SPACE_CONSTRAINT_TYPE(base)

      case nSYMMETRY_TYPE.bareTypeName:
        guard let base = nSYMMETRY_TYPE(p21typedParam: p21typedParam, from: exchangeStructure) else { exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) select value"); return nil }
        self = ._SYMMETRY_TYPE(base)

      default:
        exchangeStructure.error = "unexpected p21parameter(\(p21typedParam)) while resolving \(Self.bareTypeName) select value"
        return nil
      }
    }

    public init?(p21untypedParam: P21Decode.ExchangeStructure.UntypedParameter, from exchangeStructure: P21Decode.ExchangeStructure) {
      switch p21untypedParam {
      case .rhsOccurenceName(let rhsname):
        switch rhsname {
        case .constantEntityName(let name):
          guard let entity = exchangeStructure.resolve(constantEntityName: name) else {exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) instance"); return nil }
          self.init(possiblyFrom: entity.complexEntity)

        case .entityInstanceName(let name):
          guard let complex = exchangeStructure.resolve(entityInstanceName: name) else {exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) instance"); return nil }
          self.init(possiblyFrom: complex)

        default:
          exchangeStructure.error = "unexpected p21parameter(\(p21untypedParam)) while resolving \(Self.bareTypeName) select instance"
          return nil
        }

      default:
        exchangeStructure.error = "unexpected p21parameter(\(p21untypedParam)) while resolving \(Self.bareTypeName) select instance"
        return nil
      }
    }

    public init?(p21omittedParamfrom exchangeStructure: P21Decode.ExchangeStructure) {
      return nil
    }


    //MARK: - NON-ENTITY UNDERLYING TYPE REFERENCES
    public var super_nELEMENTARY_FUNCTION_ENUMERATORS: nELEMENTARY_FUNCTION_ENUMERATORS? {
      switch self {
      case ._ELEMENTARY_FUNCTION_ENUMERATORS(let selectValue): return selectValue
      default: return nil
      }
    }

    public var super_nELEMENTARY_SPACE_ENUMERATORS: nELEMENTARY_SPACE_ENUMERATORS? {
      switch self {
      case ._ELEMENTARY_SPACE_ENUMERATORS(let selectValue): return selectValue
      default: return nil
      }
    }

    public var super_nEXTENSION_OPTIONS: nEXTENSION_OPTIONS? {
      switch self {
      case ._EXTENSION_OPTIONS(let selectValue): return selectValue
      default: return nil
      }
    }

    public var super_nLOWER_UPPER: nLOWER_UPPER? {
      switch self {
      case ._LOWER_UPPER(let selectValue): return selectValue
      default: return nil
      }
    }

    public var super_nOPEN_CLOSED: nOPEN_CLOSED? {
      switch self {
      case ._OPEN_CLOSED(let selectValue): return selectValue
      default: return nil
      }
    }

    public var super_nORDERING_TYPE: nORDERING_TYPE? {
      switch self {
      case ._ORDERING_TYPE(let selectValue): return selectValue
      default: return nil
      }
    }

    public var super_nREPACKAGE_OPTIONS: nREPACKAGE_OPTIONS? {
      switch self {
      case ._REPACKAGE_OPTIONS(let selectValue): return selectValue
      default: return nil
      }
    }

    public var super_nSPACE_CONSTRAINT_TYPE: nSPACE_CONSTRAINT_TYPE? {
      switch self {
      case ._SPACE_CONSTRAINT_TYPE(let selectValue): return selectValue
      default: return nil
      }
    }

    public var super_nSYMMETRY_TYPE: nSYMMETRY_TYPE? {
      switch self {
      case ._SYMMETRY_TYPE(let selectValue): return selectValue
      default: return nil
      }
    }



    //MARK: - SDAIValue
    public func isValueEqual<T: SDAIValue>(to rhs: T) -> Bool {
      switch self {
      case ._ELEMENTARY_FUNCTION_ENUMERATORS(let selection): return selection.value.isValueEqual(to: rhs)
      case ._ELEMENTARY_SPACE_ENUMERATORS(let selection): return selection.value.isValueEqual(to: rhs)
      case ._EXTENSION_OPTIONS(let selection): return selection.value.isValueEqual(to: rhs)
      case ._LOWER_UPPER(let selection): return selection.value.isValueEqual(to: rhs)
      case ._OPEN_CLOSED(let selection): return selection.value.isValueEqual(to: rhs)
      case ._ORDERING_TYPE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._REPACKAGE_OPTIONS(let selection): return selection.value.isValueEqual(to: rhs)
      case ._SPACE_CONSTRAINT_TYPE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._SYMMETRY_TYPE(let selection): return selection.value.isValueEqual(to: rhs)
      }
    }

    public func isValueEqualOptionally<T: SDAIValue>(to rhs: T?) -> Bool? {
      switch self {
      case ._ELEMENTARY_FUNCTION_ENUMERATORS(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._ELEMENTARY_SPACE_ENUMERATORS(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._EXTENSION_OPTIONS(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._LOWER_UPPER(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._OPEN_CLOSED(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._ORDERING_TYPE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._REPACKAGE_OPTIONS(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._SPACE_CONSTRAINT_TYPE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._SYMMETRY_TYPE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      }
    }

    public func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      switch self {
      case ._ELEMENTARY_FUNCTION_ENUMERATORS(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._ELEMENTARY_SPACE_ENUMERATORS(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._EXTENSION_OPTIONS(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._LOWER_UPPER(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._OPEN_CLOSED(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._ORDERING_TYPE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._REPACKAGE_OPTIONS(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._SPACE_CONSTRAINT_TYPE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._SYMMETRY_TYPE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      }
    }

    public func isValueEqual<T: SDAIValue>(to rhs: T, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      switch self {
      case ._ELEMENTARY_FUNCTION_ENUMERATORS(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._ELEMENTARY_SPACE_ENUMERATORS(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._EXTENSION_OPTIONS(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._LOWER_UPPER(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._OPEN_CLOSED(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._ORDERING_TYPE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._REPACKAGE_OPTIONS(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._SPACE_CONSTRAINT_TYPE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._SYMMETRY_TYPE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      }
    }

    public func isValueEqualOptionally<T: SDAIValue>(to rhs: T?, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      switch self {
      case ._ELEMENTARY_FUNCTION_ENUMERATORS(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._ELEMENTARY_SPACE_ENUMERATORS(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._EXTENSION_OPTIONS(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._LOWER_UPPER(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._OPEN_CLOSED(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._ORDERING_TYPE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._REPACKAGE_OPTIONS(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._SPACE_CONSTRAINT_TYPE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._SYMMETRY_TYPE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      }
    }


    //MARK: SDAIGenericTypeBase
    public func copy() -> Self {
      switch self {
      case ._ELEMENTARY_FUNCTION_ENUMERATORS(let selection): return ._ELEMENTARY_FUNCTION_ENUMERATORS(selection.copy())
      case ._ELEMENTARY_SPACE_ENUMERATORS(let selection): return ._ELEMENTARY_SPACE_ENUMERATORS(selection.copy())
      case ._EXTENSION_OPTIONS(let selection): return ._EXTENSION_OPTIONS(selection.copy())
      case ._LOWER_UPPER(let selection): return ._LOWER_UPPER(selection.copy())
      case ._OPEN_CLOSED(let selection): return ._OPEN_CLOSED(selection.copy())
      case ._ORDERING_TYPE(let selection): return ._ORDERING_TYPE(selection.copy())
      case ._REPACKAGE_OPTIONS(let selection): return ._REPACKAGE_OPTIONS(selection.copy())
      case ._SPACE_CONSTRAINT_TYPE(let selection): return ._SPACE_CONSTRAINT_TYPE(selection.copy())
      case ._SYMMETRY_TYPE(let selection): return ._SYMMETRY_TYPE(selection.copy())
      }
    }

    //MARK: SDAIGenericType
    public var typeMembers: Set<SDAI.STRING> {
      var members: Set<SDAI.STRING> = [SDAI.STRING(Self.typeName)]
      switch self {
      case ._ELEMENTARY_FUNCTION_ENUMERATORS(let selection): members.formUnion(selection.typeMembers)
      case ._ELEMENTARY_SPACE_ENUMERATORS(let selection): members.formUnion(selection.typeMembers)
      case ._EXTENSION_OPTIONS(let selection): members.formUnion(selection.typeMembers)
      case ._LOWER_UPPER(let selection): members.formUnion(selection.typeMembers)
      case ._OPEN_CLOSED(let selection): members.formUnion(selection.typeMembers)
      case ._ORDERING_TYPE(let selection): members.formUnion(selection.typeMembers)
      case ._REPACKAGE_OPTIONS(let selection): members.formUnion(selection.typeMembers)
      case ._SPACE_CONSTRAINT_TYPE(let selection): members.formUnion(selection.typeMembers)
      case ._SYMMETRY_TYPE(let selection): members.formUnion(selection.typeMembers)
      }
      //SELECT data types (indirectly) referencing the current type as a member of the select list
      members.insert(SDAI.STRING(sMATHS_ATOM.typeName)) // -> Self
      members.insert(SDAI.STRING(sATOM_BASED_VALUE.typeName)) // -> sMATHS_ATOM
      members.insert(SDAI.STRING(sMATHS_VALUE.typeName)) // -> sATOM_BASED_VALUE
      members.insert(SDAI.STRING(sMATHS_EXPRESSION.typeName)) // -> sATOM_BASED_VALUE
      return members
    }

    public var entityReference: SDAI.EntityReference? {
      switch self {
      case ._ELEMENTARY_FUNCTION_ENUMERATORS(let selection): return selection.entityReference
      case ._ELEMENTARY_SPACE_ENUMERATORS(let selection): return selection.entityReference
      case ._EXTENSION_OPTIONS(let selection): return selection.entityReference
      case ._LOWER_UPPER(let selection): return selection.entityReference
      case ._OPEN_CLOSED(let selection): return selection.entityReference
      case ._ORDERING_TYPE(let selection): return selection.entityReference
      case ._REPACKAGE_OPTIONS(let selection): return selection.entityReference
      case ._SPACE_CONSTRAINT_TYPE(let selection): return selection.entityReference
      case ._SYMMETRY_TYPE(let selection): return selection.entityReference
      }
    }
    public var stringValue: SDAI.STRING? {
      switch self {
      case ._ELEMENTARY_FUNCTION_ENUMERATORS(let selection): return selection.stringValue
      case ._ELEMENTARY_SPACE_ENUMERATORS(let selection): return selection.stringValue
      case ._EXTENSION_OPTIONS(let selection): return selection.stringValue
      case ._LOWER_UPPER(let selection): return selection.stringValue
      case ._OPEN_CLOSED(let selection): return selection.stringValue
      case ._ORDERING_TYPE(let selection): return selection.stringValue
      case ._REPACKAGE_OPTIONS(let selection): return selection.stringValue
      case ._SPACE_CONSTRAINT_TYPE(let selection): return selection.stringValue
      case ._SYMMETRY_TYPE(let selection): return selection.stringValue
      }
    }
    public var binaryValue: SDAI.BINARY? {
      switch self {
      case ._ELEMENTARY_FUNCTION_ENUMERATORS(let selection): return selection.binaryValue
      case ._ELEMENTARY_SPACE_ENUMERATORS(let selection): return selection.binaryValue
      case ._EXTENSION_OPTIONS(let selection): return selection.binaryValue
      case ._LOWER_UPPER(let selection): return selection.binaryValue
      case ._OPEN_CLOSED(let selection): return selection.binaryValue
      case ._ORDERING_TYPE(let selection): return selection.binaryValue
      case ._REPACKAGE_OPTIONS(let selection): return selection.binaryValue
      case ._SPACE_CONSTRAINT_TYPE(let selection): return selection.binaryValue
      case ._SYMMETRY_TYPE(let selection): return selection.binaryValue
      }
    }
    public var logicalValue: SDAI.LOGICAL? {
      switch self {
      case ._ELEMENTARY_FUNCTION_ENUMERATORS(let selection): return selection.logicalValue
      case ._ELEMENTARY_SPACE_ENUMERATORS(let selection): return selection.logicalValue
      case ._EXTENSION_OPTIONS(let selection): return selection.logicalValue
      case ._LOWER_UPPER(let selection): return selection.logicalValue
      case ._OPEN_CLOSED(let selection): return selection.logicalValue
      case ._ORDERING_TYPE(let selection): return selection.logicalValue
      case ._REPACKAGE_OPTIONS(let selection): return selection.logicalValue
      case ._SPACE_CONSTRAINT_TYPE(let selection): return selection.logicalValue
      case ._SYMMETRY_TYPE(let selection): return selection.logicalValue
      }
    }
    public var booleanValue: SDAI.BOOLEAN? {
      switch self {
      case ._ELEMENTARY_FUNCTION_ENUMERATORS(let selection): return selection.booleanValue
      case ._ELEMENTARY_SPACE_ENUMERATORS(let selection): return selection.booleanValue
      case ._EXTENSION_OPTIONS(let selection): return selection.booleanValue
      case ._LOWER_UPPER(let selection): return selection.booleanValue
      case ._OPEN_CLOSED(let selection): return selection.booleanValue
      case ._ORDERING_TYPE(let selection): return selection.booleanValue
      case ._REPACKAGE_OPTIONS(let selection): return selection.booleanValue
      case ._SPACE_CONSTRAINT_TYPE(let selection): return selection.booleanValue
      case ._SYMMETRY_TYPE(let selection): return selection.booleanValue
      }
    }
    public var numberValue: SDAI.NUMBER? {
      switch self {
      case ._ELEMENTARY_FUNCTION_ENUMERATORS(let selection): return selection.numberValue
      case ._ELEMENTARY_SPACE_ENUMERATORS(let selection): return selection.numberValue
      case ._EXTENSION_OPTIONS(let selection): return selection.numberValue
      case ._LOWER_UPPER(let selection): return selection.numberValue
      case ._OPEN_CLOSED(let selection): return selection.numberValue
      case ._ORDERING_TYPE(let selection): return selection.numberValue
      case ._REPACKAGE_OPTIONS(let selection): return selection.numberValue
      case ._SPACE_CONSTRAINT_TYPE(let selection): return selection.numberValue
      case ._SYMMETRY_TYPE(let selection): return selection.numberValue
      }
    }
    public var realValue: SDAI.REAL? {
      switch self {
      case ._ELEMENTARY_FUNCTION_ENUMERATORS(let selection): return selection.realValue
      case ._ELEMENTARY_SPACE_ENUMERATORS(let selection): return selection.realValue
      case ._EXTENSION_OPTIONS(let selection): return selection.realValue
      case ._LOWER_UPPER(let selection): return selection.realValue
      case ._OPEN_CLOSED(let selection): return selection.realValue
      case ._ORDERING_TYPE(let selection): return selection.realValue
      case ._REPACKAGE_OPTIONS(let selection): return selection.realValue
      case ._SPACE_CONSTRAINT_TYPE(let selection): return selection.realValue
      case ._SYMMETRY_TYPE(let selection): return selection.realValue
      }
    }
    public var integerValue: SDAI.INTEGER? {
      switch self {
      case ._ELEMENTARY_FUNCTION_ENUMERATORS(let selection): return selection.integerValue
      case ._ELEMENTARY_SPACE_ENUMERATORS(let selection): return selection.integerValue
      case ._EXTENSION_OPTIONS(let selection): return selection.integerValue
      case ._LOWER_UPPER(let selection): return selection.integerValue
      case ._OPEN_CLOSED(let selection): return selection.integerValue
      case ._ORDERING_TYPE(let selection): return selection.integerValue
      case ._REPACKAGE_OPTIONS(let selection): return selection.integerValue
      case ._SPACE_CONSTRAINT_TYPE(let selection): return selection.integerValue
      case ._SYMMETRY_TYPE(let selection): return selection.integerValue
      }
    }
    public var genericEnumValue: SDAI.GenericEnumValue? {
      switch self {
      case ._ELEMENTARY_FUNCTION_ENUMERATORS(let selection): return selection.genericEnumValue
      case ._ELEMENTARY_SPACE_ENUMERATORS(let selection): return selection.genericEnumValue
      case ._EXTENSION_OPTIONS(let selection): return selection.genericEnumValue
      case ._LOWER_UPPER(let selection): return selection.genericEnumValue
      case ._OPEN_CLOSED(let selection): return selection.genericEnumValue
      case ._ORDERING_TYPE(let selection): return selection.genericEnumValue
      case ._REPACKAGE_OPTIONS(let selection): return selection.genericEnumValue
      case ._SPACE_CONSTRAINT_TYPE(let selection): return selection.genericEnumValue
      case ._SYMMETRY_TYPE(let selection): return selection.genericEnumValue
      }
    }
    public func arrayOptionalValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.ARRAY_OPTIONAL<ELEM>? {
      switch self {
      case ._ELEMENTARY_FUNCTION_ENUMERATORS(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._ELEMENTARY_SPACE_ENUMERATORS(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._EXTENSION_OPTIONS(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._LOWER_UPPER(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._OPEN_CLOSED(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._ORDERING_TYPE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._REPACKAGE_OPTIONS(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._SPACE_CONSTRAINT_TYPE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._SYMMETRY_TYPE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      }
    }
    public func arrayValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.ARRAY<ELEM>? {
      switch self {
      case ._ELEMENTARY_FUNCTION_ENUMERATORS(let selection): return selection.arrayValue(elementType:elementType)
      case ._ELEMENTARY_SPACE_ENUMERATORS(let selection): return selection.arrayValue(elementType:elementType)
      case ._EXTENSION_OPTIONS(let selection): return selection.arrayValue(elementType:elementType)
      case ._LOWER_UPPER(let selection): return selection.arrayValue(elementType:elementType)
      case ._OPEN_CLOSED(let selection): return selection.arrayValue(elementType:elementType)
      case ._ORDERING_TYPE(let selection): return selection.arrayValue(elementType:elementType)
      case ._REPACKAGE_OPTIONS(let selection): return selection.arrayValue(elementType:elementType)
      case ._SPACE_CONSTRAINT_TYPE(let selection): return selection.arrayValue(elementType:elementType)
      case ._SYMMETRY_TYPE(let selection): return selection.arrayValue(elementType:elementType)
      }
    }
    public func listValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.LIST<ELEM>? {
      switch self {
      case ._ELEMENTARY_FUNCTION_ENUMERATORS(let selection): return selection.listValue(elementType:elementType)
      case ._ELEMENTARY_SPACE_ENUMERATORS(let selection): return selection.listValue(elementType:elementType)
      case ._EXTENSION_OPTIONS(let selection): return selection.listValue(elementType:elementType)
      case ._LOWER_UPPER(let selection): return selection.listValue(elementType:elementType)
      case ._OPEN_CLOSED(let selection): return selection.listValue(elementType:elementType)
      case ._ORDERING_TYPE(let selection): return selection.listValue(elementType:elementType)
      case ._REPACKAGE_OPTIONS(let selection): return selection.listValue(elementType:elementType)
      case ._SPACE_CONSTRAINT_TYPE(let selection): return selection.listValue(elementType:elementType)
      case ._SYMMETRY_TYPE(let selection): return selection.listValue(elementType:elementType)
      }
    }
    public func bagValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.BAG<ELEM>? {
      switch self {
      case ._ELEMENTARY_FUNCTION_ENUMERATORS(let selection): return selection.bagValue(elementType:elementType)
      case ._ELEMENTARY_SPACE_ENUMERATORS(let selection): return selection.bagValue(elementType:elementType)
      case ._EXTENSION_OPTIONS(let selection): return selection.bagValue(elementType:elementType)
      case ._LOWER_UPPER(let selection): return selection.bagValue(elementType:elementType)
      case ._OPEN_CLOSED(let selection): return selection.bagValue(elementType:elementType)
      case ._ORDERING_TYPE(let selection): return selection.bagValue(elementType:elementType)
      case ._REPACKAGE_OPTIONS(let selection): return selection.bagValue(elementType:elementType)
      case ._SPACE_CONSTRAINT_TYPE(let selection): return selection.bagValue(elementType:elementType)
      case ._SYMMETRY_TYPE(let selection): return selection.bagValue(elementType:elementType)
      }
    }
    public func setValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.SET<ELEM>? {
      switch self {
      case ._ELEMENTARY_FUNCTION_ENUMERATORS(let selection): return selection.setValue(elementType:elementType)
      case ._ELEMENTARY_SPACE_ENUMERATORS(let selection): return selection.setValue(elementType:elementType)
      case ._EXTENSION_OPTIONS(let selection): return selection.setValue(elementType:elementType)
      case ._LOWER_UPPER(let selection): return selection.setValue(elementType:elementType)
      case ._OPEN_CLOSED(let selection): return selection.setValue(elementType:elementType)
      case ._ORDERING_TYPE(let selection): return selection.setValue(elementType:elementType)
      case ._REPACKAGE_OPTIONS(let selection): return selection.setValue(elementType:elementType)
      case ._SPACE_CONSTRAINT_TYPE(let selection): return selection.setValue(elementType:elementType)
      case ._SYMMETRY_TYPE(let selection): return selection.setValue(elementType:elementType)
      }
    }
    public func enumValue<ENUM:SDAIEnumerationType>(enumType:ENUM.Type) -> ENUM? {
      switch self {
      case ._ELEMENTARY_FUNCTION_ENUMERATORS(let selection): return selection.enumValue(enumType:enumType)
      case ._ELEMENTARY_SPACE_ENUMERATORS(let selection): return selection.enumValue(enumType:enumType)
      case ._EXTENSION_OPTIONS(let selection): return selection.enumValue(enumType:enumType)
      case ._LOWER_UPPER(let selection): return selection.enumValue(enumType:enumType)
      case ._OPEN_CLOSED(let selection): return selection.enumValue(enumType:enumType)
      case ._ORDERING_TYPE(let selection): return selection.enumValue(enumType:enumType)
      case ._REPACKAGE_OPTIONS(let selection): return selection.enumValue(enumType:enumType)
      case ._SPACE_CONSTRAINT_TYPE(let selection): return selection.enumValue(enumType:enumType)
      case ._SYMMETRY_TYPE(let selection): return selection.enumValue(enumType:enumType)
      }
    }

    //MARK: SDAIUnderlyingType
    public typealias FundamentalType = Self
    public static var typeName: String = "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.MATHS_ENUM_ATOM"
    public var asFundamentalType: FundamentalType { return self }

    //MARK: SDAIObservableAggregateElement
    public var entityReferences: AnySequence<SDAI.EntityReference> {
      switch self {
      case ._ELEMENTARY_FUNCTION_ENUMERATORS: return AnySequence<SDAI.EntityReference>(EmptyCollection<SDAI.EntityReference>())
      case ._ELEMENTARY_SPACE_ENUMERATORS: return AnySequence<SDAI.EntityReference>(EmptyCollection<SDAI.EntityReference>())
      case ._EXTENSION_OPTIONS: return AnySequence<SDAI.EntityReference>(EmptyCollection<SDAI.EntityReference>())
      case ._LOWER_UPPER: return AnySequence<SDAI.EntityReference>(EmptyCollection<SDAI.EntityReference>())
      case ._OPEN_CLOSED: return AnySequence<SDAI.EntityReference>(EmptyCollection<SDAI.EntityReference>())
      case ._ORDERING_TYPE: return AnySequence<SDAI.EntityReference>(EmptyCollection<SDAI.EntityReference>())
      case ._REPACKAGE_OPTIONS: return AnySequence<SDAI.EntityReference>(EmptyCollection<SDAI.EntityReference>())
      case ._SPACE_CONSTRAINT_TYPE: return AnySequence<SDAI.EntityReference>(EmptyCollection<SDAI.EntityReference>())
      case ._SYMMETRY_TYPE: return AnySequence<SDAI.EntityReference>(EmptyCollection<SDAI.EntityReference>())
      }
    }

    public mutating func configure(with observer: SDAI.EntityReferenceObserver) {
      switch self {
      case ._ELEMENTARY_FUNCTION_ENUMERATORS: break
      case ._ELEMENTARY_SPACE_ENUMERATORS: break
      case ._EXTENSION_OPTIONS: break
      case ._LOWER_UPPER: break
      case ._OPEN_CLOSED: break
      case ._ORDERING_TYPE: break
      case ._REPACKAGE_OPTIONS: break
      case ._SPACE_CONSTRAINT_TYPE: break
      case ._SYMMETRY_TYPE: break
      }
    }

    public mutating func teardownObserver() {
      switch self {
      case ._ELEMENTARY_FUNCTION_ENUMERATORS: break
      case ._ELEMENTARY_SPACE_ENUMERATORS: break
      case ._EXTENSION_OPTIONS: break
      case ._LOWER_UPPER: break
      case ._OPEN_CLOSED: break
      case ._ORDERING_TYPE: break
      case ._REPACKAGE_OPTIONS: break
      case ._SPACE_CONSTRAINT_TYPE: break
      case ._SYMMETRY_TYPE: break
      }
    }

    //MARK: SDAIAggregationBehavior
    public var aggregationHiBound: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationHiIndex: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationLoBound: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationLoIndex: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationSize: Int? {
      switch self {
      default: return nil
      }
    }

    //MARK: WHERE RULE VALIDATION (SELECT TYPE)
    public static func validateWhereRules(instance:Self?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      var result: [SDAI.WhereLabel:SDAI.LOGICAL] = [:]
      switch instance {
      case ._ELEMENTARY_FUNCTION_ENUMERATORS(let selectValue): 
        result = nELEMENTARY_FUNCTION_ENUMERATORS.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\ELEMENTARY_FUNCTION_ENUMERATORS")
      case ._ELEMENTARY_SPACE_ENUMERATORS(let selectValue): 
        result = nELEMENTARY_SPACE_ENUMERATORS.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\ELEMENTARY_SPACE_ENUMERATORS")
      case ._EXTENSION_OPTIONS(let selectValue): 
        result = nEXTENSION_OPTIONS.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\EXTENSION_OPTIONS")
      case ._LOWER_UPPER(let selectValue): result = nLOWER_UPPER.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\LOWER_UPPER")
      case ._OPEN_CLOSED(let selectValue): result = nOPEN_CLOSED.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\OPEN_CLOSED")
      case ._ORDERING_TYPE(let selectValue): 
        result = nORDERING_TYPE.validateWhereRules(instance:selectValue, prefix:prefix + "\\ORDERING_TYPE")
      case ._REPACKAGE_OPTIONS(let selectValue): 
        result = nREPACKAGE_OPTIONS.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\REPACKAGE_OPTIONS")
      case ._SPACE_CONSTRAINT_TYPE(let selectValue): 
        result = nSPACE_CONSTRAINT_TYPE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\SPACE_CONSTRAINT_TYPE")
      case ._SYMMETRY_TYPE(let selectValue): 
        result = nSYMMETRY_TYPE.validateWhereRules(instance:selectValue, prefix:prefix + "\\SYMMETRY_TYPE")
      case nil: break
      }

      return result
    }

  }

}


//MARK: - SELECT TYPE HIERARCHY
public protocol AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sMATHS_ENUM_ATOM__type: SDAISelectType {

  //MARK: GROUP REFERENCES
  var super_nELEMENTARY_FUNCTION_ENUMERATORS: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nELEMENTARY_FUNCTION_ENUMERATORS? { get }
  var super_nELEMENTARY_SPACE_ENUMERATORS: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nELEMENTARY_SPACE_ENUMERATORS? { get }
  var super_nEXTENSION_OPTIONS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nEXTENSION_OPTIONS? { get }
  var super_nLOWER_UPPER: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nLOWER_UPPER? { get }
  var super_nOPEN_CLOSED: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nOPEN_CLOSED? { get }
  var super_nORDERING_TYPE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nORDERING_TYPE? { get }
  var super_nREPACKAGE_OPTIONS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nREPACKAGE_OPTIONS? { get }
  var super_nSPACE_CONSTRAINT_TYPE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nSPACE_CONSTRAINT_TYPE? { get }
  var super_nSYMMETRY_TYPE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nSYMMETRY_TYPE? { get }

}

public protocol AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sMATHS_ENUM_ATOM__subtype: 
  AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sMATHS_ENUM_ATOM__type, SDAIDefinedType
where Supertype: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sMATHS_ENUM_ATOM__type
{}

public extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sMATHS_ENUM_ATOM__subtype {
  //MARK: CONSTRUCTORS
  init?(possiblyFrom complex: SDAI.ComplexEntity?) {
    self.init(fundamental: FundamentalType(possiblyFrom: complex))
  }

  init?<T: SDAIUnderlyingType>(possiblyFrom underlyingType: T?) {
    self.init(fundamental: FundamentalType(possiblyFrom: underlyingType))
  }

  init?<G: SDAIGenericType>(fromGeneric generic: G?) {
    self.init(fundamental: FundamentalType.convert(fromGeneric: generic))
  }

  //MARK: GROUP REFERENCES
  var super_nELEMENTARY_FUNCTION_ENUMERATORS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nELEMENTARY_FUNCTION_ENUMERATORS? { rep.super_nELEMENTARY_FUNCTION_ENUMERATORS }
  var super_nELEMENTARY_SPACE_ENUMERATORS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nELEMENTARY_SPACE_ENUMERATORS? { rep.super_nELEMENTARY_SPACE_ENUMERATORS }
  var super_nEXTENSION_OPTIONS: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nEXTENSION_OPTIONS? { rep.super_nEXTENSION_OPTIONS }
  var super_nLOWER_UPPER: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nLOWER_UPPER? { rep.super_nLOWER_UPPER }
  var super_nOPEN_CLOSED: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nOPEN_CLOSED? { rep.super_nOPEN_CLOSED }
  var super_nORDERING_TYPE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nORDERING_TYPE? { rep.super_nORDERING_TYPE }
  var super_nREPACKAGE_OPTIONS: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nREPACKAGE_OPTIONS? { rep.super_nREPACKAGE_OPTIONS }
  var super_nSPACE_CONSTRAINT_TYPE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nSPACE_CONSTRAINT_TYPE? { rep.super_nSPACE_CONSTRAINT_TYPE }
  var super_nSYMMETRY_TYPE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nSYMMETRY_TYPE? { rep.super_nSYMMETRY_TYPE }

}

