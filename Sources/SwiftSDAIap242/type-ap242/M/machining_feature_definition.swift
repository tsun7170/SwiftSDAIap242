/* file: machining_feature_definition.swift 	 generated: Sat Aug 14 13:46:02 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -TYPE DEFINITION in EXPRESS
/*
  TYPE machining_feature_definition = SELECT
    ( boss (*ENTITY*),
     compound_feature (*ENTITY*),
     externally_defined_feature_definition (*ENTITY*),
     flat_face (*ENTITY*),
     gear (*ENTITY*),
     marking (*ENTITY*),
     outer_round (*ENTITY*),
     outside_profile (*ENTITY*),
     pocket (*ENTITY*),
     protrusion (*ENTITY*),
     removal_volume (*ENTITY*),
     replicate_feature (*ENTITY*),
     revolved_profile (*ENTITY*),
     rib_top (*ENTITY*),
     round_hole (*ENTITY*),
     rounded_end (*ENTITY*),
     spherical_cap (*ENTITY*),
     step (*ENTITY*),
     slot (*ENTITY*),
     thread (*ENTITY*),
     turned_knurl (*ENTITY*) );
  END_TYPE; -- machining_feature_definition (line:4043 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES FOR SELECT
/*
  boss (*ENTITY*):
  ATTR:  description: text
  ATTR:  name: label

  compound_feature (*ENTITY*):
  ATTR:  description: text
  ATTR:  counterdrill_angle_tolerance: tolerance_value
  ATTR:  countersink_diameter: positive_length_measure_with_unit
  ATTR:  drilled_hole_depth: (AMBIGUOUS (CASE LEVEL))
  ATTR:  drilled_hole_diameter_tolerance: (AMBIGUOUS (CASE LEVEL))
  ATTR:  countersink_angle: positive_plane_angle_measure_with_unit
  ATTR:  placement: shape_representation *** Multiple Select Case Sources ***
  ATTR:  spotface: LIST [1 : ?] OF UNIQUE spotface_definition
  ATTR:  counterdrill_angle: positive_plane_angle_measure_with_unit
  ATTR:  through_hole: (AMBIGUOUS (CASE LEVEL))
  ATTR:  countersink_angle_tolerance: tolerance_value
  ATTR:  counterbore: (AMBIGUOUS (CASE LEVEL))
  ATTR:  drilled_hole_diameter: (AMBIGUOUS (CASE LEVEL))
  ATTR:  explicit_shape: SET [0 : ?] OF item_identified_representation_usage
  ATTR:  drilled_hole_depth_tolerance: (AMBIGUOUS (CASE LEVEL))
  ATTR:  name: label
  ATTR:  countersink_diameter_tolerance: tolerance_value_or_limits_and_fits

  externally_defined_feature_definition (*ENTITY*):
  ATTR:  item_id: source_item
  ATTR:  description: text
  ATTR:  source: external_source
  ATTR:  name: label

  flat_face (*ENTITY*):
  ATTR:  description: text
  ATTR:  name: label

  gear (*ENTITY*):
  ATTR:  description: text
  ATTR:  name: label

  marking (*ENTITY*):
  ATTR:  description: text
  ATTR:  name: label

  outer_round (*ENTITY*):
  ATTR:  description: text
  ATTR:  name: label

  outside_profile (*ENTITY*):
  ATTR:  description: text
  ATTR:  name: label

  pocket (*ENTITY*):
  ATTR:  description: text
  ATTR:  name: label

  protrusion (*ENTITY*):
  ATTR:  description: text
  ATTR:  name: label

  removal_volume (*ENTITY*):
  ATTR:  description: text
  ATTR:  name: label

  replicate_feature (*ENTITY*):
  ATTR:  description: text
  ATTR:  name: label

  revolved_profile (*ENTITY*):
  ATTR:  description: text
  ATTR:  name: label

  rib_top (*ENTITY*):
  ATTR:  description: text
  ATTR:  name: label

  round_hole (*ENTITY*):
  ATTR:  diameter_tolerance: tolerance_value_or_limits_and_fits
  ATTR:  depth_tolerance: tolerance_value
  ATTR:  description: text
  ATTR:  placement: shape_representation *** Multiple Select Case Sources ***
  ATTR:  diameter: positive_length_measure_with_unit
  ATTR:  spotface_radius: positive_length_measure_with_unit
  ATTR:  spotface_radius_tolerance: tolerance_value
  ATTR:  name: label
  ATTR:  depth: positive_length_measure_with_unit

  rounded_end (*ENTITY*):
  ATTR:  description: text
  ATTR:  name: label

  spherical_cap (*ENTITY*):
  ATTR:  description: text
  ATTR:  name: label

  step (*ENTITY*):
  ATTR:  description: text
  ATTR:  name: label

  slot (*ENTITY*):
  ATTR:  description: text
  ATTR:  name: label

  thread (*ENTITY*):
  ATTR:  description: text
  ATTR:  name: label

  turned_knurl (*ENTITY*):
  ATTR:  description: text
  ATTR:  name: label

*/

/** SELECT type
- EXPRESS:
```express
  TYPE machining_feature_definition = SELECT
    ( boss (*ENTITY*),
     compound_feature (*ENTITY*),
     externally_defined_feature_definition (*ENTITY*),
     flat_face (*ENTITY*),
     gear (*ENTITY*),
     marking (*ENTITY*),
     outer_round (*ENTITY*),
     outside_profile (*ENTITY*),
     pocket (*ENTITY*),
     protrusion (*ENTITY*),
     removal_volume (*ENTITY*),
     replicate_feature (*ENTITY*),
     revolved_profile (*ENTITY*),
     rib_top (*ENTITY*),
     round_hole (*ENTITY*),
     rounded_end (*ENTITY*),
     spherical_cap (*ENTITY*),
     step (*ENTITY*),
     slot (*ENTITY*),
     thread (*ENTITY*),
     turned_knurl (*ENTITY*) );
  END_TYPE; -- machining_feature_definition (line:4043 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public enum sMACHINING_FEATURE_DEFINITION : SDAIValue, AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sMACHINING_FEATURE_DEFINITION__type {

    /// SELECT case ``eBOSS`` (ENTITY) in ``sMACHINING_FEATURE_DEFINITION``
    case _BOSS(eBOSS)	// (ENTITY)

    /// SELECT case ``eCOMPOUND_FEATURE`` (ENTITY) in ``sMACHINING_FEATURE_DEFINITION``
    case _COMPOUND_FEATURE(eCOMPOUND_FEATURE)	// (ENTITY)

    /// SELECT case ``eEXTERNALLY_DEFINED_FEATURE_DEFINITION`` (ENTITY) in ``sMACHINING_FEATURE_DEFINITION``
    case _EXTERNALLY_DEFINED_FEATURE_DEFINITION(eEXTERNALLY_DEFINED_FEATURE_DEFINITION)	// (ENTITY)

    /// SELECT case ``eFLAT_FACE`` (ENTITY) in ``sMACHINING_FEATURE_DEFINITION``
    case _FLAT_FACE(eFLAT_FACE)	// (ENTITY)

    /// SELECT case ``eGEAR`` (ENTITY) in ``sMACHINING_FEATURE_DEFINITION``
    case _GEAR(eGEAR)	// (ENTITY)

    /// SELECT case ``eMARKING`` (ENTITY) in ``sMACHINING_FEATURE_DEFINITION``
    case _MARKING(eMARKING)	// (ENTITY)

    /// SELECT case ``eOUTER_ROUND`` (ENTITY) in ``sMACHINING_FEATURE_DEFINITION``
    case _OUTER_ROUND(eOUTER_ROUND)	// (ENTITY)

    /// SELECT case ``eOUTSIDE_PROFILE`` (ENTITY) in ``sMACHINING_FEATURE_DEFINITION``
    case _OUTSIDE_PROFILE(eOUTSIDE_PROFILE)	// (ENTITY)

    /// SELECT case ``ePOCKET`` (ENTITY) in ``sMACHINING_FEATURE_DEFINITION``
    case _POCKET(ePOCKET)	// (ENTITY)

    /// SELECT case ``ePROTRUSION`` (ENTITY) in ``sMACHINING_FEATURE_DEFINITION``
    case _PROTRUSION(ePROTRUSION)	// (ENTITY)

    /// SELECT case ``eREMOVAL_VOLUME`` (ENTITY) in ``sMACHINING_FEATURE_DEFINITION``
    case _REMOVAL_VOLUME(eREMOVAL_VOLUME)	// (ENTITY)

    /// SELECT case ``eREPLICATE_FEATURE`` (ENTITY) in ``sMACHINING_FEATURE_DEFINITION``
    case _REPLICATE_FEATURE(eREPLICATE_FEATURE)	// (ENTITY)

    /// SELECT case ``eREVOLVED_PROFILE`` (ENTITY) in ``sMACHINING_FEATURE_DEFINITION``
    case _REVOLVED_PROFILE(eREVOLVED_PROFILE)	// (ENTITY)

    /// SELECT case ``eRIB_TOP`` (ENTITY) in ``sMACHINING_FEATURE_DEFINITION``
    case _RIB_TOP(eRIB_TOP)	// (ENTITY)

    /// SELECT case ``eROUND_HOLE`` (ENTITY) in ``sMACHINING_FEATURE_DEFINITION``
    case _ROUND_HOLE(eROUND_HOLE)	// (ENTITY)

    /// SELECT case ``eROUNDED_END`` (ENTITY) in ``sMACHINING_FEATURE_DEFINITION``
    case _ROUNDED_END(eROUNDED_END)	// (ENTITY)

    /// SELECT case ``eSPHERICAL_CAP`` (ENTITY) in ``sMACHINING_FEATURE_DEFINITION``
    case _SPHERICAL_CAP(eSPHERICAL_CAP)	// (ENTITY)

    /// SELECT case ``eSTEP`` (ENTITY) in ``sMACHINING_FEATURE_DEFINITION``
    case _STEP(eSTEP)	// (ENTITY)

    /// SELECT case ``eSLOT`` (ENTITY) in ``sMACHINING_FEATURE_DEFINITION``
    case _SLOT(eSLOT)	// (ENTITY)

    /// SELECT case ``eTHREAD`` (ENTITY) in ``sMACHINING_FEATURE_DEFINITION``
    case _THREAD(eTHREAD)	// (ENTITY)

    /// SELECT case ``eTURNED_KNURL`` (ENTITY) in ``sMACHINING_FEATURE_DEFINITION``
    case _TURNED_KNURL(eTURNED_KNURL)	// (ENTITY)

    //MARK: - CONSTRUCTORS
    public init(fundamental: FundamentalType) { self = fundamental }

    public init?<T: SDAIUnderlyingType>(possiblyFrom underlyingType: T?){
      return nil
    }

    public init?(possiblyFrom complex: SDAI.ComplexEntity?) {
      guard let complex = complex else { return nil }

      if let base = complex.entityReference(eBOSS.self) {self = ._BOSS(base) }
      else if let base = complex.entityReference(eCOMPOUND_FEATURE.self) {self = ._COMPOUND_FEATURE(base) }
      else if let base = complex.entityReference(eEXTERNALLY_DEFINED_FEATURE_DEFINITION.self) {self = ._EXTERNALLY_DEFINED_FEATURE_DEFINITION(base) }
      else if let base = complex.entityReference(eFLAT_FACE.self) {self = ._FLAT_FACE(base) }
      else if let base = complex.entityReference(eGEAR.self) {self = ._GEAR(base) }
      else if let base = complex.entityReference(eMARKING.self) {self = ._MARKING(base) }
      else if let base = complex.entityReference(eOUTER_ROUND.self) {self = ._OUTER_ROUND(base) }
      else if let base = complex.entityReference(eOUTSIDE_PROFILE.self) {self = ._OUTSIDE_PROFILE(base) }
      else if let base = complex.entityReference(ePOCKET.self) {self = ._POCKET(base) }
      else if let base = complex.entityReference(ePROTRUSION.self) {self = ._PROTRUSION(base) }
      else if let base = complex.entityReference(eREMOVAL_VOLUME.self) {self = ._REMOVAL_VOLUME(base) }
      else if let base = complex.entityReference(eREPLICATE_FEATURE.self) {self = ._REPLICATE_FEATURE(base) }
      else if let base = complex.entityReference(eREVOLVED_PROFILE.self) {self = ._REVOLVED_PROFILE(base) }
      else if let base = complex.entityReference(eRIB_TOP.self) {self = ._RIB_TOP(base) }
      else if let base = complex.entityReference(eROUND_HOLE.self) {self = ._ROUND_HOLE(base) }
      else if let base = complex.entityReference(eROUNDED_END.self) {self = ._ROUNDED_END(base) }
      else if let base = complex.entityReference(eSPHERICAL_CAP.self) {self = ._SPHERICAL_CAP(base) }
      else if let base = complex.entityReference(eSTEP.self) {self = ._STEP(base) }
      else if let base = complex.entityReference(eSLOT.self) {self = ._SLOT(base) }
      else if let base = complex.entityReference(eTHREAD.self) {self = ._THREAD(base) }
      else if let base = complex.entityReference(eTURNED_KNURL.self) {self = ._TURNED_KNURL(base) }
      else { return nil }
    }

    public init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let select = generic else { return nil }

      if let fundamental = select as? Self {
        self.init(fundamental: fundamental)
      }
      else if let base = eBOSS.convert(fromGeneric: select) {
        self = ._BOSS(base)
      }
      else if let base = eCOMPOUND_FEATURE.convert(fromGeneric: select) {
        self = ._COMPOUND_FEATURE(base)
      }
      else if let base = eEXTERNALLY_DEFINED_FEATURE_DEFINITION.convert(fromGeneric: select) {
        self = ._EXTERNALLY_DEFINED_FEATURE_DEFINITION(base)
      }
      else if let base = eFLAT_FACE.convert(fromGeneric: select) {
        self = ._FLAT_FACE(base)
      }
      else if let base = eGEAR.convert(fromGeneric: select) {
        self = ._GEAR(base)
      }
      else if let base = eMARKING.convert(fromGeneric: select) {
        self = ._MARKING(base)
      }
      else if let base = eOUTER_ROUND.convert(fromGeneric: select) {
        self = ._OUTER_ROUND(base)
      }
      else if let base = eOUTSIDE_PROFILE.convert(fromGeneric: select) {
        self = ._OUTSIDE_PROFILE(base)
      }
      else if let base = ePOCKET.convert(fromGeneric: select) {
        self = ._POCKET(base)
      }
      else if let base = ePROTRUSION.convert(fromGeneric: select) {
        self = ._PROTRUSION(base)
      }
      else if let base = eREMOVAL_VOLUME.convert(fromGeneric: select) {
        self = ._REMOVAL_VOLUME(base)
      }
      else if let base = eREPLICATE_FEATURE.convert(fromGeneric: select) {
        self = ._REPLICATE_FEATURE(base)
      }
      else if let base = eREVOLVED_PROFILE.convert(fromGeneric: select) {
        self = ._REVOLVED_PROFILE(base)
      }
      else if let base = eRIB_TOP.convert(fromGeneric: select) {
        self = ._RIB_TOP(base)
      }
      else if let base = eROUND_HOLE.convert(fromGeneric: select) {
        self = ._ROUND_HOLE(base)
      }
      else if let base = eROUNDED_END.convert(fromGeneric: select) {
        self = ._ROUNDED_END(base)
      }
      else if let base = eSPHERICAL_CAP.convert(fromGeneric: select) {
        self = ._SPHERICAL_CAP(base)
      }
      else if let base = eSTEP.convert(fromGeneric: select) {
        self = ._STEP(base)
      }
      else if let base = eSLOT.convert(fromGeneric: select) {
        self = ._SLOT(base)
      }
      else if let base = eTHREAD.convert(fromGeneric: select) {
        self = ._THREAD(base)
      }
      else if let base = eTURNED_KNURL.convert(fromGeneric: select) {
        self = ._TURNED_KNURL(base)
      }
      else { return nil }
    }

    // InitializableByP21Parameter
    public static var bareTypeName: String = "MACHINING_FEATURE_DEFINITION"

    public init?(p21typedParam: P21Decode.ExchangeStructure.TypedParameter, from exchangeStructure: P21Decode.ExchangeStructure) {
      guard let keyword = p21typedParam.keyword.asStandardKeyword else { exchangeStructure.error = "unexpected p21parameter(\(p21typedParam)) while resolving \(Self.bareTypeName) select value"; return nil }

      switch(keyword) {
      default:
        exchangeStructure.error = "unexpected p21parameter(\(p21typedParam)) while resolving \(Self.bareTypeName) select value"
        return nil
      }
    }

    public init?(p21untypedParam: P21Decode.ExchangeStructure.UntypedParameter, from exchangeStructure: P21Decode.ExchangeStructure) {
      switch p21untypedParam {
      case .rhsOccurenceName(let rhsname):
        switch rhsname {
        case .constantEntityName(let name):
          guard let entity = exchangeStructure.resolve(constantEntityName: name) else {exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) instance"); return nil }
          self.init(possiblyFrom: entity.complexEntity)

        case .entityInstanceName(let name):
          guard let complex = exchangeStructure.resolve(entityInstanceName: name) else {exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) instance"); return nil }
          self.init(possiblyFrom: complex)

        default:
          exchangeStructure.error = "unexpected p21parameter(\(p21untypedParam)) while resolving \(Self.bareTypeName) select instance"
          return nil
        }

      default:
        exchangeStructure.error = "unexpected p21parameter(\(p21untypedParam)) while resolving \(Self.bareTypeName) select instance"
        return nil
      }
    }

    public init?(p21omittedParamfrom exchangeStructure: P21Decode.ExchangeStructure) {
      return nil
    }


    //MARK: - ENTITY UNDERLYING TYPE REFERENCES
    public var super_eREPLICATE_FEATURE: eREPLICATE_FEATURE? {
      switch self {
      case ._REPLICATE_FEATURE(let entity): return entity
      default: return nil
      }
    }

    public var super_eOUTER_ROUND: eOUTER_ROUND? {
      switch self {
      case ._OUTER_ROUND(let entity): return entity
      default: return nil
      }
    }

    public var super_eBOSS: eBOSS? {
      switch self {
      case ._BOSS(let entity): return entity
      default: return nil
      }
    }

    public var super_eSPHERICAL_CAP: eSPHERICAL_CAP? {
      switch self {
      case ._SPHERICAL_CAP(let entity): return entity
      default: return nil
      }
    }

    public var super_eCOMPOUND_FEATURE: eCOMPOUND_FEATURE? {
      switch self {
      case ._COMPOUND_FEATURE(let entity): return entity
      default: return nil
      }
    }

    public var super_eEXTERNALLY_DEFINED_ITEM: eEXTERNALLY_DEFINED_ITEM? {
      switch self {
      case ._EXTERNALLY_DEFINED_FEATURE_DEFINITION(let entity): return entity.super_eEXTERNALLY_DEFINED_ITEM
      default: return nil
      }
    }

    public var super_eROUNDED_END: eROUNDED_END? {
      switch self {
      case ._ROUNDED_END(let entity): return entity
      default: return nil
      }
    }

    public var super_eOUTSIDE_PROFILE: eOUTSIDE_PROFILE? {
      switch self {
      case ._OUTSIDE_PROFILE(let entity): return entity
      default: return nil
      }
    }

    public var super_eFLAT_FACE: eFLAT_FACE? {
      switch self {
      case ._FLAT_FACE(let entity): return entity
      default: return nil
      }
    }

    public var super_eSLOT: eSLOT? {
      switch self {
      case ._SLOT(let entity): return entity
      default: return nil
      }
    }

    public var super_eFEATURE_DEFINITION: eFEATURE_DEFINITION? {
      switch self {
      case ._BOSS(let entity): return entity.super_eFEATURE_DEFINITION
      case ._COMPOUND_FEATURE(let entity): return entity.super_eFEATURE_DEFINITION
      case ._EXTERNALLY_DEFINED_FEATURE_DEFINITION(let entity): return entity.super_eFEATURE_DEFINITION
      case ._FLAT_FACE(let entity): return entity.super_eFEATURE_DEFINITION
      case ._GEAR(let entity): return entity.super_eFEATURE_DEFINITION
      case ._MARKING(let entity): return entity.super_eFEATURE_DEFINITION
      case ._OUTER_ROUND(let entity): return entity.super_eFEATURE_DEFINITION
      case ._OUTSIDE_PROFILE(let entity): return entity.super_eFEATURE_DEFINITION
      case ._POCKET(let entity): return entity.super_eFEATURE_DEFINITION
      case ._PROTRUSION(let entity): return entity.super_eFEATURE_DEFINITION
      case ._REMOVAL_VOLUME(let entity): return entity.super_eFEATURE_DEFINITION
      case ._REPLICATE_FEATURE(let entity): return entity.super_eFEATURE_DEFINITION
      case ._REVOLVED_PROFILE(let entity): return entity.super_eFEATURE_DEFINITION
      case ._RIB_TOP(let entity): return entity.super_eFEATURE_DEFINITION
      case ._ROUND_HOLE(let entity): return entity.super_eFEATURE_DEFINITION
      case ._ROUNDED_END(let entity): return entity.super_eFEATURE_DEFINITION
      case ._SPHERICAL_CAP(let entity): return entity.super_eFEATURE_DEFINITION
      case ._STEP(let entity): return entity.super_eFEATURE_DEFINITION
      case ._SLOT(let entity): return entity.super_eFEATURE_DEFINITION
      case ._THREAD(let entity): return entity.super_eFEATURE_DEFINITION
      case ._TURNED_KNURL(let entity): return entity.super_eFEATURE_DEFINITION
      }
    }

    public var super_eRIB_TOP: eRIB_TOP? {
      switch self {
      case ._RIB_TOP(let entity): return entity
      default: return nil
      }
    }

    public var super_eGEAR: eGEAR? {
      switch self {
      case ._GEAR(let entity): return entity
      default: return nil
      }
    }

    public var super_eSTEP: eSTEP? {
      switch self {
      case ._STEP(let entity): return entity
      default: return nil
      }
    }

    public var super_eTURNED_KNURL: eTURNED_KNURL? {
      switch self {
      case ._TURNED_KNURL(let entity): return entity
      default: return nil
      }
    }

    public var super_eREVOLVED_PROFILE: eREVOLVED_PROFILE? {
      switch self {
      case ._REVOLVED_PROFILE(let entity): return entity
      default: return nil
      }
    }

    public var super_eMARKING: eMARKING? {
      switch self {
      case ._MARKING(let entity): return entity
      default: return nil
      }
    }

    public var super_ePOCKET: ePOCKET? {
      switch self {
      case ._POCKET(let entity): return entity
      default: return nil
      }
    }

    public var super_eTHREAD: eTHREAD? {
      switch self {
      case ._THREAD(let entity): return entity
      default: return nil
      }
    }

    public var super_ePROTRUSION: ePROTRUSION? {
      switch self {
      case ._PROTRUSION(let entity): return entity
      default: return nil
      }
    }

    public var super_eROUND_HOLE: eROUND_HOLE? {
      switch self {
      case ._ROUND_HOLE(let entity): return entity
      default: return nil
      }
    }

    public var super_eREMOVAL_VOLUME: eREMOVAL_VOLUME? {
      switch self {
      case ._REMOVAL_VOLUME(let entity): return entity
      default: return nil
      }
    }

    public var super_eEXTERNALLY_DEFINED_FEATURE_DEFINITION: eEXTERNALLY_DEFINED_FEATURE_DEFINITION? {
      switch self {
      case ._EXTERNALLY_DEFINED_FEATURE_DEFINITION(let entity): return entity
      default: return nil
      }
    }

    public var super_eCHARACTERIZED_OBJECT: eCHARACTERIZED_OBJECT? {
      switch self {
      case ._BOSS(let entity): return entity.super_eCHARACTERIZED_OBJECT
      case ._COMPOUND_FEATURE(let entity): return entity.super_eCHARACTERIZED_OBJECT
      case ._EXTERNALLY_DEFINED_FEATURE_DEFINITION(let entity): return entity.super_eCHARACTERIZED_OBJECT
      case ._FLAT_FACE(let entity): return entity.super_eCHARACTERIZED_OBJECT
      case ._GEAR(let entity): return entity.super_eCHARACTERIZED_OBJECT
      case ._MARKING(let entity): return entity.super_eCHARACTERIZED_OBJECT
      case ._OUTER_ROUND(let entity): return entity.super_eCHARACTERIZED_OBJECT
      case ._OUTSIDE_PROFILE(let entity): return entity.super_eCHARACTERIZED_OBJECT
      case ._POCKET(let entity): return entity.super_eCHARACTERIZED_OBJECT
      case ._PROTRUSION(let entity): return entity.super_eCHARACTERIZED_OBJECT
      case ._REMOVAL_VOLUME(let entity): return entity.super_eCHARACTERIZED_OBJECT
      case ._REPLICATE_FEATURE(let entity): return entity.super_eCHARACTERIZED_OBJECT
      case ._REVOLVED_PROFILE(let entity): return entity.super_eCHARACTERIZED_OBJECT
      case ._RIB_TOP(let entity): return entity.super_eCHARACTERIZED_OBJECT
      case ._ROUND_HOLE(let entity): return entity.super_eCHARACTERIZED_OBJECT
      case ._ROUNDED_END(let entity): return entity.super_eCHARACTERIZED_OBJECT
      case ._SPHERICAL_CAP(let entity): return entity.super_eCHARACTERIZED_OBJECT
      case ._STEP(let entity): return entity.super_eCHARACTERIZED_OBJECT
      case ._SLOT(let entity): return entity.super_eCHARACTERIZED_OBJECT
      case ._THREAD(let entity): return entity.super_eCHARACTERIZED_OBJECT
      case ._TURNED_KNURL(let entity): return entity.super_eCHARACTERIZED_OBJECT
      }
    }


    //MARK: - ENTITY ATTRIBUTE REFERENCES
    /// attribute of SELECT type ``sMACHINING_FEATURE_DEFINITION``
    /// - origin: ENTITY( ``eROUND_HOLE`` )
    public var DIAMETER_TOLERANCE: sTOLERANCE_VALUE_OR_LIMITS_AND_FITS?  {
      switch self {
      case ._ROUND_HOLE(let entity): return entity.DIAMETER_TOLERANCE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMACHINING_FEATURE_DEFINITION``
    /// - origin: ENTITY( ``eROUND_HOLE`` )
    public var DEPTH_TOLERANCE: eTOLERANCE_VALUE?  {
      switch self {
      case ._ROUND_HOLE(let entity): return entity.DEPTH_TOLERANCE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMACHINING_FEATURE_DEFINITION``
    /// - origin: ENTITY( ``eEXTERNALLY_DEFINED_FEATURE_DEFINITION`` )
    public var ITEM_ID: sSOURCE_ITEM?  {
      switch self {
      case ._EXTERNALLY_DEFINED_FEATURE_DEFINITION(let entity): return entity.ITEM_ID
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMACHINING_FEATURE_DEFINITION``
    /// - origin: ENTITY( ``eBOSS`` )
    /// - origin: ENTITY( ``eCOMPOUND_FEATURE`` )
    /// - origin: ENTITY( ``eEXTERNALLY_DEFINED_FEATURE_DEFINITION`` )
    /// - origin: ENTITY( ``eFLAT_FACE`` )
    /// - origin: ENTITY( ``eGEAR`` )
    /// - origin: ENTITY( ``eMARKING`` )
    /// - origin: ENTITY( ``eOUTER_ROUND`` )
    /// - origin: ENTITY( ``eOUTSIDE_PROFILE`` )
    /// - origin: ENTITY( ``ePOCKET`` )
    /// - origin: ENTITY( ``ePROTRUSION`` )
    /// - origin: ENTITY( ``eREMOVAL_VOLUME`` )
    /// - origin: ENTITY( ``eREPLICATE_FEATURE`` )
    /// - origin: ENTITY( ``eREVOLVED_PROFILE`` )
    /// - origin: ENTITY( ``eRIB_TOP`` )
    /// - origin: ENTITY( ``eROUND_HOLE`` )
    /// - origin: ENTITY( ``eROUNDED_END`` )
    /// - origin: ENTITY( ``eSPHERICAL_CAP`` )
    /// - origin: ENTITY( ``eSTEP`` )
    /// - origin: ENTITY( ``eSLOT`` )
    /// - origin: ENTITY( ``eTHREAD`` )
    /// - origin: ENTITY( ``eTURNED_KNURL`` )
    public var DESCRIPTION: tTEXT?  {
      switch self {
      case ._BOSS(let entity): return entity.DESCRIPTION
      case ._COMPOUND_FEATURE(let entity): return entity.DESCRIPTION
      case ._EXTERNALLY_DEFINED_FEATURE_DEFINITION(let entity): return entity.DESCRIPTION
      case ._FLAT_FACE(let entity): return entity.DESCRIPTION
      case ._GEAR(let entity): return entity.DESCRIPTION
      case ._MARKING(let entity): return entity.DESCRIPTION
      case ._OUTER_ROUND(let entity): return entity.DESCRIPTION
      case ._OUTSIDE_PROFILE(let entity): return entity.DESCRIPTION
      case ._POCKET(let entity): return entity.DESCRIPTION
      case ._PROTRUSION(let entity): return entity.DESCRIPTION
      case ._REMOVAL_VOLUME(let entity): return entity.DESCRIPTION
      case ._REPLICATE_FEATURE(let entity): return entity.DESCRIPTION
      case ._REVOLVED_PROFILE(let entity): return entity.DESCRIPTION
      case ._RIB_TOP(let entity): return entity.DESCRIPTION
      case ._ROUND_HOLE(let entity): return entity.DESCRIPTION
      case ._ROUNDED_END(let entity): return entity.DESCRIPTION
      case ._SPHERICAL_CAP(let entity): return entity.DESCRIPTION
      case ._STEP(let entity): return entity.DESCRIPTION
      case ._SLOT(let entity): return entity.DESCRIPTION
      case ._THREAD(let entity): return entity.DESCRIPTION
      case ._TURNED_KNURL(let entity): return entity.DESCRIPTION
      }
    }

    /// attribute of SELECT type ``sMACHINING_FEATURE_DEFINITION``
    /// - origin: ENTITY( ``eCOMPOUND_FEATURE`` )
    public var COUNTERDRILL_ANGLE_TOLERANCE: eTOLERANCE_VALUE?  {
      switch self {
      case ._COMPOUND_FEATURE(let entity): return entity.COUNTERDRILL_ANGLE_TOLERANCE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMACHINING_FEATURE_DEFINITION``
    /// - origin: ENTITY( ``eCOMPOUND_FEATURE`` )
    public var COUNTERSINK_DIAMETER: ePOSITIVE_LENGTH_MEASURE_WITH_UNIT?  {
      switch self {
      case ._COMPOUND_FEATURE(let entity): return entity.COUNTERSINK_DIAMETER
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMACHINING_FEATURE_DEFINITION``
    /// - origin: ENTITY( ``eCOMPOUND_FEATURE`` )
    public var COUNTERSINK_ANGLE: ePOSITIVE_PLANE_ANGLE_MEASURE_WITH_UNIT?  {
      switch self {
      case ._COMPOUND_FEATURE(let entity): return entity.COUNTERSINK_ANGLE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMACHINING_FEATURE_DEFINITION``
    /// - origin: ENTITY( ``eCOMPOUND_FEATURE`` )
    /// - origin: ENTITY( ``eROUND_HOLE`` )
    public var PLACEMENT: eSHAPE_REPRESENTATION?  {
      switch self {
      case ._COMPOUND_FEATURE(let entity): return entity.PLACEMENT
      case ._ROUND_HOLE(let entity): return entity.PLACEMENT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMACHINING_FEATURE_DEFINITION``
    /// - origin: ENTITY( ``eROUND_HOLE`` )
    public var DIAMETER: ePOSITIVE_LENGTH_MEASURE_WITH_UNIT?  {
      switch self {
      case ._ROUND_HOLE(let entity): return entity.DIAMETER
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMACHINING_FEATURE_DEFINITION``
    /// - origin: ENTITY( ``eCOMPOUND_FEATURE`` )
    public var SPOTFACE: (SDAI.LIST_UNIQUE<eSPOTFACE_DEFINITION>/*[1:nil]*/ )?  {
      switch self {
      case ._COMPOUND_FEATURE(let entity): return entity.SPOTFACE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMACHINING_FEATURE_DEFINITION``
    /// - origin: ENTITY( ``eCOMPOUND_FEATURE`` )
    public var COUNTERDRILL_ANGLE: ePOSITIVE_PLANE_ANGLE_MEASURE_WITH_UNIT?  {
      switch self {
      case ._COMPOUND_FEATURE(let entity): return entity.COUNTERDRILL_ANGLE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMACHINING_FEATURE_DEFINITION``
    /// - origin: ENTITY( ``eCOMPOUND_FEATURE`` )
    public var COUNTERSINK_ANGLE_TOLERANCE: eTOLERANCE_VALUE?  {
      switch self {
      case ._COMPOUND_FEATURE(let entity): return entity.COUNTERSINK_ANGLE_TOLERANCE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMACHINING_FEATURE_DEFINITION``
    /// - origin: ENTITY( ``eCOMPOUND_FEATURE`` )
    public var EXPLICIT_SHAPE: (SDAI.SET<eITEM_IDENTIFIED_REPRESENTATION_USAGE>/*[0:nil]*/ )?  {
      switch self {
      case ._COMPOUND_FEATURE(let entity): return entity.EXPLICIT_SHAPE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMACHINING_FEATURE_DEFINITION``
    /// - origin: ENTITY( ``eEXTERNALLY_DEFINED_FEATURE_DEFINITION`` )
    public var SOURCE: eEXTERNAL_SOURCE?  {
      switch self {
      case ._EXTERNALLY_DEFINED_FEATURE_DEFINITION(let entity): return entity.SOURCE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMACHINING_FEATURE_DEFINITION``
    /// - origin: ENTITY( ``eROUND_HOLE`` )
    public var SPOTFACE_RADIUS: ePOSITIVE_LENGTH_MEASURE_WITH_UNIT?  {
      switch self {
      case ._ROUND_HOLE(let entity): return entity.SPOTFACE_RADIUS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMACHINING_FEATURE_DEFINITION``
    /// - origin: ENTITY( ``eROUND_HOLE`` )
    public var SPOTFACE_RADIUS_TOLERANCE: eTOLERANCE_VALUE?  {
      switch self {
      case ._ROUND_HOLE(let entity): return entity.SPOTFACE_RADIUS_TOLERANCE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMACHINING_FEATURE_DEFINITION``
    /// - origin: ENTITY( ``eBOSS`` )
    /// - origin: ENTITY( ``eCOMPOUND_FEATURE`` )
    /// - origin: ENTITY( ``eEXTERNALLY_DEFINED_FEATURE_DEFINITION`` )
    /// - origin: ENTITY( ``eFLAT_FACE`` )
    /// - origin: ENTITY( ``eGEAR`` )
    /// - origin: ENTITY( ``eMARKING`` )
    /// - origin: ENTITY( ``eOUTER_ROUND`` )
    /// - origin: ENTITY( ``eOUTSIDE_PROFILE`` )
    /// - origin: ENTITY( ``ePOCKET`` )
    /// - origin: ENTITY( ``ePROTRUSION`` )
    /// - origin: ENTITY( ``eREMOVAL_VOLUME`` )
    /// - origin: ENTITY( ``eREPLICATE_FEATURE`` )
    /// - origin: ENTITY( ``eREVOLVED_PROFILE`` )
    /// - origin: ENTITY( ``eRIB_TOP`` )
    /// - origin: ENTITY( ``eROUND_HOLE`` )
    /// - origin: ENTITY( ``eROUNDED_END`` )
    /// - origin: ENTITY( ``eSPHERICAL_CAP`` )
    /// - origin: ENTITY( ``eSTEP`` )
    /// - origin: ENTITY( ``eSLOT`` )
    /// - origin: ENTITY( ``eTHREAD`` )
    /// - origin: ENTITY( ``eTURNED_KNURL`` )
    public var NAME: tLABEL?  {
      switch self {
      case ._BOSS(let entity): return entity.NAME
      case ._COMPOUND_FEATURE(let entity): return entity.NAME
      case ._EXTERNALLY_DEFINED_FEATURE_DEFINITION(let entity): return entity.NAME
      case ._FLAT_FACE(let entity): return entity.NAME
      case ._GEAR(let entity): return entity.NAME
      case ._MARKING(let entity): return entity.NAME
      case ._OUTER_ROUND(let entity): return entity.NAME
      case ._OUTSIDE_PROFILE(let entity): return entity.NAME
      case ._POCKET(let entity): return entity.NAME
      case ._PROTRUSION(let entity): return entity.NAME
      case ._REMOVAL_VOLUME(let entity): return entity.NAME
      case ._REPLICATE_FEATURE(let entity): return entity.NAME
      case ._REVOLVED_PROFILE(let entity): return entity.NAME
      case ._RIB_TOP(let entity): return entity.NAME
      case ._ROUND_HOLE(let entity): return entity.NAME
      case ._ROUNDED_END(let entity): return entity.NAME
      case ._SPHERICAL_CAP(let entity): return entity.NAME
      case ._STEP(let entity): return entity.NAME
      case ._SLOT(let entity): return entity.NAME
      case ._THREAD(let entity): return entity.NAME
      case ._TURNED_KNURL(let entity): return entity.NAME
      }
    }

    /// attribute of SELECT type ``sMACHINING_FEATURE_DEFINITION``
    /// - origin: ENTITY( ``eROUND_HOLE`` )
    public var DEPTH: ePOSITIVE_LENGTH_MEASURE_WITH_UNIT?  {
      switch self {
      case ._ROUND_HOLE(let entity): return entity.DEPTH
      default: return nil
      }
    }

    /// attribute of SELECT type ``sMACHINING_FEATURE_DEFINITION``
    /// - origin: ENTITY( ``eCOMPOUND_FEATURE`` )
    public var COUNTERSINK_DIAMETER_TOLERANCE: sTOLERANCE_VALUE_OR_LIMITS_AND_FITS?  {
      switch self {
      case ._COMPOUND_FEATURE(let entity): return entity.COUNTERSINK_DIAMETER_TOLERANCE
      default: return nil
      }
    }


    //MARK: - SDAIValue
    public func isValueEqual<T: SDAIValue>(to rhs: T) -> Bool {
      switch self {
      case ._BOSS(let selection): return selection.value.isValueEqual(to: rhs)
      case ._COMPOUND_FEATURE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._EXTERNALLY_DEFINED_FEATURE_DEFINITION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._FLAT_FACE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._GEAR(let selection): return selection.value.isValueEqual(to: rhs)
      case ._MARKING(let selection): return selection.value.isValueEqual(to: rhs)
      case ._OUTER_ROUND(let selection): return selection.value.isValueEqual(to: rhs)
      case ._OUTSIDE_PROFILE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._POCKET(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PROTRUSION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._REMOVAL_VOLUME(let selection): return selection.value.isValueEqual(to: rhs)
      case ._REPLICATE_FEATURE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._REVOLVED_PROFILE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._RIB_TOP(let selection): return selection.value.isValueEqual(to: rhs)
      case ._ROUND_HOLE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._ROUNDED_END(let selection): return selection.value.isValueEqual(to: rhs)
      case ._SPHERICAL_CAP(let selection): return selection.value.isValueEqual(to: rhs)
      case ._STEP(let selection): return selection.value.isValueEqual(to: rhs)
      case ._SLOT(let selection): return selection.value.isValueEqual(to: rhs)
      case ._THREAD(let selection): return selection.value.isValueEqual(to: rhs)
      case ._TURNED_KNURL(let selection): return selection.value.isValueEqual(to: rhs)
      }
    }

    public func isValueEqualOptionally<T: SDAIValue>(to rhs: T?) -> Bool? {
      switch self {
      case ._BOSS(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._COMPOUND_FEATURE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._EXTERNALLY_DEFINED_FEATURE_DEFINITION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._FLAT_FACE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._GEAR(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._MARKING(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._OUTER_ROUND(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._OUTSIDE_PROFILE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._POCKET(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PROTRUSION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._REMOVAL_VOLUME(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._REPLICATE_FEATURE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._REVOLVED_PROFILE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._RIB_TOP(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._ROUND_HOLE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._ROUNDED_END(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._SPHERICAL_CAP(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._STEP(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._SLOT(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._THREAD(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._TURNED_KNURL(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      }
    }

    public func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      switch self {
      case ._BOSS(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._COMPOUND_FEATURE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._EXTERNALLY_DEFINED_FEATURE_DEFINITION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._FLAT_FACE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._GEAR(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._MARKING(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._OUTER_ROUND(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._OUTSIDE_PROFILE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._POCKET(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PROTRUSION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._REMOVAL_VOLUME(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._REPLICATE_FEATURE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._REVOLVED_PROFILE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._RIB_TOP(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._ROUND_HOLE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._ROUNDED_END(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._SPHERICAL_CAP(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._STEP(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._SLOT(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._THREAD(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._TURNED_KNURL(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      }
    }

    public func isValueEqual<T: SDAIValue>(to rhs: T, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      switch self {
      case ._BOSS(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._COMPOUND_FEATURE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._EXTERNALLY_DEFINED_FEATURE_DEFINITION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._FLAT_FACE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._GEAR(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._MARKING(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._OUTER_ROUND(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._OUTSIDE_PROFILE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._POCKET(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PROTRUSION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._REMOVAL_VOLUME(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._REPLICATE_FEATURE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._REVOLVED_PROFILE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._RIB_TOP(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._ROUND_HOLE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._ROUNDED_END(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._SPHERICAL_CAP(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._STEP(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._SLOT(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._THREAD(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._TURNED_KNURL(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      }
    }

    public func isValueEqualOptionally<T: SDAIValue>(to rhs: T?, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      switch self {
      case ._BOSS(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._COMPOUND_FEATURE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._EXTERNALLY_DEFINED_FEATURE_DEFINITION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._FLAT_FACE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._GEAR(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._MARKING(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._OUTER_ROUND(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._OUTSIDE_PROFILE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._POCKET(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PROTRUSION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._REMOVAL_VOLUME(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._REPLICATE_FEATURE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._REVOLVED_PROFILE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._RIB_TOP(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._ROUND_HOLE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._ROUNDED_END(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._SPHERICAL_CAP(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._STEP(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._SLOT(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._THREAD(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._TURNED_KNURL(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      }
    }


    //MARK: SDAIGenericTypeBase
    public func copy() -> Self {
      switch self {
      case ._BOSS(let selection): return ._BOSS(selection.copy())
      case ._COMPOUND_FEATURE(let selection): return ._COMPOUND_FEATURE(selection.copy())
      case ._EXTERNALLY_DEFINED_FEATURE_DEFINITION(let selection): return ._EXTERNALLY_DEFINED_FEATURE_DEFINITION(selection.copy())
      case ._FLAT_FACE(let selection): return ._FLAT_FACE(selection.copy())
      case ._GEAR(let selection): return ._GEAR(selection.copy())
      case ._MARKING(let selection): return ._MARKING(selection.copy())
      case ._OUTER_ROUND(let selection): return ._OUTER_ROUND(selection.copy())
      case ._OUTSIDE_PROFILE(let selection): return ._OUTSIDE_PROFILE(selection.copy())
      case ._POCKET(let selection): return ._POCKET(selection.copy())
      case ._PROTRUSION(let selection): return ._PROTRUSION(selection.copy())
      case ._REMOVAL_VOLUME(let selection): return ._REMOVAL_VOLUME(selection.copy())
      case ._REPLICATE_FEATURE(let selection): return ._REPLICATE_FEATURE(selection.copy())
      case ._REVOLVED_PROFILE(let selection): return ._REVOLVED_PROFILE(selection.copy())
      case ._RIB_TOP(let selection): return ._RIB_TOP(selection.copy())
      case ._ROUND_HOLE(let selection): return ._ROUND_HOLE(selection.copy())
      case ._ROUNDED_END(let selection): return ._ROUNDED_END(selection.copy())
      case ._SPHERICAL_CAP(let selection): return ._SPHERICAL_CAP(selection.copy())
      case ._STEP(let selection): return ._STEP(selection.copy())
      case ._SLOT(let selection): return ._SLOT(selection.copy())
      case ._THREAD(let selection): return ._THREAD(selection.copy())
      case ._TURNED_KNURL(let selection): return ._TURNED_KNURL(selection.copy())
      }
    }

    //MARK: SDAIGenericType
    public var typeMembers: Set<SDAI.STRING> {
      var members: Set<SDAI.STRING> = [SDAI.STRING(Self.typeName)]
      switch self {
      case ._BOSS(let selection): members.formUnion(selection.typeMembers)
      case ._COMPOUND_FEATURE(let selection): members.formUnion(selection.typeMembers)
      case ._EXTERNALLY_DEFINED_FEATURE_DEFINITION(let selection): members.formUnion(selection.typeMembers)
      case ._FLAT_FACE(let selection): members.formUnion(selection.typeMembers)
      case ._GEAR(let selection): members.formUnion(selection.typeMembers)
      case ._MARKING(let selection): members.formUnion(selection.typeMembers)
      case ._OUTER_ROUND(let selection): members.formUnion(selection.typeMembers)
      case ._OUTSIDE_PROFILE(let selection): members.formUnion(selection.typeMembers)
      case ._POCKET(let selection): members.formUnion(selection.typeMembers)
      case ._PROTRUSION(let selection): members.formUnion(selection.typeMembers)
      case ._REMOVAL_VOLUME(let selection): members.formUnion(selection.typeMembers)
      case ._REPLICATE_FEATURE(let selection): members.formUnion(selection.typeMembers)
      case ._REVOLVED_PROFILE(let selection): members.formUnion(selection.typeMembers)
      case ._RIB_TOP(let selection): members.formUnion(selection.typeMembers)
      case ._ROUND_HOLE(let selection): members.formUnion(selection.typeMembers)
      case ._ROUNDED_END(let selection): members.formUnion(selection.typeMembers)
      case ._SPHERICAL_CAP(let selection): members.formUnion(selection.typeMembers)
      case ._STEP(let selection): members.formUnion(selection.typeMembers)
      case ._SLOT(let selection): members.formUnion(selection.typeMembers)
      case ._THREAD(let selection): members.formUnion(selection.typeMembers)
      case ._TURNED_KNURL(let selection): members.formUnion(selection.typeMembers)
      }
      return members
    }

    public var entityReference: SDAI.EntityReference? {
      switch self {
      case ._BOSS(let selection): return selection.entityReference
      case ._COMPOUND_FEATURE(let selection): return selection.entityReference
      case ._EXTERNALLY_DEFINED_FEATURE_DEFINITION(let selection): return selection.entityReference
      case ._FLAT_FACE(let selection): return selection.entityReference
      case ._GEAR(let selection): return selection.entityReference
      case ._MARKING(let selection): return selection.entityReference
      case ._OUTER_ROUND(let selection): return selection.entityReference
      case ._OUTSIDE_PROFILE(let selection): return selection.entityReference
      case ._POCKET(let selection): return selection.entityReference
      case ._PROTRUSION(let selection): return selection.entityReference
      case ._REMOVAL_VOLUME(let selection): return selection.entityReference
      case ._REPLICATE_FEATURE(let selection): return selection.entityReference
      case ._REVOLVED_PROFILE(let selection): return selection.entityReference
      case ._RIB_TOP(let selection): return selection.entityReference
      case ._ROUND_HOLE(let selection): return selection.entityReference
      case ._ROUNDED_END(let selection): return selection.entityReference
      case ._SPHERICAL_CAP(let selection): return selection.entityReference
      case ._STEP(let selection): return selection.entityReference
      case ._SLOT(let selection): return selection.entityReference
      case ._THREAD(let selection): return selection.entityReference
      case ._TURNED_KNURL(let selection): return selection.entityReference
      }
    }
    public var stringValue: SDAI.STRING? {
      switch self {
      case ._BOSS(let selection): return selection.stringValue
      case ._COMPOUND_FEATURE(let selection): return selection.stringValue
      case ._EXTERNALLY_DEFINED_FEATURE_DEFINITION(let selection): return selection.stringValue
      case ._FLAT_FACE(let selection): return selection.stringValue
      case ._GEAR(let selection): return selection.stringValue
      case ._MARKING(let selection): return selection.stringValue
      case ._OUTER_ROUND(let selection): return selection.stringValue
      case ._OUTSIDE_PROFILE(let selection): return selection.stringValue
      case ._POCKET(let selection): return selection.stringValue
      case ._PROTRUSION(let selection): return selection.stringValue
      case ._REMOVAL_VOLUME(let selection): return selection.stringValue
      case ._REPLICATE_FEATURE(let selection): return selection.stringValue
      case ._REVOLVED_PROFILE(let selection): return selection.stringValue
      case ._RIB_TOP(let selection): return selection.stringValue
      case ._ROUND_HOLE(let selection): return selection.stringValue
      case ._ROUNDED_END(let selection): return selection.stringValue
      case ._SPHERICAL_CAP(let selection): return selection.stringValue
      case ._STEP(let selection): return selection.stringValue
      case ._SLOT(let selection): return selection.stringValue
      case ._THREAD(let selection): return selection.stringValue
      case ._TURNED_KNURL(let selection): return selection.stringValue
      }
    }
    public var binaryValue: SDAI.BINARY? {
      switch self {
      case ._BOSS(let selection): return selection.binaryValue
      case ._COMPOUND_FEATURE(let selection): return selection.binaryValue
      case ._EXTERNALLY_DEFINED_FEATURE_DEFINITION(let selection): return selection.binaryValue
      case ._FLAT_FACE(let selection): return selection.binaryValue
      case ._GEAR(let selection): return selection.binaryValue
      case ._MARKING(let selection): return selection.binaryValue
      case ._OUTER_ROUND(let selection): return selection.binaryValue
      case ._OUTSIDE_PROFILE(let selection): return selection.binaryValue
      case ._POCKET(let selection): return selection.binaryValue
      case ._PROTRUSION(let selection): return selection.binaryValue
      case ._REMOVAL_VOLUME(let selection): return selection.binaryValue
      case ._REPLICATE_FEATURE(let selection): return selection.binaryValue
      case ._REVOLVED_PROFILE(let selection): return selection.binaryValue
      case ._RIB_TOP(let selection): return selection.binaryValue
      case ._ROUND_HOLE(let selection): return selection.binaryValue
      case ._ROUNDED_END(let selection): return selection.binaryValue
      case ._SPHERICAL_CAP(let selection): return selection.binaryValue
      case ._STEP(let selection): return selection.binaryValue
      case ._SLOT(let selection): return selection.binaryValue
      case ._THREAD(let selection): return selection.binaryValue
      case ._TURNED_KNURL(let selection): return selection.binaryValue
      }
    }
    public var logicalValue: SDAI.LOGICAL? {
      switch self {
      case ._BOSS(let selection): return selection.logicalValue
      case ._COMPOUND_FEATURE(let selection): return selection.logicalValue
      case ._EXTERNALLY_DEFINED_FEATURE_DEFINITION(let selection): return selection.logicalValue
      case ._FLAT_FACE(let selection): return selection.logicalValue
      case ._GEAR(let selection): return selection.logicalValue
      case ._MARKING(let selection): return selection.logicalValue
      case ._OUTER_ROUND(let selection): return selection.logicalValue
      case ._OUTSIDE_PROFILE(let selection): return selection.logicalValue
      case ._POCKET(let selection): return selection.logicalValue
      case ._PROTRUSION(let selection): return selection.logicalValue
      case ._REMOVAL_VOLUME(let selection): return selection.logicalValue
      case ._REPLICATE_FEATURE(let selection): return selection.logicalValue
      case ._REVOLVED_PROFILE(let selection): return selection.logicalValue
      case ._RIB_TOP(let selection): return selection.logicalValue
      case ._ROUND_HOLE(let selection): return selection.logicalValue
      case ._ROUNDED_END(let selection): return selection.logicalValue
      case ._SPHERICAL_CAP(let selection): return selection.logicalValue
      case ._STEP(let selection): return selection.logicalValue
      case ._SLOT(let selection): return selection.logicalValue
      case ._THREAD(let selection): return selection.logicalValue
      case ._TURNED_KNURL(let selection): return selection.logicalValue
      }
    }
    public var booleanValue: SDAI.BOOLEAN? {
      switch self {
      case ._BOSS(let selection): return selection.booleanValue
      case ._COMPOUND_FEATURE(let selection): return selection.booleanValue
      case ._EXTERNALLY_DEFINED_FEATURE_DEFINITION(let selection): return selection.booleanValue
      case ._FLAT_FACE(let selection): return selection.booleanValue
      case ._GEAR(let selection): return selection.booleanValue
      case ._MARKING(let selection): return selection.booleanValue
      case ._OUTER_ROUND(let selection): return selection.booleanValue
      case ._OUTSIDE_PROFILE(let selection): return selection.booleanValue
      case ._POCKET(let selection): return selection.booleanValue
      case ._PROTRUSION(let selection): return selection.booleanValue
      case ._REMOVAL_VOLUME(let selection): return selection.booleanValue
      case ._REPLICATE_FEATURE(let selection): return selection.booleanValue
      case ._REVOLVED_PROFILE(let selection): return selection.booleanValue
      case ._RIB_TOP(let selection): return selection.booleanValue
      case ._ROUND_HOLE(let selection): return selection.booleanValue
      case ._ROUNDED_END(let selection): return selection.booleanValue
      case ._SPHERICAL_CAP(let selection): return selection.booleanValue
      case ._STEP(let selection): return selection.booleanValue
      case ._SLOT(let selection): return selection.booleanValue
      case ._THREAD(let selection): return selection.booleanValue
      case ._TURNED_KNURL(let selection): return selection.booleanValue
      }
    }
    public var numberValue: SDAI.NUMBER? {
      switch self {
      case ._BOSS(let selection): return selection.numberValue
      case ._COMPOUND_FEATURE(let selection): return selection.numberValue
      case ._EXTERNALLY_DEFINED_FEATURE_DEFINITION(let selection): return selection.numberValue
      case ._FLAT_FACE(let selection): return selection.numberValue
      case ._GEAR(let selection): return selection.numberValue
      case ._MARKING(let selection): return selection.numberValue
      case ._OUTER_ROUND(let selection): return selection.numberValue
      case ._OUTSIDE_PROFILE(let selection): return selection.numberValue
      case ._POCKET(let selection): return selection.numberValue
      case ._PROTRUSION(let selection): return selection.numberValue
      case ._REMOVAL_VOLUME(let selection): return selection.numberValue
      case ._REPLICATE_FEATURE(let selection): return selection.numberValue
      case ._REVOLVED_PROFILE(let selection): return selection.numberValue
      case ._RIB_TOP(let selection): return selection.numberValue
      case ._ROUND_HOLE(let selection): return selection.numberValue
      case ._ROUNDED_END(let selection): return selection.numberValue
      case ._SPHERICAL_CAP(let selection): return selection.numberValue
      case ._STEP(let selection): return selection.numberValue
      case ._SLOT(let selection): return selection.numberValue
      case ._THREAD(let selection): return selection.numberValue
      case ._TURNED_KNURL(let selection): return selection.numberValue
      }
    }
    public var realValue: SDAI.REAL? {
      switch self {
      case ._BOSS(let selection): return selection.realValue
      case ._COMPOUND_FEATURE(let selection): return selection.realValue
      case ._EXTERNALLY_DEFINED_FEATURE_DEFINITION(let selection): return selection.realValue
      case ._FLAT_FACE(let selection): return selection.realValue
      case ._GEAR(let selection): return selection.realValue
      case ._MARKING(let selection): return selection.realValue
      case ._OUTER_ROUND(let selection): return selection.realValue
      case ._OUTSIDE_PROFILE(let selection): return selection.realValue
      case ._POCKET(let selection): return selection.realValue
      case ._PROTRUSION(let selection): return selection.realValue
      case ._REMOVAL_VOLUME(let selection): return selection.realValue
      case ._REPLICATE_FEATURE(let selection): return selection.realValue
      case ._REVOLVED_PROFILE(let selection): return selection.realValue
      case ._RIB_TOP(let selection): return selection.realValue
      case ._ROUND_HOLE(let selection): return selection.realValue
      case ._ROUNDED_END(let selection): return selection.realValue
      case ._SPHERICAL_CAP(let selection): return selection.realValue
      case ._STEP(let selection): return selection.realValue
      case ._SLOT(let selection): return selection.realValue
      case ._THREAD(let selection): return selection.realValue
      case ._TURNED_KNURL(let selection): return selection.realValue
      }
    }
    public var integerValue: SDAI.INTEGER? {
      switch self {
      case ._BOSS(let selection): return selection.integerValue
      case ._COMPOUND_FEATURE(let selection): return selection.integerValue
      case ._EXTERNALLY_DEFINED_FEATURE_DEFINITION(let selection): return selection.integerValue
      case ._FLAT_FACE(let selection): return selection.integerValue
      case ._GEAR(let selection): return selection.integerValue
      case ._MARKING(let selection): return selection.integerValue
      case ._OUTER_ROUND(let selection): return selection.integerValue
      case ._OUTSIDE_PROFILE(let selection): return selection.integerValue
      case ._POCKET(let selection): return selection.integerValue
      case ._PROTRUSION(let selection): return selection.integerValue
      case ._REMOVAL_VOLUME(let selection): return selection.integerValue
      case ._REPLICATE_FEATURE(let selection): return selection.integerValue
      case ._REVOLVED_PROFILE(let selection): return selection.integerValue
      case ._RIB_TOP(let selection): return selection.integerValue
      case ._ROUND_HOLE(let selection): return selection.integerValue
      case ._ROUNDED_END(let selection): return selection.integerValue
      case ._SPHERICAL_CAP(let selection): return selection.integerValue
      case ._STEP(let selection): return selection.integerValue
      case ._SLOT(let selection): return selection.integerValue
      case ._THREAD(let selection): return selection.integerValue
      case ._TURNED_KNURL(let selection): return selection.integerValue
      }
    }
    public var genericEnumValue: SDAI.GenericEnumValue? {
      switch self {
      case ._BOSS(let selection): return selection.genericEnumValue
      case ._COMPOUND_FEATURE(let selection): return selection.genericEnumValue
      case ._EXTERNALLY_DEFINED_FEATURE_DEFINITION(let selection): return selection.genericEnumValue
      case ._FLAT_FACE(let selection): return selection.genericEnumValue
      case ._GEAR(let selection): return selection.genericEnumValue
      case ._MARKING(let selection): return selection.genericEnumValue
      case ._OUTER_ROUND(let selection): return selection.genericEnumValue
      case ._OUTSIDE_PROFILE(let selection): return selection.genericEnumValue
      case ._POCKET(let selection): return selection.genericEnumValue
      case ._PROTRUSION(let selection): return selection.genericEnumValue
      case ._REMOVAL_VOLUME(let selection): return selection.genericEnumValue
      case ._REPLICATE_FEATURE(let selection): return selection.genericEnumValue
      case ._REVOLVED_PROFILE(let selection): return selection.genericEnumValue
      case ._RIB_TOP(let selection): return selection.genericEnumValue
      case ._ROUND_HOLE(let selection): return selection.genericEnumValue
      case ._ROUNDED_END(let selection): return selection.genericEnumValue
      case ._SPHERICAL_CAP(let selection): return selection.genericEnumValue
      case ._STEP(let selection): return selection.genericEnumValue
      case ._SLOT(let selection): return selection.genericEnumValue
      case ._THREAD(let selection): return selection.genericEnumValue
      case ._TURNED_KNURL(let selection): return selection.genericEnumValue
      }
    }
    public func arrayOptionalValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.ARRAY_OPTIONAL<ELEM>? {
      switch self {
      case ._BOSS(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._COMPOUND_FEATURE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._EXTERNALLY_DEFINED_FEATURE_DEFINITION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._FLAT_FACE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._GEAR(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._MARKING(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._OUTER_ROUND(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._OUTSIDE_PROFILE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._POCKET(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PROTRUSION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._REMOVAL_VOLUME(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._REPLICATE_FEATURE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._REVOLVED_PROFILE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._RIB_TOP(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._ROUND_HOLE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._ROUNDED_END(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._SPHERICAL_CAP(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._STEP(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._SLOT(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._THREAD(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._TURNED_KNURL(let selection): return selection.arrayOptionalValue(elementType:elementType)
      }
    }
    public func arrayValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.ARRAY<ELEM>? {
      switch self {
      case ._BOSS(let selection): return selection.arrayValue(elementType:elementType)
      case ._COMPOUND_FEATURE(let selection): return selection.arrayValue(elementType:elementType)
      case ._EXTERNALLY_DEFINED_FEATURE_DEFINITION(let selection): return selection.arrayValue(elementType:elementType)
      case ._FLAT_FACE(let selection): return selection.arrayValue(elementType:elementType)
      case ._GEAR(let selection): return selection.arrayValue(elementType:elementType)
      case ._MARKING(let selection): return selection.arrayValue(elementType:elementType)
      case ._OUTER_ROUND(let selection): return selection.arrayValue(elementType:elementType)
      case ._OUTSIDE_PROFILE(let selection): return selection.arrayValue(elementType:elementType)
      case ._POCKET(let selection): return selection.arrayValue(elementType:elementType)
      case ._PROTRUSION(let selection): return selection.arrayValue(elementType:elementType)
      case ._REMOVAL_VOLUME(let selection): return selection.arrayValue(elementType:elementType)
      case ._REPLICATE_FEATURE(let selection): return selection.arrayValue(elementType:elementType)
      case ._REVOLVED_PROFILE(let selection): return selection.arrayValue(elementType:elementType)
      case ._RIB_TOP(let selection): return selection.arrayValue(elementType:elementType)
      case ._ROUND_HOLE(let selection): return selection.arrayValue(elementType:elementType)
      case ._ROUNDED_END(let selection): return selection.arrayValue(elementType:elementType)
      case ._SPHERICAL_CAP(let selection): return selection.arrayValue(elementType:elementType)
      case ._STEP(let selection): return selection.arrayValue(elementType:elementType)
      case ._SLOT(let selection): return selection.arrayValue(elementType:elementType)
      case ._THREAD(let selection): return selection.arrayValue(elementType:elementType)
      case ._TURNED_KNURL(let selection): return selection.arrayValue(elementType:elementType)
      }
    }
    public func listValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.LIST<ELEM>? {
      switch self {
      case ._BOSS(let selection): return selection.listValue(elementType:elementType)
      case ._COMPOUND_FEATURE(let selection): return selection.listValue(elementType:elementType)
      case ._EXTERNALLY_DEFINED_FEATURE_DEFINITION(let selection): return selection.listValue(elementType:elementType)
      case ._FLAT_FACE(let selection): return selection.listValue(elementType:elementType)
      case ._GEAR(let selection): return selection.listValue(elementType:elementType)
      case ._MARKING(let selection): return selection.listValue(elementType:elementType)
      case ._OUTER_ROUND(let selection): return selection.listValue(elementType:elementType)
      case ._OUTSIDE_PROFILE(let selection): return selection.listValue(elementType:elementType)
      case ._POCKET(let selection): return selection.listValue(elementType:elementType)
      case ._PROTRUSION(let selection): return selection.listValue(elementType:elementType)
      case ._REMOVAL_VOLUME(let selection): return selection.listValue(elementType:elementType)
      case ._REPLICATE_FEATURE(let selection): return selection.listValue(elementType:elementType)
      case ._REVOLVED_PROFILE(let selection): return selection.listValue(elementType:elementType)
      case ._RIB_TOP(let selection): return selection.listValue(elementType:elementType)
      case ._ROUND_HOLE(let selection): return selection.listValue(elementType:elementType)
      case ._ROUNDED_END(let selection): return selection.listValue(elementType:elementType)
      case ._SPHERICAL_CAP(let selection): return selection.listValue(elementType:elementType)
      case ._STEP(let selection): return selection.listValue(elementType:elementType)
      case ._SLOT(let selection): return selection.listValue(elementType:elementType)
      case ._THREAD(let selection): return selection.listValue(elementType:elementType)
      case ._TURNED_KNURL(let selection): return selection.listValue(elementType:elementType)
      }
    }
    public func bagValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.BAG<ELEM>? {
      switch self {
      case ._BOSS(let selection): return selection.bagValue(elementType:elementType)
      case ._COMPOUND_FEATURE(let selection): return selection.bagValue(elementType:elementType)
      case ._EXTERNALLY_DEFINED_FEATURE_DEFINITION(let selection): return selection.bagValue(elementType:elementType)
      case ._FLAT_FACE(let selection): return selection.bagValue(elementType:elementType)
      case ._GEAR(let selection): return selection.bagValue(elementType:elementType)
      case ._MARKING(let selection): return selection.bagValue(elementType:elementType)
      case ._OUTER_ROUND(let selection): return selection.bagValue(elementType:elementType)
      case ._OUTSIDE_PROFILE(let selection): return selection.bagValue(elementType:elementType)
      case ._POCKET(let selection): return selection.bagValue(elementType:elementType)
      case ._PROTRUSION(let selection): return selection.bagValue(elementType:elementType)
      case ._REMOVAL_VOLUME(let selection): return selection.bagValue(elementType:elementType)
      case ._REPLICATE_FEATURE(let selection): return selection.bagValue(elementType:elementType)
      case ._REVOLVED_PROFILE(let selection): return selection.bagValue(elementType:elementType)
      case ._RIB_TOP(let selection): return selection.bagValue(elementType:elementType)
      case ._ROUND_HOLE(let selection): return selection.bagValue(elementType:elementType)
      case ._ROUNDED_END(let selection): return selection.bagValue(elementType:elementType)
      case ._SPHERICAL_CAP(let selection): return selection.bagValue(elementType:elementType)
      case ._STEP(let selection): return selection.bagValue(elementType:elementType)
      case ._SLOT(let selection): return selection.bagValue(elementType:elementType)
      case ._THREAD(let selection): return selection.bagValue(elementType:elementType)
      case ._TURNED_KNURL(let selection): return selection.bagValue(elementType:elementType)
      }
    }
    public func setValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.SET<ELEM>? {
      switch self {
      case ._BOSS(let selection): return selection.setValue(elementType:elementType)
      case ._COMPOUND_FEATURE(let selection): return selection.setValue(elementType:elementType)
      case ._EXTERNALLY_DEFINED_FEATURE_DEFINITION(let selection): return selection.setValue(elementType:elementType)
      case ._FLAT_FACE(let selection): return selection.setValue(elementType:elementType)
      case ._GEAR(let selection): return selection.setValue(elementType:elementType)
      case ._MARKING(let selection): return selection.setValue(elementType:elementType)
      case ._OUTER_ROUND(let selection): return selection.setValue(elementType:elementType)
      case ._OUTSIDE_PROFILE(let selection): return selection.setValue(elementType:elementType)
      case ._POCKET(let selection): return selection.setValue(elementType:elementType)
      case ._PROTRUSION(let selection): return selection.setValue(elementType:elementType)
      case ._REMOVAL_VOLUME(let selection): return selection.setValue(elementType:elementType)
      case ._REPLICATE_FEATURE(let selection): return selection.setValue(elementType:elementType)
      case ._REVOLVED_PROFILE(let selection): return selection.setValue(elementType:elementType)
      case ._RIB_TOP(let selection): return selection.setValue(elementType:elementType)
      case ._ROUND_HOLE(let selection): return selection.setValue(elementType:elementType)
      case ._ROUNDED_END(let selection): return selection.setValue(elementType:elementType)
      case ._SPHERICAL_CAP(let selection): return selection.setValue(elementType:elementType)
      case ._STEP(let selection): return selection.setValue(elementType:elementType)
      case ._SLOT(let selection): return selection.setValue(elementType:elementType)
      case ._THREAD(let selection): return selection.setValue(elementType:elementType)
      case ._TURNED_KNURL(let selection): return selection.setValue(elementType:elementType)
      }
    }
    public func enumValue<ENUM:SDAIEnumerationType>(enumType:ENUM.Type) -> ENUM? {
      switch self {
      case ._BOSS(let selection): return selection.enumValue(enumType:enumType)
      case ._COMPOUND_FEATURE(let selection): return selection.enumValue(enumType:enumType)
      case ._EXTERNALLY_DEFINED_FEATURE_DEFINITION(let selection): return selection.enumValue(enumType:enumType)
      case ._FLAT_FACE(let selection): return selection.enumValue(enumType:enumType)
      case ._GEAR(let selection): return selection.enumValue(enumType:enumType)
      case ._MARKING(let selection): return selection.enumValue(enumType:enumType)
      case ._OUTER_ROUND(let selection): return selection.enumValue(enumType:enumType)
      case ._OUTSIDE_PROFILE(let selection): return selection.enumValue(enumType:enumType)
      case ._POCKET(let selection): return selection.enumValue(enumType:enumType)
      case ._PROTRUSION(let selection): return selection.enumValue(enumType:enumType)
      case ._REMOVAL_VOLUME(let selection): return selection.enumValue(enumType:enumType)
      case ._REPLICATE_FEATURE(let selection): return selection.enumValue(enumType:enumType)
      case ._REVOLVED_PROFILE(let selection): return selection.enumValue(enumType:enumType)
      case ._RIB_TOP(let selection): return selection.enumValue(enumType:enumType)
      case ._ROUND_HOLE(let selection): return selection.enumValue(enumType:enumType)
      case ._ROUNDED_END(let selection): return selection.enumValue(enumType:enumType)
      case ._SPHERICAL_CAP(let selection): return selection.enumValue(enumType:enumType)
      case ._STEP(let selection): return selection.enumValue(enumType:enumType)
      case ._SLOT(let selection): return selection.enumValue(enumType:enumType)
      case ._THREAD(let selection): return selection.enumValue(enumType:enumType)
      case ._TURNED_KNURL(let selection): return selection.enumValue(enumType:enumType)
      }
    }

    //MARK: SDAIUnderlyingType
    public typealias FundamentalType = Self
    public static var typeName: String = 
      "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.MACHINING_FEATURE_DEFINITION"
    public var asFundamentalType: FundamentalType { return self }

    //MARK: SDAIObservableAggregateElement
    public var entityReferences: AnySequence<SDAI.EntityReference> {
      switch self {
      case ._BOSS(let entity): return entity.entityReferences
      case ._COMPOUND_FEATURE(let entity): return entity.entityReferences
      case ._EXTERNALLY_DEFINED_FEATURE_DEFINITION(let entity): return entity.entityReferences
      case ._FLAT_FACE(let entity): return entity.entityReferences
      case ._GEAR(let entity): return entity.entityReferences
      case ._MARKING(let entity): return entity.entityReferences
      case ._OUTER_ROUND(let entity): return entity.entityReferences
      case ._OUTSIDE_PROFILE(let entity): return entity.entityReferences
      case ._POCKET(let entity): return entity.entityReferences
      case ._PROTRUSION(let entity): return entity.entityReferences
      case ._REMOVAL_VOLUME(let entity): return entity.entityReferences
      case ._REPLICATE_FEATURE(let entity): return entity.entityReferences
      case ._REVOLVED_PROFILE(let entity): return entity.entityReferences
      case ._RIB_TOP(let entity): return entity.entityReferences
      case ._ROUND_HOLE(let entity): return entity.entityReferences
      case ._ROUNDED_END(let entity): return entity.entityReferences
      case ._SPHERICAL_CAP(let entity): return entity.entityReferences
      case ._STEP(let entity): return entity.entityReferences
      case ._SLOT(let entity): return entity.entityReferences
      case ._THREAD(let entity): return entity.entityReferences
      case ._TURNED_KNURL(let entity): return entity.entityReferences
      }
    }

    public mutating func configure(with observer: SDAI.EntityReferenceObserver) {
      switch self {
      case ._BOSS(let entity): 
        entity.configure(with: observer)
        self = ._BOSS(entity)
      case ._COMPOUND_FEATURE(let entity): 
        entity.configure(with: observer)
        self = ._COMPOUND_FEATURE(entity)
      case ._EXTERNALLY_DEFINED_FEATURE_DEFINITION(let entity): 
        entity.configure(with: observer)
        self = ._EXTERNALLY_DEFINED_FEATURE_DEFINITION(entity)
      case ._FLAT_FACE(let entity): 
        entity.configure(with: observer)
        self = ._FLAT_FACE(entity)
      case ._GEAR(let entity): 
        entity.configure(with: observer)
        self = ._GEAR(entity)
      case ._MARKING(let entity): 
        entity.configure(with: observer)
        self = ._MARKING(entity)
      case ._OUTER_ROUND(let entity): 
        entity.configure(with: observer)
        self = ._OUTER_ROUND(entity)
      case ._OUTSIDE_PROFILE(let entity): 
        entity.configure(with: observer)
        self = ._OUTSIDE_PROFILE(entity)
      case ._POCKET(let entity): 
        entity.configure(with: observer)
        self = ._POCKET(entity)
      case ._PROTRUSION(let entity): 
        entity.configure(with: observer)
        self = ._PROTRUSION(entity)
      case ._REMOVAL_VOLUME(let entity): 
        entity.configure(with: observer)
        self = ._REMOVAL_VOLUME(entity)
      case ._REPLICATE_FEATURE(let entity): 
        entity.configure(with: observer)
        self = ._REPLICATE_FEATURE(entity)
      case ._REVOLVED_PROFILE(let entity): 
        entity.configure(with: observer)
        self = ._REVOLVED_PROFILE(entity)
      case ._RIB_TOP(let entity): 
        entity.configure(with: observer)
        self = ._RIB_TOP(entity)
      case ._ROUND_HOLE(let entity): 
        entity.configure(with: observer)
        self = ._ROUND_HOLE(entity)
      case ._ROUNDED_END(let entity): 
        entity.configure(with: observer)
        self = ._ROUNDED_END(entity)
      case ._SPHERICAL_CAP(let entity): 
        entity.configure(with: observer)
        self = ._SPHERICAL_CAP(entity)
      case ._STEP(let entity): 
        entity.configure(with: observer)
        self = ._STEP(entity)
      case ._SLOT(let entity): 
        entity.configure(with: observer)
        self = ._SLOT(entity)
      case ._THREAD(let entity): 
        entity.configure(with: observer)
        self = ._THREAD(entity)
      case ._TURNED_KNURL(let entity): 
        entity.configure(with: observer)
        self = ._TURNED_KNURL(entity)
      }
    }

    public mutating func teardownObserver() {
      switch self {
      case ._BOSS(let entity): 
        entity.teardownObserver()
        self = ._BOSS(entity)
      case ._COMPOUND_FEATURE(let entity): 
        entity.teardownObserver()
        self = ._COMPOUND_FEATURE(entity)
      case ._EXTERNALLY_DEFINED_FEATURE_DEFINITION(let entity): 
        entity.teardownObserver()
        self = ._EXTERNALLY_DEFINED_FEATURE_DEFINITION(entity)
      case ._FLAT_FACE(let entity): 
        entity.teardownObserver()
        self = ._FLAT_FACE(entity)
      case ._GEAR(let entity): 
        entity.teardownObserver()
        self = ._GEAR(entity)
      case ._MARKING(let entity): 
        entity.teardownObserver()
        self = ._MARKING(entity)
      case ._OUTER_ROUND(let entity): 
        entity.teardownObserver()
        self = ._OUTER_ROUND(entity)
      case ._OUTSIDE_PROFILE(let entity): 
        entity.teardownObserver()
        self = ._OUTSIDE_PROFILE(entity)
      case ._POCKET(let entity): 
        entity.teardownObserver()
        self = ._POCKET(entity)
      case ._PROTRUSION(let entity): 
        entity.teardownObserver()
        self = ._PROTRUSION(entity)
      case ._REMOVAL_VOLUME(let entity): 
        entity.teardownObserver()
        self = ._REMOVAL_VOLUME(entity)
      case ._REPLICATE_FEATURE(let entity): 
        entity.teardownObserver()
        self = ._REPLICATE_FEATURE(entity)
      case ._REVOLVED_PROFILE(let entity): 
        entity.teardownObserver()
        self = ._REVOLVED_PROFILE(entity)
      case ._RIB_TOP(let entity): 
        entity.teardownObserver()
        self = ._RIB_TOP(entity)
      case ._ROUND_HOLE(let entity): 
        entity.teardownObserver()
        self = ._ROUND_HOLE(entity)
      case ._ROUNDED_END(let entity): 
        entity.teardownObserver()
        self = ._ROUNDED_END(entity)
      case ._SPHERICAL_CAP(let entity): 
        entity.teardownObserver()
        self = ._SPHERICAL_CAP(entity)
      case ._STEP(let entity): 
        entity.teardownObserver()
        self = ._STEP(entity)
      case ._SLOT(let entity): 
        entity.teardownObserver()
        self = ._SLOT(entity)
      case ._THREAD(let entity): 
        entity.teardownObserver()
        self = ._THREAD(entity)
      case ._TURNED_KNURL(let entity): 
        entity.teardownObserver()
        self = ._TURNED_KNURL(entity)
      }
    }

    //MARK: SDAIAggregationBehavior
    public var aggregationHiBound: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationHiIndex: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationLoBound: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationLoIndex: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationSize: Int? {
      switch self {
      default: return nil
      }
    }

    //MARK: WHERE RULE VALIDATION (SELECT TYPE)
    public static func validateWhereRules(instance:Self?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      var result: [SDAI.WhereLabel:SDAI.LOGICAL] = [:]
      switch instance {
      case ._BOSS(let selectValue): result = eBOSS.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\BOSS")
      case ._COMPOUND_FEATURE(let selectValue): 
        result = eCOMPOUND_FEATURE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\COMPOUND_FEATURE")
      case ._EXTERNALLY_DEFINED_FEATURE_DEFINITION(let selectValue): 
        result = eEXTERNALLY_DEFINED_FEATURE_DEFINITION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\EXTERNALLY_DEFINED_FEATURE_DEFINITION")
      case ._FLAT_FACE(let selectValue): result = eFLAT_FACE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\FLAT_FACE")
      case ._GEAR(let selectValue): result = eGEAR.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\GEAR")
      case ._MARKING(let selectValue): result = eMARKING.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\MARKING")
      case ._OUTER_ROUND(let selectValue): result = eOUTER_ROUND.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\OUTER_ROUND")
      case ._OUTSIDE_PROFILE(let selectValue): 
        result = eOUTSIDE_PROFILE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\OUTSIDE_PROFILE")
      case ._POCKET(let selectValue): result = ePOCKET.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\POCKET")
      case ._PROTRUSION(let selectValue): result = ePROTRUSION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PROTRUSION")
      case ._REMOVAL_VOLUME(let selectValue): 
        result = eREMOVAL_VOLUME.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\REMOVAL_VOLUME")
      case ._REPLICATE_FEATURE(let selectValue): 
        result = eREPLICATE_FEATURE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\REPLICATE_FEATURE")
      case ._REVOLVED_PROFILE(let selectValue): 
        result = eREVOLVED_PROFILE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\REVOLVED_PROFILE")
      case ._RIB_TOP(let selectValue): result = eRIB_TOP.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\RIB_TOP")
      case ._ROUND_HOLE(let selectValue): result = eROUND_HOLE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\ROUND_HOLE")
      case ._ROUNDED_END(let selectValue): result = eROUNDED_END.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\ROUNDED_END")
      case ._SPHERICAL_CAP(let selectValue): 
        result = eSPHERICAL_CAP.validateWhereRules(instance:selectValue, prefix:prefix + "\\SPHERICAL_CAP")
      case ._STEP(let selectValue): result = eSTEP.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\STEP")
      case ._SLOT(let selectValue): result = eSLOT.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\SLOT")
      case ._THREAD(let selectValue): result = eTHREAD.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\THREAD")
      case ._TURNED_KNURL(let selectValue): result = eTURNED_KNURL.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\TURNED_KNURL")
      case nil: break
      }

      return result
    }

  }

}


//MARK: - SELECT TYPE HIERARCHY
public protocol AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sMACHINING_FEATURE_DEFINITION__type: 
  SDAISelectType {

  //MARK: GROUP REFERENCES
  var super_eREPLICATE_FEATURE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPLICATE_FEATURE? { get }
  var super_eOUTER_ROUND: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eOUTER_ROUND? { get }
  var super_eBOSS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eBOSS? { get }
  var super_eSPHERICAL_CAP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSPHERICAL_CAP? { get }
  var super_eCOMPOUND_FEATURE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOMPOUND_FEATURE? { get }
  var super_eEXTERNALLY_DEFINED_ITEM: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEXTERNALLY_DEFINED_ITEM? { get }
  var super_eROUNDED_END: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eROUNDED_END? { get }
  var super_eOUTSIDE_PROFILE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eOUTSIDE_PROFILE? { get }
  var super_eFLAT_FACE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFLAT_FACE? { get }
  var super_eSLOT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSLOT? { get }
  var super_eFEATURE_DEFINITION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFEATURE_DEFINITION? { get }
  var super_eRIB_TOP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eRIB_TOP? { get }
  var super_eGEAR: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGEAR? { get }
  var super_eSTEP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSTEP? { get }
  var super_eTURNED_KNURL: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eTURNED_KNURL? { get }
  var super_eREVOLVED_PROFILE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREVOLVED_PROFILE? { get }
  var super_eMARKING: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMARKING? { get }
  var super_ePOCKET: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePOCKET? { get }
  var super_eTHREAD: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eTHREAD? { get }
  var super_ePROTRUSION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePROTRUSION? { get }
  var super_eROUND_HOLE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eROUND_HOLE? { get }
  var super_eREMOVAL_VOLUME: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREMOVAL_VOLUME? { get }
  var super_eEXTERNALLY_DEFINED_FEATURE_DEFINITION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEXTERNALLY_DEFINED_FEATURE_DEFINITION? { get }
  var super_eCHARACTERIZED_OBJECT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCHARACTERIZED_OBJECT? { get }

  //MARK: ENTITY ATTRIBUTE REFERENCES
  var DIAMETER_TOLERANCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sTOLERANCE_VALUE_OR_LIMITS_AND_FITS?  { get }
  var DEPTH_TOLERANCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eTOLERANCE_VALUE?  { get }
  var ITEM_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sSOURCE_ITEM?  { get }
  var DESCRIPTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT?  { get }
  var COUNTERDRILL_ANGLE_TOLERANCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eTOLERANCE_VALUE?  { get }
  var COUNTERSINK_DIAMETER: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePOSITIVE_LENGTH_MEASURE_WITH_UNIT?  { get }
  var COUNTERSINK_ANGLE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePOSITIVE_PLANE_ANGLE_MEASURE_WITH_UNIT?  { get }
  var PLACEMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_REPRESENTATION?  { get }
  var DIAMETER: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePOSITIVE_LENGTH_MEASURE_WITH_UNIT?  { get }
  var SPOTFACE: (SDAI.LIST_UNIQUE<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSPOTFACE_DEFINITION>/*[1:
    nil]*/ )?  { get }
  var COUNTERDRILL_ANGLE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePOSITIVE_PLANE_ANGLE_MEASURE_WITH_UNIT?  { get }
  var COUNTERSINK_ANGLE_TOLERANCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eTOLERANCE_VALUE?  { get }
  var EXPLICIT_SHAPE: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eITEM_IDENTIFIED_REPRESENTATION_USAGE>/*[0:nil]*/ )?  { get }
  var SOURCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEXTERNAL_SOURCE?  { get }
  var SPOTFACE_RADIUS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePOSITIVE_LENGTH_MEASURE_WITH_UNIT?  { get }
  var SPOTFACE_RADIUS_TOLERANCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eTOLERANCE_VALUE?  { get }
  var NAME: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { get }
  var DEPTH: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePOSITIVE_LENGTH_MEASURE_WITH_UNIT?  { get }
  var COUNTERSINK_DIAMETER_TOLERANCE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sTOLERANCE_VALUE_OR_LIMITS_AND_FITS?  { get }
}

public protocol AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sMACHINING_FEATURE_DEFINITION__subtype: 
  AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sMACHINING_FEATURE_DEFINITION__type, SDAIDefinedType
where Supertype: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sMACHINING_FEATURE_DEFINITION__type
{}

public extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sMACHINING_FEATURE_DEFINITION__subtype {
  //MARK: CONSTRUCTORS
  init?(possiblyFrom complex: SDAI.ComplexEntity?) {
    self.init(fundamental: FundamentalType(possiblyFrom: complex))
  }

  init?<T: SDAIUnderlyingType>(possiblyFrom underlyingType: T?) {
    self.init(fundamental: FundamentalType(possiblyFrom: underlyingType))
  }

  init?<G: SDAIGenericType>(fromGeneric generic: G?) {
    self.init(fundamental: FundamentalType.convert(fromGeneric: generic))
  }

  //MARK: GROUP REFERENCES
  var super_eREPLICATE_FEATURE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPLICATE_FEATURE? { rep.super_eREPLICATE_FEATURE }
  var super_eOUTER_ROUND: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eOUTER_ROUND? { rep.super_eOUTER_ROUND }
  var super_eBOSS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eBOSS? { rep.super_eBOSS }
  var super_eSPHERICAL_CAP: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSPHERICAL_CAP? { rep.super_eSPHERICAL_CAP }
  var super_eCOMPOUND_FEATURE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOMPOUND_FEATURE? { rep.super_eCOMPOUND_FEATURE }
  var super_eEXTERNALLY_DEFINED_ITEM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEXTERNALLY_DEFINED_ITEM? { rep.super_eEXTERNALLY_DEFINED_ITEM }
  var super_eROUNDED_END: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eROUNDED_END? { rep.super_eROUNDED_END }
  var super_eOUTSIDE_PROFILE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eOUTSIDE_PROFILE? { rep.super_eOUTSIDE_PROFILE }
  var super_eFLAT_FACE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFLAT_FACE? { rep.super_eFLAT_FACE }
  var super_eSLOT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSLOT? { rep.super_eSLOT }
  var super_eFEATURE_DEFINITION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFEATURE_DEFINITION? { rep.super_eFEATURE_DEFINITION }
  var super_eRIB_TOP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eRIB_TOP? { rep.super_eRIB_TOP }
  var super_eGEAR: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGEAR? { rep.super_eGEAR }
  var super_eSTEP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSTEP? { rep.super_eSTEP }
  var super_eTURNED_KNURL: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eTURNED_KNURL? { rep.super_eTURNED_KNURL }
  var super_eREVOLVED_PROFILE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREVOLVED_PROFILE? { rep.super_eREVOLVED_PROFILE }
  var super_eMARKING: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMARKING? { rep.super_eMARKING }
  var super_ePOCKET: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePOCKET? { rep.super_ePOCKET }
  var super_eTHREAD: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eTHREAD? { rep.super_eTHREAD }
  var super_ePROTRUSION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePROTRUSION? { rep.super_ePROTRUSION }
  var super_eROUND_HOLE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eROUND_HOLE? { rep.super_eROUND_HOLE }
  var super_eREMOVAL_VOLUME: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREMOVAL_VOLUME? { rep.super_eREMOVAL_VOLUME }
  var super_eEXTERNALLY_DEFINED_FEATURE_DEFINITION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEXTERNALLY_DEFINED_FEATURE_DEFINITION? { rep.super_eEXTERNALLY_DEFINED_FEATURE_DEFINITION }
  var super_eCHARACTERIZED_OBJECT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCHARACTERIZED_OBJECT? { rep.super_eCHARACTERIZED_OBJECT }

  //MARK: ENTITY ATTRIBUTE REFERENCES
  var DIAMETER_TOLERANCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sTOLERANCE_VALUE_OR_LIMITS_AND_FITS?  { rep.DIAMETER_TOLERANCE }
  var DEPTH_TOLERANCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eTOLERANCE_VALUE?  { rep.DEPTH_TOLERANCE }
  var ITEM_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sSOURCE_ITEM?  { rep.ITEM_ID }
  var DESCRIPTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT?  { rep.DESCRIPTION }
  var COUNTERDRILL_ANGLE_TOLERANCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eTOLERANCE_VALUE?  { rep.COUNTERDRILL_ANGLE_TOLERANCE }
  var COUNTERSINK_DIAMETER: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePOSITIVE_LENGTH_MEASURE_WITH_UNIT?  { rep.COUNTERSINK_DIAMETER }
  var COUNTERSINK_ANGLE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePOSITIVE_PLANE_ANGLE_MEASURE_WITH_UNIT?  { rep.COUNTERSINK_ANGLE }
  var PLACEMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_REPRESENTATION?  { rep.PLACEMENT }
  var DIAMETER: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePOSITIVE_LENGTH_MEASURE_WITH_UNIT?  { rep.DIAMETER }
  var SPOTFACE: (SDAI.LIST_UNIQUE<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSPOTFACE_DEFINITION>/*[1:
    nil]*/ )?  { rep.SPOTFACE }
  var COUNTERDRILL_ANGLE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePOSITIVE_PLANE_ANGLE_MEASURE_WITH_UNIT?  { rep.COUNTERDRILL_ANGLE }
  var COUNTERSINK_ANGLE_TOLERANCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eTOLERANCE_VALUE?  { rep.COUNTERSINK_ANGLE_TOLERANCE }
  var EXPLICIT_SHAPE: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eITEM_IDENTIFIED_REPRESENTATION_USAGE>/*[0:nil]*/ )?  { rep.EXPLICIT_SHAPE }
  var SOURCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEXTERNAL_SOURCE?  { rep.SOURCE }
  var SPOTFACE_RADIUS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePOSITIVE_LENGTH_MEASURE_WITH_UNIT?  { rep.SPOTFACE_RADIUS }
  var SPOTFACE_RADIUS_TOLERANCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eTOLERANCE_VALUE?  { rep.SPOTFACE_RADIUS_TOLERANCE }
  var NAME: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { rep.NAME }
  var DEPTH: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePOSITIVE_LENGTH_MEASURE_WITH_UNIT?  { rep.DEPTH }
  var COUNTERSINK_DIAMETER_TOLERANCE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sTOLERANCE_VALUE_OR_LIMITS_AND_FITS?  { rep.COUNTERSINK_DIAMETER_TOLERANCE }
}

