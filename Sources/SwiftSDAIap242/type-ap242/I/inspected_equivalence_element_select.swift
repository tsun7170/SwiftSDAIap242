/* file: inspected_equivalence_element_select.swift 	 generated: Tue Nov 16 05:35:44 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -TYPE DEFINITION in EXPRESS
/*
  TYPE inspected_equivalence_element_select = SELECT
    ( connected_edge_set (*ENTITY*),
     connected_face_set (*ENTITY*),
     externally_defined_representation_item (*ENTITY*),
     manifold_solid_brep (*ENTITY*),
     point_cloud_dataset (*ENTITY*),
     product_definition_or_reference (*SELECT*),
     shape_representation (*ENTITY*),
     shell_based_surface_model (*ENTITY*),
     shell_based_wireframe_model (*ENTITY*),
     vertex_point (*ENTITY*) );
  END_TYPE; -- inspected_equivalence_element_select (line:3810 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES FOR SELECT
/*
  connected_edge_set (*ENTITY*):
  ATTR:  permanent_aggregate_id: identifier
  ATTR:  ces_edges: SET [1 : ?] OF edge
  ATTR:  permanent_id: identifier
  ATTR:  name: label *** Multiple Select Case Sources ***

  connected_face_set (*ENTITY*):
  ATTR:  cfs_faces: SET [1 : ?] OF face
  ATTR:  orientation: (AMBIGUOUS (CASE LEVEL))
  ATTR:  permanent_aggregate_id: identifier
  ATTR:  parent_face_set: connected_face_set
  ATTR:  open_shell_element: open_shell
  ATTR:  closed_shell_element: closed_shell
  ATTR:  permanent_id: identifier
  ATTR:  name: label *** Multiple Select Case Sources ***

  externally_defined_representation_item (*ENTITY*):
  ATTR:  item_id: source_item
  ATTR:  source: external_source *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  manifold_solid_brep (*ENTITY*):
  ATTR:  outer: closed_shell
  ATTR:  name: label *** Multiple Select Case Sources ***
  ATTR:  voids: SET [1 : ?] OF oriented_closed_shell
  ATTR:  dim: dimension_count

  point_cloud_dataset (*ENTITY*):
  ATTR:  normals: LIST [1 : ?] OF LIST [3 : 3] OF REAL
  ATTR:  point_coordinates: LIST [1 : ?] OF LIST [3 : 3] OF REAL
  ATTR:  intensities: LIST [1 : ?] OF REAL
  ATTR:  colour_indices: LIST [1 : ?] OF LIST [3 : 3] OF INTEGER
  ATTR:  name: label *** Multiple Select Case Sources ***
  ATTR:  dim: dimension_count

  product_definition_or_reference (*SELECT*):
  ATTR:  product_definition_id: identifier
  ATTR:  product_occurrence_id: identifier
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  descendant_occurrences: SET [0 : ?] OF product_definition_specified_occurrence
  ATTR:  product_definition_formation_id: identifier
  ATTR:  quantity: measure_with_unit
  ATTR:  defined_version: collection_version
  ATTR:  id_owning_organization_name: label
  ATTR:  occurrence_usage: product_definition_occurrence_or_reference
  ATTR:  documentation_ids: SET [1 : ?] OF document
  ATTR:  product_id: identifier
  ATTR:  child_occurrences: SET [0 : ?] OF product_definition_specified_occurrence
  ATTR:  relating_product_definition: linear_array_placement_group_component
  ATTR:  source: external_source
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  frame_of_reference: product_definition_context
  ATTR:  definition: (AMBIGUOUS (CASE LEVEL))
  ATTR:  related_product_definition: linear_array_placement_group_component
  ATTR:  name: label *** Multiple Select Case Sources ***
  ATTR:  assembly_usages: SET [0 : ?] OF assembly_component_usage
  ATTR:  formation: product_definition_formation

  shape_representation (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  items: SET [1 : ?] OF representation_item
  ATTR:  tessellation_accuracy_parameters: SET [1 : ?] OF tessellation_accuracy_parameter_item
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  context_of_items: representation_context
  ATTR:  neutral_sketch_semantics: curves_or_area
  ATTR:  name: label *** Multiple Select Case Sources ***

  shell_based_surface_model (*ENTITY*):
  ATTR:  sbsm_boundary: SET [1 : ?] OF shell
  ATTR:  name: label *** Multiple Select Case Sources ***
  ATTR:  dim: dimension_count

  shell_based_wireframe_model (*ENTITY*):
  ATTR:  sbwm_boundary: SET [1 : ?] OF shell
  ATTR:  name: label *** Multiple Select Case Sources ***
  ATTR:  dim: dimension_count

  vertex_point (*ENTITY*):
  ATTR:  permanent_aggregate_id: identifier
  ATTR:  vertex_geometry: point
  ATTR:  permanent_id: identifier
  ATTR:  name: label *** Multiple Select Case Sources ***
  ATTR:  dim: dimension_count

*/

/** SELECT type
- EXPRESS:
```express
  TYPE inspected_equivalence_element_select = SELECT
    ( connected_edge_set (*ENTITY*),
     connected_face_set (*ENTITY*),
     externally_defined_representation_item (*ENTITY*),
     manifold_solid_brep (*ENTITY*),
     point_cloud_dataset (*ENTITY*),
     product_definition_or_reference (*SELECT*),
     shape_representation (*ENTITY*),
     shell_based_surface_model (*ENTITY*),
     shell_based_wireframe_model (*ENTITY*),
     vertex_point (*ENTITY*) );
  END_TYPE; -- inspected_equivalence_element_select (line:3810 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public enum sINSPECTED_EQUIVALENCE_ELEMENT_SELECT : SDAIValue, AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sINSPECTED_EQUIVALENCE_ELEMENT_SELECT__type {

    /// SELECT case ``eCONNECTED_EDGE_SET`` (ENTITY) in ``sINSPECTED_EQUIVALENCE_ELEMENT_SELECT``
    case _CONNECTED_EDGE_SET(eCONNECTED_EDGE_SET)	// (ENTITY)

    /// SELECT case ``eCONNECTED_FACE_SET`` (ENTITY) in ``sINSPECTED_EQUIVALENCE_ELEMENT_SELECT``
    case _CONNECTED_FACE_SET(eCONNECTED_FACE_SET)	// (ENTITY)

    /// SELECT case ``eEXTERNALLY_DEFINED_REPRESENTATION_ITEM`` (ENTITY) in ``sINSPECTED_EQUIVALENCE_ELEMENT_SELECT``
    case _EXTERNALLY_DEFINED_REPRESENTATION_ITEM(eEXTERNALLY_DEFINED_REPRESENTATION_ITEM)	// (ENTITY)

    /// SELECT case ``eMANIFOLD_SOLID_BREP`` (ENTITY) in ``sINSPECTED_EQUIVALENCE_ELEMENT_SELECT``
    case _MANIFOLD_SOLID_BREP(eMANIFOLD_SOLID_BREP)	// (ENTITY)

    /// SELECT case ``ePOINT_CLOUD_DATASET`` (ENTITY) in ``sINSPECTED_EQUIVALENCE_ELEMENT_SELECT``
    case _POINT_CLOUD_DATASET(ePOINT_CLOUD_DATASET)	// (ENTITY)

    /// SELECT case ``sPRODUCT_DEFINITION_OR_REFERENCE`` (SELECT) in ``sINSPECTED_EQUIVALENCE_ELEMENT_SELECT``
    case _PRODUCT_DEFINITION_OR_REFERENCE(sPRODUCT_DEFINITION_OR_REFERENCE)	// (SELECT)

    /// SELECT case ``eSHAPE_REPRESENTATION`` (ENTITY) in ``sINSPECTED_EQUIVALENCE_ELEMENT_SELECT``
    case _SHAPE_REPRESENTATION(eSHAPE_REPRESENTATION)	// (ENTITY)

    /// SELECT case ``eSHELL_BASED_SURFACE_MODEL`` (ENTITY) in ``sINSPECTED_EQUIVALENCE_ELEMENT_SELECT``
    case _SHELL_BASED_SURFACE_MODEL(eSHELL_BASED_SURFACE_MODEL)	// (ENTITY)

    /// SELECT case ``eSHELL_BASED_WIREFRAME_MODEL`` (ENTITY) in ``sINSPECTED_EQUIVALENCE_ELEMENT_SELECT``
    case _SHELL_BASED_WIREFRAME_MODEL(eSHELL_BASED_WIREFRAME_MODEL)	// (ENTITY)

    /// SELECT case ``eVERTEX_POINT`` (ENTITY) in ``sINSPECTED_EQUIVALENCE_ELEMENT_SELECT``
    case _VERTEX_POINT(eVERTEX_POINT)	// (ENTITY)

    //MARK: - CONSTRUCTORS
    public init(fundamental: FundamentalType) { self = fundamental }

    public init?<T: SDAIUnderlyingType>(possiblyFrom underlyingType: T?){
      guard let underlyingType = underlyingType else { return nil }

      if let base = underlyingType as? sPRODUCT_DEFINITION_OR_REFERENCE {
        self = ._PRODUCT_DEFINITION_OR_REFERENCE(base)
      }
      else if let base = sPRODUCT_DEFINITION_OR_REFERENCE(possiblyFrom: underlyingType) {
        self = ._PRODUCT_DEFINITION_OR_REFERENCE(base)
      }
      else { return nil }
    }

    public init?(possiblyFrom complex: SDAI.ComplexEntity?) {
      guard let complex = complex else { return nil }

      if let base = complex.entityReference(eCONNECTED_EDGE_SET.self) {self = ._CONNECTED_EDGE_SET(base) }
      else if let base = complex.entityReference(eCONNECTED_FACE_SET.self) {self = ._CONNECTED_FACE_SET(base) }
      else if let base = complex.entityReference(eEXTERNALLY_DEFINED_REPRESENTATION_ITEM.self) {self = ._EXTERNALLY_DEFINED_REPRESENTATION_ITEM(base) }
      else if let base = complex.entityReference(eMANIFOLD_SOLID_BREP.self) {self = ._MANIFOLD_SOLID_BREP(base) }
      else if let base = complex.entityReference(ePOINT_CLOUD_DATASET.self) {self = ._POINT_CLOUD_DATASET(base) }
      else if let base = sPRODUCT_DEFINITION_OR_REFERENCE(possiblyFrom: complex) {
        self = ._PRODUCT_DEFINITION_OR_REFERENCE(base)
      }
      else if let base = complex.entityReference(eSHAPE_REPRESENTATION.self) {self = ._SHAPE_REPRESENTATION(base) }
      else if let base = complex.entityReference(eSHELL_BASED_SURFACE_MODEL.self) {self = ._SHELL_BASED_SURFACE_MODEL(base) }
      else if let base = complex.entityReference(eSHELL_BASED_WIREFRAME_MODEL.self) {self = ._SHELL_BASED_WIREFRAME_MODEL(base) }
      else if let base = complex.entityReference(eVERTEX_POINT.self) {self = ._VERTEX_POINT(base) }
      else { return nil }
    }

    public init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let select = generic else { return nil }

      if let fundamental = select as? Self {
        self.init(fundamental: fundamental)
      }
      else if let base = eCONNECTED_EDGE_SET.convert(fromGeneric: select) {
        self = ._CONNECTED_EDGE_SET(base)
      }
      else if let base = eCONNECTED_FACE_SET.convert(fromGeneric: select) {
        self = ._CONNECTED_FACE_SET(base)
      }
      else if let base = eEXTERNALLY_DEFINED_REPRESENTATION_ITEM.convert(fromGeneric: select) {
        self = ._EXTERNALLY_DEFINED_REPRESENTATION_ITEM(base)
      }
      else if let base = eMANIFOLD_SOLID_BREP.convert(fromGeneric: select) {
        self = ._MANIFOLD_SOLID_BREP(base)
      }
      else if let base = ePOINT_CLOUD_DATASET.convert(fromGeneric: select) {
        self = ._POINT_CLOUD_DATASET(base)
      }
      else if let base = sPRODUCT_DEFINITION_OR_REFERENCE.convert(fromGeneric: select) {
        self = ._PRODUCT_DEFINITION_OR_REFERENCE(base)
      }
      else if let base = eSHAPE_REPRESENTATION.convert(fromGeneric: select) {
        self = ._SHAPE_REPRESENTATION(base)
      }
      else if let base = eSHELL_BASED_SURFACE_MODEL.convert(fromGeneric: select) {
        self = ._SHELL_BASED_SURFACE_MODEL(base)
      }
      else if let base = eSHELL_BASED_WIREFRAME_MODEL.convert(fromGeneric: select) {
        self = ._SHELL_BASED_WIREFRAME_MODEL(base)
      }
      else if let base = eVERTEX_POINT.convert(fromGeneric: select) {
        self = ._VERTEX_POINT(base)
      }
      else { return nil }
    }

    // InitializableByP21Parameter
    public static var bareTypeName: String = "INSPECTED_EQUIVALENCE_ELEMENT_SELECT"

    public init?(p21typedParam: P21Decode.ExchangeStructure.TypedParameter, from exchangeStructure: P21Decode.ExchangeStructure) {
      guard let keyword = p21typedParam.keyword.asStandardKeyword else { exchangeStructure.error = "unexpected p21parameter(\(p21typedParam)) while resolving \(Self.bareTypeName) select value"; return nil }

      switch(keyword) {
      case sPRODUCT_DEFINITION_OR_REFERENCE.bareTypeName:
        guard let base = sPRODUCT_DEFINITION_OR_REFERENCE(p21typedParam: p21typedParam, from: exchangeStructure) else { exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) select value"); return nil }
        self = ._PRODUCT_DEFINITION_OR_REFERENCE(base)

      default:
        exchangeStructure.error = "unexpected p21parameter(\(p21typedParam)) while resolving \(Self.bareTypeName) select value"
        return nil
      }
    }

    public init?(p21untypedParam: P21Decode.ExchangeStructure.UntypedParameter, from exchangeStructure: P21Decode.ExchangeStructure) {
      switch p21untypedParam {
      case .rhsOccurenceName(let rhsname):
        switch rhsname {
        case .constantEntityName(let name):
          guard let entity = exchangeStructure.resolve(constantEntityName: name) else {exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) instance"); return nil }
          self.init(possiblyFrom: entity.complexEntity)

        case .entityInstanceName(let name):
          guard let complex = exchangeStructure.resolve(entityInstanceName: name) else {exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) instance"); return nil }
          self.init(possiblyFrom: complex)

        default:
          exchangeStructure.error = "unexpected p21parameter(\(p21untypedParam)) while resolving \(Self.bareTypeName) select instance"
          return nil
        }

      default:
        exchangeStructure.error = "unexpected p21parameter(\(p21untypedParam)) while resolving \(Self.bareTypeName) select instance"
        return nil
      }
    }

    public init?(p21omittedParamfrom exchangeStructure: P21Decode.ExchangeStructure) {
      return nil
    }


    //MARK: - NON-ENTITY UNDERLYING TYPE REFERENCES
    public var super_sPRODUCT_DEFINITION_OR_REFERENCE: sPRODUCT_DEFINITION_OR_REFERENCE? {
      switch self {
      case ._PRODUCT_DEFINITION_OR_REFERENCE(let selectValue): return selectValue
      default: return nil
      }
    }

    //MARK: - ENTITY UNDERLYING TYPE REFERENCES
    public var super_eSCANNED_DATA_ITEM: eSCANNED_DATA_ITEM? {
      switch self {
      case ._POINT_CLOUD_DATASET(let entity): return entity.super_eSCANNED_DATA_ITEM
      default: return nil
      }
    }

    public var super_eREPRESENTATION: eREPRESENTATION? {
      switch self {
      case ._SHAPE_REPRESENTATION(let entity): return entity.super_eREPRESENTATION
      default: return nil
      }
    }

    public var super_eTOPOLOGICAL_REPRESENTATION_ITEM: eTOPOLOGICAL_REPRESENTATION_ITEM? {
      switch self {
      case ._CONNECTED_EDGE_SET(let entity): return entity.super_eTOPOLOGICAL_REPRESENTATION_ITEM
      case ._CONNECTED_FACE_SET(let entity): return entity.super_eTOPOLOGICAL_REPRESENTATION_ITEM
      case ._VERTEX_POINT(let entity): return entity.super_eTOPOLOGICAL_REPRESENTATION_ITEM
      default: return nil
      }
    }

    public var super_eMANIFOLD_SOLID_BREP: eMANIFOLD_SOLID_BREP? {
      switch self {
      case ._MANIFOLD_SOLID_BREP(let entity): return entity
      default: return nil
      }
    }

    public var super_eGENERIC_PRODUCT_DEFINITION_REFERENCE: eGENERIC_PRODUCT_DEFINITION_REFERENCE? {
      switch self {
      case ._PRODUCT_DEFINITION_OR_REFERENCE(let select): return select
        .super_eGENERIC_PRODUCT_DEFINITION_REFERENCE
      default: return nil
      }
    }

    public var super_eSHAPE_REPRESENTATION: eSHAPE_REPRESENTATION? {
      switch self {
      case ._SHAPE_REPRESENTATION(let entity): return entity
      default: return nil
      }
    }

    public var super_eEXTERNALLY_DEFINED_REPRESENTATION_ITEM: eEXTERNALLY_DEFINED_REPRESENTATION_ITEM? {
      switch self {
      case ._EXTERNALLY_DEFINED_REPRESENTATION_ITEM(let entity): return entity
      default: return nil
      }
    }

    public var super_ePRODUCT_DEFINITION_OCCURRENCE: ePRODUCT_DEFINITION_OCCURRENCE? {
      switch self {
      case ._PRODUCT_DEFINITION_OR_REFERENCE(let select): return select.super_ePRODUCT_DEFINITION_OCCURRENCE
      default: return nil
      }
    }

    public var super_eEXTERNALLY_DEFINED_ITEM: eEXTERNALLY_DEFINED_ITEM? {
      switch self {
      case ._EXTERNALLY_DEFINED_REPRESENTATION_ITEM(let entity): return entity.super_eEXTERNALLY_DEFINED_ITEM
      default: return nil
      }
    }

    public var super_eVERTEX: eVERTEX? {
      switch self {
      case ._VERTEX_POINT(let entity): return entity.super_eVERTEX
      default: return nil
      }
    }

    public var super_eSHELL_BASED_WIREFRAME_MODEL: eSHELL_BASED_WIREFRAME_MODEL? {
      switch self {
      case ._SHELL_BASED_WIREFRAME_MODEL(let entity): return entity
      default: return nil
      }
    }

    public var super_eCONNECTED_FACE_SET: eCONNECTED_FACE_SET? {
      switch self {
      case ._CONNECTED_FACE_SET(let entity): return entity
      default: return nil
      }
    }

    public var super_eSHELL_BASED_SURFACE_MODEL: eSHELL_BASED_SURFACE_MODEL? {
      switch self {
      case ._SHELL_BASED_SURFACE_MODEL(let entity): return entity
      default: return nil
      }
    }

    public var super_eSOLID_MODEL: eSOLID_MODEL? {
      switch self {
      case ._MANIFOLD_SOLID_BREP(let entity): return entity.super_eSOLID_MODEL
      default: return nil
      }
    }

    public var super_ePRODUCT_DEFINITION: ePRODUCT_DEFINITION? {
      switch self {
      case ._PRODUCT_DEFINITION_OR_REFERENCE(let select): return select.super_ePRODUCT_DEFINITION
      default: return nil
      }
    }

    public var super_eREPRESENTATION_ITEM: eREPRESENTATION_ITEM? {
      switch self {
      case ._CONNECTED_EDGE_SET(let entity): return entity.super_eREPRESENTATION_ITEM
      case ._CONNECTED_FACE_SET(let entity): return entity.super_eREPRESENTATION_ITEM
      case ._EXTERNALLY_DEFINED_REPRESENTATION_ITEM(let entity): return entity.super_eREPRESENTATION_ITEM
      case ._MANIFOLD_SOLID_BREP(let entity): return entity.super_eREPRESENTATION_ITEM
      case ._POINT_CLOUD_DATASET(let entity): return entity.super_eREPRESENTATION_ITEM
      case ._SHELL_BASED_SURFACE_MODEL(let entity): return entity.super_eREPRESENTATION_ITEM
      case ._SHELL_BASED_WIREFRAME_MODEL(let entity): return entity.super_eREPRESENTATION_ITEM
      case ._VERTEX_POINT(let entity): return entity.super_eREPRESENTATION_ITEM
      default: return nil
      }
    }

    public var super_eVERTEX_POINT: eVERTEX_POINT? {
      switch self {
      case ._VERTEX_POINT(let entity): return entity
      default: return nil
      }
    }

    public var super_eCONNECTED_EDGE_SET: eCONNECTED_EDGE_SET? {
      switch self {
      case ._CONNECTED_EDGE_SET(let entity): return entity
      default: return nil
      }
    }

    public var super_eGEOMETRIC_REPRESENTATION_ITEM: eGEOMETRIC_REPRESENTATION_ITEM? {
      switch self {
      case ._MANIFOLD_SOLID_BREP(let entity): return entity.super_eGEOMETRIC_REPRESENTATION_ITEM
      case ._POINT_CLOUD_DATASET(let entity): return entity.super_eGEOMETRIC_REPRESENTATION_ITEM
      case ._SHELL_BASED_SURFACE_MODEL(let entity): return entity.super_eGEOMETRIC_REPRESENTATION_ITEM
      case ._SHELL_BASED_WIREFRAME_MODEL(let entity): return entity.super_eGEOMETRIC_REPRESENTATION_ITEM
      case ._VERTEX_POINT(let entity): return entity.super_eGEOMETRIC_REPRESENTATION_ITEM
      default: return nil
      }
    }

    public var super_ePOINT_CLOUD_DATASET: ePOINT_CLOUD_DATASET? {
      switch self {
      case ._POINT_CLOUD_DATASET(let entity): return entity
      default: return nil
      }
    }


    //MARK: - ENTITY ATTRIBUTE REFERENCES
    /// attribute of SELECT type ``sINSPECTED_EQUIVALENCE_ELEMENT_SELECT``
    /// - origin: ENTITY( ``eCONNECTED_FACE_SET`` )
    public var CFS_FACES: (SDAI.SET<eFACE>/*[1:nil]*/ )?  {
      switch self {
      case ._CONNECTED_FACE_SET(let entity): return entity.CFS_FACES
      default: return nil
      }
    }

    /// attribute of SELECT type ``sINSPECTED_EQUIVALENCE_ELEMENT_SELECT``
    /// - origin: SELECT( ``sPRODUCT_DEFINITION_OR_REFERENCE`` )
    public var PRODUCT_DEFINITION_ID: tIDENTIFIER?  {
      switch self {
      case ._PRODUCT_DEFINITION_OR_REFERENCE(let select): return select.PRODUCT_DEFINITION_ID
      default: return nil
      }
    }

    /// attribute of SELECT type ``sINSPECTED_EQUIVALENCE_ELEMENT_SELECT``
    /// - origin: SELECT( ``sPRODUCT_DEFINITION_OR_REFERENCE`` )
    public var PRODUCT_OCCURRENCE_ID: tIDENTIFIER?  {
      switch self {
      case ._PRODUCT_DEFINITION_OR_REFERENCE(let select): return select.PRODUCT_OCCURRENCE_ID
      default: return nil
      }
    }

    /// attribute of SELECT type ``sINSPECTED_EQUIVALENCE_ELEMENT_SELECT``
    /// - origin: ENTITY( ``eEXTERNALLY_DEFINED_REPRESENTATION_ITEM`` )
    public var ITEM_ID: sSOURCE_ITEM?  {
      switch self {
      case ._EXTERNALLY_DEFINED_REPRESENTATION_ITEM(let entity): return entity.ITEM_ID
      default: return nil
      }
    }

    /// attribute of SELECT type ``sINSPECTED_EQUIVALENCE_ELEMENT_SELECT``
    /// - origin: SELECT( ``sPRODUCT_DEFINITION_OR_REFERENCE`` )
    /// - origin: ENTITY( ``eSHAPE_REPRESENTATION`` )
    public var DESCRIPTION: tTEXT?  {
      switch self {
      case ._PRODUCT_DEFINITION_OR_REFERENCE(let select): return select.DESCRIPTION
      case ._SHAPE_REPRESENTATION(let entity): return entity.DESCRIPTION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sINSPECTED_EQUIVALENCE_ELEMENT_SELECT``
    /// - origin: ENTITY( ``ePOINT_CLOUD_DATASET`` )
    public var NORMALS: (SDAI.LIST<SDAI.LIST<SDAI.REAL>/*[3:3]*/ >/*[1:nil]*/ )?  {
      switch self {
      case ._POINT_CLOUD_DATASET(let entity): return entity.NORMALS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sINSPECTED_EQUIVALENCE_ELEMENT_SELECT``
    /// - origin: SELECT( ``sPRODUCT_DEFINITION_OR_REFERENCE`` )
    public var DESCENDANT_OCCURRENCES: (SDAI.SET<ePRODUCT_DEFINITION_SPECIFIED_OCCURRENCE>/*[0:nil]*/ )?  {
      switch self {
      case ._PRODUCT_DEFINITION_OR_REFERENCE(let select): return select.DESCENDANT_OCCURRENCES
      default: return nil
      }
    }

    /// attribute of SELECT type ``sINSPECTED_EQUIVALENCE_ELEMENT_SELECT``
    /// - origin: SELECT( ``sPRODUCT_DEFINITION_OR_REFERENCE`` )
    public var PRODUCT_DEFINITION_FORMATION_ID: tIDENTIFIER?  {
      switch self {
      case ._PRODUCT_DEFINITION_OR_REFERENCE(let select): return select.PRODUCT_DEFINITION_FORMATION_ID
      default: return nil
      }
    }

    /// attribute of SELECT type ``sINSPECTED_EQUIVALENCE_ELEMENT_SELECT``
    /// - origin: SELECT( ``sPRODUCT_DEFINITION_OR_REFERENCE`` )
    public var QUANTITY: eMEASURE_WITH_UNIT?  {
      switch self {
      case ._PRODUCT_DEFINITION_OR_REFERENCE(let select): return select.QUANTITY
      default: return nil
      }
    }

    /// attribute of SELECT type ``sINSPECTED_EQUIVALENCE_ELEMENT_SELECT``
    /// - origin: SELECT( ``sPRODUCT_DEFINITION_OR_REFERENCE`` )
    public var DEFINED_VERSION: eCOLLECTION_VERSION?  {
      switch self {
      case ._PRODUCT_DEFINITION_OR_REFERENCE(let select): return select.DEFINED_VERSION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sINSPECTED_EQUIVALENCE_ELEMENT_SELECT``
    /// - origin: ENTITY( ``eSHELL_BASED_WIREFRAME_MODEL`` )
    public var SBWM_BOUNDARY: (SDAI.SET<sSHELL>/*[1:nil]*/ )?  {
      switch self {
      case ._SHELL_BASED_WIREFRAME_MODEL(let entity): return entity.SBWM_BOUNDARY
      default: return nil
      }
    }

    /// attribute of SELECT type ``sINSPECTED_EQUIVALENCE_ELEMENT_SELECT``
    /// - origin: ENTITY( ``eSHAPE_REPRESENTATION`` )
    public var ITEMS: (SDAI.SET<eREPRESENTATION_ITEM>/*[1:nil]*/ )?  {
      switch self {
      case ._SHAPE_REPRESENTATION(let entity): return entity.ITEMS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sINSPECTED_EQUIVALENCE_ELEMENT_SELECT``
    /// - origin: ENTITY( ``eCONNECTED_EDGE_SET`` )
    /// - origin: ENTITY( ``eCONNECTED_FACE_SET`` )
    /// - origin: ENTITY( ``eVERTEX_POINT`` )
    public var PERMANENT_AGGREGATE_ID: tIDENTIFIER?  {
      switch self {
      case ._CONNECTED_EDGE_SET(let entity): return entity.PERMANENT_AGGREGATE_ID
      case ._CONNECTED_FACE_SET(let entity): return entity.PERMANENT_AGGREGATE_ID
      case ._VERTEX_POINT(let entity): return entity.PERMANENT_AGGREGATE_ID
      default: return nil
      }
    }

    /// attribute of SELECT type ``sINSPECTED_EQUIVALENCE_ELEMENT_SELECT``
    /// - origin: SELECT( ``sPRODUCT_DEFINITION_OR_REFERENCE`` )
    public var ID_OWNING_ORGANIZATION_NAME: tLABEL?  {
      switch self {
      case ._PRODUCT_DEFINITION_OR_REFERENCE(let select): return select.ID_OWNING_ORGANIZATION_NAME
      default: return nil
      }
    }

    /// attribute of SELECT type ``sINSPECTED_EQUIVALENCE_ELEMENT_SELECT``
    /// - origin: ENTITY( ``ePOINT_CLOUD_DATASET`` )
    public var POINT_COORDINATES: (SDAI.LIST<SDAI.LIST<SDAI.REAL>/*[3:3]*/ >/*[1:nil]*/ )?  {
      switch self {
      case ._POINT_CLOUD_DATASET(let entity): return entity.POINT_COORDINATES
      default: return nil
      }
    }

    /// attribute of SELECT type ``sINSPECTED_EQUIVALENCE_ELEMENT_SELECT``
    /// - origin: ENTITY( ``ePOINT_CLOUD_DATASET`` )
    public var INTENSITIES: (SDAI.LIST<SDAI.REAL>/*[1:nil]*/ )?  {
      switch self {
      case ._POINT_CLOUD_DATASET(let entity): return entity.INTENSITIES
      default: return nil
      }
    }

    /// attribute of SELECT type ``sINSPECTED_EQUIVALENCE_ELEMENT_SELECT``
    /// - origin: SELECT( ``sPRODUCT_DEFINITION_OR_REFERENCE`` )
    public var OCCURRENCE_USAGE: sPRODUCT_DEFINITION_OCCURRENCE_OR_REFERENCE?  {
      switch self {
      case ._PRODUCT_DEFINITION_OR_REFERENCE(let select): return select.OCCURRENCE_USAGE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sINSPECTED_EQUIVALENCE_ELEMENT_SELECT``
    /// - origin: SELECT( ``sPRODUCT_DEFINITION_OR_REFERENCE`` )
    public var DOCUMENTATION_IDS: (SDAI.SET<eDOCUMENT>/*[1:nil]*/ )?  {
      switch self {
      case ._PRODUCT_DEFINITION_OR_REFERENCE(let select): return select.DOCUMENTATION_IDS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sINSPECTED_EQUIVALENCE_ELEMENT_SELECT``
    /// - origin: ENTITY( ``ePOINT_CLOUD_DATASET`` )
    public var COLOUR_INDICES: (SDAI.LIST<SDAI.LIST<SDAI.INTEGER>/*[3:3]*/ >/*[1:nil]*/ )?  {
      switch self {
      case ._POINT_CLOUD_DATASET(let entity): return entity.COLOUR_INDICES
      default: return nil
      }
    }

    /// attribute of SELECT type ``sINSPECTED_EQUIVALENCE_ELEMENT_SELECT``
    /// - origin: ENTITY( ``eCONNECTED_FACE_SET`` )
    public var PARENT_FACE_SET: eCONNECTED_FACE_SET?  {
      switch self {
      case ._CONNECTED_FACE_SET(let entity): return entity.PARENT_FACE_SET
      default: return nil
      }
    }

    /// attribute of SELECT type ``sINSPECTED_EQUIVALENCE_ELEMENT_SELECT``
    /// - origin: ENTITY( ``eCONNECTED_FACE_SET`` )
    public var OPEN_SHELL_ELEMENT: eOPEN_SHELL?  {
      switch self {
      case ._CONNECTED_FACE_SET(let entity): return entity.OPEN_SHELL_ELEMENT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sINSPECTED_EQUIVALENCE_ELEMENT_SELECT``
    /// - origin: ENTITY( ``eSHAPE_REPRESENTATION`` )
    public var TESSELLATION_ACCURACY_PARAMETERS: (SDAI.SET<sTESSELLATION_ACCURACY_PARAMETER_ITEM>/*[1:nil]*/ )?  {
      switch self {
      case ._SHAPE_REPRESENTATION(let entity): return entity.TESSELLATION_ACCURACY_PARAMETERS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sINSPECTED_EQUIVALENCE_ELEMENT_SELECT``
    /// - origin: ENTITY( ``eCONNECTED_FACE_SET`` )
    public var CLOSED_SHELL_ELEMENT: eCLOSED_SHELL?  {
      switch self {
      case ._CONNECTED_FACE_SET(let entity): return entity.CLOSED_SHELL_ELEMENT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sINSPECTED_EQUIVALENCE_ELEMENT_SELECT``
    /// - origin: ENTITY( ``eVERTEX_POINT`` )
    public var VERTEX_GEOMETRY: ePOINT?  {
      switch self {
      case ._VERTEX_POINT(let entity): return entity.VERTEX_GEOMETRY
      default: return nil
      }
    }

    /// attribute of SELECT type ``sINSPECTED_EQUIVALENCE_ELEMENT_SELECT``
    /// - origin: SELECT( ``sPRODUCT_DEFINITION_OR_REFERENCE`` )
    public var PRODUCT_ID: tIDENTIFIER?  {
      switch self {
      case ._PRODUCT_DEFINITION_OR_REFERENCE(let select): return select.PRODUCT_ID
      default: return nil
      }
    }

    /// attribute of SELECT type ``sINSPECTED_EQUIVALENCE_ELEMENT_SELECT``
    /// - origin: SELECT( ``sPRODUCT_DEFINITION_OR_REFERENCE`` )
    public var CHILD_OCCURRENCES: (SDAI.SET<ePRODUCT_DEFINITION_SPECIFIED_OCCURRENCE>/*[0:nil]*/ )?  {
      switch self {
      case ._PRODUCT_DEFINITION_OR_REFERENCE(let select): return select.CHILD_OCCURRENCES
      default: return nil
      }
    }

    /// attribute of SELECT type ``sINSPECTED_EQUIVALENCE_ELEMENT_SELECT``
    /// - origin: SELECT( ``sPRODUCT_DEFINITION_OR_REFERENCE`` )
    public var RELATING_PRODUCT_DEFINITION: eLINEAR_ARRAY_PLACEMENT_GROUP_COMPONENT?  {
      switch self {
      case ._PRODUCT_DEFINITION_OR_REFERENCE(let select): return select.RELATING_PRODUCT_DEFINITION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sINSPECTED_EQUIVALENCE_ELEMENT_SELECT``
    /// - origin: ENTITY( ``eEXTERNALLY_DEFINED_REPRESENTATION_ITEM`` )
    /// - origin: SELECT( ``sPRODUCT_DEFINITION_OR_REFERENCE`` )
    public var SOURCE: eEXTERNAL_SOURCE?  {
      switch self {
      case ._EXTERNALLY_DEFINED_REPRESENTATION_ITEM(let entity): return entity.SOURCE
      case ._PRODUCT_DEFINITION_OR_REFERENCE(let select): return select.SOURCE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sINSPECTED_EQUIVALENCE_ELEMENT_SELECT``
    /// - origin: SELECT( ``sPRODUCT_DEFINITION_OR_REFERENCE`` )
    /// - origin: ENTITY( ``eSHAPE_REPRESENTATION`` )
    public var ID: tIDENTIFIER?  {
      switch self {
      case ._PRODUCT_DEFINITION_OR_REFERENCE(let select): return select.ID
      case ._SHAPE_REPRESENTATION(let entity): return entity.ID
      default: return nil
      }
    }

    /// attribute of SELECT type ``sINSPECTED_EQUIVALENCE_ELEMENT_SELECT``
    /// - origin: ENTITY( ``eSHAPE_REPRESENTATION`` )
    public var CONTEXT_OF_ITEMS: eREPRESENTATION_CONTEXT?  {
      switch self {
      case ._SHAPE_REPRESENTATION(let entity): return entity.CONTEXT_OF_ITEMS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sINSPECTED_EQUIVALENCE_ELEMENT_SELECT``
    /// - origin: ENTITY( ``eSHELL_BASED_SURFACE_MODEL`` )
    public var SBSM_BOUNDARY: (SDAI.SET<sSHELL>/*[1:nil]*/ )?  {
      switch self {
      case ._SHELL_BASED_SURFACE_MODEL(let entity): return entity.SBSM_BOUNDARY
      default: return nil
      }
    }

    /// attribute of SELECT type ``sINSPECTED_EQUIVALENCE_ELEMENT_SELECT``
    /// - origin: ENTITY( ``eMANIFOLD_SOLID_BREP`` )
    public var OUTER: eCLOSED_SHELL?  {
      switch self {
      case ._MANIFOLD_SOLID_BREP(let entity): return entity.OUTER
      default: return nil
      }
    }

    /// attribute of SELECT type ``sINSPECTED_EQUIVALENCE_ELEMENT_SELECT``
    /// - origin: ENTITY( ``eCONNECTED_EDGE_SET`` )
    public var CES_EDGES: (SDAI.SET<eEDGE>/*[1:nil]*/ )?  {
      switch self {
      case ._CONNECTED_EDGE_SET(let entity): return entity.CES_EDGES
      default: return nil
      }
    }

    /// attribute of SELECT type ``sINSPECTED_EQUIVALENCE_ELEMENT_SELECT``
    /// - origin: ENTITY( ``eSHAPE_REPRESENTATION`` )
    public var NEUTRAL_SKETCH_SEMANTICS: nCURVES_OR_AREA?  {
      switch self {
      case ._SHAPE_REPRESENTATION(let entity): return entity.NEUTRAL_SKETCH_SEMANTICS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sINSPECTED_EQUIVALENCE_ELEMENT_SELECT``
    /// - origin: ENTITY( ``eCONNECTED_EDGE_SET`` )
    /// - origin: ENTITY( ``eCONNECTED_FACE_SET`` )
    /// - origin: ENTITY( ``eVERTEX_POINT`` )
    public var PERMANENT_ID: tIDENTIFIER?  {
      switch self {
      case ._CONNECTED_EDGE_SET(let entity): return entity.PERMANENT_ID
      case ._CONNECTED_FACE_SET(let entity): return entity.PERMANENT_ID
      case ._VERTEX_POINT(let entity): return entity.PERMANENT_ID
      default: return nil
      }
    }

    /// attribute of SELECT type ``sINSPECTED_EQUIVALENCE_ELEMENT_SELECT``
    /// - origin: SELECT( ``sPRODUCT_DEFINITION_OR_REFERENCE`` )
    public var FRAME_OF_REFERENCE: ePRODUCT_DEFINITION_CONTEXT?  {
      switch self {
      case ._PRODUCT_DEFINITION_OR_REFERENCE(let select): return select.FRAME_OF_REFERENCE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sINSPECTED_EQUIVALENCE_ELEMENT_SELECT``
    /// - origin: SELECT( ``sPRODUCT_DEFINITION_OR_REFERENCE`` )
    public var RELATED_PRODUCT_DEFINITION: eLINEAR_ARRAY_PLACEMENT_GROUP_COMPONENT?  {
      switch self {
      case ._PRODUCT_DEFINITION_OR_REFERENCE(let select): return select.RELATED_PRODUCT_DEFINITION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sINSPECTED_EQUIVALENCE_ELEMENT_SELECT``
    /// - origin: ENTITY( ``eCONNECTED_EDGE_SET`` )
    /// - origin: ENTITY( ``eCONNECTED_FACE_SET`` )
    /// - origin: ENTITY( ``eEXTERNALLY_DEFINED_REPRESENTATION_ITEM`` )
    /// - origin: ENTITY( ``eMANIFOLD_SOLID_BREP`` )
    /// - origin: ENTITY( ``ePOINT_CLOUD_DATASET`` )
    /// - origin: SELECT( ``sPRODUCT_DEFINITION_OR_REFERENCE`` )
    /// - origin: ENTITY( ``eSHAPE_REPRESENTATION`` )
    /// - origin: ENTITY( ``eSHELL_BASED_SURFACE_MODEL`` )
    /// - origin: ENTITY( ``eSHELL_BASED_WIREFRAME_MODEL`` )
    /// - origin: ENTITY( ``eVERTEX_POINT`` )
    public var NAME: tLABEL?  {
      switch self {
      case ._CONNECTED_EDGE_SET(let entity): return entity.NAME
      case ._CONNECTED_FACE_SET(let entity): return entity.NAME
      case ._EXTERNALLY_DEFINED_REPRESENTATION_ITEM(let entity): return entity.NAME
      case ._MANIFOLD_SOLID_BREP(let entity): return entity.NAME
      case ._POINT_CLOUD_DATASET(let entity): return entity.NAME
      case ._PRODUCT_DEFINITION_OR_REFERENCE(let select): return select.NAME
      case ._SHAPE_REPRESENTATION(let entity): return entity.NAME
      case ._SHELL_BASED_SURFACE_MODEL(let entity): return entity.NAME
      case ._SHELL_BASED_WIREFRAME_MODEL(let entity): return entity.NAME
      case ._VERTEX_POINT(let entity): return entity.NAME
      }
    }

    /// attribute of SELECT type ``sINSPECTED_EQUIVALENCE_ELEMENT_SELECT``
    /// - origin: SELECT( ``sPRODUCT_DEFINITION_OR_REFERENCE`` )
    public var ASSEMBLY_USAGES: (SDAI.SET<eASSEMBLY_COMPONENT_USAGE>/*[0:nil]*/ )?  {
      switch self {
      case ._PRODUCT_DEFINITION_OR_REFERENCE(let select): return select.ASSEMBLY_USAGES
      default: return nil
      }
    }

    /// attribute of SELECT type ``sINSPECTED_EQUIVALENCE_ELEMENT_SELECT``
    /// - origin: ENTITY( ``eMANIFOLD_SOLID_BREP`` )
    public var VOIDS: (SDAI.SET<eORIENTED_CLOSED_SHELL>/*[1:nil]*/ )?  {
      switch self {
      case ._MANIFOLD_SOLID_BREP(let entity): return entity.VOIDS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sINSPECTED_EQUIVALENCE_ELEMENT_SELECT``
    /// - origin: ENTITY( ``eMANIFOLD_SOLID_BREP`` )
    /// - origin: ENTITY( ``ePOINT_CLOUD_DATASET`` )
    /// - origin: ENTITY( ``eSHELL_BASED_SURFACE_MODEL`` )
    /// - origin: ENTITY( ``eSHELL_BASED_WIREFRAME_MODEL`` )
    /// - origin: ENTITY( ``eVERTEX_POINT`` )
    public var DIM: tDIMENSION_COUNT?  {
      switch self {
      case ._MANIFOLD_SOLID_BREP(let entity): return entity.DIM
      case ._POINT_CLOUD_DATASET(let entity): return entity.DIM
      case ._SHELL_BASED_SURFACE_MODEL(let entity): return entity.DIM
      case ._SHELL_BASED_WIREFRAME_MODEL(let entity): return entity.DIM
      case ._VERTEX_POINT(let entity): return entity.DIM
      default: return nil
      }
    }

    /// attribute of SELECT type ``sINSPECTED_EQUIVALENCE_ELEMENT_SELECT``
    /// - origin: SELECT( ``sPRODUCT_DEFINITION_OR_REFERENCE`` )
    public var FORMATION: ePRODUCT_DEFINITION_FORMATION?  {
      switch self {
      case ._PRODUCT_DEFINITION_OR_REFERENCE(let select): return select.FORMATION
      default: return nil
      }
    }


    //MARK: - SDAIValue
    public func isValueEqual<T: SDAIValue>(to rhs: T) -> Bool {
      switch self {
      case ._CONNECTED_EDGE_SET(let selection): return selection.value.isValueEqual(to: rhs)
      case ._CONNECTED_FACE_SET(let selection): return selection.value.isValueEqual(to: rhs)
      case ._EXTERNALLY_DEFINED_REPRESENTATION_ITEM(let selection): return selection.value.isValueEqual(to: rhs)
      case ._MANIFOLD_SOLID_BREP(let selection): return selection.value.isValueEqual(to: rhs)
      case ._POINT_CLOUD_DATASET(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PRODUCT_DEFINITION_OR_REFERENCE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._SHAPE_REPRESENTATION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._SHELL_BASED_SURFACE_MODEL(let selection): return selection.value.isValueEqual(to: rhs)
      case ._SHELL_BASED_WIREFRAME_MODEL(let selection): return selection.value.isValueEqual(to: rhs)
      case ._VERTEX_POINT(let selection): return selection.value.isValueEqual(to: rhs)
      }
    }

    public func isValueEqualOptionally<T: SDAIValue>(to rhs: T?) -> Bool? {
      switch self {
      case ._CONNECTED_EDGE_SET(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._CONNECTED_FACE_SET(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._EXTERNALLY_DEFINED_REPRESENTATION_ITEM(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._MANIFOLD_SOLID_BREP(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._POINT_CLOUD_DATASET(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PRODUCT_DEFINITION_OR_REFERENCE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._SHAPE_REPRESENTATION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._SHELL_BASED_SURFACE_MODEL(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._SHELL_BASED_WIREFRAME_MODEL(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._VERTEX_POINT(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      }
    }

    public func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      switch self {
      case ._CONNECTED_EDGE_SET(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._CONNECTED_FACE_SET(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._EXTERNALLY_DEFINED_REPRESENTATION_ITEM(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._MANIFOLD_SOLID_BREP(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._POINT_CLOUD_DATASET(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PRODUCT_DEFINITION_OR_REFERENCE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._SHAPE_REPRESENTATION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._SHELL_BASED_SURFACE_MODEL(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._SHELL_BASED_WIREFRAME_MODEL(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._VERTEX_POINT(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      }
    }

    public func isValueEqual<T: SDAIValue>(to rhs: T, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      switch self {
      case ._CONNECTED_EDGE_SET(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._CONNECTED_FACE_SET(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._EXTERNALLY_DEFINED_REPRESENTATION_ITEM(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._MANIFOLD_SOLID_BREP(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._POINT_CLOUD_DATASET(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PRODUCT_DEFINITION_OR_REFERENCE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._SHAPE_REPRESENTATION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._SHELL_BASED_SURFACE_MODEL(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._SHELL_BASED_WIREFRAME_MODEL(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._VERTEX_POINT(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      }
    }

    public func isValueEqualOptionally<T: SDAIValue>(to rhs: T?, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      switch self {
      case ._CONNECTED_EDGE_SET(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._CONNECTED_FACE_SET(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._EXTERNALLY_DEFINED_REPRESENTATION_ITEM(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._MANIFOLD_SOLID_BREP(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._POINT_CLOUD_DATASET(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PRODUCT_DEFINITION_OR_REFERENCE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._SHAPE_REPRESENTATION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._SHELL_BASED_SURFACE_MODEL(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._SHELL_BASED_WIREFRAME_MODEL(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._VERTEX_POINT(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      }
    }


    //MARK: SDAIGenericTypeBase
    public func copy() -> Self {
      switch self {
      case ._CONNECTED_EDGE_SET(let selection): return ._CONNECTED_EDGE_SET(selection.copy())
      case ._CONNECTED_FACE_SET(let selection): return ._CONNECTED_FACE_SET(selection.copy())
      case ._EXTERNALLY_DEFINED_REPRESENTATION_ITEM(let selection): return ._EXTERNALLY_DEFINED_REPRESENTATION_ITEM(selection.copy())
      case ._MANIFOLD_SOLID_BREP(let selection): return ._MANIFOLD_SOLID_BREP(selection.copy())
      case ._POINT_CLOUD_DATASET(let selection): return ._POINT_CLOUD_DATASET(selection.copy())
      case ._PRODUCT_DEFINITION_OR_REFERENCE(let selection): return ._PRODUCT_DEFINITION_OR_REFERENCE(selection.copy())
      case ._SHAPE_REPRESENTATION(let selection): return ._SHAPE_REPRESENTATION(selection.copy())
      case ._SHELL_BASED_SURFACE_MODEL(let selection): return ._SHELL_BASED_SURFACE_MODEL(selection.copy())
      case ._SHELL_BASED_WIREFRAME_MODEL(let selection): return ._SHELL_BASED_WIREFRAME_MODEL(selection.copy())
      case ._VERTEX_POINT(let selection): return ._VERTEX_POINT(selection.copy())
      }
    }

    //MARK: SDAIGenericType
    public var typeMembers: Set<SDAI.STRING> {
      var members: Set<SDAI.STRING> = [SDAI.STRING(Self.typeName)]
      switch self {
      case ._CONNECTED_EDGE_SET(let selection): members.formUnion(selection.typeMembers)
      case ._CONNECTED_FACE_SET(let selection): members.formUnion(selection.typeMembers)
      case ._EXTERNALLY_DEFINED_REPRESENTATION_ITEM(let selection): members.formUnion(selection.typeMembers)
      case ._MANIFOLD_SOLID_BREP(let selection): members.formUnion(selection.typeMembers)
      case ._POINT_CLOUD_DATASET(let selection): members.formUnion(selection.typeMembers)
      case ._PRODUCT_DEFINITION_OR_REFERENCE(let selection): members.formUnion(selection.typeMembers)
      case ._SHAPE_REPRESENTATION(let selection): members.formUnion(selection.typeMembers)
      case ._SHELL_BASED_SURFACE_MODEL(let selection): members.formUnion(selection.typeMembers)
      case ._SHELL_BASED_WIREFRAME_MODEL(let selection): members.formUnion(selection.typeMembers)
      case ._VERTEX_POINT(let selection): members.formUnion(selection.typeMembers)
      }
      //SELECT data types (indirectly) referencing the current type as a member of the select list
      members.insert(SDAI.STRING(sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT.typeName)) // -> Self
      return members
    }

    public var entityReference: SDAI.EntityReference? {
      switch self {
      case ._CONNECTED_EDGE_SET(let selection): return selection.entityReference
      case ._CONNECTED_FACE_SET(let selection): return selection.entityReference
      case ._EXTERNALLY_DEFINED_REPRESENTATION_ITEM(let selection): return selection.entityReference
      case ._MANIFOLD_SOLID_BREP(let selection): return selection.entityReference
      case ._POINT_CLOUD_DATASET(let selection): return selection.entityReference
      case ._PRODUCT_DEFINITION_OR_REFERENCE(let selection): return selection.entityReference
      case ._SHAPE_REPRESENTATION(let selection): return selection.entityReference
      case ._SHELL_BASED_SURFACE_MODEL(let selection): return selection.entityReference
      case ._SHELL_BASED_WIREFRAME_MODEL(let selection): return selection.entityReference
      case ._VERTEX_POINT(let selection): return selection.entityReference
      }
    }
    public var stringValue: SDAI.STRING? {
      switch self {
      case ._CONNECTED_EDGE_SET(let selection): return selection.stringValue
      case ._CONNECTED_FACE_SET(let selection): return selection.stringValue
      case ._EXTERNALLY_DEFINED_REPRESENTATION_ITEM(let selection): return selection.stringValue
      case ._MANIFOLD_SOLID_BREP(let selection): return selection.stringValue
      case ._POINT_CLOUD_DATASET(let selection): return selection.stringValue
      case ._PRODUCT_DEFINITION_OR_REFERENCE(let selection): return selection.stringValue
      case ._SHAPE_REPRESENTATION(let selection): return selection.stringValue
      case ._SHELL_BASED_SURFACE_MODEL(let selection): return selection.stringValue
      case ._SHELL_BASED_WIREFRAME_MODEL(let selection): return selection.stringValue
      case ._VERTEX_POINT(let selection): return selection.stringValue
      }
    }
    public var binaryValue: SDAI.BINARY? {
      switch self {
      case ._CONNECTED_EDGE_SET(let selection): return selection.binaryValue
      case ._CONNECTED_FACE_SET(let selection): return selection.binaryValue
      case ._EXTERNALLY_DEFINED_REPRESENTATION_ITEM(let selection): return selection.binaryValue
      case ._MANIFOLD_SOLID_BREP(let selection): return selection.binaryValue
      case ._POINT_CLOUD_DATASET(let selection): return selection.binaryValue
      case ._PRODUCT_DEFINITION_OR_REFERENCE(let selection): return selection.binaryValue
      case ._SHAPE_REPRESENTATION(let selection): return selection.binaryValue
      case ._SHELL_BASED_SURFACE_MODEL(let selection): return selection.binaryValue
      case ._SHELL_BASED_WIREFRAME_MODEL(let selection): return selection.binaryValue
      case ._VERTEX_POINT(let selection): return selection.binaryValue
      }
    }
    public var logicalValue: SDAI.LOGICAL? {
      switch self {
      case ._CONNECTED_EDGE_SET(let selection): return selection.logicalValue
      case ._CONNECTED_FACE_SET(let selection): return selection.logicalValue
      case ._EXTERNALLY_DEFINED_REPRESENTATION_ITEM(let selection): return selection.logicalValue
      case ._MANIFOLD_SOLID_BREP(let selection): return selection.logicalValue
      case ._POINT_CLOUD_DATASET(let selection): return selection.logicalValue
      case ._PRODUCT_DEFINITION_OR_REFERENCE(let selection): return selection.logicalValue
      case ._SHAPE_REPRESENTATION(let selection): return selection.logicalValue
      case ._SHELL_BASED_SURFACE_MODEL(let selection): return selection.logicalValue
      case ._SHELL_BASED_WIREFRAME_MODEL(let selection): return selection.logicalValue
      case ._VERTEX_POINT(let selection): return selection.logicalValue
      }
    }
    public var booleanValue: SDAI.BOOLEAN? {
      switch self {
      case ._CONNECTED_EDGE_SET(let selection): return selection.booleanValue
      case ._CONNECTED_FACE_SET(let selection): return selection.booleanValue
      case ._EXTERNALLY_DEFINED_REPRESENTATION_ITEM(let selection): return selection.booleanValue
      case ._MANIFOLD_SOLID_BREP(let selection): return selection.booleanValue
      case ._POINT_CLOUD_DATASET(let selection): return selection.booleanValue
      case ._PRODUCT_DEFINITION_OR_REFERENCE(let selection): return selection.booleanValue
      case ._SHAPE_REPRESENTATION(let selection): return selection.booleanValue
      case ._SHELL_BASED_SURFACE_MODEL(let selection): return selection.booleanValue
      case ._SHELL_BASED_WIREFRAME_MODEL(let selection): return selection.booleanValue
      case ._VERTEX_POINT(let selection): return selection.booleanValue
      }
    }
    public var numberValue: SDAI.NUMBER? {
      switch self {
      case ._CONNECTED_EDGE_SET(let selection): return selection.numberValue
      case ._CONNECTED_FACE_SET(let selection): return selection.numberValue
      case ._EXTERNALLY_DEFINED_REPRESENTATION_ITEM(let selection): return selection.numberValue
      case ._MANIFOLD_SOLID_BREP(let selection): return selection.numberValue
      case ._POINT_CLOUD_DATASET(let selection): return selection.numberValue
      case ._PRODUCT_DEFINITION_OR_REFERENCE(let selection): return selection.numberValue
      case ._SHAPE_REPRESENTATION(let selection): return selection.numberValue
      case ._SHELL_BASED_SURFACE_MODEL(let selection): return selection.numberValue
      case ._SHELL_BASED_WIREFRAME_MODEL(let selection): return selection.numberValue
      case ._VERTEX_POINT(let selection): return selection.numberValue
      }
    }
    public var realValue: SDAI.REAL? {
      switch self {
      case ._CONNECTED_EDGE_SET(let selection): return selection.realValue
      case ._CONNECTED_FACE_SET(let selection): return selection.realValue
      case ._EXTERNALLY_DEFINED_REPRESENTATION_ITEM(let selection): return selection.realValue
      case ._MANIFOLD_SOLID_BREP(let selection): return selection.realValue
      case ._POINT_CLOUD_DATASET(let selection): return selection.realValue
      case ._PRODUCT_DEFINITION_OR_REFERENCE(let selection): return selection.realValue
      case ._SHAPE_REPRESENTATION(let selection): return selection.realValue
      case ._SHELL_BASED_SURFACE_MODEL(let selection): return selection.realValue
      case ._SHELL_BASED_WIREFRAME_MODEL(let selection): return selection.realValue
      case ._VERTEX_POINT(let selection): return selection.realValue
      }
    }
    public var integerValue: SDAI.INTEGER? {
      switch self {
      case ._CONNECTED_EDGE_SET(let selection): return selection.integerValue
      case ._CONNECTED_FACE_SET(let selection): return selection.integerValue
      case ._EXTERNALLY_DEFINED_REPRESENTATION_ITEM(let selection): return selection.integerValue
      case ._MANIFOLD_SOLID_BREP(let selection): return selection.integerValue
      case ._POINT_CLOUD_DATASET(let selection): return selection.integerValue
      case ._PRODUCT_DEFINITION_OR_REFERENCE(let selection): return selection.integerValue
      case ._SHAPE_REPRESENTATION(let selection): return selection.integerValue
      case ._SHELL_BASED_SURFACE_MODEL(let selection): return selection.integerValue
      case ._SHELL_BASED_WIREFRAME_MODEL(let selection): return selection.integerValue
      case ._VERTEX_POINT(let selection): return selection.integerValue
      }
    }
    public var genericEnumValue: SDAI.GenericEnumValue? {
      switch self {
      case ._CONNECTED_EDGE_SET(let selection): return selection.genericEnumValue
      case ._CONNECTED_FACE_SET(let selection): return selection.genericEnumValue
      case ._EXTERNALLY_DEFINED_REPRESENTATION_ITEM(let selection): return selection.genericEnumValue
      case ._MANIFOLD_SOLID_BREP(let selection): return selection.genericEnumValue
      case ._POINT_CLOUD_DATASET(let selection): return selection.genericEnumValue
      case ._PRODUCT_DEFINITION_OR_REFERENCE(let selection): return selection.genericEnumValue
      case ._SHAPE_REPRESENTATION(let selection): return selection.genericEnumValue
      case ._SHELL_BASED_SURFACE_MODEL(let selection): return selection.genericEnumValue
      case ._SHELL_BASED_WIREFRAME_MODEL(let selection): return selection.genericEnumValue
      case ._VERTEX_POINT(let selection): return selection.genericEnumValue
      }
    }
    public func arrayOptionalValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.ARRAY_OPTIONAL<ELEM>? {
      switch self {
      case ._CONNECTED_EDGE_SET(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._CONNECTED_FACE_SET(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._EXTERNALLY_DEFINED_REPRESENTATION_ITEM(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._MANIFOLD_SOLID_BREP(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._POINT_CLOUD_DATASET(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_OR_REFERENCE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._SHAPE_REPRESENTATION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._SHELL_BASED_SURFACE_MODEL(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._SHELL_BASED_WIREFRAME_MODEL(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._VERTEX_POINT(let selection): return selection.arrayOptionalValue(elementType:elementType)
      }
    }
    public func arrayValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.ARRAY<ELEM>? {
      switch self {
      case ._CONNECTED_EDGE_SET(let selection): return selection.arrayValue(elementType:elementType)
      case ._CONNECTED_FACE_SET(let selection): return selection.arrayValue(elementType:elementType)
      case ._EXTERNALLY_DEFINED_REPRESENTATION_ITEM(let selection): return selection.arrayValue(elementType:elementType)
      case ._MANIFOLD_SOLID_BREP(let selection): return selection.arrayValue(elementType:elementType)
      case ._POINT_CLOUD_DATASET(let selection): return selection.arrayValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_OR_REFERENCE(let selection): return selection.arrayValue(elementType:elementType)
      case ._SHAPE_REPRESENTATION(let selection): return selection.arrayValue(elementType:elementType)
      case ._SHELL_BASED_SURFACE_MODEL(let selection): return selection.arrayValue(elementType:elementType)
      case ._SHELL_BASED_WIREFRAME_MODEL(let selection): return selection.arrayValue(elementType:elementType)
      case ._VERTEX_POINT(let selection): return selection.arrayValue(elementType:elementType)
      }
    }
    public func listValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.LIST<ELEM>? {
      switch self {
      case ._CONNECTED_EDGE_SET(let selection): return selection.listValue(elementType:elementType)
      case ._CONNECTED_FACE_SET(let selection): return selection.listValue(elementType:elementType)
      case ._EXTERNALLY_DEFINED_REPRESENTATION_ITEM(let selection): return selection.listValue(elementType:elementType)
      case ._MANIFOLD_SOLID_BREP(let selection): return selection.listValue(elementType:elementType)
      case ._POINT_CLOUD_DATASET(let selection): return selection.listValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_OR_REFERENCE(let selection): return selection.listValue(elementType:elementType)
      case ._SHAPE_REPRESENTATION(let selection): return selection.listValue(elementType:elementType)
      case ._SHELL_BASED_SURFACE_MODEL(let selection): return selection.listValue(elementType:elementType)
      case ._SHELL_BASED_WIREFRAME_MODEL(let selection): return selection.listValue(elementType:elementType)
      case ._VERTEX_POINT(let selection): return selection.listValue(elementType:elementType)
      }
    }
    public func bagValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.BAG<ELEM>? {
      switch self {
      case ._CONNECTED_EDGE_SET(let selection): return selection.bagValue(elementType:elementType)
      case ._CONNECTED_FACE_SET(let selection): return selection.bagValue(elementType:elementType)
      case ._EXTERNALLY_DEFINED_REPRESENTATION_ITEM(let selection): return selection.bagValue(elementType:elementType)
      case ._MANIFOLD_SOLID_BREP(let selection): return selection.bagValue(elementType:elementType)
      case ._POINT_CLOUD_DATASET(let selection): return selection.bagValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_OR_REFERENCE(let selection): return selection.bagValue(elementType:elementType)
      case ._SHAPE_REPRESENTATION(let selection): return selection.bagValue(elementType:elementType)
      case ._SHELL_BASED_SURFACE_MODEL(let selection): return selection.bagValue(elementType:elementType)
      case ._SHELL_BASED_WIREFRAME_MODEL(let selection): return selection.bagValue(elementType:elementType)
      case ._VERTEX_POINT(let selection): return selection.bagValue(elementType:elementType)
      }
    }
    public func setValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.SET<ELEM>? {
      switch self {
      case ._CONNECTED_EDGE_SET(let selection): return selection.setValue(elementType:elementType)
      case ._CONNECTED_FACE_SET(let selection): return selection.setValue(elementType:elementType)
      case ._EXTERNALLY_DEFINED_REPRESENTATION_ITEM(let selection): return selection.setValue(elementType:elementType)
      case ._MANIFOLD_SOLID_BREP(let selection): return selection.setValue(elementType:elementType)
      case ._POINT_CLOUD_DATASET(let selection): return selection.setValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_OR_REFERENCE(let selection): return selection.setValue(elementType:elementType)
      case ._SHAPE_REPRESENTATION(let selection): return selection.setValue(elementType:elementType)
      case ._SHELL_BASED_SURFACE_MODEL(let selection): return selection.setValue(elementType:elementType)
      case ._SHELL_BASED_WIREFRAME_MODEL(let selection): return selection.setValue(elementType:elementType)
      case ._VERTEX_POINT(let selection): return selection.setValue(elementType:elementType)
      }
    }
    public func enumValue<ENUM:SDAIEnumerationType>(enumType:ENUM.Type) -> ENUM? {
      switch self {
      case ._CONNECTED_EDGE_SET(let selection): return selection.enumValue(enumType:enumType)
      case ._CONNECTED_FACE_SET(let selection): return selection.enumValue(enumType:enumType)
      case ._EXTERNALLY_DEFINED_REPRESENTATION_ITEM(let selection): return selection.enumValue(enumType:enumType)
      case ._MANIFOLD_SOLID_BREP(let selection): return selection.enumValue(enumType:enumType)
      case ._POINT_CLOUD_DATASET(let selection): return selection.enumValue(enumType:enumType)
      case ._PRODUCT_DEFINITION_OR_REFERENCE(let selection): return selection.enumValue(enumType:enumType)
      case ._SHAPE_REPRESENTATION(let selection): return selection.enumValue(enumType:enumType)
      case ._SHELL_BASED_SURFACE_MODEL(let selection): return selection.enumValue(enumType:enumType)
      case ._SHELL_BASED_WIREFRAME_MODEL(let selection): return selection.enumValue(enumType:enumType)
      case ._VERTEX_POINT(let selection): return selection.enumValue(enumType:enumType)
      }
    }

    //MARK: SDAIUnderlyingType
    public typealias FundamentalType = Self
    public static var typeName: String = 
      "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.INSPECTED_EQUIVALENCE_ELEMENT_SELECT"
    public var asFundamentalType: FundamentalType { return self }

    //MARK: SDAIObservableAggregateElement
    public var entityReferences: AnySequence<SDAI.EntityReference> {
      switch self {
      case ._CONNECTED_EDGE_SET(let entity): return entity.entityReferences
      case ._CONNECTED_FACE_SET(let entity): return entity.entityReferences
      case ._EXTERNALLY_DEFINED_REPRESENTATION_ITEM(let entity): return entity.entityReferences
      case ._MANIFOLD_SOLID_BREP(let entity): return entity.entityReferences
      case ._POINT_CLOUD_DATASET(let entity): return entity.entityReferences
      case ._PRODUCT_DEFINITION_OR_REFERENCE(let select): return select.entityReferences
      case ._SHAPE_REPRESENTATION(let entity): return entity.entityReferences
      case ._SHELL_BASED_SURFACE_MODEL(let entity): return entity.entityReferences
      case ._SHELL_BASED_WIREFRAME_MODEL(let entity): return entity.entityReferences
      case ._VERTEX_POINT(let entity): return entity.entityReferences
      }
    }

    public mutating func configure(with observer: SDAI.EntityReferenceObserver) {
      switch self {
      case ._CONNECTED_EDGE_SET(let entity): 
        entity.configure(with: observer)
        self = ._CONNECTED_EDGE_SET(entity)
      case ._CONNECTED_FACE_SET(let entity): 
        entity.configure(with: observer)
        self = ._CONNECTED_FACE_SET(entity)
      case ._EXTERNALLY_DEFINED_REPRESENTATION_ITEM(let entity): 
        entity.configure(with: observer)
        self = ._EXTERNALLY_DEFINED_REPRESENTATION_ITEM(entity)
      case ._MANIFOLD_SOLID_BREP(let entity): 
        entity.configure(with: observer)
        self = ._MANIFOLD_SOLID_BREP(entity)
      case ._POINT_CLOUD_DATASET(let entity): 
        entity.configure(with: observer)
        self = ._POINT_CLOUD_DATASET(entity)
      case ._PRODUCT_DEFINITION_OR_REFERENCE(var select): 
        select.configure(with: observer)
        self = ._PRODUCT_DEFINITION_OR_REFERENCE(select)
      case ._SHAPE_REPRESENTATION(let entity): 
        entity.configure(with: observer)
        self = ._SHAPE_REPRESENTATION(entity)
      case ._SHELL_BASED_SURFACE_MODEL(let entity): 
        entity.configure(with: observer)
        self = ._SHELL_BASED_SURFACE_MODEL(entity)
      case ._SHELL_BASED_WIREFRAME_MODEL(let entity): 
        entity.configure(with: observer)
        self = ._SHELL_BASED_WIREFRAME_MODEL(entity)
      case ._VERTEX_POINT(let entity): 
        entity.configure(with: observer)
        self = ._VERTEX_POINT(entity)
      }
    }

    public mutating func teardownObserver() {
      switch self {
      case ._CONNECTED_EDGE_SET(let entity): 
        entity.teardownObserver()
        self = ._CONNECTED_EDGE_SET(entity)
      case ._CONNECTED_FACE_SET(let entity): 
        entity.teardownObserver()
        self = ._CONNECTED_FACE_SET(entity)
      case ._EXTERNALLY_DEFINED_REPRESENTATION_ITEM(let entity): 
        entity.teardownObserver()
        self = ._EXTERNALLY_DEFINED_REPRESENTATION_ITEM(entity)
      case ._MANIFOLD_SOLID_BREP(let entity): 
        entity.teardownObserver()
        self = ._MANIFOLD_SOLID_BREP(entity)
      case ._POINT_CLOUD_DATASET(let entity): 
        entity.teardownObserver()
        self = ._POINT_CLOUD_DATASET(entity)
      case ._PRODUCT_DEFINITION_OR_REFERENCE(var select): 
        select.teardownObserver()
        self = ._PRODUCT_DEFINITION_OR_REFERENCE(select)
      case ._SHAPE_REPRESENTATION(let entity): 
        entity.teardownObserver()
        self = ._SHAPE_REPRESENTATION(entity)
      case ._SHELL_BASED_SURFACE_MODEL(let entity): 
        entity.teardownObserver()
        self = ._SHELL_BASED_SURFACE_MODEL(entity)
      case ._SHELL_BASED_WIREFRAME_MODEL(let entity): 
        entity.teardownObserver()
        self = ._SHELL_BASED_WIREFRAME_MODEL(entity)
      case ._VERTEX_POINT(let entity): 
        entity.teardownObserver()
        self = ._VERTEX_POINT(entity)
      }
    }

    //MARK: SDAIAggregationBehavior
    public var aggregationHiBound: Int? {
      switch self {
      case ._PRODUCT_DEFINITION_OR_REFERENCE(let selection): return selection.aggregationHiBound
      default: return nil
      }
    }
    public var aggregationHiIndex: Int? {
      switch self {
      case ._PRODUCT_DEFINITION_OR_REFERENCE(let selection): return selection.aggregationHiIndex
      default: return nil
      }
    }
    public var aggregationLoBound: Int? {
      switch self {
      case ._PRODUCT_DEFINITION_OR_REFERENCE(let selection): return selection.aggregationLoBound
      default: return nil
      }
    }
    public var aggregationLoIndex: Int? {
      switch self {
      case ._PRODUCT_DEFINITION_OR_REFERENCE(let selection): return selection.aggregationLoIndex
      default: return nil
      }
    }
    public var aggregationSize: Int? {
      switch self {
      case ._PRODUCT_DEFINITION_OR_REFERENCE(let selection): return selection.aggregationSize
      default: return nil
      }
    }

    //MARK: WHERE RULE VALIDATION (SELECT TYPE)
    public static func validateWhereRules(instance:Self?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      var result: [SDAI.WhereLabel:SDAI.LOGICAL] = [:]
      switch instance {
      case ._CONNECTED_EDGE_SET(let selectValue): 
        result = eCONNECTED_EDGE_SET.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\CONNECTED_EDGE_SET")
      case ._CONNECTED_FACE_SET(let selectValue): 
        result = eCONNECTED_FACE_SET.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\CONNECTED_FACE_SET")
      case ._EXTERNALLY_DEFINED_REPRESENTATION_ITEM(let selectValue): 
        result = eEXTERNALLY_DEFINED_REPRESENTATION_ITEM.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\EXTERNALLY_DEFINED_REPRESENTATION_ITEM")
      case ._MANIFOLD_SOLID_BREP(let selectValue): 
        result = eMANIFOLD_SOLID_BREP.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\MANIFOLD_SOLID_BREP")
      case ._POINT_CLOUD_DATASET(let selectValue): 
        result = ePOINT_CLOUD_DATASET.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\POINT_CLOUD_DATASET")
      case ._PRODUCT_DEFINITION_OR_REFERENCE(let selectValue): 
        result = sPRODUCT_DEFINITION_OR_REFERENCE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PRODUCT_DEFINITION_OR_REFERENCE")
      case ._SHAPE_REPRESENTATION(let selectValue): 
        result = eSHAPE_REPRESENTATION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\SHAPE_REPRESENTATION")
      case ._SHELL_BASED_SURFACE_MODEL(let selectValue): 
        result = eSHELL_BASED_SURFACE_MODEL.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\SHELL_BASED_SURFACE_MODEL")
      case ._SHELL_BASED_WIREFRAME_MODEL(let selectValue): 
        result = eSHELL_BASED_WIREFRAME_MODEL.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\SHELL_BASED_WIREFRAME_MODEL")
      case ._VERTEX_POINT(let selectValue): result = eVERTEX_POINT.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\VERTEX_POINT")
      case nil: break
      }

      return result
    }

  }

}


//MARK: - SELECT TYPE HIERARCHY
public protocol AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sINSPECTED_EQUIVALENCE_ELEMENT_SELECT__type: 
  SDAISelectType {

  //MARK: GROUP REFERENCES
  var super_sPRODUCT_DEFINITION_OR_REFERENCE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sPRODUCT_DEFINITION_OR_REFERENCE? { get }
  var super_eSCANNED_DATA_ITEM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSCANNED_DATA_ITEM? { get }
  var super_eREPRESENTATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION? { get }
  var super_eTOPOLOGICAL_REPRESENTATION_ITEM: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eTOPOLOGICAL_REPRESENTATION_ITEM? { get }
  var super_eMANIFOLD_SOLID_BREP: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMANIFOLD_SOLID_BREP? { get }
  var super_eGENERIC_PRODUCT_DEFINITION_REFERENCE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGENERIC_PRODUCT_DEFINITION_REFERENCE? { get }
  var super_eSHAPE_REPRESENTATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_REPRESENTATION? { get }
  var super_eEXTERNALLY_DEFINED_REPRESENTATION_ITEM: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEXTERNALLY_DEFINED_REPRESENTATION_ITEM? { get }
  var super_ePRODUCT_DEFINITION_OCCURRENCE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_OCCURRENCE? { get }
  var super_eEXTERNALLY_DEFINED_ITEM: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEXTERNALLY_DEFINED_ITEM? { get }
  var super_eVERTEX: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eVERTEX? { get }
  var super_eSHELL_BASED_WIREFRAME_MODEL: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHELL_BASED_WIREFRAME_MODEL? { get }
  var super_eCONNECTED_FACE_SET: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONNECTED_FACE_SET? { get }
  var super_eSHELL_BASED_SURFACE_MODEL: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHELL_BASED_SURFACE_MODEL? { get }
  var super_eSOLID_MODEL: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSOLID_MODEL? { get }
  var super_ePRODUCT_DEFINITION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION? { get }
  var super_eREPRESENTATION_ITEM: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_ITEM? { get }
  var super_eVERTEX_POINT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eVERTEX_POINT? { get }
  var super_eCONNECTED_EDGE_SET: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONNECTED_EDGE_SET? { get }
  var super_eGEOMETRIC_REPRESENTATION_ITEM: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGEOMETRIC_REPRESENTATION_ITEM? { get }
  var super_ePOINT_CLOUD_DATASET: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePOINT_CLOUD_DATASET? { get }

  //MARK: ENTITY ATTRIBUTE REFERENCES
  var CFS_FACES: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFACE>/*[1:nil]*/ )?  { get }
  var PRODUCT_DEFINITION_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { get }
  var PRODUCT_OCCURRENCE_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { get }
  var ITEM_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sSOURCE_ITEM?  { get }
  var DESCRIPTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT?  { get }
  var NORMALS: (SDAI.LIST<SDAI.LIST<SDAI.REAL>/*[3:3]*/ >/*[1:nil]*/ )?  { get }
  var DESCENDANT_OCCURRENCES: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_SPECIFIED_OCCURRENCE>/*[0:nil]*/ )?  { get }
  var PRODUCT_DEFINITION_FORMATION_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { get }
  var QUANTITY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMEASURE_WITH_UNIT?  { get }
  var DEFINED_VERSION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOLLECTION_VERSION?  { get }
  var SBWM_BOUNDARY: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sSHELL>/*[1:nil]*/ )?  { get }
  var ITEMS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_ITEM>/*[1:nil]*/ )?  { get }
  var PERMANENT_AGGREGATE_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { get }
  var ID_OWNING_ORGANIZATION_NAME: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { get }
  var POINT_COORDINATES: (SDAI.LIST<SDAI.LIST<SDAI.REAL>/*[3:3]*/ >/*[1:nil]*/ )?  { get }
  var INTENSITIES: (SDAI.LIST<SDAI.REAL>/*[1:nil]*/ )?  { get }
  var OCCURRENCE_USAGE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sPRODUCT_DEFINITION_OCCURRENCE_OR_REFERENCE?  { get }
  var DOCUMENTATION_IDS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDOCUMENT>/*[1:nil]*/ )?  { get }
  var COLOUR_INDICES: (SDAI.LIST<SDAI.LIST<SDAI.INTEGER>/*[3:3]*/ >/*[1:nil]*/ )?  { get }
  var PARENT_FACE_SET: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONNECTED_FACE_SET?  { get }
  var OPEN_SHELL_ELEMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eOPEN_SHELL?  { get }
  var TESSELLATION_ACCURACY_PARAMETERS: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sTESSELLATION_ACCURACY_PARAMETER_ITEM>/*[1:nil]*/ )?  { get }
  var CLOSED_SHELL_ELEMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCLOSED_SHELL?  { get }
  var VERTEX_GEOMETRY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePOINT?  { get }
  var PRODUCT_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { get }
  var CHILD_OCCURRENCES: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_SPECIFIED_OCCURRENCE>/*[0:nil]*/ )?  { get }
  var RELATING_PRODUCT_DEFINITION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eLINEAR_ARRAY_PLACEMENT_GROUP_COMPONENT?  { get }
  var SOURCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEXTERNAL_SOURCE?  { get }
  var ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { get }
  var CONTEXT_OF_ITEMS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_CONTEXT?  { get }
  var SBSM_BOUNDARY: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sSHELL>/*[1:nil]*/ )?  { get }
  var OUTER: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCLOSED_SHELL?  { get }
  var CES_EDGES: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEDGE>/*[1:nil]*/ )?  { get }
  var NEUTRAL_SKETCH_SEMANTICS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nCURVES_OR_AREA?  { get }
  var PERMANENT_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { get }
  var FRAME_OF_REFERENCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_CONTEXT?  { get }
  var RELATED_PRODUCT_DEFINITION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eLINEAR_ARRAY_PLACEMENT_GROUP_COMPONENT?  { get }
  var NAME: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { get }
  var ASSEMBLY_USAGES: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eASSEMBLY_COMPONENT_USAGE>
    /*[0:nil]*/ )?  { get }
  var VOIDS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eORIENTED_CLOSED_SHELL>/*[1:nil]*/ )?  { get }
  var DIM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tDIMENSION_COUNT?  { get }
  var FORMATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_FORMATION?  { get }
}

public protocol AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sINSPECTED_EQUIVALENCE_ELEMENT_SELECT__subtype: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sINSPECTED_EQUIVALENCE_ELEMENT_SELECT__type, SDAIDefinedType
where Supertype: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sINSPECTED_EQUIVALENCE_ELEMENT_SELECT__type
{}

public extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sINSPECTED_EQUIVALENCE_ELEMENT_SELECT__subtype {
  //MARK: CONSTRUCTORS
  init?(possiblyFrom complex: SDAI.ComplexEntity?) {
    self.init(fundamental: FundamentalType(possiblyFrom: complex))
  }

  init?<T: SDAIUnderlyingType>(possiblyFrom underlyingType: T?) {
    self.init(fundamental: FundamentalType(possiblyFrom: underlyingType))
  }

  init?<G: SDAIGenericType>(fromGeneric generic: G?) {
    self.init(fundamental: FundamentalType.convert(fromGeneric: generic))
  }

  //MARK: GROUP REFERENCES
  var super_sPRODUCT_DEFINITION_OR_REFERENCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sPRODUCT_DEFINITION_OR_REFERENCE? { rep.super_sPRODUCT_DEFINITION_OR_REFERENCE }
  var super_eSCANNED_DATA_ITEM: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSCANNED_DATA_ITEM? { rep.super_eSCANNED_DATA_ITEM }
  var super_eREPRESENTATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION? { rep.super_eREPRESENTATION }
  var super_eTOPOLOGICAL_REPRESENTATION_ITEM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eTOPOLOGICAL_REPRESENTATION_ITEM? { rep.super_eTOPOLOGICAL_REPRESENTATION_ITEM }
  var super_eMANIFOLD_SOLID_BREP: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMANIFOLD_SOLID_BREP? { rep.super_eMANIFOLD_SOLID_BREP }
  var super_eGENERIC_PRODUCT_DEFINITION_REFERENCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGENERIC_PRODUCT_DEFINITION_REFERENCE? { rep.super_eGENERIC_PRODUCT_DEFINITION_REFERENCE }
  var super_eSHAPE_REPRESENTATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_REPRESENTATION? { rep.super_eSHAPE_REPRESENTATION }
  var super_eEXTERNALLY_DEFINED_REPRESENTATION_ITEM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEXTERNALLY_DEFINED_REPRESENTATION_ITEM? { rep.super_eEXTERNALLY_DEFINED_REPRESENTATION_ITEM }
  var super_ePRODUCT_DEFINITION_OCCURRENCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_OCCURRENCE? { rep.super_ePRODUCT_DEFINITION_OCCURRENCE }
  var super_eEXTERNALLY_DEFINED_ITEM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEXTERNALLY_DEFINED_ITEM? { rep.super_eEXTERNALLY_DEFINED_ITEM }
  var super_eVERTEX: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eVERTEX? { rep.super_eVERTEX }
  var super_eSHELL_BASED_WIREFRAME_MODEL: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHELL_BASED_WIREFRAME_MODEL? { rep.super_eSHELL_BASED_WIREFRAME_MODEL }
  var super_eCONNECTED_FACE_SET: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONNECTED_FACE_SET? { rep.super_eCONNECTED_FACE_SET }
  var super_eSHELL_BASED_SURFACE_MODEL: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHELL_BASED_SURFACE_MODEL? { rep.super_eSHELL_BASED_SURFACE_MODEL }
  var super_eSOLID_MODEL: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSOLID_MODEL? { rep.super_eSOLID_MODEL }
  var super_ePRODUCT_DEFINITION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION? { rep.super_ePRODUCT_DEFINITION }
  var super_eREPRESENTATION_ITEM: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_ITEM? { rep.super_eREPRESENTATION_ITEM }
  var super_eVERTEX_POINT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eVERTEX_POINT? { rep.super_eVERTEX_POINT }
  var super_eCONNECTED_EDGE_SET: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONNECTED_EDGE_SET? { rep.super_eCONNECTED_EDGE_SET }
  var super_eGEOMETRIC_REPRESENTATION_ITEM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGEOMETRIC_REPRESENTATION_ITEM? { rep.super_eGEOMETRIC_REPRESENTATION_ITEM }
  var super_ePOINT_CLOUD_DATASET: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePOINT_CLOUD_DATASET? { rep.super_ePOINT_CLOUD_DATASET }

  //MARK: ENTITY ATTRIBUTE REFERENCES
  var CFS_FACES: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFACE>/*[1:nil]*/ )?  { rep.CFS_FACES }
  var PRODUCT_DEFINITION_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { rep.PRODUCT_DEFINITION_ID }
  var PRODUCT_OCCURRENCE_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { rep.PRODUCT_OCCURRENCE_ID }
  var ITEM_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sSOURCE_ITEM?  { rep.ITEM_ID }
  var DESCRIPTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT?  { rep.DESCRIPTION }
  var NORMALS: (SDAI.LIST<SDAI.LIST<SDAI.REAL>/*[3:3]*/ >/*[1:nil]*/ )?  { rep.NORMALS }
  var DESCENDANT_OCCURRENCES: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_SPECIFIED_OCCURRENCE>/*[0:nil]*/ )?  { rep.DESCENDANT_OCCURRENCES }
  var PRODUCT_DEFINITION_FORMATION_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { rep.PRODUCT_DEFINITION_FORMATION_ID }
  var QUANTITY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMEASURE_WITH_UNIT?  { rep.QUANTITY }
  var DEFINED_VERSION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOLLECTION_VERSION?  { rep.DEFINED_VERSION }
  var SBWM_BOUNDARY: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sSHELL>/*[1:nil]*/ )?  { rep.SBWM_BOUNDARY }
  var ITEMS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_ITEM>/*[1:nil]*/ )?  { rep.ITEMS }
  var PERMANENT_AGGREGATE_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { rep.PERMANENT_AGGREGATE_ID }
  var ID_OWNING_ORGANIZATION_NAME: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { rep.ID_OWNING_ORGANIZATION_NAME }
  var POINT_COORDINATES: (SDAI.LIST<SDAI.LIST<SDAI.REAL>/*[3:3]*/ >/*[1:nil]*/ )?  { rep.POINT_COORDINATES }
  var INTENSITIES: (SDAI.LIST<SDAI.REAL>/*[1:nil]*/ )?  { rep.INTENSITIES }
  var OCCURRENCE_USAGE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sPRODUCT_DEFINITION_OCCURRENCE_OR_REFERENCE?  { rep.OCCURRENCE_USAGE }
  var DOCUMENTATION_IDS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDOCUMENT>/*[1:nil]*/ )?  { rep.DOCUMENTATION_IDS }
  var COLOUR_INDICES: (SDAI.LIST<SDAI.LIST<SDAI.INTEGER>/*[3:3]*/ >/*[1:nil]*/ )?  { rep.COLOUR_INDICES }
  var PARENT_FACE_SET: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONNECTED_FACE_SET?  { rep.PARENT_FACE_SET }
  var OPEN_SHELL_ELEMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eOPEN_SHELL?  { rep.OPEN_SHELL_ELEMENT }
  var TESSELLATION_ACCURACY_PARAMETERS: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sTESSELLATION_ACCURACY_PARAMETER_ITEM>/*[1:nil]*/ )?  { rep.TESSELLATION_ACCURACY_PARAMETERS }
  var CLOSED_SHELL_ELEMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCLOSED_SHELL?  { rep.CLOSED_SHELL_ELEMENT }
  var VERTEX_GEOMETRY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePOINT?  { rep.VERTEX_GEOMETRY }
  var PRODUCT_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { rep.PRODUCT_ID }
  var CHILD_OCCURRENCES: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_SPECIFIED_OCCURRENCE>/*[0:nil]*/ )?  { rep.CHILD_OCCURRENCES }
  var RELATING_PRODUCT_DEFINITION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eLINEAR_ARRAY_PLACEMENT_GROUP_COMPONENT?  { rep.RELATING_PRODUCT_DEFINITION }
  var SOURCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEXTERNAL_SOURCE?  { rep.SOURCE }
  var ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { rep.ID }
  var CONTEXT_OF_ITEMS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_CONTEXT?  { rep.CONTEXT_OF_ITEMS }
  var SBSM_BOUNDARY: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sSHELL>/*[1:nil]*/ )?  { rep.SBSM_BOUNDARY }
  var OUTER: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCLOSED_SHELL?  { rep.OUTER }
  var CES_EDGES: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEDGE>/*[1:nil]*/ )?  { rep.CES_EDGES }
  var NEUTRAL_SKETCH_SEMANTICS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nCURVES_OR_AREA?  { rep.NEUTRAL_SKETCH_SEMANTICS }
  var PERMANENT_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { rep.PERMANENT_ID }
  var FRAME_OF_REFERENCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_CONTEXT?  { rep.FRAME_OF_REFERENCE }
  var RELATED_PRODUCT_DEFINITION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eLINEAR_ARRAY_PLACEMENT_GROUP_COMPONENT?  { rep.RELATED_PRODUCT_DEFINITION }
  var NAME: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { rep.NAME }
  var ASSEMBLY_USAGES: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eASSEMBLY_COMPONENT_USAGE>
    /*[0:nil]*/ )?  { rep.ASSEMBLY_USAGES }
  var VOIDS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eORIENTED_CLOSED_SHELL>/*[1:nil]*/ )?  { rep.VOIDS }
  var DIM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tDIMENSION_COUNT?  { rep.DIM }
  var FORMATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_FORMATION?  { rep.FORMATION }
}

