/* file: id_attribute_select.swift 	 generated: Sun Oct 31 15:32:10 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -TYPE DEFINITION in EXPRESS
/*
  TYPE id_attribute_select = SELECT
    ( action (*ENTITY*),
     address (*ENTITY*),
     application_context (*ENTITY*),
     ascribable_state_relationship (*ENTITY*),
     dimensional_size (*ENTITY*),
     geometric_tolerance (*ENTITY*),
     group (*ENTITY*),
     organizational_project (*ENTITY*),
     product_category (*ENTITY*),
     property_definition (*ENTITY*),
     representation (*ENTITY*),
     shape_aspect (*ENTITY*),
     shape_aspect_relationship (*ENTITY*),
     topological_representation_item (*ENTITY*) );
  END_TYPE; -- id_attribute_select (line:3544 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES FOR SELECT
/*
  action (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  properties: SET [1 : ?] OF process_property_association
  ATTR:  directive: action_directive
  ATTR:  chosen_method: action_method
  ATTR:  identification: (AMBIGUOUS (CASE LEVEL))
  ATTR:  product_definitions: SET [1 : ?] OF process_product_association
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  address (*ENTITY*):
  ATTR:  people: SET [1 : ?] OF person
  ATTR:  street: label
  ATTR:  description: (AMBIGUOUS (CASE LEVEL))
  ATTR:  organizations: SET [1 : ?] OF organization
  ATTR:  telex_number: label
  ATTR:  facsimile_number: label
  ATTR:  region: label
  ATTR:  electronic_mail_address: label
  ATTR:  street_number: label
  ATTR:  internal_location: label
  ATTR:  postal_code: label
  ATTR:  postal_box: label
  ATTR:  url: identifier
  ATTR:  town: label
  ATTR:  country: label
  ATTR:  telephone_number: label
  ATTR:  name: label *** Multiple Select Case Sources ***

  application_context (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  context_elements: SET [1 : ?] OF application_context_element
  ATTR:  application: label
  ATTR:  id: identifier *** Multiple Select Case Sources ***

  ascribable_state_relationship (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  related_ascribable_state: ascribable_state
  ATTR:  relation_type: STRING
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***
  ATTR:  relating_ascribable_state: ascribable_state

  dimensional_size (*ENTITY*):
  ATTR:  path: shape_aspect *** Multiple Select Case Sources ***
  ATTR:  applies_to: shape_aspect
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  angle_selection: angle_relator *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  geometric_tolerance (*ENTITY*):
  ATTR:  maximum_upper_tolerance: length_measure_with_unit
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  tolerance_relationship: SET [0 : ?] OF geometric_tolerance_relationship
  ATTR:  auxiliary_classification: SET [0 : ?] OF geometric_tolerance_auxiliary_classification
  ATTR:  displacement: length_measure_with_unit
  ATTR:  modifier: limit_condition
  ATTR:  datum_system: SET [1 : ?] OF datum_system_or_reference
  ATTR:  unit_size: length_or_plane_angle_measure_with_unit_select
  ATTR:  modifiers: SET [1 : ?] OF geometric_tolerance_modifier (AMBIGUOUS (SELECT LEVEL))
  ATTR:  magnitude: length_measure_with_unit
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  area_type: area_unit_type
  ATTR:  controlling_shape: product_definition_shape
  ATTR:  second_unit_size: length_or_plane_angle_measure_with_unit_select
  ATTR:  name: label *** Multiple Select Case Sources ***
  ATTR:  toleranced_shape_aspect: geometric_tolerance_target

  group (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  items: SET [0 : ?] OF product_definition *** Multiple Select Case Sources ***
  ATTR:  of_shape: mated_part_relationship *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  assigned_group: mated_part_relationship
  ATTR:  definition: product_definition_usage_relationship *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  organizational_project (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  responsible_organizations: SET [1 : ?] OF organization
  ATTR:  name: label *** Multiple Select Case Sources ***

  product_category (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  products: SET [1 : ?] OF product
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  property_definition (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  items: SET [0 : ?] OF product_definition *** Multiple Select Case Sources ***
  ATTR:  of_shape: mated_part_relationship *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  representation_relation: kinematic_property_definition_representation
  ATTR:  assigned_group: mated_part_relationship
  ATTR:  definition: characterized_definition *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  representation (*ENTITY*):
  ATTR:  criteria_inspected: (AMBIGUOUS (CASE LEVEL))
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  controlling_joints: (AMBIGUOUS (CASE LEVEL))
  ATTR:  character_box: planar_extent
  ATTR:  parent: (AMBIGUOUS (CASE LEVEL))
  ATTR:  cm_link: variational_current_representation_relationship
  ATTR:  items: SET [1 : ?] OF representation_item *** Multiple Select Case Sources ***
  ATTR:  outlines: SET [1 : ?] OF annotation_fill_area
  ATTR:  required_general_accuracy: SET [1 : ?] OF shape_measurement_accuracy
  ATTR:  associated_shape_representation: SET [0 : 1] OF kinematic_link_representation_association
  ATTR:  baseline_ratio: ratio_measure
  ATTR:  revision_identifier: identifier
  ATTR:  size: presentation_size
  ATTR:  tessellation_accuracy_parameters: SET [1 : ?] OF tessellation_accuracy_parameter_item
  ATTR:  represented_joints: SET [1 : ?] OF kinematic_joint
  ATTR:  box_height: length_measure
  ATTR:  strokes: SET [1 : ?] OF curve
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  applied_general_accuracy: SET [1 : ?] OF shape_measurement_accuracy
  ATTR:  context_of_items: representation_context
  ATTR:  neutral_sketch_semantics: curves_or_area
  ATTR:  represented_link: kinematic_link
  ATTR:  represented_topology: kinematic_topology_representation_select
  ATTR:  uncertainty: SET [1 : ?] OF uncertainty_measure_with_unit
  ATTR:  name: label *** Multiple Select Case Sources ***
  ATTR:  represented_mechanism: mechanism_representation

  shape_aspect (*ENTITY*):
  ATTR:  deriving_relationships: SET [1 : ?] OF shape_aspect_deriving_relationship
  ATTR:  product_definitional: LOGICAL
  ATTR:  owner: (AMBIGUOUS (CASE LEVEL))
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  form: tolerance_zone_form
  ATTR:  target_id: identifier
  ATTR:  component_shape_aspect: internal_or_reflected_shape_aspect
  ATTR:  parent: shape_aspect
  ATTR:  orientation: oriented_tolerance_zone_type
  ATTR:  items: (AMBIGUOUS (CASE LEVEL))
  ATTR:  of_shape: product_definition_shape *** Multiple Select Case Sources ***
  ATTR:  datum_reference: datum_system
  ATTR:  identification: identifier
  ATTR:  established_by_relationships: SET [1 : ?] OF shape_aspect_relationship
  ATTR:  constituents: LIST [1 : 3] OF UNIQUE datum_reference_compartment
  ATTR:  representation_associations: SET [0 : ?] OF property_definition_representation
  ATTR:  angle: plane_angle_measure_with_unit
  ATTR:  modified_components: (AMBIGUOUS (CASE LEVEL))
  ATTR:  modifiers: SET [1 : ?] OF datum_reference_modifier (AMBIGUOUS (SELECT LEVEL))
  ATTR:  component_relationships: SET [2 : ?] OF shape_aspect_relationship
  ATTR:  base: datum_or_common_datum
  ATTR:  base_common_datum_list: common_datum_list
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  feature_basis_relationship: SET [1 : ?] OF shape_aspect_relationship
  ATTR:  direction: directed_tolerance_zone_type
  ATTR:  related_shape_aspect: component_feature *** Multiple Select Case Sources ***
  ATTR:  defining_tolerance: SET [1 : ?] OF tolerance_zone_target
  ATTR:  assigned_group: mated_part_relationship
  ATTR:  location: multi_or_next_assembly_usage_occurrence
  ATTR:  definition: (AMBIGUOUS (CASE LEVEL))
  ATTR:  name: label *** Multiple Select Case Sources ***
  ATTR:  basis_relationships: SET [1 : ?] OF shape_aspect_deriving_relationship
  ATTR:  relating_shape_aspect: component_feature *** Multiple Select Case Sources ***
  ATTR:  offset: measure_with_unit
  ATTR:  target_basis_relationship: SET [1 : ?] OF shape_aspect_relationship

  shape_aspect_relationship (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  path: shape_aspect *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  related_shape_aspect: shape_aspect *** Multiple Select Case Sources ***
  ATTR:  angle_selection: angle_relator *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***
  ATTR:  relating_shape_aspect: shape_aspect *** Multiple Select Case Sources ***

  topological_representation_item (*ENTITY*):
  ATTR:  ne: (AMBIGUOUS (CASE LEVEL))
  ATTR:  cfs_faces: SET [1 : ?] OF face
  ATTR:  bounds: SET [1 : ?] OF face_bound
  ATTR:  outer_bound: (AMBIGUOUS (CASE LEVEL))
  ATTR:  parent_volume_set: connected_volume_set
  ATTR:  edge_element: edge
  ATTR:  loop_vertex: vertex
  ATTR:  orientation: (AMBIGUOUS (CASE LEVEL))
  ATTR:  permanent_aggregate_id: identifier
  ATTR:  pcurve_reference: pcurve
  ATTR:  volume_geometry: volume
  ATTR:  path_element: path
  ATTR:  edge_list: LIST [1 : ?] OF UNIQUE oriented_edge
  ATTR:  distance_from_start: positive_length_measure
  ATTR:  parent_face: face
  ATTR:  parent_face_set: connected_face_set
  ATTR:  open_shell_element: open_shell
  ATTR:  vertex_shell_extent: vertex_loop
  ATTR:  closed_shell_element: closed_shell
  ATTR:  bound: loop
  ATTR:  edge_end: vertex
  ATTR:  cvs_volumes: SET [1 : ?] OF volume_with_faces
  ATTR:  face_geometry: surface
  ATTR:  face_element: face
  ATTR:  vertex_geometry: point
  ATTR:  edge_length: positive_length_measure
  ATTR:  wire_shell_extent: SET [1 : ?] OF loop
  ATTR:  edge_start: vertex
  ATTR:  edge_geometry: curve
  ATTR:  ces_edges: SET [1 : ?] OF edge
  ATTR:  same_sense: (AMBIGUOUS (CASE LEVEL))
  ATTR:  permanent_id: identifier
  ATTR:  parent_edge: (AMBIGUOUS (CASE LEVEL))
  ATTR:  name: label *** Multiple Select Case Sources ***
  ATTR:  polygon: LIST [3 : ?] OF UNIQUE cartesian_point

*/

/** SELECT type
- EXPRESS:
```express
  TYPE id_attribute_select = SELECT
    ( action (*ENTITY*),
     address (*ENTITY*),
     application_context (*ENTITY*),
     ascribable_state_relationship (*ENTITY*),
     dimensional_size (*ENTITY*),
     geometric_tolerance (*ENTITY*),
     group (*ENTITY*),
     organizational_project (*ENTITY*),
     product_category (*ENTITY*),
     property_definition (*ENTITY*),
     representation (*ENTITY*),
     shape_aspect (*ENTITY*),
     shape_aspect_relationship (*ENTITY*),
     topological_representation_item (*ENTITY*) );
  END_TYPE; -- id_attribute_select (line:3544 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public enum sID_ATTRIBUTE_SELECT : SDAIValue, AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sID_ATTRIBUTE_SELECT__type {

    /// SELECT case ``eACTION`` (ENTITY) in ``sID_ATTRIBUTE_SELECT``
    case _ACTION(eACTION)	// (ENTITY)

    /// SELECT case ``eADDRESS`` (ENTITY) in ``sID_ATTRIBUTE_SELECT``
    case _ADDRESS(eADDRESS)	// (ENTITY)

    /// SELECT case ``eAPPLICATION_CONTEXT`` (ENTITY) in ``sID_ATTRIBUTE_SELECT``
    case _APPLICATION_CONTEXT(eAPPLICATION_CONTEXT)	// (ENTITY)

    /// SELECT case ``eASCRIBABLE_STATE_RELATIONSHIP`` (ENTITY) in ``sID_ATTRIBUTE_SELECT``
    case _ASCRIBABLE_STATE_RELATIONSHIP(eASCRIBABLE_STATE_RELATIONSHIP)	// (ENTITY)

    /// SELECT case ``eDIMENSIONAL_SIZE`` (ENTITY) in ``sID_ATTRIBUTE_SELECT``
    case _DIMENSIONAL_SIZE(eDIMENSIONAL_SIZE)	// (ENTITY)

    /// SELECT case ``eGEOMETRIC_TOLERANCE`` (ENTITY) in ``sID_ATTRIBUTE_SELECT``
    case _GEOMETRIC_TOLERANCE(eGEOMETRIC_TOLERANCE)	// (ENTITY)

    /// SELECT case ``eGROUP`` (ENTITY) in ``sID_ATTRIBUTE_SELECT``
    case _GROUP(eGROUP)	// (ENTITY)

    /// SELECT case ``eORGANIZATIONAL_PROJECT`` (ENTITY) in ``sID_ATTRIBUTE_SELECT``
    case _ORGANIZATIONAL_PROJECT(eORGANIZATIONAL_PROJECT)	// (ENTITY)

    /// SELECT case ``ePRODUCT_CATEGORY`` (ENTITY) in ``sID_ATTRIBUTE_SELECT``
    case _PRODUCT_CATEGORY(ePRODUCT_CATEGORY)	// (ENTITY)

    /// SELECT case ``ePROPERTY_DEFINITION`` (ENTITY) in ``sID_ATTRIBUTE_SELECT``
    case _PROPERTY_DEFINITION(ePROPERTY_DEFINITION)	// (ENTITY)

    /// SELECT case ``eREPRESENTATION`` (ENTITY) in ``sID_ATTRIBUTE_SELECT``
    case _REPRESENTATION(eREPRESENTATION)	// (ENTITY)

    /// SELECT case ``eSHAPE_ASPECT`` (ENTITY) in ``sID_ATTRIBUTE_SELECT``
    case _SHAPE_ASPECT(eSHAPE_ASPECT)	// (ENTITY)

    /// SELECT case ``eSHAPE_ASPECT_RELATIONSHIP`` (ENTITY) in ``sID_ATTRIBUTE_SELECT``
    case _SHAPE_ASPECT_RELATIONSHIP(eSHAPE_ASPECT_RELATIONSHIP)	// (ENTITY)

    /// SELECT case ``eTOPOLOGICAL_REPRESENTATION_ITEM`` (ENTITY) in ``sID_ATTRIBUTE_SELECT``
    case _TOPOLOGICAL_REPRESENTATION_ITEM(eTOPOLOGICAL_REPRESENTATION_ITEM)	// (ENTITY)

    //MARK: - CONSTRUCTORS
    public init(fundamental: FundamentalType) { self = fundamental }

    public init?<T: SDAIUnderlyingType>(possiblyFrom underlyingType: T?){
      return nil
    }

    public init?(possiblyFrom complex: SDAI.ComplexEntity?) {
      guard let complex = complex else { return nil }

      if let base = complex.entityReference(eACTION.self) {self = ._ACTION(base) }
      else if let base = complex.entityReference(eADDRESS.self) {self = ._ADDRESS(base) }
      else if let base = complex.entityReference(eAPPLICATION_CONTEXT.self) {self = ._APPLICATION_CONTEXT(base) }
      else if let base = complex.entityReference(eASCRIBABLE_STATE_RELATIONSHIP.self) {self = ._ASCRIBABLE_STATE_RELATIONSHIP(base) }
      else if let base = complex.entityReference(eDIMENSIONAL_SIZE.self) {self = ._DIMENSIONAL_SIZE(base) }
      else if let base = complex.entityReference(eGEOMETRIC_TOLERANCE.self) {self = ._GEOMETRIC_TOLERANCE(base) }
      else if let base = complex.entityReference(eGROUP.self) {self = ._GROUP(base) }
      else if let base = complex.entityReference(eORGANIZATIONAL_PROJECT.self) {self = ._ORGANIZATIONAL_PROJECT(base) }
      else if let base = complex.entityReference(ePRODUCT_CATEGORY.self) {self = ._PRODUCT_CATEGORY(base) }
      else if let base = complex.entityReference(ePROPERTY_DEFINITION.self) {self = ._PROPERTY_DEFINITION(base) }
      else if let base = complex.entityReference(eREPRESENTATION.self) {self = ._REPRESENTATION(base) }
      else if let base = complex.entityReference(eSHAPE_ASPECT.self) {self = ._SHAPE_ASPECT(base) }
      else if let base = complex.entityReference(eSHAPE_ASPECT_RELATIONSHIP.self) {self = ._SHAPE_ASPECT_RELATIONSHIP(base) }
      else if let base = complex.entityReference(eTOPOLOGICAL_REPRESENTATION_ITEM.self) {self = ._TOPOLOGICAL_REPRESENTATION_ITEM(base) }
      else { return nil }
    }

    public init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let select = generic else { return nil }

      if let fundamental = select as? Self {
        self.init(fundamental: fundamental)
      }
      else if let base = eACTION.convert(fromGeneric: select) {
        self = ._ACTION(base)
      }
      else if let base = eADDRESS.convert(fromGeneric: select) {
        self = ._ADDRESS(base)
      }
      else if let base = eAPPLICATION_CONTEXT.convert(fromGeneric: select) {
        self = ._APPLICATION_CONTEXT(base)
      }
      else if let base = eASCRIBABLE_STATE_RELATIONSHIP.convert(fromGeneric: select) {
        self = ._ASCRIBABLE_STATE_RELATIONSHIP(base)
      }
      else if let base = eDIMENSIONAL_SIZE.convert(fromGeneric: select) {
        self = ._DIMENSIONAL_SIZE(base)
      }
      else if let base = eGEOMETRIC_TOLERANCE.convert(fromGeneric: select) {
        self = ._GEOMETRIC_TOLERANCE(base)
      }
      else if let base = eGROUP.convert(fromGeneric: select) {
        self = ._GROUP(base)
      }
      else if let base = eORGANIZATIONAL_PROJECT.convert(fromGeneric: select) {
        self = ._ORGANIZATIONAL_PROJECT(base)
      }
      else if let base = ePRODUCT_CATEGORY.convert(fromGeneric: select) {
        self = ._PRODUCT_CATEGORY(base)
      }
      else if let base = ePROPERTY_DEFINITION.convert(fromGeneric: select) {
        self = ._PROPERTY_DEFINITION(base)
      }
      else if let base = eREPRESENTATION.convert(fromGeneric: select) {
        self = ._REPRESENTATION(base)
      }
      else if let base = eSHAPE_ASPECT.convert(fromGeneric: select) {
        self = ._SHAPE_ASPECT(base)
      }
      else if let base = eSHAPE_ASPECT_RELATIONSHIP.convert(fromGeneric: select) {
        self = ._SHAPE_ASPECT_RELATIONSHIP(base)
      }
      else if let base = eTOPOLOGICAL_REPRESENTATION_ITEM.convert(fromGeneric: select) {
        self = ._TOPOLOGICAL_REPRESENTATION_ITEM(base)
      }
      else { return nil }
    }

    // InitializableByP21Parameter
    public static var bareTypeName: String = "ID_ATTRIBUTE_SELECT"

    public init?(p21typedParam: P21Decode.ExchangeStructure.TypedParameter, from exchangeStructure: P21Decode.ExchangeStructure) {
      guard let keyword = p21typedParam.keyword.asStandardKeyword else { exchangeStructure.error = "unexpected p21parameter(\(p21typedParam)) while resolving \(Self.bareTypeName) select value"; return nil }

      switch(keyword) {
      default:
        exchangeStructure.error = "unexpected p21parameter(\(p21typedParam)) while resolving \(Self.bareTypeName) select value"
        return nil
      }
    }

    public init?(p21untypedParam: P21Decode.ExchangeStructure.UntypedParameter, from exchangeStructure: P21Decode.ExchangeStructure) {
      switch p21untypedParam {
      case .rhsOccurenceName(let rhsname):
        switch rhsname {
        case .constantEntityName(let name):
          guard let entity = exchangeStructure.resolve(constantEntityName: name) else {exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) instance"); return nil }
          self.init(possiblyFrom: entity.complexEntity)

        case .entityInstanceName(let name):
          guard let complex = exchangeStructure.resolve(entityInstanceName: name) else {exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) instance"); return nil }
          self.init(possiblyFrom: complex)

        default:
          exchangeStructure.error = "unexpected p21parameter(\(p21untypedParam)) while resolving \(Self.bareTypeName) select instance"
          return nil
        }

      default:
        exchangeStructure.error = "unexpected p21parameter(\(p21untypedParam)) while resolving \(Self.bareTypeName) select instance"
        return nil
      }
    }

    public init?(p21omittedParamfrom exchangeStructure: P21Decode.ExchangeStructure) {
      return nil
    }


    //MARK: - ENTITY UNDERLYING TYPE REFERENCES
    public var super_eREPRESENTATION: eREPRESENTATION? {
      switch self {
      case ._REPRESENTATION(let entity): return entity
      default: return nil
      }
    }

    public var super_eSHAPE_ASPECT_RELATIONSHIP: eSHAPE_ASPECT_RELATIONSHIP? {
      switch self {
      case ._SHAPE_ASPECT_RELATIONSHIP(let entity): return entity
      default: return nil
      }
    }

    public var super_ePROPERTY_DEFINITION: ePROPERTY_DEFINITION? {
      switch self {
      case ._PROPERTY_DEFINITION(let entity): return entity
      default: return nil
      }
    }

    public var super_eTOPOLOGICAL_REPRESENTATION_ITEM: eTOPOLOGICAL_REPRESENTATION_ITEM? {
      switch self {
      case ._TOPOLOGICAL_REPRESENTATION_ITEM(let entity): return entity
      default: return nil
      }
    }

    public var super_eGROUP: eGROUP? {
      switch self {
      case ._GROUP(let entity): return entity
      default: return nil
      }
    }

    public var super_eGEOMETRIC_TOLERANCE: eGEOMETRIC_TOLERANCE? {
      switch self {
      case ._GEOMETRIC_TOLERANCE(let entity): return entity
      default: return nil
      }
    }

    public var super_eDIMENSIONAL_SIZE: eDIMENSIONAL_SIZE? {
      switch self {
      case ._DIMENSIONAL_SIZE(let entity): return entity
      default: return nil
      }
    }

    public var super_eAPPLICATION_CONTEXT: eAPPLICATION_CONTEXT? {
      switch self {
      case ._APPLICATION_CONTEXT(let entity): return entity
      default: return nil
      }
    }

    public var super_eREPRESENTATION_ITEM: eREPRESENTATION_ITEM? {
      switch self {
      case ._TOPOLOGICAL_REPRESENTATION_ITEM(let entity): return entity.super_eREPRESENTATION_ITEM
      default: return nil
      }
    }

    public var super_eASCRIBABLE_STATE_RELATIONSHIP: eASCRIBABLE_STATE_RELATIONSHIP? {
      switch self {
      case ._ASCRIBABLE_STATE_RELATIONSHIP(let entity): return entity
      default: return nil
      }
    }

    public var super_eORGANIZATIONAL_PROJECT: eORGANIZATIONAL_PROJECT? {
      switch self {
      case ._ORGANIZATIONAL_PROJECT(let entity): return entity
      default: return nil
      }
    }

    public var super_ePRODUCT_CATEGORY: ePRODUCT_CATEGORY? {
      switch self {
      case ._PRODUCT_CATEGORY(let entity): return entity
      default: return nil
      }
    }

    public var super_eSHAPE_ASPECT: eSHAPE_ASPECT? {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity
      default: return nil
      }
    }

    public var super_eADDRESS: eADDRESS? {
      switch self {
      case ._ADDRESS(let entity): return entity
      default: return nil
      }
    }

    public var super_eACTION: eACTION? {
      switch self {
      case ._ACTION(let entity): return entity
      default: return nil
      }
    }


    //MARK: - ENTITY ATTRIBUTE REFERENCES
    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var DERIVING_RELATIONSHIPS: (SDAI.SET<eSHAPE_ASPECT_DERIVING_RELATIONSHIP>/*[1:nil]*/ )?  {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity.DERIVING_RELATIONSHIPS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eADDRESS`` )
    public var PEOPLE: (SDAI.SET<ePERSON>/*[1:nil]*/ )?  {
      switch self {
      case ._ADDRESS(let entity): return entity.PEOPLE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var PRODUCT_DEFINITIONAL: SDAI.LOGICAL {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity.PRODUCT_DEFINITIONAL
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eTOPOLOGICAL_REPRESENTATION_ITEM`` )
    public var CFS_FACES: (SDAI.SET<eFACE>/*[1:nil]*/ )?  {
      switch self {
      case ._TOPOLOGICAL_REPRESENTATION_ITEM(let entity): return entity.CFS_FACES
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eGEOMETRIC_TOLERANCE`` )
    public var MAXIMUM_UPPER_TOLERANCE: eLENGTH_MEASURE_WITH_UNIT?  {
      switch self {
      case ._GEOMETRIC_TOLERANCE(let entity): return entity.MAXIMUM_UPPER_TOLERANCE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eADDRESS`` )
    public var STREET: tLABEL?  {
      switch self {
      case ._ADDRESS(let entity): return entity.STREET
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eACTION`` )
    /// - origin: ENTITY( ``eAPPLICATION_CONTEXT`` )
    /// - origin: ENTITY( ``eASCRIBABLE_STATE_RELATIONSHIP`` )
    /// - origin: ENTITY( ``eGEOMETRIC_TOLERANCE`` )
    /// - origin: ENTITY( ``eGROUP`` )
    /// - origin: ENTITY( ``eORGANIZATIONAL_PROJECT`` )
    /// - origin: ENTITY( ``ePRODUCT_CATEGORY`` )
    /// - origin: ENTITY( ``ePROPERTY_DEFINITION`` )
    /// - origin: ENTITY( ``eREPRESENTATION`` )
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    /// - origin: ENTITY( ``eSHAPE_ASPECT_RELATIONSHIP`` )
    public var DESCRIPTION: tTEXT?  {
      switch self {
      case ._ACTION(let entity): return entity.DESCRIPTION
      case ._ADDRESS/*(let entity)*/: return nil // AMBIGUOUS ATTRIBUTE for eADDRESS
      case ._APPLICATION_CONTEXT(let entity): return entity.DESCRIPTION
      case ._ASCRIBABLE_STATE_RELATIONSHIP(let entity): return entity.DESCRIPTION
      case ._GEOMETRIC_TOLERANCE(let entity): return entity.DESCRIPTION
      case ._GROUP(let entity): return entity.DESCRIPTION
      case ._ORGANIZATIONAL_PROJECT(let entity): return entity.DESCRIPTION
      case ._PRODUCT_CATEGORY(let entity): return entity.DESCRIPTION
      case ._PROPERTY_DEFINITION(let entity): return entity.DESCRIPTION
      case ._REPRESENTATION(let entity): return entity.DESCRIPTION
      case ._SHAPE_ASPECT(let entity): return entity.DESCRIPTION
      case ._SHAPE_ASPECT_RELATIONSHIP(let entity): return entity.DESCRIPTION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eACTION`` )
    public var PROPERTIES: (SDAI.SET<ePROCESS_PROPERTY_ASSOCIATION>/*[1:nil]*/ )?  {
      switch self {
      case ._ACTION(let entity): return entity.PROPERTIES
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eADDRESS`` )
    public var ORGANIZATIONS: (SDAI.SET<eORGANIZATION>/*[1:nil]*/ )?  {
      switch self {
      case ._ADDRESS(let entity): return entity.ORGANIZATIONS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var FORM: eTOLERANCE_ZONE_FORM?  {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity.FORM
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eACTION`` )
    public var DIRECTIVE: eACTION_DIRECTIVE?  {
      switch self {
      case ._ACTION(let entity): return entity.DIRECTIVE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``ePRODUCT_CATEGORY`` )
    public var PRODUCTS: (SDAI.SET<ePRODUCT>/*[1:nil]*/ )?  {
      switch self {
      case ._PRODUCT_CATEGORY(let entity): return entity.PRODUCTS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eGEOMETRIC_TOLERANCE`` )
    public var TOLERANCE_RELATIONSHIP: (SDAI.SET<eGEOMETRIC_TOLERANCE_RELATIONSHIP>/*[0:nil]*/ )?  {
      switch self {
      case ._GEOMETRIC_TOLERANCE(let entity): return entity.TOLERANCE_RELATIONSHIP
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eGEOMETRIC_TOLERANCE`` )
    public var AUXILIARY_CLASSIFICATION: (SDAI.SET<eGEOMETRIC_TOLERANCE_AUXILIARY_CLASSIFICATION>/*[0:nil]*/ )?  {
      switch self {
      case ._GEOMETRIC_TOLERANCE(let entity): return entity.AUXILIARY_CLASSIFICATION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eTOPOLOGICAL_REPRESENTATION_ITEM`` )
    public var BOUNDS: (SDAI.SET<eFACE_BOUND>/*[1:nil]*/ )?  {
      switch self {
      case ._TOPOLOGICAL_REPRESENTATION_ITEM(let entity): return entity.BOUNDS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eREPRESENTATION`` )
    public var CHARACTER_BOX: ePLANAR_EXTENT?  {
      switch self {
      case ._REPRESENTATION(let entity): return entity.CHARACTER_BOX
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eDIMENSIONAL_SIZE`` )
    /// - origin: ENTITY( ``eSHAPE_ASPECT_RELATIONSHIP`` )
    public var PATH: eSHAPE_ASPECT?  {
      switch self {
      case ._DIMENSIONAL_SIZE(let entity): return entity.PATH
      case ._SHAPE_ASPECT_RELATIONSHIP(let entity): return entity.PATH
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var TARGET_ID: tIDENTIFIER?  {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity.TARGET_ID
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eASCRIBABLE_STATE_RELATIONSHIP`` )
    public var RELATED_ASCRIBABLE_STATE: eASCRIBABLE_STATE?  {
      switch self {
      case ._ASCRIBABLE_STATE_RELATIONSHIP(let entity): return entity.RELATED_ASCRIBABLE_STATE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eTOPOLOGICAL_REPRESENTATION_ITEM`` )
    public var PARENT_VOLUME_SET: eCONNECTED_VOLUME_SET?  {
      switch self {
      case ._TOPOLOGICAL_REPRESENTATION_ITEM(let entity): return entity.PARENT_VOLUME_SET
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eGEOMETRIC_TOLERANCE`` )
    public var DISPLACEMENT: eLENGTH_MEASURE_WITH_UNIT?  {
      switch self {
      case ._GEOMETRIC_TOLERANCE(let entity): return entity.DISPLACEMENT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var COMPONENT_SHAPE_ASPECT: sINTERNAL_OR_REFLECTED_SHAPE_ASPECT?  {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity.COMPONENT_SHAPE_ASPECT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var PARENT: eSHAPE_ASPECT?  {
      switch self {
      case ._REPRESENTATION/*(let entity)*/: return nil // AMBIGUOUS ATTRIBUTE for eREPRESENTATION
      case ._SHAPE_ASPECT(let entity): return entity.PARENT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eTOPOLOGICAL_REPRESENTATION_ITEM`` )
    public var EDGE_ELEMENT: eEDGE?  {
      switch self {
      case ._TOPOLOGICAL_REPRESENTATION_ITEM(let entity): return entity.EDGE_ELEMENT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eADDRESS`` )
    public var TELEX_NUMBER: tLABEL?  {
      switch self {
      case ._ADDRESS(let entity): return entity.TELEX_NUMBER
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eREPRESENTATION`` )
    public var CM_LINK: eVARIATIONAL_CURRENT_REPRESENTATION_RELATIONSHIP?  {
      switch self {
      case ._REPRESENTATION(let entity): return entity.CM_LINK
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eTOPOLOGICAL_REPRESENTATION_ITEM`` )
    public var LOOP_VERTEX: eVERTEX?  {
      switch self {
      case ._TOPOLOGICAL_REPRESENTATION_ITEM(let entity): return entity.LOOP_VERTEX
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var ORIENTATION: nORIENTED_TOLERANCE_ZONE_TYPE?  {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity.ORIENTATION
      case ._TOPOLOGICAL_REPRESENTATION_ITEM/*(let entity)*/: return nil // AMBIGUOUS ATTRIBUTE for eTOPOLOGICAL_REPRESENTATION_ITEM
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eADDRESS`` )
    public var FACSIMILE_NUMBER: tLABEL?  {
      switch self {
      case ._ADDRESS(let entity): return entity.FACSIMILE_NUMBER
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eGEOMETRIC_TOLERANCE`` )
    public var MODIFIER: nLIMIT_CONDITION?  {
      switch self {
      case ._GEOMETRIC_TOLERANCE(let entity): return entity.MODIFIER
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eGROUP`` )
    /// - origin: ENTITY( ``ePROPERTY_DEFINITION`` )
    /// - origin: ENTITY( ``eREPRESENTATION`` )
    public var ITEMS: (SDAI.SET<SDAI.GENERIC_ENTITY>/*[0:nil]*/ )?  {
      switch self {
      case ._GROUP(let entity): return SDAI.SET<SDAI.GENERIC_ENTITY>(entity.ITEMS)
      case ._PROPERTY_DEFINITION(let entity): return SDAI.SET<SDAI.GENERIC_ENTITY>(entity.ITEMS)
      case ._REPRESENTATION(let entity): return SDAI.SET<SDAI.GENERIC_ENTITY>(entity.ITEMS)
      case ._SHAPE_ASPECT/*(let entity)*/: return nil // AMBIGUOUS ATTRIBUTE for eSHAPE_ASPECT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eADDRESS`` )
    public var REGION: tLABEL?  {
      switch self {
      case ._ADDRESS(let entity): return entity.REGION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eTOPOLOGICAL_REPRESENTATION_ITEM`` )
    public var PERMANENT_AGGREGATE_ID: tIDENTIFIER?  {
      switch self {
      case ._TOPOLOGICAL_REPRESENTATION_ITEM(let entity): return entity.PERMANENT_AGGREGATE_ID
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eTOPOLOGICAL_REPRESENTATION_ITEM`` )
    public var PCURVE_REFERENCE: ePCURVE?  {
      switch self {
      case ._TOPOLOGICAL_REPRESENTATION_ITEM(let entity): return entity.PCURVE_REFERENCE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eREPRESENTATION`` )
    public var OUTLINES: (SDAI.SET<eANNOTATION_FILL_AREA>/*[1:nil]*/ )?  {
      switch self {
      case ._REPRESENTATION(let entity): return entity.OUTLINES
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eADDRESS`` )
    public var ELECTRONIC_MAIL_ADDRESS: tLABEL?  {
      switch self {
      case ._ADDRESS(let entity): return entity.ELECTRONIC_MAIL_ADDRESS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eGROUP`` )
    /// - origin: ENTITY( ``ePROPERTY_DEFINITION`` )
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var OF_SHAPE: ePRODUCT_DEFINITION_SHAPE?  {
      switch self {
      case ._GROUP(let entity): return ePRODUCT_DEFINITION_SHAPE(entity.OF_SHAPE)
      case ._PROPERTY_DEFINITION(let entity): return ePRODUCT_DEFINITION_SHAPE(entity.OF_SHAPE)
      case ._SHAPE_ASPECT(let entity): return entity.OF_SHAPE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eREPRESENTATION`` )
    public var REQUIRED_GENERAL_ACCURACY: (SDAI.SET<eSHAPE_MEASUREMENT_ACCURACY>/*[1:nil]*/ )?  {
      switch self {
      case ._REPRESENTATION(let entity): return entity.REQUIRED_GENERAL_ACCURACY
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eADDRESS`` )
    public var STREET_NUMBER: tLABEL?  {
      switch self {
      case ._ADDRESS(let entity): return entity.STREET_NUMBER
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eGEOMETRIC_TOLERANCE`` )
    public var DATUM_SYSTEM: (SDAI.SET<sDATUM_SYSTEM_OR_REFERENCE>/*[1:nil]*/ )?  {
      switch self {
      case ._GEOMETRIC_TOLERANCE(let entity): return entity.DATUM_SYSTEM
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eACTION`` )
    public var CHOSEN_METHOD: eACTION_METHOD?  {
      switch self {
      case ._ACTION(let entity): return entity.CHOSEN_METHOD
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eTOPOLOGICAL_REPRESENTATION_ITEM`` )
    public var VOLUME_GEOMETRY: eVOLUME?  {
      switch self {
      case ._TOPOLOGICAL_REPRESENTATION_ITEM(let entity): return entity.VOLUME_GEOMETRY
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eTOPOLOGICAL_REPRESENTATION_ITEM`` )
    public var PATH_ELEMENT: ePATH?  {
      switch self {
      case ._TOPOLOGICAL_REPRESENTATION_ITEM(let entity): return entity.PATH_ELEMENT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eREPRESENTATION`` )
    public var ASSOCIATED_SHAPE_REPRESENTATION: (SDAI.SET<eKINEMATIC_LINK_REPRESENTATION_ASSOCIATION>/*[0:1]*/ )?  {
      switch self {
      case ._REPRESENTATION(let entity): return entity.ASSOCIATED_SHAPE_REPRESENTATION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var DATUM_REFERENCE: eDATUM_SYSTEM?  {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity.DATUM_REFERENCE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eTOPOLOGICAL_REPRESENTATION_ITEM`` )
    public var EDGE_LIST: (SDAI.LIST_UNIQUE<eORIENTED_EDGE>/*[1:nil]*/ )?  {
      switch self {
      case ._TOPOLOGICAL_REPRESENTATION_ITEM(let entity): return entity.EDGE_LIST
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var IDENTIFICATION: tIDENTIFIER?  {
      switch self {
      case ._ACTION/*(let entity)*/: return nil // AMBIGUOUS ATTRIBUTE for eACTION
      case ._SHAPE_ASPECT(let entity): return entity.IDENTIFICATION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eTOPOLOGICAL_REPRESENTATION_ITEM`` )
    public var DISTANCE_FROM_START: tPOSITIVE_LENGTH_MEASURE?  {
      switch self {
      case ._TOPOLOGICAL_REPRESENTATION_ITEM(let entity): return entity.DISTANCE_FROM_START
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var ESTABLISHED_BY_RELATIONSHIPS: (SDAI.SET<eSHAPE_ASPECT_RELATIONSHIP>/*[1:nil]*/ )?  {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity.ESTABLISHED_BY_RELATIONSHIPS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eTOPOLOGICAL_REPRESENTATION_ITEM`` )
    public var PARENT_FACE: eFACE?  {
      switch self {
      case ._TOPOLOGICAL_REPRESENTATION_ITEM(let entity): return entity.PARENT_FACE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eASCRIBABLE_STATE_RELATIONSHIP`` )
    public var RELATION_TYPE: SDAI.STRING?  {
      switch self {
      case ._ASCRIBABLE_STATE_RELATIONSHIP(let entity): return entity.RELATION_TYPE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eREPRESENTATION`` )
    public var BASELINE_RATIO: tRATIO_MEASURE?  {
      switch self {
      case ._REPRESENTATION(let entity): return entity.BASELINE_RATIO
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eTOPOLOGICAL_REPRESENTATION_ITEM`` )
    public var PARENT_FACE_SET: eCONNECTED_FACE_SET?  {
      switch self {
      case ._TOPOLOGICAL_REPRESENTATION_ITEM(let entity): return entity.PARENT_FACE_SET
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eADDRESS`` )
    public var INTERNAL_LOCATION: tLABEL?  {
      switch self {
      case ._ADDRESS(let entity): return entity.INTERNAL_LOCATION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var CONSTITUENTS: (SDAI.LIST_UNIQUE<eDATUM_REFERENCE_COMPARTMENT>/*[1:3]*/ )?  {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity.CONSTITUENTS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var REPRESENTATION_ASSOCIATIONS: (SDAI.SET<ePROPERTY_DEFINITION_REPRESENTATION>/*[0:nil]*/ )?  {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity.REPRESENTATION_ASSOCIATIONS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eTOPOLOGICAL_REPRESENTATION_ITEM`` )
    public var OPEN_SHELL_ELEMENT: eOPEN_SHELL?  {
      switch self {
      case ._TOPOLOGICAL_REPRESENTATION_ITEM(let entity): return entity.OPEN_SHELL_ELEMENT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eREPRESENTATION`` )
    public var REVISION_IDENTIFIER: tIDENTIFIER?  {
      switch self {
      case ._REPRESENTATION(let entity): return entity.REVISION_IDENTIFIER
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eREPRESENTATION`` )
    public var SIZE: ePRESENTATION_SIZE?  {
      switch self {
      case ._REPRESENTATION(let entity): return entity.SIZE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eAPPLICATION_CONTEXT`` )
    public var CONTEXT_ELEMENTS: (SDAI.SET<eAPPLICATION_CONTEXT_ELEMENT>/*[1:nil]*/ )?  {
      switch self {
      case ._APPLICATION_CONTEXT(let entity): return entity.CONTEXT_ELEMENTS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eTOPOLOGICAL_REPRESENTATION_ITEM`` )
    public var VERTEX_SHELL_EXTENT: eVERTEX_LOOP?  {
      switch self {
      case ._TOPOLOGICAL_REPRESENTATION_ITEM(let entity): return entity.VERTEX_SHELL_EXTENT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eREPRESENTATION`` )
    public var TESSELLATION_ACCURACY_PARAMETERS: (SDAI.SET<sTESSELLATION_ACCURACY_PARAMETER_ITEM>/*[1:nil]*/ )?  {
      switch self {
      case ._REPRESENTATION(let entity): return entity.TESSELLATION_ACCURACY_PARAMETERS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var ANGLE: ePLANE_ANGLE_MEASURE_WITH_UNIT?  {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity.ANGLE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eREPRESENTATION`` )
    public var REPRESENTED_JOINTS: (SDAI.SET<eKINEMATIC_JOINT>/*[1:nil]*/ )?  {
      switch self {
      case ._REPRESENTATION(let entity): return entity.REPRESENTED_JOINTS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eTOPOLOGICAL_REPRESENTATION_ITEM`` )
    public var CLOSED_SHELL_ELEMENT: eCLOSED_SHELL?  {
      switch self {
      case ._TOPOLOGICAL_REPRESENTATION_ITEM(let entity): return entity.CLOSED_SHELL_ELEMENT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eTOPOLOGICAL_REPRESENTATION_ITEM`` )
    public var BOUND: eLOOP?  {
      switch self {
      case ._TOPOLOGICAL_REPRESENTATION_ITEM(let entity): return entity.BOUND
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eADDRESS`` )
    public var POSTAL_CODE: tLABEL?  {
      switch self {
      case ._ADDRESS(let entity): return entity.POSTAL_CODE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eTOPOLOGICAL_REPRESENTATION_ITEM`` )
    public var EDGE_END: eVERTEX?  {
      switch self {
      case ._TOPOLOGICAL_REPRESENTATION_ITEM(let entity): return entity.EDGE_END
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eADDRESS`` )
    public var POSTAL_BOX: tLABEL?  {
      switch self {
      case ._ADDRESS(let entity): return entity.POSTAL_BOX
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eREPRESENTATION`` )
    public var BOX_HEIGHT: tLENGTH_MEASURE?  {
      switch self {
      case ._REPRESENTATION(let entity): return entity.BOX_HEIGHT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eTOPOLOGICAL_REPRESENTATION_ITEM`` )
    public var CVS_VOLUMES: (SDAI.SET<eVOLUME_WITH_FACES>/*[1:nil]*/ )?  {
      switch self {
      case ._TOPOLOGICAL_REPRESENTATION_ITEM(let entity): return entity.CVS_VOLUMES
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eGEOMETRIC_TOLERANCE`` )
    public var UNIT_SIZE: sLENGTH_OR_PLANE_ANGLE_MEASURE_WITH_UNIT_SELECT?  {
      switch self {
      case ._GEOMETRIC_TOLERANCE(let entity): return entity.UNIT_SIZE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eADDRESS`` )
    public var URL: tIDENTIFIER?  {
      switch self {
      case ._ADDRESS(let entity): return entity.URL
      default: return nil
      }
    }

    //MARK: var MODIFIERS: (AMBIGUOUS)

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eTOPOLOGICAL_REPRESENTATION_ITEM`` )
    public var FACE_GEOMETRY: eSURFACE?  {
      switch self {
      case ._TOPOLOGICAL_REPRESENTATION_ITEM(let entity): return entity.FACE_GEOMETRY
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eTOPOLOGICAL_REPRESENTATION_ITEM`` )
    public var FACE_ELEMENT: eFACE?  {
      switch self {
      case ._TOPOLOGICAL_REPRESENTATION_ITEM(let entity): return entity.FACE_ELEMENT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eTOPOLOGICAL_REPRESENTATION_ITEM`` )
    public var VERTEX_GEOMETRY: ePOINT?  {
      switch self {
      case ._TOPOLOGICAL_REPRESENTATION_ITEM(let entity): return entity.VERTEX_GEOMETRY
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eTOPOLOGICAL_REPRESENTATION_ITEM`` )
    public var EDGE_LENGTH: tPOSITIVE_LENGTH_MEASURE?  {
      switch self {
      case ._TOPOLOGICAL_REPRESENTATION_ITEM(let entity): return entity.EDGE_LENGTH
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eGEOMETRIC_TOLERANCE`` )
    public var MAGNITUDE: eLENGTH_MEASURE_WITH_UNIT?  {
      switch self {
      case ._GEOMETRIC_TOLERANCE(let entity): return entity.MAGNITUDE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eTOPOLOGICAL_REPRESENTATION_ITEM`` )
    public var WIRE_SHELL_EXTENT: (SDAI.SET<eLOOP>/*[1:nil]*/ )?  {
      switch self {
      case ._TOPOLOGICAL_REPRESENTATION_ITEM(let entity): return entity.WIRE_SHELL_EXTENT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var COMPONENT_RELATIONSHIPS: (SDAI.SET<eSHAPE_ASPECT_RELATIONSHIP>/*[2:nil]*/ )?  {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity.COMPONENT_RELATIONSHIPS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var BASE: sDATUM_OR_COMMON_DATUM?  {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity.BASE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var BASE_COMMON_DATUM_LIST: tCOMMON_DATUM_LIST?  {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity.BASE_COMMON_DATUM_LIST
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eACTION`` )
    public var PRODUCT_DEFINITIONS: (SDAI.SET<ePROCESS_PRODUCT_ASSOCIATION>/*[1:nil]*/ )?  {
      switch self {
      case ._ACTION(let entity): return entity.PRODUCT_DEFINITIONS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eREPRESENTATION`` )
    public var STROKES: (SDAI.SET<eCURVE>/*[1:nil]*/ )?  {
      switch self {
      case ._REPRESENTATION(let entity): return entity.STROKES
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eTOPOLOGICAL_REPRESENTATION_ITEM`` )
    public var EDGE_START: eVERTEX?  {
      switch self {
      case ._TOPOLOGICAL_REPRESENTATION_ITEM(let entity): return entity.EDGE_START
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eAPPLICATION_CONTEXT`` )
    public var APPLICATION: tLABEL?  {
      switch self {
      case ._APPLICATION_CONTEXT(let entity): return entity.APPLICATION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eTOPOLOGICAL_REPRESENTATION_ITEM`` )
    public var EDGE_GEOMETRY: eCURVE?  {
      switch self {
      case ._TOPOLOGICAL_REPRESENTATION_ITEM(let entity): return entity.EDGE_GEOMETRY
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eACTION`` )
    /// - origin: ENTITY( ``eAPPLICATION_CONTEXT`` )
    /// - origin: ENTITY( ``eASCRIBABLE_STATE_RELATIONSHIP`` )
    /// - origin: ENTITY( ``eDIMENSIONAL_SIZE`` )
    /// - origin: ENTITY( ``eGEOMETRIC_TOLERANCE`` )
    /// - origin: ENTITY( ``eGROUP`` )
    /// - origin: ENTITY( ``eORGANIZATIONAL_PROJECT`` )
    /// - origin: ENTITY( ``ePRODUCT_CATEGORY`` )
    /// - origin: ENTITY( ``ePROPERTY_DEFINITION`` )
    /// - origin: ENTITY( ``eREPRESENTATION`` )
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    /// - origin: ENTITY( ``eSHAPE_ASPECT_RELATIONSHIP`` )
    public var ID: tIDENTIFIER?  {
      switch self {
      case ._ACTION(let entity): return entity.ID
      case ._APPLICATION_CONTEXT(let entity): return entity.ID
      case ._ASCRIBABLE_STATE_RELATIONSHIP(let entity): return entity.ID
      case ._DIMENSIONAL_SIZE(let entity): return entity.ID
      case ._GEOMETRIC_TOLERANCE(let entity): return entity.ID
      case ._GROUP(let entity): return entity.ID
      case ._ORGANIZATIONAL_PROJECT(let entity): return entity.ID
      case ._PRODUCT_CATEGORY(let entity): return entity.ID
      case ._PROPERTY_DEFINITION(let entity): return entity.ID
      case ._REPRESENTATION(let entity): return entity.ID
      case ._SHAPE_ASPECT(let entity): return entity.ID
      case ._SHAPE_ASPECT_RELATIONSHIP(let entity): return entity.ID
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eDIMENSIONAL_SIZE`` )
    public var APPLIES_TO: eSHAPE_ASPECT?  {
      switch self {
      case ._DIMENSIONAL_SIZE(let entity): return entity.APPLIES_TO
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eREPRESENTATION`` )
    public var APPLIED_GENERAL_ACCURACY: (SDAI.SET<eSHAPE_MEASUREMENT_ACCURACY>/*[1:nil]*/ )?  {
      switch self {
      case ._REPRESENTATION(let entity): return entity.APPLIED_GENERAL_ACCURACY
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var FEATURE_BASIS_RELATIONSHIP: (SDAI.SET<eSHAPE_ASPECT_RELATIONSHIP>/*[1:nil]*/ )?  {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity.FEATURE_BASIS_RELATIONSHIP
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eREPRESENTATION`` )
    public var CONTEXT_OF_ITEMS: eREPRESENTATION_CONTEXT?  {
      switch self {
      case ._REPRESENTATION(let entity): return entity.CONTEXT_OF_ITEMS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eADDRESS`` )
    public var TOWN: tLABEL?  {
      switch self {
      case ._ADDRESS(let entity): return entity.TOWN
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eGEOMETRIC_TOLERANCE`` )
    public var AREA_TYPE: nAREA_UNIT_TYPE?  {
      switch self {
      case ._GEOMETRIC_TOLERANCE(let entity): return entity.AREA_TYPE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eADDRESS`` )
    public var COUNTRY: tLABEL?  {
      switch self {
      case ._ADDRESS(let entity): return entity.COUNTRY
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var DIRECTION: nDIRECTED_TOLERANCE_ZONE_TYPE?  {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity.DIRECTION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    /// - origin: ENTITY( ``eSHAPE_ASPECT_RELATIONSHIP`` )
    public var RELATED_SHAPE_ASPECT: eSHAPE_ASPECT?  {
      switch self {
      case ._SHAPE_ASPECT(let entity): return eSHAPE_ASPECT(entity.RELATED_SHAPE_ASPECT)
      case ._SHAPE_ASPECT_RELATIONSHIP(let entity): return entity.RELATED_SHAPE_ASPECT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eDIMENSIONAL_SIZE`` )
    /// - origin: ENTITY( ``eSHAPE_ASPECT_RELATIONSHIP`` )
    public var ANGLE_SELECTION: nANGLE_RELATOR?  {
      switch self {
      case ._DIMENSIONAL_SIZE(let entity): return entity.ANGLE_SELECTION
      case ._SHAPE_ASPECT_RELATIONSHIP(let entity): return entity.ANGLE_SELECTION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eTOPOLOGICAL_REPRESENTATION_ITEM`` )
    public var CES_EDGES: (SDAI.SET<eEDGE>/*[1:nil]*/ )?  {
      switch self {
      case ._TOPOLOGICAL_REPRESENTATION_ITEM(let entity): return entity.CES_EDGES
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eORGANIZATIONAL_PROJECT`` )
    public var RESPONSIBLE_ORGANIZATIONS: (SDAI.SET<eORGANIZATION>/*[1:nil]*/ )?  {
      switch self {
      case ._ORGANIZATIONAL_PROJECT(let entity): return entity.RESPONSIBLE_ORGANIZATIONS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``ePROPERTY_DEFINITION`` )
    public var REPRESENTATION_RELATION: eKINEMATIC_PROPERTY_DEFINITION_REPRESENTATION?  {
      switch self {
      case ._PROPERTY_DEFINITION(let entity): return entity.REPRESENTATION_RELATION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var DEFINING_TOLERANCE: (SDAI.SET<sTOLERANCE_ZONE_TARGET>/*[1:nil]*/ )?  {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity.DEFINING_TOLERANCE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eADDRESS`` )
    public var TELEPHONE_NUMBER: tLABEL?  {
      switch self {
      case ._ADDRESS(let entity): return entity.TELEPHONE_NUMBER
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eREPRESENTATION`` )
    public var NEUTRAL_SKETCH_SEMANTICS: nCURVES_OR_AREA?  {
      switch self {
      case ._REPRESENTATION(let entity): return entity.NEUTRAL_SKETCH_SEMANTICS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eREPRESENTATION`` )
    public var REPRESENTED_LINK: eKINEMATIC_LINK?  {
      switch self {
      case ._REPRESENTATION(let entity): return entity.REPRESENTED_LINK
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eREPRESENTATION`` )
    public var REPRESENTED_TOPOLOGY: sKINEMATIC_TOPOLOGY_REPRESENTATION_SELECT?  {
      switch self {
      case ._REPRESENTATION(let entity): return entity.REPRESENTED_TOPOLOGY
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eREPRESENTATION`` )
    public var UNCERTAINTY: (SDAI.SET<eUNCERTAINTY_MEASURE_WITH_UNIT>/*[1:nil]*/ )?  {
      switch self {
      case ._REPRESENTATION(let entity): return entity.UNCERTAINTY
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eGROUP`` )
    /// - origin: ENTITY( ``ePROPERTY_DEFINITION`` )
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var ASSIGNED_GROUP: eMATED_PART_RELATIONSHIP?  {
      switch self {
      case ._GROUP(let entity): return entity.ASSIGNED_GROUP
      case ._PROPERTY_DEFINITION(let entity): return entity.ASSIGNED_GROUP
      case ._SHAPE_ASPECT(let entity): return entity.ASSIGNED_GROUP
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eTOPOLOGICAL_REPRESENTATION_ITEM`` )
    public var PERMANENT_ID: tIDENTIFIER?  {
      switch self {
      case ._TOPOLOGICAL_REPRESENTATION_ITEM(let entity): return entity.PERMANENT_ID
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var LOCATION: sMULTI_OR_NEXT_ASSEMBLY_USAGE_OCCURRENCE?  {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity.LOCATION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eGROUP`` )
    /// - origin: ENTITY( ``ePROPERTY_DEFINITION`` )
    public var DEFINITION: sCHARACTERIZED_DEFINITION?  {
      switch self {
      case ._GROUP(let entity): return sCHARACTERIZED_DEFINITION(entity.DEFINITION)
      case ._PROPERTY_DEFINITION(let entity): return entity.DEFINITION
      case ._SHAPE_ASPECT/*(let entity)*/: return nil // AMBIGUOUS ATTRIBUTE for eSHAPE_ASPECT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eGEOMETRIC_TOLERANCE`` )
    public var CONTROLLING_SHAPE: ePRODUCT_DEFINITION_SHAPE?  {
      switch self {
      case ._GEOMETRIC_TOLERANCE(let entity): return entity.CONTROLLING_SHAPE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eGEOMETRIC_TOLERANCE`` )
    public var SECOND_UNIT_SIZE: sLENGTH_OR_PLANE_ANGLE_MEASURE_WITH_UNIT_SELECT?  {
      switch self {
      case ._GEOMETRIC_TOLERANCE(let entity): return entity.SECOND_UNIT_SIZE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eACTION`` )
    /// - origin: ENTITY( ``eADDRESS`` )
    /// - origin: ENTITY( ``eASCRIBABLE_STATE_RELATIONSHIP`` )
    /// - origin: ENTITY( ``eDIMENSIONAL_SIZE`` )
    /// - origin: ENTITY( ``eGEOMETRIC_TOLERANCE`` )
    /// - origin: ENTITY( ``eGROUP`` )
    /// - origin: ENTITY( ``eORGANIZATIONAL_PROJECT`` )
    /// - origin: ENTITY( ``ePRODUCT_CATEGORY`` )
    /// - origin: ENTITY( ``ePROPERTY_DEFINITION`` )
    /// - origin: ENTITY( ``eREPRESENTATION`` )
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    /// - origin: ENTITY( ``eSHAPE_ASPECT_RELATIONSHIP`` )
    /// - origin: ENTITY( ``eTOPOLOGICAL_REPRESENTATION_ITEM`` )
    public var NAME: tLABEL?  {
      switch self {
      case ._ACTION(let entity): return entity.NAME
      case ._ADDRESS(let entity): return entity.NAME
      case ._ASCRIBABLE_STATE_RELATIONSHIP(let entity): return entity.NAME
      case ._DIMENSIONAL_SIZE(let entity): return entity.NAME
      case ._GEOMETRIC_TOLERANCE(let entity): return entity.NAME
      case ._GROUP(let entity): return entity.NAME
      case ._ORGANIZATIONAL_PROJECT(let entity): return entity.NAME
      case ._PRODUCT_CATEGORY(let entity): return entity.NAME
      case ._PROPERTY_DEFINITION(let entity): return entity.NAME
      case ._REPRESENTATION(let entity): return entity.NAME
      case ._SHAPE_ASPECT(let entity): return entity.NAME
      case ._SHAPE_ASPECT_RELATIONSHIP(let entity): return entity.NAME
      case ._TOPOLOGICAL_REPRESENTATION_ITEM(let entity): return entity.NAME
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eASCRIBABLE_STATE_RELATIONSHIP`` )
    public var RELATING_ASCRIBABLE_STATE: eASCRIBABLE_STATE?  {
      switch self {
      case ._ASCRIBABLE_STATE_RELATIONSHIP(let entity): return entity.RELATING_ASCRIBABLE_STATE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var BASIS_RELATIONSHIPS: (SDAI.SET<eSHAPE_ASPECT_DERIVING_RELATIONSHIP>/*[1:nil]*/ )?  {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity.BASIS_RELATIONSHIPS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eGEOMETRIC_TOLERANCE`` )
    public var TOLERANCED_SHAPE_ASPECT: sGEOMETRIC_TOLERANCE_TARGET?  {
      switch self {
      case ._GEOMETRIC_TOLERANCE(let entity): return entity.TOLERANCED_SHAPE_ASPECT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    /// - origin: ENTITY( ``eSHAPE_ASPECT_RELATIONSHIP`` )
    public var RELATING_SHAPE_ASPECT: eSHAPE_ASPECT?  {
      switch self {
      case ._SHAPE_ASPECT(let entity): return eSHAPE_ASPECT(entity.RELATING_SHAPE_ASPECT)
      case ._SHAPE_ASPECT_RELATIONSHIP(let entity): return entity.RELATING_SHAPE_ASPECT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eREPRESENTATION`` )
    public var REPRESENTED_MECHANISM: eMECHANISM_REPRESENTATION?  {
      switch self {
      case ._REPRESENTATION(let entity): return entity.REPRESENTED_MECHANISM
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var OFFSET: eMEASURE_WITH_UNIT?  {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity.OFFSET
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eTOPOLOGICAL_REPRESENTATION_ITEM`` )
    public var POLYGON: (SDAI.LIST_UNIQUE<eCARTESIAN_POINT>/*[3:nil]*/ )?  {
      switch self {
      case ._TOPOLOGICAL_REPRESENTATION_ITEM(let entity): return entity.POLYGON
      default: return nil
      }
    }

    /// attribute of SELECT type ``sID_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var TARGET_BASIS_RELATIONSHIP: (SDAI.SET<eSHAPE_ASPECT_RELATIONSHIP>/*[1:nil]*/ )?  {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity.TARGET_BASIS_RELATIONSHIP
      default: return nil
      }
    }


    //MARK: - SDAIValue
    public func isValueEqual<T: SDAIValue>(to rhs: T) -> Bool {
      switch self {
      case ._ACTION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._ADDRESS(let selection): return selection.value.isValueEqual(to: rhs)
      case ._APPLICATION_CONTEXT(let selection): return selection.value.isValueEqual(to: rhs)
      case ._ASCRIBABLE_STATE_RELATIONSHIP(let selection): return selection.value.isValueEqual(to: rhs)
      case ._DIMENSIONAL_SIZE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._GEOMETRIC_TOLERANCE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._GROUP(let selection): return selection.value.isValueEqual(to: rhs)
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PRODUCT_CATEGORY(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PROPERTY_DEFINITION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._REPRESENTATION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._SHAPE_ASPECT(let selection): return selection.value.isValueEqual(to: rhs)
      case ._SHAPE_ASPECT_RELATIONSHIP(let selection): return selection.value.isValueEqual(to: rhs)
      case ._TOPOLOGICAL_REPRESENTATION_ITEM(let selection): return selection.value.isValueEqual(to: rhs)
      }
    }

    public func isValueEqualOptionally<T: SDAIValue>(to rhs: T?) -> Bool? {
      switch self {
      case ._ACTION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._ADDRESS(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._APPLICATION_CONTEXT(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._ASCRIBABLE_STATE_RELATIONSHIP(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._DIMENSIONAL_SIZE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._GEOMETRIC_TOLERANCE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._GROUP(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PRODUCT_CATEGORY(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PROPERTY_DEFINITION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._REPRESENTATION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._SHAPE_ASPECT(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._SHAPE_ASPECT_RELATIONSHIP(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._TOPOLOGICAL_REPRESENTATION_ITEM(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      }
    }

    public func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      switch self {
      case ._ACTION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._ADDRESS(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._APPLICATION_CONTEXT(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._ASCRIBABLE_STATE_RELATIONSHIP(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._DIMENSIONAL_SIZE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._GEOMETRIC_TOLERANCE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._GROUP(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._ORGANIZATIONAL_PROJECT(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PRODUCT_CATEGORY(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PROPERTY_DEFINITION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._REPRESENTATION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._SHAPE_ASPECT(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._SHAPE_ASPECT_RELATIONSHIP(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._TOPOLOGICAL_REPRESENTATION_ITEM(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      }
    }

    public func isValueEqual<T: SDAIValue>(to rhs: T, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      switch self {
      case ._ACTION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._ADDRESS(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._APPLICATION_CONTEXT(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._ASCRIBABLE_STATE_RELATIONSHIP(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._DIMENSIONAL_SIZE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._GEOMETRIC_TOLERANCE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._GROUP(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PRODUCT_CATEGORY(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PROPERTY_DEFINITION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._REPRESENTATION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._SHAPE_ASPECT(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._SHAPE_ASPECT_RELATIONSHIP(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._TOPOLOGICAL_REPRESENTATION_ITEM(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      }
    }

    public func isValueEqualOptionally<T: SDAIValue>(to rhs: T?, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      switch self {
      case ._ACTION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._ADDRESS(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._APPLICATION_CONTEXT(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._ASCRIBABLE_STATE_RELATIONSHIP(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._DIMENSIONAL_SIZE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._GEOMETRIC_TOLERANCE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._GROUP(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PRODUCT_CATEGORY(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PROPERTY_DEFINITION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._REPRESENTATION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._SHAPE_ASPECT(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._SHAPE_ASPECT_RELATIONSHIP(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._TOPOLOGICAL_REPRESENTATION_ITEM(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      }
    }


    //MARK: SDAIGenericTypeBase
    public func copy() -> Self {
      switch self {
      case ._ACTION(let selection): return ._ACTION(selection.copy())
      case ._ADDRESS(let selection): return ._ADDRESS(selection.copy())
      case ._APPLICATION_CONTEXT(let selection): return ._APPLICATION_CONTEXT(selection.copy())
      case ._ASCRIBABLE_STATE_RELATIONSHIP(let selection): return ._ASCRIBABLE_STATE_RELATIONSHIP(selection.copy())
      case ._DIMENSIONAL_SIZE(let selection): return ._DIMENSIONAL_SIZE(selection.copy())
      case ._GEOMETRIC_TOLERANCE(let selection): return ._GEOMETRIC_TOLERANCE(selection.copy())
      case ._GROUP(let selection): return ._GROUP(selection.copy())
      case ._ORGANIZATIONAL_PROJECT(let selection): return ._ORGANIZATIONAL_PROJECT(selection.copy())
      case ._PRODUCT_CATEGORY(let selection): return ._PRODUCT_CATEGORY(selection.copy())
      case ._PROPERTY_DEFINITION(let selection): return ._PROPERTY_DEFINITION(selection.copy())
      case ._REPRESENTATION(let selection): return ._REPRESENTATION(selection.copy())
      case ._SHAPE_ASPECT(let selection): return ._SHAPE_ASPECT(selection.copy())
      case ._SHAPE_ASPECT_RELATIONSHIP(let selection): return ._SHAPE_ASPECT_RELATIONSHIP(selection.copy())
      case ._TOPOLOGICAL_REPRESENTATION_ITEM(let selection): return ._TOPOLOGICAL_REPRESENTATION_ITEM(selection.copy())
      }
    }

    //MARK: SDAIGenericType
    public var typeMembers: Set<SDAI.STRING> {
      var members: Set<SDAI.STRING> = [SDAI.STRING(Self.typeName)]
      switch self {
      case ._ACTION(let selection): members.formUnion(selection.typeMembers)
      case ._ADDRESS(let selection): members.formUnion(selection.typeMembers)
      case ._APPLICATION_CONTEXT(let selection): members.formUnion(selection.typeMembers)
      case ._ASCRIBABLE_STATE_RELATIONSHIP(let selection): members.formUnion(selection.typeMembers)
      case ._DIMENSIONAL_SIZE(let selection): members.formUnion(selection.typeMembers)
      case ._GEOMETRIC_TOLERANCE(let selection): members.formUnion(selection.typeMembers)
      case ._GROUP(let selection): members.formUnion(selection.typeMembers)
      case ._ORGANIZATIONAL_PROJECT(let selection): members.formUnion(selection.typeMembers)
      case ._PRODUCT_CATEGORY(let selection): members.formUnion(selection.typeMembers)
      case ._PROPERTY_DEFINITION(let selection): members.formUnion(selection.typeMembers)
      case ._REPRESENTATION(let selection): members.formUnion(selection.typeMembers)
      case ._SHAPE_ASPECT(let selection): members.formUnion(selection.typeMembers)
      case ._SHAPE_ASPECT_RELATIONSHIP(let selection): members.formUnion(selection.typeMembers)
      case ._TOPOLOGICAL_REPRESENTATION_ITEM(let selection): members.formUnion(selection.typeMembers)
      }
      return members
    }

    public var entityReference: SDAI.EntityReference? {
      switch self {
      case ._ACTION(let selection): return selection.entityReference
      case ._ADDRESS(let selection): return selection.entityReference
      case ._APPLICATION_CONTEXT(let selection): return selection.entityReference
      case ._ASCRIBABLE_STATE_RELATIONSHIP(let selection): return selection.entityReference
      case ._DIMENSIONAL_SIZE(let selection): return selection.entityReference
      case ._GEOMETRIC_TOLERANCE(let selection): return selection.entityReference
      case ._GROUP(let selection): return selection.entityReference
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.entityReference
      case ._PRODUCT_CATEGORY(let selection): return selection.entityReference
      case ._PROPERTY_DEFINITION(let selection): return selection.entityReference
      case ._REPRESENTATION(let selection): return selection.entityReference
      case ._SHAPE_ASPECT(let selection): return selection.entityReference
      case ._SHAPE_ASPECT_RELATIONSHIP(let selection): return selection.entityReference
      case ._TOPOLOGICAL_REPRESENTATION_ITEM(let selection): return selection.entityReference
      }
    }
    public var stringValue: SDAI.STRING? {
      switch self {
      case ._ACTION(let selection): return selection.stringValue
      case ._ADDRESS(let selection): return selection.stringValue
      case ._APPLICATION_CONTEXT(let selection): return selection.stringValue
      case ._ASCRIBABLE_STATE_RELATIONSHIP(let selection): return selection.stringValue
      case ._DIMENSIONAL_SIZE(let selection): return selection.stringValue
      case ._GEOMETRIC_TOLERANCE(let selection): return selection.stringValue
      case ._GROUP(let selection): return selection.stringValue
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.stringValue
      case ._PRODUCT_CATEGORY(let selection): return selection.stringValue
      case ._PROPERTY_DEFINITION(let selection): return selection.stringValue
      case ._REPRESENTATION(let selection): return selection.stringValue
      case ._SHAPE_ASPECT(let selection): return selection.stringValue
      case ._SHAPE_ASPECT_RELATIONSHIP(let selection): return selection.stringValue
      case ._TOPOLOGICAL_REPRESENTATION_ITEM(let selection): return selection.stringValue
      }
    }
    public var binaryValue: SDAI.BINARY? {
      switch self {
      case ._ACTION(let selection): return selection.binaryValue
      case ._ADDRESS(let selection): return selection.binaryValue
      case ._APPLICATION_CONTEXT(let selection): return selection.binaryValue
      case ._ASCRIBABLE_STATE_RELATIONSHIP(let selection): return selection.binaryValue
      case ._DIMENSIONAL_SIZE(let selection): return selection.binaryValue
      case ._GEOMETRIC_TOLERANCE(let selection): return selection.binaryValue
      case ._GROUP(let selection): return selection.binaryValue
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.binaryValue
      case ._PRODUCT_CATEGORY(let selection): return selection.binaryValue
      case ._PROPERTY_DEFINITION(let selection): return selection.binaryValue
      case ._REPRESENTATION(let selection): return selection.binaryValue
      case ._SHAPE_ASPECT(let selection): return selection.binaryValue
      case ._SHAPE_ASPECT_RELATIONSHIP(let selection): return selection.binaryValue
      case ._TOPOLOGICAL_REPRESENTATION_ITEM(let selection): return selection.binaryValue
      }
    }
    public var logicalValue: SDAI.LOGICAL? {
      switch self {
      case ._ACTION(let selection): return selection.logicalValue
      case ._ADDRESS(let selection): return selection.logicalValue
      case ._APPLICATION_CONTEXT(let selection): return selection.logicalValue
      case ._ASCRIBABLE_STATE_RELATIONSHIP(let selection): return selection.logicalValue
      case ._DIMENSIONAL_SIZE(let selection): return selection.logicalValue
      case ._GEOMETRIC_TOLERANCE(let selection): return selection.logicalValue
      case ._GROUP(let selection): return selection.logicalValue
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.logicalValue
      case ._PRODUCT_CATEGORY(let selection): return selection.logicalValue
      case ._PROPERTY_DEFINITION(let selection): return selection.logicalValue
      case ._REPRESENTATION(let selection): return selection.logicalValue
      case ._SHAPE_ASPECT(let selection): return selection.logicalValue
      case ._SHAPE_ASPECT_RELATIONSHIP(let selection): return selection.logicalValue
      case ._TOPOLOGICAL_REPRESENTATION_ITEM(let selection): return selection.logicalValue
      }
    }
    public var booleanValue: SDAI.BOOLEAN? {
      switch self {
      case ._ACTION(let selection): return selection.booleanValue
      case ._ADDRESS(let selection): return selection.booleanValue
      case ._APPLICATION_CONTEXT(let selection): return selection.booleanValue
      case ._ASCRIBABLE_STATE_RELATIONSHIP(let selection): return selection.booleanValue
      case ._DIMENSIONAL_SIZE(let selection): return selection.booleanValue
      case ._GEOMETRIC_TOLERANCE(let selection): return selection.booleanValue
      case ._GROUP(let selection): return selection.booleanValue
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.booleanValue
      case ._PRODUCT_CATEGORY(let selection): return selection.booleanValue
      case ._PROPERTY_DEFINITION(let selection): return selection.booleanValue
      case ._REPRESENTATION(let selection): return selection.booleanValue
      case ._SHAPE_ASPECT(let selection): return selection.booleanValue
      case ._SHAPE_ASPECT_RELATIONSHIP(let selection): return selection.booleanValue
      case ._TOPOLOGICAL_REPRESENTATION_ITEM(let selection): return selection.booleanValue
      }
    }
    public var numberValue: SDAI.NUMBER? {
      switch self {
      case ._ACTION(let selection): return selection.numberValue
      case ._ADDRESS(let selection): return selection.numberValue
      case ._APPLICATION_CONTEXT(let selection): return selection.numberValue
      case ._ASCRIBABLE_STATE_RELATIONSHIP(let selection): return selection.numberValue
      case ._DIMENSIONAL_SIZE(let selection): return selection.numberValue
      case ._GEOMETRIC_TOLERANCE(let selection): return selection.numberValue
      case ._GROUP(let selection): return selection.numberValue
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.numberValue
      case ._PRODUCT_CATEGORY(let selection): return selection.numberValue
      case ._PROPERTY_DEFINITION(let selection): return selection.numberValue
      case ._REPRESENTATION(let selection): return selection.numberValue
      case ._SHAPE_ASPECT(let selection): return selection.numberValue
      case ._SHAPE_ASPECT_RELATIONSHIP(let selection): return selection.numberValue
      case ._TOPOLOGICAL_REPRESENTATION_ITEM(let selection): return selection.numberValue
      }
    }
    public var realValue: SDAI.REAL? {
      switch self {
      case ._ACTION(let selection): return selection.realValue
      case ._ADDRESS(let selection): return selection.realValue
      case ._APPLICATION_CONTEXT(let selection): return selection.realValue
      case ._ASCRIBABLE_STATE_RELATIONSHIP(let selection): return selection.realValue
      case ._DIMENSIONAL_SIZE(let selection): return selection.realValue
      case ._GEOMETRIC_TOLERANCE(let selection): return selection.realValue
      case ._GROUP(let selection): return selection.realValue
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.realValue
      case ._PRODUCT_CATEGORY(let selection): return selection.realValue
      case ._PROPERTY_DEFINITION(let selection): return selection.realValue
      case ._REPRESENTATION(let selection): return selection.realValue
      case ._SHAPE_ASPECT(let selection): return selection.realValue
      case ._SHAPE_ASPECT_RELATIONSHIP(let selection): return selection.realValue
      case ._TOPOLOGICAL_REPRESENTATION_ITEM(let selection): return selection.realValue
      }
    }
    public var integerValue: SDAI.INTEGER? {
      switch self {
      case ._ACTION(let selection): return selection.integerValue
      case ._ADDRESS(let selection): return selection.integerValue
      case ._APPLICATION_CONTEXT(let selection): return selection.integerValue
      case ._ASCRIBABLE_STATE_RELATIONSHIP(let selection): return selection.integerValue
      case ._DIMENSIONAL_SIZE(let selection): return selection.integerValue
      case ._GEOMETRIC_TOLERANCE(let selection): return selection.integerValue
      case ._GROUP(let selection): return selection.integerValue
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.integerValue
      case ._PRODUCT_CATEGORY(let selection): return selection.integerValue
      case ._PROPERTY_DEFINITION(let selection): return selection.integerValue
      case ._REPRESENTATION(let selection): return selection.integerValue
      case ._SHAPE_ASPECT(let selection): return selection.integerValue
      case ._SHAPE_ASPECT_RELATIONSHIP(let selection): return selection.integerValue
      case ._TOPOLOGICAL_REPRESENTATION_ITEM(let selection): return selection.integerValue
      }
    }
    public var genericEnumValue: SDAI.GenericEnumValue? {
      switch self {
      case ._ACTION(let selection): return selection.genericEnumValue
      case ._ADDRESS(let selection): return selection.genericEnumValue
      case ._APPLICATION_CONTEXT(let selection): return selection.genericEnumValue
      case ._ASCRIBABLE_STATE_RELATIONSHIP(let selection): return selection.genericEnumValue
      case ._DIMENSIONAL_SIZE(let selection): return selection.genericEnumValue
      case ._GEOMETRIC_TOLERANCE(let selection): return selection.genericEnumValue
      case ._GROUP(let selection): return selection.genericEnumValue
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.genericEnumValue
      case ._PRODUCT_CATEGORY(let selection): return selection.genericEnumValue
      case ._PROPERTY_DEFINITION(let selection): return selection.genericEnumValue
      case ._REPRESENTATION(let selection): return selection.genericEnumValue
      case ._SHAPE_ASPECT(let selection): return selection.genericEnumValue
      case ._SHAPE_ASPECT_RELATIONSHIP(let selection): return selection.genericEnumValue
      case ._TOPOLOGICAL_REPRESENTATION_ITEM(let selection): return selection.genericEnumValue
      }
    }
    public func arrayOptionalValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.ARRAY_OPTIONAL<ELEM>? {
      switch self {
      case ._ACTION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._ADDRESS(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._APPLICATION_CONTEXT(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._ASCRIBABLE_STATE_RELATIONSHIP(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._DIMENSIONAL_SIZE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._GEOMETRIC_TOLERANCE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._GROUP(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PRODUCT_CATEGORY(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PROPERTY_DEFINITION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._REPRESENTATION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._SHAPE_ASPECT(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._SHAPE_ASPECT_RELATIONSHIP(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._TOPOLOGICAL_REPRESENTATION_ITEM(let selection): return selection.arrayOptionalValue(elementType:elementType)
      }
    }
    public func arrayValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.ARRAY<ELEM>? {
      switch self {
      case ._ACTION(let selection): return selection.arrayValue(elementType:elementType)
      case ._ADDRESS(let selection): return selection.arrayValue(elementType:elementType)
      case ._APPLICATION_CONTEXT(let selection): return selection.arrayValue(elementType:elementType)
      case ._ASCRIBABLE_STATE_RELATIONSHIP(let selection): return selection.arrayValue(elementType:elementType)
      case ._DIMENSIONAL_SIZE(let selection): return selection.arrayValue(elementType:elementType)
      case ._GEOMETRIC_TOLERANCE(let selection): return selection.arrayValue(elementType:elementType)
      case ._GROUP(let selection): return selection.arrayValue(elementType:elementType)
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.arrayValue(elementType:elementType)
      case ._PRODUCT_CATEGORY(let selection): return selection.arrayValue(elementType:elementType)
      case ._PROPERTY_DEFINITION(let selection): return selection.arrayValue(elementType:elementType)
      case ._REPRESENTATION(let selection): return selection.arrayValue(elementType:elementType)
      case ._SHAPE_ASPECT(let selection): return selection.arrayValue(elementType:elementType)
      case ._SHAPE_ASPECT_RELATIONSHIP(let selection): return selection.arrayValue(elementType:elementType)
      case ._TOPOLOGICAL_REPRESENTATION_ITEM(let selection): return selection.arrayValue(elementType:elementType)
      }
    }
    public func listValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.LIST<ELEM>? {
      switch self {
      case ._ACTION(let selection): return selection.listValue(elementType:elementType)
      case ._ADDRESS(let selection): return selection.listValue(elementType:elementType)
      case ._APPLICATION_CONTEXT(let selection): return selection.listValue(elementType:elementType)
      case ._ASCRIBABLE_STATE_RELATIONSHIP(let selection): return selection.listValue(elementType:elementType)
      case ._DIMENSIONAL_SIZE(let selection): return selection.listValue(elementType:elementType)
      case ._GEOMETRIC_TOLERANCE(let selection): return selection.listValue(elementType:elementType)
      case ._GROUP(let selection): return selection.listValue(elementType:elementType)
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.listValue(elementType:elementType)
      case ._PRODUCT_CATEGORY(let selection): return selection.listValue(elementType:elementType)
      case ._PROPERTY_DEFINITION(let selection): return selection.listValue(elementType:elementType)
      case ._REPRESENTATION(let selection): return selection.listValue(elementType:elementType)
      case ._SHAPE_ASPECT(let selection): return selection.listValue(elementType:elementType)
      case ._SHAPE_ASPECT_RELATIONSHIP(let selection): return selection.listValue(elementType:elementType)
      case ._TOPOLOGICAL_REPRESENTATION_ITEM(let selection): return selection.listValue(elementType:elementType)
      }
    }
    public func bagValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.BAG<ELEM>? {
      switch self {
      case ._ACTION(let selection): return selection.bagValue(elementType:elementType)
      case ._ADDRESS(let selection): return selection.bagValue(elementType:elementType)
      case ._APPLICATION_CONTEXT(let selection): return selection.bagValue(elementType:elementType)
      case ._ASCRIBABLE_STATE_RELATIONSHIP(let selection): return selection.bagValue(elementType:elementType)
      case ._DIMENSIONAL_SIZE(let selection): return selection.bagValue(elementType:elementType)
      case ._GEOMETRIC_TOLERANCE(let selection): return selection.bagValue(elementType:elementType)
      case ._GROUP(let selection): return selection.bagValue(elementType:elementType)
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.bagValue(elementType:elementType)
      case ._PRODUCT_CATEGORY(let selection): return selection.bagValue(elementType:elementType)
      case ._PROPERTY_DEFINITION(let selection): return selection.bagValue(elementType:elementType)
      case ._REPRESENTATION(let selection): return selection.bagValue(elementType:elementType)
      case ._SHAPE_ASPECT(let selection): return selection.bagValue(elementType:elementType)
      case ._SHAPE_ASPECT_RELATIONSHIP(let selection): return selection.bagValue(elementType:elementType)
      case ._TOPOLOGICAL_REPRESENTATION_ITEM(let selection): return selection.bagValue(elementType:elementType)
      }
    }
    public func setValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.SET<ELEM>? {
      switch self {
      case ._ACTION(let selection): return selection.setValue(elementType:elementType)
      case ._ADDRESS(let selection): return selection.setValue(elementType:elementType)
      case ._APPLICATION_CONTEXT(let selection): return selection.setValue(elementType:elementType)
      case ._ASCRIBABLE_STATE_RELATIONSHIP(let selection): return selection.setValue(elementType:elementType)
      case ._DIMENSIONAL_SIZE(let selection): return selection.setValue(elementType:elementType)
      case ._GEOMETRIC_TOLERANCE(let selection): return selection.setValue(elementType:elementType)
      case ._GROUP(let selection): return selection.setValue(elementType:elementType)
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.setValue(elementType:elementType)
      case ._PRODUCT_CATEGORY(let selection): return selection.setValue(elementType:elementType)
      case ._PROPERTY_DEFINITION(let selection): return selection.setValue(elementType:elementType)
      case ._REPRESENTATION(let selection): return selection.setValue(elementType:elementType)
      case ._SHAPE_ASPECT(let selection): return selection.setValue(elementType:elementType)
      case ._SHAPE_ASPECT_RELATIONSHIP(let selection): return selection.setValue(elementType:elementType)
      case ._TOPOLOGICAL_REPRESENTATION_ITEM(let selection): return selection.setValue(elementType:elementType)
      }
    }
    public func enumValue<ENUM:SDAIEnumerationType>(enumType:ENUM.Type) -> ENUM? {
      switch self {
      case ._ACTION(let selection): return selection.enumValue(enumType:enumType)
      case ._ADDRESS(let selection): return selection.enumValue(enumType:enumType)
      case ._APPLICATION_CONTEXT(let selection): return selection.enumValue(enumType:enumType)
      case ._ASCRIBABLE_STATE_RELATIONSHIP(let selection): return selection.enumValue(enumType:enumType)
      case ._DIMENSIONAL_SIZE(let selection): return selection.enumValue(enumType:enumType)
      case ._GEOMETRIC_TOLERANCE(let selection): return selection.enumValue(enumType:enumType)
      case ._GROUP(let selection): return selection.enumValue(enumType:enumType)
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.enumValue(enumType:enumType)
      case ._PRODUCT_CATEGORY(let selection): return selection.enumValue(enumType:enumType)
      case ._PROPERTY_DEFINITION(let selection): return selection.enumValue(enumType:enumType)
      case ._REPRESENTATION(let selection): return selection.enumValue(enumType:enumType)
      case ._SHAPE_ASPECT(let selection): return selection.enumValue(enumType:enumType)
      case ._SHAPE_ASPECT_RELATIONSHIP(let selection): return selection.enumValue(enumType:enumType)
      case ._TOPOLOGICAL_REPRESENTATION_ITEM(let selection): return selection.enumValue(enumType:enumType)
      }
    }

    //MARK: SDAIUnderlyingType
    public typealias FundamentalType = Self
    public static var typeName: String = 
      "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ID_ATTRIBUTE_SELECT"
    public var asFundamentalType: FundamentalType { return self }

    //MARK: SDAIObservableAggregateElement
    public var entityReferences: AnySequence<SDAI.EntityReference> {
      switch self {
      case ._ACTION(let entity): return entity.entityReferences
      case ._ADDRESS(let entity): return entity.entityReferences
      case ._APPLICATION_CONTEXT(let entity): return entity.entityReferences
      case ._ASCRIBABLE_STATE_RELATIONSHIP(let entity): return entity.entityReferences
      case ._DIMENSIONAL_SIZE(let entity): return entity.entityReferences
      case ._GEOMETRIC_TOLERANCE(let entity): return entity.entityReferences
      case ._GROUP(let entity): return entity.entityReferences
      case ._ORGANIZATIONAL_PROJECT(let entity): return entity.entityReferences
      case ._PRODUCT_CATEGORY(let entity): return entity.entityReferences
      case ._PROPERTY_DEFINITION(let entity): return entity.entityReferences
      case ._REPRESENTATION(let entity): return entity.entityReferences
      case ._SHAPE_ASPECT(let entity): return entity.entityReferences
      case ._SHAPE_ASPECT_RELATIONSHIP(let entity): return entity.entityReferences
      case ._TOPOLOGICAL_REPRESENTATION_ITEM(let entity): return entity.entityReferences
      }
    }

    public mutating func configure(with observer: SDAI.EntityReferenceObserver) {
      switch self {
      case ._ACTION(let entity): 
        entity.configure(with: observer)
        self = ._ACTION(entity)
      case ._ADDRESS(let entity): 
        entity.configure(with: observer)
        self = ._ADDRESS(entity)
      case ._APPLICATION_CONTEXT(let entity): 
        entity.configure(with: observer)
        self = ._APPLICATION_CONTEXT(entity)
      case ._ASCRIBABLE_STATE_RELATIONSHIP(let entity): 
        entity.configure(with: observer)
        self = ._ASCRIBABLE_STATE_RELATIONSHIP(entity)
      case ._DIMENSIONAL_SIZE(let entity): 
        entity.configure(with: observer)
        self = ._DIMENSIONAL_SIZE(entity)
      case ._GEOMETRIC_TOLERANCE(let entity): 
        entity.configure(with: observer)
        self = ._GEOMETRIC_TOLERANCE(entity)
      case ._GROUP(let entity): 
        entity.configure(with: observer)
        self = ._GROUP(entity)
      case ._ORGANIZATIONAL_PROJECT(let entity): 
        entity.configure(with: observer)
        self = ._ORGANIZATIONAL_PROJECT(entity)
      case ._PRODUCT_CATEGORY(let entity): 
        entity.configure(with: observer)
        self = ._PRODUCT_CATEGORY(entity)
      case ._PROPERTY_DEFINITION(let entity): 
        entity.configure(with: observer)
        self = ._PROPERTY_DEFINITION(entity)
      case ._REPRESENTATION(let entity): 
        entity.configure(with: observer)
        self = ._REPRESENTATION(entity)
      case ._SHAPE_ASPECT(let entity): 
        entity.configure(with: observer)
        self = ._SHAPE_ASPECT(entity)
      case ._SHAPE_ASPECT_RELATIONSHIP(let entity): 
        entity.configure(with: observer)
        self = ._SHAPE_ASPECT_RELATIONSHIP(entity)
      case ._TOPOLOGICAL_REPRESENTATION_ITEM(let entity): 
        entity.configure(with: observer)
        self = ._TOPOLOGICAL_REPRESENTATION_ITEM(entity)
      }
    }

    public mutating func teardownObserver() {
      switch self {
      case ._ACTION(let entity): 
        entity.teardownObserver()
        self = ._ACTION(entity)
      case ._ADDRESS(let entity): 
        entity.teardownObserver()
        self = ._ADDRESS(entity)
      case ._APPLICATION_CONTEXT(let entity): 
        entity.teardownObserver()
        self = ._APPLICATION_CONTEXT(entity)
      case ._ASCRIBABLE_STATE_RELATIONSHIP(let entity): 
        entity.teardownObserver()
        self = ._ASCRIBABLE_STATE_RELATIONSHIP(entity)
      case ._DIMENSIONAL_SIZE(let entity): 
        entity.teardownObserver()
        self = ._DIMENSIONAL_SIZE(entity)
      case ._GEOMETRIC_TOLERANCE(let entity): 
        entity.teardownObserver()
        self = ._GEOMETRIC_TOLERANCE(entity)
      case ._GROUP(let entity): 
        entity.teardownObserver()
        self = ._GROUP(entity)
      case ._ORGANIZATIONAL_PROJECT(let entity): 
        entity.teardownObserver()
        self = ._ORGANIZATIONAL_PROJECT(entity)
      case ._PRODUCT_CATEGORY(let entity): 
        entity.teardownObserver()
        self = ._PRODUCT_CATEGORY(entity)
      case ._PROPERTY_DEFINITION(let entity): 
        entity.teardownObserver()
        self = ._PROPERTY_DEFINITION(entity)
      case ._REPRESENTATION(let entity): 
        entity.teardownObserver()
        self = ._REPRESENTATION(entity)
      case ._SHAPE_ASPECT(let entity): 
        entity.teardownObserver()
        self = ._SHAPE_ASPECT(entity)
      case ._SHAPE_ASPECT_RELATIONSHIP(let entity): 
        entity.teardownObserver()
        self = ._SHAPE_ASPECT_RELATIONSHIP(entity)
      case ._TOPOLOGICAL_REPRESENTATION_ITEM(let entity): 
        entity.teardownObserver()
        self = ._TOPOLOGICAL_REPRESENTATION_ITEM(entity)
      }
    }

    //MARK: SDAIAggregationBehavior
    public var aggregationHiBound: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationHiIndex: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationLoBound: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationLoIndex: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationSize: Int? {
      switch self {
      default: return nil
      }
    }

    //MARK: WHERE RULE VALIDATION (SELECT TYPE)
    public static func validateWhereRules(instance:Self?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      var result: [SDAI.WhereLabel:SDAI.LOGICAL] = [:]
      switch instance {
      case ._ACTION(let selectValue): result = eACTION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\ACTION")
      case ._ADDRESS(let selectValue): result = eADDRESS.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\ADDRESS")
      case ._APPLICATION_CONTEXT(let selectValue): 
        result = eAPPLICATION_CONTEXT.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\APPLICATION_CONTEXT")
      case ._ASCRIBABLE_STATE_RELATIONSHIP(let selectValue): 
        result = eASCRIBABLE_STATE_RELATIONSHIP.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\ASCRIBABLE_STATE_RELATIONSHIP")
      case ._DIMENSIONAL_SIZE(let selectValue): 
        result = eDIMENSIONAL_SIZE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\DIMENSIONAL_SIZE")
      case ._GEOMETRIC_TOLERANCE(let selectValue): 
        result = eGEOMETRIC_TOLERANCE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\GEOMETRIC_TOLERANCE")
      case ._GROUP(let selectValue): result = eGROUP.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\GROUP")
      case ._ORGANIZATIONAL_PROJECT(let selectValue): 
        result = eORGANIZATIONAL_PROJECT.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\ORGANIZATIONAL_PROJECT")
      case ._PRODUCT_CATEGORY(let selectValue): 
        result = ePRODUCT_CATEGORY.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PRODUCT_CATEGORY")
      case ._PROPERTY_DEFINITION(let selectValue): 
        result = ePROPERTY_DEFINITION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PROPERTY_DEFINITION")
      case ._REPRESENTATION(let selectValue): 
        result = eREPRESENTATION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\REPRESENTATION")
      case ._SHAPE_ASPECT(let selectValue): result = eSHAPE_ASPECT.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\SHAPE_ASPECT")
      case ._SHAPE_ASPECT_RELATIONSHIP(let selectValue): 
        result = eSHAPE_ASPECT_RELATIONSHIP.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\SHAPE_ASPECT_RELATIONSHIP")
      case ._TOPOLOGICAL_REPRESENTATION_ITEM(let selectValue): 
        result = eTOPOLOGICAL_REPRESENTATION_ITEM.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\TOPOLOGICAL_REPRESENTATION_ITEM")
      case nil: break
      }

      return result
    }

  }

}


//MARK: - SELECT TYPE HIERARCHY
public protocol AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sID_ATTRIBUTE_SELECT__type: SDAISelectType {

  //MARK: GROUP REFERENCES
  var super_eREPRESENTATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION? { get }
  var super_eSHAPE_ASPECT_RELATIONSHIP: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_ASPECT_RELATIONSHIP? { get }
  var super_ePROPERTY_DEFINITION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePROPERTY_DEFINITION? { get }
  var super_eTOPOLOGICAL_REPRESENTATION_ITEM: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eTOPOLOGICAL_REPRESENTATION_ITEM? { get }
  var super_eGROUP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGROUP? { get }
  var super_eGEOMETRIC_TOLERANCE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGEOMETRIC_TOLERANCE? { get }
  var super_eDIMENSIONAL_SIZE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDIMENSIONAL_SIZE? { get }
  var super_eAPPLICATION_CONTEXT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eAPPLICATION_CONTEXT? { get }
  var super_eREPRESENTATION_ITEM: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_ITEM? { get }
  var super_eASCRIBABLE_STATE_RELATIONSHIP: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eASCRIBABLE_STATE_RELATIONSHIP? { get }
  var super_eORGANIZATIONAL_PROJECT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eORGANIZATIONAL_PROJECT? { get }
  var super_ePRODUCT_CATEGORY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_CATEGORY? { get }
  var super_eSHAPE_ASPECT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_ASPECT? { get }
  var super_eADDRESS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eADDRESS? { get }
  var super_eACTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION? { get }

  //MARK: ENTITY ATTRIBUTE REFERENCES
  var DERIVING_RELATIONSHIPS: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_ASPECT_DERIVING_RELATIONSHIP>/*[1:nil]*/ )?  { get }
  var PEOPLE: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePERSON>/*[1:nil]*/ )?  { get }
  var PRODUCT_DEFINITIONAL: SDAI.LOGICAL { get }
  var CFS_FACES: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFACE>/*[1:nil]*/ )?  { get }
  var MAXIMUM_UPPER_TOLERANCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eLENGTH_MEASURE_WITH_UNIT?  { get }
  var STREET: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { get }
  var DESCRIPTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT?  { get }
  var PROPERTIES: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePROCESS_PROPERTY_ASSOCIATION>/*[
    1:nil]*/ )?  { get }
  var ORGANIZATIONS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eORGANIZATION>/*[1:nil]*/ )?  { get }
  var FORM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eTOLERANCE_ZONE_FORM?  { get }
  var DIRECTIVE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION_DIRECTIVE?  { get }
  var PRODUCTS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT>/*[1:nil]*/ )?  { get }
  var TOLERANCE_RELATIONSHIP: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGEOMETRIC_TOLERANCE_RELATIONSHIP>/*[0:nil]*/ )?  { get }
  var AUXILIARY_CLASSIFICATION: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGEOMETRIC_TOLERANCE_AUXILIARY_CLASSIFICATION>/*[0:nil]*/ )?  { get }
  var BOUNDS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFACE_BOUND>/*[1:nil]*/ )?  { get }
  var CHARACTER_BOX: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePLANAR_EXTENT?  { get }
  var PATH: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_ASPECT?  { get }
  var TARGET_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { get }
  var RELATED_ASCRIBABLE_STATE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eASCRIBABLE_STATE?  { get }
  var PARENT_VOLUME_SET: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONNECTED_VOLUME_SET?  { get }
  var DISPLACEMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eLENGTH_MEASURE_WITH_UNIT?  { get }
  var COMPONENT_SHAPE_ASPECT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sINTERNAL_OR_REFLECTED_SHAPE_ASPECT?  { get }
  var PARENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_ASPECT?  { get }
  var EDGE_ELEMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEDGE?  { get }
  var TELEX_NUMBER: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { get }
  var CM_LINK: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eVARIATIONAL_CURRENT_REPRESENTATION_RELATIONSHIP?  { get }
  var LOOP_VERTEX: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eVERTEX?  { get }
  var ORIENTATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nORIENTED_TOLERANCE_ZONE_TYPE?  { get }
  var FACSIMILE_NUMBER: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { get }
  var MODIFIER: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nLIMIT_CONDITION?  { get }
  var ITEMS: (SDAI.SET<SDAI.GENERIC_ENTITY>/*[0:nil]*/ )?  { get }
  var REGION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { get }
  var PERMANENT_AGGREGATE_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { get }
  var PCURVE_REFERENCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePCURVE?  { get }
  var OUTLINES: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eANNOTATION_FILL_AREA>/*[1:nil]*/ )?  { get }
  var ELECTRONIC_MAIL_ADDRESS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { get }
  var OF_SHAPE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_SHAPE?  { get }
  var REQUIRED_GENERAL_ACCURACY: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_MEASUREMENT_ACCURACY>/*[1:nil]*/ )?  { get }
  var STREET_NUMBER: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { get }
  var DATUM_SYSTEM: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sDATUM_SYSTEM_OR_REFERENCE>/*[1:
    nil]*/ )?  { get }
  var CHOSEN_METHOD: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION_METHOD?  { get }
  var VOLUME_GEOMETRY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eVOLUME?  { get }
  var PATH_ELEMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePATH?  { get }
  var ASSOCIATED_SHAPE_REPRESENTATION: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eKINEMATIC_LINK_REPRESENTATION_ASSOCIATION>/*[0:1]*/ )?  { get }
  var DATUM_REFERENCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDATUM_SYSTEM?  { get }
  var EDGE_LIST: (SDAI.LIST_UNIQUE<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eORIENTED_EDGE>/*[1:nil]*/ )?  { get }
  var IDENTIFICATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { get }
  var DISTANCE_FROM_START: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { get }
  var ESTABLISHED_BY_RELATIONSHIPS: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_ASPECT_RELATIONSHIP>/*[1:nil]*/ )?  { get }
  var PARENT_FACE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFACE?  { get }
  var RELATION_TYPE: SDAI.STRING?  { get }
  var BASELINE_RATIO: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tRATIO_MEASURE?  { get }
  var PARENT_FACE_SET: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONNECTED_FACE_SET?  { get }
  var INTERNAL_LOCATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { get }
  var CONSTITUENTS: (SDAI.LIST_UNIQUE<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDATUM_REFERENCE_COMPARTMENT>/*[1:3]*/ )?  { get }
  var REPRESENTATION_ASSOCIATIONS: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePROPERTY_DEFINITION_REPRESENTATION>/*[0:nil]*/ )?  { get }
  var OPEN_SHELL_ELEMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eOPEN_SHELL?  { get }
  var REVISION_IDENTIFIER: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { get }
  var SIZE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRESENTATION_SIZE?  { get }
  var CONTEXT_ELEMENTS: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eAPPLICATION_CONTEXT_ELEMENT>/*[1:nil]*/ )?  { get }
  var VERTEX_SHELL_EXTENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eVERTEX_LOOP?  { get }
  var TESSELLATION_ACCURACY_PARAMETERS: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sTESSELLATION_ACCURACY_PARAMETER_ITEM>/*[1:nil]*/ )?  { get }
  var ANGLE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePLANE_ANGLE_MEASURE_WITH_UNIT?  { get }
  var REPRESENTED_JOINTS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eKINEMATIC_JOINT>/*[1:nil]*/ )?  { get }
  var CLOSED_SHELL_ELEMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCLOSED_SHELL?  { get }
  var BOUND: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eLOOP?  { get }
  var POSTAL_CODE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { get }
  var EDGE_END: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eVERTEX?  { get }
  var POSTAL_BOX: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { get }
  var BOX_HEIGHT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE?  { get }
  var CVS_VOLUMES: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eVOLUME_WITH_FACES>/*[1:nil]*/ )?  { get }
  var UNIT_SIZE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sLENGTH_OR_PLANE_ANGLE_MEASURE_WITH_UNIT_SELECT?  { get }
  var URL: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { get }
  var FACE_GEOMETRY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSURFACE?  { get }
  var FACE_ELEMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFACE?  { get }
  var VERTEX_GEOMETRY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePOINT?  { get }
  var EDGE_LENGTH: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { get }
  var MAGNITUDE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eLENGTH_MEASURE_WITH_UNIT?  { get }
  var WIRE_SHELL_EXTENT: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eLOOP>/*[1:nil]*/ )?  { get }
  var COMPONENT_RELATIONSHIPS: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_ASPECT_RELATIONSHIP>/*[2:nil]*/ )?  { get }
  var BASE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sDATUM_OR_COMMON_DATUM?  { get }
  var BASE_COMMON_DATUM_LIST: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tCOMMON_DATUM_LIST?  { get }
  var PRODUCT_DEFINITIONS: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePROCESS_PRODUCT_ASSOCIATION>/*[1:nil]*/ )?  { get }
  var STROKES: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCURVE>/*[1:nil]*/ )?  { get }
  var EDGE_START: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eVERTEX?  { get }
  var APPLICATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { get }
  var EDGE_GEOMETRY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCURVE?  { get }
  var ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { get }
  var APPLIES_TO: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_ASPECT?  { get }
  var APPLIED_GENERAL_ACCURACY: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_MEASUREMENT_ACCURACY>/*[1:nil]*/ )?  { get }
  var FEATURE_BASIS_RELATIONSHIP: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_ASPECT_RELATIONSHIP>/*[1:nil]*/ )?  { get }
  var CONTEXT_OF_ITEMS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_CONTEXT?  { get }
  var TOWN: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { get }
  var AREA_TYPE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nAREA_UNIT_TYPE?  { get }
  var COUNTRY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { get }
  var DIRECTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nDIRECTED_TOLERANCE_ZONE_TYPE?  { get }
  var RELATED_SHAPE_ASPECT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_ASPECT?  { get }
  var ANGLE_SELECTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nANGLE_RELATOR?  { get }
  var CES_EDGES: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEDGE>/*[1:nil]*/ )?  { get }
  var RESPONSIBLE_ORGANIZATIONS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eORGANIZATION>/*[1:
    nil]*/ )?  { get }
  var REPRESENTATION_RELATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eKINEMATIC_PROPERTY_DEFINITION_REPRESENTATION?  { get }
  var DEFINING_TOLERANCE: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sTOLERANCE_ZONE_TARGET>
    /*[1:nil]*/ )?  { get }
  var TELEPHONE_NUMBER: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { get }
  var NEUTRAL_SKETCH_SEMANTICS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nCURVES_OR_AREA?  { get }
  var REPRESENTED_LINK: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eKINEMATIC_LINK?  { get }
  var REPRESENTED_TOPOLOGY: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sKINEMATIC_TOPOLOGY_REPRESENTATION_SELECT?  { get }
  var UNCERTAINTY: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eUNCERTAINTY_MEASURE_WITH_UNIT>
    /*[1:nil]*/ )?  { get }
  var ASSIGNED_GROUP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMATED_PART_RELATIONSHIP?  { get }
  var PERMANENT_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { get }
  var LOCATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sMULTI_OR_NEXT_ASSEMBLY_USAGE_OCCURRENCE?  { get }
  var DEFINITION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sCHARACTERIZED_DEFINITION?  { get }
  var CONTROLLING_SHAPE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_SHAPE?  { get }
  var SECOND_UNIT_SIZE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sLENGTH_OR_PLANE_ANGLE_MEASURE_WITH_UNIT_SELECT?  { get }
  var NAME: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { get }
  var RELATING_ASCRIBABLE_STATE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eASCRIBABLE_STATE?  { get }
  var BASIS_RELATIONSHIPS: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_ASPECT_DERIVING_RELATIONSHIP>/*[1:nil]*/ )?  { get }
  var TOLERANCED_SHAPE_ASPECT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sGEOMETRIC_TOLERANCE_TARGET?  { get }
  var RELATING_SHAPE_ASPECT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_ASPECT?  { get }
  var REPRESENTED_MECHANISM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMECHANISM_REPRESENTATION?  { get }
  var OFFSET: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMEASURE_WITH_UNIT?  { get }
  var POLYGON: (SDAI.LIST_UNIQUE<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCARTESIAN_POINT>/*[3:nil]*/ )?  { get }
  var TARGET_BASIS_RELATIONSHIP: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_ASPECT_RELATIONSHIP>/*[1:nil]*/ )?  { get }
}

public protocol AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sID_ATTRIBUTE_SELECT__subtype: 
  AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sID_ATTRIBUTE_SELECT__type, SDAIDefinedType
where Supertype: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sID_ATTRIBUTE_SELECT__type
{}

public extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sID_ATTRIBUTE_SELECT__subtype {
  //MARK: CONSTRUCTORS
  init?(possiblyFrom complex: SDAI.ComplexEntity?) {
    self.init(fundamental: FundamentalType(possiblyFrom: complex))
  }

  init?<T: SDAIUnderlyingType>(possiblyFrom underlyingType: T?) {
    self.init(fundamental: FundamentalType(possiblyFrom: underlyingType))
  }

  init?<G: SDAIGenericType>(fromGeneric generic: G?) {
    self.init(fundamental: FundamentalType.convert(fromGeneric: generic))
  }

  //MARK: GROUP REFERENCES
  var super_eREPRESENTATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION? { rep.super_eREPRESENTATION }
  var super_eSHAPE_ASPECT_RELATIONSHIP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_ASPECT_RELATIONSHIP? { rep.super_eSHAPE_ASPECT_RELATIONSHIP }
  var super_ePROPERTY_DEFINITION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePROPERTY_DEFINITION? { rep.super_ePROPERTY_DEFINITION }
  var super_eTOPOLOGICAL_REPRESENTATION_ITEM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eTOPOLOGICAL_REPRESENTATION_ITEM? { rep.super_eTOPOLOGICAL_REPRESENTATION_ITEM }
  var super_eGROUP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGROUP? { rep.super_eGROUP }
  var super_eGEOMETRIC_TOLERANCE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGEOMETRIC_TOLERANCE? { rep.super_eGEOMETRIC_TOLERANCE }
  var super_eDIMENSIONAL_SIZE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDIMENSIONAL_SIZE? { rep.super_eDIMENSIONAL_SIZE }
  var super_eAPPLICATION_CONTEXT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eAPPLICATION_CONTEXT? { rep.super_eAPPLICATION_CONTEXT }
  var super_eREPRESENTATION_ITEM: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_ITEM? { rep.super_eREPRESENTATION_ITEM }
  var super_eASCRIBABLE_STATE_RELATIONSHIP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eASCRIBABLE_STATE_RELATIONSHIP? { rep.super_eASCRIBABLE_STATE_RELATIONSHIP }
  var super_eORGANIZATIONAL_PROJECT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eORGANIZATIONAL_PROJECT? { rep.super_eORGANIZATIONAL_PROJECT }
  var super_ePRODUCT_CATEGORY: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_CATEGORY? { rep.super_ePRODUCT_CATEGORY }
  var super_eSHAPE_ASPECT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_ASPECT? { rep.super_eSHAPE_ASPECT }
  var super_eADDRESS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eADDRESS? { rep.super_eADDRESS }
  var super_eACTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION? { rep.super_eACTION }

  //MARK: ENTITY ATTRIBUTE REFERENCES
  var DERIVING_RELATIONSHIPS: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_ASPECT_DERIVING_RELATIONSHIP>/*[1:nil]*/ )?  { rep.DERIVING_RELATIONSHIPS }
  var PEOPLE: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePERSON>/*[1:nil]*/ )?  { rep.PEOPLE }
  var PRODUCT_DEFINITIONAL: SDAI.LOGICAL { rep.PRODUCT_DEFINITIONAL }
  var CFS_FACES: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFACE>/*[1:nil]*/ )?  { rep.CFS_FACES }
  var MAXIMUM_UPPER_TOLERANCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eLENGTH_MEASURE_WITH_UNIT?  { rep.MAXIMUM_UPPER_TOLERANCE }
  var STREET: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { rep.STREET }
  var DESCRIPTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT?  { rep.DESCRIPTION }
  var PROPERTIES: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePROCESS_PROPERTY_ASSOCIATION>/*[
    1:nil]*/ )?  { rep.PROPERTIES }
  var ORGANIZATIONS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eORGANIZATION>/*[1:nil]*/ )?  { rep.ORGANIZATIONS }
  var FORM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eTOLERANCE_ZONE_FORM?  { rep.FORM }
  var DIRECTIVE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION_DIRECTIVE?  { rep.DIRECTIVE }
  var PRODUCTS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT>/*[1:nil]*/ )?  { rep.PRODUCTS }
  var TOLERANCE_RELATIONSHIP: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGEOMETRIC_TOLERANCE_RELATIONSHIP>/*[0:nil]*/ )?  { rep.TOLERANCE_RELATIONSHIP }
  var AUXILIARY_CLASSIFICATION: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGEOMETRIC_TOLERANCE_AUXILIARY_CLASSIFICATION>/*[0:nil]*/ )?  { rep.AUXILIARY_CLASSIFICATION }
  var BOUNDS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFACE_BOUND>/*[1:nil]*/ )?  { rep.BOUNDS }
  var CHARACTER_BOX: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePLANAR_EXTENT?  { rep.CHARACTER_BOX }
  var PATH: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_ASPECT?  { rep.PATH }
  var TARGET_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { rep.TARGET_ID }
  var RELATED_ASCRIBABLE_STATE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eASCRIBABLE_STATE?  { rep.RELATED_ASCRIBABLE_STATE }
  var PARENT_VOLUME_SET: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONNECTED_VOLUME_SET?  { rep.PARENT_VOLUME_SET }
  var DISPLACEMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eLENGTH_MEASURE_WITH_UNIT?  { rep.DISPLACEMENT }
  var COMPONENT_SHAPE_ASPECT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sINTERNAL_OR_REFLECTED_SHAPE_ASPECT?  { rep.COMPONENT_SHAPE_ASPECT }
  var PARENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_ASPECT?  { rep.PARENT }
  var EDGE_ELEMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEDGE?  { rep.EDGE_ELEMENT }
  var TELEX_NUMBER: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { rep.TELEX_NUMBER }
  var CM_LINK: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eVARIATIONAL_CURRENT_REPRESENTATION_RELATIONSHIP?  { rep.CM_LINK }
  var LOOP_VERTEX: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eVERTEX?  { rep.LOOP_VERTEX }
  var ORIENTATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nORIENTED_TOLERANCE_ZONE_TYPE?  { rep.ORIENTATION }
  var FACSIMILE_NUMBER: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { rep.FACSIMILE_NUMBER }
  var MODIFIER: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nLIMIT_CONDITION?  { rep.MODIFIER }
  var ITEMS: (SDAI.SET<SDAI.GENERIC_ENTITY>/*[0:nil]*/ )?  { rep.ITEMS }
  var REGION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { rep.REGION }
  var PERMANENT_AGGREGATE_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { rep.PERMANENT_AGGREGATE_ID }
  var PCURVE_REFERENCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePCURVE?  { rep.PCURVE_REFERENCE }
  var OUTLINES: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eANNOTATION_FILL_AREA>/*[1:nil]*/ )?  { rep.OUTLINES }
  var ELECTRONIC_MAIL_ADDRESS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { rep.ELECTRONIC_MAIL_ADDRESS }
  var OF_SHAPE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_SHAPE?  { rep.OF_SHAPE }
  var REQUIRED_GENERAL_ACCURACY: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_MEASUREMENT_ACCURACY>/*[1:nil]*/ )?  { rep.REQUIRED_GENERAL_ACCURACY }
  var STREET_NUMBER: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { rep.STREET_NUMBER }
  var DATUM_SYSTEM: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sDATUM_SYSTEM_OR_REFERENCE>/*[1:
    nil]*/ )?  { rep.DATUM_SYSTEM }
  var CHOSEN_METHOD: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION_METHOD?  { rep.CHOSEN_METHOD }
  var VOLUME_GEOMETRY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eVOLUME?  { rep.VOLUME_GEOMETRY }
  var PATH_ELEMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePATH?  { rep.PATH_ELEMENT }
  var ASSOCIATED_SHAPE_REPRESENTATION: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eKINEMATIC_LINK_REPRESENTATION_ASSOCIATION>/*[0:1]*/ )?  { rep.ASSOCIATED_SHAPE_REPRESENTATION }
  var DATUM_REFERENCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDATUM_SYSTEM?  { rep.DATUM_REFERENCE }
  var EDGE_LIST: (SDAI.LIST_UNIQUE<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eORIENTED_EDGE>/*[1:nil]*/ )?  { rep.EDGE_LIST }
  var IDENTIFICATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { rep.IDENTIFICATION }
  var DISTANCE_FROM_START: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { rep.DISTANCE_FROM_START }
  var ESTABLISHED_BY_RELATIONSHIPS: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_ASPECT_RELATIONSHIP>/*[1:nil]*/ )?  { rep.ESTABLISHED_BY_RELATIONSHIPS }
  var PARENT_FACE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFACE?  { rep.PARENT_FACE }
  var RELATION_TYPE: SDAI.STRING?  { rep.RELATION_TYPE }
  var BASELINE_RATIO: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tRATIO_MEASURE?  { rep.BASELINE_RATIO }
  var PARENT_FACE_SET: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONNECTED_FACE_SET?  { rep.PARENT_FACE_SET }
  var INTERNAL_LOCATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { rep.INTERNAL_LOCATION }
  var CONSTITUENTS: (SDAI.LIST_UNIQUE<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDATUM_REFERENCE_COMPARTMENT>/*[1:3]*/ )?  { rep.CONSTITUENTS }
  var REPRESENTATION_ASSOCIATIONS: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePROPERTY_DEFINITION_REPRESENTATION>/*[0:nil]*/ )?  { rep.REPRESENTATION_ASSOCIATIONS }
  var OPEN_SHELL_ELEMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eOPEN_SHELL?  { rep.OPEN_SHELL_ELEMENT }
  var REVISION_IDENTIFIER: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { rep.REVISION_IDENTIFIER }
  var SIZE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRESENTATION_SIZE?  { rep.SIZE }
  var CONTEXT_ELEMENTS: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eAPPLICATION_CONTEXT_ELEMENT>/*[1:nil]*/ )?  { rep.CONTEXT_ELEMENTS }
  var VERTEX_SHELL_EXTENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eVERTEX_LOOP?  { rep.VERTEX_SHELL_EXTENT }
  var TESSELLATION_ACCURACY_PARAMETERS: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sTESSELLATION_ACCURACY_PARAMETER_ITEM>/*[1:nil]*/ )?  { rep.TESSELLATION_ACCURACY_PARAMETERS }
  var ANGLE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePLANE_ANGLE_MEASURE_WITH_UNIT?  { rep.ANGLE }
  var REPRESENTED_JOINTS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eKINEMATIC_JOINT>/*[1:nil]*/ )?  { rep.REPRESENTED_JOINTS }
  var CLOSED_SHELL_ELEMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCLOSED_SHELL?  { rep.CLOSED_SHELL_ELEMENT }
  var BOUND: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eLOOP?  { rep.BOUND }
  var POSTAL_CODE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { rep.POSTAL_CODE }
  var EDGE_END: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eVERTEX?  { rep.EDGE_END }
  var POSTAL_BOX: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { rep.POSTAL_BOX }
  var BOX_HEIGHT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE?  { rep.BOX_HEIGHT }
  var CVS_VOLUMES: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eVOLUME_WITH_FACES>/*[1:nil]*/ )?  { rep.CVS_VOLUMES }
  var UNIT_SIZE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sLENGTH_OR_PLANE_ANGLE_MEASURE_WITH_UNIT_SELECT?  { rep.UNIT_SIZE }
  var URL: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { rep.URL }
  var FACE_GEOMETRY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSURFACE?  { rep.FACE_GEOMETRY }
  var FACE_ELEMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFACE?  { rep.FACE_ELEMENT }
  var VERTEX_GEOMETRY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePOINT?  { rep.VERTEX_GEOMETRY }
  var EDGE_LENGTH: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { rep.EDGE_LENGTH }
  var MAGNITUDE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eLENGTH_MEASURE_WITH_UNIT?  { rep.MAGNITUDE }
  var WIRE_SHELL_EXTENT: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eLOOP>/*[1:nil]*/ )?  { rep.WIRE_SHELL_EXTENT }
  var COMPONENT_RELATIONSHIPS: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_ASPECT_RELATIONSHIP>/*[2:nil]*/ )?  { rep.COMPONENT_RELATIONSHIPS }
  var BASE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sDATUM_OR_COMMON_DATUM?  { rep.BASE }
  var BASE_COMMON_DATUM_LIST: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tCOMMON_DATUM_LIST?  { rep.BASE_COMMON_DATUM_LIST }
  var PRODUCT_DEFINITIONS: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePROCESS_PRODUCT_ASSOCIATION>/*[1:nil]*/ )?  { rep.PRODUCT_DEFINITIONS }
  var STROKES: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCURVE>/*[1:nil]*/ )?  { rep.STROKES }
  var EDGE_START: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eVERTEX?  { rep.EDGE_START }
  var APPLICATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { rep.APPLICATION }
  var EDGE_GEOMETRY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCURVE?  { rep.EDGE_GEOMETRY }
  var ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { rep.ID }
  var APPLIES_TO: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_ASPECT?  { rep.APPLIES_TO }
  var APPLIED_GENERAL_ACCURACY: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_MEASUREMENT_ACCURACY>/*[1:nil]*/ )?  { rep.APPLIED_GENERAL_ACCURACY }
  var FEATURE_BASIS_RELATIONSHIP: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_ASPECT_RELATIONSHIP>/*[1:nil]*/ )?  { rep.FEATURE_BASIS_RELATIONSHIP }
  var CONTEXT_OF_ITEMS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_CONTEXT?  { rep.CONTEXT_OF_ITEMS }
  var TOWN: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { rep.TOWN }
  var AREA_TYPE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nAREA_UNIT_TYPE?  { rep.AREA_TYPE }
  var COUNTRY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { rep.COUNTRY }
  var DIRECTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nDIRECTED_TOLERANCE_ZONE_TYPE?  { rep.DIRECTION }
  var RELATED_SHAPE_ASPECT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_ASPECT?  { rep.RELATED_SHAPE_ASPECT }
  var ANGLE_SELECTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nANGLE_RELATOR?  { rep.ANGLE_SELECTION }
  var CES_EDGES: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEDGE>/*[1:nil]*/ )?  { rep.CES_EDGES }
  var RESPONSIBLE_ORGANIZATIONS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eORGANIZATION>/*[1:
    nil]*/ )?  { rep.RESPONSIBLE_ORGANIZATIONS }
  var REPRESENTATION_RELATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eKINEMATIC_PROPERTY_DEFINITION_REPRESENTATION?  { rep.REPRESENTATION_RELATION }
  var DEFINING_TOLERANCE: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sTOLERANCE_ZONE_TARGET>
    /*[1:nil]*/ )?  { rep.DEFINING_TOLERANCE }
  var TELEPHONE_NUMBER: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { rep.TELEPHONE_NUMBER }
  var NEUTRAL_SKETCH_SEMANTICS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nCURVES_OR_AREA?  { rep.NEUTRAL_SKETCH_SEMANTICS }
  var REPRESENTED_LINK: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eKINEMATIC_LINK?  { rep.REPRESENTED_LINK }
  var REPRESENTED_TOPOLOGY: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sKINEMATIC_TOPOLOGY_REPRESENTATION_SELECT?  { rep.REPRESENTED_TOPOLOGY }
  var UNCERTAINTY: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eUNCERTAINTY_MEASURE_WITH_UNIT>
    /*[1:nil]*/ )?  { rep.UNCERTAINTY }
  var ASSIGNED_GROUP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMATED_PART_RELATIONSHIP?  { rep.ASSIGNED_GROUP }
  var PERMANENT_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { rep.PERMANENT_ID }
  var LOCATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sMULTI_OR_NEXT_ASSEMBLY_USAGE_OCCURRENCE?  { rep.LOCATION }
  var DEFINITION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sCHARACTERIZED_DEFINITION?  { rep.DEFINITION }
  var CONTROLLING_SHAPE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_SHAPE?  { rep.CONTROLLING_SHAPE }
  var SECOND_UNIT_SIZE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sLENGTH_OR_PLANE_ANGLE_MEASURE_WITH_UNIT_SELECT?  { rep.SECOND_UNIT_SIZE }
  var NAME: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { rep.NAME }
  var RELATING_ASCRIBABLE_STATE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eASCRIBABLE_STATE?  { rep.RELATING_ASCRIBABLE_STATE }
  var BASIS_RELATIONSHIPS: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_ASPECT_DERIVING_RELATIONSHIP>/*[1:nil]*/ )?  { rep.BASIS_RELATIONSHIPS }
  var TOLERANCED_SHAPE_ASPECT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sGEOMETRIC_TOLERANCE_TARGET?  { rep.TOLERANCED_SHAPE_ASPECT }
  var RELATING_SHAPE_ASPECT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_ASPECT?  { rep.RELATING_SHAPE_ASPECT }
  var REPRESENTED_MECHANISM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMECHANISM_REPRESENTATION?  { rep.REPRESENTED_MECHANISM }
  var OFFSET: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMEASURE_WITH_UNIT?  { rep.OFFSET }
  var POLYGON: (SDAI.LIST_UNIQUE<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCARTESIAN_POINT>/*[3:nil]*/ )?  { rep.POLYGON }
  var TARGET_BASIS_RELATIONSHIP: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_ASPECT_RELATIONSHIP>/*[1:nil]*/ )?  { rep.TARGET_BASIS_RELATIONSHIP }
}

