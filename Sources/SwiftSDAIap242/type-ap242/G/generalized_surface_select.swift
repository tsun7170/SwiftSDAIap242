/* file: generalized_surface_select.swift 	 generated: Tue Nov 16 05:35:44 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -TYPE DEFINITION in EXPRESS
/*
  TYPE generalized_surface_select = SELECT
    ( face_surface (*ENTITY*),
     surface (*ENTITY*),
     surfaced_open_shell (*ENTITY*) );
  END_TYPE; -- generalized_surface_select (line:3321 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES FOR SELECT
/*
  face_surface (*ENTITY*):
  ATTR:  bounds: SET [1 : ?] OF face_bound
  ATTR:  permanent_aggregate_id: identifier
  ATTR:  face_geometry: surface
  ATTR:  same_sense: BOOLEAN
  ATTR:  permanent_id: identifier
  ATTR:  name: label
  ATTR:  dim: dimension_count

  surface (*ENTITY*):
  ATTR:  knot_v_upper: INTEGER
  ATTR:  major_radius: positive_length_measure
  ATTR:  generalised_major_radius: positive_length_measure
  ATTR:  u_b_splines: LIST [4 : ?] OF local_b_spline
  ATTR:  u_multiplicities: LIST [2 : ?] OF INTEGER
  ATTR:  vsense: BOOLEAN
  ATTR:  weights_data: (AMBIGUOUS (CASE LEVEL))
  ATTR:  control_points_list: (AMBIGUOUS (CASE LEVEL))
  ATTR:  swept_curve: curve
  ATTR:  n_u: INTEGER
  ATTR:  reference_surface: surface
  ATTR:  n_v: INTEGER
  ATTR:  linearly_independent: linearly_independent_enum
  ATTR:  v_degree: INTEGER
  ATTR:  locally_refined_spline_type: locally_refined_spline_type_enum
  ATTR:  v_multiplicities: LIST [2 : ?] OF INTEGER
  ATTR:  boundaries: SET [1 : ?] OF boundary_curve
  ATTR:  select_outer: BOOLEAN
  ATTR:  minor_radius: positive_length_measure
  ATTR:  v_upper: INTEGER
  ATTR:  orientation: BOOLEAN
  ATTR:  axis_position: axis1_placement
  ATTR:  v_closed: (AMBIGUOUS (CASE LEVEL))
  ATTR:  u1: parameter_value
  ATTR:  u2: parameter_value
  ATTR:  skewness: length_measure
  ATTR:  parent_surface: surface
  ATTR:  usense: BOOLEAN
  ATTR:  surface_form: b_spline_surface_form
  ATTR:  radius: (AMBIGUOUS (CASE LEVEL))
  ATTR:  scaling_factors: LIST [4 : ?] OF REAL
  ATTR:  distance: length_measure
  ATTR:  position: axis2_placement_3d
  ATTR:  transformation: cartesian_transformation_operator_3d
  ATTR:  generalised_minor_radius: positive_length_measure
  ATTR:  v2: parameter_value
  ATTR:  v1: parameter_value
  ATTR:  u_closed: (AMBIGUOUS (CASE LEVEL))
  ATTR:  axis_line: line
  ATTR:  u_knots: (AMBIGUOUS (CASE LEVEL))
  ATTR:  semi_angle: plane_angle_measure
  ATTR:  directrix: (AMBIGUOUS (CASE LEVEL))
  ATTR:  knot_spec: knot_type
  ATTR:  self_intersect: (AMBIGUOUS (CASE LEVEL))
  ATTR:  segments: LIST [1 : ?] OF LIST [1 : ?] OF surface_patch
  ATTR:  v_knots: (AMBIGUOUS (CASE LEVEL))
  ATTR:  basis_surface: (AMBIGUOUS (CASE LEVEL))
  ATTR:  fixed_reference: direction
  ATTR:  control_points: ARRAY [0 : u_upper] OF ARRAY [0 : v_upper] OF cartesian_point
  ATTR:  u_degree: INTEGER
  ATTR:  implicit_outer: BOOLEAN
  ATTR:  knot_u_upper: INTEGER
  ATTR:  u_upper: INTEGER
  ATTR:  v_b_splines: LIST [4 : ?] OF local_b_spline
  ATTR:  domain: LIST [2 : 2] OF LIST [2 : 2] OF REAL
  ATTR:  name: label
  ATTR:  extrusion_axis: vector
  ATTR:  weights: ARRAY [0 : u_upper] OF ARRAY [0 : v_upper] OF REAL
  ATTR:  dim: dimension_count

  surfaced_open_shell (*ENTITY*):
  ATTR:  cfs_faces: SET [1 : ?] OF face
  ATTR:  permanent_aggregate_id: identifier
  ATTR:  permanent_id: identifier
  ATTR:  name: label

*/

/** SELECT type
- EXPRESS:
```express
  TYPE generalized_surface_select = SELECT
    ( face_surface (*ENTITY*),
     surface (*ENTITY*),
     surfaced_open_shell (*ENTITY*) );
  END_TYPE; -- generalized_surface_select (line:3321 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public enum sGENERALIZED_SURFACE_SELECT : SDAIValue, AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sGENERALIZED_SURFACE_SELECT__type {

    /// SELECT case ``eFACE_SURFACE`` (ENTITY) in ``sGENERALIZED_SURFACE_SELECT``
    case _FACE_SURFACE(eFACE_SURFACE)	// (ENTITY)

    /// SELECT case ``eSURFACE`` (ENTITY) in ``sGENERALIZED_SURFACE_SELECT``
    case _SURFACE(eSURFACE)	// (ENTITY)

    /// SELECT case ``eSURFACED_OPEN_SHELL`` (ENTITY) in ``sGENERALIZED_SURFACE_SELECT``
    case _SURFACED_OPEN_SHELL(eSURFACED_OPEN_SHELL)	// (ENTITY)

    //MARK: - CONSTRUCTORS
    public init(fundamental: FundamentalType) { self = fundamental }

    public init?<T: SDAIUnderlyingType>(possiblyFrom underlyingType: T?){
      return nil
    }

    public init?(possiblyFrom complex: SDAI.ComplexEntity?) {
      guard let complex = complex else { return nil }

      if let base = complex.entityReference(eFACE_SURFACE.self) {self = ._FACE_SURFACE(base) }
      else if let base = complex.entityReference(eSURFACE.self) {self = ._SURFACE(base) }
      else if let base = complex.entityReference(eSURFACED_OPEN_SHELL.self) {self = ._SURFACED_OPEN_SHELL(base) }
      else { return nil }
    }

    public init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let select = generic else { return nil }

      if let fundamental = select as? Self {
        self.init(fundamental: fundamental)
      }
      else if let base = eFACE_SURFACE.convert(fromGeneric: select) {
        self = ._FACE_SURFACE(base)
      }
      else if let base = eSURFACE.convert(fromGeneric: select) {
        self = ._SURFACE(base)
      }
      else if let base = eSURFACED_OPEN_SHELL.convert(fromGeneric: select) {
        self = ._SURFACED_OPEN_SHELL(base)
      }
      else { return nil }
    }

    // InitializableByP21Parameter
    public static var bareTypeName: String = "GENERALIZED_SURFACE_SELECT"

    public init?(p21typedParam: P21Decode.ExchangeStructure.TypedParameter, from exchangeStructure: P21Decode.ExchangeStructure) {
      guard let keyword = p21typedParam.keyword.asStandardKeyword else { exchangeStructure.error = "unexpected p21parameter(\(p21typedParam)) while resolving \(Self.bareTypeName) select value"; return nil }

      switch(keyword) {
      default:
        exchangeStructure.error = "unexpected p21parameter(\(p21typedParam)) while resolving \(Self.bareTypeName) select value"
        return nil
      }
    }

    public init?(p21untypedParam: P21Decode.ExchangeStructure.UntypedParameter, from exchangeStructure: P21Decode.ExchangeStructure) {
      switch p21untypedParam {
      case .rhsOccurenceName(let rhsname):
        switch rhsname {
        case .constantEntityName(let name):
          guard let entity = exchangeStructure.resolve(constantEntityName: name) else {exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) instance"); return nil }
          self.init(possiblyFrom: entity.complexEntity)

        case .entityInstanceName(let name):
          guard let complex = exchangeStructure.resolve(entityInstanceName: name) else {exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) instance"); return nil }
          self.init(possiblyFrom: complex)

        default:
          exchangeStructure.error = "unexpected p21parameter(\(p21untypedParam)) while resolving \(Self.bareTypeName) select instance"
          return nil
        }

      default:
        exchangeStructure.error = "unexpected p21parameter(\(p21untypedParam)) while resolving \(Self.bareTypeName) select instance"
        return nil
      }
    }

    public init?(p21omittedParamfrom exchangeStructure: P21Decode.ExchangeStructure) {
      return nil
    }


    //MARK: - ENTITY UNDERLYING TYPE REFERENCES
    public var super_eSURFACED_OPEN_SHELL: eSURFACED_OPEN_SHELL? {
      switch self {
      case ._SURFACED_OPEN_SHELL(let entity): return entity
      default: return nil
      }
    }

    public var super_eFACE_SURFACE: eFACE_SURFACE? {
      switch self {
      case ._FACE_SURFACE(let entity): return entity
      default: return nil
      }
    }

    public var super_eTOPOLOGICAL_REPRESENTATION_ITEM: eTOPOLOGICAL_REPRESENTATION_ITEM? {
      switch self {
      case ._FACE_SURFACE(let entity): return entity.super_eTOPOLOGICAL_REPRESENTATION_ITEM
      case ._SURFACED_OPEN_SHELL(let entity): return entity.super_eTOPOLOGICAL_REPRESENTATION_ITEM
      default: return nil
      }
    }

    public var super_eOPEN_SHELL: eOPEN_SHELL? {
      switch self {
      case ._SURFACED_OPEN_SHELL(let entity): return entity.super_eOPEN_SHELL
      default: return nil
      }
    }

    public var super_eCONNECTED_FACE_SET: eCONNECTED_FACE_SET? {
      switch self {
      case ._SURFACED_OPEN_SHELL(let entity): return entity.super_eCONNECTED_FACE_SET
      default: return nil
      }
    }

    public var super_eFACE: eFACE? {
      switch self {
      case ._FACE_SURFACE(let entity): return entity.super_eFACE
      default: return nil
      }
    }

    public var super_eREPRESENTATION_ITEM: eREPRESENTATION_ITEM? {
      switch self {
      case ._FACE_SURFACE(let entity): return entity.super_eREPRESENTATION_ITEM
      case ._SURFACE(let entity): return entity.super_eREPRESENTATION_ITEM
      case ._SURFACED_OPEN_SHELL(let entity): return entity.super_eREPRESENTATION_ITEM
      }
    }

    public var super_eSURFACE: eSURFACE? {
      switch self {
      case ._SURFACE(let entity): return entity
      default: return nil
      }
    }

    public var super_eGEOMETRIC_REPRESENTATION_ITEM: eGEOMETRIC_REPRESENTATION_ITEM? {
      switch self {
      case ._FACE_SURFACE(let entity): return entity.super_eGEOMETRIC_REPRESENTATION_ITEM
      case ._SURFACE(let entity): return entity.super_eGEOMETRIC_REPRESENTATION_ITEM
      default: return nil
      }
    }


    //MARK: - ENTITY ATTRIBUTE REFERENCES
    /// attribute of SELECT type ``sGENERALIZED_SURFACE_SELECT``
    /// - origin: ENTITY( ``eSURFACE`` )
    public var KNOT_V_UPPER: SDAI.INTEGER?  {
      switch self {
      case ._SURFACE(let entity): return entity.KNOT_V_UPPER
      default: return nil
      }
    }

    /// attribute of SELECT type ``sGENERALIZED_SURFACE_SELECT``
    /// - origin: ENTITY( ``eSURFACE`` )
    public var MAJOR_RADIUS: tPOSITIVE_LENGTH_MEASURE?  {
      switch self {
      case ._SURFACE(let entity): return entity.MAJOR_RADIUS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sGENERALIZED_SURFACE_SELECT``
    /// - origin: ENTITY( ``eSURFACED_OPEN_SHELL`` )
    public var CFS_FACES: (SDAI.SET<eFACE>/*[1:nil]*/ )?  {
      switch self {
      case ._SURFACED_OPEN_SHELL(let entity): return entity.CFS_FACES
      default: return nil
      }
    }

    /// attribute of SELECT type ``sGENERALIZED_SURFACE_SELECT``
    /// - origin: ENTITY( ``eSURFACE`` )
    public var GENERALISED_MAJOR_RADIUS: tPOSITIVE_LENGTH_MEASURE?  {
      switch self {
      case ._SURFACE(let entity): return entity.GENERALISED_MAJOR_RADIUS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sGENERALIZED_SURFACE_SELECT``
    /// - origin: ENTITY( ``eSURFACE`` )
    public var U_B_SPLINES: (SDAI.LIST<eLOCAL_B_SPLINE>/*[4:nil]*/ )?  {
      switch self {
      case ._SURFACE(let entity): return entity.U_B_SPLINES
      default: return nil
      }
    }

    /// attribute of SELECT type ``sGENERALIZED_SURFACE_SELECT``
    /// - origin: ENTITY( ``eSURFACE`` )
    public var U_MULTIPLICITIES: (SDAI.LIST<SDAI.INTEGER>/*[2:nil]*/ )?  {
      switch self {
      case ._SURFACE(let entity): return entity.U_MULTIPLICITIES
      default: return nil
      }
    }

    /// attribute of SELECT type ``sGENERALIZED_SURFACE_SELECT``
    /// - origin: ENTITY( ``eSURFACE`` )
    public var VSENSE: SDAI.BOOLEAN?  {
      switch self {
      case ._SURFACE(let entity): return entity.VSENSE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sGENERALIZED_SURFACE_SELECT``
    /// - origin: ENTITY( ``eSURFACE`` )
    public var SWEPT_CURVE: eCURVE?  {
      switch self {
      case ._SURFACE(let entity): return entity.SWEPT_CURVE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sGENERALIZED_SURFACE_SELECT``
    /// - origin: ENTITY( ``eFACE_SURFACE`` )
    public var BOUNDS: (SDAI.SET<eFACE_BOUND>/*[1:nil]*/ )?  {
      switch self {
      case ._FACE_SURFACE(let entity): return entity.BOUNDS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sGENERALIZED_SURFACE_SELECT``
    /// - origin: ENTITY( ``eSURFACE`` )
    public var N_U: SDAI.INTEGER?  {
      switch self {
      case ._SURFACE(let entity): return entity.N_U
      default: return nil
      }
    }

    /// attribute of SELECT type ``sGENERALIZED_SURFACE_SELECT``
    /// - origin: ENTITY( ``eSURFACE`` )
    public var REFERENCE_SURFACE: eSURFACE?  {
      switch self {
      case ._SURFACE(let entity): return entity.REFERENCE_SURFACE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sGENERALIZED_SURFACE_SELECT``
    /// - origin: ENTITY( ``eSURFACE`` )
    public var N_V: SDAI.INTEGER?  {
      switch self {
      case ._SURFACE(let entity): return entity.N_V
      default: return nil
      }
    }

    /// attribute of SELECT type ``sGENERALIZED_SURFACE_SELECT``
    /// - origin: ENTITY( ``eSURFACE`` )
    public var LINEARLY_INDEPENDENT: nLINEARLY_INDEPENDENT_ENUM?  {
      switch self {
      case ._SURFACE(let entity): return entity.LINEARLY_INDEPENDENT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sGENERALIZED_SURFACE_SELECT``
    /// - origin: ENTITY( ``eSURFACE`` )
    public var V_DEGREE: SDAI.INTEGER?  {
      switch self {
      case ._SURFACE(let entity): return entity.V_DEGREE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sGENERALIZED_SURFACE_SELECT``
    /// - origin: ENTITY( ``eSURFACE`` )
    public var LOCALLY_REFINED_SPLINE_TYPE: nLOCALLY_REFINED_SPLINE_TYPE_ENUM?  {
      switch self {
      case ._SURFACE(let entity): return entity.LOCALLY_REFINED_SPLINE_TYPE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sGENERALIZED_SURFACE_SELECT``
    /// - origin: ENTITY( ``eSURFACE`` )
    public var V_MULTIPLICITIES: (SDAI.LIST<SDAI.INTEGER>/*[2:nil]*/ )?  {
      switch self {
      case ._SURFACE(let entity): return entity.V_MULTIPLICITIES
      default: return nil
      }
    }

    /// attribute of SELECT type ``sGENERALIZED_SURFACE_SELECT``
    /// - origin: ENTITY( ``eSURFACE`` )
    public var BOUNDARIES: (SDAI.SET<eBOUNDARY_CURVE>/*[1:nil]*/ )?  {
      switch self {
      case ._SURFACE(let entity): return entity.BOUNDARIES
      default: return nil
      }
    }

    /// attribute of SELECT type ``sGENERALIZED_SURFACE_SELECT``
    /// - origin: ENTITY( ``eSURFACE`` )
    public var SELECT_OUTER: SDAI.BOOLEAN?  {
      switch self {
      case ._SURFACE(let entity): return entity.SELECT_OUTER
      default: return nil
      }
    }

    /// attribute of SELECT type ``sGENERALIZED_SURFACE_SELECT``
    /// - origin: ENTITY( ``eSURFACE`` )
    public var MINOR_RADIUS: tPOSITIVE_LENGTH_MEASURE?  {
      switch self {
      case ._SURFACE(let entity): return entity.MINOR_RADIUS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sGENERALIZED_SURFACE_SELECT``
    /// - origin: ENTITY( ``eSURFACE`` )
    public var V_UPPER: SDAI.INTEGER?  {
      switch self {
      case ._SURFACE(let entity): return entity.V_UPPER
      default: return nil
      }
    }

    /// attribute of SELECT type ``sGENERALIZED_SURFACE_SELECT``
    /// - origin: ENTITY( ``eSURFACE`` )
    public var ORIENTATION: SDAI.BOOLEAN?  {
      switch self {
      case ._SURFACE(let entity): return entity.ORIENTATION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sGENERALIZED_SURFACE_SELECT``
    /// - origin: ENTITY( ``eSURFACE`` )
    public var AXIS_POSITION: eAXIS1_PLACEMENT?  {
      switch self {
      case ._SURFACE(let entity): return entity.AXIS_POSITION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sGENERALIZED_SURFACE_SELECT``
    /// - origin: ENTITY( ``eFACE_SURFACE`` )
    /// - origin: ENTITY( ``eSURFACED_OPEN_SHELL`` )
    public var PERMANENT_AGGREGATE_ID: tIDENTIFIER?  {
      switch self {
      case ._FACE_SURFACE(let entity): return entity.PERMANENT_AGGREGATE_ID
      case ._SURFACED_OPEN_SHELL(let entity): return entity.PERMANENT_AGGREGATE_ID
      default: return nil
      }
    }

    /// attribute of SELECT type ``sGENERALIZED_SURFACE_SELECT``
    /// - origin: ENTITY( ``eSURFACE`` )
    public var U1: tPARAMETER_VALUE?  {
      switch self {
      case ._SURFACE(let entity): return entity.U1
      default: return nil
      }
    }

    /// attribute of SELECT type ``sGENERALIZED_SURFACE_SELECT``
    /// - origin: ENTITY( ``eSURFACE`` )
    public var U2: tPARAMETER_VALUE?  {
      switch self {
      case ._SURFACE(let entity): return entity.U2
      default: return nil
      }
    }

    /// attribute of SELECT type ``sGENERALIZED_SURFACE_SELECT``
    /// - origin: ENTITY( ``eSURFACE`` )
    public var SKEWNESS: tLENGTH_MEASURE?  {
      switch self {
      case ._SURFACE(let entity): return entity.SKEWNESS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sGENERALIZED_SURFACE_SELECT``
    /// - origin: ENTITY( ``eSURFACE`` )
    public var PARENT_SURFACE: eSURFACE?  {
      switch self {
      case ._SURFACE(let entity): return entity.PARENT_SURFACE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sGENERALIZED_SURFACE_SELECT``
    /// - origin: ENTITY( ``eSURFACE`` )
    public var USENSE: SDAI.BOOLEAN?  {
      switch self {
      case ._SURFACE(let entity): return entity.USENSE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sGENERALIZED_SURFACE_SELECT``
    /// - origin: ENTITY( ``eSURFACE`` )
    public var SURFACE_FORM: nB_SPLINE_SURFACE_FORM?  {
      switch self {
      case ._SURFACE(let entity): return entity.SURFACE_FORM
      default: return nil
      }
    }

    /// attribute of SELECT type ``sGENERALIZED_SURFACE_SELECT``
    /// - origin: ENTITY( ``eSURFACE`` )
    public var SCALING_FACTORS: (SDAI.LIST<SDAI.REAL>/*[4:nil]*/ )?  {
      switch self {
      case ._SURFACE(let entity): return entity.SCALING_FACTORS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sGENERALIZED_SURFACE_SELECT``
    /// - origin: ENTITY( ``eSURFACE`` )
    public var DISTANCE: tLENGTH_MEASURE?  {
      switch self {
      case ._SURFACE(let entity): return entity.DISTANCE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sGENERALIZED_SURFACE_SELECT``
    /// - origin: ENTITY( ``eSURFACE`` )
    public var POSITION: eAXIS2_PLACEMENT_3D?  {
      switch self {
      case ._SURFACE(let entity): return entity.POSITION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sGENERALIZED_SURFACE_SELECT``
    /// - origin: ENTITY( ``eSURFACE`` )
    public var TRANSFORMATION: eCARTESIAN_TRANSFORMATION_OPERATOR_3D?  {
      switch self {
      case ._SURFACE(let entity): return entity.TRANSFORMATION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sGENERALIZED_SURFACE_SELECT``
    /// - origin: ENTITY( ``eSURFACE`` )
    public var GENERALISED_MINOR_RADIUS: tPOSITIVE_LENGTH_MEASURE?  {
      switch self {
      case ._SURFACE(let entity): return entity.GENERALISED_MINOR_RADIUS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sGENERALIZED_SURFACE_SELECT``
    /// - origin: ENTITY( ``eSURFACE`` )
    public var V2: tPARAMETER_VALUE?  {
      switch self {
      case ._SURFACE(let entity): return entity.V2
      default: return nil
      }
    }

    /// attribute of SELECT type ``sGENERALIZED_SURFACE_SELECT``
    /// - origin: ENTITY( ``eSURFACE`` )
    public var V1: tPARAMETER_VALUE?  {
      switch self {
      case ._SURFACE(let entity): return entity.V1
      default: return nil
      }
    }

    /// attribute of SELECT type ``sGENERALIZED_SURFACE_SELECT``
    /// - origin: ENTITY( ``eSURFACE`` )
    public var AXIS_LINE: eLINE?  {
      switch self {
      case ._SURFACE(let entity): return entity.AXIS_LINE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sGENERALIZED_SURFACE_SELECT``
    /// - origin: ENTITY( ``eSURFACE`` )
    public var SEMI_ANGLE: tPLANE_ANGLE_MEASURE?  {
      switch self {
      case ._SURFACE(let entity): return entity.SEMI_ANGLE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sGENERALIZED_SURFACE_SELECT``
    /// - origin: ENTITY( ``eSURFACE`` )
    public var KNOT_SPEC: nKNOT_TYPE?  {
      switch self {
      case ._SURFACE(let entity): return entity.KNOT_SPEC
      default: return nil
      }
    }

    /// attribute of SELECT type ``sGENERALIZED_SURFACE_SELECT``
    /// - origin: ENTITY( ``eFACE_SURFACE`` )
    public var FACE_GEOMETRY: eSURFACE?  {
      switch self {
      case ._FACE_SURFACE(let entity): return entity.FACE_GEOMETRY
      default: return nil
      }
    }

    /// attribute of SELECT type ``sGENERALIZED_SURFACE_SELECT``
    /// - origin: ENTITY( ``eSURFACE`` )
    public var SEGMENTS: (SDAI.LIST<SDAI.LIST<eSURFACE_PATCH>/*[1:nil]*/ >/*[1:nil]*/ )?  {
      switch self {
      case ._SURFACE(let entity): return entity.SEGMENTS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sGENERALIZED_SURFACE_SELECT``
    /// - origin: ENTITY( ``eSURFACE`` )
    public var FIXED_REFERENCE: eDIRECTION?  {
      switch self {
      case ._SURFACE(let entity): return entity.FIXED_REFERENCE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sGENERALIZED_SURFACE_SELECT``
    /// - origin: ENTITY( ``eSURFACE`` )
    public var CONTROL_POINTS: (SDAI.ARRAY<SDAI.ARRAY<eCARTESIAN_POINT>/*[0:V_UPPER]*/ >/*[0:U_UPPER]*/ )?  {
      switch self {
      case ._SURFACE(let entity): return entity.CONTROL_POINTS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sGENERALIZED_SURFACE_SELECT``
    /// - origin: ENTITY( ``eSURFACE`` )
    public var U_DEGREE: SDAI.INTEGER?  {
      switch self {
      case ._SURFACE(let entity): return entity.U_DEGREE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sGENERALIZED_SURFACE_SELECT``
    /// - origin: ENTITY( ``eFACE_SURFACE`` )
    public var SAME_SENSE: SDAI.BOOLEAN?  {
      switch self {
      case ._FACE_SURFACE(let entity): return entity.SAME_SENSE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sGENERALIZED_SURFACE_SELECT``
    /// - origin: ENTITY( ``eSURFACE`` )
    public var IMPLICIT_OUTER: SDAI.BOOLEAN?  {
      switch self {
      case ._SURFACE(let entity): return entity.IMPLICIT_OUTER
      default: return nil
      }
    }

    /// attribute of SELECT type ``sGENERALIZED_SURFACE_SELECT``
    /// - origin: ENTITY( ``eSURFACE`` )
    public var KNOT_U_UPPER: SDAI.INTEGER?  {
      switch self {
      case ._SURFACE(let entity): return entity.KNOT_U_UPPER
      default: return nil
      }
    }

    /// attribute of SELECT type ``sGENERALIZED_SURFACE_SELECT``
    /// - origin: ENTITY( ``eFACE_SURFACE`` )
    /// - origin: ENTITY( ``eSURFACED_OPEN_SHELL`` )
    public var PERMANENT_ID: tIDENTIFIER?  {
      switch self {
      case ._FACE_SURFACE(let entity): return entity.PERMANENT_ID
      case ._SURFACED_OPEN_SHELL(let entity): return entity.PERMANENT_ID
      default: return nil
      }
    }

    /// attribute of SELECT type ``sGENERALIZED_SURFACE_SELECT``
    /// - origin: ENTITY( ``eSURFACE`` )
    public var U_UPPER: SDAI.INTEGER?  {
      switch self {
      case ._SURFACE(let entity): return entity.U_UPPER
      default: return nil
      }
    }

    /// attribute of SELECT type ``sGENERALIZED_SURFACE_SELECT``
    /// - origin: ENTITY( ``eSURFACE`` )
    public var V_B_SPLINES: (SDAI.LIST<eLOCAL_B_SPLINE>/*[4:nil]*/ )?  {
      switch self {
      case ._SURFACE(let entity): return entity.V_B_SPLINES
      default: return nil
      }
    }

    /// attribute of SELECT type ``sGENERALIZED_SURFACE_SELECT``
    /// - origin: ENTITY( ``eSURFACE`` )
    public var DOMAIN: (SDAI.LIST<SDAI.LIST<SDAI.REAL>/*[2:2]*/ >/*[2:2]*/ )?  {
      switch self {
      case ._SURFACE(let entity): return entity.DOMAIN
      default: return nil
      }
    }

    /// attribute of SELECT type ``sGENERALIZED_SURFACE_SELECT``
    /// - origin: ENTITY( ``eFACE_SURFACE`` )
    /// - origin: ENTITY( ``eSURFACE`` )
    /// - origin: ENTITY( ``eSURFACED_OPEN_SHELL`` )
    public var NAME: tLABEL?  {
      switch self {
      case ._FACE_SURFACE(let entity): return entity.NAME
      case ._SURFACE(let entity): return entity.NAME
      case ._SURFACED_OPEN_SHELL(let entity): return entity.NAME
      }
    }

    /// attribute of SELECT type ``sGENERALIZED_SURFACE_SELECT``
    /// - origin: ENTITY( ``eSURFACE`` )
    public var EXTRUSION_AXIS: eVECTOR?  {
      switch self {
      case ._SURFACE(let entity): return entity.EXTRUSION_AXIS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sGENERALIZED_SURFACE_SELECT``
    /// - origin: ENTITY( ``eSURFACE`` )
    public var WEIGHTS: (SDAI.ARRAY<SDAI.ARRAY<SDAI.REAL>/*[0:V_UPPER]*/ >/*[0:U_UPPER]*/ )?  {
      switch self {
      case ._SURFACE(let entity): return entity.WEIGHTS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sGENERALIZED_SURFACE_SELECT``
    /// - origin: ENTITY( ``eFACE_SURFACE`` )
    /// - origin: ENTITY( ``eSURFACE`` )
    public var DIM: tDIMENSION_COUNT?  {
      switch self {
      case ._FACE_SURFACE(let entity): return entity.DIM
      case ._SURFACE(let entity): return entity.DIM
      default: return nil
      }
    }


    //MARK: - SDAIValue
    public func isValueEqual<T: SDAIValue>(to rhs: T) -> Bool {
      switch self {
      case ._FACE_SURFACE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._SURFACE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._SURFACED_OPEN_SHELL(let selection): return selection.value.isValueEqual(to: rhs)
      }
    }

    public func isValueEqualOptionally<T: SDAIValue>(to rhs: T?) -> Bool? {
      switch self {
      case ._FACE_SURFACE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._SURFACE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._SURFACED_OPEN_SHELL(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      }
    }

    public func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      switch self {
      case ._FACE_SURFACE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._SURFACE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._SURFACED_OPEN_SHELL(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      }
    }

    public func isValueEqual<T: SDAIValue>(to rhs: T, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      switch self {
      case ._FACE_SURFACE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._SURFACE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._SURFACED_OPEN_SHELL(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      }
    }

    public func isValueEqualOptionally<T: SDAIValue>(to rhs: T?, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      switch self {
      case ._FACE_SURFACE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._SURFACE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._SURFACED_OPEN_SHELL(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      }
    }


    //MARK: SDAIGenericTypeBase
    public func copy() -> Self {
      switch self {
      case ._FACE_SURFACE(let selection): return ._FACE_SURFACE(selection.copy())
      case ._SURFACE(let selection): return ._SURFACE(selection.copy())
      case ._SURFACED_OPEN_SHELL(let selection): return ._SURFACED_OPEN_SHELL(selection.copy())
      }
    }

    //MARK: SDAIGenericType
    public var typeMembers: Set<SDAI.STRING> {
      var members: Set<SDAI.STRING> = [SDAI.STRING(Self.typeName)]
      switch self {
      case ._FACE_SURFACE(let selection): members.formUnion(selection.typeMembers)
      case ._SURFACE(let selection): members.formUnion(selection.typeMembers)
      case ._SURFACED_OPEN_SHELL(let selection): members.formUnion(selection.typeMembers)
      }
      //SELECT data types (indirectly) referencing the current type as a member of the select list
      members.insert(SDAI.STRING(sTRIM_CONDITION_SELECT.typeName)) // -> Self
      return members
    }

    public var entityReference: SDAI.EntityReference? {
      switch self {
      case ._FACE_SURFACE(let selection): return selection.entityReference
      case ._SURFACE(let selection): return selection.entityReference
      case ._SURFACED_OPEN_SHELL(let selection): return selection.entityReference
      }
    }
    public var stringValue: SDAI.STRING? {
      switch self {
      case ._FACE_SURFACE(let selection): return selection.stringValue
      case ._SURFACE(let selection): return selection.stringValue
      case ._SURFACED_OPEN_SHELL(let selection): return selection.stringValue
      }
    }
    public var binaryValue: SDAI.BINARY? {
      switch self {
      case ._FACE_SURFACE(let selection): return selection.binaryValue
      case ._SURFACE(let selection): return selection.binaryValue
      case ._SURFACED_OPEN_SHELL(let selection): return selection.binaryValue
      }
    }
    public var logicalValue: SDAI.LOGICAL? {
      switch self {
      case ._FACE_SURFACE(let selection): return selection.logicalValue
      case ._SURFACE(let selection): return selection.logicalValue
      case ._SURFACED_OPEN_SHELL(let selection): return selection.logicalValue
      }
    }
    public var booleanValue: SDAI.BOOLEAN? {
      switch self {
      case ._FACE_SURFACE(let selection): return selection.booleanValue
      case ._SURFACE(let selection): return selection.booleanValue
      case ._SURFACED_OPEN_SHELL(let selection): return selection.booleanValue
      }
    }
    public var numberValue: SDAI.NUMBER? {
      switch self {
      case ._FACE_SURFACE(let selection): return selection.numberValue
      case ._SURFACE(let selection): return selection.numberValue
      case ._SURFACED_OPEN_SHELL(let selection): return selection.numberValue
      }
    }
    public var realValue: SDAI.REAL? {
      switch self {
      case ._FACE_SURFACE(let selection): return selection.realValue
      case ._SURFACE(let selection): return selection.realValue
      case ._SURFACED_OPEN_SHELL(let selection): return selection.realValue
      }
    }
    public var integerValue: SDAI.INTEGER? {
      switch self {
      case ._FACE_SURFACE(let selection): return selection.integerValue
      case ._SURFACE(let selection): return selection.integerValue
      case ._SURFACED_OPEN_SHELL(let selection): return selection.integerValue
      }
    }
    public var genericEnumValue: SDAI.GenericEnumValue? {
      switch self {
      case ._FACE_SURFACE(let selection): return selection.genericEnumValue
      case ._SURFACE(let selection): return selection.genericEnumValue
      case ._SURFACED_OPEN_SHELL(let selection): return selection.genericEnumValue
      }
    }
    public func arrayOptionalValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.ARRAY_OPTIONAL<ELEM>? {
      switch self {
      case ._FACE_SURFACE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._SURFACE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._SURFACED_OPEN_SHELL(let selection): return selection.arrayOptionalValue(elementType:elementType)
      }
    }
    public func arrayValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.ARRAY<ELEM>? {
      switch self {
      case ._FACE_SURFACE(let selection): return selection.arrayValue(elementType:elementType)
      case ._SURFACE(let selection): return selection.arrayValue(elementType:elementType)
      case ._SURFACED_OPEN_SHELL(let selection): return selection.arrayValue(elementType:elementType)
      }
    }
    public func listValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.LIST<ELEM>? {
      switch self {
      case ._FACE_SURFACE(let selection): return selection.listValue(elementType:elementType)
      case ._SURFACE(let selection): return selection.listValue(elementType:elementType)
      case ._SURFACED_OPEN_SHELL(let selection): return selection.listValue(elementType:elementType)
      }
    }
    public func bagValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.BAG<ELEM>? {
      switch self {
      case ._FACE_SURFACE(let selection): return selection.bagValue(elementType:elementType)
      case ._SURFACE(let selection): return selection.bagValue(elementType:elementType)
      case ._SURFACED_OPEN_SHELL(let selection): return selection.bagValue(elementType:elementType)
      }
    }
    public func setValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.SET<ELEM>? {
      switch self {
      case ._FACE_SURFACE(let selection): return selection.setValue(elementType:elementType)
      case ._SURFACE(let selection): return selection.setValue(elementType:elementType)
      case ._SURFACED_OPEN_SHELL(let selection): return selection.setValue(elementType:elementType)
      }
    }
    public func enumValue<ENUM:SDAIEnumerationType>(enumType:ENUM.Type) -> ENUM? {
      switch self {
      case ._FACE_SURFACE(let selection): return selection.enumValue(enumType:enumType)
      case ._SURFACE(let selection): return selection.enumValue(enumType:enumType)
      case ._SURFACED_OPEN_SHELL(let selection): return selection.enumValue(enumType:enumType)
      }
    }

    //MARK: SDAIUnderlyingType
    public typealias FundamentalType = Self
    public static var typeName: String = 
      "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.GENERALIZED_SURFACE_SELECT"
    public var asFundamentalType: FundamentalType { return self }

    //MARK: SDAIObservableAggregateElement
    public var entityReferences: AnySequence<SDAI.EntityReference> {
      switch self {
      case ._FACE_SURFACE(let entity): return entity.entityReferences
      case ._SURFACE(let entity): return entity.entityReferences
      case ._SURFACED_OPEN_SHELL(let entity): return entity.entityReferences
      }
    }

    public mutating func configure(with observer: SDAI.EntityReferenceObserver) {
      switch self {
      case ._FACE_SURFACE(let entity): 
        entity.configure(with: observer)
        self = ._FACE_SURFACE(entity)
      case ._SURFACE(let entity): 
        entity.configure(with: observer)
        self = ._SURFACE(entity)
      case ._SURFACED_OPEN_SHELL(let entity): 
        entity.configure(with: observer)
        self = ._SURFACED_OPEN_SHELL(entity)
      }
    }

    public mutating func teardownObserver() {
      switch self {
      case ._FACE_SURFACE(let entity): 
        entity.teardownObserver()
        self = ._FACE_SURFACE(entity)
      case ._SURFACE(let entity): 
        entity.teardownObserver()
        self = ._SURFACE(entity)
      case ._SURFACED_OPEN_SHELL(let entity): 
        entity.teardownObserver()
        self = ._SURFACED_OPEN_SHELL(entity)
      }
    }

    //MARK: SDAIAggregationBehavior
    public var aggregationHiBound: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationHiIndex: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationLoBound: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationLoIndex: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationSize: Int? {
      switch self {
      default: return nil
      }
    }

    //MARK: WHERE RULE VALIDATION (SELECT TYPE)
    public static func validateWhereRules(instance:Self?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      var result: [SDAI.WhereLabel:SDAI.LOGICAL] = [:]
      switch instance {
      case ._FACE_SURFACE(let selectValue): result = eFACE_SURFACE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\FACE_SURFACE")
      case ._SURFACE(let selectValue): result = eSURFACE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\SURFACE")
      case ._SURFACED_OPEN_SHELL(let selectValue): 
        result = eSURFACED_OPEN_SHELL.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\SURFACED_OPEN_SHELL")
      case nil: break
      }

      return result
    }

  }

}


//MARK: - SELECT TYPE HIERARCHY
public protocol AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sGENERALIZED_SURFACE_SELECT__type: 
  SDAISelectType {

  //MARK: GROUP REFERENCES
  var super_eSURFACED_OPEN_SHELL: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSURFACED_OPEN_SHELL? { get }
  var super_eFACE_SURFACE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFACE_SURFACE? { get }
  var super_eTOPOLOGICAL_REPRESENTATION_ITEM: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eTOPOLOGICAL_REPRESENTATION_ITEM? { get }
  var super_eOPEN_SHELL: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eOPEN_SHELL? { get }
  var super_eCONNECTED_FACE_SET: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONNECTED_FACE_SET? { get }
  var super_eFACE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFACE? { get }
  var super_eREPRESENTATION_ITEM: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_ITEM? { get }
  var super_eSURFACE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSURFACE? { get }
  var super_eGEOMETRIC_REPRESENTATION_ITEM: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGEOMETRIC_REPRESENTATION_ITEM? { get }

  //MARK: ENTITY ATTRIBUTE REFERENCES
  var KNOT_V_UPPER: SDAI.INTEGER?  { get }
  var MAJOR_RADIUS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { get }
  var CFS_FACES: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFACE>/*[1:nil]*/ )?  { get }
  var GENERALISED_MAJOR_RADIUS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { get }
  var U_B_SPLINES: (SDAI.LIST<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eLOCAL_B_SPLINE>/*[4:nil]*/ )?  { get }
  var U_MULTIPLICITIES: (SDAI.LIST<SDAI.INTEGER>/*[2:nil]*/ )?  { get }
  var VSENSE: SDAI.BOOLEAN?  { get }
  var SWEPT_CURVE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCURVE?  { get }
  var BOUNDS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFACE_BOUND>/*[1:nil]*/ )?  { get }
  var N_U: SDAI.INTEGER?  { get }
  var REFERENCE_SURFACE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSURFACE?  { get }
  var N_V: SDAI.INTEGER?  { get }
  var LINEARLY_INDEPENDENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nLINEARLY_INDEPENDENT_ENUM?  { get }
  var V_DEGREE: SDAI.INTEGER?  { get }
  var LOCALLY_REFINED_SPLINE_TYPE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nLOCALLY_REFINED_SPLINE_TYPE_ENUM?  { get }
  var V_MULTIPLICITIES: (SDAI.LIST<SDAI.INTEGER>/*[2:nil]*/ )?  { get }
  var BOUNDARIES: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eBOUNDARY_CURVE>/*[1:nil]*/ )?  { get }
  var SELECT_OUTER: SDAI.BOOLEAN?  { get }
  var MINOR_RADIUS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { get }
  var V_UPPER: SDAI.INTEGER?  { get }
  var ORIENTATION: SDAI.BOOLEAN?  { get }
  var AXIS_POSITION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eAXIS1_PLACEMENT?  { get }
  var PERMANENT_AGGREGATE_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { get }
  var U1: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPARAMETER_VALUE?  { get }
  var U2: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPARAMETER_VALUE?  { get }
  var SKEWNESS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE?  { get }
  var PARENT_SURFACE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSURFACE?  { get }
  var USENSE: SDAI.BOOLEAN?  { get }
  var SURFACE_FORM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nB_SPLINE_SURFACE_FORM?  { get }
  var SCALING_FACTORS: (SDAI.LIST<SDAI.REAL>/*[4:nil]*/ )?  { get }
  var DISTANCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE?  { get }
  var POSITION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eAXIS2_PLACEMENT_3D?  { get }
  var TRANSFORMATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCARTESIAN_TRANSFORMATION_OPERATOR_3D?  { get }
  var GENERALISED_MINOR_RADIUS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { get }
  var V2: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPARAMETER_VALUE?  { get }
  var V1: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPARAMETER_VALUE?  { get }
  var AXIS_LINE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eLINE?  { get }
  var SEMI_ANGLE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { get }
  var KNOT_SPEC: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nKNOT_TYPE?  { get }
  var FACE_GEOMETRY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSURFACE?  { get }
  var SEGMENTS: (SDAI.LIST<SDAI.LIST<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSURFACE_PATCH>/*[1:nil]*/ >
    /*[1:nil]*/ )?  { get }
  var FIXED_REFERENCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDIRECTION?  { get }
  var CONTROL_POINTS: (SDAI.ARRAY<SDAI.ARRAY<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCARTESIAN_POINT>
    /*[0:V_UPPER]*/ >/*[0:U_UPPER]*/ )?  { get }
  var U_DEGREE: SDAI.INTEGER?  { get }
  var SAME_SENSE: SDAI.BOOLEAN?  { get }
  var IMPLICIT_OUTER: SDAI.BOOLEAN?  { get }
  var KNOT_U_UPPER: SDAI.INTEGER?  { get }
  var PERMANENT_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { get }
  var U_UPPER: SDAI.INTEGER?  { get }
  var V_B_SPLINES: (SDAI.LIST<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eLOCAL_B_SPLINE>/*[4:nil]*/ )?  { get }
  var DOMAIN: (SDAI.LIST<SDAI.LIST<SDAI.REAL>/*[2:2]*/ >/*[2:2]*/ )?  { get }
  var NAME: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { get }
  var EXTRUSION_AXIS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eVECTOR?  { get }
  var WEIGHTS: (SDAI.ARRAY<SDAI.ARRAY<SDAI.REAL>/*[0:V_UPPER]*/ >/*[0:U_UPPER]*/ )?  { get }
  var DIM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tDIMENSION_COUNT?  { get }
}

public protocol AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sGENERALIZED_SURFACE_SELECT__subtype: 
  AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sGENERALIZED_SURFACE_SELECT__type, SDAIDefinedType
where Supertype: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sGENERALIZED_SURFACE_SELECT__type
{}

public extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sGENERALIZED_SURFACE_SELECT__subtype {
  //MARK: CONSTRUCTORS
  init?(possiblyFrom complex: SDAI.ComplexEntity?) {
    self.init(fundamental: FundamentalType(possiblyFrom: complex))
  }

  init?<T: SDAIUnderlyingType>(possiblyFrom underlyingType: T?) {
    self.init(fundamental: FundamentalType(possiblyFrom: underlyingType))
  }

  init?<G: SDAIGenericType>(fromGeneric generic: G?) {
    self.init(fundamental: FundamentalType.convert(fromGeneric: generic))
  }

  //MARK: GROUP REFERENCES
  var super_eSURFACED_OPEN_SHELL: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSURFACED_OPEN_SHELL? { rep.super_eSURFACED_OPEN_SHELL }
  var super_eFACE_SURFACE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFACE_SURFACE? { rep.super_eFACE_SURFACE }
  var super_eTOPOLOGICAL_REPRESENTATION_ITEM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eTOPOLOGICAL_REPRESENTATION_ITEM? { rep.super_eTOPOLOGICAL_REPRESENTATION_ITEM }
  var super_eOPEN_SHELL: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eOPEN_SHELL? { rep.super_eOPEN_SHELL }
  var super_eCONNECTED_FACE_SET: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONNECTED_FACE_SET? { rep.super_eCONNECTED_FACE_SET }
  var super_eFACE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFACE? { rep.super_eFACE }
  var super_eREPRESENTATION_ITEM: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_ITEM? { rep.super_eREPRESENTATION_ITEM }
  var super_eSURFACE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSURFACE? { rep.super_eSURFACE }
  var super_eGEOMETRIC_REPRESENTATION_ITEM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGEOMETRIC_REPRESENTATION_ITEM? { rep.super_eGEOMETRIC_REPRESENTATION_ITEM }

  //MARK: ENTITY ATTRIBUTE REFERENCES
  var KNOT_V_UPPER: SDAI.INTEGER?  { rep.KNOT_V_UPPER }
  var MAJOR_RADIUS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { rep.MAJOR_RADIUS }
  var CFS_FACES: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFACE>/*[1:nil]*/ )?  { rep.CFS_FACES }
  var GENERALISED_MAJOR_RADIUS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { rep.GENERALISED_MAJOR_RADIUS }
  var U_B_SPLINES: (SDAI.LIST<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eLOCAL_B_SPLINE>/*[4:nil]*/ )?  { rep.U_B_SPLINES }
  var U_MULTIPLICITIES: (SDAI.LIST<SDAI.INTEGER>/*[2:nil]*/ )?  { rep.U_MULTIPLICITIES }
  var VSENSE: SDAI.BOOLEAN?  { rep.VSENSE }
  var SWEPT_CURVE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCURVE?  { rep.SWEPT_CURVE }
  var BOUNDS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFACE_BOUND>/*[1:nil]*/ )?  { rep.BOUNDS }
  var N_U: SDAI.INTEGER?  { rep.N_U }
  var REFERENCE_SURFACE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSURFACE?  { rep.REFERENCE_SURFACE }
  var N_V: SDAI.INTEGER?  { rep.N_V }
  var LINEARLY_INDEPENDENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nLINEARLY_INDEPENDENT_ENUM?  { rep.LINEARLY_INDEPENDENT }
  var V_DEGREE: SDAI.INTEGER?  { rep.V_DEGREE }
  var LOCALLY_REFINED_SPLINE_TYPE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nLOCALLY_REFINED_SPLINE_TYPE_ENUM?  { rep.LOCALLY_REFINED_SPLINE_TYPE }
  var V_MULTIPLICITIES: (SDAI.LIST<SDAI.INTEGER>/*[2:nil]*/ )?  { rep.V_MULTIPLICITIES }
  var BOUNDARIES: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eBOUNDARY_CURVE>/*[1:nil]*/ )?  { rep.BOUNDARIES }
  var SELECT_OUTER: SDAI.BOOLEAN?  { rep.SELECT_OUTER }
  var MINOR_RADIUS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { rep.MINOR_RADIUS }
  var V_UPPER: SDAI.INTEGER?  { rep.V_UPPER }
  var ORIENTATION: SDAI.BOOLEAN?  { rep.ORIENTATION }
  var AXIS_POSITION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eAXIS1_PLACEMENT?  { rep.AXIS_POSITION }
  var PERMANENT_AGGREGATE_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { rep.PERMANENT_AGGREGATE_ID }
  var U1: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPARAMETER_VALUE?  { rep.U1 }
  var U2: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPARAMETER_VALUE?  { rep.U2 }
  var SKEWNESS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE?  { rep.SKEWNESS }
  var PARENT_SURFACE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSURFACE?  { rep.PARENT_SURFACE }
  var USENSE: SDAI.BOOLEAN?  { rep.USENSE }
  var SURFACE_FORM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nB_SPLINE_SURFACE_FORM?  { rep.SURFACE_FORM }
  var SCALING_FACTORS: (SDAI.LIST<SDAI.REAL>/*[4:nil]*/ )?  { rep.SCALING_FACTORS }
  var DISTANCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE?  { rep.DISTANCE }
  var POSITION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eAXIS2_PLACEMENT_3D?  { rep.POSITION }
  var TRANSFORMATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCARTESIAN_TRANSFORMATION_OPERATOR_3D?  { rep.TRANSFORMATION }
  var GENERALISED_MINOR_RADIUS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { rep.GENERALISED_MINOR_RADIUS }
  var V2: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPARAMETER_VALUE?  { rep.V2 }
  var V1: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPARAMETER_VALUE?  { rep.V1 }
  var AXIS_LINE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eLINE?  { rep.AXIS_LINE }
  var SEMI_ANGLE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { rep.SEMI_ANGLE }
  var KNOT_SPEC: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nKNOT_TYPE?  { rep.KNOT_SPEC }
  var FACE_GEOMETRY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSURFACE?  { rep.FACE_GEOMETRY }
  var SEGMENTS: (SDAI.LIST<SDAI.LIST<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSURFACE_PATCH>/*[1:nil]*/ >
    /*[1:nil]*/ )?  { rep.SEGMENTS }
  var FIXED_REFERENCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDIRECTION?  { rep.FIXED_REFERENCE }
  var CONTROL_POINTS: (SDAI.ARRAY<SDAI.ARRAY<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCARTESIAN_POINT>
    /*[0:V_UPPER]*/ >/*[0:U_UPPER]*/ )?  { rep.CONTROL_POINTS }
  var U_DEGREE: SDAI.INTEGER?  { rep.U_DEGREE }
  var SAME_SENSE: SDAI.BOOLEAN?  { rep.SAME_SENSE }
  var IMPLICIT_OUTER: SDAI.BOOLEAN?  { rep.IMPLICIT_OUTER }
  var KNOT_U_UPPER: SDAI.INTEGER?  { rep.KNOT_U_UPPER }
  var PERMANENT_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { rep.PERMANENT_ID }
  var U_UPPER: SDAI.INTEGER?  { rep.U_UPPER }
  var V_B_SPLINES: (SDAI.LIST<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eLOCAL_B_SPLINE>/*[4:nil]*/ )?  { rep.V_B_SPLINES }
  var DOMAIN: (SDAI.LIST<SDAI.LIST<SDAI.REAL>/*[2:2]*/ >/*[2:2]*/ )?  { rep.DOMAIN }
  var NAME: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { rep.NAME }
  var EXTRUSION_AXIS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eVECTOR?  { rep.EXTRUSION_AXIS }
  var WEIGHTS: (SDAI.ARRAY<SDAI.ARRAY<SDAI.REAL>/*[0:V_UPPER]*/ >/*[0:U_UPPER]*/ )?  { rep.WEIGHTS }
  var DIM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tDIMENSION_COUNT?  { rep.DIM }
}

