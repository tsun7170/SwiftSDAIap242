/* file: chained_representation_link.swift 	 generated: Tue Nov 16 05:35:44 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -TYPE DEFINITION in EXPRESS
/*
  TYPE chained_representation_link = SELECT
    ( mapped_item (*ENTITY*),
     representation_context (*ENTITY*),
     representation_relationship (*ENTITY*) );
  END_TYPE; -- chained_representation_link (line:1300 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES FOR SELECT
/*
  mapped_item (*ENTITY*):
  ATTR:  scale: (AMBIGUOUS (CASE LEVEL))
  ATTR:  map: representation_map
  ATTR:  mapping_source: representation_map
  ATTR:  mapping_target: representation_item
  ATTR:  name: label *** Multiple Select Case Sources ***
  ATTR:  alignment: text_alignment

  representation_context (*ENTITY*):
  ATTR:  context_identifier: identifier
  ATTR:  representations_in_context: SET [1 : ?] OF representation
  ATTR:  units: SET [1 : ?] OF unit
  ATTR:  coordinate_space_dimension: dimension_count
  ATTR:  context_type: text
  ATTR:  parameter_unit: unit
  ATTR:  uncertainty: SET [1 : ?] OF uncertainty_measure_with_unit

  representation_relationship (*ENTITY*):
  ATTR:  current_result: representation
  ATTR:  description: text
  ATTR:  transformation_operator: transformation
  ATTR:  item: geometric_representation_item
  ATTR:  rep_1: representation_or_representation_reference
  ATTR:  rep_2: representation_or_representation_reference
  ATTR:  name: label *** Multiple Select Case Sources ***
  ATTR:  motion: kinematic_path

*/

/** SELECT type
- EXPRESS:
```express
  TYPE chained_representation_link = SELECT
    ( mapped_item (*ENTITY*),
     representation_context (*ENTITY*),
     representation_relationship (*ENTITY*) );
  END_TYPE; -- chained_representation_link (line:1300 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public enum sCHAINED_REPRESENTATION_LINK : SDAIValue, AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sCHAINED_REPRESENTATION_LINK__type {

    /// SELECT case ``eMAPPED_ITEM`` (ENTITY) in ``sCHAINED_REPRESENTATION_LINK``
    case _MAPPED_ITEM(eMAPPED_ITEM)	// (ENTITY)

    /// SELECT case ``eREPRESENTATION_CONTEXT`` (ENTITY) in ``sCHAINED_REPRESENTATION_LINK``
    case _REPRESENTATION_CONTEXT(eREPRESENTATION_CONTEXT)	// (ENTITY)

    /// SELECT case ``eREPRESENTATION_RELATIONSHIP`` (ENTITY) in ``sCHAINED_REPRESENTATION_LINK``
    case _REPRESENTATION_RELATIONSHIP(eREPRESENTATION_RELATIONSHIP)	// (ENTITY)

    //MARK: - CONSTRUCTORS
    public init(fundamental: FundamentalType) { self = fundamental }

    public init?<T: SDAIUnderlyingType>(possiblyFrom underlyingType: T?){
      return nil
    }

    public init?(possiblyFrom complex: SDAI.ComplexEntity?) {
      guard let complex = complex else { return nil }

      if let base = complex.entityReference(eMAPPED_ITEM.self) {self = ._MAPPED_ITEM(base) }
      else if let base = complex.entityReference(eREPRESENTATION_CONTEXT.self) {self = ._REPRESENTATION_CONTEXT(base) }
      else if let base = complex.entityReference(eREPRESENTATION_RELATIONSHIP.self) {self = ._REPRESENTATION_RELATIONSHIP(base) }
      else { return nil }
    }

    public init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let select = generic else { return nil }

      if let fundamental = select as? Self {
        self.init(fundamental: fundamental)
      }
      else if let base = eMAPPED_ITEM.convert(fromGeneric: select) {
        self = ._MAPPED_ITEM(base)
      }
      else if let base = eREPRESENTATION_CONTEXT.convert(fromGeneric: select) {
        self = ._REPRESENTATION_CONTEXT(base)
      }
      else if let base = eREPRESENTATION_RELATIONSHIP.convert(fromGeneric: select) {
        self = ._REPRESENTATION_RELATIONSHIP(base)
      }
      else { return nil }
    }

    // InitializableByP21Parameter
    public static var bareTypeName: String = "CHAINED_REPRESENTATION_LINK"

    public init?(p21typedParam: P21Decode.ExchangeStructure.TypedParameter, from exchangeStructure: P21Decode.ExchangeStructure) {
      guard let keyword = p21typedParam.keyword.asStandardKeyword else { exchangeStructure.error = "unexpected p21parameter(\(p21typedParam)) while resolving \(Self.bareTypeName) select value"; return nil }

      switch(keyword) {
      default:
        exchangeStructure.error = "unexpected p21parameter(\(p21typedParam)) while resolving \(Self.bareTypeName) select value"
        return nil
      }
    }

    public init?(p21untypedParam: P21Decode.ExchangeStructure.UntypedParameter, from exchangeStructure: P21Decode.ExchangeStructure) {
      switch p21untypedParam {
      case .rhsOccurenceName(let rhsname):
        switch rhsname {
        case .constantEntityName(let name):
          guard let entity = exchangeStructure.resolve(constantEntityName: name) else {exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) instance"); return nil }
          self.init(possiblyFrom: entity.complexEntity)

        case .entityInstanceName(let name):
          guard let complex = exchangeStructure.resolve(entityInstanceName: name) else {exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) instance"); return nil }
          self.init(possiblyFrom: complex)

        default:
          exchangeStructure.error = "unexpected p21parameter(\(p21untypedParam)) while resolving \(Self.bareTypeName) select instance"
          return nil
        }

      default:
        exchangeStructure.error = "unexpected p21parameter(\(p21untypedParam)) while resolving \(Self.bareTypeName) select instance"
        return nil
      }
    }

    public init?(p21omittedParamfrom exchangeStructure: P21Decode.ExchangeStructure) {
      return nil
    }


    //MARK: - ENTITY UNDERLYING TYPE REFERENCES
    public var super_eREPRESENTATION_RELATIONSHIP: eREPRESENTATION_RELATIONSHIP? {
      switch self {
      case ._REPRESENTATION_RELATIONSHIP(let entity): return entity
      default: return nil
      }
    }

    public var super_eREPRESENTATION_CONTEXT: eREPRESENTATION_CONTEXT? {
      switch self {
      case ._REPRESENTATION_CONTEXT(let entity): return entity
      default: return nil
      }
    }

    public var super_eMAPPED_ITEM: eMAPPED_ITEM? {
      switch self {
      case ._MAPPED_ITEM(let entity): return entity
      default: return nil
      }
    }

    public var super_eREPRESENTATION_ITEM: eREPRESENTATION_ITEM? {
      switch self {
      case ._MAPPED_ITEM(let entity): return entity.super_eREPRESENTATION_ITEM
      default: return nil
      }
    }


    //MARK: - ENTITY ATTRIBUTE REFERENCES
    /// attribute of SELECT type ``sCHAINED_REPRESENTATION_LINK``
    /// - origin: ENTITY( ``eREPRESENTATION_RELATIONSHIP`` )
    public var CURRENT_RESULT: eREPRESENTATION?  {
      switch self {
      case ._REPRESENTATION_RELATIONSHIP(let entity): return entity.CURRENT_RESULT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCHAINED_REPRESENTATION_LINK``
    /// - origin: ENTITY( ``eREPRESENTATION_RELATIONSHIP`` )
    public var DESCRIPTION: tTEXT?  {
      switch self {
      case ._REPRESENTATION_RELATIONSHIP(let entity): return entity.DESCRIPTION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCHAINED_REPRESENTATION_LINK``
    /// - origin: ENTITY( ``eREPRESENTATION_CONTEXT`` )
    public var CONTEXT_IDENTIFIER: tIDENTIFIER?  {
      switch self {
      case ._REPRESENTATION_CONTEXT(let entity): return entity.CONTEXT_IDENTIFIER
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCHAINED_REPRESENTATION_LINK``
    /// - origin: ENTITY( ``eREPRESENTATION_RELATIONSHIP`` )
    public var TRANSFORMATION_OPERATOR: sTRANSFORMATION?  {
      switch self {
      case ._REPRESENTATION_RELATIONSHIP(let entity): return entity.TRANSFORMATION_OPERATOR
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCHAINED_REPRESENTATION_LINK``
    /// - origin: ENTITY( ``eREPRESENTATION_RELATIONSHIP`` )
    public var ITEM: eGEOMETRIC_REPRESENTATION_ITEM?  {
      switch self {
      case ._REPRESENTATION_RELATIONSHIP(let entity): return entity.ITEM
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCHAINED_REPRESENTATION_LINK``
    /// - origin: ENTITY( ``eREPRESENTATION_CONTEXT`` )
    public var REPRESENTATIONS_IN_CONTEXT: (SDAI.SET<eREPRESENTATION>/*[1:nil]*/ )?  {
      switch self {
      case ._REPRESENTATION_CONTEXT(let entity): return entity.REPRESENTATIONS_IN_CONTEXT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCHAINED_REPRESENTATION_LINK``
    /// - origin: ENTITY( ``eREPRESENTATION_CONTEXT`` )
    public var UNITS: (SDAI.SET<sUNIT>/*[1:nil]*/ )?  {
      switch self {
      case ._REPRESENTATION_CONTEXT(let entity): return entity.UNITS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCHAINED_REPRESENTATION_LINK``
    /// - origin: ENTITY( ``eREPRESENTATION_CONTEXT`` )
    public var COORDINATE_SPACE_DIMENSION: tDIMENSION_COUNT?  {
      switch self {
      case ._REPRESENTATION_CONTEXT(let entity): return entity.COORDINATE_SPACE_DIMENSION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCHAINED_REPRESENTATION_LINK``
    /// - origin: ENTITY( ``eMAPPED_ITEM`` )
    public var MAP: eREPRESENTATION_MAP?  {
      switch self {
      case ._MAPPED_ITEM(let entity): return entity.MAP
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCHAINED_REPRESENTATION_LINK``
    /// - origin: ENTITY( ``eREPRESENTATION_CONTEXT`` )
    public var CONTEXT_TYPE: tTEXT?  {
      switch self {
      case ._REPRESENTATION_CONTEXT(let entity): return entity.CONTEXT_TYPE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCHAINED_REPRESENTATION_LINK``
    /// - origin: ENTITY( ``eREPRESENTATION_RELATIONSHIP`` )
    public var REP_1: sREPRESENTATION_OR_REPRESENTATION_REFERENCE?  {
      switch self {
      case ._REPRESENTATION_RELATIONSHIP(let entity): return entity.REP_1
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCHAINED_REPRESENTATION_LINK``
    /// - origin: ENTITY( ``eREPRESENTATION_CONTEXT`` )
    public var PARAMETER_UNIT: sUNIT?  {
      switch self {
      case ._REPRESENTATION_CONTEXT(let entity): return entity.PARAMETER_UNIT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCHAINED_REPRESENTATION_LINK``
    /// - origin: ENTITY( ``eREPRESENTATION_RELATIONSHIP`` )
    public var REP_2: sREPRESENTATION_OR_REPRESENTATION_REFERENCE?  {
      switch self {
      case ._REPRESENTATION_RELATIONSHIP(let entity): return entity.REP_2
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCHAINED_REPRESENTATION_LINK``
    /// - origin: ENTITY( ``eREPRESENTATION_CONTEXT`` )
    public var UNCERTAINTY: (SDAI.SET<eUNCERTAINTY_MEASURE_WITH_UNIT>/*[1:nil]*/ )?  {
      switch self {
      case ._REPRESENTATION_CONTEXT(let entity): return entity.UNCERTAINTY
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCHAINED_REPRESENTATION_LINK``
    /// - origin: ENTITY( ``eMAPPED_ITEM`` )
    public var MAPPING_SOURCE: eREPRESENTATION_MAP?  {
      switch self {
      case ._MAPPED_ITEM(let entity): return entity.MAPPING_SOURCE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCHAINED_REPRESENTATION_LINK``
    /// - origin: ENTITY( ``eMAPPED_ITEM`` )
    public var MAPPING_TARGET: eREPRESENTATION_ITEM?  {
      switch self {
      case ._MAPPED_ITEM(let entity): return entity.MAPPING_TARGET
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCHAINED_REPRESENTATION_LINK``
    /// - origin: ENTITY( ``eMAPPED_ITEM`` )
    /// - origin: ENTITY( ``eREPRESENTATION_RELATIONSHIP`` )
    public var NAME: tLABEL?  {
      switch self {
      case ._MAPPED_ITEM(let entity): return entity.NAME
      case ._REPRESENTATION_RELATIONSHIP(let entity): return entity.NAME
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCHAINED_REPRESENTATION_LINK``
    /// - origin: ENTITY( ``eREPRESENTATION_RELATIONSHIP`` )
    public var MOTION: eKINEMATIC_PATH?  {
      switch self {
      case ._REPRESENTATION_RELATIONSHIP(let entity): return entity.MOTION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCHAINED_REPRESENTATION_LINK``
    /// - origin: ENTITY( ``eMAPPED_ITEM`` )
    public var ALIGNMENT: tTEXT_ALIGNMENT?  {
      switch self {
      case ._MAPPED_ITEM(let entity): return entity.ALIGNMENT
      default: return nil
      }
    }


    //MARK: - SDAIValue
    public func isValueEqual<T: SDAIValue>(to rhs: T) -> Bool {
      switch self {
      case ._MAPPED_ITEM(let selection): return selection.value.isValueEqual(to: rhs)
      case ._REPRESENTATION_CONTEXT(let selection): return selection.value.isValueEqual(to: rhs)
      case ._REPRESENTATION_RELATIONSHIP(let selection): return selection.value.isValueEqual(to: rhs)
      }
    }

    public func isValueEqualOptionally<T: SDAIValue>(to rhs: T?) -> Bool? {
      switch self {
      case ._MAPPED_ITEM(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._REPRESENTATION_CONTEXT(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._REPRESENTATION_RELATIONSHIP(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      }
    }

    public func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      switch self {
      case ._MAPPED_ITEM(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._REPRESENTATION_CONTEXT(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._REPRESENTATION_RELATIONSHIP(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      }
    }

    public func isValueEqual<T: SDAIValue>(to rhs: T, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      switch self {
      case ._MAPPED_ITEM(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._REPRESENTATION_CONTEXT(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._REPRESENTATION_RELATIONSHIP(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      }
    }

    public func isValueEqualOptionally<T: SDAIValue>(to rhs: T?, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      switch self {
      case ._MAPPED_ITEM(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._REPRESENTATION_CONTEXT(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._REPRESENTATION_RELATIONSHIP(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      }
    }


    //MARK: SDAIGenericTypeBase
    public func copy() -> Self {
      switch self {
      case ._MAPPED_ITEM(let selection): return ._MAPPED_ITEM(selection.copy())
      case ._REPRESENTATION_CONTEXT(let selection): return ._REPRESENTATION_CONTEXT(selection.copy())
      case ._REPRESENTATION_RELATIONSHIP(let selection): return ._REPRESENTATION_RELATIONSHIP(selection.copy())
      }
    }

    //MARK: SDAIGenericType
    public var typeMembers: Set<SDAI.STRING> {
      var members: Set<SDAI.STRING> = [SDAI.STRING(Self.typeName)]
      switch self {
      case ._MAPPED_ITEM(let selection): members.formUnion(selection.typeMembers)
      case ._REPRESENTATION_CONTEXT(let selection): members.formUnion(selection.typeMembers)
      case ._REPRESENTATION_RELATIONSHIP(let selection): members.formUnion(selection.typeMembers)
      }
      return members
    }

    public var entityReference: SDAI.EntityReference? {
      switch self {
      case ._MAPPED_ITEM(let selection): return selection.entityReference
      case ._REPRESENTATION_CONTEXT(let selection): return selection.entityReference
      case ._REPRESENTATION_RELATIONSHIP(let selection): return selection.entityReference
      }
    }
    public var stringValue: SDAI.STRING? {
      switch self {
      case ._MAPPED_ITEM(let selection): return selection.stringValue
      case ._REPRESENTATION_CONTEXT(let selection): return selection.stringValue
      case ._REPRESENTATION_RELATIONSHIP(let selection): return selection.stringValue
      }
    }
    public var binaryValue: SDAI.BINARY? {
      switch self {
      case ._MAPPED_ITEM(let selection): return selection.binaryValue
      case ._REPRESENTATION_CONTEXT(let selection): return selection.binaryValue
      case ._REPRESENTATION_RELATIONSHIP(let selection): return selection.binaryValue
      }
    }
    public var logicalValue: SDAI.LOGICAL? {
      switch self {
      case ._MAPPED_ITEM(let selection): return selection.logicalValue
      case ._REPRESENTATION_CONTEXT(let selection): return selection.logicalValue
      case ._REPRESENTATION_RELATIONSHIP(let selection): return selection.logicalValue
      }
    }
    public var booleanValue: SDAI.BOOLEAN? {
      switch self {
      case ._MAPPED_ITEM(let selection): return selection.booleanValue
      case ._REPRESENTATION_CONTEXT(let selection): return selection.booleanValue
      case ._REPRESENTATION_RELATIONSHIP(let selection): return selection.booleanValue
      }
    }
    public var numberValue: SDAI.NUMBER? {
      switch self {
      case ._MAPPED_ITEM(let selection): return selection.numberValue
      case ._REPRESENTATION_CONTEXT(let selection): return selection.numberValue
      case ._REPRESENTATION_RELATIONSHIP(let selection): return selection.numberValue
      }
    }
    public var realValue: SDAI.REAL? {
      switch self {
      case ._MAPPED_ITEM(let selection): return selection.realValue
      case ._REPRESENTATION_CONTEXT(let selection): return selection.realValue
      case ._REPRESENTATION_RELATIONSHIP(let selection): return selection.realValue
      }
    }
    public var integerValue: SDAI.INTEGER? {
      switch self {
      case ._MAPPED_ITEM(let selection): return selection.integerValue
      case ._REPRESENTATION_CONTEXT(let selection): return selection.integerValue
      case ._REPRESENTATION_RELATIONSHIP(let selection): return selection.integerValue
      }
    }
    public var genericEnumValue: SDAI.GenericEnumValue? {
      switch self {
      case ._MAPPED_ITEM(let selection): return selection.genericEnumValue
      case ._REPRESENTATION_CONTEXT(let selection): return selection.genericEnumValue
      case ._REPRESENTATION_RELATIONSHIP(let selection): return selection.genericEnumValue
      }
    }
    public func arrayOptionalValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.ARRAY_OPTIONAL<ELEM>? {
      switch self {
      case ._MAPPED_ITEM(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._REPRESENTATION_CONTEXT(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._REPRESENTATION_RELATIONSHIP(let selection): return selection.arrayOptionalValue(elementType:elementType)
      }
    }
    public func arrayValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.ARRAY<ELEM>? {
      switch self {
      case ._MAPPED_ITEM(let selection): return selection.arrayValue(elementType:elementType)
      case ._REPRESENTATION_CONTEXT(let selection): return selection.arrayValue(elementType:elementType)
      case ._REPRESENTATION_RELATIONSHIP(let selection): return selection.arrayValue(elementType:elementType)
      }
    }
    public func listValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.LIST<ELEM>? {
      switch self {
      case ._MAPPED_ITEM(let selection): return selection.listValue(elementType:elementType)
      case ._REPRESENTATION_CONTEXT(let selection): return selection.listValue(elementType:elementType)
      case ._REPRESENTATION_RELATIONSHIP(let selection): return selection.listValue(elementType:elementType)
      }
    }
    public func bagValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.BAG<ELEM>? {
      switch self {
      case ._MAPPED_ITEM(let selection): return selection.bagValue(elementType:elementType)
      case ._REPRESENTATION_CONTEXT(let selection): return selection.bagValue(elementType:elementType)
      case ._REPRESENTATION_RELATIONSHIP(let selection): return selection.bagValue(elementType:elementType)
      }
    }
    public func setValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.SET<ELEM>? {
      switch self {
      case ._MAPPED_ITEM(let selection): return selection.setValue(elementType:elementType)
      case ._REPRESENTATION_CONTEXT(let selection): return selection.setValue(elementType:elementType)
      case ._REPRESENTATION_RELATIONSHIP(let selection): return selection.setValue(elementType:elementType)
      }
    }
    public func enumValue<ENUM:SDAIEnumerationType>(enumType:ENUM.Type) -> ENUM? {
      switch self {
      case ._MAPPED_ITEM(let selection): return selection.enumValue(enumType:enumType)
      case ._REPRESENTATION_CONTEXT(let selection): return selection.enumValue(enumType:enumType)
      case ._REPRESENTATION_RELATIONSHIP(let selection): return selection.enumValue(enumType:enumType)
      }
    }

    //MARK: SDAIUnderlyingType
    public typealias FundamentalType = Self
    public static var typeName: String = 
      "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CHAINED_REPRESENTATION_LINK"
    public var asFundamentalType: FundamentalType { return self }

    //MARK: SDAIObservableAggregateElement
    public var entityReferences: AnySequence<SDAI.EntityReference> {
      switch self {
      case ._MAPPED_ITEM(let entity): return entity.entityReferences
      case ._REPRESENTATION_CONTEXT(let entity): return entity.entityReferences
      case ._REPRESENTATION_RELATIONSHIP(let entity): return entity.entityReferences
      }
    }

    public mutating func configure(with observer: SDAI.EntityReferenceObserver) {
      switch self {
      case ._MAPPED_ITEM(let entity): 
        entity.configure(with: observer)
        self = ._MAPPED_ITEM(entity)
      case ._REPRESENTATION_CONTEXT(let entity): 
        entity.configure(with: observer)
        self = ._REPRESENTATION_CONTEXT(entity)
      case ._REPRESENTATION_RELATIONSHIP(let entity): 
        entity.configure(with: observer)
        self = ._REPRESENTATION_RELATIONSHIP(entity)
      }
    }

    public mutating func teardownObserver() {
      switch self {
      case ._MAPPED_ITEM(let entity): 
        entity.teardownObserver()
        self = ._MAPPED_ITEM(entity)
      case ._REPRESENTATION_CONTEXT(let entity): 
        entity.teardownObserver()
        self = ._REPRESENTATION_CONTEXT(entity)
      case ._REPRESENTATION_RELATIONSHIP(let entity): 
        entity.teardownObserver()
        self = ._REPRESENTATION_RELATIONSHIP(entity)
      }
    }

    //MARK: SDAIAggregationBehavior
    public var aggregationHiBound: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationHiIndex: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationLoBound: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationLoIndex: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationSize: Int? {
      switch self {
      default: return nil
      }
    }

    //MARK: WHERE RULE VALIDATION (SELECT TYPE)
    public static func validateWhereRules(instance:Self?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      var result: [SDAI.WhereLabel:SDAI.LOGICAL] = [:]
      switch instance {
      case ._MAPPED_ITEM(let selectValue): result = eMAPPED_ITEM.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\MAPPED_ITEM")
      case ._REPRESENTATION_CONTEXT(let selectValue): 
        result = eREPRESENTATION_CONTEXT.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\REPRESENTATION_CONTEXT")
      case ._REPRESENTATION_RELATIONSHIP(let selectValue): 
        result = eREPRESENTATION_RELATIONSHIP.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\REPRESENTATION_RELATIONSHIP")
      case nil: break
      }

      return result
    }

  }

}


//MARK: - SELECT TYPE HIERARCHY
public protocol AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sCHAINED_REPRESENTATION_LINK__type: 
  SDAISelectType {

  //MARK: GROUP REFERENCES
  var super_eREPRESENTATION_RELATIONSHIP: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_RELATIONSHIP? { get }
  var super_eREPRESENTATION_CONTEXT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_CONTEXT? { get }
  var super_eMAPPED_ITEM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMAPPED_ITEM? { get }
  var super_eREPRESENTATION_ITEM: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_ITEM? { get }

  //MARK: ENTITY ATTRIBUTE REFERENCES
  var CURRENT_RESULT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION?  { get }
  var DESCRIPTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT?  { get }
  var CONTEXT_IDENTIFIER: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { get }
  var TRANSFORMATION_OPERATOR: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sTRANSFORMATION?  { get }
  var ITEM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGEOMETRIC_REPRESENTATION_ITEM?  { get }
  var REPRESENTATIONS_IN_CONTEXT: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION>
    /*[1:nil]*/ )?  { get }
  var UNITS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sUNIT>/*[1:nil]*/ )?  { get }
  var COORDINATE_SPACE_DIMENSION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tDIMENSION_COUNT?  { get }
  var MAP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_MAP?  { get }
  var CONTEXT_TYPE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT?  { get }
  var REP_1: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sREPRESENTATION_OR_REPRESENTATION_REFERENCE?  { get }
  var PARAMETER_UNIT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sUNIT?  { get }
  var REP_2: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sREPRESENTATION_OR_REPRESENTATION_REFERENCE?  { get }
  var UNCERTAINTY: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eUNCERTAINTY_MEASURE_WITH_UNIT>
    /*[1:nil]*/ )?  { get }
  var MAPPING_SOURCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_MAP?  { get }
  var MAPPING_TARGET: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_ITEM?  { get }
  var NAME: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { get }
  var MOTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eKINEMATIC_PATH?  { get }
  var ALIGNMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT_ALIGNMENT?  { get }
}

public protocol AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sCHAINED_REPRESENTATION_LINK__subtype: 
  AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sCHAINED_REPRESENTATION_LINK__type, SDAIDefinedType
where Supertype: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sCHAINED_REPRESENTATION_LINK__type
{}

public extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sCHAINED_REPRESENTATION_LINK__subtype {
  //MARK: CONSTRUCTORS
  init?(possiblyFrom complex: SDAI.ComplexEntity?) {
    self.init(fundamental: FundamentalType(possiblyFrom: complex))
  }

  init?<T: SDAIUnderlyingType>(possiblyFrom underlyingType: T?) {
    self.init(fundamental: FundamentalType(possiblyFrom: underlyingType))
  }

  init?<G: SDAIGenericType>(fromGeneric generic: G?) {
    self.init(fundamental: FundamentalType.convert(fromGeneric: generic))
  }

  //MARK: GROUP REFERENCES
  var super_eREPRESENTATION_RELATIONSHIP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_RELATIONSHIP? { rep.super_eREPRESENTATION_RELATIONSHIP }
  var super_eREPRESENTATION_CONTEXT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_CONTEXT? { rep.super_eREPRESENTATION_CONTEXT }
  var super_eMAPPED_ITEM: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMAPPED_ITEM? { rep.super_eMAPPED_ITEM }
  var super_eREPRESENTATION_ITEM: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_ITEM? { rep.super_eREPRESENTATION_ITEM }

  //MARK: ENTITY ATTRIBUTE REFERENCES
  var CURRENT_RESULT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION?  { rep.CURRENT_RESULT }
  var DESCRIPTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT?  { rep.DESCRIPTION }
  var CONTEXT_IDENTIFIER: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { rep.CONTEXT_IDENTIFIER }
  var TRANSFORMATION_OPERATOR: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sTRANSFORMATION?  { rep.TRANSFORMATION_OPERATOR }
  var ITEM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGEOMETRIC_REPRESENTATION_ITEM?  { rep.ITEM }
  var REPRESENTATIONS_IN_CONTEXT: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION>
    /*[1:nil]*/ )?  { rep.REPRESENTATIONS_IN_CONTEXT }
  var UNITS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sUNIT>/*[1:nil]*/ )?  { rep.UNITS }
  var COORDINATE_SPACE_DIMENSION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tDIMENSION_COUNT?  { rep.COORDINATE_SPACE_DIMENSION }
  var MAP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_MAP?  { rep.MAP }
  var CONTEXT_TYPE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT?  { rep.CONTEXT_TYPE }
  var REP_1: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sREPRESENTATION_OR_REPRESENTATION_REFERENCE?  { rep.REP_1 }
  var PARAMETER_UNIT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sUNIT?  { rep.PARAMETER_UNIT }
  var REP_2: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sREPRESENTATION_OR_REPRESENTATION_REFERENCE?  { rep.REP_2 }
  var UNCERTAINTY: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eUNCERTAINTY_MEASURE_WITH_UNIT>
    /*[1:nil]*/ )?  { rep.UNCERTAINTY }
  var MAPPING_SOURCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_MAP?  { rep.MAPPING_SOURCE }
  var MAPPING_TARGET: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_ITEM?  { rep.MAPPING_TARGET }
  var NAME: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { rep.NAME }
  var MOTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eKINEMATIC_PATH?  { rep.MOTION }
  var ALIGNMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT_ALIGNMENT?  { rep.ALIGNMENT }
}

