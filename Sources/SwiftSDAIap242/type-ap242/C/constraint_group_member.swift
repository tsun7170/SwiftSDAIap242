/* file: constraint_group_member.swift 	 generated: Tue Nov 16 05:35:44 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -TYPE DEFINITION in EXPRESS
/*
  TYPE constraint_group_member = SELECT
    ( explicit_constraint (*ENTITY*),
     simultaneous_constraint_group (*ENTITY*) );
  END_TYPE; -- constraint_group_member (line:1719 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES FOR SELECT
/*
  explicit_constraint (*ENTITY*):
  ATTR:  description: text
  ATTR:  constrained_elements: SET [1 : ?] OF representation_item
  ATTR:  tangent_contact: tangent_contact_type
  ATTR:  offset_direction_constrained: BOOLEAN
  ATTR:  v_smoothness: transition_code
  ATTR:  reference_elements: SET [0 : ?] OF representation_item
  ATTR:  constraining_expression: expression
  ATTR:  fixed_constituent: representative_shape_representation
  ATTR:  radius_value: positive_length_measure
  ATTR:  angle_value: plane_angle_measure
  ATTR:  distance_value: (AMBIGUOUS (CASE LEVEL))
  ATTR:  offset_type: parallel_offset_type
  ATTR:  mirror_element: linear_geometry_constraint_element
  ATTR:  length_value: positive_length_measure
  ATTR:  rep_1: representative_shape_representation
  ATTR:  rep_2: representative_shape_representation
  ATTR:  smoothness: transition_code
  ATTR:  offset_value: positive_length_measure
  ATTR:  name: label
  ATTR:  near_points: (AMBIGUOUS (CASE LEVEL))
  ATTR:  negative_direction: BOOLEAN
  ATTR:  u_smoothness: transition_code

  simultaneous_constraint_group (*ENTITY*):
  ATTR:  constraint_group: SET [2 : ?] OF constraint_group_member
  ATTR:  name: label

*/

/** SELECT type
- EXPRESS:
```express
  TYPE constraint_group_member = SELECT
    ( explicit_constraint (*ENTITY*),
     simultaneous_constraint_group (*ENTITY*) );
  END_TYPE; -- constraint_group_member (line:1719 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public enum sCONSTRAINT_GROUP_MEMBER : SDAIValue, AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sCONSTRAINT_GROUP_MEMBER__type {

    /// SELECT case ``eEXPLICIT_CONSTRAINT`` (ENTITY) in ``sCONSTRAINT_GROUP_MEMBER``
    case _EXPLICIT_CONSTRAINT(eEXPLICIT_CONSTRAINT)	// (ENTITY)

    /// SELECT case ``eSIMULTANEOUS_CONSTRAINT_GROUP`` (ENTITY) in ``sCONSTRAINT_GROUP_MEMBER``
    case _SIMULTANEOUS_CONSTRAINT_GROUP(eSIMULTANEOUS_CONSTRAINT_GROUP)	// (ENTITY)

    //MARK: - CONSTRUCTORS
    public init(fundamental: FundamentalType) { self = fundamental }

    public init?<T: SDAIUnderlyingType>(possiblyFrom underlyingType: T?){
      return nil
    }

    public init?(possiblyFrom complex: SDAI.ComplexEntity?) {
      guard let complex = complex else { return nil }

      if let base = complex.entityReference(eEXPLICIT_CONSTRAINT.self) {self = ._EXPLICIT_CONSTRAINT(base) }
      else if let base = complex.entityReference(eSIMULTANEOUS_CONSTRAINT_GROUP.self) {self = ._SIMULTANEOUS_CONSTRAINT_GROUP(base) }
      else { return nil }
    }

    public init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let select = generic else { return nil }

      if let fundamental = select as? Self {
        self.init(fundamental: fundamental)
      }
      else if let base = eEXPLICIT_CONSTRAINT.convert(fromGeneric: select) {
        self = ._EXPLICIT_CONSTRAINT(base)
      }
      else if let base = eSIMULTANEOUS_CONSTRAINT_GROUP.convert(fromGeneric: select) {
        self = ._SIMULTANEOUS_CONSTRAINT_GROUP(base)
      }
      else { return nil }
    }

    // InitializableByP21Parameter
    public static var bareTypeName: String = "CONSTRAINT_GROUP_MEMBER"

    public init?(p21typedParam: P21Decode.ExchangeStructure.TypedParameter, from exchangeStructure: P21Decode.ExchangeStructure) {
      guard let keyword = p21typedParam.keyword.asStandardKeyword else { exchangeStructure.error = "unexpected p21parameter(\(p21typedParam)) while resolving \(Self.bareTypeName) select value"; return nil }

      switch(keyword) {
      default:
        exchangeStructure.error = "unexpected p21parameter(\(p21typedParam)) while resolving \(Self.bareTypeName) select value"
        return nil
      }
    }

    public init?(p21untypedParam: P21Decode.ExchangeStructure.UntypedParameter, from exchangeStructure: P21Decode.ExchangeStructure) {
      switch p21untypedParam {
      case .rhsOccurenceName(let rhsname):
        switch rhsname {
        case .constantEntityName(let name):
          guard let entity = exchangeStructure.resolve(constantEntityName: name) else {exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) instance"); return nil }
          self.init(possiblyFrom: entity.complexEntity)

        case .entityInstanceName(let name):
          guard let complex = exchangeStructure.resolve(entityInstanceName: name) else {exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) instance"); return nil }
          self.init(possiblyFrom: complex)

        default:
          exchangeStructure.error = "unexpected p21parameter(\(p21untypedParam)) while resolving \(Self.bareTypeName) select instance"
          return nil
        }

      default:
        exchangeStructure.error = "unexpected p21parameter(\(p21untypedParam)) while resolving \(Self.bareTypeName) select instance"
        return nil
      }
    }

    public init?(p21omittedParamfrom exchangeStructure: P21Decode.ExchangeStructure) {
      return nil
    }


    //MARK: - ENTITY UNDERLYING TYPE REFERENCES
    public var super_eREPRESENTATION_ITEM: eREPRESENTATION_ITEM? {
      switch self {
      case ._EXPLICIT_CONSTRAINT(let entity): return entity.super_eREPRESENTATION_ITEM
      case ._SIMULTANEOUS_CONSTRAINT_GROUP(let entity): return entity.super_eREPRESENTATION_ITEM
      }
    }

    public var super_eSIMULTANEOUS_CONSTRAINT_GROUP: eSIMULTANEOUS_CONSTRAINT_GROUP? {
      switch self {
      case ._SIMULTANEOUS_CONSTRAINT_GROUP(let entity): return entity
      default: return nil
      }
    }

    public var super_eVARIATIONAL_REPRESENTATION_ITEM: eVARIATIONAL_REPRESENTATION_ITEM? {
      switch self {
      case ._EXPLICIT_CONSTRAINT(let entity): return entity.super_eVARIATIONAL_REPRESENTATION_ITEM
      case ._SIMULTANEOUS_CONSTRAINT_GROUP(let entity): return entity.super_eVARIATIONAL_REPRESENTATION_ITEM
      }
    }

    public var super_eEXPLICIT_CONSTRAINT: eEXPLICIT_CONSTRAINT? {
      switch self {
      case ._EXPLICIT_CONSTRAINT(let entity): return entity
      default: return nil
      }
    }


    //MARK: - ENTITY ATTRIBUTE REFERENCES
    /// attribute of SELECT type ``sCONSTRAINT_GROUP_MEMBER``
    /// - origin: ENTITY( ``eEXPLICIT_CONSTRAINT`` )
    public var DESCRIPTION: tTEXT?  {
      switch self {
      case ._EXPLICIT_CONSTRAINT(let entity): return entity.DESCRIPTION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCONSTRAINT_GROUP_MEMBER``
    /// - origin: ENTITY( ``eEXPLICIT_CONSTRAINT`` )
    public var CONSTRAINED_ELEMENTS: (SDAI.SET<eREPRESENTATION_ITEM>/*[1:nil]*/ )?  {
      switch self {
      case ._EXPLICIT_CONSTRAINT(let entity): return entity.CONSTRAINED_ELEMENTS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCONSTRAINT_GROUP_MEMBER``
    /// - origin: ENTITY( ``eEXPLICIT_CONSTRAINT`` )
    public var TANGENT_CONTACT: nTANGENT_CONTACT_TYPE?  {
      switch self {
      case ._EXPLICIT_CONSTRAINT(let entity): return entity.TANGENT_CONTACT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCONSTRAINT_GROUP_MEMBER``
    /// - origin: ENTITY( ``eEXPLICIT_CONSTRAINT`` )
    public var OFFSET_DIRECTION_CONSTRAINED: SDAI.BOOLEAN?  {
      switch self {
      case ._EXPLICIT_CONSTRAINT(let entity): return entity.OFFSET_DIRECTION_CONSTRAINED
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCONSTRAINT_GROUP_MEMBER``
    /// - origin: ENTITY( ``eEXPLICIT_CONSTRAINT`` )
    public var V_SMOOTHNESS: nTRANSITION_CODE?  {
      switch self {
      case ._EXPLICIT_CONSTRAINT(let entity): return entity.V_SMOOTHNESS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCONSTRAINT_GROUP_MEMBER``
    /// - origin: ENTITY( ``eEXPLICIT_CONSTRAINT`` )
    public var REFERENCE_ELEMENTS: (SDAI.SET<eREPRESENTATION_ITEM>/*[0:nil]*/ )?  {
      switch self {
      case ._EXPLICIT_CONSTRAINT(let entity): return entity.REFERENCE_ELEMENTS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCONSTRAINT_GROUP_MEMBER``
    /// - origin: ENTITY( ``eEXPLICIT_CONSTRAINT`` )
    public var CONSTRAINING_EXPRESSION: eEXPRESSION?  {
      switch self {
      case ._EXPLICIT_CONSTRAINT(let entity): return entity.CONSTRAINING_EXPRESSION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCONSTRAINT_GROUP_MEMBER``
    /// - origin: ENTITY( ``eEXPLICIT_CONSTRAINT`` )
    public var FIXED_CONSTITUENT: eREPRESENTATIVE_SHAPE_REPRESENTATION?  {
      switch self {
      case ._EXPLICIT_CONSTRAINT(let entity): return entity.FIXED_CONSTITUENT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCONSTRAINT_GROUP_MEMBER``
    /// - origin: ENTITY( ``eEXPLICIT_CONSTRAINT`` )
    public var RADIUS_VALUE: tPOSITIVE_LENGTH_MEASURE?  {
      switch self {
      case ._EXPLICIT_CONSTRAINT(let entity): return entity.RADIUS_VALUE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCONSTRAINT_GROUP_MEMBER``
    /// - origin: ENTITY( ``eEXPLICIT_CONSTRAINT`` )
    public var ANGLE_VALUE: tPLANE_ANGLE_MEASURE?  {
      switch self {
      case ._EXPLICIT_CONSTRAINT(let entity): return entity.ANGLE_VALUE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCONSTRAINT_GROUP_MEMBER``
    /// - origin: ENTITY( ``eEXPLICIT_CONSTRAINT`` )
    public var OFFSET_TYPE: nPARALLEL_OFFSET_TYPE?  {
      switch self {
      case ._EXPLICIT_CONSTRAINT(let entity): return entity.OFFSET_TYPE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCONSTRAINT_GROUP_MEMBER``
    /// - origin: ENTITY( ``eEXPLICIT_CONSTRAINT`` )
    public var MIRROR_ELEMENT: sLINEAR_GEOMETRY_CONSTRAINT_ELEMENT?  {
      switch self {
      case ._EXPLICIT_CONSTRAINT(let entity): return entity.MIRROR_ELEMENT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCONSTRAINT_GROUP_MEMBER``
    /// - origin: ENTITY( ``eEXPLICIT_CONSTRAINT`` )
    public var LENGTH_VALUE: tPOSITIVE_LENGTH_MEASURE?  {
      switch self {
      case ._EXPLICIT_CONSTRAINT(let entity): return entity.LENGTH_VALUE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCONSTRAINT_GROUP_MEMBER``
    /// - origin: ENTITY( ``eEXPLICIT_CONSTRAINT`` )
    public var REP_1: eREPRESENTATIVE_SHAPE_REPRESENTATION?  {
      switch self {
      case ._EXPLICIT_CONSTRAINT(let entity): return entity.REP_1
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCONSTRAINT_GROUP_MEMBER``
    /// - origin: ENTITY( ``eEXPLICIT_CONSTRAINT`` )
    public var REP_2: eREPRESENTATIVE_SHAPE_REPRESENTATION?  {
      switch self {
      case ._EXPLICIT_CONSTRAINT(let entity): return entity.REP_2
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCONSTRAINT_GROUP_MEMBER``
    /// - origin: ENTITY( ``eSIMULTANEOUS_CONSTRAINT_GROUP`` )
    public var CONSTRAINT_GROUP: (SDAI.SET<sCONSTRAINT_GROUP_MEMBER>/*[2:nil]*/ )?  {
      switch self {
      case ._SIMULTANEOUS_CONSTRAINT_GROUP(let entity): return entity.CONSTRAINT_GROUP
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCONSTRAINT_GROUP_MEMBER``
    /// - origin: ENTITY( ``eEXPLICIT_CONSTRAINT`` )
    public var SMOOTHNESS: nTRANSITION_CODE?  {
      switch self {
      case ._EXPLICIT_CONSTRAINT(let entity): return entity.SMOOTHNESS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCONSTRAINT_GROUP_MEMBER``
    /// - origin: ENTITY( ``eEXPLICIT_CONSTRAINT`` )
    public var OFFSET_VALUE: tPOSITIVE_LENGTH_MEASURE?  {
      switch self {
      case ._EXPLICIT_CONSTRAINT(let entity): return entity.OFFSET_VALUE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCONSTRAINT_GROUP_MEMBER``
    /// - origin: ENTITY( ``eEXPLICIT_CONSTRAINT`` )
    /// - origin: ENTITY( ``eSIMULTANEOUS_CONSTRAINT_GROUP`` )
    public var NAME: tLABEL?  {
      switch self {
      case ._EXPLICIT_CONSTRAINT(let entity): return entity.NAME
      case ._SIMULTANEOUS_CONSTRAINT_GROUP(let entity): return entity.NAME
      }
    }

    /// attribute of SELECT type ``sCONSTRAINT_GROUP_MEMBER``
    /// - origin: ENTITY( ``eEXPLICIT_CONSTRAINT`` )
    public var NEGATIVE_DIRECTION: SDAI.BOOLEAN?  {
      switch self {
      case ._EXPLICIT_CONSTRAINT(let entity): return entity.NEGATIVE_DIRECTION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCONSTRAINT_GROUP_MEMBER``
    /// - origin: ENTITY( ``eEXPLICIT_CONSTRAINT`` )
    public var U_SMOOTHNESS: nTRANSITION_CODE?  {
      switch self {
      case ._EXPLICIT_CONSTRAINT(let entity): return entity.U_SMOOTHNESS
      default: return nil
      }
    }


    //MARK: - SDAIValue
    public func isValueEqual<T: SDAIValue>(to rhs: T) -> Bool {
      switch self {
      case ._EXPLICIT_CONSTRAINT(let selection): return selection.value.isValueEqual(to: rhs)
      case ._SIMULTANEOUS_CONSTRAINT_GROUP(let selection): return selection.value.isValueEqual(to: rhs)
      }
    }

    public func isValueEqualOptionally<T: SDAIValue>(to rhs: T?) -> Bool? {
      switch self {
      case ._EXPLICIT_CONSTRAINT(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._SIMULTANEOUS_CONSTRAINT_GROUP(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      }
    }

    public func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      switch self {
      case ._EXPLICIT_CONSTRAINT(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._SIMULTANEOUS_CONSTRAINT_GROUP(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      }
    }

    public func isValueEqual<T: SDAIValue>(to rhs: T, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      switch self {
      case ._EXPLICIT_CONSTRAINT(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._SIMULTANEOUS_CONSTRAINT_GROUP(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      }
    }

    public func isValueEqualOptionally<T: SDAIValue>(to rhs: T?, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      switch self {
      case ._EXPLICIT_CONSTRAINT(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._SIMULTANEOUS_CONSTRAINT_GROUP(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      }
    }


    //MARK: SDAIGenericTypeBase
    public func copy() -> Self {
      switch self {
      case ._EXPLICIT_CONSTRAINT(let selection): return ._EXPLICIT_CONSTRAINT(selection.copy())
      case ._SIMULTANEOUS_CONSTRAINT_GROUP(let selection): return ._SIMULTANEOUS_CONSTRAINT_GROUP(selection.copy())
      }
    }

    //MARK: SDAIGenericType
    public var typeMembers: Set<SDAI.STRING> {
      var members: Set<SDAI.STRING> = [SDAI.STRING(Self.typeName)]
      switch self {
      case ._EXPLICIT_CONSTRAINT(let selection): members.formUnion(selection.typeMembers)
      case ._SIMULTANEOUS_CONSTRAINT_GROUP(let selection): members.formUnion(selection.typeMembers)
      }
      return members
    }

    public var entityReference: SDAI.EntityReference? {
      switch self {
      case ._EXPLICIT_CONSTRAINT(let selection): return selection.entityReference
      case ._SIMULTANEOUS_CONSTRAINT_GROUP(let selection): return selection.entityReference
      }
    }
    public var stringValue: SDAI.STRING? {
      switch self {
      case ._EXPLICIT_CONSTRAINT(let selection): return selection.stringValue
      case ._SIMULTANEOUS_CONSTRAINT_GROUP(let selection): return selection.stringValue
      }
    }
    public var binaryValue: SDAI.BINARY? {
      switch self {
      case ._EXPLICIT_CONSTRAINT(let selection): return selection.binaryValue
      case ._SIMULTANEOUS_CONSTRAINT_GROUP(let selection): return selection.binaryValue
      }
    }
    public var logicalValue: SDAI.LOGICAL? {
      switch self {
      case ._EXPLICIT_CONSTRAINT(let selection): return selection.logicalValue
      case ._SIMULTANEOUS_CONSTRAINT_GROUP(let selection): return selection.logicalValue
      }
    }
    public var booleanValue: SDAI.BOOLEAN? {
      switch self {
      case ._EXPLICIT_CONSTRAINT(let selection): return selection.booleanValue
      case ._SIMULTANEOUS_CONSTRAINT_GROUP(let selection): return selection.booleanValue
      }
    }
    public var numberValue: SDAI.NUMBER? {
      switch self {
      case ._EXPLICIT_CONSTRAINT(let selection): return selection.numberValue
      case ._SIMULTANEOUS_CONSTRAINT_GROUP(let selection): return selection.numberValue
      }
    }
    public var realValue: SDAI.REAL? {
      switch self {
      case ._EXPLICIT_CONSTRAINT(let selection): return selection.realValue
      case ._SIMULTANEOUS_CONSTRAINT_GROUP(let selection): return selection.realValue
      }
    }
    public var integerValue: SDAI.INTEGER? {
      switch self {
      case ._EXPLICIT_CONSTRAINT(let selection): return selection.integerValue
      case ._SIMULTANEOUS_CONSTRAINT_GROUP(let selection): return selection.integerValue
      }
    }
    public var genericEnumValue: SDAI.GenericEnumValue? {
      switch self {
      case ._EXPLICIT_CONSTRAINT(let selection): return selection.genericEnumValue
      case ._SIMULTANEOUS_CONSTRAINT_GROUP(let selection): return selection.genericEnumValue
      }
    }
    public func arrayOptionalValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.ARRAY_OPTIONAL<ELEM>? {
      switch self {
      case ._EXPLICIT_CONSTRAINT(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._SIMULTANEOUS_CONSTRAINT_GROUP(let selection): return selection.arrayOptionalValue(elementType:elementType)
      }
    }
    public func arrayValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.ARRAY<ELEM>? {
      switch self {
      case ._EXPLICIT_CONSTRAINT(let selection): return selection.arrayValue(elementType:elementType)
      case ._SIMULTANEOUS_CONSTRAINT_GROUP(let selection): return selection.arrayValue(elementType:elementType)
      }
    }
    public func listValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.LIST<ELEM>? {
      switch self {
      case ._EXPLICIT_CONSTRAINT(let selection): return selection.listValue(elementType:elementType)
      case ._SIMULTANEOUS_CONSTRAINT_GROUP(let selection): return selection.listValue(elementType:elementType)
      }
    }
    public func bagValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.BAG<ELEM>? {
      switch self {
      case ._EXPLICIT_CONSTRAINT(let selection): return selection.bagValue(elementType:elementType)
      case ._SIMULTANEOUS_CONSTRAINT_GROUP(let selection): return selection.bagValue(elementType:elementType)
      }
    }
    public func setValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.SET<ELEM>? {
      switch self {
      case ._EXPLICIT_CONSTRAINT(let selection): return selection.setValue(elementType:elementType)
      case ._SIMULTANEOUS_CONSTRAINT_GROUP(let selection): return selection.setValue(elementType:elementType)
      }
    }
    public func enumValue<ENUM:SDAIEnumerationType>(enumType:ENUM.Type) -> ENUM? {
      switch self {
      case ._EXPLICIT_CONSTRAINT(let selection): return selection.enumValue(enumType:enumType)
      case ._SIMULTANEOUS_CONSTRAINT_GROUP(let selection): return selection.enumValue(enumType:enumType)
      }
    }

    //MARK: SDAIUnderlyingType
    public typealias FundamentalType = Self
    public static var typeName: String = 
      "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CONSTRAINT_GROUP_MEMBER"
    public var asFundamentalType: FundamentalType { return self }

    //MARK: SDAIObservableAggregateElement
    public var entityReferences: AnySequence<SDAI.EntityReference> {
      switch self {
      case ._EXPLICIT_CONSTRAINT(let entity): return entity.entityReferences
      case ._SIMULTANEOUS_CONSTRAINT_GROUP(let entity): return entity.entityReferences
      }
    }

    public mutating func configure(with observer: SDAI.EntityReferenceObserver) {
      switch self {
      case ._EXPLICIT_CONSTRAINT(let entity): 
        entity.configure(with: observer)
        self = ._EXPLICIT_CONSTRAINT(entity)
      case ._SIMULTANEOUS_CONSTRAINT_GROUP(let entity): 
        entity.configure(with: observer)
        self = ._SIMULTANEOUS_CONSTRAINT_GROUP(entity)
      }
    }

    public mutating func teardownObserver() {
      switch self {
      case ._EXPLICIT_CONSTRAINT(let entity): 
        entity.teardownObserver()
        self = ._EXPLICIT_CONSTRAINT(entity)
      case ._SIMULTANEOUS_CONSTRAINT_GROUP(let entity): 
        entity.teardownObserver()
        self = ._SIMULTANEOUS_CONSTRAINT_GROUP(entity)
      }
    }

    //MARK: SDAIAggregationBehavior
    public var aggregationHiBound: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationHiIndex: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationLoBound: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationLoIndex: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationSize: Int? {
      switch self {
      default: return nil
      }
    }

    //MARK: WHERE RULE VALIDATION (SELECT TYPE)
    public static func validateWhereRules(instance:Self?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      var result: [SDAI.WhereLabel:SDAI.LOGICAL] = [:]
      switch instance {
      case ._EXPLICIT_CONSTRAINT(let selectValue): 
        result = eEXPLICIT_CONSTRAINT.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\EXPLICIT_CONSTRAINT")
      case ._SIMULTANEOUS_CONSTRAINT_GROUP(let selectValue): 
        result = eSIMULTANEOUS_CONSTRAINT_GROUP.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\SIMULTANEOUS_CONSTRAINT_GROUP")
      case nil: break
      }

      return result
    }

  }

}


//MARK: - SELECT TYPE HIERARCHY
public protocol AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sCONSTRAINT_GROUP_MEMBER__type: 
  SDAISelectType {

  //MARK: GROUP REFERENCES
  var super_eREPRESENTATION_ITEM: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_ITEM? { get }
  var super_eSIMULTANEOUS_CONSTRAINT_GROUP: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSIMULTANEOUS_CONSTRAINT_GROUP? { get }
  var super_eVARIATIONAL_REPRESENTATION_ITEM: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eVARIATIONAL_REPRESENTATION_ITEM? { get }
  var super_eEXPLICIT_CONSTRAINT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEXPLICIT_CONSTRAINT? { get }

  //MARK: ENTITY ATTRIBUTE REFERENCES
  var DESCRIPTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT?  { get }
  var CONSTRAINED_ELEMENTS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_ITEM>
    /*[1:nil]*/ )?  { get }
  var TANGENT_CONTACT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nTANGENT_CONTACT_TYPE?  { get }
  var OFFSET_DIRECTION_CONSTRAINED: SDAI.BOOLEAN?  { get }
  var V_SMOOTHNESS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nTRANSITION_CODE?  { get }
  var REFERENCE_ELEMENTS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_ITEM>/*[0:
    nil]*/ )?  { get }
  var CONSTRAINING_EXPRESSION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEXPRESSION?  { get }
  var FIXED_CONSTITUENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATIVE_SHAPE_REPRESENTATION?  { get }
  var RADIUS_VALUE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { get }
  var ANGLE_VALUE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { get }
  var OFFSET_TYPE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nPARALLEL_OFFSET_TYPE?  { get }
  var MIRROR_ELEMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sLINEAR_GEOMETRY_CONSTRAINT_ELEMENT?  { get }
  var LENGTH_VALUE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { get }
  var REP_1: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATIVE_SHAPE_REPRESENTATION?  { get }
  var REP_2: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATIVE_SHAPE_REPRESENTATION?  { get }
  var CONSTRAINT_GROUP: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sCONSTRAINT_GROUP_MEMBER>
    /*[2:nil]*/ )?  { get }
  var SMOOTHNESS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nTRANSITION_CODE?  { get }
  var OFFSET_VALUE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { get }
  var NAME: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { get }
  var NEGATIVE_DIRECTION: SDAI.BOOLEAN?  { get }
  var U_SMOOTHNESS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nTRANSITION_CODE?  { get }
}

public protocol AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sCONSTRAINT_GROUP_MEMBER__subtype: 
  AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sCONSTRAINT_GROUP_MEMBER__type, SDAIDefinedType
where Supertype: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sCONSTRAINT_GROUP_MEMBER__type
{}

public extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sCONSTRAINT_GROUP_MEMBER__subtype {
  //MARK: CONSTRUCTORS
  init?(possiblyFrom complex: SDAI.ComplexEntity?) {
    self.init(fundamental: FundamentalType(possiblyFrom: complex))
  }

  init?<T: SDAIUnderlyingType>(possiblyFrom underlyingType: T?) {
    self.init(fundamental: FundamentalType(possiblyFrom: underlyingType))
  }

  init?<G: SDAIGenericType>(fromGeneric generic: G?) {
    self.init(fundamental: FundamentalType.convert(fromGeneric: generic))
  }

  //MARK: GROUP REFERENCES
  var super_eREPRESENTATION_ITEM: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_ITEM? { rep.super_eREPRESENTATION_ITEM }
  var super_eSIMULTANEOUS_CONSTRAINT_GROUP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSIMULTANEOUS_CONSTRAINT_GROUP? { rep.super_eSIMULTANEOUS_CONSTRAINT_GROUP }
  var super_eVARIATIONAL_REPRESENTATION_ITEM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eVARIATIONAL_REPRESENTATION_ITEM? { rep.super_eVARIATIONAL_REPRESENTATION_ITEM }
  var super_eEXPLICIT_CONSTRAINT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEXPLICIT_CONSTRAINT? { rep.super_eEXPLICIT_CONSTRAINT }

  //MARK: ENTITY ATTRIBUTE REFERENCES
  var DESCRIPTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT?  { rep.DESCRIPTION }
  var CONSTRAINED_ELEMENTS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_ITEM>
    /*[1:nil]*/ )?  { rep.CONSTRAINED_ELEMENTS }
  var TANGENT_CONTACT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nTANGENT_CONTACT_TYPE?  { rep.TANGENT_CONTACT }
  var OFFSET_DIRECTION_CONSTRAINED: SDAI.BOOLEAN?  { rep.OFFSET_DIRECTION_CONSTRAINED }
  var V_SMOOTHNESS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nTRANSITION_CODE?  { rep.V_SMOOTHNESS }
  var REFERENCE_ELEMENTS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_ITEM>/*[0:
    nil]*/ )?  { rep.REFERENCE_ELEMENTS }
  var CONSTRAINING_EXPRESSION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEXPRESSION?  { rep.CONSTRAINING_EXPRESSION }
  var FIXED_CONSTITUENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATIVE_SHAPE_REPRESENTATION?  { rep.FIXED_CONSTITUENT }
  var RADIUS_VALUE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { rep.RADIUS_VALUE }
  var ANGLE_VALUE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { rep.ANGLE_VALUE }
  var OFFSET_TYPE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nPARALLEL_OFFSET_TYPE?  { rep.OFFSET_TYPE }
  var MIRROR_ELEMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sLINEAR_GEOMETRY_CONSTRAINT_ELEMENT?  { rep.MIRROR_ELEMENT }
  var LENGTH_VALUE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { rep.LENGTH_VALUE }
  var REP_1: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATIVE_SHAPE_REPRESENTATION?  { rep.REP_1 }
  var REP_2: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATIVE_SHAPE_REPRESENTATION?  { rep.REP_2 }
  var CONSTRAINT_GROUP: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sCONSTRAINT_GROUP_MEMBER>
    /*[2:nil]*/ )?  { rep.CONSTRAINT_GROUP }
  var SMOOTHNESS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nTRANSITION_CODE?  { rep.SMOOTHNESS }
  var OFFSET_VALUE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { rep.OFFSET_VALUE }
  var NAME: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { rep.NAME }
  var NEGATIVE_DIRECTION: SDAI.BOOLEAN?  { rep.NEGATIVE_DIRECTION }
  var U_SMOOTHNESS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nTRANSITION_CODE?  { rep.U_SMOOTHNESS }
}

