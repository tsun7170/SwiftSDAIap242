/* file: curve_or_annotation_curve_occurrence.swift 	 generated: Sun Oct 31 15:32:10 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -TYPE DEFINITION in EXPRESS
/*
  TYPE curve_or_annotation_curve_occurrence = SELECT
    ( annotation_curve_occurrence (*ENTITY*),
     curve (*ENTITY*) );
  END_TYPE; -- curve_or_annotation_curve_occurrence (line:1817 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES FOR SELECT
/*
  annotation_curve_occurrence (*ENTITY*):
  ATTR:  item: curve_or_curve_set
  ATTR:  styles: SET [0 : ?] OF presentation_style_assignment
  ATTR:  name: label

  curve (*ENTITY*):
  ATTR:  reference_to_curve: definitional_representation
  ATTR:  weights_data: (AMBIGUOUS (CASE LEVEL))
  ATTR:  curve_form: b_spline_curve_form
  ATTR:  control_points_list: (AMBIGUOUS (CASE LEVEL))
  ATTR:  basis_curve: (AMBIGUOUS (CASE LEVEL))
  ATTR:  trim_1: SET [1 : 2] OF trimming_select
  ATTR:  trim_2: SET [1 : 2] OF trimming_select
  ATTR:  locally_refined_spline_type: locally_refined_spline_type_enum
  ATTR:  knots: LIST [2 : ?] OF parameter_value
  ATTR:  pnt: cartesian_point
  ATTR:  silhouetted_model: surface_or_solid_model
  ATTR:  sense_agreement: BOOLEAN
  ATTR:  knot_values: spline_knot_values
  ATTR:  degree: INTEGER
  ATTR:  using_sketch: positioned_sketch
  ATTR:  radius: positive_length_measure
  ATTR:  semi_imag_axis: positive_length_measure
  ATTR:  scaling_factors: LIST [2 : ?] OF REAL
  ATTR:  distance: (AMBIGUOUS (CASE LEVEL))
  ATTR:  knot_multiplicities: LIST [2 : ?] OF INTEGER
  ATTR:  position: (AMBIGUOUS (CASE LEVEL))
  ATTR:  transformation: cartesian_transformation_operator
  ATTR:  clothoid_constant: length_measure
  ATTR:  upper_index_on_control_points: INTEGER
  ATTR:  upper_index_on_knots: INTEGER
  ATTR:  associated_geometry: LIST [1 : 2] OF pcurve_or_surface
  ATTR:  parent_curve: curve
  ATTR:  master_representation: (AMBIGUOUS (CASE LEVEL))
  ATTR:  n_segments: INTEGER
  ATTR:  external_surface: surface
  ATTR:  knot_spec: knot_type
  ATTR:  self_intersect: (AMBIGUOUS (CASE LEVEL))
  ATTR:  points: LIST [2 : ?] OF cartesian_point
  ATTR:  curve_3d: curve
  ATTR:  base_radius: positive_length_measure
  ATTR:  segments: LIST [1 : ?] OF composite_curve_segment
  ATTR:  curve_plane: plane
  ATTR:  semi_axis_1: positive_length_measure
  ATTR:  basis_surface: (AMBIGUOUS (CASE LEVEL))
  ATTR:  b_splines: LIST [2 : ?] OF local_b_spline
  ATTR:  semi_axis_2: positive_length_measure
  ATTR:  semi_axis: positive_length_measure
  ATTR:  control_points: ARRAY [0 : upper_index_on_control_points] OF cartesian_point
  ATTR:  closed_curve: (AMBIGUOUS (CASE LEVEL))
  ATTR:  ref_direction: direction
  ATTR:  computed_representation: curve
  ATTR:  external_curve: curve
  ATTR:  projection_direction: direction
  ATTR:  intersected_model: surface_or_solid_model
  ATTR:  dir: vector
  ATTR:  focal_dist: length_measure
  ATTR:  domain: LIST [2 : 2] OF REAL
  ATTR:  name: label
  ATTR:  view_direction: direction
  ATTR:  weights: ARRAY [0 : upper_index_on_control_points] OF REAL
  ATTR:  dim: dimension_count

*/

/** SELECT type
- EXPRESS:
```express
  TYPE curve_or_annotation_curve_occurrence = SELECT
    ( annotation_curve_occurrence (*ENTITY*),
     curve (*ENTITY*) );
  END_TYPE; -- curve_or_annotation_curve_occurrence (line:1817 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public enum sCURVE_OR_ANNOTATION_CURVE_OCCURRENCE : SDAIValue, AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sCURVE_OR_ANNOTATION_CURVE_OCCURRENCE__type {

    /// SELECT case ``eANNOTATION_CURVE_OCCURRENCE`` (ENTITY) in ``sCURVE_OR_ANNOTATION_CURVE_OCCURRENCE``
    case _ANNOTATION_CURVE_OCCURRENCE(eANNOTATION_CURVE_OCCURRENCE)	// (ENTITY)

    /// SELECT case ``eCURVE`` (ENTITY) in ``sCURVE_OR_ANNOTATION_CURVE_OCCURRENCE``
    case _CURVE(eCURVE)	// (ENTITY)

    //MARK: - CONSTRUCTORS
    public init(fundamental: FundamentalType) { self = fundamental }

    public init?<T: SDAIUnderlyingType>(possiblyFrom underlyingType: T?){
      return nil
    }

    public init?(possiblyFrom complex: SDAI.ComplexEntity?) {
      guard let complex = complex else { return nil }

      if let base = complex.entityReference(eANNOTATION_CURVE_OCCURRENCE.self) {self = ._ANNOTATION_CURVE_OCCURRENCE(base) }
      else if let base = complex.entityReference(eCURVE.self) {self = ._CURVE(base) }
      else { return nil }
    }

    public init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let select = generic else { return nil }

      if let fundamental = select as? Self {
        self.init(fundamental: fundamental)
      }
      else if let base = eANNOTATION_CURVE_OCCURRENCE.convert(fromGeneric: select) {
        self = ._ANNOTATION_CURVE_OCCURRENCE(base)
      }
      else if let base = eCURVE.convert(fromGeneric: select) {
        self = ._CURVE(base)
      }
      else { return nil }
    }

    // InitializableByP21Parameter
    public static var bareTypeName: String = "CURVE_OR_ANNOTATION_CURVE_OCCURRENCE"

    public init?(p21typedParam: P21Decode.ExchangeStructure.TypedParameter, from exchangeStructure: P21Decode.ExchangeStructure) {
      guard let keyword = p21typedParam.keyword.asStandardKeyword else { exchangeStructure.error = "unexpected p21parameter(\(p21typedParam)) while resolving \(Self.bareTypeName) select value"; return nil }

      switch(keyword) {
      default:
        exchangeStructure.error = "unexpected p21parameter(\(p21typedParam)) while resolving \(Self.bareTypeName) select value"
        return nil
      }
    }

    public init?(p21untypedParam: P21Decode.ExchangeStructure.UntypedParameter, from exchangeStructure: P21Decode.ExchangeStructure) {
      switch p21untypedParam {
      case .rhsOccurenceName(let rhsname):
        switch rhsname {
        case .constantEntityName(let name):
          guard let entity = exchangeStructure.resolve(constantEntityName: name) else {exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) instance"); return nil }
          self.init(possiblyFrom: entity.complexEntity)

        case .entityInstanceName(let name):
          guard let complex = exchangeStructure.resolve(entityInstanceName: name) else {exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) instance"); return nil }
          self.init(possiblyFrom: complex)

        default:
          exchangeStructure.error = "unexpected p21parameter(\(p21untypedParam)) while resolving \(Self.bareTypeName) select instance"
          return nil
        }

      default:
        exchangeStructure.error = "unexpected p21parameter(\(p21untypedParam)) while resolving \(Self.bareTypeName) select instance"
        return nil
      }
    }

    public init?(p21omittedParamfrom exchangeStructure: P21Decode.ExchangeStructure) {
      return nil
    }


    //MARK: - ENTITY UNDERLYING TYPE REFERENCES
    public var super_eANNOTATION_CURVE_OCCURRENCE: eANNOTATION_CURVE_OCCURRENCE? {
      switch self {
      case ._ANNOTATION_CURVE_OCCURRENCE(let entity): return entity
      default: return nil
      }
    }

    public var super_eREPRESENTATION_ITEM: eREPRESENTATION_ITEM? {
      switch self {
      case ._ANNOTATION_CURVE_OCCURRENCE(let entity): return entity.super_eREPRESENTATION_ITEM
      case ._CURVE(let entity): return entity.super_eREPRESENTATION_ITEM
      }
    }

    public var super_eANNOTATION_OCCURRENCE: eANNOTATION_OCCURRENCE? {
      switch self {
      case ._ANNOTATION_CURVE_OCCURRENCE(let entity): return entity.super_eANNOTATION_OCCURRENCE
      default: return nil
      }
    }

    public var super_eCURVE: eCURVE? {
      switch self {
      case ._CURVE(let entity): return entity
      default: return nil
      }
    }

    public var super_eSTYLED_ITEM: eSTYLED_ITEM? {
      switch self {
      case ._ANNOTATION_CURVE_OCCURRENCE(let entity): return entity.super_eSTYLED_ITEM
      default: return nil
      }
    }

    public var super_eGEOMETRIC_REPRESENTATION_ITEM: eGEOMETRIC_REPRESENTATION_ITEM? {
      switch self {
      case ._CURVE(let entity): return entity.super_eGEOMETRIC_REPRESENTATION_ITEM
      default: return nil
      }
    }


    //MARK: - ENTITY ATTRIBUTE REFERENCES
    /// attribute of SELECT type ``sCURVE_OR_ANNOTATION_CURVE_OCCURRENCE``
    /// - origin: ENTITY( ``eCURVE`` )
    public var REFERENCE_TO_CURVE: eDEFINITIONAL_REPRESENTATION?  {
      switch self {
      case ._CURVE(let entity): return entity.REFERENCE_TO_CURVE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCURVE_OR_ANNOTATION_CURVE_OCCURRENCE``
    /// - origin: ENTITY( ``eCURVE`` )
    public var CURVE_FORM: nB_SPLINE_CURVE_FORM?  {
      switch self {
      case ._CURVE(let entity): return entity.CURVE_FORM
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCURVE_OR_ANNOTATION_CURVE_OCCURRENCE``
    /// - origin: ENTITY( ``eANNOTATION_CURVE_OCCURRENCE`` )
    public var ITEM: sCURVE_OR_CURVE_SET?  {
      switch self {
      case ._ANNOTATION_CURVE_OCCURRENCE(let entity): return entity.ITEM
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCURVE_OR_ANNOTATION_CURVE_OCCURRENCE``
    /// - origin: ENTITY( ``eCURVE`` )
    public var TRIM_1: (SDAI.SET<sTRIMMING_SELECT>/*[1:2]*/ )?  {
      switch self {
      case ._CURVE(let entity): return entity.TRIM_1
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCURVE_OR_ANNOTATION_CURVE_OCCURRENCE``
    /// - origin: ENTITY( ``eCURVE`` )
    public var TRIM_2: (SDAI.SET<sTRIMMING_SELECT>/*[1:2]*/ )?  {
      switch self {
      case ._CURVE(let entity): return entity.TRIM_2
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCURVE_OR_ANNOTATION_CURVE_OCCURRENCE``
    /// - origin: ENTITY( ``eCURVE`` )
    public var LOCALLY_REFINED_SPLINE_TYPE: nLOCALLY_REFINED_SPLINE_TYPE_ENUM?  {
      switch self {
      case ._CURVE(let entity): return entity.LOCALLY_REFINED_SPLINE_TYPE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCURVE_OR_ANNOTATION_CURVE_OCCURRENCE``
    /// - origin: ENTITY( ``eCURVE`` )
    public var KNOTS: (SDAI.LIST<tPARAMETER_VALUE>/*[2:nil]*/ )?  {
      switch self {
      case ._CURVE(let entity): return entity.KNOTS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCURVE_OR_ANNOTATION_CURVE_OCCURRENCE``
    /// - origin: ENTITY( ``eCURVE`` )
    public var PNT: eCARTESIAN_POINT?  {
      switch self {
      case ._CURVE(let entity): return entity.PNT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCURVE_OR_ANNOTATION_CURVE_OCCURRENCE``
    /// - origin: ENTITY( ``eCURVE`` )
    public var SILHOUETTED_MODEL: sSURFACE_OR_SOLID_MODEL?  {
      switch self {
      case ._CURVE(let entity): return entity.SILHOUETTED_MODEL
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCURVE_OR_ANNOTATION_CURVE_OCCURRENCE``
    /// - origin: ENTITY( ``eCURVE`` )
    public var SENSE_AGREEMENT: SDAI.BOOLEAN?  {
      switch self {
      case ._CURVE(let entity): return entity.SENSE_AGREEMENT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCURVE_OR_ANNOTATION_CURVE_OCCURRENCE``
    /// - origin: ENTITY( ``eCURVE`` )
    public var KNOT_VALUES: tSPLINE_KNOT_VALUES?  {
      switch self {
      case ._CURVE(let entity): return entity.KNOT_VALUES
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCURVE_OR_ANNOTATION_CURVE_OCCURRENCE``
    /// - origin: ENTITY( ``eCURVE`` )
    public var DEGREE: SDAI.INTEGER?  {
      switch self {
      case ._CURVE(let entity): return entity.DEGREE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCURVE_OR_ANNOTATION_CURVE_OCCURRENCE``
    /// - origin: ENTITY( ``eCURVE`` )
    public var USING_SKETCH: ePOSITIONED_SKETCH?  {
      switch self {
      case ._CURVE(let entity): return entity.USING_SKETCH
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCURVE_OR_ANNOTATION_CURVE_OCCURRENCE``
    /// - origin: ENTITY( ``eCURVE`` )
    public var RADIUS: tPOSITIVE_LENGTH_MEASURE?  {
      switch self {
      case ._CURVE(let entity): return entity.RADIUS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCURVE_OR_ANNOTATION_CURVE_OCCURRENCE``
    /// - origin: ENTITY( ``eCURVE`` )
    public var SEMI_IMAG_AXIS: tPOSITIVE_LENGTH_MEASURE?  {
      switch self {
      case ._CURVE(let entity): return entity.SEMI_IMAG_AXIS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCURVE_OR_ANNOTATION_CURVE_OCCURRENCE``
    /// - origin: ENTITY( ``eCURVE`` )
    public var SCALING_FACTORS: (SDAI.LIST<SDAI.REAL>/*[2:nil]*/ )?  {
      switch self {
      case ._CURVE(let entity): return entity.SCALING_FACTORS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCURVE_OR_ANNOTATION_CURVE_OCCURRENCE``
    /// - origin: ENTITY( ``eCURVE`` )
    public var KNOT_MULTIPLICITIES: (SDAI.LIST<SDAI.INTEGER>/*[2:nil]*/ )?  {
      switch self {
      case ._CURVE(let entity): return entity.KNOT_MULTIPLICITIES
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCURVE_OR_ANNOTATION_CURVE_OCCURRENCE``
    /// - origin: ENTITY( ``eCURVE`` )
    public var TRANSFORMATION: eCARTESIAN_TRANSFORMATION_OPERATOR?  {
      switch self {
      case ._CURVE(let entity): return entity.TRANSFORMATION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCURVE_OR_ANNOTATION_CURVE_OCCURRENCE``
    /// - origin: ENTITY( ``eCURVE`` )
    public var CLOTHOID_CONSTANT: tLENGTH_MEASURE?  {
      switch self {
      case ._CURVE(let entity): return entity.CLOTHOID_CONSTANT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCURVE_OR_ANNOTATION_CURVE_OCCURRENCE``
    /// - origin: ENTITY( ``eCURVE`` )
    public var UPPER_INDEX_ON_CONTROL_POINTS: SDAI.INTEGER?  {
      switch self {
      case ._CURVE(let entity): return entity.UPPER_INDEX_ON_CONTROL_POINTS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCURVE_OR_ANNOTATION_CURVE_OCCURRENCE``
    /// - origin: ENTITY( ``eCURVE`` )
    public var UPPER_INDEX_ON_KNOTS: SDAI.INTEGER?  {
      switch self {
      case ._CURVE(let entity): return entity.UPPER_INDEX_ON_KNOTS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCURVE_OR_ANNOTATION_CURVE_OCCURRENCE``
    /// - origin: ENTITY( ``eCURVE`` )
    public var ASSOCIATED_GEOMETRY: (SDAI.LIST<sPCURVE_OR_SURFACE>/*[1:2]*/ )?  {
      switch self {
      case ._CURVE(let entity): return entity.ASSOCIATED_GEOMETRY
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCURVE_OR_ANNOTATION_CURVE_OCCURRENCE``
    /// - origin: ENTITY( ``eCURVE`` )
    public var PARENT_CURVE: eCURVE?  {
      switch self {
      case ._CURVE(let entity): return entity.PARENT_CURVE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCURVE_OR_ANNOTATION_CURVE_OCCURRENCE``
    /// - origin: ENTITY( ``eCURVE`` )
    public var N_SEGMENTS: SDAI.INTEGER?  {
      switch self {
      case ._CURVE(let entity): return entity.N_SEGMENTS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCURVE_OR_ANNOTATION_CURVE_OCCURRENCE``
    /// - origin: ENTITY( ``eCURVE`` )
    public var EXTERNAL_SURFACE: eSURFACE?  {
      switch self {
      case ._CURVE(let entity): return entity.EXTERNAL_SURFACE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCURVE_OR_ANNOTATION_CURVE_OCCURRENCE``
    /// - origin: ENTITY( ``eCURVE`` )
    public var KNOT_SPEC: nKNOT_TYPE?  {
      switch self {
      case ._CURVE(let entity): return entity.KNOT_SPEC
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCURVE_OR_ANNOTATION_CURVE_OCCURRENCE``
    /// - origin: ENTITY( ``eCURVE`` )
    public var POINTS: (SDAI.LIST<eCARTESIAN_POINT>/*[2:nil]*/ )?  {
      switch self {
      case ._CURVE(let entity): return entity.POINTS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCURVE_OR_ANNOTATION_CURVE_OCCURRENCE``
    /// - origin: ENTITY( ``eCURVE`` )
    public var CURVE_3D: eCURVE?  {
      switch self {
      case ._CURVE(let entity): return entity.CURVE_3D
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCURVE_OR_ANNOTATION_CURVE_OCCURRENCE``
    /// - origin: ENTITY( ``eCURVE`` )
    public var BASE_RADIUS: tPOSITIVE_LENGTH_MEASURE?  {
      switch self {
      case ._CURVE(let entity): return entity.BASE_RADIUS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCURVE_OR_ANNOTATION_CURVE_OCCURRENCE``
    /// - origin: ENTITY( ``eCURVE`` )
    public var SEGMENTS: (SDAI.LIST<eCOMPOSITE_CURVE_SEGMENT>/*[1:nil]*/ )?  {
      switch self {
      case ._CURVE(let entity): return entity.SEGMENTS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCURVE_OR_ANNOTATION_CURVE_OCCURRENCE``
    /// - origin: ENTITY( ``eCURVE`` )
    public var CURVE_PLANE: ePLANE?  {
      switch self {
      case ._CURVE(let entity): return entity.CURVE_PLANE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCURVE_OR_ANNOTATION_CURVE_OCCURRENCE``
    /// - origin: ENTITY( ``eCURVE`` )
    public var SEMI_AXIS_1: tPOSITIVE_LENGTH_MEASURE?  {
      switch self {
      case ._CURVE(let entity): return entity.SEMI_AXIS_1
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCURVE_OR_ANNOTATION_CURVE_OCCURRENCE``
    /// - origin: ENTITY( ``eANNOTATION_CURVE_OCCURRENCE`` )
    public var STYLES: (SDAI.SET<ePRESENTATION_STYLE_ASSIGNMENT>/*[0:nil]*/ )?  {
      switch self {
      case ._ANNOTATION_CURVE_OCCURRENCE(let entity): return entity.STYLES
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCURVE_OR_ANNOTATION_CURVE_OCCURRENCE``
    /// - origin: ENTITY( ``eCURVE`` )
    public var B_SPLINES: (SDAI.LIST<eLOCAL_B_SPLINE>/*[2:nil]*/ )?  {
      switch self {
      case ._CURVE(let entity): return entity.B_SPLINES
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCURVE_OR_ANNOTATION_CURVE_OCCURRENCE``
    /// - origin: ENTITY( ``eCURVE`` )
    public var SEMI_AXIS_2: tPOSITIVE_LENGTH_MEASURE?  {
      switch self {
      case ._CURVE(let entity): return entity.SEMI_AXIS_2
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCURVE_OR_ANNOTATION_CURVE_OCCURRENCE``
    /// - origin: ENTITY( ``eCURVE`` )
    public var SEMI_AXIS: tPOSITIVE_LENGTH_MEASURE?  {
      switch self {
      case ._CURVE(let entity): return entity.SEMI_AXIS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCURVE_OR_ANNOTATION_CURVE_OCCURRENCE``
    /// - origin: ENTITY( ``eCURVE`` )
    public var CONTROL_POINTS: (SDAI.ARRAY<eCARTESIAN_POINT>/*[0:UPPER_INDEX_ON_CONTROL_POINTS]*/ )?  {
      switch self {
      case ._CURVE(let entity): return entity.CONTROL_POINTS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCURVE_OR_ANNOTATION_CURVE_OCCURRENCE``
    /// - origin: ENTITY( ``eCURVE`` )
    public var REF_DIRECTION: eDIRECTION?  {
      switch self {
      case ._CURVE(let entity): return entity.REF_DIRECTION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCURVE_OR_ANNOTATION_CURVE_OCCURRENCE``
    /// - origin: ENTITY( ``eCURVE`` )
    public var COMPUTED_REPRESENTATION: eCURVE?  {
      switch self {
      case ._CURVE(let entity): return entity.COMPUTED_REPRESENTATION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCURVE_OR_ANNOTATION_CURVE_OCCURRENCE``
    /// - origin: ENTITY( ``eCURVE`` )
    public var EXTERNAL_CURVE: eCURVE?  {
      switch self {
      case ._CURVE(let entity): return entity.EXTERNAL_CURVE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCURVE_OR_ANNOTATION_CURVE_OCCURRENCE``
    /// - origin: ENTITY( ``eCURVE`` )
    public var PROJECTION_DIRECTION: eDIRECTION?  {
      switch self {
      case ._CURVE(let entity): return entity.PROJECTION_DIRECTION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCURVE_OR_ANNOTATION_CURVE_OCCURRENCE``
    /// - origin: ENTITY( ``eCURVE`` )
    public var INTERSECTED_MODEL: sSURFACE_OR_SOLID_MODEL?  {
      switch self {
      case ._CURVE(let entity): return entity.INTERSECTED_MODEL
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCURVE_OR_ANNOTATION_CURVE_OCCURRENCE``
    /// - origin: ENTITY( ``eCURVE`` )
    public var DIR: eVECTOR?  {
      switch self {
      case ._CURVE(let entity): return entity.DIR
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCURVE_OR_ANNOTATION_CURVE_OCCURRENCE``
    /// - origin: ENTITY( ``eCURVE`` )
    public var FOCAL_DIST: tLENGTH_MEASURE?  {
      switch self {
      case ._CURVE(let entity): return entity.FOCAL_DIST
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCURVE_OR_ANNOTATION_CURVE_OCCURRENCE``
    /// - origin: ENTITY( ``eCURVE`` )
    public var DOMAIN: (SDAI.LIST<SDAI.REAL>/*[2:2]*/ )?  {
      switch self {
      case ._CURVE(let entity): return entity.DOMAIN
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCURVE_OR_ANNOTATION_CURVE_OCCURRENCE``
    /// - origin: ENTITY( ``eANNOTATION_CURVE_OCCURRENCE`` )
    /// - origin: ENTITY( ``eCURVE`` )
    public var NAME: tLABEL?  {
      switch self {
      case ._ANNOTATION_CURVE_OCCURRENCE(let entity): return entity.NAME
      case ._CURVE(let entity): return entity.NAME
      }
    }

    /// attribute of SELECT type ``sCURVE_OR_ANNOTATION_CURVE_OCCURRENCE``
    /// - origin: ENTITY( ``eCURVE`` )
    public var VIEW_DIRECTION: eDIRECTION?  {
      switch self {
      case ._CURVE(let entity): return entity.VIEW_DIRECTION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCURVE_OR_ANNOTATION_CURVE_OCCURRENCE``
    /// - origin: ENTITY( ``eCURVE`` )
    public var WEIGHTS: (SDAI.ARRAY<SDAI.REAL>/*[0:UPPER_INDEX_ON_CONTROL_POINTS]*/ )?  {
      switch self {
      case ._CURVE(let entity): return entity.WEIGHTS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCURVE_OR_ANNOTATION_CURVE_OCCURRENCE``
    /// - origin: ENTITY( ``eCURVE`` )
    public var DIM: tDIMENSION_COUNT?  {
      switch self {
      case ._CURVE(let entity): return entity.DIM
      default: return nil
      }
    }


    //MARK: - SDAIValue
    public func isValueEqual<T: SDAIValue>(to rhs: T) -> Bool {
      switch self {
      case ._ANNOTATION_CURVE_OCCURRENCE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._CURVE(let selection): return selection.value.isValueEqual(to: rhs)
      }
    }

    public func isValueEqualOptionally<T: SDAIValue>(to rhs: T?) -> Bool? {
      switch self {
      case ._ANNOTATION_CURVE_OCCURRENCE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._CURVE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      }
    }

    public func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      switch self {
      case ._ANNOTATION_CURVE_OCCURRENCE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._CURVE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      }
    }

    public func isValueEqual<T: SDAIValue>(to rhs: T, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      switch self {
      case ._ANNOTATION_CURVE_OCCURRENCE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._CURVE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      }
    }

    public func isValueEqualOptionally<T: SDAIValue>(to rhs: T?, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      switch self {
      case ._ANNOTATION_CURVE_OCCURRENCE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._CURVE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      }
    }


    //MARK: SDAIGenericTypeBase
    public func copy() -> Self {
      switch self {
      case ._ANNOTATION_CURVE_OCCURRENCE(let selection): return ._ANNOTATION_CURVE_OCCURRENCE(selection.copy())
      case ._CURVE(let selection): return ._CURVE(selection.copy())
      }
    }

    //MARK: SDAIGenericType
    public var typeMembers: Set<SDAI.STRING> {
      var members: Set<SDAI.STRING> = [SDAI.STRING(Self.typeName)]
      switch self {
      case ._ANNOTATION_CURVE_OCCURRENCE(let selection): members.formUnion(selection.typeMembers)
      case ._CURVE(let selection): members.formUnion(selection.typeMembers)
      }
      return members
    }

    public var entityReference: SDAI.EntityReference? {
      switch self {
      case ._ANNOTATION_CURVE_OCCURRENCE(let selection): return selection.entityReference
      case ._CURVE(let selection): return selection.entityReference
      }
    }
    public var stringValue: SDAI.STRING? {
      switch self {
      case ._ANNOTATION_CURVE_OCCURRENCE(let selection): return selection.stringValue
      case ._CURVE(let selection): return selection.stringValue
      }
    }
    public var binaryValue: SDAI.BINARY? {
      switch self {
      case ._ANNOTATION_CURVE_OCCURRENCE(let selection): return selection.binaryValue
      case ._CURVE(let selection): return selection.binaryValue
      }
    }
    public var logicalValue: SDAI.LOGICAL? {
      switch self {
      case ._ANNOTATION_CURVE_OCCURRENCE(let selection): return selection.logicalValue
      case ._CURVE(let selection): return selection.logicalValue
      }
    }
    public var booleanValue: SDAI.BOOLEAN? {
      switch self {
      case ._ANNOTATION_CURVE_OCCURRENCE(let selection): return selection.booleanValue
      case ._CURVE(let selection): return selection.booleanValue
      }
    }
    public var numberValue: SDAI.NUMBER? {
      switch self {
      case ._ANNOTATION_CURVE_OCCURRENCE(let selection): return selection.numberValue
      case ._CURVE(let selection): return selection.numberValue
      }
    }
    public var realValue: SDAI.REAL? {
      switch self {
      case ._ANNOTATION_CURVE_OCCURRENCE(let selection): return selection.realValue
      case ._CURVE(let selection): return selection.realValue
      }
    }
    public var integerValue: SDAI.INTEGER? {
      switch self {
      case ._ANNOTATION_CURVE_OCCURRENCE(let selection): return selection.integerValue
      case ._CURVE(let selection): return selection.integerValue
      }
    }
    public var genericEnumValue: SDAI.GenericEnumValue? {
      switch self {
      case ._ANNOTATION_CURVE_OCCURRENCE(let selection): return selection.genericEnumValue
      case ._CURVE(let selection): return selection.genericEnumValue
      }
    }
    public func arrayOptionalValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.ARRAY_OPTIONAL<ELEM>? {
      switch self {
      case ._ANNOTATION_CURVE_OCCURRENCE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._CURVE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      }
    }
    public func arrayValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.ARRAY<ELEM>? {
      switch self {
      case ._ANNOTATION_CURVE_OCCURRENCE(let selection): return selection.arrayValue(elementType:elementType)
      case ._CURVE(let selection): return selection.arrayValue(elementType:elementType)
      }
    }
    public func listValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.LIST<ELEM>? {
      switch self {
      case ._ANNOTATION_CURVE_OCCURRENCE(let selection): return selection.listValue(elementType:elementType)
      case ._CURVE(let selection): return selection.listValue(elementType:elementType)
      }
    }
    public func bagValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.BAG<ELEM>? {
      switch self {
      case ._ANNOTATION_CURVE_OCCURRENCE(let selection): return selection.bagValue(elementType:elementType)
      case ._CURVE(let selection): return selection.bagValue(elementType:elementType)
      }
    }
    public func setValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.SET<ELEM>? {
      switch self {
      case ._ANNOTATION_CURVE_OCCURRENCE(let selection): return selection.setValue(elementType:elementType)
      case ._CURVE(let selection): return selection.setValue(elementType:elementType)
      }
    }
    public func enumValue<ENUM:SDAIEnumerationType>(enumType:ENUM.Type) -> ENUM? {
      switch self {
      case ._ANNOTATION_CURVE_OCCURRENCE(let selection): return selection.enumValue(enumType:enumType)
      case ._CURVE(let selection): return selection.enumValue(enumType:enumType)
      }
    }

    //MARK: SDAIUnderlyingType
    public typealias FundamentalType = Self
    public static var typeName: String = 
      "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CURVE_OR_ANNOTATION_CURVE_OCCURRENCE"
    public var asFundamentalType: FundamentalType { return self }

    //MARK: SDAIObservableAggregateElement
    public var entityReferences: AnySequence<SDAI.EntityReference> {
      switch self {
      case ._ANNOTATION_CURVE_OCCURRENCE(let entity): return entity.entityReferences
      case ._CURVE(let entity): return entity.entityReferences
      }
    }

    public mutating func configure(with observer: SDAI.EntityReferenceObserver) {
      switch self {
      case ._ANNOTATION_CURVE_OCCURRENCE(let entity): 
        entity.configure(with: observer)
        self = ._ANNOTATION_CURVE_OCCURRENCE(entity)
      case ._CURVE(let entity): 
        entity.configure(with: observer)
        self = ._CURVE(entity)
      }
    }

    public mutating func teardownObserver() {
      switch self {
      case ._ANNOTATION_CURVE_OCCURRENCE(let entity): 
        entity.teardownObserver()
        self = ._ANNOTATION_CURVE_OCCURRENCE(entity)
      case ._CURVE(let entity): 
        entity.teardownObserver()
        self = ._CURVE(entity)
      }
    }

    //MARK: SDAIAggregationBehavior
    public var aggregationHiBound: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationHiIndex: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationLoBound: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationLoIndex: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationSize: Int? {
      switch self {
      default: return nil
      }
    }

    //MARK: WHERE RULE VALIDATION (SELECT TYPE)
    public static func validateWhereRules(instance:Self?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      var result: [SDAI.WhereLabel:SDAI.LOGICAL] = [:]
      switch instance {
      case ._ANNOTATION_CURVE_OCCURRENCE(let selectValue): 
        result = eANNOTATION_CURVE_OCCURRENCE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\ANNOTATION_CURVE_OCCURRENCE")
      case ._CURVE(let selectValue): result = eCURVE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\CURVE")
      case nil: break
      }

      return result
    }

  }

}


//MARK: - SELECT TYPE HIERARCHY
public protocol AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sCURVE_OR_ANNOTATION_CURVE_OCCURRENCE__type: 
  SDAISelectType {

  //MARK: GROUP REFERENCES
  var super_eANNOTATION_CURVE_OCCURRENCE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eANNOTATION_CURVE_OCCURRENCE? { get }
  var super_eREPRESENTATION_ITEM: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_ITEM? { get }
  var super_eANNOTATION_OCCURRENCE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eANNOTATION_OCCURRENCE? { get }
  var super_eCURVE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCURVE? { get }
  var super_eSTYLED_ITEM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSTYLED_ITEM? { get }
  var super_eGEOMETRIC_REPRESENTATION_ITEM: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGEOMETRIC_REPRESENTATION_ITEM? { get }

  //MARK: ENTITY ATTRIBUTE REFERENCES
  var REFERENCE_TO_CURVE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDEFINITIONAL_REPRESENTATION?  { get }
  var CURVE_FORM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nB_SPLINE_CURVE_FORM?  { get }
  var ITEM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sCURVE_OR_CURVE_SET?  { get }
  var TRIM_1: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sTRIMMING_SELECT>/*[1:2]*/ )?  { get }
  var TRIM_2: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sTRIMMING_SELECT>/*[1:2]*/ )?  { get }
  var LOCALLY_REFINED_SPLINE_TYPE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nLOCALLY_REFINED_SPLINE_TYPE_ENUM?  { get }
  var KNOTS: (SDAI.LIST<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPARAMETER_VALUE>/*[2:nil]*/ )?  { get }
  var PNT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCARTESIAN_POINT?  { get }
  var SILHOUETTED_MODEL: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sSURFACE_OR_SOLID_MODEL?  { get }
  var SENSE_AGREEMENT: SDAI.BOOLEAN?  { get }
  var KNOT_VALUES: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tSPLINE_KNOT_VALUES?  { get }
  var DEGREE: SDAI.INTEGER?  { get }
  var USING_SKETCH: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePOSITIONED_SKETCH?  { get }
  var RADIUS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { get }
  var SEMI_IMAG_AXIS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { get }
  var SCALING_FACTORS: (SDAI.LIST<SDAI.REAL>/*[2:nil]*/ )?  { get }
  var KNOT_MULTIPLICITIES: (SDAI.LIST<SDAI.INTEGER>/*[2:nil]*/ )?  { get }
  var TRANSFORMATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCARTESIAN_TRANSFORMATION_OPERATOR?  { get }
  var CLOTHOID_CONSTANT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE?  { get }
  var UPPER_INDEX_ON_CONTROL_POINTS: SDAI.INTEGER?  { get }
  var UPPER_INDEX_ON_KNOTS: SDAI.INTEGER?  { get }
  var ASSOCIATED_GEOMETRY: (SDAI.LIST<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sPCURVE_OR_SURFACE>/*[1:
    2]*/ )?  { get }
  var PARENT_CURVE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCURVE?  { get }
  var N_SEGMENTS: SDAI.INTEGER?  { get }
  var EXTERNAL_SURFACE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSURFACE?  { get }
  var KNOT_SPEC: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nKNOT_TYPE?  { get }
  var POINTS: (SDAI.LIST<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCARTESIAN_POINT>/*[2:nil]*/ )?  { get }
  var CURVE_3D: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCURVE?  { get }
  var BASE_RADIUS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { get }
  var SEGMENTS: (SDAI.LIST<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOMPOSITE_CURVE_SEGMENT>/*[1:nil]*/ )?  { get }
  var CURVE_PLANE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePLANE?  { get }
  var SEMI_AXIS_1: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { get }
  var STYLES: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRESENTATION_STYLE_ASSIGNMENT>/*[0:
    nil]*/ )?  { get }
  var B_SPLINES: (SDAI.LIST<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eLOCAL_B_SPLINE>/*[2:nil]*/ )?  { get }
  var SEMI_AXIS_2: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { get }
  var SEMI_AXIS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { get }
  var CONTROL_POINTS: (SDAI.ARRAY<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCARTESIAN_POINT>/*[0:
    UPPER_INDEX_ON_CONTROL_POINTS]*/ )?  { get }
  var REF_DIRECTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDIRECTION?  { get }
  var COMPUTED_REPRESENTATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCURVE?  { get }
  var EXTERNAL_CURVE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCURVE?  { get }
  var PROJECTION_DIRECTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDIRECTION?  { get }
  var INTERSECTED_MODEL: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sSURFACE_OR_SOLID_MODEL?  { get }
  var DIR: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eVECTOR?  { get }
  var FOCAL_DIST: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE?  { get }
  var DOMAIN: (SDAI.LIST<SDAI.REAL>/*[2:2]*/ )?  { get }
  var NAME: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { get }
  var VIEW_DIRECTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDIRECTION?  { get }
  var WEIGHTS: (SDAI.ARRAY<SDAI.REAL>/*[0:UPPER_INDEX_ON_CONTROL_POINTS]*/ )?  { get }
  var DIM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tDIMENSION_COUNT?  { get }
}

public protocol AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sCURVE_OR_ANNOTATION_CURVE_OCCURRENCE__subtype: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sCURVE_OR_ANNOTATION_CURVE_OCCURRENCE__type, SDAIDefinedType
where Supertype: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sCURVE_OR_ANNOTATION_CURVE_OCCURRENCE__type
{}

public extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sCURVE_OR_ANNOTATION_CURVE_OCCURRENCE__subtype {
  //MARK: CONSTRUCTORS
  init?(possiblyFrom complex: SDAI.ComplexEntity?) {
    self.init(fundamental: FundamentalType(possiblyFrom: complex))
  }

  init?<T: SDAIUnderlyingType>(possiblyFrom underlyingType: T?) {
    self.init(fundamental: FundamentalType(possiblyFrom: underlyingType))
  }

  init?<G: SDAIGenericType>(fromGeneric generic: G?) {
    self.init(fundamental: FundamentalType.convert(fromGeneric: generic))
  }

  //MARK: GROUP REFERENCES
  var super_eANNOTATION_CURVE_OCCURRENCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eANNOTATION_CURVE_OCCURRENCE? { rep.super_eANNOTATION_CURVE_OCCURRENCE }
  var super_eREPRESENTATION_ITEM: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_ITEM? { rep.super_eREPRESENTATION_ITEM }
  var super_eANNOTATION_OCCURRENCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eANNOTATION_OCCURRENCE? { rep.super_eANNOTATION_OCCURRENCE }
  var super_eCURVE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCURVE? { rep.super_eCURVE }
  var super_eSTYLED_ITEM: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSTYLED_ITEM? { rep.super_eSTYLED_ITEM }
  var super_eGEOMETRIC_REPRESENTATION_ITEM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGEOMETRIC_REPRESENTATION_ITEM? { rep.super_eGEOMETRIC_REPRESENTATION_ITEM }

  //MARK: ENTITY ATTRIBUTE REFERENCES
  var REFERENCE_TO_CURVE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDEFINITIONAL_REPRESENTATION?  { rep.REFERENCE_TO_CURVE }
  var CURVE_FORM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nB_SPLINE_CURVE_FORM?  { rep.CURVE_FORM }
  var ITEM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sCURVE_OR_CURVE_SET?  { rep.ITEM }
  var TRIM_1: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sTRIMMING_SELECT>/*[1:2]*/ )?  { rep.TRIM_1 }
  var TRIM_2: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sTRIMMING_SELECT>/*[1:2]*/ )?  { rep.TRIM_2 }
  var LOCALLY_REFINED_SPLINE_TYPE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nLOCALLY_REFINED_SPLINE_TYPE_ENUM?  { rep.LOCALLY_REFINED_SPLINE_TYPE }
  var KNOTS: (SDAI.LIST<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPARAMETER_VALUE>/*[2:nil]*/ )?  { rep.KNOTS }
  var PNT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCARTESIAN_POINT?  { rep.PNT }
  var SILHOUETTED_MODEL: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sSURFACE_OR_SOLID_MODEL?  { rep.SILHOUETTED_MODEL }
  var SENSE_AGREEMENT: SDAI.BOOLEAN?  { rep.SENSE_AGREEMENT }
  var KNOT_VALUES: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tSPLINE_KNOT_VALUES?  { rep.KNOT_VALUES }
  var DEGREE: SDAI.INTEGER?  { rep.DEGREE }
  var USING_SKETCH: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePOSITIONED_SKETCH?  { rep.USING_SKETCH }
  var RADIUS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { rep.RADIUS }
  var SEMI_IMAG_AXIS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { rep.SEMI_IMAG_AXIS }
  var SCALING_FACTORS: (SDAI.LIST<SDAI.REAL>/*[2:nil]*/ )?  { rep.SCALING_FACTORS }
  var KNOT_MULTIPLICITIES: (SDAI.LIST<SDAI.INTEGER>/*[2:nil]*/ )?  { rep.KNOT_MULTIPLICITIES }
  var TRANSFORMATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCARTESIAN_TRANSFORMATION_OPERATOR?  { rep.TRANSFORMATION }
  var CLOTHOID_CONSTANT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE?  { rep.CLOTHOID_CONSTANT }
  var UPPER_INDEX_ON_CONTROL_POINTS: SDAI.INTEGER?  { rep.UPPER_INDEX_ON_CONTROL_POINTS }
  var UPPER_INDEX_ON_KNOTS: SDAI.INTEGER?  { rep.UPPER_INDEX_ON_KNOTS }
  var ASSOCIATED_GEOMETRY: (SDAI.LIST<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sPCURVE_OR_SURFACE>/*[1:
    2]*/ )?  { rep.ASSOCIATED_GEOMETRY }
  var PARENT_CURVE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCURVE?  { rep.PARENT_CURVE }
  var N_SEGMENTS: SDAI.INTEGER?  { rep.N_SEGMENTS }
  var EXTERNAL_SURFACE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSURFACE?  { rep.EXTERNAL_SURFACE }
  var KNOT_SPEC: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nKNOT_TYPE?  { rep.KNOT_SPEC }
  var POINTS: (SDAI.LIST<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCARTESIAN_POINT>/*[2:nil]*/ )?  { rep.POINTS }
  var CURVE_3D: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCURVE?  { rep.CURVE_3D }
  var BASE_RADIUS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { rep.BASE_RADIUS }
  var SEGMENTS: (SDAI.LIST<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOMPOSITE_CURVE_SEGMENT>/*[1:nil]*/ )?  { rep.SEGMENTS }
  var CURVE_PLANE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePLANE?  { rep.CURVE_PLANE }
  var SEMI_AXIS_1: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { rep.SEMI_AXIS_1 }
  var STYLES: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRESENTATION_STYLE_ASSIGNMENT>/*[0:
    nil]*/ )?  { rep.STYLES }
  var B_SPLINES: (SDAI.LIST<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eLOCAL_B_SPLINE>/*[2:nil]*/ )?  { rep.B_SPLINES }
  var SEMI_AXIS_2: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { rep.SEMI_AXIS_2 }
  var SEMI_AXIS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { rep.SEMI_AXIS }
  var CONTROL_POINTS: (SDAI.ARRAY<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCARTESIAN_POINT>/*[0:
    UPPER_INDEX_ON_CONTROL_POINTS]*/ )?  { rep.CONTROL_POINTS }
  var REF_DIRECTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDIRECTION?  { rep.REF_DIRECTION }
  var COMPUTED_REPRESENTATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCURVE?  { rep.COMPUTED_REPRESENTATION }
  var EXTERNAL_CURVE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCURVE?  { rep.EXTERNAL_CURVE }
  var PROJECTION_DIRECTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDIRECTION?  { rep.PROJECTION_DIRECTION }
  var INTERSECTED_MODEL: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sSURFACE_OR_SOLID_MODEL?  { rep.INTERSECTED_MODEL }
  var DIR: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eVECTOR?  { rep.DIR }
  var FOCAL_DIST: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE?  { rep.FOCAL_DIST }
  var DOMAIN: (SDAI.LIST<SDAI.REAL>/*[2:2]*/ )?  { rep.DOMAIN }
  var NAME: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { rep.NAME }
  var VIEW_DIRECTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDIRECTION?  { rep.VIEW_DIRECTION }
  var WEIGHTS: (SDAI.ARRAY<SDAI.REAL>/*[0:UPPER_INDEX_ON_CONTROL_POINTS]*/ )?  { rep.WEIGHTS }
  var DIM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tDIMENSION_COUNT?  { rep.DIM }
}

