/* file: certification_item.swift 	 generated: Mon Jan  3 16:32:52 2022 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.1, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -TYPE DEFINITION in EXPRESS
/*
  TYPE certification_item = SELECT
    ( action_method (*ENTITY*),
     alternate_product_relationship (*ENTITY*),
     analysis_assignment (*ENTITY*),
     applied_action_method_assignment (*ENTITY*),
     assembly_component_usage (*ENTITY*),
     evidence (*ENTITY*),
     executed_action (*ENTITY*),
     interface_connection (*ENTITY*),
     interface_connector_version (*ENTITY*),
     interface_definition_connection (*ENTITY*),
     interface_specification_version (*ENTITY*),
     make_from_usage_option (*ENTITY*),
     organizational_project (*ENTITY*),
     product (*ENTITY*),
     product_definition (*ENTITY*),
     product_definition_formation (*ENTITY*),
     product_definition_formation_relationship (*ENTITY*),
     product_definition_occurrence (*ENTITY*),
     product_definition_occurrence_reference (*ENTITY*),
     product_definition_relationship (*ENTITY*),
     product_group (*ENTITY*),
     product_group_relationship (*ENTITY*),
     product_identification (*ENTITY*),
     product_relationship (*ENTITY*),
     requirement_view_definition_relationship (*ENTITY*) );
  END_TYPE; -- certification_item (line:1269 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES FOR SELECT
/*
  action_method (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  purpose: text *** Multiple Select Case Sources ***
  ATTR:  consequence: text
  ATTR:  name: label *** Multiple Select Case Sources ***

  alternate_product_relationship (*ENTITY*):
  ATTR:  basis: text
  ATTR:  base: product
  ATTR:  alternate: product
  ATTR:  definition: text (AMBIGUOUS (SELECT LEVEL))
  ATTR:  name: label *** Multiple Select Case Sources ***

  analysis_assignment (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  applied_action_method_assignment (*ENTITY*):
  ATTR:  role: action_method_role *** Multiple Select Case Sources ***
  ATTR:  items: SET [1 : ?] OF action_method_items (AMBIGUOUS (SELECT LEVEL))
  ATTR:  assigned_action_method: action_method

  assembly_component_usage (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  leaf: product_definition_or_reference
  ATTR:  next_usage: next_assembly_usage_occurrence
  ATTR:  reference_designator: identifier
  ATTR:  upper_usage: assembly_component_usage
  ATTR:  quantity: measure_with_unit *** Multiple Select Case Sources ***
  ATTR:  root: product_definition
  ATTR:  relating_product_definition: product_definition_or_reference *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  product_definition_occurrence_id: identifier
  ATTR:  location: LIST [1 : ?] OF UNIQUE next_assembly_usage_occurrence
  ATTR:  related_product_definition: product_definition_or_reference *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  evidence (*ENTITY*):
  ATTR:  role: object_role *** Multiple Select Case Sources ***
  ATTR:  items: SET [1 : ?] OF evidence_item (AMBIGUOUS (SELECT LEVEL))
  ATTR:  assigned_group: group *** Multiple Select Case Sources ***

  executed_action (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  directive: action_directive
  ATTR:  chosen_method: action_method
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  interface_connection (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  interface_connector_version (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  of_product: product

  interface_definition_connection (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  relating_product_definition: product_definition_or_reference *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  related_product_definition: product_definition_or_reference *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  interface_specification_version (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  of_product: product

  make_from_usage_option (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  ranking_rationale: text
  ATTR:  quantity: measure_with_unit *** Multiple Select Case Sources ***
  ATTR:  ranking: INTEGER
  ATTR:  relating_product_definition: product_definition_or_reference *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  related_product_definition: product_definition_or_reference *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  organizational_project (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  responsible_organizations: SET [1 : ?] OF organization
  ATTR:  name: label *** Multiple Select Case Sources ***

  product (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  frame_of_reference: SET [1 : ?] OF product_context (AMBIGUOUS (SELECT LEVEL))
  ATTR:  name: label *** Multiple Select Case Sources ***

  product_definition (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  defined_version: collection_version
  ATTR:  documentation_ids: SET [1 : ?] OF document
  ATTR:  relating_product_definition: linear_array_placement_group_component *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  frame_of_reference: product_definition_context (AMBIGUOUS (SELECT LEVEL))
  ATTR:  definition: assembly_component (AMBIGUOUS (SELECT LEVEL))
  ATTR:  related_product_definition: linear_array_placement_group_component *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***
  ATTR:  formation: product_definition_formation

  product_definition_formation (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  status: STRING
  ATTR:  of_collection: collection
  ATTR:  make_or_buy: source
  ATTR:  specification: SET [1 : ?] OF product_definition
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  of_product: product

  product_definition_formation_relationship (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  realized_product: product_definition_formation
  ATTR:  related_product_definition_formation: product_definition_formation
  ATTR:  product_design_version: product_definition_formation
  ATTR:  relating_product_definition_formation: product_definition_formation
  ATTR:  relating_version: collection_version
  ATTR:  relation_type: STRING
  ATTR:  planned_product: product_definition_formation
  ATTR:  successor: collection_version
  ATTR:  individual_product: product_definition_formation *** Multiple Select Case Sources ***
  ATTR:  related_version: collection_version
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***
  ATTR:  predecessor: collection_version

  product_definition_occurrence (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  descendant_occurrences: SET [0 : ?] OF product_definition_specified_occurrence
  ATTR:  quantity: measure_with_unit *** Multiple Select Case Sources ***
  ATTR:  occurrence_usage: product_definition_occurrence_or_reference
  ATTR:  child_occurrences: SET [0 : ?] OF product_definition_specified_occurrence
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  definition: product_definition_or_reference_or_occurrence (AMBIGUOUS (SELECT LEVEL))
  ATTR:  name: label *** Multiple Select Case Sources ***
  ATTR:  assembly_usages: SET [0 : ?] OF assembly_component_usage

  product_definition_occurrence_reference (*ENTITY*):
  ATTR:  product_occurrence_id: identifier
  ATTR:  product_definition_id: identifier
  ATTR:  product_definition_formation_id: identifier
  ATTR:  id_owning_organization_name: label
  ATTR:  product_id: identifier
  ATTR:  source: external_source

  product_definition_relationship (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  leaf: product_definition_or_reference
  ATTR:  next_usage: next_assembly_usage_occurrence
  ATTR:  reference_designator: identifier
  ATTR:  constituent_amount: SET [1 : ?] OF characterized_product_composition_value
  ATTR:  upper_usage: assembly_component_usage
  ATTR:  ranking_rationale: text
  ATTR:  quantity: (AMBIGUOUS (CASE LEVEL))
  ATTR:  class: label
  ATTR:  items: SET [0 : ?] OF product_definition (AMBIGUOUS (SELECT LEVEL))
  ATTR:  of_shape: mated_part_relationship
  ATTR:  ranking: INTEGER
  ATTR:  composition_basis: label
  ATTR:  determination_method: text
  ATTR:  root: product_definition
  ATTR:  relating_product_definition: product_definition_or_reference *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  product_definition_occurrence_id: identifier
  ATTR:  assigned_group: mated_part_relationship *** Multiple Select Case Sources ***
  ATTR:  location: LIST [1 : ?] OF UNIQUE next_assembly_usage_occurrence
  ATTR:  definition: mated_part_relationship (AMBIGUOUS (SELECT LEVEL))
  ATTR:  related_product_definition: product_definition_or_reference *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  product_group (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  product_group_relationship (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  related_group: group
  ATTR:  relating_group: group
  ATTR:  name: label *** Multiple Select Case Sources ***

  product_identification (*ENTITY*):
  ATTR:  description: (AMBIGUOUS (CASE LEVEL))
  ATTR:  purpose: label *** Multiple Select Case Sources ***
  ATTR:  item_concept: product_class
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  name: (AMBIGUOUS (CASE LEVEL))

  product_relationship (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  related_message: structured_message
  ATTR:  related_collection: collection
  ATTR:  individual_product: product *** Multiple Select Case Sources ***
  ATTR:  related_product: product
  ATTR:  relating_collection: collection
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  relating_message: structured_message
  ATTR:  relating_product: product
  ATTR:  name: label *** Multiple Select Case Sources ***
  ATTR:  product_design: product

  requirement_view_definition_relationship (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  relating_product_definition: product_definition_or_reference *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  related_product_definition: product_definition_or_reference *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

*/

/** SELECT type
- EXPRESS:
```express
  TYPE certification_item = SELECT
    ( action_method (*ENTITY*),
     alternate_product_relationship (*ENTITY*),
     analysis_assignment (*ENTITY*),
     applied_action_method_assignment (*ENTITY*),
     assembly_component_usage (*ENTITY*),
     evidence (*ENTITY*),
     executed_action (*ENTITY*),
     interface_connection (*ENTITY*),
     interface_connector_version (*ENTITY*),
     interface_definition_connection (*ENTITY*),
     interface_specification_version (*ENTITY*),
     make_from_usage_option (*ENTITY*),
     organizational_project (*ENTITY*),
     product (*ENTITY*),
     product_definition (*ENTITY*),
     product_definition_formation (*ENTITY*),
     product_definition_formation_relationship (*ENTITY*),
     product_definition_occurrence (*ENTITY*),
     product_definition_occurrence_reference (*ENTITY*),
     product_definition_relationship (*ENTITY*),
     product_group (*ENTITY*),
     product_group_relationship (*ENTITY*),
     product_identification (*ENTITY*),
     product_relationship (*ENTITY*),
     requirement_view_definition_relationship (*ENTITY*) );
  END_TYPE; -- certification_item (line:1269 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public enum sCERTIFICATION_ITEM : SDAIValue, AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sCERTIFICATION_ITEM__type {

    /// SELECT case ``eACTION_METHOD`` (ENTITY) in ``sCERTIFICATION_ITEM``
    case _ACTION_METHOD(eACTION_METHOD)	// (ENTITY)

    /// SELECT case ``eALTERNATE_PRODUCT_RELATIONSHIP`` (ENTITY) in ``sCERTIFICATION_ITEM``
    case _ALTERNATE_PRODUCT_RELATIONSHIP(eALTERNATE_PRODUCT_RELATIONSHIP)	// (ENTITY)

    /// SELECT case ``eANALYSIS_ASSIGNMENT`` (ENTITY) in ``sCERTIFICATION_ITEM``
    case _ANALYSIS_ASSIGNMENT(eANALYSIS_ASSIGNMENT)	// (ENTITY)

    /// SELECT case ``eAPPLIED_ACTION_METHOD_ASSIGNMENT`` (ENTITY) in ``sCERTIFICATION_ITEM``
    case _APPLIED_ACTION_METHOD_ASSIGNMENT(eAPPLIED_ACTION_METHOD_ASSIGNMENT)	// (ENTITY)

    /// SELECT case ``eASSEMBLY_COMPONENT_USAGE`` (ENTITY) in ``sCERTIFICATION_ITEM``
    case _ASSEMBLY_COMPONENT_USAGE(eASSEMBLY_COMPONENT_USAGE)	// (ENTITY)

    /// SELECT case ``eEVIDENCE`` (ENTITY) in ``sCERTIFICATION_ITEM``
    case _EVIDENCE(eEVIDENCE)	// (ENTITY)

    /// SELECT case ``eEXECUTED_ACTION`` (ENTITY) in ``sCERTIFICATION_ITEM``
    case _EXECUTED_ACTION(eEXECUTED_ACTION)	// (ENTITY)

    /// SELECT case ``eINTERFACE_CONNECTION`` (ENTITY) in ``sCERTIFICATION_ITEM``
    case _INTERFACE_CONNECTION(eINTERFACE_CONNECTION)	// (ENTITY)

    /// SELECT case ``eINTERFACE_CONNECTOR_VERSION`` (ENTITY) in ``sCERTIFICATION_ITEM``
    case _INTERFACE_CONNECTOR_VERSION(eINTERFACE_CONNECTOR_VERSION)	// (ENTITY)

    /// SELECT case ``eINTERFACE_DEFINITION_CONNECTION`` (ENTITY) in ``sCERTIFICATION_ITEM``
    case _INTERFACE_DEFINITION_CONNECTION(eINTERFACE_DEFINITION_CONNECTION)	// (ENTITY)

    /// SELECT case ``eINTERFACE_SPECIFICATION_VERSION`` (ENTITY) in ``sCERTIFICATION_ITEM``
    case _INTERFACE_SPECIFICATION_VERSION(eINTERFACE_SPECIFICATION_VERSION)	// (ENTITY)

    /// SELECT case ``eMAKE_FROM_USAGE_OPTION`` (ENTITY) in ``sCERTIFICATION_ITEM``
    case _MAKE_FROM_USAGE_OPTION(eMAKE_FROM_USAGE_OPTION)	// (ENTITY)

    /// SELECT case ``eORGANIZATIONAL_PROJECT`` (ENTITY) in ``sCERTIFICATION_ITEM``
    case _ORGANIZATIONAL_PROJECT(eORGANIZATIONAL_PROJECT)	// (ENTITY)

    /// SELECT case ``ePRODUCT`` (ENTITY) in ``sCERTIFICATION_ITEM``
    case _PRODUCT(ePRODUCT)	// (ENTITY)

    /// SELECT case ``ePRODUCT_DEFINITION`` (ENTITY) in ``sCERTIFICATION_ITEM``
    case _PRODUCT_DEFINITION(ePRODUCT_DEFINITION)	// (ENTITY)

    /// SELECT case ``ePRODUCT_DEFINITION_FORMATION`` (ENTITY) in ``sCERTIFICATION_ITEM``
    case _PRODUCT_DEFINITION_FORMATION(ePRODUCT_DEFINITION_FORMATION)	// (ENTITY)

    /// SELECT case ``ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP`` (ENTITY) in ``sCERTIFICATION_ITEM``
    case _PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP)	// (ENTITY)

    /// SELECT case ``ePRODUCT_DEFINITION_OCCURRENCE`` (ENTITY) in ``sCERTIFICATION_ITEM``
    case _PRODUCT_DEFINITION_OCCURRENCE(ePRODUCT_DEFINITION_OCCURRENCE)	// (ENTITY)

    /// SELECT case ``ePRODUCT_DEFINITION_OCCURRENCE_REFERENCE`` (ENTITY) in ``sCERTIFICATION_ITEM``
    case _PRODUCT_DEFINITION_OCCURRENCE_REFERENCE(ePRODUCT_DEFINITION_OCCURRENCE_REFERENCE)	// (ENTITY)

    /// SELECT case ``ePRODUCT_DEFINITION_RELATIONSHIP`` (ENTITY) in ``sCERTIFICATION_ITEM``
    case _PRODUCT_DEFINITION_RELATIONSHIP(ePRODUCT_DEFINITION_RELATIONSHIP)	// (ENTITY)

    /// SELECT case ``ePRODUCT_GROUP`` (ENTITY) in ``sCERTIFICATION_ITEM``
    case _PRODUCT_GROUP(ePRODUCT_GROUP)	// (ENTITY)

    /// SELECT case ``ePRODUCT_GROUP_RELATIONSHIP`` (ENTITY) in ``sCERTIFICATION_ITEM``
    case _PRODUCT_GROUP_RELATIONSHIP(ePRODUCT_GROUP_RELATIONSHIP)	// (ENTITY)

    /// SELECT case ``ePRODUCT_IDENTIFICATION`` (ENTITY) in ``sCERTIFICATION_ITEM``
    case _PRODUCT_IDENTIFICATION(ePRODUCT_IDENTIFICATION)	// (ENTITY)

    /// SELECT case ``ePRODUCT_RELATIONSHIP`` (ENTITY) in ``sCERTIFICATION_ITEM``
    case _PRODUCT_RELATIONSHIP(ePRODUCT_RELATIONSHIP)	// (ENTITY)

    /// SELECT case ``eREQUIREMENT_VIEW_DEFINITION_RELATIONSHIP`` (ENTITY) in ``sCERTIFICATION_ITEM``
    case _REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(eREQUIREMENT_VIEW_DEFINITION_RELATIONSHIP)	// (ENTITY)

    //MARK: - CONSTRUCTORS
    public init(fundamental: FundamentalType) { self = fundamental }

    public init?<T: SDAIUnderlyingType>(possiblyFrom underlyingType: T?){
      return nil
    }

    public init?(possiblyFrom complex: SDAI.ComplexEntity?) {
      guard let complex = complex else { return nil }

      if let base = complex.entityReference(eACTION_METHOD.self) {self = ._ACTION_METHOD(base) }
      else if let base = complex.entityReference(eALTERNATE_PRODUCT_RELATIONSHIP.self) {self = ._ALTERNATE_PRODUCT_RELATIONSHIP(base) }
      else if let base = complex.entityReference(eANALYSIS_ASSIGNMENT.self) {self = ._ANALYSIS_ASSIGNMENT(base) }
      else if let base = complex.entityReference(eAPPLIED_ACTION_METHOD_ASSIGNMENT.self) {self = ._APPLIED_ACTION_METHOD_ASSIGNMENT(base) }
      else if let base = complex.entityReference(eASSEMBLY_COMPONENT_USAGE.self) {self = ._ASSEMBLY_COMPONENT_USAGE(base) }
      else if let base = complex.entityReference(eEVIDENCE.self) {self = ._EVIDENCE(base) }
      else if let base = complex.entityReference(eEXECUTED_ACTION.self) {self = ._EXECUTED_ACTION(base) }
      else if let base = complex.entityReference(eINTERFACE_CONNECTION.self) {self = ._INTERFACE_CONNECTION(base) }
      else if let base = complex.entityReference(eINTERFACE_CONNECTOR_VERSION.self) {self = ._INTERFACE_CONNECTOR_VERSION(base) }
      else if let base = complex.entityReference(eINTERFACE_DEFINITION_CONNECTION.self) {self = ._INTERFACE_DEFINITION_CONNECTION(base) }
      else if let base = complex.entityReference(eINTERFACE_SPECIFICATION_VERSION.self) {self = ._INTERFACE_SPECIFICATION_VERSION(base) }
      else if let base = complex.entityReference(eMAKE_FROM_USAGE_OPTION.self) {self = ._MAKE_FROM_USAGE_OPTION(base) }
      else if let base = complex.entityReference(eORGANIZATIONAL_PROJECT.self) {self = ._ORGANIZATIONAL_PROJECT(base) }
      else if let base = complex.entityReference(ePRODUCT.self) {self = ._PRODUCT(base) }
      else if let base = complex.entityReference(ePRODUCT_DEFINITION.self) {self = ._PRODUCT_DEFINITION(base) }
      else if let base = complex.entityReference(ePRODUCT_DEFINITION_FORMATION.self) {self = ._PRODUCT_DEFINITION_FORMATION(base) }
      else if let base = complex.entityReference(ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP.self) {self = ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(base) }
      else if let base = complex.entityReference(ePRODUCT_DEFINITION_OCCURRENCE.self) {self = ._PRODUCT_DEFINITION_OCCURRENCE(base) }
      else if let base = complex.entityReference(ePRODUCT_DEFINITION_OCCURRENCE_REFERENCE.self) {self = ._PRODUCT_DEFINITION_OCCURRENCE_REFERENCE(base) }
      else if let base = complex.entityReference(ePRODUCT_DEFINITION_RELATIONSHIP.self) {self = ._PRODUCT_DEFINITION_RELATIONSHIP(base) }
      else if let base = complex.entityReference(ePRODUCT_GROUP.self) {self = ._PRODUCT_GROUP(base) }
      else if let base = complex.entityReference(ePRODUCT_GROUP_RELATIONSHIP.self) {self = ._PRODUCT_GROUP_RELATIONSHIP(base) }
      else if let base = complex.entityReference(ePRODUCT_IDENTIFICATION.self) {self = ._PRODUCT_IDENTIFICATION(base) }
      else if let base = complex.entityReference(ePRODUCT_RELATIONSHIP.self) {self = ._PRODUCT_RELATIONSHIP(base) }
      else if let base = complex.entityReference(eREQUIREMENT_VIEW_DEFINITION_RELATIONSHIP.self) {self = ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(base) }
      else { return nil }
    }

    public init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let select = generic else { return nil }

      if let fundamental = select as? Self {
        self.init(fundamental: fundamental)
      }
      else if let base = eACTION_METHOD.convert(fromGeneric: select) {
        self = ._ACTION_METHOD(base)
      }
      else if let base = eALTERNATE_PRODUCT_RELATIONSHIP.convert(fromGeneric: select) {
        self = ._ALTERNATE_PRODUCT_RELATIONSHIP(base)
      }
      else if let base = eANALYSIS_ASSIGNMENT.convert(fromGeneric: select) {
        self = ._ANALYSIS_ASSIGNMENT(base)
      }
      else if let base = eAPPLIED_ACTION_METHOD_ASSIGNMENT.convert(fromGeneric: select) {
        self = ._APPLIED_ACTION_METHOD_ASSIGNMENT(base)
      }
      else if let base = eASSEMBLY_COMPONENT_USAGE.convert(fromGeneric: select) {
        self = ._ASSEMBLY_COMPONENT_USAGE(base)
      }
      else if let base = eEVIDENCE.convert(fromGeneric: select) {
        self = ._EVIDENCE(base)
      }
      else if let base = eEXECUTED_ACTION.convert(fromGeneric: select) {
        self = ._EXECUTED_ACTION(base)
      }
      else if let base = eINTERFACE_CONNECTION.convert(fromGeneric: select) {
        self = ._INTERFACE_CONNECTION(base)
      }
      else if let base = eINTERFACE_CONNECTOR_VERSION.convert(fromGeneric: select) {
        self = ._INTERFACE_CONNECTOR_VERSION(base)
      }
      else if let base = eINTERFACE_DEFINITION_CONNECTION.convert(fromGeneric: select) {
        self = ._INTERFACE_DEFINITION_CONNECTION(base)
      }
      else if let base = eINTERFACE_SPECIFICATION_VERSION.convert(fromGeneric: select) {
        self = ._INTERFACE_SPECIFICATION_VERSION(base)
      }
      else if let base = eMAKE_FROM_USAGE_OPTION.convert(fromGeneric: select) {
        self = ._MAKE_FROM_USAGE_OPTION(base)
      }
      else if let base = eORGANIZATIONAL_PROJECT.convert(fromGeneric: select) {
        self = ._ORGANIZATIONAL_PROJECT(base)
      }
      else if let base = ePRODUCT.convert(fromGeneric: select) {
        self = ._PRODUCT(base)
      }
      else if let base = ePRODUCT_DEFINITION.convert(fromGeneric: select) {
        self = ._PRODUCT_DEFINITION(base)
      }
      else if let base = ePRODUCT_DEFINITION_FORMATION.convert(fromGeneric: select) {
        self = ._PRODUCT_DEFINITION_FORMATION(base)
      }
      else if let base = ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP.convert(fromGeneric: select) {
        self = ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(base)
      }
      else if let base = ePRODUCT_DEFINITION_OCCURRENCE.convert(fromGeneric: select) {
        self = ._PRODUCT_DEFINITION_OCCURRENCE(base)
      }
      else if let base = ePRODUCT_DEFINITION_OCCURRENCE_REFERENCE.convert(fromGeneric: select) {
        self = ._PRODUCT_DEFINITION_OCCURRENCE_REFERENCE(base)
      }
      else if let base = ePRODUCT_DEFINITION_RELATIONSHIP.convert(fromGeneric: select) {
        self = ._PRODUCT_DEFINITION_RELATIONSHIP(base)
      }
      else if let base = ePRODUCT_GROUP.convert(fromGeneric: select) {
        self = ._PRODUCT_GROUP(base)
      }
      else if let base = ePRODUCT_GROUP_RELATIONSHIP.convert(fromGeneric: select) {
        self = ._PRODUCT_GROUP_RELATIONSHIP(base)
      }
      else if let base = ePRODUCT_IDENTIFICATION.convert(fromGeneric: select) {
        self = ._PRODUCT_IDENTIFICATION(base)
      }
      else if let base = ePRODUCT_RELATIONSHIP.convert(fromGeneric: select) {
        self = ._PRODUCT_RELATIONSHIP(base)
      }
      else if let base = eREQUIREMENT_VIEW_DEFINITION_RELATIONSHIP.convert(fromGeneric: select) {
        self = ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(base)
      }
      else { return nil }
    }

    // InitializableByP21Parameter
    public static var bareTypeName: String = "CERTIFICATION_ITEM"

    public init?(p21typedParam: P21Decode.ExchangeStructure.TypedParameter, from exchangeStructure: P21Decode.ExchangeStructure) {
      guard let keyword = p21typedParam.keyword.asStandardKeyword else { exchangeStructure.error = "unexpected p21parameter(\(p21typedParam)) while resolving \(Self.bareTypeName) select value"; return nil }

      switch(keyword) {
      default:
        exchangeStructure.error = "unexpected p21parameter(\(p21typedParam)) while resolving \(Self.bareTypeName) select value"
        return nil
      }
    }

    public init?(p21untypedParam: P21Decode.ExchangeStructure.UntypedParameter, from exchangeStructure: P21Decode.ExchangeStructure) {
      switch p21untypedParam {
      case .rhsOccurenceName(let rhsname):
        switch rhsname {
        case .constantEntityName(let name):
          guard let entity = exchangeStructure.resolve(constantEntityName: name) else {exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) instance"); return nil }
          self.init(possiblyFrom: entity.complexEntity)

        case .entityInstanceName(let name):
          guard let complex = exchangeStructure.resolve(entityInstanceName: name) else {exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) instance"); return nil }
          self.init(possiblyFrom: complex)

        default:
          exchangeStructure.error = "unexpected p21parameter(\(p21untypedParam)) while resolving \(Self.bareTypeName) select instance"
          return nil
        }

      default:
        exchangeStructure.error = "unexpected p21parameter(\(p21untypedParam)) while resolving \(Self.bareTypeName) select instance"
        return nil
      }
    }

    public init?(p21omittedParamfrom exchangeStructure: P21Decode.ExchangeStructure) {
      return nil
    }


    //MARK: - ENTITY UNDERLYING TYPE REFERENCES
    public var super_ePRODUCT_IDENTIFICATION: ePRODUCT_IDENTIFICATION? {
      switch self {
      case ._PRODUCT_IDENTIFICATION(let entity): return entity
      default: return nil
      }
    }

    public var super_eGROUP_RELATIONSHIP: eGROUP_RELATIONSHIP? {
      switch self {
      case ._PRODUCT_GROUP_RELATIONSHIP(let entity): return entity.super_eGROUP_RELATIONSHIP
      default: return nil
      }
    }

    public var super_eINTERFACE_DEFINITION_CONNECTION: eINTERFACE_DEFINITION_CONNECTION? {
      switch self {
      case ._INTERFACE_DEFINITION_CONNECTION(let entity): return entity
      default: return nil
      }
    }

    public var super_eGROUP: eGROUP? {
      switch self {
      case ._ANALYSIS_ASSIGNMENT(let entity): return entity.super_eGROUP
      case ._INTERFACE_CONNECTION(let entity): return entity.super_eGROUP
      case ._PRODUCT_GROUP(let entity): return entity.super_eGROUP
      default: return nil
      }
    }

    public var super_eGENERIC_PRODUCT_DEFINITION_REFERENCE: eGENERIC_PRODUCT_DEFINITION_REFERENCE? {
      switch self {
      case ._PRODUCT_DEFINITION_OCCURRENCE_REFERENCE(let entity): return entity
        .super_eGENERIC_PRODUCT_DEFINITION_REFERENCE
      default: return nil
      }
    }

    public var super_eCONFIGURATION_ITEM: eCONFIGURATION_ITEM? {
      switch self {
      case ._PRODUCT_IDENTIFICATION(let entity): return entity.super_eCONFIGURATION_ITEM
      default: return nil
      }
    }

    public var super_eINTERFACE_CONNECTOR_VERSION: eINTERFACE_CONNECTOR_VERSION? {
      switch self {
      case ._INTERFACE_CONNECTOR_VERSION(let entity): return entity
      default: return nil
      }
    }

    public var super_eANALYSIS_ASSIGNMENT: eANALYSIS_ASSIGNMENT? {
      switch self {
      case ._ANALYSIS_ASSIGNMENT(let entity): return entity
      default: return nil
      }
    }

    public var super_ePRODUCT_DEFINITION_OCCURRENCE: ePRODUCT_DEFINITION_OCCURRENCE? {
      switch self {
      case ._PRODUCT_DEFINITION_OCCURRENCE(let entity): return entity
      default: return nil
      }
    }

    public var super_eACTION_METHOD: eACTION_METHOD? {
      switch self {
      case ._ACTION_METHOD(let entity): return entity
      default: return nil
      }
    }

    public var super_eGROUP_ASSIGNMENT: eGROUP_ASSIGNMENT? {
      switch self {
      case ._EVIDENCE(let entity): return entity.super_eGROUP_ASSIGNMENT
      default: return nil
      }
    }

    public var super_eEXECUTED_ACTION: eEXECUTED_ACTION? {
      switch self {
      case ._EXECUTED_ACTION(let entity): return entity
      default: return nil
      }
    }

    public var super_ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP: 
      ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP? {
      switch self {
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let entity): return entity
      default: return nil
      }
    }

    public var super_ePRODUCT_DEFINITION_USAGE: ePRODUCT_DEFINITION_USAGE? {
      switch self {
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): return entity.super_ePRODUCT_DEFINITION_USAGE
      case ._MAKE_FROM_USAGE_OPTION(let entity): return entity.super_ePRODUCT_DEFINITION_USAGE
      default: return nil
      }
    }

    public var super_eAPPLIED_ACTION_METHOD_ASSIGNMENT: eAPPLIED_ACTION_METHOD_ASSIGNMENT? {
      switch self {
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let entity): return entity
      default: return nil
      }
    }

    public var super_ePRODUCT_GROUP: ePRODUCT_GROUP? {
      switch self {
      case ._PRODUCT_GROUP(let entity): return entity
      default: return nil
      }
    }

    public var super_ePRODUCT_DEFINITION: ePRODUCT_DEFINITION? {
      switch self {
      case ._PRODUCT_DEFINITION(let entity): return entity
      default: return nil
      }
    }

    public var super_eINTERFACE_CONNECTION: eINTERFACE_CONNECTION? {
      switch self {
      case ._INTERFACE_CONNECTION(let entity): return entity
      default: return nil
      }
    }

    public var super_eEVIDENCE: eEVIDENCE? {
      switch self {
      case ._EVIDENCE(let entity): return entity
      default: return nil
      }
    }

    public var super_eACTION_METHOD_ASSIGNMENT: eACTION_METHOD_ASSIGNMENT? {
      switch self {
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let entity): return entity.super_eACTION_METHOD_ASSIGNMENT
      default: return nil
      }
    }

    public var super_ePRODUCT: ePRODUCT? {
      switch self {
      case ._PRODUCT(let entity): return entity
      default: return nil
      }
    }

    public var super_eORGANIZATIONAL_PROJECT: eORGANIZATIONAL_PROJECT? {
      switch self {
      case ._ORGANIZATIONAL_PROJECT(let entity): return entity
      default: return nil
      }
    }

    public var super_eINTERFACE_SPECIFICATION_VERSION: eINTERFACE_SPECIFICATION_VERSION? {
      switch self {
      case ._INTERFACE_SPECIFICATION_VERSION(let entity): return entity
      default: return nil
      }
    }

    public var super_ePRODUCT_DEFINITION_FORMATION: ePRODUCT_DEFINITION_FORMATION? {
      switch self {
      case ._INTERFACE_CONNECTOR_VERSION(let entity): return entity.super_ePRODUCT_DEFINITION_FORMATION
      case ._INTERFACE_SPECIFICATION_VERSION(let entity): return entity.super_ePRODUCT_DEFINITION_FORMATION
      case ._PRODUCT_DEFINITION_FORMATION(let entity): return entity
      default: return nil
      }
    }

    public var super_ePRODUCT_GROUP_RELATIONSHIP: ePRODUCT_GROUP_RELATIONSHIP? {
      switch self {
      case ._PRODUCT_GROUP_RELATIONSHIP(let entity): return entity
      default: return nil
      }
    }

    public var super_eASSEMBLY_COMPONENT_USAGE: eASSEMBLY_COMPONENT_USAGE? {
      switch self {
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): return entity
      default: return nil
      }
    }

    public var super_ePRODUCT_DEFINITION_OCCURRENCE_REFERENCE: ePRODUCT_DEFINITION_OCCURRENCE_REFERENCE? {
      switch self {
      case ._PRODUCT_DEFINITION_OCCURRENCE_REFERENCE(let entity): return entity
      default: return nil
      }
    }

    public var super_eREQUIREMENT_VIEW_DEFINITION_RELATIONSHIP: eREQUIREMENT_VIEW_DEFINITION_RELATIONSHIP? {
      switch self {
      case ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(let entity): return entity
      default: return nil
      }
    }

    public var super_eALTERNATE_PRODUCT_RELATIONSHIP: eALTERNATE_PRODUCT_RELATIONSHIP? {
      switch self {
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let entity): return entity
      default: return nil
      }
    }

    public var super_eMAKE_FROM_USAGE_OPTION: eMAKE_FROM_USAGE_OPTION? {
      switch self {
      case ._MAKE_FROM_USAGE_OPTION(let entity): return entity
      default: return nil
      }
    }

    public var super_ePRODUCT_DEFINITION_RELATIONSHIP: ePRODUCT_DEFINITION_RELATIONSHIP? {
      switch self {
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): return entity.super_ePRODUCT_DEFINITION_RELATIONSHIP
      case ._INTERFACE_DEFINITION_CONNECTION(let entity): return entity
        .super_ePRODUCT_DEFINITION_RELATIONSHIP
      case ._MAKE_FROM_USAGE_OPTION(let entity): return entity.super_ePRODUCT_DEFINITION_RELATIONSHIP
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity
      case ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(let entity): return entity
        .super_ePRODUCT_DEFINITION_RELATIONSHIP
      default: return nil
      }
    }

    public var super_ePRODUCT_DEFINITION_REFERENCE: ePRODUCT_DEFINITION_REFERENCE? {
      switch self {
      case ._PRODUCT_DEFINITION_OCCURRENCE_REFERENCE(let entity): return entity
        .super_ePRODUCT_DEFINITION_REFERENCE
      default: return nil
      }
    }

    public var super_ePRODUCT_RELATIONSHIP: ePRODUCT_RELATIONSHIP? {
      switch self {
      case ._PRODUCT_RELATIONSHIP(let entity): return entity
      default: return nil
      }
    }

    public var super_eACTION: eACTION? {
      switch self {
      case ._EXECUTED_ACTION(let entity): return entity.super_eACTION
      default: return nil
      }
    }

    public var super_eCHARACTERIZED_OBJECT: eCHARACTERIZED_OBJECT? {
      switch self {
      case ._PRODUCT_IDENTIFICATION(let entity): return entity.super_eCHARACTERIZED_OBJECT
      default: return nil
      }
    }


    //MARK: - ENTITY ATTRIBUTE REFERENCES
    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_OCCURRENCE_REFERENCE`` )
    public var PRODUCT_OCCURRENCE_ID: tIDENTIFIER?  {
      switch self {
      case ._PRODUCT_DEFINITION_OCCURRENCE_REFERENCE(let entity): return entity.PRODUCT_OCCURRENCE_ID
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_OCCURRENCE_REFERENCE`` )
    public var PRODUCT_DEFINITION_ID: tIDENTIFIER?  {
      switch self {
      case ._PRODUCT_DEFINITION_OCCURRENCE_REFERENCE(let entity): return entity.PRODUCT_DEFINITION_ID
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``eACTION_METHOD`` )
    /// - origin: ENTITY( ``eANALYSIS_ASSIGNMENT`` )
    /// - origin: ENTITY( ``eASSEMBLY_COMPONENT_USAGE`` )
    /// - origin: ENTITY( ``eEXECUTED_ACTION`` )
    /// - origin: ENTITY( ``eINTERFACE_CONNECTION`` )
    /// - origin: ENTITY( ``eINTERFACE_CONNECTOR_VERSION`` )
    /// - origin: ENTITY( ``eINTERFACE_DEFINITION_CONNECTION`` )
    /// - origin: ENTITY( ``eINTERFACE_SPECIFICATION_VERSION`` )
    /// - origin: ENTITY( ``eMAKE_FROM_USAGE_OPTION`` )
    /// - origin: ENTITY( ``eORGANIZATIONAL_PROJECT`` )
    /// - origin: ENTITY( ``ePRODUCT`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_FORMATION`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_OCCURRENCE`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    /// - origin: ENTITY( ``ePRODUCT_GROUP`` )
    /// - origin: ENTITY( ``ePRODUCT_GROUP_RELATIONSHIP`` )
    /// - origin: ENTITY( ``ePRODUCT_RELATIONSHIP`` )
    /// - origin: ENTITY( ``eREQUIREMENT_VIEW_DEFINITION_RELATIONSHIP`` )
    public var DESCRIPTION: tTEXT?  {
      switch self {
      case ._ACTION_METHOD(let entity): return entity.DESCRIPTION
      case ._ANALYSIS_ASSIGNMENT(let entity): return entity.DESCRIPTION
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): return entity.DESCRIPTION
      case ._EXECUTED_ACTION(let entity): return entity.DESCRIPTION
      case ._INTERFACE_CONNECTION(let entity): return entity.DESCRIPTION
      case ._INTERFACE_CONNECTOR_VERSION(let entity): return entity.DESCRIPTION
      case ._INTERFACE_DEFINITION_CONNECTION(let entity): return entity.DESCRIPTION
      case ._INTERFACE_SPECIFICATION_VERSION(let entity): return entity.DESCRIPTION
      case ._MAKE_FROM_USAGE_OPTION(let entity): return entity.DESCRIPTION
      case ._ORGANIZATIONAL_PROJECT(let entity): return entity.DESCRIPTION
      case ._PRODUCT(let entity): return entity.DESCRIPTION
      case ._PRODUCT_DEFINITION(let entity): return entity.DESCRIPTION
      case ._PRODUCT_DEFINITION_FORMATION(let entity): return entity.DESCRIPTION
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let entity): return entity.DESCRIPTION
      case ._PRODUCT_DEFINITION_OCCURRENCE(let entity): return entity.DESCRIPTION
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.DESCRIPTION
      case ._PRODUCT_GROUP(let entity): return entity.DESCRIPTION
      case ._PRODUCT_GROUP_RELATIONSHIP(let entity): return entity.DESCRIPTION
      case ._PRODUCT_IDENTIFICATION/*(let entity)*/: return nil // AMBIGUOUS ATTRIBUTE for ePRODUCT_IDENTIFICATION
      case ._PRODUCT_RELATIONSHIP(let entity): return entity.DESCRIPTION
      case ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(let entity): return entity.DESCRIPTION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``eASSEMBLY_COMPONENT_USAGE`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    public var LEAF: sPRODUCT_DEFINITION_OR_REFERENCE?  {
      switch self {
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): return entity.LEAF
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.LEAF
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``eEXECUTED_ACTION`` )
    public var DIRECTIVE: eACTION_DIRECTIVE?  {
      switch self {
      case ._EXECUTED_ACTION(let entity): return entity.DIRECTIVE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP`` )
    public var REALIZED_PRODUCT: ePRODUCT_DEFINITION_FORMATION?  {
      switch self {
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let entity): return entity.REALIZED_PRODUCT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``eASSEMBLY_COMPONENT_USAGE`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    public var NEXT_USAGE: eNEXT_ASSEMBLY_USAGE_OCCURRENCE?  {
      switch self {
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): return entity.NEXT_USAGE
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.NEXT_USAGE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``eAPPLIED_ACTION_METHOD_ASSIGNMENT`` )
    /// - origin: ENTITY( ``eEVIDENCE`` )
    public var ROLE: SDAI.GENERIC_ENTITY?  {
      switch self {
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let entity): return entity.ROLE
      case ._EVIDENCE(let entity): return entity.ROLE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``eASSEMBLY_COMPONENT_USAGE`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    public var REFERENCE_DESIGNATOR: tIDENTIFIER?  {
      switch self {
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): return entity.REFERENCE_DESIGNATOR
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.REFERENCE_DESIGNATOR
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_GROUP_RELATIONSHIP`` )
    public var RELATED_GROUP: eGROUP?  {
      switch self {
      case ._PRODUCT_GROUP_RELATIONSHIP(let entity): return entity.RELATED_GROUP
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_FORMATION`` )
    public var STATUS: SDAI.STRING?  {
      switch self {
      case ._PRODUCT_DEFINITION_FORMATION(let entity): return entity.STATUS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP`` )
    public var RELATED_PRODUCT_DEFINITION_FORMATION: ePRODUCT_DEFINITION_FORMATION?  {
      switch self {
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let entity): return 
        entity.RELATED_PRODUCT_DEFINITION_FORMATION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    public var CONSTITUENT_AMOUNT: (SDAI.SET<sCHARACTERIZED_PRODUCT_COMPOSITION_VALUE>/*[1:nil]*/ )?  {
      switch self {
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.CONSTITUENT_AMOUNT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_OCCURRENCE`` )
    public var DESCENDANT_OCCURRENCES: (SDAI.SET<ePRODUCT_DEFINITION_SPECIFIED_OCCURRENCE>/*[0:nil]*/ )?  {
      switch self {
      case ._PRODUCT_DEFINITION_OCCURRENCE(let entity): return entity.DESCENDANT_OCCURRENCES
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``eASSEMBLY_COMPONENT_USAGE`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    public var UPPER_USAGE: eASSEMBLY_COMPONENT_USAGE?  {
      switch self {
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): return entity.UPPER_USAGE
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.UPPER_USAGE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_OCCURRENCE_REFERENCE`` )
    public var PRODUCT_DEFINITION_FORMATION_ID: tIDENTIFIER?  {
      switch self {
      case ._PRODUCT_DEFINITION_OCCURRENCE_REFERENCE(let entity): return 
        entity.PRODUCT_DEFINITION_FORMATION_ID
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``eMAKE_FROM_USAGE_OPTION`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    public var RANKING_RATIONALE: tTEXT?  {
      switch self {
      case ._MAKE_FROM_USAGE_OPTION(let entity): return entity.RANKING_RATIONALE
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.RANKING_RATIONALE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``eASSEMBLY_COMPONENT_USAGE`` )
    /// - origin: ENTITY( ``eMAKE_FROM_USAGE_OPTION`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_OCCURRENCE`` )
    public var QUANTITY: eMEASURE_WITH_UNIT?  {
      switch self {
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): return entity.QUANTITY
      case ._MAKE_FROM_USAGE_OPTION(let entity): return entity.QUANTITY
      case ._PRODUCT_DEFINITION_OCCURRENCE(let entity): return entity.QUANTITY
      case ._PRODUCT_DEFINITION_RELATIONSHIP/*(let entity)*/: return nil // AMBIGUOUS ATTRIBUTE for ePRODUCT_DEFINITION_RELATIONSHIP
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    public var CLASS: tLABEL?  {
      switch self {
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.CLASS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION`` )
    public var DEFINED_VERSION: eCOLLECTION_VERSION?  {
      switch self {
      case ._PRODUCT_DEFINITION(let entity): return entity.DEFINED_VERSION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_RELATIONSHIP`` )
    public var RELATED_MESSAGE: eSTRUCTURED_MESSAGE?  {
      switch self {
      case ._PRODUCT_RELATIONSHIP(let entity): return entity.RELATED_MESSAGE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_FORMATION`` )
    public var OF_COLLECTION: eCOLLECTION?  {
      switch self {
      case ._PRODUCT_DEFINITION_FORMATION(let entity): return entity.OF_COLLECTION
      default: return nil
      }
    }

    //MARK: var ITEMS: (AMBIGUOUS)

    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP`` )
    public var PRODUCT_DESIGN_VERSION: ePRODUCT_DEFINITION_FORMATION?  {
      switch self {
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let entity): return entity.PRODUCT_DESIGN_VERSION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``eMAKE_FROM_USAGE_OPTION`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    public var RANKING: SDAI.INTEGER?  {
      switch self {
      case ._MAKE_FROM_USAGE_OPTION(let entity): return entity.RANKING
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.RANKING
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    public var OF_SHAPE: eMATED_PART_RELATIONSHIP?  {
      switch self {
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.OF_SHAPE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``eALTERNATE_PRODUCT_RELATIONSHIP`` )
    public var BASIS: tTEXT?  {
      switch self {
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let entity): return entity.BASIS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_OCCURRENCE_REFERENCE`` )
    public var ID_OWNING_ORGANIZATION_NAME: tLABEL?  {
      switch self {
      case ._PRODUCT_DEFINITION_OCCURRENCE_REFERENCE(let entity): return entity.ID_OWNING_ORGANIZATION_NAME
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_FORMATION`` )
    public var MAKE_OR_BUY: nSOURCE?  {
      switch self {
      case ._PRODUCT_DEFINITION_FORMATION(let entity): return entity.MAKE_OR_BUY
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``eEXECUTED_ACTION`` )
    public var CHOSEN_METHOD: eACTION_METHOD?  {
      switch self {
      case ._EXECUTED_ACTION(let entity): return entity.CHOSEN_METHOD
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``eACTION_METHOD`` )
    /// - origin: ENTITY( ``ePRODUCT_IDENTIFICATION`` )
    public var PURPOSE: SDAI.STRING?  {
      switch self {
      case ._ACTION_METHOD(let entity): return SDAI.STRING(entity.PURPOSE)
      case ._PRODUCT_IDENTIFICATION(let entity): return SDAI.STRING(entity.PURPOSE)
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP`` )
    public var RELATING_PRODUCT_DEFINITION_FORMATION: ePRODUCT_DEFINITION_FORMATION?  {
      switch self {
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let entity): return 
        entity.RELATING_PRODUCT_DEFINITION_FORMATION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP`` )
    public var RELATING_VERSION: eCOLLECTION_VERSION?  {
      switch self {
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let entity): return entity.RELATING_VERSION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_OCCURRENCE`` )
    public var OCCURRENCE_USAGE: sPRODUCT_DEFINITION_OCCURRENCE_OR_REFERENCE?  {
      switch self {
      case ._PRODUCT_DEFINITION_OCCURRENCE(let entity): return entity.OCCURRENCE_USAGE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_RELATIONSHIP`` )
    public var RELATED_COLLECTION: eCOLLECTION?  {
      switch self {
      case ._PRODUCT_RELATIONSHIP(let entity): return entity.RELATED_COLLECTION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    public var COMPOSITION_BASIS: tLABEL?  {
      switch self {
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.COMPOSITION_BASIS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION`` )
    public var DOCUMENTATION_IDS: (SDAI.SET<eDOCUMENT>/*[1:nil]*/ )?  {
      switch self {
      case ._PRODUCT_DEFINITION(let entity): return entity.DOCUMENTATION_IDS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP`` )
    public var RELATION_TYPE: SDAI.STRING?  {
      switch self {
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let entity): return entity.RELATION_TYPE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``eAPPLIED_ACTION_METHOD_ASSIGNMENT`` )
    public var ASSIGNED_ACTION_METHOD: eACTION_METHOD?  {
      switch self {
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let entity): return entity.ASSIGNED_ACTION_METHOD
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_FORMATION`` )
    public var SPECIFICATION: (SDAI.SET<ePRODUCT_DEFINITION>/*[1:nil]*/ )?  {
      switch self {
      case ._PRODUCT_DEFINITION_FORMATION(let entity): return entity.SPECIFICATION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP`` )
    public var PLANNED_PRODUCT: ePRODUCT_DEFINITION_FORMATION?  {
      switch self {
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let entity): return entity.PLANNED_PRODUCT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP`` )
    public var SUCCESSOR: eCOLLECTION_VERSION?  {
      switch self {
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let entity): return entity.SUCCESSOR
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP`` )
    /// - origin: ENTITY( ``ePRODUCT_RELATIONSHIP`` )
    public var INDIVIDUAL_PRODUCT: SDAI.GENERIC_ENTITY?  {
      switch self {
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let entity): return entity.INDIVIDUAL_PRODUCT
      case ._PRODUCT_RELATIONSHIP(let entity): return entity.INDIVIDUAL_PRODUCT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_RELATIONSHIP`` )
    public var RELATED_PRODUCT: ePRODUCT?  {
      switch self {
      case ._PRODUCT_RELATIONSHIP(let entity): return entity.RELATED_PRODUCT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_IDENTIFICATION`` )
    public var ITEM_CONCEPT: ePRODUCT_CLASS?  {
      switch self {
      case ._PRODUCT_IDENTIFICATION(let entity): return entity.ITEM_CONCEPT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    public var DETERMINATION_METHOD: tTEXT?  {
      switch self {
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.DETERMINATION_METHOD
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_RELATIONSHIP`` )
    public var RELATING_COLLECTION: eCOLLECTION?  {
      switch self {
      case ._PRODUCT_RELATIONSHIP(let entity): return entity.RELATING_COLLECTION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_OCCURRENCE_REFERENCE`` )
    public var PRODUCT_ID: tIDENTIFIER?  {
      switch self {
      case ._PRODUCT_DEFINITION_OCCURRENCE_REFERENCE(let entity): return entity.PRODUCT_ID
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``eACTION_METHOD`` )
    public var CONSEQUENCE: tTEXT?  {
      switch self {
      case ._ACTION_METHOD(let entity): return entity.CONSEQUENCE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``eASSEMBLY_COMPONENT_USAGE`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    public var ROOT: ePRODUCT_DEFINITION?  {
      switch self {
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): return entity.ROOT
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.ROOT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_GROUP_RELATIONSHIP`` )
    public var RELATING_GROUP: eGROUP?  {
      switch self {
      case ._PRODUCT_GROUP_RELATIONSHIP(let entity): return entity.RELATING_GROUP
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``eALTERNATE_PRODUCT_RELATIONSHIP`` )
    public var BASE: ePRODUCT?  {
      switch self {
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let entity): return entity.BASE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_OCCURRENCE`` )
    public var CHILD_OCCURRENCES: (SDAI.SET<ePRODUCT_DEFINITION_SPECIFIED_OCCURRENCE>/*[0:nil]*/ )?  {
      switch self {
      case ._PRODUCT_DEFINITION_OCCURRENCE(let entity): return entity.CHILD_OCCURRENCES
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``eASSEMBLY_COMPONENT_USAGE`` )
    /// - origin: ENTITY( ``eINTERFACE_DEFINITION_CONNECTION`` )
    /// - origin: ENTITY( ``eMAKE_FROM_USAGE_OPTION`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    /// - origin: ENTITY( ``eREQUIREMENT_VIEW_DEFINITION_RELATIONSHIP`` )
    public var RELATING_PRODUCT_DEFINITION: sPRODUCT_DEFINITION_OR_REFERENCE?  {
      switch self {
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): return entity.RELATING_PRODUCT_DEFINITION
      case ._INTERFACE_DEFINITION_CONNECTION(let entity): return entity.RELATING_PRODUCT_DEFINITION
      case ._MAKE_FROM_USAGE_OPTION(let entity): return entity.RELATING_PRODUCT_DEFINITION
      case ._PRODUCT_DEFINITION(let entity): return sPRODUCT_DEFINITION_OR_REFERENCE(
        entity.RELATING_PRODUCT_DEFINITION)
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.RELATING_PRODUCT_DEFINITION
      case ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(let entity): return entity.RELATING_PRODUCT_DEFINITION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP`` )
    public var RELATED_VERSION: eCOLLECTION_VERSION?  {
      switch self {
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let entity): return entity.RELATED_VERSION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_OCCURRENCE_REFERENCE`` )
    public var SOURCE: eEXTERNAL_SOURCE?  {
      switch self {
      case ._PRODUCT_DEFINITION_OCCURRENCE_REFERENCE(let entity): return entity.SOURCE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``eANALYSIS_ASSIGNMENT`` )
    /// - origin: ENTITY( ``eASSEMBLY_COMPONENT_USAGE`` )
    /// - origin: ENTITY( ``eEXECUTED_ACTION`` )
    /// - origin: ENTITY( ``eINTERFACE_CONNECTION`` )
    /// - origin: ENTITY( ``eINTERFACE_CONNECTOR_VERSION`` )
    /// - origin: ENTITY( ``eINTERFACE_DEFINITION_CONNECTION`` )
    /// - origin: ENTITY( ``eINTERFACE_SPECIFICATION_VERSION`` )
    /// - origin: ENTITY( ``eMAKE_FROM_USAGE_OPTION`` )
    /// - origin: ENTITY( ``eORGANIZATIONAL_PROJECT`` )
    /// - origin: ENTITY( ``ePRODUCT`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_FORMATION`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_OCCURRENCE`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    /// - origin: ENTITY( ``ePRODUCT_GROUP`` )
    /// - origin: ENTITY( ``ePRODUCT_IDENTIFICATION`` )
    /// - origin: ENTITY( ``ePRODUCT_RELATIONSHIP`` )
    /// - origin: ENTITY( ``eREQUIREMENT_VIEW_DEFINITION_RELATIONSHIP`` )
    public var ID: tIDENTIFIER?  {
      switch self {
      case ._ANALYSIS_ASSIGNMENT(let entity): return entity.ID
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): return entity.ID
      case ._EXECUTED_ACTION(let entity): return entity.ID
      case ._INTERFACE_CONNECTION(let entity): return entity.ID
      case ._INTERFACE_CONNECTOR_VERSION(let entity): return entity.ID
      case ._INTERFACE_DEFINITION_CONNECTION(let entity): return entity.ID
      case ._INTERFACE_SPECIFICATION_VERSION(let entity): return entity.ID
      case ._MAKE_FROM_USAGE_OPTION(let entity): return entity.ID
      case ._ORGANIZATIONAL_PROJECT(let entity): return entity.ID
      case ._PRODUCT(let entity): return entity.ID
      case ._PRODUCT_DEFINITION(let entity): return entity.ID
      case ._PRODUCT_DEFINITION_FORMATION(let entity): return entity.ID
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let entity): return entity.ID
      case ._PRODUCT_DEFINITION_OCCURRENCE(let entity): return entity.ID
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.ID
      case ._PRODUCT_GROUP(let entity): return entity.ID
      case ._PRODUCT_IDENTIFICATION(let entity): return entity.ID
      case ._PRODUCT_RELATIONSHIP(let entity): return entity.ID
      case ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(let entity): return entity.ID
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_RELATIONSHIP`` )
    public var RELATING_MESSAGE: eSTRUCTURED_MESSAGE?  {
      switch self {
      case ._PRODUCT_RELATIONSHIP(let entity): return entity.RELATING_MESSAGE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``eALTERNATE_PRODUCT_RELATIONSHIP`` )
    public var ALTERNATE: ePRODUCT?  {
      switch self {
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let entity): return entity.ALTERNATE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``eORGANIZATIONAL_PROJECT`` )
    public var RESPONSIBLE_ORGANIZATIONS: (SDAI.SET<eORGANIZATION>/*[1:nil]*/ )?  {
      switch self {
      case ._ORGANIZATIONAL_PROJECT(let entity): return entity.RESPONSIBLE_ORGANIZATIONS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``eINTERFACE_CONNECTOR_VERSION`` )
    /// - origin: ENTITY( ``eINTERFACE_SPECIFICATION_VERSION`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_FORMATION`` )
    public var OF_PRODUCT: ePRODUCT?  {
      switch self {
      case ._INTERFACE_CONNECTOR_VERSION(let entity): return entity.OF_PRODUCT
      case ._INTERFACE_SPECIFICATION_VERSION(let entity): return entity.OF_PRODUCT
      case ._PRODUCT_DEFINITION_FORMATION(let entity): return entity.OF_PRODUCT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``eASSEMBLY_COMPONENT_USAGE`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    public var PRODUCT_DEFINITION_OCCURRENCE_ID: tIDENTIFIER?  {
      switch self {
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): return entity.PRODUCT_DEFINITION_OCCURRENCE_ID
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.PRODUCT_DEFINITION_OCCURRENCE_ID
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``eEVIDENCE`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    public var ASSIGNED_GROUP: eGROUP?  {
      switch self {
      case ._EVIDENCE(let entity): return entity.ASSIGNED_GROUP
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return eGROUP(entity.ASSIGNED_GROUP)
      default: return nil
      }
    }

    //MARK: var FRAME_OF_REFERENCE: (AMBIGUOUS)

    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``eASSEMBLY_COMPONENT_USAGE`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    public var LOCATION: (SDAI.LIST_UNIQUE<eNEXT_ASSEMBLY_USAGE_OCCURRENCE>/*[1:nil]*/ )?  {
      switch self {
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): return entity.LOCATION
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.LOCATION
      default: return nil
      }
    }

    //MARK: var DEFINITION: (AMBIGUOUS)

    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_RELATIONSHIP`` )
    public var RELATING_PRODUCT: ePRODUCT?  {
      switch self {
      case ._PRODUCT_RELATIONSHIP(let entity): return entity.RELATING_PRODUCT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``eASSEMBLY_COMPONENT_USAGE`` )
    /// - origin: ENTITY( ``eINTERFACE_DEFINITION_CONNECTION`` )
    /// - origin: ENTITY( ``eMAKE_FROM_USAGE_OPTION`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    /// - origin: ENTITY( ``eREQUIREMENT_VIEW_DEFINITION_RELATIONSHIP`` )
    public var RELATED_PRODUCT_DEFINITION: sPRODUCT_DEFINITION_OR_REFERENCE?  {
      switch self {
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): return entity.RELATED_PRODUCT_DEFINITION
      case ._INTERFACE_DEFINITION_CONNECTION(let entity): return entity.RELATED_PRODUCT_DEFINITION
      case ._MAKE_FROM_USAGE_OPTION(let entity): return entity.RELATED_PRODUCT_DEFINITION
      case ._PRODUCT_DEFINITION(let entity): return sPRODUCT_DEFINITION_OR_REFERENCE(
        entity.RELATED_PRODUCT_DEFINITION)
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.RELATED_PRODUCT_DEFINITION
      case ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(let entity): return entity.RELATED_PRODUCT_DEFINITION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``eACTION_METHOD`` )
    /// - origin: ENTITY( ``eALTERNATE_PRODUCT_RELATIONSHIP`` )
    /// - origin: ENTITY( ``eANALYSIS_ASSIGNMENT`` )
    /// - origin: ENTITY( ``eASSEMBLY_COMPONENT_USAGE`` )
    /// - origin: ENTITY( ``eEXECUTED_ACTION`` )
    /// - origin: ENTITY( ``eINTERFACE_CONNECTION`` )
    /// - origin: ENTITY( ``eINTERFACE_DEFINITION_CONNECTION`` )
    /// - origin: ENTITY( ``eMAKE_FROM_USAGE_OPTION`` )
    /// - origin: ENTITY( ``eORGANIZATIONAL_PROJECT`` )
    /// - origin: ENTITY( ``ePRODUCT`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_OCCURRENCE`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    /// - origin: ENTITY( ``ePRODUCT_GROUP`` )
    /// - origin: ENTITY( ``ePRODUCT_GROUP_RELATIONSHIP`` )
    /// - origin: ENTITY( ``ePRODUCT_RELATIONSHIP`` )
    /// - origin: ENTITY( ``eREQUIREMENT_VIEW_DEFINITION_RELATIONSHIP`` )
    public var NAME: tLABEL?  {
      switch self {
      case ._ACTION_METHOD(let entity): return entity.NAME
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let entity): return entity.NAME
      case ._ANALYSIS_ASSIGNMENT(let entity): return entity.NAME
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): return entity.NAME
      case ._EXECUTED_ACTION(let entity): return entity.NAME
      case ._INTERFACE_CONNECTION(let entity): return entity.NAME
      case ._INTERFACE_DEFINITION_CONNECTION(let entity): return entity.NAME
      case ._MAKE_FROM_USAGE_OPTION(let entity): return entity.NAME
      case ._ORGANIZATIONAL_PROJECT(let entity): return entity.NAME
      case ._PRODUCT(let entity): return entity.NAME
      case ._PRODUCT_DEFINITION(let entity): return entity.NAME
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let entity): return entity.NAME
      case ._PRODUCT_DEFINITION_OCCURRENCE(let entity): return entity.NAME
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.NAME
      case ._PRODUCT_GROUP(let entity): return entity.NAME
      case ._PRODUCT_GROUP_RELATIONSHIP(let entity): return entity.NAME
      case ._PRODUCT_IDENTIFICATION/*(let entity)*/: return nil // AMBIGUOUS ATTRIBUTE for ePRODUCT_IDENTIFICATION
      case ._PRODUCT_RELATIONSHIP(let entity): return entity.NAME
      case ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(let entity): return entity.NAME
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_OCCURRENCE`` )
    public var ASSEMBLY_USAGES: (SDAI.SET<eASSEMBLY_COMPONENT_USAGE>/*[0:nil]*/ )?  {
      switch self {
      case ._PRODUCT_DEFINITION_OCCURRENCE(let entity): return entity.ASSEMBLY_USAGES
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP`` )
    public var PREDECESSOR: eCOLLECTION_VERSION?  {
      switch self {
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let entity): return entity.PREDECESSOR
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_RELATIONSHIP`` )
    public var PRODUCT_DESIGN: ePRODUCT?  {
      switch self {
      case ._PRODUCT_RELATIONSHIP(let entity): return entity.PRODUCT_DESIGN
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCERTIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION`` )
    public var FORMATION: ePRODUCT_DEFINITION_FORMATION?  {
      switch self {
      case ._PRODUCT_DEFINITION(let entity): return entity.FORMATION
      default: return nil
      }
    }


    //MARK: - SDAIValue
    public func isValueEqual<T: SDAIValue>(to rhs: T) -> Bool {
      switch self {
      case ._ACTION_METHOD(let selection): return selection.value.isValueEqual(to: rhs)
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let selection): return selection.value.isValueEqual(to: rhs)
      case ._ANALYSIS_ASSIGNMENT(let selection): return selection.value.isValueEqual(to: rhs)
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let selection): return selection.value.isValueEqual(to: rhs)
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._EVIDENCE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._EXECUTED_ACTION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._INTERFACE_CONNECTION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._INTERFACE_CONNECTOR_VERSION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._INTERFACE_DEFINITION_CONNECTION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._INTERFACE_SPECIFICATION_VERSION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._MAKE_FROM_USAGE_OPTION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PRODUCT(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PRODUCT_DEFINITION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PRODUCT_DEFINITION_OCCURRENCE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PRODUCT_DEFINITION_OCCURRENCE_REFERENCE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PRODUCT_GROUP(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PRODUCT_GROUP_RELATIONSHIP(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PRODUCT_IDENTIFICATION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PRODUCT_RELATIONSHIP(let selection): return selection.value.isValueEqual(to: rhs)
      case ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(let selection): return selection.value.isValueEqual(to: rhs)
      }
    }

    public func isValueEqualOptionally<T: SDAIValue>(to rhs: T?) -> Bool? {
      switch self {
      case ._ACTION_METHOD(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._ANALYSIS_ASSIGNMENT(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._EVIDENCE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._EXECUTED_ACTION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._INTERFACE_CONNECTION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._INTERFACE_CONNECTOR_VERSION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._INTERFACE_DEFINITION_CONNECTION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._INTERFACE_SPECIFICATION_VERSION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._MAKE_FROM_USAGE_OPTION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PRODUCT(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PRODUCT_DEFINITION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PRODUCT_DEFINITION_OCCURRENCE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PRODUCT_DEFINITION_OCCURRENCE_REFERENCE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PRODUCT_GROUP(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PRODUCT_GROUP_RELATIONSHIP(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PRODUCT_IDENTIFICATION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PRODUCT_RELATIONSHIP(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      }
    }

    public func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      switch self {
      case ._ACTION_METHOD(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._ANALYSIS_ASSIGNMENT(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._EVIDENCE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._EXECUTED_ACTION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._INTERFACE_CONNECTION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._INTERFACE_CONNECTOR_VERSION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._INTERFACE_DEFINITION_CONNECTION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._INTERFACE_SPECIFICATION_VERSION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._MAKE_FROM_USAGE_OPTION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._ORGANIZATIONAL_PROJECT(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PRODUCT(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PRODUCT_DEFINITION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PRODUCT_DEFINITION_FORMATION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PRODUCT_DEFINITION_OCCURRENCE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PRODUCT_DEFINITION_OCCURRENCE_REFERENCE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PRODUCT_GROUP(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PRODUCT_GROUP_RELATIONSHIP(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PRODUCT_IDENTIFICATION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PRODUCT_RELATIONSHIP(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      }
    }

    public func isValueEqual<T: SDAIValue>(to rhs: T, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      switch self {
      case ._ACTION_METHOD(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._ANALYSIS_ASSIGNMENT(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._EVIDENCE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._EXECUTED_ACTION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._INTERFACE_CONNECTION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._INTERFACE_CONNECTOR_VERSION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._INTERFACE_DEFINITION_CONNECTION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._INTERFACE_SPECIFICATION_VERSION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._MAKE_FROM_USAGE_OPTION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PRODUCT(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PRODUCT_DEFINITION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PRODUCT_DEFINITION_OCCURRENCE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PRODUCT_DEFINITION_OCCURRENCE_REFERENCE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PRODUCT_GROUP(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PRODUCT_GROUP_RELATIONSHIP(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PRODUCT_IDENTIFICATION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PRODUCT_RELATIONSHIP(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      }
    }

    public func isValueEqualOptionally<T: SDAIValue>(to rhs: T?, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      switch self {
      case ._ACTION_METHOD(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._ANALYSIS_ASSIGNMENT(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._EVIDENCE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._EXECUTED_ACTION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._INTERFACE_CONNECTION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._INTERFACE_CONNECTOR_VERSION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._INTERFACE_DEFINITION_CONNECTION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._INTERFACE_SPECIFICATION_VERSION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._MAKE_FROM_USAGE_OPTION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PRODUCT(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PRODUCT_DEFINITION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PRODUCT_DEFINITION_OCCURRENCE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PRODUCT_DEFINITION_OCCURRENCE_REFERENCE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PRODUCT_GROUP(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PRODUCT_GROUP_RELATIONSHIP(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PRODUCT_IDENTIFICATION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PRODUCT_RELATIONSHIP(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      }
    }


    //MARK: SDAIGenericTypeBase
    public func copy() -> Self {
      switch self {
      case ._ACTION_METHOD(let selection): return ._ACTION_METHOD(selection.copy())
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let selection): return ._ALTERNATE_PRODUCT_RELATIONSHIP(selection.copy())
      case ._ANALYSIS_ASSIGNMENT(let selection): return ._ANALYSIS_ASSIGNMENT(selection.copy())
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let selection): return ._APPLIED_ACTION_METHOD_ASSIGNMENT(selection.copy())
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return ._ASSEMBLY_COMPONENT_USAGE(selection.copy())
      case ._EVIDENCE(let selection): return ._EVIDENCE(selection.copy())
      case ._EXECUTED_ACTION(let selection): return ._EXECUTED_ACTION(selection.copy())
      case ._INTERFACE_CONNECTION(let selection): return ._INTERFACE_CONNECTION(selection.copy())
      case ._INTERFACE_CONNECTOR_VERSION(let selection): return ._INTERFACE_CONNECTOR_VERSION(selection.copy())
      case ._INTERFACE_DEFINITION_CONNECTION(let selection): return ._INTERFACE_DEFINITION_CONNECTION(selection.copy())
      case ._INTERFACE_SPECIFICATION_VERSION(let selection): return ._INTERFACE_SPECIFICATION_VERSION(selection.copy())
      case ._MAKE_FROM_USAGE_OPTION(let selection): return ._MAKE_FROM_USAGE_OPTION(selection.copy())
      case ._ORGANIZATIONAL_PROJECT(let selection): return ._ORGANIZATIONAL_PROJECT(selection.copy())
      case ._PRODUCT(let selection): return ._PRODUCT(selection.copy())
      case ._PRODUCT_DEFINITION(let selection): return ._PRODUCT_DEFINITION(selection.copy())
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return ._PRODUCT_DEFINITION_FORMATION(selection.copy())
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let selection): return ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(selection.copy())
      case ._PRODUCT_DEFINITION_OCCURRENCE(let selection): return ._PRODUCT_DEFINITION_OCCURRENCE(selection.copy())
      case ._PRODUCT_DEFINITION_OCCURRENCE_REFERENCE(let selection): return ._PRODUCT_DEFINITION_OCCURRENCE_REFERENCE(selection.copy())
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return ._PRODUCT_DEFINITION_RELATIONSHIP(selection.copy())
      case ._PRODUCT_GROUP(let selection): return ._PRODUCT_GROUP(selection.copy())
      case ._PRODUCT_GROUP_RELATIONSHIP(let selection): return ._PRODUCT_GROUP_RELATIONSHIP(selection.copy())
      case ._PRODUCT_IDENTIFICATION(let selection): return ._PRODUCT_IDENTIFICATION(selection.copy())
      case ._PRODUCT_RELATIONSHIP(let selection): return ._PRODUCT_RELATIONSHIP(selection.copy())
      case ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(let selection): return ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(selection.copy())
      }
    }

    //MARK: SDAIGenericType
    public var typeMembers: Set<SDAI.STRING> {
      var members: Set<SDAI.STRING> = [SDAI.STRING(Self.typeName)]
      switch self {
      case ._ACTION_METHOD(let selection): members.formUnion(selection.typeMembers)
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let selection): members.formUnion(selection.typeMembers)
      case ._ANALYSIS_ASSIGNMENT(let selection): members.formUnion(selection.typeMembers)
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let selection): members.formUnion(selection.typeMembers)
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): members.formUnion(selection.typeMembers)
      case ._EVIDENCE(let selection): members.formUnion(selection.typeMembers)
      case ._EXECUTED_ACTION(let selection): members.formUnion(selection.typeMembers)
      case ._INTERFACE_CONNECTION(let selection): members.formUnion(selection.typeMembers)
      case ._INTERFACE_CONNECTOR_VERSION(let selection): members.formUnion(selection.typeMembers)
      case ._INTERFACE_DEFINITION_CONNECTION(let selection): members.formUnion(selection.typeMembers)
      case ._INTERFACE_SPECIFICATION_VERSION(let selection): members.formUnion(selection.typeMembers)
      case ._MAKE_FROM_USAGE_OPTION(let selection): members.formUnion(selection.typeMembers)
      case ._ORGANIZATIONAL_PROJECT(let selection): members.formUnion(selection.typeMembers)
      case ._PRODUCT(let selection): members.formUnion(selection.typeMembers)
      case ._PRODUCT_DEFINITION(let selection): members.formUnion(selection.typeMembers)
      case ._PRODUCT_DEFINITION_FORMATION(let selection): members.formUnion(selection.typeMembers)
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let selection): members.formUnion(selection.typeMembers)
      case ._PRODUCT_DEFINITION_OCCURRENCE(let selection): members.formUnion(selection.typeMembers)
      case ._PRODUCT_DEFINITION_OCCURRENCE_REFERENCE(let selection): members.formUnion(selection.typeMembers)
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): members.formUnion(selection.typeMembers)
      case ._PRODUCT_GROUP(let selection): members.formUnion(selection.typeMembers)
      case ._PRODUCT_GROUP_RELATIONSHIP(let selection): members.formUnion(selection.typeMembers)
      case ._PRODUCT_IDENTIFICATION(let selection): members.formUnion(selection.typeMembers)
      case ._PRODUCT_RELATIONSHIP(let selection): members.formUnion(selection.typeMembers)
      case ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(let selection): members.formUnion(selection.typeMembers)
      }
      //SELECT data types (indirectly) referencing the current type as a member of the select list
      members.insert(SDAI.STRING(sACTION_ITEMS.typeName)) // -> Self
      members.insert(SDAI.STRING(sCHANGE_MANAGEMENT_OBJECT.typeName)) // -> sACTION_ITEMS
      members.insert(SDAI.STRING(sIR_USAGE_ITEM.typeName)) // -> Self
      return members
    }

    public var entityReference: SDAI.EntityReference? {
      switch self {
      case ._ACTION_METHOD(let selection): return selection.entityReference
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let selection): return selection.entityReference
      case ._ANALYSIS_ASSIGNMENT(let selection): return selection.entityReference
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let selection): return selection.entityReference
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.entityReference
      case ._EVIDENCE(let selection): return selection.entityReference
      case ._EXECUTED_ACTION(let selection): return selection.entityReference
      case ._INTERFACE_CONNECTION(let selection): return selection.entityReference
      case ._INTERFACE_CONNECTOR_VERSION(let selection): return selection.entityReference
      case ._INTERFACE_DEFINITION_CONNECTION(let selection): return selection.entityReference
      case ._INTERFACE_SPECIFICATION_VERSION(let selection): return selection.entityReference
      case ._MAKE_FROM_USAGE_OPTION(let selection): return selection.entityReference
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.entityReference
      case ._PRODUCT(let selection): return selection.entityReference
      case ._PRODUCT_DEFINITION(let selection): return selection.entityReference
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.entityReference
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let selection): return selection.entityReference
      case ._PRODUCT_DEFINITION_OCCURRENCE(let selection): return selection.entityReference
      case ._PRODUCT_DEFINITION_OCCURRENCE_REFERENCE(let selection): return selection.entityReference
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.entityReference
      case ._PRODUCT_GROUP(let selection): return selection.entityReference
      case ._PRODUCT_GROUP_RELATIONSHIP(let selection): return selection.entityReference
      case ._PRODUCT_IDENTIFICATION(let selection): return selection.entityReference
      case ._PRODUCT_RELATIONSHIP(let selection): return selection.entityReference
      case ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(let selection): return selection.entityReference
      }
    }
    public var stringValue: SDAI.STRING? {
      switch self {
      case ._ACTION_METHOD(let selection): return selection.stringValue
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let selection): return selection.stringValue
      case ._ANALYSIS_ASSIGNMENT(let selection): return selection.stringValue
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let selection): return selection.stringValue
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.stringValue
      case ._EVIDENCE(let selection): return selection.stringValue
      case ._EXECUTED_ACTION(let selection): return selection.stringValue
      case ._INTERFACE_CONNECTION(let selection): return selection.stringValue
      case ._INTERFACE_CONNECTOR_VERSION(let selection): return selection.stringValue
      case ._INTERFACE_DEFINITION_CONNECTION(let selection): return selection.stringValue
      case ._INTERFACE_SPECIFICATION_VERSION(let selection): return selection.stringValue
      case ._MAKE_FROM_USAGE_OPTION(let selection): return selection.stringValue
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.stringValue
      case ._PRODUCT(let selection): return selection.stringValue
      case ._PRODUCT_DEFINITION(let selection): return selection.stringValue
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.stringValue
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let selection): return selection.stringValue
      case ._PRODUCT_DEFINITION_OCCURRENCE(let selection): return selection.stringValue
      case ._PRODUCT_DEFINITION_OCCURRENCE_REFERENCE(let selection): return selection.stringValue
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.stringValue
      case ._PRODUCT_GROUP(let selection): return selection.stringValue
      case ._PRODUCT_GROUP_RELATIONSHIP(let selection): return selection.stringValue
      case ._PRODUCT_IDENTIFICATION(let selection): return selection.stringValue
      case ._PRODUCT_RELATIONSHIP(let selection): return selection.stringValue
      case ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(let selection): return selection.stringValue
      }
    }
    public var binaryValue: SDAI.BINARY? {
      switch self {
      case ._ACTION_METHOD(let selection): return selection.binaryValue
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let selection): return selection.binaryValue
      case ._ANALYSIS_ASSIGNMENT(let selection): return selection.binaryValue
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let selection): return selection.binaryValue
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.binaryValue
      case ._EVIDENCE(let selection): return selection.binaryValue
      case ._EXECUTED_ACTION(let selection): return selection.binaryValue
      case ._INTERFACE_CONNECTION(let selection): return selection.binaryValue
      case ._INTERFACE_CONNECTOR_VERSION(let selection): return selection.binaryValue
      case ._INTERFACE_DEFINITION_CONNECTION(let selection): return selection.binaryValue
      case ._INTERFACE_SPECIFICATION_VERSION(let selection): return selection.binaryValue
      case ._MAKE_FROM_USAGE_OPTION(let selection): return selection.binaryValue
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.binaryValue
      case ._PRODUCT(let selection): return selection.binaryValue
      case ._PRODUCT_DEFINITION(let selection): return selection.binaryValue
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.binaryValue
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let selection): return selection.binaryValue
      case ._PRODUCT_DEFINITION_OCCURRENCE(let selection): return selection.binaryValue
      case ._PRODUCT_DEFINITION_OCCURRENCE_REFERENCE(let selection): return selection.binaryValue
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.binaryValue
      case ._PRODUCT_GROUP(let selection): return selection.binaryValue
      case ._PRODUCT_GROUP_RELATIONSHIP(let selection): return selection.binaryValue
      case ._PRODUCT_IDENTIFICATION(let selection): return selection.binaryValue
      case ._PRODUCT_RELATIONSHIP(let selection): return selection.binaryValue
      case ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(let selection): return selection.binaryValue
      }
    }
    public var logicalValue: SDAI.LOGICAL? {
      switch self {
      case ._ACTION_METHOD(let selection): return selection.logicalValue
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let selection): return selection.logicalValue
      case ._ANALYSIS_ASSIGNMENT(let selection): return selection.logicalValue
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let selection): return selection.logicalValue
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.logicalValue
      case ._EVIDENCE(let selection): return selection.logicalValue
      case ._EXECUTED_ACTION(let selection): return selection.logicalValue
      case ._INTERFACE_CONNECTION(let selection): return selection.logicalValue
      case ._INTERFACE_CONNECTOR_VERSION(let selection): return selection.logicalValue
      case ._INTERFACE_DEFINITION_CONNECTION(let selection): return selection.logicalValue
      case ._INTERFACE_SPECIFICATION_VERSION(let selection): return selection.logicalValue
      case ._MAKE_FROM_USAGE_OPTION(let selection): return selection.logicalValue
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.logicalValue
      case ._PRODUCT(let selection): return selection.logicalValue
      case ._PRODUCT_DEFINITION(let selection): return selection.logicalValue
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.logicalValue
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let selection): return selection.logicalValue
      case ._PRODUCT_DEFINITION_OCCURRENCE(let selection): return selection.logicalValue
      case ._PRODUCT_DEFINITION_OCCURRENCE_REFERENCE(let selection): return selection.logicalValue
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.logicalValue
      case ._PRODUCT_GROUP(let selection): return selection.logicalValue
      case ._PRODUCT_GROUP_RELATIONSHIP(let selection): return selection.logicalValue
      case ._PRODUCT_IDENTIFICATION(let selection): return selection.logicalValue
      case ._PRODUCT_RELATIONSHIP(let selection): return selection.logicalValue
      case ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(let selection): return selection.logicalValue
      }
    }
    public var booleanValue: SDAI.BOOLEAN? {
      switch self {
      case ._ACTION_METHOD(let selection): return selection.booleanValue
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let selection): return selection.booleanValue
      case ._ANALYSIS_ASSIGNMENT(let selection): return selection.booleanValue
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let selection): return selection.booleanValue
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.booleanValue
      case ._EVIDENCE(let selection): return selection.booleanValue
      case ._EXECUTED_ACTION(let selection): return selection.booleanValue
      case ._INTERFACE_CONNECTION(let selection): return selection.booleanValue
      case ._INTERFACE_CONNECTOR_VERSION(let selection): return selection.booleanValue
      case ._INTERFACE_DEFINITION_CONNECTION(let selection): return selection.booleanValue
      case ._INTERFACE_SPECIFICATION_VERSION(let selection): return selection.booleanValue
      case ._MAKE_FROM_USAGE_OPTION(let selection): return selection.booleanValue
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.booleanValue
      case ._PRODUCT(let selection): return selection.booleanValue
      case ._PRODUCT_DEFINITION(let selection): return selection.booleanValue
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.booleanValue
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let selection): return selection.booleanValue
      case ._PRODUCT_DEFINITION_OCCURRENCE(let selection): return selection.booleanValue
      case ._PRODUCT_DEFINITION_OCCURRENCE_REFERENCE(let selection): return selection.booleanValue
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.booleanValue
      case ._PRODUCT_GROUP(let selection): return selection.booleanValue
      case ._PRODUCT_GROUP_RELATIONSHIP(let selection): return selection.booleanValue
      case ._PRODUCT_IDENTIFICATION(let selection): return selection.booleanValue
      case ._PRODUCT_RELATIONSHIP(let selection): return selection.booleanValue
      case ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(let selection): return selection.booleanValue
      }
    }
    public var numberValue: SDAI.NUMBER? {
      switch self {
      case ._ACTION_METHOD(let selection): return selection.numberValue
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let selection): return selection.numberValue
      case ._ANALYSIS_ASSIGNMENT(let selection): return selection.numberValue
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let selection): return selection.numberValue
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.numberValue
      case ._EVIDENCE(let selection): return selection.numberValue
      case ._EXECUTED_ACTION(let selection): return selection.numberValue
      case ._INTERFACE_CONNECTION(let selection): return selection.numberValue
      case ._INTERFACE_CONNECTOR_VERSION(let selection): return selection.numberValue
      case ._INTERFACE_DEFINITION_CONNECTION(let selection): return selection.numberValue
      case ._INTERFACE_SPECIFICATION_VERSION(let selection): return selection.numberValue
      case ._MAKE_FROM_USAGE_OPTION(let selection): return selection.numberValue
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.numberValue
      case ._PRODUCT(let selection): return selection.numberValue
      case ._PRODUCT_DEFINITION(let selection): return selection.numberValue
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.numberValue
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let selection): return selection.numberValue
      case ._PRODUCT_DEFINITION_OCCURRENCE(let selection): return selection.numberValue
      case ._PRODUCT_DEFINITION_OCCURRENCE_REFERENCE(let selection): return selection.numberValue
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.numberValue
      case ._PRODUCT_GROUP(let selection): return selection.numberValue
      case ._PRODUCT_GROUP_RELATIONSHIP(let selection): return selection.numberValue
      case ._PRODUCT_IDENTIFICATION(let selection): return selection.numberValue
      case ._PRODUCT_RELATIONSHIP(let selection): return selection.numberValue
      case ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(let selection): return selection.numberValue
      }
    }
    public var realValue: SDAI.REAL? {
      switch self {
      case ._ACTION_METHOD(let selection): return selection.realValue
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let selection): return selection.realValue
      case ._ANALYSIS_ASSIGNMENT(let selection): return selection.realValue
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let selection): return selection.realValue
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.realValue
      case ._EVIDENCE(let selection): return selection.realValue
      case ._EXECUTED_ACTION(let selection): return selection.realValue
      case ._INTERFACE_CONNECTION(let selection): return selection.realValue
      case ._INTERFACE_CONNECTOR_VERSION(let selection): return selection.realValue
      case ._INTERFACE_DEFINITION_CONNECTION(let selection): return selection.realValue
      case ._INTERFACE_SPECIFICATION_VERSION(let selection): return selection.realValue
      case ._MAKE_FROM_USAGE_OPTION(let selection): return selection.realValue
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.realValue
      case ._PRODUCT(let selection): return selection.realValue
      case ._PRODUCT_DEFINITION(let selection): return selection.realValue
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.realValue
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let selection): return selection.realValue
      case ._PRODUCT_DEFINITION_OCCURRENCE(let selection): return selection.realValue
      case ._PRODUCT_DEFINITION_OCCURRENCE_REFERENCE(let selection): return selection.realValue
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.realValue
      case ._PRODUCT_GROUP(let selection): return selection.realValue
      case ._PRODUCT_GROUP_RELATIONSHIP(let selection): return selection.realValue
      case ._PRODUCT_IDENTIFICATION(let selection): return selection.realValue
      case ._PRODUCT_RELATIONSHIP(let selection): return selection.realValue
      case ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(let selection): return selection.realValue
      }
    }
    public var integerValue: SDAI.INTEGER? {
      switch self {
      case ._ACTION_METHOD(let selection): return selection.integerValue
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let selection): return selection.integerValue
      case ._ANALYSIS_ASSIGNMENT(let selection): return selection.integerValue
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let selection): return selection.integerValue
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.integerValue
      case ._EVIDENCE(let selection): return selection.integerValue
      case ._EXECUTED_ACTION(let selection): return selection.integerValue
      case ._INTERFACE_CONNECTION(let selection): return selection.integerValue
      case ._INTERFACE_CONNECTOR_VERSION(let selection): return selection.integerValue
      case ._INTERFACE_DEFINITION_CONNECTION(let selection): return selection.integerValue
      case ._INTERFACE_SPECIFICATION_VERSION(let selection): return selection.integerValue
      case ._MAKE_FROM_USAGE_OPTION(let selection): return selection.integerValue
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.integerValue
      case ._PRODUCT(let selection): return selection.integerValue
      case ._PRODUCT_DEFINITION(let selection): return selection.integerValue
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.integerValue
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let selection): return selection.integerValue
      case ._PRODUCT_DEFINITION_OCCURRENCE(let selection): return selection.integerValue
      case ._PRODUCT_DEFINITION_OCCURRENCE_REFERENCE(let selection): return selection.integerValue
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.integerValue
      case ._PRODUCT_GROUP(let selection): return selection.integerValue
      case ._PRODUCT_GROUP_RELATIONSHIP(let selection): return selection.integerValue
      case ._PRODUCT_IDENTIFICATION(let selection): return selection.integerValue
      case ._PRODUCT_RELATIONSHIP(let selection): return selection.integerValue
      case ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(let selection): return selection.integerValue
      }
    }
    public var genericEnumValue: SDAI.GenericEnumValue? {
      switch self {
      case ._ACTION_METHOD(let selection): return selection.genericEnumValue
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let selection): return selection.genericEnumValue
      case ._ANALYSIS_ASSIGNMENT(let selection): return selection.genericEnumValue
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let selection): return selection.genericEnumValue
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.genericEnumValue
      case ._EVIDENCE(let selection): return selection.genericEnumValue
      case ._EXECUTED_ACTION(let selection): return selection.genericEnumValue
      case ._INTERFACE_CONNECTION(let selection): return selection.genericEnumValue
      case ._INTERFACE_CONNECTOR_VERSION(let selection): return selection.genericEnumValue
      case ._INTERFACE_DEFINITION_CONNECTION(let selection): return selection.genericEnumValue
      case ._INTERFACE_SPECIFICATION_VERSION(let selection): return selection.genericEnumValue
      case ._MAKE_FROM_USAGE_OPTION(let selection): return selection.genericEnumValue
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.genericEnumValue
      case ._PRODUCT(let selection): return selection.genericEnumValue
      case ._PRODUCT_DEFINITION(let selection): return selection.genericEnumValue
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.genericEnumValue
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let selection): return selection.genericEnumValue
      case ._PRODUCT_DEFINITION_OCCURRENCE(let selection): return selection.genericEnumValue
      case ._PRODUCT_DEFINITION_OCCURRENCE_REFERENCE(let selection): return selection.genericEnumValue
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.genericEnumValue
      case ._PRODUCT_GROUP(let selection): return selection.genericEnumValue
      case ._PRODUCT_GROUP_RELATIONSHIP(let selection): return selection.genericEnumValue
      case ._PRODUCT_IDENTIFICATION(let selection): return selection.genericEnumValue
      case ._PRODUCT_RELATIONSHIP(let selection): return selection.genericEnumValue
      case ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(let selection): return selection.genericEnumValue
      }
    }
    public func arrayOptionalValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.ARRAY_OPTIONAL<ELEM>? {
      switch self {
      case ._ACTION_METHOD(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._ANALYSIS_ASSIGNMENT(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._EVIDENCE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._EXECUTED_ACTION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._INTERFACE_CONNECTION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._INTERFACE_CONNECTOR_VERSION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._INTERFACE_DEFINITION_CONNECTION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._INTERFACE_SPECIFICATION_VERSION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._MAKE_FROM_USAGE_OPTION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PRODUCT(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PRODUCT_DEFINITION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_OCCURRENCE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_OCCURRENCE_REFERENCE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PRODUCT_GROUP(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PRODUCT_GROUP_RELATIONSHIP(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PRODUCT_IDENTIFICATION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PRODUCT_RELATIONSHIP(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(let selection): return selection.arrayOptionalValue(elementType:elementType)
      }
    }
    public func arrayValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.ARRAY<ELEM>? {
      switch self {
      case ._ACTION_METHOD(let selection): return selection.arrayValue(elementType:elementType)
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let selection): return selection.arrayValue(elementType:elementType)
      case ._ANALYSIS_ASSIGNMENT(let selection): return selection.arrayValue(elementType:elementType)
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let selection): return selection.arrayValue(elementType:elementType)
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.arrayValue(elementType:elementType)
      case ._EVIDENCE(let selection): return selection.arrayValue(elementType:elementType)
      case ._EXECUTED_ACTION(let selection): return selection.arrayValue(elementType:elementType)
      case ._INTERFACE_CONNECTION(let selection): return selection.arrayValue(elementType:elementType)
      case ._INTERFACE_CONNECTOR_VERSION(let selection): return selection.arrayValue(elementType:elementType)
      case ._INTERFACE_DEFINITION_CONNECTION(let selection): return selection.arrayValue(elementType:elementType)
      case ._INTERFACE_SPECIFICATION_VERSION(let selection): return selection.arrayValue(elementType:elementType)
      case ._MAKE_FROM_USAGE_OPTION(let selection): return selection.arrayValue(elementType:elementType)
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.arrayValue(elementType:elementType)
      case ._PRODUCT(let selection): return selection.arrayValue(elementType:elementType)
      case ._PRODUCT_DEFINITION(let selection): return selection.arrayValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.arrayValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let selection): return selection.arrayValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_OCCURRENCE(let selection): return selection.arrayValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_OCCURRENCE_REFERENCE(let selection): return selection.arrayValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.arrayValue(elementType:elementType)
      case ._PRODUCT_GROUP(let selection): return selection.arrayValue(elementType:elementType)
      case ._PRODUCT_GROUP_RELATIONSHIP(let selection): return selection.arrayValue(elementType:elementType)
      case ._PRODUCT_IDENTIFICATION(let selection): return selection.arrayValue(elementType:elementType)
      case ._PRODUCT_RELATIONSHIP(let selection): return selection.arrayValue(elementType:elementType)
      case ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(let selection): return selection.arrayValue(elementType:elementType)
      }
    }
    public func listValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.LIST<ELEM>? {
      switch self {
      case ._ACTION_METHOD(let selection): return selection.listValue(elementType:elementType)
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let selection): return selection.listValue(elementType:elementType)
      case ._ANALYSIS_ASSIGNMENT(let selection): return selection.listValue(elementType:elementType)
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let selection): return selection.listValue(elementType:elementType)
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.listValue(elementType:elementType)
      case ._EVIDENCE(let selection): return selection.listValue(elementType:elementType)
      case ._EXECUTED_ACTION(let selection): return selection.listValue(elementType:elementType)
      case ._INTERFACE_CONNECTION(let selection): return selection.listValue(elementType:elementType)
      case ._INTERFACE_CONNECTOR_VERSION(let selection): return selection.listValue(elementType:elementType)
      case ._INTERFACE_DEFINITION_CONNECTION(let selection): return selection.listValue(elementType:elementType)
      case ._INTERFACE_SPECIFICATION_VERSION(let selection): return selection.listValue(elementType:elementType)
      case ._MAKE_FROM_USAGE_OPTION(let selection): return selection.listValue(elementType:elementType)
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.listValue(elementType:elementType)
      case ._PRODUCT(let selection): return selection.listValue(elementType:elementType)
      case ._PRODUCT_DEFINITION(let selection): return selection.listValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.listValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let selection): return selection.listValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_OCCURRENCE(let selection): return selection.listValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_OCCURRENCE_REFERENCE(let selection): return selection.listValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.listValue(elementType:elementType)
      case ._PRODUCT_GROUP(let selection): return selection.listValue(elementType:elementType)
      case ._PRODUCT_GROUP_RELATIONSHIP(let selection): return selection.listValue(elementType:elementType)
      case ._PRODUCT_IDENTIFICATION(let selection): return selection.listValue(elementType:elementType)
      case ._PRODUCT_RELATIONSHIP(let selection): return selection.listValue(elementType:elementType)
      case ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(let selection): return selection.listValue(elementType:elementType)
      }
    }
    public func bagValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.BAG<ELEM>? {
      switch self {
      case ._ACTION_METHOD(let selection): return selection.bagValue(elementType:elementType)
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let selection): return selection.bagValue(elementType:elementType)
      case ._ANALYSIS_ASSIGNMENT(let selection): return selection.bagValue(elementType:elementType)
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let selection): return selection.bagValue(elementType:elementType)
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.bagValue(elementType:elementType)
      case ._EVIDENCE(let selection): return selection.bagValue(elementType:elementType)
      case ._EXECUTED_ACTION(let selection): return selection.bagValue(elementType:elementType)
      case ._INTERFACE_CONNECTION(let selection): return selection.bagValue(elementType:elementType)
      case ._INTERFACE_CONNECTOR_VERSION(let selection): return selection.bagValue(elementType:elementType)
      case ._INTERFACE_DEFINITION_CONNECTION(let selection): return selection.bagValue(elementType:elementType)
      case ._INTERFACE_SPECIFICATION_VERSION(let selection): return selection.bagValue(elementType:elementType)
      case ._MAKE_FROM_USAGE_OPTION(let selection): return selection.bagValue(elementType:elementType)
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.bagValue(elementType:elementType)
      case ._PRODUCT(let selection): return selection.bagValue(elementType:elementType)
      case ._PRODUCT_DEFINITION(let selection): return selection.bagValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.bagValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let selection): return selection.bagValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_OCCURRENCE(let selection): return selection.bagValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_OCCURRENCE_REFERENCE(let selection): return selection.bagValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.bagValue(elementType:elementType)
      case ._PRODUCT_GROUP(let selection): return selection.bagValue(elementType:elementType)
      case ._PRODUCT_GROUP_RELATIONSHIP(let selection): return selection.bagValue(elementType:elementType)
      case ._PRODUCT_IDENTIFICATION(let selection): return selection.bagValue(elementType:elementType)
      case ._PRODUCT_RELATIONSHIP(let selection): return selection.bagValue(elementType:elementType)
      case ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(let selection): return selection.bagValue(elementType:elementType)
      }
    }
    public func setValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.SET<ELEM>? {
      switch self {
      case ._ACTION_METHOD(let selection): return selection.setValue(elementType:elementType)
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let selection): return selection.setValue(elementType:elementType)
      case ._ANALYSIS_ASSIGNMENT(let selection): return selection.setValue(elementType:elementType)
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let selection): return selection.setValue(elementType:elementType)
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.setValue(elementType:elementType)
      case ._EVIDENCE(let selection): return selection.setValue(elementType:elementType)
      case ._EXECUTED_ACTION(let selection): return selection.setValue(elementType:elementType)
      case ._INTERFACE_CONNECTION(let selection): return selection.setValue(elementType:elementType)
      case ._INTERFACE_CONNECTOR_VERSION(let selection): return selection.setValue(elementType:elementType)
      case ._INTERFACE_DEFINITION_CONNECTION(let selection): return selection.setValue(elementType:elementType)
      case ._INTERFACE_SPECIFICATION_VERSION(let selection): return selection.setValue(elementType:elementType)
      case ._MAKE_FROM_USAGE_OPTION(let selection): return selection.setValue(elementType:elementType)
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.setValue(elementType:elementType)
      case ._PRODUCT(let selection): return selection.setValue(elementType:elementType)
      case ._PRODUCT_DEFINITION(let selection): return selection.setValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.setValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let selection): return selection.setValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_OCCURRENCE(let selection): return selection.setValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_OCCURRENCE_REFERENCE(let selection): return selection.setValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.setValue(elementType:elementType)
      case ._PRODUCT_GROUP(let selection): return selection.setValue(elementType:elementType)
      case ._PRODUCT_GROUP_RELATIONSHIP(let selection): return selection.setValue(elementType:elementType)
      case ._PRODUCT_IDENTIFICATION(let selection): return selection.setValue(elementType:elementType)
      case ._PRODUCT_RELATIONSHIP(let selection): return selection.setValue(elementType:elementType)
      case ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(let selection): return selection.setValue(elementType:elementType)
      }
    }
    public func enumValue<ENUM:SDAIEnumerationType>(enumType:ENUM.Type) -> ENUM? {
      switch self {
      case ._ACTION_METHOD(let selection): return selection.enumValue(enumType:enumType)
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let selection): return selection.enumValue(enumType:enumType)
      case ._ANALYSIS_ASSIGNMENT(let selection): return selection.enumValue(enumType:enumType)
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let selection): return selection.enumValue(enumType:enumType)
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.enumValue(enumType:enumType)
      case ._EVIDENCE(let selection): return selection.enumValue(enumType:enumType)
      case ._EXECUTED_ACTION(let selection): return selection.enumValue(enumType:enumType)
      case ._INTERFACE_CONNECTION(let selection): return selection.enumValue(enumType:enumType)
      case ._INTERFACE_CONNECTOR_VERSION(let selection): return selection.enumValue(enumType:enumType)
      case ._INTERFACE_DEFINITION_CONNECTION(let selection): return selection.enumValue(enumType:enumType)
      case ._INTERFACE_SPECIFICATION_VERSION(let selection): return selection.enumValue(enumType:enumType)
      case ._MAKE_FROM_USAGE_OPTION(let selection): return selection.enumValue(enumType:enumType)
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.enumValue(enumType:enumType)
      case ._PRODUCT(let selection): return selection.enumValue(enumType:enumType)
      case ._PRODUCT_DEFINITION(let selection): return selection.enumValue(enumType:enumType)
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.enumValue(enumType:enumType)
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let selection): return selection.enumValue(enumType:enumType)
      case ._PRODUCT_DEFINITION_OCCURRENCE(let selection): return selection.enumValue(enumType:enumType)
      case ._PRODUCT_DEFINITION_OCCURRENCE_REFERENCE(let selection): return selection.enumValue(enumType:enumType)
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.enumValue(enumType:enumType)
      case ._PRODUCT_GROUP(let selection): return selection.enumValue(enumType:enumType)
      case ._PRODUCT_GROUP_RELATIONSHIP(let selection): return selection.enumValue(enumType:enumType)
      case ._PRODUCT_IDENTIFICATION(let selection): return selection.enumValue(enumType:enumType)
      case ._PRODUCT_RELATIONSHIP(let selection): return selection.enumValue(enumType:enumType)
      case ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(let selection): return selection.enumValue(enumType:enumType)
      }
    }

    //MARK: SDAIUnderlyingType
    public typealias FundamentalType = Self
    public static var typeName: String = 
      "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CERTIFICATION_ITEM"
    public var asFundamentalType: FundamentalType { return self }

    //MARK: SDAIObservableAggregateElement
    public var entityReferences: AnySequence<SDAI.EntityReference> {
      switch self {
      case ._ACTION_METHOD(let entity): return entity.entityReferences
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let entity): return entity.entityReferences
      case ._ANALYSIS_ASSIGNMENT(let entity): return entity.entityReferences
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let entity): return entity.entityReferences
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): return entity.entityReferences
      case ._EVIDENCE(let entity): return entity.entityReferences
      case ._EXECUTED_ACTION(let entity): return entity.entityReferences
      case ._INTERFACE_CONNECTION(let entity): return entity.entityReferences
      case ._INTERFACE_CONNECTOR_VERSION(let entity): return entity.entityReferences
      case ._INTERFACE_DEFINITION_CONNECTION(let entity): return entity.entityReferences
      case ._INTERFACE_SPECIFICATION_VERSION(let entity): return entity.entityReferences
      case ._MAKE_FROM_USAGE_OPTION(let entity): return entity.entityReferences
      case ._ORGANIZATIONAL_PROJECT(let entity): return entity.entityReferences
      case ._PRODUCT(let entity): return entity.entityReferences
      case ._PRODUCT_DEFINITION(let entity): return entity.entityReferences
      case ._PRODUCT_DEFINITION_FORMATION(let entity): return entity.entityReferences
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let entity): return entity.entityReferences
      case ._PRODUCT_DEFINITION_OCCURRENCE(let entity): return entity.entityReferences
      case ._PRODUCT_DEFINITION_OCCURRENCE_REFERENCE(let entity): return entity.entityReferences
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.entityReferences
      case ._PRODUCT_GROUP(let entity): return entity.entityReferences
      case ._PRODUCT_GROUP_RELATIONSHIP(let entity): return entity.entityReferences
      case ._PRODUCT_IDENTIFICATION(let entity): return entity.entityReferences
      case ._PRODUCT_RELATIONSHIP(let entity): return entity.entityReferences
      case ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(let entity): return entity.entityReferences
      }
    }

    public mutating func configure(with observer: SDAI.EntityReferenceObserver) {
      switch self {
      case ._ACTION_METHOD(let entity): 
        entity.configure(with: observer)
        self = ._ACTION_METHOD(entity)
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let entity): 
        entity.configure(with: observer)
        self = ._ALTERNATE_PRODUCT_RELATIONSHIP(entity)
      case ._ANALYSIS_ASSIGNMENT(let entity): 
        entity.configure(with: observer)
        self = ._ANALYSIS_ASSIGNMENT(entity)
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let entity): 
        entity.configure(with: observer)
        self = ._APPLIED_ACTION_METHOD_ASSIGNMENT(entity)
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): 
        entity.configure(with: observer)
        self = ._ASSEMBLY_COMPONENT_USAGE(entity)
      case ._EVIDENCE(let entity): 
        entity.configure(with: observer)
        self = ._EVIDENCE(entity)
      case ._EXECUTED_ACTION(let entity): 
        entity.configure(with: observer)
        self = ._EXECUTED_ACTION(entity)
      case ._INTERFACE_CONNECTION(let entity): 
        entity.configure(with: observer)
        self = ._INTERFACE_CONNECTION(entity)
      case ._INTERFACE_CONNECTOR_VERSION(let entity): 
        entity.configure(with: observer)
        self = ._INTERFACE_CONNECTOR_VERSION(entity)
      case ._INTERFACE_DEFINITION_CONNECTION(let entity): 
        entity.configure(with: observer)
        self = ._INTERFACE_DEFINITION_CONNECTION(entity)
      case ._INTERFACE_SPECIFICATION_VERSION(let entity): 
        entity.configure(with: observer)
        self = ._INTERFACE_SPECIFICATION_VERSION(entity)
      case ._MAKE_FROM_USAGE_OPTION(let entity): 
        entity.configure(with: observer)
        self = ._MAKE_FROM_USAGE_OPTION(entity)
      case ._ORGANIZATIONAL_PROJECT(let entity): 
        entity.configure(with: observer)
        self = ._ORGANIZATIONAL_PROJECT(entity)
      case ._PRODUCT(let entity): 
        entity.configure(with: observer)
        self = ._PRODUCT(entity)
      case ._PRODUCT_DEFINITION(let entity): 
        entity.configure(with: observer)
        self = ._PRODUCT_DEFINITION(entity)
      case ._PRODUCT_DEFINITION_FORMATION(let entity): 
        entity.configure(with: observer)
        self = ._PRODUCT_DEFINITION_FORMATION(entity)
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let entity): 
        entity.configure(with: observer)
        self = ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(entity)
      case ._PRODUCT_DEFINITION_OCCURRENCE(let entity): 
        entity.configure(with: observer)
        self = ._PRODUCT_DEFINITION_OCCURRENCE(entity)
      case ._PRODUCT_DEFINITION_OCCURRENCE_REFERENCE(let entity): 
        entity.configure(with: observer)
        self = ._PRODUCT_DEFINITION_OCCURRENCE_REFERENCE(entity)
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): 
        entity.configure(with: observer)
        self = ._PRODUCT_DEFINITION_RELATIONSHIP(entity)
      case ._PRODUCT_GROUP(let entity): 
        entity.configure(with: observer)
        self = ._PRODUCT_GROUP(entity)
      case ._PRODUCT_GROUP_RELATIONSHIP(let entity): 
        entity.configure(with: observer)
        self = ._PRODUCT_GROUP_RELATIONSHIP(entity)
      case ._PRODUCT_IDENTIFICATION(let entity): 
        entity.configure(with: observer)
        self = ._PRODUCT_IDENTIFICATION(entity)
      case ._PRODUCT_RELATIONSHIP(let entity): 
        entity.configure(with: observer)
        self = ._PRODUCT_RELATIONSHIP(entity)
      case ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(let entity): 
        entity.configure(with: observer)
        self = ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(entity)
      }
    }

    public mutating func teardownObserver() {
      switch self {
      case ._ACTION_METHOD(let entity): 
        entity.teardownObserver()
        self = ._ACTION_METHOD(entity)
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let entity): 
        entity.teardownObserver()
        self = ._ALTERNATE_PRODUCT_RELATIONSHIP(entity)
      case ._ANALYSIS_ASSIGNMENT(let entity): 
        entity.teardownObserver()
        self = ._ANALYSIS_ASSIGNMENT(entity)
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let entity): 
        entity.teardownObserver()
        self = ._APPLIED_ACTION_METHOD_ASSIGNMENT(entity)
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): 
        entity.teardownObserver()
        self = ._ASSEMBLY_COMPONENT_USAGE(entity)
      case ._EVIDENCE(let entity): 
        entity.teardownObserver()
        self = ._EVIDENCE(entity)
      case ._EXECUTED_ACTION(let entity): 
        entity.teardownObserver()
        self = ._EXECUTED_ACTION(entity)
      case ._INTERFACE_CONNECTION(let entity): 
        entity.teardownObserver()
        self = ._INTERFACE_CONNECTION(entity)
      case ._INTERFACE_CONNECTOR_VERSION(let entity): 
        entity.teardownObserver()
        self = ._INTERFACE_CONNECTOR_VERSION(entity)
      case ._INTERFACE_DEFINITION_CONNECTION(let entity): 
        entity.teardownObserver()
        self = ._INTERFACE_DEFINITION_CONNECTION(entity)
      case ._INTERFACE_SPECIFICATION_VERSION(let entity): 
        entity.teardownObserver()
        self = ._INTERFACE_SPECIFICATION_VERSION(entity)
      case ._MAKE_FROM_USAGE_OPTION(let entity): 
        entity.teardownObserver()
        self = ._MAKE_FROM_USAGE_OPTION(entity)
      case ._ORGANIZATIONAL_PROJECT(let entity): 
        entity.teardownObserver()
        self = ._ORGANIZATIONAL_PROJECT(entity)
      case ._PRODUCT(let entity): 
        entity.teardownObserver()
        self = ._PRODUCT(entity)
      case ._PRODUCT_DEFINITION(let entity): 
        entity.teardownObserver()
        self = ._PRODUCT_DEFINITION(entity)
      case ._PRODUCT_DEFINITION_FORMATION(let entity): 
        entity.teardownObserver()
        self = ._PRODUCT_DEFINITION_FORMATION(entity)
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let entity): 
        entity.teardownObserver()
        self = ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(entity)
      case ._PRODUCT_DEFINITION_OCCURRENCE(let entity): 
        entity.teardownObserver()
        self = ._PRODUCT_DEFINITION_OCCURRENCE(entity)
      case ._PRODUCT_DEFINITION_OCCURRENCE_REFERENCE(let entity): 
        entity.teardownObserver()
        self = ._PRODUCT_DEFINITION_OCCURRENCE_REFERENCE(entity)
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): 
        entity.teardownObserver()
        self = ._PRODUCT_DEFINITION_RELATIONSHIP(entity)
      case ._PRODUCT_GROUP(let entity): 
        entity.teardownObserver()
        self = ._PRODUCT_GROUP(entity)
      case ._PRODUCT_GROUP_RELATIONSHIP(let entity): 
        entity.teardownObserver()
        self = ._PRODUCT_GROUP_RELATIONSHIP(entity)
      case ._PRODUCT_IDENTIFICATION(let entity): 
        entity.teardownObserver()
        self = ._PRODUCT_IDENTIFICATION(entity)
      case ._PRODUCT_RELATIONSHIP(let entity): 
        entity.teardownObserver()
        self = ._PRODUCT_RELATIONSHIP(entity)
      case ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(let entity): 
        entity.teardownObserver()
        self = ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(entity)
      }
    }

    //MARK: SDAIAggregationBehavior
    public var aggregationHiBound: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationHiIndex: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationLoBound: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationLoIndex: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationSize: Int? {
      switch self {
      default: return nil
      }
    }

    //MARK: WHERE RULE VALIDATION (SELECT TYPE)
    public static func validateWhereRules(instance:Self?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      var result: [SDAI.WhereLabel:SDAI.LOGICAL] = [:]
      switch instance {
      case ._ACTION_METHOD(let selectValue): 
        result = eACTION_METHOD.validateWhereRules(instance:selectValue, prefix:prefix + "\\ACTION_METHOD")
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let selectValue): 
        result = eALTERNATE_PRODUCT_RELATIONSHIP.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\ALTERNATE_PRODUCT_RELATIONSHIP")
      case ._ANALYSIS_ASSIGNMENT(let selectValue): 
        result = eANALYSIS_ASSIGNMENT.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\ANALYSIS_ASSIGNMENT")
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let selectValue): 
        result = eAPPLIED_ACTION_METHOD_ASSIGNMENT.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\APPLIED_ACTION_METHOD_ASSIGNMENT")
      case ._ASSEMBLY_COMPONENT_USAGE(let selectValue): 
        result = eASSEMBLY_COMPONENT_USAGE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\ASSEMBLY_COMPONENT_USAGE")
      case ._EVIDENCE(let selectValue): result = eEVIDENCE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\EVIDENCE")
      case ._EXECUTED_ACTION(let selectValue): 
        result = eEXECUTED_ACTION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\EXECUTED_ACTION")
      case ._INTERFACE_CONNECTION(let selectValue): 
        result = eINTERFACE_CONNECTION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\INTERFACE_CONNECTION")
      case ._INTERFACE_CONNECTOR_VERSION(let selectValue): 
        result = eINTERFACE_CONNECTOR_VERSION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\INTERFACE_CONNECTOR_VERSION")
      case ._INTERFACE_DEFINITION_CONNECTION(let selectValue): 
        result = eINTERFACE_DEFINITION_CONNECTION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\INTERFACE_DEFINITION_CONNECTION")
      case ._INTERFACE_SPECIFICATION_VERSION(let selectValue): 
        result = eINTERFACE_SPECIFICATION_VERSION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\INTERFACE_SPECIFICATION_VERSION")
      case ._MAKE_FROM_USAGE_OPTION(let selectValue): 
        result = eMAKE_FROM_USAGE_OPTION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\MAKE_FROM_USAGE_OPTION")
      case ._ORGANIZATIONAL_PROJECT(let selectValue): 
        result = eORGANIZATIONAL_PROJECT.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\ORGANIZATIONAL_PROJECT")
      case ._PRODUCT(let selectValue): result = ePRODUCT.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PRODUCT")
      case ._PRODUCT_DEFINITION(let selectValue): 
        result = ePRODUCT_DEFINITION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PRODUCT_DEFINITION")
      case ._PRODUCT_DEFINITION_FORMATION(let selectValue): 
        result = ePRODUCT_DEFINITION_FORMATION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PRODUCT_DEFINITION_FORMATION")
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let selectValue): 
        result = ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PRODUCT_DEFINITION_FORMATION_RELATIONSHIP")
      case ._PRODUCT_DEFINITION_OCCURRENCE(let selectValue): 
        result = ePRODUCT_DEFINITION_OCCURRENCE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PRODUCT_DEFINITION_OCCURRENCE")
      case ._PRODUCT_DEFINITION_OCCURRENCE_REFERENCE(let selectValue): 
        result = ePRODUCT_DEFINITION_OCCURRENCE_REFERENCE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PRODUCT_DEFINITION_OCCURRENCE_REFERENCE")
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selectValue): 
        result = ePRODUCT_DEFINITION_RELATIONSHIP.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PRODUCT_DEFINITION_RELATIONSHIP")
      case ._PRODUCT_GROUP(let selectValue): 
        result = ePRODUCT_GROUP.validateWhereRules(instance:selectValue, prefix:prefix + "\\PRODUCT_GROUP")
      case ._PRODUCT_GROUP_RELATIONSHIP(let selectValue): 
        result = ePRODUCT_GROUP_RELATIONSHIP.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PRODUCT_GROUP_RELATIONSHIP")
      case ._PRODUCT_IDENTIFICATION(let selectValue): 
        result = ePRODUCT_IDENTIFICATION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PRODUCT_IDENTIFICATION")
      case ._PRODUCT_RELATIONSHIP(let selectValue): 
        result = ePRODUCT_RELATIONSHIP.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PRODUCT_RELATIONSHIP")
      case ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(let selectValue): 
        result = eREQUIREMENT_VIEW_DEFINITION_RELATIONSHIP.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP")
      case nil: break
      }

      return result
    }

  }

}


//MARK: - SELECT TYPE HIERARCHY
public protocol AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sCERTIFICATION_ITEM__type: SDAISelectType {

  //MARK: GROUP REFERENCES
  var super_ePRODUCT_IDENTIFICATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_IDENTIFICATION? { get }
  var super_eGROUP_RELATIONSHIP: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGROUP_RELATIONSHIP? { get }
  var super_eINTERFACE_DEFINITION_CONNECTION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eINTERFACE_DEFINITION_CONNECTION? { get }
  var super_eGROUP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGROUP? { get }
  var super_eGENERIC_PRODUCT_DEFINITION_REFERENCE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGENERIC_PRODUCT_DEFINITION_REFERENCE? { get }
  var super_eCONFIGURATION_ITEM: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONFIGURATION_ITEM? { get }
  var super_eINTERFACE_CONNECTOR_VERSION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eINTERFACE_CONNECTOR_VERSION? { get }
  var super_eANALYSIS_ASSIGNMENT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eANALYSIS_ASSIGNMENT? { get }
  var super_ePRODUCT_DEFINITION_OCCURRENCE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_OCCURRENCE? { get }
  var super_eACTION_METHOD: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION_METHOD? { get }
  var super_eGROUP_ASSIGNMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGROUP_ASSIGNMENT? { get }
  var super_eEXECUTED_ACTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEXECUTED_ACTION? { get }
  var super_ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP? { get }
  var super_ePRODUCT_DEFINITION_USAGE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_USAGE? { get }
  var super_eAPPLIED_ACTION_METHOD_ASSIGNMENT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eAPPLIED_ACTION_METHOD_ASSIGNMENT? { get }
  var super_ePRODUCT_GROUP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_GROUP? { get }
  var super_ePRODUCT_DEFINITION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION? { get }
  var super_eINTERFACE_CONNECTION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eINTERFACE_CONNECTION? { get }
  var super_eEVIDENCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEVIDENCE? { get }
  var super_eACTION_METHOD_ASSIGNMENT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION_METHOD_ASSIGNMENT? { get }
  var super_ePRODUCT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT? { get }
  var super_eORGANIZATIONAL_PROJECT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eORGANIZATIONAL_PROJECT? { get }
  var super_eINTERFACE_SPECIFICATION_VERSION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eINTERFACE_SPECIFICATION_VERSION? { get }
  var super_ePRODUCT_DEFINITION_FORMATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_FORMATION? { get }
  var super_ePRODUCT_GROUP_RELATIONSHIP: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_GROUP_RELATIONSHIP? { get }
  var super_eASSEMBLY_COMPONENT_USAGE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eASSEMBLY_COMPONENT_USAGE? { get }
  var super_ePRODUCT_DEFINITION_OCCURRENCE_REFERENCE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_OCCURRENCE_REFERENCE? { get }
  var super_eREQUIREMENT_VIEW_DEFINITION_RELATIONSHIP: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREQUIREMENT_VIEW_DEFINITION_RELATIONSHIP? { get }
  var super_eALTERNATE_PRODUCT_RELATIONSHIP: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eALTERNATE_PRODUCT_RELATIONSHIP? { get }
  var super_eMAKE_FROM_USAGE_OPTION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMAKE_FROM_USAGE_OPTION? { get }
  var super_ePRODUCT_DEFINITION_RELATIONSHIP: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_RELATIONSHIP? { get }
  var super_ePRODUCT_DEFINITION_REFERENCE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_REFERENCE? { get }
  var super_ePRODUCT_RELATIONSHIP: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_RELATIONSHIP? { get }
  var super_eACTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION? { get }
  var super_eCHARACTERIZED_OBJECT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCHARACTERIZED_OBJECT? { get }

  //MARK: ENTITY ATTRIBUTE REFERENCES
  var PRODUCT_OCCURRENCE_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { get }
  var PRODUCT_DEFINITION_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { get }
  var DESCRIPTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT?  { get }
  var LEAF: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sPRODUCT_DEFINITION_OR_REFERENCE?  { get }
  var DIRECTIVE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION_DIRECTIVE?  { get }
  var REALIZED_PRODUCT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_FORMATION?  { get }
  var NEXT_USAGE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eNEXT_ASSEMBLY_USAGE_OCCURRENCE?  { get }
  var ROLE: SDAI.GENERIC_ENTITY?  { get }
  var REFERENCE_DESIGNATOR: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { get }
  var RELATED_GROUP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGROUP?  { get }
  var STATUS: SDAI.STRING?  { get }
  var RELATED_PRODUCT_DEFINITION_FORMATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_FORMATION?  { get }
  var CONSTITUENT_AMOUNT: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sCHARACTERIZED_PRODUCT_COMPOSITION_VALUE>/*[1:nil]*/ )?  { get }
  var DESCENDANT_OCCURRENCES: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_SPECIFIED_OCCURRENCE>/*[0:nil]*/ )?  { get }
  var UPPER_USAGE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eASSEMBLY_COMPONENT_USAGE?  { get }
  var PRODUCT_DEFINITION_FORMATION_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { get }
  var RANKING_RATIONALE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT?  { get }
  var QUANTITY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMEASURE_WITH_UNIT?  { get }
  var CLASS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { get }
  var DEFINED_VERSION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOLLECTION_VERSION?  { get }
  var RELATED_MESSAGE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSTRUCTURED_MESSAGE?  { get }
  var OF_COLLECTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOLLECTION?  { get }
  var PRODUCT_DESIGN_VERSION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_FORMATION?  { get }
  var RANKING: SDAI.INTEGER?  { get }
  var OF_SHAPE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMATED_PART_RELATIONSHIP?  { get }
  var BASIS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT?  { get }
  var ID_OWNING_ORGANIZATION_NAME: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { get }
  var MAKE_OR_BUY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nSOURCE?  { get }
  var CHOSEN_METHOD: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION_METHOD?  { get }
  var PURPOSE: SDAI.STRING?  { get }
  var RELATING_PRODUCT_DEFINITION_FORMATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_FORMATION?  { get }
  var RELATING_VERSION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOLLECTION_VERSION?  { get }
  var OCCURRENCE_USAGE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sPRODUCT_DEFINITION_OCCURRENCE_OR_REFERENCE?  { get }
  var RELATED_COLLECTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOLLECTION?  { get }
  var COMPOSITION_BASIS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { get }
  var DOCUMENTATION_IDS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDOCUMENT>/*[1:nil]*/ )?  { get }
  var RELATION_TYPE: SDAI.STRING?  { get }
  var ASSIGNED_ACTION_METHOD: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION_METHOD?  { get }
  var SPECIFICATION: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION>/*[1:nil]*/ )?  { get }
  var PLANNED_PRODUCT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_FORMATION?  { get }
  var SUCCESSOR: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOLLECTION_VERSION?  { get }
  var INDIVIDUAL_PRODUCT: SDAI.GENERIC_ENTITY?  { get }
  var RELATED_PRODUCT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT?  { get }
  var ITEM_CONCEPT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_CLASS?  { get }
  var DETERMINATION_METHOD: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT?  { get }
  var RELATING_COLLECTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOLLECTION?  { get }
  var PRODUCT_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { get }
  var CONSEQUENCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT?  { get }
  var ROOT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION?  { get }
  var RELATING_GROUP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGROUP?  { get }
  var BASE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT?  { get }
  var CHILD_OCCURRENCES: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_SPECIFIED_OCCURRENCE>/*[0:nil]*/ )?  { get }
  var RELATING_PRODUCT_DEFINITION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sPRODUCT_DEFINITION_OR_REFERENCE?  { get }
  var RELATED_VERSION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOLLECTION_VERSION?  { get }
  var SOURCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEXTERNAL_SOURCE?  { get }
  var ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { get }
  var RELATING_MESSAGE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSTRUCTURED_MESSAGE?  { get }
  var ALTERNATE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT?  { get }
  var RESPONSIBLE_ORGANIZATIONS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eORGANIZATION>/*[1:
    nil]*/ )?  { get }
  var OF_PRODUCT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT?  { get }
  var PRODUCT_DEFINITION_OCCURRENCE_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { get }
  var ASSIGNED_GROUP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGROUP?  { get }
  var LOCATION: (SDAI.LIST_UNIQUE<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eNEXT_ASSEMBLY_USAGE_OCCURRENCE>/*[1:nil]*/ )?  { get }
  var RELATING_PRODUCT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT?  { get }
  var RELATED_PRODUCT_DEFINITION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sPRODUCT_DEFINITION_OR_REFERENCE?  { get }
  var NAME: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { get }
  var ASSEMBLY_USAGES: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eASSEMBLY_COMPONENT_USAGE>
    /*[0:nil]*/ )?  { get }
  var PREDECESSOR: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOLLECTION_VERSION?  { get }
  var PRODUCT_DESIGN: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT?  { get }
  var FORMATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_FORMATION?  { get }
}

public protocol AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sCERTIFICATION_ITEM__subtype: 
  AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sCERTIFICATION_ITEM__type, SDAIDefinedType
where Supertype: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sCERTIFICATION_ITEM__type
{}

public extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sCERTIFICATION_ITEM__subtype {
  //MARK: CONSTRUCTORS
  init?(possiblyFrom complex: SDAI.ComplexEntity?) {
    self.init(fundamental: FundamentalType(possiblyFrom: complex))
  }

  init?<T: SDAIUnderlyingType>(possiblyFrom underlyingType: T?) {
    self.init(fundamental: FundamentalType(possiblyFrom: underlyingType))
  }

  init?<G: SDAIGenericType>(fromGeneric generic: G?) {
    self.init(fundamental: FundamentalType.convert(fromGeneric: generic))
  }

  //MARK: GROUP REFERENCES
  var super_ePRODUCT_IDENTIFICATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_IDENTIFICATION? { rep.super_ePRODUCT_IDENTIFICATION }
  var super_eGROUP_RELATIONSHIP: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGROUP_RELATIONSHIP? { rep.super_eGROUP_RELATIONSHIP }
  var super_eINTERFACE_DEFINITION_CONNECTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eINTERFACE_DEFINITION_CONNECTION? { rep.super_eINTERFACE_DEFINITION_CONNECTION }
  var super_eGROUP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGROUP? { rep.super_eGROUP }
  var super_eGENERIC_PRODUCT_DEFINITION_REFERENCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGENERIC_PRODUCT_DEFINITION_REFERENCE? { rep.super_eGENERIC_PRODUCT_DEFINITION_REFERENCE }
  var super_eCONFIGURATION_ITEM: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONFIGURATION_ITEM? { rep.super_eCONFIGURATION_ITEM }
  var super_eINTERFACE_CONNECTOR_VERSION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eINTERFACE_CONNECTOR_VERSION? { rep.super_eINTERFACE_CONNECTOR_VERSION }
  var super_eANALYSIS_ASSIGNMENT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eANALYSIS_ASSIGNMENT? { rep.super_eANALYSIS_ASSIGNMENT }
  var super_ePRODUCT_DEFINITION_OCCURRENCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_OCCURRENCE? { rep.super_ePRODUCT_DEFINITION_OCCURRENCE }
  var super_eACTION_METHOD: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION_METHOD? { rep.super_eACTION_METHOD }
  var super_eGROUP_ASSIGNMENT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGROUP_ASSIGNMENT? { rep.super_eGROUP_ASSIGNMENT }
  var super_eEXECUTED_ACTION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEXECUTED_ACTION? { rep.super_eEXECUTED_ACTION }
  var super_ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP? { rep.super_ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP }
  var super_ePRODUCT_DEFINITION_USAGE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_USAGE? { rep.super_ePRODUCT_DEFINITION_USAGE }
  var super_eAPPLIED_ACTION_METHOD_ASSIGNMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eAPPLIED_ACTION_METHOD_ASSIGNMENT? { rep.super_eAPPLIED_ACTION_METHOD_ASSIGNMENT }
  var super_ePRODUCT_GROUP: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_GROUP? { rep.super_ePRODUCT_GROUP }
  var super_ePRODUCT_DEFINITION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION? { rep.super_ePRODUCT_DEFINITION }
  var super_eINTERFACE_CONNECTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eINTERFACE_CONNECTION? { rep.super_eINTERFACE_CONNECTION }
  var super_eEVIDENCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEVIDENCE? { rep.super_eEVIDENCE }
  var super_eACTION_METHOD_ASSIGNMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION_METHOD_ASSIGNMENT? { rep.super_eACTION_METHOD_ASSIGNMENT }
  var super_ePRODUCT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT? { rep.super_ePRODUCT }
  var super_eORGANIZATIONAL_PROJECT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eORGANIZATIONAL_PROJECT? { rep.super_eORGANIZATIONAL_PROJECT }
  var super_eINTERFACE_SPECIFICATION_VERSION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eINTERFACE_SPECIFICATION_VERSION? { rep.super_eINTERFACE_SPECIFICATION_VERSION }
  var super_ePRODUCT_DEFINITION_FORMATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_FORMATION? { rep.super_ePRODUCT_DEFINITION_FORMATION }
  var super_ePRODUCT_GROUP_RELATIONSHIP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_GROUP_RELATIONSHIP? { rep.super_ePRODUCT_GROUP_RELATIONSHIP }
  var super_eASSEMBLY_COMPONENT_USAGE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eASSEMBLY_COMPONENT_USAGE? { rep.super_eASSEMBLY_COMPONENT_USAGE }
  var super_ePRODUCT_DEFINITION_OCCURRENCE_REFERENCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_OCCURRENCE_REFERENCE? { rep.super_ePRODUCT_DEFINITION_OCCURRENCE_REFERENCE }
  var super_eREQUIREMENT_VIEW_DEFINITION_RELATIONSHIP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREQUIREMENT_VIEW_DEFINITION_RELATIONSHIP? { rep.super_eREQUIREMENT_VIEW_DEFINITION_RELATIONSHIP }
  var super_eALTERNATE_PRODUCT_RELATIONSHIP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eALTERNATE_PRODUCT_RELATIONSHIP? { rep.super_eALTERNATE_PRODUCT_RELATIONSHIP }
  var super_eMAKE_FROM_USAGE_OPTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMAKE_FROM_USAGE_OPTION? { rep.super_eMAKE_FROM_USAGE_OPTION }
  var super_ePRODUCT_DEFINITION_RELATIONSHIP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_RELATIONSHIP? { rep.super_ePRODUCT_DEFINITION_RELATIONSHIP }
  var super_ePRODUCT_DEFINITION_REFERENCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_REFERENCE? { rep.super_ePRODUCT_DEFINITION_REFERENCE }
  var super_ePRODUCT_RELATIONSHIP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_RELATIONSHIP? { rep.super_ePRODUCT_RELATIONSHIP }
  var super_eACTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION? { rep.super_eACTION }
  var super_eCHARACTERIZED_OBJECT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCHARACTERIZED_OBJECT? { rep.super_eCHARACTERIZED_OBJECT }

  //MARK: ENTITY ATTRIBUTE REFERENCES
  var PRODUCT_OCCURRENCE_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { rep.PRODUCT_OCCURRENCE_ID }
  var PRODUCT_DEFINITION_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { rep.PRODUCT_DEFINITION_ID }
  var DESCRIPTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT?  { rep.DESCRIPTION }
  var LEAF: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sPRODUCT_DEFINITION_OR_REFERENCE?  { rep.LEAF }
  var DIRECTIVE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION_DIRECTIVE?  { rep.DIRECTIVE }
  var REALIZED_PRODUCT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_FORMATION?  { rep.REALIZED_PRODUCT }
  var NEXT_USAGE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eNEXT_ASSEMBLY_USAGE_OCCURRENCE?  { rep.NEXT_USAGE }
  var ROLE: SDAI.GENERIC_ENTITY?  { rep.ROLE }
  var REFERENCE_DESIGNATOR: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { rep.REFERENCE_DESIGNATOR }
  var RELATED_GROUP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGROUP?  { rep.RELATED_GROUP }
  var STATUS: SDAI.STRING?  { rep.STATUS }
  var RELATED_PRODUCT_DEFINITION_FORMATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_FORMATION?  { rep.RELATED_PRODUCT_DEFINITION_FORMATION }
  var CONSTITUENT_AMOUNT: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sCHARACTERIZED_PRODUCT_COMPOSITION_VALUE>/*[1:nil]*/ )?  { rep.CONSTITUENT_AMOUNT }
  var DESCENDANT_OCCURRENCES: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_SPECIFIED_OCCURRENCE>/*[0:nil]*/ )?  { rep.DESCENDANT_OCCURRENCES }
  var UPPER_USAGE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eASSEMBLY_COMPONENT_USAGE?  { rep.UPPER_USAGE }
  var PRODUCT_DEFINITION_FORMATION_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { rep.PRODUCT_DEFINITION_FORMATION_ID }
  var RANKING_RATIONALE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT?  { rep.RANKING_RATIONALE }
  var QUANTITY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMEASURE_WITH_UNIT?  { rep.QUANTITY }
  var CLASS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { rep.CLASS }
  var DEFINED_VERSION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOLLECTION_VERSION?  { rep.DEFINED_VERSION }
  var RELATED_MESSAGE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSTRUCTURED_MESSAGE?  { rep.RELATED_MESSAGE }
  var OF_COLLECTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOLLECTION?  { rep.OF_COLLECTION }
  var PRODUCT_DESIGN_VERSION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_FORMATION?  { rep.PRODUCT_DESIGN_VERSION }
  var RANKING: SDAI.INTEGER?  { rep.RANKING }
  var OF_SHAPE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMATED_PART_RELATIONSHIP?  { rep.OF_SHAPE }
  var BASIS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT?  { rep.BASIS }
  var ID_OWNING_ORGANIZATION_NAME: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { rep.ID_OWNING_ORGANIZATION_NAME }
  var MAKE_OR_BUY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nSOURCE?  { rep.MAKE_OR_BUY }
  var CHOSEN_METHOD: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION_METHOD?  { rep.CHOSEN_METHOD }
  var PURPOSE: SDAI.STRING?  { rep.PURPOSE }
  var RELATING_PRODUCT_DEFINITION_FORMATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_FORMATION?  { rep.RELATING_PRODUCT_DEFINITION_FORMATION }
  var RELATING_VERSION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOLLECTION_VERSION?  { rep.RELATING_VERSION }
  var OCCURRENCE_USAGE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sPRODUCT_DEFINITION_OCCURRENCE_OR_REFERENCE?  { rep.OCCURRENCE_USAGE }
  var RELATED_COLLECTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOLLECTION?  { rep.RELATED_COLLECTION }
  var COMPOSITION_BASIS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { rep.COMPOSITION_BASIS }
  var DOCUMENTATION_IDS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDOCUMENT>/*[1:nil]*/ )?  { rep.DOCUMENTATION_IDS }
  var RELATION_TYPE: SDAI.STRING?  { rep.RELATION_TYPE }
  var ASSIGNED_ACTION_METHOD: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION_METHOD?  { rep.ASSIGNED_ACTION_METHOD }
  var SPECIFICATION: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION>/*[1:nil]*/ )?  { rep.SPECIFICATION }
  var PLANNED_PRODUCT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_FORMATION?  { rep.PLANNED_PRODUCT }
  var SUCCESSOR: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOLLECTION_VERSION?  { rep.SUCCESSOR }
  var INDIVIDUAL_PRODUCT: SDAI.GENERIC_ENTITY?  { rep.INDIVIDUAL_PRODUCT }
  var RELATED_PRODUCT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT?  { rep.RELATED_PRODUCT }
  var ITEM_CONCEPT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_CLASS?  { rep.ITEM_CONCEPT }
  var DETERMINATION_METHOD: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT?  { rep.DETERMINATION_METHOD }
  var RELATING_COLLECTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOLLECTION?  { rep.RELATING_COLLECTION }
  var PRODUCT_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { rep.PRODUCT_ID }
  var CONSEQUENCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT?  { rep.CONSEQUENCE }
  var ROOT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION?  { rep.ROOT }
  var RELATING_GROUP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGROUP?  { rep.RELATING_GROUP }
  var BASE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT?  { rep.BASE }
  var CHILD_OCCURRENCES: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_SPECIFIED_OCCURRENCE>/*[0:nil]*/ )?  { rep.CHILD_OCCURRENCES }
  var RELATING_PRODUCT_DEFINITION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sPRODUCT_DEFINITION_OR_REFERENCE?  { rep.RELATING_PRODUCT_DEFINITION }
  var RELATED_VERSION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOLLECTION_VERSION?  { rep.RELATED_VERSION }
  var SOURCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEXTERNAL_SOURCE?  { rep.SOURCE }
  var ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { rep.ID }
  var RELATING_MESSAGE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSTRUCTURED_MESSAGE?  { rep.RELATING_MESSAGE }
  var ALTERNATE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT?  { rep.ALTERNATE }
  var RESPONSIBLE_ORGANIZATIONS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eORGANIZATION>/*[1:
    nil]*/ )?  { rep.RESPONSIBLE_ORGANIZATIONS }
  var OF_PRODUCT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT?  { rep.OF_PRODUCT }
  var PRODUCT_DEFINITION_OCCURRENCE_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { rep.PRODUCT_DEFINITION_OCCURRENCE_ID }
  var ASSIGNED_GROUP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGROUP?  { rep.ASSIGNED_GROUP }
  var LOCATION: (SDAI.LIST_UNIQUE<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eNEXT_ASSEMBLY_USAGE_OCCURRENCE>/*[1:nil]*/ )?  { rep.LOCATION }
  var RELATING_PRODUCT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT?  { rep.RELATING_PRODUCT }
  var RELATED_PRODUCT_DEFINITION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sPRODUCT_DEFINITION_OR_REFERENCE?  { rep.RELATED_PRODUCT_DEFINITION }
  var NAME: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { rep.NAME }
  var ASSEMBLY_USAGES: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eASSEMBLY_COMPONENT_USAGE>
    /*[0:nil]*/ )?  { rep.ASSEMBLY_USAGES }
  var PREDECESSOR: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOLLECTION_VERSION?  { rep.PREDECESSOR }
  var PRODUCT_DESIGN: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT?  { rep.PRODUCT_DESIGN }
  var FORMATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_FORMATION?  { rep.FORMATION }
}

