/* file: csg_primitive.swift 	 generated: Tue Nov 16 05:35:44 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -TYPE DEFINITION in EXPRESS
/*
  TYPE csg_primitive = SELECT
    ( block (*ENTITY*),
     bounded_primitive_2d (*SELECT*),
     cyclide_segment_solid (*ENTITY*),
     eccentric_cone (*ENTITY*),
     ellipsoid (*ENTITY*),
     faceted_primitive (*ENTITY*),
     rectangular_pyramid (*ENTITY*),
     right_angular_wedge (*ENTITY*),
     right_circular_cone (*ENTITY*),
     right_circular_cylinder (*ENTITY*),
     sphere (*ENTITY*),
     torus (*ENTITY*) );
  END_TYPE; -- csg_primitive (line:1790 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES FOR SELECT
/*
  block (*ENTITY*):
  ATTR:  x: positive_length_measure *** Multiple Select Case Sources ***
  ATTR:  y: positive_length_measure *** Multiple Select Case Sources ***
  ATTR:  z: positive_length_measure *** Multiple Select Case Sources ***
  ATTR:  position: axis2_placement_3d *** Multiple Select Case Sources ***
  ATTR:  name: label
  ATTR:  dim: dimension_count

  bounded_primitive_2d (*SELECT*):
  ATTR:  centre: cartesian_point
  ATTR:  bounds: LIST [3 : ?] OF UNIQUE cartesian_point
  ATTR:  x: positive_length_measure
  ATTR:  y: positive_length_measure
  ATTR:  agreement_flag: BOOLEAN
  ATTR:  radius: positive_length_measure
  ATTR:  position: axis2_placement_2d *** Multiple Select Case Sources ***
  ATTR:  base_curve: composite_curve
  ATTR:  semi_axis_1: positive_length_measure
  ATTR:  semi_axis_2: positive_length_measure
  ATTR:  mapping_source: representation_map
  ATTR:  mapping_target: representation_item
  ATTR:  name: label
  ATTR:  dim: dimension_count

  cyclide_segment_solid (*ENTITY*):
  ATTR:  turn_angle: plane_angle_measure
  ATTR:  position: axis2_placement_3d *** Multiple Select Case Sources ***
  ATTR:  cone_angle1: plane_angle_measure
  ATTR:  cone_angle2: plane_angle_measure
  ATTR:  radius1: positive_length_measure
  ATTR:  radius2: positive_length_measure
  ATTR:  name: label
  ATTR:  dim: dimension_count

  eccentric_cone (*ENTITY*):
  ATTR:  x_offset: length_measure
  ATTR:  position: axis2_placement_3d *** Multiple Select Case Sources ***
  ATTR:  ratio: REAL
  ATTR:  semi_axis_1: positive_length_measure *** Multiple Select Case Sources ***
  ATTR:  semi_axis_2: positive_length_measure *** Multiple Select Case Sources ***
  ATTR:  y_offset: length_measure
  ATTR:  height: positive_length_measure *** Multiple Select Case Sources ***
  ATTR:  name: label
  ATTR:  dim: dimension_count

  ellipsoid (*ENTITY*):
  ATTR:  position: axis2_placement_3d *** Multiple Select Case Sources ***
  ATTR:  semi_axis_1: positive_length_measure *** Multiple Select Case Sources ***
  ATTR:  semi_axis_3: positive_length_measure
  ATTR:  semi_axis_2: positive_length_measure *** Multiple Select Case Sources ***
  ATTR:  name: label
  ATTR:  dim: dimension_count

  faceted_primitive (*ENTITY*):
  ATTR:  points: LIST [4 : ?] OF UNIQUE cartesian_point
  ATTR:  name: label
  ATTR:  dim: dimension_count

  rectangular_pyramid (*ENTITY*):
  ATTR:  position: axis2_placement_3d *** Multiple Select Case Sources ***
  ATTR:  height: positive_length_measure *** Multiple Select Case Sources ***
  ATTR:  ylength: positive_length_measure
  ATTR:  name: label
  ATTR:  xlength: positive_length_measure
  ATTR:  dim: dimension_count

  right_angular_wedge (*ENTITY*):
  ATTR:  ltx: length_measure
  ATTR:  x: positive_length_measure *** Multiple Select Case Sources ***
  ATTR:  y: positive_length_measure *** Multiple Select Case Sources ***
  ATTR:  z: positive_length_measure *** Multiple Select Case Sources ***
  ATTR:  position: axis2_placement_3d *** Multiple Select Case Sources ***
  ATTR:  name: label
  ATTR:  dim: dimension_count

  right_circular_cone (*ENTITY*):
  ATTR:  radius: length_measure *** Multiple Select Case Sources ***
  ATTR:  position: axis1_placement *** Multiple Select Case Sources ***
  ATTR:  semi_angle: plane_angle_measure
  ATTR:  height: positive_length_measure *** Multiple Select Case Sources ***
  ATTR:  name: label
  ATTR:  dim: dimension_count

  right_circular_cylinder (*ENTITY*):
  ATTR:  radius: positive_length_measure *** Multiple Select Case Sources ***
  ATTR:  position: axis1_placement *** Multiple Select Case Sources ***
  ATTR:  height: positive_length_measure *** Multiple Select Case Sources ***
  ATTR:  name: label
  ATTR:  dim: dimension_count

  sphere (*ENTITY*):
  ATTR:  centre: point *** Multiple Select Case Sources ***
  ATTR:  radius: positive_length_measure *** Multiple Select Case Sources ***
  ATTR:  name: label
  ATTR:  dim: dimension_count

  torus (*ENTITY*):
  ATTR:  major_radius: positive_length_measure
  ATTR:  minor_radius: positive_length_measure
  ATTR:  position: axis1_placement *** Multiple Select Case Sources ***
  ATTR:  name: label
  ATTR:  dim: dimension_count

*/

/** SELECT type
- EXPRESS:
```express
  TYPE csg_primitive = SELECT
    ( block (*ENTITY*),
     bounded_primitive_2d (*SELECT*),
     cyclide_segment_solid (*ENTITY*),
     eccentric_cone (*ENTITY*),
     ellipsoid (*ENTITY*),
     faceted_primitive (*ENTITY*),
     rectangular_pyramid (*ENTITY*),
     right_angular_wedge (*ENTITY*),
     right_circular_cone (*ENTITY*),
     right_circular_cylinder (*ENTITY*),
     sphere (*ENTITY*),
     torus (*ENTITY*) );
  END_TYPE; -- csg_primitive (line:1790 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public enum sCSG_PRIMITIVE : SDAIValue, AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sCSG_PRIMITIVE__type {

    /// SELECT case ``eBLOCK`` (ENTITY) in ``sCSG_PRIMITIVE``
    case _BLOCK(eBLOCK)	// (ENTITY)

    /// SELECT case ``sBOUNDED_PRIMITIVE_2D`` (SELECT) in ``sCSG_PRIMITIVE``
    case _BOUNDED_PRIMITIVE_2D(sBOUNDED_PRIMITIVE_2D)	// (SELECT)

    /// SELECT case ``eCYCLIDE_SEGMENT_SOLID`` (ENTITY) in ``sCSG_PRIMITIVE``
    case _CYCLIDE_SEGMENT_SOLID(eCYCLIDE_SEGMENT_SOLID)	// (ENTITY)

    /// SELECT case ``eECCENTRIC_CONE`` (ENTITY) in ``sCSG_PRIMITIVE``
    case _ECCENTRIC_CONE(eECCENTRIC_CONE)	// (ENTITY)

    /// SELECT case ``eELLIPSOID`` (ENTITY) in ``sCSG_PRIMITIVE``
    case _ELLIPSOID(eELLIPSOID)	// (ENTITY)

    /// SELECT case ``eFACETED_PRIMITIVE`` (ENTITY) in ``sCSG_PRIMITIVE``
    case _FACETED_PRIMITIVE(eFACETED_PRIMITIVE)	// (ENTITY)

    /// SELECT case ``eRECTANGULAR_PYRAMID`` (ENTITY) in ``sCSG_PRIMITIVE``
    case _RECTANGULAR_PYRAMID(eRECTANGULAR_PYRAMID)	// (ENTITY)

    /// SELECT case ``eRIGHT_ANGULAR_WEDGE`` (ENTITY) in ``sCSG_PRIMITIVE``
    case _RIGHT_ANGULAR_WEDGE(eRIGHT_ANGULAR_WEDGE)	// (ENTITY)

    /// SELECT case ``eRIGHT_CIRCULAR_CONE`` (ENTITY) in ``sCSG_PRIMITIVE``
    case _RIGHT_CIRCULAR_CONE(eRIGHT_CIRCULAR_CONE)	// (ENTITY)

    /// SELECT case ``eRIGHT_CIRCULAR_CYLINDER`` (ENTITY) in ``sCSG_PRIMITIVE``
    case _RIGHT_CIRCULAR_CYLINDER(eRIGHT_CIRCULAR_CYLINDER)	// (ENTITY)

    /// SELECT case ``eSPHERE`` (ENTITY) in ``sCSG_PRIMITIVE``
    case _SPHERE(eSPHERE)	// (ENTITY)

    /// SELECT case ``eTORUS`` (ENTITY) in ``sCSG_PRIMITIVE``
    case _TORUS(eTORUS)	// (ENTITY)

    //MARK: - CONSTRUCTORS
    public init(fundamental: FundamentalType) { self = fundamental }

    public init?<T: SDAIUnderlyingType>(possiblyFrom underlyingType: T?){
      guard let underlyingType = underlyingType else { return nil }

      if let base = underlyingType as? sBOUNDED_PRIMITIVE_2D {
        self = ._BOUNDED_PRIMITIVE_2D(base)
      }
      else if let base = sBOUNDED_PRIMITIVE_2D(possiblyFrom: underlyingType) {
        self = ._BOUNDED_PRIMITIVE_2D(base)
      }
      else { return nil }
    }

    public init?(possiblyFrom complex: SDAI.ComplexEntity?) {
      guard let complex = complex else { return nil }

      if let base = complex.entityReference(eBLOCK.self) {self = ._BLOCK(base) }
      else if let base = sBOUNDED_PRIMITIVE_2D(possiblyFrom: complex) {
        self = ._BOUNDED_PRIMITIVE_2D(base)
      }
      else if let base = complex.entityReference(eCYCLIDE_SEGMENT_SOLID.self) {self = ._CYCLIDE_SEGMENT_SOLID(base) }
      else if let base = complex.entityReference(eECCENTRIC_CONE.self) {self = ._ECCENTRIC_CONE(base) }
      else if let base = complex.entityReference(eELLIPSOID.self) {self = ._ELLIPSOID(base) }
      else if let base = complex.entityReference(eFACETED_PRIMITIVE.self) {self = ._FACETED_PRIMITIVE(base) }
      else if let base = complex.entityReference(eRECTANGULAR_PYRAMID.self) {self = ._RECTANGULAR_PYRAMID(base) }
      else if let base = complex.entityReference(eRIGHT_ANGULAR_WEDGE.self) {self = ._RIGHT_ANGULAR_WEDGE(base) }
      else if let base = complex.entityReference(eRIGHT_CIRCULAR_CONE.self) {self = ._RIGHT_CIRCULAR_CONE(base) }
      else if let base = complex.entityReference(eRIGHT_CIRCULAR_CYLINDER.self) {self = ._RIGHT_CIRCULAR_CYLINDER(base) }
      else if let base = complex.entityReference(eSPHERE.self) {self = ._SPHERE(base) }
      else if let base = complex.entityReference(eTORUS.self) {self = ._TORUS(base) }
      else { return nil }
    }

    public init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let select = generic else { return nil }

      if let fundamental = select as? Self {
        self.init(fundamental: fundamental)
      }
      else if let base = eBLOCK.convert(fromGeneric: select) {
        self = ._BLOCK(base)
      }
      else if let base = sBOUNDED_PRIMITIVE_2D.convert(fromGeneric: select) {
        self = ._BOUNDED_PRIMITIVE_2D(base)
      }
      else if let base = eCYCLIDE_SEGMENT_SOLID.convert(fromGeneric: select) {
        self = ._CYCLIDE_SEGMENT_SOLID(base)
      }
      else if let base = eECCENTRIC_CONE.convert(fromGeneric: select) {
        self = ._ECCENTRIC_CONE(base)
      }
      else if let base = eELLIPSOID.convert(fromGeneric: select) {
        self = ._ELLIPSOID(base)
      }
      else if let base = eFACETED_PRIMITIVE.convert(fromGeneric: select) {
        self = ._FACETED_PRIMITIVE(base)
      }
      else if let base = eRECTANGULAR_PYRAMID.convert(fromGeneric: select) {
        self = ._RECTANGULAR_PYRAMID(base)
      }
      else if let base = eRIGHT_ANGULAR_WEDGE.convert(fromGeneric: select) {
        self = ._RIGHT_ANGULAR_WEDGE(base)
      }
      else if let base = eRIGHT_CIRCULAR_CONE.convert(fromGeneric: select) {
        self = ._RIGHT_CIRCULAR_CONE(base)
      }
      else if let base = eRIGHT_CIRCULAR_CYLINDER.convert(fromGeneric: select) {
        self = ._RIGHT_CIRCULAR_CYLINDER(base)
      }
      else if let base = eSPHERE.convert(fromGeneric: select) {
        self = ._SPHERE(base)
      }
      else if let base = eTORUS.convert(fromGeneric: select) {
        self = ._TORUS(base)
      }
      else { return nil }
    }

    // InitializableByP21Parameter
    public static var bareTypeName: String = "CSG_PRIMITIVE"

    public init?(p21typedParam: P21Decode.ExchangeStructure.TypedParameter, from exchangeStructure: P21Decode.ExchangeStructure) {
      guard let keyword = p21typedParam.keyword.asStandardKeyword else { exchangeStructure.error = "unexpected p21parameter(\(p21typedParam)) while resolving \(Self.bareTypeName) select value"; return nil }

      switch(keyword) {
      case sBOUNDED_PRIMITIVE_2D.bareTypeName:
        guard let base = sBOUNDED_PRIMITIVE_2D(p21typedParam: p21typedParam, from: exchangeStructure) else { exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) select value"); return nil }
        self = ._BOUNDED_PRIMITIVE_2D(base)

      default:
        exchangeStructure.error = "unexpected p21parameter(\(p21typedParam)) while resolving \(Self.bareTypeName) select value"
        return nil
      }
    }

    public init?(p21untypedParam: P21Decode.ExchangeStructure.UntypedParameter, from exchangeStructure: P21Decode.ExchangeStructure) {
      switch p21untypedParam {
      case .rhsOccurenceName(let rhsname):
        switch rhsname {
        case .constantEntityName(let name):
          guard let entity = exchangeStructure.resolve(constantEntityName: name) else {exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) instance"); return nil }
          self.init(possiblyFrom: entity.complexEntity)

        case .entityInstanceName(let name):
          guard let complex = exchangeStructure.resolve(entityInstanceName: name) else {exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) instance"); return nil }
          self.init(possiblyFrom: complex)

        default:
          exchangeStructure.error = "unexpected p21parameter(\(p21untypedParam)) while resolving \(Self.bareTypeName) select instance"
          return nil
        }

      default:
        exchangeStructure.error = "unexpected p21parameter(\(p21untypedParam)) while resolving \(Self.bareTypeName) select instance"
        return nil
      }
    }

    public init?(p21omittedParamfrom exchangeStructure: P21Decode.ExchangeStructure) {
      return nil
    }


    //MARK: - NON-ENTITY UNDERLYING TYPE REFERENCES
    public var super_sBOUNDED_PRIMITIVE_2D: sBOUNDED_PRIMITIVE_2D? {
      switch self {
      case ._BOUNDED_PRIMITIVE_2D(let selectValue): return selectValue
      default: return nil
      }
    }

    //MARK: - ENTITY UNDERLYING TYPE REFERENCES
    public var super_eELLIPTIC_AREA: eELLIPTIC_AREA? {
      switch self {
      case ._BOUNDED_PRIMITIVE_2D(let select): return select.super_eELLIPTIC_AREA
      default: return nil
      }
    }

    public var super_ePRIMITIVE_2D: ePRIMITIVE_2D? {
      switch self {
      case ._BOUNDED_PRIMITIVE_2D(let select): return select.super_ePRIMITIVE_2D
      default: return nil
      }
    }

    public var super_ePOLYGONAL_AREA: ePOLYGONAL_AREA? {
      switch self {
      case ._BOUNDED_PRIMITIVE_2D(let select): return select.super_ePOLYGONAL_AREA
      default: return nil
      }
    }

    public var super_eHALF_SPACE_2D: eHALF_SPACE_2D? {
      switch self {
      case ._BOUNDED_PRIMITIVE_2D(let select): return select.super_eHALF_SPACE_2D
      default: return nil
      }
    }

    public var super_eRIGHT_CIRCULAR_CONE: eRIGHT_CIRCULAR_CONE? {
      switch self {
      case ._RIGHT_CIRCULAR_CONE(let entity): return entity
      default: return nil
      }
    }

    public var super_eCYCLIDE_SEGMENT_SOLID: eCYCLIDE_SEGMENT_SOLID? {
      switch self {
      case ._CYCLIDE_SEGMENT_SOLID(let entity): return entity
      default: return nil
      }
    }

    public var super_eMAPPED_ITEM: eMAPPED_ITEM? {
      switch self {
      case ._BOUNDED_PRIMITIVE_2D(let select): return select.super_eMAPPED_ITEM
      default: return nil
      }
    }

    public var super_eRECTANGULAR_AREA: eRECTANGULAR_AREA? {
      switch self {
      case ._BOUNDED_PRIMITIVE_2D(let select): return select.super_eRECTANGULAR_AREA
      default: return nil
      }
    }

    public var super_eFACETED_PRIMITIVE: eFACETED_PRIMITIVE? {
      switch self {
      case ._FACETED_PRIMITIVE(let entity): return entity
      default: return nil
      }
    }

    public var super_eAREA_WITH_OUTER_BOUNDARY: eAREA_WITH_OUTER_BOUNDARY? {
      switch self {
      case ._BOUNDED_PRIMITIVE_2D(let select): return select.super_eAREA_WITH_OUTER_BOUNDARY
      default: return nil
      }
    }

    public var super_eREPRESENTATION_ITEM: eREPRESENTATION_ITEM? {
      switch self {
      case ._BLOCK(let entity): return entity.super_eREPRESENTATION_ITEM
      case ._BOUNDED_PRIMITIVE_2D(let select): return select.super_eREPRESENTATION_ITEM
      case ._CYCLIDE_SEGMENT_SOLID(let entity): return entity.super_eREPRESENTATION_ITEM
      case ._ECCENTRIC_CONE(let entity): return entity.super_eREPRESENTATION_ITEM
      case ._ELLIPSOID(let entity): return entity.super_eREPRESENTATION_ITEM
      case ._FACETED_PRIMITIVE(let entity): return entity.super_eREPRESENTATION_ITEM
      case ._RECTANGULAR_PYRAMID(let entity): return entity.super_eREPRESENTATION_ITEM
      case ._RIGHT_ANGULAR_WEDGE(let entity): return entity.super_eREPRESENTATION_ITEM
      case ._RIGHT_CIRCULAR_CONE(let entity): return entity.super_eREPRESENTATION_ITEM
      case ._RIGHT_CIRCULAR_CYLINDER(let entity): return entity.super_eREPRESENTATION_ITEM
      case ._SPHERE(let entity): return entity.super_eREPRESENTATION_ITEM
      case ._TORUS(let entity): return entity.super_eREPRESENTATION_ITEM
      }
    }

    public var super_eRIGHT_ANGULAR_WEDGE: eRIGHT_ANGULAR_WEDGE? {
      switch self {
      case ._RIGHT_ANGULAR_WEDGE(let entity): return entity
      default: return nil
      }
    }

    public var super_ePATH_AREA_WITH_PARAMETERS: ePATH_AREA_WITH_PARAMETERS? {
      switch self {
      case ._BOUNDED_PRIMITIVE_2D(let select): return select.super_ePATH_AREA_WITH_PARAMETERS
      default: return nil
      }
    }

    public var super_eRECTANGULAR_PYRAMID: eRECTANGULAR_PYRAMID? {
      switch self {
      case ._RECTANGULAR_PYRAMID(let entity): return entity
      default: return nil
      }
    }

    public var super_eTORUS: eTORUS? {
      switch self {
      case ._TORUS(let entity): return entity
      default: return nil
      }
    }

    public var super_eELLIPSOID: eELLIPSOID? {
      switch self {
      case ._ELLIPSOID(let entity): return entity
      default: return nil
      }
    }

    public var super_eCIRCULAR_AREA: eCIRCULAR_AREA? {
      switch self {
      case ._BOUNDED_PRIMITIVE_2D(let select): return select.super_eCIRCULAR_AREA
      default: return nil
      }
    }

    public var super_eRIGHT_CIRCULAR_CYLINDER: eRIGHT_CIRCULAR_CYLINDER? {
      switch self {
      case ._RIGHT_CIRCULAR_CYLINDER(let entity): return entity
      default: return nil
      }
    }

    public var super_eCOMPLEX_AREA: eCOMPLEX_AREA? {
      switch self {
      case ._BOUNDED_PRIMITIVE_2D(let select): return select.super_eCOMPLEX_AREA
      default: return nil
      }
    }

    public var super_eGEOMETRIC_REPRESENTATION_ITEM: eGEOMETRIC_REPRESENTATION_ITEM? {
      switch self {
      case ._BLOCK(let entity): return entity.super_eGEOMETRIC_REPRESENTATION_ITEM
      case ._BOUNDED_PRIMITIVE_2D(let select): return select.super_eGEOMETRIC_REPRESENTATION_ITEM
      case ._CYCLIDE_SEGMENT_SOLID(let entity): return entity.super_eGEOMETRIC_REPRESENTATION_ITEM
      case ._ECCENTRIC_CONE(let entity): return entity.super_eGEOMETRIC_REPRESENTATION_ITEM
      case ._ELLIPSOID(let entity): return entity.super_eGEOMETRIC_REPRESENTATION_ITEM
      case ._FACETED_PRIMITIVE(let entity): return entity.super_eGEOMETRIC_REPRESENTATION_ITEM
      case ._RECTANGULAR_PYRAMID(let entity): return entity.super_eGEOMETRIC_REPRESENTATION_ITEM
      case ._RIGHT_ANGULAR_WEDGE(let entity): return entity.super_eGEOMETRIC_REPRESENTATION_ITEM
      case ._RIGHT_CIRCULAR_CONE(let entity): return entity.super_eGEOMETRIC_REPRESENTATION_ITEM
      case ._RIGHT_CIRCULAR_CYLINDER(let entity): return entity.super_eGEOMETRIC_REPRESENTATION_ITEM
      case ._SPHERE(let entity): return entity.super_eGEOMETRIC_REPRESENTATION_ITEM
      case ._TORUS(let entity): return entity.super_eGEOMETRIC_REPRESENTATION_ITEM
      }
    }

    public var super_eECCENTRIC_CONE: eECCENTRIC_CONE? {
      switch self {
      case ._ECCENTRIC_CONE(let entity): return entity
      default: return nil
      }
    }

    public var super_eSPHERE: eSPHERE? {
      switch self {
      case ._SPHERE(let entity): return entity
      default: return nil
      }
    }

    public var super_eBLOCK: eBLOCK? {
      switch self {
      case ._BLOCK(let entity): return entity
      default: return nil
      }
    }


    //MARK: - ENTITY ATTRIBUTE REFERENCES
    /// attribute of SELECT type ``sCSG_PRIMITIVE``
    /// - origin: ENTITY( ``eTORUS`` )
    public var MAJOR_RADIUS: tPOSITIVE_LENGTH_MEASURE?  {
      switch self {
      case ._TORUS(let entity): return entity.MAJOR_RADIUS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCSG_PRIMITIVE``
    /// - origin: ENTITY( ``eRIGHT_ANGULAR_WEDGE`` )
    public var LTX: tLENGTH_MEASURE?  {
      switch self {
      case ._RIGHT_ANGULAR_WEDGE(let entity): return entity.LTX
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCSG_PRIMITIVE``
    /// - origin: SELECT( ``sBOUNDED_PRIMITIVE_2D`` )
    /// - origin: ENTITY( ``eSPHERE`` )
    public var CENTRE: SDAI.GENERIC_ENTITY?  {
      switch self {
      case ._BOUNDED_PRIMITIVE_2D(let select): return select.CENTRE
      case ._SPHERE(let entity): return entity.CENTRE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCSG_PRIMITIVE``
    /// - origin: SELECT( ``sBOUNDED_PRIMITIVE_2D`` )
    public var BOUNDS: (SDAI.LIST_UNIQUE<eCARTESIAN_POINT>/*[3:nil]*/ )?  {
      switch self {
      case ._BOUNDED_PRIMITIVE_2D(let select): return select.BOUNDS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCSG_PRIMITIVE``
    /// - origin: ENTITY( ``eECCENTRIC_CONE`` )
    public var X_OFFSET: tLENGTH_MEASURE?  {
      switch self {
      case ._ECCENTRIC_CONE(let entity): return entity.X_OFFSET
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCSG_PRIMITIVE``
    /// - origin: ENTITY( ``eCYCLIDE_SEGMENT_SOLID`` )
    public var TURN_ANGLE: tPLANE_ANGLE_MEASURE?  {
      switch self {
      case ._CYCLIDE_SEGMENT_SOLID(let entity): return entity.TURN_ANGLE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCSG_PRIMITIVE``
    /// - origin: ENTITY( ``eTORUS`` )
    public var MINOR_RADIUS: tPOSITIVE_LENGTH_MEASURE?  {
      switch self {
      case ._TORUS(let entity): return entity.MINOR_RADIUS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCSG_PRIMITIVE``
    /// - origin: ENTITY( ``eBLOCK`` )
    /// - origin: SELECT( ``sBOUNDED_PRIMITIVE_2D`` )
    /// - origin: ENTITY( ``eRIGHT_ANGULAR_WEDGE`` )
    public var X: tPOSITIVE_LENGTH_MEASURE?  {
      switch self {
      case ._BLOCK(let entity): return entity.X
      case ._BOUNDED_PRIMITIVE_2D(let select): return select.X
      case ._RIGHT_ANGULAR_WEDGE(let entity): return entity.X
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCSG_PRIMITIVE``
    /// - origin: ENTITY( ``eBLOCK`` )
    /// - origin: SELECT( ``sBOUNDED_PRIMITIVE_2D`` )
    /// - origin: ENTITY( ``eRIGHT_ANGULAR_WEDGE`` )
    public var Y: tPOSITIVE_LENGTH_MEASURE?  {
      switch self {
      case ._BLOCK(let entity): return entity.Y
      case ._BOUNDED_PRIMITIVE_2D(let select): return select.Y
      case ._RIGHT_ANGULAR_WEDGE(let entity): return entity.Y
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCSG_PRIMITIVE``
    /// - origin: ENTITY( ``eBLOCK`` )
    /// - origin: ENTITY( ``eRIGHT_ANGULAR_WEDGE`` )
    public var Z: tPOSITIVE_LENGTH_MEASURE?  {
      switch self {
      case ._BLOCK(let entity): return entity.Z
      case ._RIGHT_ANGULAR_WEDGE(let entity): return entity.Z
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCSG_PRIMITIVE``
    /// - origin: SELECT( ``sBOUNDED_PRIMITIVE_2D`` )
    public var AGREEMENT_FLAG: SDAI.BOOLEAN?  {
      switch self {
      case ._BOUNDED_PRIMITIVE_2D(let select): return select.AGREEMENT_FLAG
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCSG_PRIMITIVE``
    /// - origin: SELECT( ``sBOUNDED_PRIMITIVE_2D`` )
    /// - origin: ENTITY( ``eRIGHT_CIRCULAR_CONE`` )
    /// - origin: ENTITY( ``eRIGHT_CIRCULAR_CYLINDER`` )
    /// - origin: ENTITY( ``eSPHERE`` )
    public var RADIUS: tLENGTH_MEASURE?  {
      switch self {
      case ._BOUNDED_PRIMITIVE_2D(let select): return tLENGTH_MEASURE(select.RADIUS)
      case ._RIGHT_CIRCULAR_CONE(let entity): return entity.RADIUS
      case ._RIGHT_CIRCULAR_CYLINDER(let entity): return tLENGTH_MEASURE(entity.RADIUS)
      case ._SPHERE(let entity): return tLENGTH_MEASURE(entity.RADIUS)
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCSG_PRIMITIVE``
    /// - origin: ENTITY( ``eBLOCK`` )
    /// - origin: SELECT( ``sBOUNDED_PRIMITIVE_2D`` )
    /// - origin: ENTITY( ``eCYCLIDE_SEGMENT_SOLID`` )
    /// - origin: ENTITY( ``eECCENTRIC_CONE`` )
    /// - origin: ENTITY( ``eELLIPSOID`` )
    /// - origin: ENTITY( ``eRECTANGULAR_PYRAMID`` )
    /// - origin: ENTITY( ``eRIGHT_ANGULAR_WEDGE`` )
    /// - origin: ENTITY( ``eRIGHT_CIRCULAR_CONE`` )
    /// - origin: ENTITY( ``eRIGHT_CIRCULAR_CYLINDER`` )
    /// - origin: ENTITY( ``eTORUS`` )
    public var POSITION: SDAI.GENERIC_ENTITY?  {
      switch self {
      case ._BLOCK(let entity): return entity.POSITION
      case ._BOUNDED_PRIMITIVE_2D(let select): return select.POSITION
      case ._CYCLIDE_SEGMENT_SOLID(let entity): return entity.POSITION
      case ._ECCENTRIC_CONE(let entity): return entity.POSITION
      case ._ELLIPSOID(let entity): return entity.POSITION
      case ._RECTANGULAR_PYRAMID(let entity): return entity.POSITION
      case ._RIGHT_ANGULAR_WEDGE(let entity): return entity.POSITION
      case ._RIGHT_CIRCULAR_CONE(let entity): return entity.POSITION
      case ._RIGHT_CIRCULAR_CYLINDER(let entity): return entity.POSITION
      case ._TORUS(let entity): return entity.POSITION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCSG_PRIMITIVE``
    /// - origin: ENTITY( ``eECCENTRIC_CONE`` )
    public var RATIO: SDAI.REAL?  {
      switch self {
      case ._ECCENTRIC_CONE(let entity): return entity.RATIO
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCSG_PRIMITIVE``
    /// - origin: SELECT( ``sBOUNDED_PRIMITIVE_2D`` )
    public var BASE_CURVE: eCOMPOSITE_CURVE?  {
      switch self {
      case ._BOUNDED_PRIMITIVE_2D(let select): return select.BASE_CURVE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCSG_PRIMITIVE``
    /// - origin: ENTITY( ``eRIGHT_CIRCULAR_CONE`` )
    public var SEMI_ANGLE: tPLANE_ANGLE_MEASURE?  {
      switch self {
      case ._RIGHT_CIRCULAR_CONE(let entity): return entity.SEMI_ANGLE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCSG_PRIMITIVE``
    /// - origin: ENTITY( ``eFACETED_PRIMITIVE`` )
    public var POINTS: (SDAI.LIST_UNIQUE<eCARTESIAN_POINT>/*[4:nil]*/ )?  {
      switch self {
      case ._FACETED_PRIMITIVE(let entity): return entity.POINTS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCSG_PRIMITIVE``
    /// - origin: SELECT( ``sBOUNDED_PRIMITIVE_2D`` )
    /// - origin: ENTITY( ``eECCENTRIC_CONE`` )
    /// - origin: ENTITY( ``eELLIPSOID`` )
    public var SEMI_AXIS_1: tPOSITIVE_LENGTH_MEASURE?  {
      switch self {
      case ._BOUNDED_PRIMITIVE_2D(let select): return select.SEMI_AXIS_1
      case ._ECCENTRIC_CONE(let entity): return entity.SEMI_AXIS_1
      case ._ELLIPSOID(let entity): return entity.SEMI_AXIS_1
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCSG_PRIMITIVE``
    /// - origin: ENTITY( ``eCYCLIDE_SEGMENT_SOLID`` )
    public var CONE_ANGLE1: tPLANE_ANGLE_MEASURE?  {
      switch self {
      case ._CYCLIDE_SEGMENT_SOLID(let entity): return entity.CONE_ANGLE1
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCSG_PRIMITIVE``
    /// - origin: ENTITY( ``eELLIPSOID`` )
    public var SEMI_AXIS_3: tPOSITIVE_LENGTH_MEASURE?  {
      switch self {
      case ._ELLIPSOID(let entity): return entity.SEMI_AXIS_3
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCSG_PRIMITIVE``
    /// - origin: SELECT( ``sBOUNDED_PRIMITIVE_2D`` )
    /// - origin: ENTITY( ``eECCENTRIC_CONE`` )
    /// - origin: ENTITY( ``eELLIPSOID`` )
    public var SEMI_AXIS_2: tPOSITIVE_LENGTH_MEASURE?  {
      switch self {
      case ._BOUNDED_PRIMITIVE_2D(let select): return select.SEMI_AXIS_2
      case ._ECCENTRIC_CONE(let entity): return entity.SEMI_AXIS_2
      case ._ELLIPSOID(let entity): return entity.SEMI_AXIS_2
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCSG_PRIMITIVE``
    /// - origin: ENTITY( ``eCYCLIDE_SEGMENT_SOLID`` )
    public var CONE_ANGLE2: tPLANE_ANGLE_MEASURE?  {
      switch self {
      case ._CYCLIDE_SEGMENT_SOLID(let entity): return entity.CONE_ANGLE2
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCSG_PRIMITIVE``
    /// - origin: ENTITY( ``eECCENTRIC_CONE`` )
    public var Y_OFFSET: tLENGTH_MEASURE?  {
      switch self {
      case ._ECCENTRIC_CONE(let entity): return entity.Y_OFFSET
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCSG_PRIMITIVE``
    /// - origin: ENTITY( ``eECCENTRIC_CONE`` )
    /// - origin: ENTITY( ``eRECTANGULAR_PYRAMID`` )
    /// - origin: ENTITY( ``eRIGHT_CIRCULAR_CONE`` )
    /// - origin: ENTITY( ``eRIGHT_CIRCULAR_CYLINDER`` )
    public var HEIGHT: tPOSITIVE_LENGTH_MEASURE?  {
      switch self {
      case ._ECCENTRIC_CONE(let entity): return entity.HEIGHT
      case ._RECTANGULAR_PYRAMID(let entity): return entity.HEIGHT
      case ._RIGHT_CIRCULAR_CONE(let entity): return entity.HEIGHT
      case ._RIGHT_CIRCULAR_CYLINDER(let entity): return entity.HEIGHT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCSG_PRIMITIVE``
    /// - origin: SELECT( ``sBOUNDED_PRIMITIVE_2D`` )
    public var MAPPING_SOURCE: eREPRESENTATION_MAP?  {
      switch self {
      case ._BOUNDED_PRIMITIVE_2D(let select): return select.MAPPING_SOURCE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCSG_PRIMITIVE``
    /// - origin: ENTITY( ``eCYCLIDE_SEGMENT_SOLID`` )
    public var RADIUS1: tPOSITIVE_LENGTH_MEASURE?  {
      switch self {
      case ._CYCLIDE_SEGMENT_SOLID(let entity): return entity.RADIUS1
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCSG_PRIMITIVE``
    /// - origin: ENTITY( ``eCYCLIDE_SEGMENT_SOLID`` )
    public var RADIUS2: tPOSITIVE_LENGTH_MEASURE?  {
      switch self {
      case ._CYCLIDE_SEGMENT_SOLID(let entity): return entity.RADIUS2
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCSG_PRIMITIVE``
    /// - origin: SELECT( ``sBOUNDED_PRIMITIVE_2D`` )
    public var MAPPING_TARGET: eREPRESENTATION_ITEM?  {
      switch self {
      case ._BOUNDED_PRIMITIVE_2D(let select): return select.MAPPING_TARGET
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCSG_PRIMITIVE``
    /// - origin: ENTITY( ``eBLOCK`` )
    /// - origin: SELECT( ``sBOUNDED_PRIMITIVE_2D`` )
    /// - origin: ENTITY( ``eCYCLIDE_SEGMENT_SOLID`` )
    /// - origin: ENTITY( ``eECCENTRIC_CONE`` )
    /// - origin: ENTITY( ``eELLIPSOID`` )
    /// - origin: ENTITY( ``eFACETED_PRIMITIVE`` )
    /// - origin: ENTITY( ``eRECTANGULAR_PYRAMID`` )
    /// - origin: ENTITY( ``eRIGHT_ANGULAR_WEDGE`` )
    /// - origin: ENTITY( ``eRIGHT_CIRCULAR_CONE`` )
    /// - origin: ENTITY( ``eRIGHT_CIRCULAR_CYLINDER`` )
    /// - origin: ENTITY( ``eSPHERE`` )
    /// - origin: ENTITY( ``eTORUS`` )
    public var NAME: tLABEL?  {
      switch self {
      case ._BLOCK(let entity): return entity.NAME
      case ._BOUNDED_PRIMITIVE_2D(let select): return select.NAME
      case ._CYCLIDE_SEGMENT_SOLID(let entity): return entity.NAME
      case ._ECCENTRIC_CONE(let entity): return entity.NAME
      case ._ELLIPSOID(let entity): return entity.NAME
      case ._FACETED_PRIMITIVE(let entity): return entity.NAME
      case ._RECTANGULAR_PYRAMID(let entity): return entity.NAME
      case ._RIGHT_ANGULAR_WEDGE(let entity): return entity.NAME
      case ._RIGHT_CIRCULAR_CONE(let entity): return entity.NAME
      case ._RIGHT_CIRCULAR_CYLINDER(let entity): return entity.NAME
      case ._SPHERE(let entity): return entity.NAME
      case ._TORUS(let entity): return entity.NAME
      }
    }

    /// attribute of SELECT type ``sCSG_PRIMITIVE``
    /// - origin: ENTITY( ``eRECTANGULAR_PYRAMID`` )
    public var YLENGTH: tPOSITIVE_LENGTH_MEASURE?  {
      switch self {
      case ._RECTANGULAR_PYRAMID(let entity): return entity.YLENGTH
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCSG_PRIMITIVE``
    /// - origin: ENTITY( ``eRECTANGULAR_PYRAMID`` )
    public var XLENGTH: tPOSITIVE_LENGTH_MEASURE?  {
      switch self {
      case ._RECTANGULAR_PYRAMID(let entity): return entity.XLENGTH
      default: return nil
      }
    }

    /// attribute of SELECT type ``sCSG_PRIMITIVE``
    /// - origin: ENTITY( ``eBLOCK`` )
    /// - origin: SELECT( ``sBOUNDED_PRIMITIVE_2D`` )
    /// - origin: ENTITY( ``eCYCLIDE_SEGMENT_SOLID`` )
    /// - origin: ENTITY( ``eECCENTRIC_CONE`` )
    /// - origin: ENTITY( ``eELLIPSOID`` )
    /// - origin: ENTITY( ``eFACETED_PRIMITIVE`` )
    /// - origin: ENTITY( ``eRECTANGULAR_PYRAMID`` )
    /// - origin: ENTITY( ``eRIGHT_ANGULAR_WEDGE`` )
    /// - origin: ENTITY( ``eRIGHT_CIRCULAR_CONE`` )
    /// - origin: ENTITY( ``eRIGHT_CIRCULAR_CYLINDER`` )
    /// - origin: ENTITY( ``eSPHERE`` )
    /// - origin: ENTITY( ``eTORUS`` )
    public var DIM: tDIMENSION_COUNT?  {
      switch self {
      case ._BLOCK(let entity): return entity.DIM
      case ._BOUNDED_PRIMITIVE_2D(let select): return select.DIM
      case ._CYCLIDE_SEGMENT_SOLID(let entity): return entity.DIM
      case ._ECCENTRIC_CONE(let entity): return entity.DIM
      case ._ELLIPSOID(let entity): return entity.DIM
      case ._FACETED_PRIMITIVE(let entity): return entity.DIM
      case ._RECTANGULAR_PYRAMID(let entity): return entity.DIM
      case ._RIGHT_ANGULAR_WEDGE(let entity): return entity.DIM
      case ._RIGHT_CIRCULAR_CONE(let entity): return entity.DIM
      case ._RIGHT_CIRCULAR_CYLINDER(let entity): return entity.DIM
      case ._SPHERE(let entity): return entity.DIM
      case ._TORUS(let entity): return entity.DIM
      }
    }


    //MARK: - SDAIValue
    public func isValueEqual<T: SDAIValue>(to rhs: T) -> Bool {
      switch self {
      case ._BLOCK(let selection): return selection.value.isValueEqual(to: rhs)
      case ._BOUNDED_PRIMITIVE_2D(let selection): return selection.value.isValueEqual(to: rhs)
      case ._CYCLIDE_SEGMENT_SOLID(let selection): return selection.value.isValueEqual(to: rhs)
      case ._ECCENTRIC_CONE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._ELLIPSOID(let selection): return selection.value.isValueEqual(to: rhs)
      case ._FACETED_PRIMITIVE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._RECTANGULAR_PYRAMID(let selection): return selection.value.isValueEqual(to: rhs)
      case ._RIGHT_ANGULAR_WEDGE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._RIGHT_CIRCULAR_CONE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._RIGHT_CIRCULAR_CYLINDER(let selection): return selection.value.isValueEqual(to: rhs)
      case ._SPHERE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._TORUS(let selection): return selection.value.isValueEqual(to: rhs)
      }
    }

    public func isValueEqualOptionally<T: SDAIValue>(to rhs: T?) -> Bool? {
      switch self {
      case ._BLOCK(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._BOUNDED_PRIMITIVE_2D(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._CYCLIDE_SEGMENT_SOLID(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._ECCENTRIC_CONE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._ELLIPSOID(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._FACETED_PRIMITIVE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._RECTANGULAR_PYRAMID(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._RIGHT_ANGULAR_WEDGE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._RIGHT_CIRCULAR_CONE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._RIGHT_CIRCULAR_CYLINDER(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._SPHERE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._TORUS(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      }
    }

    public func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      switch self {
      case ._BLOCK(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._BOUNDED_PRIMITIVE_2D(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._CYCLIDE_SEGMENT_SOLID(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._ECCENTRIC_CONE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._ELLIPSOID(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._FACETED_PRIMITIVE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._RECTANGULAR_PYRAMID(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._RIGHT_ANGULAR_WEDGE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._RIGHT_CIRCULAR_CONE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._RIGHT_CIRCULAR_CYLINDER(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._SPHERE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._TORUS(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      }
    }

    public func isValueEqual<T: SDAIValue>(to rhs: T, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      switch self {
      case ._BLOCK(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._BOUNDED_PRIMITIVE_2D(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._CYCLIDE_SEGMENT_SOLID(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._ECCENTRIC_CONE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._ELLIPSOID(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._FACETED_PRIMITIVE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._RECTANGULAR_PYRAMID(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._RIGHT_ANGULAR_WEDGE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._RIGHT_CIRCULAR_CONE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._RIGHT_CIRCULAR_CYLINDER(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._SPHERE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._TORUS(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      }
    }

    public func isValueEqualOptionally<T: SDAIValue>(to rhs: T?, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      switch self {
      case ._BLOCK(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._BOUNDED_PRIMITIVE_2D(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._CYCLIDE_SEGMENT_SOLID(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._ECCENTRIC_CONE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._ELLIPSOID(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._FACETED_PRIMITIVE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._RECTANGULAR_PYRAMID(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._RIGHT_ANGULAR_WEDGE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._RIGHT_CIRCULAR_CONE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._RIGHT_CIRCULAR_CYLINDER(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._SPHERE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._TORUS(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      }
    }


    //MARK: SDAIGenericTypeBase
    public func copy() -> Self {
      switch self {
      case ._BLOCK(let selection): return ._BLOCK(selection.copy())
      case ._BOUNDED_PRIMITIVE_2D(let selection): return ._BOUNDED_PRIMITIVE_2D(selection.copy())
      case ._CYCLIDE_SEGMENT_SOLID(let selection): return ._CYCLIDE_SEGMENT_SOLID(selection.copy())
      case ._ECCENTRIC_CONE(let selection): return ._ECCENTRIC_CONE(selection.copy())
      case ._ELLIPSOID(let selection): return ._ELLIPSOID(selection.copy())
      case ._FACETED_PRIMITIVE(let selection): return ._FACETED_PRIMITIVE(selection.copy())
      case ._RECTANGULAR_PYRAMID(let selection): return ._RECTANGULAR_PYRAMID(selection.copy())
      case ._RIGHT_ANGULAR_WEDGE(let selection): return ._RIGHT_ANGULAR_WEDGE(selection.copy())
      case ._RIGHT_CIRCULAR_CONE(let selection): return ._RIGHT_CIRCULAR_CONE(selection.copy())
      case ._RIGHT_CIRCULAR_CYLINDER(let selection): return ._RIGHT_CIRCULAR_CYLINDER(selection.copy())
      case ._SPHERE(let selection): return ._SPHERE(selection.copy())
      case ._TORUS(let selection): return ._TORUS(selection.copy())
      }
    }

    //MARK: SDAIGenericType
    public var typeMembers: Set<SDAI.STRING> {
      var members: Set<SDAI.STRING> = [SDAI.STRING(Self.typeName)]
      switch self {
      case ._BLOCK(let selection): members.formUnion(selection.typeMembers)
      case ._BOUNDED_PRIMITIVE_2D(let selection): members.formUnion(selection.typeMembers)
      case ._CYCLIDE_SEGMENT_SOLID(let selection): members.formUnion(selection.typeMembers)
      case ._ECCENTRIC_CONE(let selection): members.formUnion(selection.typeMembers)
      case ._ELLIPSOID(let selection): members.formUnion(selection.typeMembers)
      case ._FACETED_PRIMITIVE(let selection): members.formUnion(selection.typeMembers)
      case ._RECTANGULAR_PYRAMID(let selection): members.formUnion(selection.typeMembers)
      case ._RIGHT_ANGULAR_WEDGE(let selection): members.formUnion(selection.typeMembers)
      case ._RIGHT_CIRCULAR_CONE(let selection): members.formUnion(selection.typeMembers)
      case ._RIGHT_CIRCULAR_CYLINDER(let selection): members.formUnion(selection.typeMembers)
      case ._SPHERE(let selection): members.formUnion(selection.typeMembers)
      case ._TORUS(let selection): members.formUnion(selection.typeMembers)
      }
      //SELECT data types (indirectly) referencing the current type as a member of the select list
      members.insert(SDAI.STRING(sCSG_SELECT.typeName)) // -> Self
      members.insert(SDAI.STRING(sBASE_SOLID_SELECT.typeName)) // -> Self
      members.insert(SDAI.STRING(sBOOLEAN_OPERAND.typeName)) // -> Self
      return members
    }

    public var entityReference: SDAI.EntityReference? {
      switch self {
      case ._BLOCK(let selection): return selection.entityReference
      case ._BOUNDED_PRIMITIVE_2D(let selection): return selection.entityReference
      case ._CYCLIDE_SEGMENT_SOLID(let selection): return selection.entityReference
      case ._ECCENTRIC_CONE(let selection): return selection.entityReference
      case ._ELLIPSOID(let selection): return selection.entityReference
      case ._FACETED_PRIMITIVE(let selection): return selection.entityReference
      case ._RECTANGULAR_PYRAMID(let selection): return selection.entityReference
      case ._RIGHT_ANGULAR_WEDGE(let selection): return selection.entityReference
      case ._RIGHT_CIRCULAR_CONE(let selection): return selection.entityReference
      case ._RIGHT_CIRCULAR_CYLINDER(let selection): return selection.entityReference
      case ._SPHERE(let selection): return selection.entityReference
      case ._TORUS(let selection): return selection.entityReference
      }
    }
    public var stringValue: SDAI.STRING? {
      switch self {
      case ._BLOCK(let selection): return selection.stringValue
      case ._BOUNDED_PRIMITIVE_2D(let selection): return selection.stringValue
      case ._CYCLIDE_SEGMENT_SOLID(let selection): return selection.stringValue
      case ._ECCENTRIC_CONE(let selection): return selection.stringValue
      case ._ELLIPSOID(let selection): return selection.stringValue
      case ._FACETED_PRIMITIVE(let selection): return selection.stringValue
      case ._RECTANGULAR_PYRAMID(let selection): return selection.stringValue
      case ._RIGHT_ANGULAR_WEDGE(let selection): return selection.stringValue
      case ._RIGHT_CIRCULAR_CONE(let selection): return selection.stringValue
      case ._RIGHT_CIRCULAR_CYLINDER(let selection): return selection.stringValue
      case ._SPHERE(let selection): return selection.stringValue
      case ._TORUS(let selection): return selection.stringValue
      }
    }
    public var binaryValue: SDAI.BINARY? {
      switch self {
      case ._BLOCK(let selection): return selection.binaryValue
      case ._BOUNDED_PRIMITIVE_2D(let selection): return selection.binaryValue
      case ._CYCLIDE_SEGMENT_SOLID(let selection): return selection.binaryValue
      case ._ECCENTRIC_CONE(let selection): return selection.binaryValue
      case ._ELLIPSOID(let selection): return selection.binaryValue
      case ._FACETED_PRIMITIVE(let selection): return selection.binaryValue
      case ._RECTANGULAR_PYRAMID(let selection): return selection.binaryValue
      case ._RIGHT_ANGULAR_WEDGE(let selection): return selection.binaryValue
      case ._RIGHT_CIRCULAR_CONE(let selection): return selection.binaryValue
      case ._RIGHT_CIRCULAR_CYLINDER(let selection): return selection.binaryValue
      case ._SPHERE(let selection): return selection.binaryValue
      case ._TORUS(let selection): return selection.binaryValue
      }
    }
    public var logicalValue: SDAI.LOGICAL? {
      switch self {
      case ._BLOCK(let selection): return selection.logicalValue
      case ._BOUNDED_PRIMITIVE_2D(let selection): return selection.logicalValue
      case ._CYCLIDE_SEGMENT_SOLID(let selection): return selection.logicalValue
      case ._ECCENTRIC_CONE(let selection): return selection.logicalValue
      case ._ELLIPSOID(let selection): return selection.logicalValue
      case ._FACETED_PRIMITIVE(let selection): return selection.logicalValue
      case ._RECTANGULAR_PYRAMID(let selection): return selection.logicalValue
      case ._RIGHT_ANGULAR_WEDGE(let selection): return selection.logicalValue
      case ._RIGHT_CIRCULAR_CONE(let selection): return selection.logicalValue
      case ._RIGHT_CIRCULAR_CYLINDER(let selection): return selection.logicalValue
      case ._SPHERE(let selection): return selection.logicalValue
      case ._TORUS(let selection): return selection.logicalValue
      }
    }
    public var booleanValue: SDAI.BOOLEAN? {
      switch self {
      case ._BLOCK(let selection): return selection.booleanValue
      case ._BOUNDED_PRIMITIVE_2D(let selection): return selection.booleanValue
      case ._CYCLIDE_SEGMENT_SOLID(let selection): return selection.booleanValue
      case ._ECCENTRIC_CONE(let selection): return selection.booleanValue
      case ._ELLIPSOID(let selection): return selection.booleanValue
      case ._FACETED_PRIMITIVE(let selection): return selection.booleanValue
      case ._RECTANGULAR_PYRAMID(let selection): return selection.booleanValue
      case ._RIGHT_ANGULAR_WEDGE(let selection): return selection.booleanValue
      case ._RIGHT_CIRCULAR_CONE(let selection): return selection.booleanValue
      case ._RIGHT_CIRCULAR_CYLINDER(let selection): return selection.booleanValue
      case ._SPHERE(let selection): return selection.booleanValue
      case ._TORUS(let selection): return selection.booleanValue
      }
    }
    public var numberValue: SDAI.NUMBER? {
      switch self {
      case ._BLOCK(let selection): return selection.numberValue
      case ._BOUNDED_PRIMITIVE_2D(let selection): return selection.numberValue
      case ._CYCLIDE_SEGMENT_SOLID(let selection): return selection.numberValue
      case ._ECCENTRIC_CONE(let selection): return selection.numberValue
      case ._ELLIPSOID(let selection): return selection.numberValue
      case ._FACETED_PRIMITIVE(let selection): return selection.numberValue
      case ._RECTANGULAR_PYRAMID(let selection): return selection.numberValue
      case ._RIGHT_ANGULAR_WEDGE(let selection): return selection.numberValue
      case ._RIGHT_CIRCULAR_CONE(let selection): return selection.numberValue
      case ._RIGHT_CIRCULAR_CYLINDER(let selection): return selection.numberValue
      case ._SPHERE(let selection): return selection.numberValue
      case ._TORUS(let selection): return selection.numberValue
      }
    }
    public var realValue: SDAI.REAL? {
      switch self {
      case ._BLOCK(let selection): return selection.realValue
      case ._BOUNDED_PRIMITIVE_2D(let selection): return selection.realValue
      case ._CYCLIDE_SEGMENT_SOLID(let selection): return selection.realValue
      case ._ECCENTRIC_CONE(let selection): return selection.realValue
      case ._ELLIPSOID(let selection): return selection.realValue
      case ._FACETED_PRIMITIVE(let selection): return selection.realValue
      case ._RECTANGULAR_PYRAMID(let selection): return selection.realValue
      case ._RIGHT_ANGULAR_WEDGE(let selection): return selection.realValue
      case ._RIGHT_CIRCULAR_CONE(let selection): return selection.realValue
      case ._RIGHT_CIRCULAR_CYLINDER(let selection): return selection.realValue
      case ._SPHERE(let selection): return selection.realValue
      case ._TORUS(let selection): return selection.realValue
      }
    }
    public var integerValue: SDAI.INTEGER? {
      switch self {
      case ._BLOCK(let selection): return selection.integerValue
      case ._BOUNDED_PRIMITIVE_2D(let selection): return selection.integerValue
      case ._CYCLIDE_SEGMENT_SOLID(let selection): return selection.integerValue
      case ._ECCENTRIC_CONE(let selection): return selection.integerValue
      case ._ELLIPSOID(let selection): return selection.integerValue
      case ._FACETED_PRIMITIVE(let selection): return selection.integerValue
      case ._RECTANGULAR_PYRAMID(let selection): return selection.integerValue
      case ._RIGHT_ANGULAR_WEDGE(let selection): return selection.integerValue
      case ._RIGHT_CIRCULAR_CONE(let selection): return selection.integerValue
      case ._RIGHT_CIRCULAR_CYLINDER(let selection): return selection.integerValue
      case ._SPHERE(let selection): return selection.integerValue
      case ._TORUS(let selection): return selection.integerValue
      }
    }
    public var genericEnumValue: SDAI.GenericEnumValue? {
      switch self {
      case ._BLOCK(let selection): return selection.genericEnumValue
      case ._BOUNDED_PRIMITIVE_2D(let selection): return selection.genericEnumValue
      case ._CYCLIDE_SEGMENT_SOLID(let selection): return selection.genericEnumValue
      case ._ECCENTRIC_CONE(let selection): return selection.genericEnumValue
      case ._ELLIPSOID(let selection): return selection.genericEnumValue
      case ._FACETED_PRIMITIVE(let selection): return selection.genericEnumValue
      case ._RECTANGULAR_PYRAMID(let selection): return selection.genericEnumValue
      case ._RIGHT_ANGULAR_WEDGE(let selection): return selection.genericEnumValue
      case ._RIGHT_CIRCULAR_CONE(let selection): return selection.genericEnumValue
      case ._RIGHT_CIRCULAR_CYLINDER(let selection): return selection.genericEnumValue
      case ._SPHERE(let selection): return selection.genericEnumValue
      case ._TORUS(let selection): return selection.genericEnumValue
      }
    }
    public func arrayOptionalValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.ARRAY_OPTIONAL<ELEM>? {
      switch self {
      case ._BLOCK(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._BOUNDED_PRIMITIVE_2D(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._CYCLIDE_SEGMENT_SOLID(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._ECCENTRIC_CONE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._ELLIPSOID(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._FACETED_PRIMITIVE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._RECTANGULAR_PYRAMID(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._RIGHT_ANGULAR_WEDGE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._RIGHT_CIRCULAR_CONE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._RIGHT_CIRCULAR_CYLINDER(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._SPHERE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._TORUS(let selection): return selection.arrayOptionalValue(elementType:elementType)
      }
    }
    public func arrayValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.ARRAY<ELEM>? {
      switch self {
      case ._BLOCK(let selection): return selection.arrayValue(elementType:elementType)
      case ._BOUNDED_PRIMITIVE_2D(let selection): return selection.arrayValue(elementType:elementType)
      case ._CYCLIDE_SEGMENT_SOLID(let selection): return selection.arrayValue(elementType:elementType)
      case ._ECCENTRIC_CONE(let selection): return selection.arrayValue(elementType:elementType)
      case ._ELLIPSOID(let selection): return selection.arrayValue(elementType:elementType)
      case ._FACETED_PRIMITIVE(let selection): return selection.arrayValue(elementType:elementType)
      case ._RECTANGULAR_PYRAMID(let selection): return selection.arrayValue(elementType:elementType)
      case ._RIGHT_ANGULAR_WEDGE(let selection): return selection.arrayValue(elementType:elementType)
      case ._RIGHT_CIRCULAR_CONE(let selection): return selection.arrayValue(elementType:elementType)
      case ._RIGHT_CIRCULAR_CYLINDER(let selection): return selection.arrayValue(elementType:elementType)
      case ._SPHERE(let selection): return selection.arrayValue(elementType:elementType)
      case ._TORUS(let selection): return selection.arrayValue(elementType:elementType)
      }
    }
    public func listValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.LIST<ELEM>? {
      switch self {
      case ._BLOCK(let selection): return selection.listValue(elementType:elementType)
      case ._BOUNDED_PRIMITIVE_2D(let selection): return selection.listValue(elementType:elementType)
      case ._CYCLIDE_SEGMENT_SOLID(let selection): return selection.listValue(elementType:elementType)
      case ._ECCENTRIC_CONE(let selection): return selection.listValue(elementType:elementType)
      case ._ELLIPSOID(let selection): return selection.listValue(elementType:elementType)
      case ._FACETED_PRIMITIVE(let selection): return selection.listValue(elementType:elementType)
      case ._RECTANGULAR_PYRAMID(let selection): return selection.listValue(elementType:elementType)
      case ._RIGHT_ANGULAR_WEDGE(let selection): return selection.listValue(elementType:elementType)
      case ._RIGHT_CIRCULAR_CONE(let selection): return selection.listValue(elementType:elementType)
      case ._RIGHT_CIRCULAR_CYLINDER(let selection): return selection.listValue(elementType:elementType)
      case ._SPHERE(let selection): return selection.listValue(elementType:elementType)
      case ._TORUS(let selection): return selection.listValue(elementType:elementType)
      }
    }
    public func bagValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.BAG<ELEM>? {
      switch self {
      case ._BLOCK(let selection): return selection.bagValue(elementType:elementType)
      case ._BOUNDED_PRIMITIVE_2D(let selection): return selection.bagValue(elementType:elementType)
      case ._CYCLIDE_SEGMENT_SOLID(let selection): return selection.bagValue(elementType:elementType)
      case ._ECCENTRIC_CONE(let selection): return selection.bagValue(elementType:elementType)
      case ._ELLIPSOID(let selection): return selection.bagValue(elementType:elementType)
      case ._FACETED_PRIMITIVE(let selection): return selection.bagValue(elementType:elementType)
      case ._RECTANGULAR_PYRAMID(let selection): return selection.bagValue(elementType:elementType)
      case ._RIGHT_ANGULAR_WEDGE(let selection): return selection.bagValue(elementType:elementType)
      case ._RIGHT_CIRCULAR_CONE(let selection): return selection.bagValue(elementType:elementType)
      case ._RIGHT_CIRCULAR_CYLINDER(let selection): return selection.bagValue(elementType:elementType)
      case ._SPHERE(let selection): return selection.bagValue(elementType:elementType)
      case ._TORUS(let selection): return selection.bagValue(elementType:elementType)
      }
    }
    public func setValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.SET<ELEM>? {
      switch self {
      case ._BLOCK(let selection): return selection.setValue(elementType:elementType)
      case ._BOUNDED_PRIMITIVE_2D(let selection): return selection.setValue(elementType:elementType)
      case ._CYCLIDE_SEGMENT_SOLID(let selection): return selection.setValue(elementType:elementType)
      case ._ECCENTRIC_CONE(let selection): return selection.setValue(elementType:elementType)
      case ._ELLIPSOID(let selection): return selection.setValue(elementType:elementType)
      case ._FACETED_PRIMITIVE(let selection): return selection.setValue(elementType:elementType)
      case ._RECTANGULAR_PYRAMID(let selection): return selection.setValue(elementType:elementType)
      case ._RIGHT_ANGULAR_WEDGE(let selection): return selection.setValue(elementType:elementType)
      case ._RIGHT_CIRCULAR_CONE(let selection): return selection.setValue(elementType:elementType)
      case ._RIGHT_CIRCULAR_CYLINDER(let selection): return selection.setValue(elementType:elementType)
      case ._SPHERE(let selection): return selection.setValue(elementType:elementType)
      case ._TORUS(let selection): return selection.setValue(elementType:elementType)
      }
    }
    public func enumValue<ENUM:SDAIEnumerationType>(enumType:ENUM.Type) -> ENUM? {
      switch self {
      case ._BLOCK(let selection): return selection.enumValue(enumType:enumType)
      case ._BOUNDED_PRIMITIVE_2D(let selection): return selection.enumValue(enumType:enumType)
      case ._CYCLIDE_SEGMENT_SOLID(let selection): return selection.enumValue(enumType:enumType)
      case ._ECCENTRIC_CONE(let selection): return selection.enumValue(enumType:enumType)
      case ._ELLIPSOID(let selection): return selection.enumValue(enumType:enumType)
      case ._FACETED_PRIMITIVE(let selection): return selection.enumValue(enumType:enumType)
      case ._RECTANGULAR_PYRAMID(let selection): return selection.enumValue(enumType:enumType)
      case ._RIGHT_ANGULAR_WEDGE(let selection): return selection.enumValue(enumType:enumType)
      case ._RIGHT_CIRCULAR_CONE(let selection): return selection.enumValue(enumType:enumType)
      case ._RIGHT_CIRCULAR_CYLINDER(let selection): return selection.enumValue(enumType:enumType)
      case ._SPHERE(let selection): return selection.enumValue(enumType:enumType)
      case ._TORUS(let selection): return selection.enumValue(enumType:enumType)
      }
    }

    //MARK: SDAIUnderlyingType
    public typealias FundamentalType = Self
    public static var typeName: String = "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CSG_PRIMITIVE"
    public var asFundamentalType: FundamentalType { return self }

    //MARK: SDAIObservableAggregateElement
    public var entityReferences: AnySequence<SDAI.EntityReference> {
      switch self {
      case ._BLOCK(let entity): return entity.entityReferences
      case ._BOUNDED_PRIMITIVE_2D(let select): return select.entityReferences
      case ._CYCLIDE_SEGMENT_SOLID(let entity): return entity.entityReferences
      case ._ECCENTRIC_CONE(let entity): return entity.entityReferences
      case ._ELLIPSOID(let entity): return entity.entityReferences
      case ._FACETED_PRIMITIVE(let entity): return entity.entityReferences
      case ._RECTANGULAR_PYRAMID(let entity): return entity.entityReferences
      case ._RIGHT_ANGULAR_WEDGE(let entity): return entity.entityReferences
      case ._RIGHT_CIRCULAR_CONE(let entity): return entity.entityReferences
      case ._RIGHT_CIRCULAR_CYLINDER(let entity): return entity.entityReferences
      case ._SPHERE(let entity): return entity.entityReferences
      case ._TORUS(let entity): return entity.entityReferences
      }
    }

    public mutating func configure(with observer: SDAI.EntityReferenceObserver) {
      switch self {
      case ._BLOCK(let entity): 
        entity.configure(with: observer)
        self = ._BLOCK(entity)
      case ._BOUNDED_PRIMITIVE_2D(var select): 
        select.configure(with: observer)
        self = ._BOUNDED_PRIMITIVE_2D(select)
      case ._CYCLIDE_SEGMENT_SOLID(let entity): 
        entity.configure(with: observer)
        self = ._CYCLIDE_SEGMENT_SOLID(entity)
      case ._ECCENTRIC_CONE(let entity): 
        entity.configure(with: observer)
        self = ._ECCENTRIC_CONE(entity)
      case ._ELLIPSOID(let entity): 
        entity.configure(with: observer)
        self = ._ELLIPSOID(entity)
      case ._FACETED_PRIMITIVE(let entity): 
        entity.configure(with: observer)
        self = ._FACETED_PRIMITIVE(entity)
      case ._RECTANGULAR_PYRAMID(let entity): 
        entity.configure(with: observer)
        self = ._RECTANGULAR_PYRAMID(entity)
      case ._RIGHT_ANGULAR_WEDGE(let entity): 
        entity.configure(with: observer)
        self = ._RIGHT_ANGULAR_WEDGE(entity)
      case ._RIGHT_CIRCULAR_CONE(let entity): 
        entity.configure(with: observer)
        self = ._RIGHT_CIRCULAR_CONE(entity)
      case ._RIGHT_CIRCULAR_CYLINDER(let entity): 
        entity.configure(with: observer)
        self = ._RIGHT_CIRCULAR_CYLINDER(entity)
      case ._SPHERE(let entity): 
        entity.configure(with: observer)
        self = ._SPHERE(entity)
      case ._TORUS(let entity): 
        entity.configure(with: observer)
        self = ._TORUS(entity)
      }
    }

    public mutating func teardownObserver() {
      switch self {
      case ._BLOCK(let entity): 
        entity.teardownObserver()
        self = ._BLOCK(entity)
      case ._BOUNDED_PRIMITIVE_2D(var select): 
        select.teardownObserver()
        self = ._BOUNDED_PRIMITIVE_2D(select)
      case ._CYCLIDE_SEGMENT_SOLID(let entity): 
        entity.teardownObserver()
        self = ._CYCLIDE_SEGMENT_SOLID(entity)
      case ._ECCENTRIC_CONE(let entity): 
        entity.teardownObserver()
        self = ._ECCENTRIC_CONE(entity)
      case ._ELLIPSOID(let entity): 
        entity.teardownObserver()
        self = ._ELLIPSOID(entity)
      case ._FACETED_PRIMITIVE(let entity): 
        entity.teardownObserver()
        self = ._FACETED_PRIMITIVE(entity)
      case ._RECTANGULAR_PYRAMID(let entity): 
        entity.teardownObserver()
        self = ._RECTANGULAR_PYRAMID(entity)
      case ._RIGHT_ANGULAR_WEDGE(let entity): 
        entity.teardownObserver()
        self = ._RIGHT_ANGULAR_WEDGE(entity)
      case ._RIGHT_CIRCULAR_CONE(let entity): 
        entity.teardownObserver()
        self = ._RIGHT_CIRCULAR_CONE(entity)
      case ._RIGHT_CIRCULAR_CYLINDER(let entity): 
        entity.teardownObserver()
        self = ._RIGHT_CIRCULAR_CYLINDER(entity)
      case ._SPHERE(let entity): 
        entity.teardownObserver()
        self = ._SPHERE(entity)
      case ._TORUS(let entity): 
        entity.teardownObserver()
        self = ._TORUS(entity)
      }
    }

    //MARK: SDAIAggregationBehavior
    public var aggregationHiBound: Int? {
      switch self {
      case ._BOUNDED_PRIMITIVE_2D(let selection): return selection.aggregationHiBound
      default: return nil
      }
    }
    public var aggregationHiIndex: Int? {
      switch self {
      case ._BOUNDED_PRIMITIVE_2D(let selection): return selection.aggregationHiIndex
      default: return nil
      }
    }
    public var aggregationLoBound: Int? {
      switch self {
      case ._BOUNDED_PRIMITIVE_2D(let selection): return selection.aggregationLoBound
      default: return nil
      }
    }
    public var aggregationLoIndex: Int? {
      switch self {
      case ._BOUNDED_PRIMITIVE_2D(let selection): return selection.aggregationLoIndex
      default: return nil
      }
    }
    public var aggregationSize: Int? {
      switch self {
      case ._BOUNDED_PRIMITIVE_2D(let selection): return selection.aggregationSize
      default: return nil
      }
    }

    //MARK: WHERE RULE VALIDATION (SELECT TYPE)
    public static func validateWhereRules(instance:Self?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      var result: [SDAI.WhereLabel:SDAI.LOGICAL] = [:]
      switch instance {
      case ._BLOCK(let selectValue): result = eBLOCK.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\BLOCK")
      case ._BOUNDED_PRIMITIVE_2D(let selectValue): 
        result = sBOUNDED_PRIMITIVE_2D.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\BOUNDED_PRIMITIVE_2D")
      case ._CYCLIDE_SEGMENT_SOLID(let selectValue): 
        result = eCYCLIDE_SEGMENT_SOLID.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\CYCLIDE_SEGMENT_SOLID")
      case ._ECCENTRIC_CONE(let selectValue): 
        result = eECCENTRIC_CONE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\ECCENTRIC_CONE")
      case ._ELLIPSOID(let selectValue): result = eELLIPSOID.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\ELLIPSOID")
      case ._FACETED_PRIMITIVE(let selectValue): 
        result = eFACETED_PRIMITIVE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\FACETED_PRIMITIVE")
      case ._RECTANGULAR_PYRAMID(let selectValue): 
        result = eRECTANGULAR_PYRAMID.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\RECTANGULAR_PYRAMID")
      case ._RIGHT_ANGULAR_WEDGE(let selectValue): 
        result = eRIGHT_ANGULAR_WEDGE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\RIGHT_ANGULAR_WEDGE")
      case ._RIGHT_CIRCULAR_CONE(let selectValue): 
        result = eRIGHT_CIRCULAR_CONE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\RIGHT_CIRCULAR_CONE")
      case ._RIGHT_CIRCULAR_CYLINDER(let selectValue): 
        result = eRIGHT_CIRCULAR_CYLINDER.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\RIGHT_CIRCULAR_CYLINDER")
      case ._SPHERE(let selectValue): result = eSPHERE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\SPHERE")
      case ._TORUS(let selectValue): result = eTORUS.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\TORUS")
      case nil: break
      }

      return result
    }

  }

}


//MARK: - SELECT TYPE HIERARCHY
public protocol AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sCSG_PRIMITIVE__type: SDAISelectType {

  //MARK: GROUP REFERENCES
  var super_sBOUNDED_PRIMITIVE_2D: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sBOUNDED_PRIMITIVE_2D? { get }
  var super_eELLIPTIC_AREA: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eELLIPTIC_AREA? { get }
  var super_ePRIMITIVE_2D: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRIMITIVE_2D? { get }
  var super_ePOLYGONAL_AREA: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePOLYGONAL_AREA? { get }
  var super_eHALF_SPACE_2D: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eHALF_SPACE_2D? { get }
  var super_eRIGHT_CIRCULAR_CONE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eRIGHT_CIRCULAR_CONE? { get }
  var super_eCYCLIDE_SEGMENT_SOLID: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCYCLIDE_SEGMENT_SOLID? { get }
  var super_eMAPPED_ITEM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMAPPED_ITEM? { get }
  var super_eRECTANGULAR_AREA: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eRECTANGULAR_AREA? { get }
  var super_eFACETED_PRIMITIVE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFACETED_PRIMITIVE? { get }
  var super_eAREA_WITH_OUTER_BOUNDARY: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eAREA_WITH_OUTER_BOUNDARY? { get }
  var super_eREPRESENTATION_ITEM: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_ITEM? { get }
  var super_eRIGHT_ANGULAR_WEDGE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eRIGHT_ANGULAR_WEDGE? { get }
  var super_ePATH_AREA_WITH_PARAMETERS: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePATH_AREA_WITH_PARAMETERS? { get }
  var super_eRECTANGULAR_PYRAMID: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eRECTANGULAR_PYRAMID? { get }
  var super_eTORUS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eTORUS? { get }
  var super_eELLIPSOID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eELLIPSOID? { get }
  var super_eCIRCULAR_AREA: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCIRCULAR_AREA? { get }
  var super_eRIGHT_CIRCULAR_CYLINDER: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eRIGHT_CIRCULAR_CYLINDER? { get }
  var super_eCOMPLEX_AREA: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOMPLEX_AREA? { get }
  var super_eGEOMETRIC_REPRESENTATION_ITEM: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGEOMETRIC_REPRESENTATION_ITEM? { get }
  var super_eECCENTRIC_CONE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eECCENTRIC_CONE? { get }
  var super_eSPHERE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSPHERE? { get }
  var super_eBLOCK: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eBLOCK? { get }

  //MARK: ENTITY ATTRIBUTE REFERENCES
  var MAJOR_RADIUS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { get }
  var LTX: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE?  { get }
  var CENTRE: SDAI.GENERIC_ENTITY?  { get }
  var BOUNDS: (SDAI.LIST_UNIQUE<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCARTESIAN_POINT>/*[3:nil]*/ )?  { get }
  var X_OFFSET: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE?  { get }
  var TURN_ANGLE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { get }
  var MINOR_RADIUS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { get }
  var X: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { get }
  var Y: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { get }
  var Z: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { get }
  var AGREEMENT_FLAG: SDAI.BOOLEAN?  { get }
  var RADIUS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE?  { get }
  var POSITION: SDAI.GENERIC_ENTITY?  { get }
  var RATIO: SDAI.REAL?  { get }
  var BASE_CURVE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOMPOSITE_CURVE?  { get }
  var SEMI_ANGLE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { get }
  var POINTS: (SDAI.LIST_UNIQUE<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCARTESIAN_POINT>/*[4:nil]*/ )?  { get }
  var SEMI_AXIS_1: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { get }
  var CONE_ANGLE1: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { get }
  var SEMI_AXIS_3: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { get }
  var SEMI_AXIS_2: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { get }
  var CONE_ANGLE2: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { get }
  var Y_OFFSET: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE?  { get }
  var HEIGHT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { get }
  var MAPPING_SOURCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_MAP?  { get }
  var RADIUS1: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { get }
  var RADIUS2: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { get }
  var MAPPING_TARGET: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_ITEM?  { get }
  var NAME: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { get }
  var YLENGTH: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { get }
  var XLENGTH: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { get }
  var DIM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tDIMENSION_COUNT?  { get }
}

public protocol AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sCSG_PRIMITIVE__subtype: 
  AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sCSG_PRIMITIVE__type, SDAIDefinedType
where Supertype: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sCSG_PRIMITIVE__type
{}

public extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sCSG_PRIMITIVE__subtype {
  //MARK: CONSTRUCTORS
  init?(possiblyFrom complex: SDAI.ComplexEntity?) {
    self.init(fundamental: FundamentalType(possiblyFrom: complex))
  }

  init?<T: SDAIUnderlyingType>(possiblyFrom underlyingType: T?) {
    self.init(fundamental: FundamentalType(possiblyFrom: underlyingType))
  }

  init?<G: SDAIGenericType>(fromGeneric generic: G?) {
    self.init(fundamental: FundamentalType.convert(fromGeneric: generic))
  }

  //MARK: GROUP REFERENCES
  var super_sBOUNDED_PRIMITIVE_2D: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sBOUNDED_PRIMITIVE_2D? { rep.super_sBOUNDED_PRIMITIVE_2D }
  var super_eELLIPTIC_AREA: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eELLIPTIC_AREA? { rep.super_eELLIPTIC_AREA }
  var super_ePRIMITIVE_2D: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRIMITIVE_2D? { rep.super_ePRIMITIVE_2D }
  var super_ePOLYGONAL_AREA: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePOLYGONAL_AREA? { rep.super_ePOLYGONAL_AREA }
  var super_eHALF_SPACE_2D: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eHALF_SPACE_2D? { rep.super_eHALF_SPACE_2D }
  var super_eRIGHT_CIRCULAR_CONE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eRIGHT_CIRCULAR_CONE? { rep.super_eRIGHT_CIRCULAR_CONE }
  var super_eCYCLIDE_SEGMENT_SOLID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCYCLIDE_SEGMENT_SOLID? { rep.super_eCYCLIDE_SEGMENT_SOLID }
  var super_eMAPPED_ITEM: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMAPPED_ITEM? { rep.super_eMAPPED_ITEM }
  var super_eRECTANGULAR_AREA: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eRECTANGULAR_AREA? { rep.super_eRECTANGULAR_AREA }
  var super_eFACETED_PRIMITIVE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFACETED_PRIMITIVE? { rep.super_eFACETED_PRIMITIVE }
  var super_eAREA_WITH_OUTER_BOUNDARY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eAREA_WITH_OUTER_BOUNDARY? { rep.super_eAREA_WITH_OUTER_BOUNDARY }
  var super_eREPRESENTATION_ITEM: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_ITEM? { rep.super_eREPRESENTATION_ITEM }
  var super_eRIGHT_ANGULAR_WEDGE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eRIGHT_ANGULAR_WEDGE? { rep.super_eRIGHT_ANGULAR_WEDGE }
  var super_ePATH_AREA_WITH_PARAMETERS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePATH_AREA_WITH_PARAMETERS? { rep.super_ePATH_AREA_WITH_PARAMETERS }
  var super_eRECTANGULAR_PYRAMID: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eRECTANGULAR_PYRAMID? { rep.super_eRECTANGULAR_PYRAMID }
  var super_eTORUS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eTORUS? { rep.super_eTORUS }
  var super_eELLIPSOID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eELLIPSOID? { rep.super_eELLIPSOID }
  var super_eCIRCULAR_AREA: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCIRCULAR_AREA? { rep.super_eCIRCULAR_AREA }
  var super_eRIGHT_CIRCULAR_CYLINDER: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eRIGHT_CIRCULAR_CYLINDER? { rep.super_eRIGHT_CIRCULAR_CYLINDER }
  var super_eCOMPLEX_AREA: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOMPLEX_AREA? { rep.super_eCOMPLEX_AREA }
  var super_eGEOMETRIC_REPRESENTATION_ITEM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGEOMETRIC_REPRESENTATION_ITEM? { rep.super_eGEOMETRIC_REPRESENTATION_ITEM }
  var super_eECCENTRIC_CONE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eECCENTRIC_CONE? { rep.super_eECCENTRIC_CONE }
  var super_eSPHERE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSPHERE? { rep.super_eSPHERE }
  var super_eBLOCK: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eBLOCK? { rep.super_eBLOCK }

  //MARK: ENTITY ATTRIBUTE REFERENCES
  var MAJOR_RADIUS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { rep.MAJOR_RADIUS }
  var LTX: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE?  { rep.LTX }
  var CENTRE: SDAI.GENERIC_ENTITY?  { rep.CENTRE }
  var BOUNDS: (SDAI.LIST_UNIQUE<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCARTESIAN_POINT>/*[3:nil]*/ )?  { rep.BOUNDS }
  var X_OFFSET: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE?  { rep.X_OFFSET }
  var TURN_ANGLE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { rep.TURN_ANGLE }
  var MINOR_RADIUS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { rep.MINOR_RADIUS }
  var X: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { rep.X }
  var Y: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { rep.Y }
  var Z: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { rep.Z }
  var AGREEMENT_FLAG: SDAI.BOOLEAN?  { rep.AGREEMENT_FLAG }
  var RADIUS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE?  { rep.RADIUS }
  var POSITION: SDAI.GENERIC_ENTITY?  { rep.POSITION }
  var RATIO: SDAI.REAL?  { rep.RATIO }
  var BASE_CURVE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOMPOSITE_CURVE?  { rep.BASE_CURVE }
  var SEMI_ANGLE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { rep.SEMI_ANGLE }
  var POINTS: (SDAI.LIST_UNIQUE<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCARTESIAN_POINT>/*[4:nil]*/ )?  { rep.POINTS }
  var SEMI_AXIS_1: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { rep.SEMI_AXIS_1 }
  var CONE_ANGLE1: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { rep.CONE_ANGLE1 }
  var SEMI_AXIS_3: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { rep.SEMI_AXIS_3 }
  var SEMI_AXIS_2: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { rep.SEMI_AXIS_2 }
  var CONE_ANGLE2: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { rep.CONE_ANGLE2 }
  var Y_OFFSET: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE?  { rep.Y_OFFSET }
  var HEIGHT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { rep.HEIGHT }
  var MAPPING_SOURCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_MAP?  { rep.MAPPING_SOURCE }
  var RADIUS1: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { rep.RADIUS1 }
  var RADIUS2: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { rep.RADIUS2 }
  var MAPPING_TARGET: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_ITEM?  { rep.MAPPING_TARGET }
  var NAME: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { rep.NAME }
  var YLENGTH: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { rep.YLENGTH }
  var XLENGTH: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { rep.XLENGTH }
  var DIM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tDIMENSION_COUNT?  { rep.DIM }
}

