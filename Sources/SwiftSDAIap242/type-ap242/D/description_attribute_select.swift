/* file: description_attribute_select.swift 	 generated: Mon Jan  3 16:32:52 2022 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.1, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -TYPE DEFINITION in EXPRESS
/*
  TYPE description_attribute_select = SELECT
    ( action_request_solution (*ENTITY*),
     application_context (*ENTITY*),
     approval_role (*ENTITY*),
     configuration_design (*ENTITY*),
     context_dependent_shape_representation (*ENTITY*),
     date_role (*ENTITY*),
     date_time_role (*ENTITY*),
     effectivity (*ENTITY*),
     external_source (*ENTITY*),
     organizational_project (*ENTITY*),
     organization_role (*ENTITY*),
     person_and_organization (*ENTITY*),
     person_and_organization_role (*ENTITY*),
     property_definition_representation (*ENTITY*),
     representation (*ENTITY*) );
  END_TYPE; -- description_attribute_select (line:2161 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES FOR SELECT
/*
  action_request_solution (*ENTITY*):
  ATTR:  request: versioned_action_request
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  method: action_method
  ATTR:  name: label *** Multiple Select Case Sources ***

  application_context (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  context_elements: SET [1 : ?] OF application_context_element
  ATTR:  application: label
  ATTR:  id: identifier *** Multiple Select Case Sources ***

  approval_role (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  role: label

  configuration_design (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  design: configuration_design_item
  ATTR:  configuration: configuration_item *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  context_dependent_shape_representation (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  represented_product_relation: product_definition_shape
  ATTR:  representation_relation: shape_representation_relationship
  ATTR:  name: label *** Multiple Select Case Sources ***

  date_role (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  date_time_role (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  effectivity (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  effectivity_lot_id: identifier
  ATTR:  effectivity_end_date: date_time_or_event_occurrence
  ATTR:  effectivity_lot_size: measure_with_unit
  ATTR:  effectivity_period: time_interval
  ATTR:  effectivity_start_date: date_time_or_event_occurrence
  ATTR:  effectivity_end_id: identifier
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  effectivity_start_id: identifier
  ATTR:  configuration: configuration_design *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***
  ATTR:  usage: product_definition_relationship

  external_source (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  source_id: source_item

  organizational_project (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  responsible_organizations: SET [1 : ?] OF organization
  ATTR:  name: label *** Multiple Select Case Sources ***

  organization_role (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  person_and_organization (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  the_person: person
  ATTR:  the_organization: organization
  ATTR:  name: label *** Multiple Select Case Sources ***

  person_and_organization_role (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  property_definition_representation (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  dependent_environment: data_environment
  ATTR:  used_representation: representation
  ATTR:  base: (AMBIGUOUS (CASE LEVEL))
  ATTR:  definition: represented_definition
  ATTR:  name: label *** Multiple Select Case Sources ***

  representation (*ENTITY*):
  ATTR:  criteria_inspected: (AMBIGUOUS (CASE LEVEL))
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  controlling_joints: (AMBIGUOUS (CASE LEVEL))
  ATTR:  character_box: planar_extent
  ATTR:  parent: (AMBIGUOUS (CASE LEVEL))
  ATTR:  cm_link: variational_current_representation_relationship
  ATTR:  items: SET [1 : ?] OF representation_item
  ATTR:  outlines: SET [1 : ?] OF annotation_fill_area
  ATTR:  required_general_accuracy: SET [1 : ?] OF shape_measurement_accuracy
  ATTR:  associated_shape_representation: SET [0 : 1] OF kinematic_link_representation_association
  ATTR:  baseline_ratio: ratio_measure
  ATTR:  revision_identifier: identifier
  ATTR:  size: presentation_size
  ATTR:  tessellation_accuracy_parameters: SET [1 : ?] OF tessellation_accuracy_parameter_item
  ATTR:  represented_joints: SET [1 : ?] OF kinematic_joint
  ATTR:  box_height: length_measure
  ATTR:  strokes: SET [1 : ?] OF curve
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  applied_general_accuracy: SET [1 : ?] OF shape_measurement_accuracy
  ATTR:  context_of_items: representation_context
  ATTR:  neutral_sketch_semantics: curves_or_area
  ATTR:  represented_link: kinematic_link
  ATTR:  represented_topology: kinematic_topology_representation_select
  ATTR:  uncertainty: SET [1 : ?] OF uncertainty_measure_with_unit
  ATTR:  name: label *** Multiple Select Case Sources ***
  ATTR:  represented_mechanism: mechanism_representation

*/

/** SELECT type
- EXPRESS:
```express
  TYPE description_attribute_select = SELECT
    ( action_request_solution (*ENTITY*),
     application_context (*ENTITY*),
     approval_role (*ENTITY*),
     configuration_design (*ENTITY*),
     context_dependent_shape_representation (*ENTITY*),
     date_role (*ENTITY*),
     date_time_role (*ENTITY*),
     effectivity (*ENTITY*),
     external_source (*ENTITY*),
     organizational_project (*ENTITY*),
     organization_role (*ENTITY*),
     person_and_organization (*ENTITY*),
     person_and_organization_role (*ENTITY*),
     property_definition_representation (*ENTITY*),
     representation (*ENTITY*) );
  END_TYPE; -- description_attribute_select (line:2161 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public enum sDESCRIPTION_ATTRIBUTE_SELECT : SDAIValue, AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sDESCRIPTION_ATTRIBUTE_SELECT__type {

    /// SELECT case ``eACTION_REQUEST_SOLUTION`` (ENTITY) in ``sDESCRIPTION_ATTRIBUTE_SELECT``
    case _ACTION_REQUEST_SOLUTION(eACTION_REQUEST_SOLUTION)	// (ENTITY)

    /// SELECT case ``eAPPLICATION_CONTEXT`` (ENTITY) in ``sDESCRIPTION_ATTRIBUTE_SELECT``
    case _APPLICATION_CONTEXT(eAPPLICATION_CONTEXT)	// (ENTITY)

    /// SELECT case ``eAPPROVAL_ROLE`` (ENTITY) in ``sDESCRIPTION_ATTRIBUTE_SELECT``
    case _APPROVAL_ROLE(eAPPROVAL_ROLE)	// (ENTITY)

    /// SELECT case ``eCONFIGURATION_DESIGN`` (ENTITY) in ``sDESCRIPTION_ATTRIBUTE_SELECT``
    case _CONFIGURATION_DESIGN(eCONFIGURATION_DESIGN)	// (ENTITY)

    /// SELECT case ``eCONTEXT_DEPENDENT_SHAPE_REPRESENTATION`` (ENTITY) in ``sDESCRIPTION_ATTRIBUTE_SELECT``
    case _CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(eCONTEXT_DEPENDENT_SHAPE_REPRESENTATION)	// (ENTITY)

    /// SELECT case ``eDATE_ROLE`` (ENTITY) in ``sDESCRIPTION_ATTRIBUTE_SELECT``
    case _DATE_ROLE(eDATE_ROLE)	// (ENTITY)

    /// SELECT case ``eDATE_TIME_ROLE`` (ENTITY) in ``sDESCRIPTION_ATTRIBUTE_SELECT``
    case _DATE_TIME_ROLE(eDATE_TIME_ROLE)	// (ENTITY)

    /// SELECT case ``eEFFECTIVITY`` (ENTITY) in ``sDESCRIPTION_ATTRIBUTE_SELECT``
    case _EFFECTIVITY(eEFFECTIVITY)	// (ENTITY)

    /// SELECT case ``eEXTERNAL_SOURCE`` (ENTITY) in ``sDESCRIPTION_ATTRIBUTE_SELECT``
    case _EXTERNAL_SOURCE(eEXTERNAL_SOURCE)	// (ENTITY)

    /// SELECT case ``eORGANIZATIONAL_PROJECT`` (ENTITY) in ``sDESCRIPTION_ATTRIBUTE_SELECT``
    case _ORGANIZATIONAL_PROJECT(eORGANIZATIONAL_PROJECT)	// (ENTITY)

    /// SELECT case ``eORGANIZATION_ROLE`` (ENTITY) in ``sDESCRIPTION_ATTRIBUTE_SELECT``
    case _ORGANIZATION_ROLE(eORGANIZATION_ROLE)	// (ENTITY)

    /// SELECT case ``ePERSON_AND_ORGANIZATION`` (ENTITY) in ``sDESCRIPTION_ATTRIBUTE_SELECT``
    case _PERSON_AND_ORGANIZATION(ePERSON_AND_ORGANIZATION)	// (ENTITY)

    /// SELECT case ``ePERSON_AND_ORGANIZATION_ROLE`` (ENTITY) in ``sDESCRIPTION_ATTRIBUTE_SELECT``
    case _PERSON_AND_ORGANIZATION_ROLE(ePERSON_AND_ORGANIZATION_ROLE)	// (ENTITY)

    /// SELECT case ``ePROPERTY_DEFINITION_REPRESENTATION`` (ENTITY) in ``sDESCRIPTION_ATTRIBUTE_SELECT``
    case _PROPERTY_DEFINITION_REPRESENTATION(ePROPERTY_DEFINITION_REPRESENTATION)	// (ENTITY)

    /// SELECT case ``eREPRESENTATION`` (ENTITY) in ``sDESCRIPTION_ATTRIBUTE_SELECT``
    case _REPRESENTATION(eREPRESENTATION)	// (ENTITY)

    //MARK: - CONSTRUCTORS
    public init(fundamental: FundamentalType) { self = fundamental }

    public init?<T: SDAIUnderlyingType>(possiblyFrom underlyingType: T?){
      return nil
    }

    public init?(possiblyFrom complex: SDAI.ComplexEntity?) {
      guard let complex = complex else { return nil }

      if let base = complex.entityReference(eACTION_REQUEST_SOLUTION.self) {self = ._ACTION_REQUEST_SOLUTION(base) }
      else if let base = complex.entityReference(eAPPLICATION_CONTEXT.self) {self = ._APPLICATION_CONTEXT(base) }
      else if let base = complex.entityReference(eAPPROVAL_ROLE.self) {self = ._APPROVAL_ROLE(base) }
      else if let base = complex.entityReference(eCONFIGURATION_DESIGN.self) {self = ._CONFIGURATION_DESIGN(base) }
      else if let base = complex.entityReference(eCONTEXT_DEPENDENT_SHAPE_REPRESENTATION.self) {self = ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(base) }
      else if let base = complex.entityReference(eDATE_ROLE.self) {self = ._DATE_ROLE(base) }
      else if let base = complex.entityReference(eDATE_TIME_ROLE.self) {self = ._DATE_TIME_ROLE(base) }
      else if let base = complex.entityReference(eEFFECTIVITY.self) {self = ._EFFECTIVITY(base) }
      else if let base = complex.entityReference(eEXTERNAL_SOURCE.self) {self = ._EXTERNAL_SOURCE(base) }
      else if let base = complex.entityReference(eORGANIZATIONAL_PROJECT.self) {self = ._ORGANIZATIONAL_PROJECT(base) }
      else if let base = complex.entityReference(eORGANIZATION_ROLE.self) {self = ._ORGANIZATION_ROLE(base) }
      else if let base = complex.entityReference(ePERSON_AND_ORGANIZATION.self) {self = ._PERSON_AND_ORGANIZATION(base) }
      else if let base = complex.entityReference(ePERSON_AND_ORGANIZATION_ROLE.self) {self = ._PERSON_AND_ORGANIZATION_ROLE(base) }
      else if let base = complex.entityReference(ePROPERTY_DEFINITION_REPRESENTATION.self) {self = ._PROPERTY_DEFINITION_REPRESENTATION(base) }
      else if let base = complex.entityReference(eREPRESENTATION.self) {self = ._REPRESENTATION(base) }
      else { return nil }
    }

    public init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let select = generic else { return nil }

      if let fundamental = select as? Self {
        self.init(fundamental: fundamental)
      }
      else if let base = eACTION_REQUEST_SOLUTION.convert(fromGeneric: select) {
        self = ._ACTION_REQUEST_SOLUTION(base)
      }
      else if let base = eAPPLICATION_CONTEXT.convert(fromGeneric: select) {
        self = ._APPLICATION_CONTEXT(base)
      }
      else if let base = eAPPROVAL_ROLE.convert(fromGeneric: select) {
        self = ._APPROVAL_ROLE(base)
      }
      else if let base = eCONFIGURATION_DESIGN.convert(fromGeneric: select) {
        self = ._CONFIGURATION_DESIGN(base)
      }
      else if let base = eCONTEXT_DEPENDENT_SHAPE_REPRESENTATION.convert(fromGeneric: select) {
        self = ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(base)
      }
      else if let base = eDATE_ROLE.convert(fromGeneric: select) {
        self = ._DATE_ROLE(base)
      }
      else if let base = eDATE_TIME_ROLE.convert(fromGeneric: select) {
        self = ._DATE_TIME_ROLE(base)
      }
      else if let base = eEFFECTIVITY.convert(fromGeneric: select) {
        self = ._EFFECTIVITY(base)
      }
      else if let base = eEXTERNAL_SOURCE.convert(fromGeneric: select) {
        self = ._EXTERNAL_SOURCE(base)
      }
      else if let base = eORGANIZATIONAL_PROJECT.convert(fromGeneric: select) {
        self = ._ORGANIZATIONAL_PROJECT(base)
      }
      else if let base = eORGANIZATION_ROLE.convert(fromGeneric: select) {
        self = ._ORGANIZATION_ROLE(base)
      }
      else if let base = ePERSON_AND_ORGANIZATION.convert(fromGeneric: select) {
        self = ._PERSON_AND_ORGANIZATION(base)
      }
      else if let base = ePERSON_AND_ORGANIZATION_ROLE.convert(fromGeneric: select) {
        self = ._PERSON_AND_ORGANIZATION_ROLE(base)
      }
      else if let base = ePROPERTY_DEFINITION_REPRESENTATION.convert(fromGeneric: select) {
        self = ._PROPERTY_DEFINITION_REPRESENTATION(base)
      }
      else if let base = eREPRESENTATION.convert(fromGeneric: select) {
        self = ._REPRESENTATION(base)
      }
      else { return nil }
    }

    // InitializableByP21Parameter
    public static var bareTypeName: String = "DESCRIPTION_ATTRIBUTE_SELECT"

    public init?(p21typedParam: P21Decode.ExchangeStructure.TypedParameter, from exchangeStructure: P21Decode.ExchangeStructure) {
      guard let keyword = p21typedParam.keyword.asStandardKeyword else { exchangeStructure.error = "unexpected p21parameter(\(p21typedParam)) while resolving \(Self.bareTypeName) select value"; return nil }

      switch(keyword) {
      default:
        exchangeStructure.error = "unexpected p21parameter(\(p21typedParam)) while resolving \(Self.bareTypeName) select value"
        return nil
      }
    }

    public init?(p21untypedParam: P21Decode.ExchangeStructure.UntypedParameter, from exchangeStructure: P21Decode.ExchangeStructure) {
      switch p21untypedParam {
      case .rhsOccurenceName(let rhsname):
        switch rhsname {
        case .constantEntityName(let name):
          guard let entity = exchangeStructure.resolve(constantEntityName: name) else {exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) instance"); return nil }
          self.init(possiblyFrom: entity.complexEntity)

        case .entityInstanceName(let name):
          guard let complex = exchangeStructure.resolve(entityInstanceName: name) else {exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) instance"); return nil }
          self.init(possiblyFrom: complex)

        default:
          exchangeStructure.error = "unexpected p21parameter(\(p21untypedParam)) while resolving \(Self.bareTypeName) select instance"
          return nil
        }

      default:
        exchangeStructure.error = "unexpected p21parameter(\(p21untypedParam)) while resolving \(Self.bareTypeName) select instance"
        return nil
      }
    }

    public init?(p21omittedParamfrom exchangeStructure: P21Decode.ExchangeStructure) {
      return nil
    }


    //MARK: - ENTITY UNDERLYING TYPE REFERENCES
    public var super_eREPRESENTATION: eREPRESENTATION? {
      switch self {
      case ._REPRESENTATION(let entity): return entity
      default: return nil
      }
    }

    public var super_ePERSON_AND_ORGANIZATION_ROLE: ePERSON_AND_ORGANIZATION_ROLE? {
      switch self {
      case ._PERSON_AND_ORGANIZATION_ROLE(let entity): return entity
      default: return nil
      }
    }

    public var super_eAPPROVAL_ROLE: eAPPROVAL_ROLE? {
      switch self {
      case ._APPROVAL_ROLE(let entity): return entity
      default: return nil
      }
    }

    public var super_ePROPERTY_DEFINITION_REPRESENTATION: ePROPERTY_DEFINITION_REPRESENTATION? {
      switch self {
      case ._PROPERTY_DEFINITION_REPRESENTATION(let entity): return entity
      default: return nil
      }
    }

    public var super_eDATE_ROLE: eDATE_ROLE? {
      switch self {
      case ._DATE_ROLE(let entity): return entity
      default: return nil
      }
    }

    public var super_eCONFIGURATION_DESIGN: eCONFIGURATION_DESIGN? {
      switch self {
      case ._CONFIGURATION_DESIGN(let entity): return entity
      default: return nil
      }
    }

    public var super_eAPPLICATION_CONTEXT: eAPPLICATION_CONTEXT? {
      switch self {
      case ._APPLICATION_CONTEXT(let entity): return entity
      default: return nil
      }
    }

    public var super_eORGANIZATION_ROLE: eORGANIZATION_ROLE? {
      switch self {
      case ._ORGANIZATION_ROLE(let entity): return entity
      default: return nil
      }
    }

    public var super_eORGANIZATIONAL_PROJECT: eORGANIZATIONAL_PROJECT? {
      switch self {
      case ._ORGANIZATIONAL_PROJECT(let entity): return entity
      default: return nil
      }
    }

    public var super_eEFFECTIVITY: eEFFECTIVITY? {
      switch self {
      case ._EFFECTIVITY(let entity): return entity
      default: return nil
      }
    }

    public var super_eEXTERNAL_SOURCE: eEXTERNAL_SOURCE? {
      switch self {
      case ._EXTERNAL_SOURCE(let entity): return entity
      default: return nil
      }
    }

    public var super_eCONTEXT_DEPENDENT_SHAPE_REPRESENTATION: eCONTEXT_DEPENDENT_SHAPE_REPRESENTATION? {
      switch self {
      case ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(let entity): return entity
      default: return nil
      }
    }

    public var super_eACTION_REQUEST_SOLUTION: eACTION_REQUEST_SOLUTION? {
      switch self {
      case ._ACTION_REQUEST_SOLUTION(let entity): return entity
      default: return nil
      }
    }

    public var super_ePERSON_AND_ORGANIZATION: ePERSON_AND_ORGANIZATION? {
      switch self {
      case ._PERSON_AND_ORGANIZATION(let entity): return entity
      default: return nil
      }
    }

    public var super_eDATE_TIME_ROLE: eDATE_TIME_ROLE? {
      switch self {
      case ._DATE_TIME_ROLE(let entity): return entity
      default: return nil
      }
    }


    //MARK: - ENTITY ATTRIBUTE REFERENCES
    /// attribute of SELECT type ``sDESCRIPTION_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eACTION_REQUEST_SOLUTION`` )
    public var REQUEST: eVERSIONED_ACTION_REQUEST?  {
      switch self {
      case ._ACTION_REQUEST_SOLUTION(let entity): return entity.REQUEST
      default: return nil
      }
    }

    /// attribute of SELECT type ``sDESCRIPTION_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eACTION_REQUEST_SOLUTION`` )
    /// - origin: ENTITY( ``eAPPLICATION_CONTEXT`` )
    /// - origin: ENTITY( ``eAPPROVAL_ROLE`` )
    /// - origin: ENTITY( ``eCONFIGURATION_DESIGN`` )
    /// - origin: ENTITY( ``eCONTEXT_DEPENDENT_SHAPE_REPRESENTATION`` )
    /// - origin: ENTITY( ``eDATE_ROLE`` )
    /// - origin: ENTITY( ``eDATE_TIME_ROLE`` )
    /// - origin: ENTITY( ``eEFFECTIVITY`` )
    /// - origin: ENTITY( ``eEXTERNAL_SOURCE`` )
    /// - origin: ENTITY( ``eORGANIZATIONAL_PROJECT`` )
    /// - origin: ENTITY( ``eORGANIZATION_ROLE`` )
    /// - origin: ENTITY( ``ePERSON_AND_ORGANIZATION`` )
    /// - origin: ENTITY( ``ePERSON_AND_ORGANIZATION_ROLE`` )
    /// - origin: ENTITY( ``ePROPERTY_DEFINITION_REPRESENTATION`` )
    /// - origin: ENTITY( ``eREPRESENTATION`` )
    public var DESCRIPTION: tTEXT?  {
      switch self {
      case ._ACTION_REQUEST_SOLUTION(let entity): return entity.DESCRIPTION
      case ._APPLICATION_CONTEXT(let entity): return entity.DESCRIPTION
      case ._APPROVAL_ROLE(let entity): return entity.DESCRIPTION
      case ._CONFIGURATION_DESIGN(let entity): return entity.DESCRIPTION
      case ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(let entity): return entity.DESCRIPTION
      case ._DATE_ROLE(let entity): return entity.DESCRIPTION
      case ._DATE_TIME_ROLE(let entity): return entity.DESCRIPTION
      case ._EFFECTIVITY(let entity): return entity.DESCRIPTION
      case ._EXTERNAL_SOURCE(let entity): return entity.DESCRIPTION
      case ._ORGANIZATIONAL_PROJECT(let entity): return entity.DESCRIPTION
      case ._ORGANIZATION_ROLE(let entity): return entity.DESCRIPTION
      case ._PERSON_AND_ORGANIZATION(let entity): return entity.DESCRIPTION
      case ._PERSON_AND_ORGANIZATION_ROLE(let entity): return entity.DESCRIPTION
      case ._PROPERTY_DEFINITION_REPRESENTATION(let entity): return entity.DESCRIPTION
      case ._REPRESENTATION(let entity): return entity.DESCRIPTION
      }
    }

    /// attribute of SELECT type ``sDESCRIPTION_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``ePROPERTY_DEFINITION_REPRESENTATION`` )
    public var DEPENDENT_ENVIRONMENT: eDATA_ENVIRONMENT?  {
      switch self {
      case ._PROPERTY_DEFINITION_REPRESENTATION(let entity): return entity.DEPENDENT_ENVIRONMENT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sDESCRIPTION_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eACTION_REQUEST_SOLUTION`` )
    public var METHOD: eACTION_METHOD?  {
      switch self {
      case ._ACTION_REQUEST_SOLUTION(let entity): return entity.METHOD
      default: return nil
      }
    }

    /// attribute of SELECT type ``sDESCRIPTION_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eAPPROVAL_ROLE`` )
    public var ROLE: tLABEL?  {
      switch self {
      case ._APPROVAL_ROLE(let entity): return entity.ROLE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sDESCRIPTION_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eREPRESENTATION`` )
    public var CHARACTER_BOX: ePLANAR_EXTENT?  {
      switch self {
      case ._REPRESENTATION(let entity): return entity.CHARACTER_BOX
      default: return nil
      }
    }

    /// attribute of SELECT type ``sDESCRIPTION_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eCONFIGURATION_DESIGN`` )
    public var DESIGN: sCONFIGURATION_DESIGN_ITEM?  {
      switch self {
      case ._CONFIGURATION_DESIGN(let entity): return entity.DESIGN
      default: return nil
      }
    }

    /// attribute of SELECT type ``sDESCRIPTION_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eREPRESENTATION`` )
    public var CM_LINK: eVARIATIONAL_CURRENT_REPRESENTATION_RELATIONSHIP?  {
      switch self {
      case ._REPRESENTATION(let entity): return entity.CM_LINK
      default: return nil
      }
    }

    /// attribute of SELECT type ``sDESCRIPTION_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eREPRESENTATION`` )
    public var ITEMS: (SDAI.SET<eREPRESENTATION_ITEM>/*[1:nil]*/ )?  {
      switch self {
      case ._REPRESENTATION(let entity): return entity.ITEMS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sDESCRIPTION_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eREPRESENTATION`` )
    public var OUTLINES: (SDAI.SET<eANNOTATION_FILL_AREA>/*[1:nil]*/ )?  {
      switch self {
      case ._REPRESENTATION(let entity): return entity.OUTLINES
      default: return nil
      }
    }

    /// attribute of SELECT type ``sDESCRIPTION_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eREPRESENTATION`` )
    public var REQUIRED_GENERAL_ACCURACY: (SDAI.SET<eSHAPE_MEASUREMENT_ACCURACY>/*[1:nil]*/ )?  {
      switch self {
      case ._REPRESENTATION(let entity): return entity.REQUIRED_GENERAL_ACCURACY
      default: return nil
      }
    }

    /// attribute of SELECT type ``sDESCRIPTION_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eEFFECTIVITY`` )
    public var EFFECTIVITY_LOT_ID: tIDENTIFIER?  {
      switch self {
      case ._EFFECTIVITY(let entity): return entity.EFFECTIVITY_LOT_ID
      default: return nil
      }
    }

    /// attribute of SELECT type ``sDESCRIPTION_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``ePROPERTY_DEFINITION_REPRESENTATION`` )
    public var USED_REPRESENTATION: eREPRESENTATION?  {
      switch self {
      case ._PROPERTY_DEFINITION_REPRESENTATION(let entity): return entity.USED_REPRESENTATION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sDESCRIPTION_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eREPRESENTATION`` )
    public var ASSOCIATED_SHAPE_REPRESENTATION: (SDAI.SET<eKINEMATIC_LINK_REPRESENTATION_ASSOCIATION>/*[0:1]*/ )?  {
      switch self {
      case ._REPRESENTATION(let entity): return entity.ASSOCIATED_SHAPE_REPRESENTATION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sDESCRIPTION_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eEFFECTIVITY`` )
    public var EFFECTIVITY_END_DATE: sDATE_TIME_OR_EVENT_OCCURRENCE?  {
      switch self {
      case ._EFFECTIVITY(let entity): return entity.EFFECTIVITY_END_DATE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sDESCRIPTION_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eEFFECTIVITY`` )
    public var EFFECTIVITY_LOT_SIZE: eMEASURE_WITH_UNIT?  {
      switch self {
      case ._EFFECTIVITY(let entity): return entity.EFFECTIVITY_LOT_SIZE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sDESCRIPTION_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eREPRESENTATION`` )
    public var BASELINE_RATIO: tRATIO_MEASURE?  {
      switch self {
      case ._REPRESENTATION(let entity): return entity.BASELINE_RATIO
      default: return nil
      }
    }

    /// attribute of SELECT type ``sDESCRIPTION_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``ePERSON_AND_ORGANIZATION`` )
    public var THE_PERSON: ePERSON?  {
      switch self {
      case ._PERSON_AND_ORGANIZATION(let entity): return entity.THE_PERSON
      default: return nil
      }
    }

    /// attribute of SELECT type ``sDESCRIPTION_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eREPRESENTATION`` )
    public var REVISION_IDENTIFIER: tIDENTIFIER?  {
      switch self {
      case ._REPRESENTATION(let entity): return entity.REVISION_IDENTIFIER
      default: return nil
      }
    }

    /// attribute of SELECT type ``sDESCRIPTION_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eREPRESENTATION`` )
    public var SIZE: ePRESENTATION_SIZE?  {
      switch self {
      case ._REPRESENTATION(let entity): return entity.SIZE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sDESCRIPTION_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eAPPLICATION_CONTEXT`` )
    public var CONTEXT_ELEMENTS: (SDAI.SET<eAPPLICATION_CONTEXT_ELEMENT>/*[1:nil]*/ )?  {
      switch self {
      case ._APPLICATION_CONTEXT(let entity): return entity.CONTEXT_ELEMENTS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sDESCRIPTION_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eREPRESENTATION`` )
    public var TESSELLATION_ACCURACY_PARAMETERS: (SDAI.SET<sTESSELLATION_ACCURACY_PARAMETER_ITEM>/*[1:nil]*/ )?  {
      switch self {
      case ._REPRESENTATION(let entity): return entity.TESSELLATION_ACCURACY_PARAMETERS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sDESCRIPTION_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eREPRESENTATION`` )
    public var REPRESENTED_JOINTS: (SDAI.SET<eKINEMATIC_JOINT>/*[1:nil]*/ )?  {
      switch self {
      case ._REPRESENTATION(let entity): return entity.REPRESENTED_JOINTS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sDESCRIPTION_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eEFFECTIVITY`` )
    public var EFFECTIVITY_PERIOD: eTIME_INTERVAL?  {
      switch self {
      case ._EFFECTIVITY(let entity): return entity.EFFECTIVITY_PERIOD
      default: return nil
      }
    }

    /// attribute of SELECT type ``sDESCRIPTION_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eEFFECTIVITY`` )
    public var EFFECTIVITY_START_DATE: sDATE_TIME_OR_EVENT_OCCURRENCE?  {
      switch self {
      case ._EFFECTIVITY(let entity): return entity.EFFECTIVITY_START_DATE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sDESCRIPTION_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eREPRESENTATION`` )
    public var BOX_HEIGHT: tLENGTH_MEASURE?  {
      switch self {
      case ._REPRESENTATION(let entity): return entity.BOX_HEIGHT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sDESCRIPTION_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eEFFECTIVITY`` )
    public var EFFECTIVITY_END_ID: tIDENTIFIER?  {
      switch self {
      case ._EFFECTIVITY(let entity): return entity.EFFECTIVITY_END_ID
      default: return nil
      }
    }

    /// attribute of SELECT type ``sDESCRIPTION_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``ePERSON_AND_ORGANIZATION`` )
    public var THE_ORGANIZATION: eORGANIZATION?  {
      switch self {
      case ._PERSON_AND_ORGANIZATION(let entity): return entity.THE_ORGANIZATION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sDESCRIPTION_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eREPRESENTATION`` )
    public var STROKES: (SDAI.SET<eCURVE>/*[1:nil]*/ )?  {
      switch self {
      case ._REPRESENTATION(let entity): return entity.STROKES
      default: return nil
      }
    }

    /// attribute of SELECT type ``sDESCRIPTION_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eCONTEXT_DEPENDENT_SHAPE_REPRESENTATION`` )
    public var REPRESENTED_PRODUCT_RELATION: ePRODUCT_DEFINITION_SHAPE?  {
      switch self {
      case ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(let entity): return entity.REPRESENTED_PRODUCT_RELATION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sDESCRIPTION_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eAPPLICATION_CONTEXT`` )
    public var APPLICATION: tLABEL?  {
      switch self {
      case ._APPLICATION_CONTEXT(let entity): return entity.APPLICATION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sDESCRIPTION_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eAPPLICATION_CONTEXT`` )
    /// - origin: ENTITY( ``eEFFECTIVITY`` )
    /// - origin: ENTITY( ``eORGANIZATIONAL_PROJECT`` )
    /// - origin: ENTITY( ``eREPRESENTATION`` )
    public var ID: tIDENTIFIER?  {
      switch self {
      case ._APPLICATION_CONTEXT(let entity): return entity.ID
      case ._EFFECTIVITY(let entity): return entity.ID
      case ._ORGANIZATIONAL_PROJECT(let entity): return entity.ID
      case ._REPRESENTATION(let entity): return entity.ID
      default: return nil
      }
    }

    /// attribute of SELECT type ``sDESCRIPTION_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eREPRESENTATION`` )
    public var APPLIED_GENERAL_ACCURACY: (SDAI.SET<eSHAPE_MEASUREMENT_ACCURACY>/*[1:nil]*/ )?  {
      switch self {
      case ._REPRESENTATION(let entity): return entity.APPLIED_GENERAL_ACCURACY
      default: return nil
      }
    }

    /// attribute of SELECT type ``sDESCRIPTION_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eREPRESENTATION`` )
    public var CONTEXT_OF_ITEMS: eREPRESENTATION_CONTEXT?  {
      switch self {
      case ._REPRESENTATION(let entity): return entity.CONTEXT_OF_ITEMS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sDESCRIPTION_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eORGANIZATIONAL_PROJECT`` )
    public var RESPONSIBLE_ORGANIZATIONS: (SDAI.SET<eORGANIZATION>/*[1:nil]*/ )?  {
      switch self {
      case ._ORGANIZATIONAL_PROJECT(let entity): return entity.RESPONSIBLE_ORGANIZATIONS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sDESCRIPTION_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eCONTEXT_DEPENDENT_SHAPE_REPRESENTATION`` )
    public var REPRESENTATION_RELATION: eSHAPE_REPRESENTATION_RELATIONSHIP?  {
      switch self {
      case ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(let entity): return entity.REPRESENTATION_RELATION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sDESCRIPTION_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eEFFECTIVITY`` )
    public var EFFECTIVITY_START_ID: tIDENTIFIER?  {
      switch self {
      case ._EFFECTIVITY(let entity): return entity.EFFECTIVITY_START_ID
      default: return nil
      }
    }

    /// attribute of SELECT type ``sDESCRIPTION_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eEXTERNAL_SOURCE`` )
    public var SOURCE_ID: sSOURCE_ITEM?  {
      switch self {
      case ._EXTERNAL_SOURCE(let entity): return entity.SOURCE_ID
      default: return nil
      }
    }

    /// attribute of SELECT type ``sDESCRIPTION_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eREPRESENTATION`` )
    public var NEUTRAL_SKETCH_SEMANTICS: nCURVES_OR_AREA?  {
      switch self {
      case ._REPRESENTATION(let entity): return entity.NEUTRAL_SKETCH_SEMANTICS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sDESCRIPTION_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eREPRESENTATION`` )
    public var REPRESENTED_LINK: eKINEMATIC_LINK?  {
      switch self {
      case ._REPRESENTATION(let entity): return entity.REPRESENTED_LINK
      default: return nil
      }
    }

    /// attribute of SELECT type ``sDESCRIPTION_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eREPRESENTATION`` )
    public var REPRESENTED_TOPOLOGY: sKINEMATIC_TOPOLOGY_REPRESENTATION_SELECT?  {
      switch self {
      case ._REPRESENTATION(let entity): return entity.REPRESENTED_TOPOLOGY
      default: return nil
      }
    }

    /// attribute of SELECT type ``sDESCRIPTION_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eREPRESENTATION`` )
    public var UNCERTAINTY: (SDAI.SET<eUNCERTAINTY_MEASURE_WITH_UNIT>/*[1:nil]*/ )?  {
      switch self {
      case ._REPRESENTATION(let entity): return entity.UNCERTAINTY
      default: return nil
      }
    }

    /// attribute of SELECT type ``sDESCRIPTION_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``ePROPERTY_DEFINITION_REPRESENTATION`` )
    public var DEFINITION: sREPRESENTED_DEFINITION?  {
      switch self {
      case ._PROPERTY_DEFINITION_REPRESENTATION(let entity): return entity.DEFINITION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sDESCRIPTION_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eCONFIGURATION_DESIGN`` )
    /// - origin: ENTITY( ``eEFFECTIVITY`` )
    public var CONFIGURATION: SDAI.GENERIC_ENTITY?  {
      switch self {
      case ._CONFIGURATION_DESIGN(let entity): return entity.CONFIGURATION
      case ._EFFECTIVITY(let entity): return entity.CONFIGURATION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sDESCRIPTION_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eACTION_REQUEST_SOLUTION`` )
    /// - origin: ENTITY( ``eCONFIGURATION_DESIGN`` )
    /// - origin: ENTITY( ``eCONTEXT_DEPENDENT_SHAPE_REPRESENTATION`` )
    /// - origin: ENTITY( ``eDATE_ROLE`` )
    /// - origin: ENTITY( ``eDATE_TIME_ROLE`` )
    /// - origin: ENTITY( ``eEFFECTIVITY`` )
    /// - origin: ENTITY( ``eORGANIZATIONAL_PROJECT`` )
    /// - origin: ENTITY( ``eORGANIZATION_ROLE`` )
    /// - origin: ENTITY( ``ePERSON_AND_ORGANIZATION`` )
    /// - origin: ENTITY( ``ePERSON_AND_ORGANIZATION_ROLE`` )
    /// - origin: ENTITY( ``ePROPERTY_DEFINITION_REPRESENTATION`` )
    /// - origin: ENTITY( ``eREPRESENTATION`` )
    public var NAME: tLABEL?  {
      switch self {
      case ._ACTION_REQUEST_SOLUTION(let entity): return entity.NAME
      case ._CONFIGURATION_DESIGN(let entity): return entity.NAME
      case ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(let entity): return entity.NAME
      case ._DATE_ROLE(let entity): return entity.NAME
      case ._DATE_TIME_ROLE(let entity): return entity.NAME
      case ._EFFECTIVITY(let entity): return entity.NAME
      case ._ORGANIZATIONAL_PROJECT(let entity): return entity.NAME
      case ._ORGANIZATION_ROLE(let entity): return entity.NAME
      case ._PERSON_AND_ORGANIZATION(let entity): return entity.NAME
      case ._PERSON_AND_ORGANIZATION_ROLE(let entity): return entity.NAME
      case ._PROPERTY_DEFINITION_REPRESENTATION(let entity): return entity.NAME
      case ._REPRESENTATION(let entity): return entity.NAME
      default: return nil
      }
    }

    /// attribute of SELECT type ``sDESCRIPTION_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eREPRESENTATION`` )
    public var REPRESENTED_MECHANISM: eMECHANISM_REPRESENTATION?  {
      switch self {
      case ._REPRESENTATION(let entity): return entity.REPRESENTED_MECHANISM
      default: return nil
      }
    }

    /// attribute of SELECT type ``sDESCRIPTION_ATTRIBUTE_SELECT``
    /// - origin: ENTITY( ``eEFFECTIVITY`` )
    public var USAGE: ePRODUCT_DEFINITION_RELATIONSHIP?  {
      switch self {
      case ._EFFECTIVITY(let entity): return entity.USAGE
      default: return nil
      }
    }


    //MARK: - SDAIValue
    public func isValueEqual<T: SDAIValue>(to rhs: T) -> Bool {
      switch self {
      case ._ACTION_REQUEST_SOLUTION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._APPLICATION_CONTEXT(let selection): return selection.value.isValueEqual(to: rhs)
      case ._APPROVAL_ROLE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._CONFIGURATION_DESIGN(let selection): return selection.value.isValueEqual(to: rhs)
      case ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._DATE_ROLE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._DATE_TIME_ROLE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._EFFECTIVITY(let selection): return selection.value.isValueEqual(to: rhs)
      case ._EXTERNAL_SOURCE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.value.isValueEqual(to: rhs)
      case ._ORGANIZATION_ROLE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PERSON_AND_ORGANIZATION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PERSON_AND_ORGANIZATION_ROLE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PROPERTY_DEFINITION_REPRESENTATION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._REPRESENTATION(let selection): return selection.value.isValueEqual(to: rhs)
      }
    }

    public func isValueEqualOptionally<T: SDAIValue>(to rhs: T?) -> Bool? {
      switch self {
      case ._ACTION_REQUEST_SOLUTION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._APPLICATION_CONTEXT(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._APPROVAL_ROLE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._CONFIGURATION_DESIGN(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._DATE_ROLE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._DATE_TIME_ROLE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._EFFECTIVITY(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._EXTERNAL_SOURCE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._ORGANIZATION_ROLE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PERSON_AND_ORGANIZATION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PERSON_AND_ORGANIZATION_ROLE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PROPERTY_DEFINITION_REPRESENTATION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._REPRESENTATION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      }
    }

    public func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      switch self {
      case ._ACTION_REQUEST_SOLUTION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._APPLICATION_CONTEXT(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._APPROVAL_ROLE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._CONFIGURATION_DESIGN(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._DATE_ROLE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._DATE_TIME_ROLE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._EFFECTIVITY(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._EXTERNAL_SOURCE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._ORGANIZATIONAL_PROJECT(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._ORGANIZATION_ROLE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PERSON_AND_ORGANIZATION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PERSON_AND_ORGANIZATION_ROLE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PROPERTY_DEFINITION_REPRESENTATION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._REPRESENTATION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      }
    }

    public func isValueEqual<T: SDAIValue>(to rhs: T, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      switch self {
      case ._ACTION_REQUEST_SOLUTION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._APPLICATION_CONTEXT(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._APPROVAL_ROLE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._CONFIGURATION_DESIGN(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._DATE_ROLE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._DATE_TIME_ROLE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._EFFECTIVITY(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._EXTERNAL_SOURCE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._ORGANIZATION_ROLE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PERSON_AND_ORGANIZATION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PERSON_AND_ORGANIZATION_ROLE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PROPERTY_DEFINITION_REPRESENTATION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._REPRESENTATION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      }
    }

    public func isValueEqualOptionally<T: SDAIValue>(to rhs: T?, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      switch self {
      case ._ACTION_REQUEST_SOLUTION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._APPLICATION_CONTEXT(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._APPROVAL_ROLE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._CONFIGURATION_DESIGN(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._DATE_ROLE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._DATE_TIME_ROLE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._EFFECTIVITY(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._EXTERNAL_SOURCE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._ORGANIZATION_ROLE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PERSON_AND_ORGANIZATION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PERSON_AND_ORGANIZATION_ROLE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PROPERTY_DEFINITION_REPRESENTATION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._REPRESENTATION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      }
    }


    //MARK: SDAIGenericTypeBase
    public func copy() -> Self {
      switch self {
      case ._ACTION_REQUEST_SOLUTION(let selection): return ._ACTION_REQUEST_SOLUTION(selection.copy())
      case ._APPLICATION_CONTEXT(let selection): return ._APPLICATION_CONTEXT(selection.copy())
      case ._APPROVAL_ROLE(let selection): return ._APPROVAL_ROLE(selection.copy())
      case ._CONFIGURATION_DESIGN(let selection): return ._CONFIGURATION_DESIGN(selection.copy())
      case ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(let selection): return ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(selection.copy())
      case ._DATE_ROLE(let selection): return ._DATE_ROLE(selection.copy())
      case ._DATE_TIME_ROLE(let selection): return ._DATE_TIME_ROLE(selection.copy())
      case ._EFFECTIVITY(let selection): return ._EFFECTIVITY(selection.copy())
      case ._EXTERNAL_SOURCE(let selection): return ._EXTERNAL_SOURCE(selection.copy())
      case ._ORGANIZATIONAL_PROJECT(let selection): return ._ORGANIZATIONAL_PROJECT(selection.copy())
      case ._ORGANIZATION_ROLE(let selection): return ._ORGANIZATION_ROLE(selection.copy())
      case ._PERSON_AND_ORGANIZATION(let selection): return ._PERSON_AND_ORGANIZATION(selection.copy())
      case ._PERSON_AND_ORGANIZATION_ROLE(let selection): return ._PERSON_AND_ORGANIZATION_ROLE(selection.copy())
      case ._PROPERTY_DEFINITION_REPRESENTATION(let selection): return ._PROPERTY_DEFINITION_REPRESENTATION(selection.copy())
      case ._REPRESENTATION(let selection): return ._REPRESENTATION(selection.copy())
      }
    }

    //MARK: SDAIGenericType
    public var typeMembers: Set<SDAI.STRING> {
      var members: Set<SDAI.STRING> = [SDAI.STRING(Self.typeName)]
      switch self {
      case ._ACTION_REQUEST_SOLUTION(let selection): members.formUnion(selection.typeMembers)
      case ._APPLICATION_CONTEXT(let selection): members.formUnion(selection.typeMembers)
      case ._APPROVAL_ROLE(let selection): members.formUnion(selection.typeMembers)
      case ._CONFIGURATION_DESIGN(let selection): members.formUnion(selection.typeMembers)
      case ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(let selection): members.formUnion(selection.typeMembers)
      case ._DATE_ROLE(let selection): members.formUnion(selection.typeMembers)
      case ._DATE_TIME_ROLE(let selection): members.formUnion(selection.typeMembers)
      case ._EFFECTIVITY(let selection): members.formUnion(selection.typeMembers)
      case ._EXTERNAL_SOURCE(let selection): members.formUnion(selection.typeMembers)
      case ._ORGANIZATIONAL_PROJECT(let selection): members.formUnion(selection.typeMembers)
      case ._ORGANIZATION_ROLE(let selection): members.formUnion(selection.typeMembers)
      case ._PERSON_AND_ORGANIZATION(let selection): members.formUnion(selection.typeMembers)
      case ._PERSON_AND_ORGANIZATION_ROLE(let selection): members.formUnion(selection.typeMembers)
      case ._PROPERTY_DEFINITION_REPRESENTATION(let selection): members.formUnion(selection.typeMembers)
      case ._REPRESENTATION(let selection): members.formUnion(selection.typeMembers)
      }
      return members
    }

    public var entityReference: SDAI.EntityReference? {
      switch self {
      case ._ACTION_REQUEST_SOLUTION(let selection): return selection.entityReference
      case ._APPLICATION_CONTEXT(let selection): return selection.entityReference
      case ._APPROVAL_ROLE(let selection): return selection.entityReference
      case ._CONFIGURATION_DESIGN(let selection): return selection.entityReference
      case ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(let selection): return selection.entityReference
      case ._DATE_ROLE(let selection): return selection.entityReference
      case ._DATE_TIME_ROLE(let selection): return selection.entityReference
      case ._EFFECTIVITY(let selection): return selection.entityReference
      case ._EXTERNAL_SOURCE(let selection): return selection.entityReference
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.entityReference
      case ._ORGANIZATION_ROLE(let selection): return selection.entityReference
      case ._PERSON_AND_ORGANIZATION(let selection): return selection.entityReference
      case ._PERSON_AND_ORGANIZATION_ROLE(let selection): return selection.entityReference
      case ._PROPERTY_DEFINITION_REPRESENTATION(let selection): return selection.entityReference
      case ._REPRESENTATION(let selection): return selection.entityReference
      }
    }
    public var stringValue: SDAI.STRING? {
      switch self {
      case ._ACTION_REQUEST_SOLUTION(let selection): return selection.stringValue
      case ._APPLICATION_CONTEXT(let selection): return selection.stringValue
      case ._APPROVAL_ROLE(let selection): return selection.stringValue
      case ._CONFIGURATION_DESIGN(let selection): return selection.stringValue
      case ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(let selection): return selection.stringValue
      case ._DATE_ROLE(let selection): return selection.stringValue
      case ._DATE_TIME_ROLE(let selection): return selection.stringValue
      case ._EFFECTIVITY(let selection): return selection.stringValue
      case ._EXTERNAL_SOURCE(let selection): return selection.stringValue
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.stringValue
      case ._ORGANIZATION_ROLE(let selection): return selection.stringValue
      case ._PERSON_AND_ORGANIZATION(let selection): return selection.stringValue
      case ._PERSON_AND_ORGANIZATION_ROLE(let selection): return selection.stringValue
      case ._PROPERTY_DEFINITION_REPRESENTATION(let selection): return selection.stringValue
      case ._REPRESENTATION(let selection): return selection.stringValue
      }
    }
    public var binaryValue: SDAI.BINARY? {
      switch self {
      case ._ACTION_REQUEST_SOLUTION(let selection): return selection.binaryValue
      case ._APPLICATION_CONTEXT(let selection): return selection.binaryValue
      case ._APPROVAL_ROLE(let selection): return selection.binaryValue
      case ._CONFIGURATION_DESIGN(let selection): return selection.binaryValue
      case ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(let selection): return selection.binaryValue
      case ._DATE_ROLE(let selection): return selection.binaryValue
      case ._DATE_TIME_ROLE(let selection): return selection.binaryValue
      case ._EFFECTIVITY(let selection): return selection.binaryValue
      case ._EXTERNAL_SOURCE(let selection): return selection.binaryValue
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.binaryValue
      case ._ORGANIZATION_ROLE(let selection): return selection.binaryValue
      case ._PERSON_AND_ORGANIZATION(let selection): return selection.binaryValue
      case ._PERSON_AND_ORGANIZATION_ROLE(let selection): return selection.binaryValue
      case ._PROPERTY_DEFINITION_REPRESENTATION(let selection): return selection.binaryValue
      case ._REPRESENTATION(let selection): return selection.binaryValue
      }
    }
    public var logicalValue: SDAI.LOGICAL? {
      switch self {
      case ._ACTION_REQUEST_SOLUTION(let selection): return selection.logicalValue
      case ._APPLICATION_CONTEXT(let selection): return selection.logicalValue
      case ._APPROVAL_ROLE(let selection): return selection.logicalValue
      case ._CONFIGURATION_DESIGN(let selection): return selection.logicalValue
      case ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(let selection): return selection.logicalValue
      case ._DATE_ROLE(let selection): return selection.logicalValue
      case ._DATE_TIME_ROLE(let selection): return selection.logicalValue
      case ._EFFECTIVITY(let selection): return selection.logicalValue
      case ._EXTERNAL_SOURCE(let selection): return selection.logicalValue
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.logicalValue
      case ._ORGANIZATION_ROLE(let selection): return selection.logicalValue
      case ._PERSON_AND_ORGANIZATION(let selection): return selection.logicalValue
      case ._PERSON_AND_ORGANIZATION_ROLE(let selection): return selection.logicalValue
      case ._PROPERTY_DEFINITION_REPRESENTATION(let selection): return selection.logicalValue
      case ._REPRESENTATION(let selection): return selection.logicalValue
      }
    }
    public var booleanValue: SDAI.BOOLEAN? {
      switch self {
      case ._ACTION_REQUEST_SOLUTION(let selection): return selection.booleanValue
      case ._APPLICATION_CONTEXT(let selection): return selection.booleanValue
      case ._APPROVAL_ROLE(let selection): return selection.booleanValue
      case ._CONFIGURATION_DESIGN(let selection): return selection.booleanValue
      case ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(let selection): return selection.booleanValue
      case ._DATE_ROLE(let selection): return selection.booleanValue
      case ._DATE_TIME_ROLE(let selection): return selection.booleanValue
      case ._EFFECTIVITY(let selection): return selection.booleanValue
      case ._EXTERNAL_SOURCE(let selection): return selection.booleanValue
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.booleanValue
      case ._ORGANIZATION_ROLE(let selection): return selection.booleanValue
      case ._PERSON_AND_ORGANIZATION(let selection): return selection.booleanValue
      case ._PERSON_AND_ORGANIZATION_ROLE(let selection): return selection.booleanValue
      case ._PROPERTY_DEFINITION_REPRESENTATION(let selection): return selection.booleanValue
      case ._REPRESENTATION(let selection): return selection.booleanValue
      }
    }
    public var numberValue: SDAI.NUMBER? {
      switch self {
      case ._ACTION_REQUEST_SOLUTION(let selection): return selection.numberValue
      case ._APPLICATION_CONTEXT(let selection): return selection.numberValue
      case ._APPROVAL_ROLE(let selection): return selection.numberValue
      case ._CONFIGURATION_DESIGN(let selection): return selection.numberValue
      case ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(let selection): return selection.numberValue
      case ._DATE_ROLE(let selection): return selection.numberValue
      case ._DATE_TIME_ROLE(let selection): return selection.numberValue
      case ._EFFECTIVITY(let selection): return selection.numberValue
      case ._EXTERNAL_SOURCE(let selection): return selection.numberValue
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.numberValue
      case ._ORGANIZATION_ROLE(let selection): return selection.numberValue
      case ._PERSON_AND_ORGANIZATION(let selection): return selection.numberValue
      case ._PERSON_AND_ORGANIZATION_ROLE(let selection): return selection.numberValue
      case ._PROPERTY_DEFINITION_REPRESENTATION(let selection): return selection.numberValue
      case ._REPRESENTATION(let selection): return selection.numberValue
      }
    }
    public var realValue: SDAI.REAL? {
      switch self {
      case ._ACTION_REQUEST_SOLUTION(let selection): return selection.realValue
      case ._APPLICATION_CONTEXT(let selection): return selection.realValue
      case ._APPROVAL_ROLE(let selection): return selection.realValue
      case ._CONFIGURATION_DESIGN(let selection): return selection.realValue
      case ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(let selection): return selection.realValue
      case ._DATE_ROLE(let selection): return selection.realValue
      case ._DATE_TIME_ROLE(let selection): return selection.realValue
      case ._EFFECTIVITY(let selection): return selection.realValue
      case ._EXTERNAL_SOURCE(let selection): return selection.realValue
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.realValue
      case ._ORGANIZATION_ROLE(let selection): return selection.realValue
      case ._PERSON_AND_ORGANIZATION(let selection): return selection.realValue
      case ._PERSON_AND_ORGANIZATION_ROLE(let selection): return selection.realValue
      case ._PROPERTY_DEFINITION_REPRESENTATION(let selection): return selection.realValue
      case ._REPRESENTATION(let selection): return selection.realValue
      }
    }
    public var integerValue: SDAI.INTEGER? {
      switch self {
      case ._ACTION_REQUEST_SOLUTION(let selection): return selection.integerValue
      case ._APPLICATION_CONTEXT(let selection): return selection.integerValue
      case ._APPROVAL_ROLE(let selection): return selection.integerValue
      case ._CONFIGURATION_DESIGN(let selection): return selection.integerValue
      case ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(let selection): return selection.integerValue
      case ._DATE_ROLE(let selection): return selection.integerValue
      case ._DATE_TIME_ROLE(let selection): return selection.integerValue
      case ._EFFECTIVITY(let selection): return selection.integerValue
      case ._EXTERNAL_SOURCE(let selection): return selection.integerValue
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.integerValue
      case ._ORGANIZATION_ROLE(let selection): return selection.integerValue
      case ._PERSON_AND_ORGANIZATION(let selection): return selection.integerValue
      case ._PERSON_AND_ORGANIZATION_ROLE(let selection): return selection.integerValue
      case ._PROPERTY_DEFINITION_REPRESENTATION(let selection): return selection.integerValue
      case ._REPRESENTATION(let selection): return selection.integerValue
      }
    }
    public var genericEnumValue: SDAI.GenericEnumValue? {
      switch self {
      case ._ACTION_REQUEST_SOLUTION(let selection): return selection.genericEnumValue
      case ._APPLICATION_CONTEXT(let selection): return selection.genericEnumValue
      case ._APPROVAL_ROLE(let selection): return selection.genericEnumValue
      case ._CONFIGURATION_DESIGN(let selection): return selection.genericEnumValue
      case ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(let selection): return selection.genericEnumValue
      case ._DATE_ROLE(let selection): return selection.genericEnumValue
      case ._DATE_TIME_ROLE(let selection): return selection.genericEnumValue
      case ._EFFECTIVITY(let selection): return selection.genericEnumValue
      case ._EXTERNAL_SOURCE(let selection): return selection.genericEnumValue
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.genericEnumValue
      case ._ORGANIZATION_ROLE(let selection): return selection.genericEnumValue
      case ._PERSON_AND_ORGANIZATION(let selection): return selection.genericEnumValue
      case ._PERSON_AND_ORGANIZATION_ROLE(let selection): return selection.genericEnumValue
      case ._PROPERTY_DEFINITION_REPRESENTATION(let selection): return selection.genericEnumValue
      case ._REPRESENTATION(let selection): return selection.genericEnumValue
      }
    }
    public func arrayOptionalValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.ARRAY_OPTIONAL<ELEM>? {
      switch self {
      case ._ACTION_REQUEST_SOLUTION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._APPLICATION_CONTEXT(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._APPROVAL_ROLE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._CONFIGURATION_DESIGN(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._DATE_ROLE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._DATE_TIME_ROLE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._EFFECTIVITY(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._EXTERNAL_SOURCE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._ORGANIZATION_ROLE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PERSON_AND_ORGANIZATION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PERSON_AND_ORGANIZATION_ROLE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PROPERTY_DEFINITION_REPRESENTATION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._REPRESENTATION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      }
    }
    public func arrayValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.ARRAY<ELEM>? {
      switch self {
      case ._ACTION_REQUEST_SOLUTION(let selection): return selection.arrayValue(elementType:elementType)
      case ._APPLICATION_CONTEXT(let selection): return selection.arrayValue(elementType:elementType)
      case ._APPROVAL_ROLE(let selection): return selection.arrayValue(elementType:elementType)
      case ._CONFIGURATION_DESIGN(let selection): return selection.arrayValue(elementType:elementType)
      case ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(let selection): return selection.arrayValue(elementType:elementType)
      case ._DATE_ROLE(let selection): return selection.arrayValue(elementType:elementType)
      case ._DATE_TIME_ROLE(let selection): return selection.arrayValue(elementType:elementType)
      case ._EFFECTIVITY(let selection): return selection.arrayValue(elementType:elementType)
      case ._EXTERNAL_SOURCE(let selection): return selection.arrayValue(elementType:elementType)
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.arrayValue(elementType:elementType)
      case ._ORGANIZATION_ROLE(let selection): return selection.arrayValue(elementType:elementType)
      case ._PERSON_AND_ORGANIZATION(let selection): return selection.arrayValue(elementType:elementType)
      case ._PERSON_AND_ORGANIZATION_ROLE(let selection): return selection.arrayValue(elementType:elementType)
      case ._PROPERTY_DEFINITION_REPRESENTATION(let selection): return selection.arrayValue(elementType:elementType)
      case ._REPRESENTATION(let selection): return selection.arrayValue(elementType:elementType)
      }
    }
    public func listValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.LIST<ELEM>? {
      switch self {
      case ._ACTION_REQUEST_SOLUTION(let selection): return selection.listValue(elementType:elementType)
      case ._APPLICATION_CONTEXT(let selection): return selection.listValue(elementType:elementType)
      case ._APPROVAL_ROLE(let selection): return selection.listValue(elementType:elementType)
      case ._CONFIGURATION_DESIGN(let selection): return selection.listValue(elementType:elementType)
      case ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(let selection): return selection.listValue(elementType:elementType)
      case ._DATE_ROLE(let selection): return selection.listValue(elementType:elementType)
      case ._DATE_TIME_ROLE(let selection): return selection.listValue(elementType:elementType)
      case ._EFFECTIVITY(let selection): return selection.listValue(elementType:elementType)
      case ._EXTERNAL_SOURCE(let selection): return selection.listValue(elementType:elementType)
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.listValue(elementType:elementType)
      case ._ORGANIZATION_ROLE(let selection): return selection.listValue(elementType:elementType)
      case ._PERSON_AND_ORGANIZATION(let selection): return selection.listValue(elementType:elementType)
      case ._PERSON_AND_ORGANIZATION_ROLE(let selection): return selection.listValue(elementType:elementType)
      case ._PROPERTY_DEFINITION_REPRESENTATION(let selection): return selection.listValue(elementType:elementType)
      case ._REPRESENTATION(let selection): return selection.listValue(elementType:elementType)
      }
    }
    public func bagValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.BAG<ELEM>? {
      switch self {
      case ._ACTION_REQUEST_SOLUTION(let selection): return selection.bagValue(elementType:elementType)
      case ._APPLICATION_CONTEXT(let selection): return selection.bagValue(elementType:elementType)
      case ._APPROVAL_ROLE(let selection): return selection.bagValue(elementType:elementType)
      case ._CONFIGURATION_DESIGN(let selection): return selection.bagValue(elementType:elementType)
      case ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(let selection): return selection.bagValue(elementType:elementType)
      case ._DATE_ROLE(let selection): return selection.bagValue(elementType:elementType)
      case ._DATE_TIME_ROLE(let selection): return selection.bagValue(elementType:elementType)
      case ._EFFECTIVITY(let selection): return selection.bagValue(elementType:elementType)
      case ._EXTERNAL_SOURCE(let selection): return selection.bagValue(elementType:elementType)
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.bagValue(elementType:elementType)
      case ._ORGANIZATION_ROLE(let selection): return selection.bagValue(elementType:elementType)
      case ._PERSON_AND_ORGANIZATION(let selection): return selection.bagValue(elementType:elementType)
      case ._PERSON_AND_ORGANIZATION_ROLE(let selection): return selection.bagValue(elementType:elementType)
      case ._PROPERTY_DEFINITION_REPRESENTATION(let selection): return selection.bagValue(elementType:elementType)
      case ._REPRESENTATION(let selection): return selection.bagValue(elementType:elementType)
      }
    }
    public func setValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.SET<ELEM>? {
      switch self {
      case ._ACTION_REQUEST_SOLUTION(let selection): return selection.setValue(elementType:elementType)
      case ._APPLICATION_CONTEXT(let selection): return selection.setValue(elementType:elementType)
      case ._APPROVAL_ROLE(let selection): return selection.setValue(elementType:elementType)
      case ._CONFIGURATION_DESIGN(let selection): return selection.setValue(elementType:elementType)
      case ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(let selection): return selection.setValue(elementType:elementType)
      case ._DATE_ROLE(let selection): return selection.setValue(elementType:elementType)
      case ._DATE_TIME_ROLE(let selection): return selection.setValue(elementType:elementType)
      case ._EFFECTIVITY(let selection): return selection.setValue(elementType:elementType)
      case ._EXTERNAL_SOURCE(let selection): return selection.setValue(elementType:elementType)
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.setValue(elementType:elementType)
      case ._ORGANIZATION_ROLE(let selection): return selection.setValue(elementType:elementType)
      case ._PERSON_AND_ORGANIZATION(let selection): return selection.setValue(elementType:elementType)
      case ._PERSON_AND_ORGANIZATION_ROLE(let selection): return selection.setValue(elementType:elementType)
      case ._PROPERTY_DEFINITION_REPRESENTATION(let selection): return selection.setValue(elementType:elementType)
      case ._REPRESENTATION(let selection): return selection.setValue(elementType:elementType)
      }
    }
    public func enumValue<ENUM:SDAIEnumerationType>(enumType:ENUM.Type) -> ENUM? {
      switch self {
      case ._ACTION_REQUEST_SOLUTION(let selection): return selection.enumValue(enumType:enumType)
      case ._APPLICATION_CONTEXT(let selection): return selection.enumValue(enumType:enumType)
      case ._APPROVAL_ROLE(let selection): return selection.enumValue(enumType:enumType)
      case ._CONFIGURATION_DESIGN(let selection): return selection.enumValue(enumType:enumType)
      case ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(let selection): return selection.enumValue(enumType:enumType)
      case ._DATE_ROLE(let selection): return selection.enumValue(enumType:enumType)
      case ._DATE_TIME_ROLE(let selection): return selection.enumValue(enumType:enumType)
      case ._EFFECTIVITY(let selection): return selection.enumValue(enumType:enumType)
      case ._EXTERNAL_SOURCE(let selection): return selection.enumValue(enumType:enumType)
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.enumValue(enumType:enumType)
      case ._ORGANIZATION_ROLE(let selection): return selection.enumValue(enumType:enumType)
      case ._PERSON_AND_ORGANIZATION(let selection): return selection.enumValue(enumType:enumType)
      case ._PERSON_AND_ORGANIZATION_ROLE(let selection): return selection.enumValue(enumType:enumType)
      case ._PROPERTY_DEFINITION_REPRESENTATION(let selection): return selection.enumValue(enumType:enumType)
      case ._REPRESENTATION(let selection): return selection.enumValue(enumType:enumType)
      }
    }

    //MARK: SDAIUnderlyingType
    public typealias FundamentalType = Self
    public static var typeName: String = 
      "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.DESCRIPTION_ATTRIBUTE_SELECT"
    public var asFundamentalType: FundamentalType { return self }

    //MARK: SDAIObservableAggregateElement
    public var entityReferences: AnySequence<SDAI.EntityReference> {
      switch self {
      case ._ACTION_REQUEST_SOLUTION(let entity): return entity.entityReferences
      case ._APPLICATION_CONTEXT(let entity): return entity.entityReferences
      case ._APPROVAL_ROLE(let entity): return entity.entityReferences
      case ._CONFIGURATION_DESIGN(let entity): return entity.entityReferences
      case ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(let entity): return entity.entityReferences
      case ._DATE_ROLE(let entity): return entity.entityReferences
      case ._DATE_TIME_ROLE(let entity): return entity.entityReferences
      case ._EFFECTIVITY(let entity): return entity.entityReferences
      case ._EXTERNAL_SOURCE(let entity): return entity.entityReferences
      case ._ORGANIZATIONAL_PROJECT(let entity): return entity.entityReferences
      case ._ORGANIZATION_ROLE(let entity): return entity.entityReferences
      case ._PERSON_AND_ORGANIZATION(let entity): return entity.entityReferences
      case ._PERSON_AND_ORGANIZATION_ROLE(let entity): return entity.entityReferences
      case ._PROPERTY_DEFINITION_REPRESENTATION(let entity): return entity.entityReferences
      case ._REPRESENTATION(let entity): return entity.entityReferences
      }
    }

    public mutating func configure(with observer: SDAI.EntityReferenceObserver) {
      switch self {
      case ._ACTION_REQUEST_SOLUTION(let entity): 
        entity.configure(with: observer)
        self = ._ACTION_REQUEST_SOLUTION(entity)
      case ._APPLICATION_CONTEXT(let entity): 
        entity.configure(with: observer)
        self = ._APPLICATION_CONTEXT(entity)
      case ._APPROVAL_ROLE(let entity): 
        entity.configure(with: observer)
        self = ._APPROVAL_ROLE(entity)
      case ._CONFIGURATION_DESIGN(let entity): 
        entity.configure(with: observer)
        self = ._CONFIGURATION_DESIGN(entity)
      case ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(let entity): 
        entity.configure(with: observer)
        self = ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(entity)
      case ._DATE_ROLE(let entity): 
        entity.configure(with: observer)
        self = ._DATE_ROLE(entity)
      case ._DATE_TIME_ROLE(let entity): 
        entity.configure(with: observer)
        self = ._DATE_TIME_ROLE(entity)
      case ._EFFECTIVITY(let entity): 
        entity.configure(with: observer)
        self = ._EFFECTIVITY(entity)
      case ._EXTERNAL_SOURCE(let entity): 
        entity.configure(with: observer)
        self = ._EXTERNAL_SOURCE(entity)
      case ._ORGANIZATIONAL_PROJECT(let entity): 
        entity.configure(with: observer)
        self = ._ORGANIZATIONAL_PROJECT(entity)
      case ._ORGANIZATION_ROLE(let entity): 
        entity.configure(with: observer)
        self = ._ORGANIZATION_ROLE(entity)
      case ._PERSON_AND_ORGANIZATION(let entity): 
        entity.configure(with: observer)
        self = ._PERSON_AND_ORGANIZATION(entity)
      case ._PERSON_AND_ORGANIZATION_ROLE(let entity): 
        entity.configure(with: observer)
        self = ._PERSON_AND_ORGANIZATION_ROLE(entity)
      case ._PROPERTY_DEFINITION_REPRESENTATION(let entity): 
        entity.configure(with: observer)
        self = ._PROPERTY_DEFINITION_REPRESENTATION(entity)
      case ._REPRESENTATION(let entity): 
        entity.configure(with: observer)
        self = ._REPRESENTATION(entity)
      }
    }

    public mutating func teardownObserver() {
      switch self {
      case ._ACTION_REQUEST_SOLUTION(let entity): 
        entity.teardownObserver()
        self = ._ACTION_REQUEST_SOLUTION(entity)
      case ._APPLICATION_CONTEXT(let entity): 
        entity.teardownObserver()
        self = ._APPLICATION_CONTEXT(entity)
      case ._APPROVAL_ROLE(let entity): 
        entity.teardownObserver()
        self = ._APPROVAL_ROLE(entity)
      case ._CONFIGURATION_DESIGN(let entity): 
        entity.teardownObserver()
        self = ._CONFIGURATION_DESIGN(entity)
      case ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(let entity): 
        entity.teardownObserver()
        self = ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(entity)
      case ._DATE_ROLE(let entity): 
        entity.teardownObserver()
        self = ._DATE_ROLE(entity)
      case ._DATE_TIME_ROLE(let entity): 
        entity.teardownObserver()
        self = ._DATE_TIME_ROLE(entity)
      case ._EFFECTIVITY(let entity): 
        entity.teardownObserver()
        self = ._EFFECTIVITY(entity)
      case ._EXTERNAL_SOURCE(let entity): 
        entity.teardownObserver()
        self = ._EXTERNAL_SOURCE(entity)
      case ._ORGANIZATIONAL_PROJECT(let entity): 
        entity.teardownObserver()
        self = ._ORGANIZATIONAL_PROJECT(entity)
      case ._ORGANIZATION_ROLE(let entity): 
        entity.teardownObserver()
        self = ._ORGANIZATION_ROLE(entity)
      case ._PERSON_AND_ORGANIZATION(let entity): 
        entity.teardownObserver()
        self = ._PERSON_AND_ORGANIZATION(entity)
      case ._PERSON_AND_ORGANIZATION_ROLE(let entity): 
        entity.teardownObserver()
        self = ._PERSON_AND_ORGANIZATION_ROLE(entity)
      case ._PROPERTY_DEFINITION_REPRESENTATION(let entity): 
        entity.teardownObserver()
        self = ._PROPERTY_DEFINITION_REPRESENTATION(entity)
      case ._REPRESENTATION(let entity): 
        entity.teardownObserver()
        self = ._REPRESENTATION(entity)
      }
    }

    //MARK: SDAIAggregationBehavior
    public var aggregationHiBound: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationHiIndex: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationLoBound: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationLoIndex: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationSize: Int? {
      switch self {
      default: return nil
      }
    }

    //MARK: WHERE RULE VALIDATION (SELECT TYPE)
    public static func validateWhereRules(instance:Self?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      var result: [SDAI.WhereLabel:SDAI.LOGICAL] = [:]
      switch instance {
      case ._ACTION_REQUEST_SOLUTION(let selectValue): 
        result = eACTION_REQUEST_SOLUTION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\ACTION_REQUEST_SOLUTION")
      case ._APPLICATION_CONTEXT(let selectValue): 
        result = eAPPLICATION_CONTEXT.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\APPLICATION_CONTEXT")
      case ._APPROVAL_ROLE(let selectValue): 
        result = eAPPROVAL_ROLE.validateWhereRules(instance:selectValue, prefix:prefix + "\\APPROVAL_ROLE")
      case ._CONFIGURATION_DESIGN(let selectValue): 
        result = eCONFIGURATION_DESIGN.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\CONFIGURATION_DESIGN")
      case ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(let selectValue): 
        result = eCONTEXT_DEPENDENT_SHAPE_REPRESENTATION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\CONTEXT_DEPENDENT_SHAPE_REPRESENTATION")
      case ._DATE_ROLE(let selectValue): result = eDATE_ROLE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\DATE_ROLE")
      case ._DATE_TIME_ROLE(let selectValue): 
        result = eDATE_TIME_ROLE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\DATE_TIME_ROLE")
      case ._EFFECTIVITY(let selectValue): result = eEFFECTIVITY.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\EFFECTIVITY")
      case ._EXTERNAL_SOURCE(let selectValue): 
        result = eEXTERNAL_SOURCE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\EXTERNAL_SOURCE")
      case ._ORGANIZATIONAL_PROJECT(let selectValue): 
        result = eORGANIZATIONAL_PROJECT.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\ORGANIZATIONAL_PROJECT")
      case ._ORGANIZATION_ROLE(let selectValue): 
        result = eORGANIZATION_ROLE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\ORGANIZATION_ROLE")
      case ._PERSON_AND_ORGANIZATION(let selectValue): 
        result = ePERSON_AND_ORGANIZATION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PERSON_AND_ORGANIZATION")
      case ._PERSON_AND_ORGANIZATION_ROLE(let selectValue): 
        result = ePERSON_AND_ORGANIZATION_ROLE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PERSON_AND_ORGANIZATION_ROLE")
      case ._PROPERTY_DEFINITION_REPRESENTATION(let selectValue): 
        result = ePROPERTY_DEFINITION_REPRESENTATION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PROPERTY_DEFINITION_REPRESENTATION")
      case ._REPRESENTATION(let selectValue): 
        result = eREPRESENTATION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\REPRESENTATION")
      case nil: break
      }

      return result
    }

  }

}


//MARK: - SELECT TYPE HIERARCHY
public protocol AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sDESCRIPTION_ATTRIBUTE_SELECT__type: 
  SDAISelectType {

  //MARK: GROUP REFERENCES
  var super_eREPRESENTATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION? { get }
  var super_ePERSON_AND_ORGANIZATION_ROLE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePERSON_AND_ORGANIZATION_ROLE? { get }
  var super_eAPPROVAL_ROLE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eAPPROVAL_ROLE? { get }
  var super_ePROPERTY_DEFINITION_REPRESENTATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePROPERTY_DEFINITION_REPRESENTATION? { get }
  var super_eDATE_ROLE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDATE_ROLE? { get }
  var super_eCONFIGURATION_DESIGN: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONFIGURATION_DESIGN? { get }
  var super_eAPPLICATION_CONTEXT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eAPPLICATION_CONTEXT? { get }
  var super_eORGANIZATION_ROLE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eORGANIZATION_ROLE? { get }
  var super_eORGANIZATIONAL_PROJECT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eORGANIZATIONAL_PROJECT? { get }
  var super_eEFFECTIVITY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEFFECTIVITY? { get }
  var super_eEXTERNAL_SOURCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEXTERNAL_SOURCE? { get }
  var super_eCONTEXT_DEPENDENT_SHAPE_REPRESENTATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONTEXT_DEPENDENT_SHAPE_REPRESENTATION? { get }
  var super_eACTION_REQUEST_SOLUTION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION_REQUEST_SOLUTION? { get }
  var super_ePERSON_AND_ORGANIZATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePERSON_AND_ORGANIZATION? { get }
  var super_eDATE_TIME_ROLE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDATE_TIME_ROLE? { get }

  //MARK: ENTITY ATTRIBUTE REFERENCES
  var REQUEST: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eVERSIONED_ACTION_REQUEST?  { get }
  var DESCRIPTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT?  { get }
  var DEPENDENT_ENVIRONMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDATA_ENVIRONMENT?  { get }
  var METHOD: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION_METHOD?  { get }
  var ROLE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { get }
  var CHARACTER_BOX: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePLANAR_EXTENT?  { get }
  var DESIGN: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sCONFIGURATION_DESIGN_ITEM?  { get }
  var CM_LINK: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eVARIATIONAL_CURRENT_REPRESENTATION_RELATIONSHIP?  { get }
  var ITEMS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_ITEM>/*[1:nil]*/ )?  { get }
  var OUTLINES: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eANNOTATION_FILL_AREA>/*[1:nil]*/ )?  { get }
  var REQUIRED_GENERAL_ACCURACY: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_MEASUREMENT_ACCURACY>/*[1:nil]*/ )?  { get }
  var EFFECTIVITY_LOT_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { get }
  var USED_REPRESENTATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION?  { get }
  var ASSOCIATED_SHAPE_REPRESENTATION: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eKINEMATIC_LINK_REPRESENTATION_ASSOCIATION>/*[0:1]*/ )?  { get }
  var EFFECTIVITY_END_DATE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sDATE_TIME_OR_EVENT_OCCURRENCE?  { get }
  var EFFECTIVITY_LOT_SIZE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMEASURE_WITH_UNIT?  { get }
  var BASELINE_RATIO: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tRATIO_MEASURE?  { get }
  var THE_PERSON: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePERSON?  { get }
  var REVISION_IDENTIFIER: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { get }
  var SIZE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRESENTATION_SIZE?  { get }
  var CONTEXT_ELEMENTS: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eAPPLICATION_CONTEXT_ELEMENT>/*[1:nil]*/ )?  { get }
  var TESSELLATION_ACCURACY_PARAMETERS: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sTESSELLATION_ACCURACY_PARAMETER_ITEM>/*[1:nil]*/ )?  { get }
  var REPRESENTED_JOINTS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eKINEMATIC_JOINT>/*[1:nil]*/ )?  { get }
  var EFFECTIVITY_PERIOD: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eTIME_INTERVAL?  { get }
  var EFFECTIVITY_START_DATE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sDATE_TIME_OR_EVENT_OCCURRENCE?  { get }
  var BOX_HEIGHT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE?  { get }
  var EFFECTIVITY_END_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { get }
  var THE_ORGANIZATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eORGANIZATION?  { get }
  var STROKES: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCURVE>/*[1:nil]*/ )?  { get }
  var REPRESENTED_PRODUCT_RELATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_SHAPE?  { get }
  var APPLICATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { get }
  var ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { get }
  var APPLIED_GENERAL_ACCURACY: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_MEASUREMENT_ACCURACY>/*[1:nil]*/ )?  { get }
  var CONTEXT_OF_ITEMS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_CONTEXT?  { get }
  var RESPONSIBLE_ORGANIZATIONS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eORGANIZATION>/*[1:
    nil]*/ )?  { get }
  var REPRESENTATION_RELATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_REPRESENTATION_RELATIONSHIP?  { get }
  var EFFECTIVITY_START_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { get }
  var SOURCE_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sSOURCE_ITEM?  { get }
  var NEUTRAL_SKETCH_SEMANTICS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nCURVES_OR_AREA?  { get }
  var REPRESENTED_LINK: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eKINEMATIC_LINK?  { get }
  var REPRESENTED_TOPOLOGY: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sKINEMATIC_TOPOLOGY_REPRESENTATION_SELECT?  { get }
  var UNCERTAINTY: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eUNCERTAINTY_MEASURE_WITH_UNIT>
    /*[1:nil]*/ )?  { get }
  var DEFINITION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sREPRESENTED_DEFINITION?  { get }
  var CONFIGURATION: SDAI.GENERIC_ENTITY?  { get }
  var NAME: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { get }
  var REPRESENTED_MECHANISM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMECHANISM_REPRESENTATION?  { get }
  var USAGE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_RELATIONSHIP?  { get }
}

public protocol AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sDESCRIPTION_ATTRIBUTE_SELECT__subtype: 
  AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sDESCRIPTION_ATTRIBUTE_SELECT__type, SDAIDefinedType
where Supertype: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sDESCRIPTION_ATTRIBUTE_SELECT__type
{}

public extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sDESCRIPTION_ATTRIBUTE_SELECT__subtype {
  //MARK: CONSTRUCTORS
  init?(possiblyFrom complex: SDAI.ComplexEntity?) {
    self.init(fundamental: FundamentalType(possiblyFrom: complex))
  }

  init?<T: SDAIUnderlyingType>(possiblyFrom underlyingType: T?) {
    self.init(fundamental: FundamentalType(possiblyFrom: underlyingType))
  }

  init?<G: SDAIGenericType>(fromGeneric generic: G?) {
    self.init(fundamental: FundamentalType.convert(fromGeneric: generic))
  }

  //MARK: GROUP REFERENCES
  var super_eREPRESENTATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION? { rep.super_eREPRESENTATION }
  var super_ePERSON_AND_ORGANIZATION_ROLE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePERSON_AND_ORGANIZATION_ROLE? { rep.super_ePERSON_AND_ORGANIZATION_ROLE }
  var super_eAPPROVAL_ROLE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eAPPROVAL_ROLE? { rep.super_eAPPROVAL_ROLE }
  var super_ePROPERTY_DEFINITION_REPRESENTATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePROPERTY_DEFINITION_REPRESENTATION? { rep.super_ePROPERTY_DEFINITION_REPRESENTATION }
  var super_eDATE_ROLE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDATE_ROLE? { rep.super_eDATE_ROLE }
  var super_eCONFIGURATION_DESIGN: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONFIGURATION_DESIGN? { rep.super_eCONFIGURATION_DESIGN }
  var super_eAPPLICATION_CONTEXT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eAPPLICATION_CONTEXT? { rep.super_eAPPLICATION_CONTEXT }
  var super_eORGANIZATION_ROLE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eORGANIZATION_ROLE? { rep.super_eORGANIZATION_ROLE }
  var super_eORGANIZATIONAL_PROJECT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eORGANIZATIONAL_PROJECT? { rep.super_eORGANIZATIONAL_PROJECT }
  var super_eEFFECTIVITY: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEFFECTIVITY? { rep.super_eEFFECTIVITY }
  var super_eEXTERNAL_SOURCE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEXTERNAL_SOURCE? { rep.super_eEXTERNAL_SOURCE }
  var super_eCONTEXT_DEPENDENT_SHAPE_REPRESENTATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONTEXT_DEPENDENT_SHAPE_REPRESENTATION? { rep.super_eCONTEXT_DEPENDENT_SHAPE_REPRESENTATION }
  var super_eACTION_REQUEST_SOLUTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION_REQUEST_SOLUTION? { rep.super_eACTION_REQUEST_SOLUTION }
  var super_ePERSON_AND_ORGANIZATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePERSON_AND_ORGANIZATION? { rep.super_ePERSON_AND_ORGANIZATION }
  var super_eDATE_TIME_ROLE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDATE_TIME_ROLE? { rep.super_eDATE_TIME_ROLE }

  //MARK: ENTITY ATTRIBUTE REFERENCES
  var REQUEST: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eVERSIONED_ACTION_REQUEST?  { rep.REQUEST }
  var DESCRIPTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT?  { rep.DESCRIPTION }
  var DEPENDENT_ENVIRONMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDATA_ENVIRONMENT?  { rep.DEPENDENT_ENVIRONMENT }
  var METHOD: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION_METHOD?  { rep.METHOD }
  var ROLE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { rep.ROLE }
  var CHARACTER_BOX: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePLANAR_EXTENT?  { rep.CHARACTER_BOX }
  var DESIGN: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sCONFIGURATION_DESIGN_ITEM?  { rep.DESIGN }
  var CM_LINK: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eVARIATIONAL_CURRENT_REPRESENTATION_RELATIONSHIP?  { rep.CM_LINK }
  var ITEMS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_ITEM>/*[1:nil]*/ )?  { rep.ITEMS }
  var OUTLINES: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eANNOTATION_FILL_AREA>/*[1:nil]*/ )?  { rep.OUTLINES }
  var REQUIRED_GENERAL_ACCURACY: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_MEASUREMENT_ACCURACY>/*[1:nil]*/ )?  { rep.REQUIRED_GENERAL_ACCURACY }
  var EFFECTIVITY_LOT_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { rep.EFFECTIVITY_LOT_ID }
  var USED_REPRESENTATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION?  { rep.USED_REPRESENTATION }
  var ASSOCIATED_SHAPE_REPRESENTATION: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eKINEMATIC_LINK_REPRESENTATION_ASSOCIATION>/*[0:1]*/ )?  { rep.ASSOCIATED_SHAPE_REPRESENTATION }
  var EFFECTIVITY_END_DATE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sDATE_TIME_OR_EVENT_OCCURRENCE?  { rep.EFFECTIVITY_END_DATE }
  var EFFECTIVITY_LOT_SIZE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMEASURE_WITH_UNIT?  { rep.EFFECTIVITY_LOT_SIZE }
  var BASELINE_RATIO: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tRATIO_MEASURE?  { rep.BASELINE_RATIO }
  var THE_PERSON: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePERSON?  { rep.THE_PERSON }
  var REVISION_IDENTIFIER: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { rep.REVISION_IDENTIFIER }
  var SIZE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRESENTATION_SIZE?  { rep.SIZE }
  var CONTEXT_ELEMENTS: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eAPPLICATION_CONTEXT_ELEMENT>/*[1:nil]*/ )?  { rep.CONTEXT_ELEMENTS }
  var TESSELLATION_ACCURACY_PARAMETERS: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sTESSELLATION_ACCURACY_PARAMETER_ITEM>/*[1:nil]*/ )?  { rep.TESSELLATION_ACCURACY_PARAMETERS }
  var REPRESENTED_JOINTS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eKINEMATIC_JOINT>/*[1:nil]*/ )?  { rep.REPRESENTED_JOINTS }
  var EFFECTIVITY_PERIOD: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eTIME_INTERVAL?  { rep.EFFECTIVITY_PERIOD }
  var EFFECTIVITY_START_DATE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sDATE_TIME_OR_EVENT_OCCURRENCE?  { rep.EFFECTIVITY_START_DATE }
  var BOX_HEIGHT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE?  { rep.BOX_HEIGHT }
  var EFFECTIVITY_END_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { rep.EFFECTIVITY_END_ID }
  var THE_ORGANIZATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eORGANIZATION?  { rep.THE_ORGANIZATION }
  var STROKES: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCURVE>/*[1:nil]*/ )?  { rep.STROKES }
  var REPRESENTED_PRODUCT_RELATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_SHAPE?  { rep.REPRESENTED_PRODUCT_RELATION }
  var APPLICATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { rep.APPLICATION }
  var ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { rep.ID }
  var APPLIED_GENERAL_ACCURACY: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_MEASUREMENT_ACCURACY>/*[1:nil]*/ )?  { rep.APPLIED_GENERAL_ACCURACY }
  var CONTEXT_OF_ITEMS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_CONTEXT?  { rep.CONTEXT_OF_ITEMS }
  var RESPONSIBLE_ORGANIZATIONS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eORGANIZATION>/*[1:
    nil]*/ )?  { rep.RESPONSIBLE_ORGANIZATIONS }
  var REPRESENTATION_RELATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_REPRESENTATION_RELATIONSHIP?  { rep.REPRESENTATION_RELATION }
  var EFFECTIVITY_START_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { rep.EFFECTIVITY_START_ID }
  var SOURCE_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sSOURCE_ITEM?  { rep.SOURCE_ID }
  var NEUTRAL_SKETCH_SEMANTICS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nCURVES_OR_AREA?  { rep.NEUTRAL_SKETCH_SEMANTICS }
  var REPRESENTED_LINK: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eKINEMATIC_LINK?  { rep.REPRESENTED_LINK }
  var REPRESENTED_TOPOLOGY: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sKINEMATIC_TOPOLOGY_REPRESENTATION_SELECT?  { rep.REPRESENTED_TOPOLOGY }
  var UNCERTAINTY: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eUNCERTAINTY_MEASURE_WITH_UNIT>
    /*[1:nil]*/ )?  { rep.UNCERTAINTY }
  var DEFINITION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sREPRESENTED_DEFINITION?  { rep.DEFINITION }
  var CONFIGURATION: SDAI.GENERIC_ENTITY?  { rep.CONFIGURATION }
  var NAME: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { rep.NAME }
  var REPRESENTED_MECHANISM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMECHANISM_REPRESENTATION?  { rep.REPRESENTED_MECHANISM }
  var USAGE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_RELATIONSHIP?  { rep.USAGE }
}

