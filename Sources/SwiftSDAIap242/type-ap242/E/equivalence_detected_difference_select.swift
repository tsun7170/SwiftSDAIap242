/* file: equivalence_detected_difference_select.swift 	 generated: Mon Jan  3 16:32:52 2022 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.1, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -TYPE DEFINITION in EXPRESS
/*
  TYPE equivalence_detected_difference_select = SELECT
    ( a3ms_inspected_equivalence_element_select (*SELECT*),
     area_measure (*TYPE*),
     assembly_component_usage (*ENTITY*),
     binary_assembly_constraint (*ENTITY*),
     cartesian_point (*ENTITY*),
     connected_face_set (*ENTITY*),
     context_dependent_shape_representation (*ENTITY*),
     count_measure (*TYPE*),
     edge (*ENTITY*),
     face (*ENTITY*),
     length_measure (*TYPE*),
     multi_level_reference_designator (*ENTITY*),
     point_on_curve (*ENTITY*),
     point_on_surface (*ENTITY*),
     volume_measure (*TYPE*) );
  END_TYPE; -- equivalence_detected_difference_select (line:2923 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES FOR SELECT
/*
  a3ms_inspected_equivalence_element_select (*SELECT*):
  ATTR:  cfs_faces: SET [1 : ?] OF face
  ATTR:  product_definition_id: identifier
  ATTR:  product_occurrence_id: identifier
  ATTR:  item_id: source_item
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  normals: LIST [1 : ?] OF LIST [3 : 3] OF REAL
  ATTR:  descendant_occurrences: SET [0 : ?] OF product_definition_specified_occurrence
  ATTR:  product_definition_formation_id: identifier
  ATTR:  quantity: measure_with_unit
  ATTR:  defined_version: collection_version
  ATTR:  sbwm_boundary: SET [1 : ?] OF shell
  ATTR:  items: SET [1 : ?] OF representation_item
  ATTR:  permanent_aggregate_id: identifier
  ATTR:  id_owning_organization_name: label
  ATTR:  point_coordinates: LIST [1 : ?] OF LIST [3 : 3] OF REAL
  ATTR:  intensities: LIST [1 : ?] OF REAL
  ATTR:  occurrence_usage: product_definition_occurrence_or_reference
  ATTR:  documentation_ids: SET [1 : ?] OF document
  ATTR:  colour_indices: LIST [1 : ?] OF LIST [3 : 3] OF INTEGER
  ATTR:  parent_face_set: connected_face_set
  ATTR:  open_shell_element: open_shell
  ATTR:  tessellation_accuracy_parameters: SET [1 : ?] OF tessellation_accuracy_parameter_item
  ATTR:  closed_shell_element: closed_shell
  ATTR:  vertex_geometry: point
  ATTR:  product_id: identifier
  ATTR:  child_occurrences: SET [0 : ?] OF product_definition_specified_occurrence
  ATTR:  relating_product_definition: linear_array_placement_group_component
  ATTR:  source: external_source *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  context_of_items: representation_context
  ATTR:  sbsm_boundary: SET [1 : ?] OF shell
  ATTR:  outer: closed_shell
  ATTR:  ces_edges: SET [1 : ?] OF edge
  ATTR:  neutral_sketch_semantics: curves_or_area
  ATTR:  permanent_id: identifier
  ATTR:  frame_of_reference: product_definition_context
  ATTR:  related_product_definition: linear_array_placement_group_component
  ATTR:  name: label *** Multiple Select Case Sources ***
  ATTR:  assembly_usages: SET [0 : ?] OF assembly_component_usage
  ATTR:  voids: SET [1 : ?] OF oriented_closed_shell
  ATTR:  dim: dimension_count
  ATTR:  formation: product_definition_formation

  area_measure (*TYPE*): area_measure

  assembly_component_usage (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  leaf: product_definition_or_reference
  ATTR:  next_usage: next_assembly_usage_occurrence
  ATTR:  reference_designator: identifier
  ATTR:  upper_usage: assembly_component_usage
  ATTR:  quantity: measure_with_unit *** Multiple Select Case Sources ***
  ATTR:  root: product_definition
  ATTR:  relating_product_definition: product_definition_or_reference *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  product_definition_occurrence_id: identifier
  ATTR:  location: LIST [1 : ?] OF UNIQUE next_assembly_usage_occurrence
  ATTR:  related_product_definition: product_definition_or_reference *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  binary_assembly_constraint (*ENTITY*):
  ATTR:  description: (AMBIGUOUS (CASE LEVEL))
  ATTR:  transformation_operator: transformation
  ATTR:  constrained_elements: SET [1 : ?] OF representation_item
  ATTR:  reference_elements: SET [0 : ?] OF representation_item
  ATTR:  rep_1: representative_shape_representation
  ATTR:  rep_2: representative_shape_representation
  ATTR:  name: (AMBIGUOUS (CASE LEVEL))

  cartesian_point (*ENTITY*):
  ATTR:  r: (AMBIGUOUS (CASE LEVEL))
  ATTR:  coordinates: LIST [1 : 3] OF length_measure
  ATTR:  z: length_measure
  ATTR:  phi: plane_angle_measure
  ATTR:  theta: (AMBIGUOUS (CASE LEVEL))
  ATTR:  name: label *** Multiple Select Case Sources ***
  ATTR:  dim: dimension_count

  connected_face_set (*ENTITY*):
  ATTR:  cfs_faces: SET [1 : ?] OF face
  ATTR:  orientation: (AMBIGUOUS (CASE LEVEL))
  ATTR:  permanent_aggregate_id: identifier
  ATTR:  parent_face_set: connected_face_set
  ATTR:  open_shell_element: open_shell
  ATTR:  closed_shell_element: closed_shell
  ATTR:  permanent_id: identifier
  ATTR:  name: label *** Multiple Select Case Sources ***

  context_dependent_shape_representation (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  represented_product_relation: product_definition_shape
  ATTR:  representation_relation: shape_representation_relationship
  ATTR:  name: label *** Multiple Select Case Sources ***

  count_measure (*TYPE*): count_measure

  edge (*ENTITY*):
  ATTR:  edge_element: edge
  ATTR:  orientation: BOOLEAN *** Multiple Select Case Sources ***
  ATTR:  permanent_aggregate_id: identifier
  ATTR:  pcurve_reference: pcurve
  ATTR:  edge_end: vertex
  ATTR:  edge_length: positive_length_measure
  ATTR:  edge_start: vertex
  ATTR:  edge_geometry: curve
  ATTR:  same_sense: BOOLEAN *** Multiple Select Case Sources ***
  ATTR:  permanent_id: identifier
  ATTR:  parent_edge: edge
  ATTR:  name: label *** Multiple Select Case Sources ***

  face (*ENTITY*):
  ATTR:  bounds: SET [1 : ?] OF face_bound
  ATTR:  orientation: BOOLEAN *** Multiple Select Case Sources ***
  ATTR:  permanent_aggregate_id: identifier
  ATTR:  parent_face: face
  ATTR:  face_geometry: surface
  ATTR:  face_element: face
  ATTR:  same_sense: BOOLEAN *** Multiple Select Case Sources ***
  ATTR:  permanent_id: identifier
  ATTR:  name: label *** Multiple Select Case Sources ***

  length_measure (*TYPE*): length_measure

  multi_level_reference_designator (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  leaf: product_definition_or_reference
  ATTR:  reference_designator: identifier
  ATTR:  root: product_definition
  ATTR:  relating_product_definition: product_definition *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  location: LIST [1 : ?] OF UNIQUE next_assembly_usage_occurrence
  ATTR:  related_product_definition: product_definition_or_reference *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  point_on_curve (*ENTITY*):
  ATTR:  basis_curve: curve
  ATTR:  point_parameter: parameter_value
  ATTR:  basis_edge_curve: edge_curve
  ATTR:  name: label *** Multiple Select Case Sources ***
  ATTR:  dim: dimension_count

  point_on_surface (*ENTITY*):
  ATTR:  basis_surface: surface
  ATTR:  point_parameter_u: parameter_value
  ATTR:  point_parameter_v: parameter_value
  ATTR:  basis_face_surface: face_surface
  ATTR:  name: label *** Multiple Select Case Sources ***
  ATTR:  dim: dimension_count

  volume_measure (*TYPE*): volume_measure

*/

/** SELECT type
- EXPRESS:
```express
  TYPE equivalence_detected_difference_select = SELECT
    ( a3ms_inspected_equivalence_element_select (*SELECT*),
     area_measure (*TYPE*),
     assembly_component_usage (*ENTITY*),
     binary_assembly_constraint (*ENTITY*),
     cartesian_point (*ENTITY*),
     connected_face_set (*ENTITY*),
     context_dependent_shape_representation (*ENTITY*),
     count_measure (*TYPE*),
     edge (*ENTITY*),
     face (*ENTITY*),
     length_measure (*TYPE*),
     multi_level_reference_designator (*ENTITY*),
     point_on_curve (*ENTITY*),
     point_on_surface (*ENTITY*),
     volume_measure (*TYPE*) );
  END_TYPE; -- equivalence_detected_difference_select (line:2923 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public enum sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT : SDAIValue, AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT__type {

    /// SELECT case ``sA3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT`` (SELECT) in ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    case _A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(sA3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT)	// (SELECT)

    /// SELECT case ``tAREA_MEASURE`` (TYPE) in ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    case _AREA_MEASURE(tAREA_MEASURE)	// (TYPE)

    /// SELECT case ``eASSEMBLY_COMPONENT_USAGE`` (ENTITY) in ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    case _ASSEMBLY_COMPONENT_USAGE(eASSEMBLY_COMPONENT_USAGE)	// (ENTITY)

    /// SELECT case ``eBINARY_ASSEMBLY_CONSTRAINT`` (ENTITY) in ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    case _BINARY_ASSEMBLY_CONSTRAINT(eBINARY_ASSEMBLY_CONSTRAINT)	// (ENTITY)

    /// SELECT case ``eCARTESIAN_POINT`` (ENTITY) in ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    case _CARTESIAN_POINT(eCARTESIAN_POINT)	// (ENTITY)

    /// SELECT case ``eCONNECTED_FACE_SET`` (ENTITY) in ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    case _CONNECTED_FACE_SET(eCONNECTED_FACE_SET)	// (ENTITY)

    /// SELECT case ``eCONTEXT_DEPENDENT_SHAPE_REPRESENTATION`` (ENTITY) in ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    case _CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(eCONTEXT_DEPENDENT_SHAPE_REPRESENTATION)	// (ENTITY)

    /// SELECT case ``tCOUNT_MEASURE`` (TYPE) in ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    case _COUNT_MEASURE(tCOUNT_MEASURE)	// (TYPE)

    /// SELECT case ``eEDGE`` (ENTITY) in ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    case _EDGE(eEDGE)	// (ENTITY)

    /// SELECT case ``eFACE`` (ENTITY) in ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    case _FACE(eFACE)	// (ENTITY)

    /// SELECT case ``tLENGTH_MEASURE`` (TYPE) in ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    case _LENGTH_MEASURE(tLENGTH_MEASURE)	// (TYPE)

    /// SELECT case ``eMULTI_LEVEL_REFERENCE_DESIGNATOR`` (ENTITY) in ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    case _MULTI_LEVEL_REFERENCE_DESIGNATOR(eMULTI_LEVEL_REFERENCE_DESIGNATOR)	// (ENTITY)

    /// SELECT case ``ePOINT_ON_CURVE`` (ENTITY) in ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    case _POINT_ON_CURVE(ePOINT_ON_CURVE)	// (ENTITY)

    /// SELECT case ``ePOINT_ON_SURFACE`` (ENTITY) in ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    case _POINT_ON_SURFACE(ePOINT_ON_SURFACE)	// (ENTITY)

    /// SELECT case ``tVOLUME_MEASURE`` (TYPE) in ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    case _VOLUME_MEASURE(tVOLUME_MEASURE)	// (TYPE)

    //MARK: - CONSTRUCTORS
    public init(fundamental: FundamentalType) { self = fundamental }

    public init?<T: SDAIUnderlyingType>(possiblyFrom underlyingType: T?){
      guard let underlyingType = underlyingType else { return nil }

      if let base = underlyingType as? sA3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT {
        self = ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(base)
      }
      else if let base = underlyingType as? tAREA_MEASURE {
        self = ._AREA_MEASURE(base)
      }
      else if let base = underlyingType as? tCOUNT_MEASURE {
        self = ._COUNT_MEASURE(base)
      }
      else if let base = underlyingType as? tLENGTH_MEASURE {
        self = ._LENGTH_MEASURE(base)
      }
      else if let base = underlyingType as? tVOLUME_MEASURE {
        self = ._VOLUME_MEASURE(base)
      }
      else if let base = sA3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(possiblyFrom: underlyingType) {
        self = ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(base)
      }
      else if let fundamental = underlyingType.asFundamentalType as? tAREA_MEASURE.FundamentalType {
        self = ._AREA_MEASURE( tAREA_MEASURE(fundamental: fundamental) )
      }
      else if let fundamental = underlyingType.asFundamentalType as? tCOUNT_MEASURE.FundamentalType {
        self = ._COUNT_MEASURE( tCOUNT_MEASURE(fundamental: fundamental) )
      }
      else if let fundamental = underlyingType.asFundamentalType as? tLENGTH_MEASURE.FundamentalType {
        self = ._LENGTH_MEASURE( tLENGTH_MEASURE(fundamental: fundamental) )
      }
      else if let fundamental = underlyingType.asFundamentalType as? tVOLUME_MEASURE.FundamentalType {
        self = ._VOLUME_MEASURE( tVOLUME_MEASURE(fundamental: fundamental) )
      }
      else { return nil }
    }

    public init?(possiblyFrom complex: SDAI.ComplexEntity?) {
      guard let complex = complex else { return nil }

      if let base = sA3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(possiblyFrom: complex) {
        self = ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(base)
      }
      else if let base = complex.entityReference(eASSEMBLY_COMPONENT_USAGE.self) {self = ._ASSEMBLY_COMPONENT_USAGE(base) }
      else if let base = complex.entityReference(eBINARY_ASSEMBLY_CONSTRAINT.self) {self = ._BINARY_ASSEMBLY_CONSTRAINT(base) }
      else if let base = complex.entityReference(eCARTESIAN_POINT.self) {self = ._CARTESIAN_POINT(base) }
      else if let base = complex.entityReference(eCONNECTED_FACE_SET.self) {self = ._CONNECTED_FACE_SET(base) }
      else if let base = complex.entityReference(eCONTEXT_DEPENDENT_SHAPE_REPRESENTATION.self) {self = ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(base) }
      else if let base = complex.entityReference(eEDGE.self) {self = ._EDGE(base) }
      else if let base = complex.entityReference(eFACE.self) {self = ._FACE(base) }
      else if let base = complex.entityReference(eMULTI_LEVEL_REFERENCE_DESIGNATOR.self) {self = ._MULTI_LEVEL_REFERENCE_DESIGNATOR(base) }
      else if let base = complex.entityReference(ePOINT_ON_CURVE.self) {self = ._POINT_ON_CURVE(base) }
      else if let base = complex.entityReference(ePOINT_ON_SURFACE.self) {self = ._POINT_ON_SURFACE(base) }
      else { return nil }
    }

    public init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let select = generic else { return nil }

      if let fundamental = select as? Self {
        self.init(fundamental: fundamental)
      }
      else if let base = sA3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT.convert(fromGeneric: select) {
        self = ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(base)
      }
      else if let base = tAREA_MEASURE.convert(fromGeneric: select) {
        self = ._AREA_MEASURE(base)
      }
      else if let base = eASSEMBLY_COMPONENT_USAGE.convert(fromGeneric: select) {
        self = ._ASSEMBLY_COMPONENT_USAGE(base)
      }
      else if let base = eBINARY_ASSEMBLY_CONSTRAINT.convert(fromGeneric: select) {
        self = ._BINARY_ASSEMBLY_CONSTRAINT(base)
      }
      else if let base = eCARTESIAN_POINT.convert(fromGeneric: select) {
        self = ._CARTESIAN_POINT(base)
      }
      else if let base = eCONNECTED_FACE_SET.convert(fromGeneric: select) {
        self = ._CONNECTED_FACE_SET(base)
      }
      else if let base = eCONTEXT_DEPENDENT_SHAPE_REPRESENTATION.convert(fromGeneric: select) {
        self = ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(base)
      }
      else if let base = tCOUNT_MEASURE.convert(fromGeneric: select) {
        self = ._COUNT_MEASURE(base)
      }
      else if let base = eEDGE.convert(fromGeneric: select) {
        self = ._EDGE(base)
      }
      else if let base = eFACE.convert(fromGeneric: select) {
        self = ._FACE(base)
      }
      else if let base = tLENGTH_MEASURE.convert(fromGeneric: select) {
        self = ._LENGTH_MEASURE(base)
      }
      else if let base = eMULTI_LEVEL_REFERENCE_DESIGNATOR.convert(fromGeneric: select) {
        self = ._MULTI_LEVEL_REFERENCE_DESIGNATOR(base)
      }
      else if let base = ePOINT_ON_CURVE.convert(fromGeneric: select) {
        self = ._POINT_ON_CURVE(base)
      }
      else if let base = ePOINT_ON_SURFACE.convert(fromGeneric: select) {
        self = ._POINT_ON_SURFACE(base)
      }
      else if let base = tVOLUME_MEASURE.convert(fromGeneric: select) {
        self = ._VOLUME_MEASURE(base)
      }
      else { return nil }
    }

    // InitializableByP21Parameter
    public static var bareTypeName: String = "EQUIVALENCE_DETECTED_DIFFERENCE_SELECT"

    public init?(p21typedParam: P21Decode.ExchangeStructure.TypedParameter, from exchangeStructure: P21Decode.ExchangeStructure) {
      guard let keyword = p21typedParam.keyword.asStandardKeyword else { exchangeStructure.error = "unexpected p21parameter(\(p21typedParam)) while resolving \(Self.bareTypeName) select value"; return nil }

      switch(keyword) {
      case sA3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT.bareTypeName:
        guard let base = sA3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(p21typedParam: p21typedParam, from: exchangeStructure) else { exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) select value"); return nil }
        self = ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(base)

      case tAREA_MEASURE.bareTypeName:
        guard let base = tAREA_MEASURE(p21typedParam: p21typedParam, from: exchangeStructure) else { exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) select value"); return nil }
        self = ._AREA_MEASURE(base)

      case tCOUNT_MEASURE.bareTypeName:
        guard let base = tCOUNT_MEASURE(p21typedParam: p21typedParam, from: exchangeStructure) else { exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) select value"); return nil }
        self = ._COUNT_MEASURE(base)

      case tLENGTH_MEASURE.bareTypeName:
        guard let base = tLENGTH_MEASURE(p21typedParam: p21typedParam, from: exchangeStructure) else { exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) select value"); return nil }
        self = ._LENGTH_MEASURE(base)

      case tVOLUME_MEASURE.bareTypeName:
        guard let base = tVOLUME_MEASURE(p21typedParam: p21typedParam, from: exchangeStructure) else { exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) select value"); return nil }
        self = ._VOLUME_MEASURE(base)

      default:
        exchangeStructure.error = "unexpected p21parameter(\(p21typedParam)) while resolving \(Self.bareTypeName) select value"
        return nil
      }
    }

    public init?(p21untypedParam: P21Decode.ExchangeStructure.UntypedParameter, from exchangeStructure: P21Decode.ExchangeStructure) {
      switch p21untypedParam {
      case .rhsOccurenceName(let rhsname):
        switch rhsname {
        case .constantEntityName(let name):
          guard let entity = exchangeStructure.resolve(constantEntityName: name) else {exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) instance"); return nil }
          self.init(possiblyFrom: entity.complexEntity)

        case .entityInstanceName(let name):
          guard let complex = exchangeStructure.resolve(entityInstanceName: name) else {exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) instance"); return nil }
          self.init(possiblyFrom: complex)

        default:
          exchangeStructure.error = "unexpected p21parameter(\(p21untypedParam)) while resolving \(Self.bareTypeName) select instance"
          return nil
        }

      default:
        exchangeStructure.error = "unexpected p21parameter(\(p21untypedParam)) while resolving \(Self.bareTypeName) select instance"
        return nil
      }
    }

    public init?(p21omittedParamfrom exchangeStructure: P21Decode.ExchangeStructure) {
      return nil
    }


    //MARK: - NON-ENTITY UNDERLYING TYPE REFERENCES
    public var super_sA3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT: 
      sA3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT? {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let selectValue): return selectValue
      default: return nil
      }
    }

    public var super_tAREA_MEASURE: tAREA_MEASURE? {
      switch self {
      case ._AREA_MEASURE(let selectValue): return selectValue
      default: return nil
      }
    }

    public var super_tCOUNT_MEASURE: tCOUNT_MEASURE? {
      switch self {
      case ._COUNT_MEASURE(let selectValue): return selectValue
      default: return nil
      }
    }

    public var super_tLENGTH_MEASURE: tLENGTH_MEASURE? {
      switch self {
      case ._LENGTH_MEASURE(let selectValue): return selectValue
      default: return nil
      }
    }

    public var super_tVOLUME_MEASURE: tVOLUME_MEASURE? {
      switch self {
      case ._VOLUME_MEASURE(let selectValue): return selectValue
      default: return nil
      }
    }

    //MARK: - ENTITY UNDERLYING TYPE REFERENCES
    public var super_eSCANNED_DATA_ITEM: eSCANNED_DATA_ITEM? {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let select): return select.super_eSCANNED_DATA_ITEM
      default: return nil
      }
    }

    public var super_eREPRESENTATION_RELATIONSHIP: eREPRESENTATION_RELATIONSHIP? {
      switch self {
      case ._BINARY_ASSEMBLY_CONSTRAINT(let entity): return entity.super_eREPRESENTATION_RELATIONSHIP
      default: return nil
      }
    }

    public var super_eASSEMBLY_GEOMETRIC_CONSTRAINT: eASSEMBLY_GEOMETRIC_CONSTRAINT? {
      switch self {
      case ._BINARY_ASSEMBLY_CONSTRAINT(let entity): return entity.super_eASSEMBLY_GEOMETRIC_CONSTRAINT
      default: return nil
      }
    }

    public var super_eREPRESENTATION: eREPRESENTATION? {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let select): return select.super_eREPRESENTATION
      default: return nil
      }
    }

    public var super_eTOPOLOGICAL_REPRESENTATION_ITEM: eTOPOLOGICAL_REPRESENTATION_ITEM? {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let select): return select
        .super_eTOPOLOGICAL_REPRESENTATION_ITEM
      case ._CONNECTED_FACE_SET(let entity): return entity.super_eTOPOLOGICAL_REPRESENTATION_ITEM
      case ._EDGE(let entity): return entity.super_eTOPOLOGICAL_REPRESENTATION_ITEM
      case ._FACE(let entity): return entity.super_eTOPOLOGICAL_REPRESENTATION_ITEM
      default: return nil
      }
    }

    public var super_eMANIFOLD_SOLID_BREP: eMANIFOLD_SOLID_BREP? {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let select): return select.super_eMANIFOLD_SOLID_BREP
      default: return nil
      }
    }

    public var super_ePOINT_ON_SURFACE: ePOINT_ON_SURFACE? {
      switch self {
      case ._POINT_ON_SURFACE(let entity): return entity
      default: return nil
      }
    }

    public var super_eGENERIC_PRODUCT_DEFINITION_REFERENCE: eGENERIC_PRODUCT_DEFINITION_REFERENCE? {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let select): return select
        .super_eGENERIC_PRODUCT_DEFINITION_REFERENCE
      default: return nil
      }
    }

    public var super_eSHAPE_REPRESENTATION: eSHAPE_REPRESENTATION? {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let select): return select
        .super_eSHAPE_REPRESENTATION
      default: return nil
      }
    }

    public var super_eEXTERNALLY_DEFINED_REPRESENTATION_ITEM: eEXTERNALLY_DEFINED_REPRESENTATION_ITEM? {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let select): return select
        .super_eEXTERNALLY_DEFINED_REPRESENTATION_ITEM
      default: return nil
      }
    }

    public var super_ePRODUCT_DEFINITION_OCCURRENCE: ePRODUCT_DEFINITION_OCCURRENCE? {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let select): return select
        .super_ePRODUCT_DEFINITION_OCCURRENCE
      default: return nil
      }
    }

    public var super_eEXTERNALLY_DEFINED_ITEM: eEXTERNALLY_DEFINED_ITEM? {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let select): return select
        .super_eEXTERNALLY_DEFINED_ITEM
      default: return nil
      }
    }

    public var super_eEDGE: eEDGE? {
      switch self {
      case ._EDGE(let entity): return entity
      default: return nil
      }
    }

    public var super_eVERTEX: eVERTEX? {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let select): return select.super_eVERTEX
      default: return nil
      }
    }

    public var super_ePRODUCT_DEFINITION_USAGE: ePRODUCT_DEFINITION_USAGE? {
      switch self {
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): return entity.super_ePRODUCT_DEFINITION_USAGE
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let entity): return entity.super_ePRODUCT_DEFINITION_USAGE
      default: return nil
      }
    }

    public var super_eBINARY_ASSEMBLY_CONSTRAINT: eBINARY_ASSEMBLY_CONSTRAINT? {
      switch self {
      case ._BINARY_ASSEMBLY_CONSTRAINT(let entity): return entity
      default: return nil
      }
    }

    public var super_eCARTESIAN_POINT: eCARTESIAN_POINT? {
      switch self {
      case ._CARTESIAN_POINT(let entity): return entity
      default: return nil
      }
    }

    public var super_eSHELL_BASED_WIREFRAME_MODEL: eSHELL_BASED_WIREFRAME_MODEL? {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let select): return select
        .super_eSHELL_BASED_WIREFRAME_MODEL
      default: return nil
      }
    }

    public var super_eCONNECTED_FACE_SET: eCONNECTED_FACE_SET? {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let select): return select.super_eCONNECTED_FACE_SET
      case ._CONNECTED_FACE_SET(let entity): return entity
      default: return nil
      }
    }

    public var super_eSHELL_BASED_SURFACE_MODEL: eSHELL_BASED_SURFACE_MODEL? {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let select): return select
        .super_eSHELL_BASED_SURFACE_MODEL
      default: return nil
      }
    }

    public var super_eREPRESENTATION_RELATIONSHIP_WITH_TRANSFORMATION: 
      eREPRESENTATION_RELATIONSHIP_WITH_TRANSFORMATION? {
      switch self {
      case ._BINARY_ASSEMBLY_CONSTRAINT(let entity): return entity
        .super_eREPRESENTATION_RELATIONSHIP_WITH_TRANSFORMATION
      default: return nil
      }
    }

    public var super_eSOLID_MODEL: eSOLID_MODEL? {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let select): return select.super_eSOLID_MODEL
      default: return nil
      }
    }

    public var super_eFACE: eFACE? {
      switch self {
      case ._FACE(let entity): return entity
      default: return nil
      }
    }

    public var super_ePRODUCT_DEFINITION: ePRODUCT_DEFINITION? {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let select): return select.super_ePRODUCT_DEFINITION
      default: return nil
      }
    }

    public var super_eREPRESENTATION_ITEM: eREPRESENTATION_ITEM? {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let select): return select.super_eREPRESENTATION_ITEM
      case ._BINARY_ASSEMBLY_CONSTRAINT(let entity): return entity.super_eREPRESENTATION_ITEM
      case ._CARTESIAN_POINT(let entity): return entity.super_eREPRESENTATION_ITEM
      case ._CONNECTED_FACE_SET(let entity): return entity.super_eREPRESENTATION_ITEM
      case ._EDGE(let entity): return entity.super_eREPRESENTATION_ITEM
      case ._FACE(let entity): return entity.super_eREPRESENTATION_ITEM
      case ._POINT_ON_CURVE(let entity): return entity.super_eREPRESENTATION_ITEM
      case ._POINT_ON_SURFACE(let entity): return entity.super_eREPRESENTATION_ITEM
      default: return nil
      }
    }

    public var super_eVERTEX_POINT: eVERTEX_POINT? {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let select): return select.super_eVERTEX_POINT
      default: return nil
      }
    }

    public var super_eASSEMBLY_COMPONENT_USAGE: eASSEMBLY_COMPONENT_USAGE? {
      switch self {
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): return entity
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let entity): return entity.super_eASSEMBLY_COMPONENT_USAGE
      default: return nil
      }
    }

    public var super_eCONTEXT_DEPENDENT_SHAPE_REPRESENTATION: eCONTEXT_DEPENDENT_SHAPE_REPRESENTATION? {
      switch self {
      case ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(let entity): return entity
      default: return nil
      }
    }

    public var super_eMULTI_LEVEL_REFERENCE_DESIGNATOR: eMULTI_LEVEL_REFERENCE_DESIGNATOR? {
      switch self {
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let entity): return entity
      default: return nil
      }
    }

    public var super_ePOINT: ePOINT? {
      switch self {
      case ._CARTESIAN_POINT(let entity): return entity.super_ePOINT
      case ._POINT_ON_CURVE(let entity): return entity.super_ePOINT
      case ._POINT_ON_SURFACE(let entity): return entity.super_ePOINT
      default: return nil
      }
    }

    public var super_eVARIATIONAL_REPRESENTATION_ITEM: eVARIATIONAL_REPRESENTATION_ITEM? {
      switch self {
      case ._BINARY_ASSEMBLY_CONSTRAINT(let entity): return entity.super_eVARIATIONAL_REPRESENTATION_ITEM
      default: return nil
      }
    }

    public var super_eCONNECTED_EDGE_SET: eCONNECTED_EDGE_SET? {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let select): return select.super_eCONNECTED_EDGE_SET
      default: return nil
      }
    }

    public var super_ePRODUCT_DEFINITION_RELATIONSHIP: ePRODUCT_DEFINITION_RELATIONSHIP? {
      switch self {
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): return entity.super_ePRODUCT_DEFINITION_RELATIONSHIP
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let entity): return entity
        .super_ePRODUCT_DEFINITION_RELATIONSHIP
      default: return nil
      }
    }

    public var super_eEXPLICIT_CONSTRAINT: eEXPLICIT_CONSTRAINT? {
      switch self {
      case ._BINARY_ASSEMBLY_CONSTRAINT(let entity): return entity.super_eEXPLICIT_CONSTRAINT
      default: return nil
      }
    }

    public var super_ePOINT_ON_CURVE: ePOINT_ON_CURVE? {
      switch self {
      case ._POINT_ON_CURVE(let entity): return entity
      default: return nil
      }
    }

    public var super_eGEOMETRIC_REPRESENTATION_ITEM: eGEOMETRIC_REPRESENTATION_ITEM? {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let select): return select
        .super_eGEOMETRIC_REPRESENTATION_ITEM
      case ._CARTESIAN_POINT(let entity): return entity.super_eGEOMETRIC_REPRESENTATION_ITEM
      case ._POINT_ON_CURVE(let entity): return entity.super_eGEOMETRIC_REPRESENTATION_ITEM
      case ._POINT_ON_SURFACE(let entity): return entity.super_eGEOMETRIC_REPRESENTATION_ITEM
      default: return nil
      }
    }

    public var super_ePOINT_CLOUD_DATASET: ePOINT_CLOUD_DATASET? {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let select): return select.super_ePOINT_CLOUD_DATASET
      default: return nil
      }
    }


    //MARK: - ENTITY ATTRIBUTE REFERENCES
    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: SELECT( ``sA3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT`` )
    /// - origin: ENTITY( ``eCONNECTED_FACE_SET`` )
    public var CFS_FACES: (SDAI.SET<eFACE>/*[1:nil]*/ )?  {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let select): return select.CFS_FACES
      case ._CONNECTED_FACE_SET(let entity): return entity.CFS_FACES
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: SELECT( ``sA3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT`` )
    public var PRODUCT_DEFINITION_ID: tIDENTIFIER?  {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let select): return select.PRODUCT_DEFINITION_ID
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: SELECT( ``sA3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT`` )
    public var PRODUCT_OCCURRENCE_ID: tIDENTIFIER?  {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let select): return select.PRODUCT_OCCURRENCE_ID
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: SELECT( ``sA3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT`` )
    public var ITEM_ID: sSOURCE_ITEM?  {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let select): return select.ITEM_ID
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: SELECT( ``sA3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT`` )
    /// - origin: ENTITY( ``eASSEMBLY_COMPONENT_USAGE`` )
    /// - origin: ENTITY( ``eCONTEXT_DEPENDENT_SHAPE_REPRESENTATION`` )
    /// - origin: ENTITY( ``eMULTI_LEVEL_REFERENCE_DESIGNATOR`` )
    public var DESCRIPTION: tTEXT?  {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let select): return select.DESCRIPTION
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): return entity.DESCRIPTION
      case ._BINARY_ASSEMBLY_CONSTRAINT/*(let entity)*/: return nil // AMBIGUOUS ATTRIBUTE for eBINARY_ASSEMBLY_CONSTRAINT
      case ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(let entity): return entity.DESCRIPTION
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let entity): return entity.DESCRIPTION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: ENTITY( ``eASSEMBLY_COMPONENT_USAGE`` )
    /// - origin: ENTITY( ``eMULTI_LEVEL_REFERENCE_DESIGNATOR`` )
    public var LEAF: sPRODUCT_DEFINITION_OR_REFERENCE?  {
      switch self {
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): return entity.LEAF
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let entity): return entity.LEAF
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: ENTITY( ``eBINARY_ASSEMBLY_CONSTRAINT`` )
    public var TRANSFORMATION_OPERATOR: sTRANSFORMATION?  {
      switch self {
      case ._BINARY_ASSEMBLY_CONSTRAINT(let entity): return entity.TRANSFORMATION_OPERATOR
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: ENTITY( ``eBINARY_ASSEMBLY_CONSTRAINT`` )
    public var CONSTRAINED_ELEMENTS: (SDAI.SET<eREPRESENTATION_ITEM>/*[1:nil]*/ )?  {
      switch self {
      case ._BINARY_ASSEMBLY_CONSTRAINT(let entity): return entity.CONSTRAINED_ELEMENTS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: ENTITY( ``eASSEMBLY_COMPONENT_USAGE`` )
    public var NEXT_USAGE: eNEXT_ASSEMBLY_USAGE_OCCURRENCE?  {
      switch self {
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): return entity.NEXT_USAGE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: ENTITY( ``eFACE`` )
    public var BOUNDS: (SDAI.SET<eFACE_BOUND>/*[1:nil]*/ )?  {
      switch self {
      case ._FACE(let entity): return entity.BOUNDS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: ENTITY( ``ePOINT_ON_CURVE`` )
    public var BASIS_CURVE: eCURVE?  {
      switch self {
      case ._POINT_ON_CURVE(let entity): return entity.BASIS_CURVE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: SELECT( ``sA3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT`` )
    public var NORMALS: (SDAI.LIST<SDAI.LIST<SDAI.REAL>/*[3:3]*/ >/*[1:nil]*/ )?  {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let select): return select.NORMALS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: ENTITY( ``eASSEMBLY_COMPONENT_USAGE`` )
    /// - origin: ENTITY( ``eMULTI_LEVEL_REFERENCE_DESIGNATOR`` )
    public var REFERENCE_DESIGNATOR: tIDENTIFIER?  {
      switch self {
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): return entity.REFERENCE_DESIGNATOR
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let entity): return entity.REFERENCE_DESIGNATOR
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: SELECT( ``sA3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT`` )
    public var DESCENDANT_OCCURRENCES: (SDAI.SET<ePRODUCT_DEFINITION_SPECIFIED_OCCURRENCE>/*[0:nil]*/ )?  {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let select): return select.DESCENDANT_OCCURRENCES
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: SELECT( ``sA3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT`` )
    public var PRODUCT_DEFINITION_FORMATION_ID: tIDENTIFIER?  {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let select): return 
        select.PRODUCT_DEFINITION_FORMATION_ID
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: ENTITY( ``eASSEMBLY_COMPONENT_USAGE`` )
    public var UPPER_USAGE: eASSEMBLY_COMPONENT_USAGE?  {
      switch self {
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): return entity.UPPER_USAGE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: SELECT( ``sA3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT`` )
    /// - origin: ENTITY( ``eASSEMBLY_COMPONENT_USAGE`` )
    public var QUANTITY: eMEASURE_WITH_UNIT?  {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let select): return select.QUANTITY
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): return entity.QUANTITY
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: ENTITY( ``eEDGE`` )
    public var EDGE_ELEMENT: eEDGE?  {
      switch self {
      case ._EDGE(let entity): return entity.EDGE_ELEMENT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: SELECT( ``sA3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT`` )
    public var DEFINED_VERSION: eCOLLECTION_VERSION?  {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let select): return select.DEFINED_VERSION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: ENTITY( ``eEDGE`` )
    /// - origin: ENTITY( ``eFACE`` )
    public var ORIENTATION: SDAI.BOOLEAN?  {
      switch self {
      case ._CONNECTED_FACE_SET/*(let entity)*/: return nil // AMBIGUOUS ATTRIBUTE for eCONNECTED_FACE_SET
      case ._EDGE(let entity): return entity.ORIENTATION
      case ._FACE(let entity): return entity.ORIENTATION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: SELECT( ``sA3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT`` )
    public var SBWM_BOUNDARY: (SDAI.SET<sSHELL>/*[1:nil]*/ )?  {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let select): return select.SBWM_BOUNDARY
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: SELECT( ``sA3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT`` )
    public var ITEMS: (SDAI.SET<eREPRESENTATION_ITEM>/*[1:nil]*/ )?  {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let select): return select.ITEMS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: SELECT( ``sA3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT`` )
    /// - origin: ENTITY( ``eCONNECTED_FACE_SET`` )
    /// - origin: ENTITY( ``eEDGE`` )
    /// - origin: ENTITY( ``eFACE`` )
    public var PERMANENT_AGGREGATE_ID: tIDENTIFIER?  {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let select): return select.PERMANENT_AGGREGATE_ID
      case ._CONNECTED_FACE_SET(let entity): return entity.PERMANENT_AGGREGATE_ID
      case ._EDGE(let entity): return entity.PERMANENT_AGGREGATE_ID
      case ._FACE(let entity): return entity.PERMANENT_AGGREGATE_ID
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: ENTITY( ``eEDGE`` )
    public var PCURVE_REFERENCE: ePCURVE?  {
      switch self {
      case ._EDGE(let entity): return entity.PCURVE_REFERENCE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: ENTITY( ``eCARTESIAN_POINT`` )
    public var COORDINATES: (SDAI.LIST<tLENGTH_MEASURE>/*[1:3]*/ )?  {
      switch self {
      case ._CARTESIAN_POINT(let entity): return entity.COORDINATES
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: SELECT( ``sA3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT`` )
    public var ID_OWNING_ORGANIZATION_NAME: tLABEL?  {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let select): return 
        select.ID_OWNING_ORGANIZATION_NAME
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: ENTITY( ``eCARTESIAN_POINT`` )
    public var Z: tLENGTH_MEASURE?  {
      switch self {
      case ._CARTESIAN_POINT(let entity): return entity.Z
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: SELECT( ``sA3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT`` )
    public var POINT_COORDINATES: (SDAI.LIST<SDAI.LIST<SDAI.REAL>/*[3:3]*/ >/*[1:nil]*/ )?  {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let select): return select.POINT_COORDINATES
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: ENTITY( ``eBINARY_ASSEMBLY_CONSTRAINT`` )
    public var REFERENCE_ELEMENTS: (SDAI.SET<eREPRESENTATION_ITEM>/*[0:nil]*/ )?  {
      switch self {
      case ._BINARY_ASSEMBLY_CONSTRAINT(let entity): return entity.REFERENCE_ELEMENTS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: SELECT( ``sA3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT`` )
    public var INTENSITIES: (SDAI.LIST<SDAI.REAL>/*[1:nil]*/ )?  {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let select): return select.INTENSITIES
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: SELECT( ``sA3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT`` )
    public var OCCURRENCE_USAGE: sPRODUCT_DEFINITION_OCCURRENCE_OR_REFERENCE?  {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let select): return select.OCCURRENCE_USAGE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: ENTITY( ``eCARTESIAN_POINT`` )
    public var PHI: tPLANE_ANGLE_MEASURE?  {
      switch self {
      case ._CARTESIAN_POINT(let entity): return entity.PHI
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: SELECT( ``sA3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT`` )
    public var DOCUMENTATION_IDS: (SDAI.SET<eDOCUMENT>/*[1:nil]*/ )?  {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let select): return select.DOCUMENTATION_IDS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: ENTITY( ``eFACE`` )
    public var PARENT_FACE: eFACE?  {
      switch self {
      case ._FACE(let entity): return entity.PARENT_FACE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: ENTITY( ``ePOINT_ON_CURVE`` )
    public var POINT_PARAMETER: tPARAMETER_VALUE?  {
      switch self {
      case ._POINT_ON_CURVE(let entity): return entity.POINT_PARAMETER
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: ENTITY( ``ePOINT_ON_CURVE`` )
    public var BASIS_EDGE_CURVE: eEDGE_CURVE?  {
      switch self {
      case ._POINT_ON_CURVE(let entity): return entity.BASIS_EDGE_CURVE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: SELECT( ``sA3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT`` )
    public var COLOUR_INDICES: (SDAI.LIST<SDAI.LIST<SDAI.INTEGER>/*[3:3]*/ >/*[1:nil]*/ )?  {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let select): return select.COLOUR_INDICES
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: SELECT( ``sA3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT`` )
    /// - origin: ENTITY( ``eCONNECTED_FACE_SET`` )
    public var PARENT_FACE_SET: eCONNECTED_FACE_SET?  {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let select): return select.PARENT_FACE_SET
      case ._CONNECTED_FACE_SET(let entity): return entity.PARENT_FACE_SET
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: SELECT( ``sA3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT`` )
    /// - origin: ENTITY( ``eCONNECTED_FACE_SET`` )
    public var OPEN_SHELL_ELEMENT: eOPEN_SHELL?  {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let select): return select.OPEN_SHELL_ELEMENT
      case ._CONNECTED_FACE_SET(let entity): return entity.OPEN_SHELL_ELEMENT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: SELECT( ``sA3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT`` )
    public var TESSELLATION_ACCURACY_PARAMETERS: (SDAI.SET<sTESSELLATION_ACCURACY_PARAMETER_ITEM>/*[1:nil]*/ )?  {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let select): return 
        select.TESSELLATION_ACCURACY_PARAMETERS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: SELECT( ``sA3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT`` )
    /// - origin: ENTITY( ``eCONNECTED_FACE_SET`` )
    public var CLOSED_SHELL_ELEMENT: eCLOSED_SHELL?  {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let select): return select.CLOSED_SHELL_ELEMENT
      case ._CONNECTED_FACE_SET(let entity): return entity.CLOSED_SHELL_ELEMENT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: ENTITY( ``eEDGE`` )
    public var EDGE_END: eVERTEX?  {
      switch self {
      case ._EDGE(let entity): return entity.EDGE_END
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: ENTITY( ``eFACE`` )
    public var FACE_GEOMETRY: eSURFACE?  {
      switch self {
      case ._FACE(let entity): return entity.FACE_GEOMETRY
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: ENTITY( ``eFACE`` )
    public var FACE_ELEMENT: eFACE?  {
      switch self {
      case ._FACE(let entity): return entity.FACE_ELEMENT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: SELECT( ``sA3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT`` )
    public var VERTEX_GEOMETRY: ePOINT?  {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let select): return select.VERTEX_GEOMETRY
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: SELECT( ``sA3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT`` )
    public var PRODUCT_ID: tIDENTIFIER?  {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let select): return select.PRODUCT_ID
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: ENTITY( ``eEDGE`` )
    public var EDGE_LENGTH: tPOSITIVE_LENGTH_MEASURE?  {
      switch self {
      case ._EDGE(let entity): return entity.EDGE_LENGTH
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: ENTITY( ``eASSEMBLY_COMPONENT_USAGE`` )
    /// - origin: ENTITY( ``eMULTI_LEVEL_REFERENCE_DESIGNATOR`` )
    public var ROOT: ePRODUCT_DEFINITION?  {
      switch self {
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): return entity.ROOT
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let entity): return entity.ROOT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: ENTITY( ``ePOINT_ON_SURFACE`` )
    public var BASIS_SURFACE: eSURFACE?  {
      switch self {
      case ._POINT_ON_SURFACE(let entity): return entity.BASIS_SURFACE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: SELECT( ``sA3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT`` )
    public var CHILD_OCCURRENCES: (SDAI.SET<ePRODUCT_DEFINITION_SPECIFIED_OCCURRENCE>/*[0:nil]*/ )?  {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let select): return select.CHILD_OCCURRENCES
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: SELECT( ``sA3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT`` )
    /// - origin: ENTITY( ``eASSEMBLY_COMPONENT_USAGE`` )
    /// - origin: ENTITY( ``eMULTI_LEVEL_REFERENCE_DESIGNATOR`` )
    public var RELATING_PRODUCT_DEFINITION: ePRODUCT_DEFINITION?  {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let select): return ePRODUCT_DEFINITION(
        select.RELATING_PRODUCT_DEFINITION)
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): return ePRODUCT_DEFINITION(
        entity.RELATING_PRODUCT_DEFINITION)
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let entity): return entity.RELATING_PRODUCT_DEFINITION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: ENTITY( ``eCONTEXT_DEPENDENT_SHAPE_REPRESENTATION`` )
    public var REPRESENTED_PRODUCT_RELATION: ePRODUCT_DEFINITION_SHAPE?  {
      switch self {
      case ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(let entity): return entity.REPRESENTED_PRODUCT_RELATION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: ENTITY( ``eEDGE`` )
    public var EDGE_START: eVERTEX?  {
      switch self {
      case ._EDGE(let entity): return entity.EDGE_START
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: SELECT( ``sA3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT`` )
    public var SOURCE: eEXTERNAL_SOURCE?  {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let select): return select.SOURCE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: ENTITY( ``eEDGE`` )
    public var EDGE_GEOMETRY: eCURVE?  {
      switch self {
      case ._EDGE(let entity): return entity.EDGE_GEOMETRY
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: SELECT( ``sA3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT`` )
    /// - origin: ENTITY( ``eASSEMBLY_COMPONENT_USAGE`` )
    /// - origin: ENTITY( ``eMULTI_LEVEL_REFERENCE_DESIGNATOR`` )
    public var ID: tIDENTIFIER?  {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let select): return select.ID
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): return entity.ID
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let entity): return entity.ID
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: SELECT( ``sA3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT`` )
    public var CONTEXT_OF_ITEMS: eREPRESENTATION_CONTEXT?  {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let select): return select.CONTEXT_OF_ITEMS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: ENTITY( ``eBINARY_ASSEMBLY_CONSTRAINT`` )
    public var REP_1: eREPRESENTATIVE_SHAPE_REPRESENTATION?  {
      switch self {
      case ._BINARY_ASSEMBLY_CONSTRAINT(let entity): return entity.REP_1
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: ENTITY( ``ePOINT_ON_SURFACE`` )
    public var POINT_PARAMETER_U: tPARAMETER_VALUE?  {
      switch self {
      case ._POINT_ON_SURFACE(let entity): return entity.POINT_PARAMETER_U
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: ENTITY( ``eBINARY_ASSEMBLY_CONSTRAINT`` )
    public var REP_2: eREPRESENTATIVE_SHAPE_REPRESENTATION?  {
      switch self {
      case ._BINARY_ASSEMBLY_CONSTRAINT(let entity): return entity.REP_2
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: SELECT( ``sA3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT`` )
    public var SBSM_BOUNDARY: (SDAI.SET<sSHELL>/*[1:nil]*/ )?  {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let select): return select.SBSM_BOUNDARY
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: SELECT( ``sA3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT`` )
    public var OUTER: eCLOSED_SHELL?  {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let select): return select.OUTER
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: ENTITY( ``ePOINT_ON_SURFACE`` )
    public var POINT_PARAMETER_V: tPARAMETER_VALUE?  {
      switch self {
      case ._POINT_ON_SURFACE(let entity): return entity.POINT_PARAMETER_V
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: SELECT( ``sA3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT`` )
    public var CES_EDGES: (SDAI.SET<eEDGE>/*[1:nil]*/ )?  {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let select): return select.CES_EDGES
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: ENTITY( ``eCONTEXT_DEPENDENT_SHAPE_REPRESENTATION`` )
    public var REPRESENTATION_RELATION: eSHAPE_REPRESENTATION_RELATIONSHIP?  {
      switch self {
      case ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(let entity): return entity.REPRESENTATION_RELATION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: ENTITY( ``eASSEMBLY_COMPONENT_USAGE`` )
    public var PRODUCT_DEFINITION_OCCURRENCE_ID: tIDENTIFIER?  {
      switch self {
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): return entity.PRODUCT_DEFINITION_OCCURRENCE_ID
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: ENTITY( ``eEDGE`` )
    /// - origin: ENTITY( ``eFACE`` )
    public var SAME_SENSE: SDAI.BOOLEAN?  {
      switch self {
      case ._EDGE(let entity): return entity.SAME_SENSE
      case ._FACE(let entity): return entity.SAME_SENSE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: SELECT( ``sA3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT`` )
    public var NEUTRAL_SKETCH_SEMANTICS: nCURVES_OR_AREA?  {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let select): return select.NEUTRAL_SKETCH_SEMANTICS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: SELECT( ``sA3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT`` )
    /// - origin: ENTITY( ``eCONNECTED_FACE_SET`` )
    /// - origin: ENTITY( ``eEDGE`` )
    /// - origin: ENTITY( ``eFACE`` )
    public var PERMANENT_ID: tIDENTIFIER?  {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let select): return select.PERMANENT_ID
      case ._CONNECTED_FACE_SET(let entity): return entity.PERMANENT_ID
      case ._EDGE(let entity): return entity.PERMANENT_ID
      case ._FACE(let entity): return entity.PERMANENT_ID
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: SELECT( ``sA3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT`` )
    public var FRAME_OF_REFERENCE: ePRODUCT_DEFINITION_CONTEXT?  {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let select): return select.FRAME_OF_REFERENCE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: ENTITY( ``eEDGE`` )
    public var PARENT_EDGE: eEDGE?  {
      switch self {
      case ._EDGE(let entity): return entity.PARENT_EDGE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: ENTITY( ``eASSEMBLY_COMPONENT_USAGE`` )
    /// - origin: ENTITY( ``eMULTI_LEVEL_REFERENCE_DESIGNATOR`` )
    public var LOCATION: (SDAI.LIST_UNIQUE<eNEXT_ASSEMBLY_USAGE_OCCURRENCE>/*[1:nil]*/ )?  {
      switch self {
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): return entity.LOCATION
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let entity): return entity.LOCATION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: ENTITY( ``ePOINT_ON_SURFACE`` )
    public var BASIS_FACE_SURFACE: eFACE_SURFACE?  {
      switch self {
      case ._POINT_ON_SURFACE(let entity): return entity.BASIS_FACE_SURFACE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: SELECT( ``sA3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT`` )
    /// - origin: ENTITY( ``eASSEMBLY_COMPONENT_USAGE`` )
    /// - origin: ENTITY( ``eMULTI_LEVEL_REFERENCE_DESIGNATOR`` )
    public var RELATED_PRODUCT_DEFINITION: sPRODUCT_DEFINITION_OR_REFERENCE?  {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let select): return sPRODUCT_DEFINITION_OR_REFERENCE(
        select.RELATED_PRODUCT_DEFINITION)
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): return entity.RELATED_PRODUCT_DEFINITION
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let entity): return entity.RELATED_PRODUCT_DEFINITION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: SELECT( ``sA3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT`` )
    /// - origin: ENTITY( ``eASSEMBLY_COMPONENT_USAGE`` )
    /// - origin: ENTITY( ``eCARTESIAN_POINT`` )
    /// - origin: ENTITY( ``eCONNECTED_FACE_SET`` )
    /// - origin: ENTITY( ``eCONTEXT_DEPENDENT_SHAPE_REPRESENTATION`` )
    /// - origin: ENTITY( ``eEDGE`` )
    /// - origin: ENTITY( ``eFACE`` )
    /// - origin: ENTITY( ``eMULTI_LEVEL_REFERENCE_DESIGNATOR`` )
    /// - origin: ENTITY( ``ePOINT_ON_CURVE`` )
    /// - origin: ENTITY( ``ePOINT_ON_SURFACE`` )
    public var NAME: tLABEL?  {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let select): return select.NAME
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): return entity.NAME
      case ._BINARY_ASSEMBLY_CONSTRAINT/*(let entity)*/: return nil // AMBIGUOUS ATTRIBUTE for eBINARY_ASSEMBLY_CONSTRAINT
      case ._CARTESIAN_POINT(let entity): return entity.NAME
      case ._CONNECTED_FACE_SET(let entity): return entity.NAME
      case ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(let entity): return entity.NAME
      case ._EDGE(let entity): return entity.NAME
      case ._FACE(let entity): return entity.NAME
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let entity): return entity.NAME
      case ._POINT_ON_CURVE(let entity): return entity.NAME
      case ._POINT_ON_SURFACE(let entity): return entity.NAME
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: SELECT( ``sA3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT`` )
    public var ASSEMBLY_USAGES: (SDAI.SET<eASSEMBLY_COMPONENT_USAGE>/*[0:nil]*/ )?  {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let select): return select.ASSEMBLY_USAGES
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: SELECT( ``sA3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT`` )
    public var VOIDS: (SDAI.SET<eORIENTED_CLOSED_SHELL>/*[1:nil]*/ )?  {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let select): return select.VOIDS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: SELECT( ``sA3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT`` )
    /// - origin: ENTITY( ``eCARTESIAN_POINT`` )
    /// - origin: ENTITY( ``ePOINT_ON_CURVE`` )
    /// - origin: ENTITY( ``ePOINT_ON_SURFACE`` )
    public var DIM: tDIMENSION_COUNT?  {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let select): return select.DIM
      case ._CARTESIAN_POINT(let entity): return entity.DIM
      case ._POINT_ON_CURVE(let entity): return entity.DIM
      case ._POINT_ON_SURFACE(let entity): return entity.DIM
      default: return nil
      }
    }

    /// attribute of SELECT type ``sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT``
    /// - origin: SELECT( ``sA3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT`` )
    public var FORMATION: ePRODUCT_DEFINITION_FORMATION?  {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let select): return select.FORMATION
      default: return nil
      }
    }


    //MARK: - SDAIValue
    public func isValueEqual<T: SDAIValue>(to rhs: T) -> Bool {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let selection): return selection.value.isValueEqual(to: rhs)
      case ._AREA_MEASURE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._BINARY_ASSEMBLY_CONSTRAINT(let selection): return selection.value.isValueEqual(to: rhs)
      case ._CARTESIAN_POINT(let selection): return selection.value.isValueEqual(to: rhs)
      case ._CONNECTED_FACE_SET(let selection): return selection.value.isValueEqual(to: rhs)
      case ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._COUNT_MEASURE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._EDGE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._FACE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._LENGTH_MEASURE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let selection): return selection.value.isValueEqual(to: rhs)
      case ._POINT_ON_CURVE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._POINT_ON_SURFACE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._VOLUME_MEASURE(let selection): return selection.value.isValueEqual(to: rhs)
      }
    }

    public func isValueEqualOptionally<T: SDAIValue>(to rhs: T?) -> Bool? {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._AREA_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._BINARY_ASSEMBLY_CONSTRAINT(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._CARTESIAN_POINT(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._CONNECTED_FACE_SET(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._COUNT_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._EDGE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._FACE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._LENGTH_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._POINT_ON_CURVE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._POINT_ON_SURFACE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._VOLUME_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      }
    }

    public func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._AREA_MEASURE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._BINARY_ASSEMBLY_CONSTRAINT(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._CARTESIAN_POINT(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._CONNECTED_FACE_SET(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._COUNT_MEASURE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._EDGE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._FACE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._LENGTH_MEASURE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._POINT_ON_CURVE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._POINT_ON_SURFACE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._VOLUME_MEASURE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      }
    }

    public func isValueEqual<T: SDAIValue>(to rhs: T, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._AREA_MEASURE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._BINARY_ASSEMBLY_CONSTRAINT(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._CARTESIAN_POINT(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._CONNECTED_FACE_SET(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._COUNT_MEASURE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._EDGE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._FACE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._LENGTH_MEASURE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._POINT_ON_CURVE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._POINT_ON_SURFACE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._VOLUME_MEASURE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      }
    }

    public func isValueEqualOptionally<T: SDAIValue>(to rhs: T?, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._AREA_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._BINARY_ASSEMBLY_CONSTRAINT(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._CARTESIAN_POINT(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._CONNECTED_FACE_SET(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._COUNT_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._EDGE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._FACE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._LENGTH_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._POINT_ON_CURVE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._POINT_ON_SURFACE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._VOLUME_MEASURE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      }
    }


    //MARK: SDAIGenericTypeBase
    public func copy() -> Self {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let selection): return ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(selection.copy())
      case ._AREA_MEASURE(let selection): return ._AREA_MEASURE(selection.copy())
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return ._ASSEMBLY_COMPONENT_USAGE(selection.copy())
      case ._BINARY_ASSEMBLY_CONSTRAINT(let selection): return ._BINARY_ASSEMBLY_CONSTRAINT(selection.copy())
      case ._CARTESIAN_POINT(let selection): return ._CARTESIAN_POINT(selection.copy())
      case ._CONNECTED_FACE_SET(let selection): return ._CONNECTED_FACE_SET(selection.copy())
      case ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(let selection): return ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(selection.copy())
      case ._COUNT_MEASURE(let selection): return ._COUNT_MEASURE(selection.copy())
      case ._EDGE(let selection): return ._EDGE(selection.copy())
      case ._FACE(let selection): return ._FACE(selection.copy())
      case ._LENGTH_MEASURE(let selection): return ._LENGTH_MEASURE(selection.copy())
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let selection): return ._MULTI_LEVEL_REFERENCE_DESIGNATOR(selection.copy())
      case ._POINT_ON_CURVE(let selection): return ._POINT_ON_CURVE(selection.copy())
      case ._POINT_ON_SURFACE(let selection): return ._POINT_ON_SURFACE(selection.copy())
      case ._VOLUME_MEASURE(let selection): return ._VOLUME_MEASURE(selection.copy())
      }
    }

    //MARK: SDAIGenericType
    public var typeMembers: Set<SDAI.STRING> {
      var members: Set<SDAI.STRING> = [SDAI.STRING(Self.typeName)]
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let selection): members.formUnion(selection.typeMembers)
      case ._AREA_MEASURE(let selection): members.formUnion(selection.typeMembers)
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): members.formUnion(selection.typeMembers)
      case ._BINARY_ASSEMBLY_CONSTRAINT(let selection): members.formUnion(selection.typeMembers)
      case ._CARTESIAN_POINT(let selection): members.formUnion(selection.typeMembers)
      case ._CONNECTED_FACE_SET(let selection): members.formUnion(selection.typeMembers)
      case ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(let selection): members.formUnion(selection.typeMembers)
      case ._COUNT_MEASURE(let selection): members.formUnion(selection.typeMembers)
      case ._EDGE(let selection): members.formUnion(selection.typeMembers)
      case ._FACE(let selection): members.formUnion(selection.typeMembers)
      case ._LENGTH_MEASURE(let selection): members.formUnion(selection.typeMembers)
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let selection): members.formUnion(selection.typeMembers)
      case ._POINT_ON_CURVE(let selection): members.formUnion(selection.typeMembers)
      case ._POINT_ON_SURFACE(let selection): members.formUnion(selection.typeMembers)
      case ._VOLUME_MEASURE(let selection): members.formUnion(selection.typeMembers)
      }
      return members
    }

    public var entityReference: SDAI.EntityReference? {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let selection): return selection.entityReference
      case ._AREA_MEASURE(let selection): return selection.entityReference
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.entityReference
      case ._BINARY_ASSEMBLY_CONSTRAINT(let selection): return selection.entityReference
      case ._CARTESIAN_POINT(let selection): return selection.entityReference
      case ._CONNECTED_FACE_SET(let selection): return selection.entityReference
      case ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(let selection): return selection.entityReference
      case ._COUNT_MEASURE(let selection): return selection.entityReference
      case ._EDGE(let selection): return selection.entityReference
      case ._FACE(let selection): return selection.entityReference
      case ._LENGTH_MEASURE(let selection): return selection.entityReference
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let selection): return selection.entityReference
      case ._POINT_ON_CURVE(let selection): return selection.entityReference
      case ._POINT_ON_SURFACE(let selection): return selection.entityReference
      case ._VOLUME_MEASURE(let selection): return selection.entityReference
      }
    }
    public var stringValue: SDAI.STRING? {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let selection): return selection.stringValue
      case ._AREA_MEASURE(let selection): return selection.stringValue
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.stringValue
      case ._BINARY_ASSEMBLY_CONSTRAINT(let selection): return selection.stringValue
      case ._CARTESIAN_POINT(let selection): return selection.stringValue
      case ._CONNECTED_FACE_SET(let selection): return selection.stringValue
      case ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(let selection): return selection.stringValue
      case ._COUNT_MEASURE(let selection): return selection.stringValue
      case ._EDGE(let selection): return selection.stringValue
      case ._FACE(let selection): return selection.stringValue
      case ._LENGTH_MEASURE(let selection): return selection.stringValue
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let selection): return selection.stringValue
      case ._POINT_ON_CURVE(let selection): return selection.stringValue
      case ._POINT_ON_SURFACE(let selection): return selection.stringValue
      case ._VOLUME_MEASURE(let selection): return selection.stringValue
      }
    }
    public var binaryValue: SDAI.BINARY? {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let selection): return selection.binaryValue
      case ._AREA_MEASURE(let selection): return selection.binaryValue
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.binaryValue
      case ._BINARY_ASSEMBLY_CONSTRAINT(let selection): return selection.binaryValue
      case ._CARTESIAN_POINT(let selection): return selection.binaryValue
      case ._CONNECTED_FACE_SET(let selection): return selection.binaryValue
      case ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(let selection): return selection.binaryValue
      case ._COUNT_MEASURE(let selection): return selection.binaryValue
      case ._EDGE(let selection): return selection.binaryValue
      case ._FACE(let selection): return selection.binaryValue
      case ._LENGTH_MEASURE(let selection): return selection.binaryValue
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let selection): return selection.binaryValue
      case ._POINT_ON_CURVE(let selection): return selection.binaryValue
      case ._POINT_ON_SURFACE(let selection): return selection.binaryValue
      case ._VOLUME_MEASURE(let selection): return selection.binaryValue
      }
    }
    public var logicalValue: SDAI.LOGICAL? {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let selection): return selection.logicalValue
      case ._AREA_MEASURE(let selection): return selection.logicalValue
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.logicalValue
      case ._BINARY_ASSEMBLY_CONSTRAINT(let selection): return selection.logicalValue
      case ._CARTESIAN_POINT(let selection): return selection.logicalValue
      case ._CONNECTED_FACE_SET(let selection): return selection.logicalValue
      case ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(let selection): return selection.logicalValue
      case ._COUNT_MEASURE(let selection): return selection.logicalValue
      case ._EDGE(let selection): return selection.logicalValue
      case ._FACE(let selection): return selection.logicalValue
      case ._LENGTH_MEASURE(let selection): return selection.logicalValue
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let selection): return selection.logicalValue
      case ._POINT_ON_CURVE(let selection): return selection.logicalValue
      case ._POINT_ON_SURFACE(let selection): return selection.logicalValue
      case ._VOLUME_MEASURE(let selection): return selection.logicalValue
      }
    }
    public var booleanValue: SDAI.BOOLEAN? {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let selection): return selection.booleanValue
      case ._AREA_MEASURE(let selection): return selection.booleanValue
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.booleanValue
      case ._BINARY_ASSEMBLY_CONSTRAINT(let selection): return selection.booleanValue
      case ._CARTESIAN_POINT(let selection): return selection.booleanValue
      case ._CONNECTED_FACE_SET(let selection): return selection.booleanValue
      case ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(let selection): return selection.booleanValue
      case ._COUNT_MEASURE(let selection): return selection.booleanValue
      case ._EDGE(let selection): return selection.booleanValue
      case ._FACE(let selection): return selection.booleanValue
      case ._LENGTH_MEASURE(let selection): return selection.booleanValue
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let selection): return selection.booleanValue
      case ._POINT_ON_CURVE(let selection): return selection.booleanValue
      case ._POINT_ON_SURFACE(let selection): return selection.booleanValue
      case ._VOLUME_MEASURE(let selection): return selection.booleanValue
      }
    }
    public var numberValue: SDAI.NUMBER? {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let selection): return selection.numberValue
      case ._AREA_MEASURE(let selection): return selection.numberValue
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.numberValue
      case ._BINARY_ASSEMBLY_CONSTRAINT(let selection): return selection.numberValue
      case ._CARTESIAN_POINT(let selection): return selection.numberValue
      case ._CONNECTED_FACE_SET(let selection): return selection.numberValue
      case ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(let selection): return selection.numberValue
      case ._COUNT_MEASURE(let selection): return selection.numberValue
      case ._EDGE(let selection): return selection.numberValue
      case ._FACE(let selection): return selection.numberValue
      case ._LENGTH_MEASURE(let selection): return selection.numberValue
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let selection): return selection.numberValue
      case ._POINT_ON_CURVE(let selection): return selection.numberValue
      case ._POINT_ON_SURFACE(let selection): return selection.numberValue
      case ._VOLUME_MEASURE(let selection): return selection.numberValue
      }
    }
    public var realValue: SDAI.REAL? {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let selection): return selection.realValue
      case ._AREA_MEASURE(let selection): return selection.realValue
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.realValue
      case ._BINARY_ASSEMBLY_CONSTRAINT(let selection): return selection.realValue
      case ._CARTESIAN_POINT(let selection): return selection.realValue
      case ._CONNECTED_FACE_SET(let selection): return selection.realValue
      case ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(let selection): return selection.realValue
      case ._COUNT_MEASURE(let selection): return selection.realValue
      case ._EDGE(let selection): return selection.realValue
      case ._FACE(let selection): return selection.realValue
      case ._LENGTH_MEASURE(let selection): return selection.realValue
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let selection): return selection.realValue
      case ._POINT_ON_CURVE(let selection): return selection.realValue
      case ._POINT_ON_SURFACE(let selection): return selection.realValue
      case ._VOLUME_MEASURE(let selection): return selection.realValue
      }
    }
    public var integerValue: SDAI.INTEGER? {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let selection): return selection.integerValue
      case ._AREA_MEASURE(let selection): return selection.integerValue
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.integerValue
      case ._BINARY_ASSEMBLY_CONSTRAINT(let selection): return selection.integerValue
      case ._CARTESIAN_POINT(let selection): return selection.integerValue
      case ._CONNECTED_FACE_SET(let selection): return selection.integerValue
      case ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(let selection): return selection.integerValue
      case ._COUNT_MEASURE(let selection): return selection.integerValue
      case ._EDGE(let selection): return selection.integerValue
      case ._FACE(let selection): return selection.integerValue
      case ._LENGTH_MEASURE(let selection): return selection.integerValue
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let selection): return selection.integerValue
      case ._POINT_ON_CURVE(let selection): return selection.integerValue
      case ._POINT_ON_SURFACE(let selection): return selection.integerValue
      case ._VOLUME_MEASURE(let selection): return selection.integerValue
      }
    }
    public var genericEnumValue: SDAI.GenericEnumValue? {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let selection): return selection.genericEnumValue
      case ._AREA_MEASURE(let selection): return selection.genericEnumValue
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.genericEnumValue
      case ._BINARY_ASSEMBLY_CONSTRAINT(let selection): return selection.genericEnumValue
      case ._CARTESIAN_POINT(let selection): return selection.genericEnumValue
      case ._CONNECTED_FACE_SET(let selection): return selection.genericEnumValue
      case ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(let selection): return selection.genericEnumValue
      case ._COUNT_MEASURE(let selection): return selection.genericEnumValue
      case ._EDGE(let selection): return selection.genericEnumValue
      case ._FACE(let selection): return selection.genericEnumValue
      case ._LENGTH_MEASURE(let selection): return selection.genericEnumValue
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let selection): return selection.genericEnumValue
      case ._POINT_ON_CURVE(let selection): return selection.genericEnumValue
      case ._POINT_ON_SURFACE(let selection): return selection.genericEnumValue
      case ._VOLUME_MEASURE(let selection): return selection.genericEnumValue
      }
    }
    public func arrayOptionalValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.ARRAY_OPTIONAL<ELEM>? {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._AREA_MEASURE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._BINARY_ASSEMBLY_CONSTRAINT(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._CARTESIAN_POINT(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._CONNECTED_FACE_SET(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._COUNT_MEASURE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._EDGE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._FACE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._LENGTH_MEASURE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._POINT_ON_CURVE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._POINT_ON_SURFACE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._VOLUME_MEASURE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      }
    }
    public func arrayValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.ARRAY<ELEM>? {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let selection): return selection.arrayValue(elementType:elementType)
      case ._AREA_MEASURE(let selection): return selection.arrayValue(elementType:elementType)
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.arrayValue(elementType:elementType)
      case ._BINARY_ASSEMBLY_CONSTRAINT(let selection): return selection.arrayValue(elementType:elementType)
      case ._CARTESIAN_POINT(let selection): return selection.arrayValue(elementType:elementType)
      case ._CONNECTED_FACE_SET(let selection): return selection.arrayValue(elementType:elementType)
      case ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(let selection): return selection.arrayValue(elementType:elementType)
      case ._COUNT_MEASURE(let selection): return selection.arrayValue(elementType:elementType)
      case ._EDGE(let selection): return selection.arrayValue(elementType:elementType)
      case ._FACE(let selection): return selection.arrayValue(elementType:elementType)
      case ._LENGTH_MEASURE(let selection): return selection.arrayValue(elementType:elementType)
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let selection): return selection.arrayValue(elementType:elementType)
      case ._POINT_ON_CURVE(let selection): return selection.arrayValue(elementType:elementType)
      case ._POINT_ON_SURFACE(let selection): return selection.arrayValue(elementType:elementType)
      case ._VOLUME_MEASURE(let selection): return selection.arrayValue(elementType:elementType)
      }
    }
    public func listValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.LIST<ELEM>? {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let selection): return selection.listValue(elementType:elementType)
      case ._AREA_MEASURE(let selection): return selection.listValue(elementType:elementType)
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.listValue(elementType:elementType)
      case ._BINARY_ASSEMBLY_CONSTRAINT(let selection): return selection.listValue(elementType:elementType)
      case ._CARTESIAN_POINT(let selection): return selection.listValue(elementType:elementType)
      case ._CONNECTED_FACE_SET(let selection): return selection.listValue(elementType:elementType)
      case ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(let selection): return selection.listValue(elementType:elementType)
      case ._COUNT_MEASURE(let selection): return selection.listValue(elementType:elementType)
      case ._EDGE(let selection): return selection.listValue(elementType:elementType)
      case ._FACE(let selection): return selection.listValue(elementType:elementType)
      case ._LENGTH_MEASURE(let selection): return selection.listValue(elementType:elementType)
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let selection): return selection.listValue(elementType:elementType)
      case ._POINT_ON_CURVE(let selection): return selection.listValue(elementType:elementType)
      case ._POINT_ON_SURFACE(let selection): return selection.listValue(elementType:elementType)
      case ._VOLUME_MEASURE(let selection): return selection.listValue(elementType:elementType)
      }
    }
    public func bagValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.BAG<ELEM>? {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let selection): return selection.bagValue(elementType:elementType)
      case ._AREA_MEASURE(let selection): return selection.bagValue(elementType:elementType)
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.bagValue(elementType:elementType)
      case ._BINARY_ASSEMBLY_CONSTRAINT(let selection): return selection.bagValue(elementType:elementType)
      case ._CARTESIAN_POINT(let selection): return selection.bagValue(elementType:elementType)
      case ._CONNECTED_FACE_SET(let selection): return selection.bagValue(elementType:elementType)
      case ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(let selection): return selection.bagValue(elementType:elementType)
      case ._COUNT_MEASURE(let selection): return selection.bagValue(elementType:elementType)
      case ._EDGE(let selection): return selection.bagValue(elementType:elementType)
      case ._FACE(let selection): return selection.bagValue(elementType:elementType)
      case ._LENGTH_MEASURE(let selection): return selection.bagValue(elementType:elementType)
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let selection): return selection.bagValue(elementType:elementType)
      case ._POINT_ON_CURVE(let selection): return selection.bagValue(elementType:elementType)
      case ._POINT_ON_SURFACE(let selection): return selection.bagValue(elementType:elementType)
      case ._VOLUME_MEASURE(let selection): return selection.bagValue(elementType:elementType)
      }
    }
    public func setValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.SET<ELEM>? {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let selection): return selection.setValue(elementType:elementType)
      case ._AREA_MEASURE(let selection): return selection.setValue(elementType:elementType)
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.setValue(elementType:elementType)
      case ._BINARY_ASSEMBLY_CONSTRAINT(let selection): return selection.setValue(elementType:elementType)
      case ._CARTESIAN_POINT(let selection): return selection.setValue(elementType:elementType)
      case ._CONNECTED_FACE_SET(let selection): return selection.setValue(elementType:elementType)
      case ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(let selection): return selection.setValue(elementType:elementType)
      case ._COUNT_MEASURE(let selection): return selection.setValue(elementType:elementType)
      case ._EDGE(let selection): return selection.setValue(elementType:elementType)
      case ._FACE(let selection): return selection.setValue(elementType:elementType)
      case ._LENGTH_MEASURE(let selection): return selection.setValue(elementType:elementType)
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let selection): return selection.setValue(elementType:elementType)
      case ._POINT_ON_CURVE(let selection): return selection.setValue(elementType:elementType)
      case ._POINT_ON_SURFACE(let selection): return selection.setValue(elementType:elementType)
      case ._VOLUME_MEASURE(let selection): return selection.setValue(elementType:elementType)
      }
    }
    public func enumValue<ENUM:SDAIEnumerationType>(enumType:ENUM.Type) -> ENUM? {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let selection): return selection.enumValue(enumType:enumType)
      case ._AREA_MEASURE(let selection): return selection.enumValue(enumType:enumType)
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.enumValue(enumType:enumType)
      case ._BINARY_ASSEMBLY_CONSTRAINT(let selection): return selection.enumValue(enumType:enumType)
      case ._CARTESIAN_POINT(let selection): return selection.enumValue(enumType:enumType)
      case ._CONNECTED_FACE_SET(let selection): return selection.enumValue(enumType:enumType)
      case ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(let selection): return selection.enumValue(enumType:enumType)
      case ._COUNT_MEASURE(let selection): return selection.enumValue(enumType:enumType)
      case ._EDGE(let selection): return selection.enumValue(enumType:enumType)
      case ._FACE(let selection): return selection.enumValue(enumType:enumType)
      case ._LENGTH_MEASURE(let selection): return selection.enumValue(enumType:enumType)
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let selection): return selection.enumValue(enumType:enumType)
      case ._POINT_ON_CURVE(let selection): return selection.enumValue(enumType:enumType)
      case ._POINT_ON_SURFACE(let selection): return selection.enumValue(enumType:enumType)
      case ._VOLUME_MEASURE(let selection): return selection.enumValue(enumType:enumType)
      }
    }

    //MARK: SDAIUnderlyingType
    public typealias FundamentalType = Self
    public static var typeName: String = 
      "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.EQUIVALENCE_DETECTED_DIFFERENCE_SELECT"
    public var asFundamentalType: FundamentalType { return self }

    //MARK: SDAIObservableAggregateElement
    public var entityReferences: AnySequence<SDAI.EntityReference> {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let select): return select.entityReferences
      case ._AREA_MEASURE: return AnySequence<SDAI.EntityReference>(EmptyCollection<SDAI.EntityReference>())
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): return entity.entityReferences
      case ._BINARY_ASSEMBLY_CONSTRAINT(let entity): return entity.entityReferences
      case ._CARTESIAN_POINT(let entity): return entity.entityReferences
      case ._CONNECTED_FACE_SET(let entity): return entity.entityReferences
      case ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(let entity): return entity.entityReferences
      case ._COUNT_MEASURE: return AnySequence<SDAI.EntityReference>(EmptyCollection<SDAI.EntityReference>())
      case ._EDGE(let entity): return entity.entityReferences
      case ._FACE(let entity): return entity.entityReferences
      case ._LENGTH_MEASURE: return AnySequence<SDAI.EntityReference>(EmptyCollection<SDAI.EntityReference>())
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let entity): return entity.entityReferences
      case ._POINT_ON_CURVE(let entity): return entity.entityReferences
      case ._POINT_ON_SURFACE(let entity): return entity.entityReferences
      case ._VOLUME_MEASURE: return AnySequence<SDAI.EntityReference>(EmptyCollection<SDAI.EntityReference>())
      }
    }

    public mutating func configure(with observer: SDAI.EntityReferenceObserver) {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(var select): 
        select.configure(with: observer)
        self = ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(select)
      case ._AREA_MEASURE: break
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): 
        entity.configure(with: observer)
        self = ._ASSEMBLY_COMPONENT_USAGE(entity)
      case ._BINARY_ASSEMBLY_CONSTRAINT(let entity): 
        entity.configure(with: observer)
        self = ._BINARY_ASSEMBLY_CONSTRAINT(entity)
      case ._CARTESIAN_POINT(let entity): 
        entity.configure(with: observer)
        self = ._CARTESIAN_POINT(entity)
      case ._CONNECTED_FACE_SET(let entity): 
        entity.configure(with: observer)
        self = ._CONNECTED_FACE_SET(entity)
      case ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(let entity): 
        entity.configure(with: observer)
        self = ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(entity)
      case ._COUNT_MEASURE: break
      case ._EDGE(let entity): 
        entity.configure(with: observer)
        self = ._EDGE(entity)
      case ._FACE(let entity): 
        entity.configure(with: observer)
        self = ._FACE(entity)
      case ._LENGTH_MEASURE: break
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let entity): 
        entity.configure(with: observer)
        self = ._MULTI_LEVEL_REFERENCE_DESIGNATOR(entity)
      case ._POINT_ON_CURVE(let entity): 
        entity.configure(with: observer)
        self = ._POINT_ON_CURVE(entity)
      case ._POINT_ON_SURFACE(let entity): 
        entity.configure(with: observer)
        self = ._POINT_ON_SURFACE(entity)
      case ._VOLUME_MEASURE: break
      }
    }

    public mutating func teardownObserver() {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(var select): 
        select.teardownObserver()
        self = ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(select)
      case ._AREA_MEASURE: break
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): 
        entity.teardownObserver()
        self = ._ASSEMBLY_COMPONENT_USAGE(entity)
      case ._BINARY_ASSEMBLY_CONSTRAINT(let entity): 
        entity.teardownObserver()
        self = ._BINARY_ASSEMBLY_CONSTRAINT(entity)
      case ._CARTESIAN_POINT(let entity): 
        entity.teardownObserver()
        self = ._CARTESIAN_POINT(entity)
      case ._CONNECTED_FACE_SET(let entity): 
        entity.teardownObserver()
        self = ._CONNECTED_FACE_SET(entity)
      case ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(let entity): 
        entity.teardownObserver()
        self = ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(entity)
      case ._COUNT_MEASURE: break
      case ._EDGE(let entity): 
        entity.teardownObserver()
        self = ._EDGE(entity)
      case ._FACE(let entity): 
        entity.teardownObserver()
        self = ._FACE(entity)
      case ._LENGTH_MEASURE: break
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let entity): 
        entity.teardownObserver()
        self = ._MULTI_LEVEL_REFERENCE_DESIGNATOR(entity)
      case ._POINT_ON_CURVE(let entity): 
        entity.teardownObserver()
        self = ._POINT_ON_CURVE(entity)
      case ._POINT_ON_SURFACE(let entity): 
        entity.teardownObserver()
        self = ._POINT_ON_SURFACE(entity)
      case ._VOLUME_MEASURE: break
      }
    }

    //MARK: SDAIAggregationBehavior
    public var aggregationHiBound: Int? {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let selection): return selection.aggregationHiBound
      default: return nil
      }
    }
    public var aggregationHiIndex: Int? {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let selection): return selection.aggregationHiIndex
      default: return nil
      }
    }
    public var aggregationLoBound: Int? {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let selection): return selection.aggregationLoBound
      default: return nil
      }
    }
    public var aggregationLoIndex: Int? {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let selection): return selection.aggregationLoIndex
      default: return nil
      }
    }
    public var aggregationSize: Int? {
      switch self {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let selection): return selection.aggregationSize
      default: return nil
      }
    }

    //MARK: WHERE RULE VALIDATION (SELECT TYPE)
    public static func validateWhereRules(instance:Self?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      var result: [SDAI.WhereLabel:SDAI.LOGICAL] = [:]
      switch instance {
      case ._A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT(let selectValue): 
        result = sA3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT")
      case ._AREA_MEASURE(let selectValue): result = tAREA_MEASURE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\AREA_MEASURE")
      case ._ASSEMBLY_COMPONENT_USAGE(let selectValue): 
        result = eASSEMBLY_COMPONENT_USAGE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\ASSEMBLY_COMPONENT_USAGE")
      case ._BINARY_ASSEMBLY_CONSTRAINT(let selectValue): 
        result = eBINARY_ASSEMBLY_CONSTRAINT.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\BINARY_ASSEMBLY_CONSTRAINT")
      case ._CARTESIAN_POINT(let selectValue): 
        result = eCARTESIAN_POINT.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\CARTESIAN_POINT")
      case ._CONNECTED_FACE_SET(let selectValue): 
        result = eCONNECTED_FACE_SET.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\CONNECTED_FACE_SET")
      case ._CONTEXT_DEPENDENT_SHAPE_REPRESENTATION(let selectValue): 
        result = eCONTEXT_DEPENDENT_SHAPE_REPRESENTATION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\CONTEXT_DEPENDENT_SHAPE_REPRESENTATION")
      case ._COUNT_MEASURE(let selectValue): 
        result = tCOUNT_MEASURE.validateWhereRules(instance:selectValue, prefix:prefix + "\\COUNT_MEASURE")
      case ._EDGE(let selectValue): result = eEDGE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\EDGE")
      case ._FACE(let selectValue): result = eFACE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\FACE")
      case ._LENGTH_MEASURE(let selectValue): 
        result = tLENGTH_MEASURE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\LENGTH_MEASURE")
      case ._MULTI_LEVEL_REFERENCE_DESIGNATOR(let selectValue): 
        result = eMULTI_LEVEL_REFERENCE_DESIGNATOR.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\MULTI_LEVEL_REFERENCE_DESIGNATOR")
      case ._POINT_ON_CURVE(let selectValue): 
        result = ePOINT_ON_CURVE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\POINT_ON_CURVE")
      case ._POINT_ON_SURFACE(let selectValue): 
        result = ePOINT_ON_SURFACE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\POINT_ON_SURFACE")
      case ._VOLUME_MEASURE(let selectValue): 
        result = tVOLUME_MEASURE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\VOLUME_MEASURE")
      case nil: break
      }

      return result
    }

  }

}


//MARK: - SELECT TYPE HIERARCHY
public protocol AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT__type: 
  SDAISelectType {

  //MARK: GROUP REFERENCES
  var super_sA3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sA3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT? { get }
  var super_tAREA_MEASURE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tAREA_MEASURE? { get }
  var super_tCOUNT_MEASURE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tCOUNT_MEASURE? { get }
  var super_tLENGTH_MEASURE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE? { get }
  var super_tVOLUME_MEASURE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tVOLUME_MEASURE? { get }
  var super_eSCANNED_DATA_ITEM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSCANNED_DATA_ITEM? { get }
  var super_eREPRESENTATION_RELATIONSHIP: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_RELATIONSHIP? { get }
  var super_eASSEMBLY_GEOMETRIC_CONSTRAINT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eASSEMBLY_GEOMETRIC_CONSTRAINT? { get }
  var super_eREPRESENTATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION? { get }
  var super_eTOPOLOGICAL_REPRESENTATION_ITEM: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eTOPOLOGICAL_REPRESENTATION_ITEM? { get }
  var super_eMANIFOLD_SOLID_BREP: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMANIFOLD_SOLID_BREP? { get }
  var super_ePOINT_ON_SURFACE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePOINT_ON_SURFACE? { get }
  var super_eGENERIC_PRODUCT_DEFINITION_REFERENCE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGENERIC_PRODUCT_DEFINITION_REFERENCE? { get }
  var super_eSHAPE_REPRESENTATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_REPRESENTATION? { get }
  var super_eEXTERNALLY_DEFINED_REPRESENTATION_ITEM: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEXTERNALLY_DEFINED_REPRESENTATION_ITEM? { get }
  var super_ePRODUCT_DEFINITION_OCCURRENCE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_OCCURRENCE? { get }
  var super_eEXTERNALLY_DEFINED_ITEM: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEXTERNALLY_DEFINED_ITEM? { get }
  var super_eEDGE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEDGE? { get }
  var super_eVERTEX: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eVERTEX? { get }
  var super_ePRODUCT_DEFINITION_USAGE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_USAGE? { get }
  var super_eBINARY_ASSEMBLY_CONSTRAINT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eBINARY_ASSEMBLY_CONSTRAINT? { get }
  var super_eCARTESIAN_POINT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCARTESIAN_POINT? { get }
  var super_eSHELL_BASED_WIREFRAME_MODEL: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHELL_BASED_WIREFRAME_MODEL? { get }
  var super_eCONNECTED_FACE_SET: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONNECTED_FACE_SET? { get }
  var super_eSHELL_BASED_SURFACE_MODEL: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHELL_BASED_SURFACE_MODEL? { get }
  var super_eREPRESENTATION_RELATIONSHIP_WITH_TRANSFORMATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_RELATIONSHIP_WITH_TRANSFORMATION? { get }
  var super_eSOLID_MODEL: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSOLID_MODEL? { get }
  var super_eFACE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFACE? { get }
  var super_ePRODUCT_DEFINITION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION? { get }
  var super_eREPRESENTATION_ITEM: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_ITEM? { get }
  var super_eVERTEX_POINT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eVERTEX_POINT? { get }
  var super_eASSEMBLY_COMPONENT_USAGE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eASSEMBLY_COMPONENT_USAGE? { get }
  var super_eCONTEXT_DEPENDENT_SHAPE_REPRESENTATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONTEXT_DEPENDENT_SHAPE_REPRESENTATION? { get }
  var super_eMULTI_LEVEL_REFERENCE_DESIGNATOR: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMULTI_LEVEL_REFERENCE_DESIGNATOR? { get }
  var super_ePOINT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePOINT? { get }
  var super_eVARIATIONAL_REPRESENTATION_ITEM: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eVARIATIONAL_REPRESENTATION_ITEM? { get }
  var super_eCONNECTED_EDGE_SET: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONNECTED_EDGE_SET? { get }
  var super_ePRODUCT_DEFINITION_RELATIONSHIP: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_RELATIONSHIP? { get }
  var super_eEXPLICIT_CONSTRAINT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEXPLICIT_CONSTRAINT? { get }
  var super_ePOINT_ON_CURVE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePOINT_ON_CURVE? { get }
  var super_eGEOMETRIC_REPRESENTATION_ITEM: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGEOMETRIC_REPRESENTATION_ITEM? { get }
  var super_ePOINT_CLOUD_DATASET: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePOINT_CLOUD_DATASET? { get }

  //MARK: ENTITY ATTRIBUTE REFERENCES
  var CFS_FACES: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFACE>/*[1:nil]*/ )?  { get }
  var PRODUCT_DEFINITION_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { get }
  var PRODUCT_OCCURRENCE_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { get }
  var ITEM_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sSOURCE_ITEM?  { get }
  var DESCRIPTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT?  { get }
  var LEAF: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sPRODUCT_DEFINITION_OR_REFERENCE?  { get }
  var TRANSFORMATION_OPERATOR: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sTRANSFORMATION?  { get }
  var CONSTRAINED_ELEMENTS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_ITEM>
    /*[1:nil]*/ )?  { get }
  var NEXT_USAGE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eNEXT_ASSEMBLY_USAGE_OCCURRENCE?  { get }
  var BOUNDS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFACE_BOUND>/*[1:nil]*/ )?  { get }
  var BASIS_CURVE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCURVE?  { get }
  var NORMALS: (SDAI.LIST<SDAI.LIST<SDAI.REAL>/*[3:3]*/ >/*[1:nil]*/ )?  { get }
  var REFERENCE_DESIGNATOR: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { get }
  var DESCENDANT_OCCURRENCES: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_SPECIFIED_OCCURRENCE>/*[0:nil]*/ )?  { get }
  var PRODUCT_DEFINITION_FORMATION_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { get }
  var UPPER_USAGE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eASSEMBLY_COMPONENT_USAGE?  { get }
  var QUANTITY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMEASURE_WITH_UNIT?  { get }
  var EDGE_ELEMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEDGE?  { get }
  var DEFINED_VERSION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOLLECTION_VERSION?  { get }
  var ORIENTATION: SDAI.BOOLEAN?  { get }
  var SBWM_BOUNDARY: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sSHELL>/*[1:nil]*/ )?  { get }
  var ITEMS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_ITEM>/*[1:nil]*/ )?  { get }
  var PERMANENT_AGGREGATE_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { get }
  var PCURVE_REFERENCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePCURVE?  { get }
  var COORDINATES: (SDAI.LIST<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE>/*[1:3]*/ )?  { get }
  var ID_OWNING_ORGANIZATION_NAME: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { get }
  var Z: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE?  { get }
  var POINT_COORDINATES: (SDAI.LIST<SDAI.LIST<SDAI.REAL>/*[3:3]*/ >/*[1:nil]*/ )?  { get }
  var REFERENCE_ELEMENTS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_ITEM>/*[0:
    nil]*/ )?  { get }
  var INTENSITIES: (SDAI.LIST<SDAI.REAL>/*[1:nil]*/ )?  { get }
  var OCCURRENCE_USAGE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sPRODUCT_DEFINITION_OCCURRENCE_OR_REFERENCE?  { get }
  var PHI: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { get }
  var DOCUMENTATION_IDS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDOCUMENT>/*[1:nil]*/ )?  { get }
  var PARENT_FACE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFACE?  { get }
  var POINT_PARAMETER: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPARAMETER_VALUE?  { get }
  var BASIS_EDGE_CURVE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEDGE_CURVE?  { get }
  var COLOUR_INDICES: (SDAI.LIST<SDAI.LIST<SDAI.INTEGER>/*[3:3]*/ >/*[1:nil]*/ )?  { get }
  var PARENT_FACE_SET: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONNECTED_FACE_SET?  { get }
  var OPEN_SHELL_ELEMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eOPEN_SHELL?  { get }
  var TESSELLATION_ACCURACY_PARAMETERS: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sTESSELLATION_ACCURACY_PARAMETER_ITEM>/*[1:nil]*/ )?  { get }
  var CLOSED_SHELL_ELEMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCLOSED_SHELL?  { get }
  var EDGE_END: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eVERTEX?  { get }
  var FACE_GEOMETRY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSURFACE?  { get }
  var FACE_ELEMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFACE?  { get }
  var VERTEX_GEOMETRY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePOINT?  { get }
  var PRODUCT_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { get }
  var EDGE_LENGTH: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { get }
  var ROOT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION?  { get }
  var BASIS_SURFACE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSURFACE?  { get }
  var CHILD_OCCURRENCES: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_SPECIFIED_OCCURRENCE>/*[0:nil]*/ )?  { get }
  var RELATING_PRODUCT_DEFINITION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION?  { get }
  var REPRESENTED_PRODUCT_RELATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_SHAPE?  { get }
  var EDGE_START: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eVERTEX?  { get }
  var SOURCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEXTERNAL_SOURCE?  { get }
  var EDGE_GEOMETRY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCURVE?  { get }
  var ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { get }
  var CONTEXT_OF_ITEMS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_CONTEXT?  { get }
  var REP_1: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATIVE_SHAPE_REPRESENTATION?  { get }
  var POINT_PARAMETER_U: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPARAMETER_VALUE?  { get }
  var REP_2: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATIVE_SHAPE_REPRESENTATION?  { get }
  var SBSM_BOUNDARY: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sSHELL>/*[1:nil]*/ )?  { get }
  var OUTER: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCLOSED_SHELL?  { get }
  var POINT_PARAMETER_V: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPARAMETER_VALUE?  { get }
  var CES_EDGES: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEDGE>/*[1:nil]*/ )?  { get }
  var REPRESENTATION_RELATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_REPRESENTATION_RELATIONSHIP?  { get }
  var PRODUCT_DEFINITION_OCCURRENCE_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { get }
  var SAME_SENSE: SDAI.BOOLEAN?  { get }
  var NEUTRAL_SKETCH_SEMANTICS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nCURVES_OR_AREA?  { get }
  var PERMANENT_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { get }
  var FRAME_OF_REFERENCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_CONTEXT?  { get }
  var PARENT_EDGE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEDGE?  { get }
  var LOCATION: (SDAI.LIST_UNIQUE<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eNEXT_ASSEMBLY_USAGE_OCCURRENCE>/*[1:nil]*/ )?  { get }
  var BASIS_FACE_SURFACE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFACE_SURFACE?  { get }
  var RELATED_PRODUCT_DEFINITION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sPRODUCT_DEFINITION_OR_REFERENCE?  { get }
  var NAME: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { get }
  var ASSEMBLY_USAGES: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eASSEMBLY_COMPONENT_USAGE>
    /*[0:nil]*/ )?  { get }
  var VOIDS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eORIENTED_CLOSED_SHELL>/*[1:nil]*/ )?  { get }
  var DIM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tDIMENSION_COUNT?  { get }
  var FORMATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_FORMATION?  { get }
}

public protocol AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT__subtype: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT__type, SDAIDefinedType
where Supertype: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT__type
{}

public extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT__subtype {
  //MARK: CONSTRUCTORS
  init?(possiblyFrom complex: SDAI.ComplexEntity?) {
    self.init(fundamental: FundamentalType(possiblyFrom: complex))
  }

  init?<T: SDAIUnderlyingType>(possiblyFrom underlyingType: T?) {
    self.init(fundamental: FundamentalType(possiblyFrom: underlyingType))
  }

  init?<G: SDAIGenericType>(fromGeneric generic: G?) {
    self.init(fundamental: FundamentalType.convert(fromGeneric: generic))
  }

  //MARK: GROUP REFERENCES
  var super_sA3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sA3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT? { rep.super_sA3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT }
  var super_tAREA_MEASURE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tAREA_MEASURE? { rep.super_tAREA_MEASURE }
  var super_tCOUNT_MEASURE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tCOUNT_MEASURE? { rep.super_tCOUNT_MEASURE }
  var super_tLENGTH_MEASURE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE? { rep.super_tLENGTH_MEASURE }
  var super_tVOLUME_MEASURE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tVOLUME_MEASURE? { rep.super_tVOLUME_MEASURE }
  var super_eSCANNED_DATA_ITEM: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSCANNED_DATA_ITEM? { rep.super_eSCANNED_DATA_ITEM }
  var super_eREPRESENTATION_RELATIONSHIP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_RELATIONSHIP? { rep.super_eREPRESENTATION_RELATIONSHIP }
  var super_eASSEMBLY_GEOMETRIC_CONSTRAINT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eASSEMBLY_GEOMETRIC_CONSTRAINT? { rep.super_eASSEMBLY_GEOMETRIC_CONSTRAINT }
  var super_eREPRESENTATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION? { rep.super_eREPRESENTATION }
  var super_eTOPOLOGICAL_REPRESENTATION_ITEM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eTOPOLOGICAL_REPRESENTATION_ITEM? { rep.super_eTOPOLOGICAL_REPRESENTATION_ITEM }
  var super_eMANIFOLD_SOLID_BREP: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMANIFOLD_SOLID_BREP? { rep.super_eMANIFOLD_SOLID_BREP }
  var super_ePOINT_ON_SURFACE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePOINT_ON_SURFACE? { rep.super_ePOINT_ON_SURFACE }
  var super_eGENERIC_PRODUCT_DEFINITION_REFERENCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGENERIC_PRODUCT_DEFINITION_REFERENCE? { rep.super_eGENERIC_PRODUCT_DEFINITION_REFERENCE }
  var super_eSHAPE_REPRESENTATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_REPRESENTATION? { rep.super_eSHAPE_REPRESENTATION }
  var super_eEXTERNALLY_DEFINED_REPRESENTATION_ITEM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEXTERNALLY_DEFINED_REPRESENTATION_ITEM? { rep.super_eEXTERNALLY_DEFINED_REPRESENTATION_ITEM }
  var super_ePRODUCT_DEFINITION_OCCURRENCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_OCCURRENCE? { rep.super_ePRODUCT_DEFINITION_OCCURRENCE }
  var super_eEXTERNALLY_DEFINED_ITEM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEXTERNALLY_DEFINED_ITEM? { rep.super_eEXTERNALLY_DEFINED_ITEM }
  var super_eEDGE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEDGE? { rep.super_eEDGE }
  var super_eVERTEX: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eVERTEX? { rep.super_eVERTEX }
  var super_ePRODUCT_DEFINITION_USAGE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_USAGE? { rep.super_ePRODUCT_DEFINITION_USAGE }
  var super_eBINARY_ASSEMBLY_CONSTRAINT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eBINARY_ASSEMBLY_CONSTRAINT? { rep.super_eBINARY_ASSEMBLY_CONSTRAINT }
  var super_eCARTESIAN_POINT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCARTESIAN_POINT? { rep.super_eCARTESIAN_POINT }
  var super_eSHELL_BASED_WIREFRAME_MODEL: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHELL_BASED_WIREFRAME_MODEL? { rep.super_eSHELL_BASED_WIREFRAME_MODEL }
  var super_eCONNECTED_FACE_SET: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONNECTED_FACE_SET? { rep.super_eCONNECTED_FACE_SET }
  var super_eSHELL_BASED_SURFACE_MODEL: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHELL_BASED_SURFACE_MODEL? { rep.super_eSHELL_BASED_SURFACE_MODEL }
  var super_eREPRESENTATION_RELATIONSHIP_WITH_TRANSFORMATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_RELATIONSHIP_WITH_TRANSFORMATION? { rep.super_eREPRESENTATION_RELATIONSHIP_WITH_TRANSFORMATION }
  var super_eSOLID_MODEL: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSOLID_MODEL? { rep.super_eSOLID_MODEL }
  var super_eFACE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFACE? { rep.super_eFACE }
  var super_ePRODUCT_DEFINITION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION? { rep.super_ePRODUCT_DEFINITION }
  var super_eREPRESENTATION_ITEM: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_ITEM? { rep.super_eREPRESENTATION_ITEM }
  var super_eVERTEX_POINT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eVERTEX_POINT? { rep.super_eVERTEX_POINT }
  var super_eASSEMBLY_COMPONENT_USAGE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eASSEMBLY_COMPONENT_USAGE? { rep.super_eASSEMBLY_COMPONENT_USAGE }
  var super_eCONTEXT_DEPENDENT_SHAPE_REPRESENTATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONTEXT_DEPENDENT_SHAPE_REPRESENTATION? { rep.super_eCONTEXT_DEPENDENT_SHAPE_REPRESENTATION }
  var super_eMULTI_LEVEL_REFERENCE_DESIGNATOR: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMULTI_LEVEL_REFERENCE_DESIGNATOR? { rep.super_eMULTI_LEVEL_REFERENCE_DESIGNATOR }
  var super_ePOINT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePOINT? { rep.super_ePOINT }
  var super_eVARIATIONAL_REPRESENTATION_ITEM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eVARIATIONAL_REPRESENTATION_ITEM? { rep.super_eVARIATIONAL_REPRESENTATION_ITEM }
  var super_eCONNECTED_EDGE_SET: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONNECTED_EDGE_SET? { rep.super_eCONNECTED_EDGE_SET }
  var super_ePRODUCT_DEFINITION_RELATIONSHIP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_RELATIONSHIP? { rep.super_ePRODUCT_DEFINITION_RELATIONSHIP }
  var super_eEXPLICIT_CONSTRAINT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEXPLICIT_CONSTRAINT? { rep.super_eEXPLICIT_CONSTRAINT }
  var super_ePOINT_ON_CURVE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePOINT_ON_CURVE? { rep.super_ePOINT_ON_CURVE }
  var super_eGEOMETRIC_REPRESENTATION_ITEM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGEOMETRIC_REPRESENTATION_ITEM? { rep.super_eGEOMETRIC_REPRESENTATION_ITEM }
  var super_ePOINT_CLOUD_DATASET: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePOINT_CLOUD_DATASET? { rep.super_ePOINT_CLOUD_DATASET }

  //MARK: ENTITY ATTRIBUTE REFERENCES
  var CFS_FACES: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFACE>/*[1:nil]*/ )?  { rep.CFS_FACES }
  var PRODUCT_DEFINITION_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { rep.PRODUCT_DEFINITION_ID }
  var PRODUCT_OCCURRENCE_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { rep.PRODUCT_OCCURRENCE_ID }
  var ITEM_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sSOURCE_ITEM?  { rep.ITEM_ID }
  var DESCRIPTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT?  { rep.DESCRIPTION }
  var LEAF: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sPRODUCT_DEFINITION_OR_REFERENCE?  { rep.LEAF }
  var TRANSFORMATION_OPERATOR: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sTRANSFORMATION?  { rep.TRANSFORMATION_OPERATOR }
  var CONSTRAINED_ELEMENTS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_ITEM>
    /*[1:nil]*/ )?  { rep.CONSTRAINED_ELEMENTS }
  var NEXT_USAGE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eNEXT_ASSEMBLY_USAGE_OCCURRENCE?  { rep.NEXT_USAGE }
  var BOUNDS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFACE_BOUND>/*[1:nil]*/ )?  { rep.BOUNDS }
  var BASIS_CURVE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCURVE?  { rep.BASIS_CURVE }
  var NORMALS: (SDAI.LIST<SDAI.LIST<SDAI.REAL>/*[3:3]*/ >/*[1:nil]*/ )?  { rep.NORMALS }
  var REFERENCE_DESIGNATOR: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { rep.REFERENCE_DESIGNATOR }
  var DESCENDANT_OCCURRENCES: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_SPECIFIED_OCCURRENCE>/*[0:nil]*/ )?  { rep.DESCENDANT_OCCURRENCES }
  var PRODUCT_DEFINITION_FORMATION_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { rep.PRODUCT_DEFINITION_FORMATION_ID }
  var UPPER_USAGE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eASSEMBLY_COMPONENT_USAGE?  { rep.UPPER_USAGE }
  var QUANTITY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMEASURE_WITH_UNIT?  { rep.QUANTITY }
  var EDGE_ELEMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEDGE?  { rep.EDGE_ELEMENT }
  var DEFINED_VERSION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOLLECTION_VERSION?  { rep.DEFINED_VERSION }
  var ORIENTATION: SDAI.BOOLEAN?  { rep.ORIENTATION }
  var SBWM_BOUNDARY: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sSHELL>/*[1:nil]*/ )?  { rep.SBWM_BOUNDARY }
  var ITEMS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_ITEM>/*[1:nil]*/ )?  { rep.ITEMS }
  var PERMANENT_AGGREGATE_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { rep.PERMANENT_AGGREGATE_ID }
  var PCURVE_REFERENCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePCURVE?  { rep.PCURVE_REFERENCE }
  var COORDINATES: (SDAI.LIST<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE>/*[1:3]*/ )?  { rep.COORDINATES }
  var ID_OWNING_ORGANIZATION_NAME: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { rep.ID_OWNING_ORGANIZATION_NAME }
  var Z: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE?  { rep.Z }
  var POINT_COORDINATES: (SDAI.LIST<SDAI.LIST<SDAI.REAL>/*[3:3]*/ >/*[1:nil]*/ )?  { rep.POINT_COORDINATES }
  var REFERENCE_ELEMENTS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_ITEM>/*[0:
    nil]*/ )?  { rep.REFERENCE_ELEMENTS }
  var INTENSITIES: (SDAI.LIST<SDAI.REAL>/*[1:nil]*/ )?  { rep.INTENSITIES }
  var OCCURRENCE_USAGE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sPRODUCT_DEFINITION_OCCURRENCE_OR_REFERENCE?  { rep.OCCURRENCE_USAGE }
  var PHI: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { rep.PHI }
  var DOCUMENTATION_IDS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDOCUMENT>/*[1:nil]*/ )?  { rep.DOCUMENTATION_IDS }
  var PARENT_FACE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFACE?  { rep.PARENT_FACE }
  var POINT_PARAMETER: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPARAMETER_VALUE?  { rep.POINT_PARAMETER }
  var BASIS_EDGE_CURVE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEDGE_CURVE?  { rep.BASIS_EDGE_CURVE }
  var COLOUR_INDICES: (SDAI.LIST<SDAI.LIST<SDAI.INTEGER>/*[3:3]*/ >/*[1:nil]*/ )?  { rep.COLOUR_INDICES }
  var PARENT_FACE_SET: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONNECTED_FACE_SET?  { rep.PARENT_FACE_SET }
  var OPEN_SHELL_ELEMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eOPEN_SHELL?  { rep.OPEN_SHELL_ELEMENT }
  var TESSELLATION_ACCURACY_PARAMETERS: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sTESSELLATION_ACCURACY_PARAMETER_ITEM>/*[1:nil]*/ )?  { rep.TESSELLATION_ACCURACY_PARAMETERS }
  var CLOSED_SHELL_ELEMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCLOSED_SHELL?  { rep.CLOSED_SHELL_ELEMENT }
  var EDGE_END: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eVERTEX?  { rep.EDGE_END }
  var FACE_GEOMETRY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSURFACE?  { rep.FACE_GEOMETRY }
  var FACE_ELEMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFACE?  { rep.FACE_ELEMENT }
  var VERTEX_GEOMETRY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePOINT?  { rep.VERTEX_GEOMETRY }
  var PRODUCT_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { rep.PRODUCT_ID }
  var EDGE_LENGTH: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { rep.EDGE_LENGTH }
  var ROOT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION?  { rep.ROOT }
  var BASIS_SURFACE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSURFACE?  { rep.BASIS_SURFACE }
  var CHILD_OCCURRENCES: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_SPECIFIED_OCCURRENCE>/*[0:nil]*/ )?  { rep.CHILD_OCCURRENCES }
  var RELATING_PRODUCT_DEFINITION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION?  { rep.RELATING_PRODUCT_DEFINITION }
  var REPRESENTED_PRODUCT_RELATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_SHAPE?  { rep.REPRESENTED_PRODUCT_RELATION }
  var EDGE_START: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eVERTEX?  { rep.EDGE_START }
  var SOURCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEXTERNAL_SOURCE?  { rep.SOURCE }
  var EDGE_GEOMETRY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCURVE?  { rep.EDGE_GEOMETRY }
  var ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { rep.ID }
  var CONTEXT_OF_ITEMS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_CONTEXT?  { rep.CONTEXT_OF_ITEMS }
  var REP_1: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATIVE_SHAPE_REPRESENTATION?  { rep.REP_1 }
  var POINT_PARAMETER_U: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPARAMETER_VALUE?  { rep.POINT_PARAMETER_U }
  var REP_2: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATIVE_SHAPE_REPRESENTATION?  { rep.REP_2 }
  var SBSM_BOUNDARY: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sSHELL>/*[1:nil]*/ )?  { rep.SBSM_BOUNDARY }
  var OUTER: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCLOSED_SHELL?  { rep.OUTER }
  var POINT_PARAMETER_V: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPARAMETER_VALUE?  { rep.POINT_PARAMETER_V }
  var CES_EDGES: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEDGE>/*[1:nil]*/ )?  { rep.CES_EDGES }
  var REPRESENTATION_RELATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_REPRESENTATION_RELATIONSHIP?  { rep.REPRESENTATION_RELATION }
  var PRODUCT_DEFINITION_OCCURRENCE_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { rep.PRODUCT_DEFINITION_OCCURRENCE_ID }
  var SAME_SENSE: SDAI.BOOLEAN?  { rep.SAME_SENSE }
  var NEUTRAL_SKETCH_SEMANTICS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nCURVES_OR_AREA?  { rep.NEUTRAL_SKETCH_SEMANTICS }
  var PERMANENT_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { rep.PERMANENT_ID }
  var FRAME_OF_REFERENCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_CONTEXT?  { rep.FRAME_OF_REFERENCE }
  var PARENT_EDGE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEDGE?  { rep.PARENT_EDGE }
  var LOCATION: (SDAI.LIST_UNIQUE<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eNEXT_ASSEMBLY_USAGE_OCCURRENCE>/*[1:nil]*/ )?  { rep.LOCATION }
  var BASIS_FACE_SURFACE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFACE_SURFACE?  { rep.BASIS_FACE_SURFACE }
  var RELATED_PRODUCT_DEFINITION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sPRODUCT_DEFINITION_OR_REFERENCE?  { rep.RELATED_PRODUCT_DEFINITION }
  var NAME: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { rep.NAME }
  var ASSEMBLY_USAGES: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eASSEMBLY_COMPONENT_USAGE>
    /*[0:nil]*/ )?  { rep.ASSEMBLY_USAGES }
  var VOIDS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eORIENTED_CLOSED_SHELL>/*[1:nil]*/ )?  { rep.VOIDS }
  var DIM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tDIMENSION_COUNT?  { rep.DIM }
  var FORMATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_FORMATION?  { rep.FORMATION }
}

