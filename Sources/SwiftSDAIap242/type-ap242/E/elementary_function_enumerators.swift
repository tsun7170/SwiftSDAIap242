/* file: elementary_function_enumerators.swift 	 generated: Sat Aug 14 13:46:02 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -TYPE DEFINITION in EXPRESS
/*
  TYPE elementary_function_enumerators = ENUMERATION OF
    ( ef_and,
     ef_or,
     ef_not,
     ef_xor,
     ef_negate_i,
     ef_add_i,
     ef_subtract_i,
     ef_multiply_i,
     ef_divide_i,
     ef_mod_i,
     ef_exponentiate_i,
     ef_eq_i,
     ef_ne_i,
     ef_gt_i,
     ef_lt_i,
     ef_ge_i,
     ef_le_i,
     ef_abs_i,
     ef_max_i,
     ef_min_i,
     ef_if_i,
     ef_negate_r,
     ef_reciprocal_r,
     ef_add_r,
     ef_subtract_r,
     ef_multiply_r,
     ef_divide_r,
     ef_mod_r,
     ef_exponentiate_r,
     ef_exponentiate_ri,
     ef_eq_r,
     ef_ne_r,
     ef_gt_r,
     ef_lt_r,
     ef_ge_r,
     ef_le_r,
     ef_abs_r,
     ef_max_r,
     ef_min_r,
     ef_acos_r,
     ef_asin_r,
     ef_atan2_r,
     ef_cos_r,
     ef_exp_r,
     ef_ln_r,
     ef_log2_r,
     ef_log10_r,
     ef_sin_r,
     ef_sqrt_r,
     ef_tan_r,
     ef_if_r,
     ef_form_c,
     ef_rpart_c,
     ef_ipart_c,
     ef_negate_c,
     ef_reciprocal_c,
     ef_add_c,
     ef_subtract_c,
     ef_multiply_c,
     ef_divide_c,
     ef_exponentiate_c,
     ef_exponentiate_ci,
     ef_eq_c,
     ef_ne_c,
     ef_conjugate_c,
     ef_abs_c,
     ef_arg_c,
     ef_cos_c,
     ef_exp_c,
     ef_ln_c,
     ef_sin_c,
     ef_sqrt_c,
     ef_tan_c,
     ef_if_c,
     ef_subscript_s,
     ef_eq_s,
     ef_ne_s,
     ef_gt_s,
     ef_lt_s,
     ef_ge_s,
     ef_le_s,
     ef_subsequence_s,
     ef_concat_s,
     ef_size_s,
     ef_format,
     ef_value,
     ef_like,
     ef_if_s,
     ef_subscript_b,
     ef_eq_b,
     ef_ne_b,
     ef_gt_b,
     ef_lt_b,
     ef_ge_b,
     ef_le_b,
     ef_subsequence_b,
     ef_concat_b,
     ef_size_b,
     ef_if_b,
     ef_subscript_t,
     ef_eq_t,
     ef_ne_t,
     ef_concat_t,
     ef_size_t,
     ef_entuple,
     ef_detuple,
     ef_insert,
     ef_remove,
     ef_if_t,
     ef_sum_it,
     ef_product_it,
     ef_add_it,
     ef_subtract_it,
     ef_scalar_mult_it,
     ef_dot_prod_it,
     ef_sum_rt,
     ef_product_rt,
     ef_add_rt,
     ef_subtract_rt,
     ef_scalar_mult_rt,
     ef_dot_prod_rt,
     ef_norm_rt,
     ef_sum_ct,
     ef_product_ct,
     ef_add_ct,
     ef_subtract_ct,
     ef_scalar_mult_ct,
     ef_dot_prod_ct,
     ef_norm_ct,
     ef_if,
     ef_ensemble,
     ef_member_of );
  END_TYPE; -- elementary_function_enumerators (line:2756 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


/** ENUMERATION type
- EXPRESS:
```express
  TYPE elementary_function_enumerators = ENUMERATION OF
    ( ef_and,
     ef_or,
     ef_not,
     ef_xor,
     ef_negate_i,
     ef_add_i,
     ef_subtract_i,
     ef_multiply_i,
     ef_divide_i,
     ef_mod_i,
     ef_exponentiate_i,
     ef_eq_i,
     ef_ne_i,
     ef_gt_i,
     ef_lt_i,
     ef_ge_i,
     ef_le_i,
     ef_abs_i,
     ef_max_i,
     ef_min_i,
     ef_if_i,
     ef_negate_r,
     ef_reciprocal_r,
     ef_add_r,
     ef_subtract_r,
     ef_multiply_r,
     ef_divide_r,
     ef_mod_r,
     ef_exponentiate_r,
     ef_exponentiate_ri,
     ef_eq_r,
     ef_ne_r,
     ef_gt_r,
     ef_lt_r,
     ef_ge_r,
     ef_le_r,
     ef_abs_r,
     ef_max_r,
     ef_min_r,
     ef_acos_r,
     ef_asin_r,
     ef_atan2_r,
     ef_cos_r,
     ef_exp_r,
     ef_ln_r,
     ef_log2_r,
     ef_log10_r,
     ef_sin_r,
     ef_sqrt_r,
     ef_tan_r,
     ef_if_r,
     ef_form_c,
     ef_rpart_c,
     ef_ipart_c,
     ef_negate_c,
     ef_reciprocal_c,
     ef_add_c,
     ef_subtract_c,
     ef_multiply_c,
     ef_divide_c,
     ef_exponentiate_c,
     ef_exponentiate_ci,
     ef_eq_c,
     ef_ne_c,
     ef_conjugate_c,
     ef_abs_c,
     ef_arg_c,
     ef_cos_c,
     ef_exp_c,
     ef_ln_c,
     ef_sin_c,
     ef_sqrt_c,
     ef_tan_c,
     ef_if_c,
     ef_subscript_s,
     ef_eq_s,
     ef_ne_s,
     ef_gt_s,
     ef_lt_s,
     ef_ge_s,
     ef_le_s,
     ef_subsequence_s,
     ef_concat_s,
     ef_size_s,
     ef_format,
     ef_value,
     ef_like,
     ef_if_s,
     ef_subscript_b,
     ef_eq_b,
     ef_ne_b,
     ef_gt_b,
     ef_lt_b,
     ef_ge_b,
     ef_le_b,
     ef_subsequence_b,
     ef_concat_b,
     ef_size_b,
     ef_if_b,
     ef_subscript_t,
     ef_eq_t,
     ef_ne_t,
     ef_concat_t,
     ef_size_t,
     ef_entuple,
     ef_detuple,
     ef_insert,
     ef_remove,
     ef_if_t,
     ef_sum_it,
     ef_product_it,
     ef_add_it,
     ef_subtract_it,
     ef_scalar_mult_it,
     ef_dot_prod_it,
     ef_sum_rt,
     ef_product_rt,
     ef_add_rt,
     ef_subtract_rt,
     ef_scalar_mult_rt,
     ef_dot_prod_rt,
     ef_norm_rt,
     ef_sum_ct,
     ef_product_ct,
     ef_add_ct,
     ef_subtract_ct,
     ef_scalar_mult_ct,
     ef_dot_prod_ct,
     ef_norm_ct,
     ef_if,
     ef_ensemble,
     ef_member_of );
  END_TYPE; -- elementary_function_enumerators (line:2756 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public enum nELEMENTARY_FUNCTION_ENUMERATORS : SDAI.ENUMERATION, SDAIValue, 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__nELEMENTARY_FUNCTION_ENUMERATORS__type {
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_AND
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_OR
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_NOT
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_XOR
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_NEGATE_I
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_ADD_I
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_SUBTRACT_I
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_MULTIPLY_I
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_DIVIDE_I
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_MOD_I
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_EXPONENTIATE_I
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_EQ_I
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_NE_I
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_GT_I
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_LT_I
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_GE_I
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_LE_I
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_ABS_I
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_MAX_I
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_MIN_I
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_IF_I
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_NEGATE_R
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_RECIPROCAL_R
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_ADD_R
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_SUBTRACT_R
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_MULTIPLY_R
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_DIVIDE_R
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_MOD_R
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_EXPONENTIATE_R
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_EXPONENTIATE_RI
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_EQ_R
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_NE_R
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_GT_R
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_LT_R
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_GE_R
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_LE_R
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_ABS_R
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_MAX_R
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_MIN_R
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_ACOS_R
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_ASIN_R
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_ATAN2_R
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_COS_R
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_EXP_R
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_LN_R
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_LOG2_R
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_LOG10_R
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_SIN_R
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_SQRT_R
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_TAN_R
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_IF_R
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_FORM_C
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_RPART_C
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_IPART_C
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_NEGATE_C
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_RECIPROCAL_C
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_ADD_C
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_SUBTRACT_C
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_MULTIPLY_C
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_DIVIDE_C
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_EXPONENTIATE_C
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_EXPONENTIATE_CI
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_EQ_C
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_NE_C
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_CONJUGATE_C
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_ABS_C
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_ARG_C
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_COS_C
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_EXP_C
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_LN_C
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_SIN_C
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_SQRT_C
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_TAN_C
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_IF_C
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_SUBSCRIPT_S
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_EQ_S
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_NE_S
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_GT_S
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_LT_S
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_GE_S
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_LE_S
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_SUBSEQUENCE_S
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_CONCAT_S
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_SIZE_S
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_FORMAT
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_VALUE
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_LIKE
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_IF_S
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_SUBSCRIPT_B
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_EQ_B
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_NE_B
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_GT_B
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_LT_B
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_GE_B
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_LE_B
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_SUBSEQUENCE_B
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_CONCAT_B
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_SIZE_B
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_IF_B
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_SUBSCRIPT_T
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_EQ_T
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_NE_T
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_CONCAT_T
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_SIZE_T
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_ENTUPLE
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_DETUPLE
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_INSERT
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_REMOVE
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_IF_T
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_SUM_IT
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_PRODUCT_IT
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_ADD_IT
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_SUBTRACT_IT
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_SCALAR_MULT_IT
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_DOT_PROD_IT
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_SUM_RT
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_PRODUCT_RT
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_ADD_RT
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_SUBTRACT_RT
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_SCALAR_MULT_RT
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_DOT_PROD_RT
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_NORM_RT
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_SUM_CT
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_PRODUCT_CT
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_ADD_CT
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_SUBTRACT_CT
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_SCALAR_MULT_CT
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_DOT_PROD_CT
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_NORM_CT
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_IF
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_ENSEMBLE
    /// ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
    case EF_MEMBER_OF

    // SDAIGenericType
    public var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      //SELECT data types (indirectly) referencing the current type as a member of the select list
      members.insert(SDAI.STRING(sMATHS_ENUM_ATOM.typeName)) // -> Self
      members.insert(SDAI.STRING(sMATHS_ATOM.typeName)) // -> sMATHS_ENUM_ATOM
      members.insert(SDAI.STRING(sATOM_BASED_VALUE.typeName)) // -> sMATHS_ATOM
      members.insert(SDAI.STRING(sMATHS_VALUE.typeName)) // -> sATOM_BASED_VALUE
      members.insert(SDAI.STRING(sMATHS_EXPRESSION.typeName)) // -> sATOM_BASED_VALUE
      members.insert(SDAI.STRING(sMATHS_FUNCTION_SELECT.typeName)) // -> Self
      return members
    }

    public var entityReference: SDAI.EntityReference? {nil}
    public var stringValue: SDAI.STRING? {nil}
    public var binaryValue: SDAI.BINARY? {nil}
    public var logicalValue: SDAI.LOGICAL? {nil}
    public var booleanValue: SDAI.BOOLEAN? {nil}
    public var numberValue: SDAI.NUMBER? {nil}
    public var realValue: SDAI.REAL? {nil}
    public var integerValue: SDAI.INTEGER? {nil}
    public var genericEnumValue: SDAI.GenericEnumValue? { SDAI.GenericEnumValue(self) }
    public func arrayOptionalValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.ARRAY_OPTIONAL<ELEM>? {nil}
    public func arrayValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.ARRAY<ELEM>? {nil}
    public func listValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.LIST<ELEM>? {nil}
    public func bagValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.BAG<ELEM>? {nil}
    public func setValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.SET<ELEM>? {nil}
    public func enumValue<ENUM:SDAIEnumerationType>(enumType:ENUM.Type) -> ENUM? { return self as? ENUM }

    // SDAIUnderlyingType
    public typealias FundamentalType = Self
    public static var typeName: String = 
      "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ELEMENTARY_FUNCTION_ENUMERATORS"
    public var asFundamentalType: FundamentalType { return self }

    public init(fundamental: FundamentalType) {
      self = fundamental
    }

    public init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let enumval = generic?.enumValue(enumType: Self.self) else { return nil }
      self = enumval
    }
    // InitializableByP21Parameter
    public static var bareTypeName: String = "ELEMENTARY_FUNCTION_ENUMERATORS"

    public	init?(p21untypedParam: P21Decode.ExchangeStructure.UntypedParameter, from exchangeStructure: P21Decode.ExchangeStructure) {
      switch p21untypedParam {
      case .enumeration(let enumcase):
        switch enumcase {
        case "EF_AND": self = .EF_AND
        case "EF_OR": self = .EF_OR
        case "EF_NOT": self = .EF_NOT
        case "EF_XOR": self = .EF_XOR
        case "EF_NEGATE_I": self = .EF_NEGATE_I
        case "EF_ADD_I": self = .EF_ADD_I
        case "EF_SUBTRACT_I": self = .EF_SUBTRACT_I
        case "EF_MULTIPLY_I": self = .EF_MULTIPLY_I
        case "EF_DIVIDE_I": self = .EF_DIVIDE_I
        case "EF_MOD_I": self = .EF_MOD_I
        case "EF_EXPONENTIATE_I": self = .EF_EXPONENTIATE_I
        case "EF_EQ_I": self = .EF_EQ_I
        case "EF_NE_I": self = .EF_NE_I
        case "EF_GT_I": self = .EF_GT_I
        case "EF_LT_I": self = .EF_LT_I
        case "EF_GE_I": self = .EF_GE_I
        case "EF_LE_I": self = .EF_LE_I
        case "EF_ABS_I": self = .EF_ABS_I
        case "EF_MAX_I": self = .EF_MAX_I
        case "EF_MIN_I": self = .EF_MIN_I
        case "EF_IF_I": self = .EF_IF_I
        case "EF_NEGATE_R": self = .EF_NEGATE_R
        case "EF_RECIPROCAL_R": self = .EF_RECIPROCAL_R
        case "EF_ADD_R": self = .EF_ADD_R
        case "EF_SUBTRACT_R": self = .EF_SUBTRACT_R
        case "EF_MULTIPLY_R": self = .EF_MULTIPLY_R
        case "EF_DIVIDE_R": self = .EF_DIVIDE_R
        case "EF_MOD_R": self = .EF_MOD_R
        case "EF_EXPONENTIATE_R": self = .EF_EXPONENTIATE_R
        case "EF_EXPONENTIATE_RI": self = .EF_EXPONENTIATE_RI
        case "EF_EQ_R": self = .EF_EQ_R
        case "EF_NE_R": self = .EF_NE_R
        case "EF_GT_R": self = .EF_GT_R
        case "EF_LT_R": self = .EF_LT_R
        case "EF_GE_R": self = .EF_GE_R
        case "EF_LE_R": self = .EF_LE_R
        case "EF_ABS_R": self = .EF_ABS_R
        case "EF_MAX_R": self = .EF_MAX_R
        case "EF_MIN_R": self = .EF_MIN_R
        case "EF_ACOS_R": self = .EF_ACOS_R
        case "EF_ASIN_R": self = .EF_ASIN_R
        case "EF_ATAN2_R": self = .EF_ATAN2_R
        case "EF_COS_R": self = .EF_COS_R
        case "EF_EXP_R": self = .EF_EXP_R
        case "EF_LN_R": self = .EF_LN_R
        case "EF_LOG2_R": self = .EF_LOG2_R
        case "EF_LOG10_R": self = .EF_LOG10_R
        case "EF_SIN_R": self = .EF_SIN_R
        case "EF_SQRT_R": self = .EF_SQRT_R
        case "EF_TAN_R": self = .EF_TAN_R
        case "EF_IF_R": self = .EF_IF_R
        case "EF_FORM_C": self = .EF_FORM_C
        case "EF_RPART_C": self = .EF_RPART_C
        case "EF_IPART_C": self = .EF_IPART_C
        case "EF_NEGATE_C": self = .EF_NEGATE_C
        case "EF_RECIPROCAL_C": self = .EF_RECIPROCAL_C
        case "EF_ADD_C": self = .EF_ADD_C
        case "EF_SUBTRACT_C": self = .EF_SUBTRACT_C
        case "EF_MULTIPLY_C": self = .EF_MULTIPLY_C
        case "EF_DIVIDE_C": self = .EF_DIVIDE_C
        case "EF_EXPONENTIATE_C": self = .EF_EXPONENTIATE_C
        case "EF_EXPONENTIATE_CI": self = .EF_EXPONENTIATE_CI
        case "EF_EQ_C": self = .EF_EQ_C
        case "EF_NE_C": self = .EF_NE_C
        case "EF_CONJUGATE_C": self = .EF_CONJUGATE_C
        case "EF_ABS_C": self = .EF_ABS_C
        case "EF_ARG_C": self = .EF_ARG_C
        case "EF_COS_C": self = .EF_COS_C
        case "EF_EXP_C": self = .EF_EXP_C
        case "EF_LN_C": self = .EF_LN_C
        case "EF_SIN_C": self = .EF_SIN_C
        case "EF_SQRT_C": self = .EF_SQRT_C
        case "EF_TAN_C": self = .EF_TAN_C
        case "EF_IF_C": self = .EF_IF_C
        case "EF_SUBSCRIPT_S": self = .EF_SUBSCRIPT_S
        case "EF_EQ_S": self = .EF_EQ_S
        case "EF_NE_S": self = .EF_NE_S
        case "EF_GT_S": self = .EF_GT_S
        case "EF_LT_S": self = .EF_LT_S
        case "EF_GE_S": self = .EF_GE_S
        case "EF_LE_S": self = .EF_LE_S
        case "EF_SUBSEQUENCE_S": self = .EF_SUBSEQUENCE_S
        case "EF_CONCAT_S": self = .EF_CONCAT_S
        case "EF_SIZE_S": self = .EF_SIZE_S
        case "EF_FORMAT": self = .EF_FORMAT
        case "EF_VALUE": self = .EF_VALUE
        case "EF_LIKE": self = .EF_LIKE
        case "EF_IF_S": self = .EF_IF_S
        case "EF_SUBSCRIPT_B": self = .EF_SUBSCRIPT_B
        case "EF_EQ_B": self = .EF_EQ_B
        case "EF_NE_B": self = .EF_NE_B
        case "EF_GT_B": self = .EF_GT_B
        case "EF_LT_B": self = .EF_LT_B
        case "EF_GE_B": self = .EF_GE_B
        case "EF_LE_B": self = .EF_LE_B
        case "EF_SUBSEQUENCE_B": self = .EF_SUBSEQUENCE_B
        case "EF_CONCAT_B": self = .EF_CONCAT_B
        case "EF_SIZE_B": self = .EF_SIZE_B
        case "EF_IF_B": self = .EF_IF_B
        case "EF_SUBSCRIPT_T": self = .EF_SUBSCRIPT_T
        case "EF_EQ_T": self = .EF_EQ_T
        case "EF_NE_T": self = .EF_NE_T
        case "EF_CONCAT_T": self = .EF_CONCAT_T
        case "EF_SIZE_T": self = .EF_SIZE_T
        case "EF_ENTUPLE": self = .EF_ENTUPLE
        case "EF_DETUPLE": self = .EF_DETUPLE
        case "EF_INSERT": self = .EF_INSERT
        case "EF_REMOVE": self = .EF_REMOVE
        case "EF_IF_T": self = .EF_IF_T
        case "EF_SUM_IT": self = .EF_SUM_IT
        case "EF_PRODUCT_IT": self = .EF_PRODUCT_IT
        case "EF_ADD_IT": self = .EF_ADD_IT
        case "EF_SUBTRACT_IT": self = .EF_SUBTRACT_IT
        case "EF_SCALAR_MULT_IT": self = .EF_SCALAR_MULT_IT
        case "EF_DOT_PROD_IT": self = .EF_DOT_PROD_IT
        case "EF_SUM_RT": self = .EF_SUM_RT
        case "EF_PRODUCT_RT": self = .EF_PRODUCT_RT
        case "EF_ADD_RT": self = .EF_ADD_RT
        case "EF_SUBTRACT_RT": self = .EF_SUBTRACT_RT
        case "EF_SCALAR_MULT_RT": self = .EF_SCALAR_MULT_RT
        case "EF_DOT_PROD_RT": self = .EF_DOT_PROD_RT
        case "EF_NORM_RT": self = .EF_NORM_RT
        case "EF_SUM_CT": self = .EF_SUM_CT
        case "EF_PRODUCT_CT": self = .EF_PRODUCT_CT
        case "EF_ADD_CT": self = .EF_ADD_CT
        case "EF_SUBTRACT_CT": self = .EF_SUBTRACT_CT
        case "EF_SCALAR_MULT_CT": self = .EF_SCALAR_MULT_CT
        case "EF_DOT_PROD_CT": self = .EF_DOT_PROD_CT
        case "EF_NORM_CT": self = .EF_NORM_CT
        case "EF_IF": self = .EF_IF
        case "EF_ENSEMBLE": self = .EF_ENSEMBLE
        case "EF_MEMBER_OF": self = .EF_MEMBER_OF
        default:
          exchangeStructure.error = "unexpected p21parameter enum case(\(enumcase)) while resolving \(Self.bareTypeName) value"
          return nil
        }

      case .rhsOccurenceName(let rhsname):
        switch rhsname {
        case .constantValueName(let name):
          guard let generic = exchangeStructure.resolve(constantValueName: name) else {exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) value"); return nil }
          guard let enumValue = generic.enumValue(enumType:Self.self) else { exchangeStructure.error = "constant value(\(name): \(generic)) is not compatible with \(Self.bareTypeName)"; return nil }
          self = enumValue

        case .valueInstanceName(let name):
          guard let param = exchangeStructure.resolve(valueInstanceName: name) else {exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) value from \(rhsname)"); return nil }
          self.init(p21param: param, from: exchangeStructure)

        default:
          exchangeStructure.error = "unexpected p21parameter(\(p21untypedParam)) while resolving \(Self.bareTypeName) value"
          return nil
        }

      case .noValue:
        return nil

      default:
        exchangeStructure.error = "unexpected p21parameter(\(p21untypedParam)) while resolving \(Self.bareTypeName) value"
        return nil
      }
    }

    public init(p21omittedParamfrom exchangeStructure: P21Decode.ExchangeStructure) {
      self = .EF_AND
    }

    //WHERE RULE VALIDATION (ENUMERATION TYPE)
    public static func validateWhereRules(instance:Self?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      return [:]
    }

  }

  //MARK: -enum case symbol promotions
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_AND = nELEMENTARY_FUNCTION_ENUMERATORS.EF_AND
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_OR = nELEMENTARY_FUNCTION_ENUMERATORS.EF_OR
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_NOT = nELEMENTARY_FUNCTION_ENUMERATORS.EF_NOT
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_XOR = nELEMENTARY_FUNCTION_ENUMERATORS.EF_XOR
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_NEGATE_I = nELEMENTARY_FUNCTION_ENUMERATORS.EF_NEGATE_I
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_ADD_I = nELEMENTARY_FUNCTION_ENUMERATORS.EF_ADD_I
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_SUBTRACT_I = nELEMENTARY_FUNCTION_ENUMERATORS.EF_SUBTRACT_I
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_MULTIPLY_I = nELEMENTARY_FUNCTION_ENUMERATORS.EF_MULTIPLY_I
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_DIVIDE_I = nELEMENTARY_FUNCTION_ENUMERATORS.EF_DIVIDE_I
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_MOD_I = nELEMENTARY_FUNCTION_ENUMERATORS.EF_MOD_I
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_EXPONENTIATE_I = nELEMENTARY_FUNCTION_ENUMERATORS.EF_EXPONENTIATE_I
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_EQ_I = nELEMENTARY_FUNCTION_ENUMERATORS.EF_EQ_I
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_NE_I = nELEMENTARY_FUNCTION_ENUMERATORS.EF_NE_I
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_GT_I = nELEMENTARY_FUNCTION_ENUMERATORS.EF_GT_I
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_LT_I = nELEMENTARY_FUNCTION_ENUMERATORS.EF_LT_I
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_GE_I = nELEMENTARY_FUNCTION_ENUMERATORS.EF_GE_I
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_LE_I = nELEMENTARY_FUNCTION_ENUMERATORS.EF_LE_I
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_ABS_I = nELEMENTARY_FUNCTION_ENUMERATORS.EF_ABS_I
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_MAX_I = nELEMENTARY_FUNCTION_ENUMERATORS.EF_MAX_I
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_MIN_I = nELEMENTARY_FUNCTION_ENUMERATORS.EF_MIN_I
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_IF_I = nELEMENTARY_FUNCTION_ENUMERATORS.EF_IF_I
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_NEGATE_R = nELEMENTARY_FUNCTION_ENUMERATORS.EF_NEGATE_R
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_RECIPROCAL_R = nELEMENTARY_FUNCTION_ENUMERATORS.EF_RECIPROCAL_R
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_ADD_R = nELEMENTARY_FUNCTION_ENUMERATORS.EF_ADD_R
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_SUBTRACT_R = nELEMENTARY_FUNCTION_ENUMERATORS.EF_SUBTRACT_R
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_MULTIPLY_R = nELEMENTARY_FUNCTION_ENUMERATORS.EF_MULTIPLY_R
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_DIVIDE_R = nELEMENTARY_FUNCTION_ENUMERATORS.EF_DIVIDE_R
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_MOD_R = nELEMENTARY_FUNCTION_ENUMERATORS.EF_MOD_R
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_EXPONENTIATE_R = nELEMENTARY_FUNCTION_ENUMERATORS.EF_EXPONENTIATE_R
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_EXPONENTIATE_RI = nELEMENTARY_FUNCTION_ENUMERATORS.EF_EXPONENTIATE_RI
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_EQ_R = nELEMENTARY_FUNCTION_ENUMERATORS.EF_EQ_R
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_NE_R = nELEMENTARY_FUNCTION_ENUMERATORS.EF_NE_R
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_GT_R = nELEMENTARY_FUNCTION_ENUMERATORS.EF_GT_R
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_LT_R = nELEMENTARY_FUNCTION_ENUMERATORS.EF_LT_R
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_GE_R = nELEMENTARY_FUNCTION_ENUMERATORS.EF_GE_R
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_LE_R = nELEMENTARY_FUNCTION_ENUMERATORS.EF_LE_R
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_ABS_R = nELEMENTARY_FUNCTION_ENUMERATORS.EF_ABS_R
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_MAX_R = nELEMENTARY_FUNCTION_ENUMERATORS.EF_MAX_R
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_MIN_R = nELEMENTARY_FUNCTION_ENUMERATORS.EF_MIN_R
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_ACOS_R = nELEMENTARY_FUNCTION_ENUMERATORS.EF_ACOS_R
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_ASIN_R = nELEMENTARY_FUNCTION_ENUMERATORS.EF_ASIN_R
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_ATAN2_R = nELEMENTARY_FUNCTION_ENUMERATORS.EF_ATAN2_R
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_COS_R = nELEMENTARY_FUNCTION_ENUMERATORS.EF_COS_R
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_EXP_R = nELEMENTARY_FUNCTION_ENUMERATORS.EF_EXP_R
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_LN_R = nELEMENTARY_FUNCTION_ENUMERATORS.EF_LN_R
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_LOG2_R = nELEMENTARY_FUNCTION_ENUMERATORS.EF_LOG2_R
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_LOG10_R = nELEMENTARY_FUNCTION_ENUMERATORS.EF_LOG10_R
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_SIN_R = nELEMENTARY_FUNCTION_ENUMERATORS.EF_SIN_R
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_SQRT_R = nELEMENTARY_FUNCTION_ENUMERATORS.EF_SQRT_R
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_TAN_R = nELEMENTARY_FUNCTION_ENUMERATORS.EF_TAN_R
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_IF_R = nELEMENTARY_FUNCTION_ENUMERATORS.EF_IF_R
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_FORM_C = nELEMENTARY_FUNCTION_ENUMERATORS.EF_FORM_C
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_RPART_C = nELEMENTARY_FUNCTION_ENUMERATORS.EF_RPART_C
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_IPART_C = nELEMENTARY_FUNCTION_ENUMERATORS.EF_IPART_C
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_NEGATE_C = nELEMENTARY_FUNCTION_ENUMERATORS.EF_NEGATE_C
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_RECIPROCAL_C = nELEMENTARY_FUNCTION_ENUMERATORS.EF_RECIPROCAL_C
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_ADD_C = nELEMENTARY_FUNCTION_ENUMERATORS.EF_ADD_C
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_SUBTRACT_C = nELEMENTARY_FUNCTION_ENUMERATORS.EF_SUBTRACT_C
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_MULTIPLY_C = nELEMENTARY_FUNCTION_ENUMERATORS.EF_MULTIPLY_C
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_DIVIDE_C = nELEMENTARY_FUNCTION_ENUMERATORS.EF_DIVIDE_C
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_EXPONENTIATE_C = nELEMENTARY_FUNCTION_ENUMERATORS.EF_EXPONENTIATE_C
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_EXPONENTIATE_CI = nELEMENTARY_FUNCTION_ENUMERATORS.EF_EXPONENTIATE_CI
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_EQ_C = nELEMENTARY_FUNCTION_ENUMERATORS.EF_EQ_C
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_NE_C = nELEMENTARY_FUNCTION_ENUMERATORS.EF_NE_C
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_CONJUGATE_C = nELEMENTARY_FUNCTION_ENUMERATORS.EF_CONJUGATE_C
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_ABS_C = nELEMENTARY_FUNCTION_ENUMERATORS.EF_ABS_C
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_ARG_C = nELEMENTARY_FUNCTION_ENUMERATORS.EF_ARG_C
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_COS_C = nELEMENTARY_FUNCTION_ENUMERATORS.EF_COS_C
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_EXP_C = nELEMENTARY_FUNCTION_ENUMERATORS.EF_EXP_C
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_LN_C = nELEMENTARY_FUNCTION_ENUMERATORS.EF_LN_C
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_SIN_C = nELEMENTARY_FUNCTION_ENUMERATORS.EF_SIN_C
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_SQRT_C = nELEMENTARY_FUNCTION_ENUMERATORS.EF_SQRT_C
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_TAN_C = nELEMENTARY_FUNCTION_ENUMERATORS.EF_TAN_C
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_IF_C = nELEMENTARY_FUNCTION_ENUMERATORS.EF_IF_C
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_SUBSCRIPT_S = nELEMENTARY_FUNCTION_ENUMERATORS.EF_SUBSCRIPT_S
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_EQ_S = nELEMENTARY_FUNCTION_ENUMERATORS.EF_EQ_S
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_NE_S = nELEMENTARY_FUNCTION_ENUMERATORS.EF_NE_S
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_GT_S = nELEMENTARY_FUNCTION_ENUMERATORS.EF_GT_S
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_LT_S = nELEMENTARY_FUNCTION_ENUMERATORS.EF_LT_S
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_GE_S = nELEMENTARY_FUNCTION_ENUMERATORS.EF_GE_S
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_LE_S = nELEMENTARY_FUNCTION_ENUMERATORS.EF_LE_S
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_SUBSEQUENCE_S = nELEMENTARY_FUNCTION_ENUMERATORS.EF_SUBSEQUENCE_S
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_CONCAT_S = nELEMENTARY_FUNCTION_ENUMERATORS.EF_CONCAT_S
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_SIZE_S = nELEMENTARY_FUNCTION_ENUMERATORS.EF_SIZE_S
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_FORMAT = nELEMENTARY_FUNCTION_ENUMERATORS.EF_FORMAT
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_VALUE = nELEMENTARY_FUNCTION_ENUMERATORS.EF_VALUE
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_LIKE = nELEMENTARY_FUNCTION_ENUMERATORS.EF_LIKE
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_IF_S = nELEMENTARY_FUNCTION_ENUMERATORS.EF_IF_S
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_SUBSCRIPT_B = nELEMENTARY_FUNCTION_ENUMERATORS.EF_SUBSCRIPT_B
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_EQ_B = nELEMENTARY_FUNCTION_ENUMERATORS.EF_EQ_B
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_NE_B = nELEMENTARY_FUNCTION_ENUMERATORS.EF_NE_B
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_GT_B = nELEMENTARY_FUNCTION_ENUMERATORS.EF_GT_B
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_LT_B = nELEMENTARY_FUNCTION_ENUMERATORS.EF_LT_B
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_GE_B = nELEMENTARY_FUNCTION_ENUMERATORS.EF_GE_B
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_LE_B = nELEMENTARY_FUNCTION_ENUMERATORS.EF_LE_B
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_SUBSEQUENCE_B = nELEMENTARY_FUNCTION_ENUMERATORS.EF_SUBSEQUENCE_B
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_CONCAT_B = nELEMENTARY_FUNCTION_ENUMERATORS.EF_CONCAT_B
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_SIZE_B = nELEMENTARY_FUNCTION_ENUMERATORS.EF_SIZE_B
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_IF_B = nELEMENTARY_FUNCTION_ENUMERATORS.EF_IF_B
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_SUBSCRIPT_T = nELEMENTARY_FUNCTION_ENUMERATORS.EF_SUBSCRIPT_T
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_EQ_T = nELEMENTARY_FUNCTION_ENUMERATORS.EF_EQ_T
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_NE_T = nELEMENTARY_FUNCTION_ENUMERATORS.EF_NE_T
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_CONCAT_T = nELEMENTARY_FUNCTION_ENUMERATORS.EF_CONCAT_T
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_SIZE_T = nELEMENTARY_FUNCTION_ENUMERATORS.EF_SIZE_T
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_ENTUPLE = nELEMENTARY_FUNCTION_ENUMERATORS.EF_ENTUPLE
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_DETUPLE = nELEMENTARY_FUNCTION_ENUMERATORS.EF_DETUPLE
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_INSERT = nELEMENTARY_FUNCTION_ENUMERATORS.EF_INSERT
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_REMOVE = nELEMENTARY_FUNCTION_ENUMERATORS.EF_REMOVE
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_IF_T = nELEMENTARY_FUNCTION_ENUMERATORS.EF_IF_T
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_SUM_IT = nELEMENTARY_FUNCTION_ENUMERATORS.EF_SUM_IT
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_PRODUCT_IT = nELEMENTARY_FUNCTION_ENUMERATORS.EF_PRODUCT_IT
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_ADD_IT = nELEMENTARY_FUNCTION_ENUMERATORS.EF_ADD_IT
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_SUBTRACT_IT = nELEMENTARY_FUNCTION_ENUMERATORS.EF_SUBTRACT_IT
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_SCALAR_MULT_IT = nELEMENTARY_FUNCTION_ENUMERATORS.EF_SCALAR_MULT_IT
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_DOT_PROD_IT = nELEMENTARY_FUNCTION_ENUMERATORS.EF_DOT_PROD_IT
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_SUM_RT = nELEMENTARY_FUNCTION_ENUMERATORS.EF_SUM_RT
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_PRODUCT_RT = nELEMENTARY_FUNCTION_ENUMERATORS.EF_PRODUCT_RT
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_ADD_RT = nELEMENTARY_FUNCTION_ENUMERATORS.EF_ADD_RT
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_SUBTRACT_RT = nELEMENTARY_FUNCTION_ENUMERATORS.EF_SUBTRACT_RT
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_SCALAR_MULT_RT = nELEMENTARY_FUNCTION_ENUMERATORS.EF_SCALAR_MULT_RT
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_DOT_PROD_RT = nELEMENTARY_FUNCTION_ENUMERATORS.EF_DOT_PROD_RT
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_NORM_RT = nELEMENTARY_FUNCTION_ENUMERATORS.EF_NORM_RT
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_SUM_CT = nELEMENTARY_FUNCTION_ENUMERATORS.EF_SUM_CT
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_PRODUCT_CT = nELEMENTARY_FUNCTION_ENUMERATORS.EF_PRODUCT_CT
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_ADD_CT = nELEMENTARY_FUNCTION_ENUMERATORS.EF_ADD_CT
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_SUBTRACT_CT = nELEMENTARY_FUNCTION_ENUMERATORS.EF_SUBTRACT_CT
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_SCALAR_MULT_CT = nELEMENTARY_FUNCTION_ENUMERATORS.EF_SCALAR_MULT_CT
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_DOT_PROD_CT = nELEMENTARY_FUNCTION_ENUMERATORS.EF_DOT_PROD_CT
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_NORM_CT = nELEMENTARY_FUNCTION_ENUMERATORS.EF_NORM_CT
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_IF = nELEMENTARY_FUNCTION_ENUMERATORS.EF_IF
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_ENSEMBLE = nELEMENTARY_FUNCTION_ENUMERATORS.EF_ENSEMBLE
  /// promoted ENUMERATION case in ``nELEMENTARY_FUNCTION_ENUMERATORS``
  public static let EF_MEMBER_OF = nELEMENTARY_FUNCTION_ENUMERATORS.EF_MEMBER_OF
}


//MARK: - ENUMERATION TYPE HIERARCHY
public protocol AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__nELEMENTARY_FUNCTION_ENUMERATORS__type: 
  SDAIEnumerationType {}

public protocol AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__nELEMENTARY_FUNCTION_ENUMERATORS__subtype: 
  AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__nELEMENTARY_FUNCTION_ENUMERATORS__type, SDAIDefinedType
where Supertype: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__nELEMENTARY_FUNCTION_ENUMERATORS__type
{}

