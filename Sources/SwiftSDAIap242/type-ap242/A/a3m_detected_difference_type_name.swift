/* file: a3m_detected_difference_type_name.swift 	 generated: Tue Nov 16 05:35:44 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -TYPE DEFINITION in EXPRESS
/*
  TYPE a3m_detected_difference_type_name = ENUMERATION OF
    ( ddna_a3ms_inspected_equivalence_element_select,
     ddna_assembly_component_usage,
     ddna_binary_assembly_constraint,
     ddna_cartesian_point,
     ddna_context_dependent_shape_representation,
     ddna_count_measure,
     ddna_multi_level_reference_designator,
     ddna_no_element,
     ddna_others,
     ddna_volume_measure,
     ddns_area_measure,
     ddns_cartesian_point,
     ddns_connected_face_set,
     ddns_count_measure,
     ddns_edge,
     ddns_face,
     ddns_five_count_measure,
     ddns_four_count_measure,
     ddns_length_measure,
     ddns_no_element,
     ddns_others,
     ddns_point_on_curve,
     ddns_point_on_surface,
     ddns_several_edges,
     ddns_several_faces,
     ddns_three_count_measure,
     ddns_two_cartesian_points,
     ddns_two_count_measure,
     ddns_volume_measure );
  END_TYPE; -- a3m_detected_difference_type_name (line:149 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


/** ENUMERATION type
- EXPRESS:
```express
  TYPE a3m_detected_difference_type_name = ENUMERATION OF
    ( ddna_a3ms_inspected_equivalence_element_select,
     ddna_assembly_component_usage,
     ddna_binary_assembly_constraint,
     ddna_cartesian_point,
     ddna_context_dependent_shape_representation,
     ddna_count_measure,
     ddna_multi_level_reference_designator,
     ddna_no_element,
     ddna_others,
     ddna_volume_measure,
     ddns_area_measure,
     ddns_cartesian_point,
     ddns_connected_face_set,
     ddns_count_measure,
     ddns_edge,
     ddns_face,
     ddns_five_count_measure,
     ddns_four_count_measure,
     ddns_length_measure,
     ddns_no_element,
     ddns_others,
     ddns_point_on_curve,
     ddns_point_on_surface,
     ddns_several_edges,
     ddns_several_faces,
     ddns_three_count_measure,
     ddns_two_cartesian_points,
     ddns_two_count_measure,
     ddns_volume_measure );
  END_TYPE; -- a3m_detected_difference_type_name (line:149 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public enum nA3M_DETECTED_DIFFERENCE_TYPE_NAME : SDAI.ENUMERATION, SDAIValue, 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__nA3M_DETECTED_DIFFERENCE_TYPE_NAME__type {
    /// ENUMERATION case in ``nA3M_DETECTED_DIFFERENCE_TYPE_NAME``
    case DDNA_A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT
    /// ENUMERATION case in ``nA3M_DETECTED_DIFFERENCE_TYPE_NAME``
    case DDNA_ASSEMBLY_COMPONENT_USAGE
    /// ENUMERATION case in ``nA3M_DETECTED_DIFFERENCE_TYPE_NAME``
    case DDNA_BINARY_ASSEMBLY_CONSTRAINT
    /// ENUMERATION case in ``nA3M_DETECTED_DIFFERENCE_TYPE_NAME``
    case DDNA_CARTESIAN_POINT
    /// ENUMERATION case in ``nA3M_DETECTED_DIFFERENCE_TYPE_NAME``
    case DDNA_CONTEXT_DEPENDENT_SHAPE_REPRESENTATION
    /// ENUMERATION case in ``nA3M_DETECTED_DIFFERENCE_TYPE_NAME``
    case DDNA_COUNT_MEASURE
    /// ENUMERATION case in ``nA3M_DETECTED_DIFFERENCE_TYPE_NAME``
    case DDNA_MULTI_LEVEL_REFERENCE_DESIGNATOR
    /// ENUMERATION case in ``nA3M_DETECTED_DIFFERENCE_TYPE_NAME``
    case DDNA_NO_ELEMENT
    /// ENUMERATION case in ``nA3M_DETECTED_DIFFERENCE_TYPE_NAME``
    case DDNA_OTHERS
    /// ENUMERATION case in ``nA3M_DETECTED_DIFFERENCE_TYPE_NAME``
    case DDNA_VOLUME_MEASURE
    /// ENUMERATION case in ``nA3M_DETECTED_DIFFERENCE_TYPE_NAME``
    case DDNS_AREA_MEASURE
    /// ENUMERATION case in ``nA3M_DETECTED_DIFFERENCE_TYPE_NAME``
    case DDNS_CARTESIAN_POINT
    /// ENUMERATION case in ``nA3M_DETECTED_DIFFERENCE_TYPE_NAME``
    case DDNS_CONNECTED_FACE_SET
    /// ENUMERATION case in ``nA3M_DETECTED_DIFFERENCE_TYPE_NAME``
    case DDNS_COUNT_MEASURE
    /// ENUMERATION case in ``nA3M_DETECTED_DIFFERENCE_TYPE_NAME``
    case DDNS_EDGE
    /// ENUMERATION case in ``nA3M_DETECTED_DIFFERENCE_TYPE_NAME``
    case DDNS_FACE
    /// ENUMERATION case in ``nA3M_DETECTED_DIFFERENCE_TYPE_NAME``
    case DDNS_FIVE_COUNT_MEASURE
    /// ENUMERATION case in ``nA3M_DETECTED_DIFFERENCE_TYPE_NAME``
    case DDNS_FOUR_COUNT_MEASURE
    /// ENUMERATION case in ``nA3M_DETECTED_DIFFERENCE_TYPE_NAME``
    case DDNS_LENGTH_MEASURE
    /// ENUMERATION case in ``nA3M_DETECTED_DIFFERENCE_TYPE_NAME``
    case DDNS_NO_ELEMENT
    /// ENUMERATION case in ``nA3M_DETECTED_DIFFERENCE_TYPE_NAME``
    case DDNS_OTHERS
    /// ENUMERATION case in ``nA3M_DETECTED_DIFFERENCE_TYPE_NAME``
    case DDNS_POINT_ON_CURVE
    /// ENUMERATION case in ``nA3M_DETECTED_DIFFERENCE_TYPE_NAME``
    case DDNS_POINT_ON_SURFACE
    /// ENUMERATION case in ``nA3M_DETECTED_DIFFERENCE_TYPE_NAME``
    case DDNS_SEVERAL_EDGES
    /// ENUMERATION case in ``nA3M_DETECTED_DIFFERENCE_TYPE_NAME``
    case DDNS_SEVERAL_FACES
    /// ENUMERATION case in ``nA3M_DETECTED_DIFFERENCE_TYPE_NAME``
    case DDNS_THREE_COUNT_MEASURE
    /// ENUMERATION case in ``nA3M_DETECTED_DIFFERENCE_TYPE_NAME``
    case DDNS_TWO_CARTESIAN_POINTS
    /// ENUMERATION case in ``nA3M_DETECTED_DIFFERENCE_TYPE_NAME``
    case DDNS_TWO_COUNT_MEASURE
    /// ENUMERATION case in ``nA3M_DETECTED_DIFFERENCE_TYPE_NAME``
    case DDNS_VOLUME_MEASURE

    // SDAIGenericType
    public var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      return members
    }

    public var entityReference: SDAI.EntityReference? {nil}
    public var stringValue: SDAI.STRING? {nil}
    public var binaryValue: SDAI.BINARY? {nil}
    public var logicalValue: SDAI.LOGICAL? {nil}
    public var booleanValue: SDAI.BOOLEAN? {nil}
    public var numberValue: SDAI.NUMBER? {nil}
    public var realValue: SDAI.REAL? {nil}
    public var integerValue: SDAI.INTEGER? {nil}
    public var genericEnumValue: SDAI.GenericEnumValue? { SDAI.GenericEnumValue(self) }
    public func arrayOptionalValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.ARRAY_OPTIONAL<ELEM>? {nil}
    public func arrayValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.ARRAY<ELEM>? {nil}
    public func listValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.LIST<ELEM>? {nil}
    public func bagValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.BAG<ELEM>? {nil}
    public func setValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.SET<ELEM>? {nil}
    public func enumValue<ENUM:SDAIEnumerationType>(enumType:ENUM.Type) -> ENUM? { return self as? ENUM }

    // SDAIUnderlyingType
    public typealias FundamentalType = Self
    public static var typeName: String = 
      "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.A3M_DETECTED_DIFFERENCE_TYPE_NAME"
    public var asFundamentalType: FundamentalType { return self }

    public init(fundamental: FundamentalType) {
      self = fundamental
    }

    public init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let enumval = generic?.enumValue(enumType: Self.self) else { return nil }
      self = enumval
    }
    // InitializableByP21Parameter
    public static var bareTypeName: String = "A3M_DETECTED_DIFFERENCE_TYPE_NAME"

    public	init?(p21untypedParam: P21Decode.ExchangeStructure.UntypedParameter, from exchangeStructure: P21Decode.ExchangeStructure) {
      switch p21untypedParam {
      case .enumeration(let enumcase):
        switch enumcase {
        case "DDNA_A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT": self = .DDNA_A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT
        case "DDNA_ASSEMBLY_COMPONENT_USAGE": self = .DDNA_ASSEMBLY_COMPONENT_USAGE
        case "DDNA_BINARY_ASSEMBLY_CONSTRAINT": self = .DDNA_BINARY_ASSEMBLY_CONSTRAINT
        case "DDNA_CARTESIAN_POINT": self = .DDNA_CARTESIAN_POINT
        case "DDNA_CONTEXT_DEPENDENT_SHAPE_REPRESENTATION": self = .DDNA_CONTEXT_DEPENDENT_SHAPE_REPRESENTATION
        case "DDNA_COUNT_MEASURE": self = .DDNA_COUNT_MEASURE
        case "DDNA_MULTI_LEVEL_REFERENCE_DESIGNATOR": self = .DDNA_MULTI_LEVEL_REFERENCE_DESIGNATOR
        case "DDNA_NO_ELEMENT": self = .DDNA_NO_ELEMENT
        case "DDNA_OTHERS": self = .DDNA_OTHERS
        case "DDNA_VOLUME_MEASURE": self = .DDNA_VOLUME_MEASURE
        case "DDNS_AREA_MEASURE": self = .DDNS_AREA_MEASURE
        case "DDNS_CARTESIAN_POINT": self = .DDNS_CARTESIAN_POINT
        case "DDNS_CONNECTED_FACE_SET": self = .DDNS_CONNECTED_FACE_SET
        case "DDNS_COUNT_MEASURE": self = .DDNS_COUNT_MEASURE
        case "DDNS_EDGE": self = .DDNS_EDGE
        case "DDNS_FACE": self = .DDNS_FACE
        case "DDNS_FIVE_COUNT_MEASURE": self = .DDNS_FIVE_COUNT_MEASURE
        case "DDNS_FOUR_COUNT_MEASURE": self = .DDNS_FOUR_COUNT_MEASURE
        case "DDNS_LENGTH_MEASURE": self = .DDNS_LENGTH_MEASURE
        case "DDNS_NO_ELEMENT": self = .DDNS_NO_ELEMENT
        case "DDNS_OTHERS": self = .DDNS_OTHERS
        case "DDNS_POINT_ON_CURVE": self = .DDNS_POINT_ON_CURVE
        case "DDNS_POINT_ON_SURFACE": self = .DDNS_POINT_ON_SURFACE
        case "DDNS_SEVERAL_EDGES": self = .DDNS_SEVERAL_EDGES
        case "DDNS_SEVERAL_FACES": self = .DDNS_SEVERAL_FACES
        case "DDNS_THREE_COUNT_MEASURE": self = .DDNS_THREE_COUNT_MEASURE
        case "DDNS_TWO_CARTESIAN_POINTS": self = .DDNS_TWO_CARTESIAN_POINTS
        case "DDNS_TWO_COUNT_MEASURE": self = .DDNS_TWO_COUNT_MEASURE
        case "DDNS_VOLUME_MEASURE": self = .DDNS_VOLUME_MEASURE
        default:
          exchangeStructure.error = "unexpected p21parameter enum case(\(enumcase)) while resolving \(Self.bareTypeName) value"
          return nil
        }

      case .rhsOccurenceName(let rhsname):
        switch rhsname {
        case .constantValueName(let name):
          guard let generic = exchangeStructure.resolve(constantValueName: name) else {exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) value"); return nil }
          guard let enumValue = generic.enumValue(enumType:Self.self) else { exchangeStructure.error = "constant value(\(name): \(generic)) is not compatible with \(Self.bareTypeName)"; return nil }
          self = enumValue

        case .valueInstanceName(let name):
          guard let param = exchangeStructure.resolve(valueInstanceName: name) else {exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) value from \(rhsname)"); return nil }
          self.init(p21param: param, from: exchangeStructure)

        default:
          exchangeStructure.error = "unexpected p21parameter(\(p21untypedParam)) while resolving \(Self.bareTypeName) value"
          return nil
        }

      case .noValue:
        return nil

      default:
        exchangeStructure.error = "unexpected p21parameter(\(p21untypedParam)) while resolving \(Self.bareTypeName) value"
        return nil
      }
    }

    public init(p21omittedParamfrom exchangeStructure: P21Decode.ExchangeStructure) {
      self = .DDNA_A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT
    }

    //WHERE RULE VALIDATION (ENUMERATION TYPE)
    public static func validateWhereRules(instance:Self?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      return [:]
    }

  }

  //MARK: -enum case symbol promotions
  /// promoted ENUMERATION case in ``nA3M_DETECTED_DIFFERENCE_TYPE_NAME``
  public static let DDNA_A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT = nA3M_DETECTED_DIFFERENCE_TYPE_NAME
    .DDNA_A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT
  /// promoted ENUMERATION case in ``nA3M_DETECTED_DIFFERENCE_TYPE_NAME``
  public static let DDNA_ASSEMBLY_COMPONENT_USAGE = nA3M_DETECTED_DIFFERENCE_TYPE_NAME
    .DDNA_ASSEMBLY_COMPONENT_USAGE
  /// promoted ENUMERATION case in ``nA3M_DETECTED_DIFFERENCE_TYPE_NAME``
  public static let DDNA_BINARY_ASSEMBLY_CONSTRAINT = nA3M_DETECTED_DIFFERENCE_TYPE_NAME
    .DDNA_BINARY_ASSEMBLY_CONSTRAINT
  /// promoted ENUMERATION case in ``nA3M_DETECTED_DIFFERENCE_TYPE_NAME``
  public static let DDNA_CARTESIAN_POINT = nA3M_DETECTED_DIFFERENCE_TYPE_NAME.DDNA_CARTESIAN_POINT
  /// promoted ENUMERATION case in ``nA3M_DETECTED_DIFFERENCE_TYPE_NAME``
  public static let DDNA_CONTEXT_DEPENDENT_SHAPE_REPRESENTATION = nA3M_DETECTED_DIFFERENCE_TYPE_NAME
    .DDNA_CONTEXT_DEPENDENT_SHAPE_REPRESENTATION
  /// promoted ENUMERATION case in ``nA3M_DETECTED_DIFFERENCE_TYPE_NAME``
  public static let DDNA_COUNT_MEASURE = nA3M_DETECTED_DIFFERENCE_TYPE_NAME.DDNA_COUNT_MEASURE
  /// promoted ENUMERATION case in ``nA3M_DETECTED_DIFFERENCE_TYPE_NAME``
  public static let DDNA_MULTI_LEVEL_REFERENCE_DESIGNATOR = nA3M_DETECTED_DIFFERENCE_TYPE_NAME
    .DDNA_MULTI_LEVEL_REFERENCE_DESIGNATOR
  /// promoted ENUMERATION case in ``nA3M_DETECTED_DIFFERENCE_TYPE_NAME``
  public static let DDNA_NO_ELEMENT = nA3M_DETECTED_DIFFERENCE_TYPE_NAME.DDNA_NO_ELEMENT
  /// promoted ENUMERATION case in ``nA3M_DETECTED_DIFFERENCE_TYPE_NAME``
  public static let DDNA_OTHERS = nA3M_DETECTED_DIFFERENCE_TYPE_NAME.DDNA_OTHERS
  /// promoted ENUMERATION case in ``nA3M_DETECTED_DIFFERENCE_TYPE_NAME``
  public static let DDNA_VOLUME_MEASURE = nA3M_DETECTED_DIFFERENCE_TYPE_NAME.DDNA_VOLUME_MEASURE
  /// promoted ENUMERATION case in ``nA3M_DETECTED_DIFFERENCE_TYPE_NAME``
  public static let DDNS_AREA_MEASURE = nA3M_DETECTED_DIFFERENCE_TYPE_NAME.DDNS_AREA_MEASURE
  /// promoted ENUMERATION case in ``nA3M_DETECTED_DIFFERENCE_TYPE_NAME``
  public static let DDNS_CARTESIAN_POINT = nA3M_DETECTED_DIFFERENCE_TYPE_NAME.DDNS_CARTESIAN_POINT
  /// promoted ENUMERATION case in ``nA3M_DETECTED_DIFFERENCE_TYPE_NAME``
  public static let DDNS_CONNECTED_FACE_SET = nA3M_DETECTED_DIFFERENCE_TYPE_NAME.DDNS_CONNECTED_FACE_SET
  /// promoted ENUMERATION case in ``nA3M_DETECTED_DIFFERENCE_TYPE_NAME``
  public static let DDNS_COUNT_MEASURE = nA3M_DETECTED_DIFFERENCE_TYPE_NAME.DDNS_COUNT_MEASURE
  /// promoted ENUMERATION case in ``nA3M_DETECTED_DIFFERENCE_TYPE_NAME``
  public static let DDNS_EDGE = nA3M_DETECTED_DIFFERENCE_TYPE_NAME.DDNS_EDGE
  /// promoted ENUMERATION case in ``nA3M_DETECTED_DIFFERENCE_TYPE_NAME``
  public static let DDNS_FACE = nA3M_DETECTED_DIFFERENCE_TYPE_NAME.DDNS_FACE
  /// promoted ENUMERATION case in ``nA3M_DETECTED_DIFFERENCE_TYPE_NAME``
  public static let DDNS_FIVE_COUNT_MEASURE = nA3M_DETECTED_DIFFERENCE_TYPE_NAME.DDNS_FIVE_COUNT_MEASURE
  /// promoted ENUMERATION case in ``nA3M_DETECTED_DIFFERENCE_TYPE_NAME``
  public static let DDNS_FOUR_COUNT_MEASURE = nA3M_DETECTED_DIFFERENCE_TYPE_NAME.DDNS_FOUR_COUNT_MEASURE
  /// promoted ENUMERATION case in ``nA3M_DETECTED_DIFFERENCE_TYPE_NAME``
  public static let DDNS_LENGTH_MEASURE = nA3M_DETECTED_DIFFERENCE_TYPE_NAME.DDNS_LENGTH_MEASURE
  /// promoted ENUMERATION case in ``nA3M_DETECTED_DIFFERENCE_TYPE_NAME``
  public static let DDNS_NO_ELEMENT = nA3M_DETECTED_DIFFERENCE_TYPE_NAME.DDNS_NO_ELEMENT
  /// promoted ENUMERATION case in ``nA3M_DETECTED_DIFFERENCE_TYPE_NAME``
  public static let DDNS_OTHERS = nA3M_DETECTED_DIFFERENCE_TYPE_NAME.DDNS_OTHERS
  /// promoted ENUMERATION case in ``nA3M_DETECTED_DIFFERENCE_TYPE_NAME``
  public static let DDNS_POINT_ON_CURVE = nA3M_DETECTED_DIFFERENCE_TYPE_NAME.DDNS_POINT_ON_CURVE
  /// promoted ENUMERATION case in ``nA3M_DETECTED_DIFFERENCE_TYPE_NAME``
  public static let DDNS_POINT_ON_SURFACE = nA3M_DETECTED_DIFFERENCE_TYPE_NAME.DDNS_POINT_ON_SURFACE
  /// promoted ENUMERATION case in ``nA3M_DETECTED_DIFFERENCE_TYPE_NAME``
  public static let DDNS_SEVERAL_EDGES = nA3M_DETECTED_DIFFERENCE_TYPE_NAME.DDNS_SEVERAL_EDGES
  /// promoted ENUMERATION case in ``nA3M_DETECTED_DIFFERENCE_TYPE_NAME``
  public static let DDNS_SEVERAL_FACES = nA3M_DETECTED_DIFFERENCE_TYPE_NAME.DDNS_SEVERAL_FACES
  /// promoted ENUMERATION case in ``nA3M_DETECTED_DIFFERENCE_TYPE_NAME``
  public static let DDNS_THREE_COUNT_MEASURE = nA3M_DETECTED_DIFFERENCE_TYPE_NAME.DDNS_THREE_COUNT_MEASURE
  /// promoted ENUMERATION case in ``nA3M_DETECTED_DIFFERENCE_TYPE_NAME``
  public static let DDNS_TWO_CARTESIAN_POINTS = nA3M_DETECTED_DIFFERENCE_TYPE_NAME.DDNS_TWO_CARTESIAN_POINTS
  /// promoted ENUMERATION case in ``nA3M_DETECTED_DIFFERENCE_TYPE_NAME``
  public static let DDNS_TWO_COUNT_MEASURE = nA3M_DETECTED_DIFFERENCE_TYPE_NAME.DDNS_TWO_COUNT_MEASURE
  /// promoted ENUMERATION case in ``nA3M_DETECTED_DIFFERENCE_TYPE_NAME``
  public static let DDNS_VOLUME_MEASURE = nA3M_DETECTED_DIFFERENCE_TYPE_NAME.DDNS_VOLUME_MEASURE
}


//MARK: - ENUMERATION TYPE HIERARCHY
public protocol AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__nA3M_DETECTED_DIFFERENCE_TYPE_NAME__type: 
  SDAIEnumerationType {}

public protocol AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__nA3M_DETECTED_DIFFERENCE_TYPE_NAME__subtype: 
  AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__nA3M_DETECTED_DIFFERENCE_TYPE_NAME__type, SDAIDefinedType
where Supertype: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__nA3M_DETECTED_DIFFERENCE_TYPE_NAME__type
{}

