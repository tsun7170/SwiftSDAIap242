/* file: action_request_item.swift 	 generated: Sun Oct 31 15:32:10 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -TYPE DEFINITION in EXPRESS
/*
  TYPE action_request_item = SELECT
    ( action (*ENTITY*),
     action_method (*ENTITY*),
     action_property (*ENTITY*),
     action_relationship (*ENTITY*),
     alternate_product_relationship (*ENTITY*),
     assembly_component_usage_substitute (*ENTITY*),
     configuration_design (*ENTITY*),
     configuration_effectivity (*ENTITY*),
     configuration_item (*ENTITY*),
     configured_effectivity_assignment (*ENTITY*),
     contract (*ENTITY*),
     document_file (*ENTITY*),
     draughting_model (*ENTITY*),
     drawing_revision (*ENTITY*),
     executed_action (*ENTITY*),
     general_property (*ENTITY*),
     material_designation (*ENTITY*),
     mechanical_design_geometric_presentation_representation (*ENTITY*),
     organization (*ENTITY*),
     organizational_project (*ENTITY*),
     person (*ENTITY*),
     person_and_organization (*ENTITY*),
     presentation_area (*ENTITY*),
     product (*ENTITY*),
     product_concept (*ENTITY*),
     product_concept_feature (*ENTITY*),
     product_concept_feature_association (*ENTITY*),
     product_concept_feature_category (*ENTITY*),
     product_concept_feature_category_usage (*ENTITY*),
     product_definition (*ENTITY*),
     product_definition_formation (*ENTITY*),
     product_definition_formation_relationship (*ENTITY*),
     product_definition_relationship (*ENTITY*),
     product_definition_substitute (*ENTITY*),
     product_identification (*ENTITY*),
     property_definition (*ENTITY*),
     resource_property (*ENTITY*),
     shape_aspect (*ENTITY*),
     shape_representation (*ENTITY*),
     versioned_action_request (*ENTITY*) );
  END_TYPE; -- action_request_item (line:506 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES FOR SELECT
/*
  action (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  properties: SET [1 : ?] OF process_property_association
  ATTR:  directive: action_directive
  ATTR:  chosen_method: action_method
  ATTR:  identification: (AMBIGUOUS (CASE LEVEL))
  ATTR:  product_definitions: SET [1 : ?] OF process_product_association
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  action_method (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  purpose: text *** Multiple Select Case Sources ***
  ATTR:  consequence: text
  ATTR:  name: label *** Multiple Select Case Sources ***

  action_property (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  definition: characterized_action_definition (AMBIGUOUS (SELECT LEVEL))
  ATTR:  name: label *** Multiple Select Case Sources ***

  action_relationship (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  relating_action: action
  ATTR:  related_action: action
  ATTR:  name: label *** Multiple Select Case Sources ***

  alternate_product_relationship (*ENTITY*):
  ATTR:  basis: text
  ATTR:  base: product (AMBIGUOUS (SELECT LEVEL))
  ATTR:  alternate: product
  ATTR:  definition: text (AMBIGUOUS (SELECT LEVEL))
  ATTR:  name: label *** Multiple Select Case Sources ***

  assembly_component_usage_substitute (*ENTITY*):
  ATTR:  substitute: assembly_component_usage
  ATTR:  base: assembly_component_usage (AMBIGUOUS (SELECT LEVEL))
  ATTR:  definition: text (AMBIGUOUS (SELECT LEVEL))
  ATTR:  name: label *** Multiple Select Case Sources ***

  configuration_design (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  design: configuration_design_item
  ATTR:  configuration: configuration_item *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  configuration_effectivity (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  configuration: configuration_design *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***
  ATTR:  usage: product_definition_relationship

  configuration_item (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  purpose: label *** Multiple Select Case Sources ***
  ATTR:  item_concept_feature: SET [1 : ?] OF product_concept_feature_association
  ATTR:  item_concept: product_concept *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  configured_effectivity_assignment (*ENTITY*):
  ATTR:  role: object_role *** Multiple Select Case Sources ***
  ATTR:  items: SET [1 : ?] OF configured_effectivity_item (AMBIGUOUS (SELECT LEVEL))
  ATTR:  assigned_effectivity: effectivity

  contract (*ENTITY*):
  ATTR:  purpose: text *** Multiple Select Case Sources ***
  ATTR:  kind: contract_type *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  document_file (*ENTITY*):
  ATTR:  description: (AMBIGUOUS (CASE LEVEL))
  ATTR:  kind: document_type *** Multiple Select Case Sources ***
  ATTR:  representation_types: SET [0 : ?] OF document_representation_type
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  name: (AMBIGUOUS (CASE LEVEL))

  draughting_model (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  items: SET [1 : ?] OF draughting_model_item_select (AMBIGUOUS (SELECT LEVEL))
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  context_of_items: representation_context *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  drawing_revision (*ENTITY*):
  ATTR:  areas: SET [1 : ?] OF area_in_set
  ATTR:  intended_scale: text
  ATTR:  revision_identifier: identifier *** Multiple Select Case Sources ***
  ATTR:  drawing_identifier: drawing_definition

  executed_action (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  directive: action_directive
  ATTR:  chosen_method: action_method
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  general_property (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  material_designation (*ENTITY*):
  ATTR:  definitions: SET [1 : ?] OF characterized_definition
  ATTR:  name: label *** Multiple Select Case Sources ***

  mechanical_design_geometric_presentation_representation (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  items: SET [1 : ?] OF mechanical_design_geometric_presentation_representation_items
    (AMBIGUOUS (SELECT LEVEL))
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  context_of_items: representation_context *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  organization (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  organizational_project (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  responsible_organizations: SET [1 : ?] OF organization
  ATTR:  name: label *** Multiple Select Case Sources ***

  person (*ENTITY*):
  ATTR:  middle_names: LIST [1 : ?] OF label
  ATTR:  suffix_titles: LIST [1 : ?] OF label
  ATTR:  last_name: label
  ATTR:  first_name: label
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  prefix_titles: LIST [1 : ?] OF label

  person_and_organization (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  the_person: person
  ATTR:  the_organization: organization
  ATTR:  name: label *** Multiple Select Case Sources ***

  presentation_area (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  items: SET [1 : ?] OF representation_item (AMBIGUOUS (SELECT LEVEL))
  ATTR:  revision_identifier: identifier *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  context_of_items: geometric_representation_context *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  product (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  frame_of_reference: SET [1 : ?] OF product_context (AMBIGUOUS (SELECT LEVEL))
  ATTR:  name: label *** Multiple Select Case Sources ***

  product_concept (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  market_context: product_concept_context
  ATTR:  name: label *** Multiple Select Case Sources ***

  product_concept_feature (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  condition: concept_feature_relationship_with_condition
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  product_concept_feature_association (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  concept: product_concept
  ATTR:  feature: product_concept_feature
  ATTR:  name: label *** Multiple Select Case Sources ***

  product_concept_feature_category (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  product_concept_feature_category_usage (*ENTITY*):
  ATTR:  role: object_role *** Multiple Select Case Sources ***
  ATTR:  items: SET [1 : ?] OF category_usage_item (AMBIGUOUS (SELECT LEVEL))
  ATTR:  assigned_group: product_concept_feature_category *** Multiple Select Case Sources ***

  product_definition (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  defined_version: collection_version
  ATTR:  documentation_ids: SET [1 : ?] OF document
  ATTR:  relating_product_definition: linear_array_placement_group_component *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  frame_of_reference: product_definition_context (AMBIGUOUS (SELECT LEVEL))
  ATTR:  definition: assembly_component (AMBIGUOUS (SELECT LEVEL))
  ATTR:  related_product_definition: linear_array_placement_group_component *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***
  ATTR:  formation: product_definition_formation

  product_definition_formation (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  status: STRING
  ATTR:  of_collection: collection
  ATTR:  make_or_buy: source
  ATTR:  specification: SET [1 : ?] OF product_definition
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  of_product: product

  product_definition_formation_relationship (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  realized_product: product_definition_formation
  ATTR:  related_product_definition_formation: product_definition_formation
  ATTR:  product_design_version: product_definition_formation
  ATTR:  relating_product_definition_formation: product_definition_formation
  ATTR:  relating_version: collection_version
  ATTR:  relation_type: STRING
  ATTR:  planned_product: product_definition_formation
  ATTR:  successor: collection_version
  ATTR:  individual_product: product_definition_formation
  ATTR:  related_version: collection_version
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***
  ATTR:  predecessor: collection_version

  product_definition_relationship (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  leaf: product_definition_or_reference
  ATTR:  next_usage: next_assembly_usage_occurrence
  ATTR:  reference_designator: identifier
  ATTR:  constituent_amount: SET [1 : ?] OF characterized_product_composition_value
  ATTR:  upper_usage: assembly_component_usage
  ATTR:  ranking_rationale: text
  ATTR:  quantity: (AMBIGUOUS (CASE LEVEL))
  ATTR:  class: label
  ATTR:  items: SET [0 : ?] OF product_definition (AMBIGUOUS (SELECT LEVEL))
  ATTR:  of_shape: mated_part_relationship *** Multiple Select Case Sources ***
  ATTR:  ranking: INTEGER
  ATTR:  composition_basis: label
  ATTR:  determination_method: text
  ATTR:  root: product_definition
  ATTR:  relating_product_definition: product_definition_or_reference *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  product_definition_occurrence_id: identifier
  ATTR:  assigned_group: mated_part_relationship *** Multiple Select Case Sources ***
  ATTR:  location: LIST [1 : ?] OF UNIQUE next_assembly_usage_occurrence (AMBIGUOUS (SELECT LEVEL))
  ATTR:  definition: mated_part_relationship (AMBIGUOUS (SELECT LEVEL))
  ATTR:  related_product_definition: product_definition_or_reference *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  product_definition_substitute (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  context_relationship: product_definition_relationship
  ATTR:  substitute_definition: product_definition
  ATTR:  name: label *** Multiple Select Case Sources ***

  product_identification (*ENTITY*):
  ATTR:  description: (AMBIGUOUS (CASE LEVEL))
  ATTR:  purpose: label *** Multiple Select Case Sources ***
  ATTR:  item_concept: product_class *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  name: (AMBIGUOUS (CASE LEVEL))

  property_definition (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  items: SET [0 : ?] OF product_definition (AMBIGUOUS (SELECT LEVEL))
  ATTR:  of_shape: mated_part_relationship *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  representation_relation: kinematic_property_definition_representation
  ATTR:  assigned_group: mated_part_relationship *** Multiple Select Case Sources ***
  ATTR:  definition: characterized_definition (AMBIGUOUS (SELECT LEVEL))
  ATTR:  name: label *** Multiple Select Case Sources ***

  resource_property (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  resource: characterized_resource_definition
  ATTR:  name: label *** Multiple Select Case Sources ***

  shape_aspect (*ENTITY*):
  ATTR:  deriving_relationships: SET [1 : ?] OF shape_aspect_deriving_relationship
  ATTR:  product_definitional: LOGICAL
  ATTR:  owner: (AMBIGUOUS (CASE LEVEL))
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  form: tolerance_zone_form
  ATTR:  target_id: identifier
  ATTR:  component_shape_aspect: internal_or_reflected_shape_aspect
  ATTR:  parent: shape_aspect
  ATTR:  orientation: oriented_tolerance_zone_type
  ATTR:  items: (AMBIGUOUS (CASE LEVEL))
  ATTR:  of_shape: product_definition_shape *** Multiple Select Case Sources ***
  ATTR:  datum_reference: datum_system
  ATTR:  identification: identifier
  ATTR:  established_by_relationships: SET [1 : ?] OF shape_aspect_relationship
  ATTR:  constituents: LIST [1 : 3] OF UNIQUE datum_reference_compartment
  ATTR:  representation_associations: SET [0 : ?] OF property_definition_representation
  ATTR:  angle: plane_angle_measure_with_unit
  ATTR:  modified_components: (AMBIGUOUS (CASE LEVEL))
  ATTR:  modifiers: SET [1 : ?] OF datum_reference_modifier
  ATTR:  component_relationships: SET [2 : ?] OF shape_aspect_relationship
  ATTR:  base: datum_or_common_datum (AMBIGUOUS (SELECT LEVEL))
  ATTR:  base_common_datum_list: common_datum_list
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  feature_basis_relationship: SET [1 : ?] OF shape_aspect_relationship
  ATTR:  direction: directed_tolerance_zone_type
  ATTR:  related_shape_aspect: component_feature
  ATTR:  defining_tolerance: SET [1 : ?] OF tolerance_zone_target
  ATTR:  assigned_group: mated_part_relationship *** Multiple Select Case Sources ***
  ATTR:  location: multi_or_next_assembly_usage_occurrence (AMBIGUOUS (SELECT LEVEL))
  ATTR:  definition: (AMBIGUOUS (CASE LEVEL))
  ATTR:  name: label *** Multiple Select Case Sources ***
  ATTR:  basis_relationships: SET [1 : ?] OF shape_aspect_deriving_relationship
  ATTR:  relating_shape_aspect: component_feature
  ATTR:  offset: measure_with_unit
  ATTR:  target_basis_relationship: SET [1 : ?] OF shape_aspect_relationship

  shape_representation (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  items: SET [1 : ?] OF representation_item (AMBIGUOUS (SELECT LEVEL))
  ATTR:  tessellation_accuracy_parameters: SET [1 : ?] OF tessellation_accuracy_parameter_item
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  context_of_items: representation_context *** Multiple Select Case Sources ***
  ATTR:  neutral_sketch_semantics: curves_or_area
  ATTR:  name: label *** Multiple Select Case Sources ***

  versioned_action_request (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  purpose: text *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  version: label

*/

/** SELECT type
- EXPRESS:
```express
  TYPE action_request_item = SELECT
    ( action (*ENTITY*),
     action_method (*ENTITY*),
     action_property (*ENTITY*),
     action_relationship (*ENTITY*),
     alternate_product_relationship (*ENTITY*),
     assembly_component_usage_substitute (*ENTITY*),
     configuration_design (*ENTITY*),
     configuration_effectivity (*ENTITY*),
     configuration_item (*ENTITY*),
     configured_effectivity_assignment (*ENTITY*),
     contract (*ENTITY*),
     document_file (*ENTITY*),
     draughting_model (*ENTITY*),
     drawing_revision (*ENTITY*),
     executed_action (*ENTITY*),
     general_property (*ENTITY*),
     material_designation (*ENTITY*),
     mechanical_design_geometric_presentation_representation (*ENTITY*),
     organization (*ENTITY*),
     organizational_project (*ENTITY*),
     person (*ENTITY*),
     person_and_organization (*ENTITY*),
     presentation_area (*ENTITY*),
     product (*ENTITY*),
     product_concept (*ENTITY*),
     product_concept_feature (*ENTITY*),
     product_concept_feature_association (*ENTITY*),
     product_concept_feature_category (*ENTITY*),
     product_concept_feature_category_usage (*ENTITY*),
     product_definition (*ENTITY*),
     product_definition_formation (*ENTITY*),
     product_definition_formation_relationship (*ENTITY*),
     product_definition_relationship (*ENTITY*),
     product_definition_substitute (*ENTITY*),
     product_identification (*ENTITY*),
     property_definition (*ENTITY*),
     resource_property (*ENTITY*),
     shape_aspect (*ENTITY*),
     shape_representation (*ENTITY*),
     versioned_action_request (*ENTITY*) );
  END_TYPE; -- action_request_item (line:506 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public enum sACTION_REQUEST_ITEM : SDAIValue, AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sACTION_REQUEST_ITEM__type {

    /// SELECT case ``eACTION`` (ENTITY) in ``sACTION_REQUEST_ITEM``
    case _ACTION(eACTION)	// (ENTITY)

    /// SELECT case ``eACTION_METHOD`` (ENTITY) in ``sACTION_REQUEST_ITEM``
    case _ACTION_METHOD(eACTION_METHOD)	// (ENTITY)

    /// SELECT case ``eACTION_PROPERTY`` (ENTITY) in ``sACTION_REQUEST_ITEM``
    case _ACTION_PROPERTY(eACTION_PROPERTY)	// (ENTITY)

    /// SELECT case ``eACTION_RELATIONSHIP`` (ENTITY) in ``sACTION_REQUEST_ITEM``
    case _ACTION_RELATIONSHIP(eACTION_RELATIONSHIP)	// (ENTITY)

    /// SELECT case ``eALTERNATE_PRODUCT_RELATIONSHIP`` (ENTITY) in ``sACTION_REQUEST_ITEM``
    case _ALTERNATE_PRODUCT_RELATIONSHIP(eALTERNATE_PRODUCT_RELATIONSHIP)	// (ENTITY)

    /// SELECT case ``eASSEMBLY_COMPONENT_USAGE_SUBSTITUTE`` (ENTITY) in ``sACTION_REQUEST_ITEM``
    case _ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(eASSEMBLY_COMPONENT_USAGE_SUBSTITUTE)	// (ENTITY)

    /// SELECT case ``eCONFIGURATION_DESIGN`` (ENTITY) in ``sACTION_REQUEST_ITEM``
    case _CONFIGURATION_DESIGN(eCONFIGURATION_DESIGN)	// (ENTITY)

    /// SELECT case ``eCONFIGURATION_EFFECTIVITY`` (ENTITY) in ``sACTION_REQUEST_ITEM``
    case _CONFIGURATION_EFFECTIVITY(eCONFIGURATION_EFFECTIVITY)	// (ENTITY)

    /// SELECT case ``eCONFIGURATION_ITEM`` (ENTITY) in ``sACTION_REQUEST_ITEM``
    case _CONFIGURATION_ITEM(eCONFIGURATION_ITEM)	// (ENTITY)

    /// SELECT case ``eCONFIGURED_EFFECTIVITY_ASSIGNMENT`` (ENTITY) in ``sACTION_REQUEST_ITEM``
    case _CONFIGURED_EFFECTIVITY_ASSIGNMENT(eCONFIGURED_EFFECTIVITY_ASSIGNMENT)	// (ENTITY)

    /// SELECT case ``eCONTRACT`` (ENTITY) in ``sACTION_REQUEST_ITEM``
    case _CONTRACT(eCONTRACT)	// (ENTITY)

    /// SELECT case ``eDOCUMENT_FILE`` (ENTITY) in ``sACTION_REQUEST_ITEM``
    case _DOCUMENT_FILE(eDOCUMENT_FILE)	// (ENTITY)

    /// SELECT case ``eDRAUGHTING_MODEL`` (ENTITY) in ``sACTION_REQUEST_ITEM``
    case _DRAUGHTING_MODEL(eDRAUGHTING_MODEL)	// (ENTITY)

    /// SELECT case ``eDRAWING_REVISION`` (ENTITY) in ``sACTION_REQUEST_ITEM``
    case _DRAWING_REVISION(eDRAWING_REVISION)	// (ENTITY)

    /// SELECT case ``eEXECUTED_ACTION`` (ENTITY) in ``sACTION_REQUEST_ITEM``
    case _EXECUTED_ACTION(eEXECUTED_ACTION)	// (ENTITY)

    /// SELECT case ``eGENERAL_PROPERTY`` (ENTITY) in ``sACTION_REQUEST_ITEM``
    case _GENERAL_PROPERTY(eGENERAL_PROPERTY)	// (ENTITY)

    /// SELECT case ``eMATERIAL_DESIGNATION`` (ENTITY) in ``sACTION_REQUEST_ITEM``
    case _MATERIAL_DESIGNATION(eMATERIAL_DESIGNATION)	// (ENTITY)

    /// SELECT case ``eMECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION`` (ENTITY) in ``sACTION_REQUEST_ITEM``
    case _MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(
      eMECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION)	// (ENTITY)

    /// SELECT case ``eORGANIZATION`` (ENTITY) in ``sACTION_REQUEST_ITEM``
    case _ORGANIZATION(eORGANIZATION)	// (ENTITY)

    /// SELECT case ``eORGANIZATIONAL_PROJECT`` (ENTITY) in ``sACTION_REQUEST_ITEM``
    case _ORGANIZATIONAL_PROJECT(eORGANIZATIONAL_PROJECT)	// (ENTITY)

    /// SELECT case ``ePERSON`` (ENTITY) in ``sACTION_REQUEST_ITEM``
    case _PERSON(ePERSON)	// (ENTITY)

    /// SELECT case ``ePERSON_AND_ORGANIZATION`` (ENTITY) in ``sACTION_REQUEST_ITEM``
    case _PERSON_AND_ORGANIZATION(ePERSON_AND_ORGANIZATION)	// (ENTITY)

    /// SELECT case ``ePRESENTATION_AREA`` (ENTITY) in ``sACTION_REQUEST_ITEM``
    case _PRESENTATION_AREA(ePRESENTATION_AREA)	// (ENTITY)

    /// SELECT case ``ePRODUCT`` (ENTITY) in ``sACTION_REQUEST_ITEM``
    case _PRODUCT(ePRODUCT)	// (ENTITY)

    /// SELECT case ``ePRODUCT_CONCEPT`` (ENTITY) in ``sACTION_REQUEST_ITEM``
    case _PRODUCT_CONCEPT(ePRODUCT_CONCEPT)	// (ENTITY)

    /// SELECT case ``ePRODUCT_CONCEPT_FEATURE`` (ENTITY) in ``sACTION_REQUEST_ITEM``
    case _PRODUCT_CONCEPT_FEATURE(ePRODUCT_CONCEPT_FEATURE)	// (ENTITY)

    /// SELECT case ``ePRODUCT_CONCEPT_FEATURE_ASSOCIATION`` (ENTITY) in ``sACTION_REQUEST_ITEM``
    case _PRODUCT_CONCEPT_FEATURE_ASSOCIATION(ePRODUCT_CONCEPT_FEATURE_ASSOCIATION)	// (ENTITY)

    /// SELECT case ``ePRODUCT_CONCEPT_FEATURE_CATEGORY`` (ENTITY) in ``sACTION_REQUEST_ITEM``
    case _PRODUCT_CONCEPT_FEATURE_CATEGORY(ePRODUCT_CONCEPT_FEATURE_CATEGORY)	// (ENTITY)

    /// SELECT case ``ePRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE`` (ENTITY) in ``sACTION_REQUEST_ITEM``
    case _PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE(ePRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE)	// (ENTITY)

    /// SELECT case ``ePRODUCT_DEFINITION`` (ENTITY) in ``sACTION_REQUEST_ITEM``
    case _PRODUCT_DEFINITION(ePRODUCT_DEFINITION)	// (ENTITY)

    /// SELECT case ``ePRODUCT_DEFINITION_FORMATION`` (ENTITY) in ``sACTION_REQUEST_ITEM``
    case _PRODUCT_DEFINITION_FORMATION(ePRODUCT_DEFINITION_FORMATION)	// (ENTITY)

    /// SELECT case ``ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP`` (ENTITY) in ``sACTION_REQUEST_ITEM``
    case _PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP)	// (ENTITY)

    /// SELECT case ``ePRODUCT_DEFINITION_RELATIONSHIP`` (ENTITY) in ``sACTION_REQUEST_ITEM``
    case _PRODUCT_DEFINITION_RELATIONSHIP(ePRODUCT_DEFINITION_RELATIONSHIP)	// (ENTITY)

    /// SELECT case ``ePRODUCT_DEFINITION_SUBSTITUTE`` (ENTITY) in ``sACTION_REQUEST_ITEM``
    case _PRODUCT_DEFINITION_SUBSTITUTE(ePRODUCT_DEFINITION_SUBSTITUTE)	// (ENTITY)

    /// SELECT case ``ePRODUCT_IDENTIFICATION`` (ENTITY) in ``sACTION_REQUEST_ITEM``
    case _PRODUCT_IDENTIFICATION(ePRODUCT_IDENTIFICATION)	// (ENTITY)

    /// SELECT case ``ePROPERTY_DEFINITION`` (ENTITY) in ``sACTION_REQUEST_ITEM``
    case _PROPERTY_DEFINITION(ePROPERTY_DEFINITION)	// (ENTITY)

    /// SELECT case ``eRESOURCE_PROPERTY`` (ENTITY) in ``sACTION_REQUEST_ITEM``
    case _RESOURCE_PROPERTY(eRESOURCE_PROPERTY)	// (ENTITY)

    /// SELECT case ``eSHAPE_ASPECT`` (ENTITY) in ``sACTION_REQUEST_ITEM``
    case _SHAPE_ASPECT(eSHAPE_ASPECT)	// (ENTITY)

    /// SELECT case ``eSHAPE_REPRESENTATION`` (ENTITY) in ``sACTION_REQUEST_ITEM``
    case _SHAPE_REPRESENTATION(eSHAPE_REPRESENTATION)	// (ENTITY)

    /// SELECT case ``eVERSIONED_ACTION_REQUEST`` (ENTITY) in ``sACTION_REQUEST_ITEM``
    case _VERSIONED_ACTION_REQUEST(eVERSIONED_ACTION_REQUEST)	// (ENTITY)

    //MARK: - CONSTRUCTORS
    public init(fundamental: FundamentalType) { self = fundamental }

    public init?<T: SDAIUnderlyingType>(possiblyFrom underlyingType: T?){
      return nil
    }

    public init?(possiblyFrom complex: SDAI.ComplexEntity?) {
      guard let complex = complex else { return nil }

      if let base = complex.entityReference(eACTION.self) {self = ._ACTION(base) }
      else if let base = complex.entityReference(eACTION_METHOD.self) {self = ._ACTION_METHOD(base) }
      else if let base = complex.entityReference(eACTION_PROPERTY.self) {self = ._ACTION_PROPERTY(base) }
      else if let base = complex.entityReference(eACTION_RELATIONSHIP.self) {self = ._ACTION_RELATIONSHIP(base) }
      else if let base = complex.entityReference(eALTERNATE_PRODUCT_RELATIONSHIP.self) {self = ._ALTERNATE_PRODUCT_RELATIONSHIP(base) }
      else if let base = complex.entityReference(eASSEMBLY_COMPONENT_USAGE_SUBSTITUTE.self) {self = ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(base) }
      else if let base = complex.entityReference(eCONFIGURATION_DESIGN.self) {self = ._CONFIGURATION_DESIGN(base) }
      else if let base = complex.entityReference(eCONFIGURATION_EFFECTIVITY.self) {self = ._CONFIGURATION_EFFECTIVITY(base) }
      else if let base = complex.entityReference(eCONFIGURATION_ITEM.self) {self = ._CONFIGURATION_ITEM(base) }
      else if let base = complex.entityReference(eCONFIGURED_EFFECTIVITY_ASSIGNMENT.self) {self = ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(base) }
      else if let base = complex.entityReference(eCONTRACT.self) {self = ._CONTRACT(base) }
      else if let base = complex.entityReference(eDOCUMENT_FILE.self) {self = ._DOCUMENT_FILE(base) }
      else if let base = complex.entityReference(eDRAUGHTING_MODEL.self) {self = ._DRAUGHTING_MODEL(base) }
      else if let base = complex.entityReference(eDRAWING_REVISION.self) {self = ._DRAWING_REVISION(base) }
      else if let base = complex.entityReference(eEXECUTED_ACTION.self) {self = ._EXECUTED_ACTION(base) }
      else if let base = complex.entityReference(eGENERAL_PROPERTY.self) {self = ._GENERAL_PROPERTY(base) }
      else if let base = complex.entityReference(eMATERIAL_DESIGNATION.self) {self = ._MATERIAL_DESIGNATION(base) }
      else if let base = complex.entityReference(eMECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION.self) {self = ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(base) }
      else if let base = complex.entityReference(eORGANIZATION.self) {self = ._ORGANIZATION(base) }
      else if let base = complex.entityReference(eORGANIZATIONAL_PROJECT.self) {self = ._ORGANIZATIONAL_PROJECT(base) }
      else if let base = complex.entityReference(ePERSON.self) {self = ._PERSON(base) }
      else if let base = complex.entityReference(ePERSON_AND_ORGANIZATION.self) {self = ._PERSON_AND_ORGANIZATION(base) }
      else if let base = complex.entityReference(ePRESENTATION_AREA.self) {self = ._PRESENTATION_AREA(base) }
      else if let base = complex.entityReference(ePRODUCT.self) {self = ._PRODUCT(base) }
      else if let base = complex.entityReference(ePRODUCT_CONCEPT.self) {self = ._PRODUCT_CONCEPT(base) }
      else if let base = complex.entityReference(ePRODUCT_CONCEPT_FEATURE.self) {self = ._PRODUCT_CONCEPT_FEATURE(base) }
      else if let base = complex.entityReference(ePRODUCT_CONCEPT_FEATURE_ASSOCIATION.self) {self = ._PRODUCT_CONCEPT_FEATURE_ASSOCIATION(base) }
      else if let base = complex.entityReference(ePRODUCT_CONCEPT_FEATURE_CATEGORY.self) {self = ._PRODUCT_CONCEPT_FEATURE_CATEGORY(base) }
      else if let base = complex.entityReference(ePRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE.self) {self = ._PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE(base) }
      else if let base = complex.entityReference(ePRODUCT_DEFINITION.self) {self = ._PRODUCT_DEFINITION(base) }
      else if let base = complex.entityReference(ePRODUCT_DEFINITION_FORMATION.self) {self = ._PRODUCT_DEFINITION_FORMATION(base) }
      else if let base = complex.entityReference(ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP.self) {self = ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(base) }
      else if let base = complex.entityReference(ePRODUCT_DEFINITION_RELATIONSHIP.self) {self = ._PRODUCT_DEFINITION_RELATIONSHIP(base) }
      else if let base = complex.entityReference(ePRODUCT_DEFINITION_SUBSTITUTE.self) {self = ._PRODUCT_DEFINITION_SUBSTITUTE(base) }
      else if let base = complex.entityReference(ePRODUCT_IDENTIFICATION.self) {self = ._PRODUCT_IDENTIFICATION(base) }
      else if let base = complex.entityReference(ePROPERTY_DEFINITION.self) {self = ._PROPERTY_DEFINITION(base) }
      else if let base = complex.entityReference(eRESOURCE_PROPERTY.self) {self = ._RESOURCE_PROPERTY(base) }
      else if let base = complex.entityReference(eSHAPE_ASPECT.self) {self = ._SHAPE_ASPECT(base) }
      else if let base = complex.entityReference(eSHAPE_REPRESENTATION.self) {self = ._SHAPE_REPRESENTATION(base) }
      else if let base = complex.entityReference(eVERSIONED_ACTION_REQUEST.self) {self = ._VERSIONED_ACTION_REQUEST(base) }
      else { return nil }
    }

    public init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let select = generic else { return nil }

      if let fundamental = select as? Self {
        self.init(fundamental: fundamental)
      }
      else if let base = eACTION.convert(fromGeneric: select) {
        self = ._ACTION(base)
      }
      else if let base = eACTION_METHOD.convert(fromGeneric: select) {
        self = ._ACTION_METHOD(base)
      }
      else if let base = eACTION_PROPERTY.convert(fromGeneric: select) {
        self = ._ACTION_PROPERTY(base)
      }
      else if let base = eACTION_RELATIONSHIP.convert(fromGeneric: select) {
        self = ._ACTION_RELATIONSHIP(base)
      }
      else if let base = eALTERNATE_PRODUCT_RELATIONSHIP.convert(fromGeneric: select) {
        self = ._ALTERNATE_PRODUCT_RELATIONSHIP(base)
      }
      else if let base = eASSEMBLY_COMPONENT_USAGE_SUBSTITUTE.convert(fromGeneric: select) {
        self = ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(base)
      }
      else if let base = eCONFIGURATION_DESIGN.convert(fromGeneric: select) {
        self = ._CONFIGURATION_DESIGN(base)
      }
      else if let base = eCONFIGURATION_EFFECTIVITY.convert(fromGeneric: select) {
        self = ._CONFIGURATION_EFFECTIVITY(base)
      }
      else if let base = eCONFIGURATION_ITEM.convert(fromGeneric: select) {
        self = ._CONFIGURATION_ITEM(base)
      }
      else if let base = eCONFIGURED_EFFECTIVITY_ASSIGNMENT.convert(fromGeneric: select) {
        self = ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(base)
      }
      else if let base = eCONTRACT.convert(fromGeneric: select) {
        self = ._CONTRACT(base)
      }
      else if let base = eDOCUMENT_FILE.convert(fromGeneric: select) {
        self = ._DOCUMENT_FILE(base)
      }
      else if let base = eDRAUGHTING_MODEL.convert(fromGeneric: select) {
        self = ._DRAUGHTING_MODEL(base)
      }
      else if let base = eDRAWING_REVISION.convert(fromGeneric: select) {
        self = ._DRAWING_REVISION(base)
      }
      else if let base = eEXECUTED_ACTION.convert(fromGeneric: select) {
        self = ._EXECUTED_ACTION(base)
      }
      else if let base = eGENERAL_PROPERTY.convert(fromGeneric: select) {
        self = ._GENERAL_PROPERTY(base)
      }
      else if let base = eMATERIAL_DESIGNATION.convert(fromGeneric: select) {
        self = ._MATERIAL_DESIGNATION(base)
      }
      else if let base = eMECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION.convert(fromGeneric: select) {
        self = ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(base)
      }
      else if let base = eORGANIZATION.convert(fromGeneric: select) {
        self = ._ORGANIZATION(base)
      }
      else if let base = eORGANIZATIONAL_PROJECT.convert(fromGeneric: select) {
        self = ._ORGANIZATIONAL_PROJECT(base)
      }
      else if let base = ePERSON.convert(fromGeneric: select) {
        self = ._PERSON(base)
      }
      else if let base = ePERSON_AND_ORGANIZATION.convert(fromGeneric: select) {
        self = ._PERSON_AND_ORGANIZATION(base)
      }
      else if let base = ePRESENTATION_AREA.convert(fromGeneric: select) {
        self = ._PRESENTATION_AREA(base)
      }
      else if let base = ePRODUCT.convert(fromGeneric: select) {
        self = ._PRODUCT(base)
      }
      else if let base = ePRODUCT_CONCEPT.convert(fromGeneric: select) {
        self = ._PRODUCT_CONCEPT(base)
      }
      else if let base = ePRODUCT_CONCEPT_FEATURE.convert(fromGeneric: select) {
        self = ._PRODUCT_CONCEPT_FEATURE(base)
      }
      else if let base = ePRODUCT_CONCEPT_FEATURE_ASSOCIATION.convert(fromGeneric: select) {
        self = ._PRODUCT_CONCEPT_FEATURE_ASSOCIATION(base)
      }
      else if let base = ePRODUCT_CONCEPT_FEATURE_CATEGORY.convert(fromGeneric: select) {
        self = ._PRODUCT_CONCEPT_FEATURE_CATEGORY(base)
      }
      else if let base = ePRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE.convert(fromGeneric: select) {
        self = ._PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE(base)
      }
      else if let base = ePRODUCT_DEFINITION.convert(fromGeneric: select) {
        self = ._PRODUCT_DEFINITION(base)
      }
      else if let base = ePRODUCT_DEFINITION_FORMATION.convert(fromGeneric: select) {
        self = ._PRODUCT_DEFINITION_FORMATION(base)
      }
      else if let base = ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP.convert(fromGeneric: select) {
        self = ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(base)
      }
      else if let base = ePRODUCT_DEFINITION_RELATIONSHIP.convert(fromGeneric: select) {
        self = ._PRODUCT_DEFINITION_RELATIONSHIP(base)
      }
      else if let base = ePRODUCT_DEFINITION_SUBSTITUTE.convert(fromGeneric: select) {
        self = ._PRODUCT_DEFINITION_SUBSTITUTE(base)
      }
      else if let base = ePRODUCT_IDENTIFICATION.convert(fromGeneric: select) {
        self = ._PRODUCT_IDENTIFICATION(base)
      }
      else if let base = ePROPERTY_DEFINITION.convert(fromGeneric: select) {
        self = ._PROPERTY_DEFINITION(base)
      }
      else if let base = eRESOURCE_PROPERTY.convert(fromGeneric: select) {
        self = ._RESOURCE_PROPERTY(base)
      }
      else if let base = eSHAPE_ASPECT.convert(fromGeneric: select) {
        self = ._SHAPE_ASPECT(base)
      }
      else if let base = eSHAPE_REPRESENTATION.convert(fromGeneric: select) {
        self = ._SHAPE_REPRESENTATION(base)
      }
      else if let base = eVERSIONED_ACTION_REQUEST.convert(fromGeneric: select) {
        self = ._VERSIONED_ACTION_REQUEST(base)
      }
      else { return nil }
    }

    // InitializableByP21Parameter
    public static var bareTypeName: String = "ACTION_REQUEST_ITEM"

    public init?(p21typedParam: P21Decode.ExchangeStructure.TypedParameter, from exchangeStructure: P21Decode.ExchangeStructure) {
      guard let keyword = p21typedParam.keyword.asStandardKeyword else { exchangeStructure.error = "unexpected p21parameter(\(p21typedParam)) while resolving \(Self.bareTypeName) select value"; return nil }

      switch(keyword) {
      default:
        exchangeStructure.error = "unexpected p21parameter(\(p21typedParam)) while resolving \(Self.bareTypeName) select value"
        return nil
      }
    }

    public init?(p21untypedParam: P21Decode.ExchangeStructure.UntypedParameter, from exchangeStructure: P21Decode.ExchangeStructure) {
      switch p21untypedParam {
      case .rhsOccurenceName(let rhsname):
        switch rhsname {
        case .constantEntityName(let name):
          guard let entity = exchangeStructure.resolve(constantEntityName: name) else {exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) instance"); return nil }
          self.init(possiblyFrom: entity.complexEntity)

        case .entityInstanceName(let name):
          guard let complex = exchangeStructure.resolve(entityInstanceName: name) else {exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) instance"); return nil }
          self.init(possiblyFrom: complex)

        default:
          exchangeStructure.error = "unexpected p21parameter(\(p21untypedParam)) while resolving \(Self.bareTypeName) select instance"
          return nil
        }

      default:
        exchangeStructure.error = "unexpected p21parameter(\(p21untypedParam)) while resolving \(Self.bareTypeName) select instance"
        return nil
      }
    }

    public init?(p21omittedParamfrom exchangeStructure: P21Decode.ExchangeStructure) {
      return nil
    }


    //MARK: - ENTITY UNDERLYING TYPE REFERENCES
    public var super_ePRODUCT_IDENTIFICATION: ePRODUCT_IDENTIFICATION? {
      switch self {
      case ._PRODUCT_IDENTIFICATION(let entity): return entity
      default: return nil
      }
    }

    public var super_eASSEMBLY_COMPONENT_USAGE_SUBSTITUTE: eASSEMBLY_COMPONENT_USAGE_SUBSTITUTE? {
      switch self {
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let entity): return entity
      default: return nil
      }
    }

    public var super_eMATERIAL_DESIGNATION: eMATERIAL_DESIGNATION? {
      switch self {
      case ._MATERIAL_DESIGNATION(let entity): return entity
      default: return nil
      }
    }

    public var super_eREPRESENTATION: eREPRESENTATION? {
      switch self {
      case ._DRAUGHTING_MODEL(let entity): return entity.super_eREPRESENTATION
      case ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(let entity): return entity
        .super_eREPRESENTATION
      case ._PRESENTATION_AREA(let entity): return entity.super_eREPRESENTATION
      case ._SHAPE_REPRESENTATION(let entity): return entity.super_eREPRESENTATION
      default: return nil
      }
    }

    public var super_eEFFECTIVITY_ASSIGNMENT: eEFFECTIVITY_ASSIGNMENT? {
      switch self {
      case ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(let entity): return entity.super_eEFFECTIVITY_ASSIGNMENT
      default: return nil
      }
    }

    public var super_ePERSON: ePERSON? {
      switch self {
      case ._PERSON(let entity): return entity
      default: return nil
      }
    }

    public var super_eACTION_RELATIONSHIP: eACTION_RELATIONSHIP? {
      switch self {
      case ._ACTION_RELATIONSHIP(let entity): return entity
      default: return nil
      }
    }

    public var super_ePROPERTY_DEFINITION: ePROPERTY_DEFINITION? {
      switch self {
      case ._PROPERTY_DEFINITION(let entity): return entity
      default: return nil
      }
    }

    public var super_ePRODUCT_CONCEPT: ePRODUCT_CONCEPT? {
      switch self {
      case ._PRODUCT_CONCEPT(let entity): return entity
      default: return nil
      }
    }

    public var super_eGROUP: eGROUP? {
      switch self {
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY(let entity): return entity.super_eGROUP
      default: return nil
      }
    }

    public var super_eCONFIGURATION_ITEM: eCONFIGURATION_ITEM? {
      switch self {
      case ._CONFIGURATION_ITEM(let entity): return entity
      case ._PRODUCT_IDENTIFICATION(let entity): return entity.super_eCONFIGURATION_ITEM
      default: return nil
      }
    }

    public var super_ePRESENTATION_REPRESENTATION: ePRESENTATION_REPRESENTATION? {
      switch self {
      case ._PRESENTATION_AREA(let entity): return entity.super_ePRESENTATION_REPRESENTATION
      default: return nil
      }
    }

    public var super_eSHAPE_REPRESENTATION: eSHAPE_REPRESENTATION? {
      switch self {
      case ._SHAPE_REPRESENTATION(let entity): return entity
      default: return nil
      }
    }

    public var super_eACTION_METHOD: eACTION_METHOD? {
      switch self {
      case ._ACTION_METHOD(let entity): return entity
      default: return nil
      }
    }

    public var super_eGROUP_ASSIGNMENT: eGROUP_ASSIGNMENT? {
      switch self {
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE(let entity): return entity.super_eGROUP_ASSIGNMENT
      default: return nil
      }
    }

    public var super_eCONFIGURATION_DESIGN: eCONFIGURATION_DESIGN? {
      switch self {
      case ._CONFIGURATION_DESIGN(let entity): return entity
      default: return nil
      }
    }

    public var super_eEXECUTED_ACTION: eEXECUTED_ACTION? {
      switch self {
      case ._EXECUTED_ACTION(let entity): return entity
      default: return nil
      }
    }

    public var super_ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP: 
      ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP? {
      switch self {
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let entity): return entity
      default: return nil
      }
    }

    public var super_ePRODUCT_CONCEPT_FEATURE: ePRODUCT_CONCEPT_FEATURE? {
      switch self {
      case ._PRODUCT_CONCEPT_FEATURE(let entity): return entity
      default: return nil
      }
    }

    public var super_eDRAUGHTING_MODEL: eDRAUGHTING_MODEL? {
      switch self {
      case ._DRAUGHTING_MODEL(let entity): return entity
      default: return nil
      }
    }

    public var super_eACTION_PROPERTY: eACTION_PROPERTY? {
      switch self {
      case ._ACTION_PROPERTY(let entity): return entity
      default: return nil
      }
    }

    public var super_eORGANIZATION: eORGANIZATION? {
      switch self {
      case ._ORGANIZATION(let entity): return entity
      default: return nil
      }
    }

    public var super_eGENERAL_PROPERTY: eGENERAL_PROPERTY? {
      switch self {
      case ._GENERAL_PROPERTY(let entity): return entity
      default: return nil
      }
    }

    public var super_ePRODUCT_DEFINITION_SUBSTITUTE: ePRODUCT_DEFINITION_SUBSTITUTE? {
      switch self {
      case ._PRODUCT_DEFINITION_SUBSTITUTE(let entity): return entity
      default: return nil
      }
    }

    public var super_eRESOURCE_PROPERTY: eRESOURCE_PROPERTY? {
      switch self {
      case ._RESOURCE_PROPERTY(let entity): return entity
      default: return nil
      }
    }

    public var super_ePRODUCT_DEFINITION: ePRODUCT_DEFINITION? {
      switch self {
      case ._PRODUCT_DEFINITION(let entity): return entity
      default: return nil
      }
    }

    public var super_ePRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE: ePRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE? {
      switch self {
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE(let entity): return entity
      default: return nil
      }
    }

    public var super_eCONTRACT: eCONTRACT? {
      switch self {
      case ._CONTRACT(let entity): return entity
      default: return nil
      }
    }

    public var super_eDOCUMENT: eDOCUMENT? {
      switch self {
      case ._DOCUMENT_FILE(let entity): return entity.super_eDOCUMENT
      default: return nil
      }
    }

    public var super_eCONFIGURATION_EFFECTIVITY: eCONFIGURATION_EFFECTIVITY? {
      switch self {
      case ._CONFIGURATION_EFFECTIVITY(let entity): return entity
      default: return nil
      }
    }

    public var super_ePRODUCT: ePRODUCT? {
      switch self {
      case ._PRODUCT(let entity): return entity
      default: return nil
      }
    }

    public var super_eVERSIONED_ACTION_REQUEST: eVERSIONED_ACTION_REQUEST? {
      switch self {
      case ._VERSIONED_ACTION_REQUEST(let entity): return entity
      default: return nil
      }
    }

    public var super_eORGANIZATIONAL_PROJECT: eORGANIZATIONAL_PROJECT? {
      switch self {
      case ._ORGANIZATIONAL_PROJECT(let entity): return entity
      default: return nil
      }
    }

    public var super_eDRAWING_REVISION: eDRAWING_REVISION? {
      switch self {
      case ._DRAWING_REVISION(let entity): return entity
      default: return nil
      }
    }

    public var super_eEFFECTIVITY: eEFFECTIVITY? {
      switch self {
      case ._CONFIGURATION_EFFECTIVITY(let entity): return entity.super_eEFFECTIVITY
      default: return nil
      }
    }

    public var super_ePRODUCT_DEFINITION_FORMATION: ePRODUCT_DEFINITION_FORMATION? {
      switch self {
      case ._PRODUCT_DEFINITION_FORMATION(let entity): return entity
      default: return nil
      }
    }

    public var super_ePRODUCT_DEFINITION_EFFECTIVITY: ePRODUCT_DEFINITION_EFFECTIVITY? {
      switch self {
      case ._CONFIGURATION_EFFECTIVITY(let entity): return entity.super_ePRODUCT_DEFINITION_EFFECTIVITY
      default: return nil
      }
    }

    public var super_ePRESENTATION_SET: ePRESENTATION_SET? {
      switch self {
      case ._DRAWING_REVISION(let entity): return entity.super_ePRESENTATION_SET
      default: return nil
      }
    }

    public var super_eSHAPE_ASPECT: eSHAPE_ASPECT? {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity
      default: return nil
      }
    }

    public var super_ePRODUCT_CONCEPT_FEATURE_CATEGORY: ePRODUCT_CONCEPT_FEATURE_CATEGORY? {
      switch self {
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY(let entity): return entity
      default: return nil
      }
    }

    public var super_eCONFIGURED_EFFECTIVITY_ASSIGNMENT: eCONFIGURED_EFFECTIVITY_ASSIGNMENT? {
      switch self {
      case ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(let entity): return entity
      default: return nil
      }
    }

    public var super_ePERSON_AND_ORGANIZATION: ePERSON_AND_ORGANIZATION? {
      switch self {
      case ._PERSON_AND_ORGANIZATION(let entity): return entity
      default: return nil
      }
    }

    public var super_eALTERNATE_PRODUCT_RELATIONSHIP: eALTERNATE_PRODUCT_RELATIONSHIP? {
      switch self {
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let entity): return entity
      default: return nil
      }
    }

    public var super_eDOCUMENT_FILE: eDOCUMENT_FILE? {
      switch self {
      case ._DOCUMENT_FILE(let entity): return entity
      default: return nil
      }
    }

    public var super_ePRODUCT_DEFINITION_RELATIONSHIP: ePRODUCT_DEFINITION_RELATIONSHIP? {
      switch self {
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity
      default: return nil
      }
    }

    public var super_eMECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION: 
      eMECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION? {
      switch self {
      case ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(let entity): return entity
      default: return nil
      }
    }

    public var super_ePRESENTATION_AREA: ePRESENTATION_AREA? {
      switch self {
      case ._PRESENTATION_AREA(let entity): return entity
      default: return nil
      }
    }

    public var super_ePRODUCT_CONCEPT_FEATURE_ASSOCIATION: ePRODUCT_CONCEPT_FEATURE_ASSOCIATION? {
      switch self {
      case ._PRODUCT_CONCEPT_FEATURE_ASSOCIATION(let entity): return entity
      default: return nil
      }
    }

    public var super_eACTION: eACTION? {
      switch self {
      case ._ACTION(let entity): return entity
      case ._EXECUTED_ACTION(let entity): return entity.super_eACTION
      default: return nil
      }
    }

    public var super_eCHARACTERIZED_OBJECT: eCHARACTERIZED_OBJECT? {
      switch self {
      case ._DOCUMENT_FILE(let entity): return entity.super_eCHARACTERIZED_OBJECT
      case ._PRODUCT_IDENTIFICATION(let entity): return entity.super_eCHARACTERIZED_OBJECT
      default: return nil
      }
    }


    //MARK: - ENTITY ATTRIBUTE REFERENCES
    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var DERIVING_RELATIONSHIPS: (SDAI.SET<eSHAPE_ASPECT_DERIVING_RELATIONSHIP>/*[1:nil]*/ )?  {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity.DERIVING_RELATIONSHIPS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var PRODUCT_DEFINITIONAL: SDAI.LOGICAL {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity.PRODUCT_DEFINITIONAL
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``eACTION`` )
    /// - origin: ENTITY( ``eACTION_METHOD`` )
    /// - origin: ENTITY( ``eACTION_PROPERTY`` )
    /// - origin: ENTITY( ``eACTION_RELATIONSHIP`` )
    /// - origin: ENTITY( ``eCONFIGURATION_DESIGN`` )
    /// - origin: ENTITY( ``eCONFIGURATION_EFFECTIVITY`` )
    /// - origin: ENTITY( ``eCONFIGURATION_ITEM`` )
    /// - origin: ENTITY( ``eDRAUGHTING_MODEL`` )
    /// - origin: ENTITY( ``eEXECUTED_ACTION`` )
    /// - origin: ENTITY( ``eGENERAL_PROPERTY`` )
    /// - origin: ENTITY( ``eMECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION`` )
    /// - origin: ENTITY( ``eORGANIZATION`` )
    /// - origin: ENTITY( ``eORGANIZATIONAL_PROJECT`` )
    /// - origin: ENTITY( ``ePERSON_AND_ORGANIZATION`` )
    /// - origin: ENTITY( ``ePRESENTATION_AREA`` )
    /// - origin: ENTITY( ``ePRODUCT`` )
    /// - origin: ENTITY( ``ePRODUCT_CONCEPT`` )
    /// - origin: ENTITY( ``ePRODUCT_CONCEPT_FEATURE`` )
    /// - origin: ENTITY( ``ePRODUCT_CONCEPT_FEATURE_ASSOCIATION`` )
    /// - origin: ENTITY( ``ePRODUCT_CONCEPT_FEATURE_CATEGORY`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_FORMATION`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_SUBSTITUTE`` )
    /// - origin: ENTITY( ``ePROPERTY_DEFINITION`` )
    /// - origin: ENTITY( ``eRESOURCE_PROPERTY`` )
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    /// - origin: ENTITY( ``eSHAPE_REPRESENTATION`` )
    /// - origin: ENTITY( ``eVERSIONED_ACTION_REQUEST`` )
    public var DESCRIPTION: tTEXT?  {
      switch self {
      case ._ACTION(let entity): return entity.DESCRIPTION
      case ._ACTION_METHOD(let entity): return entity.DESCRIPTION
      case ._ACTION_PROPERTY(let entity): return entity.DESCRIPTION
      case ._ACTION_RELATIONSHIP(let entity): return entity.DESCRIPTION
      case ._CONFIGURATION_DESIGN(let entity): return entity.DESCRIPTION
      case ._CONFIGURATION_EFFECTIVITY(let entity): return entity.DESCRIPTION
      case ._CONFIGURATION_ITEM(let entity): return entity.DESCRIPTION
      case ._DOCUMENT_FILE/*(let entity)*/: return nil // AMBIGUOUS ATTRIBUTE for eDOCUMENT_FILE
      case ._DRAUGHTING_MODEL(let entity): return entity.DESCRIPTION
      case ._EXECUTED_ACTION(let entity): return entity.DESCRIPTION
      case ._GENERAL_PROPERTY(let entity): return entity.DESCRIPTION
      case ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(let entity): return entity.DESCRIPTION
      case ._ORGANIZATION(let entity): return entity.DESCRIPTION
      case ._ORGANIZATIONAL_PROJECT(let entity): return entity.DESCRIPTION
      case ._PERSON_AND_ORGANIZATION(let entity): return entity.DESCRIPTION
      case ._PRESENTATION_AREA(let entity): return entity.DESCRIPTION
      case ._PRODUCT(let entity): return entity.DESCRIPTION
      case ._PRODUCT_CONCEPT(let entity): return entity.DESCRIPTION
      case ._PRODUCT_CONCEPT_FEATURE(let entity): return entity.DESCRIPTION
      case ._PRODUCT_CONCEPT_FEATURE_ASSOCIATION(let entity): return entity.DESCRIPTION
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY(let entity): return entity.DESCRIPTION
      case ._PRODUCT_DEFINITION(let entity): return entity.DESCRIPTION
      case ._PRODUCT_DEFINITION_FORMATION(let entity): return entity.DESCRIPTION
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let entity): return entity.DESCRIPTION
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.DESCRIPTION
      case ._PRODUCT_DEFINITION_SUBSTITUTE(let entity): return entity.DESCRIPTION
      case ._PRODUCT_IDENTIFICATION/*(let entity)*/: return nil // AMBIGUOUS ATTRIBUTE for ePRODUCT_IDENTIFICATION
      case ._PROPERTY_DEFINITION(let entity): return entity.DESCRIPTION
      case ._RESOURCE_PROPERTY(let entity): return entity.DESCRIPTION
      case ._SHAPE_ASPECT(let entity): return entity.DESCRIPTION
      case ._SHAPE_REPRESENTATION(let entity): return entity.DESCRIPTION
      case ._VERSIONED_ACTION_REQUEST(let entity): return entity.DESCRIPTION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``eACTION`` )
    public var PROPERTIES: (SDAI.SET<ePROCESS_PROPERTY_ASSOCIATION>/*[1:nil]*/ )?  {
      switch self {
      case ._ACTION(let entity): return entity.PROPERTIES
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    public var LEAF: sPRODUCT_DEFINITION_OR_REFERENCE?  {
      switch self {
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.LEAF
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``ePERSON`` )
    public var MIDDLE_NAMES: (SDAI.LIST<tLABEL>/*[1:nil]*/ )?  {
      switch self {
      case ._PERSON(let entity): return entity.MIDDLE_NAMES
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var FORM: eTOLERANCE_ZONE_FORM?  {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity.FORM
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``eACTION`` )
    /// - origin: ENTITY( ``eEXECUTED_ACTION`` )
    public var DIRECTIVE: eACTION_DIRECTIVE?  {
      switch self {
      case ._ACTION(let entity): return entity.DIRECTIVE
      case ._EXECUTED_ACTION(let entity): return entity.DIRECTIVE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``ePERSON`` )
    public var SUFFIX_TITLES: (SDAI.LIST<tLABEL>/*[1:nil]*/ )?  {
      switch self {
      case ._PERSON(let entity): return entity.SUFFIX_TITLES
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP`` )
    public var REALIZED_PRODUCT: ePRODUCT_DEFINITION_FORMATION?  {
      switch self {
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let entity): return entity.REALIZED_PRODUCT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    public var NEXT_USAGE: eNEXT_ASSEMBLY_USAGE_OCCURRENCE?  {
      switch self {
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.NEXT_USAGE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``eCONFIGURED_EFFECTIVITY_ASSIGNMENT`` )
    /// - origin: ENTITY( ``ePRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE`` )
    public var ROLE: eOBJECT_ROLE?  {
      switch self {
      case ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(let entity): return entity.ROLE
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE(let entity): return entity.ROLE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    public var REFERENCE_DESIGNATOR: tIDENTIFIER?  {
      switch self {
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.REFERENCE_DESIGNATOR
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``eASSEMBLY_COMPONENT_USAGE_SUBSTITUTE`` )
    public var SUBSTITUTE: eASSEMBLY_COMPONENT_USAGE?  {
      switch self {
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let entity): return entity.SUBSTITUTE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_FORMATION`` )
    public var STATUS: SDAI.STRING?  {
      switch self {
      case ._PRODUCT_DEFINITION_FORMATION(let entity): return entity.STATUS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP`` )
    public var RELATED_PRODUCT_DEFINITION_FORMATION: ePRODUCT_DEFINITION_FORMATION?  {
      switch self {
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let entity): return 
        entity.RELATED_PRODUCT_DEFINITION_FORMATION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``eCONFIGURATION_DESIGN`` )
    public var DESIGN: sCONFIGURATION_DESIGN_ITEM?  {
      switch self {
      case ._CONFIGURATION_DESIGN(let entity): return entity.DESIGN
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    public var CONSTITUENT_AMOUNT: (SDAI.SET<sCHARACTERIZED_PRODUCT_COMPOSITION_VALUE>/*[1:nil]*/ )?  {
      switch self {
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.CONSTITUENT_AMOUNT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var TARGET_ID: tIDENTIFIER?  {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity.TARGET_ID
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    public var UPPER_USAGE: eASSEMBLY_COMPONENT_USAGE?  {
      switch self {
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.UPPER_USAGE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    public var RANKING_RATIONALE: tTEXT?  {
      switch self {
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.RANKING_RATIONALE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``eMATERIAL_DESIGNATION`` )
    public var DEFINITIONS: (SDAI.SET<sCHARACTERIZED_DEFINITION>/*[1:nil]*/ )?  {
      switch self {
      case ._MATERIAL_DESIGNATION(let entity): return entity.DEFINITIONS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var COMPONENT_SHAPE_ASPECT: sINTERNAL_OR_REFLECTED_SHAPE_ASPECT?  {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity.COMPONENT_SHAPE_ASPECT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    public var CLASS: tLABEL?  {
      switch self {
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.CLASS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var PARENT: eSHAPE_ASPECT?  {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity.PARENT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``ePERSON`` )
    public var LAST_NAME: tLABEL?  {
      switch self {
      case ._PERSON(let entity): return entity.LAST_NAME
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION`` )
    public var DEFINED_VERSION: eCOLLECTION_VERSION?  {
      switch self {
      case ._PRODUCT_DEFINITION(let entity): return entity.DEFINED_VERSION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var ORIENTATION: nORIENTED_TOLERANCE_ZONE_TYPE?  {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity.ORIENTATION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_FORMATION`` )
    public var OF_COLLECTION: eCOLLECTION?  {
      switch self {
      case ._PRODUCT_DEFINITION_FORMATION(let entity): return entity.OF_COLLECTION
      default: return nil
      }
    }

    //MARK: var ITEMS: (AMBIGUOUS)

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP`` )
    public var PRODUCT_DESIGN_VERSION: ePRODUCT_DEFINITION_FORMATION?  {
      switch self {
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let entity): return entity.PRODUCT_DESIGN_VERSION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    /// - origin: ENTITY( ``ePROPERTY_DEFINITION`` )
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var OF_SHAPE: ePRODUCT_DEFINITION_SHAPE?  {
      switch self {
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return ePRODUCT_DEFINITION_SHAPE(entity.OF_SHAPE)
      case ._PROPERTY_DEFINITION(let entity): return ePRODUCT_DEFINITION_SHAPE(entity.OF_SHAPE)
      case ._SHAPE_ASPECT(let entity): return entity.OF_SHAPE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    public var RANKING: SDAI.INTEGER?  {
      switch self {
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.RANKING
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``eALTERNATE_PRODUCT_RELATIONSHIP`` )
    public var BASIS: tTEXT?  {
      switch self {
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let entity): return entity.BASIS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_FORMATION`` )
    public var MAKE_OR_BUY: nSOURCE?  {
      switch self {
      case ._PRODUCT_DEFINITION_FORMATION(let entity): return entity.MAKE_OR_BUY
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``eACTION`` )
    /// - origin: ENTITY( ``eEXECUTED_ACTION`` )
    public var CHOSEN_METHOD: eACTION_METHOD?  {
      switch self {
      case ._ACTION(let entity): return entity.CHOSEN_METHOD
      case ._EXECUTED_ACTION(let entity): return entity.CHOSEN_METHOD
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``eACTION_METHOD`` )
    /// - origin: ENTITY( ``eCONFIGURATION_ITEM`` )
    /// - origin: ENTITY( ``eCONTRACT`` )
    /// - origin: ENTITY( ``ePRODUCT_IDENTIFICATION`` )
    /// - origin: ENTITY( ``eVERSIONED_ACTION_REQUEST`` )
    public var PURPOSE: SDAI.STRING?  {
      switch self {
      case ._ACTION_METHOD(let entity): return SDAI.STRING(entity.PURPOSE)
      case ._CONFIGURATION_ITEM(let entity): return SDAI.STRING(entity.PURPOSE)
      case ._CONTRACT(let entity): return SDAI.STRING(entity.PURPOSE)
      case ._PRODUCT_IDENTIFICATION(let entity): return SDAI.STRING(entity.PURPOSE)
      case ._VERSIONED_ACTION_REQUEST(let entity): return SDAI.STRING(entity.PURPOSE)
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``eDRAWING_REVISION`` )
    public var AREAS: (SDAI.SET<eAREA_IN_SET>/*[1:nil]*/ )?  {
      switch self {
      case ._DRAWING_REVISION(let entity): return entity.AREAS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``eRESOURCE_PROPERTY`` )
    public var RESOURCE: sCHARACTERIZED_RESOURCE_DEFINITION?  {
      switch self {
      case ._RESOURCE_PROPERTY(let entity): return entity.RESOURCE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_SUBSTITUTE`` )
    public var CONTEXT_RELATIONSHIP: ePRODUCT_DEFINITION_RELATIONSHIP?  {
      switch self {
      case ._PRODUCT_DEFINITION_SUBSTITUTE(let entity): return entity.CONTEXT_RELATIONSHIP
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``eDRAWING_REVISION`` )
    public var INTENDED_SCALE: tTEXT?  {
      switch self {
      case ._DRAWING_REVISION(let entity): return entity.INTENDED_SCALE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_CONCEPT_FEATURE_ASSOCIATION`` )
    public var CONCEPT: ePRODUCT_CONCEPT?  {
      switch self {
      case ._PRODUCT_CONCEPT_FEATURE_ASSOCIATION(let entity): return entity.CONCEPT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``eACTION_RELATIONSHIP`` )
    public var RELATING_ACTION: eACTION?  {
      switch self {
      case ._ACTION_RELATIONSHIP(let entity): return entity.RELATING_ACTION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var DATUM_REFERENCE: eDATUM_SYSTEM?  {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity.DATUM_REFERENCE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP`` )
    public var RELATING_PRODUCT_DEFINITION_FORMATION: ePRODUCT_DEFINITION_FORMATION?  {
      switch self {
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let entity): return 
        entity.RELATING_PRODUCT_DEFINITION_FORMATION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP`` )
    public var RELATING_VERSION: eCOLLECTION_VERSION?  {
      switch self {
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let entity): return entity.RELATING_VERSION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var IDENTIFICATION: tIDENTIFIER?  {
      switch self {
      case ._ACTION/*(let entity)*/: return nil // AMBIGUOUS ATTRIBUTE for eACTION
      case ._SHAPE_ASPECT(let entity): return entity.IDENTIFICATION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``ePERSON`` )
    public var FIRST_NAME: tLABEL?  {
      switch self {
      case ._PERSON(let entity): return entity.FIRST_NAME
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    public var COMPOSITION_BASIS: tLABEL?  {
      switch self {
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.COMPOSITION_BASIS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION`` )
    public var DOCUMENTATION_IDS: (SDAI.SET<eDOCUMENT>/*[1:nil]*/ )?  {
      switch self {
      case ._PRODUCT_DEFINITION(let entity): return entity.DOCUMENTATION_IDS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var ESTABLISHED_BY_RELATIONSHIPS: (SDAI.SET<eSHAPE_ASPECT_RELATIONSHIP>/*[1:nil]*/ )?  {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity.ESTABLISHED_BY_RELATIONSHIPS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP`` )
    public var RELATION_TYPE: SDAI.STRING?  {
      switch self {
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let entity): return entity.RELATION_TYPE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``eCONFIGURATION_ITEM`` )
    public var ITEM_CONCEPT_FEATURE: (SDAI.SET<ePRODUCT_CONCEPT_FEATURE_ASSOCIATION>/*[1:nil]*/ )?  {
      switch self {
      case ._CONFIGURATION_ITEM(let entity): return entity.ITEM_CONCEPT_FEATURE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``ePERSON_AND_ORGANIZATION`` )
    public var THE_PERSON: ePERSON?  {
      switch self {
      case ._PERSON_AND_ORGANIZATION(let entity): return entity.THE_PERSON
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_FORMATION`` )
    public var SPECIFICATION: (SDAI.SET<ePRODUCT_DEFINITION>/*[1:nil]*/ )?  {
      switch self {
      case ._PRODUCT_DEFINITION_FORMATION(let entity): return entity.SPECIFICATION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP`` )
    public var PLANNED_PRODUCT: ePRODUCT_DEFINITION_FORMATION?  {
      switch self {
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let entity): return entity.PLANNED_PRODUCT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var CONSTITUENTS: (SDAI.LIST_UNIQUE<eDATUM_REFERENCE_COMPARTMENT>/*[1:3]*/ )?  {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity.CONSTITUENTS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var REPRESENTATION_ASSOCIATIONS: (SDAI.SET<ePROPERTY_DEFINITION_REPRESENTATION>/*[0:nil]*/ )?  {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity.REPRESENTATION_ASSOCIATIONS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``eDRAWING_REVISION`` )
    /// - origin: ENTITY( ``ePRESENTATION_AREA`` )
    public var REVISION_IDENTIFIER: tIDENTIFIER?  {
      switch self {
      case ._DRAWING_REVISION(let entity): return entity.REVISION_IDENTIFIER
      case ._PRESENTATION_AREA(let entity): return entity.REVISION_IDENTIFIER
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP`` )
    public var SUCCESSOR: eCOLLECTION_VERSION?  {
      switch self {
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let entity): return entity.SUCCESSOR
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``eSHAPE_REPRESENTATION`` )
    public var TESSELLATION_ACCURACY_PARAMETERS: (SDAI.SET<sTESSELLATION_ACCURACY_PARAMETER_ITEM>/*[1:nil]*/ )?  {
      switch self {
      case ._SHAPE_REPRESENTATION(let entity): return entity.TESSELLATION_ACCURACY_PARAMETERS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var ANGLE: ePLANE_ANGLE_MEASURE_WITH_UNIT?  {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity.ANGLE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_CONCEPT_FEATURE_ASSOCIATION`` )
    public var FEATURE: ePRODUCT_CONCEPT_FEATURE?  {
      switch self {
      case ._PRODUCT_CONCEPT_FEATURE_ASSOCIATION(let entity): return entity.FEATURE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP`` )
    public var INDIVIDUAL_PRODUCT: ePRODUCT_DEFINITION_FORMATION?  {
      switch self {
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let entity): return entity.INDIVIDUAL_PRODUCT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_CONCEPT_FEATURE`` )
    public var CONDITION: eCONCEPT_FEATURE_RELATIONSHIP_WITH_CONDITION?  {
      switch self {
      case ._PRODUCT_CONCEPT_FEATURE(let entity): return entity.CONDITION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``eCONFIGURATION_ITEM`` )
    /// - origin: ENTITY( ``ePRODUCT_IDENTIFICATION`` )
    public var ITEM_CONCEPT: ePRODUCT_CONCEPT?  {
      switch self {
      case ._CONFIGURATION_ITEM(let entity): return entity.ITEM_CONCEPT
      case ._PRODUCT_IDENTIFICATION(let entity): return ePRODUCT_CONCEPT(entity.ITEM_CONCEPT)
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``eCONTRACT`` )
    /// - origin: ENTITY( ``eDOCUMENT_FILE`` )
    public var KIND: SDAI.GENERIC_ENTITY?  {
      switch self {
      case ._CONTRACT(let entity): return entity.KIND
      case ._DOCUMENT_FILE(let entity): return entity.KIND
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var MODIFIERS: (SDAI.SET<sDATUM_REFERENCE_MODIFIER>/*[1:nil]*/ )?  {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity.MODIFIERS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    public var DETERMINATION_METHOD: tTEXT?  {
      switch self {
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.DETERMINATION_METHOD
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``eACTION_METHOD`` )
    public var CONSEQUENCE: tTEXT?  {
      switch self {
      case ._ACTION_METHOD(let entity): return entity.CONSEQUENCE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    public var ROOT: ePRODUCT_DEFINITION?  {
      switch self {
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.ROOT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``eDRAWING_REVISION`` )
    public var DRAWING_IDENTIFIER: eDRAWING_DEFINITION?  {
      switch self {
      case ._DRAWING_REVISION(let entity): return entity.DRAWING_IDENTIFIER
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``ePERSON_AND_ORGANIZATION`` )
    public var THE_ORGANIZATION: eORGANIZATION?  {
      switch self {
      case ._PERSON_AND_ORGANIZATION(let entity): return entity.THE_ORGANIZATION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var COMPONENT_RELATIONSHIPS: (SDAI.SET<eSHAPE_ASPECT_RELATIONSHIP>/*[2:nil]*/ )?  {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity.COMPONENT_RELATIONSHIPS
      default: return nil
      }
    }

    //MARK: var BASE: (AMBIGUOUS)

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var BASE_COMMON_DATUM_LIST: tCOMMON_DATUM_LIST?  {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity.BASE_COMMON_DATUM_LIST
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``eACTION`` )
    public var PRODUCT_DEFINITIONS: (SDAI.SET<ePROCESS_PRODUCT_ASSOCIATION>/*[1:nil]*/ )?  {
      switch self {
      case ._ACTION(let entity): return entity.PRODUCT_DEFINITIONS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    public var RELATING_PRODUCT_DEFINITION: sPRODUCT_DEFINITION_OR_REFERENCE?  {
      switch self {
      case ._PRODUCT_DEFINITION(let entity): return sPRODUCT_DEFINITION_OR_REFERENCE(
        entity.RELATING_PRODUCT_DEFINITION)
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.RELATING_PRODUCT_DEFINITION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``eDOCUMENT_FILE`` )
    public var REPRESENTATION_TYPES: (SDAI.SET<eDOCUMENT_REPRESENTATION_TYPE>/*[0:nil]*/ )?  {
      switch self {
      case ._DOCUMENT_FILE(let entity): return entity.REPRESENTATION_TYPES
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP`` )
    public var RELATED_VERSION: eCOLLECTION_VERSION?  {
      switch self {
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let entity): return entity.RELATED_VERSION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``eACTION_RELATIONSHIP`` )
    public var RELATED_ACTION: eACTION?  {
      switch self {
      case ._ACTION_RELATIONSHIP(let entity): return entity.RELATED_ACTION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``eACTION`` )
    /// - origin: ENTITY( ``eCONFIGURATION_EFFECTIVITY`` )
    /// - origin: ENTITY( ``eCONFIGURATION_ITEM`` )
    /// - origin: ENTITY( ``eDOCUMENT_FILE`` )
    /// - origin: ENTITY( ``eDRAUGHTING_MODEL`` )
    /// - origin: ENTITY( ``eEXECUTED_ACTION`` )
    /// - origin: ENTITY( ``eGENERAL_PROPERTY`` )
    /// - origin: ENTITY( ``eMECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION`` )
    /// - origin: ENTITY( ``eORGANIZATION`` )
    /// - origin: ENTITY( ``eORGANIZATIONAL_PROJECT`` )
    /// - origin: ENTITY( ``ePERSON`` )
    /// - origin: ENTITY( ``ePRESENTATION_AREA`` )
    /// - origin: ENTITY( ``ePRODUCT`` )
    /// - origin: ENTITY( ``ePRODUCT_CONCEPT`` )
    /// - origin: ENTITY( ``ePRODUCT_CONCEPT_FEATURE`` )
    /// - origin: ENTITY( ``ePRODUCT_CONCEPT_FEATURE_CATEGORY`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_FORMATION`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    /// - origin: ENTITY( ``ePRODUCT_IDENTIFICATION`` )
    /// - origin: ENTITY( ``ePROPERTY_DEFINITION`` )
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    /// - origin: ENTITY( ``eSHAPE_REPRESENTATION`` )
    /// - origin: ENTITY( ``eVERSIONED_ACTION_REQUEST`` )
    public var ID: tIDENTIFIER?  {
      switch self {
      case ._ACTION(let entity): return entity.ID
      case ._CONFIGURATION_EFFECTIVITY(let entity): return entity.ID
      case ._CONFIGURATION_ITEM(let entity): return entity.ID
      case ._DOCUMENT_FILE(let entity): return entity.ID
      case ._DRAUGHTING_MODEL(let entity): return entity.ID
      case ._EXECUTED_ACTION(let entity): return entity.ID
      case ._GENERAL_PROPERTY(let entity): return entity.ID
      case ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(let entity): return entity.ID
      case ._ORGANIZATION(let entity): return entity.ID
      case ._ORGANIZATIONAL_PROJECT(let entity): return entity.ID
      case ._PERSON(let entity): return entity.ID
      case ._PRESENTATION_AREA(let entity): return entity.ID
      case ._PRODUCT(let entity): return entity.ID
      case ._PRODUCT_CONCEPT(let entity): return entity.ID
      case ._PRODUCT_CONCEPT_FEATURE(let entity): return entity.ID
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY(let entity): return entity.ID
      case ._PRODUCT_DEFINITION(let entity): return entity.ID
      case ._PRODUCT_DEFINITION_FORMATION(let entity): return entity.ID
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let entity): return entity.ID
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.ID
      case ._PRODUCT_IDENTIFICATION(let entity): return entity.ID
      case ._PROPERTY_DEFINITION(let entity): return entity.ID
      case ._SHAPE_ASPECT(let entity): return entity.ID
      case ._SHAPE_REPRESENTATION(let entity): return entity.ID
      case ._VERSIONED_ACTION_REQUEST(let entity): return entity.ID
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var FEATURE_BASIS_RELATIONSHIP: (SDAI.SET<eSHAPE_ASPECT_RELATIONSHIP>/*[1:nil]*/ )?  {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity.FEATURE_BASIS_RELATIONSHIP
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``eALTERNATE_PRODUCT_RELATIONSHIP`` )
    public var ALTERNATE: ePRODUCT?  {
      switch self {
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let entity): return entity.ALTERNATE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``eDRAUGHTING_MODEL`` )
    /// - origin: ENTITY( ``eMECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION`` )
    /// - origin: ENTITY( ``ePRESENTATION_AREA`` )
    /// - origin: ENTITY( ``eSHAPE_REPRESENTATION`` )
    public var CONTEXT_OF_ITEMS: eREPRESENTATION_CONTEXT?  {
      switch self {
      case ._DRAUGHTING_MODEL(let entity): return entity.CONTEXT_OF_ITEMS
      case ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(let entity): return 
        entity.CONTEXT_OF_ITEMS
      case ._PRESENTATION_AREA(let entity): return eREPRESENTATION_CONTEXT(entity.CONTEXT_OF_ITEMS)
      case ._SHAPE_REPRESENTATION(let entity): return entity.CONTEXT_OF_ITEMS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_SUBSTITUTE`` )
    public var SUBSTITUTE_DEFINITION: ePRODUCT_DEFINITION?  {
      switch self {
      case ._PRODUCT_DEFINITION_SUBSTITUTE(let entity): return entity.SUBSTITUTE_DEFINITION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``eVERSIONED_ACTION_REQUEST`` )
    public var VERSION: tLABEL?  {
      switch self {
      case ._VERSIONED_ACTION_REQUEST(let entity): return entity.VERSION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var DIRECTION: nDIRECTED_TOLERANCE_ZONE_TYPE?  {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity.DIRECTION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var RELATED_SHAPE_ASPECT: eCOMPONENT_FEATURE?  {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity.RELATED_SHAPE_ASPECT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``eORGANIZATIONAL_PROJECT`` )
    public var RESPONSIBLE_ORGANIZATIONS: (SDAI.SET<eORGANIZATION>/*[1:nil]*/ )?  {
      switch self {
      case ._ORGANIZATIONAL_PROJECT(let entity): return entity.RESPONSIBLE_ORGANIZATIONS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_FORMATION`` )
    public var OF_PRODUCT: ePRODUCT?  {
      switch self {
      case ._PRODUCT_DEFINITION_FORMATION(let entity): return entity.OF_PRODUCT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``ePROPERTY_DEFINITION`` )
    public var REPRESENTATION_RELATION: eKINEMATIC_PROPERTY_DEFINITION_REPRESENTATION?  {
      switch self {
      case ._PROPERTY_DEFINITION(let entity): return entity.REPRESENTATION_RELATION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    public var PRODUCT_DEFINITION_OCCURRENCE_ID: tIDENTIFIER?  {
      switch self {
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.PRODUCT_DEFINITION_OCCURRENCE_ID
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``eCONFIGURED_EFFECTIVITY_ASSIGNMENT`` )
    public var ASSIGNED_EFFECTIVITY: eEFFECTIVITY?  {
      switch self {
      case ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(let entity): return entity.ASSIGNED_EFFECTIVITY
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var DEFINING_TOLERANCE: (SDAI.SET<sTOLERANCE_ZONE_TARGET>/*[1:nil]*/ )?  {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity.DEFINING_TOLERANCE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``eSHAPE_REPRESENTATION`` )
    public var NEUTRAL_SKETCH_SEMANTICS: nCURVES_OR_AREA?  {
      switch self {
      case ._SHAPE_REPRESENTATION(let entity): return entity.NEUTRAL_SKETCH_SEMANTICS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_CONCEPT`` )
    public var MARKET_CONTEXT: ePRODUCT_CONCEPT_CONTEXT?  {
      switch self {
      case ._PRODUCT_CONCEPT(let entity): return entity.MARKET_CONTEXT
      default: return nil
      }
    }

    //MARK: var FRAME_OF_REFERENCE: (AMBIGUOUS)

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    /// - origin: ENTITY( ``ePROPERTY_DEFINITION`` )
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var ASSIGNED_GROUP: eGROUP?  {
      switch self {
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE(let entity): return eGROUP(entity.ASSIGNED_GROUP)
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return eGROUP(entity.ASSIGNED_GROUP)
      case ._PROPERTY_DEFINITION(let entity): return eGROUP(entity.ASSIGNED_GROUP)
      case ._SHAPE_ASPECT(let entity): return eGROUP(entity.ASSIGNED_GROUP)
      default: return nil
      }
    }

    //MARK: var LOCATION: (AMBIGUOUS)

    //MARK: var DEFINITION: (AMBIGUOUS)

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``eCONFIGURATION_DESIGN`` )
    /// - origin: ENTITY( ``eCONFIGURATION_EFFECTIVITY`` )
    public var CONFIGURATION: SDAI.GENERIC_ENTITY?  {
      switch self {
      case ._CONFIGURATION_DESIGN(let entity): return entity.CONFIGURATION
      case ._CONFIGURATION_EFFECTIVITY(let entity): return entity.CONFIGURATION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    public var RELATED_PRODUCT_DEFINITION: sPRODUCT_DEFINITION_OR_REFERENCE?  {
      switch self {
      case ._PRODUCT_DEFINITION(let entity): return sPRODUCT_DEFINITION_OR_REFERENCE(
        entity.RELATED_PRODUCT_DEFINITION)
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.RELATED_PRODUCT_DEFINITION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``eACTION`` )
    /// - origin: ENTITY( ``eACTION_METHOD`` )
    /// - origin: ENTITY( ``eACTION_PROPERTY`` )
    /// - origin: ENTITY( ``eACTION_RELATIONSHIP`` )
    /// - origin: ENTITY( ``eALTERNATE_PRODUCT_RELATIONSHIP`` )
    /// - origin: ENTITY( ``eASSEMBLY_COMPONENT_USAGE_SUBSTITUTE`` )
    /// - origin: ENTITY( ``eCONFIGURATION_DESIGN`` )
    /// - origin: ENTITY( ``eCONFIGURATION_EFFECTIVITY`` )
    /// - origin: ENTITY( ``eCONFIGURATION_ITEM`` )
    /// - origin: ENTITY( ``eCONTRACT`` )
    /// - origin: ENTITY( ``eDRAUGHTING_MODEL`` )
    /// - origin: ENTITY( ``eEXECUTED_ACTION`` )
    /// - origin: ENTITY( ``eGENERAL_PROPERTY`` )
    /// - origin: ENTITY( ``eMATERIAL_DESIGNATION`` )
    /// - origin: ENTITY( ``eMECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION`` )
    /// - origin: ENTITY( ``eORGANIZATION`` )
    /// - origin: ENTITY( ``eORGANIZATIONAL_PROJECT`` )
    /// - origin: ENTITY( ``ePERSON_AND_ORGANIZATION`` )
    /// - origin: ENTITY( ``ePRESENTATION_AREA`` )
    /// - origin: ENTITY( ``ePRODUCT`` )
    /// - origin: ENTITY( ``ePRODUCT_CONCEPT`` )
    /// - origin: ENTITY( ``ePRODUCT_CONCEPT_FEATURE`` )
    /// - origin: ENTITY( ``ePRODUCT_CONCEPT_FEATURE_ASSOCIATION`` )
    /// - origin: ENTITY( ``ePRODUCT_CONCEPT_FEATURE_CATEGORY`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_SUBSTITUTE`` )
    /// - origin: ENTITY( ``ePROPERTY_DEFINITION`` )
    /// - origin: ENTITY( ``eRESOURCE_PROPERTY`` )
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    /// - origin: ENTITY( ``eSHAPE_REPRESENTATION`` )
    public var NAME: tLABEL?  {
      switch self {
      case ._ACTION(let entity): return entity.NAME
      case ._ACTION_METHOD(let entity): return entity.NAME
      case ._ACTION_PROPERTY(let entity): return entity.NAME
      case ._ACTION_RELATIONSHIP(let entity): return entity.NAME
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let entity): return entity.NAME
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let entity): return entity.NAME
      case ._CONFIGURATION_DESIGN(let entity): return entity.NAME
      case ._CONFIGURATION_EFFECTIVITY(let entity): return entity.NAME
      case ._CONFIGURATION_ITEM(let entity): return entity.NAME
      case ._CONTRACT(let entity): return entity.NAME
      case ._DOCUMENT_FILE/*(let entity)*/: return nil // AMBIGUOUS ATTRIBUTE for eDOCUMENT_FILE
      case ._DRAUGHTING_MODEL(let entity): return entity.NAME
      case ._EXECUTED_ACTION(let entity): return entity.NAME
      case ._GENERAL_PROPERTY(let entity): return entity.NAME
      case ._MATERIAL_DESIGNATION(let entity): return entity.NAME
      case ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(let entity): return entity.NAME
      case ._ORGANIZATION(let entity): return entity.NAME
      case ._ORGANIZATIONAL_PROJECT(let entity): return entity.NAME
      case ._PERSON_AND_ORGANIZATION(let entity): return entity.NAME
      case ._PRESENTATION_AREA(let entity): return entity.NAME
      case ._PRODUCT(let entity): return entity.NAME
      case ._PRODUCT_CONCEPT(let entity): return entity.NAME
      case ._PRODUCT_CONCEPT_FEATURE(let entity): return entity.NAME
      case ._PRODUCT_CONCEPT_FEATURE_ASSOCIATION(let entity): return entity.NAME
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY(let entity): return entity.NAME
      case ._PRODUCT_DEFINITION(let entity): return entity.NAME
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let entity): return entity.NAME
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.NAME
      case ._PRODUCT_DEFINITION_SUBSTITUTE(let entity): return entity.NAME
      case ._PRODUCT_IDENTIFICATION/*(let entity)*/: return nil // AMBIGUOUS ATTRIBUTE for ePRODUCT_IDENTIFICATION
      case ._PROPERTY_DEFINITION(let entity): return entity.NAME
      case ._RESOURCE_PROPERTY(let entity): return entity.NAME
      case ._SHAPE_ASPECT(let entity): return entity.NAME
      case ._SHAPE_REPRESENTATION(let entity): return entity.NAME
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var BASIS_RELATIONSHIPS: (SDAI.SET<eSHAPE_ASPECT_DERIVING_RELATIONSHIP>/*[1:nil]*/ )?  {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity.BASIS_RELATIONSHIPS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``ePERSON`` )
    public var PREFIX_TITLES: (SDAI.LIST<tLABEL>/*[1:nil]*/ )?  {
      switch self {
      case ._PERSON(let entity): return entity.PREFIX_TITLES
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var RELATING_SHAPE_ASPECT: eCOMPONENT_FEATURE?  {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity.RELATING_SHAPE_ASPECT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP`` )
    public var PREDECESSOR: eCOLLECTION_VERSION?  {
      switch self {
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let entity): return entity.PREDECESSOR
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var OFFSET: eMEASURE_WITH_UNIT?  {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity.OFFSET
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``eCONFIGURATION_EFFECTIVITY`` )
    public var USAGE: ePRODUCT_DEFINITION_RELATIONSHIP?  {
      switch self {
      case ._CONFIGURATION_EFFECTIVITY(let entity): return entity.USAGE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``eSHAPE_ASPECT`` )
    public var TARGET_BASIS_RELATIONSHIP: (SDAI.SET<eSHAPE_ASPECT_RELATIONSHIP>/*[1:nil]*/ )?  {
      switch self {
      case ._SHAPE_ASPECT(let entity): return entity.TARGET_BASIS_RELATIONSHIP
      default: return nil
      }
    }

    /// attribute of SELECT type ``sACTION_REQUEST_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION`` )
    public var FORMATION: ePRODUCT_DEFINITION_FORMATION?  {
      switch self {
      case ._PRODUCT_DEFINITION(let entity): return entity.FORMATION
      default: return nil
      }
    }


    //MARK: - SDAIValue
    public func isValueEqual<T: SDAIValue>(to rhs: T) -> Bool {
      switch self {
      case ._ACTION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._ACTION_METHOD(let selection): return selection.value.isValueEqual(to: rhs)
      case ._ACTION_PROPERTY(let selection): return selection.value.isValueEqual(to: rhs)
      case ._ACTION_RELATIONSHIP(let selection): return selection.value.isValueEqual(to: rhs)
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let selection): return selection.value.isValueEqual(to: rhs)
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._CONFIGURATION_DESIGN(let selection): return selection.value.isValueEqual(to: rhs)
      case ._CONFIGURATION_EFFECTIVITY(let selection): return selection.value.isValueEqual(to: rhs)
      case ._CONFIGURATION_ITEM(let selection): return selection.value.isValueEqual(to: rhs)
      case ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(let selection): return selection.value.isValueEqual(to: rhs)
      case ._CONTRACT(let selection): return selection.value.isValueEqual(to: rhs)
      case ._DOCUMENT_FILE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._DRAUGHTING_MODEL(let selection): return selection.value.isValueEqual(to: rhs)
      case ._DRAWING_REVISION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._EXECUTED_ACTION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._GENERAL_PROPERTY(let selection): return selection.value.isValueEqual(to: rhs)
      case ._MATERIAL_DESIGNATION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._ORGANIZATION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PERSON(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PERSON_AND_ORGANIZATION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PRESENTATION_AREA(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PRODUCT(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PRODUCT_CONCEPT(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PRODUCT_CONCEPT_FEATURE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PRODUCT_CONCEPT_FEATURE_ASSOCIATION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PRODUCT_DEFINITION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PRODUCT_DEFINITION_SUBSTITUTE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PRODUCT_IDENTIFICATION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PROPERTY_DEFINITION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._RESOURCE_PROPERTY(let selection): return selection.value.isValueEqual(to: rhs)
      case ._SHAPE_ASPECT(let selection): return selection.value.isValueEqual(to: rhs)
      case ._SHAPE_REPRESENTATION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._VERSIONED_ACTION_REQUEST(let selection): return selection.value.isValueEqual(to: rhs)
      }
    }

    public func isValueEqualOptionally<T: SDAIValue>(to rhs: T?) -> Bool? {
      switch self {
      case ._ACTION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._ACTION_METHOD(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._ACTION_PROPERTY(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._ACTION_RELATIONSHIP(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._CONFIGURATION_DESIGN(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._CONFIGURATION_EFFECTIVITY(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._CONFIGURATION_ITEM(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._CONTRACT(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._DOCUMENT_FILE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._DRAUGHTING_MODEL(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._DRAWING_REVISION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._EXECUTED_ACTION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._GENERAL_PROPERTY(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._MATERIAL_DESIGNATION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._ORGANIZATION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PERSON(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PERSON_AND_ORGANIZATION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PRESENTATION_AREA(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PRODUCT(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PRODUCT_CONCEPT(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PRODUCT_CONCEPT_FEATURE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PRODUCT_CONCEPT_FEATURE_ASSOCIATION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PRODUCT_DEFINITION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PRODUCT_DEFINITION_SUBSTITUTE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PRODUCT_IDENTIFICATION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PROPERTY_DEFINITION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._RESOURCE_PROPERTY(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._SHAPE_ASPECT(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._SHAPE_REPRESENTATION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._VERSIONED_ACTION_REQUEST(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      }
    }

    public func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      switch self {
      case ._ACTION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._ACTION_METHOD(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._ACTION_PROPERTY(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._ACTION_RELATIONSHIP(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._CONFIGURATION_DESIGN(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._CONFIGURATION_EFFECTIVITY(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._CONFIGURATION_ITEM(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._CONTRACT(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._DOCUMENT_FILE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._DRAUGHTING_MODEL(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._DRAWING_REVISION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._EXECUTED_ACTION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._GENERAL_PROPERTY(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._MATERIAL_DESIGNATION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._ORGANIZATION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._ORGANIZATIONAL_PROJECT(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PERSON(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PERSON_AND_ORGANIZATION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PRESENTATION_AREA(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PRODUCT(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PRODUCT_CONCEPT(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PRODUCT_CONCEPT_FEATURE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PRODUCT_CONCEPT_FEATURE_ASSOCIATION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PRODUCT_DEFINITION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PRODUCT_DEFINITION_FORMATION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PRODUCT_DEFINITION_SUBSTITUTE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PRODUCT_IDENTIFICATION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PROPERTY_DEFINITION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._RESOURCE_PROPERTY(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._SHAPE_ASPECT(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._SHAPE_REPRESENTATION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._VERSIONED_ACTION_REQUEST(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      }
    }

    public func isValueEqual<T: SDAIValue>(to rhs: T, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      switch self {
      case ._ACTION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._ACTION_METHOD(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._ACTION_PROPERTY(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._ACTION_RELATIONSHIP(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._CONFIGURATION_DESIGN(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._CONFIGURATION_EFFECTIVITY(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._CONFIGURATION_ITEM(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._CONTRACT(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._DOCUMENT_FILE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._DRAUGHTING_MODEL(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._DRAWING_REVISION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._EXECUTED_ACTION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._GENERAL_PROPERTY(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._MATERIAL_DESIGNATION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._ORGANIZATION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PERSON(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PERSON_AND_ORGANIZATION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PRESENTATION_AREA(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PRODUCT(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PRODUCT_CONCEPT(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PRODUCT_CONCEPT_FEATURE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PRODUCT_CONCEPT_FEATURE_ASSOCIATION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PRODUCT_DEFINITION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PRODUCT_DEFINITION_SUBSTITUTE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PRODUCT_IDENTIFICATION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PROPERTY_DEFINITION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._RESOURCE_PROPERTY(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._SHAPE_ASPECT(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._SHAPE_REPRESENTATION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._VERSIONED_ACTION_REQUEST(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      }
    }

    public func isValueEqualOptionally<T: SDAIValue>(to rhs: T?, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      switch self {
      case ._ACTION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._ACTION_METHOD(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._ACTION_PROPERTY(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._ACTION_RELATIONSHIP(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._CONFIGURATION_DESIGN(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._CONFIGURATION_EFFECTIVITY(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._CONFIGURATION_ITEM(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._CONTRACT(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._DOCUMENT_FILE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._DRAUGHTING_MODEL(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._DRAWING_REVISION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._EXECUTED_ACTION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._GENERAL_PROPERTY(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._MATERIAL_DESIGNATION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._ORGANIZATION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PERSON(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PERSON_AND_ORGANIZATION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PRESENTATION_AREA(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PRODUCT(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PRODUCT_CONCEPT(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PRODUCT_CONCEPT_FEATURE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PRODUCT_CONCEPT_FEATURE_ASSOCIATION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PRODUCT_DEFINITION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PRODUCT_DEFINITION_SUBSTITUTE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PRODUCT_IDENTIFICATION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PROPERTY_DEFINITION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._RESOURCE_PROPERTY(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._SHAPE_ASPECT(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._SHAPE_REPRESENTATION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._VERSIONED_ACTION_REQUEST(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      }
    }


    //MARK: SDAIGenericTypeBase
    public func copy() -> Self {
      switch self {
      case ._ACTION(let selection): return ._ACTION(selection.copy())
      case ._ACTION_METHOD(let selection): return ._ACTION_METHOD(selection.copy())
      case ._ACTION_PROPERTY(let selection): return ._ACTION_PROPERTY(selection.copy())
      case ._ACTION_RELATIONSHIP(let selection): return ._ACTION_RELATIONSHIP(selection.copy())
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let selection): return ._ALTERNATE_PRODUCT_RELATIONSHIP(selection.copy())
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let selection): return ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(selection.copy())
      case ._CONFIGURATION_DESIGN(let selection): return ._CONFIGURATION_DESIGN(selection.copy())
      case ._CONFIGURATION_EFFECTIVITY(let selection): return ._CONFIGURATION_EFFECTIVITY(selection.copy())
      case ._CONFIGURATION_ITEM(let selection): return ._CONFIGURATION_ITEM(selection.copy())
      case ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(let selection): return ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(selection.copy())
      case ._CONTRACT(let selection): return ._CONTRACT(selection.copy())
      case ._DOCUMENT_FILE(let selection): return ._DOCUMENT_FILE(selection.copy())
      case ._DRAUGHTING_MODEL(let selection): return ._DRAUGHTING_MODEL(selection.copy())
      case ._DRAWING_REVISION(let selection): return ._DRAWING_REVISION(selection.copy())
      case ._EXECUTED_ACTION(let selection): return ._EXECUTED_ACTION(selection.copy())
      case ._GENERAL_PROPERTY(let selection): return ._GENERAL_PROPERTY(selection.copy())
      case ._MATERIAL_DESIGNATION(let selection): return ._MATERIAL_DESIGNATION(selection.copy())
      case ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(let selection): return ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(selection.copy())
      case ._ORGANIZATION(let selection): return ._ORGANIZATION(selection.copy())
      case ._ORGANIZATIONAL_PROJECT(let selection): return ._ORGANIZATIONAL_PROJECT(selection.copy())
      case ._PERSON(let selection): return ._PERSON(selection.copy())
      case ._PERSON_AND_ORGANIZATION(let selection): return ._PERSON_AND_ORGANIZATION(selection.copy())
      case ._PRESENTATION_AREA(let selection): return ._PRESENTATION_AREA(selection.copy())
      case ._PRODUCT(let selection): return ._PRODUCT(selection.copy())
      case ._PRODUCT_CONCEPT(let selection): return ._PRODUCT_CONCEPT(selection.copy())
      case ._PRODUCT_CONCEPT_FEATURE(let selection): return ._PRODUCT_CONCEPT_FEATURE(selection.copy())
      case ._PRODUCT_CONCEPT_FEATURE_ASSOCIATION(let selection): return ._PRODUCT_CONCEPT_FEATURE_ASSOCIATION(selection.copy())
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY(let selection): return ._PRODUCT_CONCEPT_FEATURE_CATEGORY(selection.copy())
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE(let selection): return ._PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE(selection.copy())
      case ._PRODUCT_DEFINITION(let selection): return ._PRODUCT_DEFINITION(selection.copy())
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return ._PRODUCT_DEFINITION_FORMATION(selection.copy())
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let selection): return ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(selection.copy())
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return ._PRODUCT_DEFINITION_RELATIONSHIP(selection.copy())
      case ._PRODUCT_DEFINITION_SUBSTITUTE(let selection): return ._PRODUCT_DEFINITION_SUBSTITUTE(selection.copy())
      case ._PRODUCT_IDENTIFICATION(let selection): return ._PRODUCT_IDENTIFICATION(selection.copy())
      case ._PROPERTY_DEFINITION(let selection): return ._PROPERTY_DEFINITION(selection.copy())
      case ._RESOURCE_PROPERTY(let selection): return ._RESOURCE_PROPERTY(selection.copy())
      case ._SHAPE_ASPECT(let selection): return ._SHAPE_ASPECT(selection.copy())
      case ._SHAPE_REPRESENTATION(let selection): return ._SHAPE_REPRESENTATION(selection.copy())
      case ._VERSIONED_ACTION_REQUEST(let selection): return ._VERSIONED_ACTION_REQUEST(selection.copy())
      }
    }

    //MARK: SDAIGenericType
    public var typeMembers: Set<SDAI.STRING> {
      var members: Set<SDAI.STRING> = [SDAI.STRING(Self.typeName)]
      switch self {
      case ._ACTION(let selection): members.formUnion(selection.typeMembers)
      case ._ACTION_METHOD(let selection): members.formUnion(selection.typeMembers)
      case ._ACTION_PROPERTY(let selection): members.formUnion(selection.typeMembers)
      case ._ACTION_RELATIONSHIP(let selection): members.formUnion(selection.typeMembers)
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let selection): members.formUnion(selection.typeMembers)
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let selection): members.formUnion(selection.typeMembers)
      case ._CONFIGURATION_DESIGN(let selection): members.formUnion(selection.typeMembers)
      case ._CONFIGURATION_EFFECTIVITY(let selection): members.formUnion(selection.typeMembers)
      case ._CONFIGURATION_ITEM(let selection): members.formUnion(selection.typeMembers)
      case ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(let selection): members.formUnion(selection.typeMembers)
      case ._CONTRACT(let selection): members.formUnion(selection.typeMembers)
      case ._DOCUMENT_FILE(let selection): members.formUnion(selection.typeMembers)
      case ._DRAUGHTING_MODEL(let selection): members.formUnion(selection.typeMembers)
      case ._DRAWING_REVISION(let selection): members.formUnion(selection.typeMembers)
      case ._EXECUTED_ACTION(let selection): members.formUnion(selection.typeMembers)
      case ._GENERAL_PROPERTY(let selection): members.formUnion(selection.typeMembers)
      case ._MATERIAL_DESIGNATION(let selection): members.formUnion(selection.typeMembers)
      case ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(let selection): members.formUnion(selection.typeMembers)
      case ._ORGANIZATION(let selection): members.formUnion(selection.typeMembers)
      case ._ORGANIZATIONAL_PROJECT(let selection): members.formUnion(selection.typeMembers)
      case ._PERSON(let selection): members.formUnion(selection.typeMembers)
      case ._PERSON_AND_ORGANIZATION(let selection): members.formUnion(selection.typeMembers)
      case ._PRESENTATION_AREA(let selection): members.formUnion(selection.typeMembers)
      case ._PRODUCT(let selection): members.formUnion(selection.typeMembers)
      case ._PRODUCT_CONCEPT(let selection): members.formUnion(selection.typeMembers)
      case ._PRODUCT_CONCEPT_FEATURE(let selection): members.formUnion(selection.typeMembers)
      case ._PRODUCT_CONCEPT_FEATURE_ASSOCIATION(let selection): members.formUnion(selection.typeMembers)
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY(let selection): members.formUnion(selection.typeMembers)
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE(let selection): members.formUnion(selection.typeMembers)
      case ._PRODUCT_DEFINITION(let selection): members.formUnion(selection.typeMembers)
      case ._PRODUCT_DEFINITION_FORMATION(let selection): members.formUnion(selection.typeMembers)
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let selection): members.formUnion(selection.typeMembers)
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): members.formUnion(selection.typeMembers)
      case ._PRODUCT_DEFINITION_SUBSTITUTE(let selection): members.formUnion(selection.typeMembers)
      case ._PRODUCT_IDENTIFICATION(let selection): members.formUnion(selection.typeMembers)
      case ._PROPERTY_DEFINITION(let selection): members.formUnion(selection.typeMembers)
      case ._RESOURCE_PROPERTY(let selection): members.formUnion(selection.typeMembers)
      case ._SHAPE_ASPECT(let selection): members.formUnion(selection.typeMembers)
      case ._SHAPE_REPRESENTATION(let selection): members.formUnion(selection.typeMembers)
      case ._VERSIONED_ACTION_REQUEST(let selection): members.formUnion(selection.typeMembers)
      }
      return members
    }

    public var entityReference: SDAI.EntityReference? {
      switch self {
      case ._ACTION(let selection): return selection.entityReference
      case ._ACTION_METHOD(let selection): return selection.entityReference
      case ._ACTION_PROPERTY(let selection): return selection.entityReference
      case ._ACTION_RELATIONSHIP(let selection): return selection.entityReference
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let selection): return selection.entityReference
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let selection): return selection.entityReference
      case ._CONFIGURATION_DESIGN(let selection): return selection.entityReference
      case ._CONFIGURATION_EFFECTIVITY(let selection): return selection.entityReference
      case ._CONFIGURATION_ITEM(let selection): return selection.entityReference
      case ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(let selection): return selection.entityReference
      case ._CONTRACT(let selection): return selection.entityReference
      case ._DOCUMENT_FILE(let selection): return selection.entityReference
      case ._DRAUGHTING_MODEL(let selection): return selection.entityReference
      case ._DRAWING_REVISION(let selection): return selection.entityReference
      case ._EXECUTED_ACTION(let selection): return selection.entityReference
      case ._GENERAL_PROPERTY(let selection): return selection.entityReference
      case ._MATERIAL_DESIGNATION(let selection): return selection.entityReference
      case ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(let selection): return selection.entityReference
      case ._ORGANIZATION(let selection): return selection.entityReference
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.entityReference
      case ._PERSON(let selection): return selection.entityReference
      case ._PERSON_AND_ORGANIZATION(let selection): return selection.entityReference
      case ._PRESENTATION_AREA(let selection): return selection.entityReference
      case ._PRODUCT(let selection): return selection.entityReference
      case ._PRODUCT_CONCEPT(let selection): return selection.entityReference
      case ._PRODUCT_CONCEPT_FEATURE(let selection): return selection.entityReference
      case ._PRODUCT_CONCEPT_FEATURE_ASSOCIATION(let selection): return selection.entityReference
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY(let selection): return selection.entityReference
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE(let selection): return selection.entityReference
      case ._PRODUCT_DEFINITION(let selection): return selection.entityReference
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.entityReference
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let selection): return selection.entityReference
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.entityReference
      case ._PRODUCT_DEFINITION_SUBSTITUTE(let selection): return selection.entityReference
      case ._PRODUCT_IDENTIFICATION(let selection): return selection.entityReference
      case ._PROPERTY_DEFINITION(let selection): return selection.entityReference
      case ._RESOURCE_PROPERTY(let selection): return selection.entityReference
      case ._SHAPE_ASPECT(let selection): return selection.entityReference
      case ._SHAPE_REPRESENTATION(let selection): return selection.entityReference
      case ._VERSIONED_ACTION_REQUEST(let selection): return selection.entityReference
      }
    }
    public var stringValue: SDAI.STRING? {
      switch self {
      case ._ACTION(let selection): return selection.stringValue
      case ._ACTION_METHOD(let selection): return selection.stringValue
      case ._ACTION_PROPERTY(let selection): return selection.stringValue
      case ._ACTION_RELATIONSHIP(let selection): return selection.stringValue
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let selection): return selection.stringValue
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let selection): return selection.stringValue
      case ._CONFIGURATION_DESIGN(let selection): return selection.stringValue
      case ._CONFIGURATION_EFFECTIVITY(let selection): return selection.stringValue
      case ._CONFIGURATION_ITEM(let selection): return selection.stringValue
      case ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(let selection): return selection.stringValue
      case ._CONTRACT(let selection): return selection.stringValue
      case ._DOCUMENT_FILE(let selection): return selection.stringValue
      case ._DRAUGHTING_MODEL(let selection): return selection.stringValue
      case ._DRAWING_REVISION(let selection): return selection.stringValue
      case ._EXECUTED_ACTION(let selection): return selection.stringValue
      case ._GENERAL_PROPERTY(let selection): return selection.stringValue
      case ._MATERIAL_DESIGNATION(let selection): return selection.stringValue
      case ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(let selection): return selection.stringValue
      case ._ORGANIZATION(let selection): return selection.stringValue
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.stringValue
      case ._PERSON(let selection): return selection.stringValue
      case ._PERSON_AND_ORGANIZATION(let selection): return selection.stringValue
      case ._PRESENTATION_AREA(let selection): return selection.stringValue
      case ._PRODUCT(let selection): return selection.stringValue
      case ._PRODUCT_CONCEPT(let selection): return selection.stringValue
      case ._PRODUCT_CONCEPT_FEATURE(let selection): return selection.stringValue
      case ._PRODUCT_CONCEPT_FEATURE_ASSOCIATION(let selection): return selection.stringValue
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY(let selection): return selection.stringValue
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE(let selection): return selection.stringValue
      case ._PRODUCT_DEFINITION(let selection): return selection.stringValue
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.stringValue
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let selection): return selection.stringValue
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.stringValue
      case ._PRODUCT_DEFINITION_SUBSTITUTE(let selection): return selection.stringValue
      case ._PRODUCT_IDENTIFICATION(let selection): return selection.stringValue
      case ._PROPERTY_DEFINITION(let selection): return selection.stringValue
      case ._RESOURCE_PROPERTY(let selection): return selection.stringValue
      case ._SHAPE_ASPECT(let selection): return selection.stringValue
      case ._SHAPE_REPRESENTATION(let selection): return selection.stringValue
      case ._VERSIONED_ACTION_REQUEST(let selection): return selection.stringValue
      }
    }
    public var binaryValue: SDAI.BINARY? {
      switch self {
      case ._ACTION(let selection): return selection.binaryValue
      case ._ACTION_METHOD(let selection): return selection.binaryValue
      case ._ACTION_PROPERTY(let selection): return selection.binaryValue
      case ._ACTION_RELATIONSHIP(let selection): return selection.binaryValue
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let selection): return selection.binaryValue
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let selection): return selection.binaryValue
      case ._CONFIGURATION_DESIGN(let selection): return selection.binaryValue
      case ._CONFIGURATION_EFFECTIVITY(let selection): return selection.binaryValue
      case ._CONFIGURATION_ITEM(let selection): return selection.binaryValue
      case ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(let selection): return selection.binaryValue
      case ._CONTRACT(let selection): return selection.binaryValue
      case ._DOCUMENT_FILE(let selection): return selection.binaryValue
      case ._DRAUGHTING_MODEL(let selection): return selection.binaryValue
      case ._DRAWING_REVISION(let selection): return selection.binaryValue
      case ._EXECUTED_ACTION(let selection): return selection.binaryValue
      case ._GENERAL_PROPERTY(let selection): return selection.binaryValue
      case ._MATERIAL_DESIGNATION(let selection): return selection.binaryValue
      case ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(let selection): return selection.binaryValue
      case ._ORGANIZATION(let selection): return selection.binaryValue
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.binaryValue
      case ._PERSON(let selection): return selection.binaryValue
      case ._PERSON_AND_ORGANIZATION(let selection): return selection.binaryValue
      case ._PRESENTATION_AREA(let selection): return selection.binaryValue
      case ._PRODUCT(let selection): return selection.binaryValue
      case ._PRODUCT_CONCEPT(let selection): return selection.binaryValue
      case ._PRODUCT_CONCEPT_FEATURE(let selection): return selection.binaryValue
      case ._PRODUCT_CONCEPT_FEATURE_ASSOCIATION(let selection): return selection.binaryValue
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY(let selection): return selection.binaryValue
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE(let selection): return selection.binaryValue
      case ._PRODUCT_DEFINITION(let selection): return selection.binaryValue
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.binaryValue
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let selection): return selection.binaryValue
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.binaryValue
      case ._PRODUCT_DEFINITION_SUBSTITUTE(let selection): return selection.binaryValue
      case ._PRODUCT_IDENTIFICATION(let selection): return selection.binaryValue
      case ._PROPERTY_DEFINITION(let selection): return selection.binaryValue
      case ._RESOURCE_PROPERTY(let selection): return selection.binaryValue
      case ._SHAPE_ASPECT(let selection): return selection.binaryValue
      case ._SHAPE_REPRESENTATION(let selection): return selection.binaryValue
      case ._VERSIONED_ACTION_REQUEST(let selection): return selection.binaryValue
      }
    }
    public var logicalValue: SDAI.LOGICAL? {
      switch self {
      case ._ACTION(let selection): return selection.logicalValue
      case ._ACTION_METHOD(let selection): return selection.logicalValue
      case ._ACTION_PROPERTY(let selection): return selection.logicalValue
      case ._ACTION_RELATIONSHIP(let selection): return selection.logicalValue
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let selection): return selection.logicalValue
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let selection): return selection.logicalValue
      case ._CONFIGURATION_DESIGN(let selection): return selection.logicalValue
      case ._CONFIGURATION_EFFECTIVITY(let selection): return selection.logicalValue
      case ._CONFIGURATION_ITEM(let selection): return selection.logicalValue
      case ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(let selection): return selection.logicalValue
      case ._CONTRACT(let selection): return selection.logicalValue
      case ._DOCUMENT_FILE(let selection): return selection.logicalValue
      case ._DRAUGHTING_MODEL(let selection): return selection.logicalValue
      case ._DRAWING_REVISION(let selection): return selection.logicalValue
      case ._EXECUTED_ACTION(let selection): return selection.logicalValue
      case ._GENERAL_PROPERTY(let selection): return selection.logicalValue
      case ._MATERIAL_DESIGNATION(let selection): return selection.logicalValue
      case ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(let selection): return selection.logicalValue
      case ._ORGANIZATION(let selection): return selection.logicalValue
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.logicalValue
      case ._PERSON(let selection): return selection.logicalValue
      case ._PERSON_AND_ORGANIZATION(let selection): return selection.logicalValue
      case ._PRESENTATION_AREA(let selection): return selection.logicalValue
      case ._PRODUCT(let selection): return selection.logicalValue
      case ._PRODUCT_CONCEPT(let selection): return selection.logicalValue
      case ._PRODUCT_CONCEPT_FEATURE(let selection): return selection.logicalValue
      case ._PRODUCT_CONCEPT_FEATURE_ASSOCIATION(let selection): return selection.logicalValue
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY(let selection): return selection.logicalValue
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE(let selection): return selection.logicalValue
      case ._PRODUCT_DEFINITION(let selection): return selection.logicalValue
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.logicalValue
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let selection): return selection.logicalValue
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.logicalValue
      case ._PRODUCT_DEFINITION_SUBSTITUTE(let selection): return selection.logicalValue
      case ._PRODUCT_IDENTIFICATION(let selection): return selection.logicalValue
      case ._PROPERTY_DEFINITION(let selection): return selection.logicalValue
      case ._RESOURCE_PROPERTY(let selection): return selection.logicalValue
      case ._SHAPE_ASPECT(let selection): return selection.logicalValue
      case ._SHAPE_REPRESENTATION(let selection): return selection.logicalValue
      case ._VERSIONED_ACTION_REQUEST(let selection): return selection.logicalValue
      }
    }
    public var booleanValue: SDAI.BOOLEAN? {
      switch self {
      case ._ACTION(let selection): return selection.booleanValue
      case ._ACTION_METHOD(let selection): return selection.booleanValue
      case ._ACTION_PROPERTY(let selection): return selection.booleanValue
      case ._ACTION_RELATIONSHIP(let selection): return selection.booleanValue
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let selection): return selection.booleanValue
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let selection): return selection.booleanValue
      case ._CONFIGURATION_DESIGN(let selection): return selection.booleanValue
      case ._CONFIGURATION_EFFECTIVITY(let selection): return selection.booleanValue
      case ._CONFIGURATION_ITEM(let selection): return selection.booleanValue
      case ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(let selection): return selection.booleanValue
      case ._CONTRACT(let selection): return selection.booleanValue
      case ._DOCUMENT_FILE(let selection): return selection.booleanValue
      case ._DRAUGHTING_MODEL(let selection): return selection.booleanValue
      case ._DRAWING_REVISION(let selection): return selection.booleanValue
      case ._EXECUTED_ACTION(let selection): return selection.booleanValue
      case ._GENERAL_PROPERTY(let selection): return selection.booleanValue
      case ._MATERIAL_DESIGNATION(let selection): return selection.booleanValue
      case ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(let selection): return selection.booleanValue
      case ._ORGANIZATION(let selection): return selection.booleanValue
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.booleanValue
      case ._PERSON(let selection): return selection.booleanValue
      case ._PERSON_AND_ORGANIZATION(let selection): return selection.booleanValue
      case ._PRESENTATION_AREA(let selection): return selection.booleanValue
      case ._PRODUCT(let selection): return selection.booleanValue
      case ._PRODUCT_CONCEPT(let selection): return selection.booleanValue
      case ._PRODUCT_CONCEPT_FEATURE(let selection): return selection.booleanValue
      case ._PRODUCT_CONCEPT_FEATURE_ASSOCIATION(let selection): return selection.booleanValue
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY(let selection): return selection.booleanValue
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE(let selection): return selection.booleanValue
      case ._PRODUCT_DEFINITION(let selection): return selection.booleanValue
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.booleanValue
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let selection): return selection.booleanValue
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.booleanValue
      case ._PRODUCT_DEFINITION_SUBSTITUTE(let selection): return selection.booleanValue
      case ._PRODUCT_IDENTIFICATION(let selection): return selection.booleanValue
      case ._PROPERTY_DEFINITION(let selection): return selection.booleanValue
      case ._RESOURCE_PROPERTY(let selection): return selection.booleanValue
      case ._SHAPE_ASPECT(let selection): return selection.booleanValue
      case ._SHAPE_REPRESENTATION(let selection): return selection.booleanValue
      case ._VERSIONED_ACTION_REQUEST(let selection): return selection.booleanValue
      }
    }
    public var numberValue: SDAI.NUMBER? {
      switch self {
      case ._ACTION(let selection): return selection.numberValue
      case ._ACTION_METHOD(let selection): return selection.numberValue
      case ._ACTION_PROPERTY(let selection): return selection.numberValue
      case ._ACTION_RELATIONSHIP(let selection): return selection.numberValue
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let selection): return selection.numberValue
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let selection): return selection.numberValue
      case ._CONFIGURATION_DESIGN(let selection): return selection.numberValue
      case ._CONFIGURATION_EFFECTIVITY(let selection): return selection.numberValue
      case ._CONFIGURATION_ITEM(let selection): return selection.numberValue
      case ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(let selection): return selection.numberValue
      case ._CONTRACT(let selection): return selection.numberValue
      case ._DOCUMENT_FILE(let selection): return selection.numberValue
      case ._DRAUGHTING_MODEL(let selection): return selection.numberValue
      case ._DRAWING_REVISION(let selection): return selection.numberValue
      case ._EXECUTED_ACTION(let selection): return selection.numberValue
      case ._GENERAL_PROPERTY(let selection): return selection.numberValue
      case ._MATERIAL_DESIGNATION(let selection): return selection.numberValue
      case ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(let selection): return selection.numberValue
      case ._ORGANIZATION(let selection): return selection.numberValue
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.numberValue
      case ._PERSON(let selection): return selection.numberValue
      case ._PERSON_AND_ORGANIZATION(let selection): return selection.numberValue
      case ._PRESENTATION_AREA(let selection): return selection.numberValue
      case ._PRODUCT(let selection): return selection.numberValue
      case ._PRODUCT_CONCEPT(let selection): return selection.numberValue
      case ._PRODUCT_CONCEPT_FEATURE(let selection): return selection.numberValue
      case ._PRODUCT_CONCEPT_FEATURE_ASSOCIATION(let selection): return selection.numberValue
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY(let selection): return selection.numberValue
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE(let selection): return selection.numberValue
      case ._PRODUCT_DEFINITION(let selection): return selection.numberValue
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.numberValue
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let selection): return selection.numberValue
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.numberValue
      case ._PRODUCT_DEFINITION_SUBSTITUTE(let selection): return selection.numberValue
      case ._PRODUCT_IDENTIFICATION(let selection): return selection.numberValue
      case ._PROPERTY_DEFINITION(let selection): return selection.numberValue
      case ._RESOURCE_PROPERTY(let selection): return selection.numberValue
      case ._SHAPE_ASPECT(let selection): return selection.numberValue
      case ._SHAPE_REPRESENTATION(let selection): return selection.numberValue
      case ._VERSIONED_ACTION_REQUEST(let selection): return selection.numberValue
      }
    }
    public var realValue: SDAI.REAL? {
      switch self {
      case ._ACTION(let selection): return selection.realValue
      case ._ACTION_METHOD(let selection): return selection.realValue
      case ._ACTION_PROPERTY(let selection): return selection.realValue
      case ._ACTION_RELATIONSHIP(let selection): return selection.realValue
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let selection): return selection.realValue
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let selection): return selection.realValue
      case ._CONFIGURATION_DESIGN(let selection): return selection.realValue
      case ._CONFIGURATION_EFFECTIVITY(let selection): return selection.realValue
      case ._CONFIGURATION_ITEM(let selection): return selection.realValue
      case ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(let selection): return selection.realValue
      case ._CONTRACT(let selection): return selection.realValue
      case ._DOCUMENT_FILE(let selection): return selection.realValue
      case ._DRAUGHTING_MODEL(let selection): return selection.realValue
      case ._DRAWING_REVISION(let selection): return selection.realValue
      case ._EXECUTED_ACTION(let selection): return selection.realValue
      case ._GENERAL_PROPERTY(let selection): return selection.realValue
      case ._MATERIAL_DESIGNATION(let selection): return selection.realValue
      case ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(let selection): return selection.realValue
      case ._ORGANIZATION(let selection): return selection.realValue
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.realValue
      case ._PERSON(let selection): return selection.realValue
      case ._PERSON_AND_ORGANIZATION(let selection): return selection.realValue
      case ._PRESENTATION_AREA(let selection): return selection.realValue
      case ._PRODUCT(let selection): return selection.realValue
      case ._PRODUCT_CONCEPT(let selection): return selection.realValue
      case ._PRODUCT_CONCEPT_FEATURE(let selection): return selection.realValue
      case ._PRODUCT_CONCEPT_FEATURE_ASSOCIATION(let selection): return selection.realValue
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY(let selection): return selection.realValue
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE(let selection): return selection.realValue
      case ._PRODUCT_DEFINITION(let selection): return selection.realValue
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.realValue
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let selection): return selection.realValue
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.realValue
      case ._PRODUCT_DEFINITION_SUBSTITUTE(let selection): return selection.realValue
      case ._PRODUCT_IDENTIFICATION(let selection): return selection.realValue
      case ._PROPERTY_DEFINITION(let selection): return selection.realValue
      case ._RESOURCE_PROPERTY(let selection): return selection.realValue
      case ._SHAPE_ASPECT(let selection): return selection.realValue
      case ._SHAPE_REPRESENTATION(let selection): return selection.realValue
      case ._VERSIONED_ACTION_REQUEST(let selection): return selection.realValue
      }
    }
    public var integerValue: SDAI.INTEGER? {
      switch self {
      case ._ACTION(let selection): return selection.integerValue
      case ._ACTION_METHOD(let selection): return selection.integerValue
      case ._ACTION_PROPERTY(let selection): return selection.integerValue
      case ._ACTION_RELATIONSHIP(let selection): return selection.integerValue
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let selection): return selection.integerValue
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let selection): return selection.integerValue
      case ._CONFIGURATION_DESIGN(let selection): return selection.integerValue
      case ._CONFIGURATION_EFFECTIVITY(let selection): return selection.integerValue
      case ._CONFIGURATION_ITEM(let selection): return selection.integerValue
      case ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(let selection): return selection.integerValue
      case ._CONTRACT(let selection): return selection.integerValue
      case ._DOCUMENT_FILE(let selection): return selection.integerValue
      case ._DRAUGHTING_MODEL(let selection): return selection.integerValue
      case ._DRAWING_REVISION(let selection): return selection.integerValue
      case ._EXECUTED_ACTION(let selection): return selection.integerValue
      case ._GENERAL_PROPERTY(let selection): return selection.integerValue
      case ._MATERIAL_DESIGNATION(let selection): return selection.integerValue
      case ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(let selection): return selection.integerValue
      case ._ORGANIZATION(let selection): return selection.integerValue
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.integerValue
      case ._PERSON(let selection): return selection.integerValue
      case ._PERSON_AND_ORGANIZATION(let selection): return selection.integerValue
      case ._PRESENTATION_AREA(let selection): return selection.integerValue
      case ._PRODUCT(let selection): return selection.integerValue
      case ._PRODUCT_CONCEPT(let selection): return selection.integerValue
      case ._PRODUCT_CONCEPT_FEATURE(let selection): return selection.integerValue
      case ._PRODUCT_CONCEPT_FEATURE_ASSOCIATION(let selection): return selection.integerValue
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY(let selection): return selection.integerValue
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE(let selection): return selection.integerValue
      case ._PRODUCT_DEFINITION(let selection): return selection.integerValue
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.integerValue
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let selection): return selection.integerValue
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.integerValue
      case ._PRODUCT_DEFINITION_SUBSTITUTE(let selection): return selection.integerValue
      case ._PRODUCT_IDENTIFICATION(let selection): return selection.integerValue
      case ._PROPERTY_DEFINITION(let selection): return selection.integerValue
      case ._RESOURCE_PROPERTY(let selection): return selection.integerValue
      case ._SHAPE_ASPECT(let selection): return selection.integerValue
      case ._SHAPE_REPRESENTATION(let selection): return selection.integerValue
      case ._VERSIONED_ACTION_REQUEST(let selection): return selection.integerValue
      }
    }
    public var genericEnumValue: SDAI.GenericEnumValue? {
      switch self {
      case ._ACTION(let selection): return selection.genericEnumValue
      case ._ACTION_METHOD(let selection): return selection.genericEnumValue
      case ._ACTION_PROPERTY(let selection): return selection.genericEnumValue
      case ._ACTION_RELATIONSHIP(let selection): return selection.genericEnumValue
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let selection): return selection.genericEnumValue
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let selection): return selection.genericEnumValue
      case ._CONFIGURATION_DESIGN(let selection): return selection.genericEnumValue
      case ._CONFIGURATION_EFFECTIVITY(let selection): return selection.genericEnumValue
      case ._CONFIGURATION_ITEM(let selection): return selection.genericEnumValue
      case ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(let selection): return selection.genericEnumValue
      case ._CONTRACT(let selection): return selection.genericEnumValue
      case ._DOCUMENT_FILE(let selection): return selection.genericEnumValue
      case ._DRAUGHTING_MODEL(let selection): return selection.genericEnumValue
      case ._DRAWING_REVISION(let selection): return selection.genericEnumValue
      case ._EXECUTED_ACTION(let selection): return selection.genericEnumValue
      case ._GENERAL_PROPERTY(let selection): return selection.genericEnumValue
      case ._MATERIAL_DESIGNATION(let selection): return selection.genericEnumValue
      case ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(let selection): return selection.genericEnumValue
      case ._ORGANIZATION(let selection): return selection.genericEnumValue
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.genericEnumValue
      case ._PERSON(let selection): return selection.genericEnumValue
      case ._PERSON_AND_ORGANIZATION(let selection): return selection.genericEnumValue
      case ._PRESENTATION_AREA(let selection): return selection.genericEnumValue
      case ._PRODUCT(let selection): return selection.genericEnumValue
      case ._PRODUCT_CONCEPT(let selection): return selection.genericEnumValue
      case ._PRODUCT_CONCEPT_FEATURE(let selection): return selection.genericEnumValue
      case ._PRODUCT_CONCEPT_FEATURE_ASSOCIATION(let selection): return selection.genericEnumValue
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY(let selection): return selection.genericEnumValue
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE(let selection): return selection.genericEnumValue
      case ._PRODUCT_DEFINITION(let selection): return selection.genericEnumValue
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.genericEnumValue
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let selection): return selection.genericEnumValue
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.genericEnumValue
      case ._PRODUCT_DEFINITION_SUBSTITUTE(let selection): return selection.genericEnumValue
      case ._PRODUCT_IDENTIFICATION(let selection): return selection.genericEnumValue
      case ._PROPERTY_DEFINITION(let selection): return selection.genericEnumValue
      case ._RESOURCE_PROPERTY(let selection): return selection.genericEnumValue
      case ._SHAPE_ASPECT(let selection): return selection.genericEnumValue
      case ._SHAPE_REPRESENTATION(let selection): return selection.genericEnumValue
      case ._VERSIONED_ACTION_REQUEST(let selection): return selection.genericEnumValue
      }
    }
    public func arrayOptionalValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.ARRAY_OPTIONAL<ELEM>? {
      switch self {
      case ._ACTION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._ACTION_METHOD(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._ACTION_PROPERTY(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._ACTION_RELATIONSHIP(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._CONFIGURATION_DESIGN(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._CONFIGURATION_EFFECTIVITY(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._CONFIGURATION_ITEM(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._CONTRACT(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._DOCUMENT_FILE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._DRAUGHTING_MODEL(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._DRAWING_REVISION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._EXECUTED_ACTION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._GENERAL_PROPERTY(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._MATERIAL_DESIGNATION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._ORGANIZATION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PERSON(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PERSON_AND_ORGANIZATION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PRESENTATION_AREA(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PRODUCT(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PRODUCT_CONCEPT(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PRODUCT_CONCEPT_FEATURE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PRODUCT_CONCEPT_FEATURE_ASSOCIATION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PRODUCT_DEFINITION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_SUBSTITUTE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PRODUCT_IDENTIFICATION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PROPERTY_DEFINITION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._RESOURCE_PROPERTY(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._SHAPE_ASPECT(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._SHAPE_REPRESENTATION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._VERSIONED_ACTION_REQUEST(let selection): return selection.arrayOptionalValue(elementType:elementType)
      }
    }
    public func arrayValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.ARRAY<ELEM>? {
      switch self {
      case ._ACTION(let selection): return selection.arrayValue(elementType:elementType)
      case ._ACTION_METHOD(let selection): return selection.arrayValue(elementType:elementType)
      case ._ACTION_PROPERTY(let selection): return selection.arrayValue(elementType:elementType)
      case ._ACTION_RELATIONSHIP(let selection): return selection.arrayValue(elementType:elementType)
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let selection): return selection.arrayValue(elementType:elementType)
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let selection): return selection.arrayValue(elementType:elementType)
      case ._CONFIGURATION_DESIGN(let selection): return selection.arrayValue(elementType:elementType)
      case ._CONFIGURATION_EFFECTIVITY(let selection): return selection.arrayValue(elementType:elementType)
      case ._CONFIGURATION_ITEM(let selection): return selection.arrayValue(elementType:elementType)
      case ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(let selection): return selection.arrayValue(elementType:elementType)
      case ._CONTRACT(let selection): return selection.arrayValue(elementType:elementType)
      case ._DOCUMENT_FILE(let selection): return selection.arrayValue(elementType:elementType)
      case ._DRAUGHTING_MODEL(let selection): return selection.arrayValue(elementType:elementType)
      case ._DRAWING_REVISION(let selection): return selection.arrayValue(elementType:elementType)
      case ._EXECUTED_ACTION(let selection): return selection.arrayValue(elementType:elementType)
      case ._GENERAL_PROPERTY(let selection): return selection.arrayValue(elementType:elementType)
      case ._MATERIAL_DESIGNATION(let selection): return selection.arrayValue(elementType:elementType)
      case ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(let selection): return selection.arrayValue(elementType:elementType)
      case ._ORGANIZATION(let selection): return selection.arrayValue(elementType:elementType)
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.arrayValue(elementType:elementType)
      case ._PERSON(let selection): return selection.arrayValue(elementType:elementType)
      case ._PERSON_AND_ORGANIZATION(let selection): return selection.arrayValue(elementType:elementType)
      case ._PRESENTATION_AREA(let selection): return selection.arrayValue(elementType:elementType)
      case ._PRODUCT(let selection): return selection.arrayValue(elementType:elementType)
      case ._PRODUCT_CONCEPT(let selection): return selection.arrayValue(elementType:elementType)
      case ._PRODUCT_CONCEPT_FEATURE(let selection): return selection.arrayValue(elementType:elementType)
      case ._PRODUCT_CONCEPT_FEATURE_ASSOCIATION(let selection): return selection.arrayValue(elementType:elementType)
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY(let selection): return selection.arrayValue(elementType:elementType)
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE(let selection): return selection.arrayValue(elementType:elementType)
      case ._PRODUCT_DEFINITION(let selection): return selection.arrayValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.arrayValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let selection): return selection.arrayValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.arrayValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_SUBSTITUTE(let selection): return selection.arrayValue(elementType:elementType)
      case ._PRODUCT_IDENTIFICATION(let selection): return selection.arrayValue(elementType:elementType)
      case ._PROPERTY_DEFINITION(let selection): return selection.arrayValue(elementType:elementType)
      case ._RESOURCE_PROPERTY(let selection): return selection.arrayValue(elementType:elementType)
      case ._SHAPE_ASPECT(let selection): return selection.arrayValue(elementType:elementType)
      case ._SHAPE_REPRESENTATION(let selection): return selection.arrayValue(elementType:elementType)
      case ._VERSIONED_ACTION_REQUEST(let selection): return selection.arrayValue(elementType:elementType)
      }
    }
    public func listValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.LIST<ELEM>? {
      switch self {
      case ._ACTION(let selection): return selection.listValue(elementType:elementType)
      case ._ACTION_METHOD(let selection): return selection.listValue(elementType:elementType)
      case ._ACTION_PROPERTY(let selection): return selection.listValue(elementType:elementType)
      case ._ACTION_RELATIONSHIP(let selection): return selection.listValue(elementType:elementType)
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let selection): return selection.listValue(elementType:elementType)
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let selection): return selection.listValue(elementType:elementType)
      case ._CONFIGURATION_DESIGN(let selection): return selection.listValue(elementType:elementType)
      case ._CONFIGURATION_EFFECTIVITY(let selection): return selection.listValue(elementType:elementType)
      case ._CONFIGURATION_ITEM(let selection): return selection.listValue(elementType:elementType)
      case ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(let selection): return selection.listValue(elementType:elementType)
      case ._CONTRACT(let selection): return selection.listValue(elementType:elementType)
      case ._DOCUMENT_FILE(let selection): return selection.listValue(elementType:elementType)
      case ._DRAUGHTING_MODEL(let selection): return selection.listValue(elementType:elementType)
      case ._DRAWING_REVISION(let selection): return selection.listValue(elementType:elementType)
      case ._EXECUTED_ACTION(let selection): return selection.listValue(elementType:elementType)
      case ._GENERAL_PROPERTY(let selection): return selection.listValue(elementType:elementType)
      case ._MATERIAL_DESIGNATION(let selection): return selection.listValue(elementType:elementType)
      case ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(let selection): return selection.listValue(elementType:elementType)
      case ._ORGANIZATION(let selection): return selection.listValue(elementType:elementType)
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.listValue(elementType:elementType)
      case ._PERSON(let selection): return selection.listValue(elementType:elementType)
      case ._PERSON_AND_ORGANIZATION(let selection): return selection.listValue(elementType:elementType)
      case ._PRESENTATION_AREA(let selection): return selection.listValue(elementType:elementType)
      case ._PRODUCT(let selection): return selection.listValue(elementType:elementType)
      case ._PRODUCT_CONCEPT(let selection): return selection.listValue(elementType:elementType)
      case ._PRODUCT_CONCEPT_FEATURE(let selection): return selection.listValue(elementType:elementType)
      case ._PRODUCT_CONCEPT_FEATURE_ASSOCIATION(let selection): return selection.listValue(elementType:elementType)
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY(let selection): return selection.listValue(elementType:elementType)
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE(let selection): return selection.listValue(elementType:elementType)
      case ._PRODUCT_DEFINITION(let selection): return selection.listValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.listValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let selection): return selection.listValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.listValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_SUBSTITUTE(let selection): return selection.listValue(elementType:elementType)
      case ._PRODUCT_IDENTIFICATION(let selection): return selection.listValue(elementType:elementType)
      case ._PROPERTY_DEFINITION(let selection): return selection.listValue(elementType:elementType)
      case ._RESOURCE_PROPERTY(let selection): return selection.listValue(elementType:elementType)
      case ._SHAPE_ASPECT(let selection): return selection.listValue(elementType:elementType)
      case ._SHAPE_REPRESENTATION(let selection): return selection.listValue(elementType:elementType)
      case ._VERSIONED_ACTION_REQUEST(let selection): return selection.listValue(elementType:elementType)
      }
    }
    public func bagValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.BAG<ELEM>? {
      switch self {
      case ._ACTION(let selection): return selection.bagValue(elementType:elementType)
      case ._ACTION_METHOD(let selection): return selection.bagValue(elementType:elementType)
      case ._ACTION_PROPERTY(let selection): return selection.bagValue(elementType:elementType)
      case ._ACTION_RELATIONSHIP(let selection): return selection.bagValue(elementType:elementType)
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let selection): return selection.bagValue(elementType:elementType)
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let selection): return selection.bagValue(elementType:elementType)
      case ._CONFIGURATION_DESIGN(let selection): return selection.bagValue(elementType:elementType)
      case ._CONFIGURATION_EFFECTIVITY(let selection): return selection.bagValue(elementType:elementType)
      case ._CONFIGURATION_ITEM(let selection): return selection.bagValue(elementType:elementType)
      case ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(let selection): return selection.bagValue(elementType:elementType)
      case ._CONTRACT(let selection): return selection.bagValue(elementType:elementType)
      case ._DOCUMENT_FILE(let selection): return selection.bagValue(elementType:elementType)
      case ._DRAUGHTING_MODEL(let selection): return selection.bagValue(elementType:elementType)
      case ._DRAWING_REVISION(let selection): return selection.bagValue(elementType:elementType)
      case ._EXECUTED_ACTION(let selection): return selection.bagValue(elementType:elementType)
      case ._GENERAL_PROPERTY(let selection): return selection.bagValue(elementType:elementType)
      case ._MATERIAL_DESIGNATION(let selection): return selection.bagValue(elementType:elementType)
      case ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(let selection): return selection.bagValue(elementType:elementType)
      case ._ORGANIZATION(let selection): return selection.bagValue(elementType:elementType)
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.bagValue(elementType:elementType)
      case ._PERSON(let selection): return selection.bagValue(elementType:elementType)
      case ._PERSON_AND_ORGANIZATION(let selection): return selection.bagValue(elementType:elementType)
      case ._PRESENTATION_AREA(let selection): return selection.bagValue(elementType:elementType)
      case ._PRODUCT(let selection): return selection.bagValue(elementType:elementType)
      case ._PRODUCT_CONCEPT(let selection): return selection.bagValue(elementType:elementType)
      case ._PRODUCT_CONCEPT_FEATURE(let selection): return selection.bagValue(elementType:elementType)
      case ._PRODUCT_CONCEPT_FEATURE_ASSOCIATION(let selection): return selection.bagValue(elementType:elementType)
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY(let selection): return selection.bagValue(elementType:elementType)
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE(let selection): return selection.bagValue(elementType:elementType)
      case ._PRODUCT_DEFINITION(let selection): return selection.bagValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.bagValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let selection): return selection.bagValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.bagValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_SUBSTITUTE(let selection): return selection.bagValue(elementType:elementType)
      case ._PRODUCT_IDENTIFICATION(let selection): return selection.bagValue(elementType:elementType)
      case ._PROPERTY_DEFINITION(let selection): return selection.bagValue(elementType:elementType)
      case ._RESOURCE_PROPERTY(let selection): return selection.bagValue(elementType:elementType)
      case ._SHAPE_ASPECT(let selection): return selection.bagValue(elementType:elementType)
      case ._SHAPE_REPRESENTATION(let selection): return selection.bagValue(elementType:elementType)
      case ._VERSIONED_ACTION_REQUEST(let selection): return selection.bagValue(elementType:elementType)
      }
    }
    public func setValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.SET<ELEM>? {
      switch self {
      case ._ACTION(let selection): return selection.setValue(elementType:elementType)
      case ._ACTION_METHOD(let selection): return selection.setValue(elementType:elementType)
      case ._ACTION_PROPERTY(let selection): return selection.setValue(elementType:elementType)
      case ._ACTION_RELATIONSHIP(let selection): return selection.setValue(elementType:elementType)
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let selection): return selection.setValue(elementType:elementType)
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let selection): return selection.setValue(elementType:elementType)
      case ._CONFIGURATION_DESIGN(let selection): return selection.setValue(elementType:elementType)
      case ._CONFIGURATION_EFFECTIVITY(let selection): return selection.setValue(elementType:elementType)
      case ._CONFIGURATION_ITEM(let selection): return selection.setValue(elementType:elementType)
      case ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(let selection): return selection.setValue(elementType:elementType)
      case ._CONTRACT(let selection): return selection.setValue(elementType:elementType)
      case ._DOCUMENT_FILE(let selection): return selection.setValue(elementType:elementType)
      case ._DRAUGHTING_MODEL(let selection): return selection.setValue(elementType:elementType)
      case ._DRAWING_REVISION(let selection): return selection.setValue(elementType:elementType)
      case ._EXECUTED_ACTION(let selection): return selection.setValue(elementType:elementType)
      case ._GENERAL_PROPERTY(let selection): return selection.setValue(elementType:elementType)
      case ._MATERIAL_DESIGNATION(let selection): return selection.setValue(elementType:elementType)
      case ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(let selection): return selection.setValue(elementType:elementType)
      case ._ORGANIZATION(let selection): return selection.setValue(elementType:elementType)
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.setValue(elementType:elementType)
      case ._PERSON(let selection): return selection.setValue(elementType:elementType)
      case ._PERSON_AND_ORGANIZATION(let selection): return selection.setValue(elementType:elementType)
      case ._PRESENTATION_AREA(let selection): return selection.setValue(elementType:elementType)
      case ._PRODUCT(let selection): return selection.setValue(elementType:elementType)
      case ._PRODUCT_CONCEPT(let selection): return selection.setValue(elementType:elementType)
      case ._PRODUCT_CONCEPT_FEATURE(let selection): return selection.setValue(elementType:elementType)
      case ._PRODUCT_CONCEPT_FEATURE_ASSOCIATION(let selection): return selection.setValue(elementType:elementType)
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY(let selection): return selection.setValue(elementType:elementType)
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE(let selection): return selection.setValue(elementType:elementType)
      case ._PRODUCT_DEFINITION(let selection): return selection.setValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.setValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let selection): return selection.setValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.setValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_SUBSTITUTE(let selection): return selection.setValue(elementType:elementType)
      case ._PRODUCT_IDENTIFICATION(let selection): return selection.setValue(elementType:elementType)
      case ._PROPERTY_DEFINITION(let selection): return selection.setValue(elementType:elementType)
      case ._RESOURCE_PROPERTY(let selection): return selection.setValue(elementType:elementType)
      case ._SHAPE_ASPECT(let selection): return selection.setValue(elementType:elementType)
      case ._SHAPE_REPRESENTATION(let selection): return selection.setValue(elementType:elementType)
      case ._VERSIONED_ACTION_REQUEST(let selection): return selection.setValue(elementType:elementType)
      }
    }
    public func enumValue<ENUM:SDAIEnumerationType>(enumType:ENUM.Type) -> ENUM? {
      switch self {
      case ._ACTION(let selection): return selection.enumValue(enumType:enumType)
      case ._ACTION_METHOD(let selection): return selection.enumValue(enumType:enumType)
      case ._ACTION_PROPERTY(let selection): return selection.enumValue(enumType:enumType)
      case ._ACTION_RELATIONSHIP(let selection): return selection.enumValue(enumType:enumType)
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let selection): return selection.enumValue(enumType:enumType)
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let selection): return selection.enumValue(enumType:enumType)
      case ._CONFIGURATION_DESIGN(let selection): return selection.enumValue(enumType:enumType)
      case ._CONFIGURATION_EFFECTIVITY(let selection): return selection.enumValue(enumType:enumType)
      case ._CONFIGURATION_ITEM(let selection): return selection.enumValue(enumType:enumType)
      case ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(let selection): return selection.enumValue(enumType:enumType)
      case ._CONTRACT(let selection): return selection.enumValue(enumType:enumType)
      case ._DOCUMENT_FILE(let selection): return selection.enumValue(enumType:enumType)
      case ._DRAUGHTING_MODEL(let selection): return selection.enumValue(enumType:enumType)
      case ._DRAWING_REVISION(let selection): return selection.enumValue(enumType:enumType)
      case ._EXECUTED_ACTION(let selection): return selection.enumValue(enumType:enumType)
      case ._GENERAL_PROPERTY(let selection): return selection.enumValue(enumType:enumType)
      case ._MATERIAL_DESIGNATION(let selection): return selection.enumValue(enumType:enumType)
      case ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(let selection): return selection.enumValue(enumType:enumType)
      case ._ORGANIZATION(let selection): return selection.enumValue(enumType:enumType)
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.enumValue(enumType:enumType)
      case ._PERSON(let selection): return selection.enumValue(enumType:enumType)
      case ._PERSON_AND_ORGANIZATION(let selection): return selection.enumValue(enumType:enumType)
      case ._PRESENTATION_AREA(let selection): return selection.enumValue(enumType:enumType)
      case ._PRODUCT(let selection): return selection.enumValue(enumType:enumType)
      case ._PRODUCT_CONCEPT(let selection): return selection.enumValue(enumType:enumType)
      case ._PRODUCT_CONCEPT_FEATURE(let selection): return selection.enumValue(enumType:enumType)
      case ._PRODUCT_CONCEPT_FEATURE_ASSOCIATION(let selection): return selection.enumValue(enumType:enumType)
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY(let selection): return selection.enumValue(enumType:enumType)
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE(let selection): return selection.enumValue(enumType:enumType)
      case ._PRODUCT_DEFINITION(let selection): return selection.enumValue(enumType:enumType)
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.enumValue(enumType:enumType)
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let selection): return selection.enumValue(enumType:enumType)
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.enumValue(enumType:enumType)
      case ._PRODUCT_DEFINITION_SUBSTITUTE(let selection): return selection.enumValue(enumType:enumType)
      case ._PRODUCT_IDENTIFICATION(let selection): return selection.enumValue(enumType:enumType)
      case ._PROPERTY_DEFINITION(let selection): return selection.enumValue(enumType:enumType)
      case ._RESOURCE_PROPERTY(let selection): return selection.enumValue(enumType:enumType)
      case ._SHAPE_ASPECT(let selection): return selection.enumValue(enumType:enumType)
      case ._SHAPE_REPRESENTATION(let selection): return selection.enumValue(enumType:enumType)
      case ._VERSIONED_ACTION_REQUEST(let selection): return selection.enumValue(enumType:enumType)
      }
    }

    //MARK: SDAIUnderlyingType
    public typealias FundamentalType = Self
    public static var typeName: String = 
      "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ACTION_REQUEST_ITEM"
    public var asFundamentalType: FundamentalType { return self }

    //MARK: SDAIObservableAggregateElement
    public var entityReferences: AnySequence<SDAI.EntityReference> {
      switch self {
      case ._ACTION(let entity): return entity.entityReferences
      case ._ACTION_METHOD(let entity): return entity.entityReferences
      case ._ACTION_PROPERTY(let entity): return entity.entityReferences
      case ._ACTION_RELATIONSHIP(let entity): return entity.entityReferences
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let entity): return entity.entityReferences
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let entity): return entity.entityReferences
      case ._CONFIGURATION_DESIGN(let entity): return entity.entityReferences
      case ._CONFIGURATION_EFFECTIVITY(let entity): return entity.entityReferences
      case ._CONFIGURATION_ITEM(let entity): return entity.entityReferences
      case ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(let entity): return entity.entityReferences
      case ._CONTRACT(let entity): return entity.entityReferences
      case ._DOCUMENT_FILE(let entity): return entity.entityReferences
      case ._DRAUGHTING_MODEL(let entity): return entity.entityReferences
      case ._DRAWING_REVISION(let entity): return entity.entityReferences
      case ._EXECUTED_ACTION(let entity): return entity.entityReferences
      case ._GENERAL_PROPERTY(let entity): return entity.entityReferences
      case ._MATERIAL_DESIGNATION(let entity): return entity.entityReferences
      case ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(let entity): return entity.entityReferences
      case ._ORGANIZATION(let entity): return entity.entityReferences
      case ._ORGANIZATIONAL_PROJECT(let entity): return entity.entityReferences
      case ._PERSON(let entity): return entity.entityReferences
      case ._PERSON_AND_ORGANIZATION(let entity): return entity.entityReferences
      case ._PRESENTATION_AREA(let entity): return entity.entityReferences
      case ._PRODUCT(let entity): return entity.entityReferences
      case ._PRODUCT_CONCEPT(let entity): return entity.entityReferences
      case ._PRODUCT_CONCEPT_FEATURE(let entity): return entity.entityReferences
      case ._PRODUCT_CONCEPT_FEATURE_ASSOCIATION(let entity): return entity.entityReferences
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY(let entity): return entity.entityReferences
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE(let entity): return entity.entityReferences
      case ._PRODUCT_DEFINITION(let entity): return entity.entityReferences
      case ._PRODUCT_DEFINITION_FORMATION(let entity): return entity.entityReferences
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let entity): return entity.entityReferences
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.entityReferences
      case ._PRODUCT_DEFINITION_SUBSTITUTE(let entity): return entity.entityReferences
      case ._PRODUCT_IDENTIFICATION(let entity): return entity.entityReferences
      case ._PROPERTY_DEFINITION(let entity): return entity.entityReferences
      case ._RESOURCE_PROPERTY(let entity): return entity.entityReferences
      case ._SHAPE_ASPECT(let entity): return entity.entityReferences
      case ._SHAPE_REPRESENTATION(let entity): return entity.entityReferences
      case ._VERSIONED_ACTION_REQUEST(let entity): return entity.entityReferences
      }
    }

    public mutating func configure(with observer: SDAI.EntityReferenceObserver) {
      switch self {
      case ._ACTION(let entity): 
        entity.configure(with: observer)
        self = ._ACTION(entity)
      case ._ACTION_METHOD(let entity): 
        entity.configure(with: observer)
        self = ._ACTION_METHOD(entity)
      case ._ACTION_PROPERTY(let entity): 
        entity.configure(with: observer)
        self = ._ACTION_PROPERTY(entity)
      case ._ACTION_RELATIONSHIP(let entity): 
        entity.configure(with: observer)
        self = ._ACTION_RELATIONSHIP(entity)
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let entity): 
        entity.configure(with: observer)
        self = ._ALTERNATE_PRODUCT_RELATIONSHIP(entity)
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let entity): 
        entity.configure(with: observer)
        self = ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(entity)
      case ._CONFIGURATION_DESIGN(let entity): 
        entity.configure(with: observer)
        self = ._CONFIGURATION_DESIGN(entity)
      case ._CONFIGURATION_EFFECTIVITY(let entity): 
        entity.configure(with: observer)
        self = ._CONFIGURATION_EFFECTIVITY(entity)
      case ._CONFIGURATION_ITEM(let entity): 
        entity.configure(with: observer)
        self = ._CONFIGURATION_ITEM(entity)
      case ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(let entity): 
        entity.configure(with: observer)
        self = ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(entity)
      case ._CONTRACT(let entity): 
        entity.configure(with: observer)
        self = ._CONTRACT(entity)
      case ._DOCUMENT_FILE(let entity): 
        entity.configure(with: observer)
        self = ._DOCUMENT_FILE(entity)
      case ._DRAUGHTING_MODEL(let entity): 
        entity.configure(with: observer)
        self = ._DRAUGHTING_MODEL(entity)
      case ._DRAWING_REVISION(let entity): 
        entity.configure(with: observer)
        self = ._DRAWING_REVISION(entity)
      case ._EXECUTED_ACTION(let entity): 
        entity.configure(with: observer)
        self = ._EXECUTED_ACTION(entity)
      case ._GENERAL_PROPERTY(let entity): 
        entity.configure(with: observer)
        self = ._GENERAL_PROPERTY(entity)
      case ._MATERIAL_DESIGNATION(let entity): 
        entity.configure(with: observer)
        self = ._MATERIAL_DESIGNATION(entity)
      case ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(let entity): 
        entity.configure(with: observer)
        self = ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(entity)
      case ._ORGANIZATION(let entity): 
        entity.configure(with: observer)
        self = ._ORGANIZATION(entity)
      case ._ORGANIZATIONAL_PROJECT(let entity): 
        entity.configure(with: observer)
        self = ._ORGANIZATIONAL_PROJECT(entity)
      case ._PERSON(let entity): 
        entity.configure(with: observer)
        self = ._PERSON(entity)
      case ._PERSON_AND_ORGANIZATION(let entity): 
        entity.configure(with: observer)
        self = ._PERSON_AND_ORGANIZATION(entity)
      case ._PRESENTATION_AREA(let entity): 
        entity.configure(with: observer)
        self = ._PRESENTATION_AREA(entity)
      case ._PRODUCT(let entity): 
        entity.configure(with: observer)
        self = ._PRODUCT(entity)
      case ._PRODUCT_CONCEPT(let entity): 
        entity.configure(with: observer)
        self = ._PRODUCT_CONCEPT(entity)
      case ._PRODUCT_CONCEPT_FEATURE(let entity): 
        entity.configure(with: observer)
        self = ._PRODUCT_CONCEPT_FEATURE(entity)
      case ._PRODUCT_CONCEPT_FEATURE_ASSOCIATION(let entity): 
        entity.configure(with: observer)
        self = ._PRODUCT_CONCEPT_FEATURE_ASSOCIATION(entity)
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY(let entity): 
        entity.configure(with: observer)
        self = ._PRODUCT_CONCEPT_FEATURE_CATEGORY(entity)
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE(let entity): 
        entity.configure(with: observer)
        self = ._PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE(entity)
      case ._PRODUCT_DEFINITION(let entity): 
        entity.configure(with: observer)
        self = ._PRODUCT_DEFINITION(entity)
      case ._PRODUCT_DEFINITION_FORMATION(let entity): 
        entity.configure(with: observer)
        self = ._PRODUCT_DEFINITION_FORMATION(entity)
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let entity): 
        entity.configure(with: observer)
        self = ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(entity)
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): 
        entity.configure(with: observer)
        self = ._PRODUCT_DEFINITION_RELATIONSHIP(entity)
      case ._PRODUCT_DEFINITION_SUBSTITUTE(let entity): 
        entity.configure(with: observer)
        self = ._PRODUCT_DEFINITION_SUBSTITUTE(entity)
      case ._PRODUCT_IDENTIFICATION(let entity): 
        entity.configure(with: observer)
        self = ._PRODUCT_IDENTIFICATION(entity)
      case ._PROPERTY_DEFINITION(let entity): 
        entity.configure(with: observer)
        self = ._PROPERTY_DEFINITION(entity)
      case ._RESOURCE_PROPERTY(let entity): 
        entity.configure(with: observer)
        self = ._RESOURCE_PROPERTY(entity)
      case ._SHAPE_ASPECT(let entity): 
        entity.configure(with: observer)
        self = ._SHAPE_ASPECT(entity)
      case ._SHAPE_REPRESENTATION(let entity): 
        entity.configure(with: observer)
        self = ._SHAPE_REPRESENTATION(entity)
      case ._VERSIONED_ACTION_REQUEST(let entity): 
        entity.configure(with: observer)
        self = ._VERSIONED_ACTION_REQUEST(entity)
      }
    }

    public mutating func teardownObserver() {
      switch self {
      case ._ACTION(let entity): 
        entity.teardownObserver()
        self = ._ACTION(entity)
      case ._ACTION_METHOD(let entity): 
        entity.teardownObserver()
        self = ._ACTION_METHOD(entity)
      case ._ACTION_PROPERTY(let entity): 
        entity.teardownObserver()
        self = ._ACTION_PROPERTY(entity)
      case ._ACTION_RELATIONSHIP(let entity): 
        entity.teardownObserver()
        self = ._ACTION_RELATIONSHIP(entity)
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let entity): 
        entity.teardownObserver()
        self = ._ALTERNATE_PRODUCT_RELATIONSHIP(entity)
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let entity): 
        entity.teardownObserver()
        self = ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(entity)
      case ._CONFIGURATION_DESIGN(let entity): 
        entity.teardownObserver()
        self = ._CONFIGURATION_DESIGN(entity)
      case ._CONFIGURATION_EFFECTIVITY(let entity): 
        entity.teardownObserver()
        self = ._CONFIGURATION_EFFECTIVITY(entity)
      case ._CONFIGURATION_ITEM(let entity): 
        entity.teardownObserver()
        self = ._CONFIGURATION_ITEM(entity)
      case ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(let entity): 
        entity.teardownObserver()
        self = ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(entity)
      case ._CONTRACT(let entity): 
        entity.teardownObserver()
        self = ._CONTRACT(entity)
      case ._DOCUMENT_FILE(let entity): 
        entity.teardownObserver()
        self = ._DOCUMENT_FILE(entity)
      case ._DRAUGHTING_MODEL(let entity): 
        entity.teardownObserver()
        self = ._DRAUGHTING_MODEL(entity)
      case ._DRAWING_REVISION(let entity): 
        entity.teardownObserver()
        self = ._DRAWING_REVISION(entity)
      case ._EXECUTED_ACTION(let entity): 
        entity.teardownObserver()
        self = ._EXECUTED_ACTION(entity)
      case ._GENERAL_PROPERTY(let entity): 
        entity.teardownObserver()
        self = ._GENERAL_PROPERTY(entity)
      case ._MATERIAL_DESIGNATION(let entity): 
        entity.teardownObserver()
        self = ._MATERIAL_DESIGNATION(entity)
      case ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(let entity): 
        entity.teardownObserver()
        self = ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(entity)
      case ._ORGANIZATION(let entity): 
        entity.teardownObserver()
        self = ._ORGANIZATION(entity)
      case ._ORGANIZATIONAL_PROJECT(let entity): 
        entity.teardownObserver()
        self = ._ORGANIZATIONAL_PROJECT(entity)
      case ._PERSON(let entity): 
        entity.teardownObserver()
        self = ._PERSON(entity)
      case ._PERSON_AND_ORGANIZATION(let entity): 
        entity.teardownObserver()
        self = ._PERSON_AND_ORGANIZATION(entity)
      case ._PRESENTATION_AREA(let entity): 
        entity.teardownObserver()
        self = ._PRESENTATION_AREA(entity)
      case ._PRODUCT(let entity): 
        entity.teardownObserver()
        self = ._PRODUCT(entity)
      case ._PRODUCT_CONCEPT(let entity): 
        entity.teardownObserver()
        self = ._PRODUCT_CONCEPT(entity)
      case ._PRODUCT_CONCEPT_FEATURE(let entity): 
        entity.teardownObserver()
        self = ._PRODUCT_CONCEPT_FEATURE(entity)
      case ._PRODUCT_CONCEPT_FEATURE_ASSOCIATION(let entity): 
        entity.teardownObserver()
        self = ._PRODUCT_CONCEPT_FEATURE_ASSOCIATION(entity)
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY(let entity): 
        entity.teardownObserver()
        self = ._PRODUCT_CONCEPT_FEATURE_CATEGORY(entity)
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE(let entity): 
        entity.teardownObserver()
        self = ._PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE(entity)
      case ._PRODUCT_DEFINITION(let entity): 
        entity.teardownObserver()
        self = ._PRODUCT_DEFINITION(entity)
      case ._PRODUCT_DEFINITION_FORMATION(let entity): 
        entity.teardownObserver()
        self = ._PRODUCT_DEFINITION_FORMATION(entity)
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let entity): 
        entity.teardownObserver()
        self = ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(entity)
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): 
        entity.teardownObserver()
        self = ._PRODUCT_DEFINITION_RELATIONSHIP(entity)
      case ._PRODUCT_DEFINITION_SUBSTITUTE(let entity): 
        entity.teardownObserver()
        self = ._PRODUCT_DEFINITION_SUBSTITUTE(entity)
      case ._PRODUCT_IDENTIFICATION(let entity): 
        entity.teardownObserver()
        self = ._PRODUCT_IDENTIFICATION(entity)
      case ._PROPERTY_DEFINITION(let entity): 
        entity.teardownObserver()
        self = ._PROPERTY_DEFINITION(entity)
      case ._RESOURCE_PROPERTY(let entity): 
        entity.teardownObserver()
        self = ._RESOURCE_PROPERTY(entity)
      case ._SHAPE_ASPECT(let entity): 
        entity.teardownObserver()
        self = ._SHAPE_ASPECT(entity)
      case ._SHAPE_REPRESENTATION(let entity): 
        entity.teardownObserver()
        self = ._SHAPE_REPRESENTATION(entity)
      case ._VERSIONED_ACTION_REQUEST(let entity): 
        entity.teardownObserver()
        self = ._VERSIONED_ACTION_REQUEST(entity)
      }
    }

    //MARK: SDAIAggregationBehavior
    public var aggregationHiBound: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationHiIndex: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationLoBound: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationLoIndex: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationSize: Int? {
      switch self {
      default: return nil
      }
    }

    //MARK: WHERE RULE VALIDATION (SELECT TYPE)
    public static func validateWhereRules(instance:Self?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      var result: [SDAI.WhereLabel:SDAI.LOGICAL] = [:]
      switch instance {
      case ._ACTION(let selectValue): result = eACTION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\ACTION")
      case ._ACTION_METHOD(let selectValue): 
        result = eACTION_METHOD.validateWhereRules(instance:selectValue, prefix:prefix + "\\ACTION_METHOD")
      case ._ACTION_PROPERTY(let selectValue): 
        result = eACTION_PROPERTY.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\ACTION_PROPERTY")
      case ._ACTION_RELATIONSHIP(let selectValue): 
        result = eACTION_RELATIONSHIP.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\ACTION_RELATIONSHIP")
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let selectValue): 
        result = eALTERNATE_PRODUCT_RELATIONSHIP.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\ALTERNATE_PRODUCT_RELATIONSHIP")
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let selectValue): 
        result = eASSEMBLY_COMPONENT_USAGE_SUBSTITUTE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE")
      case ._CONFIGURATION_DESIGN(let selectValue): 
        result = eCONFIGURATION_DESIGN.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\CONFIGURATION_DESIGN")
      case ._CONFIGURATION_EFFECTIVITY(let selectValue): 
        result = eCONFIGURATION_EFFECTIVITY.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\CONFIGURATION_EFFECTIVITY")
      case ._CONFIGURATION_ITEM(let selectValue): 
        result = eCONFIGURATION_ITEM.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\CONFIGURATION_ITEM")
      case ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(let selectValue): 
        result = eCONFIGURED_EFFECTIVITY_ASSIGNMENT.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\CONFIGURED_EFFECTIVITY_ASSIGNMENT")
      case ._CONTRACT(let selectValue): result = eCONTRACT.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\CONTRACT")
      case ._DOCUMENT_FILE(let selectValue): 
        result = eDOCUMENT_FILE.validateWhereRules(instance:selectValue, prefix:prefix + "\\DOCUMENT_FILE")
      case ._DRAUGHTING_MODEL(let selectValue): 
        result = eDRAUGHTING_MODEL.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\DRAUGHTING_MODEL")
      case ._DRAWING_REVISION(let selectValue): 
        result = eDRAWING_REVISION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\DRAWING_REVISION")
      case ._EXECUTED_ACTION(let selectValue): 
        result = eEXECUTED_ACTION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\EXECUTED_ACTION")
      case ._GENERAL_PROPERTY(let selectValue): 
        result = eGENERAL_PROPERTY.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\GENERAL_PROPERTY")
      case ._MATERIAL_DESIGNATION(let selectValue): 
        result = eMATERIAL_DESIGNATION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\MATERIAL_DESIGNATION")
      case ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(let selectValue): result = eMECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION")
      case ._ORGANIZATION(let selectValue): result = eORGANIZATION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\ORGANIZATION")
      case ._ORGANIZATIONAL_PROJECT(let selectValue): 
        result = eORGANIZATIONAL_PROJECT.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\ORGANIZATIONAL_PROJECT")
      case ._PERSON(let selectValue): result = ePERSON.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PERSON")
      case ._PERSON_AND_ORGANIZATION(let selectValue): 
        result = ePERSON_AND_ORGANIZATION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PERSON_AND_ORGANIZATION")
      case ._PRESENTATION_AREA(let selectValue): 
        result = ePRESENTATION_AREA.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PRESENTATION_AREA")
      case ._PRODUCT(let selectValue): result = ePRODUCT.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PRODUCT")
      case ._PRODUCT_CONCEPT(let selectValue): 
        result = ePRODUCT_CONCEPT.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PRODUCT_CONCEPT")
      case ._PRODUCT_CONCEPT_FEATURE(let selectValue): 
        result = ePRODUCT_CONCEPT_FEATURE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PRODUCT_CONCEPT_FEATURE")
      case ._PRODUCT_CONCEPT_FEATURE_ASSOCIATION(let selectValue): 
        result = ePRODUCT_CONCEPT_FEATURE_ASSOCIATION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PRODUCT_CONCEPT_FEATURE_ASSOCIATION")
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY(let selectValue): 
        result = ePRODUCT_CONCEPT_FEATURE_CATEGORY.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PRODUCT_CONCEPT_FEATURE_CATEGORY")
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE(let selectValue): 
        result = ePRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE")
      case ._PRODUCT_DEFINITION(let selectValue): 
        result = ePRODUCT_DEFINITION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PRODUCT_DEFINITION")
      case ._PRODUCT_DEFINITION_FORMATION(let selectValue): 
        result = ePRODUCT_DEFINITION_FORMATION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PRODUCT_DEFINITION_FORMATION")
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let selectValue): 
        result = ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PRODUCT_DEFINITION_FORMATION_RELATIONSHIP")
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selectValue): 
        result = ePRODUCT_DEFINITION_RELATIONSHIP.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PRODUCT_DEFINITION_RELATIONSHIP")
      case ._PRODUCT_DEFINITION_SUBSTITUTE(let selectValue): 
        result = ePRODUCT_DEFINITION_SUBSTITUTE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PRODUCT_DEFINITION_SUBSTITUTE")
      case ._PRODUCT_IDENTIFICATION(let selectValue): 
        result = ePRODUCT_IDENTIFICATION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PRODUCT_IDENTIFICATION")
      case ._PROPERTY_DEFINITION(let selectValue): 
        result = ePROPERTY_DEFINITION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PROPERTY_DEFINITION")
      case ._RESOURCE_PROPERTY(let selectValue): 
        result = eRESOURCE_PROPERTY.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\RESOURCE_PROPERTY")
      case ._SHAPE_ASPECT(let selectValue): result = eSHAPE_ASPECT.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\SHAPE_ASPECT")
      case ._SHAPE_REPRESENTATION(let selectValue): 
        result = eSHAPE_REPRESENTATION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\SHAPE_REPRESENTATION")
      case ._VERSIONED_ACTION_REQUEST(let selectValue): 
        result = eVERSIONED_ACTION_REQUEST.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\VERSIONED_ACTION_REQUEST")
      case nil: break
      }

      return result
    }

  }

}


//MARK: - SELECT TYPE HIERARCHY
public protocol AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sACTION_REQUEST_ITEM__type: SDAISelectType {

  //MARK: GROUP REFERENCES
  var super_ePRODUCT_IDENTIFICATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_IDENTIFICATION? { get }
  var super_eASSEMBLY_COMPONENT_USAGE_SUBSTITUTE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eASSEMBLY_COMPONENT_USAGE_SUBSTITUTE? { get }
  var super_eMATERIAL_DESIGNATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMATERIAL_DESIGNATION? { get }
  var super_eREPRESENTATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION? { get }
  var super_eEFFECTIVITY_ASSIGNMENT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEFFECTIVITY_ASSIGNMENT? { get }
  var super_ePERSON: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePERSON? { get }
  var super_eACTION_RELATIONSHIP: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION_RELATIONSHIP? { get }
  var super_ePROPERTY_DEFINITION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePROPERTY_DEFINITION? { get }
  var super_ePRODUCT_CONCEPT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_CONCEPT? { get }
  var super_eGROUP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGROUP? { get }
  var super_eCONFIGURATION_ITEM: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONFIGURATION_ITEM? { get }
  var super_ePRESENTATION_REPRESENTATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRESENTATION_REPRESENTATION? { get }
  var super_eSHAPE_REPRESENTATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_REPRESENTATION? { get }
  var super_eACTION_METHOD: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION_METHOD? { get }
  var super_eGROUP_ASSIGNMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGROUP_ASSIGNMENT? { get }
  var super_eCONFIGURATION_DESIGN: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONFIGURATION_DESIGN? { get }
  var super_eEXECUTED_ACTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEXECUTED_ACTION? { get }
  var super_ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP? { get }
  var super_ePRODUCT_CONCEPT_FEATURE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_CONCEPT_FEATURE? { get }
  var super_eDRAUGHTING_MODEL: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDRAUGHTING_MODEL? { get }
  var super_eACTION_PROPERTY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION_PROPERTY? { get }
  var super_eORGANIZATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eORGANIZATION? { get }
  var super_eGENERAL_PROPERTY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGENERAL_PROPERTY? { get }
  var super_ePRODUCT_DEFINITION_SUBSTITUTE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_SUBSTITUTE? { get }
  var super_eRESOURCE_PROPERTY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eRESOURCE_PROPERTY? { get }
  var super_ePRODUCT_DEFINITION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION? { get }
  var super_ePRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE? { get }
  var super_eCONTRACT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONTRACT? { get }
  var super_eDOCUMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDOCUMENT? { get }
  var super_eCONFIGURATION_EFFECTIVITY: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONFIGURATION_EFFECTIVITY? { get }
  var super_ePRODUCT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT? { get }
  var super_eVERSIONED_ACTION_REQUEST: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eVERSIONED_ACTION_REQUEST? { get }
  var super_eORGANIZATIONAL_PROJECT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eORGANIZATIONAL_PROJECT? { get }
  var super_eDRAWING_REVISION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDRAWING_REVISION? { get }
  var super_eEFFECTIVITY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEFFECTIVITY? { get }
  var super_ePRODUCT_DEFINITION_FORMATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_FORMATION? { get }
  var super_ePRODUCT_DEFINITION_EFFECTIVITY: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_EFFECTIVITY? { get }
  var super_ePRESENTATION_SET: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRESENTATION_SET? { get }
  var super_eSHAPE_ASPECT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_ASPECT? { get }
  var super_ePRODUCT_CONCEPT_FEATURE_CATEGORY: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_CONCEPT_FEATURE_CATEGORY? { get }
  var super_eCONFIGURED_EFFECTIVITY_ASSIGNMENT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONFIGURED_EFFECTIVITY_ASSIGNMENT? { get }
  var super_ePERSON_AND_ORGANIZATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePERSON_AND_ORGANIZATION? { get }
  var super_eALTERNATE_PRODUCT_RELATIONSHIP: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eALTERNATE_PRODUCT_RELATIONSHIP? { get }
  var super_eDOCUMENT_FILE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDOCUMENT_FILE? { get }
  var super_ePRODUCT_DEFINITION_RELATIONSHIP: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_RELATIONSHIP? { get }
  var super_eMECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION? { get }
  var super_ePRESENTATION_AREA: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRESENTATION_AREA? { get }
  var super_ePRODUCT_CONCEPT_FEATURE_ASSOCIATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_CONCEPT_FEATURE_ASSOCIATION? { get }
  var super_eACTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION? { get }
  var super_eCHARACTERIZED_OBJECT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCHARACTERIZED_OBJECT? { get }

  //MARK: ENTITY ATTRIBUTE REFERENCES
  var DERIVING_RELATIONSHIPS: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_ASPECT_DERIVING_RELATIONSHIP>/*[1:nil]*/ )?  { get }
  var PRODUCT_DEFINITIONAL: SDAI.LOGICAL { get }
  var DESCRIPTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT?  { get }
  var PROPERTIES: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePROCESS_PROPERTY_ASSOCIATION>/*[
    1:nil]*/ )?  { get }
  var LEAF: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sPRODUCT_DEFINITION_OR_REFERENCE?  { get }
  var MIDDLE_NAMES: (SDAI.LIST<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL>/*[1:nil]*/ )?  { get }
  var FORM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eTOLERANCE_ZONE_FORM?  { get }
  var DIRECTIVE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION_DIRECTIVE?  { get }
  var SUFFIX_TITLES: (SDAI.LIST<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL>/*[1:nil]*/ )?  { get }
  var REALIZED_PRODUCT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_FORMATION?  { get }
  var NEXT_USAGE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eNEXT_ASSEMBLY_USAGE_OCCURRENCE?  { get }
  var ROLE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eOBJECT_ROLE?  { get }
  var REFERENCE_DESIGNATOR: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { get }
  var SUBSTITUTE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eASSEMBLY_COMPONENT_USAGE?  { get }
  var STATUS: SDAI.STRING?  { get }
  var RELATED_PRODUCT_DEFINITION_FORMATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_FORMATION?  { get }
  var DESIGN: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sCONFIGURATION_DESIGN_ITEM?  { get }
  var CONSTITUENT_AMOUNT: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sCHARACTERIZED_PRODUCT_COMPOSITION_VALUE>/*[1:nil]*/ )?  { get }
  var TARGET_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { get }
  var UPPER_USAGE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eASSEMBLY_COMPONENT_USAGE?  { get }
  var RANKING_RATIONALE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT?  { get }
  var DEFINITIONS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sCHARACTERIZED_DEFINITION>/*[1:
    nil]*/ )?  { get }
  var COMPONENT_SHAPE_ASPECT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sINTERNAL_OR_REFLECTED_SHAPE_ASPECT?  { get }
  var CLASS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { get }
  var PARENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_ASPECT?  { get }
  var LAST_NAME: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { get }
  var DEFINED_VERSION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOLLECTION_VERSION?  { get }
  var ORIENTATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nORIENTED_TOLERANCE_ZONE_TYPE?  { get }
  var OF_COLLECTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOLLECTION?  { get }
  var PRODUCT_DESIGN_VERSION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_FORMATION?  { get }
  var OF_SHAPE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_SHAPE?  { get }
  var RANKING: SDAI.INTEGER?  { get }
  var BASIS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT?  { get }
  var MAKE_OR_BUY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nSOURCE?  { get }
  var CHOSEN_METHOD: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION_METHOD?  { get }
  var PURPOSE: SDAI.STRING?  { get }
  var AREAS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eAREA_IN_SET>/*[1:nil]*/ )?  { get }
  var RESOURCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sCHARACTERIZED_RESOURCE_DEFINITION?  { get }
  var CONTEXT_RELATIONSHIP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_RELATIONSHIP?  { get }
  var INTENDED_SCALE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT?  { get }
  var CONCEPT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_CONCEPT?  { get }
  var RELATING_ACTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION?  { get }
  var DATUM_REFERENCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDATUM_SYSTEM?  { get }
  var RELATING_PRODUCT_DEFINITION_FORMATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_FORMATION?  { get }
  var RELATING_VERSION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOLLECTION_VERSION?  { get }
  var IDENTIFICATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { get }
  var FIRST_NAME: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { get }
  var COMPOSITION_BASIS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { get }
  var DOCUMENTATION_IDS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDOCUMENT>/*[1:nil]*/ )?  { get }
  var ESTABLISHED_BY_RELATIONSHIPS: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_ASPECT_RELATIONSHIP>/*[1:nil]*/ )?  { get }
  var RELATION_TYPE: SDAI.STRING?  { get }
  var ITEM_CONCEPT_FEATURE: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_CONCEPT_FEATURE_ASSOCIATION>/*[1:nil]*/ )?  { get }
  var THE_PERSON: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePERSON?  { get }
  var SPECIFICATION: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION>/*[1:nil]*/ )?  { get }
  var PLANNED_PRODUCT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_FORMATION?  { get }
  var CONSTITUENTS: (SDAI.LIST_UNIQUE<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDATUM_REFERENCE_COMPARTMENT>/*[1:3]*/ )?  { get }
  var REPRESENTATION_ASSOCIATIONS: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePROPERTY_DEFINITION_REPRESENTATION>/*[0:nil]*/ )?  { get }
  var REVISION_IDENTIFIER: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { get }
  var SUCCESSOR: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOLLECTION_VERSION?  { get }
  var TESSELLATION_ACCURACY_PARAMETERS: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sTESSELLATION_ACCURACY_PARAMETER_ITEM>/*[1:nil]*/ )?  { get }
  var ANGLE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePLANE_ANGLE_MEASURE_WITH_UNIT?  { get }
  var FEATURE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_CONCEPT_FEATURE?  { get }
  var INDIVIDUAL_PRODUCT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_FORMATION?  { get }
  var CONDITION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONCEPT_FEATURE_RELATIONSHIP_WITH_CONDITION?  { get }
  var ITEM_CONCEPT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_CONCEPT?  { get }
  var KIND: SDAI.GENERIC_ENTITY?  { get }
  var MODIFIERS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sDATUM_REFERENCE_MODIFIER>/*[1:nil]*/ )?  { get }
  var DETERMINATION_METHOD: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT?  { get }
  var CONSEQUENCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT?  { get }
  var ROOT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION?  { get }
  var DRAWING_IDENTIFIER: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDRAWING_DEFINITION?  { get }
  var THE_ORGANIZATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eORGANIZATION?  { get }
  var COMPONENT_RELATIONSHIPS: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_ASPECT_RELATIONSHIP>/*[2:nil]*/ )?  { get }
  var BASE_COMMON_DATUM_LIST: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tCOMMON_DATUM_LIST?  { get }
  var PRODUCT_DEFINITIONS: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePROCESS_PRODUCT_ASSOCIATION>/*[1:nil]*/ )?  { get }
  var RELATING_PRODUCT_DEFINITION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sPRODUCT_DEFINITION_OR_REFERENCE?  { get }
  var REPRESENTATION_TYPES: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDOCUMENT_REPRESENTATION_TYPE>/*[0:nil]*/ )?  { get }
  var RELATED_VERSION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOLLECTION_VERSION?  { get }
  var RELATED_ACTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION?  { get }
  var ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { get }
  var FEATURE_BASIS_RELATIONSHIP: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_ASPECT_RELATIONSHIP>/*[1:nil]*/ )?  { get }
  var ALTERNATE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT?  { get }
  var CONTEXT_OF_ITEMS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_CONTEXT?  { get }
  var SUBSTITUTE_DEFINITION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION?  { get }
  var VERSION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { get }
  var DIRECTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nDIRECTED_TOLERANCE_ZONE_TYPE?  { get }
  var RELATED_SHAPE_ASPECT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOMPONENT_FEATURE?  { get }
  var RESPONSIBLE_ORGANIZATIONS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eORGANIZATION>/*[1:
    nil]*/ )?  { get }
  var OF_PRODUCT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT?  { get }
  var REPRESENTATION_RELATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eKINEMATIC_PROPERTY_DEFINITION_REPRESENTATION?  { get }
  var PRODUCT_DEFINITION_OCCURRENCE_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { get }
  var ASSIGNED_EFFECTIVITY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEFFECTIVITY?  { get }
  var DEFINING_TOLERANCE: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sTOLERANCE_ZONE_TARGET>
    /*[1:nil]*/ )?  { get }
  var NEUTRAL_SKETCH_SEMANTICS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nCURVES_OR_AREA?  { get }
  var MARKET_CONTEXT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_CONCEPT_CONTEXT?  { get }
  var ASSIGNED_GROUP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGROUP?  { get }
  var CONFIGURATION: SDAI.GENERIC_ENTITY?  { get }
  var RELATED_PRODUCT_DEFINITION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sPRODUCT_DEFINITION_OR_REFERENCE?  { get }
  var NAME: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { get }
  var BASIS_RELATIONSHIPS: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_ASPECT_DERIVING_RELATIONSHIP>/*[1:nil]*/ )?  { get }
  var PREFIX_TITLES: (SDAI.LIST<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL>/*[1:nil]*/ )?  { get }
  var RELATING_SHAPE_ASPECT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOMPONENT_FEATURE?  { get }
  var PREDECESSOR: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOLLECTION_VERSION?  { get }
  var OFFSET: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMEASURE_WITH_UNIT?  { get }
  var USAGE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_RELATIONSHIP?  { get }
  var TARGET_BASIS_RELATIONSHIP: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_ASPECT_RELATIONSHIP>/*[1:nil]*/ )?  { get }
  var FORMATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_FORMATION?  { get }
}

public protocol AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sACTION_REQUEST_ITEM__subtype: 
  AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sACTION_REQUEST_ITEM__type, SDAIDefinedType
where Supertype: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sACTION_REQUEST_ITEM__type
{}

public extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sACTION_REQUEST_ITEM__subtype {
  //MARK: CONSTRUCTORS
  init?(possiblyFrom complex: SDAI.ComplexEntity?) {
    self.init(fundamental: FundamentalType(possiblyFrom: complex))
  }

  init?<T: SDAIUnderlyingType>(possiblyFrom underlyingType: T?) {
    self.init(fundamental: FundamentalType(possiblyFrom: underlyingType))
  }

  init?<G: SDAIGenericType>(fromGeneric generic: G?) {
    self.init(fundamental: FundamentalType.convert(fromGeneric: generic))
  }

  //MARK: GROUP REFERENCES
  var super_ePRODUCT_IDENTIFICATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_IDENTIFICATION? { rep.super_ePRODUCT_IDENTIFICATION }
  var super_eASSEMBLY_COMPONENT_USAGE_SUBSTITUTE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eASSEMBLY_COMPONENT_USAGE_SUBSTITUTE? { rep.super_eASSEMBLY_COMPONENT_USAGE_SUBSTITUTE }
  var super_eMATERIAL_DESIGNATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMATERIAL_DESIGNATION? { rep.super_eMATERIAL_DESIGNATION }
  var super_eREPRESENTATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION? { rep.super_eREPRESENTATION }
  var super_eEFFECTIVITY_ASSIGNMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEFFECTIVITY_ASSIGNMENT? { rep.super_eEFFECTIVITY_ASSIGNMENT }
  var super_ePERSON: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePERSON? { rep.super_ePERSON }
  var super_eACTION_RELATIONSHIP: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION_RELATIONSHIP? { rep.super_eACTION_RELATIONSHIP }
  var super_ePROPERTY_DEFINITION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePROPERTY_DEFINITION? { rep.super_ePROPERTY_DEFINITION }
  var super_ePRODUCT_CONCEPT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_CONCEPT? { rep.super_ePRODUCT_CONCEPT }
  var super_eGROUP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGROUP? { rep.super_eGROUP }
  var super_eCONFIGURATION_ITEM: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONFIGURATION_ITEM? { rep.super_eCONFIGURATION_ITEM }
  var super_ePRESENTATION_REPRESENTATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRESENTATION_REPRESENTATION? { rep.super_ePRESENTATION_REPRESENTATION }
  var super_eSHAPE_REPRESENTATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_REPRESENTATION? { rep.super_eSHAPE_REPRESENTATION }
  var super_eACTION_METHOD: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION_METHOD? { rep.super_eACTION_METHOD }
  var super_eGROUP_ASSIGNMENT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGROUP_ASSIGNMENT? { rep.super_eGROUP_ASSIGNMENT }
  var super_eCONFIGURATION_DESIGN: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONFIGURATION_DESIGN? { rep.super_eCONFIGURATION_DESIGN }
  var super_eEXECUTED_ACTION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEXECUTED_ACTION? { rep.super_eEXECUTED_ACTION }
  var super_ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP? { rep.super_ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP }
  var super_ePRODUCT_CONCEPT_FEATURE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_CONCEPT_FEATURE? { rep.super_ePRODUCT_CONCEPT_FEATURE }
  var super_eDRAUGHTING_MODEL: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDRAUGHTING_MODEL? { rep.super_eDRAUGHTING_MODEL }
  var super_eACTION_PROPERTY: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION_PROPERTY? { rep.super_eACTION_PROPERTY }
  var super_eORGANIZATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eORGANIZATION? { rep.super_eORGANIZATION }
  var super_eGENERAL_PROPERTY: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGENERAL_PROPERTY? { rep.super_eGENERAL_PROPERTY }
  var super_ePRODUCT_DEFINITION_SUBSTITUTE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_SUBSTITUTE? { rep.super_ePRODUCT_DEFINITION_SUBSTITUTE }
  var super_eRESOURCE_PROPERTY: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eRESOURCE_PROPERTY? { rep.super_eRESOURCE_PROPERTY }
  var super_ePRODUCT_DEFINITION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION? { rep.super_ePRODUCT_DEFINITION }
  var super_ePRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE? { rep.super_ePRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE }
  var super_eCONTRACT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONTRACT? { rep.super_eCONTRACT }
  var super_eDOCUMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDOCUMENT? { rep.super_eDOCUMENT }
  var super_eCONFIGURATION_EFFECTIVITY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONFIGURATION_EFFECTIVITY? { rep.super_eCONFIGURATION_EFFECTIVITY }
  var super_ePRODUCT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT? { rep.super_ePRODUCT }
  var super_eVERSIONED_ACTION_REQUEST: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eVERSIONED_ACTION_REQUEST? { rep.super_eVERSIONED_ACTION_REQUEST }
  var super_eORGANIZATIONAL_PROJECT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eORGANIZATIONAL_PROJECT? { rep.super_eORGANIZATIONAL_PROJECT }
  var super_eDRAWING_REVISION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDRAWING_REVISION? { rep.super_eDRAWING_REVISION }
  var super_eEFFECTIVITY: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEFFECTIVITY? { rep.super_eEFFECTIVITY }
  var super_ePRODUCT_DEFINITION_FORMATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_FORMATION? { rep.super_ePRODUCT_DEFINITION_FORMATION }
  var super_ePRODUCT_DEFINITION_EFFECTIVITY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_EFFECTIVITY? { rep.super_ePRODUCT_DEFINITION_EFFECTIVITY }
  var super_ePRESENTATION_SET: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRESENTATION_SET? { rep.super_ePRESENTATION_SET }
  var super_eSHAPE_ASPECT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_ASPECT? { rep.super_eSHAPE_ASPECT }
  var super_ePRODUCT_CONCEPT_FEATURE_CATEGORY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_CONCEPT_FEATURE_CATEGORY? { rep.super_ePRODUCT_CONCEPT_FEATURE_CATEGORY }
  var super_eCONFIGURED_EFFECTIVITY_ASSIGNMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONFIGURED_EFFECTIVITY_ASSIGNMENT? { rep.super_eCONFIGURED_EFFECTIVITY_ASSIGNMENT }
  var super_ePERSON_AND_ORGANIZATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePERSON_AND_ORGANIZATION? { rep.super_ePERSON_AND_ORGANIZATION }
  var super_eALTERNATE_PRODUCT_RELATIONSHIP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eALTERNATE_PRODUCT_RELATIONSHIP? { rep.super_eALTERNATE_PRODUCT_RELATIONSHIP }
  var super_eDOCUMENT_FILE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDOCUMENT_FILE? { rep.super_eDOCUMENT_FILE }
  var super_ePRODUCT_DEFINITION_RELATIONSHIP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_RELATIONSHIP? { rep.super_ePRODUCT_DEFINITION_RELATIONSHIP }
  var super_eMECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION? { rep.super_eMECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION }
  var super_ePRESENTATION_AREA: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRESENTATION_AREA? { rep.super_ePRESENTATION_AREA }
  var super_ePRODUCT_CONCEPT_FEATURE_ASSOCIATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_CONCEPT_FEATURE_ASSOCIATION? { rep.super_ePRODUCT_CONCEPT_FEATURE_ASSOCIATION }
  var super_eACTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION? { rep.super_eACTION }
  var super_eCHARACTERIZED_OBJECT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCHARACTERIZED_OBJECT? { rep.super_eCHARACTERIZED_OBJECT }

  //MARK: ENTITY ATTRIBUTE REFERENCES
  var DERIVING_RELATIONSHIPS: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_ASPECT_DERIVING_RELATIONSHIP>/*[1:nil]*/ )?  { rep.DERIVING_RELATIONSHIPS }
  var PRODUCT_DEFINITIONAL: SDAI.LOGICAL { rep.PRODUCT_DEFINITIONAL }
  var DESCRIPTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT?  { rep.DESCRIPTION }
  var PROPERTIES: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePROCESS_PROPERTY_ASSOCIATION>/*[
    1:nil]*/ )?  { rep.PROPERTIES }
  var LEAF: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sPRODUCT_DEFINITION_OR_REFERENCE?  { rep.LEAF }
  var MIDDLE_NAMES: (SDAI.LIST<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL>/*[1:nil]*/ )?  { rep.MIDDLE_NAMES }
  var FORM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eTOLERANCE_ZONE_FORM?  { rep.FORM }
  var DIRECTIVE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION_DIRECTIVE?  { rep.DIRECTIVE }
  var SUFFIX_TITLES: (SDAI.LIST<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL>/*[1:nil]*/ )?  { rep.SUFFIX_TITLES }
  var REALIZED_PRODUCT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_FORMATION?  { rep.REALIZED_PRODUCT }
  var NEXT_USAGE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eNEXT_ASSEMBLY_USAGE_OCCURRENCE?  { rep.NEXT_USAGE }
  var ROLE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eOBJECT_ROLE?  { rep.ROLE }
  var REFERENCE_DESIGNATOR: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { rep.REFERENCE_DESIGNATOR }
  var SUBSTITUTE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eASSEMBLY_COMPONENT_USAGE?  { rep.SUBSTITUTE }
  var STATUS: SDAI.STRING?  { rep.STATUS }
  var RELATED_PRODUCT_DEFINITION_FORMATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_FORMATION?  { rep.RELATED_PRODUCT_DEFINITION_FORMATION }
  var DESIGN: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sCONFIGURATION_DESIGN_ITEM?  { rep.DESIGN }
  var CONSTITUENT_AMOUNT: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sCHARACTERIZED_PRODUCT_COMPOSITION_VALUE>/*[1:nil]*/ )?  { rep.CONSTITUENT_AMOUNT }
  var TARGET_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { rep.TARGET_ID }
  var UPPER_USAGE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eASSEMBLY_COMPONENT_USAGE?  { rep.UPPER_USAGE }
  var RANKING_RATIONALE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT?  { rep.RANKING_RATIONALE }
  var DEFINITIONS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sCHARACTERIZED_DEFINITION>/*[1:
    nil]*/ )?  { rep.DEFINITIONS }
  var COMPONENT_SHAPE_ASPECT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sINTERNAL_OR_REFLECTED_SHAPE_ASPECT?  { rep.COMPONENT_SHAPE_ASPECT }
  var CLASS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { rep.CLASS }
  var PARENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_ASPECT?  { rep.PARENT }
  var LAST_NAME: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { rep.LAST_NAME }
  var DEFINED_VERSION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOLLECTION_VERSION?  { rep.DEFINED_VERSION }
  var ORIENTATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nORIENTED_TOLERANCE_ZONE_TYPE?  { rep.ORIENTATION }
  var OF_COLLECTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOLLECTION?  { rep.OF_COLLECTION }
  var PRODUCT_DESIGN_VERSION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_FORMATION?  { rep.PRODUCT_DESIGN_VERSION }
  var OF_SHAPE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_SHAPE?  { rep.OF_SHAPE }
  var RANKING: SDAI.INTEGER?  { rep.RANKING }
  var BASIS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT?  { rep.BASIS }
  var MAKE_OR_BUY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nSOURCE?  { rep.MAKE_OR_BUY }
  var CHOSEN_METHOD: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION_METHOD?  { rep.CHOSEN_METHOD }
  var PURPOSE: SDAI.STRING?  { rep.PURPOSE }
  var AREAS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eAREA_IN_SET>/*[1:nil]*/ )?  { rep.AREAS }
  var RESOURCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sCHARACTERIZED_RESOURCE_DEFINITION?  { rep.RESOURCE }
  var CONTEXT_RELATIONSHIP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_RELATIONSHIP?  { rep.CONTEXT_RELATIONSHIP }
  var INTENDED_SCALE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT?  { rep.INTENDED_SCALE }
  var CONCEPT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_CONCEPT?  { rep.CONCEPT }
  var RELATING_ACTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION?  { rep.RELATING_ACTION }
  var DATUM_REFERENCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDATUM_SYSTEM?  { rep.DATUM_REFERENCE }
  var RELATING_PRODUCT_DEFINITION_FORMATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_FORMATION?  { rep.RELATING_PRODUCT_DEFINITION_FORMATION }
  var RELATING_VERSION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOLLECTION_VERSION?  { rep.RELATING_VERSION }
  var IDENTIFICATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { rep.IDENTIFICATION }
  var FIRST_NAME: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { rep.FIRST_NAME }
  var COMPOSITION_BASIS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { rep.COMPOSITION_BASIS }
  var DOCUMENTATION_IDS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDOCUMENT>/*[1:nil]*/ )?  { rep.DOCUMENTATION_IDS }
  var ESTABLISHED_BY_RELATIONSHIPS: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_ASPECT_RELATIONSHIP>/*[1:nil]*/ )?  { rep.ESTABLISHED_BY_RELATIONSHIPS }
  var RELATION_TYPE: SDAI.STRING?  { rep.RELATION_TYPE }
  var ITEM_CONCEPT_FEATURE: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_CONCEPT_FEATURE_ASSOCIATION>/*[1:nil]*/ )?  { rep.ITEM_CONCEPT_FEATURE }
  var THE_PERSON: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePERSON?  { rep.THE_PERSON }
  var SPECIFICATION: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION>/*[1:nil]*/ )?  { rep.SPECIFICATION }
  var PLANNED_PRODUCT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_FORMATION?  { rep.PLANNED_PRODUCT }
  var CONSTITUENTS: (SDAI.LIST_UNIQUE<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDATUM_REFERENCE_COMPARTMENT>/*[1:3]*/ )?  { rep.CONSTITUENTS }
  var REPRESENTATION_ASSOCIATIONS: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePROPERTY_DEFINITION_REPRESENTATION>/*[0:nil]*/ )?  { rep.REPRESENTATION_ASSOCIATIONS }
  var REVISION_IDENTIFIER: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { rep.REVISION_IDENTIFIER }
  var SUCCESSOR: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOLLECTION_VERSION?  { rep.SUCCESSOR }
  var TESSELLATION_ACCURACY_PARAMETERS: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sTESSELLATION_ACCURACY_PARAMETER_ITEM>/*[1:nil]*/ )?  { rep.TESSELLATION_ACCURACY_PARAMETERS }
  var ANGLE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePLANE_ANGLE_MEASURE_WITH_UNIT?  { rep.ANGLE }
  var FEATURE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_CONCEPT_FEATURE?  { rep.FEATURE }
  var INDIVIDUAL_PRODUCT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_FORMATION?  { rep.INDIVIDUAL_PRODUCT }
  var CONDITION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONCEPT_FEATURE_RELATIONSHIP_WITH_CONDITION?  { rep.CONDITION }
  var ITEM_CONCEPT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_CONCEPT?  { rep.ITEM_CONCEPT }
  var KIND: SDAI.GENERIC_ENTITY?  { rep.KIND }
  var MODIFIERS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sDATUM_REFERENCE_MODIFIER>/*[1:nil]*/ )?  { rep.MODIFIERS }
  var DETERMINATION_METHOD: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT?  { rep.DETERMINATION_METHOD }
  var CONSEQUENCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT?  { rep.CONSEQUENCE }
  var ROOT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION?  { rep.ROOT }
  var DRAWING_IDENTIFIER: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDRAWING_DEFINITION?  { rep.DRAWING_IDENTIFIER }
  var THE_ORGANIZATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eORGANIZATION?  { rep.THE_ORGANIZATION }
  var COMPONENT_RELATIONSHIPS: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_ASPECT_RELATIONSHIP>/*[2:nil]*/ )?  { rep.COMPONENT_RELATIONSHIPS }
  var BASE_COMMON_DATUM_LIST: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tCOMMON_DATUM_LIST?  { rep.BASE_COMMON_DATUM_LIST }
  var PRODUCT_DEFINITIONS: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePROCESS_PRODUCT_ASSOCIATION>/*[1:nil]*/ )?  { rep.PRODUCT_DEFINITIONS }
  var RELATING_PRODUCT_DEFINITION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sPRODUCT_DEFINITION_OR_REFERENCE?  { rep.RELATING_PRODUCT_DEFINITION }
  var REPRESENTATION_TYPES: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDOCUMENT_REPRESENTATION_TYPE>/*[0:nil]*/ )?  { rep.REPRESENTATION_TYPES }
  var RELATED_VERSION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOLLECTION_VERSION?  { rep.RELATED_VERSION }
  var RELATED_ACTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION?  { rep.RELATED_ACTION }
  var ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { rep.ID }
  var FEATURE_BASIS_RELATIONSHIP: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_ASPECT_RELATIONSHIP>/*[1:nil]*/ )?  { rep.FEATURE_BASIS_RELATIONSHIP }
  var ALTERNATE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT?  { rep.ALTERNATE }
  var CONTEXT_OF_ITEMS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_CONTEXT?  { rep.CONTEXT_OF_ITEMS }
  var SUBSTITUTE_DEFINITION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION?  { rep.SUBSTITUTE_DEFINITION }
  var VERSION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { rep.VERSION }
  var DIRECTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nDIRECTED_TOLERANCE_ZONE_TYPE?  { rep.DIRECTION }
  var RELATED_SHAPE_ASPECT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOMPONENT_FEATURE?  { rep.RELATED_SHAPE_ASPECT }
  var RESPONSIBLE_ORGANIZATIONS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eORGANIZATION>/*[1:
    nil]*/ )?  { rep.RESPONSIBLE_ORGANIZATIONS }
  var OF_PRODUCT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT?  { rep.OF_PRODUCT }
  var REPRESENTATION_RELATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eKINEMATIC_PROPERTY_DEFINITION_REPRESENTATION?  { rep.REPRESENTATION_RELATION }
  var PRODUCT_DEFINITION_OCCURRENCE_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { rep.PRODUCT_DEFINITION_OCCURRENCE_ID }
  var ASSIGNED_EFFECTIVITY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEFFECTIVITY?  { rep.ASSIGNED_EFFECTIVITY }
  var DEFINING_TOLERANCE: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sTOLERANCE_ZONE_TARGET>
    /*[1:nil]*/ )?  { rep.DEFINING_TOLERANCE }
  var NEUTRAL_SKETCH_SEMANTICS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nCURVES_OR_AREA?  { rep.NEUTRAL_SKETCH_SEMANTICS }
  var MARKET_CONTEXT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_CONCEPT_CONTEXT?  { rep.MARKET_CONTEXT }
  var ASSIGNED_GROUP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGROUP?  { rep.ASSIGNED_GROUP }
  var CONFIGURATION: SDAI.GENERIC_ENTITY?  { rep.CONFIGURATION }
  var RELATED_PRODUCT_DEFINITION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sPRODUCT_DEFINITION_OR_REFERENCE?  { rep.RELATED_PRODUCT_DEFINITION }
  var NAME: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { rep.NAME }
  var BASIS_RELATIONSHIPS: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_ASPECT_DERIVING_RELATIONSHIP>/*[1:nil]*/ )?  { rep.BASIS_RELATIONSHIPS }
  var PREFIX_TITLES: (SDAI.LIST<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL>/*[1:nil]*/ )?  { rep.PREFIX_TITLES }
  var RELATING_SHAPE_ASPECT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOMPONENT_FEATURE?  { rep.RELATING_SHAPE_ASPECT }
  var PREDECESSOR: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOLLECTION_VERSION?  { rep.PREDECESSOR }
  var OFFSET: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMEASURE_WITH_UNIT?  { rep.OFFSET }
  var USAGE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_RELATIONSHIP?  { rep.USAGE }
  var TARGET_BASIS_RELATIONSHIP: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_ASPECT_RELATIONSHIP>/*[1:nil]*/ )?  { rep.TARGET_BASIS_RELATIONSHIP }
  var FORMATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_FORMATION?  { rep.FORMATION }
}

