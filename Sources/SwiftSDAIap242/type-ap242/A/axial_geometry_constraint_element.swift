/* file: axial_geometry_constraint_element.swift 	 generated: Mon Jan  3 16:32:52 2022 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.1, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -TYPE DEFINITION in EXPRESS
/*
  TYPE axial_geometry_constraint_element = SELECT
    ( circle (*ENTITY*),
     conical_surface (*ENTITY*),
     cylindrical_surface (*ENTITY*),
     line (*ENTITY*),
     plane (*ENTITY*),
     point (*ENTITY*),
     revolved_area_solid (*ENTITY*),
     revolved_face_solid (*ENTITY*),
     right_circular_cone (*ENTITY*),
     right_circular_cylinder (*ENTITY*),
     sphere (*ENTITY*),
     spherical_surface (*ENTITY*),
     surface_of_revolution (*ENTITY*),
     toroidal_surface (*ENTITY*),
     torus (*ENTITY*) );
  END_TYPE; -- axial_geometry_constraint_element (line:1086 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES FOR SELECT
/*
  circle (*ENTITY*):
  ATTR:  radius: positive_length_measure *** Multiple Select Case Sources ***
  ATTR:  position: axis2_placement (AMBIGUOUS (SELECT LEVEL))
  ATTR:  name: label
  ATTR:  dim: dimension_count

  conical_surface (*ENTITY*):
  ATTR:  radius: length_measure *** Multiple Select Case Sources ***
  ATTR:  position: axis2_placement_3d (AMBIGUOUS (SELECT LEVEL))
  ATTR:  semi_angle: plane_angle_measure *** Multiple Select Case Sources ***
  ATTR:  name: label
  ATTR:  dim: dimension_count

  cylindrical_surface (*ENTITY*):
  ATTR:  radius: positive_length_measure *** Multiple Select Case Sources ***
  ATTR:  position: axis2_placement_3d (AMBIGUOUS (SELECT LEVEL))
  ATTR:  name: label
  ATTR:  dim: dimension_count

  line (*ENTITY*):
  ATTR:  pnt: cartesian_point
  ATTR:  dir: vector
  ATTR:  name: label
  ATTR:  dim: dimension_count

  plane (*ENTITY*):
  ATTR:  position: axis2_placement_3d (AMBIGUOUS (SELECT LEVEL))
  ATTR:  name: label
  ATTR:  dim: dimension_count

  point (*ENTITY*):
  ATTR:  reference_to_curve: definitional_representation
  ATTR:  parent_pt: point
  ATTR:  basis_curve: curve
  ATTR:  external_point: point
  ATTR:  basis_volume: volume
  ATTR:  r: (AMBIGUOUS (CASE LEVEL))
  ATTR:  coordinates: LIST [1 : 3] OF length_measure
  ATTR:  z: length_measure
  ATTR:  using_sketch: positioned_sketch
  ATTR:  plane_of_point: plane
  ATTR:  equivalent_point: cartesian_point
  ATTR:  phi: plane_angle_measure
  ATTR:  transformation: cartesian_transformation_operator
  ATTR:  point_parameter: parameter_value
  ATTR:  basis_edge_curve: edge_curve
  ATTR:  basis_surface: (AMBIGUOUS (CASE LEVEL))
  ATTR:  point_parameter_u: (AMBIGUOUS (CASE LEVEL))
  ATTR:  computed_representation: cartesian_point
  ATTR:  point_parameter_w: parameter_value
  ATTR:  point_parameter_v: (AMBIGUOUS (CASE LEVEL))
  ATTR:  external_curve: curve
  ATTR:  projection_direction: direction
  ATTR:  theta: (AMBIGUOUS (CASE LEVEL))
  ATTR:  basis_face_surface: face_surface
  ATTR:  name: label
  ATTR:  dim: dimension_count

  revolved_area_solid (*ENTITY*):
  ATTR:  axis_line: line *** Multiple Select Case Sources ***
  ATTR:  angle: plane_angle_measure *** Multiple Select Case Sources ***
  ATTR:  axis: axis1_placement *** Multiple Select Case Sources ***
  ATTR:  swept_area: curve_bounded_surface
  ATTR:  name: label
  ATTR:  dim: dimension_count

  revolved_face_solid (*ENTITY*):
  ATTR:  second_trim_condition: trim_condition_select
  ATTR:  swept_face: face_surface
  ATTR:  first_trim_condition: trim_condition_select
  ATTR:  axis_line: line *** Multiple Select Case Sources ***
  ATTR:  angle: plane_angle_measure *** Multiple Select Case Sources ***
  ATTR:  axis: axis1_placement *** Multiple Select Case Sources ***
  ATTR:  name: label
  ATTR:  dim: dimension_count

  right_circular_cone (*ENTITY*):
  ATTR:  radius: length_measure *** Multiple Select Case Sources ***
  ATTR:  position: axis1_placement (AMBIGUOUS (SELECT LEVEL))
  ATTR:  semi_angle: plane_angle_measure *** Multiple Select Case Sources ***
  ATTR:  height: positive_length_measure *** Multiple Select Case Sources ***
  ATTR:  name: label
  ATTR:  dim: dimension_count

  right_circular_cylinder (*ENTITY*):
  ATTR:  radius: positive_length_measure *** Multiple Select Case Sources ***
  ATTR:  position: axis1_placement (AMBIGUOUS (SELECT LEVEL))
  ATTR:  height: positive_length_measure *** Multiple Select Case Sources ***
  ATTR:  name: label
  ATTR:  dim: dimension_count

  sphere (*ENTITY*):
  ATTR:  centre: point
  ATTR:  radius: positive_length_measure *** Multiple Select Case Sources ***
  ATTR:  name: label
  ATTR:  dim: dimension_count

  spherical_surface (*ENTITY*):
  ATTR:  radius: positive_length_measure *** Multiple Select Case Sources ***
  ATTR:  position: axis2_placement_3d (AMBIGUOUS (SELECT LEVEL))
  ATTR:  name: label
  ATTR:  dim: dimension_count

  surface_of_revolution (*ENTITY*):
  ATTR:  swept_curve: curve
  ATTR:  axis_position: axis1_placement
  ATTR:  axis_line: line *** Multiple Select Case Sources ***
  ATTR:  name: label
  ATTR:  dim: dimension_count

  toroidal_surface (*ENTITY*):
  ATTR:  major_radius: positive_length_measure *** Multiple Select Case Sources ***
  ATTR:  select_outer: BOOLEAN
  ATTR:  minor_radius: positive_length_measure *** Multiple Select Case Sources ***
  ATTR:  position: axis2_placement_3d (AMBIGUOUS (SELECT LEVEL))
  ATTR:  name: label
  ATTR:  dim: dimension_count

  torus (*ENTITY*):
  ATTR:  major_radius: positive_length_measure *** Multiple Select Case Sources ***
  ATTR:  minor_radius: positive_length_measure *** Multiple Select Case Sources ***
  ATTR:  position: axis1_placement (AMBIGUOUS (SELECT LEVEL))
  ATTR:  name: label
  ATTR:  dim: dimension_count

*/

/** SELECT type
- EXPRESS:
```express
  TYPE axial_geometry_constraint_element = SELECT
    ( circle (*ENTITY*),
     conical_surface (*ENTITY*),
     cylindrical_surface (*ENTITY*),
     line (*ENTITY*),
     plane (*ENTITY*),
     point (*ENTITY*),
     revolved_area_solid (*ENTITY*),
     revolved_face_solid (*ENTITY*),
     right_circular_cone (*ENTITY*),
     right_circular_cylinder (*ENTITY*),
     sphere (*ENTITY*),
     spherical_surface (*ENTITY*),
     surface_of_revolution (*ENTITY*),
     toroidal_surface (*ENTITY*),
     torus (*ENTITY*) );
  END_TYPE; -- axial_geometry_constraint_element (line:1086 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public enum sAXIAL_GEOMETRY_CONSTRAINT_ELEMENT : SDAIValue, AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sAXIAL_GEOMETRY_CONSTRAINT_ELEMENT__type {

    /// SELECT case ``eCIRCLE`` (ENTITY) in ``sAXIAL_GEOMETRY_CONSTRAINT_ELEMENT``
    case _CIRCLE(eCIRCLE)	// (ENTITY)

    /// SELECT case ``eCONICAL_SURFACE`` (ENTITY) in ``sAXIAL_GEOMETRY_CONSTRAINT_ELEMENT``
    case _CONICAL_SURFACE(eCONICAL_SURFACE)	// (ENTITY)

    /// SELECT case ``eCYLINDRICAL_SURFACE`` (ENTITY) in ``sAXIAL_GEOMETRY_CONSTRAINT_ELEMENT``
    case _CYLINDRICAL_SURFACE(eCYLINDRICAL_SURFACE)	// (ENTITY)

    /// SELECT case ``eLINE`` (ENTITY) in ``sAXIAL_GEOMETRY_CONSTRAINT_ELEMENT``
    case _LINE(eLINE)	// (ENTITY)

    /// SELECT case ``ePLANE`` (ENTITY) in ``sAXIAL_GEOMETRY_CONSTRAINT_ELEMENT``
    case _PLANE(ePLANE)	// (ENTITY)

    /// SELECT case ``ePOINT`` (ENTITY) in ``sAXIAL_GEOMETRY_CONSTRAINT_ELEMENT``
    case _POINT(ePOINT)	// (ENTITY)

    /// SELECT case ``eREVOLVED_AREA_SOLID`` (ENTITY) in ``sAXIAL_GEOMETRY_CONSTRAINT_ELEMENT``
    case _REVOLVED_AREA_SOLID(eREVOLVED_AREA_SOLID)	// (ENTITY)

    /// SELECT case ``eREVOLVED_FACE_SOLID`` (ENTITY) in ``sAXIAL_GEOMETRY_CONSTRAINT_ELEMENT``
    case _REVOLVED_FACE_SOLID(eREVOLVED_FACE_SOLID)	// (ENTITY)

    /// SELECT case ``eRIGHT_CIRCULAR_CONE`` (ENTITY) in ``sAXIAL_GEOMETRY_CONSTRAINT_ELEMENT``
    case _RIGHT_CIRCULAR_CONE(eRIGHT_CIRCULAR_CONE)	// (ENTITY)

    /// SELECT case ``eRIGHT_CIRCULAR_CYLINDER`` (ENTITY) in ``sAXIAL_GEOMETRY_CONSTRAINT_ELEMENT``
    case _RIGHT_CIRCULAR_CYLINDER(eRIGHT_CIRCULAR_CYLINDER)	// (ENTITY)

    /// SELECT case ``eSPHERE`` (ENTITY) in ``sAXIAL_GEOMETRY_CONSTRAINT_ELEMENT``
    case _SPHERE(eSPHERE)	// (ENTITY)

    /// SELECT case ``eSPHERICAL_SURFACE`` (ENTITY) in ``sAXIAL_GEOMETRY_CONSTRAINT_ELEMENT``
    case _SPHERICAL_SURFACE(eSPHERICAL_SURFACE)	// (ENTITY)

    /// SELECT case ``eSURFACE_OF_REVOLUTION`` (ENTITY) in ``sAXIAL_GEOMETRY_CONSTRAINT_ELEMENT``
    case _SURFACE_OF_REVOLUTION(eSURFACE_OF_REVOLUTION)	// (ENTITY)

    /// SELECT case ``eTOROIDAL_SURFACE`` (ENTITY) in ``sAXIAL_GEOMETRY_CONSTRAINT_ELEMENT``
    case _TOROIDAL_SURFACE(eTOROIDAL_SURFACE)	// (ENTITY)

    /// SELECT case ``eTORUS`` (ENTITY) in ``sAXIAL_GEOMETRY_CONSTRAINT_ELEMENT``
    case _TORUS(eTORUS)	// (ENTITY)

    //MARK: - CONSTRUCTORS
    public init(fundamental: FundamentalType) { self = fundamental }

    public init?<T: SDAIUnderlyingType>(possiblyFrom underlyingType: T?){
      return nil
    }

    public init?(possiblyFrom complex: SDAI.ComplexEntity?) {
      guard let complex = complex else { return nil }

      if let base = complex.entityReference(eCIRCLE.self) {self = ._CIRCLE(base) }
      else if let base = complex.entityReference(eCONICAL_SURFACE.self) {self = ._CONICAL_SURFACE(base) }
      else if let base = complex.entityReference(eCYLINDRICAL_SURFACE.self) {self = ._CYLINDRICAL_SURFACE(base) }
      else if let base = complex.entityReference(eLINE.self) {self = ._LINE(base) }
      else if let base = complex.entityReference(ePLANE.self) {self = ._PLANE(base) }
      else if let base = complex.entityReference(ePOINT.self) {self = ._POINT(base) }
      else if let base = complex.entityReference(eREVOLVED_AREA_SOLID.self) {self = ._REVOLVED_AREA_SOLID(base) }
      else if let base = complex.entityReference(eREVOLVED_FACE_SOLID.self) {self = ._REVOLVED_FACE_SOLID(base) }
      else if let base = complex.entityReference(eRIGHT_CIRCULAR_CONE.self) {self = ._RIGHT_CIRCULAR_CONE(base) }
      else if let base = complex.entityReference(eRIGHT_CIRCULAR_CYLINDER.self) {self = ._RIGHT_CIRCULAR_CYLINDER(base) }
      else if let base = complex.entityReference(eSPHERE.self) {self = ._SPHERE(base) }
      else if let base = complex.entityReference(eSPHERICAL_SURFACE.self) {self = ._SPHERICAL_SURFACE(base) }
      else if let base = complex.entityReference(eSURFACE_OF_REVOLUTION.self) {self = ._SURFACE_OF_REVOLUTION(base) }
      else if let base = complex.entityReference(eTOROIDAL_SURFACE.self) {self = ._TOROIDAL_SURFACE(base) }
      else if let base = complex.entityReference(eTORUS.self) {self = ._TORUS(base) }
      else { return nil }
    }

    public init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let select = generic else { return nil }

      if let fundamental = select as? Self {
        self.init(fundamental: fundamental)
      }
      else if let base = eCIRCLE.convert(fromGeneric: select) {
        self = ._CIRCLE(base)
      }
      else if let base = eCONICAL_SURFACE.convert(fromGeneric: select) {
        self = ._CONICAL_SURFACE(base)
      }
      else if let base = eCYLINDRICAL_SURFACE.convert(fromGeneric: select) {
        self = ._CYLINDRICAL_SURFACE(base)
      }
      else if let base = eLINE.convert(fromGeneric: select) {
        self = ._LINE(base)
      }
      else if let base = ePLANE.convert(fromGeneric: select) {
        self = ._PLANE(base)
      }
      else if let base = ePOINT.convert(fromGeneric: select) {
        self = ._POINT(base)
      }
      else if let base = eREVOLVED_AREA_SOLID.convert(fromGeneric: select) {
        self = ._REVOLVED_AREA_SOLID(base)
      }
      else if let base = eREVOLVED_FACE_SOLID.convert(fromGeneric: select) {
        self = ._REVOLVED_FACE_SOLID(base)
      }
      else if let base = eRIGHT_CIRCULAR_CONE.convert(fromGeneric: select) {
        self = ._RIGHT_CIRCULAR_CONE(base)
      }
      else if let base = eRIGHT_CIRCULAR_CYLINDER.convert(fromGeneric: select) {
        self = ._RIGHT_CIRCULAR_CYLINDER(base)
      }
      else if let base = eSPHERE.convert(fromGeneric: select) {
        self = ._SPHERE(base)
      }
      else if let base = eSPHERICAL_SURFACE.convert(fromGeneric: select) {
        self = ._SPHERICAL_SURFACE(base)
      }
      else if let base = eSURFACE_OF_REVOLUTION.convert(fromGeneric: select) {
        self = ._SURFACE_OF_REVOLUTION(base)
      }
      else if let base = eTOROIDAL_SURFACE.convert(fromGeneric: select) {
        self = ._TOROIDAL_SURFACE(base)
      }
      else if let base = eTORUS.convert(fromGeneric: select) {
        self = ._TORUS(base)
      }
      else { return nil }
    }

    // InitializableByP21Parameter
    public static var bareTypeName: String = "AXIAL_GEOMETRY_CONSTRAINT_ELEMENT"

    public init?(p21typedParam: P21Decode.ExchangeStructure.TypedParameter, from exchangeStructure: P21Decode.ExchangeStructure) {
      guard let keyword = p21typedParam.keyword.asStandardKeyword else { exchangeStructure.error = "unexpected p21parameter(\(p21typedParam)) while resolving \(Self.bareTypeName) select value"; return nil }

      switch(keyword) {
      default:
        exchangeStructure.error = "unexpected p21parameter(\(p21typedParam)) while resolving \(Self.bareTypeName) select value"
        return nil
      }
    }

    public init?(p21untypedParam: P21Decode.ExchangeStructure.UntypedParameter, from exchangeStructure: P21Decode.ExchangeStructure) {
      switch p21untypedParam {
      case .rhsOccurenceName(let rhsname):
        switch rhsname {
        case .constantEntityName(let name):
          guard let entity = exchangeStructure.resolve(constantEntityName: name) else {exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) instance"); return nil }
          self.init(possiblyFrom: entity.complexEntity)

        case .entityInstanceName(let name):
          guard let complex = exchangeStructure.resolve(entityInstanceName: name) else {exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) instance"); return nil }
          self.init(possiblyFrom: complex)

        default:
          exchangeStructure.error = "unexpected p21parameter(\(p21untypedParam)) while resolving \(Self.bareTypeName) select instance"
          return nil
        }

      default:
        exchangeStructure.error = "unexpected p21parameter(\(p21untypedParam)) while resolving \(Self.bareTypeName) select instance"
        return nil
      }
    }

    public init?(p21omittedParamfrom exchangeStructure: P21Decode.ExchangeStructure) {
      return nil
    }


    //MARK: - ENTITY UNDERLYING TYPE REFERENCES
    public var super_eREVOLVED_AREA_SOLID: eREVOLVED_AREA_SOLID? {
      switch self {
      case ._REVOLVED_AREA_SOLID(let entity): return entity
      default: return nil
      }
    }

    public var super_eTOROIDAL_SURFACE: eTOROIDAL_SURFACE? {
      switch self {
      case ._TOROIDAL_SURFACE(let entity): return entity
      default: return nil
      }
    }

    public var super_eRIGHT_CIRCULAR_CONE: eRIGHT_CIRCULAR_CONE? {
      switch self {
      case ._RIGHT_CIRCULAR_CONE(let entity): return entity
      default: return nil
      }
    }

    public var super_eSPHERICAL_SURFACE: eSPHERICAL_SURFACE? {
      switch self {
      case ._SPHERICAL_SURFACE(let entity): return entity
      default: return nil
      }
    }

    public var super_eSWEPT_AREA_SOLID: eSWEPT_AREA_SOLID? {
      switch self {
      case ._REVOLVED_AREA_SOLID(let entity): return entity.super_eSWEPT_AREA_SOLID
      default: return nil
      }
    }

    public var super_eSURFACE_OF_REVOLUTION: eSURFACE_OF_REVOLUTION? {
      switch self {
      case ._SURFACE_OF_REVOLUTION(let entity): return entity
      default: return nil
      }
    }

    public var super_eCONIC: eCONIC? {
      switch self {
      case ._CIRCLE(let entity): return entity.super_eCONIC
      default: return nil
      }
    }

    public var super_eELEMENTARY_SURFACE: eELEMENTARY_SURFACE? {
      switch self {
      case ._CONICAL_SURFACE(let entity): return entity.super_eELEMENTARY_SURFACE
      case ._CYLINDRICAL_SURFACE(let entity): return entity.super_eELEMENTARY_SURFACE
      case ._PLANE(let entity): return entity.super_eELEMENTARY_SURFACE
      case ._SPHERICAL_SURFACE(let entity): return entity.super_eELEMENTARY_SURFACE
      case ._TOROIDAL_SURFACE(let entity): return entity.super_eELEMENTARY_SURFACE
      default: return nil
      }
    }

    public var super_eSOLID_MODEL: eSOLID_MODEL? {
      switch self {
      case ._REVOLVED_AREA_SOLID(let entity): return entity.super_eSOLID_MODEL
      case ._REVOLVED_FACE_SOLID(let entity): return entity.super_eSOLID_MODEL
      default: return nil
      }
    }

    public var super_eSWEPT_SURFACE: eSWEPT_SURFACE? {
      switch self {
      case ._SURFACE_OF_REVOLUTION(let entity): return entity.super_eSWEPT_SURFACE
      default: return nil
      }
    }

    public var super_eREPRESENTATION_ITEM: eREPRESENTATION_ITEM? {
      switch self {
      case ._CIRCLE(let entity): return entity.super_eREPRESENTATION_ITEM
      case ._CONICAL_SURFACE(let entity): return entity.super_eREPRESENTATION_ITEM
      case ._CYLINDRICAL_SURFACE(let entity): return entity.super_eREPRESENTATION_ITEM
      case ._LINE(let entity): return entity.super_eREPRESENTATION_ITEM
      case ._PLANE(let entity): return entity.super_eREPRESENTATION_ITEM
      case ._POINT(let entity): return entity.super_eREPRESENTATION_ITEM
      case ._REVOLVED_AREA_SOLID(let entity): return entity.super_eREPRESENTATION_ITEM
      case ._REVOLVED_FACE_SOLID(let entity): return entity.super_eREPRESENTATION_ITEM
      case ._RIGHT_CIRCULAR_CONE(let entity): return entity.super_eREPRESENTATION_ITEM
      case ._RIGHT_CIRCULAR_CYLINDER(let entity): return entity.super_eREPRESENTATION_ITEM
      case ._SPHERE(let entity): return entity.super_eREPRESENTATION_ITEM
      case ._SPHERICAL_SURFACE(let entity): return entity.super_eREPRESENTATION_ITEM
      case ._SURFACE_OF_REVOLUTION(let entity): return entity.super_eREPRESENTATION_ITEM
      case ._TOROIDAL_SURFACE(let entity): return entity.super_eREPRESENTATION_ITEM
      case ._TORUS(let entity): return entity.super_eREPRESENTATION_ITEM
      }
    }

    public var super_ePLANE: ePLANE? {
      switch self {
      case ._PLANE(let entity): return entity
      default: return nil
      }
    }

    public var super_eCIRCLE: eCIRCLE? {
      switch self {
      case ._CIRCLE(let entity): return entity
      default: return nil
      }
    }

    public var super_eLINE: eLINE? {
      switch self {
      case ._LINE(let entity): return entity
      default: return nil
      }
    }

    public var super_eCURVE: eCURVE? {
      switch self {
      case ._CIRCLE(let entity): return entity.super_eCURVE
      case ._LINE(let entity): return entity.super_eCURVE
      default: return nil
      }
    }

    public var super_eSURFACE: eSURFACE? {
      switch self {
      case ._CONICAL_SURFACE(let entity): return entity.super_eSURFACE
      case ._CYLINDRICAL_SURFACE(let entity): return entity.super_eSURFACE
      case ._PLANE(let entity): return entity.super_eSURFACE
      case ._SPHERICAL_SURFACE(let entity): return entity.super_eSURFACE
      case ._SURFACE_OF_REVOLUTION(let entity): return entity.super_eSURFACE
      case ._TOROIDAL_SURFACE(let entity): return entity.super_eSURFACE
      default: return nil
      }
    }

    public var super_eTORUS: eTORUS? {
      switch self {
      case ._TORUS(let entity): return entity
      default: return nil
      }
    }

    public var super_eREVOLVED_FACE_SOLID: eREVOLVED_FACE_SOLID? {
      switch self {
      case ._REVOLVED_FACE_SOLID(let entity): return entity
      default: return nil
      }
    }

    public var super_eRIGHT_CIRCULAR_CYLINDER: eRIGHT_CIRCULAR_CYLINDER? {
      switch self {
      case ._RIGHT_CIRCULAR_CYLINDER(let entity): return entity
      default: return nil
      }
    }

    public var super_ePOINT: ePOINT? {
      switch self {
      case ._POINT(let entity): return entity
      default: return nil
      }
    }

    public var super_eCYLINDRICAL_SURFACE: eCYLINDRICAL_SURFACE? {
      switch self {
      case ._CYLINDRICAL_SURFACE(let entity): return entity
      default: return nil
      }
    }

    public var super_eGEOMETRIC_REPRESENTATION_ITEM: eGEOMETRIC_REPRESENTATION_ITEM? {
      switch self {
      case ._CIRCLE(let entity): return entity.super_eGEOMETRIC_REPRESENTATION_ITEM
      case ._CONICAL_SURFACE(let entity): return entity.super_eGEOMETRIC_REPRESENTATION_ITEM
      case ._CYLINDRICAL_SURFACE(let entity): return entity.super_eGEOMETRIC_REPRESENTATION_ITEM
      case ._LINE(let entity): return entity.super_eGEOMETRIC_REPRESENTATION_ITEM
      case ._PLANE(let entity): return entity.super_eGEOMETRIC_REPRESENTATION_ITEM
      case ._POINT(let entity): return entity.super_eGEOMETRIC_REPRESENTATION_ITEM
      case ._REVOLVED_AREA_SOLID(let entity): return entity.super_eGEOMETRIC_REPRESENTATION_ITEM
      case ._REVOLVED_FACE_SOLID(let entity): return entity.super_eGEOMETRIC_REPRESENTATION_ITEM
      case ._RIGHT_CIRCULAR_CONE(let entity): return entity.super_eGEOMETRIC_REPRESENTATION_ITEM
      case ._RIGHT_CIRCULAR_CYLINDER(let entity): return entity.super_eGEOMETRIC_REPRESENTATION_ITEM
      case ._SPHERE(let entity): return entity.super_eGEOMETRIC_REPRESENTATION_ITEM
      case ._SPHERICAL_SURFACE(let entity): return entity.super_eGEOMETRIC_REPRESENTATION_ITEM
      case ._SURFACE_OF_REVOLUTION(let entity): return entity.super_eGEOMETRIC_REPRESENTATION_ITEM
      case ._TOROIDAL_SURFACE(let entity): return entity.super_eGEOMETRIC_REPRESENTATION_ITEM
      case ._TORUS(let entity): return entity.super_eGEOMETRIC_REPRESENTATION_ITEM
      }
    }

    public var super_eSWEPT_FACE_SOLID: eSWEPT_FACE_SOLID? {
      switch self {
      case ._REVOLVED_FACE_SOLID(let entity): return entity.super_eSWEPT_FACE_SOLID
      default: return nil
      }
    }

    public var super_eSPHERE: eSPHERE? {
      switch self {
      case ._SPHERE(let entity): return entity
      default: return nil
      }
    }

    public var super_eCONICAL_SURFACE: eCONICAL_SURFACE? {
      switch self {
      case ._CONICAL_SURFACE(let entity): return entity
      default: return nil
      }
    }


    //MARK: - ENTITY ATTRIBUTE REFERENCES
    /// attribute of SELECT type ``sAXIAL_GEOMETRY_CONSTRAINT_ELEMENT``
    /// - origin: ENTITY( ``eTOROIDAL_SURFACE`` )
    /// - origin: ENTITY( ``eTORUS`` )
    public var MAJOR_RADIUS: tPOSITIVE_LENGTH_MEASURE?  {
      switch self {
      case ._TOROIDAL_SURFACE(let entity): return entity.MAJOR_RADIUS
      case ._TORUS(let entity): return entity.MAJOR_RADIUS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sAXIAL_GEOMETRY_CONSTRAINT_ELEMENT``
    /// - origin: ENTITY( ``ePOINT`` )
    public var REFERENCE_TO_CURVE: eDEFINITIONAL_REPRESENTATION?  {
      switch self {
      case ._POINT(let entity): return entity.REFERENCE_TO_CURVE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sAXIAL_GEOMETRY_CONSTRAINT_ELEMENT``
    /// - origin: ENTITY( ``eREVOLVED_FACE_SOLID`` )
    public var SECOND_TRIM_CONDITION: sTRIM_CONDITION_SELECT?  {
      switch self {
      case ._REVOLVED_FACE_SOLID(let entity): return entity.SECOND_TRIM_CONDITION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sAXIAL_GEOMETRY_CONSTRAINT_ELEMENT``
    /// - origin: ENTITY( ``eSPHERE`` )
    public var CENTRE: ePOINT?  {
      switch self {
      case ._SPHERE(let entity): return entity.CENTRE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sAXIAL_GEOMETRY_CONSTRAINT_ELEMENT``
    /// - origin: ENTITY( ``eSURFACE_OF_REVOLUTION`` )
    public var SWEPT_CURVE: eCURVE?  {
      switch self {
      case ._SURFACE_OF_REVOLUTION(let entity): return entity.SWEPT_CURVE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sAXIAL_GEOMETRY_CONSTRAINT_ELEMENT``
    /// - origin: ENTITY( ``ePOINT`` )
    public var PARENT_PT: ePOINT?  {
      switch self {
      case ._POINT(let entity): return entity.PARENT_PT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sAXIAL_GEOMETRY_CONSTRAINT_ELEMENT``
    /// - origin: ENTITY( ``ePOINT`` )
    public var BASIS_CURVE: eCURVE?  {
      switch self {
      case ._POINT(let entity): return entity.BASIS_CURVE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sAXIAL_GEOMETRY_CONSTRAINT_ELEMENT``
    /// - origin: ENTITY( ``ePOINT`` )
    public var EXTERNAL_POINT: ePOINT?  {
      switch self {
      case ._POINT(let entity): return entity.EXTERNAL_POINT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sAXIAL_GEOMETRY_CONSTRAINT_ELEMENT``
    /// - origin: ENTITY( ``eTOROIDAL_SURFACE`` )
    public var SELECT_OUTER: SDAI.BOOLEAN?  {
      switch self {
      case ._TOROIDAL_SURFACE(let entity): return entity.SELECT_OUTER
      default: return nil
      }
    }

    /// attribute of SELECT type ``sAXIAL_GEOMETRY_CONSTRAINT_ELEMENT``
    /// - origin: ENTITY( ``eLINE`` )
    public var PNT: eCARTESIAN_POINT?  {
      switch self {
      case ._LINE(let entity): return entity.PNT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sAXIAL_GEOMETRY_CONSTRAINT_ELEMENT``
    /// - origin: ENTITY( ``eTOROIDAL_SURFACE`` )
    /// - origin: ENTITY( ``eTORUS`` )
    public var MINOR_RADIUS: tPOSITIVE_LENGTH_MEASURE?  {
      switch self {
      case ._TOROIDAL_SURFACE(let entity): return entity.MINOR_RADIUS
      case ._TORUS(let entity): return entity.MINOR_RADIUS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sAXIAL_GEOMETRY_CONSTRAINT_ELEMENT``
    /// - origin: ENTITY( ``ePOINT`` )
    public var BASIS_VOLUME: eVOLUME?  {
      switch self {
      case ._POINT(let entity): return entity.BASIS_VOLUME
      default: return nil
      }
    }

    /// attribute of SELECT type ``sAXIAL_GEOMETRY_CONSTRAINT_ELEMENT``
    /// - origin: ENTITY( ``eREVOLVED_FACE_SOLID`` )
    public var SWEPT_FACE: eFACE_SURFACE?  {
      switch self {
      case ._REVOLVED_FACE_SOLID(let entity): return entity.SWEPT_FACE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sAXIAL_GEOMETRY_CONSTRAINT_ELEMENT``
    /// - origin: ENTITY( ``eSURFACE_OF_REVOLUTION`` )
    public var AXIS_POSITION: eAXIS1_PLACEMENT?  {
      switch self {
      case ._SURFACE_OF_REVOLUTION(let entity): return entity.AXIS_POSITION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sAXIAL_GEOMETRY_CONSTRAINT_ELEMENT``
    /// - origin: ENTITY( ``ePOINT`` )
    public var COORDINATES: (SDAI.LIST<tLENGTH_MEASURE>/*[1:3]*/ )?  {
      switch self {
      case ._POINT(let entity): return entity.COORDINATES
      default: return nil
      }
    }

    /// attribute of SELECT type ``sAXIAL_GEOMETRY_CONSTRAINT_ELEMENT``
    /// - origin: ENTITY( ``eREVOLVED_FACE_SOLID`` )
    public var FIRST_TRIM_CONDITION: sTRIM_CONDITION_SELECT?  {
      switch self {
      case ._REVOLVED_FACE_SOLID(let entity): return entity.FIRST_TRIM_CONDITION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sAXIAL_GEOMETRY_CONSTRAINT_ELEMENT``
    /// - origin: ENTITY( ``ePOINT`` )
    public var Z: tLENGTH_MEASURE?  {
      switch self {
      case ._POINT(let entity): return entity.Z
      default: return nil
      }
    }

    /// attribute of SELECT type ``sAXIAL_GEOMETRY_CONSTRAINT_ELEMENT``
    /// - origin: ENTITY( ``ePOINT`` )
    public var USING_SKETCH: ePOSITIONED_SKETCH?  {
      switch self {
      case ._POINT(let entity): return entity.USING_SKETCH
      default: return nil
      }
    }

    /// attribute of SELECT type ``sAXIAL_GEOMETRY_CONSTRAINT_ELEMENT``
    /// - origin: ENTITY( ``ePOINT`` )
    public var PLANE_OF_POINT: ePLANE?  {
      switch self {
      case ._POINT(let entity): return entity.PLANE_OF_POINT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sAXIAL_GEOMETRY_CONSTRAINT_ELEMENT``
    /// - origin: ENTITY( ``eCIRCLE`` )
    /// - origin: ENTITY( ``eCONICAL_SURFACE`` )
    /// - origin: ENTITY( ``eCYLINDRICAL_SURFACE`` )
    /// - origin: ENTITY( ``eRIGHT_CIRCULAR_CONE`` )
    /// - origin: ENTITY( ``eRIGHT_CIRCULAR_CYLINDER`` )
    /// - origin: ENTITY( ``eSPHERE`` )
    /// - origin: ENTITY( ``eSPHERICAL_SURFACE`` )
    public var RADIUS: tLENGTH_MEASURE?  {
      switch self {
      case ._CIRCLE(let entity): return tLENGTH_MEASURE(entity.RADIUS)
      case ._CONICAL_SURFACE(let entity): return entity.RADIUS
      case ._CYLINDRICAL_SURFACE(let entity): return tLENGTH_MEASURE(entity.RADIUS)
      case ._RIGHT_CIRCULAR_CONE(let entity): return entity.RADIUS
      case ._RIGHT_CIRCULAR_CYLINDER(let entity): return tLENGTH_MEASURE(entity.RADIUS)
      case ._SPHERE(let entity): return tLENGTH_MEASURE(entity.RADIUS)
      case ._SPHERICAL_SURFACE(let entity): return tLENGTH_MEASURE(entity.RADIUS)
      default: return nil
      }
    }

    /// attribute of SELECT type ``sAXIAL_GEOMETRY_CONSTRAINT_ELEMENT``
    /// - origin: ENTITY( ``ePOINT`` )
    public var EQUIVALENT_POINT: eCARTESIAN_POINT?  {
      switch self {
      case ._POINT(let entity): return entity.EQUIVALENT_POINT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sAXIAL_GEOMETRY_CONSTRAINT_ELEMENT``
    /// - origin: ENTITY( ``ePOINT`` )
    public var PHI: tPLANE_ANGLE_MEASURE?  {
      switch self {
      case ._POINT(let entity): return entity.PHI
      default: return nil
      }
    }

    //MARK: var POSITION: (AMBIGUOUS)

    /// attribute of SELECT type ``sAXIAL_GEOMETRY_CONSTRAINT_ELEMENT``
    /// - origin: ENTITY( ``ePOINT`` )
    public var TRANSFORMATION: eCARTESIAN_TRANSFORMATION_OPERATOR?  {
      switch self {
      case ._POINT(let entity): return entity.TRANSFORMATION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sAXIAL_GEOMETRY_CONSTRAINT_ELEMENT``
    /// - origin: ENTITY( ``ePOINT`` )
    public var POINT_PARAMETER: tPARAMETER_VALUE?  {
      switch self {
      case ._POINT(let entity): return entity.POINT_PARAMETER
      default: return nil
      }
    }

    /// attribute of SELECT type ``sAXIAL_GEOMETRY_CONSTRAINT_ELEMENT``
    /// - origin: ENTITY( ``ePOINT`` )
    public var BASIS_EDGE_CURVE: eEDGE_CURVE?  {
      switch self {
      case ._POINT(let entity): return entity.BASIS_EDGE_CURVE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sAXIAL_GEOMETRY_CONSTRAINT_ELEMENT``
    /// - origin: ENTITY( ``eREVOLVED_AREA_SOLID`` )
    /// - origin: ENTITY( ``eREVOLVED_FACE_SOLID`` )
    /// - origin: ENTITY( ``eSURFACE_OF_REVOLUTION`` )
    public var AXIS_LINE: eLINE?  {
      switch self {
      case ._REVOLVED_AREA_SOLID(let entity): return entity.AXIS_LINE
      case ._REVOLVED_FACE_SOLID(let entity): return entity.AXIS_LINE
      case ._SURFACE_OF_REVOLUTION(let entity): return entity.AXIS_LINE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sAXIAL_GEOMETRY_CONSTRAINT_ELEMENT``
    /// - origin: ENTITY( ``eREVOLVED_AREA_SOLID`` )
    /// - origin: ENTITY( ``eREVOLVED_FACE_SOLID`` )
    public var ANGLE: tPLANE_ANGLE_MEASURE?  {
      switch self {
      case ._REVOLVED_AREA_SOLID(let entity): return entity.ANGLE
      case ._REVOLVED_FACE_SOLID(let entity): return entity.ANGLE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sAXIAL_GEOMETRY_CONSTRAINT_ELEMENT``
    /// - origin: ENTITY( ``eREVOLVED_AREA_SOLID`` )
    /// - origin: ENTITY( ``eREVOLVED_FACE_SOLID`` )
    public var AXIS: eAXIS1_PLACEMENT?  {
      switch self {
      case ._REVOLVED_AREA_SOLID(let entity): return entity.AXIS
      case ._REVOLVED_FACE_SOLID(let entity): return entity.AXIS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sAXIAL_GEOMETRY_CONSTRAINT_ELEMENT``
    /// - origin: ENTITY( ``eCONICAL_SURFACE`` )
    /// - origin: ENTITY( ``eRIGHT_CIRCULAR_CONE`` )
    public var SEMI_ANGLE: tPLANE_ANGLE_MEASURE?  {
      switch self {
      case ._CONICAL_SURFACE(let entity): return entity.SEMI_ANGLE
      case ._RIGHT_CIRCULAR_CONE(let entity): return entity.SEMI_ANGLE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sAXIAL_GEOMETRY_CONSTRAINT_ELEMENT``
    /// - origin: ENTITY( ``eREVOLVED_AREA_SOLID`` )
    public var SWEPT_AREA: eCURVE_BOUNDED_SURFACE?  {
      switch self {
      case ._REVOLVED_AREA_SOLID(let entity): return entity.SWEPT_AREA
      default: return nil
      }
    }

    /// attribute of SELECT type ``sAXIAL_GEOMETRY_CONSTRAINT_ELEMENT``
    /// - origin: ENTITY( ``ePOINT`` )
    public var COMPUTED_REPRESENTATION: eCARTESIAN_POINT?  {
      switch self {
      case ._POINT(let entity): return entity.COMPUTED_REPRESENTATION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sAXIAL_GEOMETRY_CONSTRAINT_ELEMENT``
    /// - origin: ENTITY( ``ePOINT`` )
    public var POINT_PARAMETER_W: tPARAMETER_VALUE?  {
      switch self {
      case ._POINT(let entity): return entity.POINT_PARAMETER_W
      default: return nil
      }
    }

    /// attribute of SELECT type ``sAXIAL_GEOMETRY_CONSTRAINT_ELEMENT``
    /// - origin: ENTITY( ``ePOINT`` )
    public var EXTERNAL_CURVE: eCURVE?  {
      switch self {
      case ._POINT(let entity): return entity.EXTERNAL_CURVE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sAXIAL_GEOMETRY_CONSTRAINT_ELEMENT``
    /// - origin: ENTITY( ``ePOINT`` )
    public var PROJECTION_DIRECTION: eDIRECTION?  {
      switch self {
      case ._POINT(let entity): return entity.PROJECTION_DIRECTION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sAXIAL_GEOMETRY_CONSTRAINT_ELEMENT``
    /// - origin: ENTITY( ``eRIGHT_CIRCULAR_CONE`` )
    /// - origin: ENTITY( ``eRIGHT_CIRCULAR_CYLINDER`` )
    public var HEIGHT: tPOSITIVE_LENGTH_MEASURE?  {
      switch self {
      case ._RIGHT_CIRCULAR_CONE(let entity): return entity.HEIGHT
      case ._RIGHT_CIRCULAR_CYLINDER(let entity): return entity.HEIGHT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sAXIAL_GEOMETRY_CONSTRAINT_ELEMENT``
    /// - origin: ENTITY( ``eLINE`` )
    public var DIR: eVECTOR?  {
      switch self {
      case ._LINE(let entity): return entity.DIR
      default: return nil
      }
    }

    /// attribute of SELECT type ``sAXIAL_GEOMETRY_CONSTRAINT_ELEMENT``
    /// - origin: ENTITY( ``ePOINT`` )
    public var BASIS_FACE_SURFACE: eFACE_SURFACE?  {
      switch self {
      case ._POINT(let entity): return entity.BASIS_FACE_SURFACE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sAXIAL_GEOMETRY_CONSTRAINT_ELEMENT``
    /// - origin: ENTITY( ``eCIRCLE`` )
    /// - origin: ENTITY( ``eCONICAL_SURFACE`` )
    /// - origin: ENTITY( ``eCYLINDRICAL_SURFACE`` )
    /// - origin: ENTITY( ``eLINE`` )
    /// - origin: ENTITY( ``ePLANE`` )
    /// - origin: ENTITY( ``ePOINT`` )
    /// - origin: ENTITY( ``eREVOLVED_AREA_SOLID`` )
    /// - origin: ENTITY( ``eREVOLVED_FACE_SOLID`` )
    /// - origin: ENTITY( ``eRIGHT_CIRCULAR_CONE`` )
    /// - origin: ENTITY( ``eRIGHT_CIRCULAR_CYLINDER`` )
    /// - origin: ENTITY( ``eSPHERE`` )
    /// - origin: ENTITY( ``eSPHERICAL_SURFACE`` )
    /// - origin: ENTITY( ``eSURFACE_OF_REVOLUTION`` )
    /// - origin: ENTITY( ``eTOROIDAL_SURFACE`` )
    /// - origin: ENTITY( ``eTORUS`` )
    public var NAME: tLABEL?  {
      switch self {
      case ._CIRCLE(let entity): return entity.NAME
      case ._CONICAL_SURFACE(let entity): return entity.NAME
      case ._CYLINDRICAL_SURFACE(let entity): return entity.NAME
      case ._LINE(let entity): return entity.NAME
      case ._PLANE(let entity): return entity.NAME
      case ._POINT(let entity): return entity.NAME
      case ._REVOLVED_AREA_SOLID(let entity): return entity.NAME
      case ._REVOLVED_FACE_SOLID(let entity): return entity.NAME
      case ._RIGHT_CIRCULAR_CONE(let entity): return entity.NAME
      case ._RIGHT_CIRCULAR_CYLINDER(let entity): return entity.NAME
      case ._SPHERE(let entity): return entity.NAME
      case ._SPHERICAL_SURFACE(let entity): return entity.NAME
      case ._SURFACE_OF_REVOLUTION(let entity): return entity.NAME
      case ._TOROIDAL_SURFACE(let entity): return entity.NAME
      case ._TORUS(let entity): return entity.NAME
      }
    }

    /// attribute of SELECT type ``sAXIAL_GEOMETRY_CONSTRAINT_ELEMENT``
    /// - origin: ENTITY( ``eCIRCLE`` )
    /// - origin: ENTITY( ``eCONICAL_SURFACE`` )
    /// - origin: ENTITY( ``eCYLINDRICAL_SURFACE`` )
    /// - origin: ENTITY( ``eLINE`` )
    /// - origin: ENTITY( ``ePLANE`` )
    /// - origin: ENTITY( ``ePOINT`` )
    /// - origin: ENTITY( ``eREVOLVED_AREA_SOLID`` )
    /// - origin: ENTITY( ``eREVOLVED_FACE_SOLID`` )
    /// - origin: ENTITY( ``eRIGHT_CIRCULAR_CONE`` )
    /// - origin: ENTITY( ``eRIGHT_CIRCULAR_CYLINDER`` )
    /// - origin: ENTITY( ``eSPHERE`` )
    /// - origin: ENTITY( ``eSPHERICAL_SURFACE`` )
    /// - origin: ENTITY( ``eSURFACE_OF_REVOLUTION`` )
    /// - origin: ENTITY( ``eTOROIDAL_SURFACE`` )
    /// - origin: ENTITY( ``eTORUS`` )
    public var DIM: tDIMENSION_COUNT?  {
      switch self {
      case ._CIRCLE(let entity): return entity.DIM
      case ._CONICAL_SURFACE(let entity): return entity.DIM
      case ._CYLINDRICAL_SURFACE(let entity): return entity.DIM
      case ._LINE(let entity): return entity.DIM
      case ._PLANE(let entity): return entity.DIM
      case ._POINT(let entity): return entity.DIM
      case ._REVOLVED_AREA_SOLID(let entity): return entity.DIM
      case ._REVOLVED_FACE_SOLID(let entity): return entity.DIM
      case ._RIGHT_CIRCULAR_CONE(let entity): return entity.DIM
      case ._RIGHT_CIRCULAR_CYLINDER(let entity): return entity.DIM
      case ._SPHERE(let entity): return entity.DIM
      case ._SPHERICAL_SURFACE(let entity): return entity.DIM
      case ._SURFACE_OF_REVOLUTION(let entity): return entity.DIM
      case ._TOROIDAL_SURFACE(let entity): return entity.DIM
      case ._TORUS(let entity): return entity.DIM
      }
    }


    //MARK: - SDAIValue
    public func isValueEqual<T: SDAIValue>(to rhs: T) -> Bool {
      switch self {
      case ._CIRCLE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._CONICAL_SURFACE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._CYLINDRICAL_SURFACE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._LINE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PLANE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._POINT(let selection): return selection.value.isValueEqual(to: rhs)
      case ._REVOLVED_AREA_SOLID(let selection): return selection.value.isValueEqual(to: rhs)
      case ._REVOLVED_FACE_SOLID(let selection): return selection.value.isValueEqual(to: rhs)
      case ._RIGHT_CIRCULAR_CONE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._RIGHT_CIRCULAR_CYLINDER(let selection): return selection.value.isValueEqual(to: rhs)
      case ._SPHERE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._SPHERICAL_SURFACE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._SURFACE_OF_REVOLUTION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._TOROIDAL_SURFACE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._TORUS(let selection): return selection.value.isValueEqual(to: rhs)
      }
    }

    public func isValueEqualOptionally<T: SDAIValue>(to rhs: T?) -> Bool? {
      switch self {
      case ._CIRCLE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._CONICAL_SURFACE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._CYLINDRICAL_SURFACE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._LINE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PLANE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._POINT(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._REVOLVED_AREA_SOLID(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._REVOLVED_FACE_SOLID(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._RIGHT_CIRCULAR_CONE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._RIGHT_CIRCULAR_CYLINDER(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._SPHERE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._SPHERICAL_SURFACE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._SURFACE_OF_REVOLUTION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._TOROIDAL_SURFACE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._TORUS(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      }
    }

    public func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      switch self {
      case ._CIRCLE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._CONICAL_SURFACE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._CYLINDRICAL_SURFACE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._LINE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PLANE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._POINT(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._REVOLVED_AREA_SOLID(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._REVOLVED_FACE_SOLID(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._RIGHT_CIRCULAR_CONE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._RIGHT_CIRCULAR_CYLINDER(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._SPHERE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._SPHERICAL_SURFACE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._SURFACE_OF_REVOLUTION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._TOROIDAL_SURFACE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._TORUS(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      }
    }

    public func isValueEqual<T: SDAIValue>(to rhs: T, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      switch self {
      case ._CIRCLE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._CONICAL_SURFACE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._CYLINDRICAL_SURFACE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._LINE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PLANE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._POINT(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._REVOLVED_AREA_SOLID(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._REVOLVED_FACE_SOLID(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._RIGHT_CIRCULAR_CONE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._RIGHT_CIRCULAR_CYLINDER(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._SPHERE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._SPHERICAL_SURFACE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._SURFACE_OF_REVOLUTION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._TOROIDAL_SURFACE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._TORUS(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      }
    }

    public func isValueEqualOptionally<T: SDAIValue>(to rhs: T?, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      switch self {
      case ._CIRCLE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._CONICAL_SURFACE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._CYLINDRICAL_SURFACE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._LINE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PLANE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._POINT(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._REVOLVED_AREA_SOLID(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._REVOLVED_FACE_SOLID(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._RIGHT_CIRCULAR_CONE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._RIGHT_CIRCULAR_CYLINDER(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._SPHERE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._SPHERICAL_SURFACE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._SURFACE_OF_REVOLUTION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._TOROIDAL_SURFACE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._TORUS(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      }
    }


    //MARK: SDAIGenericTypeBase
    public func copy() -> Self {
      switch self {
      case ._CIRCLE(let selection): return ._CIRCLE(selection.copy())
      case ._CONICAL_SURFACE(let selection): return ._CONICAL_SURFACE(selection.copy())
      case ._CYLINDRICAL_SURFACE(let selection): return ._CYLINDRICAL_SURFACE(selection.copy())
      case ._LINE(let selection): return ._LINE(selection.copy())
      case ._PLANE(let selection): return ._PLANE(selection.copy())
      case ._POINT(let selection): return ._POINT(selection.copy())
      case ._REVOLVED_AREA_SOLID(let selection): return ._REVOLVED_AREA_SOLID(selection.copy())
      case ._REVOLVED_FACE_SOLID(let selection): return ._REVOLVED_FACE_SOLID(selection.copy())
      case ._RIGHT_CIRCULAR_CONE(let selection): return ._RIGHT_CIRCULAR_CONE(selection.copy())
      case ._RIGHT_CIRCULAR_CYLINDER(let selection): return ._RIGHT_CIRCULAR_CYLINDER(selection.copy())
      case ._SPHERE(let selection): return ._SPHERE(selection.copy())
      case ._SPHERICAL_SURFACE(let selection): return ._SPHERICAL_SURFACE(selection.copy())
      case ._SURFACE_OF_REVOLUTION(let selection): return ._SURFACE_OF_REVOLUTION(selection.copy())
      case ._TOROIDAL_SURFACE(let selection): return ._TOROIDAL_SURFACE(selection.copy())
      case ._TORUS(let selection): return ._TORUS(selection.copy())
      }
    }

    //MARK: SDAIGenericType
    public var typeMembers: Set<SDAI.STRING> {
      var members: Set<SDAI.STRING> = [SDAI.STRING(Self.typeName)]
      switch self {
      case ._CIRCLE(let selection): members.formUnion(selection.typeMembers)
      case ._CONICAL_SURFACE(let selection): members.formUnion(selection.typeMembers)
      case ._CYLINDRICAL_SURFACE(let selection): members.formUnion(selection.typeMembers)
      case ._LINE(let selection): members.formUnion(selection.typeMembers)
      case ._PLANE(let selection): members.formUnion(selection.typeMembers)
      case ._POINT(let selection): members.formUnion(selection.typeMembers)
      case ._REVOLVED_AREA_SOLID(let selection): members.formUnion(selection.typeMembers)
      case ._REVOLVED_FACE_SOLID(let selection): members.formUnion(selection.typeMembers)
      case ._RIGHT_CIRCULAR_CONE(let selection): members.formUnion(selection.typeMembers)
      case ._RIGHT_CIRCULAR_CYLINDER(let selection): members.formUnion(selection.typeMembers)
      case ._SPHERE(let selection): members.formUnion(selection.typeMembers)
      case ._SPHERICAL_SURFACE(let selection): members.formUnion(selection.typeMembers)
      case ._SURFACE_OF_REVOLUTION(let selection): members.formUnion(selection.typeMembers)
      case ._TOROIDAL_SURFACE(let selection): members.formUnion(selection.typeMembers)
      case ._TORUS(let selection): members.formUnion(selection.typeMembers)
      }
      return members
    }

    public var entityReference: SDAI.EntityReference? {
      switch self {
      case ._CIRCLE(let selection): return selection.entityReference
      case ._CONICAL_SURFACE(let selection): return selection.entityReference
      case ._CYLINDRICAL_SURFACE(let selection): return selection.entityReference
      case ._LINE(let selection): return selection.entityReference
      case ._PLANE(let selection): return selection.entityReference
      case ._POINT(let selection): return selection.entityReference
      case ._REVOLVED_AREA_SOLID(let selection): return selection.entityReference
      case ._REVOLVED_FACE_SOLID(let selection): return selection.entityReference
      case ._RIGHT_CIRCULAR_CONE(let selection): return selection.entityReference
      case ._RIGHT_CIRCULAR_CYLINDER(let selection): return selection.entityReference
      case ._SPHERE(let selection): return selection.entityReference
      case ._SPHERICAL_SURFACE(let selection): return selection.entityReference
      case ._SURFACE_OF_REVOLUTION(let selection): return selection.entityReference
      case ._TOROIDAL_SURFACE(let selection): return selection.entityReference
      case ._TORUS(let selection): return selection.entityReference
      }
    }
    public var stringValue: SDAI.STRING? {
      switch self {
      case ._CIRCLE(let selection): return selection.stringValue
      case ._CONICAL_SURFACE(let selection): return selection.stringValue
      case ._CYLINDRICAL_SURFACE(let selection): return selection.stringValue
      case ._LINE(let selection): return selection.stringValue
      case ._PLANE(let selection): return selection.stringValue
      case ._POINT(let selection): return selection.stringValue
      case ._REVOLVED_AREA_SOLID(let selection): return selection.stringValue
      case ._REVOLVED_FACE_SOLID(let selection): return selection.stringValue
      case ._RIGHT_CIRCULAR_CONE(let selection): return selection.stringValue
      case ._RIGHT_CIRCULAR_CYLINDER(let selection): return selection.stringValue
      case ._SPHERE(let selection): return selection.stringValue
      case ._SPHERICAL_SURFACE(let selection): return selection.stringValue
      case ._SURFACE_OF_REVOLUTION(let selection): return selection.stringValue
      case ._TOROIDAL_SURFACE(let selection): return selection.stringValue
      case ._TORUS(let selection): return selection.stringValue
      }
    }
    public var binaryValue: SDAI.BINARY? {
      switch self {
      case ._CIRCLE(let selection): return selection.binaryValue
      case ._CONICAL_SURFACE(let selection): return selection.binaryValue
      case ._CYLINDRICAL_SURFACE(let selection): return selection.binaryValue
      case ._LINE(let selection): return selection.binaryValue
      case ._PLANE(let selection): return selection.binaryValue
      case ._POINT(let selection): return selection.binaryValue
      case ._REVOLVED_AREA_SOLID(let selection): return selection.binaryValue
      case ._REVOLVED_FACE_SOLID(let selection): return selection.binaryValue
      case ._RIGHT_CIRCULAR_CONE(let selection): return selection.binaryValue
      case ._RIGHT_CIRCULAR_CYLINDER(let selection): return selection.binaryValue
      case ._SPHERE(let selection): return selection.binaryValue
      case ._SPHERICAL_SURFACE(let selection): return selection.binaryValue
      case ._SURFACE_OF_REVOLUTION(let selection): return selection.binaryValue
      case ._TOROIDAL_SURFACE(let selection): return selection.binaryValue
      case ._TORUS(let selection): return selection.binaryValue
      }
    }
    public var logicalValue: SDAI.LOGICAL? {
      switch self {
      case ._CIRCLE(let selection): return selection.logicalValue
      case ._CONICAL_SURFACE(let selection): return selection.logicalValue
      case ._CYLINDRICAL_SURFACE(let selection): return selection.logicalValue
      case ._LINE(let selection): return selection.logicalValue
      case ._PLANE(let selection): return selection.logicalValue
      case ._POINT(let selection): return selection.logicalValue
      case ._REVOLVED_AREA_SOLID(let selection): return selection.logicalValue
      case ._REVOLVED_FACE_SOLID(let selection): return selection.logicalValue
      case ._RIGHT_CIRCULAR_CONE(let selection): return selection.logicalValue
      case ._RIGHT_CIRCULAR_CYLINDER(let selection): return selection.logicalValue
      case ._SPHERE(let selection): return selection.logicalValue
      case ._SPHERICAL_SURFACE(let selection): return selection.logicalValue
      case ._SURFACE_OF_REVOLUTION(let selection): return selection.logicalValue
      case ._TOROIDAL_SURFACE(let selection): return selection.logicalValue
      case ._TORUS(let selection): return selection.logicalValue
      }
    }
    public var booleanValue: SDAI.BOOLEAN? {
      switch self {
      case ._CIRCLE(let selection): return selection.booleanValue
      case ._CONICAL_SURFACE(let selection): return selection.booleanValue
      case ._CYLINDRICAL_SURFACE(let selection): return selection.booleanValue
      case ._LINE(let selection): return selection.booleanValue
      case ._PLANE(let selection): return selection.booleanValue
      case ._POINT(let selection): return selection.booleanValue
      case ._REVOLVED_AREA_SOLID(let selection): return selection.booleanValue
      case ._REVOLVED_FACE_SOLID(let selection): return selection.booleanValue
      case ._RIGHT_CIRCULAR_CONE(let selection): return selection.booleanValue
      case ._RIGHT_CIRCULAR_CYLINDER(let selection): return selection.booleanValue
      case ._SPHERE(let selection): return selection.booleanValue
      case ._SPHERICAL_SURFACE(let selection): return selection.booleanValue
      case ._SURFACE_OF_REVOLUTION(let selection): return selection.booleanValue
      case ._TOROIDAL_SURFACE(let selection): return selection.booleanValue
      case ._TORUS(let selection): return selection.booleanValue
      }
    }
    public var numberValue: SDAI.NUMBER? {
      switch self {
      case ._CIRCLE(let selection): return selection.numberValue
      case ._CONICAL_SURFACE(let selection): return selection.numberValue
      case ._CYLINDRICAL_SURFACE(let selection): return selection.numberValue
      case ._LINE(let selection): return selection.numberValue
      case ._PLANE(let selection): return selection.numberValue
      case ._POINT(let selection): return selection.numberValue
      case ._REVOLVED_AREA_SOLID(let selection): return selection.numberValue
      case ._REVOLVED_FACE_SOLID(let selection): return selection.numberValue
      case ._RIGHT_CIRCULAR_CONE(let selection): return selection.numberValue
      case ._RIGHT_CIRCULAR_CYLINDER(let selection): return selection.numberValue
      case ._SPHERE(let selection): return selection.numberValue
      case ._SPHERICAL_SURFACE(let selection): return selection.numberValue
      case ._SURFACE_OF_REVOLUTION(let selection): return selection.numberValue
      case ._TOROIDAL_SURFACE(let selection): return selection.numberValue
      case ._TORUS(let selection): return selection.numberValue
      }
    }
    public var realValue: SDAI.REAL? {
      switch self {
      case ._CIRCLE(let selection): return selection.realValue
      case ._CONICAL_SURFACE(let selection): return selection.realValue
      case ._CYLINDRICAL_SURFACE(let selection): return selection.realValue
      case ._LINE(let selection): return selection.realValue
      case ._PLANE(let selection): return selection.realValue
      case ._POINT(let selection): return selection.realValue
      case ._REVOLVED_AREA_SOLID(let selection): return selection.realValue
      case ._REVOLVED_FACE_SOLID(let selection): return selection.realValue
      case ._RIGHT_CIRCULAR_CONE(let selection): return selection.realValue
      case ._RIGHT_CIRCULAR_CYLINDER(let selection): return selection.realValue
      case ._SPHERE(let selection): return selection.realValue
      case ._SPHERICAL_SURFACE(let selection): return selection.realValue
      case ._SURFACE_OF_REVOLUTION(let selection): return selection.realValue
      case ._TOROIDAL_SURFACE(let selection): return selection.realValue
      case ._TORUS(let selection): return selection.realValue
      }
    }
    public var integerValue: SDAI.INTEGER? {
      switch self {
      case ._CIRCLE(let selection): return selection.integerValue
      case ._CONICAL_SURFACE(let selection): return selection.integerValue
      case ._CYLINDRICAL_SURFACE(let selection): return selection.integerValue
      case ._LINE(let selection): return selection.integerValue
      case ._PLANE(let selection): return selection.integerValue
      case ._POINT(let selection): return selection.integerValue
      case ._REVOLVED_AREA_SOLID(let selection): return selection.integerValue
      case ._REVOLVED_FACE_SOLID(let selection): return selection.integerValue
      case ._RIGHT_CIRCULAR_CONE(let selection): return selection.integerValue
      case ._RIGHT_CIRCULAR_CYLINDER(let selection): return selection.integerValue
      case ._SPHERE(let selection): return selection.integerValue
      case ._SPHERICAL_SURFACE(let selection): return selection.integerValue
      case ._SURFACE_OF_REVOLUTION(let selection): return selection.integerValue
      case ._TOROIDAL_SURFACE(let selection): return selection.integerValue
      case ._TORUS(let selection): return selection.integerValue
      }
    }
    public var genericEnumValue: SDAI.GenericEnumValue? {
      switch self {
      case ._CIRCLE(let selection): return selection.genericEnumValue
      case ._CONICAL_SURFACE(let selection): return selection.genericEnumValue
      case ._CYLINDRICAL_SURFACE(let selection): return selection.genericEnumValue
      case ._LINE(let selection): return selection.genericEnumValue
      case ._PLANE(let selection): return selection.genericEnumValue
      case ._POINT(let selection): return selection.genericEnumValue
      case ._REVOLVED_AREA_SOLID(let selection): return selection.genericEnumValue
      case ._REVOLVED_FACE_SOLID(let selection): return selection.genericEnumValue
      case ._RIGHT_CIRCULAR_CONE(let selection): return selection.genericEnumValue
      case ._RIGHT_CIRCULAR_CYLINDER(let selection): return selection.genericEnumValue
      case ._SPHERE(let selection): return selection.genericEnumValue
      case ._SPHERICAL_SURFACE(let selection): return selection.genericEnumValue
      case ._SURFACE_OF_REVOLUTION(let selection): return selection.genericEnumValue
      case ._TOROIDAL_SURFACE(let selection): return selection.genericEnumValue
      case ._TORUS(let selection): return selection.genericEnumValue
      }
    }
    public func arrayOptionalValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.ARRAY_OPTIONAL<ELEM>? {
      switch self {
      case ._CIRCLE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._CONICAL_SURFACE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._CYLINDRICAL_SURFACE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._LINE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PLANE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._POINT(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._REVOLVED_AREA_SOLID(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._REVOLVED_FACE_SOLID(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._RIGHT_CIRCULAR_CONE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._RIGHT_CIRCULAR_CYLINDER(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._SPHERE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._SPHERICAL_SURFACE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._SURFACE_OF_REVOLUTION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._TOROIDAL_SURFACE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._TORUS(let selection): return selection.arrayOptionalValue(elementType:elementType)
      }
    }
    public func arrayValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.ARRAY<ELEM>? {
      switch self {
      case ._CIRCLE(let selection): return selection.arrayValue(elementType:elementType)
      case ._CONICAL_SURFACE(let selection): return selection.arrayValue(elementType:elementType)
      case ._CYLINDRICAL_SURFACE(let selection): return selection.arrayValue(elementType:elementType)
      case ._LINE(let selection): return selection.arrayValue(elementType:elementType)
      case ._PLANE(let selection): return selection.arrayValue(elementType:elementType)
      case ._POINT(let selection): return selection.arrayValue(elementType:elementType)
      case ._REVOLVED_AREA_SOLID(let selection): return selection.arrayValue(elementType:elementType)
      case ._REVOLVED_FACE_SOLID(let selection): return selection.arrayValue(elementType:elementType)
      case ._RIGHT_CIRCULAR_CONE(let selection): return selection.arrayValue(elementType:elementType)
      case ._RIGHT_CIRCULAR_CYLINDER(let selection): return selection.arrayValue(elementType:elementType)
      case ._SPHERE(let selection): return selection.arrayValue(elementType:elementType)
      case ._SPHERICAL_SURFACE(let selection): return selection.arrayValue(elementType:elementType)
      case ._SURFACE_OF_REVOLUTION(let selection): return selection.arrayValue(elementType:elementType)
      case ._TOROIDAL_SURFACE(let selection): return selection.arrayValue(elementType:elementType)
      case ._TORUS(let selection): return selection.arrayValue(elementType:elementType)
      }
    }
    public func listValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.LIST<ELEM>? {
      switch self {
      case ._CIRCLE(let selection): return selection.listValue(elementType:elementType)
      case ._CONICAL_SURFACE(let selection): return selection.listValue(elementType:elementType)
      case ._CYLINDRICAL_SURFACE(let selection): return selection.listValue(elementType:elementType)
      case ._LINE(let selection): return selection.listValue(elementType:elementType)
      case ._PLANE(let selection): return selection.listValue(elementType:elementType)
      case ._POINT(let selection): return selection.listValue(elementType:elementType)
      case ._REVOLVED_AREA_SOLID(let selection): return selection.listValue(elementType:elementType)
      case ._REVOLVED_FACE_SOLID(let selection): return selection.listValue(elementType:elementType)
      case ._RIGHT_CIRCULAR_CONE(let selection): return selection.listValue(elementType:elementType)
      case ._RIGHT_CIRCULAR_CYLINDER(let selection): return selection.listValue(elementType:elementType)
      case ._SPHERE(let selection): return selection.listValue(elementType:elementType)
      case ._SPHERICAL_SURFACE(let selection): return selection.listValue(elementType:elementType)
      case ._SURFACE_OF_REVOLUTION(let selection): return selection.listValue(elementType:elementType)
      case ._TOROIDAL_SURFACE(let selection): return selection.listValue(elementType:elementType)
      case ._TORUS(let selection): return selection.listValue(elementType:elementType)
      }
    }
    public func bagValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.BAG<ELEM>? {
      switch self {
      case ._CIRCLE(let selection): return selection.bagValue(elementType:elementType)
      case ._CONICAL_SURFACE(let selection): return selection.bagValue(elementType:elementType)
      case ._CYLINDRICAL_SURFACE(let selection): return selection.bagValue(elementType:elementType)
      case ._LINE(let selection): return selection.bagValue(elementType:elementType)
      case ._PLANE(let selection): return selection.bagValue(elementType:elementType)
      case ._POINT(let selection): return selection.bagValue(elementType:elementType)
      case ._REVOLVED_AREA_SOLID(let selection): return selection.bagValue(elementType:elementType)
      case ._REVOLVED_FACE_SOLID(let selection): return selection.bagValue(elementType:elementType)
      case ._RIGHT_CIRCULAR_CONE(let selection): return selection.bagValue(elementType:elementType)
      case ._RIGHT_CIRCULAR_CYLINDER(let selection): return selection.bagValue(elementType:elementType)
      case ._SPHERE(let selection): return selection.bagValue(elementType:elementType)
      case ._SPHERICAL_SURFACE(let selection): return selection.bagValue(elementType:elementType)
      case ._SURFACE_OF_REVOLUTION(let selection): return selection.bagValue(elementType:elementType)
      case ._TOROIDAL_SURFACE(let selection): return selection.bagValue(elementType:elementType)
      case ._TORUS(let selection): return selection.bagValue(elementType:elementType)
      }
    }
    public func setValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.SET<ELEM>? {
      switch self {
      case ._CIRCLE(let selection): return selection.setValue(elementType:elementType)
      case ._CONICAL_SURFACE(let selection): return selection.setValue(elementType:elementType)
      case ._CYLINDRICAL_SURFACE(let selection): return selection.setValue(elementType:elementType)
      case ._LINE(let selection): return selection.setValue(elementType:elementType)
      case ._PLANE(let selection): return selection.setValue(elementType:elementType)
      case ._POINT(let selection): return selection.setValue(elementType:elementType)
      case ._REVOLVED_AREA_SOLID(let selection): return selection.setValue(elementType:elementType)
      case ._REVOLVED_FACE_SOLID(let selection): return selection.setValue(elementType:elementType)
      case ._RIGHT_CIRCULAR_CONE(let selection): return selection.setValue(elementType:elementType)
      case ._RIGHT_CIRCULAR_CYLINDER(let selection): return selection.setValue(elementType:elementType)
      case ._SPHERE(let selection): return selection.setValue(elementType:elementType)
      case ._SPHERICAL_SURFACE(let selection): return selection.setValue(elementType:elementType)
      case ._SURFACE_OF_REVOLUTION(let selection): return selection.setValue(elementType:elementType)
      case ._TOROIDAL_SURFACE(let selection): return selection.setValue(elementType:elementType)
      case ._TORUS(let selection): return selection.setValue(elementType:elementType)
      }
    }
    public func enumValue<ENUM:SDAIEnumerationType>(enumType:ENUM.Type) -> ENUM? {
      switch self {
      case ._CIRCLE(let selection): return selection.enumValue(enumType:enumType)
      case ._CONICAL_SURFACE(let selection): return selection.enumValue(enumType:enumType)
      case ._CYLINDRICAL_SURFACE(let selection): return selection.enumValue(enumType:enumType)
      case ._LINE(let selection): return selection.enumValue(enumType:enumType)
      case ._PLANE(let selection): return selection.enumValue(enumType:enumType)
      case ._POINT(let selection): return selection.enumValue(enumType:enumType)
      case ._REVOLVED_AREA_SOLID(let selection): return selection.enumValue(enumType:enumType)
      case ._REVOLVED_FACE_SOLID(let selection): return selection.enumValue(enumType:enumType)
      case ._RIGHT_CIRCULAR_CONE(let selection): return selection.enumValue(enumType:enumType)
      case ._RIGHT_CIRCULAR_CYLINDER(let selection): return selection.enumValue(enumType:enumType)
      case ._SPHERE(let selection): return selection.enumValue(enumType:enumType)
      case ._SPHERICAL_SURFACE(let selection): return selection.enumValue(enumType:enumType)
      case ._SURFACE_OF_REVOLUTION(let selection): return selection.enumValue(enumType:enumType)
      case ._TOROIDAL_SURFACE(let selection): return selection.enumValue(enumType:enumType)
      case ._TORUS(let selection): return selection.enumValue(enumType:enumType)
      }
    }

    //MARK: SDAIUnderlyingType
    public typealias FundamentalType = Self
    public static var typeName: String = 
      "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.AXIAL_GEOMETRY_CONSTRAINT_ELEMENT"
    public var asFundamentalType: FundamentalType { return self }

    //MARK: SDAIObservableAggregateElement
    public var entityReferences: AnySequence<SDAI.EntityReference> {
      switch self {
      case ._CIRCLE(let entity): return entity.entityReferences
      case ._CONICAL_SURFACE(let entity): return entity.entityReferences
      case ._CYLINDRICAL_SURFACE(let entity): return entity.entityReferences
      case ._LINE(let entity): return entity.entityReferences
      case ._PLANE(let entity): return entity.entityReferences
      case ._POINT(let entity): return entity.entityReferences
      case ._REVOLVED_AREA_SOLID(let entity): return entity.entityReferences
      case ._REVOLVED_FACE_SOLID(let entity): return entity.entityReferences
      case ._RIGHT_CIRCULAR_CONE(let entity): return entity.entityReferences
      case ._RIGHT_CIRCULAR_CYLINDER(let entity): return entity.entityReferences
      case ._SPHERE(let entity): return entity.entityReferences
      case ._SPHERICAL_SURFACE(let entity): return entity.entityReferences
      case ._SURFACE_OF_REVOLUTION(let entity): return entity.entityReferences
      case ._TOROIDAL_SURFACE(let entity): return entity.entityReferences
      case ._TORUS(let entity): return entity.entityReferences
      }
    }

    public mutating func configure(with observer: SDAI.EntityReferenceObserver) {
      switch self {
      case ._CIRCLE(let entity): 
        entity.configure(with: observer)
        self = ._CIRCLE(entity)
      case ._CONICAL_SURFACE(let entity): 
        entity.configure(with: observer)
        self = ._CONICAL_SURFACE(entity)
      case ._CYLINDRICAL_SURFACE(let entity): 
        entity.configure(with: observer)
        self = ._CYLINDRICAL_SURFACE(entity)
      case ._LINE(let entity): 
        entity.configure(with: observer)
        self = ._LINE(entity)
      case ._PLANE(let entity): 
        entity.configure(with: observer)
        self = ._PLANE(entity)
      case ._POINT(let entity): 
        entity.configure(with: observer)
        self = ._POINT(entity)
      case ._REVOLVED_AREA_SOLID(let entity): 
        entity.configure(with: observer)
        self = ._REVOLVED_AREA_SOLID(entity)
      case ._REVOLVED_FACE_SOLID(let entity): 
        entity.configure(with: observer)
        self = ._REVOLVED_FACE_SOLID(entity)
      case ._RIGHT_CIRCULAR_CONE(let entity): 
        entity.configure(with: observer)
        self = ._RIGHT_CIRCULAR_CONE(entity)
      case ._RIGHT_CIRCULAR_CYLINDER(let entity): 
        entity.configure(with: observer)
        self = ._RIGHT_CIRCULAR_CYLINDER(entity)
      case ._SPHERE(let entity): 
        entity.configure(with: observer)
        self = ._SPHERE(entity)
      case ._SPHERICAL_SURFACE(let entity): 
        entity.configure(with: observer)
        self = ._SPHERICAL_SURFACE(entity)
      case ._SURFACE_OF_REVOLUTION(let entity): 
        entity.configure(with: observer)
        self = ._SURFACE_OF_REVOLUTION(entity)
      case ._TOROIDAL_SURFACE(let entity): 
        entity.configure(with: observer)
        self = ._TOROIDAL_SURFACE(entity)
      case ._TORUS(let entity): 
        entity.configure(with: observer)
        self = ._TORUS(entity)
      }
    }

    public mutating func teardownObserver() {
      switch self {
      case ._CIRCLE(let entity): 
        entity.teardownObserver()
        self = ._CIRCLE(entity)
      case ._CONICAL_SURFACE(let entity): 
        entity.teardownObserver()
        self = ._CONICAL_SURFACE(entity)
      case ._CYLINDRICAL_SURFACE(let entity): 
        entity.teardownObserver()
        self = ._CYLINDRICAL_SURFACE(entity)
      case ._LINE(let entity): 
        entity.teardownObserver()
        self = ._LINE(entity)
      case ._PLANE(let entity): 
        entity.teardownObserver()
        self = ._PLANE(entity)
      case ._POINT(let entity): 
        entity.teardownObserver()
        self = ._POINT(entity)
      case ._REVOLVED_AREA_SOLID(let entity): 
        entity.teardownObserver()
        self = ._REVOLVED_AREA_SOLID(entity)
      case ._REVOLVED_FACE_SOLID(let entity): 
        entity.teardownObserver()
        self = ._REVOLVED_FACE_SOLID(entity)
      case ._RIGHT_CIRCULAR_CONE(let entity): 
        entity.teardownObserver()
        self = ._RIGHT_CIRCULAR_CONE(entity)
      case ._RIGHT_CIRCULAR_CYLINDER(let entity): 
        entity.teardownObserver()
        self = ._RIGHT_CIRCULAR_CYLINDER(entity)
      case ._SPHERE(let entity): 
        entity.teardownObserver()
        self = ._SPHERE(entity)
      case ._SPHERICAL_SURFACE(let entity): 
        entity.teardownObserver()
        self = ._SPHERICAL_SURFACE(entity)
      case ._SURFACE_OF_REVOLUTION(let entity): 
        entity.teardownObserver()
        self = ._SURFACE_OF_REVOLUTION(entity)
      case ._TOROIDAL_SURFACE(let entity): 
        entity.teardownObserver()
        self = ._TOROIDAL_SURFACE(entity)
      case ._TORUS(let entity): 
        entity.teardownObserver()
        self = ._TORUS(entity)
      }
    }

    //MARK: SDAIAggregationBehavior
    public var aggregationHiBound: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationHiIndex: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationLoBound: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationLoIndex: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationSize: Int? {
      switch self {
      default: return nil
      }
    }

    //MARK: WHERE RULE VALIDATION (SELECT TYPE)
    public static func validateWhereRules(instance:Self?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      var result: [SDAI.WhereLabel:SDAI.LOGICAL] = [:]
      switch instance {
      case ._CIRCLE(let selectValue): result = eCIRCLE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\CIRCLE")
      case ._CONICAL_SURFACE(let selectValue): 
        result = eCONICAL_SURFACE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\CONICAL_SURFACE")
      case ._CYLINDRICAL_SURFACE(let selectValue): 
        result = eCYLINDRICAL_SURFACE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\CYLINDRICAL_SURFACE")
      case ._LINE(let selectValue): result = eLINE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\LINE")
      case ._PLANE(let selectValue): result = ePLANE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PLANE")
      case ._POINT(let selectValue): result = ePOINT.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\POINT")
      case ._REVOLVED_AREA_SOLID(let selectValue): 
        result = eREVOLVED_AREA_SOLID.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\REVOLVED_AREA_SOLID")
      case ._REVOLVED_FACE_SOLID(let selectValue): 
        result = eREVOLVED_FACE_SOLID.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\REVOLVED_FACE_SOLID")
      case ._RIGHT_CIRCULAR_CONE(let selectValue): 
        result = eRIGHT_CIRCULAR_CONE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\RIGHT_CIRCULAR_CONE")
      case ._RIGHT_CIRCULAR_CYLINDER(let selectValue): 
        result = eRIGHT_CIRCULAR_CYLINDER.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\RIGHT_CIRCULAR_CYLINDER")
      case ._SPHERE(let selectValue): result = eSPHERE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\SPHERE")
      case ._SPHERICAL_SURFACE(let selectValue): 
        result = eSPHERICAL_SURFACE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\SPHERICAL_SURFACE")
      case ._SURFACE_OF_REVOLUTION(let selectValue): 
        result = eSURFACE_OF_REVOLUTION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\SURFACE_OF_REVOLUTION")
      case ._TOROIDAL_SURFACE(let selectValue): 
        result = eTOROIDAL_SURFACE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\TOROIDAL_SURFACE")
      case ._TORUS(let selectValue): result = eTORUS.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\TORUS")
      case nil: break
      }

      return result
    }

  }

}


//MARK: - SELECT TYPE HIERARCHY
public protocol AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sAXIAL_GEOMETRY_CONSTRAINT_ELEMENT__type: 
  SDAISelectType {

  //MARK: GROUP REFERENCES
  var super_eREVOLVED_AREA_SOLID: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREVOLVED_AREA_SOLID? { get }
  var super_eTOROIDAL_SURFACE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eTOROIDAL_SURFACE? { get }
  var super_eRIGHT_CIRCULAR_CONE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eRIGHT_CIRCULAR_CONE? { get }
  var super_eSPHERICAL_SURFACE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSPHERICAL_SURFACE? { get }
  var super_eSWEPT_AREA_SOLID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSWEPT_AREA_SOLID? { get }
  var super_eSURFACE_OF_REVOLUTION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSURFACE_OF_REVOLUTION? { get }
  var super_eCONIC: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONIC? { get }
  var super_eELEMENTARY_SURFACE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eELEMENTARY_SURFACE? { get }
  var super_eSOLID_MODEL: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSOLID_MODEL? { get }
  var super_eSWEPT_SURFACE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSWEPT_SURFACE? { get }
  var super_eREPRESENTATION_ITEM: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_ITEM? { get }
  var super_ePLANE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePLANE? { get }
  var super_eCIRCLE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCIRCLE? { get }
  var super_eLINE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eLINE? { get }
  var super_eCURVE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCURVE? { get }
  var super_eSURFACE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSURFACE? { get }
  var super_eTORUS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eTORUS? { get }
  var super_eREVOLVED_FACE_SOLID: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREVOLVED_FACE_SOLID? { get }
  var super_eRIGHT_CIRCULAR_CYLINDER: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eRIGHT_CIRCULAR_CYLINDER? { get }
  var super_ePOINT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePOINT? { get }
  var super_eCYLINDRICAL_SURFACE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCYLINDRICAL_SURFACE? { get }
  var super_eGEOMETRIC_REPRESENTATION_ITEM: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGEOMETRIC_REPRESENTATION_ITEM? { get }
  var super_eSWEPT_FACE_SOLID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSWEPT_FACE_SOLID? { get }
  var super_eSPHERE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSPHERE? { get }
  var super_eCONICAL_SURFACE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONICAL_SURFACE? { get }

  //MARK: ENTITY ATTRIBUTE REFERENCES
  var MAJOR_RADIUS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { get }
  var REFERENCE_TO_CURVE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDEFINITIONAL_REPRESENTATION?  { get }
  var SECOND_TRIM_CONDITION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sTRIM_CONDITION_SELECT?  { get }
  var CENTRE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePOINT?  { get }
  var SWEPT_CURVE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCURVE?  { get }
  var PARENT_PT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePOINT?  { get }
  var BASIS_CURVE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCURVE?  { get }
  var EXTERNAL_POINT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePOINT?  { get }
  var SELECT_OUTER: SDAI.BOOLEAN?  { get }
  var PNT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCARTESIAN_POINT?  { get }
  var MINOR_RADIUS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { get }
  var BASIS_VOLUME: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eVOLUME?  { get }
  var SWEPT_FACE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFACE_SURFACE?  { get }
  var AXIS_POSITION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eAXIS1_PLACEMENT?  { get }
  var COORDINATES: (SDAI.LIST<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE>/*[1:3]*/ )?  { get }
  var FIRST_TRIM_CONDITION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sTRIM_CONDITION_SELECT?  { get }
  var Z: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE?  { get }
  var USING_SKETCH: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePOSITIONED_SKETCH?  { get }
  var PLANE_OF_POINT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePLANE?  { get }
  var RADIUS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE?  { get }
  var EQUIVALENT_POINT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCARTESIAN_POINT?  { get }
  var PHI: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { get }
  var TRANSFORMATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCARTESIAN_TRANSFORMATION_OPERATOR?  { get }
  var POINT_PARAMETER: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPARAMETER_VALUE?  { get }
  var BASIS_EDGE_CURVE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEDGE_CURVE?  { get }
  var AXIS_LINE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eLINE?  { get }
  var ANGLE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { get }
  var AXIS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eAXIS1_PLACEMENT?  { get }
  var SEMI_ANGLE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { get }
  var SWEPT_AREA: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCURVE_BOUNDED_SURFACE?  { get }
  var COMPUTED_REPRESENTATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCARTESIAN_POINT?  { get }
  var POINT_PARAMETER_W: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPARAMETER_VALUE?  { get }
  var EXTERNAL_CURVE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCURVE?  { get }
  var PROJECTION_DIRECTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDIRECTION?  { get }
  var HEIGHT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { get }
  var DIR: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eVECTOR?  { get }
  var BASIS_FACE_SURFACE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFACE_SURFACE?  { get }
  var NAME: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { get }
  var DIM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tDIMENSION_COUNT?  { get }
}

public protocol AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sAXIAL_GEOMETRY_CONSTRAINT_ELEMENT__subtype: 
  AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sAXIAL_GEOMETRY_CONSTRAINT_ELEMENT__type, SDAIDefinedType
where Supertype: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sAXIAL_GEOMETRY_CONSTRAINT_ELEMENT__type
{}

public extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sAXIAL_GEOMETRY_CONSTRAINT_ELEMENT__subtype {
  //MARK: CONSTRUCTORS
  init?(possiblyFrom complex: SDAI.ComplexEntity?) {
    self.init(fundamental: FundamentalType(possiblyFrom: complex))
  }

  init?<T: SDAIUnderlyingType>(possiblyFrom underlyingType: T?) {
    self.init(fundamental: FundamentalType(possiblyFrom: underlyingType))
  }

  init?<G: SDAIGenericType>(fromGeneric generic: G?) {
    self.init(fundamental: FundamentalType.convert(fromGeneric: generic))
  }

  //MARK: GROUP REFERENCES
  var super_eREVOLVED_AREA_SOLID: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREVOLVED_AREA_SOLID? { rep.super_eREVOLVED_AREA_SOLID }
  var super_eTOROIDAL_SURFACE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eTOROIDAL_SURFACE? { rep.super_eTOROIDAL_SURFACE }
  var super_eRIGHT_CIRCULAR_CONE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eRIGHT_CIRCULAR_CONE? { rep.super_eRIGHT_CIRCULAR_CONE }
  var super_eSPHERICAL_SURFACE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSPHERICAL_SURFACE? { rep.super_eSPHERICAL_SURFACE }
  var super_eSWEPT_AREA_SOLID: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSWEPT_AREA_SOLID? { rep.super_eSWEPT_AREA_SOLID }
  var super_eSURFACE_OF_REVOLUTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSURFACE_OF_REVOLUTION? { rep.super_eSURFACE_OF_REVOLUTION }
  var super_eCONIC: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONIC? { rep.super_eCONIC }
  var super_eELEMENTARY_SURFACE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eELEMENTARY_SURFACE? { rep.super_eELEMENTARY_SURFACE }
  var super_eSOLID_MODEL: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSOLID_MODEL? { rep.super_eSOLID_MODEL }
  var super_eSWEPT_SURFACE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSWEPT_SURFACE? { rep.super_eSWEPT_SURFACE }
  var super_eREPRESENTATION_ITEM: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_ITEM? { rep.super_eREPRESENTATION_ITEM }
  var super_ePLANE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePLANE? { rep.super_ePLANE }
  var super_eCIRCLE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCIRCLE? { rep.super_eCIRCLE }
  var super_eLINE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eLINE? { rep.super_eLINE }
  var super_eCURVE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCURVE? { rep.super_eCURVE }
  var super_eSURFACE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSURFACE? { rep.super_eSURFACE }
  var super_eTORUS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eTORUS? { rep.super_eTORUS }
  var super_eREVOLVED_FACE_SOLID: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREVOLVED_FACE_SOLID? { rep.super_eREVOLVED_FACE_SOLID }
  var super_eRIGHT_CIRCULAR_CYLINDER: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eRIGHT_CIRCULAR_CYLINDER? { rep.super_eRIGHT_CIRCULAR_CYLINDER }
  var super_ePOINT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePOINT? { rep.super_ePOINT }
  var super_eCYLINDRICAL_SURFACE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCYLINDRICAL_SURFACE? { rep.super_eCYLINDRICAL_SURFACE }
  var super_eGEOMETRIC_REPRESENTATION_ITEM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGEOMETRIC_REPRESENTATION_ITEM? { rep.super_eGEOMETRIC_REPRESENTATION_ITEM }
  var super_eSWEPT_FACE_SOLID: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSWEPT_FACE_SOLID? { rep.super_eSWEPT_FACE_SOLID }
  var super_eSPHERE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSPHERE? { rep.super_eSPHERE }
  var super_eCONICAL_SURFACE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONICAL_SURFACE? { rep.super_eCONICAL_SURFACE }

  //MARK: ENTITY ATTRIBUTE REFERENCES
  var MAJOR_RADIUS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { rep.MAJOR_RADIUS }
  var REFERENCE_TO_CURVE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDEFINITIONAL_REPRESENTATION?  { rep.REFERENCE_TO_CURVE }
  var SECOND_TRIM_CONDITION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sTRIM_CONDITION_SELECT?  { rep.SECOND_TRIM_CONDITION }
  var CENTRE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePOINT?  { rep.CENTRE }
  var SWEPT_CURVE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCURVE?  { rep.SWEPT_CURVE }
  var PARENT_PT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePOINT?  { rep.PARENT_PT }
  var BASIS_CURVE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCURVE?  { rep.BASIS_CURVE }
  var EXTERNAL_POINT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePOINT?  { rep.EXTERNAL_POINT }
  var SELECT_OUTER: SDAI.BOOLEAN?  { rep.SELECT_OUTER }
  var PNT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCARTESIAN_POINT?  { rep.PNT }
  var MINOR_RADIUS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { rep.MINOR_RADIUS }
  var BASIS_VOLUME: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eVOLUME?  { rep.BASIS_VOLUME }
  var SWEPT_FACE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFACE_SURFACE?  { rep.SWEPT_FACE }
  var AXIS_POSITION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eAXIS1_PLACEMENT?  { rep.AXIS_POSITION }
  var COORDINATES: (SDAI.LIST<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE>/*[1:3]*/ )?  { rep.COORDINATES }
  var FIRST_TRIM_CONDITION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sTRIM_CONDITION_SELECT?  { rep.FIRST_TRIM_CONDITION }
  var Z: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE?  { rep.Z }
  var USING_SKETCH: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePOSITIONED_SKETCH?  { rep.USING_SKETCH }
  var PLANE_OF_POINT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePLANE?  { rep.PLANE_OF_POINT }
  var RADIUS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE?  { rep.RADIUS }
  var EQUIVALENT_POINT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCARTESIAN_POINT?  { rep.EQUIVALENT_POINT }
  var PHI: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { rep.PHI }
  var TRANSFORMATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCARTESIAN_TRANSFORMATION_OPERATOR?  { rep.TRANSFORMATION }
  var POINT_PARAMETER: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPARAMETER_VALUE?  { rep.POINT_PARAMETER }
  var BASIS_EDGE_CURVE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEDGE_CURVE?  { rep.BASIS_EDGE_CURVE }
  var AXIS_LINE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eLINE?  { rep.AXIS_LINE }
  var ANGLE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { rep.ANGLE }
  var AXIS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eAXIS1_PLACEMENT?  { rep.AXIS }
  var SEMI_ANGLE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { rep.SEMI_ANGLE }
  var SWEPT_AREA: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCURVE_BOUNDED_SURFACE?  { rep.SWEPT_AREA }
  var COMPUTED_REPRESENTATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCARTESIAN_POINT?  { rep.COMPUTED_REPRESENTATION }
  var POINT_PARAMETER_W: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPARAMETER_VALUE?  { rep.POINT_PARAMETER_W }
  var EXTERNAL_CURVE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCURVE?  { rep.EXTERNAL_CURVE }
  var PROJECTION_DIRECTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDIRECTION?  { rep.PROJECTION_DIRECTION }
  var HEIGHT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { rep.HEIGHT }
  var DIR: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eVECTOR?  { rep.DIR }
  var BASIS_FACE_SURFACE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFACE_SURFACE?  { rep.BASIS_FACE_SURFACE }
  var NAME: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { rep.NAME }
  var DIM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tDIMENSION_COUNT?  { rep.DIM }
}

