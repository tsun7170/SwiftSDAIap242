/* file: state_observed_of_item.swift 	 generated: Tue Nov 16 05:35:44 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -TYPE DEFINITION in EXPRESS
/*
  TYPE state_observed_of_item = SELECT
    ( alternate_product_relationship (*ENTITY*),
     applied_action_method_assignment (*ENTITY*),
     applied_external_identification_assignment (*ENTITY*),
     approval (*ENTITY*),
     assembly_component_usage (*ENTITY*),
     assembly_component_usage_substitute (*ENTITY*),
     attachment_slot_design_to_planned (*ENTITY*),
     attachment_slot_design_to_realized (*ENTITY*),
     attachment_slot_on_product (*ENTITY*),
     attachment_slot_planned_to_realized (*ENTITY*),
     breakdown_element_group_assignment (*ENTITY*),
     breakdown_element_usage (*ENTITY*),
     certification (*ENTITY*),
     configuration_item (*ENTITY*),
     contract (*ENTITY*),
     document_file (*ENTITY*),
     evidence (*ENTITY*),
     final_solution (*ENTITY*),
     group (*ENTITY*),
     interface_connection (*ENTITY*),
     interface_connector_as_planned (*ENTITY*),
     interface_connector_as_realized (*ENTITY*),
     interface_connector_definition (*ENTITY*),
     interface_connector_design (*ENTITY*),
     interface_connector_occurrence (*ENTITY*),
     interface_connector_version (*ENTITY*),
     interface_definition_connection (*ENTITY*),
     interface_specification_definition (*ENTITY*),
     interface_specification_version (*ENTITY*),
     organization (*ENTITY*),
     organizational_project (*ENTITY*),
     person_and_organization (*ENTITY*),
     product (*ENTITY*),
     product_category (*ENTITY*),
     product_concept (*ENTITY*),
     product_definition (*ENTITY*),
     product_definition_formation (*ENTITY*),
     product_definition_group_assignment (*ENTITY*),
     product_definition_relationship (*ENTITY*),
     product_in_attachment_slot (*ENTITY*),
     security_classification (*ENTITY*),
     structured_message (*ENTITY*),
     validation (*ENTITY*),
     verification (*ENTITY*) );
  END_TYPE; -- state_observed_of_item (line:5525 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES FOR SELECT
/*
  alternate_product_relationship (*ENTITY*):
  ATTR:  basis: text
  ATTR:  base: product *** Multiple Select Case Sources ***
  ATTR:  alternate: product
  ATTR:  definition: text (AMBIGUOUS (SELECT LEVEL))
  ATTR:  name: label *** Multiple Select Case Sources ***

  applied_action_method_assignment (*ENTITY*):
  ATTR:  role: action_method_role *** Multiple Select Case Sources ***
  ATTR:  items: SET [1 : ?] OF action_method_items (AMBIGUOUS (SELECT LEVEL))
  ATTR:  assigned_action_method: action_method

  applied_external_identification_assignment (*ENTITY*):
  ATTR:  role: identification_role *** Multiple Select Case Sources ***
  ATTR:  items: SET [1 : ?] OF external_identification_item (AMBIGUOUS (SELECT LEVEL))
  ATTR:  assigned_id: identifier
  ATTR:  source: external_source

  approval (*ENTITY*):
  ATTR:  status: approval_status (AMBIGUOUS (SELECT LEVEL))
  ATTR:  level: label

  assembly_component_usage (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  leaf: product_definition_or_reference
  ATTR:  next_usage: next_assembly_usage_occurrence
  ATTR:  reference_designator: identifier
  ATTR:  upper_usage: assembly_component_usage
  ATTR:  quantity: measure_with_unit
  ATTR:  root: product_definition
  ATTR:  relating_product_definition: product_definition_or_reference *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  product_definition_occurrence_id: identifier
  ATTR:  location: LIST [1 : ?] OF UNIQUE next_assembly_usage_occurrence
  ATTR:  related_product_definition: product_definition_or_reference *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  assembly_component_usage_substitute (*ENTITY*):
  ATTR:  substitute: assembly_component_usage
  ATTR:  base: assembly_component_usage *** Multiple Select Case Sources ***
  ATTR:  definition: text (AMBIGUOUS (SELECT LEVEL))
  ATTR:  name: label *** Multiple Select Case Sources ***

  attachment_slot_design_to_planned (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  related_product_definition_formation: attachment_slot_as_planned *** Multiple Select Case Sources ***
  ATTR:  relating_product_definition_formation: attachment_slot_design *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  attachment_slot_design_to_realized (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  related_product_definition_formation: attachment_slot_as_realized *** Multiple Select Case Sources ***
  ATTR:  relating_product_definition_formation: attachment_slot_design *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  attachment_slot_on_product (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  relating_product_definition: product_definition_or_reference *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  related_product_definition: product_definition_or_reference *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  attachment_slot_planned_to_realized (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  related_product_definition_formation: attachment_slot_as_realized *** Multiple Select Case Sources ***
  ATTR:  relating_product_definition_formation: attachment_slot_as_planned *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  breakdown_element_group_assignment (*ENTITY*):
  ATTR:  role: object_role *** Multiple Select Case Sources ***
  ATTR:  items: SET [1 : 1] OF product_definition_or_breakdown_element_usage (AMBIGUOUS (SELECT LEVEL))
  ATTR:  assigned_group: product_definition_element_relationship *** Multiple Select Case Sources ***

  breakdown_element_usage (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  relating_product_definition: product_definition_or_reference *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  related_product_definition: product_definition_or_reference *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  certification (*ENTITY*):
  ATTR:  purpose: text *** Multiple Select Case Sources ***
  ATTR:  kind: certification_type *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  configuration_item (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  purpose: label *** Multiple Select Case Sources ***
  ATTR:  item_concept_feature: SET [1 : ?] OF product_concept_feature_association
  ATTR:  item_concept: product_concept
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  contract (*ENTITY*):
  ATTR:  purpose: text *** Multiple Select Case Sources ***
  ATTR:  kind: contract_type *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  document_file (*ENTITY*):
  ATTR:  description: (AMBIGUOUS (CASE LEVEL))
  ATTR:  kind: document_type *** Multiple Select Case Sources ***
  ATTR:  representation_types: SET [0 : ?] OF document_representation_type
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  name: (AMBIGUOUS (CASE LEVEL))

  evidence (*ENTITY*):
  ATTR:  role: object_role *** Multiple Select Case Sources ***
  ATTR:  items: SET [1 : ?] OF evidence_item (AMBIGUOUS (SELECT LEVEL))
  ATTR:  assigned_group: group *** Multiple Select Case Sources ***

  final_solution (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  status: STRING (AMBIGUOUS (SELECT LEVEL))
  ATTR:  specification: SET [1 : ?] OF product_definition
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  of_product: product

  group (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  items: SET [0 : ?] OF product_definition (AMBIGUOUS (SELECT LEVEL))
  ATTR:  of_shape: mated_part_relationship
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  assigned_group: mated_part_relationship *** Multiple Select Case Sources ***
  ATTR:  definition: product_definition_usage_relationship (AMBIGUOUS (SELECT LEVEL))
  ATTR:  name: label *** Multiple Select Case Sources ***

  interface_connection (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  interface_connector_as_planned (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  of_product: product

  interface_connector_as_realized (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  of_product: product

  interface_connector_definition (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  frame_of_reference: product_definition_context (AMBIGUOUS (SELECT LEVEL))
  ATTR:  name: label *** Multiple Select Case Sources ***
  ATTR:  formation: product_definition_formation

  interface_connector_design (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  of_product: product

  interface_connector_occurrence (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  interface_connector_version (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  of_product: product

  interface_definition_connection (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  relating_product_definition: product_definition_or_reference *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  related_product_definition: product_definition_or_reference *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  interface_specification_definition (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  frame_of_reference: product_definition_context (AMBIGUOUS (SELECT LEVEL))
  ATTR:  name: label *** Multiple Select Case Sources ***
  ATTR:  formation: product_definition_formation

  interface_specification_version (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  of_product: product

  organization (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  organizational_project (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  responsible_organizations: SET [1 : ?] OF organization
  ATTR:  name: label *** Multiple Select Case Sources ***

  person_and_organization (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  the_person: person
  ATTR:  the_organization: organization
  ATTR:  name: label *** Multiple Select Case Sources ***

  product (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  frame_of_reference: SET [1 : ?] OF product_context (AMBIGUOUS (SELECT LEVEL))
  ATTR:  name: label *** Multiple Select Case Sources ***

  product_category (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  products: SET [1 : ?] OF product
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  product_concept (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  market_context: product_concept_context
  ATTR:  name: label *** Multiple Select Case Sources ***

  product_definition (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  defined_version: collection_version
  ATTR:  documentation_ids: SET [1 : ?] OF document
  ATTR:  relating_product_definition: linear_array_placement_group_component *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  frame_of_reference: product_definition_context (AMBIGUOUS (SELECT LEVEL))
  ATTR:  definition: assembly_component (AMBIGUOUS (SELECT LEVEL))
  ATTR:  related_product_definition: linear_array_placement_group_component *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***
  ATTR:  formation: product_definition_formation

  product_definition_formation (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  status: STRING (AMBIGUOUS (SELECT LEVEL))
  ATTR:  of_collection: collection
  ATTR:  make_or_buy: source
  ATTR:  specification: SET [1 : ?] OF product_definition
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  of_product: product

  product_definition_group_assignment (*ENTITY*):
  ATTR:  role: object_role *** Multiple Select Case Sources ***
  ATTR:  items: SET [1 : 1] OF product_definition_or_product_definition_relationship
    (AMBIGUOUS (SELECT LEVEL))
  ATTR:  assigned_group: product_definition_element_relationship *** Multiple Select Case Sources ***

  product_definition_relationship (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  leaf: product_definition_or_reference
  ATTR:  next_usage: next_assembly_usage_occurrence
  ATTR:  reference_designator: identifier
  ATTR:  constituent_amount: SET [1 : ?] OF characterized_product_composition_value
  ATTR:  upper_usage: assembly_component_usage
  ATTR:  ranking_rationale: text
  ATTR:  quantity: (AMBIGUOUS (CASE LEVEL))
  ATTR:  class: label
  ATTR:  items: SET [0 : ?] OF product_definition (AMBIGUOUS (SELECT LEVEL))
  ATTR:  of_shape: mated_part_relationship
  ATTR:  ranking: INTEGER
  ATTR:  composition_basis: label
  ATTR:  determination_method: text
  ATTR:  root: product_definition
  ATTR:  relating_product_definition: product_definition_or_reference *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  product_definition_occurrence_id: identifier
  ATTR:  assigned_group: mated_part_relationship *** Multiple Select Case Sources ***
  ATTR:  location: LIST [1 : ?] OF UNIQUE next_assembly_usage_occurrence
  ATTR:  definition: mated_part_relationship (AMBIGUOUS (SELECT LEVEL))
  ATTR:  related_product_definition: product_definition_or_reference *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  product_in_attachment_slot (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  relating_product_definition: product_definition_or_reference *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  related_product_definition: product_definition_or_reference *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  security_classification (*ENTITY*):
  ATTR:  security_level: security_classification_level
  ATTR:  purpose: text *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  structured_message (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  frame_of_reference: SET [1 : ?] OF product_context (AMBIGUOUS (SELECT LEVEL))
  ATTR:  name: label *** Multiple Select Case Sources ***

  validation (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  verification (*ENTITY*):
  ATTR:  description: text *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

*/

/** SELECT type
- EXPRESS:
```express
  TYPE state_observed_of_item = SELECT
    ( alternate_product_relationship (*ENTITY*),
     applied_action_method_assignment (*ENTITY*),
     applied_external_identification_assignment (*ENTITY*),
     approval (*ENTITY*),
     assembly_component_usage (*ENTITY*),
     assembly_component_usage_substitute (*ENTITY*),
     attachment_slot_design_to_planned (*ENTITY*),
     attachment_slot_design_to_realized (*ENTITY*),
     attachment_slot_on_product (*ENTITY*),
     attachment_slot_planned_to_realized (*ENTITY*),
     breakdown_element_group_assignment (*ENTITY*),
     breakdown_element_usage (*ENTITY*),
     certification (*ENTITY*),
     configuration_item (*ENTITY*),
     contract (*ENTITY*),
     document_file (*ENTITY*),
     evidence (*ENTITY*),
     final_solution (*ENTITY*),
     group (*ENTITY*),
     interface_connection (*ENTITY*),
     interface_connector_as_planned (*ENTITY*),
     interface_connector_as_realized (*ENTITY*),
     interface_connector_definition (*ENTITY*),
     interface_connector_design (*ENTITY*),
     interface_connector_occurrence (*ENTITY*),
     interface_connector_version (*ENTITY*),
     interface_definition_connection (*ENTITY*),
     interface_specification_definition (*ENTITY*),
     interface_specification_version (*ENTITY*),
     organization (*ENTITY*),
     organizational_project (*ENTITY*),
     person_and_organization (*ENTITY*),
     product (*ENTITY*),
     product_category (*ENTITY*),
     product_concept (*ENTITY*),
     product_definition (*ENTITY*),
     product_definition_formation (*ENTITY*),
     product_definition_group_assignment (*ENTITY*),
     product_definition_relationship (*ENTITY*),
     product_in_attachment_slot (*ENTITY*),
     security_classification (*ENTITY*),
     structured_message (*ENTITY*),
     validation (*ENTITY*),
     verification (*ENTITY*) );
  END_TYPE; -- state_observed_of_item (line:5525 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public enum sSTATE_OBSERVED_OF_ITEM : SDAIValue, AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sSTATE_OBSERVED_OF_ITEM__type {

    /// SELECT case ``eALTERNATE_PRODUCT_RELATIONSHIP`` (ENTITY) in ``sSTATE_OBSERVED_OF_ITEM``
    case _ALTERNATE_PRODUCT_RELATIONSHIP(eALTERNATE_PRODUCT_RELATIONSHIP)	// (ENTITY)

    /// SELECT case ``eAPPLIED_ACTION_METHOD_ASSIGNMENT`` (ENTITY) in ``sSTATE_OBSERVED_OF_ITEM``
    case _APPLIED_ACTION_METHOD_ASSIGNMENT(eAPPLIED_ACTION_METHOD_ASSIGNMENT)	// (ENTITY)

    /// SELECT case ``eAPPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT`` (ENTITY) in ``sSTATE_OBSERVED_OF_ITEM``
    case _APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(
      eAPPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT)	// (ENTITY)

    /// SELECT case ``eAPPROVAL`` (ENTITY) in ``sSTATE_OBSERVED_OF_ITEM``
    case _APPROVAL(eAPPROVAL)	// (ENTITY)

    /// SELECT case ``eASSEMBLY_COMPONENT_USAGE`` (ENTITY) in ``sSTATE_OBSERVED_OF_ITEM``
    case _ASSEMBLY_COMPONENT_USAGE(eASSEMBLY_COMPONENT_USAGE)	// (ENTITY)

    /// SELECT case ``eASSEMBLY_COMPONENT_USAGE_SUBSTITUTE`` (ENTITY) in ``sSTATE_OBSERVED_OF_ITEM``
    case _ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(eASSEMBLY_COMPONENT_USAGE_SUBSTITUTE)	// (ENTITY)

    /// SELECT case ``eATTACHMENT_SLOT_DESIGN_TO_PLANNED`` (ENTITY) in ``sSTATE_OBSERVED_OF_ITEM``
    case _ATTACHMENT_SLOT_DESIGN_TO_PLANNED(eATTACHMENT_SLOT_DESIGN_TO_PLANNED)	// (ENTITY)

    /// SELECT case ``eATTACHMENT_SLOT_DESIGN_TO_REALIZED`` (ENTITY) in ``sSTATE_OBSERVED_OF_ITEM``
    case _ATTACHMENT_SLOT_DESIGN_TO_REALIZED(eATTACHMENT_SLOT_DESIGN_TO_REALIZED)	// (ENTITY)

    /// SELECT case ``eATTACHMENT_SLOT_ON_PRODUCT`` (ENTITY) in ``sSTATE_OBSERVED_OF_ITEM``
    case _ATTACHMENT_SLOT_ON_PRODUCT(eATTACHMENT_SLOT_ON_PRODUCT)	// (ENTITY)

    /// SELECT case ``eATTACHMENT_SLOT_PLANNED_TO_REALIZED`` (ENTITY) in ``sSTATE_OBSERVED_OF_ITEM``
    case _ATTACHMENT_SLOT_PLANNED_TO_REALIZED(eATTACHMENT_SLOT_PLANNED_TO_REALIZED)	// (ENTITY)

    /// SELECT case ``eBREAKDOWN_ELEMENT_GROUP_ASSIGNMENT`` (ENTITY) in ``sSTATE_OBSERVED_OF_ITEM``
    case _BREAKDOWN_ELEMENT_GROUP_ASSIGNMENT(eBREAKDOWN_ELEMENT_GROUP_ASSIGNMENT)	// (ENTITY)

    /// SELECT case ``eBREAKDOWN_ELEMENT_USAGE`` (ENTITY) in ``sSTATE_OBSERVED_OF_ITEM``
    case _BREAKDOWN_ELEMENT_USAGE(eBREAKDOWN_ELEMENT_USAGE)	// (ENTITY)

    /// SELECT case ``eCERTIFICATION`` (ENTITY) in ``sSTATE_OBSERVED_OF_ITEM``
    case _CERTIFICATION(eCERTIFICATION)	// (ENTITY)

    /// SELECT case ``eCONFIGURATION_ITEM`` (ENTITY) in ``sSTATE_OBSERVED_OF_ITEM``
    case _CONFIGURATION_ITEM(eCONFIGURATION_ITEM)	// (ENTITY)

    /// SELECT case ``eCONTRACT`` (ENTITY) in ``sSTATE_OBSERVED_OF_ITEM``
    case _CONTRACT(eCONTRACT)	// (ENTITY)

    /// SELECT case ``eDOCUMENT_FILE`` (ENTITY) in ``sSTATE_OBSERVED_OF_ITEM``
    case _DOCUMENT_FILE(eDOCUMENT_FILE)	// (ENTITY)

    /// SELECT case ``eEVIDENCE`` (ENTITY) in ``sSTATE_OBSERVED_OF_ITEM``
    case _EVIDENCE(eEVIDENCE)	// (ENTITY)

    /// SELECT case ``eFINAL_SOLUTION`` (ENTITY) in ``sSTATE_OBSERVED_OF_ITEM``
    case _FINAL_SOLUTION(eFINAL_SOLUTION)	// (ENTITY)

    /// SELECT case ``eGROUP`` (ENTITY) in ``sSTATE_OBSERVED_OF_ITEM``
    case _GROUP(eGROUP)	// (ENTITY)

    /// SELECT case ``eINTERFACE_CONNECTION`` (ENTITY) in ``sSTATE_OBSERVED_OF_ITEM``
    case _INTERFACE_CONNECTION(eINTERFACE_CONNECTION)	// (ENTITY)

    /// SELECT case ``eINTERFACE_CONNECTOR_AS_PLANNED`` (ENTITY) in ``sSTATE_OBSERVED_OF_ITEM``
    case _INTERFACE_CONNECTOR_AS_PLANNED(eINTERFACE_CONNECTOR_AS_PLANNED)	// (ENTITY)

    /// SELECT case ``eINTERFACE_CONNECTOR_AS_REALIZED`` (ENTITY) in ``sSTATE_OBSERVED_OF_ITEM``
    case _INTERFACE_CONNECTOR_AS_REALIZED(eINTERFACE_CONNECTOR_AS_REALIZED)	// (ENTITY)

    /// SELECT case ``eINTERFACE_CONNECTOR_DEFINITION`` (ENTITY) in ``sSTATE_OBSERVED_OF_ITEM``
    case _INTERFACE_CONNECTOR_DEFINITION(eINTERFACE_CONNECTOR_DEFINITION)	// (ENTITY)

    /// SELECT case ``eINTERFACE_CONNECTOR_DESIGN`` (ENTITY) in ``sSTATE_OBSERVED_OF_ITEM``
    case _INTERFACE_CONNECTOR_DESIGN(eINTERFACE_CONNECTOR_DESIGN)	// (ENTITY)

    /// SELECT case ``eINTERFACE_CONNECTOR_OCCURRENCE`` (ENTITY) in ``sSTATE_OBSERVED_OF_ITEM``
    case _INTERFACE_CONNECTOR_OCCURRENCE(eINTERFACE_CONNECTOR_OCCURRENCE)	// (ENTITY)

    /// SELECT case ``eINTERFACE_CONNECTOR_VERSION`` (ENTITY) in ``sSTATE_OBSERVED_OF_ITEM``
    case _INTERFACE_CONNECTOR_VERSION(eINTERFACE_CONNECTOR_VERSION)	// (ENTITY)

    /// SELECT case ``eINTERFACE_DEFINITION_CONNECTION`` (ENTITY) in ``sSTATE_OBSERVED_OF_ITEM``
    case _INTERFACE_DEFINITION_CONNECTION(eINTERFACE_DEFINITION_CONNECTION)	// (ENTITY)

    /// SELECT case ``eINTERFACE_SPECIFICATION_DEFINITION`` (ENTITY) in ``sSTATE_OBSERVED_OF_ITEM``
    case _INTERFACE_SPECIFICATION_DEFINITION(eINTERFACE_SPECIFICATION_DEFINITION)	// (ENTITY)

    /// SELECT case ``eINTERFACE_SPECIFICATION_VERSION`` (ENTITY) in ``sSTATE_OBSERVED_OF_ITEM``
    case _INTERFACE_SPECIFICATION_VERSION(eINTERFACE_SPECIFICATION_VERSION)	// (ENTITY)

    /// SELECT case ``eORGANIZATION`` (ENTITY) in ``sSTATE_OBSERVED_OF_ITEM``
    case _ORGANIZATION(eORGANIZATION)	// (ENTITY)

    /// SELECT case ``eORGANIZATIONAL_PROJECT`` (ENTITY) in ``sSTATE_OBSERVED_OF_ITEM``
    case _ORGANIZATIONAL_PROJECT(eORGANIZATIONAL_PROJECT)	// (ENTITY)

    /// SELECT case ``ePERSON_AND_ORGANIZATION`` (ENTITY) in ``sSTATE_OBSERVED_OF_ITEM``
    case _PERSON_AND_ORGANIZATION(ePERSON_AND_ORGANIZATION)	// (ENTITY)

    /// SELECT case ``ePRODUCT`` (ENTITY) in ``sSTATE_OBSERVED_OF_ITEM``
    case _PRODUCT(ePRODUCT)	// (ENTITY)

    /// SELECT case ``ePRODUCT_CATEGORY`` (ENTITY) in ``sSTATE_OBSERVED_OF_ITEM``
    case _PRODUCT_CATEGORY(ePRODUCT_CATEGORY)	// (ENTITY)

    /// SELECT case ``ePRODUCT_CONCEPT`` (ENTITY) in ``sSTATE_OBSERVED_OF_ITEM``
    case _PRODUCT_CONCEPT(ePRODUCT_CONCEPT)	// (ENTITY)

    /// SELECT case ``ePRODUCT_DEFINITION`` (ENTITY) in ``sSTATE_OBSERVED_OF_ITEM``
    case _PRODUCT_DEFINITION(ePRODUCT_DEFINITION)	// (ENTITY)

    /// SELECT case ``ePRODUCT_DEFINITION_FORMATION`` (ENTITY) in ``sSTATE_OBSERVED_OF_ITEM``
    case _PRODUCT_DEFINITION_FORMATION(ePRODUCT_DEFINITION_FORMATION)	// (ENTITY)

    /// SELECT case ``ePRODUCT_DEFINITION_GROUP_ASSIGNMENT`` (ENTITY) in ``sSTATE_OBSERVED_OF_ITEM``
    case _PRODUCT_DEFINITION_GROUP_ASSIGNMENT(ePRODUCT_DEFINITION_GROUP_ASSIGNMENT)	// (ENTITY)

    /// SELECT case ``ePRODUCT_DEFINITION_RELATIONSHIP`` (ENTITY) in ``sSTATE_OBSERVED_OF_ITEM``
    case _PRODUCT_DEFINITION_RELATIONSHIP(ePRODUCT_DEFINITION_RELATIONSHIP)	// (ENTITY)

    /// SELECT case ``ePRODUCT_IN_ATTACHMENT_SLOT`` (ENTITY) in ``sSTATE_OBSERVED_OF_ITEM``
    case _PRODUCT_IN_ATTACHMENT_SLOT(ePRODUCT_IN_ATTACHMENT_SLOT)	// (ENTITY)

    /// SELECT case ``eSECURITY_CLASSIFICATION`` (ENTITY) in ``sSTATE_OBSERVED_OF_ITEM``
    case _SECURITY_CLASSIFICATION(eSECURITY_CLASSIFICATION)	// (ENTITY)

    /// SELECT case ``eSTRUCTURED_MESSAGE`` (ENTITY) in ``sSTATE_OBSERVED_OF_ITEM``
    case _STRUCTURED_MESSAGE(eSTRUCTURED_MESSAGE)	// (ENTITY)

    /// SELECT case ``eVALIDATION`` (ENTITY) in ``sSTATE_OBSERVED_OF_ITEM``
    case _VALIDATION(eVALIDATION)	// (ENTITY)

    /// SELECT case ``eVERIFICATION`` (ENTITY) in ``sSTATE_OBSERVED_OF_ITEM``
    case _VERIFICATION(eVERIFICATION)	// (ENTITY)

    //MARK: - CONSTRUCTORS
    public init(fundamental: FundamentalType) { self = fundamental }

    public init?<T: SDAIUnderlyingType>(possiblyFrom underlyingType: T?){
      return nil
    }

    public init?(possiblyFrom complex: SDAI.ComplexEntity?) {
      guard let complex = complex else { return nil }

      if let base = complex.entityReference(eALTERNATE_PRODUCT_RELATIONSHIP.self) {self = ._ALTERNATE_PRODUCT_RELATIONSHIP(base) }
      else if let base = complex.entityReference(eAPPLIED_ACTION_METHOD_ASSIGNMENT.self) {self = ._APPLIED_ACTION_METHOD_ASSIGNMENT(base) }
      else if let base = complex.entityReference(eAPPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT.self) {self = ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(base) }
      else if let base = complex.entityReference(eAPPROVAL.self) {self = ._APPROVAL(base) }
      else if let base = complex.entityReference(eASSEMBLY_COMPONENT_USAGE.self) {self = ._ASSEMBLY_COMPONENT_USAGE(base) }
      else if let base = complex.entityReference(eASSEMBLY_COMPONENT_USAGE_SUBSTITUTE.self) {self = ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(base) }
      else if let base = complex.entityReference(eATTACHMENT_SLOT_DESIGN_TO_PLANNED.self) {self = ._ATTACHMENT_SLOT_DESIGN_TO_PLANNED(base) }
      else if let base = complex.entityReference(eATTACHMENT_SLOT_DESIGN_TO_REALIZED.self) {self = ._ATTACHMENT_SLOT_DESIGN_TO_REALIZED(base) }
      else if let base = complex.entityReference(eATTACHMENT_SLOT_ON_PRODUCT.self) {self = ._ATTACHMENT_SLOT_ON_PRODUCT(base) }
      else if let base = complex.entityReference(eATTACHMENT_SLOT_PLANNED_TO_REALIZED.self) {self = ._ATTACHMENT_SLOT_PLANNED_TO_REALIZED(base) }
      else if let base = complex.entityReference(eBREAKDOWN_ELEMENT_GROUP_ASSIGNMENT.self) {self = ._BREAKDOWN_ELEMENT_GROUP_ASSIGNMENT(base) }
      else if let base = complex.entityReference(eBREAKDOWN_ELEMENT_USAGE.self) {self = ._BREAKDOWN_ELEMENT_USAGE(base) }
      else if let base = complex.entityReference(eCERTIFICATION.self) {self = ._CERTIFICATION(base) }
      else if let base = complex.entityReference(eCONFIGURATION_ITEM.self) {self = ._CONFIGURATION_ITEM(base) }
      else if let base = complex.entityReference(eCONTRACT.self) {self = ._CONTRACT(base) }
      else if let base = complex.entityReference(eDOCUMENT_FILE.self) {self = ._DOCUMENT_FILE(base) }
      else if let base = complex.entityReference(eEVIDENCE.self) {self = ._EVIDENCE(base) }
      else if let base = complex.entityReference(eFINAL_SOLUTION.self) {self = ._FINAL_SOLUTION(base) }
      else if let base = complex.entityReference(eGROUP.self) {self = ._GROUP(base) }
      else if let base = complex.entityReference(eINTERFACE_CONNECTION.self) {self = ._INTERFACE_CONNECTION(base) }
      else if let base = complex.entityReference(eINTERFACE_CONNECTOR_AS_PLANNED.self) {self = ._INTERFACE_CONNECTOR_AS_PLANNED(base) }
      else if let base = complex.entityReference(eINTERFACE_CONNECTOR_AS_REALIZED.self) {self = ._INTERFACE_CONNECTOR_AS_REALIZED(base) }
      else if let base = complex.entityReference(eINTERFACE_CONNECTOR_DEFINITION.self) {self = ._INTERFACE_CONNECTOR_DEFINITION(base) }
      else if let base = complex.entityReference(eINTERFACE_CONNECTOR_DESIGN.self) {self = ._INTERFACE_CONNECTOR_DESIGN(base) }
      else if let base = complex.entityReference(eINTERFACE_CONNECTOR_OCCURRENCE.self) {self = ._INTERFACE_CONNECTOR_OCCURRENCE(base) }
      else if let base = complex.entityReference(eINTERFACE_CONNECTOR_VERSION.self) {self = ._INTERFACE_CONNECTOR_VERSION(base) }
      else if let base = complex.entityReference(eINTERFACE_DEFINITION_CONNECTION.self) {self = ._INTERFACE_DEFINITION_CONNECTION(base) }
      else if let base = complex.entityReference(eINTERFACE_SPECIFICATION_DEFINITION.self) {self = ._INTERFACE_SPECIFICATION_DEFINITION(base) }
      else if let base = complex.entityReference(eINTERFACE_SPECIFICATION_VERSION.self) {self = ._INTERFACE_SPECIFICATION_VERSION(base) }
      else if let base = complex.entityReference(eORGANIZATION.self) {self = ._ORGANIZATION(base) }
      else if let base = complex.entityReference(eORGANIZATIONAL_PROJECT.self) {self = ._ORGANIZATIONAL_PROJECT(base) }
      else if let base = complex.entityReference(ePERSON_AND_ORGANIZATION.self) {self = ._PERSON_AND_ORGANIZATION(base) }
      else if let base = complex.entityReference(ePRODUCT.self) {self = ._PRODUCT(base) }
      else if let base = complex.entityReference(ePRODUCT_CATEGORY.self) {self = ._PRODUCT_CATEGORY(base) }
      else if let base = complex.entityReference(ePRODUCT_CONCEPT.self) {self = ._PRODUCT_CONCEPT(base) }
      else if let base = complex.entityReference(ePRODUCT_DEFINITION.self) {self = ._PRODUCT_DEFINITION(base) }
      else if let base = complex.entityReference(ePRODUCT_DEFINITION_FORMATION.self) {self = ._PRODUCT_DEFINITION_FORMATION(base) }
      else if let base = complex.entityReference(ePRODUCT_DEFINITION_GROUP_ASSIGNMENT.self) {self = ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(base) }
      else if let base = complex.entityReference(ePRODUCT_DEFINITION_RELATIONSHIP.self) {self = ._PRODUCT_DEFINITION_RELATIONSHIP(base) }
      else if let base = complex.entityReference(ePRODUCT_IN_ATTACHMENT_SLOT.self) {self = ._PRODUCT_IN_ATTACHMENT_SLOT(base) }
      else if let base = complex.entityReference(eSECURITY_CLASSIFICATION.self) {self = ._SECURITY_CLASSIFICATION(base) }
      else if let base = complex.entityReference(eSTRUCTURED_MESSAGE.self) {self = ._STRUCTURED_MESSAGE(base) }
      else if let base = complex.entityReference(eVALIDATION.self) {self = ._VALIDATION(base) }
      else if let base = complex.entityReference(eVERIFICATION.self) {self = ._VERIFICATION(base) }
      else { return nil }
    }

    public init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let select = generic else { return nil }

      if let fundamental = select as? Self {
        self.init(fundamental: fundamental)
      }
      else if let base = eALTERNATE_PRODUCT_RELATIONSHIP.convert(fromGeneric: select) {
        self = ._ALTERNATE_PRODUCT_RELATIONSHIP(base)
      }
      else if let base = eAPPLIED_ACTION_METHOD_ASSIGNMENT.convert(fromGeneric: select) {
        self = ._APPLIED_ACTION_METHOD_ASSIGNMENT(base)
      }
      else if let base = eAPPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT.convert(fromGeneric: select) {
        self = ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(base)
      }
      else if let base = eAPPROVAL.convert(fromGeneric: select) {
        self = ._APPROVAL(base)
      }
      else if let base = eASSEMBLY_COMPONENT_USAGE.convert(fromGeneric: select) {
        self = ._ASSEMBLY_COMPONENT_USAGE(base)
      }
      else if let base = eASSEMBLY_COMPONENT_USAGE_SUBSTITUTE.convert(fromGeneric: select) {
        self = ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(base)
      }
      else if let base = eATTACHMENT_SLOT_DESIGN_TO_PLANNED.convert(fromGeneric: select) {
        self = ._ATTACHMENT_SLOT_DESIGN_TO_PLANNED(base)
      }
      else if let base = eATTACHMENT_SLOT_DESIGN_TO_REALIZED.convert(fromGeneric: select) {
        self = ._ATTACHMENT_SLOT_DESIGN_TO_REALIZED(base)
      }
      else if let base = eATTACHMENT_SLOT_ON_PRODUCT.convert(fromGeneric: select) {
        self = ._ATTACHMENT_SLOT_ON_PRODUCT(base)
      }
      else if let base = eATTACHMENT_SLOT_PLANNED_TO_REALIZED.convert(fromGeneric: select) {
        self = ._ATTACHMENT_SLOT_PLANNED_TO_REALIZED(base)
      }
      else if let base = eBREAKDOWN_ELEMENT_GROUP_ASSIGNMENT.convert(fromGeneric: select) {
        self = ._BREAKDOWN_ELEMENT_GROUP_ASSIGNMENT(base)
      }
      else if let base = eBREAKDOWN_ELEMENT_USAGE.convert(fromGeneric: select) {
        self = ._BREAKDOWN_ELEMENT_USAGE(base)
      }
      else if let base = eCERTIFICATION.convert(fromGeneric: select) {
        self = ._CERTIFICATION(base)
      }
      else if let base = eCONFIGURATION_ITEM.convert(fromGeneric: select) {
        self = ._CONFIGURATION_ITEM(base)
      }
      else if let base = eCONTRACT.convert(fromGeneric: select) {
        self = ._CONTRACT(base)
      }
      else if let base = eDOCUMENT_FILE.convert(fromGeneric: select) {
        self = ._DOCUMENT_FILE(base)
      }
      else if let base = eEVIDENCE.convert(fromGeneric: select) {
        self = ._EVIDENCE(base)
      }
      else if let base = eFINAL_SOLUTION.convert(fromGeneric: select) {
        self = ._FINAL_SOLUTION(base)
      }
      else if let base = eGROUP.convert(fromGeneric: select) {
        self = ._GROUP(base)
      }
      else if let base = eINTERFACE_CONNECTION.convert(fromGeneric: select) {
        self = ._INTERFACE_CONNECTION(base)
      }
      else if let base = eINTERFACE_CONNECTOR_AS_PLANNED.convert(fromGeneric: select) {
        self = ._INTERFACE_CONNECTOR_AS_PLANNED(base)
      }
      else if let base = eINTERFACE_CONNECTOR_AS_REALIZED.convert(fromGeneric: select) {
        self = ._INTERFACE_CONNECTOR_AS_REALIZED(base)
      }
      else if let base = eINTERFACE_CONNECTOR_DEFINITION.convert(fromGeneric: select) {
        self = ._INTERFACE_CONNECTOR_DEFINITION(base)
      }
      else if let base = eINTERFACE_CONNECTOR_DESIGN.convert(fromGeneric: select) {
        self = ._INTERFACE_CONNECTOR_DESIGN(base)
      }
      else if let base = eINTERFACE_CONNECTOR_OCCURRENCE.convert(fromGeneric: select) {
        self = ._INTERFACE_CONNECTOR_OCCURRENCE(base)
      }
      else if let base = eINTERFACE_CONNECTOR_VERSION.convert(fromGeneric: select) {
        self = ._INTERFACE_CONNECTOR_VERSION(base)
      }
      else if let base = eINTERFACE_DEFINITION_CONNECTION.convert(fromGeneric: select) {
        self = ._INTERFACE_DEFINITION_CONNECTION(base)
      }
      else if let base = eINTERFACE_SPECIFICATION_DEFINITION.convert(fromGeneric: select) {
        self = ._INTERFACE_SPECIFICATION_DEFINITION(base)
      }
      else if let base = eINTERFACE_SPECIFICATION_VERSION.convert(fromGeneric: select) {
        self = ._INTERFACE_SPECIFICATION_VERSION(base)
      }
      else if let base = eORGANIZATION.convert(fromGeneric: select) {
        self = ._ORGANIZATION(base)
      }
      else if let base = eORGANIZATIONAL_PROJECT.convert(fromGeneric: select) {
        self = ._ORGANIZATIONAL_PROJECT(base)
      }
      else if let base = ePERSON_AND_ORGANIZATION.convert(fromGeneric: select) {
        self = ._PERSON_AND_ORGANIZATION(base)
      }
      else if let base = ePRODUCT.convert(fromGeneric: select) {
        self = ._PRODUCT(base)
      }
      else if let base = ePRODUCT_CATEGORY.convert(fromGeneric: select) {
        self = ._PRODUCT_CATEGORY(base)
      }
      else if let base = ePRODUCT_CONCEPT.convert(fromGeneric: select) {
        self = ._PRODUCT_CONCEPT(base)
      }
      else if let base = ePRODUCT_DEFINITION.convert(fromGeneric: select) {
        self = ._PRODUCT_DEFINITION(base)
      }
      else if let base = ePRODUCT_DEFINITION_FORMATION.convert(fromGeneric: select) {
        self = ._PRODUCT_DEFINITION_FORMATION(base)
      }
      else if let base = ePRODUCT_DEFINITION_GROUP_ASSIGNMENT.convert(fromGeneric: select) {
        self = ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(base)
      }
      else if let base = ePRODUCT_DEFINITION_RELATIONSHIP.convert(fromGeneric: select) {
        self = ._PRODUCT_DEFINITION_RELATIONSHIP(base)
      }
      else if let base = ePRODUCT_IN_ATTACHMENT_SLOT.convert(fromGeneric: select) {
        self = ._PRODUCT_IN_ATTACHMENT_SLOT(base)
      }
      else if let base = eSECURITY_CLASSIFICATION.convert(fromGeneric: select) {
        self = ._SECURITY_CLASSIFICATION(base)
      }
      else if let base = eSTRUCTURED_MESSAGE.convert(fromGeneric: select) {
        self = ._STRUCTURED_MESSAGE(base)
      }
      else if let base = eVALIDATION.convert(fromGeneric: select) {
        self = ._VALIDATION(base)
      }
      else if let base = eVERIFICATION.convert(fromGeneric: select) {
        self = ._VERIFICATION(base)
      }
      else { return nil }
    }

    // InitializableByP21Parameter
    public static var bareTypeName: String = "STATE_OBSERVED_OF_ITEM"

    public init?(p21typedParam: P21Decode.ExchangeStructure.TypedParameter, from exchangeStructure: P21Decode.ExchangeStructure) {
      guard let keyword = p21typedParam.keyword.asStandardKeyword else { exchangeStructure.error = "unexpected p21parameter(\(p21typedParam)) while resolving \(Self.bareTypeName) select value"; return nil }

      switch(keyword) {
      default:
        exchangeStructure.error = "unexpected p21parameter(\(p21typedParam)) while resolving \(Self.bareTypeName) select value"
        return nil
      }
    }

    public init?(p21untypedParam: P21Decode.ExchangeStructure.UntypedParameter, from exchangeStructure: P21Decode.ExchangeStructure) {
      switch p21untypedParam {
      case .rhsOccurenceName(let rhsname):
        switch rhsname {
        case .constantEntityName(let name):
          guard let entity = exchangeStructure.resolve(constantEntityName: name) else {exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) instance"); return nil }
          self.init(possiblyFrom: entity.complexEntity)

        case .entityInstanceName(let name):
          guard let complex = exchangeStructure.resolve(entityInstanceName: name) else {exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) instance"); return nil }
          self.init(possiblyFrom: complex)

        default:
          exchangeStructure.error = "unexpected p21parameter(\(p21untypedParam)) while resolving \(Self.bareTypeName) select instance"
          return nil
        }

      default:
        exchangeStructure.error = "unexpected p21parameter(\(p21untypedParam)) while resolving \(Self.bareTypeName) select instance"
        return nil
      }
    }

    public init?(p21omittedParamfrom exchangeStructure: P21Decode.ExchangeStructure) {
      return nil
    }


    //MARK: - ENTITY UNDERLYING TYPE REFERENCES
    public var super_eATTACHMENT_SLOT_PLANNED_TO_REALIZED: eATTACHMENT_SLOT_PLANNED_TO_REALIZED? {
      switch self {
      case ._ATTACHMENT_SLOT_PLANNED_TO_REALIZED(let entity): return entity
      default: return nil
      }
    }

    public var super_eAPPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT: 
      eAPPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT? {
      switch self {
      case ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(let entity): return entity
      default: return nil
      }
    }

    public var super_eASSEMBLY_COMPONENT_USAGE_SUBSTITUTE: eASSEMBLY_COMPONENT_USAGE_SUBSTITUTE? {
      switch self {
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let entity): return entity
      default: return nil
      }
    }

    public var super_ePRODUCT_DEFINITION_GROUP_ASSIGNMENT: ePRODUCT_DEFINITION_GROUP_ASSIGNMENT? {
      switch self {
      case ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(let entity): return entity
      default: return nil
      }
    }

    public var super_eINTERFACE_DEFINITION_CONNECTION: eINTERFACE_DEFINITION_CONNECTION? {
      switch self {
      case ._INTERFACE_DEFINITION_CONNECTION(let entity): return entity
      default: return nil
      }
    }

    public var super_eINTERFACE_CONNECTOR_AS_PLANNED: eINTERFACE_CONNECTOR_AS_PLANNED? {
      switch self {
      case ._INTERFACE_CONNECTOR_AS_PLANNED(let entity): return entity
      default: return nil
      }
    }

    public var super_eINTERFACE_CONNECTOR_DESIGN: eINTERFACE_CONNECTOR_DESIGN? {
      switch self {
      case ._INTERFACE_CONNECTOR_DESIGN(let entity): return entity
      default: return nil
      }
    }

    public var super_ePRODUCT_IN_ATTACHMENT_SLOT: ePRODUCT_IN_ATTACHMENT_SLOT? {
      switch self {
      case ._PRODUCT_IN_ATTACHMENT_SLOT(let entity): return entity
      default: return nil
      }
    }

    public var super_eCERTIFICATION: eCERTIFICATION? {
      switch self {
      case ._CERTIFICATION(let entity): return entity
      default: return nil
      }
    }

    public var super_eIDENTIFICATION_ASSIGNMENT: eIDENTIFICATION_ASSIGNMENT? {
      switch self {
      case ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(let entity): return entity
        .super_eIDENTIFICATION_ASSIGNMENT
      default: return nil
      }
    }

    public var super_eAPPROVAL: eAPPROVAL? {
      switch self {
      case ._APPROVAL(let entity): return entity
      default: return nil
      }
    }

    public var super_eSTRUCTURED_MESSAGE: eSTRUCTURED_MESSAGE? {
      switch self {
      case ._STRUCTURED_MESSAGE(let entity): return entity
      default: return nil
      }
    }

    public var super_eVALIDATION: eVALIDATION? {
      switch self {
      case ._VALIDATION(let entity): return entity
      default: return nil
      }
    }

    public var super_ePRODUCT_CONCEPT: ePRODUCT_CONCEPT? {
      switch self {
      case ._PRODUCT_CONCEPT(let entity): return entity
      default: return nil
      }
    }

    public var super_eGROUP: eGROUP? {
      switch self {
      case ._GROUP(let entity): return entity
      case ._INTERFACE_CONNECTION(let entity): return entity.super_eGROUP
      case ._INTERFACE_CONNECTOR_OCCURRENCE(let entity): return entity.super_eGROUP
      case ._VALIDATION(let entity): return entity.super_eGROUP
      case ._VERIFICATION(let entity): return entity.super_eGROUP
      default: return nil
      }
    }

    public var super_eCONFIGURATION_ITEM: eCONFIGURATION_ITEM? {
      switch self {
      case ._CONFIGURATION_ITEM(let entity): return entity
      default: return nil
      }
    }

    public var super_eINTERFACE_CONNECTOR_AS_REALIZED: eINTERFACE_CONNECTOR_AS_REALIZED? {
      switch self {
      case ._INTERFACE_CONNECTOR_AS_REALIZED(let entity): return entity
      default: return nil
      }
    }

    public var super_eINTERFACE_CONNECTOR_VERSION: eINTERFACE_CONNECTOR_VERSION? {
      switch self {
      case ._INTERFACE_CONNECTOR_VERSION(let entity): return entity
      default: return nil
      }
    }

    public var super_eATTACHMENT_SLOT_DESIGN_TO_REALIZED: eATTACHMENT_SLOT_DESIGN_TO_REALIZED? {
      switch self {
      case ._ATTACHMENT_SLOT_DESIGN_TO_REALIZED(let entity): return entity
      default: return nil
      }
    }

    public var super_eGROUP_ASSIGNMENT: eGROUP_ASSIGNMENT? {
      switch self {
      case ._BREAKDOWN_ELEMENT_GROUP_ASSIGNMENT(let entity): return entity.super_eGROUP_ASSIGNMENT
      case ._EVIDENCE(let entity): return entity.super_eGROUP_ASSIGNMENT
      case ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(let entity): return entity.super_eGROUP_ASSIGNMENT
      default: return nil
      }
    }

    public var super_ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP: 
      ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP? {
      switch self {
      case ._ATTACHMENT_SLOT_DESIGN_TO_PLANNED(let entity): return entity
        .super_ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP
      case ._ATTACHMENT_SLOT_DESIGN_TO_REALIZED(let entity): return entity
        .super_ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP
      case ._ATTACHMENT_SLOT_PLANNED_TO_REALIZED(let entity): return entity
        .super_ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP
      default: return nil
      }
    }

    public var super_eEXTERNAL_IDENTIFICATION_ASSIGNMENT: eEXTERNAL_IDENTIFICATION_ASSIGNMENT? {
      switch self {
      case ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(let entity): return entity
        .super_eEXTERNAL_IDENTIFICATION_ASSIGNMENT
      default: return nil
      }
    }

    public var super_ePRODUCT_DEFINITION_USAGE: ePRODUCT_DEFINITION_USAGE? {
      switch self {
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): return entity.super_ePRODUCT_DEFINITION_USAGE
      default: return nil
      }
    }

    public var super_eORGANIZATION: eORGANIZATION? {
      switch self {
      case ._ORGANIZATION(let entity): return entity
      default: return nil
      }
    }

    public var super_eATTACHMENT_SLOT_DESIGN_TO_PLANNED: eATTACHMENT_SLOT_DESIGN_TO_PLANNED? {
      switch self {
      case ._ATTACHMENT_SLOT_DESIGN_TO_PLANNED(let entity): return entity
      default: return nil
      }
    }

    public var super_eAPPLIED_ACTION_METHOD_ASSIGNMENT: eAPPLIED_ACTION_METHOD_ASSIGNMENT? {
      switch self {
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let entity): return entity
      default: return nil
      }
    }

    public var super_ePRODUCT_DEFINITION: ePRODUCT_DEFINITION? {
      switch self {
      case ._INTERFACE_CONNECTOR_DEFINITION(let entity): return entity.super_ePRODUCT_DEFINITION
      case ._INTERFACE_SPECIFICATION_DEFINITION(let entity): return entity.super_ePRODUCT_DEFINITION
      case ._PRODUCT_DEFINITION(let entity): return entity
      default: return nil
      }
    }

    public var super_eINTERFACE_CONNECTION: eINTERFACE_CONNECTION? {
      switch self {
      case ._INTERFACE_CONNECTION(let entity): return entity
      default: return nil
      }
    }

    public var super_eEVIDENCE: eEVIDENCE? {
      switch self {
      case ._EVIDENCE(let entity): return entity
      default: return nil
      }
    }

    public var super_eCONTRACT: eCONTRACT? {
      switch self {
      case ._CONTRACT(let entity): return entity
      default: return nil
      }
    }

    public var super_eDOCUMENT: eDOCUMENT? {
      switch self {
      case ._DOCUMENT_FILE(let entity): return entity.super_eDOCUMENT
      default: return nil
      }
    }

    public var super_eACTION_METHOD_ASSIGNMENT: eACTION_METHOD_ASSIGNMENT? {
      switch self {
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let entity): return entity.super_eACTION_METHOD_ASSIGNMENT
      default: return nil
      }
    }

    public var super_ePRODUCT: ePRODUCT? {
      switch self {
      case ._PRODUCT(let entity): return entity
      case ._STRUCTURED_MESSAGE(let entity): return entity.super_ePRODUCT
      default: return nil
      }
    }

    public var super_eORGANIZATIONAL_PROJECT: eORGANIZATIONAL_PROJECT? {
      switch self {
      case ._ORGANIZATIONAL_PROJECT(let entity): return entity
      default: return nil
      }
    }

    public var super_eINTERFACE_SPECIFICATION_VERSION: eINTERFACE_SPECIFICATION_VERSION? {
      switch self {
      case ._INTERFACE_SPECIFICATION_VERSION(let entity): return entity
      default: return nil
      }
    }

    public var super_eVERIFICATION: eVERIFICATION? {
      switch self {
      case ._VERIFICATION(let entity): return entity
      default: return nil
      }
    }

    public var super_ePRODUCT_CATEGORY: ePRODUCT_CATEGORY? {
      switch self {
      case ._PRODUCT_CATEGORY(let entity): return entity
      default: return nil
      }
    }

    public var super_ePRODUCT_DEFINITION_FORMATION: ePRODUCT_DEFINITION_FORMATION? {
      switch self {
      case ._FINAL_SOLUTION(let entity): return entity.super_ePRODUCT_DEFINITION_FORMATION
      case ._INTERFACE_CONNECTOR_AS_PLANNED(let entity): return entity.super_ePRODUCT_DEFINITION_FORMATION
      case ._INTERFACE_CONNECTOR_AS_REALIZED(let entity): return entity.super_ePRODUCT_DEFINITION_FORMATION
      case ._INTERFACE_CONNECTOR_DESIGN(let entity): return entity.super_ePRODUCT_DEFINITION_FORMATION
      case ._INTERFACE_CONNECTOR_VERSION(let entity): return entity.super_ePRODUCT_DEFINITION_FORMATION
      case ._INTERFACE_SPECIFICATION_VERSION(let entity): return entity.super_ePRODUCT_DEFINITION_FORMATION
      case ._PRODUCT_DEFINITION_FORMATION(let entity): return entity
      default: return nil
      }
    }

    public var super_eFINAL_SOLUTION: eFINAL_SOLUTION? {
      switch self {
      case ._FINAL_SOLUTION(let entity): return entity
      default: return nil
      }
    }

    public var super_eASSEMBLY_COMPONENT_USAGE: eASSEMBLY_COMPONENT_USAGE? {
      switch self {
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): return entity
      default: return nil
      }
    }

    public var super_eBREAKDOWN_ELEMENT_GROUP_ASSIGNMENT: eBREAKDOWN_ELEMENT_GROUP_ASSIGNMENT? {
      switch self {
      case ._BREAKDOWN_ELEMENT_GROUP_ASSIGNMENT(let entity): return entity
      default: return nil
      }
    }

    public var super_eATTACHMENT_SLOT_ON_PRODUCT: eATTACHMENT_SLOT_ON_PRODUCT? {
      switch self {
      case ._ATTACHMENT_SLOT_ON_PRODUCT(let entity): return entity
      default: return nil
      }
    }

    public var super_eBREAKDOWN_ELEMENT_USAGE: eBREAKDOWN_ELEMENT_USAGE? {
      switch self {
      case ._BREAKDOWN_ELEMENT_USAGE(let entity): return entity
      default: return nil
      }
    }

    public var super_ePERSON_AND_ORGANIZATION: ePERSON_AND_ORGANIZATION? {
      switch self {
      case ._PERSON_AND_ORGANIZATION(let entity): return entity
      default: return nil
      }
    }

    public var super_eINTERFACE_CONNECTOR_DEFINITION: eINTERFACE_CONNECTOR_DEFINITION? {
      switch self {
      case ._INTERFACE_CONNECTOR_DEFINITION(let entity): return entity
      default: return nil
      }
    }

    public var super_eALTERNATE_PRODUCT_RELATIONSHIP: eALTERNATE_PRODUCT_RELATIONSHIP? {
      switch self {
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let entity): return entity
      default: return nil
      }
    }

    public var super_eDOCUMENT_FILE: eDOCUMENT_FILE? {
      switch self {
      case ._DOCUMENT_FILE(let entity): return entity
      default: return nil
      }
    }

    public var super_eSECURITY_CLASSIFICATION: eSECURITY_CLASSIFICATION? {
      switch self {
      case ._SECURITY_CLASSIFICATION(let entity): return entity
      default: return nil
      }
    }

    public var super_ePRODUCT_DEFINITION_RELATIONSHIP: ePRODUCT_DEFINITION_RELATIONSHIP? {
      switch self {
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): return entity.super_ePRODUCT_DEFINITION_RELATIONSHIP
      case ._ATTACHMENT_SLOT_ON_PRODUCT(let entity): return entity.super_ePRODUCT_DEFINITION_RELATIONSHIP
      case ._BREAKDOWN_ELEMENT_USAGE(let entity): return entity.super_ePRODUCT_DEFINITION_RELATIONSHIP
      case ._INTERFACE_DEFINITION_CONNECTION(let entity): return entity
        .super_ePRODUCT_DEFINITION_RELATIONSHIP
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity
      case ._PRODUCT_IN_ATTACHMENT_SLOT(let entity): return entity.super_ePRODUCT_DEFINITION_RELATIONSHIP
      default: return nil
      }
    }

    public var super_eINTERFACE_CONNECTOR_OCCURRENCE: eINTERFACE_CONNECTOR_OCCURRENCE? {
      switch self {
      case ._INTERFACE_CONNECTOR_OCCURRENCE(let entity): return entity
      default: return nil
      }
    }

    public var super_eINTERFACE_SPECIFICATION_DEFINITION: eINTERFACE_SPECIFICATION_DEFINITION? {
      switch self {
      case ._INTERFACE_SPECIFICATION_DEFINITION(let entity): return entity
      default: return nil
      }
    }

    public var super_eCHARACTERIZED_OBJECT: eCHARACTERIZED_OBJECT? {
      switch self {
      case ._DOCUMENT_FILE(let entity): return entity.super_eCHARACTERIZED_OBJECT
      default: return nil
      }
    }


    //MARK: - ENTITY ATTRIBUTE REFERENCES
    /// attribute of SELECT type ``sSTATE_OBSERVED_OF_ITEM``
    /// - origin: ENTITY( ``eASSEMBLY_COMPONENT_USAGE`` )
    /// - origin: ENTITY( ``eATTACHMENT_SLOT_DESIGN_TO_PLANNED`` )
    /// - origin: ENTITY( ``eATTACHMENT_SLOT_DESIGN_TO_REALIZED`` )
    /// - origin: ENTITY( ``eATTACHMENT_SLOT_ON_PRODUCT`` )
    /// - origin: ENTITY( ``eATTACHMENT_SLOT_PLANNED_TO_REALIZED`` )
    /// - origin: ENTITY( ``eBREAKDOWN_ELEMENT_USAGE`` )
    /// - origin: ENTITY( ``eCONFIGURATION_ITEM`` )
    /// - origin: ENTITY( ``eFINAL_SOLUTION`` )
    /// - origin: ENTITY( ``eGROUP`` )
    /// - origin: ENTITY( ``eINTERFACE_CONNECTION`` )
    /// - origin: ENTITY( ``eINTERFACE_CONNECTOR_AS_PLANNED`` )
    /// - origin: ENTITY( ``eINTERFACE_CONNECTOR_AS_REALIZED`` )
    /// - origin: ENTITY( ``eINTERFACE_CONNECTOR_DEFINITION`` )
    /// - origin: ENTITY( ``eINTERFACE_CONNECTOR_DESIGN`` )
    /// - origin: ENTITY( ``eINTERFACE_CONNECTOR_OCCURRENCE`` )
    /// - origin: ENTITY( ``eINTERFACE_CONNECTOR_VERSION`` )
    /// - origin: ENTITY( ``eINTERFACE_DEFINITION_CONNECTION`` )
    /// - origin: ENTITY( ``eINTERFACE_SPECIFICATION_DEFINITION`` )
    /// - origin: ENTITY( ``eINTERFACE_SPECIFICATION_VERSION`` )
    /// - origin: ENTITY( ``eORGANIZATION`` )
    /// - origin: ENTITY( ``eORGANIZATIONAL_PROJECT`` )
    /// - origin: ENTITY( ``ePERSON_AND_ORGANIZATION`` )
    /// - origin: ENTITY( ``ePRODUCT`` )
    /// - origin: ENTITY( ``ePRODUCT_CATEGORY`` )
    /// - origin: ENTITY( ``ePRODUCT_CONCEPT`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_FORMATION`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    /// - origin: ENTITY( ``ePRODUCT_IN_ATTACHMENT_SLOT`` )
    /// - origin: ENTITY( ``eSTRUCTURED_MESSAGE`` )
    /// - origin: ENTITY( ``eVALIDATION`` )
    /// - origin: ENTITY( ``eVERIFICATION`` )
    public var DESCRIPTION: tTEXT?  {
      switch self {
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): return entity.DESCRIPTION
      case ._ATTACHMENT_SLOT_DESIGN_TO_PLANNED(let entity): return entity.DESCRIPTION
      case ._ATTACHMENT_SLOT_DESIGN_TO_REALIZED(let entity): return entity.DESCRIPTION
      case ._ATTACHMENT_SLOT_ON_PRODUCT(let entity): return entity.DESCRIPTION
      case ._ATTACHMENT_SLOT_PLANNED_TO_REALIZED(let entity): return entity.DESCRIPTION
      case ._BREAKDOWN_ELEMENT_USAGE(let entity): return entity.DESCRIPTION
      case ._CONFIGURATION_ITEM(let entity): return entity.DESCRIPTION
      case ._DOCUMENT_FILE/*(let entity)*/: return nil // AMBIGUOUS ATTRIBUTE for eDOCUMENT_FILE
      case ._FINAL_SOLUTION(let entity): return entity.DESCRIPTION
      case ._GROUP(let entity): return entity.DESCRIPTION
      case ._INTERFACE_CONNECTION(let entity): return entity.DESCRIPTION
      case ._INTERFACE_CONNECTOR_AS_PLANNED(let entity): return entity.DESCRIPTION
      case ._INTERFACE_CONNECTOR_AS_REALIZED(let entity): return entity.DESCRIPTION
      case ._INTERFACE_CONNECTOR_DEFINITION(let entity): return entity.DESCRIPTION
      case ._INTERFACE_CONNECTOR_DESIGN(let entity): return entity.DESCRIPTION
      case ._INTERFACE_CONNECTOR_OCCURRENCE(let entity): return entity.DESCRIPTION
      case ._INTERFACE_CONNECTOR_VERSION(let entity): return entity.DESCRIPTION
      case ._INTERFACE_DEFINITION_CONNECTION(let entity): return entity.DESCRIPTION
      case ._INTERFACE_SPECIFICATION_DEFINITION(let entity): return entity.DESCRIPTION
      case ._INTERFACE_SPECIFICATION_VERSION(let entity): return entity.DESCRIPTION
      case ._ORGANIZATION(let entity): return entity.DESCRIPTION
      case ._ORGANIZATIONAL_PROJECT(let entity): return entity.DESCRIPTION
      case ._PERSON_AND_ORGANIZATION(let entity): return entity.DESCRIPTION
      case ._PRODUCT(let entity): return entity.DESCRIPTION
      case ._PRODUCT_CATEGORY(let entity): return entity.DESCRIPTION
      case ._PRODUCT_CONCEPT(let entity): return entity.DESCRIPTION
      case ._PRODUCT_DEFINITION(let entity): return entity.DESCRIPTION
      case ._PRODUCT_DEFINITION_FORMATION(let entity): return entity.DESCRIPTION
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.DESCRIPTION
      case ._PRODUCT_IN_ATTACHMENT_SLOT(let entity): return entity.DESCRIPTION
      case ._STRUCTURED_MESSAGE(let entity): return entity.DESCRIPTION
      case ._VALIDATION(let entity): return entity.DESCRIPTION
      case ._VERIFICATION(let entity): return entity.DESCRIPTION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSTATE_OBSERVED_OF_ITEM``
    /// - origin: ENTITY( ``eASSEMBLY_COMPONENT_USAGE`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    public var LEAF: sPRODUCT_DEFINITION_OR_REFERENCE?  {
      switch self {
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): return entity.LEAF
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.LEAF
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSTATE_OBSERVED_OF_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_CATEGORY`` )
    public var PRODUCTS: (SDAI.SET<ePRODUCT>/*[1:nil]*/ )?  {
      switch self {
      case ._PRODUCT_CATEGORY(let entity): return entity.PRODUCTS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSTATE_OBSERVED_OF_ITEM``
    /// - origin: ENTITY( ``eASSEMBLY_COMPONENT_USAGE`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    public var NEXT_USAGE: eNEXT_ASSEMBLY_USAGE_OCCURRENCE?  {
      switch self {
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): return entity.NEXT_USAGE
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.NEXT_USAGE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSTATE_OBSERVED_OF_ITEM``
    /// - origin: ENTITY( ``eAPPLIED_ACTION_METHOD_ASSIGNMENT`` )
    /// - origin: ENTITY( ``eAPPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT`` )
    /// - origin: ENTITY( ``eBREAKDOWN_ELEMENT_GROUP_ASSIGNMENT`` )
    /// - origin: ENTITY( ``eEVIDENCE`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_GROUP_ASSIGNMENT`` )
    public var ROLE: SDAI.GENERIC_ENTITY?  {
      switch self {
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let entity): return entity.ROLE
      case ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(let entity): return entity.ROLE
      case ._BREAKDOWN_ELEMENT_GROUP_ASSIGNMENT(let entity): return entity.ROLE
      case ._EVIDENCE(let entity): return entity.ROLE
      case ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(let entity): return entity.ROLE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSTATE_OBSERVED_OF_ITEM``
    /// - origin: ENTITY( ``eASSEMBLY_COMPONENT_USAGE`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    public var REFERENCE_DESIGNATOR: tIDENTIFIER?  {
      switch self {
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): return entity.REFERENCE_DESIGNATOR
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.REFERENCE_DESIGNATOR
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSTATE_OBSERVED_OF_ITEM``
    /// - origin: ENTITY( ``eASSEMBLY_COMPONENT_USAGE_SUBSTITUTE`` )
    public var SUBSTITUTE: eASSEMBLY_COMPONENT_USAGE?  {
      switch self {
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let entity): return entity.SUBSTITUTE
      default: return nil
      }
    }

    //MARK: var STATUS: (AMBIGUOUS)

    /// attribute of SELECT type ``sSTATE_OBSERVED_OF_ITEM``
    /// - origin: ENTITY( ``eATTACHMENT_SLOT_DESIGN_TO_PLANNED`` )
    /// - origin: ENTITY( ``eATTACHMENT_SLOT_DESIGN_TO_REALIZED`` )
    /// - origin: ENTITY( ``eATTACHMENT_SLOT_PLANNED_TO_REALIZED`` )
    public var RELATED_PRODUCT_DEFINITION_FORMATION: ePRODUCT_DEFINITION_FORMATION?  {
      switch self {
      case ._ATTACHMENT_SLOT_DESIGN_TO_PLANNED(let entity): return ePRODUCT_DEFINITION_FORMATION(
        entity.RELATED_PRODUCT_DEFINITION_FORMATION)
      case ._ATTACHMENT_SLOT_DESIGN_TO_REALIZED(let entity): return ePRODUCT_DEFINITION_FORMATION(
        entity.RELATED_PRODUCT_DEFINITION_FORMATION)
      case ._ATTACHMENT_SLOT_PLANNED_TO_REALIZED(let entity): return ePRODUCT_DEFINITION_FORMATION(
        entity.RELATED_PRODUCT_DEFINITION_FORMATION)
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSTATE_OBSERVED_OF_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    public var CONSTITUENT_AMOUNT: (SDAI.SET<sCHARACTERIZED_PRODUCT_COMPOSITION_VALUE>/*[1:nil]*/ )?  {
      switch self {
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.CONSTITUENT_AMOUNT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSTATE_OBSERVED_OF_ITEM``
    /// - origin: ENTITY( ``eASSEMBLY_COMPONENT_USAGE`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    public var UPPER_USAGE: eASSEMBLY_COMPONENT_USAGE?  {
      switch self {
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): return entity.UPPER_USAGE
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.UPPER_USAGE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSTATE_OBSERVED_OF_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    public var RANKING_RATIONALE: tTEXT?  {
      switch self {
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.RANKING_RATIONALE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSTATE_OBSERVED_OF_ITEM``
    /// - origin: ENTITY( ``eASSEMBLY_COMPONENT_USAGE`` )
    public var QUANTITY: eMEASURE_WITH_UNIT?  {
      switch self {
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): return entity.QUANTITY
      case ._PRODUCT_DEFINITION_RELATIONSHIP/*(let entity)*/: return nil // AMBIGUOUS ATTRIBUTE for ePRODUCT_DEFINITION_RELATIONSHIP
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSTATE_OBSERVED_OF_ITEM``
    /// - origin: ENTITY( ``eSECURITY_CLASSIFICATION`` )
    public var SECURITY_LEVEL: eSECURITY_CLASSIFICATION_LEVEL?  {
      switch self {
      case ._SECURITY_CLASSIFICATION(let entity): return entity.SECURITY_LEVEL
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSTATE_OBSERVED_OF_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    public var CLASS: tLABEL?  {
      switch self {
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.CLASS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSTATE_OBSERVED_OF_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION`` )
    public var DEFINED_VERSION: eCOLLECTION_VERSION?  {
      switch self {
      case ._PRODUCT_DEFINITION(let entity): return entity.DEFINED_VERSION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSTATE_OBSERVED_OF_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_FORMATION`` )
    public var OF_COLLECTION: eCOLLECTION?  {
      switch self {
      case ._PRODUCT_DEFINITION_FORMATION(let entity): return entity.OF_COLLECTION
      default: return nil
      }
    }

    //MARK: var ITEMS: (AMBIGUOUS)

    /// attribute of SELECT type ``sSTATE_OBSERVED_OF_ITEM``
    /// - origin: ENTITY( ``eGROUP`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    public var OF_SHAPE: eMATED_PART_RELATIONSHIP?  {
      switch self {
      case ._GROUP(let entity): return entity.OF_SHAPE
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.OF_SHAPE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSTATE_OBSERVED_OF_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    public var RANKING: SDAI.INTEGER?  {
      switch self {
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.RANKING
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSTATE_OBSERVED_OF_ITEM``
    /// - origin: ENTITY( ``eALTERNATE_PRODUCT_RELATIONSHIP`` )
    public var BASIS: tTEXT?  {
      switch self {
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let entity): return entity.BASIS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSTATE_OBSERVED_OF_ITEM``
    /// - origin: ENTITY( ``eAPPROVAL`` )
    public var LEVEL: tLABEL?  {
      switch self {
      case ._APPROVAL(let entity): return entity.LEVEL
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSTATE_OBSERVED_OF_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_FORMATION`` )
    public var MAKE_OR_BUY: nSOURCE?  {
      switch self {
      case ._PRODUCT_DEFINITION_FORMATION(let entity): return entity.MAKE_OR_BUY
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSTATE_OBSERVED_OF_ITEM``
    /// - origin: ENTITY( ``eCERTIFICATION`` )
    /// - origin: ENTITY( ``eCONFIGURATION_ITEM`` )
    /// - origin: ENTITY( ``eCONTRACT`` )
    /// - origin: ENTITY( ``eSECURITY_CLASSIFICATION`` )
    public var PURPOSE: SDAI.STRING?  {
      switch self {
      case ._CERTIFICATION(let entity): return SDAI.STRING(entity.PURPOSE)
      case ._CONFIGURATION_ITEM(let entity): return SDAI.STRING(entity.PURPOSE)
      case ._CONTRACT(let entity): return SDAI.STRING(entity.PURPOSE)
      case ._SECURITY_CLASSIFICATION(let entity): return SDAI.STRING(entity.PURPOSE)
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSTATE_OBSERVED_OF_ITEM``
    /// - origin: ENTITY( ``eATTACHMENT_SLOT_DESIGN_TO_PLANNED`` )
    /// - origin: ENTITY( ``eATTACHMENT_SLOT_DESIGN_TO_REALIZED`` )
    /// - origin: ENTITY( ``eATTACHMENT_SLOT_PLANNED_TO_REALIZED`` )
    public var RELATING_PRODUCT_DEFINITION_FORMATION: ePRODUCT_DEFINITION_FORMATION?  {
      switch self {
      case ._ATTACHMENT_SLOT_DESIGN_TO_PLANNED(let entity): return ePRODUCT_DEFINITION_FORMATION(
        entity.RELATING_PRODUCT_DEFINITION_FORMATION)
      case ._ATTACHMENT_SLOT_DESIGN_TO_REALIZED(let entity): return ePRODUCT_DEFINITION_FORMATION(
        entity.RELATING_PRODUCT_DEFINITION_FORMATION)
      case ._ATTACHMENT_SLOT_PLANNED_TO_REALIZED(let entity): return ePRODUCT_DEFINITION_FORMATION(
        entity.RELATING_PRODUCT_DEFINITION_FORMATION)
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSTATE_OBSERVED_OF_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    public var COMPOSITION_BASIS: tLABEL?  {
      switch self {
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.COMPOSITION_BASIS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSTATE_OBSERVED_OF_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION`` )
    public var DOCUMENTATION_IDS: (SDAI.SET<eDOCUMENT>/*[1:nil]*/ )?  {
      switch self {
      case ._PRODUCT_DEFINITION(let entity): return entity.DOCUMENTATION_IDS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSTATE_OBSERVED_OF_ITEM``
    /// - origin: ENTITY( ``eCONFIGURATION_ITEM`` )
    public var ITEM_CONCEPT_FEATURE: (SDAI.SET<ePRODUCT_CONCEPT_FEATURE_ASSOCIATION>/*[1:nil]*/ )?  {
      switch self {
      case ._CONFIGURATION_ITEM(let entity): return entity.ITEM_CONCEPT_FEATURE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSTATE_OBSERVED_OF_ITEM``
    /// - origin: ENTITY( ``eAPPLIED_ACTION_METHOD_ASSIGNMENT`` )
    public var ASSIGNED_ACTION_METHOD: eACTION_METHOD?  {
      switch self {
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let entity): return entity.ASSIGNED_ACTION_METHOD
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSTATE_OBSERVED_OF_ITEM``
    /// - origin: ENTITY( ``ePERSON_AND_ORGANIZATION`` )
    public var THE_PERSON: ePERSON?  {
      switch self {
      case ._PERSON_AND_ORGANIZATION(let entity): return entity.THE_PERSON
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSTATE_OBSERVED_OF_ITEM``
    /// - origin: ENTITY( ``eFINAL_SOLUTION`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_FORMATION`` )
    public var SPECIFICATION: (SDAI.SET<ePRODUCT_DEFINITION>/*[1:nil]*/ )?  {
      switch self {
      case ._FINAL_SOLUTION(let entity): return entity.SPECIFICATION
      case ._PRODUCT_DEFINITION_FORMATION(let entity): return entity.SPECIFICATION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSTATE_OBSERVED_OF_ITEM``
    /// - origin: ENTITY( ``eAPPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT`` )
    public var ASSIGNED_ID: tIDENTIFIER?  {
      switch self {
      case ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(let entity): return entity.ASSIGNED_ID
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSTATE_OBSERVED_OF_ITEM``
    /// - origin: ENTITY( ``eCONFIGURATION_ITEM`` )
    public var ITEM_CONCEPT: ePRODUCT_CONCEPT?  {
      switch self {
      case ._CONFIGURATION_ITEM(let entity): return entity.ITEM_CONCEPT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSTATE_OBSERVED_OF_ITEM``
    /// - origin: ENTITY( ``eCERTIFICATION`` )
    /// - origin: ENTITY( ``eCONTRACT`` )
    /// - origin: ENTITY( ``eDOCUMENT_FILE`` )
    public var KIND: SDAI.GENERIC_ENTITY?  {
      switch self {
      case ._CERTIFICATION(let entity): return entity.KIND
      case ._CONTRACT(let entity): return entity.KIND
      case ._DOCUMENT_FILE(let entity): return entity.KIND
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSTATE_OBSERVED_OF_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    public var DETERMINATION_METHOD: tTEXT?  {
      switch self {
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.DETERMINATION_METHOD
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSTATE_OBSERVED_OF_ITEM``
    /// - origin: ENTITY( ``eASSEMBLY_COMPONENT_USAGE`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    public var ROOT: ePRODUCT_DEFINITION?  {
      switch self {
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): return entity.ROOT
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.ROOT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSTATE_OBSERVED_OF_ITEM``
    /// - origin: ENTITY( ``ePERSON_AND_ORGANIZATION`` )
    public var THE_ORGANIZATION: eORGANIZATION?  {
      switch self {
      case ._PERSON_AND_ORGANIZATION(let entity): return entity.THE_ORGANIZATION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSTATE_OBSERVED_OF_ITEM``
    /// - origin: ENTITY( ``eALTERNATE_PRODUCT_RELATIONSHIP`` )
    /// - origin: ENTITY( ``eASSEMBLY_COMPONENT_USAGE_SUBSTITUTE`` )
    public var BASE: SDAI.GENERIC_ENTITY?  {
      switch self {
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let entity): return entity.BASE
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let entity): return entity.BASE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSTATE_OBSERVED_OF_ITEM``
    /// - origin: ENTITY( ``eASSEMBLY_COMPONENT_USAGE`` )
    /// - origin: ENTITY( ``eATTACHMENT_SLOT_ON_PRODUCT`` )
    /// - origin: ENTITY( ``eBREAKDOWN_ELEMENT_USAGE`` )
    /// - origin: ENTITY( ``eINTERFACE_DEFINITION_CONNECTION`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    /// - origin: ENTITY( ``ePRODUCT_IN_ATTACHMENT_SLOT`` )
    public var RELATING_PRODUCT_DEFINITION: sPRODUCT_DEFINITION_OR_REFERENCE?  {
      switch self {
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): return entity.RELATING_PRODUCT_DEFINITION
      case ._ATTACHMENT_SLOT_ON_PRODUCT(let entity): return entity.RELATING_PRODUCT_DEFINITION
      case ._BREAKDOWN_ELEMENT_USAGE(let entity): return entity.RELATING_PRODUCT_DEFINITION
      case ._INTERFACE_DEFINITION_CONNECTION(let entity): return entity.RELATING_PRODUCT_DEFINITION
      case ._PRODUCT_DEFINITION(let entity): return sPRODUCT_DEFINITION_OR_REFERENCE(
        entity.RELATING_PRODUCT_DEFINITION)
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.RELATING_PRODUCT_DEFINITION
      case ._PRODUCT_IN_ATTACHMENT_SLOT(let entity): return entity.RELATING_PRODUCT_DEFINITION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSTATE_OBSERVED_OF_ITEM``
    /// - origin: ENTITY( ``eDOCUMENT_FILE`` )
    public var REPRESENTATION_TYPES: (SDAI.SET<eDOCUMENT_REPRESENTATION_TYPE>/*[0:nil]*/ )?  {
      switch self {
      case ._DOCUMENT_FILE(let entity): return entity.REPRESENTATION_TYPES
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSTATE_OBSERVED_OF_ITEM``
    /// - origin: ENTITY( ``eAPPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT`` )
    public var SOURCE: eEXTERNAL_SOURCE?  {
      switch self {
      case ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(let entity): return entity.SOURCE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSTATE_OBSERVED_OF_ITEM``
    /// - origin: ENTITY( ``eASSEMBLY_COMPONENT_USAGE`` )
    /// - origin: ENTITY( ``eATTACHMENT_SLOT_DESIGN_TO_PLANNED`` )
    /// - origin: ENTITY( ``eATTACHMENT_SLOT_DESIGN_TO_REALIZED`` )
    /// - origin: ENTITY( ``eATTACHMENT_SLOT_ON_PRODUCT`` )
    /// - origin: ENTITY( ``eATTACHMENT_SLOT_PLANNED_TO_REALIZED`` )
    /// - origin: ENTITY( ``eBREAKDOWN_ELEMENT_USAGE`` )
    /// - origin: ENTITY( ``eCONFIGURATION_ITEM`` )
    /// - origin: ENTITY( ``eDOCUMENT_FILE`` )
    /// - origin: ENTITY( ``eFINAL_SOLUTION`` )
    /// - origin: ENTITY( ``eGROUP`` )
    /// - origin: ENTITY( ``eINTERFACE_CONNECTION`` )
    /// - origin: ENTITY( ``eINTERFACE_CONNECTOR_AS_PLANNED`` )
    /// - origin: ENTITY( ``eINTERFACE_CONNECTOR_AS_REALIZED`` )
    /// - origin: ENTITY( ``eINTERFACE_CONNECTOR_DEFINITION`` )
    /// - origin: ENTITY( ``eINTERFACE_CONNECTOR_DESIGN`` )
    /// - origin: ENTITY( ``eINTERFACE_CONNECTOR_OCCURRENCE`` )
    /// - origin: ENTITY( ``eINTERFACE_CONNECTOR_VERSION`` )
    /// - origin: ENTITY( ``eINTERFACE_DEFINITION_CONNECTION`` )
    /// - origin: ENTITY( ``eINTERFACE_SPECIFICATION_DEFINITION`` )
    /// - origin: ENTITY( ``eINTERFACE_SPECIFICATION_VERSION`` )
    /// - origin: ENTITY( ``eORGANIZATION`` )
    /// - origin: ENTITY( ``eORGANIZATIONAL_PROJECT`` )
    /// - origin: ENTITY( ``ePRODUCT`` )
    /// - origin: ENTITY( ``ePRODUCT_CATEGORY`` )
    /// - origin: ENTITY( ``ePRODUCT_CONCEPT`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_FORMATION`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    /// - origin: ENTITY( ``ePRODUCT_IN_ATTACHMENT_SLOT`` )
    /// - origin: ENTITY( ``eSTRUCTURED_MESSAGE`` )
    /// - origin: ENTITY( ``eVALIDATION`` )
    /// - origin: ENTITY( ``eVERIFICATION`` )
    public var ID: tIDENTIFIER?  {
      switch self {
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): return entity.ID
      case ._ATTACHMENT_SLOT_DESIGN_TO_PLANNED(let entity): return entity.ID
      case ._ATTACHMENT_SLOT_DESIGN_TO_REALIZED(let entity): return entity.ID
      case ._ATTACHMENT_SLOT_ON_PRODUCT(let entity): return entity.ID
      case ._ATTACHMENT_SLOT_PLANNED_TO_REALIZED(let entity): return entity.ID
      case ._BREAKDOWN_ELEMENT_USAGE(let entity): return entity.ID
      case ._CONFIGURATION_ITEM(let entity): return entity.ID
      case ._DOCUMENT_FILE(let entity): return entity.ID
      case ._FINAL_SOLUTION(let entity): return entity.ID
      case ._GROUP(let entity): return entity.ID
      case ._INTERFACE_CONNECTION(let entity): return entity.ID
      case ._INTERFACE_CONNECTOR_AS_PLANNED(let entity): return entity.ID
      case ._INTERFACE_CONNECTOR_AS_REALIZED(let entity): return entity.ID
      case ._INTERFACE_CONNECTOR_DEFINITION(let entity): return entity.ID
      case ._INTERFACE_CONNECTOR_DESIGN(let entity): return entity.ID
      case ._INTERFACE_CONNECTOR_OCCURRENCE(let entity): return entity.ID
      case ._INTERFACE_CONNECTOR_VERSION(let entity): return entity.ID
      case ._INTERFACE_DEFINITION_CONNECTION(let entity): return entity.ID
      case ._INTERFACE_SPECIFICATION_DEFINITION(let entity): return entity.ID
      case ._INTERFACE_SPECIFICATION_VERSION(let entity): return entity.ID
      case ._ORGANIZATION(let entity): return entity.ID
      case ._ORGANIZATIONAL_PROJECT(let entity): return entity.ID
      case ._PRODUCT(let entity): return entity.ID
      case ._PRODUCT_CATEGORY(let entity): return entity.ID
      case ._PRODUCT_CONCEPT(let entity): return entity.ID
      case ._PRODUCT_DEFINITION(let entity): return entity.ID
      case ._PRODUCT_DEFINITION_FORMATION(let entity): return entity.ID
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.ID
      case ._PRODUCT_IN_ATTACHMENT_SLOT(let entity): return entity.ID
      case ._STRUCTURED_MESSAGE(let entity): return entity.ID
      case ._VALIDATION(let entity): return entity.ID
      case ._VERIFICATION(let entity): return entity.ID
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSTATE_OBSERVED_OF_ITEM``
    /// - origin: ENTITY( ``eALTERNATE_PRODUCT_RELATIONSHIP`` )
    public var ALTERNATE: ePRODUCT?  {
      switch self {
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let entity): return entity.ALTERNATE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSTATE_OBSERVED_OF_ITEM``
    /// - origin: ENTITY( ``eORGANIZATIONAL_PROJECT`` )
    public var RESPONSIBLE_ORGANIZATIONS: (SDAI.SET<eORGANIZATION>/*[1:nil]*/ )?  {
      switch self {
      case ._ORGANIZATIONAL_PROJECT(let entity): return entity.RESPONSIBLE_ORGANIZATIONS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSTATE_OBSERVED_OF_ITEM``
    /// - origin: ENTITY( ``eFINAL_SOLUTION`` )
    /// - origin: ENTITY( ``eINTERFACE_CONNECTOR_AS_PLANNED`` )
    /// - origin: ENTITY( ``eINTERFACE_CONNECTOR_AS_REALIZED`` )
    /// - origin: ENTITY( ``eINTERFACE_CONNECTOR_DESIGN`` )
    /// - origin: ENTITY( ``eINTERFACE_CONNECTOR_VERSION`` )
    /// - origin: ENTITY( ``eINTERFACE_SPECIFICATION_VERSION`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_FORMATION`` )
    public var OF_PRODUCT: ePRODUCT?  {
      switch self {
      case ._FINAL_SOLUTION(let entity): return entity.OF_PRODUCT
      case ._INTERFACE_CONNECTOR_AS_PLANNED(let entity): return entity.OF_PRODUCT
      case ._INTERFACE_CONNECTOR_AS_REALIZED(let entity): return entity.OF_PRODUCT
      case ._INTERFACE_CONNECTOR_DESIGN(let entity): return entity.OF_PRODUCT
      case ._INTERFACE_CONNECTOR_VERSION(let entity): return entity.OF_PRODUCT
      case ._INTERFACE_SPECIFICATION_VERSION(let entity): return entity.OF_PRODUCT
      case ._PRODUCT_DEFINITION_FORMATION(let entity): return entity.OF_PRODUCT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSTATE_OBSERVED_OF_ITEM``
    /// - origin: ENTITY( ``eASSEMBLY_COMPONENT_USAGE`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    public var PRODUCT_DEFINITION_OCCURRENCE_ID: tIDENTIFIER?  {
      switch self {
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): return entity.PRODUCT_DEFINITION_OCCURRENCE_ID
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.PRODUCT_DEFINITION_OCCURRENCE_ID
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSTATE_OBSERVED_OF_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_CONCEPT`` )
    public var MARKET_CONTEXT: ePRODUCT_CONCEPT_CONTEXT?  {
      switch self {
      case ._PRODUCT_CONCEPT(let entity): return entity.MARKET_CONTEXT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSTATE_OBSERVED_OF_ITEM``
    /// - origin: ENTITY( ``eBREAKDOWN_ELEMENT_GROUP_ASSIGNMENT`` )
    /// - origin: ENTITY( ``eEVIDENCE`` )
    /// - origin: ENTITY( ``eGROUP`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_GROUP_ASSIGNMENT`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    public var ASSIGNED_GROUP: eGROUP?  {
      switch self {
      case ._BREAKDOWN_ELEMENT_GROUP_ASSIGNMENT(let entity): return eGROUP(entity.ASSIGNED_GROUP)
      case ._EVIDENCE(let entity): return entity.ASSIGNED_GROUP
      case ._GROUP(let entity): return eGROUP(entity.ASSIGNED_GROUP)
      case ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(let entity): return eGROUP(entity.ASSIGNED_GROUP)
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return eGROUP(entity.ASSIGNED_GROUP)
      default: return nil
      }
    }

    //MARK: var FRAME_OF_REFERENCE: (AMBIGUOUS)

    /// attribute of SELECT type ``sSTATE_OBSERVED_OF_ITEM``
    /// - origin: ENTITY( ``eASSEMBLY_COMPONENT_USAGE`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    public var LOCATION: (SDAI.LIST_UNIQUE<eNEXT_ASSEMBLY_USAGE_OCCURRENCE>/*[1:nil]*/ )?  {
      switch self {
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): return entity.LOCATION
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.LOCATION
      default: return nil
      }
    }

    //MARK: var DEFINITION: (AMBIGUOUS)

    /// attribute of SELECT type ``sSTATE_OBSERVED_OF_ITEM``
    /// - origin: ENTITY( ``eASSEMBLY_COMPONENT_USAGE`` )
    /// - origin: ENTITY( ``eATTACHMENT_SLOT_ON_PRODUCT`` )
    /// - origin: ENTITY( ``eBREAKDOWN_ELEMENT_USAGE`` )
    /// - origin: ENTITY( ``eINTERFACE_DEFINITION_CONNECTION`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    /// - origin: ENTITY( ``ePRODUCT_IN_ATTACHMENT_SLOT`` )
    public var RELATED_PRODUCT_DEFINITION: sPRODUCT_DEFINITION_OR_REFERENCE?  {
      switch self {
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): return entity.RELATED_PRODUCT_DEFINITION
      case ._ATTACHMENT_SLOT_ON_PRODUCT(let entity): return entity.RELATED_PRODUCT_DEFINITION
      case ._BREAKDOWN_ELEMENT_USAGE(let entity): return entity.RELATED_PRODUCT_DEFINITION
      case ._INTERFACE_DEFINITION_CONNECTION(let entity): return entity.RELATED_PRODUCT_DEFINITION
      case ._PRODUCT_DEFINITION(let entity): return sPRODUCT_DEFINITION_OR_REFERENCE(
        entity.RELATED_PRODUCT_DEFINITION)
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.RELATED_PRODUCT_DEFINITION
      case ._PRODUCT_IN_ATTACHMENT_SLOT(let entity): return entity.RELATED_PRODUCT_DEFINITION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSTATE_OBSERVED_OF_ITEM``
    /// - origin: ENTITY( ``eALTERNATE_PRODUCT_RELATIONSHIP`` )
    /// - origin: ENTITY( ``eASSEMBLY_COMPONENT_USAGE`` )
    /// - origin: ENTITY( ``eASSEMBLY_COMPONENT_USAGE_SUBSTITUTE`` )
    /// - origin: ENTITY( ``eATTACHMENT_SLOT_DESIGN_TO_PLANNED`` )
    /// - origin: ENTITY( ``eATTACHMENT_SLOT_DESIGN_TO_REALIZED`` )
    /// - origin: ENTITY( ``eATTACHMENT_SLOT_ON_PRODUCT`` )
    /// - origin: ENTITY( ``eATTACHMENT_SLOT_PLANNED_TO_REALIZED`` )
    /// - origin: ENTITY( ``eBREAKDOWN_ELEMENT_USAGE`` )
    /// - origin: ENTITY( ``eCERTIFICATION`` )
    /// - origin: ENTITY( ``eCONFIGURATION_ITEM`` )
    /// - origin: ENTITY( ``eCONTRACT`` )
    /// - origin: ENTITY( ``eGROUP`` )
    /// - origin: ENTITY( ``eINTERFACE_CONNECTION`` )
    /// - origin: ENTITY( ``eINTERFACE_CONNECTOR_DEFINITION`` )
    /// - origin: ENTITY( ``eINTERFACE_CONNECTOR_OCCURRENCE`` )
    /// - origin: ENTITY( ``eINTERFACE_DEFINITION_CONNECTION`` )
    /// - origin: ENTITY( ``eINTERFACE_SPECIFICATION_DEFINITION`` )
    /// - origin: ENTITY( ``eORGANIZATION`` )
    /// - origin: ENTITY( ``eORGANIZATIONAL_PROJECT`` )
    /// - origin: ENTITY( ``ePERSON_AND_ORGANIZATION`` )
    /// - origin: ENTITY( ``ePRODUCT`` )
    /// - origin: ENTITY( ``ePRODUCT_CATEGORY`` )
    /// - origin: ENTITY( ``ePRODUCT_CONCEPT`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    /// - origin: ENTITY( ``ePRODUCT_IN_ATTACHMENT_SLOT`` )
    /// - origin: ENTITY( ``eSECURITY_CLASSIFICATION`` )
    /// - origin: ENTITY( ``eSTRUCTURED_MESSAGE`` )
    /// - origin: ENTITY( ``eVALIDATION`` )
    /// - origin: ENTITY( ``eVERIFICATION`` )
    public var NAME: tLABEL?  {
      switch self {
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let entity): return entity.NAME
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): return entity.NAME
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let entity): return entity.NAME
      case ._ATTACHMENT_SLOT_DESIGN_TO_PLANNED(let entity): return entity.NAME
      case ._ATTACHMENT_SLOT_DESIGN_TO_REALIZED(let entity): return entity.NAME
      case ._ATTACHMENT_SLOT_ON_PRODUCT(let entity): return entity.NAME
      case ._ATTACHMENT_SLOT_PLANNED_TO_REALIZED(let entity): return entity.NAME
      case ._BREAKDOWN_ELEMENT_USAGE(let entity): return entity.NAME
      case ._CERTIFICATION(let entity): return entity.NAME
      case ._CONFIGURATION_ITEM(let entity): return entity.NAME
      case ._CONTRACT(let entity): return entity.NAME
      case ._DOCUMENT_FILE/*(let entity)*/: return nil // AMBIGUOUS ATTRIBUTE for eDOCUMENT_FILE
      case ._GROUP(let entity): return entity.NAME
      case ._INTERFACE_CONNECTION(let entity): return entity.NAME
      case ._INTERFACE_CONNECTOR_DEFINITION(let entity): return entity.NAME
      case ._INTERFACE_CONNECTOR_OCCURRENCE(let entity): return entity.NAME
      case ._INTERFACE_DEFINITION_CONNECTION(let entity): return entity.NAME
      case ._INTERFACE_SPECIFICATION_DEFINITION(let entity): return entity.NAME
      case ._ORGANIZATION(let entity): return entity.NAME
      case ._ORGANIZATIONAL_PROJECT(let entity): return entity.NAME
      case ._PERSON_AND_ORGANIZATION(let entity): return entity.NAME
      case ._PRODUCT(let entity): return entity.NAME
      case ._PRODUCT_CATEGORY(let entity): return entity.NAME
      case ._PRODUCT_CONCEPT(let entity): return entity.NAME
      case ._PRODUCT_DEFINITION(let entity): return entity.NAME
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.NAME
      case ._PRODUCT_IN_ATTACHMENT_SLOT(let entity): return entity.NAME
      case ._SECURITY_CLASSIFICATION(let entity): return entity.NAME
      case ._STRUCTURED_MESSAGE(let entity): return entity.NAME
      case ._VALIDATION(let entity): return entity.NAME
      case ._VERIFICATION(let entity): return entity.NAME
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSTATE_OBSERVED_OF_ITEM``
    /// - origin: ENTITY( ``eINTERFACE_CONNECTOR_DEFINITION`` )
    /// - origin: ENTITY( ``eINTERFACE_SPECIFICATION_DEFINITION`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION`` )
    public var FORMATION: ePRODUCT_DEFINITION_FORMATION?  {
      switch self {
      case ._INTERFACE_CONNECTOR_DEFINITION(let entity): return entity.FORMATION
      case ._INTERFACE_SPECIFICATION_DEFINITION(let entity): return entity.FORMATION
      case ._PRODUCT_DEFINITION(let entity): return entity.FORMATION
      default: return nil
      }
    }


    //MARK: - SDAIValue
    public func isValueEqual<T: SDAIValue>(to rhs: T) -> Bool {
      switch self {
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let selection): return selection.value.isValueEqual(to: rhs)
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let selection): return selection.value.isValueEqual(to: rhs)
      case ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(let selection): return selection.value.isValueEqual(to: rhs)
      case ._APPROVAL(let selection): return selection.value.isValueEqual(to: rhs)
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._ATTACHMENT_SLOT_DESIGN_TO_PLANNED(let selection): return selection.value.isValueEqual(to: rhs)
      case ._ATTACHMENT_SLOT_DESIGN_TO_REALIZED(let selection): return selection.value.isValueEqual(to: rhs)
      case ._ATTACHMENT_SLOT_ON_PRODUCT(let selection): return selection.value.isValueEqual(to: rhs)
      case ._ATTACHMENT_SLOT_PLANNED_TO_REALIZED(let selection): return selection.value.isValueEqual(to: rhs)
      case ._BREAKDOWN_ELEMENT_GROUP_ASSIGNMENT(let selection): return selection.value.isValueEqual(to: rhs)
      case ._BREAKDOWN_ELEMENT_USAGE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._CERTIFICATION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._CONFIGURATION_ITEM(let selection): return selection.value.isValueEqual(to: rhs)
      case ._CONTRACT(let selection): return selection.value.isValueEqual(to: rhs)
      case ._DOCUMENT_FILE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._EVIDENCE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._FINAL_SOLUTION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._GROUP(let selection): return selection.value.isValueEqual(to: rhs)
      case ._INTERFACE_CONNECTION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._INTERFACE_CONNECTOR_AS_PLANNED(let selection): return selection.value.isValueEqual(to: rhs)
      case ._INTERFACE_CONNECTOR_AS_REALIZED(let selection): return selection.value.isValueEqual(to: rhs)
      case ._INTERFACE_CONNECTOR_DEFINITION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._INTERFACE_CONNECTOR_DESIGN(let selection): return selection.value.isValueEqual(to: rhs)
      case ._INTERFACE_CONNECTOR_OCCURRENCE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._INTERFACE_CONNECTOR_VERSION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._INTERFACE_DEFINITION_CONNECTION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._INTERFACE_SPECIFICATION_DEFINITION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._INTERFACE_SPECIFICATION_VERSION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._ORGANIZATION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PERSON_AND_ORGANIZATION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PRODUCT(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PRODUCT_CATEGORY(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PRODUCT_CONCEPT(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PRODUCT_DEFINITION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PRODUCT_IN_ATTACHMENT_SLOT(let selection): return selection.value.isValueEqual(to: rhs)
      case ._SECURITY_CLASSIFICATION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._STRUCTURED_MESSAGE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._VALIDATION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._VERIFICATION(let selection): return selection.value.isValueEqual(to: rhs)
      }
    }

    public func isValueEqualOptionally<T: SDAIValue>(to rhs: T?) -> Bool? {
      switch self {
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._APPROVAL(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._ATTACHMENT_SLOT_DESIGN_TO_PLANNED(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._ATTACHMENT_SLOT_DESIGN_TO_REALIZED(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._ATTACHMENT_SLOT_ON_PRODUCT(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._ATTACHMENT_SLOT_PLANNED_TO_REALIZED(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._BREAKDOWN_ELEMENT_GROUP_ASSIGNMENT(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._BREAKDOWN_ELEMENT_USAGE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._CERTIFICATION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._CONFIGURATION_ITEM(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._CONTRACT(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._DOCUMENT_FILE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._EVIDENCE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._FINAL_SOLUTION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._GROUP(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._INTERFACE_CONNECTION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._INTERFACE_CONNECTOR_AS_PLANNED(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._INTERFACE_CONNECTOR_AS_REALIZED(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._INTERFACE_CONNECTOR_DEFINITION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._INTERFACE_CONNECTOR_DESIGN(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._INTERFACE_CONNECTOR_OCCURRENCE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._INTERFACE_CONNECTOR_VERSION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._INTERFACE_DEFINITION_CONNECTION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._INTERFACE_SPECIFICATION_DEFINITION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._INTERFACE_SPECIFICATION_VERSION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._ORGANIZATION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PERSON_AND_ORGANIZATION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PRODUCT(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PRODUCT_CATEGORY(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PRODUCT_CONCEPT(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PRODUCT_DEFINITION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PRODUCT_IN_ATTACHMENT_SLOT(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._SECURITY_CLASSIFICATION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._STRUCTURED_MESSAGE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._VALIDATION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._VERIFICATION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      }
    }

    public func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      switch self {
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._APPROVAL(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._ATTACHMENT_SLOT_DESIGN_TO_PLANNED(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._ATTACHMENT_SLOT_DESIGN_TO_REALIZED(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._ATTACHMENT_SLOT_ON_PRODUCT(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._ATTACHMENT_SLOT_PLANNED_TO_REALIZED(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._BREAKDOWN_ELEMENT_GROUP_ASSIGNMENT(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._BREAKDOWN_ELEMENT_USAGE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._CERTIFICATION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._CONFIGURATION_ITEM(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._CONTRACT(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._DOCUMENT_FILE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._EVIDENCE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._FINAL_SOLUTION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._GROUP(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._INTERFACE_CONNECTION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._INTERFACE_CONNECTOR_AS_PLANNED(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._INTERFACE_CONNECTOR_AS_REALIZED(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._INTERFACE_CONNECTOR_DEFINITION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._INTERFACE_CONNECTOR_DESIGN(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._INTERFACE_CONNECTOR_OCCURRENCE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._INTERFACE_CONNECTOR_VERSION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._INTERFACE_DEFINITION_CONNECTION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._INTERFACE_SPECIFICATION_DEFINITION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._INTERFACE_SPECIFICATION_VERSION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._ORGANIZATION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._ORGANIZATIONAL_PROJECT(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PERSON_AND_ORGANIZATION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PRODUCT(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PRODUCT_CATEGORY(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PRODUCT_CONCEPT(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PRODUCT_DEFINITION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PRODUCT_DEFINITION_FORMATION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PRODUCT_IN_ATTACHMENT_SLOT(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._SECURITY_CLASSIFICATION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._STRUCTURED_MESSAGE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._VALIDATION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._VERIFICATION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      }
    }

    public func isValueEqual<T: SDAIValue>(to rhs: T, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      switch self {
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._APPROVAL(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._ATTACHMENT_SLOT_DESIGN_TO_PLANNED(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._ATTACHMENT_SLOT_DESIGN_TO_REALIZED(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._ATTACHMENT_SLOT_ON_PRODUCT(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._ATTACHMENT_SLOT_PLANNED_TO_REALIZED(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._BREAKDOWN_ELEMENT_GROUP_ASSIGNMENT(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._BREAKDOWN_ELEMENT_USAGE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._CERTIFICATION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._CONFIGURATION_ITEM(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._CONTRACT(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._DOCUMENT_FILE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._EVIDENCE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._FINAL_SOLUTION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._GROUP(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._INTERFACE_CONNECTION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._INTERFACE_CONNECTOR_AS_PLANNED(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._INTERFACE_CONNECTOR_AS_REALIZED(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._INTERFACE_CONNECTOR_DEFINITION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._INTERFACE_CONNECTOR_DESIGN(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._INTERFACE_CONNECTOR_OCCURRENCE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._INTERFACE_CONNECTOR_VERSION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._INTERFACE_DEFINITION_CONNECTION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._INTERFACE_SPECIFICATION_DEFINITION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._INTERFACE_SPECIFICATION_VERSION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._ORGANIZATION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PERSON_AND_ORGANIZATION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PRODUCT(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PRODUCT_CATEGORY(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PRODUCT_CONCEPT(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PRODUCT_DEFINITION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PRODUCT_IN_ATTACHMENT_SLOT(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._SECURITY_CLASSIFICATION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._STRUCTURED_MESSAGE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._VALIDATION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._VERIFICATION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      }
    }

    public func isValueEqualOptionally<T: SDAIValue>(to rhs: T?, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      switch self {
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._APPROVAL(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._ATTACHMENT_SLOT_DESIGN_TO_PLANNED(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._ATTACHMENT_SLOT_DESIGN_TO_REALIZED(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._ATTACHMENT_SLOT_ON_PRODUCT(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._ATTACHMENT_SLOT_PLANNED_TO_REALIZED(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._BREAKDOWN_ELEMENT_GROUP_ASSIGNMENT(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._BREAKDOWN_ELEMENT_USAGE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._CERTIFICATION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._CONFIGURATION_ITEM(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._CONTRACT(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._DOCUMENT_FILE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._EVIDENCE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._FINAL_SOLUTION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._GROUP(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._INTERFACE_CONNECTION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._INTERFACE_CONNECTOR_AS_PLANNED(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._INTERFACE_CONNECTOR_AS_REALIZED(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._INTERFACE_CONNECTOR_DEFINITION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._INTERFACE_CONNECTOR_DESIGN(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._INTERFACE_CONNECTOR_OCCURRENCE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._INTERFACE_CONNECTOR_VERSION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._INTERFACE_DEFINITION_CONNECTION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._INTERFACE_SPECIFICATION_DEFINITION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._INTERFACE_SPECIFICATION_VERSION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._ORGANIZATION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PERSON_AND_ORGANIZATION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PRODUCT(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PRODUCT_CATEGORY(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PRODUCT_CONCEPT(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PRODUCT_DEFINITION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PRODUCT_IN_ATTACHMENT_SLOT(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._SECURITY_CLASSIFICATION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._STRUCTURED_MESSAGE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._VALIDATION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._VERIFICATION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      }
    }


    //MARK: SDAIGenericTypeBase
    public func copy() -> Self {
      switch self {
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let selection): return ._ALTERNATE_PRODUCT_RELATIONSHIP(selection.copy())
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let selection): return ._APPLIED_ACTION_METHOD_ASSIGNMENT(selection.copy())
      case ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(let selection): return ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(selection.copy())
      case ._APPROVAL(let selection): return ._APPROVAL(selection.copy())
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return ._ASSEMBLY_COMPONENT_USAGE(selection.copy())
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let selection): return ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(selection.copy())
      case ._ATTACHMENT_SLOT_DESIGN_TO_PLANNED(let selection): return ._ATTACHMENT_SLOT_DESIGN_TO_PLANNED(selection.copy())
      case ._ATTACHMENT_SLOT_DESIGN_TO_REALIZED(let selection): return ._ATTACHMENT_SLOT_DESIGN_TO_REALIZED(selection.copy())
      case ._ATTACHMENT_SLOT_ON_PRODUCT(let selection): return ._ATTACHMENT_SLOT_ON_PRODUCT(selection.copy())
      case ._ATTACHMENT_SLOT_PLANNED_TO_REALIZED(let selection): return ._ATTACHMENT_SLOT_PLANNED_TO_REALIZED(selection.copy())
      case ._BREAKDOWN_ELEMENT_GROUP_ASSIGNMENT(let selection): return ._BREAKDOWN_ELEMENT_GROUP_ASSIGNMENT(selection.copy())
      case ._BREAKDOWN_ELEMENT_USAGE(let selection): return ._BREAKDOWN_ELEMENT_USAGE(selection.copy())
      case ._CERTIFICATION(let selection): return ._CERTIFICATION(selection.copy())
      case ._CONFIGURATION_ITEM(let selection): return ._CONFIGURATION_ITEM(selection.copy())
      case ._CONTRACT(let selection): return ._CONTRACT(selection.copy())
      case ._DOCUMENT_FILE(let selection): return ._DOCUMENT_FILE(selection.copy())
      case ._EVIDENCE(let selection): return ._EVIDENCE(selection.copy())
      case ._FINAL_SOLUTION(let selection): return ._FINAL_SOLUTION(selection.copy())
      case ._GROUP(let selection): return ._GROUP(selection.copy())
      case ._INTERFACE_CONNECTION(let selection): return ._INTERFACE_CONNECTION(selection.copy())
      case ._INTERFACE_CONNECTOR_AS_PLANNED(let selection): return ._INTERFACE_CONNECTOR_AS_PLANNED(selection.copy())
      case ._INTERFACE_CONNECTOR_AS_REALIZED(let selection): return ._INTERFACE_CONNECTOR_AS_REALIZED(selection.copy())
      case ._INTERFACE_CONNECTOR_DEFINITION(let selection): return ._INTERFACE_CONNECTOR_DEFINITION(selection.copy())
      case ._INTERFACE_CONNECTOR_DESIGN(let selection): return ._INTERFACE_CONNECTOR_DESIGN(selection.copy())
      case ._INTERFACE_CONNECTOR_OCCURRENCE(let selection): return ._INTERFACE_CONNECTOR_OCCURRENCE(selection.copy())
      case ._INTERFACE_CONNECTOR_VERSION(let selection): return ._INTERFACE_CONNECTOR_VERSION(selection.copy())
      case ._INTERFACE_DEFINITION_CONNECTION(let selection): return ._INTERFACE_DEFINITION_CONNECTION(selection.copy())
      case ._INTERFACE_SPECIFICATION_DEFINITION(let selection): return ._INTERFACE_SPECIFICATION_DEFINITION(selection.copy())
      case ._INTERFACE_SPECIFICATION_VERSION(let selection): return ._INTERFACE_SPECIFICATION_VERSION(selection.copy())
      case ._ORGANIZATION(let selection): return ._ORGANIZATION(selection.copy())
      case ._ORGANIZATIONAL_PROJECT(let selection): return ._ORGANIZATIONAL_PROJECT(selection.copy())
      case ._PERSON_AND_ORGANIZATION(let selection): return ._PERSON_AND_ORGANIZATION(selection.copy())
      case ._PRODUCT(let selection): return ._PRODUCT(selection.copy())
      case ._PRODUCT_CATEGORY(let selection): return ._PRODUCT_CATEGORY(selection.copy())
      case ._PRODUCT_CONCEPT(let selection): return ._PRODUCT_CONCEPT(selection.copy())
      case ._PRODUCT_DEFINITION(let selection): return ._PRODUCT_DEFINITION(selection.copy())
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return ._PRODUCT_DEFINITION_FORMATION(selection.copy())
      case ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(let selection): return ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(selection.copy())
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return ._PRODUCT_DEFINITION_RELATIONSHIP(selection.copy())
      case ._PRODUCT_IN_ATTACHMENT_SLOT(let selection): return ._PRODUCT_IN_ATTACHMENT_SLOT(selection.copy())
      case ._SECURITY_CLASSIFICATION(let selection): return ._SECURITY_CLASSIFICATION(selection.copy())
      case ._STRUCTURED_MESSAGE(let selection): return ._STRUCTURED_MESSAGE(selection.copy())
      case ._VALIDATION(let selection): return ._VALIDATION(selection.copy())
      case ._VERIFICATION(let selection): return ._VERIFICATION(selection.copy())
      }
    }

    //MARK: SDAIGenericType
    public var typeMembers: Set<SDAI.STRING> {
      var members: Set<SDAI.STRING> = [SDAI.STRING(Self.typeName)]
      switch self {
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let selection): members.formUnion(selection.typeMembers)
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let selection): members.formUnion(selection.typeMembers)
      case ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(let selection): members.formUnion(selection.typeMembers)
      case ._APPROVAL(let selection): members.formUnion(selection.typeMembers)
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): members.formUnion(selection.typeMembers)
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let selection): members.formUnion(selection.typeMembers)
      case ._ATTACHMENT_SLOT_DESIGN_TO_PLANNED(let selection): members.formUnion(selection.typeMembers)
      case ._ATTACHMENT_SLOT_DESIGN_TO_REALIZED(let selection): members.formUnion(selection.typeMembers)
      case ._ATTACHMENT_SLOT_ON_PRODUCT(let selection): members.formUnion(selection.typeMembers)
      case ._ATTACHMENT_SLOT_PLANNED_TO_REALIZED(let selection): members.formUnion(selection.typeMembers)
      case ._BREAKDOWN_ELEMENT_GROUP_ASSIGNMENT(let selection): members.formUnion(selection.typeMembers)
      case ._BREAKDOWN_ELEMENT_USAGE(let selection): members.formUnion(selection.typeMembers)
      case ._CERTIFICATION(let selection): members.formUnion(selection.typeMembers)
      case ._CONFIGURATION_ITEM(let selection): members.formUnion(selection.typeMembers)
      case ._CONTRACT(let selection): members.formUnion(selection.typeMembers)
      case ._DOCUMENT_FILE(let selection): members.formUnion(selection.typeMembers)
      case ._EVIDENCE(let selection): members.formUnion(selection.typeMembers)
      case ._FINAL_SOLUTION(let selection): members.formUnion(selection.typeMembers)
      case ._GROUP(let selection): members.formUnion(selection.typeMembers)
      case ._INTERFACE_CONNECTION(let selection): members.formUnion(selection.typeMembers)
      case ._INTERFACE_CONNECTOR_AS_PLANNED(let selection): members.formUnion(selection.typeMembers)
      case ._INTERFACE_CONNECTOR_AS_REALIZED(let selection): members.formUnion(selection.typeMembers)
      case ._INTERFACE_CONNECTOR_DEFINITION(let selection): members.formUnion(selection.typeMembers)
      case ._INTERFACE_CONNECTOR_DESIGN(let selection): members.formUnion(selection.typeMembers)
      case ._INTERFACE_CONNECTOR_OCCURRENCE(let selection): members.formUnion(selection.typeMembers)
      case ._INTERFACE_CONNECTOR_VERSION(let selection): members.formUnion(selection.typeMembers)
      case ._INTERFACE_DEFINITION_CONNECTION(let selection): members.formUnion(selection.typeMembers)
      case ._INTERFACE_SPECIFICATION_DEFINITION(let selection): members.formUnion(selection.typeMembers)
      case ._INTERFACE_SPECIFICATION_VERSION(let selection): members.formUnion(selection.typeMembers)
      case ._ORGANIZATION(let selection): members.formUnion(selection.typeMembers)
      case ._ORGANIZATIONAL_PROJECT(let selection): members.formUnion(selection.typeMembers)
      case ._PERSON_AND_ORGANIZATION(let selection): members.formUnion(selection.typeMembers)
      case ._PRODUCT(let selection): members.formUnion(selection.typeMembers)
      case ._PRODUCT_CATEGORY(let selection): members.formUnion(selection.typeMembers)
      case ._PRODUCT_CONCEPT(let selection): members.formUnion(selection.typeMembers)
      case ._PRODUCT_DEFINITION(let selection): members.formUnion(selection.typeMembers)
      case ._PRODUCT_DEFINITION_FORMATION(let selection): members.formUnion(selection.typeMembers)
      case ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(let selection): members.formUnion(selection.typeMembers)
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): members.formUnion(selection.typeMembers)
      case ._PRODUCT_IN_ATTACHMENT_SLOT(let selection): members.formUnion(selection.typeMembers)
      case ._SECURITY_CLASSIFICATION(let selection): members.formUnion(selection.typeMembers)
      case ._STRUCTURED_MESSAGE(let selection): members.formUnion(selection.typeMembers)
      case ._VALIDATION(let selection): members.formUnion(selection.typeMembers)
      case ._VERIFICATION(let selection): members.formUnion(selection.typeMembers)
      }
      return members
    }

    public var entityReference: SDAI.EntityReference? {
      switch self {
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let selection): return selection.entityReference
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let selection): return selection.entityReference
      case ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(let selection): return selection.entityReference
      case ._APPROVAL(let selection): return selection.entityReference
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.entityReference
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let selection): return selection.entityReference
      case ._ATTACHMENT_SLOT_DESIGN_TO_PLANNED(let selection): return selection.entityReference
      case ._ATTACHMENT_SLOT_DESIGN_TO_REALIZED(let selection): return selection.entityReference
      case ._ATTACHMENT_SLOT_ON_PRODUCT(let selection): return selection.entityReference
      case ._ATTACHMENT_SLOT_PLANNED_TO_REALIZED(let selection): return selection.entityReference
      case ._BREAKDOWN_ELEMENT_GROUP_ASSIGNMENT(let selection): return selection.entityReference
      case ._BREAKDOWN_ELEMENT_USAGE(let selection): return selection.entityReference
      case ._CERTIFICATION(let selection): return selection.entityReference
      case ._CONFIGURATION_ITEM(let selection): return selection.entityReference
      case ._CONTRACT(let selection): return selection.entityReference
      case ._DOCUMENT_FILE(let selection): return selection.entityReference
      case ._EVIDENCE(let selection): return selection.entityReference
      case ._FINAL_SOLUTION(let selection): return selection.entityReference
      case ._GROUP(let selection): return selection.entityReference
      case ._INTERFACE_CONNECTION(let selection): return selection.entityReference
      case ._INTERFACE_CONNECTOR_AS_PLANNED(let selection): return selection.entityReference
      case ._INTERFACE_CONNECTOR_AS_REALIZED(let selection): return selection.entityReference
      case ._INTERFACE_CONNECTOR_DEFINITION(let selection): return selection.entityReference
      case ._INTERFACE_CONNECTOR_DESIGN(let selection): return selection.entityReference
      case ._INTERFACE_CONNECTOR_OCCURRENCE(let selection): return selection.entityReference
      case ._INTERFACE_CONNECTOR_VERSION(let selection): return selection.entityReference
      case ._INTERFACE_DEFINITION_CONNECTION(let selection): return selection.entityReference
      case ._INTERFACE_SPECIFICATION_DEFINITION(let selection): return selection.entityReference
      case ._INTERFACE_SPECIFICATION_VERSION(let selection): return selection.entityReference
      case ._ORGANIZATION(let selection): return selection.entityReference
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.entityReference
      case ._PERSON_AND_ORGANIZATION(let selection): return selection.entityReference
      case ._PRODUCT(let selection): return selection.entityReference
      case ._PRODUCT_CATEGORY(let selection): return selection.entityReference
      case ._PRODUCT_CONCEPT(let selection): return selection.entityReference
      case ._PRODUCT_DEFINITION(let selection): return selection.entityReference
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.entityReference
      case ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(let selection): return selection.entityReference
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.entityReference
      case ._PRODUCT_IN_ATTACHMENT_SLOT(let selection): return selection.entityReference
      case ._SECURITY_CLASSIFICATION(let selection): return selection.entityReference
      case ._STRUCTURED_MESSAGE(let selection): return selection.entityReference
      case ._VALIDATION(let selection): return selection.entityReference
      case ._VERIFICATION(let selection): return selection.entityReference
      }
    }
    public var stringValue: SDAI.STRING? {
      switch self {
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let selection): return selection.stringValue
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let selection): return selection.stringValue
      case ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(let selection): return selection.stringValue
      case ._APPROVAL(let selection): return selection.stringValue
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.stringValue
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let selection): return selection.stringValue
      case ._ATTACHMENT_SLOT_DESIGN_TO_PLANNED(let selection): return selection.stringValue
      case ._ATTACHMENT_SLOT_DESIGN_TO_REALIZED(let selection): return selection.stringValue
      case ._ATTACHMENT_SLOT_ON_PRODUCT(let selection): return selection.stringValue
      case ._ATTACHMENT_SLOT_PLANNED_TO_REALIZED(let selection): return selection.stringValue
      case ._BREAKDOWN_ELEMENT_GROUP_ASSIGNMENT(let selection): return selection.stringValue
      case ._BREAKDOWN_ELEMENT_USAGE(let selection): return selection.stringValue
      case ._CERTIFICATION(let selection): return selection.stringValue
      case ._CONFIGURATION_ITEM(let selection): return selection.stringValue
      case ._CONTRACT(let selection): return selection.stringValue
      case ._DOCUMENT_FILE(let selection): return selection.stringValue
      case ._EVIDENCE(let selection): return selection.stringValue
      case ._FINAL_SOLUTION(let selection): return selection.stringValue
      case ._GROUP(let selection): return selection.stringValue
      case ._INTERFACE_CONNECTION(let selection): return selection.stringValue
      case ._INTERFACE_CONNECTOR_AS_PLANNED(let selection): return selection.stringValue
      case ._INTERFACE_CONNECTOR_AS_REALIZED(let selection): return selection.stringValue
      case ._INTERFACE_CONNECTOR_DEFINITION(let selection): return selection.stringValue
      case ._INTERFACE_CONNECTOR_DESIGN(let selection): return selection.stringValue
      case ._INTERFACE_CONNECTOR_OCCURRENCE(let selection): return selection.stringValue
      case ._INTERFACE_CONNECTOR_VERSION(let selection): return selection.stringValue
      case ._INTERFACE_DEFINITION_CONNECTION(let selection): return selection.stringValue
      case ._INTERFACE_SPECIFICATION_DEFINITION(let selection): return selection.stringValue
      case ._INTERFACE_SPECIFICATION_VERSION(let selection): return selection.stringValue
      case ._ORGANIZATION(let selection): return selection.stringValue
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.stringValue
      case ._PERSON_AND_ORGANIZATION(let selection): return selection.stringValue
      case ._PRODUCT(let selection): return selection.stringValue
      case ._PRODUCT_CATEGORY(let selection): return selection.stringValue
      case ._PRODUCT_CONCEPT(let selection): return selection.stringValue
      case ._PRODUCT_DEFINITION(let selection): return selection.stringValue
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.stringValue
      case ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(let selection): return selection.stringValue
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.stringValue
      case ._PRODUCT_IN_ATTACHMENT_SLOT(let selection): return selection.stringValue
      case ._SECURITY_CLASSIFICATION(let selection): return selection.stringValue
      case ._STRUCTURED_MESSAGE(let selection): return selection.stringValue
      case ._VALIDATION(let selection): return selection.stringValue
      case ._VERIFICATION(let selection): return selection.stringValue
      }
    }
    public var binaryValue: SDAI.BINARY? {
      switch self {
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let selection): return selection.binaryValue
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let selection): return selection.binaryValue
      case ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(let selection): return selection.binaryValue
      case ._APPROVAL(let selection): return selection.binaryValue
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.binaryValue
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let selection): return selection.binaryValue
      case ._ATTACHMENT_SLOT_DESIGN_TO_PLANNED(let selection): return selection.binaryValue
      case ._ATTACHMENT_SLOT_DESIGN_TO_REALIZED(let selection): return selection.binaryValue
      case ._ATTACHMENT_SLOT_ON_PRODUCT(let selection): return selection.binaryValue
      case ._ATTACHMENT_SLOT_PLANNED_TO_REALIZED(let selection): return selection.binaryValue
      case ._BREAKDOWN_ELEMENT_GROUP_ASSIGNMENT(let selection): return selection.binaryValue
      case ._BREAKDOWN_ELEMENT_USAGE(let selection): return selection.binaryValue
      case ._CERTIFICATION(let selection): return selection.binaryValue
      case ._CONFIGURATION_ITEM(let selection): return selection.binaryValue
      case ._CONTRACT(let selection): return selection.binaryValue
      case ._DOCUMENT_FILE(let selection): return selection.binaryValue
      case ._EVIDENCE(let selection): return selection.binaryValue
      case ._FINAL_SOLUTION(let selection): return selection.binaryValue
      case ._GROUP(let selection): return selection.binaryValue
      case ._INTERFACE_CONNECTION(let selection): return selection.binaryValue
      case ._INTERFACE_CONNECTOR_AS_PLANNED(let selection): return selection.binaryValue
      case ._INTERFACE_CONNECTOR_AS_REALIZED(let selection): return selection.binaryValue
      case ._INTERFACE_CONNECTOR_DEFINITION(let selection): return selection.binaryValue
      case ._INTERFACE_CONNECTOR_DESIGN(let selection): return selection.binaryValue
      case ._INTERFACE_CONNECTOR_OCCURRENCE(let selection): return selection.binaryValue
      case ._INTERFACE_CONNECTOR_VERSION(let selection): return selection.binaryValue
      case ._INTERFACE_DEFINITION_CONNECTION(let selection): return selection.binaryValue
      case ._INTERFACE_SPECIFICATION_DEFINITION(let selection): return selection.binaryValue
      case ._INTERFACE_SPECIFICATION_VERSION(let selection): return selection.binaryValue
      case ._ORGANIZATION(let selection): return selection.binaryValue
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.binaryValue
      case ._PERSON_AND_ORGANIZATION(let selection): return selection.binaryValue
      case ._PRODUCT(let selection): return selection.binaryValue
      case ._PRODUCT_CATEGORY(let selection): return selection.binaryValue
      case ._PRODUCT_CONCEPT(let selection): return selection.binaryValue
      case ._PRODUCT_DEFINITION(let selection): return selection.binaryValue
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.binaryValue
      case ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(let selection): return selection.binaryValue
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.binaryValue
      case ._PRODUCT_IN_ATTACHMENT_SLOT(let selection): return selection.binaryValue
      case ._SECURITY_CLASSIFICATION(let selection): return selection.binaryValue
      case ._STRUCTURED_MESSAGE(let selection): return selection.binaryValue
      case ._VALIDATION(let selection): return selection.binaryValue
      case ._VERIFICATION(let selection): return selection.binaryValue
      }
    }
    public var logicalValue: SDAI.LOGICAL? {
      switch self {
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let selection): return selection.logicalValue
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let selection): return selection.logicalValue
      case ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(let selection): return selection.logicalValue
      case ._APPROVAL(let selection): return selection.logicalValue
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.logicalValue
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let selection): return selection.logicalValue
      case ._ATTACHMENT_SLOT_DESIGN_TO_PLANNED(let selection): return selection.logicalValue
      case ._ATTACHMENT_SLOT_DESIGN_TO_REALIZED(let selection): return selection.logicalValue
      case ._ATTACHMENT_SLOT_ON_PRODUCT(let selection): return selection.logicalValue
      case ._ATTACHMENT_SLOT_PLANNED_TO_REALIZED(let selection): return selection.logicalValue
      case ._BREAKDOWN_ELEMENT_GROUP_ASSIGNMENT(let selection): return selection.logicalValue
      case ._BREAKDOWN_ELEMENT_USAGE(let selection): return selection.logicalValue
      case ._CERTIFICATION(let selection): return selection.logicalValue
      case ._CONFIGURATION_ITEM(let selection): return selection.logicalValue
      case ._CONTRACT(let selection): return selection.logicalValue
      case ._DOCUMENT_FILE(let selection): return selection.logicalValue
      case ._EVIDENCE(let selection): return selection.logicalValue
      case ._FINAL_SOLUTION(let selection): return selection.logicalValue
      case ._GROUP(let selection): return selection.logicalValue
      case ._INTERFACE_CONNECTION(let selection): return selection.logicalValue
      case ._INTERFACE_CONNECTOR_AS_PLANNED(let selection): return selection.logicalValue
      case ._INTERFACE_CONNECTOR_AS_REALIZED(let selection): return selection.logicalValue
      case ._INTERFACE_CONNECTOR_DEFINITION(let selection): return selection.logicalValue
      case ._INTERFACE_CONNECTOR_DESIGN(let selection): return selection.logicalValue
      case ._INTERFACE_CONNECTOR_OCCURRENCE(let selection): return selection.logicalValue
      case ._INTERFACE_CONNECTOR_VERSION(let selection): return selection.logicalValue
      case ._INTERFACE_DEFINITION_CONNECTION(let selection): return selection.logicalValue
      case ._INTERFACE_SPECIFICATION_DEFINITION(let selection): return selection.logicalValue
      case ._INTERFACE_SPECIFICATION_VERSION(let selection): return selection.logicalValue
      case ._ORGANIZATION(let selection): return selection.logicalValue
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.logicalValue
      case ._PERSON_AND_ORGANIZATION(let selection): return selection.logicalValue
      case ._PRODUCT(let selection): return selection.logicalValue
      case ._PRODUCT_CATEGORY(let selection): return selection.logicalValue
      case ._PRODUCT_CONCEPT(let selection): return selection.logicalValue
      case ._PRODUCT_DEFINITION(let selection): return selection.logicalValue
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.logicalValue
      case ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(let selection): return selection.logicalValue
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.logicalValue
      case ._PRODUCT_IN_ATTACHMENT_SLOT(let selection): return selection.logicalValue
      case ._SECURITY_CLASSIFICATION(let selection): return selection.logicalValue
      case ._STRUCTURED_MESSAGE(let selection): return selection.logicalValue
      case ._VALIDATION(let selection): return selection.logicalValue
      case ._VERIFICATION(let selection): return selection.logicalValue
      }
    }
    public var booleanValue: SDAI.BOOLEAN? {
      switch self {
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let selection): return selection.booleanValue
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let selection): return selection.booleanValue
      case ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(let selection): return selection.booleanValue
      case ._APPROVAL(let selection): return selection.booleanValue
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.booleanValue
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let selection): return selection.booleanValue
      case ._ATTACHMENT_SLOT_DESIGN_TO_PLANNED(let selection): return selection.booleanValue
      case ._ATTACHMENT_SLOT_DESIGN_TO_REALIZED(let selection): return selection.booleanValue
      case ._ATTACHMENT_SLOT_ON_PRODUCT(let selection): return selection.booleanValue
      case ._ATTACHMENT_SLOT_PLANNED_TO_REALIZED(let selection): return selection.booleanValue
      case ._BREAKDOWN_ELEMENT_GROUP_ASSIGNMENT(let selection): return selection.booleanValue
      case ._BREAKDOWN_ELEMENT_USAGE(let selection): return selection.booleanValue
      case ._CERTIFICATION(let selection): return selection.booleanValue
      case ._CONFIGURATION_ITEM(let selection): return selection.booleanValue
      case ._CONTRACT(let selection): return selection.booleanValue
      case ._DOCUMENT_FILE(let selection): return selection.booleanValue
      case ._EVIDENCE(let selection): return selection.booleanValue
      case ._FINAL_SOLUTION(let selection): return selection.booleanValue
      case ._GROUP(let selection): return selection.booleanValue
      case ._INTERFACE_CONNECTION(let selection): return selection.booleanValue
      case ._INTERFACE_CONNECTOR_AS_PLANNED(let selection): return selection.booleanValue
      case ._INTERFACE_CONNECTOR_AS_REALIZED(let selection): return selection.booleanValue
      case ._INTERFACE_CONNECTOR_DEFINITION(let selection): return selection.booleanValue
      case ._INTERFACE_CONNECTOR_DESIGN(let selection): return selection.booleanValue
      case ._INTERFACE_CONNECTOR_OCCURRENCE(let selection): return selection.booleanValue
      case ._INTERFACE_CONNECTOR_VERSION(let selection): return selection.booleanValue
      case ._INTERFACE_DEFINITION_CONNECTION(let selection): return selection.booleanValue
      case ._INTERFACE_SPECIFICATION_DEFINITION(let selection): return selection.booleanValue
      case ._INTERFACE_SPECIFICATION_VERSION(let selection): return selection.booleanValue
      case ._ORGANIZATION(let selection): return selection.booleanValue
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.booleanValue
      case ._PERSON_AND_ORGANIZATION(let selection): return selection.booleanValue
      case ._PRODUCT(let selection): return selection.booleanValue
      case ._PRODUCT_CATEGORY(let selection): return selection.booleanValue
      case ._PRODUCT_CONCEPT(let selection): return selection.booleanValue
      case ._PRODUCT_DEFINITION(let selection): return selection.booleanValue
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.booleanValue
      case ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(let selection): return selection.booleanValue
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.booleanValue
      case ._PRODUCT_IN_ATTACHMENT_SLOT(let selection): return selection.booleanValue
      case ._SECURITY_CLASSIFICATION(let selection): return selection.booleanValue
      case ._STRUCTURED_MESSAGE(let selection): return selection.booleanValue
      case ._VALIDATION(let selection): return selection.booleanValue
      case ._VERIFICATION(let selection): return selection.booleanValue
      }
    }
    public var numberValue: SDAI.NUMBER? {
      switch self {
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let selection): return selection.numberValue
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let selection): return selection.numberValue
      case ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(let selection): return selection.numberValue
      case ._APPROVAL(let selection): return selection.numberValue
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.numberValue
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let selection): return selection.numberValue
      case ._ATTACHMENT_SLOT_DESIGN_TO_PLANNED(let selection): return selection.numberValue
      case ._ATTACHMENT_SLOT_DESIGN_TO_REALIZED(let selection): return selection.numberValue
      case ._ATTACHMENT_SLOT_ON_PRODUCT(let selection): return selection.numberValue
      case ._ATTACHMENT_SLOT_PLANNED_TO_REALIZED(let selection): return selection.numberValue
      case ._BREAKDOWN_ELEMENT_GROUP_ASSIGNMENT(let selection): return selection.numberValue
      case ._BREAKDOWN_ELEMENT_USAGE(let selection): return selection.numberValue
      case ._CERTIFICATION(let selection): return selection.numberValue
      case ._CONFIGURATION_ITEM(let selection): return selection.numberValue
      case ._CONTRACT(let selection): return selection.numberValue
      case ._DOCUMENT_FILE(let selection): return selection.numberValue
      case ._EVIDENCE(let selection): return selection.numberValue
      case ._FINAL_SOLUTION(let selection): return selection.numberValue
      case ._GROUP(let selection): return selection.numberValue
      case ._INTERFACE_CONNECTION(let selection): return selection.numberValue
      case ._INTERFACE_CONNECTOR_AS_PLANNED(let selection): return selection.numberValue
      case ._INTERFACE_CONNECTOR_AS_REALIZED(let selection): return selection.numberValue
      case ._INTERFACE_CONNECTOR_DEFINITION(let selection): return selection.numberValue
      case ._INTERFACE_CONNECTOR_DESIGN(let selection): return selection.numberValue
      case ._INTERFACE_CONNECTOR_OCCURRENCE(let selection): return selection.numberValue
      case ._INTERFACE_CONNECTOR_VERSION(let selection): return selection.numberValue
      case ._INTERFACE_DEFINITION_CONNECTION(let selection): return selection.numberValue
      case ._INTERFACE_SPECIFICATION_DEFINITION(let selection): return selection.numberValue
      case ._INTERFACE_SPECIFICATION_VERSION(let selection): return selection.numberValue
      case ._ORGANIZATION(let selection): return selection.numberValue
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.numberValue
      case ._PERSON_AND_ORGANIZATION(let selection): return selection.numberValue
      case ._PRODUCT(let selection): return selection.numberValue
      case ._PRODUCT_CATEGORY(let selection): return selection.numberValue
      case ._PRODUCT_CONCEPT(let selection): return selection.numberValue
      case ._PRODUCT_DEFINITION(let selection): return selection.numberValue
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.numberValue
      case ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(let selection): return selection.numberValue
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.numberValue
      case ._PRODUCT_IN_ATTACHMENT_SLOT(let selection): return selection.numberValue
      case ._SECURITY_CLASSIFICATION(let selection): return selection.numberValue
      case ._STRUCTURED_MESSAGE(let selection): return selection.numberValue
      case ._VALIDATION(let selection): return selection.numberValue
      case ._VERIFICATION(let selection): return selection.numberValue
      }
    }
    public var realValue: SDAI.REAL? {
      switch self {
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let selection): return selection.realValue
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let selection): return selection.realValue
      case ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(let selection): return selection.realValue
      case ._APPROVAL(let selection): return selection.realValue
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.realValue
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let selection): return selection.realValue
      case ._ATTACHMENT_SLOT_DESIGN_TO_PLANNED(let selection): return selection.realValue
      case ._ATTACHMENT_SLOT_DESIGN_TO_REALIZED(let selection): return selection.realValue
      case ._ATTACHMENT_SLOT_ON_PRODUCT(let selection): return selection.realValue
      case ._ATTACHMENT_SLOT_PLANNED_TO_REALIZED(let selection): return selection.realValue
      case ._BREAKDOWN_ELEMENT_GROUP_ASSIGNMENT(let selection): return selection.realValue
      case ._BREAKDOWN_ELEMENT_USAGE(let selection): return selection.realValue
      case ._CERTIFICATION(let selection): return selection.realValue
      case ._CONFIGURATION_ITEM(let selection): return selection.realValue
      case ._CONTRACT(let selection): return selection.realValue
      case ._DOCUMENT_FILE(let selection): return selection.realValue
      case ._EVIDENCE(let selection): return selection.realValue
      case ._FINAL_SOLUTION(let selection): return selection.realValue
      case ._GROUP(let selection): return selection.realValue
      case ._INTERFACE_CONNECTION(let selection): return selection.realValue
      case ._INTERFACE_CONNECTOR_AS_PLANNED(let selection): return selection.realValue
      case ._INTERFACE_CONNECTOR_AS_REALIZED(let selection): return selection.realValue
      case ._INTERFACE_CONNECTOR_DEFINITION(let selection): return selection.realValue
      case ._INTERFACE_CONNECTOR_DESIGN(let selection): return selection.realValue
      case ._INTERFACE_CONNECTOR_OCCURRENCE(let selection): return selection.realValue
      case ._INTERFACE_CONNECTOR_VERSION(let selection): return selection.realValue
      case ._INTERFACE_DEFINITION_CONNECTION(let selection): return selection.realValue
      case ._INTERFACE_SPECIFICATION_DEFINITION(let selection): return selection.realValue
      case ._INTERFACE_SPECIFICATION_VERSION(let selection): return selection.realValue
      case ._ORGANIZATION(let selection): return selection.realValue
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.realValue
      case ._PERSON_AND_ORGANIZATION(let selection): return selection.realValue
      case ._PRODUCT(let selection): return selection.realValue
      case ._PRODUCT_CATEGORY(let selection): return selection.realValue
      case ._PRODUCT_CONCEPT(let selection): return selection.realValue
      case ._PRODUCT_DEFINITION(let selection): return selection.realValue
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.realValue
      case ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(let selection): return selection.realValue
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.realValue
      case ._PRODUCT_IN_ATTACHMENT_SLOT(let selection): return selection.realValue
      case ._SECURITY_CLASSIFICATION(let selection): return selection.realValue
      case ._STRUCTURED_MESSAGE(let selection): return selection.realValue
      case ._VALIDATION(let selection): return selection.realValue
      case ._VERIFICATION(let selection): return selection.realValue
      }
    }
    public var integerValue: SDAI.INTEGER? {
      switch self {
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let selection): return selection.integerValue
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let selection): return selection.integerValue
      case ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(let selection): return selection.integerValue
      case ._APPROVAL(let selection): return selection.integerValue
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.integerValue
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let selection): return selection.integerValue
      case ._ATTACHMENT_SLOT_DESIGN_TO_PLANNED(let selection): return selection.integerValue
      case ._ATTACHMENT_SLOT_DESIGN_TO_REALIZED(let selection): return selection.integerValue
      case ._ATTACHMENT_SLOT_ON_PRODUCT(let selection): return selection.integerValue
      case ._ATTACHMENT_SLOT_PLANNED_TO_REALIZED(let selection): return selection.integerValue
      case ._BREAKDOWN_ELEMENT_GROUP_ASSIGNMENT(let selection): return selection.integerValue
      case ._BREAKDOWN_ELEMENT_USAGE(let selection): return selection.integerValue
      case ._CERTIFICATION(let selection): return selection.integerValue
      case ._CONFIGURATION_ITEM(let selection): return selection.integerValue
      case ._CONTRACT(let selection): return selection.integerValue
      case ._DOCUMENT_FILE(let selection): return selection.integerValue
      case ._EVIDENCE(let selection): return selection.integerValue
      case ._FINAL_SOLUTION(let selection): return selection.integerValue
      case ._GROUP(let selection): return selection.integerValue
      case ._INTERFACE_CONNECTION(let selection): return selection.integerValue
      case ._INTERFACE_CONNECTOR_AS_PLANNED(let selection): return selection.integerValue
      case ._INTERFACE_CONNECTOR_AS_REALIZED(let selection): return selection.integerValue
      case ._INTERFACE_CONNECTOR_DEFINITION(let selection): return selection.integerValue
      case ._INTERFACE_CONNECTOR_DESIGN(let selection): return selection.integerValue
      case ._INTERFACE_CONNECTOR_OCCURRENCE(let selection): return selection.integerValue
      case ._INTERFACE_CONNECTOR_VERSION(let selection): return selection.integerValue
      case ._INTERFACE_DEFINITION_CONNECTION(let selection): return selection.integerValue
      case ._INTERFACE_SPECIFICATION_DEFINITION(let selection): return selection.integerValue
      case ._INTERFACE_SPECIFICATION_VERSION(let selection): return selection.integerValue
      case ._ORGANIZATION(let selection): return selection.integerValue
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.integerValue
      case ._PERSON_AND_ORGANIZATION(let selection): return selection.integerValue
      case ._PRODUCT(let selection): return selection.integerValue
      case ._PRODUCT_CATEGORY(let selection): return selection.integerValue
      case ._PRODUCT_CONCEPT(let selection): return selection.integerValue
      case ._PRODUCT_DEFINITION(let selection): return selection.integerValue
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.integerValue
      case ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(let selection): return selection.integerValue
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.integerValue
      case ._PRODUCT_IN_ATTACHMENT_SLOT(let selection): return selection.integerValue
      case ._SECURITY_CLASSIFICATION(let selection): return selection.integerValue
      case ._STRUCTURED_MESSAGE(let selection): return selection.integerValue
      case ._VALIDATION(let selection): return selection.integerValue
      case ._VERIFICATION(let selection): return selection.integerValue
      }
    }
    public var genericEnumValue: SDAI.GenericEnumValue? {
      switch self {
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let selection): return selection.genericEnumValue
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let selection): return selection.genericEnumValue
      case ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(let selection): return selection.genericEnumValue
      case ._APPROVAL(let selection): return selection.genericEnumValue
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.genericEnumValue
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let selection): return selection.genericEnumValue
      case ._ATTACHMENT_SLOT_DESIGN_TO_PLANNED(let selection): return selection.genericEnumValue
      case ._ATTACHMENT_SLOT_DESIGN_TO_REALIZED(let selection): return selection.genericEnumValue
      case ._ATTACHMENT_SLOT_ON_PRODUCT(let selection): return selection.genericEnumValue
      case ._ATTACHMENT_SLOT_PLANNED_TO_REALIZED(let selection): return selection.genericEnumValue
      case ._BREAKDOWN_ELEMENT_GROUP_ASSIGNMENT(let selection): return selection.genericEnumValue
      case ._BREAKDOWN_ELEMENT_USAGE(let selection): return selection.genericEnumValue
      case ._CERTIFICATION(let selection): return selection.genericEnumValue
      case ._CONFIGURATION_ITEM(let selection): return selection.genericEnumValue
      case ._CONTRACT(let selection): return selection.genericEnumValue
      case ._DOCUMENT_FILE(let selection): return selection.genericEnumValue
      case ._EVIDENCE(let selection): return selection.genericEnumValue
      case ._FINAL_SOLUTION(let selection): return selection.genericEnumValue
      case ._GROUP(let selection): return selection.genericEnumValue
      case ._INTERFACE_CONNECTION(let selection): return selection.genericEnumValue
      case ._INTERFACE_CONNECTOR_AS_PLANNED(let selection): return selection.genericEnumValue
      case ._INTERFACE_CONNECTOR_AS_REALIZED(let selection): return selection.genericEnumValue
      case ._INTERFACE_CONNECTOR_DEFINITION(let selection): return selection.genericEnumValue
      case ._INTERFACE_CONNECTOR_DESIGN(let selection): return selection.genericEnumValue
      case ._INTERFACE_CONNECTOR_OCCURRENCE(let selection): return selection.genericEnumValue
      case ._INTERFACE_CONNECTOR_VERSION(let selection): return selection.genericEnumValue
      case ._INTERFACE_DEFINITION_CONNECTION(let selection): return selection.genericEnumValue
      case ._INTERFACE_SPECIFICATION_DEFINITION(let selection): return selection.genericEnumValue
      case ._INTERFACE_SPECIFICATION_VERSION(let selection): return selection.genericEnumValue
      case ._ORGANIZATION(let selection): return selection.genericEnumValue
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.genericEnumValue
      case ._PERSON_AND_ORGANIZATION(let selection): return selection.genericEnumValue
      case ._PRODUCT(let selection): return selection.genericEnumValue
      case ._PRODUCT_CATEGORY(let selection): return selection.genericEnumValue
      case ._PRODUCT_CONCEPT(let selection): return selection.genericEnumValue
      case ._PRODUCT_DEFINITION(let selection): return selection.genericEnumValue
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.genericEnumValue
      case ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(let selection): return selection.genericEnumValue
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.genericEnumValue
      case ._PRODUCT_IN_ATTACHMENT_SLOT(let selection): return selection.genericEnumValue
      case ._SECURITY_CLASSIFICATION(let selection): return selection.genericEnumValue
      case ._STRUCTURED_MESSAGE(let selection): return selection.genericEnumValue
      case ._VALIDATION(let selection): return selection.genericEnumValue
      case ._VERIFICATION(let selection): return selection.genericEnumValue
      }
    }
    public func arrayOptionalValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.ARRAY_OPTIONAL<ELEM>? {
      switch self {
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._APPROVAL(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._ATTACHMENT_SLOT_DESIGN_TO_PLANNED(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._ATTACHMENT_SLOT_DESIGN_TO_REALIZED(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._ATTACHMENT_SLOT_ON_PRODUCT(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._ATTACHMENT_SLOT_PLANNED_TO_REALIZED(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._BREAKDOWN_ELEMENT_GROUP_ASSIGNMENT(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._BREAKDOWN_ELEMENT_USAGE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._CERTIFICATION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._CONFIGURATION_ITEM(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._CONTRACT(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._DOCUMENT_FILE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._EVIDENCE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._FINAL_SOLUTION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._GROUP(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._INTERFACE_CONNECTION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._INTERFACE_CONNECTOR_AS_PLANNED(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._INTERFACE_CONNECTOR_AS_REALIZED(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._INTERFACE_CONNECTOR_DEFINITION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._INTERFACE_CONNECTOR_DESIGN(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._INTERFACE_CONNECTOR_OCCURRENCE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._INTERFACE_CONNECTOR_VERSION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._INTERFACE_DEFINITION_CONNECTION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._INTERFACE_SPECIFICATION_DEFINITION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._INTERFACE_SPECIFICATION_VERSION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._ORGANIZATION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PERSON_AND_ORGANIZATION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PRODUCT(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PRODUCT_CATEGORY(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PRODUCT_CONCEPT(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PRODUCT_DEFINITION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PRODUCT_IN_ATTACHMENT_SLOT(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._SECURITY_CLASSIFICATION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._STRUCTURED_MESSAGE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._VALIDATION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._VERIFICATION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      }
    }
    public func arrayValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.ARRAY<ELEM>? {
      switch self {
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let selection): return selection.arrayValue(elementType:elementType)
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let selection): return selection.arrayValue(elementType:elementType)
      case ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(let selection): return selection.arrayValue(elementType:elementType)
      case ._APPROVAL(let selection): return selection.arrayValue(elementType:elementType)
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.arrayValue(elementType:elementType)
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let selection): return selection.arrayValue(elementType:elementType)
      case ._ATTACHMENT_SLOT_DESIGN_TO_PLANNED(let selection): return selection.arrayValue(elementType:elementType)
      case ._ATTACHMENT_SLOT_DESIGN_TO_REALIZED(let selection): return selection.arrayValue(elementType:elementType)
      case ._ATTACHMENT_SLOT_ON_PRODUCT(let selection): return selection.arrayValue(elementType:elementType)
      case ._ATTACHMENT_SLOT_PLANNED_TO_REALIZED(let selection): return selection.arrayValue(elementType:elementType)
      case ._BREAKDOWN_ELEMENT_GROUP_ASSIGNMENT(let selection): return selection.arrayValue(elementType:elementType)
      case ._BREAKDOWN_ELEMENT_USAGE(let selection): return selection.arrayValue(elementType:elementType)
      case ._CERTIFICATION(let selection): return selection.arrayValue(elementType:elementType)
      case ._CONFIGURATION_ITEM(let selection): return selection.arrayValue(elementType:elementType)
      case ._CONTRACT(let selection): return selection.arrayValue(elementType:elementType)
      case ._DOCUMENT_FILE(let selection): return selection.arrayValue(elementType:elementType)
      case ._EVIDENCE(let selection): return selection.arrayValue(elementType:elementType)
      case ._FINAL_SOLUTION(let selection): return selection.arrayValue(elementType:elementType)
      case ._GROUP(let selection): return selection.arrayValue(elementType:elementType)
      case ._INTERFACE_CONNECTION(let selection): return selection.arrayValue(elementType:elementType)
      case ._INTERFACE_CONNECTOR_AS_PLANNED(let selection): return selection.arrayValue(elementType:elementType)
      case ._INTERFACE_CONNECTOR_AS_REALIZED(let selection): return selection.arrayValue(elementType:elementType)
      case ._INTERFACE_CONNECTOR_DEFINITION(let selection): return selection.arrayValue(elementType:elementType)
      case ._INTERFACE_CONNECTOR_DESIGN(let selection): return selection.arrayValue(elementType:elementType)
      case ._INTERFACE_CONNECTOR_OCCURRENCE(let selection): return selection.arrayValue(elementType:elementType)
      case ._INTERFACE_CONNECTOR_VERSION(let selection): return selection.arrayValue(elementType:elementType)
      case ._INTERFACE_DEFINITION_CONNECTION(let selection): return selection.arrayValue(elementType:elementType)
      case ._INTERFACE_SPECIFICATION_DEFINITION(let selection): return selection.arrayValue(elementType:elementType)
      case ._INTERFACE_SPECIFICATION_VERSION(let selection): return selection.arrayValue(elementType:elementType)
      case ._ORGANIZATION(let selection): return selection.arrayValue(elementType:elementType)
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.arrayValue(elementType:elementType)
      case ._PERSON_AND_ORGANIZATION(let selection): return selection.arrayValue(elementType:elementType)
      case ._PRODUCT(let selection): return selection.arrayValue(elementType:elementType)
      case ._PRODUCT_CATEGORY(let selection): return selection.arrayValue(elementType:elementType)
      case ._PRODUCT_CONCEPT(let selection): return selection.arrayValue(elementType:elementType)
      case ._PRODUCT_DEFINITION(let selection): return selection.arrayValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.arrayValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(let selection): return selection.arrayValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.arrayValue(elementType:elementType)
      case ._PRODUCT_IN_ATTACHMENT_SLOT(let selection): return selection.arrayValue(elementType:elementType)
      case ._SECURITY_CLASSIFICATION(let selection): return selection.arrayValue(elementType:elementType)
      case ._STRUCTURED_MESSAGE(let selection): return selection.arrayValue(elementType:elementType)
      case ._VALIDATION(let selection): return selection.arrayValue(elementType:elementType)
      case ._VERIFICATION(let selection): return selection.arrayValue(elementType:elementType)
      }
    }
    public func listValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.LIST<ELEM>? {
      switch self {
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let selection): return selection.listValue(elementType:elementType)
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let selection): return selection.listValue(elementType:elementType)
      case ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(let selection): return selection.listValue(elementType:elementType)
      case ._APPROVAL(let selection): return selection.listValue(elementType:elementType)
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.listValue(elementType:elementType)
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let selection): return selection.listValue(elementType:elementType)
      case ._ATTACHMENT_SLOT_DESIGN_TO_PLANNED(let selection): return selection.listValue(elementType:elementType)
      case ._ATTACHMENT_SLOT_DESIGN_TO_REALIZED(let selection): return selection.listValue(elementType:elementType)
      case ._ATTACHMENT_SLOT_ON_PRODUCT(let selection): return selection.listValue(elementType:elementType)
      case ._ATTACHMENT_SLOT_PLANNED_TO_REALIZED(let selection): return selection.listValue(elementType:elementType)
      case ._BREAKDOWN_ELEMENT_GROUP_ASSIGNMENT(let selection): return selection.listValue(elementType:elementType)
      case ._BREAKDOWN_ELEMENT_USAGE(let selection): return selection.listValue(elementType:elementType)
      case ._CERTIFICATION(let selection): return selection.listValue(elementType:elementType)
      case ._CONFIGURATION_ITEM(let selection): return selection.listValue(elementType:elementType)
      case ._CONTRACT(let selection): return selection.listValue(elementType:elementType)
      case ._DOCUMENT_FILE(let selection): return selection.listValue(elementType:elementType)
      case ._EVIDENCE(let selection): return selection.listValue(elementType:elementType)
      case ._FINAL_SOLUTION(let selection): return selection.listValue(elementType:elementType)
      case ._GROUP(let selection): return selection.listValue(elementType:elementType)
      case ._INTERFACE_CONNECTION(let selection): return selection.listValue(elementType:elementType)
      case ._INTERFACE_CONNECTOR_AS_PLANNED(let selection): return selection.listValue(elementType:elementType)
      case ._INTERFACE_CONNECTOR_AS_REALIZED(let selection): return selection.listValue(elementType:elementType)
      case ._INTERFACE_CONNECTOR_DEFINITION(let selection): return selection.listValue(elementType:elementType)
      case ._INTERFACE_CONNECTOR_DESIGN(let selection): return selection.listValue(elementType:elementType)
      case ._INTERFACE_CONNECTOR_OCCURRENCE(let selection): return selection.listValue(elementType:elementType)
      case ._INTERFACE_CONNECTOR_VERSION(let selection): return selection.listValue(elementType:elementType)
      case ._INTERFACE_DEFINITION_CONNECTION(let selection): return selection.listValue(elementType:elementType)
      case ._INTERFACE_SPECIFICATION_DEFINITION(let selection): return selection.listValue(elementType:elementType)
      case ._INTERFACE_SPECIFICATION_VERSION(let selection): return selection.listValue(elementType:elementType)
      case ._ORGANIZATION(let selection): return selection.listValue(elementType:elementType)
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.listValue(elementType:elementType)
      case ._PERSON_AND_ORGANIZATION(let selection): return selection.listValue(elementType:elementType)
      case ._PRODUCT(let selection): return selection.listValue(elementType:elementType)
      case ._PRODUCT_CATEGORY(let selection): return selection.listValue(elementType:elementType)
      case ._PRODUCT_CONCEPT(let selection): return selection.listValue(elementType:elementType)
      case ._PRODUCT_DEFINITION(let selection): return selection.listValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.listValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(let selection): return selection.listValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.listValue(elementType:elementType)
      case ._PRODUCT_IN_ATTACHMENT_SLOT(let selection): return selection.listValue(elementType:elementType)
      case ._SECURITY_CLASSIFICATION(let selection): return selection.listValue(elementType:elementType)
      case ._STRUCTURED_MESSAGE(let selection): return selection.listValue(elementType:elementType)
      case ._VALIDATION(let selection): return selection.listValue(elementType:elementType)
      case ._VERIFICATION(let selection): return selection.listValue(elementType:elementType)
      }
    }
    public func bagValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.BAG<ELEM>? {
      switch self {
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let selection): return selection.bagValue(elementType:elementType)
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let selection): return selection.bagValue(elementType:elementType)
      case ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(let selection): return selection.bagValue(elementType:elementType)
      case ._APPROVAL(let selection): return selection.bagValue(elementType:elementType)
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.bagValue(elementType:elementType)
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let selection): return selection.bagValue(elementType:elementType)
      case ._ATTACHMENT_SLOT_DESIGN_TO_PLANNED(let selection): return selection.bagValue(elementType:elementType)
      case ._ATTACHMENT_SLOT_DESIGN_TO_REALIZED(let selection): return selection.bagValue(elementType:elementType)
      case ._ATTACHMENT_SLOT_ON_PRODUCT(let selection): return selection.bagValue(elementType:elementType)
      case ._ATTACHMENT_SLOT_PLANNED_TO_REALIZED(let selection): return selection.bagValue(elementType:elementType)
      case ._BREAKDOWN_ELEMENT_GROUP_ASSIGNMENT(let selection): return selection.bagValue(elementType:elementType)
      case ._BREAKDOWN_ELEMENT_USAGE(let selection): return selection.bagValue(elementType:elementType)
      case ._CERTIFICATION(let selection): return selection.bagValue(elementType:elementType)
      case ._CONFIGURATION_ITEM(let selection): return selection.bagValue(elementType:elementType)
      case ._CONTRACT(let selection): return selection.bagValue(elementType:elementType)
      case ._DOCUMENT_FILE(let selection): return selection.bagValue(elementType:elementType)
      case ._EVIDENCE(let selection): return selection.bagValue(elementType:elementType)
      case ._FINAL_SOLUTION(let selection): return selection.bagValue(elementType:elementType)
      case ._GROUP(let selection): return selection.bagValue(elementType:elementType)
      case ._INTERFACE_CONNECTION(let selection): return selection.bagValue(elementType:elementType)
      case ._INTERFACE_CONNECTOR_AS_PLANNED(let selection): return selection.bagValue(elementType:elementType)
      case ._INTERFACE_CONNECTOR_AS_REALIZED(let selection): return selection.bagValue(elementType:elementType)
      case ._INTERFACE_CONNECTOR_DEFINITION(let selection): return selection.bagValue(elementType:elementType)
      case ._INTERFACE_CONNECTOR_DESIGN(let selection): return selection.bagValue(elementType:elementType)
      case ._INTERFACE_CONNECTOR_OCCURRENCE(let selection): return selection.bagValue(elementType:elementType)
      case ._INTERFACE_CONNECTOR_VERSION(let selection): return selection.bagValue(elementType:elementType)
      case ._INTERFACE_DEFINITION_CONNECTION(let selection): return selection.bagValue(elementType:elementType)
      case ._INTERFACE_SPECIFICATION_DEFINITION(let selection): return selection.bagValue(elementType:elementType)
      case ._INTERFACE_SPECIFICATION_VERSION(let selection): return selection.bagValue(elementType:elementType)
      case ._ORGANIZATION(let selection): return selection.bagValue(elementType:elementType)
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.bagValue(elementType:elementType)
      case ._PERSON_AND_ORGANIZATION(let selection): return selection.bagValue(elementType:elementType)
      case ._PRODUCT(let selection): return selection.bagValue(elementType:elementType)
      case ._PRODUCT_CATEGORY(let selection): return selection.bagValue(elementType:elementType)
      case ._PRODUCT_CONCEPT(let selection): return selection.bagValue(elementType:elementType)
      case ._PRODUCT_DEFINITION(let selection): return selection.bagValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.bagValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(let selection): return selection.bagValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.bagValue(elementType:elementType)
      case ._PRODUCT_IN_ATTACHMENT_SLOT(let selection): return selection.bagValue(elementType:elementType)
      case ._SECURITY_CLASSIFICATION(let selection): return selection.bagValue(elementType:elementType)
      case ._STRUCTURED_MESSAGE(let selection): return selection.bagValue(elementType:elementType)
      case ._VALIDATION(let selection): return selection.bagValue(elementType:elementType)
      case ._VERIFICATION(let selection): return selection.bagValue(elementType:elementType)
      }
    }
    public func setValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.SET<ELEM>? {
      switch self {
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let selection): return selection.setValue(elementType:elementType)
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let selection): return selection.setValue(elementType:elementType)
      case ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(let selection): return selection.setValue(elementType:elementType)
      case ._APPROVAL(let selection): return selection.setValue(elementType:elementType)
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.setValue(elementType:elementType)
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let selection): return selection.setValue(elementType:elementType)
      case ._ATTACHMENT_SLOT_DESIGN_TO_PLANNED(let selection): return selection.setValue(elementType:elementType)
      case ._ATTACHMENT_SLOT_DESIGN_TO_REALIZED(let selection): return selection.setValue(elementType:elementType)
      case ._ATTACHMENT_SLOT_ON_PRODUCT(let selection): return selection.setValue(elementType:elementType)
      case ._ATTACHMENT_SLOT_PLANNED_TO_REALIZED(let selection): return selection.setValue(elementType:elementType)
      case ._BREAKDOWN_ELEMENT_GROUP_ASSIGNMENT(let selection): return selection.setValue(elementType:elementType)
      case ._BREAKDOWN_ELEMENT_USAGE(let selection): return selection.setValue(elementType:elementType)
      case ._CERTIFICATION(let selection): return selection.setValue(elementType:elementType)
      case ._CONFIGURATION_ITEM(let selection): return selection.setValue(elementType:elementType)
      case ._CONTRACT(let selection): return selection.setValue(elementType:elementType)
      case ._DOCUMENT_FILE(let selection): return selection.setValue(elementType:elementType)
      case ._EVIDENCE(let selection): return selection.setValue(elementType:elementType)
      case ._FINAL_SOLUTION(let selection): return selection.setValue(elementType:elementType)
      case ._GROUP(let selection): return selection.setValue(elementType:elementType)
      case ._INTERFACE_CONNECTION(let selection): return selection.setValue(elementType:elementType)
      case ._INTERFACE_CONNECTOR_AS_PLANNED(let selection): return selection.setValue(elementType:elementType)
      case ._INTERFACE_CONNECTOR_AS_REALIZED(let selection): return selection.setValue(elementType:elementType)
      case ._INTERFACE_CONNECTOR_DEFINITION(let selection): return selection.setValue(elementType:elementType)
      case ._INTERFACE_CONNECTOR_DESIGN(let selection): return selection.setValue(elementType:elementType)
      case ._INTERFACE_CONNECTOR_OCCURRENCE(let selection): return selection.setValue(elementType:elementType)
      case ._INTERFACE_CONNECTOR_VERSION(let selection): return selection.setValue(elementType:elementType)
      case ._INTERFACE_DEFINITION_CONNECTION(let selection): return selection.setValue(elementType:elementType)
      case ._INTERFACE_SPECIFICATION_DEFINITION(let selection): return selection.setValue(elementType:elementType)
      case ._INTERFACE_SPECIFICATION_VERSION(let selection): return selection.setValue(elementType:elementType)
      case ._ORGANIZATION(let selection): return selection.setValue(elementType:elementType)
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.setValue(elementType:elementType)
      case ._PERSON_AND_ORGANIZATION(let selection): return selection.setValue(elementType:elementType)
      case ._PRODUCT(let selection): return selection.setValue(elementType:elementType)
      case ._PRODUCT_CATEGORY(let selection): return selection.setValue(elementType:elementType)
      case ._PRODUCT_CONCEPT(let selection): return selection.setValue(elementType:elementType)
      case ._PRODUCT_DEFINITION(let selection): return selection.setValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.setValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(let selection): return selection.setValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.setValue(elementType:elementType)
      case ._PRODUCT_IN_ATTACHMENT_SLOT(let selection): return selection.setValue(elementType:elementType)
      case ._SECURITY_CLASSIFICATION(let selection): return selection.setValue(elementType:elementType)
      case ._STRUCTURED_MESSAGE(let selection): return selection.setValue(elementType:elementType)
      case ._VALIDATION(let selection): return selection.setValue(elementType:elementType)
      case ._VERIFICATION(let selection): return selection.setValue(elementType:elementType)
      }
    }
    public func enumValue<ENUM:SDAIEnumerationType>(enumType:ENUM.Type) -> ENUM? {
      switch self {
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let selection): return selection.enumValue(enumType:enumType)
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let selection): return selection.enumValue(enumType:enumType)
      case ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(let selection): return selection.enumValue(enumType:enumType)
      case ._APPROVAL(let selection): return selection.enumValue(enumType:enumType)
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.enumValue(enumType:enumType)
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let selection): return selection.enumValue(enumType:enumType)
      case ._ATTACHMENT_SLOT_DESIGN_TO_PLANNED(let selection): return selection.enumValue(enumType:enumType)
      case ._ATTACHMENT_SLOT_DESIGN_TO_REALIZED(let selection): return selection.enumValue(enumType:enumType)
      case ._ATTACHMENT_SLOT_ON_PRODUCT(let selection): return selection.enumValue(enumType:enumType)
      case ._ATTACHMENT_SLOT_PLANNED_TO_REALIZED(let selection): return selection.enumValue(enumType:enumType)
      case ._BREAKDOWN_ELEMENT_GROUP_ASSIGNMENT(let selection): return selection.enumValue(enumType:enumType)
      case ._BREAKDOWN_ELEMENT_USAGE(let selection): return selection.enumValue(enumType:enumType)
      case ._CERTIFICATION(let selection): return selection.enumValue(enumType:enumType)
      case ._CONFIGURATION_ITEM(let selection): return selection.enumValue(enumType:enumType)
      case ._CONTRACT(let selection): return selection.enumValue(enumType:enumType)
      case ._DOCUMENT_FILE(let selection): return selection.enumValue(enumType:enumType)
      case ._EVIDENCE(let selection): return selection.enumValue(enumType:enumType)
      case ._FINAL_SOLUTION(let selection): return selection.enumValue(enumType:enumType)
      case ._GROUP(let selection): return selection.enumValue(enumType:enumType)
      case ._INTERFACE_CONNECTION(let selection): return selection.enumValue(enumType:enumType)
      case ._INTERFACE_CONNECTOR_AS_PLANNED(let selection): return selection.enumValue(enumType:enumType)
      case ._INTERFACE_CONNECTOR_AS_REALIZED(let selection): return selection.enumValue(enumType:enumType)
      case ._INTERFACE_CONNECTOR_DEFINITION(let selection): return selection.enumValue(enumType:enumType)
      case ._INTERFACE_CONNECTOR_DESIGN(let selection): return selection.enumValue(enumType:enumType)
      case ._INTERFACE_CONNECTOR_OCCURRENCE(let selection): return selection.enumValue(enumType:enumType)
      case ._INTERFACE_CONNECTOR_VERSION(let selection): return selection.enumValue(enumType:enumType)
      case ._INTERFACE_DEFINITION_CONNECTION(let selection): return selection.enumValue(enumType:enumType)
      case ._INTERFACE_SPECIFICATION_DEFINITION(let selection): return selection.enumValue(enumType:enumType)
      case ._INTERFACE_SPECIFICATION_VERSION(let selection): return selection.enumValue(enumType:enumType)
      case ._ORGANIZATION(let selection): return selection.enumValue(enumType:enumType)
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.enumValue(enumType:enumType)
      case ._PERSON_AND_ORGANIZATION(let selection): return selection.enumValue(enumType:enumType)
      case ._PRODUCT(let selection): return selection.enumValue(enumType:enumType)
      case ._PRODUCT_CATEGORY(let selection): return selection.enumValue(enumType:enumType)
      case ._PRODUCT_CONCEPT(let selection): return selection.enumValue(enumType:enumType)
      case ._PRODUCT_DEFINITION(let selection): return selection.enumValue(enumType:enumType)
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.enumValue(enumType:enumType)
      case ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(let selection): return selection.enumValue(enumType:enumType)
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.enumValue(enumType:enumType)
      case ._PRODUCT_IN_ATTACHMENT_SLOT(let selection): return selection.enumValue(enumType:enumType)
      case ._SECURITY_CLASSIFICATION(let selection): return selection.enumValue(enumType:enumType)
      case ._STRUCTURED_MESSAGE(let selection): return selection.enumValue(enumType:enumType)
      case ._VALIDATION(let selection): return selection.enumValue(enumType:enumType)
      case ._VERIFICATION(let selection): return selection.enumValue(enumType:enumType)
      }
    }

    //MARK: SDAIUnderlyingType
    public typealias FundamentalType = Self
    public static var typeName: String = 
      "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.STATE_OBSERVED_OF_ITEM"
    public var asFundamentalType: FundamentalType { return self }

    //MARK: SDAIObservableAggregateElement
    public var entityReferences: AnySequence<SDAI.EntityReference> {
      switch self {
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let entity): return entity.entityReferences
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let entity): return entity.entityReferences
      case ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(let entity): return entity.entityReferences
      case ._APPROVAL(let entity): return entity.entityReferences
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): return entity.entityReferences
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let entity): return entity.entityReferences
      case ._ATTACHMENT_SLOT_DESIGN_TO_PLANNED(let entity): return entity.entityReferences
      case ._ATTACHMENT_SLOT_DESIGN_TO_REALIZED(let entity): return entity.entityReferences
      case ._ATTACHMENT_SLOT_ON_PRODUCT(let entity): return entity.entityReferences
      case ._ATTACHMENT_SLOT_PLANNED_TO_REALIZED(let entity): return entity.entityReferences
      case ._BREAKDOWN_ELEMENT_GROUP_ASSIGNMENT(let entity): return entity.entityReferences
      case ._BREAKDOWN_ELEMENT_USAGE(let entity): return entity.entityReferences
      case ._CERTIFICATION(let entity): return entity.entityReferences
      case ._CONFIGURATION_ITEM(let entity): return entity.entityReferences
      case ._CONTRACT(let entity): return entity.entityReferences
      case ._DOCUMENT_FILE(let entity): return entity.entityReferences
      case ._EVIDENCE(let entity): return entity.entityReferences
      case ._FINAL_SOLUTION(let entity): return entity.entityReferences
      case ._GROUP(let entity): return entity.entityReferences
      case ._INTERFACE_CONNECTION(let entity): return entity.entityReferences
      case ._INTERFACE_CONNECTOR_AS_PLANNED(let entity): return entity.entityReferences
      case ._INTERFACE_CONNECTOR_AS_REALIZED(let entity): return entity.entityReferences
      case ._INTERFACE_CONNECTOR_DEFINITION(let entity): return entity.entityReferences
      case ._INTERFACE_CONNECTOR_DESIGN(let entity): return entity.entityReferences
      case ._INTERFACE_CONNECTOR_OCCURRENCE(let entity): return entity.entityReferences
      case ._INTERFACE_CONNECTOR_VERSION(let entity): return entity.entityReferences
      case ._INTERFACE_DEFINITION_CONNECTION(let entity): return entity.entityReferences
      case ._INTERFACE_SPECIFICATION_DEFINITION(let entity): return entity.entityReferences
      case ._INTERFACE_SPECIFICATION_VERSION(let entity): return entity.entityReferences
      case ._ORGANIZATION(let entity): return entity.entityReferences
      case ._ORGANIZATIONAL_PROJECT(let entity): return entity.entityReferences
      case ._PERSON_AND_ORGANIZATION(let entity): return entity.entityReferences
      case ._PRODUCT(let entity): return entity.entityReferences
      case ._PRODUCT_CATEGORY(let entity): return entity.entityReferences
      case ._PRODUCT_CONCEPT(let entity): return entity.entityReferences
      case ._PRODUCT_DEFINITION(let entity): return entity.entityReferences
      case ._PRODUCT_DEFINITION_FORMATION(let entity): return entity.entityReferences
      case ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(let entity): return entity.entityReferences
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.entityReferences
      case ._PRODUCT_IN_ATTACHMENT_SLOT(let entity): return entity.entityReferences
      case ._SECURITY_CLASSIFICATION(let entity): return entity.entityReferences
      case ._STRUCTURED_MESSAGE(let entity): return entity.entityReferences
      case ._VALIDATION(let entity): return entity.entityReferences
      case ._VERIFICATION(let entity): return entity.entityReferences
      }
    }

    public mutating func configure(with observer: SDAI.EntityReferenceObserver) {
      switch self {
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let entity): 
        entity.configure(with: observer)
        self = ._ALTERNATE_PRODUCT_RELATIONSHIP(entity)
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let entity): 
        entity.configure(with: observer)
        self = ._APPLIED_ACTION_METHOD_ASSIGNMENT(entity)
      case ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(let entity): 
        entity.configure(with: observer)
        self = ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(entity)
      case ._APPROVAL(let entity): 
        entity.configure(with: observer)
        self = ._APPROVAL(entity)
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): 
        entity.configure(with: observer)
        self = ._ASSEMBLY_COMPONENT_USAGE(entity)
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let entity): 
        entity.configure(with: observer)
        self = ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(entity)
      case ._ATTACHMENT_SLOT_DESIGN_TO_PLANNED(let entity): 
        entity.configure(with: observer)
        self = ._ATTACHMENT_SLOT_DESIGN_TO_PLANNED(entity)
      case ._ATTACHMENT_SLOT_DESIGN_TO_REALIZED(let entity): 
        entity.configure(with: observer)
        self = ._ATTACHMENT_SLOT_DESIGN_TO_REALIZED(entity)
      case ._ATTACHMENT_SLOT_ON_PRODUCT(let entity): 
        entity.configure(with: observer)
        self = ._ATTACHMENT_SLOT_ON_PRODUCT(entity)
      case ._ATTACHMENT_SLOT_PLANNED_TO_REALIZED(let entity): 
        entity.configure(with: observer)
        self = ._ATTACHMENT_SLOT_PLANNED_TO_REALIZED(entity)
      case ._BREAKDOWN_ELEMENT_GROUP_ASSIGNMENT(let entity): 
        entity.configure(with: observer)
        self = ._BREAKDOWN_ELEMENT_GROUP_ASSIGNMENT(entity)
      case ._BREAKDOWN_ELEMENT_USAGE(let entity): 
        entity.configure(with: observer)
        self = ._BREAKDOWN_ELEMENT_USAGE(entity)
      case ._CERTIFICATION(let entity): 
        entity.configure(with: observer)
        self = ._CERTIFICATION(entity)
      case ._CONFIGURATION_ITEM(let entity): 
        entity.configure(with: observer)
        self = ._CONFIGURATION_ITEM(entity)
      case ._CONTRACT(let entity): 
        entity.configure(with: observer)
        self = ._CONTRACT(entity)
      case ._DOCUMENT_FILE(let entity): 
        entity.configure(with: observer)
        self = ._DOCUMENT_FILE(entity)
      case ._EVIDENCE(let entity): 
        entity.configure(with: observer)
        self = ._EVIDENCE(entity)
      case ._FINAL_SOLUTION(let entity): 
        entity.configure(with: observer)
        self = ._FINAL_SOLUTION(entity)
      case ._GROUP(let entity): 
        entity.configure(with: observer)
        self = ._GROUP(entity)
      case ._INTERFACE_CONNECTION(let entity): 
        entity.configure(with: observer)
        self = ._INTERFACE_CONNECTION(entity)
      case ._INTERFACE_CONNECTOR_AS_PLANNED(let entity): 
        entity.configure(with: observer)
        self = ._INTERFACE_CONNECTOR_AS_PLANNED(entity)
      case ._INTERFACE_CONNECTOR_AS_REALIZED(let entity): 
        entity.configure(with: observer)
        self = ._INTERFACE_CONNECTOR_AS_REALIZED(entity)
      case ._INTERFACE_CONNECTOR_DEFINITION(let entity): 
        entity.configure(with: observer)
        self = ._INTERFACE_CONNECTOR_DEFINITION(entity)
      case ._INTERFACE_CONNECTOR_DESIGN(let entity): 
        entity.configure(with: observer)
        self = ._INTERFACE_CONNECTOR_DESIGN(entity)
      case ._INTERFACE_CONNECTOR_OCCURRENCE(let entity): 
        entity.configure(with: observer)
        self = ._INTERFACE_CONNECTOR_OCCURRENCE(entity)
      case ._INTERFACE_CONNECTOR_VERSION(let entity): 
        entity.configure(with: observer)
        self = ._INTERFACE_CONNECTOR_VERSION(entity)
      case ._INTERFACE_DEFINITION_CONNECTION(let entity): 
        entity.configure(with: observer)
        self = ._INTERFACE_DEFINITION_CONNECTION(entity)
      case ._INTERFACE_SPECIFICATION_DEFINITION(let entity): 
        entity.configure(with: observer)
        self = ._INTERFACE_SPECIFICATION_DEFINITION(entity)
      case ._INTERFACE_SPECIFICATION_VERSION(let entity): 
        entity.configure(with: observer)
        self = ._INTERFACE_SPECIFICATION_VERSION(entity)
      case ._ORGANIZATION(let entity): 
        entity.configure(with: observer)
        self = ._ORGANIZATION(entity)
      case ._ORGANIZATIONAL_PROJECT(let entity): 
        entity.configure(with: observer)
        self = ._ORGANIZATIONAL_PROJECT(entity)
      case ._PERSON_AND_ORGANIZATION(let entity): 
        entity.configure(with: observer)
        self = ._PERSON_AND_ORGANIZATION(entity)
      case ._PRODUCT(let entity): 
        entity.configure(with: observer)
        self = ._PRODUCT(entity)
      case ._PRODUCT_CATEGORY(let entity): 
        entity.configure(with: observer)
        self = ._PRODUCT_CATEGORY(entity)
      case ._PRODUCT_CONCEPT(let entity): 
        entity.configure(with: observer)
        self = ._PRODUCT_CONCEPT(entity)
      case ._PRODUCT_DEFINITION(let entity): 
        entity.configure(with: observer)
        self = ._PRODUCT_DEFINITION(entity)
      case ._PRODUCT_DEFINITION_FORMATION(let entity): 
        entity.configure(with: observer)
        self = ._PRODUCT_DEFINITION_FORMATION(entity)
      case ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(let entity): 
        entity.configure(with: observer)
        self = ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(entity)
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): 
        entity.configure(with: observer)
        self = ._PRODUCT_DEFINITION_RELATIONSHIP(entity)
      case ._PRODUCT_IN_ATTACHMENT_SLOT(let entity): 
        entity.configure(with: observer)
        self = ._PRODUCT_IN_ATTACHMENT_SLOT(entity)
      case ._SECURITY_CLASSIFICATION(let entity): 
        entity.configure(with: observer)
        self = ._SECURITY_CLASSIFICATION(entity)
      case ._STRUCTURED_MESSAGE(let entity): 
        entity.configure(with: observer)
        self = ._STRUCTURED_MESSAGE(entity)
      case ._VALIDATION(let entity): 
        entity.configure(with: observer)
        self = ._VALIDATION(entity)
      case ._VERIFICATION(let entity): 
        entity.configure(with: observer)
        self = ._VERIFICATION(entity)
      }
    }

    public mutating func teardownObserver() {
      switch self {
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let entity): 
        entity.teardownObserver()
        self = ._ALTERNATE_PRODUCT_RELATIONSHIP(entity)
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let entity): 
        entity.teardownObserver()
        self = ._APPLIED_ACTION_METHOD_ASSIGNMENT(entity)
      case ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(let entity): 
        entity.teardownObserver()
        self = ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(entity)
      case ._APPROVAL(let entity): 
        entity.teardownObserver()
        self = ._APPROVAL(entity)
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): 
        entity.teardownObserver()
        self = ._ASSEMBLY_COMPONENT_USAGE(entity)
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let entity): 
        entity.teardownObserver()
        self = ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(entity)
      case ._ATTACHMENT_SLOT_DESIGN_TO_PLANNED(let entity): 
        entity.teardownObserver()
        self = ._ATTACHMENT_SLOT_DESIGN_TO_PLANNED(entity)
      case ._ATTACHMENT_SLOT_DESIGN_TO_REALIZED(let entity): 
        entity.teardownObserver()
        self = ._ATTACHMENT_SLOT_DESIGN_TO_REALIZED(entity)
      case ._ATTACHMENT_SLOT_ON_PRODUCT(let entity): 
        entity.teardownObserver()
        self = ._ATTACHMENT_SLOT_ON_PRODUCT(entity)
      case ._ATTACHMENT_SLOT_PLANNED_TO_REALIZED(let entity): 
        entity.teardownObserver()
        self = ._ATTACHMENT_SLOT_PLANNED_TO_REALIZED(entity)
      case ._BREAKDOWN_ELEMENT_GROUP_ASSIGNMENT(let entity): 
        entity.teardownObserver()
        self = ._BREAKDOWN_ELEMENT_GROUP_ASSIGNMENT(entity)
      case ._BREAKDOWN_ELEMENT_USAGE(let entity): 
        entity.teardownObserver()
        self = ._BREAKDOWN_ELEMENT_USAGE(entity)
      case ._CERTIFICATION(let entity): 
        entity.teardownObserver()
        self = ._CERTIFICATION(entity)
      case ._CONFIGURATION_ITEM(let entity): 
        entity.teardownObserver()
        self = ._CONFIGURATION_ITEM(entity)
      case ._CONTRACT(let entity): 
        entity.teardownObserver()
        self = ._CONTRACT(entity)
      case ._DOCUMENT_FILE(let entity): 
        entity.teardownObserver()
        self = ._DOCUMENT_FILE(entity)
      case ._EVIDENCE(let entity): 
        entity.teardownObserver()
        self = ._EVIDENCE(entity)
      case ._FINAL_SOLUTION(let entity): 
        entity.teardownObserver()
        self = ._FINAL_SOLUTION(entity)
      case ._GROUP(let entity): 
        entity.teardownObserver()
        self = ._GROUP(entity)
      case ._INTERFACE_CONNECTION(let entity): 
        entity.teardownObserver()
        self = ._INTERFACE_CONNECTION(entity)
      case ._INTERFACE_CONNECTOR_AS_PLANNED(let entity): 
        entity.teardownObserver()
        self = ._INTERFACE_CONNECTOR_AS_PLANNED(entity)
      case ._INTERFACE_CONNECTOR_AS_REALIZED(let entity): 
        entity.teardownObserver()
        self = ._INTERFACE_CONNECTOR_AS_REALIZED(entity)
      case ._INTERFACE_CONNECTOR_DEFINITION(let entity): 
        entity.teardownObserver()
        self = ._INTERFACE_CONNECTOR_DEFINITION(entity)
      case ._INTERFACE_CONNECTOR_DESIGN(let entity): 
        entity.teardownObserver()
        self = ._INTERFACE_CONNECTOR_DESIGN(entity)
      case ._INTERFACE_CONNECTOR_OCCURRENCE(let entity): 
        entity.teardownObserver()
        self = ._INTERFACE_CONNECTOR_OCCURRENCE(entity)
      case ._INTERFACE_CONNECTOR_VERSION(let entity): 
        entity.teardownObserver()
        self = ._INTERFACE_CONNECTOR_VERSION(entity)
      case ._INTERFACE_DEFINITION_CONNECTION(let entity): 
        entity.teardownObserver()
        self = ._INTERFACE_DEFINITION_CONNECTION(entity)
      case ._INTERFACE_SPECIFICATION_DEFINITION(let entity): 
        entity.teardownObserver()
        self = ._INTERFACE_SPECIFICATION_DEFINITION(entity)
      case ._INTERFACE_SPECIFICATION_VERSION(let entity): 
        entity.teardownObserver()
        self = ._INTERFACE_SPECIFICATION_VERSION(entity)
      case ._ORGANIZATION(let entity): 
        entity.teardownObserver()
        self = ._ORGANIZATION(entity)
      case ._ORGANIZATIONAL_PROJECT(let entity): 
        entity.teardownObserver()
        self = ._ORGANIZATIONAL_PROJECT(entity)
      case ._PERSON_AND_ORGANIZATION(let entity): 
        entity.teardownObserver()
        self = ._PERSON_AND_ORGANIZATION(entity)
      case ._PRODUCT(let entity): 
        entity.teardownObserver()
        self = ._PRODUCT(entity)
      case ._PRODUCT_CATEGORY(let entity): 
        entity.teardownObserver()
        self = ._PRODUCT_CATEGORY(entity)
      case ._PRODUCT_CONCEPT(let entity): 
        entity.teardownObserver()
        self = ._PRODUCT_CONCEPT(entity)
      case ._PRODUCT_DEFINITION(let entity): 
        entity.teardownObserver()
        self = ._PRODUCT_DEFINITION(entity)
      case ._PRODUCT_DEFINITION_FORMATION(let entity): 
        entity.teardownObserver()
        self = ._PRODUCT_DEFINITION_FORMATION(entity)
      case ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(let entity): 
        entity.teardownObserver()
        self = ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(entity)
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): 
        entity.teardownObserver()
        self = ._PRODUCT_DEFINITION_RELATIONSHIP(entity)
      case ._PRODUCT_IN_ATTACHMENT_SLOT(let entity): 
        entity.teardownObserver()
        self = ._PRODUCT_IN_ATTACHMENT_SLOT(entity)
      case ._SECURITY_CLASSIFICATION(let entity): 
        entity.teardownObserver()
        self = ._SECURITY_CLASSIFICATION(entity)
      case ._STRUCTURED_MESSAGE(let entity): 
        entity.teardownObserver()
        self = ._STRUCTURED_MESSAGE(entity)
      case ._VALIDATION(let entity): 
        entity.teardownObserver()
        self = ._VALIDATION(entity)
      case ._VERIFICATION(let entity): 
        entity.teardownObserver()
        self = ._VERIFICATION(entity)
      }
    }

    //MARK: SDAIAggregationBehavior
    public var aggregationHiBound: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationHiIndex: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationLoBound: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationLoIndex: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationSize: Int? {
      switch self {
      default: return nil
      }
    }

    //MARK: WHERE RULE VALIDATION (SELECT TYPE)
    public static func validateWhereRules(instance:Self?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      var result: [SDAI.WhereLabel:SDAI.LOGICAL] = [:]
      switch instance {
      case ._ALTERNATE_PRODUCT_RELATIONSHIP(let selectValue): 
        result = eALTERNATE_PRODUCT_RELATIONSHIP.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\ALTERNATE_PRODUCT_RELATIONSHIP")
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let selectValue): 
        result = eAPPLIED_ACTION_METHOD_ASSIGNMENT.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\APPLIED_ACTION_METHOD_ASSIGNMENT")
      case ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(let selectValue): 
        result = eAPPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT")
      case ._APPROVAL(let selectValue): result = eAPPROVAL.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\APPROVAL")
      case ._ASSEMBLY_COMPONENT_USAGE(let selectValue): 
        result = eASSEMBLY_COMPONENT_USAGE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\ASSEMBLY_COMPONENT_USAGE")
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let selectValue): 
        result = eASSEMBLY_COMPONENT_USAGE_SUBSTITUTE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE")
      case ._ATTACHMENT_SLOT_DESIGN_TO_PLANNED(let selectValue): 
        result = eATTACHMENT_SLOT_DESIGN_TO_PLANNED.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\ATTACHMENT_SLOT_DESIGN_TO_PLANNED")
      case ._ATTACHMENT_SLOT_DESIGN_TO_REALIZED(let selectValue): 
        result = eATTACHMENT_SLOT_DESIGN_TO_REALIZED.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\ATTACHMENT_SLOT_DESIGN_TO_REALIZED")
      case ._ATTACHMENT_SLOT_ON_PRODUCT(let selectValue): 
        result = eATTACHMENT_SLOT_ON_PRODUCT.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\ATTACHMENT_SLOT_ON_PRODUCT")
      case ._ATTACHMENT_SLOT_PLANNED_TO_REALIZED(let selectValue): 
        result = eATTACHMENT_SLOT_PLANNED_TO_REALIZED.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\ATTACHMENT_SLOT_PLANNED_TO_REALIZED")
      case ._BREAKDOWN_ELEMENT_GROUP_ASSIGNMENT(let selectValue): 
        result = eBREAKDOWN_ELEMENT_GROUP_ASSIGNMENT.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\BREAKDOWN_ELEMENT_GROUP_ASSIGNMENT")
      case ._BREAKDOWN_ELEMENT_USAGE(let selectValue): 
        result = eBREAKDOWN_ELEMENT_USAGE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\BREAKDOWN_ELEMENT_USAGE")
      case ._CERTIFICATION(let selectValue): 
        result = eCERTIFICATION.validateWhereRules(instance:selectValue, prefix:prefix + "\\CERTIFICATION")
      case ._CONFIGURATION_ITEM(let selectValue): 
        result = eCONFIGURATION_ITEM.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\CONFIGURATION_ITEM")
      case ._CONTRACT(let selectValue): result = eCONTRACT.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\CONTRACT")
      case ._DOCUMENT_FILE(let selectValue): 
        result = eDOCUMENT_FILE.validateWhereRules(instance:selectValue, prefix:prefix + "\\DOCUMENT_FILE")
      case ._EVIDENCE(let selectValue): result = eEVIDENCE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\EVIDENCE")
      case ._FINAL_SOLUTION(let selectValue): 
        result = eFINAL_SOLUTION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\FINAL_SOLUTION")
      case ._GROUP(let selectValue): result = eGROUP.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\GROUP")
      case ._INTERFACE_CONNECTION(let selectValue): 
        result = eINTERFACE_CONNECTION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\INTERFACE_CONNECTION")
      case ._INTERFACE_CONNECTOR_AS_PLANNED(let selectValue): 
        result = eINTERFACE_CONNECTOR_AS_PLANNED.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\INTERFACE_CONNECTOR_AS_PLANNED")
      case ._INTERFACE_CONNECTOR_AS_REALIZED(let selectValue): 
        result = eINTERFACE_CONNECTOR_AS_REALIZED.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\INTERFACE_CONNECTOR_AS_REALIZED")
      case ._INTERFACE_CONNECTOR_DEFINITION(let selectValue): 
        result = eINTERFACE_CONNECTOR_DEFINITION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\INTERFACE_CONNECTOR_DEFINITION")
      case ._INTERFACE_CONNECTOR_DESIGN(let selectValue): 
        result = eINTERFACE_CONNECTOR_DESIGN.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\INTERFACE_CONNECTOR_DESIGN")
      case ._INTERFACE_CONNECTOR_OCCURRENCE(let selectValue): 
        result = eINTERFACE_CONNECTOR_OCCURRENCE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\INTERFACE_CONNECTOR_OCCURRENCE")
      case ._INTERFACE_CONNECTOR_VERSION(let selectValue): 
        result = eINTERFACE_CONNECTOR_VERSION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\INTERFACE_CONNECTOR_VERSION")
      case ._INTERFACE_DEFINITION_CONNECTION(let selectValue): 
        result = eINTERFACE_DEFINITION_CONNECTION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\INTERFACE_DEFINITION_CONNECTION")
      case ._INTERFACE_SPECIFICATION_DEFINITION(let selectValue): 
        result = eINTERFACE_SPECIFICATION_DEFINITION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\INTERFACE_SPECIFICATION_DEFINITION")
      case ._INTERFACE_SPECIFICATION_VERSION(let selectValue): 
        result = eINTERFACE_SPECIFICATION_VERSION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\INTERFACE_SPECIFICATION_VERSION")
      case ._ORGANIZATION(let selectValue): result = eORGANIZATION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\ORGANIZATION")
      case ._ORGANIZATIONAL_PROJECT(let selectValue): 
        result = eORGANIZATIONAL_PROJECT.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\ORGANIZATIONAL_PROJECT")
      case ._PERSON_AND_ORGANIZATION(let selectValue): 
        result = ePERSON_AND_ORGANIZATION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PERSON_AND_ORGANIZATION")
      case ._PRODUCT(let selectValue): result = ePRODUCT.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PRODUCT")
      case ._PRODUCT_CATEGORY(let selectValue): 
        result = ePRODUCT_CATEGORY.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PRODUCT_CATEGORY")
      case ._PRODUCT_CONCEPT(let selectValue): 
        result = ePRODUCT_CONCEPT.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PRODUCT_CONCEPT")
      case ._PRODUCT_DEFINITION(let selectValue): 
        result = ePRODUCT_DEFINITION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PRODUCT_DEFINITION")
      case ._PRODUCT_DEFINITION_FORMATION(let selectValue): 
        result = ePRODUCT_DEFINITION_FORMATION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PRODUCT_DEFINITION_FORMATION")
      case ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(let selectValue): 
        result = ePRODUCT_DEFINITION_GROUP_ASSIGNMENT.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PRODUCT_DEFINITION_GROUP_ASSIGNMENT")
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selectValue): 
        result = ePRODUCT_DEFINITION_RELATIONSHIP.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PRODUCT_DEFINITION_RELATIONSHIP")
      case ._PRODUCT_IN_ATTACHMENT_SLOT(let selectValue): 
        result = ePRODUCT_IN_ATTACHMENT_SLOT.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PRODUCT_IN_ATTACHMENT_SLOT")
      case ._SECURITY_CLASSIFICATION(let selectValue): 
        result = eSECURITY_CLASSIFICATION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\SECURITY_CLASSIFICATION")
      case ._STRUCTURED_MESSAGE(let selectValue): 
        result = eSTRUCTURED_MESSAGE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\STRUCTURED_MESSAGE")
      case ._VALIDATION(let selectValue): result = eVALIDATION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\VALIDATION")
      case ._VERIFICATION(let selectValue): result = eVERIFICATION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\VERIFICATION")
      case nil: break
      }

      return result
    }

  }

}


//MARK: - SELECT TYPE HIERARCHY
public protocol AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sSTATE_OBSERVED_OF_ITEM__type: 
  SDAISelectType {

  //MARK: GROUP REFERENCES
  var super_eATTACHMENT_SLOT_PLANNED_TO_REALIZED: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eATTACHMENT_SLOT_PLANNED_TO_REALIZED? { get }
  var super_eAPPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eAPPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT? { get }
  var super_eASSEMBLY_COMPONENT_USAGE_SUBSTITUTE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eASSEMBLY_COMPONENT_USAGE_SUBSTITUTE? { get }
  var super_ePRODUCT_DEFINITION_GROUP_ASSIGNMENT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_GROUP_ASSIGNMENT? { get }
  var super_eINTERFACE_DEFINITION_CONNECTION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eINTERFACE_DEFINITION_CONNECTION? { get }
  var super_eINTERFACE_CONNECTOR_AS_PLANNED: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eINTERFACE_CONNECTOR_AS_PLANNED? { get }
  var super_eINTERFACE_CONNECTOR_DESIGN: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eINTERFACE_CONNECTOR_DESIGN? { get }
  var super_ePRODUCT_IN_ATTACHMENT_SLOT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_IN_ATTACHMENT_SLOT? { get }
  var super_eCERTIFICATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCERTIFICATION? { get }
  var super_eIDENTIFICATION_ASSIGNMENT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eIDENTIFICATION_ASSIGNMENT? { get }
  var super_eAPPROVAL: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eAPPROVAL? { get }
  var super_eSTRUCTURED_MESSAGE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSTRUCTURED_MESSAGE? { get }
  var super_eVALIDATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eVALIDATION? { get }
  var super_ePRODUCT_CONCEPT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_CONCEPT? { get }
  var super_eGROUP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGROUP? { get }
  var super_eCONFIGURATION_ITEM: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONFIGURATION_ITEM? { get }
  var super_eINTERFACE_CONNECTOR_AS_REALIZED: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eINTERFACE_CONNECTOR_AS_REALIZED? { get }
  var super_eINTERFACE_CONNECTOR_VERSION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eINTERFACE_CONNECTOR_VERSION? { get }
  var super_eATTACHMENT_SLOT_DESIGN_TO_REALIZED: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eATTACHMENT_SLOT_DESIGN_TO_REALIZED? { get }
  var super_eGROUP_ASSIGNMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGROUP_ASSIGNMENT? { get }
  var super_ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP? { get }
  var super_eEXTERNAL_IDENTIFICATION_ASSIGNMENT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEXTERNAL_IDENTIFICATION_ASSIGNMENT? { get }
  var super_ePRODUCT_DEFINITION_USAGE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_USAGE? { get }
  var super_eORGANIZATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eORGANIZATION? { get }
  var super_eATTACHMENT_SLOT_DESIGN_TO_PLANNED: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eATTACHMENT_SLOT_DESIGN_TO_PLANNED? { get }
  var super_eAPPLIED_ACTION_METHOD_ASSIGNMENT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eAPPLIED_ACTION_METHOD_ASSIGNMENT? { get }
  var super_ePRODUCT_DEFINITION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION? { get }
  var super_eINTERFACE_CONNECTION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eINTERFACE_CONNECTION? { get }
  var super_eEVIDENCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEVIDENCE? { get }
  var super_eCONTRACT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONTRACT? { get }
  var super_eDOCUMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDOCUMENT? { get }
  var super_eACTION_METHOD_ASSIGNMENT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION_METHOD_ASSIGNMENT? { get }
  var super_ePRODUCT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT? { get }
  var super_eORGANIZATIONAL_PROJECT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eORGANIZATIONAL_PROJECT? { get }
  var super_eINTERFACE_SPECIFICATION_VERSION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eINTERFACE_SPECIFICATION_VERSION? { get }
  var super_eVERIFICATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eVERIFICATION? { get }
  var super_ePRODUCT_CATEGORY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_CATEGORY? { get }
  var super_ePRODUCT_DEFINITION_FORMATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_FORMATION? { get }
  var super_eFINAL_SOLUTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFINAL_SOLUTION? { get }
  var super_eASSEMBLY_COMPONENT_USAGE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eASSEMBLY_COMPONENT_USAGE? { get }
  var super_eBREAKDOWN_ELEMENT_GROUP_ASSIGNMENT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eBREAKDOWN_ELEMENT_GROUP_ASSIGNMENT? { get }
  var super_eATTACHMENT_SLOT_ON_PRODUCT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eATTACHMENT_SLOT_ON_PRODUCT? { get }
  var super_eBREAKDOWN_ELEMENT_USAGE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eBREAKDOWN_ELEMENT_USAGE? { get }
  var super_ePERSON_AND_ORGANIZATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePERSON_AND_ORGANIZATION? { get }
  var super_eINTERFACE_CONNECTOR_DEFINITION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eINTERFACE_CONNECTOR_DEFINITION? { get }
  var super_eALTERNATE_PRODUCT_RELATIONSHIP: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eALTERNATE_PRODUCT_RELATIONSHIP? { get }
  var super_eDOCUMENT_FILE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDOCUMENT_FILE? { get }
  var super_eSECURITY_CLASSIFICATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSECURITY_CLASSIFICATION? { get }
  var super_ePRODUCT_DEFINITION_RELATIONSHIP: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_RELATIONSHIP? { get }
  var super_eINTERFACE_CONNECTOR_OCCURRENCE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eINTERFACE_CONNECTOR_OCCURRENCE? { get }
  var super_eINTERFACE_SPECIFICATION_DEFINITION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eINTERFACE_SPECIFICATION_DEFINITION? { get }
  var super_eCHARACTERIZED_OBJECT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCHARACTERIZED_OBJECT? { get }

  //MARK: ENTITY ATTRIBUTE REFERENCES
  var DESCRIPTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT?  { get }
  var LEAF: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sPRODUCT_DEFINITION_OR_REFERENCE?  { get }
  var PRODUCTS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT>/*[1:nil]*/ )?  { get }
  var NEXT_USAGE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eNEXT_ASSEMBLY_USAGE_OCCURRENCE?  { get }
  var ROLE: SDAI.GENERIC_ENTITY?  { get }
  var REFERENCE_DESIGNATOR: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { get }
  var SUBSTITUTE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eASSEMBLY_COMPONENT_USAGE?  { get }
  var RELATED_PRODUCT_DEFINITION_FORMATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_FORMATION?  { get }
  var CONSTITUENT_AMOUNT: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sCHARACTERIZED_PRODUCT_COMPOSITION_VALUE>/*[1:nil]*/ )?  { get }
  var UPPER_USAGE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eASSEMBLY_COMPONENT_USAGE?  { get }
  var RANKING_RATIONALE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT?  { get }
  var QUANTITY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMEASURE_WITH_UNIT?  { get }
  var SECURITY_LEVEL: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSECURITY_CLASSIFICATION_LEVEL?  { get }
  var CLASS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { get }
  var DEFINED_VERSION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOLLECTION_VERSION?  { get }
  var OF_COLLECTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOLLECTION?  { get }
  var OF_SHAPE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMATED_PART_RELATIONSHIP?  { get }
  var RANKING: SDAI.INTEGER?  { get }
  var BASIS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT?  { get }
  var LEVEL: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { get }
  var MAKE_OR_BUY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nSOURCE?  { get }
  var PURPOSE: SDAI.STRING?  { get }
  var RELATING_PRODUCT_DEFINITION_FORMATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_FORMATION?  { get }
  var COMPOSITION_BASIS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { get }
  var DOCUMENTATION_IDS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDOCUMENT>/*[1:nil]*/ )?  { get }
  var ITEM_CONCEPT_FEATURE: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_CONCEPT_FEATURE_ASSOCIATION>/*[1:nil]*/ )?  { get }
  var ASSIGNED_ACTION_METHOD: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION_METHOD?  { get }
  var THE_PERSON: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePERSON?  { get }
  var SPECIFICATION: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION>/*[1:nil]*/ )?  { get }
  var ASSIGNED_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { get }
  var ITEM_CONCEPT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_CONCEPT?  { get }
  var KIND: SDAI.GENERIC_ENTITY?  { get }
  var DETERMINATION_METHOD: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT?  { get }
  var ROOT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION?  { get }
  var THE_ORGANIZATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eORGANIZATION?  { get }
  var BASE: SDAI.GENERIC_ENTITY?  { get }
  var RELATING_PRODUCT_DEFINITION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sPRODUCT_DEFINITION_OR_REFERENCE?  { get }
  var REPRESENTATION_TYPES: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDOCUMENT_REPRESENTATION_TYPE>/*[0:nil]*/ )?  { get }
  var SOURCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEXTERNAL_SOURCE?  { get }
  var ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { get }
  var ALTERNATE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT?  { get }
  var RESPONSIBLE_ORGANIZATIONS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eORGANIZATION>/*[1:
    nil]*/ )?  { get }
  var OF_PRODUCT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT?  { get }
  var PRODUCT_DEFINITION_OCCURRENCE_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { get }
  var MARKET_CONTEXT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_CONCEPT_CONTEXT?  { get }
  var ASSIGNED_GROUP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGROUP?  { get }
  var LOCATION: (SDAI.LIST_UNIQUE<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eNEXT_ASSEMBLY_USAGE_OCCURRENCE>/*[1:nil]*/ )?  { get }
  var RELATED_PRODUCT_DEFINITION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sPRODUCT_DEFINITION_OR_REFERENCE?  { get }
  var NAME: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { get }
  var FORMATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_FORMATION?  { get }
}

public protocol AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sSTATE_OBSERVED_OF_ITEM__subtype: 
  AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sSTATE_OBSERVED_OF_ITEM__type, SDAIDefinedType
where Supertype: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sSTATE_OBSERVED_OF_ITEM__type
{}

public extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sSTATE_OBSERVED_OF_ITEM__subtype {
  //MARK: CONSTRUCTORS
  init?(possiblyFrom complex: SDAI.ComplexEntity?) {
    self.init(fundamental: FundamentalType(possiblyFrom: complex))
  }

  init?<T: SDAIUnderlyingType>(possiblyFrom underlyingType: T?) {
    self.init(fundamental: FundamentalType(possiblyFrom: underlyingType))
  }

  init?<G: SDAIGenericType>(fromGeneric generic: G?) {
    self.init(fundamental: FundamentalType.convert(fromGeneric: generic))
  }

  //MARK: GROUP REFERENCES
  var super_eATTACHMENT_SLOT_PLANNED_TO_REALIZED: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eATTACHMENT_SLOT_PLANNED_TO_REALIZED? { rep.super_eATTACHMENT_SLOT_PLANNED_TO_REALIZED }
  var super_eAPPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eAPPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT? { rep.super_eAPPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT }
  var super_eASSEMBLY_COMPONENT_USAGE_SUBSTITUTE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eASSEMBLY_COMPONENT_USAGE_SUBSTITUTE? { rep.super_eASSEMBLY_COMPONENT_USAGE_SUBSTITUTE }
  var super_ePRODUCT_DEFINITION_GROUP_ASSIGNMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_GROUP_ASSIGNMENT? { rep.super_ePRODUCT_DEFINITION_GROUP_ASSIGNMENT }
  var super_eINTERFACE_DEFINITION_CONNECTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eINTERFACE_DEFINITION_CONNECTION? { rep.super_eINTERFACE_DEFINITION_CONNECTION }
  var super_eINTERFACE_CONNECTOR_AS_PLANNED: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eINTERFACE_CONNECTOR_AS_PLANNED? { rep.super_eINTERFACE_CONNECTOR_AS_PLANNED }
  var super_eINTERFACE_CONNECTOR_DESIGN: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eINTERFACE_CONNECTOR_DESIGN? { rep.super_eINTERFACE_CONNECTOR_DESIGN }
  var super_ePRODUCT_IN_ATTACHMENT_SLOT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_IN_ATTACHMENT_SLOT? { rep.super_ePRODUCT_IN_ATTACHMENT_SLOT }
  var super_eCERTIFICATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCERTIFICATION? { rep.super_eCERTIFICATION }
  var super_eIDENTIFICATION_ASSIGNMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eIDENTIFICATION_ASSIGNMENT? { rep.super_eIDENTIFICATION_ASSIGNMENT }
  var super_eAPPROVAL: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eAPPROVAL? { rep.super_eAPPROVAL }
  var super_eSTRUCTURED_MESSAGE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSTRUCTURED_MESSAGE? { rep.super_eSTRUCTURED_MESSAGE }
  var super_eVALIDATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eVALIDATION? { rep.super_eVALIDATION }
  var super_ePRODUCT_CONCEPT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_CONCEPT? { rep.super_ePRODUCT_CONCEPT }
  var super_eGROUP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGROUP? { rep.super_eGROUP }
  var super_eCONFIGURATION_ITEM: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONFIGURATION_ITEM? { rep.super_eCONFIGURATION_ITEM }
  var super_eINTERFACE_CONNECTOR_AS_REALIZED: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eINTERFACE_CONNECTOR_AS_REALIZED? { rep.super_eINTERFACE_CONNECTOR_AS_REALIZED }
  var super_eINTERFACE_CONNECTOR_VERSION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eINTERFACE_CONNECTOR_VERSION? { rep.super_eINTERFACE_CONNECTOR_VERSION }
  var super_eATTACHMENT_SLOT_DESIGN_TO_REALIZED: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eATTACHMENT_SLOT_DESIGN_TO_REALIZED? { rep.super_eATTACHMENT_SLOT_DESIGN_TO_REALIZED }
  var super_eGROUP_ASSIGNMENT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGROUP_ASSIGNMENT? { rep.super_eGROUP_ASSIGNMENT }
  var super_ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP? { rep.super_ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP }
  var super_eEXTERNAL_IDENTIFICATION_ASSIGNMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEXTERNAL_IDENTIFICATION_ASSIGNMENT? { rep.super_eEXTERNAL_IDENTIFICATION_ASSIGNMENT }
  var super_ePRODUCT_DEFINITION_USAGE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_USAGE? { rep.super_ePRODUCT_DEFINITION_USAGE }
  var super_eORGANIZATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eORGANIZATION? { rep.super_eORGANIZATION }
  var super_eATTACHMENT_SLOT_DESIGN_TO_PLANNED: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eATTACHMENT_SLOT_DESIGN_TO_PLANNED? { rep.super_eATTACHMENT_SLOT_DESIGN_TO_PLANNED }
  var super_eAPPLIED_ACTION_METHOD_ASSIGNMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eAPPLIED_ACTION_METHOD_ASSIGNMENT? { rep.super_eAPPLIED_ACTION_METHOD_ASSIGNMENT }
  var super_ePRODUCT_DEFINITION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION? { rep.super_ePRODUCT_DEFINITION }
  var super_eINTERFACE_CONNECTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eINTERFACE_CONNECTION? { rep.super_eINTERFACE_CONNECTION }
  var super_eEVIDENCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEVIDENCE? { rep.super_eEVIDENCE }
  var super_eCONTRACT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONTRACT? { rep.super_eCONTRACT }
  var super_eDOCUMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDOCUMENT? { rep.super_eDOCUMENT }
  var super_eACTION_METHOD_ASSIGNMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION_METHOD_ASSIGNMENT? { rep.super_eACTION_METHOD_ASSIGNMENT }
  var super_ePRODUCT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT? { rep.super_ePRODUCT }
  var super_eORGANIZATIONAL_PROJECT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eORGANIZATIONAL_PROJECT? { rep.super_eORGANIZATIONAL_PROJECT }
  var super_eINTERFACE_SPECIFICATION_VERSION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eINTERFACE_SPECIFICATION_VERSION? { rep.super_eINTERFACE_SPECIFICATION_VERSION }
  var super_eVERIFICATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eVERIFICATION? { rep.super_eVERIFICATION }
  var super_ePRODUCT_CATEGORY: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_CATEGORY? { rep.super_ePRODUCT_CATEGORY }
  var super_ePRODUCT_DEFINITION_FORMATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_FORMATION? { rep.super_ePRODUCT_DEFINITION_FORMATION }
  var super_eFINAL_SOLUTION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFINAL_SOLUTION? { rep.super_eFINAL_SOLUTION }
  var super_eASSEMBLY_COMPONENT_USAGE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eASSEMBLY_COMPONENT_USAGE? { rep.super_eASSEMBLY_COMPONENT_USAGE }
  var super_eBREAKDOWN_ELEMENT_GROUP_ASSIGNMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eBREAKDOWN_ELEMENT_GROUP_ASSIGNMENT? { rep.super_eBREAKDOWN_ELEMENT_GROUP_ASSIGNMENT }
  var super_eATTACHMENT_SLOT_ON_PRODUCT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eATTACHMENT_SLOT_ON_PRODUCT? { rep.super_eATTACHMENT_SLOT_ON_PRODUCT }
  var super_eBREAKDOWN_ELEMENT_USAGE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eBREAKDOWN_ELEMENT_USAGE? { rep.super_eBREAKDOWN_ELEMENT_USAGE }
  var super_ePERSON_AND_ORGANIZATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePERSON_AND_ORGANIZATION? { rep.super_ePERSON_AND_ORGANIZATION }
  var super_eINTERFACE_CONNECTOR_DEFINITION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eINTERFACE_CONNECTOR_DEFINITION? { rep.super_eINTERFACE_CONNECTOR_DEFINITION }
  var super_eALTERNATE_PRODUCT_RELATIONSHIP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eALTERNATE_PRODUCT_RELATIONSHIP? { rep.super_eALTERNATE_PRODUCT_RELATIONSHIP }
  var super_eDOCUMENT_FILE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDOCUMENT_FILE? { rep.super_eDOCUMENT_FILE }
  var super_eSECURITY_CLASSIFICATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSECURITY_CLASSIFICATION? { rep.super_eSECURITY_CLASSIFICATION }
  var super_ePRODUCT_DEFINITION_RELATIONSHIP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_RELATIONSHIP? { rep.super_ePRODUCT_DEFINITION_RELATIONSHIP }
  var super_eINTERFACE_CONNECTOR_OCCURRENCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eINTERFACE_CONNECTOR_OCCURRENCE? { rep.super_eINTERFACE_CONNECTOR_OCCURRENCE }
  var super_eINTERFACE_SPECIFICATION_DEFINITION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eINTERFACE_SPECIFICATION_DEFINITION? { rep.super_eINTERFACE_SPECIFICATION_DEFINITION }
  var super_eCHARACTERIZED_OBJECT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCHARACTERIZED_OBJECT? { rep.super_eCHARACTERIZED_OBJECT }

  //MARK: ENTITY ATTRIBUTE REFERENCES
  var DESCRIPTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT?  { rep.DESCRIPTION }
  var LEAF: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sPRODUCT_DEFINITION_OR_REFERENCE?  { rep.LEAF }
  var PRODUCTS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT>/*[1:nil]*/ )?  { rep.PRODUCTS }
  var NEXT_USAGE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eNEXT_ASSEMBLY_USAGE_OCCURRENCE?  { rep.NEXT_USAGE }
  var ROLE: SDAI.GENERIC_ENTITY?  { rep.ROLE }
  var REFERENCE_DESIGNATOR: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { rep.REFERENCE_DESIGNATOR }
  var SUBSTITUTE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eASSEMBLY_COMPONENT_USAGE?  { rep.SUBSTITUTE }
  var RELATED_PRODUCT_DEFINITION_FORMATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_FORMATION?  { rep.RELATED_PRODUCT_DEFINITION_FORMATION }
  var CONSTITUENT_AMOUNT: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sCHARACTERIZED_PRODUCT_COMPOSITION_VALUE>/*[1:nil]*/ )?  { rep.CONSTITUENT_AMOUNT }
  var UPPER_USAGE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eASSEMBLY_COMPONENT_USAGE?  { rep.UPPER_USAGE }
  var RANKING_RATIONALE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT?  { rep.RANKING_RATIONALE }
  var QUANTITY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMEASURE_WITH_UNIT?  { rep.QUANTITY }
  var SECURITY_LEVEL: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSECURITY_CLASSIFICATION_LEVEL?  { rep.SECURITY_LEVEL }
  var CLASS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { rep.CLASS }
  var DEFINED_VERSION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOLLECTION_VERSION?  { rep.DEFINED_VERSION }
  var OF_COLLECTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOLLECTION?  { rep.OF_COLLECTION }
  var OF_SHAPE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMATED_PART_RELATIONSHIP?  { rep.OF_SHAPE }
  var RANKING: SDAI.INTEGER?  { rep.RANKING }
  var BASIS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT?  { rep.BASIS }
  var LEVEL: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { rep.LEVEL }
  var MAKE_OR_BUY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nSOURCE?  { rep.MAKE_OR_BUY }
  var PURPOSE: SDAI.STRING?  { rep.PURPOSE }
  var RELATING_PRODUCT_DEFINITION_FORMATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_FORMATION?  { rep.RELATING_PRODUCT_DEFINITION_FORMATION }
  var COMPOSITION_BASIS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { rep.COMPOSITION_BASIS }
  var DOCUMENTATION_IDS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDOCUMENT>/*[1:nil]*/ )?  { rep.DOCUMENTATION_IDS }
  var ITEM_CONCEPT_FEATURE: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_CONCEPT_FEATURE_ASSOCIATION>/*[1:nil]*/ )?  { rep.ITEM_CONCEPT_FEATURE }
  var ASSIGNED_ACTION_METHOD: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION_METHOD?  { rep.ASSIGNED_ACTION_METHOD }
  var THE_PERSON: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePERSON?  { rep.THE_PERSON }
  var SPECIFICATION: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION>/*[1:nil]*/ )?  { rep.SPECIFICATION }
  var ASSIGNED_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { rep.ASSIGNED_ID }
  var ITEM_CONCEPT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_CONCEPT?  { rep.ITEM_CONCEPT }
  var KIND: SDAI.GENERIC_ENTITY?  { rep.KIND }
  var DETERMINATION_METHOD: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT?  { rep.DETERMINATION_METHOD }
  var ROOT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION?  { rep.ROOT }
  var THE_ORGANIZATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eORGANIZATION?  { rep.THE_ORGANIZATION }
  var BASE: SDAI.GENERIC_ENTITY?  { rep.BASE }
  var RELATING_PRODUCT_DEFINITION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sPRODUCT_DEFINITION_OR_REFERENCE?  { rep.RELATING_PRODUCT_DEFINITION }
  var REPRESENTATION_TYPES: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDOCUMENT_REPRESENTATION_TYPE>/*[0:nil]*/ )?  { rep.REPRESENTATION_TYPES }
  var SOURCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEXTERNAL_SOURCE?  { rep.SOURCE }
  var ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { rep.ID }
  var ALTERNATE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT?  { rep.ALTERNATE }
  var RESPONSIBLE_ORGANIZATIONS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eORGANIZATION>/*[1:
    nil]*/ )?  { rep.RESPONSIBLE_ORGANIZATIONS }
  var OF_PRODUCT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT?  { rep.OF_PRODUCT }
  var PRODUCT_DEFINITION_OCCURRENCE_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { rep.PRODUCT_DEFINITION_OCCURRENCE_ID }
  var MARKET_CONTEXT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_CONCEPT_CONTEXT?  { rep.MARKET_CONTEXT }
  var ASSIGNED_GROUP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGROUP?  { rep.ASSIGNED_GROUP }
  var LOCATION: (SDAI.LIST_UNIQUE<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eNEXT_ASSEMBLY_USAGE_OCCURRENCE>/*[1:nil]*/ )?  { rep.LOCATION }
  var RELATED_PRODUCT_DEFINITION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sPRODUCT_DEFINITION_OR_REFERENCE?  { rep.RELATED_PRODUCT_DEFINITION }
  var NAME: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { rep.NAME }
  var FORMATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_FORMATION?  { rep.FORMATION }
}

