/* file: surface_style_element_select.swift 	 generated: Sun Oct 31 15:32:10 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -TYPE DEFINITION in EXPRESS
/*
  TYPE surface_style_element_select = SELECT
    ( surface_style_boundary (*ENTITY*),
     surface_style_control_grid (*ENTITY*),
     surface_style_fill_area (*ENTITY*),
     surface_style_parameter_line (*ENTITY*),
     surface_style_rendering (*ENTITY*),
     surface_style_segmentation_curve (*ENTITY*),
     surface_style_silhouette (*ENTITY*) );
  END_TYPE; -- surface_style_element_select (line:5681 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES FOR SELECT
/*
  surface_style_boundary (*ENTITY*):
  ATTR:  users: SET [0 : ?] OF founded_item_select
  ATTR:  style_of_boundary: curve_or_render

  surface_style_control_grid (*ENTITY*):
  ATTR:  users: SET [0 : ?] OF founded_item_select
  ATTR:  style_of_control_grid: curve_or_render

  surface_style_fill_area (*ENTITY*):
  ATTR:  users: SET [0 : ?] OF founded_item_select
  ATTR:  fill_area: fill_area_style

  surface_style_parameter_line (*ENTITY*):
  ATTR:  users: SET [0 : ?] OF founded_item_select
  ATTR:  style_of_parameter_lines: curve_or_render
  ATTR:  direction_counts: SET [1 : 2] OF direction_count_select

  surface_style_rendering (*ENTITY*):
  ATTR:  properties: SET [1 : 2] OF rendering_properties_select
  ATTR:  rendering_method: shading_surface_method
  ATTR:  surface_colour: colour

  surface_style_segmentation_curve (*ENTITY*):
  ATTR:  users: SET [0 : ?] OF founded_item_select
  ATTR:  style_of_segmentation_curve: curve_or_render

  surface_style_silhouette (*ENTITY*):
  ATTR:  users: SET [0 : ?] OF founded_item_select
  ATTR:  style_of_silhouette: curve_or_render

*/

/** SELECT type
- EXPRESS:
```express
  TYPE surface_style_element_select = SELECT
    ( surface_style_boundary (*ENTITY*),
     surface_style_control_grid (*ENTITY*),
     surface_style_fill_area (*ENTITY*),
     surface_style_parameter_line (*ENTITY*),
     surface_style_rendering (*ENTITY*),
     surface_style_segmentation_curve (*ENTITY*),
     surface_style_silhouette (*ENTITY*) );
  END_TYPE; -- surface_style_element_select (line:5681 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public enum sSURFACE_STYLE_ELEMENT_SELECT : SDAIValue, AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sSURFACE_STYLE_ELEMENT_SELECT__type {

    /// SELECT case ``eSURFACE_STYLE_BOUNDARY`` (ENTITY) in ``sSURFACE_STYLE_ELEMENT_SELECT``
    case _SURFACE_STYLE_BOUNDARY(eSURFACE_STYLE_BOUNDARY)	// (ENTITY)

    /// SELECT case ``eSURFACE_STYLE_CONTROL_GRID`` (ENTITY) in ``sSURFACE_STYLE_ELEMENT_SELECT``
    case _SURFACE_STYLE_CONTROL_GRID(eSURFACE_STYLE_CONTROL_GRID)	// (ENTITY)

    /// SELECT case ``eSURFACE_STYLE_FILL_AREA`` (ENTITY) in ``sSURFACE_STYLE_ELEMENT_SELECT``
    case _SURFACE_STYLE_FILL_AREA(eSURFACE_STYLE_FILL_AREA)	// (ENTITY)

    /// SELECT case ``eSURFACE_STYLE_PARAMETER_LINE`` (ENTITY) in ``sSURFACE_STYLE_ELEMENT_SELECT``
    case _SURFACE_STYLE_PARAMETER_LINE(eSURFACE_STYLE_PARAMETER_LINE)	// (ENTITY)

    /// SELECT case ``eSURFACE_STYLE_RENDERING`` (ENTITY) in ``sSURFACE_STYLE_ELEMENT_SELECT``
    case _SURFACE_STYLE_RENDERING(eSURFACE_STYLE_RENDERING)	// (ENTITY)

    /// SELECT case ``eSURFACE_STYLE_SEGMENTATION_CURVE`` (ENTITY) in ``sSURFACE_STYLE_ELEMENT_SELECT``
    case _SURFACE_STYLE_SEGMENTATION_CURVE(eSURFACE_STYLE_SEGMENTATION_CURVE)	// (ENTITY)

    /// SELECT case ``eSURFACE_STYLE_SILHOUETTE`` (ENTITY) in ``sSURFACE_STYLE_ELEMENT_SELECT``
    case _SURFACE_STYLE_SILHOUETTE(eSURFACE_STYLE_SILHOUETTE)	// (ENTITY)

    //MARK: - CONSTRUCTORS
    public init(fundamental: FundamentalType) { self = fundamental }

    public init?<T: SDAIUnderlyingType>(possiblyFrom underlyingType: T?){
      return nil
    }

    public init?(possiblyFrom complex: SDAI.ComplexEntity?) {
      guard let complex = complex else { return nil }

      if let base = complex.entityReference(eSURFACE_STYLE_BOUNDARY.self) {self = ._SURFACE_STYLE_BOUNDARY(base) }
      else if let base = complex.entityReference(eSURFACE_STYLE_CONTROL_GRID.self) {self = ._SURFACE_STYLE_CONTROL_GRID(base) }
      else if let base = complex.entityReference(eSURFACE_STYLE_FILL_AREA.self) {self = ._SURFACE_STYLE_FILL_AREA(base) }
      else if let base = complex.entityReference(eSURFACE_STYLE_PARAMETER_LINE.self) {self = ._SURFACE_STYLE_PARAMETER_LINE(base) }
      else if let base = complex.entityReference(eSURFACE_STYLE_RENDERING.self) {self = ._SURFACE_STYLE_RENDERING(base) }
      else if let base = complex.entityReference(eSURFACE_STYLE_SEGMENTATION_CURVE.self) {self = ._SURFACE_STYLE_SEGMENTATION_CURVE(base) }
      else if let base = complex.entityReference(eSURFACE_STYLE_SILHOUETTE.self) {self = ._SURFACE_STYLE_SILHOUETTE(base) }
      else { return nil }
    }

    public init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let select = generic else { return nil }

      if let fundamental = select as? Self {
        self.init(fundamental: fundamental)
      }
      else if let base = eSURFACE_STYLE_BOUNDARY.convert(fromGeneric: select) {
        self = ._SURFACE_STYLE_BOUNDARY(base)
      }
      else if let base = eSURFACE_STYLE_CONTROL_GRID.convert(fromGeneric: select) {
        self = ._SURFACE_STYLE_CONTROL_GRID(base)
      }
      else if let base = eSURFACE_STYLE_FILL_AREA.convert(fromGeneric: select) {
        self = ._SURFACE_STYLE_FILL_AREA(base)
      }
      else if let base = eSURFACE_STYLE_PARAMETER_LINE.convert(fromGeneric: select) {
        self = ._SURFACE_STYLE_PARAMETER_LINE(base)
      }
      else if let base = eSURFACE_STYLE_RENDERING.convert(fromGeneric: select) {
        self = ._SURFACE_STYLE_RENDERING(base)
      }
      else if let base = eSURFACE_STYLE_SEGMENTATION_CURVE.convert(fromGeneric: select) {
        self = ._SURFACE_STYLE_SEGMENTATION_CURVE(base)
      }
      else if let base = eSURFACE_STYLE_SILHOUETTE.convert(fromGeneric: select) {
        self = ._SURFACE_STYLE_SILHOUETTE(base)
      }
      else { return nil }
    }

    // InitializableByP21Parameter
    public static var bareTypeName: String = "SURFACE_STYLE_ELEMENT_SELECT"

    public init?(p21typedParam: P21Decode.ExchangeStructure.TypedParameter, from exchangeStructure: P21Decode.ExchangeStructure) {
      guard let keyword = p21typedParam.keyword.asStandardKeyword else { exchangeStructure.error = "unexpected p21parameter(\(p21typedParam)) while resolving \(Self.bareTypeName) select value"; return nil }

      switch(keyword) {
      default:
        exchangeStructure.error = "unexpected p21parameter(\(p21typedParam)) while resolving \(Self.bareTypeName) select value"
        return nil
      }
    }

    public init?(p21untypedParam: P21Decode.ExchangeStructure.UntypedParameter, from exchangeStructure: P21Decode.ExchangeStructure) {
      switch p21untypedParam {
      case .rhsOccurenceName(let rhsname):
        switch rhsname {
        case .constantEntityName(let name):
          guard let entity = exchangeStructure.resolve(constantEntityName: name) else {exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) instance"); return nil }
          self.init(possiblyFrom: entity.complexEntity)

        case .entityInstanceName(let name):
          guard let complex = exchangeStructure.resolve(entityInstanceName: name) else {exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) instance"); return nil }
          self.init(possiblyFrom: complex)

        default:
          exchangeStructure.error = "unexpected p21parameter(\(p21untypedParam)) while resolving \(Self.bareTypeName) select instance"
          return nil
        }

      default:
        exchangeStructure.error = "unexpected p21parameter(\(p21untypedParam)) while resolving \(Self.bareTypeName) select instance"
        return nil
      }
    }

    public init?(p21omittedParamfrom exchangeStructure: P21Decode.ExchangeStructure) {
      return nil
    }


    //MARK: - ENTITY UNDERLYING TYPE REFERENCES
    public var super_eFOUNDED_ITEM: eFOUNDED_ITEM? {
      switch self {
      case ._SURFACE_STYLE_BOUNDARY(let entity): return entity.super_eFOUNDED_ITEM
      case ._SURFACE_STYLE_CONTROL_GRID(let entity): return entity.super_eFOUNDED_ITEM
      case ._SURFACE_STYLE_FILL_AREA(let entity): return entity.super_eFOUNDED_ITEM
      case ._SURFACE_STYLE_PARAMETER_LINE(let entity): return entity.super_eFOUNDED_ITEM
      case ._SURFACE_STYLE_SEGMENTATION_CURVE(let entity): return entity.super_eFOUNDED_ITEM
      case ._SURFACE_STYLE_SILHOUETTE(let entity): return entity.super_eFOUNDED_ITEM
      default: return nil
      }
    }

    public var super_eSURFACE_STYLE_RENDERING: eSURFACE_STYLE_RENDERING? {
      switch self {
      case ._SURFACE_STYLE_RENDERING(let entity): return entity
      default: return nil
      }
    }

    public var super_eSURFACE_STYLE_CONTROL_GRID: eSURFACE_STYLE_CONTROL_GRID? {
      switch self {
      case ._SURFACE_STYLE_CONTROL_GRID(let entity): return entity
      default: return nil
      }
    }

    public var super_eSURFACE_STYLE_PARAMETER_LINE: eSURFACE_STYLE_PARAMETER_LINE? {
      switch self {
      case ._SURFACE_STYLE_PARAMETER_LINE(let entity): return entity
      default: return nil
      }
    }

    public var super_eSURFACE_STYLE_SEGMENTATION_CURVE: eSURFACE_STYLE_SEGMENTATION_CURVE? {
      switch self {
      case ._SURFACE_STYLE_SEGMENTATION_CURVE(let entity): return entity
      default: return nil
      }
    }

    public var super_eSURFACE_STYLE_BOUNDARY: eSURFACE_STYLE_BOUNDARY? {
      switch self {
      case ._SURFACE_STYLE_BOUNDARY(let entity): return entity
      default: return nil
      }
    }

    public var super_eSURFACE_STYLE_FILL_AREA: eSURFACE_STYLE_FILL_AREA? {
      switch self {
      case ._SURFACE_STYLE_FILL_AREA(let entity): return entity
      default: return nil
      }
    }

    public var super_eSURFACE_STYLE_SILHOUETTE: eSURFACE_STYLE_SILHOUETTE? {
      switch self {
      case ._SURFACE_STYLE_SILHOUETTE(let entity): return entity
      default: return nil
      }
    }


    //MARK: - ENTITY ATTRIBUTE REFERENCES
    /// attribute of SELECT type ``sSURFACE_STYLE_ELEMENT_SELECT``
    /// - origin: ENTITY( ``eSURFACE_STYLE_RENDERING`` )
    public var PROPERTIES: (SDAI.SET<sRENDERING_PROPERTIES_SELECT>/*[1:2]*/ )?  {
      switch self {
      case ._SURFACE_STYLE_RENDERING(let entity): return entity.PROPERTIES
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSURFACE_STYLE_ELEMENT_SELECT``
    /// - origin: ENTITY( ``eSURFACE_STYLE_RENDERING`` )
    public var RENDERING_METHOD: nSHADING_SURFACE_METHOD?  {
      switch self {
      case ._SURFACE_STYLE_RENDERING(let entity): return entity.RENDERING_METHOD
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSURFACE_STYLE_ELEMENT_SELECT``
    /// - origin: ENTITY( ``eSURFACE_STYLE_BOUNDARY`` )
    /// - origin: ENTITY( ``eSURFACE_STYLE_CONTROL_GRID`` )
    /// - origin: ENTITY( ``eSURFACE_STYLE_FILL_AREA`` )
    /// - origin: ENTITY( ``eSURFACE_STYLE_PARAMETER_LINE`` )
    /// - origin: ENTITY( ``eSURFACE_STYLE_SEGMENTATION_CURVE`` )
    /// - origin: ENTITY( ``eSURFACE_STYLE_SILHOUETTE`` )
    public var USERS: (SDAI.SET<sFOUNDED_ITEM_SELECT>/*[0:nil]*/ )?  {
      switch self {
      case ._SURFACE_STYLE_BOUNDARY(let entity): return entity.USERS
      case ._SURFACE_STYLE_CONTROL_GRID(let entity): return entity.USERS
      case ._SURFACE_STYLE_FILL_AREA(let entity): return entity.USERS
      case ._SURFACE_STYLE_PARAMETER_LINE(let entity): return entity.USERS
      case ._SURFACE_STYLE_SEGMENTATION_CURVE(let entity): return entity.USERS
      case ._SURFACE_STYLE_SILHOUETTE(let entity): return entity.USERS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSURFACE_STYLE_ELEMENT_SELECT``
    /// - origin: ENTITY( ``eSURFACE_STYLE_SEGMENTATION_CURVE`` )
    public var STYLE_OF_SEGMENTATION_CURVE: sCURVE_OR_RENDER?  {
      switch self {
      case ._SURFACE_STYLE_SEGMENTATION_CURVE(let entity): return entity.STYLE_OF_SEGMENTATION_CURVE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSURFACE_STYLE_ELEMENT_SELECT``
    /// - origin: ENTITY( ``eSURFACE_STYLE_PARAMETER_LINE`` )
    public var STYLE_OF_PARAMETER_LINES: sCURVE_OR_RENDER?  {
      switch self {
      case ._SURFACE_STYLE_PARAMETER_LINE(let entity): return entity.STYLE_OF_PARAMETER_LINES
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSURFACE_STYLE_ELEMENT_SELECT``
    /// - origin: ENTITY( ``eSURFACE_STYLE_CONTROL_GRID`` )
    public var STYLE_OF_CONTROL_GRID: sCURVE_OR_RENDER?  {
      switch self {
      case ._SURFACE_STYLE_CONTROL_GRID(let entity): return entity.STYLE_OF_CONTROL_GRID
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSURFACE_STYLE_ELEMENT_SELECT``
    /// - origin: ENTITY( ``eSURFACE_STYLE_PARAMETER_LINE`` )
    public var DIRECTION_COUNTS: (SDAI.SET<sDIRECTION_COUNT_SELECT>/*[1:2]*/ )?  {
      switch self {
      case ._SURFACE_STYLE_PARAMETER_LINE(let entity): return entity.DIRECTION_COUNTS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSURFACE_STYLE_ELEMENT_SELECT``
    /// - origin: ENTITY( ``eSURFACE_STYLE_BOUNDARY`` )
    public var STYLE_OF_BOUNDARY: sCURVE_OR_RENDER?  {
      switch self {
      case ._SURFACE_STYLE_BOUNDARY(let entity): return entity.STYLE_OF_BOUNDARY
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSURFACE_STYLE_ELEMENT_SELECT``
    /// - origin: ENTITY( ``eSURFACE_STYLE_FILL_AREA`` )
    public var FILL_AREA: eFILL_AREA_STYLE?  {
      switch self {
      case ._SURFACE_STYLE_FILL_AREA(let entity): return entity.FILL_AREA
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSURFACE_STYLE_ELEMENT_SELECT``
    /// - origin: ENTITY( ``eSURFACE_STYLE_RENDERING`` )
    public var SURFACE_COLOUR: eCOLOUR?  {
      switch self {
      case ._SURFACE_STYLE_RENDERING(let entity): return entity.SURFACE_COLOUR
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSURFACE_STYLE_ELEMENT_SELECT``
    /// - origin: ENTITY( ``eSURFACE_STYLE_SILHOUETTE`` )
    public var STYLE_OF_SILHOUETTE: sCURVE_OR_RENDER?  {
      switch self {
      case ._SURFACE_STYLE_SILHOUETTE(let entity): return entity.STYLE_OF_SILHOUETTE
      default: return nil
      }
    }


    //MARK: - SDAIValue
    public func isValueEqual<T: SDAIValue>(to rhs: T) -> Bool {
      switch self {
      case ._SURFACE_STYLE_BOUNDARY(let selection): return selection.value.isValueEqual(to: rhs)
      case ._SURFACE_STYLE_CONTROL_GRID(let selection): return selection.value.isValueEqual(to: rhs)
      case ._SURFACE_STYLE_FILL_AREA(let selection): return selection.value.isValueEqual(to: rhs)
      case ._SURFACE_STYLE_PARAMETER_LINE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._SURFACE_STYLE_RENDERING(let selection): return selection.value.isValueEqual(to: rhs)
      case ._SURFACE_STYLE_SEGMENTATION_CURVE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._SURFACE_STYLE_SILHOUETTE(let selection): return selection.value.isValueEqual(to: rhs)
      }
    }

    public func isValueEqualOptionally<T: SDAIValue>(to rhs: T?) -> Bool? {
      switch self {
      case ._SURFACE_STYLE_BOUNDARY(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._SURFACE_STYLE_CONTROL_GRID(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._SURFACE_STYLE_FILL_AREA(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._SURFACE_STYLE_PARAMETER_LINE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._SURFACE_STYLE_RENDERING(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._SURFACE_STYLE_SEGMENTATION_CURVE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._SURFACE_STYLE_SILHOUETTE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      }
    }

    public func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      switch self {
      case ._SURFACE_STYLE_BOUNDARY(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._SURFACE_STYLE_CONTROL_GRID(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._SURFACE_STYLE_FILL_AREA(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._SURFACE_STYLE_PARAMETER_LINE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._SURFACE_STYLE_RENDERING(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._SURFACE_STYLE_SEGMENTATION_CURVE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._SURFACE_STYLE_SILHOUETTE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      }
    }

    public func isValueEqual<T: SDAIValue>(to rhs: T, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      switch self {
      case ._SURFACE_STYLE_BOUNDARY(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._SURFACE_STYLE_CONTROL_GRID(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._SURFACE_STYLE_FILL_AREA(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._SURFACE_STYLE_PARAMETER_LINE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._SURFACE_STYLE_RENDERING(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._SURFACE_STYLE_SEGMENTATION_CURVE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._SURFACE_STYLE_SILHOUETTE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      }
    }

    public func isValueEqualOptionally<T: SDAIValue>(to rhs: T?, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      switch self {
      case ._SURFACE_STYLE_BOUNDARY(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._SURFACE_STYLE_CONTROL_GRID(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._SURFACE_STYLE_FILL_AREA(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._SURFACE_STYLE_PARAMETER_LINE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._SURFACE_STYLE_RENDERING(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._SURFACE_STYLE_SEGMENTATION_CURVE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._SURFACE_STYLE_SILHOUETTE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      }
    }


    //MARK: SDAIGenericTypeBase
    public func copy() -> Self {
      switch self {
      case ._SURFACE_STYLE_BOUNDARY(let selection): return ._SURFACE_STYLE_BOUNDARY(selection.copy())
      case ._SURFACE_STYLE_CONTROL_GRID(let selection): return ._SURFACE_STYLE_CONTROL_GRID(selection.copy())
      case ._SURFACE_STYLE_FILL_AREA(let selection): return ._SURFACE_STYLE_FILL_AREA(selection.copy())
      case ._SURFACE_STYLE_PARAMETER_LINE(let selection): return ._SURFACE_STYLE_PARAMETER_LINE(selection.copy())
      case ._SURFACE_STYLE_RENDERING(let selection): return ._SURFACE_STYLE_RENDERING(selection.copy())
      case ._SURFACE_STYLE_SEGMENTATION_CURVE(let selection): return ._SURFACE_STYLE_SEGMENTATION_CURVE(selection.copy())
      case ._SURFACE_STYLE_SILHOUETTE(let selection): return ._SURFACE_STYLE_SILHOUETTE(selection.copy())
      }
    }

    //MARK: SDAIGenericType
    public var typeMembers: Set<SDAI.STRING> {
      var members: Set<SDAI.STRING> = [SDAI.STRING(Self.typeName)]
      switch self {
      case ._SURFACE_STYLE_BOUNDARY(let selection): members.formUnion(selection.typeMembers)
      case ._SURFACE_STYLE_CONTROL_GRID(let selection): members.formUnion(selection.typeMembers)
      case ._SURFACE_STYLE_FILL_AREA(let selection): members.formUnion(selection.typeMembers)
      case ._SURFACE_STYLE_PARAMETER_LINE(let selection): members.formUnion(selection.typeMembers)
      case ._SURFACE_STYLE_RENDERING(let selection): members.formUnion(selection.typeMembers)
      case ._SURFACE_STYLE_SEGMENTATION_CURVE(let selection): members.formUnion(selection.typeMembers)
      case ._SURFACE_STYLE_SILHOUETTE(let selection): members.formUnion(selection.typeMembers)
      }
      return members
    }

    public var entityReference: SDAI.EntityReference? {
      switch self {
      case ._SURFACE_STYLE_BOUNDARY(let selection): return selection.entityReference
      case ._SURFACE_STYLE_CONTROL_GRID(let selection): return selection.entityReference
      case ._SURFACE_STYLE_FILL_AREA(let selection): return selection.entityReference
      case ._SURFACE_STYLE_PARAMETER_LINE(let selection): return selection.entityReference
      case ._SURFACE_STYLE_RENDERING(let selection): return selection.entityReference
      case ._SURFACE_STYLE_SEGMENTATION_CURVE(let selection): return selection.entityReference
      case ._SURFACE_STYLE_SILHOUETTE(let selection): return selection.entityReference
      }
    }
    public var stringValue: SDAI.STRING? {
      switch self {
      case ._SURFACE_STYLE_BOUNDARY(let selection): return selection.stringValue
      case ._SURFACE_STYLE_CONTROL_GRID(let selection): return selection.stringValue
      case ._SURFACE_STYLE_FILL_AREA(let selection): return selection.stringValue
      case ._SURFACE_STYLE_PARAMETER_LINE(let selection): return selection.stringValue
      case ._SURFACE_STYLE_RENDERING(let selection): return selection.stringValue
      case ._SURFACE_STYLE_SEGMENTATION_CURVE(let selection): return selection.stringValue
      case ._SURFACE_STYLE_SILHOUETTE(let selection): return selection.stringValue
      }
    }
    public var binaryValue: SDAI.BINARY? {
      switch self {
      case ._SURFACE_STYLE_BOUNDARY(let selection): return selection.binaryValue
      case ._SURFACE_STYLE_CONTROL_GRID(let selection): return selection.binaryValue
      case ._SURFACE_STYLE_FILL_AREA(let selection): return selection.binaryValue
      case ._SURFACE_STYLE_PARAMETER_LINE(let selection): return selection.binaryValue
      case ._SURFACE_STYLE_RENDERING(let selection): return selection.binaryValue
      case ._SURFACE_STYLE_SEGMENTATION_CURVE(let selection): return selection.binaryValue
      case ._SURFACE_STYLE_SILHOUETTE(let selection): return selection.binaryValue
      }
    }
    public var logicalValue: SDAI.LOGICAL? {
      switch self {
      case ._SURFACE_STYLE_BOUNDARY(let selection): return selection.logicalValue
      case ._SURFACE_STYLE_CONTROL_GRID(let selection): return selection.logicalValue
      case ._SURFACE_STYLE_FILL_AREA(let selection): return selection.logicalValue
      case ._SURFACE_STYLE_PARAMETER_LINE(let selection): return selection.logicalValue
      case ._SURFACE_STYLE_RENDERING(let selection): return selection.logicalValue
      case ._SURFACE_STYLE_SEGMENTATION_CURVE(let selection): return selection.logicalValue
      case ._SURFACE_STYLE_SILHOUETTE(let selection): return selection.logicalValue
      }
    }
    public var booleanValue: SDAI.BOOLEAN? {
      switch self {
      case ._SURFACE_STYLE_BOUNDARY(let selection): return selection.booleanValue
      case ._SURFACE_STYLE_CONTROL_GRID(let selection): return selection.booleanValue
      case ._SURFACE_STYLE_FILL_AREA(let selection): return selection.booleanValue
      case ._SURFACE_STYLE_PARAMETER_LINE(let selection): return selection.booleanValue
      case ._SURFACE_STYLE_RENDERING(let selection): return selection.booleanValue
      case ._SURFACE_STYLE_SEGMENTATION_CURVE(let selection): return selection.booleanValue
      case ._SURFACE_STYLE_SILHOUETTE(let selection): return selection.booleanValue
      }
    }
    public var numberValue: SDAI.NUMBER? {
      switch self {
      case ._SURFACE_STYLE_BOUNDARY(let selection): return selection.numberValue
      case ._SURFACE_STYLE_CONTROL_GRID(let selection): return selection.numberValue
      case ._SURFACE_STYLE_FILL_AREA(let selection): return selection.numberValue
      case ._SURFACE_STYLE_PARAMETER_LINE(let selection): return selection.numberValue
      case ._SURFACE_STYLE_RENDERING(let selection): return selection.numberValue
      case ._SURFACE_STYLE_SEGMENTATION_CURVE(let selection): return selection.numberValue
      case ._SURFACE_STYLE_SILHOUETTE(let selection): return selection.numberValue
      }
    }
    public var realValue: SDAI.REAL? {
      switch self {
      case ._SURFACE_STYLE_BOUNDARY(let selection): return selection.realValue
      case ._SURFACE_STYLE_CONTROL_GRID(let selection): return selection.realValue
      case ._SURFACE_STYLE_FILL_AREA(let selection): return selection.realValue
      case ._SURFACE_STYLE_PARAMETER_LINE(let selection): return selection.realValue
      case ._SURFACE_STYLE_RENDERING(let selection): return selection.realValue
      case ._SURFACE_STYLE_SEGMENTATION_CURVE(let selection): return selection.realValue
      case ._SURFACE_STYLE_SILHOUETTE(let selection): return selection.realValue
      }
    }
    public var integerValue: SDAI.INTEGER? {
      switch self {
      case ._SURFACE_STYLE_BOUNDARY(let selection): return selection.integerValue
      case ._SURFACE_STYLE_CONTROL_GRID(let selection): return selection.integerValue
      case ._SURFACE_STYLE_FILL_AREA(let selection): return selection.integerValue
      case ._SURFACE_STYLE_PARAMETER_LINE(let selection): return selection.integerValue
      case ._SURFACE_STYLE_RENDERING(let selection): return selection.integerValue
      case ._SURFACE_STYLE_SEGMENTATION_CURVE(let selection): return selection.integerValue
      case ._SURFACE_STYLE_SILHOUETTE(let selection): return selection.integerValue
      }
    }
    public var genericEnumValue: SDAI.GenericEnumValue? {
      switch self {
      case ._SURFACE_STYLE_BOUNDARY(let selection): return selection.genericEnumValue
      case ._SURFACE_STYLE_CONTROL_GRID(let selection): return selection.genericEnumValue
      case ._SURFACE_STYLE_FILL_AREA(let selection): return selection.genericEnumValue
      case ._SURFACE_STYLE_PARAMETER_LINE(let selection): return selection.genericEnumValue
      case ._SURFACE_STYLE_RENDERING(let selection): return selection.genericEnumValue
      case ._SURFACE_STYLE_SEGMENTATION_CURVE(let selection): return selection.genericEnumValue
      case ._SURFACE_STYLE_SILHOUETTE(let selection): return selection.genericEnumValue
      }
    }
    public func arrayOptionalValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.ARRAY_OPTIONAL<ELEM>? {
      switch self {
      case ._SURFACE_STYLE_BOUNDARY(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._SURFACE_STYLE_CONTROL_GRID(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._SURFACE_STYLE_FILL_AREA(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._SURFACE_STYLE_PARAMETER_LINE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._SURFACE_STYLE_RENDERING(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._SURFACE_STYLE_SEGMENTATION_CURVE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._SURFACE_STYLE_SILHOUETTE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      }
    }
    public func arrayValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.ARRAY<ELEM>? {
      switch self {
      case ._SURFACE_STYLE_BOUNDARY(let selection): return selection.arrayValue(elementType:elementType)
      case ._SURFACE_STYLE_CONTROL_GRID(let selection): return selection.arrayValue(elementType:elementType)
      case ._SURFACE_STYLE_FILL_AREA(let selection): return selection.arrayValue(elementType:elementType)
      case ._SURFACE_STYLE_PARAMETER_LINE(let selection): return selection.arrayValue(elementType:elementType)
      case ._SURFACE_STYLE_RENDERING(let selection): return selection.arrayValue(elementType:elementType)
      case ._SURFACE_STYLE_SEGMENTATION_CURVE(let selection): return selection.arrayValue(elementType:elementType)
      case ._SURFACE_STYLE_SILHOUETTE(let selection): return selection.arrayValue(elementType:elementType)
      }
    }
    public func listValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.LIST<ELEM>? {
      switch self {
      case ._SURFACE_STYLE_BOUNDARY(let selection): return selection.listValue(elementType:elementType)
      case ._SURFACE_STYLE_CONTROL_GRID(let selection): return selection.listValue(elementType:elementType)
      case ._SURFACE_STYLE_FILL_AREA(let selection): return selection.listValue(elementType:elementType)
      case ._SURFACE_STYLE_PARAMETER_LINE(let selection): return selection.listValue(elementType:elementType)
      case ._SURFACE_STYLE_RENDERING(let selection): return selection.listValue(elementType:elementType)
      case ._SURFACE_STYLE_SEGMENTATION_CURVE(let selection): return selection.listValue(elementType:elementType)
      case ._SURFACE_STYLE_SILHOUETTE(let selection): return selection.listValue(elementType:elementType)
      }
    }
    public func bagValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.BAG<ELEM>? {
      switch self {
      case ._SURFACE_STYLE_BOUNDARY(let selection): return selection.bagValue(elementType:elementType)
      case ._SURFACE_STYLE_CONTROL_GRID(let selection): return selection.bagValue(elementType:elementType)
      case ._SURFACE_STYLE_FILL_AREA(let selection): return selection.bagValue(elementType:elementType)
      case ._SURFACE_STYLE_PARAMETER_LINE(let selection): return selection.bagValue(elementType:elementType)
      case ._SURFACE_STYLE_RENDERING(let selection): return selection.bagValue(elementType:elementType)
      case ._SURFACE_STYLE_SEGMENTATION_CURVE(let selection): return selection.bagValue(elementType:elementType)
      case ._SURFACE_STYLE_SILHOUETTE(let selection): return selection.bagValue(elementType:elementType)
      }
    }
    public func setValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.SET<ELEM>? {
      switch self {
      case ._SURFACE_STYLE_BOUNDARY(let selection): return selection.setValue(elementType:elementType)
      case ._SURFACE_STYLE_CONTROL_GRID(let selection): return selection.setValue(elementType:elementType)
      case ._SURFACE_STYLE_FILL_AREA(let selection): return selection.setValue(elementType:elementType)
      case ._SURFACE_STYLE_PARAMETER_LINE(let selection): return selection.setValue(elementType:elementType)
      case ._SURFACE_STYLE_RENDERING(let selection): return selection.setValue(elementType:elementType)
      case ._SURFACE_STYLE_SEGMENTATION_CURVE(let selection): return selection.setValue(elementType:elementType)
      case ._SURFACE_STYLE_SILHOUETTE(let selection): return selection.setValue(elementType:elementType)
      }
    }
    public func enumValue<ENUM:SDAIEnumerationType>(enumType:ENUM.Type) -> ENUM? {
      switch self {
      case ._SURFACE_STYLE_BOUNDARY(let selection): return selection.enumValue(enumType:enumType)
      case ._SURFACE_STYLE_CONTROL_GRID(let selection): return selection.enumValue(enumType:enumType)
      case ._SURFACE_STYLE_FILL_AREA(let selection): return selection.enumValue(enumType:enumType)
      case ._SURFACE_STYLE_PARAMETER_LINE(let selection): return selection.enumValue(enumType:enumType)
      case ._SURFACE_STYLE_RENDERING(let selection): return selection.enumValue(enumType:enumType)
      case ._SURFACE_STYLE_SEGMENTATION_CURVE(let selection): return selection.enumValue(enumType:enumType)
      case ._SURFACE_STYLE_SILHOUETTE(let selection): return selection.enumValue(enumType:enumType)
      }
    }

    //MARK: SDAIUnderlyingType
    public typealias FundamentalType = Self
    public static var typeName: String = 
      "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SURFACE_STYLE_ELEMENT_SELECT"
    public var asFundamentalType: FundamentalType { return self }

    //MARK: SDAIObservableAggregateElement
    public var entityReferences: AnySequence<SDAI.EntityReference> {
      switch self {
      case ._SURFACE_STYLE_BOUNDARY(let entity): return entity.entityReferences
      case ._SURFACE_STYLE_CONTROL_GRID(let entity): return entity.entityReferences
      case ._SURFACE_STYLE_FILL_AREA(let entity): return entity.entityReferences
      case ._SURFACE_STYLE_PARAMETER_LINE(let entity): return entity.entityReferences
      case ._SURFACE_STYLE_RENDERING(let entity): return entity.entityReferences
      case ._SURFACE_STYLE_SEGMENTATION_CURVE(let entity): return entity.entityReferences
      case ._SURFACE_STYLE_SILHOUETTE(let entity): return entity.entityReferences
      }
    }

    public mutating func configure(with observer: SDAI.EntityReferenceObserver) {
      switch self {
      case ._SURFACE_STYLE_BOUNDARY(let entity): 
        entity.configure(with: observer)
        self = ._SURFACE_STYLE_BOUNDARY(entity)
      case ._SURFACE_STYLE_CONTROL_GRID(let entity): 
        entity.configure(with: observer)
        self = ._SURFACE_STYLE_CONTROL_GRID(entity)
      case ._SURFACE_STYLE_FILL_AREA(let entity): 
        entity.configure(with: observer)
        self = ._SURFACE_STYLE_FILL_AREA(entity)
      case ._SURFACE_STYLE_PARAMETER_LINE(let entity): 
        entity.configure(with: observer)
        self = ._SURFACE_STYLE_PARAMETER_LINE(entity)
      case ._SURFACE_STYLE_RENDERING(let entity): 
        entity.configure(with: observer)
        self = ._SURFACE_STYLE_RENDERING(entity)
      case ._SURFACE_STYLE_SEGMENTATION_CURVE(let entity): 
        entity.configure(with: observer)
        self = ._SURFACE_STYLE_SEGMENTATION_CURVE(entity)
      case ._SURFACE_STYLE_SILHOUETTE(let entity): 
        entity.configure(with: observer)
        self = ._SURFACE_STYLE_SILHOUETTE(entity)
      }
    }

    public mutating func teardownObserver() {
      switch self {
      case ._SURFACE_STYLE_BOUNDARY(let entity): 
        entity.teardownObserver()
        self = ._SURFACE_STYLE_BOUNDARY(entity)
      case ._SURFACE_STYLE_CONTROL_GRID(let entity): 
        entity.teardownObserver()
        self = ._SURFACE_STYLE_CONTROL_GRID(entity)
      case ._SURFACE_STYLE_FILL_AREA(let entity): 
        entity.teardownObserver()
        self = ._SURFACE_STYLE_FILL_AREA(entity)
      case ._SURFACE_STYLE_PARAMETER_LINE(let entity): 
        entity.teardownObserver()
        self = ._SURFACE_STYLE_PARAMETER_LINE(entity)
      case ._SURFACE_STYLE_RENDERING(let entity): 
        entity.teardownObserver()
        self = ._SURFACE_STYLE_RENDERING(entity)
      case ._SURFACE_STYLE_SEGMENTATION_CURVE(let entity): 
        entity.teardownObserver()
        self = ._SURFACE_STYLE_SEGMENTATION_CURVE(entity)
      case ._SURFACE_STYLE_SILHOUETTE(let entity): 
        entity.teardownObserver()
        self = ._SURFACE_STYLE_SILHOUETTE(entity)
      }
    }

    //MARK: SDAIAggregationBehavior
    public var aggregationHiBound: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationHiIndex: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationLoBound: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationLoIndex: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationSize: Int? {
      switch self {
      default: return nil
      }
    }

    //MARK: WHERE RULE VALIDATION (SELECT TYPE)
    public static func validateWhereRules(instance:Self?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      var result: [SDAI.WhereLabel:SDAI.LOGICAL] = [:]
      switch instance {
      case ._SURFACE_STYLE_BOUNDARY(let selectValue): 
        result = eSURFACE_STYLE_BOUNDARY.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\SURFACE_STYLE_BOUNDARY")
      case ._SURFACE_STYLE_CONTROL_GRID(let selectValue): 
        result = eSURFACE_STYLE_CONTROL_GRID.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\SURFACE_STYLE_CONTROL_GRID")
      case ._SURFACE_STYLE_FILL_AREA(let selectValue): 
        result = eSURFACE_STYLE_FILL_AREA.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\SURFACE_STYLE_FILL_AREA")
      case ._SURFACE_STYLE_PARAMETER_LINE(let selectValue): 
        result = eSURFACE_STYLE_PARAMETER_LINE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\SURFACE_STYLE_PARAMETER_LINE")
      case ._SURFACE_STYLE_RENDERING(let selectValue): 
        result = eSURFACE_STYLE_RENDERING.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\SURFACE_STYLE_RENDERING")
      case ._SURFACE_STYLE_SEGMENTATION_CURVE(let selectValue): 
        result = eSURFACE_STYLE_SEGMENTATION_CURVE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\SURFACE_STYLE_SEGMENTATION_CURVE")
      case ._SURFACE_STYLE_SILHOUETTE(let selectValue): 
        result = eSURFACE_STYLE_SILHOUETTE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\SURFACE_STYLE_SILHOUETTE")
      case nil: break
      }

      return result
    }

  }

}


//MARK: - SELECT TYPE HIERARCHY
public protocol AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sSURFACE_STYLE_ELEMENT_SELECT__type: 
  SDAISelectType {

  //MARK: GROUP REFERENCES
  var super_eFOUNDED_ITEM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFOUNDED_ITEM? { get }
  var super_eSURFACE_STYLE_RENDERING: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSURFACE_STYLE_RENDERING? { get }
  var super_eSURFACE_STYLE_CONTROL_GRID: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSURFACE_STYLE_CONTROL_GRID? { get }
  var super_eSURFACE_STYLE_PARAMETER_LINE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSURFACE_STYLE_PARAMETER_LINE? { get }
  var super_eSURFACE_STYLE_SEGMENTATION_CURVE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSURFACE_STYLE_SEGMENTATION_CURVE? { get }
  var super_eSURFACE_STYLE_BOUNDARY: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSURFACE_STYLE_BOUNDARY? { get }
  var super_eSURFACE_STYLE_FILL_AREA: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSURFACE_STYLE_FILL_AREA? { get }
  var super_eSURFACE_STYLE_SILHOUETTE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSURFACE_STYLE_SILHOUETTE? { get }

  //MARK: ENTITY ATTRIBUTE REFERENCES
  var PROPERTIES: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sRENDERING_PROPERTIES_SELECT>/*[1:
    2]*/ )?  { get }
  var RENDERING_METHOD: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nSHADING_SURFACE_METHOD?  { get }
  var USERS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sFOUNDED_ITEM_SELECT>/*[0:nil]*/ )?  { get }
  var STYLE_OF_SEGMENTATION_CURVE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sCURVE_OR_RENDER?  { get }
  var STYLE_OF_PARAMETER_LINES: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sCURVE_OR_RENDER?  { get }
  var STYLE_OF_CONTROL_GRID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sCURVE_OR_RENDER?  { get }
  var DIRECTION_COUNTS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sDIRECTION_COUNT_SELECT>/*[
    1:2]*/ )?  { get }
  var STYLE_OF_BOUNDARY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sCURVE_OR_RENDER?  { get }
  var FILL_AREA: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFILL_AREA_STYLE?  { get }
  var SURFACE_COLOUR: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOLOUR?  { get }
  var STYLE_OF_SILHOUETTE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sCURVE_OR_RENDER?  { get }
}

public protocol AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sSURFACE_STYLE_ELEMENT_SELECT__subtype: 
  AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sSURFACE_STYLE_ELEMENT_SELECT__type, SDAIDefinedType
where Supertype: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sSURFACE_STYLE_ELEMENT_SELECT__type
{}

public extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sSURFACE_STYLE_ELEMENT_SELECT__subtype {
  //MARK: CONSTRUCTORS
  init?(possiblyFrom complex: SDAI.ComplexEntity?) {
    self.init(fundamental: FundamentalType(possiblyFrom: complex))
  }

  init?<T: SDAIUnderlyingType>(possiblyFrom underlyingType: T?) {
    self.init(fundamental: FundamentalType(possiblyFrom: underlyingType))
  }

  init?<G: SDAIGenericType>(fromGeneric generic: G?) {
    self.init(fundamental: FundamentalType.convert(fromGeneric: generic))
  }

  //MARK: GROUP REFERENCES
  var super_eFOUNDED_ITEM: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFOUNDED_ITEM? { rep.super_eFOUNDED_ITEM }
  var super_eSURFACE_STYLE_RENDERING: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSURFACE_STYLE_RENDERING? { rep.super_eSURFACE_STYLE_RENDERING }
  var super_eSURFACE_STYLE_CONTROL_GRID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSURFACE_STYLE_CONTROL_GRID? { rep.super_eSURFACE_STYLE_CONTROL_GRID }
  var super_eSURFACE_STYLE_PARAMETER_LINE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSURFACE_STYLE_PARAMETER_LINE? { rep.super_eSURFACE_STYLE_PARAMETER_LINE }
  var super_eSURFACE_STYLE_SEGMENTATION_CURVE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSURFACE_STYLE_SEGMENTATION_CURVE? { rep.super_eSURFACE_STYLE_SEGMENTATION_CURVE }
  var super_eSURFACE_STYLE_BOUNDARY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSURFACE_STYLE_BOUNDARY? { rep.super_eSURFACE_STYLE_BOUNDARY }
  var super_eSURFACE_STYLE_FILL_AREA: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSURFACE_STYLE_FILL_AREA? { rep.super_eSURFACE_STYLE_FILL_AREA }
  var super_eSURFACE_STYLE_SILHOUETTE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSURFACE_STYLE_SILHOUETTE? { rep.super_eSURFACE_STYLE_SILHOUETTE }

  //MARK: ENTITY ATTRIBUTE REFERENCES
  var PROPERTIES: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sRENDERING_PROPERTIES_SELECT>/*[1:
    2]*/ )?  { rep.PROPERTIES }
  var RENDERING_METHOD: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nSHADING_SURFACE_METHOD?  { rep.RENDERING_METHOD }
  var USERS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sFOUNDED_ITEM_SELECT>/*[0:nil]*/ )?  { rep.USERS }
  var STYLE_OF_SEGMENTATION_CURVE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sCURVE_OR_RENDER?  { rep.STYLE_OF_SEGMENTATION_CURVE }
  var STYLE_OF_PARAMETER_LINES: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sCURVE_OR_RENDER?  { rep.STYLE_OF_PARAMETER_LINES }
  var STYLE_OF_CONTROL_GRID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sCURVE_OR_RENDER?  { rep.STYLE_OF_CONTROL_GRID }
  var DIRECTION_COUNTS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sDIRECTION_COUNT_SELECT>/*[
    1:2]*/ )?  { rep.DIRECTION_COUNTS }
  var STYLE_OF_BOUNDARY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sCURVE_OR_RENDER?  { rep.STYLE_OF_BOUNDARY }
  var FILL_AREA: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFILL_AREA_STYLE?  { rep.FILL_AREA }
  var SURFACE_COLOUR: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOLOUR?  { rep.SURFACE_COLOUR }
  var STYLE_OF_SILHOUETTE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sCURVE_OR_RENDER?  { rep.STYLE_OF_SILHOUETTE }
}

