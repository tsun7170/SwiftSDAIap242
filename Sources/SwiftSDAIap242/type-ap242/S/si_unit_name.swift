/* file: si_unit_name.swift 	 generated: Sat Aug 14 13:46:02 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -TYPE DEFINITION in EXPRESS
/*
  TYPE si_unit_name = ENUMERATION OF
    ( metre,
     gram,
     second,
     ampere,
     kelvin,
     mole,
     candela,
     radian,
     steradian,
     hertz,
     newton,
     pascal,
     joule,
     watt,
     coulomb,
     volt,
     farad,
     ohm,
     siemens,
     weber,
     tesla,
     henry,
     degree_celsius,
     lumen,
     lux,
     becquerel,
     gray,
     sievert );
  END_TYPE; -- si_unit_name (line:5387 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


/** ENUMERATION type
- EXPRESS:
```express
  TYPE si_unit_name = ENUMERATION OF
    ( metre,
     gram,
     second,
     ampere,
     kelvin,
     mole,
     candela,
     radian,
     steradian,
     hertz,
     newton,
     pascal,
     joule,
     watt,
     coulomb,
     volt,
     farad,
     ohm,
     siemens,
     weber,
     tesla,
     henry,
     degree_celsius,
     lumen,
     lux,
     becquerel,
     gray,
     sievert );
  END_TYPE; -- si_unit_name (line:5387 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public enum nSI_UNIT_NAME : SDAI.ENUMERATION, SDAIValue, 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__nSI_UNIT_NAME__type {
    /// ENUMERATION case in ``nSI_UNIT_NAME``
    case METRE
    /// ENUMERATION case in ``nSI_UNIT_NAME``
    case GRAM
    /// ENUMERATION case in ``nSI_UNIT_NAME``
    case SECOND
    /// ENUMERATION case in ``nSI_UNIT_NAME``
    case AMPERE
    /// ENUMERATION case in ``nSI_UNIT_NAME``
    case KELVIN
    /// ENUMERATION case in ``nSI_UNIT_NAME``
    case MOLE
    /// ENUMERATION case in ``nSI_UNIT_NAME``
    case CANDELA
    /// ENUMERATION case in ``nSI_UNIT_NAME``
    case RADIAN
    /// ENUMERATION case in ``nSI_UNIT_NAME``
    case STERADIAN
    /// ENUMERATION case in ``nSI_UNIT_NAME``
    case HERTZ
    /// ENUMERATION case in ``nSI_UNIT_NAME``
    case NEWTON
    /// ENUMERATION case in ``nSI_UNIT_NAME``
    case PASCAL
    /// ENUMERATION case in ``nSI_UNIT_NAME``
    case JOULE
    /// ENUMERATION case in ``nSI_UNIT_NAME``
    case WATT
    /// ENUMERATION case in ``nSI_UNIT_NAME``
    case COULOMB
    /// ENUMERATION case in ``nSI_UNIT_NAME``
    case VOLT
    /// ENUMERATION case in ``nSI_UNIT_NAME``
    case FARAD
    /// ENUMERATION case in ``nSI_UNIT_NAME``
    case OHM
    /// ENUMERATION case in ``nSI_UNIT_NAME``
    case SIEMENS
    /// ENUMERATION case in ``nSI_UNIT_NAME``
    case WEBER
    /// ENUMERATION case in ``nSI_UNIT_NAME``
    case TESLA
    /// ENUMERATION case in ``nSI_UNIT_NAME``
    case HENRY
    /// ENUMERATION case in ``nSI_UNIT_NAME``
    case DEGREE_CELSIUS
    /// ENUMERATION case in ``nSI_UNIT_NAME``
    case LUMEN
    /// ENUMERATION case in ``nSI_UNIT_NAME``
    case LUX
    /// ENUMERATION case in ``nSI_UNIT_NAME``
    case BECQUEREL
    /// ENUMERATION case in ``nSI_UNIT_NAME``
    case GRAY
    /// ENUMERATION case in ``nSI_UNIT_NAME``
    case SIEVERT

    // SDAIGenericType
    public var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      return members
    }

    public var entityReference: SDAI.EntityReference? {nil}
    public var stringValue: SDAI.STRING? {nil}
    public var binaryValue: SDAI.BINARY? {nil}
    public var logicalValue: SDAI.LOGICAL? {nil}
    public var booleanValue: SDAI.BOOLEAN? {nil}
    public var numberValue: SDAI.NUMBER? {nil}
    public var realValue: SDAI.REAL? {nil}
    public var integerValue: SDAI.INTEGER? {nil}
    public var genericEnumValue: SDAI.GenericEnumValue? { SDAI.GenericEnumValue(self) }
    public func arrayOptionalValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.ARRAY_OPTIONAL<ELEM>? {nil}
    public func arrayValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.ARRAY<ELEM>? {nil}
    public func listValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.LIST<ELEM>? {nil}
    public func bagValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.BAG<ELEM>? {nil}
    public func setValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.SET<ELEM>? {nil}
    public func enumValue<ENUM:SDAIEnumerationType>(enumType:ENUM.Type) -> ENUM? { return self as? ENUM }

    // SDAIUnderlyingType
    public typealias FundamentalType = Self
    public static var typeName: String = "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SI_UNIT_NAME"
    public var asFundamentalType: FundamentalType { return self }

    public init(fundamental: FundamentalType) {
      self = fundamental
    }

    public init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let enumval = generic?.enumValue(enumType: Self.self) else { return nil }
      self = enumval
    }
    // InitializableByP21Parameter
    public static var bareTypeName: String = "SI_UNIT_NAME"

    public	init?(p21untypedParam: P21Decode.ExchangeStructure.UntypedParameter, from exchangeStructure: P21Decode.ExchangeStructure) {
      switch p21untypedParam {
      case .enumeration(let enumcase):
        switch enumcase {
        case "METRE": self = .METRE
        case "GRAM": self = .GRAM
        case "SECOND": self = .SECOND
        case "AMPERE": self = .AMPERE
        case "KELVIN": self = .KELVIN
        case "MOLE": self = .MOLE
        case "CANDELA": self = .CANDELA
        case "RADIAN": self = .RADIAN
        case "STERADIAN": self = .STERADIAN
        case "HERTZ": self = .HERTZ
        case "NEWTON": self = .NEWTON
        case "PASCAL": self = .PASCAL
        case "JOULE": self = .JOULE
        case "WATT": self = .WATT
        case "COULOMB": self = .COULOMB
        case "VOLT": self = .VOLT
        case "FARAD": self = .FARAD
        case "OHM": self = .OHM
        case "SIEMENS": self = .SIEMENS
        case "WEBER": self = .WEBER
        case "TESLA": self = .TESLA
        case "HENRY": self = .HENRY
        case "DEGREE_CELSIUS": self = .DEGREE_CELSIUS
        case "LUMEN": self = .LUMEN
        case "LUX": self = .LUX
        case "BECQUEREL": self = .BECQUEREL
        case "GRAY": self = .GRAY
        case "SIEVERT": self = .SIEVERT
        default:
          exchangeStructure.error = "unexpected p21parameter enum case(\(enumcase)) while resolving \(Self.bareTypeName) value"
          return nil
        }

      case .rhsOccurenceName(let rhsname):
        switch rhsname {
        case .constantValueName(let name):
          guard let generic = exchangeStructure.resolve(constantValueName: name) else {exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) value"); return nil }
          guard let enumValue = generic.enumValue(enumType:Self.self) else { exchangeStructure.error = "constant value(\(name): \(generic)) is not compatible with \(Self.bareTypeName)"; return nil }
          self = enumValue

        case .valueInstanceName(let name):
          guard let param = exchangeStructure.resolve(valueInstanceName: name) else {exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) value from \(rhsname)"); return nil }
          self.init(p21param: param, from: exchangeStructure)

        default:
          exchangeStructure.error = "unexpected p21parameter(\(p21untypedParam)) while resolving \(Self.bareTypeName) value"
          return nil
        }

      case .noValue:
        return nil

      default:
        exchangeStructure.error = "unexpected p21parameter(\(p21untypedParam)) while resolving \(Self.bareTypeName) value"
        return nil
      }
    }

    public init(p21omittedParamfrom exchangeStructure: P21Decode.ExchangeStructure) {
      self = .METRE
    }

    //WHERE RULE VALIDATION (ENUMERATION TYPE)
    public static func validateWhereRules(instance:Self?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      return [:]
    }

  }

  //MARK: -enum case symbol promotions
  /// promoted ENUMERATION case in ``nSI_UNIT_NAME``
  public static let METRE = nSI_UNIT_NAME.METRE
  /// promoted ENUMERATION case in ``nSI_UNIT_NAME``
  public static let GRAM = nSI_UNIT_NAME.GRAM
  /// promoted ENUMERATION case in ``nSI_UNIT_NAME``
  public static let SECOND = nSI_UNIT_NAME.SECOND
  /// promoted ENUMERATION case in ``nSI_UNIT_NAME``
  public static let AMPERE = nSI_UNIT_NAME.AMPERE
  /// promoted ENUMERATION case in ``nSI_UNIT_NAME``
  public static let KELVIN = nSI_UNIT_NAME.KELVIN
  /// promoted ENUMERATION case in ``nSI_UNIT_NAME``
  public static let MOLE = nSI_UNIT_NAME.MOLE
  /// promoted ENUMERATION case in ``nSI_UNIT_NAME``
  public static let CANDELA = nSI_UNIT_NAME.CANDELA
  /// promoted ENUMERATION case in ``nSI_UNIT_NAME``
  public static let RADIAN = nSI_UNIT_NAME.RADIAN
  /// promoted ENUMERATION case in ``nSI_UNIT_NAME``
  public static let STERADIAN = nSI_UNIT_NAME.STERADIAN
  /// promoted ENUMERATION case in ``nSI_UNIT_NAME``
  public static let HERTZ = nSI_UNIT_NAME.HERTZ
  /// promoted ENUMERATION case in ``nSI_UNIT_NAME``
  public static let NEWTON = nSI_UNIT_NAME.NEWTON
  /// promoted ENUMERATION case in ``nSI_UNIT_NAME``
  public static let PASCAL = nSI_UNIT_NAME.PASCAL
  /// promoted ENUMERATION case in ``nSI_UNIT_NAME``
  public static let JOULE = nSI_UNIT_NAME.JOULE
  /// promoted ENUMERATION case in ``nSI_UNIT_NAME``
  public static let WATT = nSI_UNIT_NAME.WATT
  /// promoted ENUMERATION case in ``nSI_UNIT_NAME``
  public static let COULOMB = nSI_UNIT_NAME.COULOMB
  /// promoted ENUMERATION case in ``nSI_UNIT_NAME``
  public static let VOLT = nSI_UNIT_NAME.VOLT
  /// promoted ENUMERATION case in ``nSI_UNIT_NAME``
  public static let FARAD = nSI_UNIT_NAME.FARAD
  /// promoted ENUMERATION case in ``nSI_UNIT_NAME``
  public static let OHM = nSI_UNIT_NAME.OHM
  /// promoted ENUMERATION case in ``nSI_UNIT_NAME``
  public static let SIEMENS = nSI_UNIT_NAME.SIEMENS
  /// promoted ENUMERATION case in ``nSI_UNIT_NAME``
  public static let WEBER = nSI_UNIT_NAME.WEBER
  /// promoted ENUMERATION case in ``nSI_UNIT_NAME``
  public static let TESLA = nSI_UNIT_NAME.TESLA
  /// promoted ENUMERATION case in ``nSI_UNIT_NAME``
  public static let HENRY = nSI_UNIT_NAME.HENRY
  /// promoted ENUMERATION case in ``nSI_UNIT_NAME``
  public static let DEGREE_CELSIUS = nSI_UNIT_NAME.DEGREE_CELSIUS
  /// promoted ENUMERATION case in ``nSI_UNIT_NAME``
  public static let LUMEN = nSI_UNIT_NAME.LUMEN
  /// promoted ENUMERATION case in ``nSI_UNIT_NAME``
  public static let LUX = nSI_UNIT_NAME.LUX
  /// promoted ENUMERATION case in ``nSI_UNIT_NAME``
  public static let BECQUEREL = nSI_UNIT_NAME.BECQUEREL
  /// promoted ENUMERATION case in ``nSI_UNIT_NAME``
  public static let GRAY = nSI_UNIT_NAME.GRAY
  /// promoted ENUMERATION case in ``nSI_UNIT_NAME``
  public static let SIEVERT = nSI_UNIT_NAME.SIEVERT
}


//MARK: - ENUMERATION TYPE HIERARCHY
public protocol AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__nSI_UNIT_NAME__type: SDAIEnumerationType 
  {}

public protocol AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__nSI_UNIT_NAME__subtype: 
  AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__nSI_UNIT_NAME__type, SDAIDefinedType
where Supertype: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__nSI_UNIT_NAME__type
{}

