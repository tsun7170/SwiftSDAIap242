/* file: si_prefix.swift 	 generated: Mon Jan  3 16:32:52 2022 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.1, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -TYPE DEFINITION in EXPRESS
/*
  TYPE si_prefix = ENUMERATION OF
    ( exa,
     peta,
     tera,
     giga,
     mega,
     kilo,
     hecto,
     deca,
     deci,
     centi,
     milli,
     micro,
     nano,
     pico,
     femto,
     atto );
  END_TYPE; -- si_prefix (line:5383 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


/** ENUMERATION type
- EXPRESS:
```express
  TYPE si_prefix = ENUMERATION OF
    ( exa,
     peta,
     tera,
     giga,
     mega,
     kilo,
     hecto,
     deca,
     deci,
     centi,
     milli,
     micro,
     nano,
     pico,
     femto,
     atto );
  END_TYPE; -- si_prefix (line:5383 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public enum nSI_PREFIX : SDAI.ENUMERATION, SDAIValue, 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__nSI_PREFIX__type {
    /// ENUMERATION case in ``nSI_PREFIX``
    case EXA
    /// ENUMERATION case in ``nSI_PREFIX``
    case PETA
    /// ENUMERATION case in ``nSI_PREFIX``
    case TERA
    /// ENUMERATION case in ``nSI_PREFIX``
    case GIGA
    /// ENUMERATION case in ``nSI_PREFIX``
    case MEGA
    /// ENUMERATION case in ``nSI_PREFIX``
    case KILO
    /// ENUMERATION case in ``nSI_PREFIX``
    case HECTO
    /// ENUMERATION case in ``nSI_PREFIX``
    case DECA
    /// ENUMERATION case in ``nSI_PREFIX``
    case DECI
    /// ENUMERATION case in ``nSI_PREFIX``
    case CENTI
    /// ENUMERATION case in ``nSI_PREFIX``
    case MILLI
    /// ENUMERATION case in ``nSI_PREFIX``
    case MICRO
    /// ENUMERATION case in ``nSI_PREFIX``
    case NANO
    /// ENUMERATION case in ``nSI_PREFIX``
    case PICO
    /// ENUMERATION case in ``nSI_PREFIX``
    case FEMTO
    /// ENUMERATION case in ``nSI_PREFIX``
    case ATTO

    // SDAIGenericType
    public var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      return members
    }

    public var entityReference: SDAI.EntityReference? {nil}
    public var stringValue: SDAI.STRING? {nil}
    public var binaryValue: SDAI.BINARY? {nil}
    public var logicalValue: SDAI.LOGICAL? {nil}
    public var booleanValue: SDAI.BOOLEAN? {nil}
    public var numberValue: SDAI.NUMBER? {nil}
    public var realValue: SDAI.REAL? {nil}
    public var integerValue: SDAI.INTEGER? {nil}
    public var genericEnumValue: SDAI.GenericEnumValue? { SDAI.GenericEnumValue(self) }
    public func arrayOptionalValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.ARRAY_OPTIONAL<ELEM>? {nil}
    public func arrayValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.ARRAY<ELEM>? {nil}
    public func listValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.LIST<ELEM>? {nil}
    public func bagValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.BAG<ELEM>? {nil}
    public func setValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.SET<ELEM>? {nil}
    public func enumValue<ENUM:SDAIEnumerationType>(enumType:ENUM.Type) -> ENUM? { return self as? ENUM }

    // SDAIUnderlyingType
    public typealias FundamentalType = Self
    public static var typeName: String = "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SI_PREFIX"
    public var asFundamentalType: FundamentalType { return self }

    public init(fundamental: FundamentalType) {
      self = fundamental
    }

    public init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let enumval = generic?.enumValue(enumType: Self.self) else { return nil }
      self = enumval
    }
    // InitializableByP21Parameter
    public static var bareTypeName: String = "SI_PREFIX"

    public	init?(p21untypedParam: P21Decode.ExchangeStructure.UntypedParameter, from exchangeStructure: P21Decode.ExchangeStructure) {
      switch p21untypedParam {
      case .enumeration(let enumcase):
        switch enumcase {
        case "EXA": self = .EXA
        case "PETA": self = .PETA
        case "TERA": self = .TERA
        case "GIGA": self = .GIGA
        case "MEGA": self = .MEGA
        case "KILO": self = .KILO
        case "HECTO": self = .HECTO
        case "DECA": self = .DECA
        case "DECI": self = .DECI
        case "CENTI": self = .CENTI
        case "MILLI": self = .MILLI
        case "MICRO": self = .MICRO
        case "NANO": self = .NANO
        case "PICO": self = .PICO
        case "FEMTO": self = .FEMTO
        case "ATTO": self = .ATTO
        default:
          exchangeStructure.error = "unexpected p21parameter enum case(\(enumcase)) while resolving \(Self.bareTypeName) value"
          return nil
        }

      case .rhsOccurenceName(let rhsname):
        switch rhsname {
        case .constantValueName(let name):
          guard let generic = exchangeStructure.resolve(constantValueName: name) else {exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) value"); return nil }
          guard let enumValue = generic.enumValue(enumType:Self.self) else { exchangeStructure.error = "constant value(\(name): \(generic)) is not compatible with \(Self.bareTypeName)"; return nil }
          self = enumValue

        case .valueInstanceName(let name):
          guard let param = exchangeStructure.resolve(valueInstanceName: name) else {exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) value from \(rhsname)"); return nil }
          self.init(p21param: param, from: exchangeStructure)

        default:
          exchangeStructure.error = "unexpected p21parameter(\(p21untypedParam)) while resolving \(Self.bareTypeName) value"
          return nil
        }

      case .noValue:
        return nil

      default:
        exchangeStructure.error = "unexpected p21parameter(\(p21untypedParam)) while resolving \(Self.bareTypeName) value"
        return nil
      }
    }

    public init(p21omittedParamfrom exchangeStructure: P21Decode.ExchangeStructure) {
      self = .EXA
    }

    //WHERE RULE VALIDATION (ENUMERATION TYPE)
    public static func validateWhereRules(instance:Self?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      return [:]
    }

  }

  //MARK: -enum case symbol promotions
  /// promoted ENUMERATION case in ``nSI_PREFIX``
  public static let EXA = nSI_PREFIX.EXA
  /// promoted ENUMERATION case in ``nSI_PREFIX``
  public static let PETA = nSI_PREFIX.PETA
  /// promoted ENUMERATION case in ``nSI_PREFIX``
  public static let TERA = nSI_PREFIX.TERA
  /// promoted ENUMERATION case in ``nSI_PREFIX``
  public static let GIGA = nSI_PREFIX.GIGA
  /// promoted ENUMERATION case in ``nSI_PREFIX``
  public static let MEGA = nSI_PREFIX.MEGA
  /// promoted ENUMERATION case in ``nSI_PREFIX``
  public static let KILO = nSI_PREFIX.KILO
  /// promoted ENUMERATION case in ``nSI_PREFIX``
  public static let HECTO = nSI_PREFIX.HECTO
  /// promoted ENUMERATION case in ``nSI_PREFIX``
  public static let DECA = nSI_PREFIX.DECA
  /// promoted ENUMERATION case in ``nSI_PREFIX``
  public static let DECI = nSI_PREFIX.DECI
  /// promoted ENUMERATION case in ``nSI_PREFIX``
  public static let CENTI = nSI_PREFIX.CENTI
  /// promoted ENUMERATION case in ``nSI_PREFIX``
  public static let MILLI = nSI_PREFIX.MILLI
  /// promoted ENUMERATION case in ``nSI_PREFIX``
  public static let MICRO = nSI_PREFIX.MICRO
  /// promoted ENUMERATION case in ``nSI_PREFIX``
  public static let NANO = nSI_PREFIX.NANO
  /// promoted ENUMERATION case in ``nSI_PREFIX``
  public static let PICO = nSI_PREFIX.PICO
  /// promoted ENUMERATION case in ``nSI_PREFIX``
  public static let FEMTO = nSI_PREFIX.FEMTO
  /// promoted ENUMERATION case in ``nSI_PREFIX``
  public static let ATTO = nSI_PREFIX.ATTO
}


//MARK: - ENUMERATION TYPE HIERARCHY
public protocol AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__nSI_PREFIX__type: SDAIEnumerationType {}

public protocol AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__nSI_PREFIX__subtype: 
  AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__nSI_PREFIX__type, SDAIDefinedType
where Supertype: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__nSI_PREFIX__type
{}

