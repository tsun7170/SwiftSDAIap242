/* file: spherical_pair_select.swift 	 generated: Sun Oct 31 15:32:10 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -TYPE DEFINITION in EXPRESS
/*
  TYPE spherical_pair_select = SELECT
    ( spherical_pair (*ENTITY*),
     spherical_pair_with_pin (*ENTITY*) );
  END_TYPE; -- spherical_pair_select (line:5497 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES FOR SELECT
/*
  spherical_pair (*ENTITY*):
  ATTR:  lower_limit_pitch: plane_angle_measure
  ATTR:  description: text
  ATTR:  r_y: BOOLEAN *** Multiple Select Case Sources ***
  ATTR:  r_x: BOOLEAN *** Multiple Select Case Sources ***
  ATTR:  r_z: BOOLEAN *** Multiple Select Case Sources ***
  ATTR:  link_representation_associations: SET [1 : ?] OF pair_representation_relationship
  ATTR:  transform_item_1: rigid_placement
  ATTR:  transform_item_2: rigid_placement
  ATTR:  upper_limit_roll: plane_angle_measure *** Multiple Select Case Sources ***
  ATTR:  lower_limit_yaw: plane_angle_measure *** Multiple Select Case Sources ***
  ATTR:  joint: kinematic_joint
  ATTR:  t_z: BOOLEAN *** Multiple Select Case Sources ***
  ATTR:  t_y: BOOLEAN *** Multiple Select Case Sources ***
  ATTR:  t_x: BOOLEAN *** Multiple Select Case Sources ***
  ATTR:  upper_limit_pitch: plane_angle_measure
  ATTR:  upper_limit_yaw: plane_angle_measure *** Multiple Select Case Sources ***
  ATTR:  associated_link_representations_1: SET [1 : ?] OF kinematic_link_representation
  ATTR:  associated_link_representations_2: SET [1 : ?] OF kinematic_link_representation
  ATTR:  lower_limit_roll: plane_angle_measure *** Multiple Select Case Sources ***
  ATTR:  name: (AMBIGUOUS (CASE LEVEL))
  ATTR:  dim: dimension_count

  spherical_pair_with_pin (*ENTITY*):
  ATTR:  description: text
  ATTR:  r_y: BOOLEAN *** Multiple Select Case Sources ***
  ATTR:  r_x: BOOLEAN *** Multiple Select Case Sources ***
  ATTR:  r_z: BOOLEAN *** Multiple Select Case Sources ***
  ATTR:  link_representation_associations: SET [1 : ?] OF pair_representation_relationship
  ATTR:  transform_item_1: rigid_placement
  ATTR:  transform_item_2: rigid_placement
  ATTR:  upper_limit_roll: plane_angle_measure *** Multiple Select Case Sources ***
  ATTR:  lower_limit_yaw: plane_angle_measure *** Multiple Select Case Sources ***
  ATTR:  joint: kinematic_joint
  ATTR:  t_z: BOOLEAN *** Multiple Select Case Sources ***
  ATTR:  t_y: BOOLEAN *** Multiple Select Case Sources ***
  ATTR:  t_x: BOOLEAN *** Multiple Select Case Sources ***
  ATTR:  upper_limit_yaw: plane_angle_measure *** Multiple Select Case Sources ***
  ATTR:  associated_link_representations_1: SET [1 : ?] OF kinematic_link_representation
  ATTR:  associated_link_representations_2: SET [1 : ?] OF kinematic_link_representation
  ATTR:  lower_limit_roll: plane_angle_measure *** Multiple Select Case Sources ***
  ATTR:  name: (AMBIGUOUS (CASE LEVEL))
  ATTR:  dim: dimension_count

*/

/** SELECT type
- EXPRESS:
```express
  TYPE spherical_pair_select = SELECT
    ( spherical_pair (*ENTITY*),
     spherical_pair_with_pin (*ENTITY*) );
  END_TYPE; -- spherical_pair_select (line:5497 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public enum sSPHERICAL_PAIR_SELECT : SDAIValue, AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sSPHERICAL_PAIR_SELECT__type {

    /// SELECT case ``eSPHERICAL_PAIR`` (ENTITY) in ``sSPHERICAL_PAIR_SELECT``
    case _SPHERICAL_PAIR(eSPHERICAL_PAIR)	// (ENTITY)

    /// SELECT case ``eSPHERICAL_PAIR_WITH_PIN`` (ENTITY) in ``sSPHERICAL_PAIR_SELECT``
    case _SPHERICAL_PAIR_WITH_PIN(eSPHERICAL_PAIR_WITH_PIN)	// (ENTITY)

    //MARK: - CONSTRUCTORS
    public init(fundamental: FundamentalType) { self = fundamental }

    public init?<T: SDAIUnderlyingType>(possiblyFrom underlyingType: T?){
      return nil
    }

    public init?(possiblyFrom complex: SDAI.ComplexEntity?) {
      guard let complex = complex else { return nil }

      if let base = complex.entityReference(eSPHERICAL_PAIR.self) {self = ._SPHERICAL_PAIR(base) }
      else if let base = complex.entityReference(eSPHERICAL_PAIR_WITH_PIN.self) {self = ._SPHERICAL_PAIR_WITH_PIN(base) }
      else { return nil }
    }

    public init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let select = generic else { return nil }

      if let fundamental = select as? Self {
        self.init(fundamental: fundamental)
      }
      else if let base = eSPHERICAL_PAIR.convert(fromGeneric: select) {
        self = ._SPHERICAL_PAIR(base)
      }
      else if let base = eSPHERICAL_PAIR_WITH_PIN.convert(fromGeneric: select) {
        self = ._SPHERICAL_PAIR_WITH_PIN(base)
      }
      else { return nil }
    }

    // InitializableByP21Parameter
    public static var bareTypeName: String = "SPHERICAL_PAIR_SELECT"

    public init?(p21typedParam: P21Decode.ExchangeStructure.TypedParameter, from exchangeStructure: P21Decode.ExchangeStructure) {
      guard let keyword = p21typedParam.keyword.asStandardKeyword else { exchangeStructure.error = "unexpected p21parameter(\(p21typedParam)) while resolving \(Self.bareTypeName) select value"; return nil }

      switch(keyword) {
      default:
        exchangeStructure.error = "unexpected p21parameter(\(p21typedParam)) while resolving \(Self.bareTypeName) select value"
        return nil
      }
    }

    public init?(p21untypedParam: P21Decode.ExchangeStructure.UntypedParameter, from exchangeStructure: P21Decode.ExchangeStructure) {
      switch p21untypedParam {
      case .rhsOccurenceName(let rhsname):
        switch rhsname {
        case .constantEntityName(let name):
          guard let entity = exchangeStructure.resolve(constantEntityName: name) else {exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) instance"); return nil }
          self.init(possiblyFrom: entity.complexEntity)

        case .entityInstanceName(let name):
          guard let complex = exchangeStructure.resolve(entityInstanceName: name) else {exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) instance"); return nil }
          self.init(possiblyFrom: complex)

        default:
          exchangeStructure.error = "unexpected p21parameter(\(p21untypedParam)) while resolving \(Self.bareTypeName) select instance"
          return nil
        }

      default:
        exchangeStructure.error = "unexpected p21parameter(\(p21untypedParam)) while resolving \(Self.bareTypeName) select instance"
        return nil
      }
    }

    public init?(p21omittedParamfrom exchangeStructure: P21Decode.ExchangeStructure) {
      return nil
    }


    //MARK: - ENTITY UNDERLYING TYPE REFERENCES
    public var super_eITEM_DEFINED_TRANSFORMATION: eITEM_DEFINED_TRANSFORMATION? {
      switch self {
      case ._SPHERICAL_PAIR(let entity): return entity.super_eITEM_DEFINED_TRANSFORMATION
      case ._SPHERICAL_PAIR_WITH_PIN(let entity): return entity.super_eITEM_DEFINED_TRANSFORMATION
      }
    }

    public var super_eREPRESENTATION_ITEM: eREPRESENTATION_ITEM? {
      switch self {
      case ._SPHERICAL_PAIR(let entity): return entity.super_eREPRESENTATION_ITEM
      case ._SPHERICAL_PAIR_WITH_PIN(let entity): return entity.super_eREPRESENTATION_ITEM
      }
    }

    public var super_eSPHERICAL_PAIR: eSPHERICAL_PAIR? {
      switch self {
      case ._SPHERICAL_PAIR(let entity): return entity
      default: return nil
      }
    }

    public var super_eKINEMATIC_PAIR: eKINEMATIC_PAIR? {
      switch self {
      case ._SPHERICAL_PAIR(let entity): return entity.super_eKINEMATIC_PAIR
      case ._SPHERICAL_PAIR_WITH_PIN(let entity): return entity.super_eKINEMATIC_PAIR
      }
    }

    public var super_eLOW_ORDER_KINEMATIC_PAIR: eLOW_ORDER_KINEMATIC_PAIR? {
      switch self {
      case ._SPHERICAL_PAIR(let entity): return entity.super_eLOW_ORDER_KINEMATIC_PAIR
      case ._SPHERICAL_PAIR_WITH_PIN(let entity): return entity.super_eLOW_ORDER_KINEMATIC_PAIR
      }
    }

    public var super_eGEOMETRIC_REPRESENTATION_ITEM: eGEOMETRIC_REPRESENTATION_ITEM? {
      switch self {
      case ._SPHERICAL_PAIR(let entity): return entity.super_eGEOMETRIC_REPRESENTATION_ITEM
      case ._SPHERICAL_PAIR_WITH_PIN(let entity): return entity.super_eGEOMETRIC_REPRESENTATION_ITEM
      }
    }

    public var super_eSPHERICAL_PAIR_WITH_PIN: eSPHERICAL_PAIR_WITH_PIN? {
      switch self {
      case ._SPHERICAL_PAIR_WITH_PIN(let entity): return entity
      default: return nil
      }
    }


    //MARK: - ENTITY ATTRIBUTE REFERENCES
    /// attribute of SELECT type ``sSPHERICAL_PAIR_SELECT``
    /// - origin: ENTITY( ``eSPHERICAL_PAIR`` )
    public var LOWER_LIMIT_PITCH: tPLANE_ANGLE_MEASURE?  {
      switch self {
      case ._SPHERICAL_PAIR(let entity): return entity.LOWER_LIMIT_PITCH
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSPHERICAL_PAIR_SELECT``
    /// - origin: ENTITY( ``eSPHERICAL_PAIR`` )
    /// - origin: ENTITY( ``eSPHERICAL_PAIR_WITH_PIN`` )
    public var DESCRIPTION: tTEXT?  {
      switch self {
      case ._SPHERICAL_PAIR(let entity): return entity.DESCRIPTION
      case ._SPHERICAL_PAIR_WITH_PIN(let entity): return entity.DESCRIPTION
      }
    }

    /// attribute of SELECT type ``sSPHERICAL_PAIR_SELECT``
    /// - origin: ENTITY( ``eSPHERICAL_PAIR`` )
    /// - origin: ENTITY( ``eSPHERICAL_PAIR_WITH_PIN`` )
    public var R_Y: SDAI.BOOLEAN?  {
      switch self {
      case ._SPHERICAL_PAIR(let entity): return entity.R_Y
      case ._SPHERICAL_PAIR_WITH_PIN(let entity): return entity.R_Y
      }
    }

    /// attribute of SELECT type ``sSPHERICAL_PAIR_SELECT``
    /// - origin: ENTITY( ``eSPHERICAL_PAIR`` )
    /// - origin: ENTITY( ``eSPHERICAL_PAIR_WITH_PIN`` )
    public var R_X: SDAI.BOOLEAN?  {
      switch self {
      case ._SPHERICAL_PAIR(let entity): return entity.R_X
      case ._SPHERICAL_PAIR_WITH_PIN(let entity): return entity.R_X
      }
    }

    /// attribute of SELECT type ``sSPHERICAL_PAIR_SELECT``
    /// - origin: ENTITY( ``eSPHERICAL_PAIR`` )
    /// - origin: ENTITY( ``eSPHERICAL_PAIR_WITH_PIN`` )
    public var R_Z: SDAI.BOOLEAN?  {
      switch self {
      case ._SPHERICAL_PAIR(let entity): return entity.R_Z
      case ._SPHERICAL_PAIR_WITH_PIN(let entity): return entity.R_Z
      }
    }

    /// attribute of SELECT type ``sSPHERICAL_PAIR_SELECT``
    /// - origin: ENTITY( ``eSPHERICAL_PAIR`` )
    /// - origin: ENTITY( ``eSPHERICAL_PAIR_WITH_PIN`` )
    public var LINK_REPRESENTATION_ASSOCIATIONS: (SDAI.SET<ePAIR_REPRESENTATION_RELATIONSHIP>/*[1:nil]*/ )?  {
      switch self {
      case ._SPHERICAL_PAIR(let entity): return entity.LINK_REPRESENTATION_ASSOCIATIONS
      case ._SPHERICAL_PAIR_WITH_PIN(let entity): return entity.LINK_REPRESENTATION_ASSOCIATIONS
      }
    }

    /// attribute of SELECT type ``sSPHERICAL_PAIR_SELECT``
    /// - origin: ENTITY( ``eSPHERICAL_PAIR`` )
    /// - origin: ENTITY( ``eSPHERICAL_PAIR_WITH_PIN`` )
    public var TRANSFORM_ITEM_1: sRIGID_PLACEMENT?  {
      switch self {
      case ._SPHERICAL_PAIR(let entity): return entity.TRANSFORM_ITEM_1
      case ._SPHERICAL_PAIR_WITH_PIN(let entity): return entity.TRANSFORM_ITEM_1
      }
    }

    /// attribute of SELECT type ``sSPHERICAL_PAIR_SELECT``
    /// - origin: ENTITY( ``eSPHERICAL_PAIR`` )
    /// - origin: ENTITY( ``eSPHERICAL_PAIR_WITH_PIN`` )
    public var TRANSFORM_ITEM_2: sRIGID_PLACEMENT?  {
      switch self {
      case ._SPHERICAL_PAIR(let entity): return entity.TRANSFORM_ITEM_2
      case ._SPHERICAL_PAIR_WITH_PIN(let entity): return entity.TRANSFORM_ITEM_2
      }
    }

    /// attribute of SELECT type ``sSPHERICAL_PAIR_SELECT``
    /// - origin: ENTITY( ``eSPHERICAL_PAIR`` )
    /// - origin: ENTITY( ``eSPHERICAL_PAIR_WITH_PIN`` )
    public var UPPER_LIMIT_ROLL: tPLANE_ANGLE_MEASURE?  {
      switch self {
      case ._SPHERICAL_PAIR(let entity): return entity.UPPER_LIMIT_ROLL
      case ._SPHERICAL_PAIR_WITH_PIN(let entity): return entity.UPPER_LIMIT_ROLL
      }
    }

    /// attribute of SELECT type ``sSPHERICAL_PAIR_SELECT``
    /// - origin: ENTITY( ``eSPHERICAL_PAIR`` )
    /// - origin: ENTITY( ``eSPHERICAL_PAIR_WITH_PIN`` )
    public var LOWER_LIMIT_YAW: tPLANE_ANGLE_MEASURE?  {
      switch self {
      case ._SPHERICAL_PAIR(let entity): return entity.LOWER_LIMIT_YAW
      case ._SPHERICAL_PAIR_WITH_PIN(let entity): return entity.LOWER_LIMIT_YAW
      }
    }

    /// attribute of SELECT type ``sSPHERICAL_PAIR_SELECT``
    /// - origin: ENTITY( ``eSPHERICAL_PAIR`` )
    /// - origin: ENTITY( ``eSPHERICAL_PAIR_WITH_PIN`` )
    public var JOINT: eKINEMATIC_JOINT?  {
      switch self {
      case ._SPHERICAL_PAIR(let entity): return entity.JOINT
      case ._SPHERICAL_PAIR_WITH_PIN(let entity): return entity.JOINT
      }
    }

    /// attribute of SELECT type ``sSPHERICAL_PAIR_SELECT``
    /// - origin: ENTITY( ``eSPHERICAL_PAIR`` )
    /// - origin: ENTITY( ``eSPHERICAL_PAIR_WITH_PIN`` )
    public var T_Z: SDAI.BOOLEAN?  {
      switch self {
      case ._SPHERICAL_PAIR(let entity): return entity.T_Z
      case ._SPHERICAL_PAIR_WITH_PIN(let entity): return entity.T_Z
      }
    }

    /// attribute of SELECT type ``sSPHERICAL_PAIR_SELECT``
    /// - origin: ENTITY( ``eSPHERICAL_PAIR`` )
    /// - origin: ENTITY( ``eSPHERICAL_PAIR_WITH_PIN`` )
    public var T_Y: SDAI.BOOLEAN?  {
      switch self {
      case ._SPHERICAL_PAIR(let entity): return entity.T_Y
      case ._SPHERICAL_PAIR_WITH_PIN(let entity): return entity.T_Y
      }
    }

    /// attribute of SELECT type ``sSPHERICAL_PAIR_SELECT``
    /// - origin: ENTITY( ``eSPHERICAL_PAIR`` )
    /// - origin: ENTITY( ``eSPHERICAL_PAIR_WITH_PIN`` )
    public var T_X: SDAI.BOOLEAN?  {
      switch self {
      case ._SPHERICAL_PAIR(let entity): return entity.T_X
      case ._SPHERICAL_PAIR_WITH_PIN(let entity): return entity.T_X
      }
    }

    /// attribute of SELECT type ``sSPHERICAL_PAIR_SELECT``
    /// - origin: ENTITY( ``eSPHERICAL_PAIR`` )
    public var UPPER_LIMIT_PITCH: tPLANE_ANGLE_MEASURE?  {
      switch self {
      case ._SPHERICAL_PAIR(let entity): return entity.UPPER_LIMIT_PITCH
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSPHERICAL_PAIR_SELECT``
    /// - origin: ENTITY( ``eSPHERICAL_PAIR`` )
    /// - origin: ENTITY( ``eSPHERICAL_PAIR_WITH_PIN`` )
    public var UPPER_LIMIT_YAW: tPLANE_ANGLE_MEASURE?  {
      switch self {
      case ._SPHERICAL_PAIR(let entity): return entity.UPPER_LIMIT_YAW
      case ._SPHERICAL_PAIR_WITH_PIN(let entity): return entity.UPPER_LIMIT_YAW
      }
    }

    /// attribute of SELECT type ``sSPHERICAL_PAIR_SELECT``
    /// - origin: ENTITY( ``eSPHERICAL_PAIR`` )
    /// - origin: ENTITY( ``eSPHERICAL_PAIR_WITH_PIN`` )
    public var ASSOCIATED_LINK_REPRESENTATIONS_1: (SDAI.SET<eKINEMATIC_LINK_REPRESENTATION>/*[1:nil]*/ )?  {
      switch self {
      case ._SPHERICAL_PAIR(let entity): return entity.ASSOCIATED_LINK_REPRESENTATIONS_1
      case ._SPHERICAL_PAIR_WITH_PIN(let entity): return entity.ASSOCIATED_LINK_REPRESENTATIONS_1
      }
    }

    /// attribute of SELECT type ``sSPHERICAL_PAIR_SELECT``
    /// - origin: ENTITY( ``eSPHERICAL_PAIR`` )
    /// - origin: ENTITY( ``eSPHERICAL_PAIR_WITH_PIN`` )
    public var ASSOCIATED_LINK_REPRESENTATIONS_2: (SDAI.SET<eKINEMATIC_LINK_REPRESENTATION>/*[1:nil]*/ )?  {
      switch self {
      case ._SPHERICAL_PAIR(let entity): return entity.ASSOCIATED_LINK_REPRESENTATIONS_2
      case ._SPHERICAL_PAIR_WITH_PIN(let entity): return entity.ASSOCIATED_LINK_REPRESENTATIONS_2
      }
    }

    /// attribute of SELECT type ``sSPHERICAL_PAIR_SELECT``
    /// - origin: ENTITY( ``eSPHERICAL_PAIR`` )
    /// - origin: ENTITY( ``eSPHERICAL_PAIR_WITH_PIN`` )
    public var LOWER_LIMIT_ROLL: tPLANE_ANGLE_MEASURE?  {
      switch self {
      case ._SPHERICAL_PAIR(let entity): return entity.LOWER_LIMIT_ROLL
      case ._SPHERICAL_PAIR_WITH_PIN(let entity): return entity.LOWER_LIMIT_ROLL
      }
    }

    /// attribute of SELECT type ``sSPHERICAL_PAIR_SELECT``
    /// - origin: ENTITY( ``eSPHERICAL_PAIR`` )
    /// - origin: ENTITY( ``eSPHERICAL_PAIR_WITH_PIN`` )
    public var DIM: tDIMENSION_COUNT?  {
      switch self {
      case ._SPHERICAL_PAIR(let entity): return entity.DIM
      case ._SPHERICAL_PAIR_WITH_PIN(let entity): return entity.DIM
      }
    }


    //MARK: - SDAIValue
    public func isValueEqual<T: SDAIValue>(to rhs: T) -> Bool {
      switch self {
      case ._SPHERICAL_PAIR(let selection): return selection.value.isValueEqual(to: rhs)
      case ._SPHERICAL_PAIR_WITH_PIN(let selection): return selection.value.isValueEqual(to: rhs)
      }
    }

    public func isValueEqualOptionally<T: SDAIValue>(to rhs: T?) -> Bool? {
      switch self {
      case ._SPHERICAL_PAIR(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._SPHERICAL_PAIR_WITH_PIN(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      }
    }

    public func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      switch self {
      case ._SPHERICAL_PAIR(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._SPHERICAL_PAIR_WITH_PIN(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      }
    }

    public func isValueEqual<T: SDAIValue>(to rhs: T, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      switch self {
      case ._SPHERICAL_PAIR(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._SPHERICAL_PAIR_WITH_PIN(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      }
    }

    public func isValueEqualOptionally<T: SDAIValue>(to rhs: T?, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      switch self {
      case ._SPHERICAL_PAIR(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._SPHERICAL_PAIR_WITH_PIN(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      }
    }


    //MARK: SDAIGenericTypeBase
    public func copy() -> Self {
      switch self {
      case ._SPHERICAL_PAIR(let selection): return ._SPHERICAL_PAIR(selection.copy())
      case ._SPHERICAL_PAIR_WITH_PIN(let selection): return ._SPHERICAL_PAIR_WITH_PIN(selection.copy())
      }
    }

    //MARK: SDAIGenericType
    public var typeMembers: Set<SDAI.STRING> {
      var members: Set<SDAI.STRING> = [SDAI.STRING(Self.typeName)]
      switch self {
      case ._SPHERICAL_PAIR(let selection): members.formUnion(selection.typeMembers)
      case ._SPHERICAL_PAIR_WITH_PIN(let selection): members.formUnion(selection.typeMembers)
      }
      return members
    }

    public var entityReference: SDAI.EntityReference? {
      switch self {
      case ._SPHERICAL_PAIR(let selection): return selection.entityReference
      case ._SPHERICAL_PAIR_WITH_PIN(let selection): return selection.entityReference
      }
    }
    public var stringValue: SDAI.STRING? {
      switch self {
      case ._SPHERICAL_PAIR(let selection): return selection.stringValue
      case ._SPHERICAL_PAIR_WITH_PIN(let selection): return selection.stringValue
      }
    }
    public var binaryValue: SDAI.BINARY? {
      switch self {
      case ._SPHERICAL_PAIR(let selection): return selection.binaryValue
      case ._SPHERICAL_PAIR_WITH_PIN(let selection): return selection.binaryValue
      }
    }
    public var logicalValue: SDAI.LOGICAL? {
      switch self {
      case ._SPHERICAL_PAIR(let selection): return selection.logicalValue
      case ._SPHERICAL_PAIR_WITH_PIN(let selection): return selection.logicalValue
      }
    }
    public var booleanValue: SDAI.BOOLEAN? {
      switch self {
      case ._SPHERICAL_PAIR(let selection): return selection.booleanValue
      case ._SPHERICAL_PAIR_WITH_PIN(let selection): return selection.booleanValue
      }
    }
    public var numberValue: SDAI.NUMBER? {
      switch self {
      case ._SPHERICAL_PAIR(let selection): return selection.numberValue
      case ._SPHERICAL_PAIR_WITH_PIN(let selection): return selection.numberValue
      }
    }
    public var realValue: SDAI.REAL? {
      switch self {
      case ._SPHERICAL_PAIR(let selection): return selection.realValue
      case ._SPHERICAL_PAIR_WITH_PIN(let selection): return selection.realValue
      }
    }
    public var integerValue: SDAI.INTEGER? {
      switch self {
      case ._SPHERICAL_PAIR(let selection): return selection.integerValue
      case ._SPHERICAL_PAIR_WITH_PIN(let selection): return selection.integerValue
      }
    }
    public var genericEnumValue: SDAI.GenericEnumValue? {
      switch self {
      case ._SPHERICAL_PAIR(let selection): return selection.genericEnumValue
      case ._SPHERICAL_PAIR_WITH_PIN(let selection): return selection.genericEnumValue
      }
    }
    public func arrayOptionalValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.ARRAY_OPTIONAL<ELEM>? {
      switch self {
      case ._SPHERICAL_PAIR(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._SPHERICAL_PAIR_WITH_PIN(let selection): return selection.arrayOptionalValue(elementType:elementType)
      }
    }
    public func arrayValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.ARRAY<ELEM>? {
      switch self {
      case ._SPHERICAL_PAIR(let selection): return selection.arrayValue(elementType:elementType)
      case ._SPHERICAL_PAIR_WITH_PIN(let selection): return selection.arrayValue(elementType:elementType)
      }
    }
    public func listValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.LIST<ELEM>? {
      switch self {
      case ._SPHERICAL_PAIR(let selection): return selection.listValue(elementType:elementType)
      case ._SPHERICAL_PAIR_WITH_PIN(let selection): return selection.listValue(elementType:elementType)
      }
    }
    public func bagValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.BAG<ELEM>? {
      switch self {
      case ._SPHERICAL_PAIR(let selection): return selection.bagValue(elementType:elementType)
      case ._SPHERICAL_PAIR_WITH_PIN(let selection): return selection.bagValue(elementType:elementType)
      }
    }
    public func setValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.SET<ELEM>? {
      switch self {
      case ._SPHERICAL_PAIR(let selection): return selection.setValue(elementType:elementType)
      case ._SPHERICAL_PAIR_WITH_PIN(let selection): return selection.setValue(elementType:elementType)
      }
    }
    public func enumValue<ENUM:SDAIEnumerationType>(enumType:ENUM.Type) -> ENUM? {
      switch self {
      case ._SPHERICAL_PAIR(let selection): return selection.enumValue(enumType:enumType)
      case ._SPHERICAL_PAIR_WITH_PIN(let selection): return selection.enumValue(enumType:enumType)
      }
    }

    //MARK: SDAIUnderlyingType
    public typealias FundamentalType = Self
    public static var typeName: String = 
      "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SPHERICAL_PAIR_SELECT"
    public var asFundamentalType: FundamentalType { return self }

    //MARK: SDAIObservableAggregateElement
    public var entityReferences: AnySequence<SDAI.EntityReference> {
      switch self {
      case ._SPHERICAL_PAIR(let entity): return entity.entityReferences
      case ._SPHERICAL_PAIR_WITH_PIN(let entity): return entity.entityReferences
      }
    }

    public mutating func configure(with observer: SDAI.EntityReferenceObserver) {
      switch self {
      case ._SPHERICAL_PAIR(let entity): 
        entity.configure(with: observer)
        self = ._SPHERICAL_PAIR(entity)
      case ._SPHERICAL_PAIR_WITH_PIN(let entity): 
        entity.configure(with: observer)
        self = ._SPHERICAL_PAIR_WITH_PIN(entity)
      }
    }

    public mutating func teardownObserver() {
      switch self {
      case ._SPHERICAL_PAIR(let entity): 
        entity.teardownObserver()
        self = ._SPHERICAL_PAIR(entity)
      case ._SPHERICAL_PAIR_WITH_PIN(let entity): 
        entity.teardownObserver()
        self = ._SPHERICAL_PAIR_WITH_PIN(entity)
      }
    }

    //MARK: SDAIAggregationBehavior
    public var aggregationHiBound: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationHiIndex: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationLoBound: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationLoIndex: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationSize: Int? {
      switch self {
      default: return nil
      }
    }

    //MARK: WHERE RULE VALIDATION (SELECT TYPE)
    public static func validateWhereRules(instance:Self?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      var result: [SDAI.WhereLabel:SDAI.LOGICAL] = [:]
      switch instance {
      case ._SPHERICAL_PAIR(let selectValue): 
        result = eSPHERICAL_PAIR.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\SPHERICAL_PAIR")
      case ._SPHERICAL_PAIR_WITH_PIN(let selectValue): 
        result = eSPHERICAL_PAIR_WITH_PIN.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\SPHERICAL_PAIR_WITH_PIN")
      case nil: break
      }

      return result
    }

  }

}


//MARK: - SELECT TYPE HIERARCHY
public protocol AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sSPHERICAL_PAIR_SELECT__type: SDAISelectType {

  //MARK: GROUP REFERENCES
  var super_eITEM_DEFINED_TRANSFORMATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eITEM_DEFINED_TRANSFORMATION? { get }
  var super_eREPRESENTATION_ITEM: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_ITEM? { get }
  var super_eSPHERICAL_PAIR: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSPHERICAL_PAIR? { get }
  var super_eKINEMATIC_PAIR: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eKINEMATIC_PAIR? { get }
  var super_eLOW_ORDER_KINEMATIC_PAIR: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eLOW_ORDER_KINEMATIC_PAIR? { get }
  var super_eGEOMETRIC_REPRESENTATION_ITEM: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGEOMETRIC_REPRESENTATION_ITEM? { get }
  var super_eSPHERICAL_PAIR_WITH_PIN: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSPHERICAL_PAIR_WITH_PIN? { get }

  //MARK: ENTITY ATTRIBUTE REFERENCES
  var LOWER_LIMIT_PITCH: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { get }
  var DESCRIPTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT?  { get }
  var R_Y: SDAI.BOOLEAN?  { get }
  var R_X: SDAI.BOOLEAN?  { get }
  var R_Z: SDAI.BOOLEAN?  { get }
  var LINK_REPRESENTATION_ASSOCIATIONS: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePAIR_REPRESENTATION_RELATIONSHIP>/*[1:nil]*/ )?  { get }
  var TRANSFORM_ITEM_1: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sRIGID_PLACEMENT?  { get }
  var TRANSFORM_ITEM_2: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sRIGID_PLACEMENT?  { get }
  var UPPER_LIMIT_ROLL: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { get }
  var LOWER_LIMIT_YAW: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { get }
  var JOINT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eKINEMATIC_JOINT?  { get }
  var T_Z: SDAI.BOOLEAN?  { get }
  var T_Y: SDAI.BOOLEAN?  { get }
  var T_X: SDAI.BOOLEAN?  { get }
  var UPPER_LIMIT_PITCH: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { get }
  var UPPER_LIMIT_YAW: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { get }
  var ASSOCIATED_LINK_REPRESENTATIONS_1: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eKINEMATIC_LINK_REPRESENTATION>/*[1:nil]*/ )?  { get }
  var ASSOCIATED_LINK_REPRESENTATIONS_2: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eKINEMATIC_LINK_REPRESENTATION>/*[1:nil]*/ )?  { get }
  var LOWER_LIMIT_ROLL: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { get }
  var DIM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tDIMENSION_COUNT?  { get }
}

public protocol AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sSPHERICAL_PAIR_SELECT__subtype: 
  AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sSPHERICAL_PAIR_SELECT__type, SDAIDefinedType
where Supertype: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sSPHERICAL_PAIR_SELECT__type
{}

public extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sSPHERICAL_PAIR_SELECT__subtype {
  //MARK: CONSTRUCTORS
  init?(possiblyFrom complex: SDAI.ComplexEntity?) {
    self.init(fundamental: FundamentalType(possiblyFrom: complex))
  }

  init?<T: SDAIUnderlyingType>(possiblyFrom underlyingType: T?) {
    self.init(fundamental: FundamentalType(possiblyFrom: underlyingType))
  }

  init?<G: SDAIGenericType>(fromGeneric generic: G?) {
    self.init(fundamental: FundamentalType.convert(fromGeneric: generic))
  }

  //MARK: GROUP REFERENCES
  var super_eITEM_DEFINED_TRANSFORMATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eITEM_DEFINED_TRANSFORMATION? { rep.super_eITEM_DEFINED_TRANSFORMATION }
  var super_eREPRESENTATION_ITEM: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_ITEM? { rep.super_eREPRESENTATION_ITEM }
  var super_eSPHERICAL_PAIR: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSPHERICAL_PAIR? { rep.super_eSPHERICAL_PAIR }
  var super_eKINEMATIC_PAIR: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eKINEMATIC_PAIR? { rep.super_eKINEMATIC_PAIR }
  var super_eLOW_ORDER_KINEMATIC_PAIR: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eLOW_ORDER_KINEMATIC_PAIR? { rep.super_eLOW_ORDER_KINEMATIC_PAIR }
  var super_eGEOMETRIC_REPRESENTATION_ITEM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGEOMETRIC_REPRESENTATION_ITEM? { rep.super_eGEOMETRIC_REPRESENTATION_ITEM }
  var super_eSPHERICAL_PAIR_WITH_PIN: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSPHERICAL_PAIR_WITH_PIN? { rep.super_eSPHERICAL_PAIR_WITH_PIN }

  //MARK: ENTITY ATTRIBUTE REFERENCES
  var LOWER_LIMIT_PITCH: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { rep.LOWER_LIMIT_PITCH }
  var DESCRIPTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT?  { rep.DESCRIPTION }
  var R_Y: SDAI.BOOLEAN?  { rep.R_Y }
  var R_X: SDAI.BOOLEAN?  { rep.R_X }
  var R_Z: SDAI.BOOLEAN?  { rep.R_Z }
  var LINK_REPRESENTATION_ASSOCIATIONS: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePAIR_REPRESENTATION_RELATIONSHIP>/*[1:nil]*/ )?  { rep.LINK_REPRESENTATION_ASSOCIATIONS }
  var TRANSFORM_ITEM_1: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sRIGID_PLACEMENT?  { rep.TRANSFORM_ITEM_1 }
  var TRANSFORM_ITEM_2: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sRIGID_PLACEMENT?  { rep.TRANSFORM_ITEM_2 }
  var UPPER_LIMIT_ROLL: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { rep.UPPER_LIMIT_ROLL }
  var LOWER_LIMIT_YAW: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { rep.LOWER_LIMIT_YAW }
  var JOINT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eKINEMATIC_JOINT?  { rep.JOINT }
  var T_Z: SDAI.BOOLEAN?  { rep.T_Z }
  var T_Y: SDAI.BOOLEAN?  { rep.T_Y }
  var T_X: SDAI.BOOLEAN?  { rep.T_X }
  var UPPER_LIMIT_PITCH: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { rep.UPPER_LIMIT_PITCH }
  var UPPER_LIMIT_YAW: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { rep.UPPER_LIMIT_YAW }
  var ASSOCIATED_LINK_REPRESENTATIONS_1: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eKINEMATIC_LINK_REPRESENTATION>/*[1:nil]*/ )?  { rep.ASSOCIATED_LINK_REPRESENTATIONS_1 }
  var ASSOCIATED_LINK_REPRESENTATIONS_2: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eKINEMATIC_LINK_REPRESENTATION>/*[1:nil]*/ )?  { rep.ASSOCIATED_LINK_REPRESENTATIONS_2 }
  var LOWER_LIMIT_ROLL: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPLANE_ANGLE_MEASURE?  { rep.LOWER_LIMIT_ROLL }
  var DIM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tDIMENSION_COUNT?  { rep.DIM }
}

