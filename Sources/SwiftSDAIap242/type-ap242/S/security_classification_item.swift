/* file: security_classification_item.swift 	 generated: Sat Aug 14 13:46:02 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -TYPE DEFINITION in EXPRESS
/*
  TYPE security_classification_item = SELECT
    ( action (*ENTITY*),
     action_directive (*ENTITY*),
     action_method (*ENTITY*),
     action_method_relationship (*ENTITY*),
     action_property (*ENTITY*),
     action_property_representation (*ENTITY*),
     applied_action_assignment (*ENTITY*),
     applied_action_method_assignment (*ENTITY*),
     applied_classification_assignment (*ENTITY*),
     applied_description_text_assignment (*ENTITY*),
     applied_description_text_assignment_relationship (*ENTITY*),
     applied_document_reference (*ENTITY*),
     applied_document_usage_constraint_assignment (*ENTITY*),
     applied_external_identification_assignment (*ENTITY*),
     applied_identification_assignment (*ENTITY*),
     assembly_component_usage (*ENTITY*),
     assembly_component_usage_substitute (*ENTITY*),
     class_system (*ENTITY*),
     conditional_effectivity (*ENTITY*),
     configuration_design (*ENTITY*),
     configuration_effectivity (*ENTITY*),
     configured_effectivity_assignment (*ENTITY*),
     document (*ENTITY*),
     document_file (*ENTITY*),
     draughting_model (*ENTITY*),
     drawing_revision (*ENTITY*),
     envelope (*ENTITY*),
     evaluated_characteristic_of_product_as_individual_test_result (*ENTITY*),
     evidence (*ENTITY*),
     exclusive_product_concept_feature_category (*ENTITY*),
     executed_action (*ENTITY*),
     externally_defined_general_property (*ENTITY*),
     general_property (*ENTITY*),
     group (*ENTITY*),
     identification_assignment_relationship (*ENTITY*),
     interface_connection (*ENTITY*),
     interface_connector_as_planned (*ENTITY*),
     interface_connector_as_realized (*ENTITY*),
     interface_connector_design (*ENTITY*),
     interface_connector_occurrence (*ENTITY*),
     interface_definition_connection (*ENTITY*),
     interface_definition_for (*ENTITY*),
     make_from_usage_option (*ENTITY*),
     material_designation (*ENTITY*),
     mechanical_design_geometric_presentation_representation (*ENTITY*),
     organizational_project (*ENTITY*),
     package_product_concept_feature (*ENTITY*),
     presentation_area (*ENTITY*),
     process_plan (*ENTITY*),
     product (*ENTITY*),
     product_class (*ENTITY*),
     product_concept (*ENTITY*),
     product_concept_feature (*ENTITY*),
     product_concept_feature_category (*ENTITY*),
     product_definition (*ENTITY*),
     product_definition_formation (*ENTITY*),
     product_definition_formation_relationship (*ENTITY*),
     product_definition_group_assignment (*ENTITY*),
     product_definition_relationship (*ENTITY*),
     product_definition_usage (*ENTITY*),
     product_design_to_individual (*ENTITY*),
     product_design_version_to_individual (*ENTITY*),
     product_group (*ENTITY*),
     product_group_membership (*ENTITY*),
     product_group_relationship (*ENTITY*),
     product_identification (*ENTITY*),
     product_process_plan (*ENTITY*),
     product_relationship (*ENTITY*),
     property_definition (*ENTITY*),
     property_definition_representation (*ENTITY*),
     representation (*ENTITY*),
     requirement_assignment (*ENTITY*),
     requirement_source (*ENTITY*),
     requirement_view_definition_relationship (*ENTITY*),
     resource_property (*ENTITY*),
     shape_representation (*ENTITY*),
     structured_message (*ENTITY*),
     validation (*ENTITY*),
     verification (*ENTITY*),
     versioned_action_request (*ENTITY*) );
  END_TYPE; -- security_classification_item (line:5209 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES FOR SELECT
/*
  action (*ENTITY*):
  ATTR:  description: text (AMBIGUOUS (SELECT LEVEL))
  ATTR:  properties: SET [1 : ?] OF process_property_association
  ATTR:  directive: action_directive
  ATTR:  chosen_method: action_method
  ATTR:  identification: (AMBIGUOUS (CASE LEVEL))
  ATTR:  product_definitions: SET [1 : ?] OF process_product_association
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  action_directive (*ENTITY*):
  ATTR:  description: text (AMBIGUOUS (SELECT LEVEL))
  ATTR:  analysis: text
  ATTR:  requests: SET [1 : ?] OF versioned_action_request
  ATTR:  comment: text
  ATTR:  name: label *** Multiple Select Case Sources ***

  action_method (*ENTITY*):
  ATTR:  description: text (AMBIGUOUS (SELECT LEVEL))
  ATTR:  purpose: text *** Multiple Select Case Sources ***
  ATTR:  consequence: text
  ATTR:  name: label *** Multiple Select Case Sources ***

  action_method_relationship (*ENTITY*):
  ATTR:  related_method: action_method
  ATTR:  description: text (AMBIGUOUS (SELECT LEVEL))
  ATTR:  right_applied: information_right
  ATTR:  relating: information_usage_right *** Multiple Select Case Sources ***
  ATTR:  right_usage: information_usage_right
  ATTR:  related: information_usage_right *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***
  ATTR:  relating_method: action_method

  action_property (*ENTITY*):
  ATTR:  description: text (AMBIGUOUS (SELECT LEVEL))
  ATTR:  definition: characterized_action_definition (AMBIGUOUS (SELECT LEVEL))
  ATTR:  name: label *** Multiple Select Case Sources ***

  action_property_representation (*ENTITY*):
  ATTR:  representation: representation
  ATTR:  description: text (AMBIGUOUS (SELECT LEVEL))
  ATTR:  property: action_property
  ATTR:  name: label *** Multiple Select Case Sources ***

  applied_action_assignment (*ENTITY*):
  ATTR:  role: object_role *** Multiple Select Case Sources ***
  ATTR:  items: SET [1 : ?] OF action_items (AMBIGUOUS (SELECT LEVEL))
  ATTR:  assigned_action: action

  applied_action_method_assignment (*ENTITY*):
  ATTR:  role: action_method_role *** Multiple Select Case Sources ***
  ATTR:  items: SET [1 : ?] OF action_method_items (AMBIGUOUS (SELECT LEVEL))
  ATTR:  assigned_action_method: action_method

  applied_classification_assignment (*ENTITY*):
  ATTR:  role: classification_role *** Multiple Select Case Sources ***
  ATTR:  items: SET [1 : ?] OF classification_item (AMBIGUOUS (SELECT LEVEL))
  ATTR:  assigned_class: group

  applied_description_text_assignment (*ENTITY*):
  ATTR:  description: description_text (AMBIGUOUS (SELECT LEVEL))
  ATTR:  items: SET [1 : ?] OF description_item (AMBIGUOUS (SELECT LEVEL))

  applied_description_text_assignment_relationship (*ENTITY*):
  ATTR:  description: text (AMBIGUOUS (SELECT LEVEL))
  ATTR:  relating: applied_description_text_assignment *** Multiple Select Case Sources ***
  ATTR:  relation_type: STRING *** Multiple Select Case Sources ***
  ATTR:  related: applied_description_text_assignment *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***

  applied_document_reference (*ENTITY*):
  ATTR:  role: object_role *** Multiple Select Case Sources ***
  ATTR:  items: SET [1 : ?] OF document_reference_item (AMBIGUOUS (SELECT LEVEL))
  ATTR:  source: label (AMBIGUOUS (SELECT LEVEL))
  ATTR:  assigned_document: document

  applied_document_usage_constraint_assignment (*ENTITY*):
  ATTR:  assigned_document_usage: document_usage_constraint
  ATTR:  role: document_usage_role *** Multiple Select Case Sources ***
  ATTR:  items: SET [1 : ?] OF document_reference_item (AMBIGUOUS (SELECT LEVEL))

  applied_external_identification_assignment (*ENTITY*):
  ATTR:  role: identification_role *** Multiple Select Case Sources ***
  ATTR:  items: SET [1 : ?] OF external_identification_item (AMBIGUOUS (SELECT LEVEL))
  ATTR:  assigned_id: identifier
  ATTR:  source: external_source (AMBIGUOUS (SELECT LEVEL))

  applied_identification_assignment (*ENTITY*):
  ATTR:  role: identification_role *** Multiple Select Case Sources ***
  ATTR:  items: SET [1 : ?] OF identification_item (AMBIGUOUS (SELECT LEVEL))
  ATTR:  assigned_id: identifier

  assembly_component_usage (*ENTITY*):
  ATTR:  description: text (AMBIGUOUS (SELECT LEVEL))
  ATTR:  leaf: product_definition_or_reference
  ATTR:  next_usage: next_assembly_usage_occurrence
  ATTR:  reference_designator: identifier
  ATTR:  upper_usage: assembly_component_usage
  ATTR:  quantity: measure_with_unit *** Multiple Select Case Sources ***
  ATTR:  root: product_definition
  ATTR:  relating_product_definition: product_definition_or_reference *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  product_definition_occurrence_id: identifier
  ATTR:  location: LIST [1 : ?] OF UNIQUE next_assembly_usage_occurrence
  ATTR:  related_product_definition: product_definition_or_reference *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  assembly_component_usage_substitute (*ENTITY*):
  ATTR:  substitute: assembly_component_usage
  ATTR:  base: assembly_component_usage
  ATTR:  definition: text (AMBIGUOUS (SELECT LEVEL))
  ATTR:  name: label *** Multiple Select Case Sources ***

  class_system (*ENTITY*):
  ATTR:  description: text (AMBIGUOUS (SELECT LEVEL))
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  conditional_effectivity (*ENTITY*):
  ATTR:  description: (AMBIGUOUS (CASE LEVEL))
  ATTR:  purpose: text *** Multiple Select Case Sources ***
  ATTR:  consequence: text
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  name: (AMBIGUOUS (CASE LEVEL))

  configuration_design (*ENTITY*):
  ATTR:  description: text (AMBIGUOUS (SELECT LEVEL))
  ATTR:  design: configuration_design_item
  ATTR:  configuration: configuration_item *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  configuration_effectivity (*ENTITY*):
  ATTR:  description: text (AMBIGUOUS (SELECT LEVEL))
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  configuration: configuration_design *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***
  ATTR:  usage: product_definition_relationship

  configured_effectivity_assignment (*ENTITY*):
  ATTR:  role: object_role *** Multiple Select Case Sources ***
  ATTR:  items: SET [1 : ?] OF configured_effectivity_item (AMBIGUOUS (SELECT LEVEL))
  ATTR:  assigned_effectivity: effectivity

  document (*ENTITY*):
  ATTR:  description: text (AMBIGUOUS (SELECT LEVEL))
  ATTR:  kind: document_type
  ATTR:  representation_types: SET [0 : ?] OF document_representation_type
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  document_file (*ENTITY*):
  ATTR:  description: (AMBIGUOUS (CASE LEVEL))
  ATTR:  kind: document_type
  ATTR:  representation_types: SET [0 : ?] OF document_representation_type
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  name: (AMBIGUOUS (CASE LEVEL))

  draughting_model (*ENTITY*):
  ATTR:  description: text (AMBIGUOUS (SELECT LEVEL))
  ATTR:  items: SET [1 : ?] OF draughting_model_item_select (AMBIGUOUS (SELECT LEVEL))
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  context_of_items: representation_context *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  drawing_revision (*ENTITY*):
  ATTR:  areas: SET [1 : ?] OF area_in_set
  ATTR:  intended_scale: text
  ATTR:  revision_identifier: identifier *** Multiple Select Case Sources ***
  ATTR:  drawing_identifier: drawing_definition

  envelope (*ENTITY*):
  ATTR:  description: (AMBIGUOUS (CASE LEVEL))
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  frame_of_reference: SET [1 : ?] OF product_context (AMBIGUOUS (SELECT LEVEL))
  ATTR:  name: (AMBIGUOUS (CASE LEVEL))

  evaluated_characteristic_of_product_as_individual_test_result (*ENTITY*):
  ATTR:  description: (AMBIGUOUS (CASE LEVEL))
  ATTR:  items: SET [1 : ?] OF representation_item (AMBIGUOUS (SELECT LEVEL))
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  context_of_items: representation_context *** Multiple Select Case Sources ***
  ATTR:  rep_1: representation_or_representation_reference
  ATTR:  rep_2: representation_or_representation_reference
  ATTR:  name: (AMBIGUOUS (CASE LEVEL))

  evidence (*ENTITY*):
  ATTR:  role: object_role *** Multiple Select Case Sources ***
  ATTR:  items: SET [1 : ?] OF evidence_item (AMBIGUOUS (SELECT LEVEL))
  ATTR:  assigned_group: group *** Multiple Select Case Sources ***

  exclusive_product_concept_feature_category (*ENTITY*):
  ATTR:  description: text (AMBIGUOUS (SELECT LEVEL))
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  executed_action (*ENTITY*):
  ATTR:  description: text (AMBIGUOUS (SELECT LEVEL))
  ATTR:  directive: action_directive
  ATTR:  chosen_method: action_method
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  externally_defined_general_property (*ENTITY*):
  ATTR:  item_id: source_item
  ATTR:  description: text (AMBIGUOUS (SELECT LEVEL))
  ATTR:  source: external_source (AMBIGUOUS (SELECT LEVEL))
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  general_property (*ENTITY*):
  ATTR:  description: text (AMBIGUOUS (SELECT LEVEL))
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  group (*ENTITY*):
  ATTR:  description: text (AMBIGUOUS (SELECT LEVEL))
  ATTR:  items: SET [0 : ?] OF product_definition (AMBIGUOUS (SELECT LEVEL))
  ATTR:  of_shape: mated_part_relationship
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  assigned_group: mated_part_relationship *** Multiple Select Case Sources ***
  ATTR:  definition: product_definition_usage_relationship (AMBIGUOUS (SELECT LEVEL))
  ATTR:  name: label *** Multiple Select Case Sources ***

  identification_assignment_relationship (*ENTITY*):
  ATTR:  description: text (AMBIGUOUS (SELECT LEVEL))
  ATTR:  relating_identification_assignment: identification_assignment
  ATTR:  related_identification_assignment: identification_assignment
  ATTR:  name: label *** Multiple Select Case Sources ***

  interface_connection (*ENTITY*):
  ATTR:  description: text (AMBIGUOUS (SELECT LEVEL))
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  interface_connector_as_planned (*ENTITY*):
  ATTR:  description: text (AMBIGUOUS (SELECT LEVEL))
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  of_product: product

  interface_connector_as_realized (*ENTITY*):
  ATTR:  description: text (AMBIGUOUS (SELECT LEVEL))
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  of_product: product

  interface_connector_design (*ENTITY*):
  ATTR:  description: text (AMBIGUOUS (SELECT LEVEL))
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  of_product: product

  interface_connector_occurrence (*ENTITY*):
  ATTR:  description: text (AMBIGUOUS (SELECT LEVEL))
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  interface_definition_connection (*ENTITY*):
  ATTR:  description: text (AMBIGUOUS (SELECT LEVEL))
  ATTR:  relating_product_definition: product_definition_or_reference *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  related_product_definition: product_definition_or_reference *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  interface_definition_for (*ENTITY*):
  ATTR:  description: text (AMBIGUOUS (SELECT LEVEL))
  ATTR:  relating_product_definition: product_definition_or_reference *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  related_product_definition: product_definition_or_reference *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  make_from_usage_option (*ENTITY*):
  ATTR:  description: text (AMBIGUOUS (SELECT LEVEL))
  ATTR:  ranking_rationale: text
  ATTR:  quantity: measure_with_unit *** Multiple Select Case Sources ***
  ATTR:  ranking: INTEGER
  ATTR:  relating_product_definition: product_definition_or_reference *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  related_product_definition: product_definition_or_reference *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  material_designation (*ENTITY*):
  ATTR:  definitions: SET [1 : ?] OF characterized_definition
  ATTR:  name: label *** Multiple Select Case Sources ***

  mechanical_design_geometric_presentation_representation (*ENTITY*):
  ATTR:  description: text (AMBIGUOUS (SELECT LEVEL))
  ATTR:  items: SET [1 : ?] OF mechanical_design_geometric_presentation_representation_items
    (AMBIGUOUS (SELECT LEVEL))
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  context_of_items: representation_context *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  organizational_project (*ENTITY*):
  ATTR:  description: text (AMBIGUOUS (SELECT LEVEL))
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  responsible_organizations: SET [1 : ?] OF organization
  ATTR:  name: label *** Multiple Select Case Sources ***

  package_product_concept_feature (*ENTITY*):
  ATTR:  description: text (AMBIGUOUS (SELECT LEVEL))
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  presentation_area (*ENTITY*):
  ATTR:  description: text (AMBIGUOUS (SELECT LEVEL))
  ATTR:  items: SET [1 : ?] OF representation_item (AMBIGUOUS (SELECT LEVEL))
  ATTR:  revision_identifier: identifier *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  context_of_items: geometric_representation_context *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  process_plan (*ENTITY*):
  ATTR:  description: text (AMBIGUOUS (SELECT LEVEL))
  ATTR:  chosen_method: action_method
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  product (*ENTITY*):
  ATTR:  description: text (AMBIGUOUS (SELECT LEVEL))
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  frame_of_reference: SET [1 : ?] OF product_context (AMBIGUOUS (SELECT LEVEL))
  ATTR:  name: label *** Multiple Select Case Sources ***

  product_class (*ENTITY*):
  ATTR:  description: (AMBIGUOUS (CASE LEVEL))
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  market_context: product_concept_context
  ATTR:  name: (AMBIGUOUS (CASE LEVEL))

  product_concept (*ENTITY*):
  ATTR:  description: text (AMBIGUOUS (SELECT LEVEL))
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  market_context: product_concept_context
  ATTR:  name: label *** Multiple Select Case Sources ***

  product_concept_feature (*ENTITY*):
  ATTR:  description: text (AMBIGUOUS (SELECT LEVEL))
  ATTR:  condition: concept_feature_relationship_with_condition
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  product_concept_feature_category (*ENTITY*):
  ATTR:  description: text (AMBIGUOUS (SELECT LEVEL))
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  product_definition (*ENTITY*):
  ATTR:  description: text (AMBIGUOUS (SELECT LEVEL))
  ATTR:  defined_version: collection_version
  ATTR:  documentation_ids: SET [1 : ?] OF document
  ATTR:  relating_product_definition: linear_array_placement_group_component *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  frame_of_reference: product_definition_context (AMBIGUOUS (SELECT LEVEL))
  ATTR:  definition: assembly_component (AMBIGUOUS (SELECT LEVEL))
  ATTR:  related_product_definition: linear_array_placement_group_component *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***
  ATTR:  formation: product_definition_formation

  product_definition_formation (*ENTITY*):
  ATTR:  description: text (AMBIGUOUS (SELECT LEVEL))
  ATTR:  status: STRING
  ATTR:  of_collection: collection
  ATTR:  make_or_buy: source
  ATTR:  specification: SET [1 : ?] OF product_definition
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  of_product: product

  product_definition_formation_relationship (*ENTITY*):
  ATTR:  description: text (AMBIGUOUS (SELECT LEVEL))
  ATTR:  realized_product: product_definition_formation
  ATTR:  related_product_definition_formation: product_definition_formation
  ATTR:  product_design_version: product_definition_formation
  ATTR:  relating_product_definition_formation: product_definition_formation
  ATTR:  relating_version: collection_version
  ATTR:  relation_type: STRING *** Multiple Select Case Sources ***
  ATTR:  planned_product: product_definition_formation
  ATTR:  successor: collection_version
  ATTR:  individual_product: product_definition_formation *** Multiple Select Case Sources ***
  ATTR:  related_version: collection_version
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***
  ATTR:  predecessor: collection_version

  product_definition_group_assignment (*ENTITY*):
  ATTR:  role: object_role *** Multiple Select Case Sources ***
  ATTR:  items: SET [1 : 1] OF product_definition_or_product_definition_relationship
    (AMBIGUOUS (SELECT LEVEL))
  ATTR:  assigned_group: product_definition_element_relationship *** Multiple Select Case Sources ***

  product_definition_relationship (*ENTITY*):
  ATTR:  description: text (AMBIGUOUS (SELECT LEVEL))
  ATTR:  leaf: product_definition_or_reference
  ATTR:  next_usage: next_assembly_usage_occurrence
  ATTR:  reference_designator: identifier
  ATTR:  constituent_amount: SET [1 : ?] OF characterized_product_composition_value
  ATTR:  upper_usage: assembly_component_usage
  ATTR:  ranking_rationale: text
  ATTR:  quantity: (AMBIGUOUS (CASE LEVEL))
  ATTR:  class: label
  ATTR:  items: SET [0 : ?] OF product_definition (AMBIGUOUS (SELECT LEVEL))
  ATTR:  of_shape: mated_part_relationship
  ATTR:  ranking: INTEGER
  ATTR:  composition_basis: label
  ATTR:  determination_method: text
  ATTR:  root: product_definition
  ATTR:  relating_product_definition: product_definition_or_reference *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  product_definition_occurrence_id: identifier
  ATTR:  assigned_group: mated_part_relationship *** Multiple Select Case Sources ***
  ATTR:  location: LIST [1 : ?] OF UNIQUE next_assembly_usage_occurrence
  ATTR:  definition: mated_part_relationship (AMBIGUOUS (SELECT LEVEL))
  ATTR:  related_product_definition: product_definition_or_reference *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  product_definition_usage (*ENTITY*):
  ATTR:  description: text (AMBIGUOUS (SELECT LEVEL))
  ATTR:  leaf: product_definition_or_reference
  ATTR:  next_usage: next_assembly_usage_occurrence
  ATTR:  reference_designator: identifier
  ATTR:  upper_usage: assembly_component_usage
  ATTR:  ranking_rationale: text
  ATTR:  quantity: (AMBIGUOUS (CASE LEVEL))
  ATTR:  ranking: INTEGER
  ATTR:  root: product_definition
  ATTR:  relating_product_definition: product_definition_or_reference *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  product_definition_occurrence_id: identifier
  ATTR:  location: LIST [1 : ?] OF UNIQUE next_assembly_usage_occurrence
  ATTR:  related_product_definition: product_definition_or_reference *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  product_design_to_individual (*ENTITY*):
  ATTR:  description: text (AMBIGUOUS (SELECT LEVEL))
  ATTR:  individual_product: product *** Multiple Select Case Sources ***
  ATTR:  related_product: product
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  relating_product: product
  ATTR:  name: label *** Multiple Select Case Sources ***
  ATTR:  product_design: product

  product_design_version_to_individual (*ENTITY*):
  ATTR:  description: text (AMBIGUOUS (SELECT LEVEL))
  ATTR:  related_product_definition_formation: product_definition_formation
  ATTR:  product_design_version: product_definition_formation
  ATTR:  relating_product_definition_formation: product_definition_formation
  ATTR:  individual_product: product_definition_formation *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  product_group (*ENTITY*):
  ATTR:  description: text (AMBIGUOUS (SELECT LEVEL))
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  product_group_membership (*ENTITY*):
  ATTR:  description: text (AMBIGUOUS (SELECT LEVEL))
  ATTR:  role: object_role *** Multiple Select Case Sources ***
  ATTR:  member: product_select
  ATTR:  assigned_group: group *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  product_group_relationship (*ENTITY*):
  ATTR:  description: text (AMBIGUOUS (SELECT LEVEL))
  ATTR:  related_group: group
  ATTR:  relating_group: group
  ATTR:  name: label *** Multiple Select Case Sources ***

  product_identification (*ENTITY*):
  ATTR:  description: (AMBIGUOUS (CASE LEVEL))
  ATTR:  purpose: label *** Multiple Select Case Sources ***
  ATTR:  item_concept: product_class
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  name: (AMBIGUOUS (CASE LEVEL))

  product_process_plan (*ENTITY*):
  ATTR:  description: text (AMBIGUOUS (SELECT LEVEL))
  ATTR:  chosen_method: action_method
  ATTR:  identification: identifier
  ATTR:  product_definitions: SET [1 : ?] OF process_product_association
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  product_relationship (*ENTITY*):
  ATTR:  description: text (AMBIGUOUS (SELECT LEVEL))
  ATTR:  related_message: structured_message
  ATTR:  related_collection: collection
  ATTR:  individual_product: product *** Multiple Select Case Sources ***
  ATTR:  related_product: product
  ATTR:  relating_collection: collection
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  relating_message: structured_message
  ATTR:  relating_product: product
  ATTR:  name: label *** Multiple Select Case Sources ***
  ATTR:  product_design: product

  property_definition (*ENTITY*):
  ATTR:  description: text (AMBIGUOUS (SELECT LEVEL))
  ATTR:  items: SET [0 : ?] OF product_definition (AMBIGUOUS (SELECT LEVEL))
  ATTR:  of_shape: mated_part_relationship
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  representation_relation: kinematic_property_definition_representation
  ATTR:  assigned_group: mated_part_relationship *** Multiple Select Case Sources ***
  ATTR:  definition: characterized_definition (AMBIGUOUS (SELECT LEVEL))
  ATTR:  name: label *** Multiple Select Case Sources ***

  property_definition_representation (*ENTITY*):
  ATTR:  description: text (AMBIGUOUS (SELECT LEVEL))
  ATTR:  dependent_environment: data_environment
  ATTR:  used_representation: representation
  ATTR:  base: (AMBIGUOUS (CASE LEVEL))
  ATTR:  definition: represented_definition (AMBIGUOUS (SELECT LEVEL))
  ATTR:  name: label *** Multiple Select Case Sources ***

  representation (*ENTITY*):
  ATTR:  criteria_inspected: (AMBIGUOUS (CASE LEVEL))
  ATTR:  description: text (AMBIGUOUS (SELECT LEVEL))
  ATTR:  controlling_joints: (AMBIGUOUS (CASE LEVEL))
  ATTR:  character_box: planar_extent
  ATTR:  parent: (AMBIGUOUS (CASE LEVEL))
  ATTR:  cm_link: variational_current_representation_relationship
  ATTR:  items: SET [1 : ?] OF representation_item (AMBIGUOUS (SELECT LEVEL))
  ATTR:  outlines: SET [1 : ?] OF annotation_fill_area
  ATTR:  required_general_accuracy: SET [1 : ?] OF shape_measurement_accuracy
  ATTR:  associated_shape_representation: SET [0 : 1] OF kinematic_link_representation_association
  ATTR:  baseline_ratio: ratio_measure
  ATTR:  revision_identifier: identifier *** Multiple Select Case Sources ***
  ATTR:  size: presentation_size
  ATTR:  tessellation_accuracy_parameters: SET [1 : ?] OF tessellation_accuracy_parameter_item
  ATTR:  represented_joints: SET [1 : ?] OF kinematic_joint
  ATTR:  box_height: length_measure
  ATTR:  strokes: SET [1 : ?] OF curve
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  applied_general_accuracy: SET [1 : ?] OF shape_measurement_accuracy
  ATTR:  context_of_items: representation_context *** Multiple Select Case Sources ***
  ATTR:  neutral_sketch_semantics: curves_or_area
  ATTR:  represented_link: kinematic_link
  ATTR:  represented_topology: kinematic_topology_representation_select
  ATTR:  uncertainty: SET [1 : ?] OF uncertainty_measure_with_unit
  ATTR:  name: label *** Multiple Select Case Sources ***
  ATTR:  represented_mechanism: mechanism_representation

  requirement_assignment (*ENTITY*):
  ATTR:  description: (AMBIGUOUS (CASE LEVEL))
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  name: (AMBIGUOUS (CASE LEVEL))

  requirement_source (*ENTITY*):
  ATTR:  description: text (AMBIGUOUS (SELECT LEVEL))
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  requirement_view_definition_relationship (*ENTITY*):
  ATTR:  description: text (AMBIGUOUS (SELECT LEVEL))
  ATTR:  relating_product_definition: product_definition_or_reference *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  related_product_definition: product_definition_or_reference *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  resource_property (*ENTITY*):
  ATTR:  description: text (AMBIGUOUS (SELECT LEVEL))
  ATTR:  resource: characterized_resource_definition
  ATTR:  name: label *** Multiple Select Case Sources ***

  shape_representation (*ENTITY*):
  ATTR:  description: text (AMBIGUOUS (SELECT LEVEL))
  ATTR:  items: SET [1 : ?] OF representation_item (AMBIGUOUS (SELECT LEVEL))
  ATTR:  tessellation_accuracy_parameters: SET [1 : ?] OF tessellation_accuracy_parameter_item
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  context_of_items: representation_context *** Multiple Select Case Sources ***
  ATTR:  neutral_sketch_semantics: curves_or_area
  ATTR:  name: label *** Multiple Select Case Sources ***

  structured_message (*ENTITY*):
  ATTR:  description: text (AMBIGUOUS (SELECT LEVEL))
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  frame_of_reference: SET [1 : ?] OF product_context (AMBIGUOUS (SELECT LEVEL))
  ATTR:  name: label *** Multiple Select Case Sources ***

  validation (*ENTITY*):
  ATTR:  description: text (AMBIGUOUS (SELECT LEVEL))
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  verification (*ENTITY*):
  ATTR:  description: text (AMBIGUOUS (SELECT LEVEL))
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  name: label *** Multiple Select Case Sources ***

  versioned_action_request (*ENTITY*):
  ATTR:  description: text (AMBIGUOUS (SELECT LEVEL))
  ATTR:  purpose: text *** Multiple Select Case Sources ***
  ATTR:  id: identifier *** Multiple Select Case Sources ***
  ATTR:  version: label

*/

/** SELECT type
- EXPRESS:
```express
  TYPE security_classification_item = SELECT
    ( action (*ENTITY*),
     action_directive (*ENTITY*),
     action_method (*ENTITY*),
     action_method_relationship (*ENTITY*),
     action_property (*ENTITY*),
     action_property_representation (*ENTITY*),
     applied_action_assignment (*ENTITY*),
     applied_action_method_assignment (*ENTITY*),
     applied_classification_assignment (*ENTITY*),
     applied_description_text_assignment (*ENTITY*),
     applied_description_text_assignment_relationship (*ENTITY*),
     applied_document_reference (*ENTITY*),
     applied_document_usage_constraint_assignment (*ENTITY*),
     applied_external_identification_assignment (*ENTITY*),
     applied_identification_assignment (*ENTITY*),
     assembly_component_usage (*ENTITY*),
     assembly_component_usage_substitute (*ENTITY*),
     class_system (*ENTITY*),
     conditional_effectivity (*ENTITY*),
     configuration_design (*ENTITY*),
     configuration_effectivity (*ENTITY*),
     configured_effectivity_assignment (*ENTITY*),
     document (*ENTITY*),
     document_file (*ENTITY*),
     draughting_model (*ENTITY*),
     drawing_revision (*ENTITY*),
     envelope (*ENTITY*),
     evaluated_characteristic_of_product_as_individual_test_result (*ENTITY*),
     evidence (*ENTITY*),
     exclusive_product_concept_feature_category (*ENTITY*),
     executed_action (*ENTITY*),
     externally_defined_general_property (*ENTITY*),
     general_property (*ENTITY*),
     group (*ENTITY*),
     identification_assignment_relationship (*ENTITY*),
     interface_connection (*ENTITY*),
     interface_connector_as_planned (*ENTITY*),
     interface_connector_as_realized (*ENTITY*),
     interface_connector_design (*ENTITY*),
     interface_connector_occurrence (*ENTITY*),
     interface_definition_connection (*ENTITY*),
     interface_definition_for (*ENTITY*),
     make_from_usage_option (*ENTITY*),
     material_designation (*ENTITY*),
     mechanical_design_geometric_presentation_representation (*ENTITY*),
     organizational_project (*ENTITY*),
     package_product_concept_feature (*ENTITY*),
     presentation_area (*ENTITY*),
     process_plan (*ENTITY*),
     product (*ENTITY*),
     product_class (*ENTITY*),
     product_concept (*ENTITY*),
     product_concept_feature (*ENTITY*),
     product_concept_feature_category (*ENTITY*),
     product_definition (*ENTITY*),
     product_definition_formation (*ENTITY*),
     product_definition_formation_relationship (*ENTITY*),
     product_definition_group_assignment (*ENTITY*),
     product_definition_relationship (*ENTITY*),
     product_definition_usage (*ENTITY*),
     product_design_to_individual (*ENTITY*),
     product_design_version_to_individual (*ENTITY*),
     product_group (*ENTITY*),
     product_group_membership (*ENTITY*),
     product_group_relationship (*ENTITY*),
     product_identification (*ENTITY*),
     product_process_plan (*ENTITY*),
     product_relationship (*ENTITY*),
     property_definition (*ENTITY*),
     property_definition_representation (*ENTITY*),
     representation (*ENTITY*),
     requirement_assignment (*ENTITY*),
     requirement_source (*ENTITY*),
     requirement_view_definition_relationship (*ENTITY*),
     resource_property (*ENTITY*),
     shape_representation (*ENTITY*),
     structured_message (*ENTITY*),
     validation (*ENTITY*),
     verification (*ENTITY*),
     versioned_action_request (*ENTITY*) );
  END_TYPE; -- security_classification_item (line:5209 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public enum sSECURITY_CLASSIFICATION_ITEM : SDAIValue, AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sSECURITY_CLASSIFICATION_ITEM__type {

    /// SELECT case ``eACTION`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _ACTION(eACTION)	// (ENTITY)

    /// SELECT case ``eACTION_DIRECTIVE`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _ACTION_DIRECTIVE(eACTION_DIRECTIVE)	// (ENTITY)

    /// SELECT case ``eACTION_METHOD`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _ACTION_METHOD(eACTION_METHOD)	// (ENTITY)

    /// SELECT case ``eACTION_METHOD_RELATIONSHIP`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _ACTION_METHOD_RELATIONSHIP(eACTION_METHOD_RELATIONSHIP)	// (ENTITY)

    /// SELECT case ``eACTION_PROPERTY`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _ACTION_PROPERTY(eACTION_PROPERTY)	// (ENTITY)

    /// SELECT case ``eACTION_PROPERTY_REPRESENTATION`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _ACTION_PROPERTY_REPRESENTATION(eACTION_PROPERTY_REPRESENTATION)	// (ENTITY)

    /// SELECT case ``eAPPLIED_ACTION_ASSIGNMENT`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _APPLIED_ACTION_ASSIGNMENT(eAPPLIED_ACTION_ASSIGNMENT)	// (ENTITY)

    /// SELECT case ``eAPPLIED_ACTION_METHOD_ASSIGNMENT`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _APPLIED_ACTION_METHOD_ASSIGNMENT(eAPPLIED_ACTION_METHOD_ASSIGNMENT)	// (ENTITY)

    /// SELECT case ``eAPPLIED_CLASSIFICATION_ASSIGNMENT`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _APPLIED_CLASSIFICATION_ASSIGNMENT(eAPPLIED_CLASSIFICATION_ASSIGNMENT)	// (ENTITY)

    /// SELECT case ``eAPPLIED_DESCRIPTION_TEXT_ASSIGNMENT`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _APPLIED_DESCRIPTION_TEXT_ASSIGNMENT(eAPPLIED_DESCRIPTION_TEXT_ASSIGNMENT)	// (ENTITY)

    /// SELECT case ``eAPPLIED_DESCRIPTION_TEXT_ASSIGNMENT_RELATIONSHIP`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _APPLIED_DESCRIPTION_TEXT_ASSIGNMENT_RELATIONSHIP(
      eAPPLIED_DESCRIPTION_TEXT_ASSIGNMENT_RELATIONSHIP)	// (ENTITY)

    /// SELECT case ``eAPPLIED_DOCUMENT_REFERENCE`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _APPLIED_DOCUMENT_REFERENCE(eAPPLIED_DOCUMENT_REFERENCE)	// (ENTITY)

    /// SELECT case ``eAPPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _APPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT(
      eAPPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT)	// (ENTITY)

    /// SELECT case ``eAPPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(
      eAPPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT)	// (ENTITY)

    /// SELECT case ``eAPPLIED_IDENTIFICATION_ASSIGNMENT`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _APPLIED_IDENTIFICATION_ASSIGNMENT(eAPPLIED_IDENTIFICATION_ASSIGNMENT)	// (ENTITY)

    /// SELECT case ``eASSEMBLY_COMPONENT_USAGE`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _ASSEMBLY_COMPONENT_USAGE(eASSEMBLY_COMPONENT_USAGE)	// (ENTITY)

    /// SELECT case ``eASSEMBLY_COMPONENT_USAGE_SUBSTITUTE`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(eASSEMBLY_COMPONENT_USAGE_SUBSTITUTE)	// (ENTITY)

    /// SELECT case ``eCLASS_SYSTEM`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _CLASS_SYSTEM(eCLASS_SYSTEM)	// (ENTITY)

    /// SELECT case ``eCONDITIONAL_EFFECTIVITY`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _CONDITIONAL_EFFECTIVITY(eCONDITIONAL_EFFECTIVITY)	// (ENTITY)

    /// SELECT case ``eCONFIGURATION_DESIGN`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _CONFIGURATION_DESIGN(eCONFIGURATION_DESIGN)	// (ENTITY)

    /// SELECT case ``eCONFIGURATION_EFFECTIVITY`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _CONFIGURATION_EFFECTIVITY(eCONFIGURATION_EFFECTIVITY)	// (ENTITY)

    /// SELECT case ``eCONFIGURED_EFFECTIVITY_ASSIGNMENT`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _CONFIGURED_EFFECTIVITY_ASSIGNMENT(eCONFIGURED_EFFECTIVITY_ASSIGNMENT)	// (ENTITY)

    /// SELECT case ``eDOCUMENT`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _DOCUMENT(eDOCUMENT)	// (ENTITY)

    /// SELECT case ``eDOCUMENT_FILE`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _DOCUMENT_FILE(eDOCUMENT_FILE)	// (ENTITY)

    /// SELECT case ``eDRAUGHTING_MODEL`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _DRAUGHTING_MODEL(eDRAUGHTING_MODEL)	// (ENTITY)

    /// SELECT case ``eDRAWING_REVISION`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _DRAWING_REVISION(eDRAWING_REVISION)	// (ENTITY)

    /// SELECT case ``eENVELOPE`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _ENVELOPE(eENVELOPE)	// (ENTITY)

    /// SELECT case ``eEVALUATED_CHARACTERISTIC_OF_PRODUCT_AS_INDIVIDUAL_TEST_RESULT`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _EVALUATED_CHARACTERISTIC_OF_PRODUCT_AS_INDIVIDUAL_TEST_RESULT(
      eEVALUATED_CHARACTERISTIC_OF_PRODUCT_AS_INDIVIDUAL_TEST_RESULT)	// (ENTITY)

    /// SELECT case ``eEVIDENCE`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _EVIDENCE(eEVIDENCE)	// (ENTITY)

    /// SELECT case ``eEXCLUSIVE_PRODUCT_CONCEPT_FEATURE_CATEGORY`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _EXCLUSIVE_PRODUCT_CONCEPT_FEATURE_CATEGORY(
      eEXCLUSIVE_PRODUCT_CONCEPT_FEATURE_CATEGORY)	// (ENTITY)

    /// SELECT case ``eEXECUTED_ACTION`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _EXECUTED_ACTION(eEXECUTED_ACTION)	// (ENTITY)

    /// SELECT case ``eEXTERNALLY_DEFINED_GENERAL_PROPERTY`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _EXTERNALLY_DEFINED_GENERAL_PROPERTY(eEXTERNALLY_DEFINED_GENERAL_PROPERTY)	// (ENTITY)

    /// SELECT case ``eGENERAL_PROPERTY`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _GENERAL_PROPERTY(eGENERAL_PROPERTY)	// (ENTITY)

    /// SELECT case ``eGROUP`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _GROUP(eGROUP)	// (ENTITY)

    /// SELECT case ``eIDENTIFICATION_ASSIGNMENT_RELATIONSHIP`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _IDENTIFICATION_ASSIGNMENT_RELATIONSHIP(eIDENTIFICATION_ASSIGNMENT_RELATIONSHIP)	// (ENTITY)

    /// SELECT case ``eINTERFACE_CONNECTION`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _INTERFACE_CONNECTION(eINTERFACE_CONNECTION)	// (ENTITY)

    /// SELECT case ``eINTERFACE_CONNECTOR_AS_PLANNED`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _INTERFACE_CONNECTOR_AS_PLANNED(eINTERFACE_CONNECTOR_AS_PLANNED)	// (ENTITY)

    /// SELECT case ``eINTERFACE_CONNECTOR_AS_REALIZED`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _INTERFACE_CONNECTOR_AS_REALIZED(eINTERFACE_CONNECTOR_AS_REALIZED)	// (ENTITY)

    /// SELECT case ``eINTERFACE_CONNECTOR_DESIGN`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _INTERFACE_CONNECTOR_DESIGN(eINTERFACE_CONNECTOR_DESIGN)	// (ENTITY)

    /// SELECT case ``eINTERFACE_CONNECTOR_OCCURRENCE`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _INTERFACE_CONNECTOR_OCCURRENCE(eINTERFACE_CONNECTOR_OCCURRENCE)	// (ENTITY)

    /// SELECT case ``eINTERFACE_DEFINITION_CONNECTION`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _INTERFACE_DEFINITION_CONNECTION(eINTERFACE_DEFINITION_CONNECTION)	// (ENTITY)

    /// SELECT case ``eINTERFACE_DEFINITION_FOR`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _INTERFACE_DEFINITION_FOR(eINTERFACE_DEFINITION_FOR)	// (ENTITY)

    /// SELECT case ``eMAKE_FROM_USAGE_OPTION`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _MAKE_FROM_USAGE_OPTION(eMAKE_FROM_USAGE_OPTION)	// (ENTITY)

    /// SELECT case ``eMATERIAL_DESIGNATION`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _MATERIAL_DESIGNATION(eMATERIAL_DESIGNATION)	// (ENTITY)

    /// SELECT case ``eMECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(
      eMECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION)	// (ENTITY)

    /// SELECT case ``eORGANIZATIONAL_PROJECT`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _ORGANIZATIONAL_PROJECT(eORGANIZATIONAL_PROJECT)	// (ENTITY)

    /// SELECT case ``ePACKAGE_PRODUCT_CONCEPT_FEATURE`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _PACKAGE_PRODUCT_CONCEPT_FEATURE(ePACKAGE_PRODUCT_CONCEPT_FEATURE)	// (ENTITY)

    /// SELECT case ``ePRESENTATION_AREA`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _PRESENTATION_AREA(ePRESENTATION_AREA)	// (ENTITY)

    /// SELECT case ``ePROCESS_PLAN`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _PROCESS_PLAN(ePROCESS_PLAN)	// (ENTITY)

    /// SELECT case ``ePRODUCT`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _PRODUCT(ePRODUCT)	// (ENTITY)

    /// SELECT case ``ePRODUCT_CLASS`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _PRODUCT_CLASS(ePRODUCT_CLASS)	// (ENTITY)

    /// SELECT case ``ePRODUCT_CONCEPT`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _PRODUCT_CONCEPT(ePRODUCT_CONCEPT)	// (ENTITY)

    /// SELECT case ``ePRODUCT_CONCEPT_FEATURE`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _PRODUCT_CONCEPT_FEATURE(ePRODUCT_CONCEPT_FEATURE)	// (ENTITY)

    /// SELECT case ``ePRODUCT_CONCEPT_FEATURE_CATEGORY`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _PRODUCT_CONCEPT_FEATURE_CATEGORY(ePRODUCT_CONCEPT_FEATURE_CATEGORY)	// (ENTITY)

    /// SELECT case ``ePRODUCT_DEFINITION`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _PRODUCT_DEFINITION(ePRODUCT_DEFINITION)	// (ENTITY)

    /// SELECT case ``ePRODUCT_DEFINITION_FORMATION`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _PRODUCT_DEFINITION_FORMATION(ePRODUCT_DEFINITION_FORMATION)	// (ENTITY)

    /// SELECT case ``ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP)	// (ENTITY)

    /// SELECT case ``ePRODUCT_DEFINITION_GROUP_ASSIGNMENT`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _PRODUCT_DEFINITION_GROUP_ASSIGNMENT(ePRODUCT_DEFINITION_GROUP_ASSIGNMENT)	// (ENTITY)

    /// SELECT case ``ePRODUCT_DEFINITION_RELATIONSHIP`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _PRODUCT_DEFINITION_RELATIONSHIP(ePRODUCT_DEFINITION_RELATIONSHIP)	// (ENTITY)

    /// SELECT case ``ePRODUCT_DEFINITION_USAGE`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _PRODUCT_DEFINITION_USAGE(ePRODUCT_DEFINITION_USAGE)	// (ENTITY)

    /// SELECT case ``ePRODUCT_DESIGN_TO_INDIVIDUAL`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _PRODUCT_DESIGN_TO_INDIVIDUAL(ePRODUCT_DESIGN_TO_INDIVIDUAL)	// (ENTITY)

    /// SELECT case ``ePRODUCT_DESIGN_VERSION_TO_INDIVIDUAL`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _PRODUCT_DESIGN_VERSION_TO_INDIVIDUAL(ePRODUCT_DESIGN_VERSION_TO_INDIVIDUAL)	// (ENTITY)

    /// SELECT case ``ePRODUCT_GROUP`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _PRODUCT_GROUP(ePRODUCT_GROUP)	// (ENTITY)

    /// SELECT case ``ePRODUCT_GROUP_MEMBERSHIP`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _PRODUCT_GROUP_MEMBERSHIP(ePRODUCT_GROUP_MEMBERSHIP)	// (ENTITY)

    /// SELECT case ``ePRODUCT_GROUP_RELATIONSHIP`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _PRODUCT_GROUP_RELATIONSHIP(ePRODUCT_GROUP_RELATIONSHIP)	// (ENTITY)

    /// SELECT case ``ePRODUCT_IDENTIFICATION`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _PRODUCT_IDENTIFICATION(ePRODUCT_IDENTIFICATION)	// (ENTITY)

    /// SELECT case ``ePRODUCT_PROCESS_PLAN`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _PRODUCT_PROCESS_PLAN(ePRODUCT_PROCESS_PLAN)	// (ENTITY)

    /// SELECT case ``ePRODUCT_RELATIONSHIP`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _PRODUCT_RELATIONSHIP(ePRODUCT_RELATIONSHIP)	// (ENTITY)

    /// SELECT case ``ePROPERTY_DEFINITION`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _PROPERTY_DEFINITION(ePROPERTY_DEFINITION)	// (ENTITY)

    /// SELECT case ``ePROPERTY_DEFINITION_REPRESENTATION`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _PROPERTY_DEFINITION_REPRESENTATION(ePROPERTY_DEFINITION_REPRESENTATION)	// (ENTITY)

    /// SELECT case ``eREPRESENTATION`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _REPRESENTATION(eREPRESENTATION)	// (ENTITY)

    /// SELECT case ``eREQUIREMENT_ASSIGNMENT`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _REQUIREMENT_ASSIGNMENT(eREQUIREMENT_ASSIGNMENT)	// (ENTITY)

    /// SELECT case ``eREQUIREMENT_SOURCE`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _REQUIREMENT_SOURCE(eREQUIREMENT_SOURCE)	// (ENTITY)

    /// SELECT case ``eREQUIREMENT_VIEW_DEFINITION_RELATIONSHIP`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(eREQUIREMENT_VIEW_DEFINITION_RELATIONSHIP)	// (ENTITY)

    /// SELECT case ``eRESOURCE_PROPERTY`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _RESOURCE_PROPERTY(eRESOURCE_PROPERTY)	// (ENTITY)

    /// SELECT case ``eSHAPE_REPRESENTATION`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _SHAPE_REPRESENTATION(eSHAPE_REPRESENTATION)	// (ENTITY)

    /// SELECT case ``eSTRUCTURED_MESSAGE`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _STRUCTURED_MESSAGE(eSTRUCTURED_MESSAGE)	// (ENTITY)

    /// SELECT case ``eVALIDATION`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _VALIDATION(eVALIDATION)	// (ENTITY)

    /// SELECT case ``eVERIFICATION`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _VERIFICATION(eVERIFICATION)	// (ENTITY)

    /// SELECT case ``eVERSIONED_ACTION_REQUEST`` (ENTITY) in ``sSECURITY_CLASSIFICATION_ITEM``
    case _VERSIONED_ACTION_REQUEST(eVERSIONED_ACTION_REQUEST)	// (ENTITY)

    //MARK: - CONSTRUCTORS
    public init(fundamental: FundamentalType) { self = fundamental }

    public init?<T: SDAIUnderlyingType>(possiblyFrom underlyingType: T?){
      return nil
    }

    public init?(possiblyFrom complex: SDAI.ComplexEntity?) {
      guard let complex = complex else { return nil }

      if let base = complex.entityReference(eACTION.self) {self = ._ACTION(base) }
      else if let base = complex.entityReference(eACTION_DIRECTIVE.self) {self = ._ACTION_DIRECTIVE(base) }
      else if let base = complex.entityReference(eACTION_METHOD.self) {self = ._ACTION_METHOD(base) }
      else if let base = complex.entityReference(eACTION_METHOD_RELATIONSHIP.self) {self = ._ACTION_METHOD_RELATIONSHIP(base) }
      else if let base = complex.entityReference(eACTION_PROPERTY.self) {self = ._ACTION_PROPERTY(base) }
      else if let base = complex.entityReference(eACTION_PROPERTY_REPRESENTATION.self) {self = ._ACTION_PROPERTY_REPRESENTATION(base) }
      else if let base = complex.entityReference(eAPPLIED_ACTION_ASSIGNMENT.self) {self = ._APPLIED_ACTION_ASSIGNMENT(base) }
      else if let base = complex.entityReference(eAPPLIED_ACTION_METHOD_ASSIGNMENT.self) {self = ._APPLIED_ACTION_METHOD_ASSIGNMENT(base) }
      else if let base = complex.entityReference(eAPPLIED_CLASSIFICATION_ASSIGNMENT.self) {self = ._APPLIED_CLASSIFICATION_ASSIGNMENT(base) }
      else if let base = complex.entityReference(eAPPLIED_DESCRIPTION_TEXT_ASSIGNMENT.self) {self = ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT(base) }
      else if let base = complex.entityReference(eAPPLIED_DESCRIPTION_TEXT_ASSIGNMENT_RELATIONSHIP.self) {self = ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT_RELATIONSHIP(base) }
      else if let base = complex.entityReference(eAPPLIED_DOCUMENT_REFERENCE.self) {self = ._APPLIED_DOCUMENT_REFERENCE(base) }
      else if let base = complex.entityReference(eAPPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT.self) {self = ._APPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT(base) }
      else if let base = complex.entityReference(eAPPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT.self) {self = ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(base) }
      else if let base = complex.entityReference(eAPPLIED_IDENTIFICATION_ASSIGNMENT.self) {self = ._APPLIED_IDENTIFICATION_ASSIGNMENT(base) }
      else if let base = complex.entityReference(eASSEMBLY_COMPONENT_USAGE.self) {self = ._ASSEMBLY_COMPONENT_USAGE(base) }
      else if let base = complex.entityReference(eASSEMBLY_COMPONENT_USAGE_SUBSTITUTE.self) {self = ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(base) }
      else if let base = complex.entityReference(eCLASS_SYSTEM.self) {self = ._CLASS_SYSTEM(base) }
      else if let base = complex.entityReference(eCONDITIONAL_EFFECTIVITY.self) {self = ._CONDITIONAL_EFFECTIVITY(base) }
      else if let base = complex.entityReference(eCONFIGURATION_DESIGN.self) {self = ._CONFIGURATION_DESIGN(base) }
      else if let base = complex.entityReference(eCONFIGURATION_EFFECTIVITY.self) {self = ._CONFIGURATION_EFFECTIVITY(base) }
      else if let base = complex.entityReference(eCONFIGURED_EFFECTIVITY_ASSIGNMENT.self) {self = ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(base) }
      else if let base = complex.entityReference(eDOCUMENT.self) {self = ._DOCUMENT(base) }
      else if let base = complex.entityReference(eDOCUMENT_FILE.self) {self = ._DOCUMENT_FILE(base) }
      else if let base = complex.entityReference(eDRAUGHTING_MODEL.self) {self = ._DRAUGHTING_MODEL(base) }
      else if let base = complex.entityReference(eDRAWING_REVISION.self) {self = ._DRAWING_REVISION(base) }
      else if let base = complex.entityReference(eENVELOPE.self) {self = ._ENVELOPE(base) }
      else if let base = complex.entityReference(eEVALUATED_CHARACTERISTIC_OF_PRODUCT_AS_INDIVIDUAL_TEST_RESULT.self) {self = ._EVALUATED_CHARACTERISTIC_OF_PRODUCT_AS_INDIVIDUAL_TEST_RESULT(base) }
      else if let base = complex.entityReference(eEVIDENCE.self) {self = ._EVIDENCE(base) }
      else if let base = complex.entityReference(eEXCLUSIVE_PRODUCT_CONCEPT_FEATURE_CATEGORY.self) {self = ._EXCLUSIVE_PRODUCT_CONCEPT_FEATURE_CATEGORY(base) }
      else if let base = complex.entityReference(eEXECUTED_ACTION.self) {self = ._EXECUTED_ACTION(base) }
      else if let base = complex.entityReference(eEXTERNALLY_DEFINED_GENERAL_PROPERTY.self) {self = ._EXTERNALLY_DEFINED_GENERAL_PROPERTY(base) }
      else if let base = complex.entityReference(eGENERAL_PROPERTY.self) {self = ._GENERAL_PROPERTY(base) }
      else if let base = complex.entityReference(eGROUP.self) {self = ._GROUP(base) }
      else if let base = complex.entityReference(eIDENTIFICATION_ASSIGNMENT_RELATIONSHIP.self) {self = ._IDENTIFICATION_ASSIGNMENT_RELATIONSHIP(base) }
      else if let base = complex.entityReference(eINTERFACE_CONNECTION.self) {self = ._INTERFACE_CONNECTION(base) }
      else if let base = complex.entityReference(eINTERFACE_CONNECTOR_AS_PLANNED.self) {self = ._INTERFACE_CONNECTOR_AS_PLANNED(base) }
      else if let base = complex.entityReference(eINTERFACE_CONNECTOR_AS_REALIZED.self) {self = ._INTERFACE_CONNECTOR_AS_REALIZED(base) }
      else if let base = complex.entityReference(eINTERFACE_CONNECTOR_DESIGN.self) {self = ._INTERFACE_CONNECTOR_DESIGN(base) }
      else if let base = complex.entityReference(eINTERFACE_CONNECTOR_OCCURRENCE.self) {self = ._INTERFACE_CONNECTOR_OCCURRENCE(base) }
      else if let base = complex.entityReference(eINTERFACE_DEFINITION_CONNECTION.self) {self = ._INTERFACE_DEFINITION_CONNECTION(base) }
      else if let base = complex.entityReference(eINTERFACE_DEFINITION_FOR.self) {self = ._INTERFACE_DEFINITION_FOR(base) }
      else if let base = complex.entityReference(eMAKE_FROM_USAGE_OPTION.self) {self = ._MAKE_FROM_USAGE_OPTION(base) }
      else if let base = complex.entityReference(eMATERIAL_DESIGNATION.self) {self = ._MATERIAL_DESIGNATION(base) }
      else if let base = complex.entityReference(eMECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION.self) {self = ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(base) }
      else if let base = complex.entityReference(eORGANIZATIONAL_PROJECT.self) {self = ._ORGANIZATIONAL_PROJECT(base) }
      else if let base = complex.entityReference(ePACKAGE_PRODUCT_CONCEPT_FEATURE.self) {self = ._PACKAGE_PRODUCT_CONCEPT_FEATURE(base) }
      else if let base = complex.entityReference(ePRESENTATION_AREA.self) {self = ._PRESENTATION_AREA(base) }
      else if let base = complex.entityReference(ePROCESS_PLAN.self) {self = ._PROCESS_PLAN(base) }
      else if let base = complex.entityReference(ePRODUCT.self) {self = ._PRODUCT(base) }
      else if let base = complex.entityReference(ePRODUCT_CLASS.self) {self = ._PRODUCT_CLASS(base) }
      else if let base = complex.entityReference(ePRODUCT_CONCEPT.self) {self = ._PRODUCT_CONCEPT(base) }
      else if let base = complex.entityReference(ePRODUCT_CONCEPT_FEATURE.self) {self = ._PRODUCT_CONCEPT_FEATURE(base) }
      else if let base = complex.entityReference(ePRODUCT_CONCEPT_FEATURE_CATEGORY.self) {self = ._PRODUCT_CONCEPT_FEATURE_CATEGORY(base) }
      else if let base = complex.entityReference(ePRODUCT_DEFINITION.self) {self = ._PRODUCT_DEFINITION(base) }
      else if let base = complex.entityReference(ePRODUCT_DEFINITION_FORMATION.self) {self = ._PRODUCT_DEFINITION_FORMATION(base) }
      else if let base = complex.entityReference(ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP.self) {self = ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(base) }
      else if let base = complex.entityReference(ePRODUCT_DEFINITION_GROUP_ASSIGNMENT.self) {self = ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(base) }
      else if let base = complex.entityReference(ePRODUCT_DEFINITION_RELATIONSHIP.self) {self = ._PRODUCT_DEFINITION_RELATIONSHIP(base) }
      else if let base = complex.entityReference(ePRODUCT_DEFINITION_USAGE.self) {self = ._PRODUCT_DEFINITION_USAGE(base) }
      else if let base = complex.entityReference(ePRODUCT_DESIGN_TO_INDIVIDUAL.self) {self = ._PRODUCT_DESIGN_TO_INDIVIDUAL(base) }
      else if let base = complex.entityReference(ePRODUCT_DESIGN_VERSION_TO_INDIVIDUAL.self) {self = ._PRODUCT_DESIGN_VERSION_TO_INDIVIDUAL(base) }
      else if let base = complex.entityReference(ePRODUCT_GROUP.self) {self = ._PRODUCT_GROUP(base) }
      else if let base = complex.entityReference(ePRODUCT_GROUP_MEMBERSHIP.self) {self = ._PRODUCT_GROUP_MEMBERSHIP(base) }
      else if let base = complex.entityReference(ePRODUCT_GROUP_RELATIONSHIP.self) {self = ._PRODUCT_GROUP_RELATIONSHIP(base) }
      else if let base = complex.entityReference(ePRODUCT_IDENTIFICATION.self) {self = ._PRODUCT_IDENTIFICATION(base) }
      else if let base = complex.entityReference(ePRODUCT_PROCESS_PLAN.self) {self = ._PRODUCT_PROCESS_PLAN(base) }
      else if let base = complex.entityReference(ePRODUCT_RELATIONSHIP.self) {self = ._PRODUCT_RELATIONSHIP(base) }
      else if let base = complex.entityReference(ePROPERTY_DEFINITION.self) {self = ._PROPERTY_DEFINITION(base) }
      else if let base = complex.entityReference(ePROPERTY_DEFINITION_REPRESENTATION.self) {self = ._PROPERTY_DEFINITION_REPRESENTATION(base) }
      else if let base = complex.entityReference(eREPRESENTATION.self) {self = ._REPRESENTATION(base) }
      else if let base = complex.entityReference(eREQUIREMENT_ASSIGNMENT.self) {self = ._REQUIREMENT_ASSIGNMENT(base) }
      else if let base = complex.entityReference(eREQUIREMENT_SOURCE.self) {self = ._REQUIREMENT_SOURCE(base) }
      else if let base = complex.entityReference(eREQUIREMENT_VIEW_DEFINITION_RELATIONSHIP.self) {self = ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(base) }
      else if let base = complex.entityReference(eRESOURCE_PROPERTY.self) {self = ._RESOURCE_PROPERTY(base) }
      else if let base = complex.entityReference(eSHAPE_REPRESENTATION.self) {self = ._SHAPE_REPRESENTATION(base) }
      else if let base = complex.entityReference(eSTRUCTURED_MESSAGE.self) {self = ._STRUCTURED_MESSAGE(base) }
      else if let base = complex.entityReference(eVALIDATION.self) {self = ._VALIDATION(base) }
      else if let base = complex.entityReference(eVERIFICATION.self) {self = ._VERIFICATION(base) }
      else if let base = complex.entityReference(eVERSIONED_ACTION_REQUEST.self) {self = ._VERSIONED_ACTION_REQUEST(base) }
      else { return nil }
    }

    public init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let select = generic else { return nil }

      if let fundamental = select as? Self {
        self.init(fundamental: fundamental)
      }
      else if let base = eACTION.convert(fromGeneric: select) {
        self = ._ACTION(base)
      }
      else if let base = eACTION_DIRECTIVE.convert(fromGeneric: select) {
        self = ._ACTION_DIRECTIVE(base)
      }
      else if let base = eACTION_METHOD.convert(fromGeneric: select) {
        self = ._ACTION_METHOD(base)
      }
      else if let base = eACTION_METHOD_RELATIONSHIP.convert(fromGeneric: select) {
        self = ._ACTION_METHOD_RELATIONSHIP(base)
      }
      else if let base = eACTION_PROPERTY.convert(fromGeneric: select) {
        self = ._ACTION_PROPERTY(base)
      }
      else if let base = eACTION_PROPERTY_REPRESENTATION.convert(fromGeneric: select) {
        self = ._ACTION_PROPERTY_REPRESENTATION(base)
      }
      else if let base = eAPPLIED_ACTION_ASSIGNMENT.convert(fromGeneric: select) {
        self = ._APPLIED_ACTION_ASSIGNMENT(base)
      }
      else if let base = eAPPLIED_ACTION_METHOD_ASSIGNMENT.convert(fromGeneric: select) {
        self = ._APPLIED_ACTION_METHOD_ASSIGNMENT(base)
      }
      else if let base = eAPPLIED_CLASSIFICATION_ASSIGNMENT.convert(fromGeneric: select) {
        self = ._APPLIED_CLASSIFICATION_ASSIGNMENT(base)
      }
      else if let base = eAPPLIED_DESCRIPTION_TEXT_ASSIGNMENT.convert(fromGeneric: select) {
        self = ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT(base)
      }
      else if let base = eAPPLIED_DESCRIPTION_TEXT_ASSIGNMENT_RELATIONSHIP.convert(fromGeneric: select) {
        self = ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT_RELATIONSHIP(base)
      }
      else if let base = eAPPLIED_DOCUMENT_REFERENCE.convert(fromGeneric: select) {
        self = ._APPLIED_DOCUMENT_REFERENCE(base)
      }
      else if let base = eAPPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT.convert(fromGeneric: select) {
        self = ._APPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT(base)
      }
      else if let base = eAPPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT.convert(fromGeneric: select) {
        self = ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(base)
      }
      else if let base = eAPPLIED_IDENTIFICATION_ASSIGNMENT.convert(fromGeneric: select) {
        self = ._APPLIED_IDENTIFICATION_ASSIGNMENT(base)
      }
      else if let base = eASSEMBLY_COMPONENT_USAGE.convert(fromGeneric: select) {
        self = ._ASSEMBLY_COMPONENT_USAGE(base)
      }
      else if let base = eASSEMBLY_COMPONENT_USAGE_SUBSTITUTE.convert(fromGeneric: select) {
        self = ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(base)
      }
      else if let base = eCLASS_SYSTEM.convert(fromGeneric: select) {
        self = ._CLASS_SYSTEM(base)
      }
      else if let base = eCONDITIONAL_EFFECTIVITY.convert(fromGeneric: select) {
        self = ._CONDITIONAL_EFFECTIVITY(base)
      }
      else if let base = eCONFIGURATION_DESIGN.convert(fromGeneric: select) {
        self = ._CONFIGURATION_DESIGN(base)
      }
      else if let base = eCONFIGURATION_EFFECTIVITY.convert(fromGeneric: select) {
        self = ._CONFIGURATION_EFFECTIVITY(base)
      }
      else if let base = eCONFIGURED_EFFECTIVITY_ASSIGNMENT.convert(fromGeneric: select) {
        self = ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(base)
      }
      else if let base = eDOCUMENT.convert(fromGeneric: select) {
        self = ._DOCUMENT(base)
      }
      else if let base = eDOCUMENT_FILE.convert(fromGeneric: select) {
        self = ._DOCUMENT_FILE(base)
      }
      else if let base = eDRAUGHTING_MODEL.convert(fromGeneric: select) {
        self = ._DRAUGHTING_MODEL(base)
      }
      else if let base = eDRAWING_REVISION.convert(fromGeneric: select) {
        self = ._DRAWING_REVISION(base)
      }
      else if let base = eENVELOPE.convert(fromGeneric: select) {
        self = ._ENVELOPE(base)
      }
      else if let base = eEVALUATED_CHARACTERISTIC_OF_PRODUCT_AS_INDIVIDUAL_TEST_RESULT.convert(fromGeneric: select) {
        self = ._EVALUATED_CHARACTERISTIC_OF_PRODUCT_AS_INDIVIDUAL_TEST_RESULT(base)
      }
      else if let base = eEVIDENCE.convert(fromGeneric: select) {
        self = ._EVIDENCE(base)
      }
      else if let base = eEXCLUSIVE_PRODUCT_CONCEPT_FEATURE_CATEGORY.convert(fromGeneric: select) {
        self = ._EXCLUSIVE_PRODUCT_CONCEPT_FEATURE_CATEGORY(base)
      }
      else if let base = eEXECUTED_ACTION.convert(fromGeneric: select) {
        self = ._EXECUTED_ACTION(base)
      }
      else if let base = eEXTERNALLY_DEFINED_GENERAL_PROPERTY.convert(fromGeneric: select) {
        self = ._EXTERNALLY_DEFINED_GENERAL_PROPERTY(base)
      }
      else if let base = eGENERAL_PROPERTY.convert(fromGeneric: select) {
        self = ._GENERAL_PROPERTY(base)
      }
      else if let base = eGROUP.convert(fromGeneric: select) {
        self = ._GROUP(base)
      }
      else if let base = eIDENTIFICATION_ASSIGNMENT_RELATIONSHIP.convert(fromGeneric: select) {
        self = ._IDENTIFICATION_ASSIGNMENT_RELATIONSHIP(base)
      }
      else if let base = eINTERFACE_CONNECTION.convert(fromGeneric: select) {
        self = ._INTERFACE_CONNECTION(base)
      }
      else if let base = eINTERFACE_CONNECTOR_AS_PLANNED.convert(fromGeneric: select) {
        self = ._INTERFACE_CONNECTOR_AS_PLANNED(base)
      }
      else if let base = eINTERFACE_CONNECTOR_AS_REALIZED.convert(fromGeneric: select) {
        self = ._INTERFACE_CONNECTOR_AS_REALIZED(base)
      }
      else if let base = eINTERFACE_CONNECTOR_DESIGN.convert(fromGeneric: select) {
        self = ._INTERFACE_CONNECTOR_DESIGN(base)
      }
      else if let base = eINTERFACE_CONNECTOR_OCCURRENCE.convert(fromGeneric: select) {
        self = ._INTERFACE_CONNECTOR_OCCURRENCE(base)
      }
      else if let base = eINTERFACE_DEFINITION_CONNECTION.convert(fromGeneric: select) {
        self = ._INTERFACE_DEFINITION_CONNECTION(base)
      }
      else if let base = eINTERFACE_DEFINITION_FOR.convert(fromGeneric: select) {
        self = ._INTERFACE_DEFINITION_FOR(base)
      }
      else if let base = eMAKE_FROM_USAGE_OPTION.convert(fromGeneric: select) {
        self = ._MAKE_FROM_USAGE_OPTION(base)
      }
      else if let base = eMATERIAL_DESIGNATION.convert(fromGeneric: select) {
        self = ._MATERIAL_DESIGNATION(base)
      }
      else if let base = eMECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION.convert(fromGeneric: select) {
        self = ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(base)
      }
      else if let base = eORGANIZATIONAL_PROJECT.convert(fromGeneric: select) {
        self = ._ORGANIZATIONAL_PROJECT(base)
      }
      else if let base = ePACKAGE_PRODUCT_CONCEPT_FEATURE.convert(fromGeneric: select) {
        self = ._PACKAGE_PRODUCT_CONCEPT_FEATURE(base)
      }
      else if let base = ePRESENTATION_AREA.convert(fromGeneric: select) {
        self = ._PRESENTATION_AREA(base)
      }
      else if let base = ePROCESS_PLAN.convert(fromGeneric: select) {
        self = ._PROCESS_PLAN(base)
      }
      else if let base = ePRODUCT.convert(fromGeneric: select) {
        self = ._PRODUCT(base)
      }
      else if let base = ePRODUCT_CLASS.convert(fromGeneric: select) {
        self = ._PRODUCT_CLASS(base)
      }
      else if let base = ePRODUCT_CONCEPT.convert(fromGeneric: select) {
        self = ._PRODUCT_CONCEPT(base)
      }
      else if let base = ePRODUCT_CONCEPT_FEATURE.convert(fromGeneric: select) {
        self = ._PRODUCT_CONCEPT_FEATURE(base)
      }
      else if let base = ePRODUCT_CONCEPT_FEATURE_CATEGORY.convert(fromGeneric: select) {
        self = ._PRODUCT_CONCEPT_FEATURE_CATEGORY(base)
      }
      else if let base = ePRODUCT_DEFINITION.convert(fromGeneric: select) {
        self = ._PRODUCT_DEFINITION(base)
      }
      else if let base = ePRODUCT_DEFINITION_FORMATION.convert(fromGeneric: select) {
        self = ._PRODUCT_DEFINITION_FORMATION(base)
      }
      else if let base = ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP.convert(fromGeneric: select) {
        self = ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(base)
      }
      else if let base = ePRODUCT_DEFINITION_GROUP_ASSIGNMENT.convert(fromGeneric: select) {
        self = ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(base)
      }
      else if let base = ePRODUCT_DEFINITION_RELATIONSHIP.convert(fromGeneric: select) {
        self = ._PRODUCT_DEFINITION_RELATIONSHIP(base)
      }
      else if let base = ePRODUCT_DEFINITION_USAGE.convert(fromGeneric: select) {
        self = ._PRODUCT_DEFINITION_USAGE(base)
      }
      else if let base = ePRODUCT_DESIGN_TO_INDIVIDUAL.convert(fromGeneric: select) {
        self = ._PRODUCT_DESIGN_TO_INDIVIDUAL(base)
      }
      else if let base = ePRODUCT_DESIGN_VERSION_TO_INDIVIDUAL.convert(fromGeneric: select) {
        self = ._PRODUCT_DESIGN_VERSION_TO_INDIVIDUAL(base)
      }
      else if let base = ePRODUCT_GROUP.convert(fromGeneric: select) {
        self = ._PRODUCT_GROUP(base)
      }
      else if let base = ePRODUCT_GROUP_MEMBERSHIP.convert(fromGeneric: select) {
        self = ._PRODUCT_GROUP_MEMBERSHIP(base)
      }
      else if let base = ePRODUCT_GROUP_RELATIONSHIP.convert(fromGeneric: select) {
        self = ._PRODUCT_GROUP_RELATIONSHIP(base)
      }
      else if let base = ePRODUCT_IDENTIFICATION.convert(fromGeneric: select) {
        self = ._PRODUCT_IDENTIFICATION(base)
      }
      else if let base = ePRODUCT_PROCESS_PLAN.convert(fromGeneric: select) {
        self = ._PRODUCT_PROCESS_PLAN(base)
      }
      else if let base = ePRODUCT_RELATIONSHIP.convert(fromGeneric: select) {
        self = ._PRODUCT_RELATIONSHIP(base)
      }
      else if let base = ePROPERTY_DEFINITION.convert(fromGeneric: select) {
        self = ._PROPERTY_DEFINITION(base)
      }
      else if let base = ePROPERTY_DEFINITION_REPRESENTATION.convert(fromGeneric: select) {
        self = ._PROPERTY_DEFINITION_REPRESENTATION(base)
      }
      else if let base = eREPRESENTATION.convert(fromGeneric: select) {
        self = ._REPRESENTATION(base)
      }
      else if let base = eREQUIREMENT_ASSIGNMENT.convert(fromGeneric: select) {
        self = ._REQUIREMENT_ASSIGNMENT(base)
      }
      else if let base = eREQUIREMENT_SOURCE.convert(fromGeneric: select) {
        self = ._REQUIREMENT_SOURCE(base)
      }
      else if let base = eREQUIREMENT_VIEW_DEFINITION_RELATIONSHIP.convert(fromGeneric: select) {
        self = ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(base)
      }
      else if let base = eRESOURCE_PROPERTY.convert(fromGeneric: select) {
        self = ._RESOURCE_PROPERTY(base)
      }
      else if let base = eSHAPE_REPRESENTATION.convert(fromGeneric: select) {
        self = ._SHAPE_REPRESENTATION(base)
      }
      else if let base = eSTRUCTURED_MESSAGE.convert(fromGeneric: select) {
        self = ._STRUCTURED_MESSAGE(base)
      }
      else if let base = eVALIDATION.convert(fromGeneric: select) {
        self = ._VALIDATION(base)
      }
      else if let base = eVERIFICATION.convert(fromGeneric: select) {
        self = ._VERIFICATION(base)
      }
      else if let base = eVERSIONED_ACTION_REQUEST.convert(fromGeneric: select) {
        self = ._VERSIONED_ACTION_REQUEST(base)
      }
      else { return nil }
    }

    // InitializableByP21Parameter
    public static var bareTypeName: String = "SECURITY_CLASSIFICATION_ITEM"

    public init?(p21typedParam: P21Decode.ExchangeStructure.TypedParameter, from exchangeStructure: P21Decode.ExchangeStructure) {
      guard let keyword = p21typedParam.keyword.asStandardKeyword else { exchangeStructure.error = "unexpected p21parameter(\(p21typedParam)) while resolving \(Self.bareTypeName) select value"; return nil }

      switch(keyword) {
      default:
        exchangeStructure.error = "unexpected p21parameter(\(p21typedParam)) while resolving \(Self.bareTypeName) select value"
        return nil
      }
    }

    public init?(p21untypedParam: P21Decode.ExchangeStructure.UntypedParameter, from exchangeStructure: P21Decode.ExchangeStructure) {
      switch p21untypedParam {
      case .rhsOccurenceName(let rhsname):
        switch rhsname {
        case .constantEntityName(let name):
          guard let entity = exchangeStructure.resolve(constantEntityName: name) else {exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) instance"); return nil }
          self.init(possiblyFrom: entity.complexEntity)

        case .entityInstanceName(let name):
          guard let complex = exchangeStructure.resolve(entityInstanceName: name) else {exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) instance"); return nil }
          self.init(possiblyFrom: complex)

        default:
          exchangeStructure.error = "unexpected p21parameter(\(p21untypedParam)) while resolving \(Self.bareTypeName) select instance"
          return nil
        }

      default:
        exchangeStructure.error = "unexpected p21parameter(\(p21untypedParam)) while resolving \(Self.bareTypeName) select instance"
        return nil
      }
    }

    public init?(p21omittedParamfrom exchangeStructure: P21Decode.ExchangeStructure) {
      return nil
    }


    //MARK: - ENTITY UNDERLYING TYPE REFERENCES
    public var super_ePRODUCT_IDENTIFICATION: ePRODUCT_IDENTIFICATION? {
      switch self {
      case ._PRODUCT_IDENTIFICATION(let entity): return entity
      default: return nil
      }
    }

    public var super_eGROUP_RELATIONSHIP: eGROUP_RELATIONSHIP? {
      switch self {
      case ._PRODUCT_GROUP_RELATIONSHIP(let entity): return entity.super_eGROUP_RELATIONSHIP
      default: return nil
      }
    }

    public var super_eAPPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT: 
      eAPPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT? {
      switch self {
      case ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(let entity): return entity
      default: return nil
      }
    }

    public var super_eREPRESENTATION_RELATIONSHIP: eREPRESENTATION_RELATIONSHIP? {
      switch self {
      case ._EVALUATED_CHARACTERISTIC_OF_PRODUCT_AS_INDIVIDUAL_TEST_RESULT(let entity): return entity
        .super_eREPRESENTATION_RELATIONSHIP
      default: return nil
      }
    }

    public var super_eAPPLIED_DESCRIPTION_TEXT_ASSIGNMENT_RELATIONSHIP: 
      eAPPLIED_DESCRIPTION_TEXT_ASSIGNMENT_RELATIONSHIP? {
      switch self {
      case ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT_RELATIONSHIP(let entity): return entity
      default: return nil
      }
    }

    public var super_eASSEMBLY_COMPONENT_USAGE_SUBSTITUTE: eASSEMBLY_COMPONENT_USAGE_SUBSTITUTE? {
      switch self {
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let entity): return entity
      default: return nil
      }
    }

    public var super_eMATERIAL_DESIGNATION: eMATERIAL_DESIGNATION? {
      switch self {
      case ._MATERIAL_DESIGNATION(let entity): return entity
      default: return nil
      }
    }

    public var super_eREPRESENTATION: eREPRESENTATION? {
      switch self {
      case ._DRAUGHTING_MODEL(let entity): return entity.super_eREPRESENTATION
      case ._EVALUATED_CHARACTERISTIC_OF_PRODUCT_AS_INDIVIDUAL_TEST_RESULT(let entity): return entity
        .super_eREPRESENTATION
      case ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(let entity): return entity
        .super_eREPRESENTATION
      case ._PRESENTATION_AREA(let entity): return entity.super_eREPRESENTATION
      case ._REPRESENTATION(let entity): return entity
      case ._SHAPE_REPRESENTATION(let entity): return entity.super_eREPRESENTATION
      default: return nil
      }
    }

    public var super_eENVELOPE: eENVELOPE? {
      switch self {
      case ._ENVELOPE(let entity): return entity
      default: return nil
      }
    }

    public var super_eREQUIREMENT_SOURCE: eREQUIREMENT_SOURCE? {
      switch self {
      case ._REQUIREMENT_SOURCE(let entity): return entity
      default: return nil
      }
    }

    public var super_eAPPLIED_IDENTIFICATION_ASSIGNMENT: eAPPLIED_IDENTIFICATION_ASSIGNMENT? {
      switch self {
      case ._APPLIED_IDENTIFICATION_ASSIGNMENT(let entity): return entity
      default: return nil
      }
    }

    public var super_ePRODUCT_DEFINITION_GROUP_ASSIGNMENT: ePRODUCT_DEFINITION_GROUP_ASSIGNMENT? {
      switch self {
      case ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(let entity): return entity
      default: return nil
      }
    }

    public var super_eINTERFACE_DEFINITION_CONNECTION: eINTERFACE_DEFINITION_CONNECTION? {
      switch self {
      case ._INTERFACE_DEFINITION_CONNECTION(let entity): return entity
      default: return nil
      }
    }

    public var super_eEFFECTIVITY_ASSIGNMENT: eEFFECTIVITY_ASSIGNMENT? {
      switch self {
      case ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(let entity): return entity.super_eEFFECTIVITY_ASSIGNMENT
      default: return nil
      }
    }

    public var super_eINTERFACE_CONNECTOR_AS_PLANNED: eINTERFACE_CONNECTOR_AS_PLANNED? {
      switch self {
      case ._INTERFACE_CONNECTOR_AS_PLANNED(let entity): return entity
      default: return nil
      }
    }

    public var super_ePROPERTY_DEFINITION_REPRESENTATION: ePROPERTY_DEFINITION_REPRESENTATION? {
      switch self {
      case ._PROPERTY_DEFINITION_REPRESENTATION(let entity): return entity
      default: return nil
      }
    }

    public var super_eEVALUATED_CHARACTERISTIC: eEVALUATED_CHARACTERISTIC? {
      switch self {
      case ._EVALUATED_CHARACTERISTIC_OF_PRODUCT_AS_INDIVIDUAL_TEST_RESULT(let entity): return entity
        .super_eEVALUATED_CHARACTERISTIC
      default: return nil
      }
    }

    public var super_eINTERFACE_CONNECTOR_DESIGN: eINTERFACE_CONNECTOR_DESIGN? {
      switch self {
      case ._INTERFACE_CONNECTOR_DESIGN(let entity): return entity
      default: return nil
      }
    }

    public var super_eIDENTIFICATION_ASSIGNMENT: eIDENTIFICATION_ASSIGNMENT? {
      switch self {
      case ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(let entity): return entity
        .super_eIDENTIFICATION_ASSIGNMENT
      case ._APPLIED_IDENTIFICATION_ASSIGNMENT(let entity): return entity.super_eIDENTIFICATION_ASSIGNMENT
      default: return nil
      }
    }

    public var super_ePROPERTY_DEFINITION: ePROPERTY_DEFINITION? {
      switch self {
      case ._PROPERTY_DEFINITION(let entity): return entity
      default: return nil
      }
    }

    public var super_eEXCLUSIVE_PRODUCT_CONCEPT_FEATURE_CATEGORY: 
      eEXCLUSIVE_PRODUCT_CONCEPT_FEATURE_CATEGORY? {
      switch self {
      case ._EXCLUSIVE_PRODUCT_CONCEPT_FEATURE_CATEGORY(let entity): return entity
      default: return nil
      }
    }

    public var super_eSTRUCTURED_MESSAGE: eSTRUCTURED_MESSAGE? {
      switch self {
      case ._STRUCTURED_MESSAGE(let entity): return entity
      default: return nil
      }
    }

    public var super_eVALIDATION: eVALIDATION? {
      switch self {
      case ._VALIDATION(let entity): return entity
      default: return nil
      }
    }

    public var super_ePRODUCT_CONCEPT: ePRODUCT_CONCEPT? {
      switch self {
      case ._PRODUCT_CLASS(let entity): return entity.super_ePRODUCT_CONCEPT
      case ._PRODUCT_CONCEPT(let entity): return entity
      default: return nil
      }
    }

    public var super_eGROUP: eGROUP? {
      switch self {
      case ._CLASS_SYSTEM(let entity): return entity.super_eGROUP
      case ._EXCLUSIVE_PRODUCT_CONCEPT_FEATURE_CATEGORY(let entity): return entity.super_eGROUP
      case ._GROUP(let entity): return entity
      case ._INTERFACE_CONNECTION(let entity): return entity.super_eGROUP
      case ._INTERFACE_CONNECTOR_OCCURRENCE(let entity): return entity.super_eGROUP
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY(let entity): return entity.super_eGROUP
      case ._PRODUCT_GROUP(let entity): return entity.super_eGROUP
      case ._REQUIREMENT_ASSIGNMENT(let entity): return entity.super_eGROUP
      case ._REQUIREMENT_SOURCE(let entity): return entity.super_eGROUP
      case ._VALIDATION(let entity): return entity.super_eGROUP
      case ._VERIFICATION(let entity): return entity.super_eGROUP
      default: return nil
      }
    }

    public var super_ePRODUCT_DESIGN_VERSION_TO_INDIVIDUAL: ePRODUCT_DESIGN_VERSION_TO_INDIVIDUAL? {
      switch self {
      case ._PRODUCT_DESIGN_VERSION_TO_INDIVIDUAL(let entity): return entity
      default: return nil
      }
    }

    public var super_eCONFIGURATION_ITEM: eCONFIGURATION_ITEM? {
      switch self {
      case ._PRODUCT_IDENTIFICATION(let entity): return entity.super_eCONFIGURATION_ITEM
      default: return nil
      }
    }

    public var super_eINTERFACE_CONNECTOR_AS_REALIZED: eINTERFACE_CONNECTOR_AS_REALIZED? {
      switch self {
      case ._INTERFACE_CONNECTOR_AS_REALIZED(let entity): return entity
      default: return nil
      }
    }

    public var super_ePRESENTATION_REPRESENTATION: ePRESENTATION_REPRESENTATION? {
      switch self {
      case ._PRESENTATION_AREA(let entity): return entity.super_ePRESENTATION_REPRESENTATION
      default: return nil
      }
    }

    public var super_ePROCESS_PLAN: ePROCESS_PLAN? {
      switch self {
      case ._PROCESS_PLAN(let entity): return entity
      default: return nil
      }
    }

    public var super_eDESCRIPTION_TEXT_ASSIGNMENT_RELATIONSHIP: eDESCRIPTION_TEXT_ASSIGNMENT_RELATIONSHIP? {
      switch self {
      case ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT_RELATIONSHIP(let entity): return entity
        .super_eDESCRIPTION_TEXT_ASSIGNMENT_RELATIONSHIP
      default: return nil
      }
    }

    public var super_eDOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT: eDOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT? {
      switch self {
      case ._APPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT(let entity): return entity
        .super_eDOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT
      default: return nil
      }
    }

    public var super_eSHAPE_REPRESENTATION: eSHAPE_REPRESENTATION? {
      switch self {
      case ._SHAPE_REPRESENTATION(let entity): return entity
      default: return nil
      }
    }

    public var super_eACTION_METHOD: eACTION_METHOD? {
      switch self {
      case ._ACTION_METHOD(let entity): return entity
      case ._CONDITIONAL_EFFECTIVITY(let entity): return entity.super_eACTION_METHOD
      default: return nil
      }
    }

    public var super_eGROUP_ASSIGNMENT: eGROUP_ASSIGNMENT? {
      switch self {
      case ._EVIDENCE(let entity): return entity.super_eGROUP_ASSIGNMENT
      case ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(let entity): return entity.super_eGROUP_ASSIGNMENT
      case ._PRODUCT_GROUP_MEMBERSHIP(let entity): return entity.super_eGROUP_ASSIGNMENT
      default: return nil
      }
    }

    public var super_ePRODUCT_DEFINITION_PROCESS: ePRODUCT_DEFINITION_PROCESS? {
      switch self {
      case ._PRODUCT_PROCESS_PLAN(let entity): return entity.super_ePRODUCT_DEFINITION_PROCESS
      default: return nil
      }
    }

    public var super_eCONFIGURATION_DESIGN: eCONFIGURATION_DESIGN? {
      switch self {
      case ._CONFIGURATION_DESIGN(let entity): return entity
      default: return nil
      }
    }

    public var super_eEXECUTED_ACTION: eEXECUTED_ACTION? {
      switch self {
      case ._EXECUTED_ACTION(let entity): return entity
      default: return nil
      }
    }

    public var super_ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP: 
      ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP? {
      switch self {
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let entity): return entity
      case ._PRODUCT_DESIGN_VERSION_TO_INDIVIDUAL(let entity): return entity
        .super_ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP
      default: return nil
      }
    }

    public var super_eEXTERNALLY_DEFINED_ITEM: eEXTERNALLY_DEFINED_ITEM? {
      switch self {
      case ._EXTERNALLY_DEFINED_GENERAL_PROPERTY(let entity): return entity.super_eEXTERNALLY_DEFINED_ITEM
      default: return nil
      }
    }

    public var super_ePRODUCT_CONCEPT_FEATURE: ePRODUCT_CONCEPT_FEATURE? {
      switch self {
      case ._PACKAGE_PRODUCT_CONCEPT_FEATURE(let entity): return entity.super_ePRODUCT_CONCEPT_FEATURE
      case ._PRODUCT_CONCEPT_FEATURE(let entity): return entity
      default: return nil
      }
    }

    public var super_eDESCRIPTION_TEXT_ASSIGNMENT: eDESCRIPTION_TEXT_ASSIGNMENT? {
      switch self {
      case ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT(let entity): return entity
        .super_eDESCRIPTION_TEXT_ASSIGNMENT
      default: return nil
      }
    }

    public var super_eDRAUGHTING_MODEL: eDRAUGHTING_MODEL? {
      switch self {
      case ._DRAUGHTING_MODEL(let entity): return entity
      default: return nil
      }
    }

    public var super_eCONDITIONAL_EFFECTIVITY: eCONDITIONAL_EFFECTIVITY? {
      switch self {
      case ._CONDITIONAL_EFFECTIVITY(let entity): return entity
      default: return nil
      }
    }

    public var super_eACTION_PROPERTY: eACTION_PROPERTY? {
      switch self {
      case ._ACTION_PROPERTY(let entity): return entity
      default: return nil
      }
    }

    public var super_eEXTERNAL_IDENTIFICATION_ASSIGNMENT: eEXTERNAL_IDENTIFICATION_ASSIGNMENT? {
      switch self {
      case ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(let entity): return entity
        .super_eEXTERNAL_IDENTIFICATION_ASSIGNMENT
      default: return nil
      }
    }

    public var super_ePRODUCT_DEFINITION_USAGE: ePRODUCT_DEFINITION_USAGE? {
      switch self {
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): return entity.super_ePRODUCT_DEFINITION_USAGE
      case ._MAKE_FROM_USAGE_OPTION(let entity): return entity.super_ePRODUCT_DEFINITION_USAGE
      case ._PRODUCT_DEFINITION_USAGE(let entity): return entity
      default: return nil
      }
    }

    public var super_eAPPLIED_ACTION_METHOD_ASSIGNMENT: eAPPLIED_ACTION_METHOD_ASSIGNMENT? {
      switch self {
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let entity): return entity
      default: return nil
      }
    }

    public var super_ePRODUCT_GROUP: ePRODUCT_GROUP? {
      switch self {
      case ._PRODUCT_GROUP(let entity): return entity
      default: return nil
      }
    }

    public var super_eGENERAL_PROPERTY: eGENERAL_PROPERTY? {
      switch self {
      case ._EXTERNALLY_DEFINED_GENERAL_PROPERTY(let entity): return entity.super_eGENERAL_PROPERTY
      case ._GENERAL_PROPERTY(let entity): return entity
      default: return nil
      }
    }

    public var super_ePACKAGE_PRODUCT_CONCEPT_FEATURE: ePACKAGE_PRODUCT_CONCEPT_FEATURE? {
      switch self {
      case ._PACKAGE_PRODUCT_CONCEPT_FEATURE(let entity): return entity
      default: return nil
      }
    }

    public var super_eEVALUATED_CHARACTERISTIC_OF_PRODUCT_AS_INDIVIDUAL_TEST_RESULT: 
      eEVALUATED_CHARACTERISTIC_OF_PRODUCT_AS_INDIVIDUAL_TEST_RESULT? {
      switch self {
      case ._EVALUATED_CHARACTERISTIC_OF_PRODUCT_AS_INDIVIDUAL_TEST_RESULT(let entity): return entity
      default: return nil
      }
    }

    public var super_eRESOURCE_PROPERTY: eRESOURCE_PROPERTY? {
      switch self {
      case ._RESOURCE_PROPERTY(let entity): return entity
      default: return nil
      }
    }

    public var super_ePRODUCT_GROUP_MEMBERSHIP: ePRODUCT_GROUP_MEMBERSHIP? {
      switch self {
      case ._PRODUCT_GROUP_MEMBERSHIP(let entity): return entity
      default: return nil
      }
    }

    public var super_ePRODUCT_DEFINITION: ePRODUCT_DEFINITION? {
      switch self {
      case ._PRODUCT_DEFINITION(let entity): return entity
      default: return nil
      }
    }

    public var super_eINTERFACE_CONNECTION: eINTERFACE_CONNECTION? {
      switch self {
      case ._INTERFACE_CONNECTION(let entity): return entity
      default: return nil
      }
    }

    public var super_eAPPLIED_DOCUMENT_REFERENCE: eAPPLIED_DOCUMENT_REFERENCE? {
      switch self {
      case ._APPLIED_DOCUMENT_REFERENCE(let entity): return entity
      default: return nil
      }
    }

    public var super_eEVIDENCE: eEVIDENCE? {
      switch self {
      case ._EVIDENCE(let entity): return entity
      default: return nil
      }
    }

    public var super_eACTION_METHOD_RELATIONSHIP: eACTION_METHOD_RELATIONSHIP? {
      switch self {
      case ._ACTION_METHOD_RELATIONSHIP(let entity): return entity
      default: return nil
      }
    }

    public var super_eAPPLIED_CLASSIFICATION_ASSIGNMENT: eAPPLIED_CLASSIFICATION_ASSIGNMENT? {
      switch self {
      case ._APPLIED_CLASSIFICATION_ASSIGNMENT(let entity): return entity
      default: return nil
      }
    }

    public var super_eDOCUMENT: eDOCUMENT? {
      switch self {
      case ._DOCUMENT(let entity): return entity
      case ._DOCUMENT_FILE(let entity): return entity.super_eDOCUMENT
      default: return nil
      }
    }

    public var super_eACTION_METHOD_ASSIGNMENT: eACTION_METHOD_ASSIGNMENT? {
      switch self {
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let entity): return entity.super_eACTION_METHOD_ASSIGNMENT
      default: return nil
      }
    }

    public var super_eCONFIGURATION_EFFECTIVITY: eCONFIGURATION_EFFECTIVITY? {
      switch self {
      case ._CONFIGURATION_EFFECTIVITY(let entity): return entity
      default: return nil
      }
    }

    public var super_ePRODUCT: ePRODUCT? {
      switch self {
      case ._ENVELOPE(let entity): return entity.super_ePRODUCT
      case ._PRODUCT(let entity): return entity
      case ._STRUCTURED_MESSAGE(let entity): return entity.super_ePRODUCT
      default: return nil
      }
    }

    public var super_eCONDITION: eCONDITION? {
      switch self {
      case ._CONDITIONAL_EFFECTIVITY(let entity): return entity.super_eCONDITION
      default: return nil
      }
    }

    public var super_eVERSIONED_ACTION_REQUEST: eVERSIONED_ACTION_REQUEST? {
      switch self {
      case ._VERSIONED_ACTION_REQUEST(let entity): return entity
      default: return nil
      }
    }

    public var super_eORGANIZATIONAL_PROJECT: eORGANIZATIONAL_PROJECT? {
      switch self {
      case ._ORGANIZATIONAL_PROJECT(let entity): return entity
      default: return nil
      }
    }

    public var super_eDRAWING_REVISION: eDRAWING_REVISION? {
      switch self {
      case ._DRAWING_REVISION(let entity): return entity
      default: return nil
      }
    }

    public var super_eVERIFICATION: eVERIFICATION? {
      switch self {
      case ._VERIFICATION(let entity): return entity
      default: return nil
      }
    }

    public var super_eAPPLIED_DESCRIPTION_TEXT_ASSIGNMENT: eAPPLIED_DESCRIPTION_TEXT_ASSIGNMENT? {
      switch self {
      case ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT(let entity): return entity
      default: return nil
      }
    }

    public var super_eEFFECTIVITY: eEFFECTIVITY? {
      switch self {
      case ._CONDITIONAL_EFFECTIVITY(let entity): return entity.super_eEFFECTIVITY
      case ._CONFIGURATION_EFFECTIVITY(let entity): return entity.super_eEFFECTIVITY
      default: return nil
      }
    }

    public var super_ePRODUCT_PROCESS_PLAN: ePRODUCT_PROCESS_PLAN? {
      switch self {
      case ._PRODUCT_PROCESS_PLAN(let entity): return entity
      default: return nil
      }
    }

    public var super_eEXTERNALLY_DEFINED_GENERAL_PROPERTY: eEXTERNALLY_DEFINED_GENERAL_PROPERTY? {
      switch self {
      case ._EXTERNALLY_DEFINED_GENERAL_PROPERTY(let entity): return entity
      default: return nil
      }
    }

    public var super_ePRODUCT_DEFINITION_FORMATION: ePRODUCT_DEFINITION_FORMATION? {
      switch self {
      case ._INTERFACE_CONNECTOR_AS_PLANNED(let entity): return entity.super_ePRODUCT_DEFINITION_FORMATION
      case ._INTERFACE_CONNECTOR_AS_REALIZED(let entity): return entity.super_ePRODUCT_DEFINITION_FORMATION
      case ._INTERFACE_CONNECTOR_DESIGN(let entity): return entity.super_ePRODUCT_DEFINITION_FORMATION
      case ._PRODUCT_DEFINITION_FORMATION(let entity): return entity
      default: return nil
      }
    }

    public var super_ePRODUCT_CLASS: ePRODUCT_CLASS? {
      switch self {
      case ._PRODUCT_CLASS(let entity): return entity
      default: return nil
      }
    }

    public var super_ePRODUCT_DEFINITION_EFFECTIVITY: ePRODUCT_DEFINITION_EFFECTIVITY? {
      switch self {
      case ._CONFIGURATION_EFFECTIVITY(let entity): return entity.super_ePRODUCT_DEFINITION_EFFECTIVITY
      default: return nil
      }
    }

    public var super_eINTERFACE_DEFINITION_FOR: eINTERFACE_DEFINITION_FOR? {
      switch self {
      case ._INTERFACE_DEFINITION_FOR(let entity): return entity
      default: return nil
      }
    }

    public var super_ePRODUCT_GROUP_RELATIONSHIP: ePRODUCT_GROUP_RELATIONSHIP? {
      switch self {
      case ._PRODUCT_GROUP_RELATIONSHIP(let entity): return entity
      default: return nil
      }
    }

    public var super_eASSEMBLY_COMPONENT_USAGE: eASSEMBLY_COMPONENT_USAGE? {
      switch self {
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): return entity
      default: return nil
      }
    }

    public var super_eIDENTIFICATION_ASSIGNMENT_RELATIONSHIP: eIDENTIFICATION_ASSIGNMENT_RELATIONSHIP? {
      switch self {
      case ._IDENTIFICATION_ASSIGNMENT_RELATIONSHIP(let entity): return entity
      default: return nil
      }
    }

    public var super_ePRESENTATION_SET: ePRESENTATION_SET? {
      switch self {
      case ._DRAWING_REVISION(let entity): return entity.super_ePRESENTATION_SET
      default: return nil
      }
    }

    public var super_eACTION_ASSIGNMENT: eACTION_ASSIGNMENT? {
      switch self {
      case ._APPLIED_ACTION_ASSIGNMENT(let entity): return entity.super_eACTION_ASSIGNMENT
      default: return nil
      }
    }

    public var super_eCLASS_SYSTEM: eCLASS_SYSTEM? {
      switch self {
      case ._CLASS_SYSTEM(let entity): return entity
      default: return nil
      }
    }

    public var super_eDOCUMENT_REFERENCE: eDOCUMENT_REFERENCE? {
      switch self {
      case ._APPLIED_DOCUMENT_REFERENCE(let entity): return entity.super_eDOCUMENT_REFERENCE
      default: return nil
      }
    }

    public var super_eAPPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT: 
      eAPPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT? {
      switch self {
      case ._APPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT(let entity): return entity
      default: return nil
      }
    }

    public var super_eACTION_PROPERTY_REPRESENTATION: eACTION_PROPERTY_REPRESENTATION? {
      switch self {
      case ._ACTION_PROPERTY_REPRESENTATION(let entity): return entity
      default: return nil
      }
    }

    public var super_ePRODUCT_CONCEPT_FEATURE_CATEGORY: ePRODUCT_CONCEPT_FEATURE_CATEGORY? {
      switch self {
      case ._EXCLUSIVE_PRODUCT_CONCEPT_FEATURE_CATEGORY(let entity): return entity
        .super_ePRODUCT_CONCEPT_FEATURE_CATEGORY
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY(let entity): return entity
      default: return nil
      }
    }

    public var super_eCLASSIFICATION_ASSIGNMENT: eCLASSIFICATION_ASSIGNMENT? {
      switch self {
      case ._APPLIED_CLASSIFICATION_ASSIGNMENT(let entity): return entity.super_eCLASSIFICATION_ASSIGNMENT
      default: return nil
      }
    }

    public var super_eCONFIGURED_EFFECTIVITY_ASSIGNMENT: eCONFIGURED_EFFECTIVITY_ASSIGNMENT? {
      switch self {
      case ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(let entity): return entity
      default: return nil
      }
    }

    public var super_ePRODUCT_DESIGN_TO_INDIVIDUAL: ePRODUCT_DESIGN_TO_INDIVIDUAL? {
      switch self {
      case ._PRODUCT_DESIGN_TO_INDIVIDUAL(let entity): return entity
      default: return nil
      }
    }

    public var super_eREQUIREMENT_VIEW_DEFINITION_RELATIONSHIP: eREQUIREMENT_VIEW_DEFINITION_RELATIONSHIP? {
      switch self {
      case ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(let entity): return entity
      default: return nil
      }
    }

    public var super_eDOCUMENT_FILE: eDOCUMENT_FILE? {
      switch self {
      case ._DOCUMENT_FILE(let entity): return entity
      default: return nil
      }
    }

    public var super_eMAKE_FROM_USAGE_OPTION: eMAKE_FROM_USAGE_OPTION? {
      switch self {
      case ._MAKE_FROM_USAGE_OPTION(let entity): return entity
      default: return nil
      }
    }

    public var super_ePRODUCT_DEFINITION_RELATIONSHIP: ePRODUCT_DEFINITION_RELATIONSHIP? {
      switch self {
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): return entity.super_ePRODUCT_DEFINITION_RELATIONSHIP
      case ._INTERFACE_DEFINITION_CONNECTION(let entity): return entity
        .super_ePRODUCT_DEFINITION_RELATIONSHIP
      case ._INTERFACE_DEFINITION_FOR(let entity): return entity.super_ePRODUCT_DEFINITION_RELATIONSHIP
      case ._MAKE_FROM_USAGE_OPTION(let entity): return entity.super_ePRODUCT_DEFINITION_RELATIONSHIP
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity
      case ._PRODUCT_DEFINITION_USAGE(let entity): return entity.super_ePRODUCT_DEFINITION_RELATIONSHIP
      case ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(let entity): return entity
        .super_ePRODUCT_DEFINITION_RELATIONSHIP
      default: return nil
      }
    }

    public var super_eMECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION: 
      eMECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION? {
      switch self {
      case ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(let entity): return entity
      default: return nil
      }
    }

    public var super_eACTION_DIRECTIVE: eACTION_DIRECTIVE? {
      switch self {
      case ._ACTION_DIRECTIVE(let entity): return entity
      default: return nil
      }
    }

    public var super_ePRESENTATION_AREA: ePRESENTATION_AREA? {
      switch self {
      case ._PRESENTATION_AREA(let entity): return entity
      default: return nil
      }
    }

    public var super_eAPPLIED_ACTION_ASSIGNMENT: eAPPLIED_ACTION_ASSIGNMENT? {
      switch self {
      case ._APPLIED_ACTION_ASSIGNMENT(let entity): return entity
      default: return nil
      }
    }

    public var super_ePRODUCT_RELATIONSHIP: ePRODUCT_RELATIONSHIP? {
      switch self {
      case ._PRODUCT_DESIGN_TO_INDIVIDUAL(let entity): return entity.super_ePRODUCT_RELATIONSHIP
      case ._PRODUCT_RELATIONSHIP(let entity): return entity
      default: return nil
      }
    }

    public var super_eACTION: eACTION? {
      switch self {
      case ._ACTION(let entity): return entity
      case ._EXECUTED_ACTION(let entity): return entity.super_eACTION
      case ._PROCESS_PLAN(let entity): return entity.super_eACTION
      case ._PRODUCT_PROCESS_PLAN(let entity): return entity.super_eACTION
      default: return nil
      }
    }

    public var super_eINTERFACE_CONNECTOR_OCCURRENCE: eINTERFACE_CONNECTOR_OCCURRENCE? {
      switch self {
      case ._INTERFACE_CONNECTOR_OCCURRENCE(let entity): return entity
      default: return nil
      }
    }

    public var super_eREQUIREMENT_ASSIGNMENT: eREQUIREMENT_ASSIGNMENT? {
      switch self {
      case ._REQUIREMENT_ASSIGNMENT(let entity): return entity
      default: return nil
      }
    }

    public var super_eCHARACTERIZED_OBJECT: eCHARACTERIZED_OBJECT? {
      switch self {
      case ._DOCUMENT_FILE(let entity): return entity.super_eCHARACTERIZED_OBJECT
      case ._ENVELOPE(let entity): return entity.super_eCHARACTERIZED_OBJECT
      case ._PRODUCT_CLASS(let entity): return entity.super_eCHARACTERIZED_OBJECT
      case ._PRODUCT_GROUP_MEMBERSHIP(let entity): return entity.super_eCHARACTERIZED_OBJECT
      case ._PRODUCT_IDENTIFICATION(let entity): return entity.super_eCHARACTERIZED_OBJECT
      case ._REQUIREMENT_ASSIGNMENT(let entity): return entity.super_eCHARACTERIZED_OBJECT
      default: return nil
      }
    }


    //MARK: - ENTITY ATTRIBUTE REFERENCES
    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eAPPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT`` )
    public var ASSIGNED_DOCUMENT_USAGE: eDOCUMENT_USAGE_CONSTRAINT?  {
      switch self {
      case ._APPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT(let entity): return entity.ASSIGNED_DOCUMENT_USAGE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eACTION_METHOD_RELATIONSHIP`` )
    public var RELATED_METHOD: eACTION_METHOD?  {
      switch self {
      case ._ACTION_METHOD_RELATIONSHIP(let entity): return entity.RELATED_METHOD
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eACTION_PROPERTY_REPRESENTATION`` )
    public var REPRESENTATION: eREPRESENTATION?  {
      switch self {
      case ._ACTION_PROPERTY_REPRESENTATION(let entity): return entity.REPRESENTATION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eEXTERNALLY_DEFINED_GENERAL_PROPERTY`` )
    public var ITEM_ID: sSOURCE_ITEM?  {
      switch self {
      case ._EXTERNALLY_DEFINED_GENERAL_PROPERTY(let entity): return entity.ITEM_ID
      default: return nil
      }
    }

    //MARK: var DESCRIPTION: (AMBIGUOUS)

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eACTION`` )
    public var PROPERTIES: (SDAI.SET<ePROCESS_PROPERTY_ASSOCIATION>/*[1:nil]*/ )?  {
      switch self {
      case ._ACTION(let entity): return entity.PROPERTIES
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eASSEMBLY_COMPONENT_USAGE`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_USAGE`` )
    public var LEAF: sPRODUCT_DEFINITION_OR_REFERENCE?  {
      switch self {
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): return entity.LEAF
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.LEAF
      case ._PRODUCT_DEFINITION_USAGE(let entity): return entity.LEAF
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eACTION`` )
    /// - origin: ENTITY( ``eEXECUTED_ACTION`` )
    public var DIRECTIVE: eACTION_DIRECTIVE?  {
      switch self {
      case ._ACTION(let entity): return entity.DIRECTIVE
      case ._EXECUTED_ACTION(let entity): return entity.DIRECTIVE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eACTION_METHOD_RELATIONSHIP`` )
    public var RIGHT_APPLIED: eINFORMATION_RIGHT?  {
      switch self {
      case ._ACTION_METHOD_RELATIONSHIP(let entity): return entity.RIGHT_APPLIED
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP`` )
    public var REALIZED_PRODUCT: ePRODUCT_DEFINITION_FORMATION?  {
      switch self {
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let entity): return entity.REALIZED_PRODUCT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``ePROPERTY_DEFINITION_REPRESENTATION`` )
    public var DEPENDENT_ENVIRONMENT: eDATA_ENVIRONMENT?  {
      switch self {
      case ._PROPERTY_DEFINITION_REPRESENTATION(let entity): return entity.DEPENDENT_ENVIRONMENT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eASSEMBLY_COMPONENT_USAGE`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_USAGE`` )
    public var NEXT_USAGE: eNEXT_ASSEMBLY_USAGE_OCCURRENCE?  {
      switch self {
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): return entity.NEXT_USAGE
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.NEXT_USAGE
      case ._PRODUCT_DEFINITION_USAGE(let entity): return entity.NEXT_USAGE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eAPPLIED_ACTION_ASSIGNMENT`` )
    /// - origin: ENTITY( ``eAPPLIED_ACTION_METHOD_ASSIGNMENT`` )
    /// - origin: ENTITY( ``eAPPLIED_CLASSIFICATION_ASSIGNMENT`` )
    /// - origin: ENTITY( ``eAPPLIED_DOCUMENT_REFERENCE`` )
    /// - origin: ENTITY( ``eAPPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT`` )
    /// - origin: ENTITY( ``eAPPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT`` )
    /// - origin: ENTITY( ``eAPPLIED_IDENTIFICATION_ASSIGNMENT`` )
    /// - origin: ENTITY( ``eCONFIGURED_EFFECTIVITY_ASSIGNMENT`` )
    /// - origin: ENTITY( ``eEVIDENCE`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_GROUP_ASSIGNMENT`` )
    /// - origin: ENTITY( ``ePRODUCT_GROUP_MEMBERSHIP`` )
    public var ROLE: SDAI.GENERIC_ENTITY?  {
      switch self {
      case ._APPLIED_ACTION_ASSIGNMENT(let entity): return entity.ROLE
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let entity): return entity.ROLE
      case ._APPLIED_CLASSIFICATION_ASSIGNMENT(let entity): return entity.ROLE
      case ._APPLIED_DOCUMENT_REFERENCE(let entity): return entity.ROLE
      case ._APPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT(let entity): return entity.ROLE
      case ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(let entity): return entity.ROLE
      case ._APPLIED_IDENTIFICATION_ASSIGNMENT(let entity): return entity.ROLE
      case ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(let entity): return entity.ROLE
      case ._EVIDENCE(let entity): return entity.ROLE
      case ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(let entity): return entity.ROLE
      case ._PRODUCT_GROUP_MEMBERSHIP(let entity): return entity.ROLE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eASSEMBLY_COMPONENT_USAGE`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_USAGE`` )
    public var REFERENCE_DESIGNATOR: tIDENTIFIER?  {
      switch self {
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): return entity.REFERENCE_DESIGNATOR
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.REFERENCE_DESIGNATOR
      case ._PRODUCT_DEFINITION_USAGE(let entity): return entity.REFERENCE_DESIGNATOR
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eASSEMBLY_COMPONENT_USAGE_SUBSTITUTE`` )
    public var SUBSTITUTE: eASSEMBLY_COMPONENT_USAGE?  {
      switch self {
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let entity): return entity.SUBSTITUTE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_GROUP_RELATIONSHIP`` )
    public var RELATED_GROUP: eGROUP?  {
      switch self {
      case ._PRODUCT_GROUP_RELATIONSHIP(let entity): return entity.RELATED_GROUP
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_FORMATION`` )
    public var STATUS: SDAI.STRING?  {
      switch self {
      case ._PRODUCT_DEFINITION_FORMATION(let entity): return entity.STATUS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP`` )
    /// - origin: ENTITY( ``ePRODUCT_DESIGN_VERSION_TO_INDIVIDUAL`` )
    public var RELATED_PRODUCT_DEFINITION_FORMATION: ePRODUCT_DEFINITION_FORMATION?  {
      switch self {
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let entity): return 
        entity.RELATED_PRODUCT_DEFINITION_FORMATION
      case ._PRODUCT_DESIGN_VERSION_TO_INDIVIDUAL(let entity): return 
        entity.RELATED_PRODUCT_DEFINITION_FORMATION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eREPRESENTATION`` )
    public var CHARACTER_BOX: ePLANAR_EXTENT?  {
      switch self {
      case ._REPRESENTATION(let entity): return entity.CHARACTER_BOX
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eCONFIGURATION_DESIGN`` )
    public var DESIGN: sCONFIGURATION_DESIGN_ITEM?  {
      switch self {
      case ._CONFIGURATION_DESIGN(let entity): return entity.DESIGN
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eACTION_DIRECTIVE`` )
    public var ANALYSIS: tTEXT?  {
      switch self {
      case ._ACTION_DIRECTIVE(let entity): return entity.ANALYSIS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    public var CONSTITUENT_AMOUNT: (SDAI.SET<sCHARACTERIZED_PRODUCT_COMPOSITION_VALUE>/*[1:nil]*/ )?  {
      switch self {
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.CONSTITUENT_AMOUNT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eASSEMBLY_COMPONENT_USAGE`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_USAGE`` )
    public var UPPER_USAGE: eASSEMBLY_COMPONENT_USAGE?  {
      switch self {
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): return entity.UPPER_USAGE
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.UPPER_USAGE
      case ._PRODUCT_DEFINITION_USAGE(let entity): return entity.UPPER_USAGE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eMAKE_FROM_USAGE_OPTION`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_USAGE`` )
    public var RANKING_RATIONALE: tTEXT?  {
      switch self {
      case ._MAKE_FROM_USAGE_OPTION(let entity): return entity.RANKING_RATIONALE
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.RANKING_RATIONALE
      case ._PRODUCT_DEFINITION_USAGE(let entity): return entity.RANKING_RATIONALE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eASSEMBLY_COMPONENT_USAGE`` )
    /// - origin: ENTITY( ``eMAKE_FROM_USAGE_OPTION`` )
    public var QUANTITY: eMEASURE_WITH_UNIT?  {
      switch self {
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): return entity.QUANTITY
      case ._MAKE_FROM_USAGE_OPTION(let entity): return entity.QUANTITY
      case ._PRODUCT_DEFINITION_RELATIONSHIP/*(let entity)*/: return nil // AMBIGUOUS ATTRIBUTE for ePRODUCT_DEFINITION_RELATIONSHIP
      case ._PRODUCT_DEFINITION_USAGE/*(let entity)*/: return nil // AMBIGUOUS ATTRIBUTE for ePRODUCT_DEFINITION_USAGE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eMATERIAL_DESIGNATION`` )
    public var DEFINITIONS: (SDAI.SET<sCHARACTERIZED_DEFINITION>/*[1:nil]*/ )?  {
      switch self {
      case ._MATERIAL_DESIGNATION(let entity): return entity.DEFINITIONS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eIDENTIFICATION_ASSIGNMENT_RELATIONSHIP`` )
    public var RELATING_IDENTIFICATION_ASSIGNMENT: eIDENTIFICATION_ASSIGNMENT?  {
      switch self {
      case ._IDENTIFICATION_ASSIGNMENT_RELATIONSHIP(let entity): return 
        entity.RELATING_IDENTIFICATION_ASSIGNMENT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    public var CLASS: tLABEL?  {
      switch self {
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.CLASS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eREPRESENTATION`` )
    public var CM_LINK: eVARIATIONAL_CURRENT_REPRESENTATION_RELATIONSHIP?  {
      switch self {
      case ._REPRESENTATION(let entity): return entity.CM_LINK
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION`` )
    public var DEFINED_VERSION: eCOLLECTION_VERSION?  {
      switch self {
      case ._PRODUCT_DEFINITION(let entity): return entity.DEFINED_VERSION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_RELATIONSHIP`` )
    public var RELATED_MESSAGE: eSTRUCTURED_MESSAGE?  {
      switch self {
      case ._PRODUCT_RELATIONSHIP(let entity): return entity.RELATED_MESSAGE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_FORMATION`` )
    public var OF_COLLECTION: eCOLLECTION?  {
      switch self {
      case ._PRODUCT_DEFINITION_FORMATION(let entity): return entity.OF_COLLECTION
      default: return nil
      }
    }

    //MARK: var ITEMS: (AMBIGUOUS)

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eREPRESENTATION`` )
    public var OUTLINES: (SDAI.SET<eANNOTATION_FILL_AREA>/*[1:nil]*/ )?  {
      switch self {
      case ._REPRESENTATION(let entity): return entity.OUTLINES
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP`` )
    /// - origin: ENTITY( ``ePRODUCT_DESIGN_VERSION_TO_INDIVIDUAL`` )
    public var PRODUCT_DESIGN_VERSION: ePRODUCT_DEFINITION_FORMATION?  {
      switch self {
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let entity): return entity.PRODUCT_DESIGN_VERSION
      case ._PRODUCT_DESIGN_VERSION_TO_INDIVIDUAL(let entity): return entity.PRODUCT_DESIGN_VERSION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eGROUP`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    /// - origin: ENTITY( ``ePROPERTY_DEFINITION`` )
    public var OF_SHAPE: eMATED_PART_RELATIONSHIP?  {
      switch self {
      case ._GROUP(let entity): return entity.OF_SHAPE
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.OF_SHAPE
      case ._PROPERTY_DEFINITION(let entity): return entity.OF_SHAPE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eMAKE_FROM_USAGE_OPTION`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_USAGE`` )
    public var RANKING: SDAI.INTEGER?  {
      switch self {
      case ._MAKE_FROM_USAGE_OPTION(let entity): return entity.RANKING
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.RANKING
      case ._PRODUCT_DEFINITION_USAGE(let entity): return entity.RANKING
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eREPRESENTATION`` )
    public var REQUIRED_GENERAL_ACCURACY: (SDAI.SET<eSHAPE_MEASUREMENT_ACCURACY>/*[1:nil]*/ )?  {
      switch self {
      case ._REPRESENTATION(let entity): return entity.REQUIRED_GENERAL_ACCURACY
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_FORMATION`` )
    public var MAKE_OR_BUY: nSOURCE?  {
      switch self {
      case ._PRODUCT_DEFINITION_FORMATION(let entity): return entity.MAKE_OR_BUY
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eACTION`` )
    /// - origin: ENTITY( ``eEXECUTED_ACTION`` )
    /// - origin: ENTITY( ``ePROCESS_PLAN`` )
    /// - origin: ENTITY( ``ePRODUCT_PROCESS_PLAN`` )
    public var CHOSEN_METHOD: eACTION_METHOD?  {
      switch self {
      case ._ACTION(let entity): return entity.CHOSEN_METHOD
      case ._EXECUTED_ACTION(let entity): return entity.CHOSEN_METHOD
      case ._PROCESS_PLAN(let entity): return entity.CHOSEN_METHOD
      case ._PRODUCT_PROCESS_PLAN(let entity): return entity.CHOSEN_METHOD
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``ePROPERTY_DEFINITION_REPRESENTATION`` )
    public var USED_REPRESENTATION: eREPRESENTATION?  {
      switch self {
      case ._PROPERTY_DEFINITION_REPRESENTATION(let entity): return entity.USED_REPRESENTATION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eACTION_METHOD`` )
    /// - origin: ENTITY( ``eCONDITIONAL_EFFECTIVITY`` )
    /// - origin: ENTITY( ``ePRODUCT_IDENTIFICATION`` )
    /// - origin: ENTITY( ``eVERSIONED_ACTION_REQUEST`` )
    public var PURPOSE: SDAI.STRING?  {
      switch self {
      case ._ACTION_METHOD(let entity): return SDAI.STRING(entity.PURPOSE)
      case ._CONDITIONAL_EFFECTIVITY(let entity): return SDAI.STRING(entity.PURPOSE)
      case ._PRODUCT_IDENTIFICATION(let entity): return SDAI.STRING(entity.PURPOSE)
      case ._VERSIONED_ACTION_REQUEST(let entity): return SDAI.STRING(entity.PURPOSE)
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eDRAWING_REVISION`` )
    public var AREAS: (SDAI.SET<eAREA_IN_SET>/*[1:nil]*/ )?  {
      switch self {
      case ._DRAWING_REVISION(let entity): return entity.AREAS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eRESOURCE_PROPERTY`` )
    public var RESOURCE: sCHARACTERIZED_RESOURCE_DEFINITION?  {
      switch self {
      case ._RESOURCE_PROPERTY(let entity): return entity.RESOURCE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eDRAWING_REVISION`` )
    public var INTENDED_SCALE: tTEXT?  {
      switch self {
      case ._DRAWING_REVISION(let entity): return entity.INTENDED_SCALE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eREPRESENTATION`` )
    public var ASSOCIATED_SHAPE_REPRESENTATION: (SDAI.SET<eKINEMATIC_LINK_REPRESENTATION_ASSOCIATION>/*[0:1]*/ )?  {
      switch self {
      case ._REPRESENTATION(let entity): return entity.ASSOCIATED_SHAPE_REPRESENTATION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP`` )
    /// - origin: ENTITY( ``ePRODUCT_DESIGN_VERSION_TO_INDIVIDUAL`` )
    public var RELATING_PRODUCT_DEFINITION_FORMATION: ePRODUCT_DEFINITION_FORMATION?  {
      switch self {
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let entity): return 
        entity.RELATING_PRODUCT_DEFINITION_FORMATION
      case ._PRODUCT_DESIGN_VERSION_TO_INDIVIDUAL(let entity): return 
        entity.RELATING_PRODUCT_DEFINITION_FORMATION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP`` )
    public var RELATING_VERSION: eCOLLECTION_VERSION?  {
      switch self {
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let entity): return entity.RELATING_VERSION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_PROCESS_PLAN`` )
    public var IDENTIFICATION: tIDENTIFIER?  {
      switch self {
      case ._ACTION/*(let entity)*/: return nil // AMBIGUOUS ATTRIBUTE for eACTION
      case ._PRODUCT_PROCESS_PLAN(let entity): return entity.IDENTIFICATION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_RELATIONSHIP`` )
    public var RELATED_COLLECTION: eCOLLECTION?  {
      switch self {
      case ._PRODUCT_RELATIONSHIP(let entity): return entity.RELATED_COLLECTION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eAPPLIED_CLASSIFICATION_ASSIGNMENT`` )
    public var ASSIGNED_CLASS: eGROUP?  {
      switch self {
      case ._APPLIED_CLASSIFICATION_ASSIGNMENT(let entity): return entity.ASSIGNED_CLASS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    public var COMPOSITION_BASIS: tLABEL?  {
      switch self {
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.COMPOSITION_BASIS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION`` )
    public var DOCUMENTATION_IDS: (SDAI.SET<eDOCUMENT>/*[1:nil]*/ )?  {
      switch self {
      case ._PRODUCT_DEFINITION(let entity): return entity.DOCUMENTATION_IDS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eACTION_METHOD_RELATIONSHIP`` )
    /// - origin: ENTITY( ``eAPPLIED_DESCRIPTION_TEXT_ASSIGNMENT_RELATIONSHIP`` )
    public var RELATING: SDAI.GENERIC_ENTITY?  {
      switch self {
      case ._ACTION_METHOD_RELATIONSHIP(let entity): return entity.RELATING
      case ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT_RELATIONSHIP(let entity): return entity.RELATING
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eAPPLIED_DESCRIPTION_TEXT_ASSIGNMENT_RELATIONSHIP`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP`` )
    public var RELATION_TYPE: SDAI.STRING?  {
      switch self {
      case ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT_RELATIONSHIP(let entity): return entity.RELATION_TYPE
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let entity): return entity.RELATION_TYPE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eREPRESENTATION`` )
    public var BASELINE_RATIO: tRATIO_MEASURE?  {
      switch self {
      case ._REPRESENTATION(let entity): return entity.BASELINE_RATIO
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eACTION_METHOD_RELATIONSHIP`` )
    public var RIGHT_USAGE: eINFORMATION_USAGE_RIGHT?  {
      switch self {
      case ._ACTION_METHOD_RELATIONSHIP(let entity): return entity.RIGHT_USAGE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eAPPLIED_ACTION_ASSIGNMENT`` )
    public var ASSIGNED_ACTION: eACTION?  {
      switch self {
      case ._APPLIED_ACTION_ASSIGNMENT(let entity): return entity.ASSIGNED_ACTION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eACTION_PROPERTY_REPRESENTATION`` )
    public var PROPERTY: eACTION_PROPERTY?  {
      switch self {
      case ._ACTION_PROPERTY_REPRESENTATION(let entity): return entity.PROPERTY
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eAPPLIED_ACTION_METHOD_ASSIGNMENT`` )
    public var ASSIGNED_ACTION_METHOD: eACTION_METHOD?  {
      switch self {
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let entity): return entity.ASSIGNED_ACTION_METHOD
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_FORMATION`` )
    public var SPECIFICATION: (SDAI.SET<ePRODUCT_DEFINITION>/*[1:nil]*/ )?  {
      switch self {
      case ._PRODUCT_DEFINITION_FORMATION(let entity): return entity.SPECIFICATION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP`` )
    public var PLANNED_PRODUCT: ePRODUCT_DEFINITION_FORMATION?  {
      switch self {
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let entity): return entity.PLANNED_PRODUCT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eAPPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT`` )
    /// - origin: ENTITY( ``eAPPLIED_IDENTIFICATION_ASSIGNMENT`` )
    public var ASSIGNED_ID: tIDENTIFIER?  {
      switch self {
      case ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(let entity): return entity.ASSIGNED_ID
      case ._APPLIED_IDENTIFICATION_ASSIGNMENT(let entity): return entity.ASSIGNED_ID
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eDRAWING_REVISION`` )
    /// - origin: ENTITY( ``ePRESENTATION_AREA`` )
    /// - origin: ENTITY( ``eREPRESENTATION`` )
    public var REVISION_IDENTIFIER: tIDENTIFIER?  {
      switch self {
      case ._DRAWING_REVISION(let entity): return entity.REVISION_IDENTIFIER
      case ._PRESENTATION_AREA(let entity): return entity.REVISION_IDENTIFIER
      case ._REPRESENTATION(let entity): return entity.REVISION_IDENTIFIER
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eREPRESENTATION`` )
    public var SIZE: ePRESENTATION_SIZE?  {
      switch self {
      case ._REPRESENTATION(let entity): return entity.SIZE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP`` )
    public var SUCCESSOR: eCOLLECTION_VERSION?  {
      switch self {
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let entity): return entity.SUCCESSOR
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eREPRESENTATION`` )
    /// - origin: ENTITY( ``eSHAPE_REPRESENTATION`` )
    public var TESSELLATION_ACCURACY_PARAMETERS: (SDAI.SET<sTESSELLATION_ACCURACY_PARAMETER_ITEM>/*[1:nil]*/ )?  {
      switch self {
      case ._REPRESENTATION(let entity): return entity.TESSELLATION_ACCURACY_PARAMETERS
      case ._SHAPE_REPRESENTATION(let entity): return entity.TESSELLATION_ACCURACY_PARAMETERS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eIDENTIFICATION_ASSIGNMENT_RELATIONSHIP`` )
    public var RELATED_IDENTIFICATION_ASSIGNMENT: eIDENTIFICATION_ASSIGNMENT?  {
      switch self {
      case ._IDENTIFICATION_ASSIGNMENT_RELATIONSHIP(let entity): return 
        entity.RELATED_IDENTIFICATION_ASSIGNMENT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_GROUP_MEMBERSHIP`` )
    public var MEMBER: sPRODUCT_SELECT?  {
      switch self {
      case ._PRODUCT_GROUP_MEMBERSHIP(let entity): return entity.MEMBER
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eREPRESENTATION`` )
    public var REPRESENTED_JOINTS: (SDAI.SET<eKINEMATIC_JOINT>/*[1:nil]*/ )?  {
      switch self {
      case ._REPRESENTATION(let entity): return entity.REPRESENTED_JOINTS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP`` )
    /// - origin: ENTITY( ``ePRODUCT_DESIGN_TO_INDIVIDUAL`` )
    /// - origin: ENTITY( ``ePRODUCT_DESIGN_VERSION_TO_INDIVIDUAL`` )
    /// - origin: ENTITY( ``ePRODUCT_RELATIONSHIP`` )
    public var INDIVIDUAL_PRODUCT: SDAI.GENERIC_ENTITY?  {
      switch self {
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let entity): return entity.INDIVIDUAL_PRODUCT
      case ._PRODUCT_DESIGN_TO_INDIVIDUAL(let entity): return entity.INDIVIDUAL_PRODUCT
      case ._PRODUCT_DESIGN_VERSION_TO_INDIVIDUAL(let entity): return entity.INDIVIDUAL_PRODUCT
      case ._PRODUCT_RELATIONSHIP(let entity): return entity.INDIVIDUAL_PRODUCT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DESIGN_TO_INDIVIDUAL`` )
    /// - origin: ENTITY( ``ePRODUCT_RELATIONSHIP`` )
    public var RELATED_PRODUCT: ePRODUCT?  {
      switch self {
      case ._PRODUCT_DESIGN_TO_INDIVIDUAL(let entity): return entity.RELATED_PRODUCT
      case ._PRODUCT_RELATIONSHIP(let entity): return entity.RELATED_PRODUCT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eACTION_METHOD_RELATIONSHIP`` )
    /// - origin: ENTITY( ``eAPPLIED_DESCRIPTION_TEXT_ASSIGNMENT_RELATIONSHIP`` )
    public var RELATED: SDAI.GENERIC_ENTITY?  {
      switch self {
      case ._ACTION_METHOD_RELATIONSHIP(let entity): return entity.RELATED
      case ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT_RELATIONSHIP(let entity): return entity.RELATED
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_CONCEPT_FEATURE`` )
    public var CONDITION: eCONCEPT_FEATURE_RELATIONSHIP_WITH_CONDITION?  {
      switch self {
      case ._PRODUCT_CONCEPT_FEATURE(let entity): return entity.CONDITION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_IDENTIFICATION`` )
    public var ITEM_CONCEPT: ePRODUCT_CLASS?  {
      switch self {
      case ._PRODUCT_IDENTIFICATION(let entity): return entity.ITEM_CONCEPT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eREPRESENTATION`` )
    public var BOX_HEIGHT: tLENGTH_MEASURE?  {
      switch self {
      case ._REPRESENTATION(let entity): return entity.BOX_HEIGHT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eDOCUMENT`` )
    /// - origin: ENTITY( ``eDOCUMENT_FILE`` )
    public var KIND: eDOCUMENT_TYPE?  {
      switch self {
      case ._DOCUMENT(let entity): return entity.KIND
      case ._DOCUMENT_FILE(let entity): return entity.KIND
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    public var DETERMINATION_METHOD: tTEXT?  {
      switch self {
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.DETERMINATION_METHOD
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_RELATIONSHIP`` )
    public var RELATING_COLLECTION: eCOLLECTION?  {
      switch self {
      case ._PRODUCT_RELATIONSHIP(let entity): return entity.RELATING_COLLECTION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eACTION_METHOD`` )
    /// - origin: ENTITY( ``eCONDITIONAL_EFFECTIVITY`` )
    public var CONSEQUENCE: tTEXT?  {
      switch self {
      case ._ACTION_METHOD(let entity): return entity.CONSEQUENCE
      case ._CONDITIONAL_EFFECTIVITY(let entity): return entity.CONSEQUENCE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eASSEMBLY_COMPONENT_USAGE`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_USAGE`` )
    public var ROOT: ePRODUCT_DEFINITION?  {
      switch self {
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): return entity.ROOT
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.ROOT
      case ._PRODUCT_DEFINITION_USAGE(let entity): return entity.ROOT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_GROUP_RELATIONSHIP`` )
    public var RELATING_GROUP: eGROUP?  {
      switch self {
      case ._PRODUCT_GROUP_RELATIONSHIP(let entity): return entity.RELATING_GROUP
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eDRAWING_REVISION`` )
    public var DRAWING_IDENTIFIER: eDRAWING_DEFINITION?  {
      switch self {
      case ._DRAWING_REVISION(let entity): return entity.DRAWING_IDENTIFIER
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eASSEMBLY_COMPONENT_USAGE_SUBSTITUTE`` )
    public var BASE: eASSEMBLY_COMPONENT_USAGE?  {
      switch self {
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let entity): return entity.BASE
      case ._PROPERTY_DEFINITION_REPRESENTATION/*(let entity)*/: return nil // AMBIGUOUS ATTRIBUTE for ePROPERTY_DEFINITION_REPRESENTATION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eACTION`` )
    /// - origin: ENTITY( ``ePRODUCT_PROCESS_PLAN`` )
    public var PRODUCT_DEFINITIONS: (SDAI.SET<ePROCESS_PRODUCT_ASSOCIATION>/*[1:nil]*/ )?  {
      switch self {
      case ._ACTION(let entity): return entity.PRODUCT_DEFINITIONS
      case ._PRODUCT_PROCESS_PLAN(let entity): return entity.PRODUCT_DEFINITIONS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eASSEMBLY_COMPONENT_USAGE`` )
    /// - origin: ENTITY( ``eINTERFACE_DEFINITION_CONNECTION`` )
    /// - origin: ENTITY( ``eINTERFACE_DEFINITION_FOR`` )
    /// - origin: ENTITY( ``eMAKE_FROM_USAGE_OPTION`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_USAGE`` )
    /// - origin: ENTITY( ``eREQUIREMENT_VIEW_DEFINITION_RELATIONSHIP`` )
    public var RELATING_PRODUCT_DEFINITION: sPRODUCT_DEFINITION_OR_REFERENCE?  {
      switch self {
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): return entity.RELATING_PRODUCT_DEFINITION
      case ._INTERFACE_DEFINITION_CONNECTION(let entity): return entity.RELATING_PRODUCT_DEFINITION
      case ._INTERFACE_DEFINITION_FOR(let entity): return entity.RELATING_PRODUCT_DEFINITION
      case ._MAKE_FROM_USAGE_OPTION(let entity): return entity.RELATING_PRODUCT_DEFINITION
      case ._PRODUCT_DEFINITION(let entity): return sPRODUCT_DEFINITION_OR_REFERENCE(
        entity.RELATING_PRODUCT_DEFINITION)
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.RELATING_PRODUCT_DEFINITION
      case ._PRODUCT_DEFINITION_USAGE(let entity): return entity.RELATING_PRODUCT_DEFINITION
      case ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(let entity): return entity.RELATING_PRODUCT_DEFINITION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eREPRESENTATION`` )
    public var STROKES: (SDAI.SET<eCURVE>/*[1:nil]*/ )?  {
      switch self {
      case ._REPRESENTATION(let entity): return entity.STROKES
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eDOCUMENT`` )
    /// - origin: ENTITY( ``eDOCUMENT_FILE`` )
    public var REPRESENTATION_TYPES: (SDAI.SET<eDOCUMENT_REPRESENTATION_TYPE>/*[0:nil]*/ )?  {
      switch self {
      case ._DOCUMENT(let entity): return entity.REPRESENTATION_TYPES
      case ._DOCUMENT_FILE(let entity): return entity.REPRESENTATION_TYPES
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP`` )
    public var RELATED_VERSION: eCOLLECTION_VERSION?  {
      switch self {
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let entity): return entity.RELATED_VERSION
      default: return nil
      }
    }

    //MARK: var SOURCE: (AMBIGUOUS)

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eACTION`` )
    /// - origin: ENTITY( ``eAPPLIED_DESCRIPTION_TEXT_ASSIGNMENT_RELATIONSHIP`` )
    /// - origin: ENTITY( ``eASSEMBLY_COMPONENT_USAGE`` )
    /// - origin: ENTITY( ``eCLASS_SYSTEM`` )
    /// - origin: ENTITY( ``eCONDITIONAL_EFFECTIVITY`` )
    /// - origin: ENTITY( ``eCONFIGURATION_EFFECTIVITY`` )
    /// - origin: ENTITY( ``eDOCUMENT`` )
    /// - origin: ENTITY( ``eDOCUMENT_FILE`` )
    /// - origin: ENTITY( ``eDRAUGHTING_MODEL`` )
    /// - origin: ENTITY( ``eENVELOPE`` )
    /// - origin: ENTITY( ``eEVALUATED_CHARACTERISTIC_OF_PRODUCT_AS_INDIVIDUAL_TEST_RESULT`` )
    /// - origin: ENTITY( ``eEXCLUSIVE_PRODUCT_CONCEPT_FEATURE_CATEGORY`` )
    /// - origin: ENTITY( ``eEXECUTED_ACTION`` )
    /// - origin: ENTITY( ``eEXTERNALLY_DEFINED_GENERAL_PROPERTY`` )
    /// - origin: ENTITY( ``eGENERAL_PROPERTY`` )
    /// - origin: ENTITY( ``eGROUP`` )
    /// - origin: ENTITY( ``eINTERFACE_CONNECTION`` )
    /// - origin: ENTITY( ``eINTERFACE_CONNECTOR_AS_PLANNED`` )
    /// - origin: ENTITY( ``eINTERFACE_CONNECTOR_AS_REALIZED`` )
    /// - origin: ENTITY( ``eINTERFACE_CONNECTOR_DESIGN`` )
    /// - origin: ENTITY( ``eINTERFACE_CONNECTOR_OCCURRENCE`` )
    /// - origin: ENTITY( ``eINTERFACE_DEFINITION_CONNECTION`` )
    /// - origin: ENTITY( ``eINTERFACE_DEFINITION_FOR`` )
    /// - origin: ENTITY( ``eMAKE_FROM_USAGE_OPTION`` )
    /// - origin: ENTITY( ``eMECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION`` )
    /// - origin: ENTITY( ``eORGANIZATIONAL_PROJECT`` )
    /// - origin: ENTITY( ``ePACKAGE_PRODUCT_CONCEPT_FEATURE`` )
    /// - origin: ENTITY( ``ePRESENTATION_AREA`` )
    /// - origin: ENTITY( ``ePROCESS_PLAN`` )
    /// - origin: ENTITY( ``ePRODUCT`` )
    /// - origin: ENTITY( ``ePRODUCT_CLASS`` )
    /// - origin: ENTITY( ``ePRODUCT_CONCEPT`` )
    /// - origin: ENTITY( ``ePRODUCT_CONCEPT_FEATURE`` )
    /// - origin: ENTITY( ``ePRODUCT_CONCEPT_FEATURE_CATEGORY`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_FORMATION`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_USAGE`` )
    /// - origin: ENTITY( ``ePRODUCT_DESIGN_TO_INDIVIDUAL`` )
    /// - origin: ENTITY( ``ePRODUCT_DESIGN_VERSION_TO_INDIVIDUAL`` )
    /// - origin: ENTITY( ``ePRODUCT_GROUP`` )
    /// - origin: ENTITY( ``ePRODUCT_IDENTIFICATION`` )
    /// - origin: ENTITY( ``ePRODUCT_PROCESS_PLAN`` )
    /// - origin: ENTITY( ``ePRODUCT_RELATIONSHIP`` )
    /// - origin: ENTITY( ``ePROPERTY_DEFINITION`` )
    /// - origin: ENTITY( ``eREPRESENTATION`` )
    /// - origin: ENTITY( ``eREQUIREMENT_ASSIGNMENT`` )
    /// - origin: ENTITY( ``eREQUIREMENT_SOURCE`` )
    /// - origin: ENTITY( ``eREQUIREMENT_VIEW_DEFINITION_RELATIONSHIP`` )
    /// - origin: ENTITY( ``eSHAPE_REPRESENTATION`` )
    /// - origin: ENTITY( ``eSTRUCTURED_MESSAGE`` )
    /// - origin: ENTITY( ``eVALIDATION`` )
    /// - origin: ENTITY( ``eVERIFICATION`` )
    /// - origin: ENTITY( ``eVERSIONED_ACTION_REQUEST`` )
    public var ID: tIDENTIFIER?  {
      switch self {
      case ._ACTION(let entity): return entity.ID
      case ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT_RELATIONSHIP(let entity): return entity.ID
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): return entity.ID
      case ._CLASS_SYSTEM(let entity): return entity.ID
      case ._CONDITIONAL_EFFECTIVITY(let entity): return entity.ID
      case ._CONFIGURATION_EFFECTIVITY(let entity): return entity.ID
      case ._DOCUMENT(let entity): return entity.ID
      case ._DOCUMENT_FILE(let entity): return entity.ID
      case ._DRAUGHTING_MODEL(let entity): return entity.ID
      case ._ENVELOPE(let entity): return entity.ID
      case ._EVALUATED_CHARACTERISTIC_OF_PRODUCT_AS_INDIVIDUAL_TEST_RESULT(let entity): return entity.ID
      case ._EXCLUSIVE_PRODUCT_CONCEPT_FEATURE_CATEGORY(let entity): return entity.ID
      case ._EXECUTED_ACTION(let entity): return entity.ID
      case ._EXTERNALLY_DEFINED_GENERAL_PROPERTY(let entity): return entity.ID
      case ._GENERAL_PROPERTY(let entity): return entity.ID
      case ._GROUP(let entity): return entity.ID
      case ._INTERFACE_CONNECTION(let entity): return entity.ID
      case ._INTERFACE_CONNECTOR_AS_PLANNED(let entity): return entity.ID
      case ._INTERFACE_CONNECTOR_AS_REALIZED(let entity): return entity.ID
      case ._INTERFACE_CONNECTOR_DESIGN(let entity): return entity.ID
      case ._INTERFACE_CONNECTOR_OCCURRENCE(let entity): return entity.ID
      case ._INTERFACE_DEFINITION_CONNECTION(let entity): return entity.ID
      case ._INTERFACE_DEFINITION_FOR(let entity): return entity.ID
      case ._MAKE_FROM_USAGE_OPTION(let entity): return entity.ID
      case ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(let entity): return entity.ID
      case ._ORGANIZATIONAL_PROJECT(let entity): return entity.ID
      case ._PACKAGE_PRODUCT_CONCEPT_FEATURE(let entity): return entity.ID
      case ._PRESENTATION_AREA(let entity): return entity.ID
      case ._PROCESS_PLAN(let entity): return entity.ID
      case ._PRODUCT(let entity): return entity.ID
      case ._PRODUCT_CLASS(let entity): return entity.ID
      case ._PRODUCT_CONCEPT(let entity): return entity.ID
      case ._PRODUCT_CONCEPT_FEATURE(let entity): return entity.ID
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY(let entity): return entity.ID
      case ._PRODUCT_DEFINITION(let entity): return entity.ID
      case ._PRODUCT_DEFINITION_FORMATION(let entity): return entity.ID
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let entity): return entity.ID
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.ID
      case ._PRODUCT_DEFINITION_USAGE(let entity): return entity.ID
      case ._PRODUCT_DESIGN_TO_INDIVIDUAL(let entity): return entity.ID
      case ._PRODUCT_DESIGN_VERSION_TO_INDIVIDUAL(let entity): return entity.ID
      case ._PRODUCT_GROUP(let entity): return entity.ID
      case ._PRODUCT_IDENTIFICATION(let entity): return entity.ID
      case ._PRODUCT_PROCESS_PLAN(let entity): return entity.ID
      case ._PRODUCT_RELATIONSHIP(let entity): return entity.ID
      case ._PROPERTY_DEFINITION(let entity): return entity.ID
      case ._REPRESENTATION(let entity): return entity.ID
      case ._REQUIREMENT_ASSIGNMENT(let entity): return entity.ID
      case ._REQUIREMENT_SOURCE(let entity): return entity.ID
      case ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(let entity): return entity.ID
      case ._SHAPE_REPRESENTATION(let entity): return entity.ID
      case ._STRUCTURED_MESSAGE(let entity): return entity.ID
      case ._VALIDATION(let entity): return entity.ID
      case ._VERIFICATION(let entity): return entity.ID
      case ._VERSIONED_ACTION_REQUEST(let entity): return entity.ID
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eREPRESENTATION`` )
    public var APPLIED_GENERAL_ACCURACY: (SDAI.SET<eSHAPE_MEASUREMENT_ACCURACY>/*[1:nil]*/ )?  {
      switch self {
      case ._REPRESENTATION(let entity): return entity.APPLIED_GENERAL_ACCURACY
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_RELATIONSHIP`` )
    public var RELATING_MESSAGE: eSTRUCTURED_MESSAGE?  {
      switch self {
      case ._PRODUCT_RELATIONSHIP(let entity): return entity.RELATING_MESSAGE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eDRAUGHTING_MODEL`` )
    /// - origin: ENTITY( ``eEVALUATED_CHARACTERISTIC_OF_PRODUCT_AS_INDIVIDUAL_TEST_RESULT`` )
    /// - origin: ENTITY( ``eMECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION`` )
    /// - origin: ENTITY( ``ePRESENTATION_AREA`` )
    /// - origin: ENTITY( ``eREPRESENTATION`` )
    /// - origin: ENTITY( ``eSHAPE_REPRESENTATION`` )
    public var CONTEXT_OF_ITEMS: eREPRESENTATION_CONTEXT?  {
      switch self {
      case ._DRAUGHTING_MODEL(let entity): return entity.CONTEXT_OF_ITEMS
      case ._EVALUATED_CHARACTERISTIC_OF_PRODUCT_AS_INDIVIDUAL_TEST_RESULT(let entity): return 
        entity.CONTEXT_OF_ITEMS
      case ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(let entity): return 
        entity.CONTEXT_OF_ITEMS
      case ._PRESENTATION_AREA(let entity): return eREPRESENTATION_CONTEXT(entity.CONTEXT_OF_ITEMS)
      case ._REPRESENTATION(let entity): return entity.CONTEXT_OF_ITEMS
      case ._SHAPE_REPRESENTATION(let entity): return entity.CONTEXT_OF_ITEMS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eEVALUATED_CHARACTERISTIC_OF_PRODUCT_AS_INDIVIDUAL_TEST_RESULT`` )
    public var REP_1: sREPRESENTATION_OR_REPRESENTATION_REFERENCE?  {
      switch self {
      case ._EVALUATED_CHARACTERISTIC_OF_PRODUCT_AS_INDIVIDUAL_TEST_RESULT(let entity): return entity.REP_1
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eEVALUATED_CHARACTERISTIC_OF_PRODUCT_AS_INDIVIDUAL_TEST_RESULT`` )
    public var REP_2: sREPRESENTATION_OR_REPRESENTATION_REFERENCE?  {
      switch self {
      case ._EVALUATED_CHARACTERISTIC_OF_PRODUCT_AS_INDIVIDUAL_TEST_RESULT(let entity): return entity.REP_2
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eVERSIONED_ACTION_REQUEST`` )
    public var VERSION: tLABEL?  {
      switch self {
      case ._VERSIONED_ACTION_REQUEST(let entity): return entity.VERSION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eORGANIZATIONAL_PROJECT`` )
    public var RESPONSIBLE_ORGANIZATIONS: (SDAI.SET<eORGANIZATION>/*[1:nil]*/ )?  {
      switch self {
      case ._ORGANIZATIONAL_PROJECT(let entity): return entity.RESPONSIBLE_ORGANIZATIONS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eINTERFACE_CONNECTOR_AS_PLANNED`` )
    /// - origin: ENTITY( ``eINTERFACE_CONNECTOR_AS_REALIZED`` )
    /// - origin: ENTITY( ``eINTERFACE_CONNECTOR_DESIGN`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_FORMATION`` )
    public var OF_PRODUCT: ePRODUCT?  {
      switch self {
      case ._INTERFACE_CONNECTOR_AS_PLANNED(let entity): return entity.OF_PRODUCT
      case ._INTERFACE_CONNECTOR_AS_REALIZED(let entity): return entity.OF_PRODUCT
      case ._INTERFACE_CONNECTOR_DESIGN(let entity): return entity.OF_PRODUCT
      case ._PRODUCT_DEFINITION_FORMATION(let entity): return entity.OF_PRODUCT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``ePROPERTY_DEFINITION`` )
    public var REPRESENTATION_RELATION: eKINEMATIC_PROPERTY_DEFINITION_REPRESENTATION?  {
      switch self {
      case ._PROPERTY_DEFINITION(let entity): return entity.REPRESENTATION_RELATION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eASSEMBLY_COMPONENT_USAGE`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_USAGE`` )
    public var PRODUCT_DEFINITION_OCCURRENCE_ID: tIDENTIFIER?  {
      switch self {
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): return entity.PRODUCT_DEFINITION_OCCURRENCE_ID
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.PRODUCT_DEFINITION_OCCURRENCE_ID
      case ._PRODUCT_DEFINITION_USAGE(let entity): return entity.PRODUCT_DEFINITION_OCCURRENCE_ID
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eCONFIGURED_EFFECTIVITY_ASSIGNMENT`` )
    public var ASSIGNED_EFFECTIVITY: eEFFECTIVITY?  {
      switch self {
      case ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(let entity): return entity.ASSIGNED_EFFECTIVITY
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eAPPLIED_DOCUMENT_REFERENCE`` )
    public var ASSIGNED_DOCUMENT: eDOCUMENT?  {
      switch self {
      case ._APPLIED_DOCUMENT_REFERENCE(let entity): return entity.ASSIGNED_DOCUMENT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eREPRESENTATION`` )
    /// - origin: ENTITY( ``eSHAPE_REPRESENTATION`` )
    public var NEUTRAL_SKETCH_SEMANTICS: nCURVES_OR_AREA?  {
      switch self {
      case ._REPRESENTATION(let entity): return entity.NEUTRAL_SKETCH_SEMANTICS
      case ._SHAPE_REPRESENTATION(let entity): return entity.NEUTRAL_SKETCH_SEMANTICS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eACTION_DIRECTIVE`` )
    public var REQUESTS: (SDAI.SET<eVERSIONED_ACTION_REQUEST>/*[1:nil]*/ )?  {
      switch self {
      case ._ACTION_DIRECTIVE(let entity): return entity.REQUESTS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_CLASS`` )
    /// - origin: ENTITY( ``ePRODUCT_CONCEPT`` )
    public var MARKET_CONTEXT: ePRODUCT_CONCEPT_CONTEXT?  {
      switch self {
      case ._PRODUCT_CLASS(let entity): return entity.MARKET_CONTEXT
      case ._PRODUCT_CONCEPT(let entity): return entity.MARKET_CONTEXT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eREPRESENTATION`` )
    public var REPRESENTED_LINK: eKINEMATIC_LINK?  {
      switch self {
      case ._REPRESENTATION(let entity): return entity.REPRESENTED_LINK
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eREPRESENTATION`` )
    public var REPRESENTED_TOPOLOGY: sKINEMATIC_TOPOLOGY_REPRESENTATION_SELECT?  {
      switch self {
      case ._REPRESENTATION(let entity): return entity.REPRESENTED_TOPOLOGY
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eREPRESENTATION`` )
    public var UNCERTAINTY: (SDAI.SET<eUNCERTAINTY_MEASURE_WITH_UNIT>/*[1:nil]*/ )?  {
      switch self {
      case ._REPRESENTATION(let entity): return entity.UNCERTAINTY
      default: return nil
      }
    }

    //MARK: var FRAME_OF_REFERENCE: (AMBIGUOUS)

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eEVIDENCE`` )
    /// - origin: ENTITY( ``eGROUP`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_GROUP_ASSIGNMENT`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    /// - origin: ENTITY( ``ePRODUCT_GROUP_MEMBERSHIP`` )
    /// - origin: ENTITY( ``ePROPERTY_DEFINITION`` )
    public var ASSIGNED_GROUP: eGROUP?  {
      switch self {
      case ._EVIDENCE(let entity): return entity.ASSIGNED_GROUP
      case ._GROUP(let entity): return eGROUP(entity.ASSIGNED_GROUP)
      case ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(let entity): return eGROUP(entity.ASSIGNED_GROUP)
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return eGROUP(entity.ASSIGNED_GROUP)
      case ._PRODUCT_GROUP_MEMBERSHIP(let entity): return entity.ASSIGNED_GROUP
      case ._PROPERTY_DEFINITION(let entity): return eGROUP(entity.ASSIGNED_GROUP)
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eASSEMBLY_COMPONENT_USAGE`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_USAGE`` )
    public var LOCATION: (SDAI.LIST_UNIQUE<eNEXT_ASSEMBLY_USAGE_OCCURRENCE>/*[1:nil]*/ )?  {
      switch self {
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): return entity.LOCATION
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.LOCATION
      case ._PRODUCT_DEFINITION_USAGE(let entity): return entity.LOCATION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eACTION_DIRECTIVE`` )
    public var COMMENT: tTEXT?  {
      switch self {
      case ._ACTION_DIRECTIVE(let entity): return entity.COMMENT
      default: return nil
      }
    }

    //MARK: var DEFINITION: (AMBIGUOUS)

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DESIGN_TO_INDIVIDUAL`` )
    /// - origin: ENTITY( ``ePRODUCT_RELATIONSHIP`` )
    public var RELATING_PRODUCT: ePRODUCT?  {
      switch self {
      case ._PRODUCT_DESIGN_TO_INDIVIDUAL(let entity): return entity.RELATING_PRODUCT
      case ._PRODUCT_RELATIONSHIP(let entity): return entity.RELATING_PRODUCT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eCONFIGURATION_DESIGN`` )
    /// - origin: ENTITY( ``eCONFIGURATION_EFFECTIVITY`` )
    public var CONFIGURATION: SDAI.GENERIC_ENTITY?  {
      switch self {
      case ._CONFIGURATION_DESIGN(let entity): return entity.CONFIGURATION
      case ._CONFIGURATION_EFFECTIVITY(let entity): return entity.CONFIGURATION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eASSEMBLY_COMPONENT_USAGE`` )
    /// - origin: ENTITY( ``eINTERFACE_DEFINITION_CONNECTION`` )
    /// - origin: ENTITY( ``eINTERFACE_DEFINITION_FOR`` )
    /// - origin: ENTITY( ``eMAKE_FROM_USAGE_OPTION`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_USAGE`` )
    /// - origin: ENTITY( ``eREQUIREMENT_VIEW_DEFINITION_RELATIONSHIP`` )
    public var RELATED_PRODUCT_DEFINITION: sPRODUCT_DEFINITION_OR_REFERENCE?  {
      switch self {
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): return entity.RELATED_PRODUCT_DEFINITION
      case ._INTERFACE_DEFINITION_CONNECTION(let entity): return entity.RELATED_PRODUCT_DEFINITION
      case ._INTERFACE_DEFINITION_FOR(let entity): return entity.RELATED_PRODUCT_DEFINITION
      case ._MAKE_FROM_USAGE_OPTION(let entity): return entity.RELATED_PRODUCT_DEFINITION
      case ._PRODUCT_DEFINITION(let entity): return sPRODUCT_DEFINITION_OR_REFERENCE(
        entity.RELATED_PRODUCT_DEFINITION)
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.RELATED_PRODUCT_DEFINITION
      case ._PRODUCT_DEFINITION_USAGE(let entity): return entity.RELATED_PRODUCT_DEFINITION
      case ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(let entity): return entity.RELATED_PRODUCT_DEFINITION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eACTION`` )
    /// - origin: ENTITY( ``eACTION_DIRECTIVE`` )
    /// - origin: ENTITY( ``eACTION_METHOD`` )
    /// - origin: ENTITY( ``eACTION_METHOD_RELATIONSHIP`` )
    /// - origin: ENTITY( ``eACTION_PROPERTY`` )
    /// - origin: ENTITY( ``eACTION_PROPERTY_REPRESENTATION`` )
    /// - origin: ENTITY( ``eASSEMBLY_COMPONENT_USAGE`` )
    /// - origin: ENTITY( ``eASSEMBLY_COMPONENT_USAGE_SUBSTITUTE`` )
    /// - origin: ENTITY( ``eCLASS_SYSTEM`` )
    /// - origin: ENTITY( ``eCONFIGURATION_DESIGN`` )
    /// - origin: ENTITY( ``eCONFIGURATION_EFFECTIVITY`` )
    /// - origin: ENTITY( ``eDOCUMENT`` )
    /// - origin: ENTITY( ``eDRAUGHTING_MODEL`` )
    /// - origin: ENTITY( ``eEXCLUSIVE_PRODUCT_CONCEPT_FEATURE_CATEGORY`` )
    /// - origin: ENTITY( ``eEXECUTED_ACTION`` )
    /// - origin: ENTITY( ``eEXTERNALLY_DEFINED_GENERAL_PROPERTY`` )
    /// - origin: ENTITY( ``eGENERAL_PROPERTY`` )
    /// - origin: ENTITY( ``eGROUP`` )
    /// - origin: ENTITY( ``eIDENTIFICATION_ASSIGNMENT_RELATIONSHIP`` )
    /// - origin: ENTITY( ``eINTERFACE_CONNECTION`` )
    /// - origin: ENTITY( ``eINTERFACE_CONNECTOR_OCCURRENCE`` )
    /// - origin: ENTITY( ``eINTERFACE_DEFINITION_CONNECTION`` )
    /// - origin: ENTITY( ``eINTERFACE_DEFINITION_FOR`` )
    /// - origin: ENTITY( ``eMAKE_FROM_USAGE_OPTION`` )
    /// - origin: ENTITY( ``eMATERIAL_DESIGNATION`` )
    /// - origin: ENTITY( ``eMECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION`` )
    /// - origin: ENTITY( ``eORGANIZATIONAL_PROJECT`` )
    /// - origin: ENTITY( ``ePACKAGE_PRODUCT_CONCEPT_FEATURE`` )
    /// - origin: ENTITY( ``ePRESENTATION_AREA`` )
    /// - origin: ENTITY( ``ePROCESS_PLAN`` )
    /// - origin: ENTITY( ``ePRODUCT`` )
    /// - origin: ENTITY( ``ePRODUCT_CONCEPT`` )
    /// - origin: ENTITY( ``ePRODUCT_CONCEPT_FEATURE`` )
    /// - origin: ENTITY( ``ePRODUCT_CONCEPT_FEATURE_CATEGORY`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_RELATIONSHIP`` )
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_USAGE`` )
    /// - origin: ENTITY( ``ePRODUCT_DESIGN_TO_INDIVIDUAL`` )
    /// - origin: ENTITY( ``ePRODUCT_DESIGN_VERSION_TO_INDIVIDUAL`` )
    /// - origin: ENTITY( ``ePRODUCT_GROUP`` )
    /// - origin: ENTITY( ``ePRODUCT_GROUP_MEMBERSHIP`` )
    /// - origin: ENTITY( ``ePRODUCT_GROUP_RELATIONSHIP`` )
    /// - origin: ENTITY( ``ePRODUCT_PROCESS_PLAN`` )
    /// - origin: ENTITY( ``ePRODUCT_RELATIONSHIP`` )
    /// - origin: ENTITY( ``ePROPERTY_DEFINITION`` )
    /// - origin: ENTITY( ``ePROPERTY_DEFINITION_REPRESENTATION`` )
    /// - origin: ENTITY( ``eREPRESENTATION`` )
    /// - origin: ENTITY( ``eREQUIREMENT_SOURCE`` )
    /// - origin: ENTITY( ``eREQUIREMENT_VIEW_DEFINITION_RELATIONSHIP`` )
    /// - origin: ENTITY( ``eRESOURCE_PROPERTY`` )
    /// - origin: ENTITY( ``eSHAPE_REPRESENTATION`` )
    /// - origin: ENTITY( ``eSTRUCTURED_MESSAGE`` )
    /// - origin: ENTITY( ``eVALIDATION`` )
    /// - origin: ENTITY( ``eVERIFICATION`` )
    public var NAME: tLABEL?  {
      switch self {
      case ._ACTION(let entity): return entity.NAME
      case ._ACTION_DIRECTIVE(let entity): return entity.NAME
      case ._ACTION_METHOD(let entity): return entity.NAME
      case ._ACTION_METHOD_RELATIONSHIP(let entity): return entity.NAME
      case ._ACTION_PROPERTY(let entity): return entity.NAME
      case ._ACTION_PROPERTY_REPRESENTATION(let entity): return entity.NAME
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): return entity.NAME
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let entity): return entity.NAME
      case ._CLASS_SYSTEM(let entity): return entity.NAME
      case ._CONDITIONAL_EFFECTIVITY/*(let entity)*/: return nil // AMBIGUOUS ATTRIBUTE for eCONDITIONAL_EFFECTIVITY
      case ._CONFIGURATION_DESIGN(let entity): return entity.NAME
      case ._CONFIGURATION_EFFECTIVITY(let entity): return entity.NAME
      case ._DOCUMENT(let entity): return entity.NAME
      case ._DOCUMENT_FILE/*(let entity)*/: return nil // AMBIGUOUS ATTRIBUTE for eDOCUMENT_FILE
      case ._DRAUGHTING_MODEL(let entity): return entity.NAME
      case ._ENVELOPE/*(let entity)*/: return nil // AMBIGUOUS ATTRIBUTE for eENVELOPE
      case ._EVALUATED_CHARACTERISTIC_OF_PRODUCT_AS_INDIVIDUAL_TEST_RESULT/*(let entity)*/: return nil // AMBIGUOUS ATTRIBUTE for eEVALUATED_CHARACTERISTIC_OF_PRODUCT_AS_INDIVIDUAL_TEST_RESULT
      case ._EXCLUSIVE_PRODUCT_CONCEPT_FEATURE_CATEGORY(let entity): return entity.NAME
      case ._EXECUTED_ACTION(let entity): return entity.NAME
      case ._EXTERNALLY_DEFINED_GENERAL_PROPERTY(let entity): return entity.NAME
      case ._GENERAL_PROPERTY(let entity): return entity.NAME
      case ._GROUP(let entity): return entity.NAME
      case ._IDENTIFICATION_ASSIGNMENT_RELATIONSHIP(let entity): return entity.NAME
      case ._INTERFACE_CONNECTION(let entity): return entity.NAME
      case ._INTERFACE_CONNECTOR_OCCURRENCE(let entity): return entity.NAME
      case ._INTERFACE_DEFINITION_CONNECTION(let entity): return entity.NAME
      case ._INTERFACE_DEFINITION_FOR(let entity): return entity.NAME
      case ._MAKE_FROM_USAGE_OPTION(let entity): return entity.NAME
      case ._MATERIAL_DESIGNATION(let entity): return entity.NAME
      case ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(let entity): return entity.NAME
      case ._ORGANIZATIONAL_PROJECT(let entity): return entity.NAME
      case ._PACKAGE_PRODUCT_CONCEPT_FEATURE(let entity): return entity.NAME
      case ._PRESENTATION_AREA(let entity): return entity.NAME
      case ._PROCESS_PLAN(let entity): return entity.NAME
      case ._PRODUCT(let entity): return entity.NAME
      case ._PRODUCT_CLASS/*(let entity)*/: return nil // AMBIGUOUS ATTRIBUTE for ePRODUCT_CLASS
      case ._PRODUCT_CONCEPT(let entity): return entity.NAME
      case ._PRODUCT_CONCEPT_FEATURE(let entity): return entity.NAME
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY(let entity): return entity.NAME
      case ._PRODUCT_DEFINITION(let entity): return entity.NAME
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let entity): return entity.NAME
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.NAME
      case ._PRODUCT_DEFINITION_USAGE(let entity): return entity.NAME
      case ._PRODUCT_DESIGN_TO_INDIVIDUAL(let entity): return entity.NAME
      case ._PRODUCT_DESIGN_VERSION_TO_INDIVIDUAL(let entity): return entity.NAME
      case ._PRODUCT_GROUP(let entity): return entity.NAME
      case ._PRODUCT_GROUP_MEMBERSHIP(let entity): return entity.NAME
      case ._PRODUCT_GROUP_RELATIONSHIP(let entity): return entity.NAME
      case ._PRODUCT_IDENTIFICATION/*(let entity)*/: return nil // AMBIGUOUS ATTRIBUTE for ePRODUCT_IDENTIFICATION
      case ._PRODUCT_PROCESS_PLAN(let entity): return entity.NAME
      case ._PRODUCT_RELATIONSHIP(let entity): return entity.NAME
      case ._PROPERTY_DEFINITION(let entity): return entity.NAME
      case ._PROPERTY_DEFINITION_REPRESENTATION(let entity): return entity.NAME
      case ._REPRESENTATION(let entity): return entity.NAME
      case ._REQUIREMENT_ASSIGNMENT/*(let entity)*/: return nil // AMBIGUOUS ATTRIBUTE for eREQUIREMENT_ASSIGNMENT
      case ._REQUIREMENT_SOURCE(let entity): return entity.NAME
      case ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(let entity): return entity.NAME
      case ._RESOURCE_PROPERTY(let entity): return entity.NAME
      case ._SHAPE_REPRESENTATION(let entity): return entity.NAME
      case ._STRUCTURED_MESSAGE(let entity): return entity.NAME
      case ._VALIDATION(let entity): return entity.NAME
      case ._VERIFICATION(let entity): return entity.NAME
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eREPRESENTATION`` )
    public var REPRESENTED_MECHANISM: eMECHANISM_REPRESENTATION?  {
      switch self {
      case ._REPRESENTATION(let entity): return entity.REPRESENTED_MECHANISM
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP`` )
    public var PREDECESSOR: eCOLLECTION_VERSION?  {
      switch self {
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let entity): return entity.PREDECESSOR
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eACTION_METHOD_RELATIONSHIP`` )
    public var RELATING_METHOD: eACTION_METHOD?  {
      switch self {
      case ._ACTION_METHOD_RELATIONSHIP(let entity): return entity.RELATING_METHOD
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``eCONFIGURATION_EFFECTIVITY`` )
    public var USAGE: ePRODUCT_DEFINITION_RELATIONSHIP?  {
      switch self {
      case ._CONFIGURATION_EFFECTIVITY(let entity): return entity.USAGE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DESIGN_TO_INDIVIDUAL`` )
    /// - origin: ENTITY( ``ePRODUCT_RELATIONSHIP`` )
    public var PRODUCT_DESIGN: ePRODUCT?  {
      switch self {
      case ._PRODUCT_DESIGN_TO_INDIVIDUAL(let entity): return entity.PRODUCT_DESIGN
      case ._PRODUCT_RELATIONSHIP(let entity): return entity.PRODUCT_DESIGN
      default: return nil
      }
    }

    /// attribute of SELECT type ``sSECURITY_CLASSIFICATION_ITEM``
    /// - origin: ENTITY( ``ePRODUCT_DEFINITION`` )
    public var FORMATION: ePRODUCT_DEFINITION_FORMATION?  {
      switch self {
      case ._PRODUCT_DEFINITION(let entity): return entity.FORMATION
      default: return nil
      }
    }


    //MARK: - SDAIValue
    public func isValueEqual<T: SDAIValue>(to rhs: T) -> Bool {
      switch self {
      case ._ACTION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._ACTION_DIRECTIVE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._ACTION_METHOD(let selection): return selection.value.isValueEqual(to: rhs)
      case ._ACTION_METHOD_RELATIONSHIP(let selection): return selection.value.isValueEqual(to: rhs)
      case ._ACTION_PROPERTY(let selection): return selection.value.isValueEqual(to: rhs)
      case ._ACTION_PROPERTY_REPRESENTATION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._APPLIED_ACTION_ASSIGNMENT(let selection): return selection.value.isValueEqual(to: rhs)
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let selection): return selection.value.isValueEqual(to: rhs)
      case ._APPLIED_CLASSIFICATION_ASSIGNMENT(let selection): return selection.value.isValueEqual(to: rhs)
      case ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT(let selection): return selection.value.isValueEqual(to: rhs)
      case ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT_RELATIONSHIP(let selection): return selection.value.isValueEqual(to: rhs)
      case ._APPLIED_DOCUMENT_REFERENCE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._APPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT(let selection): return selection.value.isValueEqual(to: rhs)
      case ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(let selection): return selection.value.isValueEqual(to: rhs)
      case ._APPLIED_IDENTIFICATION_ASSIGNMENT(let selection): return selection.value.isValueEqual(to: rhs)
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._CLASS_SYSTEM(let selection): return selection.value.isValueEqual(to: rhs)
      case ._CONDITIONAL_EFFECTIVITY(let selection): return selection.value.isValueEqual(to: rhs)
      case ._CONFIGURATION_DESIGN(let selection): return selection.value.isValueEqual(to: rhs)
      case ._CONFIGURATION_EFFECTIVITY(let selection): return selection.value.isValueEqual(to: rhs)
      case ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(let selection): return selection.value.isValueEqual(to: rhs)
      case ._DOCUMENT(let selection): return selection.value.isValueEqual(to: rhs)
      case ._DOCUMENT_FILE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._DRAUGHTING_MODEL(let selection): return selection.value.isValueEqual(to: rhs)
      case ._DRAWING_REVISION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._ENVELOPE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._EVALUATED_CHARACTERISTIC_OF_PRODUCT_AS_INDIVIDUAL_TEST_RESULT(let selection): return selection.value.isValueEqual(to: rhs)
      case ._EVIDENCE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._EXCLUSIVE_PRODUCT_CONCEPT_FEATURE_CATEGORY(let selection): return selection.value.isValueEqual(to: rhs)
      case ._EXECUTED_ACTION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._EXTERNALLY_DEFINED_GENERAL_PROPERTY(let selection): return selection.value.isValueEqual(to: rhs)
      case ._GENERAL_PROPERTY(let selection): return selection.value.isValueEqual(to: rhs)
      case ._GROUP(let selection): return selection.value.isValueEqual(to: rhs)
      case ._IDENTIFICATION_ASSIGNMENT_RELATIONSHIP(let selection): return selection.value.isValueEqual(to: rhs)
      case ._INTERFACE_CONNECTION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._INTERFACE_CONNECTOR_AS_PLANNED(let selection): return selection.value.isValueEqual(to: rhs)
      case ._INTERFACE_CONNECTOR_AS_REALIZED(let selection): return selection.value.isValueEqual(to: rhs)
      case ._INTERFACE_CONNECTOR_DESIGN(let selection): return selection.value.isValueEqual(to: rhs)
      case ._INTERFACE_CONNECTOR_OCCURRENCE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._INTERFACE_DEFINITION_CONNECTION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._INTERFACE_DEFINITION_FOR(let selection): return selection.value.isValueEqual(to: rhs)
      case ._MAKE_FROM_USAGE_OPTION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._MATERIAL_DESIGNATION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PACKAGE_PRODUCT_CONCEPT_FEATURE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PRESENTATION_AREA(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PROCESS_PLAN(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PRODUCT(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PRODUCT_CLASS(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PRODUCT_CONCEPT(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PRODUCT_CONCEPT_FEATURE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PRODUCT_DEFINITION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PRODUCT_DEFINITION_USAGE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PRODUCT_DESIGN_TO_INDIVIDUAL(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PRODUCT_DESIGN_VERSION_TO_INDIVIDUAL(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PRODUCT_GROUP(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PRODUCT_GROUP_MEMBERSHIP(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PRODUCT_GROUP_RELATIONSHIP(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PRODUCT_IDENTIFICATION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PRODUCT_PROCESS_PLAN(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PRODUCT_RELATIONSHIP(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PROPERTY_DEFINITION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PROPERTY_DEFINITION_REPRESENTATION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._REPRESENTATION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._REQUIREMENT_ASSIGNMENT(let selection): return selection.value.isValueEqual(to: rhs)
      case ._REQUIREMENT_SOURCE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(let selection): return selection.value.isValueEqual(to: rhs)
      case ._RESOURCE_PROPERTY(let selection): return selection.value.isValueEqual(to: rhs)
      case ._SHAPE_REPRESENTATION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._STRUCTURED_MESSAGE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._VALIDATION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._VERIFICATION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._VERSIONED_ACTION_REQUEST(let selection): return selection.value.isValueEqual(to: rhs)
      }
    }

    public func isValueEqualOptionally<T: SDAIValue>(to rhs: T?) -> Bool? {
      switch self {
      case ._ACTION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._ACTION_DIRECTIVE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._ACTION_METHOD(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._ACTION_METHOD_RELATIONSHIP(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._ACTION_PROPERTY(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._ACTION_PROPERTY_REPRESENTATION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._APPLIED_ACTION_ASSIGNMENT(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._APPLIED_CLASSIFICATION_ASSIGNMENT(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT_RELATIONSHIP(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._APPLIED_DOCUMENT_REFERENCE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._APPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._APPLIED_IDENTIFICATION_ASSIGNMENT(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._CLASS_SYSTEM(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._CONDITIONAL_EFFECTIVITY(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._CONFIGURATION_DESIGN(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._CONFIGURATION_EFFECTIVITY(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._DOCUMENT(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._DOCUMENT_FILE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._DRAUGHTING_MODEL(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._DRAWING_REVISION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._ENVELOPE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._EVALUATED_CHARACTERISTIC_OF_PRODUCT_AS_INDIVIDUAL_TEST_RESULT(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._EVIDENCE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._EXCLUSIVE_PRODUCT_CONCEPT_FEATURE_CATEGORY(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._EXECUTED_ACTION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._EXTERNALLY_DEFINED_GENERAL_PROPERTY(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._GENERAL_PROPERTY(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._GROUP(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._IDENTIFICATION_ASSIGNMENT_RELATIONSHIP(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._INTERFACE_CONNECTION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._INTERFACE_CONNECTOR_AS_PLANNED(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._INTERFACE_CONNECTOR_AS_REALIZED(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._INTERFACE_CONNECTOR_DESIGN(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._INTERFACE_CONNECTOR_OCCURRENCE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._INTERFACE_DEFINITION_CONNECTION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._INTERFACE_DEFINITION_FOR(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._MAKE_FROM_USAGE_OPTION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._MATERIAL_DESIGNATION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PACKAGE_PRODUCT_CONCEPT_FEATURE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PRESENTATION_AREA(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PROCESS_PLAN(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PRODUCT(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PRODUCT_CLASS(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PRODUCT_CONCEPT(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PRODUCT_CONCEPT_FEATURE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PRODUCT_DEFINITION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PRODUCT_DEFINITION_USAGE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PRODUCT_DESIGN_TO_INDIVIDUAL(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PRODUCT_DESIGN_VERSION_TO_INDIVIDUAL(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PRODUCT_GROUP(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PRODUCT_GROUP_MEMBERSHIP(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PRODUCT_GROUP_RELATIONSHIP(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PRODUCT_IDENTIFICATION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PRODUCT_PROCESS_PLAN(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PRODUCT_RELATIONSHIP(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PROPERTY_DEFINITION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PROPERTY_DEFINITION_REPRESENTATION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._REPRESENTATION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._REQUIREMENT_ASSIGNMENT(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._REQUIREMENT_SOURCE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._RESOURCE_PROPERTY(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._SHAPE_REPRESENTATION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._STRUCTURED_MESSAGE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._VALIDATION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._VERIFICATION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._VERSIONED_ACTION_REQUEST(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      }
    }

    public func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      switch self {
      case ._ACTION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._ACTION_DIRECTIVE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._ACTION_METHOD(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._ACTION_METHOD_RELATIONSHIP(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._ACTION_PROPERTY(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._ACTION_PROPERTY_REPRESENTATION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._APPLIED_ACTION_ASSIGNMENT(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._APPLIED_CLASSIFICATION_ASSIGNMENT(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT_RELATIONSHIP(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._APPLIED_DOCUMENT_REFERENCE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._APPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._APPLIED_IDENTIFICATION_ASSIGNMENT(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._CLASS_SYSTEM(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._CONDITIONAL_EFFECTIVITY(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._CONFIGURATION_DESIGN(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._CONFIGURATION_EFFECTIVITY(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._DOCUMENT(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._DOCUMENT_FILE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._DRAUGHTING_MODEL(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._DRAWING_REVISION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._ENVELOPE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._EVALUATED_CHARACTERISTIC_OF_PRODUCT_AS_INDIVIDUAL_TEST_RESULT(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._EVIDENCE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._EXCLUSIVE_PRODUCT_CONCEPT_FEATURE_CATEGORY(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._EXECUTED_ACTION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._EXTERNALLY_DEFINED_GENERAL_PROPERTY(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._GENERAL_PROPERTY(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._GROUP(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._IDENTIFICATION_ASSIGNMENT_RELATIONSHIP(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._INTERFACE_CONNECTION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._INTERFACE_CONNECTOR_AS_PLANNED(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._INTERFACE_CONNECTOR_AS_REALIZED(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._INTERFACE_CONNECTOR_DESIGN(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._INTERFACE_CONNECTOR_OCCURRENCE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._INTERFACE_DEFINITION_CONNECTION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._INTERFACE_DEFINITION_FOR(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._MAKE_FROM_USAGE_OPTION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._MATERIAL_DESIGNATION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._ORGANIZATIONAL_PROJECT(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PACKAGE_PRODUCT_CONCEPT_FEATURE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PRESENTATION_AREA(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PROCESS_PLAN(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PRODUCT(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PRODUCT_CLASS(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PRODUCT_CONCEPT(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PRODUCT_CONCEPT_FEATURE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PRODUCT_DEFINITION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PRODUCT_DEFINITION_FORMATION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PRODUCT_DEFINITION_USAGE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PRODUCT_DESIGN_TO_INDIVIDUAL(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PRODUCT_DESIGN_VERSION_TO_INDIVIDUAL(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PRODUCT_GROUP(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PRODUCT_GROUP_MEMBERSHIP(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PRODUCT_GROUP_RELATIONSHIP(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PRODUCT_IDENTIFICATION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PRODUCT_PROCESS_PLAN(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PRODUCT_RELATIONSHIP(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PROPERTY_DEFINITION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PROPERTY_DEFINITION_REPRESENTATION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._REPRESENTATION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._REQUIREMENT_ASSIGNMENT(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._REQUIREMENT_SOURCE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._RESOURCE_PROPERTY(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._SHAPE_REPRESENTATION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._STRUCTURED_MESSAGE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._VALIDATION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._VERIFICATION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._VERSIONED_ACTION_REQUEST(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      }
    }

    public func isValueEqual<T: SDAIValue>(to rhs: T, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      switch self {
      case ._ACTION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._ACTION_DIRECTIVE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._ACTION_METHOD(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._ACTION_METHOD_RELATIONSHIP(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._ACTION_PROPERTY(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._ACTION_PROPERTY_REPRESENTATION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._APPLIED_ACTION_ASSIGNMENT(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._APPLIED_CLASSIFICATION_ASSIGNMENT(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT_RELATIONSHIP(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._APPLIED_DOCUMENT_REFERENCE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._APPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._APPLIED_IDENTIFICATION_ASSIGNMENT(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._CLASS_SYSTEM(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._CONDITIONAL_EFFECTIVITY(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._CONFIGURATION_DESIGN(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._CONFIGURATION_EFFECTIVITY(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._DOCUMENT(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._DOCUMENT_FILE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._DRAUGHTING_MODEL(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._DRAWING_REVISION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._ENVELOPE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._EVALUATED_CHARACTERISTIC_OF_PRODUCT_AS_INDIVIDUAL_TEST_RESULT(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._EVIDENCE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._EXCLUSIVE_PRODUCT_CONCEPT_FEATURE_CATEGORY(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._EXECUTED_ACTION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._EXTERNALLY_DEFINED_GENERAL_PROPERTY(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._GENERAL_PROPERTY(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._GROUP(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._IDENTIFICATION_ASSIGNMENT_RELATIONSHIP(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._INTERFACE_CONNECTION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._INTERFACE_CONNECTOR_AS_PLANNED(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._INTERFACE_CONNECTOR_AS_REALIZED(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._INTERFACE_CONNECTOR_DESIGN(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._INTERFACE_CONNECTOR_OCCURRENCE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._INTERFACE_DEFINITION_CONNECTION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._INTERFACE_DEFINITION_FOR(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._MAKE_FROM_USAGE_OPTION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._MATERIAL_DESIGNATION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PACKAGE_PRODUCT_CONCEPT_FEATURE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PRESENTATION_AREA(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PROCESS_PLAN(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PRODUCT(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PRODUCT_CLASS(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PRODUCT_CONCEPT(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PRODUCT_CONCEPT_FEATURE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PRODUCT_DEFINITION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PRODUCT_DEFINITION_USAGE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PRODUCT_DESIGN_TO_INDIVIDUAL(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PRODUCT_DESIGN_VERSION_TO_INDIVIDUAL(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PRODUCT_GROUP(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PRODUCT_GROUP_MEMBERSHIP(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PRODUCT_GROUP_RELATIONSHIP(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PRODUCT_IDENTIFICATION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PRODUCT_PROCESS_PLAN(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PRODUCT_RELATIONSHIP(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PROPERTY_DEFINITION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PROPERTY_DEFINITION_REPRESENTATION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._REPRESENTATION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._REQUIREMENT_ASSIGNMENT(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._REQUIREMENT_SOURCE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._RESOURCE_PROPERTY(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._SHAPE_REPRESENTATION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._STRUCTURED_MESSAGE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._VALIDATION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._VERIFICATION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._VERSIONED_ACTION_REQUEST(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      }
    }

    public func isValueEqualOptionally<T: SDAIValue>(to rhs: T?, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      switch self {
      case ._ACTION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._ACTION_DIRECTIVE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._ACTION_METHOD(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._ACTION_METHOD_RELATIONSHIP(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._ACTION_PROPERTY(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._ACTION_PROPERTY_REPRESENTATION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._APPLIED_ACTION_ASSIGNMENT(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._APPLIED_CLASSIFICATION_ASSIGNMENT(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT_RELATIONSHIP(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._APPLIED_DOCUMENT_REFERENCE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._APPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._APPLIED_IDENTIFICATION_ASSIGNMENT(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._CLASS_SYSTEM(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._CONDITIONAL_EFFECTIVITY(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._CONFIGURATION_DESIGN(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._CONFIGURATION_EFFECTIVITY(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._DOCUMENT(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._DOCUMENT_FILE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._DRAUGHTING_MODEL(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._DRAWING_REVISION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._ENVELOPE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._EVALUATED_CHARACTERISTIC_OF_PRODUCT_AS_INDIVIDUAL_TEST_RESULT(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._EVIDENCE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._EXCLUSIVE_PRODUCT_CONCEPT_FEATURE_CATEGORY(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._EXECUTED_ACTION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._EXTERNALLY_DEFINED_GENERAL_PROPERTY(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._GENERAL_PROPERTY(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._GROUP(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._IDENTIFICATION_ASSIGNMENT_RELATIONSHIP(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._INTERFACE_CONNECTION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._INTERFACE_CONNECTOR_AS_PLANNED(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._INTERFACE_CONNECTOR_AS_REALIZED(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._INTERFACE_CONNECTOR_DESIGN(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._INTERFACE_CONNECTOR_OCCURRENCE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._INTERFACE_DEFINITION_CONNECTION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._INTERFACE_DEFINITION_FOR(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._MAKE_FROM_USAGE_OPTION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._MATERIAL_DESIGNATION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PACKAGE_PRODUCT_CONCEPT_FEATURE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PRESENTATION_AREA(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PROCESS_PLAN(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PRODUCT(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PRODUCT_CLASS(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PRODUCT_CONCEPT(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PRODUCT_CONCEPT_FEATURE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PRODUCT_DEFINITION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PRODUCT_DEFINITION_USAGE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PRODUCT_DESIGN_TO_INDIVIDUAL(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PRODUCT_DESIGN_VERSION_TO_INDIVIDUAL(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PRODUCT_GROUP(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PRODUCT_GROUP_MEMBERSHIP(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PRODUCT_GROUP_RELATIONSHIP(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PRODUCT_IDENTIFICATION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PRODUCT_PROCESS_PLAN(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PRODUCT_RELATIONSHIP(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PROPERTY_DEFINITION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PROPERTY_DEFINITION_REPRESENTATION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._REPRESENTATION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._REQUIREMENT_ASSIGNMENT(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._REQUIREMENT_SOURCE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._RESOURCE_PROPERTY(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._SHAPE_REPRESENTATION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._STRUCTURED_MESSAGE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._VALIDATION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._VERIFICATION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._VERSIONED_ACTION_REQUEST(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      }
    }


    //MARK: SDAIGenericTypeBase
    public func copy() -> Self {
      switch self {
      case ._ACTION(let selection): return ._ACTION(selection.copy())
      case ._ACTION_DIRECTIVE(let selection): return ._ACTION_DIRECTIVE(selection.copy())
      case ._ACTION_METHOD(let selection): return ._ACTION_METHOD(selection.copy())
      case ._ACTION_METHOD_RELATIONSHIP(let selection): return ._ACTION_METHOD_RELATIONSHIP(selection.copy())
      case ._ACTION_PROPERTY(let selection): return ._ACTION_PROPERTY(selection.copy())
      case ._ACTION_PROPERTY_REPRESENTATION(let selection): return ._ACTION_PROPERTY_REPRESENTATION(selection.copy())
      case ._APPLIED_ACTION_ASSIGNMENT(let selection): return ._APPLIED_ACTION_ASSIGNMENT(selection.copy())
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let selection): return ._APPLIED_ACTION_METHOD_ASSIGNMENT(selection.copy())
      case ._APPLIED_CLASSIFICATION_ASSIGNMENT(let selection): return ._APPLIED_CLASSIFICATION_ASSIGNMENT(selection.copy())
      case ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT(let selection): return ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT(selection.copy())
      case ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT_RELATIONSHIP(let selection): return ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT_RELATIONSHIP(selection.copy())
      case ._APPLIED_DOCUMENT_REFERENCE(let selection): return ._APPLIED_DOCUMENT_REFERENCE(selection.copy())
      case ._APPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT(let selection): return ._APPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT(selection.copy())
      case ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(let selection): return ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(selection.copy())
      case ._APPLIED_IDENTIFICATION_ASSIGNMENT(let selection): return ._APPLIED_IDENTIFICATION_ASSIGNMENT(selection.copy())
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return ._ASSEMBLY_COMPONENT_USAGE(selection.copy())
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let selection): return ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(selection.copy())
      case ._CLASS_SYSTEM(let selection): return ._CLASS_SYSTEM(selection.copy())
      case ._CONDITIONAL_EFFECTIVITY(let selection): return ._CONDITIONAL_EFFECTIVITY(selection.copy())
      case ._CONFIGURATION_DESIGN(let selection): return ._CONFIGURATION_DESIGN(selection.copy())
      case ._CONFIGURATION_EFFECTIVITY(let selection): return ._CONFIGURATION_EFFECTIVITY(selection.copy())
      case ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(let selection): return ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(selection.copy())
      case ._DOCUMENT(let selection): return ._DOCUMENT(selection.copy())
      case ._DOCUMENT_FILE(let selection): return ._DOCUMENT_FILE(selection.copy())
      case ._DRAUGHTING_MODEL(let selection): return ._DRAUGHTING_MODEL(selection.copy())
      case ._DRAWING_REVISION(let selection): return ._DRAWING_REVISION(selection.copy())
      case ._ENVELOPE(let selection): return ._ENVELOPE(selection.copy())
      case ._EVALUATED_CHARACTERISTIC_OF_PRODUCT_AS_INDIVIDUAL_TEST_RESULT(let selection): return ._EVALUATED_CHARACTERISTIC_OF_PRODUCT_AS_INDIVIDUAL_TEST_RESULT(selection.copy())
      case ._EVIDENCE(let selection): return ._EVIDENCE(selection.copy())
      case ._EXCLUSIVE_PRODUCT_CONCEPT_FEATURE_CATEGORY(let selection): return ._EXCLUSIVE_PRODUCT_CONCEPT_FEATURE_CATEGORY(selection.copy())
      case ._EXECUTED_ACTION(let selection): return ._EXECUTED_ACTION(selection.copy())
      case ._EXTERNALLY_DEFINED_GENERAL_PROPERTY(let selection): return ._EXTERNALLY_DEFINED_GENERAL_PROPERTY(selection.copy())
      case ._GENERAL_PROPERTY(let selection): return ._GENERAL_PROPERTY(selection.copy())
      case ._GROUP(let selection): return ._GROUP(selection.copy())
      case ._IDENTIFICATION_ASSIGNMENT_RELATIONSHIP(let selection): return ._IDENTIFICATION_ASSIGNMENT_RELATIONSHIP(selection.copy())
      case ._INTERFACE_CONNECTION(let selection): return ._INTERFACE_CONNECTION(selection.copy())
      case ._INTERFACE_CONNECTOR_AS_PLANNED(let selection): return ._INTERFACE_CONNECTOR_AS_PLANNED(selection.copy())
      case ._INTERFACE_CONNECTOR_AS_REALIZED(let selection): return ._INTERFACE_CONNECTOR_AS_REALIZED(selection.copy())
      case ._INTERFACE_CONNECTOR_DESIGN(let selection): return ._INTERFACE_CONNECTOR_DESIGN(selection.copy())
      case ._INTERFACE_CONNECTOR_OCCURRENCE(let selection): return ._INTERFACE_CONNECTOR_OCCURRENCE(selection.copy())
      case ._INTERFACE_DEFINITION_CONNECTION(let selection): return ._INTERFACE_DEFINITION_CONNECTION(selection.copy())
      case ._INTERFACE_DEFINITION_FOR(let selection): return ._INTERFACE_DEFINITION_FOR(selection.copy())
      case ._MAKE_FROM_USAGE_OPTION(let selection): return ._MAKE_FROM_USAGE_OPTION(selection.copy())
      case ._MATERIAL_DESIGNATION(let selection): return ._MATERIAL_DESIGNATION(selection.copy())
      case ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(let selection): return ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(selection.copy())
      case ._ORGANIZATIONAL_PROJECT(let selection): return ._ORGANIZATIONAL_PROJECT(selection.copy())
      case ._PACKAGE_PRODUCT_CONCEPT_FEATURE(let selection): return ._PACKAGE_PRODUCT_CONCEPT_FEATURE(selection.copy())
      case ._PRESENTATION_AREA(let selection): return ._PRESENTATION_AREA(selection.copy())
      case ._PROCESS_PLAN(let selection): return ._PROCESS_PLAN(selection.copy())
      case ._PRODUCT(let selection): return ._PRODUCT(selection.copy())
      case ._PRODUCT_CLASS(let selection): return ._PRODUCT_CLASS(selection.copy())
      case ._PRODUCT_CONCEPT(let selection): return ._PRODUCT_CONCEPT(selection.copy())
      case ._PRODUCT_CONCEPT_FEATURE(let selection): return ._PRODUCT_CONCEPT_FEATURE(selection.copy())
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY(let selection): return ._PRODUCT_CONCEPT_FEATURE_CATEGORY(selection.copy())
      case ._PRODUCT_DEFINITION(let selection): return ._PRODUCT_DEFINITION(selection.copy())
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return ._PRODUCT_DEFINITION_FORMATION(selection.copy())
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let selection): return ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(selection.copy())
      case ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(let selection): return ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(selection.copy())
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return ._PRODUCT_DEFINITION_RELATIONSHIP(selection.copy())
      case ._PRODUCT_DEFINITION_USAGE(let selection): return ._PRODUCT_DEFINITION_USAGE(selection.copy())
      case ._PRODUCT_DESIGN_TO_INDIVIDUAL(let selection): return ._PRODUCT_DESIGN_TO_INDIVIDUAL(selection.copy())
      case ._PRODUCT_DESIGN_VERSION_TO_INDIVIDUAL(let selection): return ._PRODUCT_DESIGN_VERSION_TO_INDIVIDUAL(selection.copy())
      case ._PRODUCT_GROUP(let selection): return ._PRODUCT_GROUP(selection.copy())
      case ._PRODUCT_GROUP_MEMBERSHIP(let selection): return ._PRODUCT_GROUP_MEMBERSHIP(selection.copy())
      case ._PRODUCT_GROUP_RELATIONSHIP(let selection): return ._PRODUCT_GROUP_RELATIONSHIP(selection.copy())
      case ._PRODUCT_IDENTIFICATION(let selection): return ._PRODUCT_IDENTIFICATION(selection.copy())
      case ._PRODUCT_PROCESS_PLAN(let selection): return ._PRODUCT_PROCESS_PLAN(selection.copy())
      case ._PRODUCT_RELATIONSHIP(let selection): return ._PRODUCT_RELATIONSHIP(selection.copy())
      case ._PROPERTY_DEFINITION(let selection): return ._PROPERTY_DEFINITION(selection.copy())
      case ._PROPERTY_DEFINITION_REPRESENTATION(let selection): return ._PROPERTY_DEFINITION_REPRESENTATION(selection.copy())
      case ._REPRESENTATION(let selection): return ._REPRESENTATION(selection.copy())
      case ._REQUIREMENT_ASSIGNMENT(let selection): return ._REQUIREMENT_ASSIGNMENT(selection.copy())
      case ._REQUIREMENT_SOURCE(let selection): return ._REQUIREMENT_SOURCE(selection.copy())
      case ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(let selection): return ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(selection.copy())
      case ._RESOURCE_PROPERTY(let selection): return ._RESOURCE_PROPERTY(selection.copy())
      case ._SHAPE_REPRESENTATION(let selection): return ._SHAPE_REPRESENTATION(selection.copy())
      case ._STRUCTURED_MESSAGE(let selection): return ._STRUCTURED_MESSAGE(selection.copy())
      case ._VALIDATION(let selection): return ._VALIDATION(selection.copy())
      case ._VERIFICATION(let selection): return ._VERIFICATION(selection.copy())
      case ._VERSIONED_ACTION_REQUEST(let selection): return ._VERSIONED_ACTION_REQUEST(selection.copy())
      }
    }

    //MARK: SDAIGenericType
    public var typeMembers: Set<SDAI.STRING> {
      var members: Set<SDAI.STRING> = [SDAI.STRING(Self.typeName)]
      switch self {
      case ._ACTION(let selection): members.formUnion(selection.typeMembers)
      case ._ACTION_DIRECTIVE(let selection): members.formUnion(selection.typeMembers)
      case ._ACTION_METHOD(let selection): members.formUnion(selection.typeMembers)
      case ._ACTION_METHOD_RELATIONSHIP(let selection): members.formUnion(selection.typeMembers)
      case ._ACTION_PROPERTY(let selection): members.formUnion(selection.typeMembers)
      case ._ACTION_PROPERTY_REPRESENTATION(let selection): members.formUnion(selection.typeMembers)
      case ._APPLIED_ACTION_ASSIGNMENT(let selection): members.formUnion(selection.typeMembers)
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let selection): members.formUnion(selection.typeMembers)
      case ._APPLIED_CLASSIFICATION_ASSIGNMENT(let selection): members.formUnion(selection.typeMembers)
      case ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT(let selection): members.formUnion(selection.typeMembers)
      case ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT_RELATIONSHIP(let selection): members.formUnion(selection.typeMembers)
      case ._APPLIED_DOCUMENT_REFERENCE(let selection): members.formUnion(selection.typeMembers)
      case ._APPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT(let selection): members.formUnion(selection.typeMembers)
      case ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(let selection): members.formUnion(selection.typeMembers)
      case ._APPLIED_IDENTIFICATION_ASSIGNMENT(let selection): members.formUnion(selection.typeMembers)
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): members.formUnion(selection.typeMembers)
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let selection): members.formUnion(selection.typeMembers)
      case ._CLASS_SYSTEM(let selection): members.formUnion(selection.typeMembers)
      case ._CONDITIONAL_EFFECTIVITY(let selection): members.formUnion(selection.typeMembers)
      case ._CONFIGURATION_DESIGN(let selection): members.formUnion(selection.typeMembers)
      case ._CONFIGURATION_EFFECTIVITY(let selection): members.formUnion(selection.typeMembers)
      case ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(let selection): members.formUnion(selection.typeMembers)
      case ._DOCUMENT(let selection): members.formUnion(selection.typeMembers)
      case ._DOCUMENT_FILE(let selection): members.formUnion(selection.typeMembers)
      case ._DRAUGHTING_MODEL(let selection): members.formUnion(selection.typeMembers)
      case ._DRAWING_REVISION(let selection): members.formUnion(selection.typeMembers)
      case ._ENVELOPE(let selection): members.formUnion(selection.typeMembers)
      case ._EVALUATED_CHARACTERISTIC_OF_PRODUCT_AS_INDIVIDUAL_TEST_RESULT(let selection): members.formUnion(selection.typeMembers)
      case ._EVIDENCE(let selection): members.formUnion(selection.typeMembers)
      case ._EXCLUSIVE_PRODUCT_CONCEPT_FEATURE_CATEGORY(let selection): members.formUnion(selection.typeMembers)
      case ._EXECUTED_ACTION(let selection): members.formUnion(selection.typeMembers)
      case ._EXTERNALLY_DEFINED_GENERAL_PROPERTY(let selection): members.formUnion(selection.typeMembers)
      case ._GENERAL_PROPERTY(let selection): members.formUnion(selection.typeMembers)
      case ._GROUP(let selection): members.formUnion(selection.typeMembers)
      case ._IDENTIFICATION_ASSIGNMENT_RELATIONSHIP(let selection): members.formUnion(selection.typeMembers)
      case ._INTERFACE_CONNECTION(let selection): members.formUnion(selection.typeMembers)
      case ._INTERFACE_CONNECTOR_AS_PLANNED(let selection): members.formUnion(selection.typeMembers)
      case ._INTERFACE_CONNECTOR_AS_REALIZED(let selection): members.formUnion(selection.typeMembers)
      case ._INTERFACE_CONNECTOR_DESIGN(let selection): members.formUnion(selection.typeMembers)
      case ._INTERFACE_CONNECTOR_OCCURRENCE(let selection): members.formUnion(selection.typeMembers)
      case ._INTERFACE_DEFINITION_CONNECTION(let selection): members.formUnion(selection.typeMembers)
      case ._INTERFACE_DEFINITION_FOR(let selection): members.formUnion(selection.typeMembers)
      case ._MAKE_FROM_USAGE_OPTION(let selection): members.formUnion(selection.typeMembers)
      case ._MATERIAL_DESIGNATION(let selection): members.formUnion(selection.typeMembers)
      case ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(let selection): members.formUnion(selection.typeMembers)
      case ._ORGANIZATIONAL_PROJECT(let selection): members.formUnion(selection.typeMembers)
      case ._PACKAGE_PRODUCT_CONCEPT_FEATURE(let selection): members.formUnion(selection.typeMembers)
      case ._PRESENTATION_AREA(let selection): members.formUnion(selection.typeMembers)
      case ._PROCESS_PLAN(let selection): members.formUnion(selection.typeMembers)
      case ._PRODUCT(let selection): members.formUnion(selection.typeMembers)
      case ._PRODUCT_CLASS(let selection): members.formUnion(selection.typeMembers)
      case ._PRODUCT_CONCEPT(let selection): members.formUnion(selection.typeMembers)
      case ._PRODUCT_CONCEPT_FEATURE(let selection): members.formUnion(selection.typeMembers)
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY(let selection): members.formUnion(selection.typeMembers)
      case ._PRODUCT_DEFINITION(let selection): members.formUnion(selection.typeMembers)
      case ._PRODUCT_DEFINITION_FORMATION(let selection): members.formUnion(selection.typeMembers)
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let selection): members.formUnion(selection.typeMembers)
      case ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(let selection): members.formUnion(selection.typeMembers)
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): members.formUnion(selection.typeMembers)
      case ._PRODUCT_DEFINITION_USAGE(let selection): members.formUnion(selection.typeMembers)
      case ._PRODUCT_DESIGN_TO_INDIVIDUAL(let selection): members.formUnion(selection.typeMembers)
      case ._PRODUCT_DESIGN_VERSION_TO_INDIVIDUAL(let selection): members.formUnion(selection.typeMembers)
      case ._PRODUCT_GROUP(let selection): members.formUnion(selection.typeMembers)
      case ._PRODUCT_GROUP_MEMBERSHIP(let selection): members.formUnion(selection.typeMembers)
      case ._PRODUCT_GROUP_RELATIONSHIP(let selection): members.formUnion(selection.typeMembers)
      case ._PRODUCT_IDENTIFICATION(let selection): members.formUnion(selection.typeMembers)
      case ._PRODUCT_PROCESS_PLAN(let selection): members.formUnion(selection.typeMembers)
      case ._PRODUCT_RELATIONSHIP(let selection): members.formUnion(selection.typeMembers)
      case ._PROPERTY_DEFINITION(let selection): members.formUnion(selection.typeMembers)
      case ._PROPERTY_DEFINITION_REPRESENTATION(let selection): members.formUnion(selection.typeMembers)
      case ._REPRESENTATION(let selection): members.formUnion(selection.typeMembers)
      case ._REQUIREMENT_ASSIGNMENT(let selection): members.formUnion(selection.typeMembers)
      case ._REQUIREMENT_SOURCE(let selection): members.formUnion(selection.typeMembers)
      case ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(let selection): members.formUnion(selection.typeMembers)
      case ._RESOURCE_PROPERTY(let selection): members.formUnion(selection.typeMembers)
      case ._SHAPE_REPRESENTATION(let selection): members.formUnion(selection.typeMembers)
      case ._STRUCTURED_MESSAGE(let selection): members.formUnion(selection.typeMembers)
      case ._VALIDATION(let selection): members.formUnion(selection.typeMembers)
      case ._VERIFICATION(let selection): members.formUnion(selection.typeMembers)
      case ._VERSIONED_ACTION_REQUEST(let selection): members.formUnion(selection.typeMembers)
      }
      return members
    }

    public var entityReference: SDAI.EntityReference? {
      switch self {
      case ._ACTION(let selection): return selection.entityReference
      case ._ACTION_DIRECTIVE(let selection): return selection.entityReference
      case ._ACTION_METHOD(let selection): return selection.entityReference
      case ._ACTION_METHOD_RELATIONSHIP(let selection): return selection.entityReference
      case ._ACTION_PROPERTY(let selection): return selection.entityReference
      case ._ACTION_PROPERTY_REPRESENTATION(let selection): return selection.entityReference
      case ._APPLIED_ACTION_ASSIGNMENT(let selection): return selection.entityReference
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let selection): return selection.entityReference
      case ._APPLIED_CLASSIFICATION_ASSIGNMENT(let selection): return selection.entityReference
      case ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT(let selection): return selection.entityReference
      case ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT_RELATIONSHIP(let selection): return selection.entityReference
      case ._APPLIED_DOCUMENT_REFERENCE(let selection): return selection.entityReference
      case ._APPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT(let selection): return selection.entityReference
      case ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(let selection): return selection.entityReference
      case ._APPLIED_IDENTIFICATION_ASSIGNMENT(let selection): return selection.entityReference
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.entityReference
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let selection): return selection.entityReference
      case ._CLASS_SYSTEM(let selection): return selection.entityReference
      case ._CONDITIONAL_EFFECTIVITY(let selection): return selection.entityReference
      case ._CONFIGURATION_DESIGN(let selection): return selection.entityReference
      case ._CONFIGURATION_EFFECTIVITY(let selection): return selection.entityReference
      case ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(let selection): return selection.entityReference
      case ._DOCUMENT(let selection): return selection.entityReference
      case ._DOCUMENT_FILE(let selection): return selection.entityReference
      case ._DRAUGHTING_MODEL(let selection): return selection.entityReference
      case ._DRAWING_REVISION(let selection): return selection.entityReference
      case ._ENVELOPE(let selection): return selection.entityReference
      case ._EVALUATED_CHARACTERISTIC_OF_PRODUCT_AS_INDIVIDUAL_TEST_RESULT(let selection): return selection.entityReference
      case ._EVIDENCE(let selection): return selection.entityReference
      case ._EXCLUSIVE_PRODUCT_CONCEPT_FEATURE_CATEGORY(let selection): return selection.entityReference
      case ._EXECUTED_ACTION(let selection): return selection.entityReference
      case ._EXTERNALLY_DEFINED_GENERAL_PROPERTY(let selection): return selection.entityReference
      case ._GENERAL_PROPERTY(let selection): return selection.entityReference
      case ._GROUP(let selection): return selection.entityReference
      case ._IDENTIFICATION_ASSIGNMENT_RELATIONSHIP(let selection): return selection.entityReference
      case ._INTERFACE_CONNECTION(let selection): return selection.entityReference
      case ._INTERFACE_CONNECTOR_AS_PLANNED(let selection): return selection.entityReference
      case ._INTERFACE_CONNECTOR_AS_REALIZED(let selection): return selection.entityReference
      case ._INTERFACE_CONNECTOR_DESIGN(let selection): return selection.entityReference
      case ._INTERFACE_CONNECTOR_OCCURRENCE(let selection): return selection.entityReference
      case ._INTERFACE_DEFINITION_CONNECTION(let selection): return selection.entityReference
      case ._INTERFACE_DEFINITION_FOR(let selection): return selection.entityReference
      case ._MAKE_FROM_USAGE_OPTION(let selection): return selection.entityReference
      case ._MATERIAL_DESIGNATION(let selection): return selection.entityReference
      case ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(let selection): return selection.entityReference
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.entityReference
      case ._PACKAGE_PRODUCT_CONCEPT_FEATURE(let selection): return selection.entityReference
      case ._PRESENTATION_AREA(let selection): return selection.entityReference
      case ._PROCESS_PLAN(let selection): return selection.entityReference
      case ._PRODUCT(let selection): return selection.entityReference
      case ._PRODUCT_CLASS(let selection): return selection.entityReference
      case ._PRODUCT_CONCEPT(let selection): return selection.entityReference
      case ._PRODUCT_CONCEPT_FEATURE(let selection): return selection.entityReference
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY(let selection): return selection.entityReference
      case ._PRODUCT_DEFINITION(let selection): return selection.entityReference
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.entityReference
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let selection): return selection.entityReference
      case ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(let selection): return selection.entityReference
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.entityReference
      case ._PRODUCT_DEFINITION_USAGE(let selection): return selection.entityReference
      case ._PRODUCT_DESIGN_TO_INDIVIDUAL(let selection): return selection.entityReference
      case ._PRODUCT_DESIGN_VERSION_TO_INDIVIDUAL(let selection): return selection.entityReference
      case ._PRODUCT_GROUP(let selection): return selection.entityReference
      case ._PRODUCT_GROUP_MEMBERSHIP(let selection): return selection.entityReference
      case ._PRODUCT_GROUP_RELATIONSHIP(let selection): return selection.entityReference
      case ._PRODUCT_IDENTIFICATION(let selection): return selection.entityReference
      case ._PRODUCT_PROCESS_PLAN(let selection): return selection.entityReference
      case ._PRODUCT_RELATIONSHIP(let selection): return selection.entityReference
      case ._PROPERTY_DEFINITION(let selection): return selection.entityReference
      case ._PROPERTY_DEFINITION_REPRESENTATION(let selection): return selection.entityReference
      case ._REPRESENTATION(let selection): return selection.entityReference
      case ._REQUIREMENT_ASSIGNMENT(let selection): return selection.entityReference
      case ._REQUIREMENT_SOURCE(let selection): return selection.entityReference
      case ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(let selection): return selection.entityReference
      case ._RESOURCE_PROPERTY(let selection): return selection.entityReference
      case ._SHAPE_REPRESENTATION(let selection): return selection.entityReference
      case ._STRUCTURED_MESSAGE(let selection): return selection.entityReference
      case ._VALIDATION(let selection): return selection.entityReference
      case ._VERIFICATION(let selection): return selection.entityReference
      case ._VERSIONED_ACTION_REQUEST(let selection): return selection.entityReference
      }
    }
    public var stringValue: SDAI.STRING? {
      switch self {
      case ._ACTION(let selection): return selection.stringValue
      case ._ACTION_DIRECTIVE(let selection): return selection.stringValue
      case ._ACTION_METHOD(let selection): return selection.stringValue
      case ._ACTION_METHOD_RELATIONSHIP(let selection): return selection.stringValue
      case ._ACTION_PROPERTY(let selection): return selection.stringValue
      case ._ACTION_PROPERTY_REPRESENTATION(let selection): return selection.stringValue
      case ._APPLIED_ACTION_ASSIGNMENT(let selection): return selection.stringValue
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let selection): return selection.stringValue
      case ._APPLIED_CLASSIFICATION_ASSIGNMENT(let selection): return selection.stringValue
      case ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT(let selection): return selection.stringValue
      case ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT_RELATIONSHIP(let selection): return selection.stringValue
      case ._APPLIED_DOCUMENT_REFERENCE(let selection): return selection.stringValue
      case ._APPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT(let selection): return selection.stringValue
      case ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(let selection): return selection.stringValue
      case ._APPLIED_IDENTIFICATION_ASSIGNMENT(let selection): return selection.stringValue
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.stringValue
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let selection): return selection.stringValue
      case ._CLASS_SYSTEM(let selection): return selection.stringValue
      case ._CONDITIONAL_EFFECTIVITY(let selection): return selection.stringValue
      case ._CONFIGURATION_DESIGN(let selection): return selection.stringValue
      case ._CONFIGURATION_EFFECTIVITY(let selection): return selection.stringValue
      case ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(let selection): return selection.stringValue
      case ._DOCUMENT(let selection): return selection.stringValue
      case ._DOCUMENT_FILE(let selection): return selection.stringValue
      case ._DRAUGHTING_MODEL(let selection): return selection.stringValue
      case ._DRAWING_REVISION(let selection): return selection.stringValue
      case ._ENVELOPE(let selection): return selection.stringValue
      case ._EVALUATED_CHARACTERISTIC_OF_PRODUCT_AS_INDIVIDUAL_TEST_RESULT(let selection): return selection.stringValue
      case ._EVIDENCE(let selection): return selection.stringValue
      case ._EXCLUSIVE_PRODUCT_CONCEPT_FEATURE_CATEGORY(let selection): return selection.stringValue
      case ._EXECUTED_ACTION(let selection): return selection.stringValue
      case ._EXTERNALLY_DEFINED_GENERAL_PROPERTY(let selection): return selection.stringValue
      case ._GENERAL_PROPERTY(let selection): return selection.stringValue
      case ._GROUP(let selection): return selection.stringValue
      case ._IDENTIFICATION_ASSIGNMENT_RELATIONSHIP(let selection): return selection.stringValue
      case ._INTERFACE_CONNECTION(let selection): return selection.stringValue
      case ._INTERFACE_CONNECTOR_AS_PLANNED(let selection): return selection.stringValue
      case ._INTERFACE_CONNECTOR_AS_REALIZED(let selection): return selection.stringValue
      case ._INTERFACE_CONNECTOR_DESIGN(let selection): return selection.stringValue
      case ._INTERFACE_CONNECTOR_OCCURRENCE(let selection): return selection.stringValue
      case ._INTERFACE_DEFINITION_CONNECTION(let selection): return selection.stringValue
      case ._INTERFACE_DEFINITION_FOR(let selection): return selection.stringValue
      case ._MAKE_FROM_USAGE_OPTION(let selection): return selection.stringValue
      case ._MATERIAL_DESIGNATION(let selection): return selection.stringValue
      case ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(let selection): return selection.stringValue
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.stringValue
      case ._PACKAGE_PRODUCT_CONCEPT_FEATURE(let selection): return selection.stringValue
      case ._PRESENTATION_AREA(let selection): return selection.stringValue
      case ._PROCESS_PLAN(let selection): return selection.stringValue
      case ._PRODUCT(let selection): return selection.stringValue
      case ._PRODUCT_CLASS(let selection): return selection.stringValue
      case ._PRODUCT_CONCEPT(let selection): return selection.stringValue
      case ._PRODUCT_CONCEPT_FEATURE(let selection): return selection.stringValue
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY(let selection): return selection.stringValue
      case ._PRODUCT_DEFINITION(let selection): return selection.stringValue
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.stringValue
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let selection): return selection.stringValue
      case ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(let selection): return selection.stringValue
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.stringValue
      case ._PRODUCT_DEFINITION_USAGE(let selection): return selection.stringValue
      case ._PRODUCT_DESIGN_TO_INDIVIDUAL(let selection): return selection.stringValue
      case ._PRODUCT_DESIGN_VERSION_TO_INDIVIDUAL(let selection): return selection.stringValue
      case ._PRODUCT_GROUP(let selection): return selection.stringValue
      case ._PRODUCT_GROUP_MEMBERSHIP(let selection): return selection.stringValue
      case ._PRODUCT_GROUP_RELATIONSHIP(let selection): return selection.stringValue
      case ._PRODUCT_IDENTIFICATION(let selection): return selection.stringValue
      case ._PRODUCT_PROCESS_PLAN(let selection): return selection.stringValue
      case ._PRODUCT_RELATIONSHIP(let selection): return selection.stringValue
      case ._PROPERTY_DEFINITION(let selection): return selection.stringValue
      case ._PROPERTY_DEFINITION_REPRESENTATION(let selection): return selection.stringValue
      case ._REPRESENTATION(let selection): return selection.stringValue
      case ._REQUIREMENT_ASSIGNMENT(let selection): return selection.stringValue
      case ._REQUIREMENT_SOURCE(let selection): return selection.stringValue
      case ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(let selection): return selection.stringValue
      case ._RESOURCE_PROPERTY(let selection): return selection.stringValue
      case ._SHAPE_REPRESENTATION(let selection): return selection.stringValue
      case ._STRUCTURED_MESSAGE(let selection): return selection.stringValue
      case ._VALIDATION(let selection): return selection.stringValue
      case ._VERIFICATION(let selection): return selection.stringValue
      case ._VERSIONED_ACTION_REQUEST(let selection): return selection.stringValue
      }
    }
    public var binaryValue: SDAI.BINARY? {
      switch self {
      case ._ACTION(let selection): return selection.binaryValue
      case ._ACTION_DIRECTIVE(let selection): return selection.binaryValue
      case ._ACTION_METHOD(let selection): return selection.binaryValue
      case ._ACTION_METHOD_RELATIONSHIP(let selection): return selection.binaryValue
      case ._ACTION_PROPERTY(let selection): return selection.binaryValue
      case ._ACTION_PROPERTY_REPRESENTATION(let selection): return selection.binaryValue
      case ._APPLIED_ACTION_ASSIGNMENT(let selection): return selection.binaryValue
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let selection): return selection.binaryValue
      case ._APPLIED_CLASSIFICATION_ASSIGNMENT(let selection): return selection.binaryValue
      case ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT(let selection): return selection.binaryValue
      case ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT_RELATIONSHIP(let selection): return selection.binaryValue
      case ._APPLIED_DOCUMENT_REFERENCE(let selection): return selection.binaryValue
      case ._APPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT(let selection): return selection.binaryValue
      case ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(let selection): return selection.binaryValue
      case ._APPLIED_IDENTIFICATION_ASSIGNMENT(let selection): return selection.binaryValue
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.binaryValue
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let selection): return selection.binaryValue
      case ._CLASS_SYSTEM(let selection): return selection.binaryValue
      case ._CONDITIONAL_EFFECTIVITY(let selection): return selection.binaryValue
      case ._CONFIGURATION_DESIGN(let selection): return selection.binaryValue
      case ._CONFIGURATION_EFFECTIVITY(let selection): return selection.binaryValue
      case ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(let selection): return selection.binaryValue
      case ._DOCUMENT(let selection): return selection.binaryValue
      case ._DOCUMENT_FILE(let selection): return selection.binaryValue
      case ._DRAUGHTING_MODEL(let selection): return selection.binaryValue
      case ._DRAWING_REVISION(let selection): return selection.binaryValue
      case ._ENVELOPE(let selection): return selection.binaryValue
      case ._EVALUATED_CHARACTERISTIC_OF_PRODUCT_AS_INDIVIDUAL_TEST_RESULT(let selection): return selection.binaryValue
      case ._EVIDENCE(let selection): return selection.binaryValue
      case ._EXCLUSIVE_PRODUCT_CONCEPT_FEATURE_CATEGORY(let selection): return selection.binaryValue
      case ._EXECUTED_ACTION(let selection): return selection.binaryValue
      case ._EXTERNALLY_DEFINED_GENERAL_PROPERTY(let selection): return selection.binaryValue
      case ._GENERAL_PROPERTY(let selection): return selection.binaryValue
      case ._GROUP(let selection): return selection.binaryValue
      case ._IDENTIFICATION_ASSIGNMENT_RELATIONSHIP(let selection): return selection.binaryValue
      case ._INTERFACE_CONNECTION(let selection): return selection.binaryValue
      case ._INTERFACE_CONNECTOR_AS_PLANNED(let selection): return selection.binaryValue
      case ._INTERFACE_CONNECTOR_AS_REALIZED(let selection): return selection.binaryValue
      case ._INTERFACE_CONNECTOR_DESIGN(let selection): return selection.binaryValue
      case ._INTERFACE_CONNECTOR_OCCURRENCE(let selection): return selection.binaryValue
      case ._INTERFACE_DEFINITION_CONNECTION(let selection): return selection.binaryValue
      case ._INTERFACE_DEFINITION_FOR(let selection): return selection.binaryValue
      case ._MAKE_FROM_USAGE_OPTION(let selection): return selection.binaryValue
      case ._MATERIAL_DESIGNATION(let selection): return selection.binaryValue
      case ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(let selection): return selection.binaryValue
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.binaryValue
      case ._PACKAGE_PRODUCT_CONCEPT_FEATURE(let selection): return selection.binaryValue
      case ._PRESENTATION_AREA(let selection): return selection.binaryValue
      case ._PROCESS_PLAN(let selection): return selection.binaryValue
      case ._PRODUCT(let selection): return selection.binaryValue
      case ._PRODUCT_CLASS(let selection): return selection.binaryValue
      case ._PRODUCT_CONCEPT(let selection): return selection.binaryValue
      case ._PRODUCT_CONCEPT_FEATURE(let selection): return selection.binaryValue
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY(let selection): return selection.binaryValue
      case ._PRODUCT_DEFINITION(let selection): return selection.binaryValue
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.binaryValue
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let selection): return selection.binaryValue
      case ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(let selection): return selection.binaryValue
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.binaryValue
      case ._PRODUCT_DEFINITION_USAGE(let selection): return selection.binaryValue
      case ._PRODUCT_DESIGN_TO_INDIVIDUAL(let selection): return selection.binaryValue
      case ._PRODUCT_DESIGN_VERSION_TO_INDIVIDUAL(let selection): return selection.binaryValue
      case ._PRODUCT_GROUP(let selection): return selection.binaryValue
      case ._PRODUCT_GROUP_MEMBERSHIP(let selection): return selection.binaryValue
      case ._PRODUCT_GROUP_RELATIONSHIP(let selection): return selection.binaryValue
      case ._PRODUCT_IDENTIFICATION(let selection): return selection.binaryValue
      case ._PRODUCT_PROCESS_PLAN(let selection): return selection.binaryValue
      case ._PRODUCT_RELATIONSHIP(let selection): return selection.binaryValue
      case ._PROPERTY_DEFINITION(let selection): return selection.binaryValue
      case ._PROPERTY_DEFINITION_REPRESENTATION(let selection): return selection.binaryValue
      case ._REPRESENTATION(let selection): return selection.binaryValue
      case ._REQUIREMENT_ASSIGNMENT(let selection): return selection.binaryValue
      case ._REQUIREMENT_SOURCE(let selection): return selection.binaryValue
      case ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(let selection): return selection.binaryValue
      case ._RESOURCE_PROPERTY(let selection): return selection.binaryValue
      case ._SHAPE_REPRESENTATION(let selection): return selection.binaryValue
      case ._STRUCTURED_MESSAGE(let selection): return selection.binaryValue
      case ._VALIDATION(let selection): return selection.binaryValue
      case ._VERIFICATION(let selection): return selection.binaryValue
      case ._VERSIONED_ACTION_REQUEST(let selection): return selection.binaryValue
      }
    }
    public var logicalValue: SDAI.LOGICAL? {
      switch self {
      case ._ACTION(let selection): return selection.logicalValue
      case ._ACTION_DIRECTIVE(let selection): return selection.logicalValue
      case ._ACTION_METHOD(let selection): return selection.logicalValue
      case ._ACTION_METHOD_RELATIONSHIP(let selection): return selection.logicalValue
      case ._ACTION_PROPERTY(let selection): return selection.logicalValue
      case ._ACTION_PROPERTY_REPRESENTATION(let selection): return selection.logicalValue
      case ._APPLIED_ACTION_ASSIGNMENT(let selection): return selection.logicalValue
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let selection): return selection.logicalValue
      case ._APPLIED_CLASSIFICATION_ASSIGNMENT(let selection): return selection.logicalValue
      case ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT(let selection): return selection.logicalValue
      case ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT_RELATIONSHIP(let selection): return selection.logicalValue
      case ._APPLIED_DOCUMENT_REFERENCE(let selection): return selection.logicalValue
      case ._APPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT(let selection): return selection.logicalValue
      case ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(let selection): return selection.logicalValue
      case ._APPLIED_IDENTIFICATION_ASSIGNMENT(let selection): return selection.logicalValue
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.logicalValue
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let selection): return selection.logicalValue
      case ._CLASS_SYSTEM(let selection): return selection.logicalValue
      case ._CONDITIONAL_EFFECTIVITY(let selection): return selection.logicalValue
      case ._CONFIGURATION_DESIGN(let selection): return selection.logicalValue
      case ._CONFIGURATION_EFFECTIVITY(let selection): return selection.logicalValue
      case ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(let selection): return selection.logicalValue
      case ._DOCUMENT(let selection): return selection.logicalValue
      case ._DOCUMENT_FILE(let selection): return selection.logicalValue
      case ._DRAUGHTING_MODEL(let selection): return selection.logicalValue
      case ._DRAWING_REVISION(let selection): return selection.logicalValue
      case ._ENVELOPE(let selection): return selection.logicalValue
      case ._EVALUATED_CHARACTERISTIC_OF_PRODUCT_AS_INDIVIDUAL_TEST_RESULT(let selection): return selection.logicalValue
      case ._EVIDENCE(let selection): return selection.logicalValue
      case ._EXCLUSIVE_PRODUCT_CONCEPT_FEATURE_CATEGORY(let selection): return selection.logicalValue
      case ._EXECUTED_ACTION(let selection): return selection.logicalValue
      case ._EXTERNALLY_DEFINED_GENERAL_PROPERTY(let selection): return selection.logicalValue
      case ._GENERAL_PROPERTY(let selection): return selection.logicalValue
      case ._GROUP(let selection): return selection.logicalValue
      case ._IDENTIFICATION_ASSIGNMENT_RELATIONSHIP(let selection): return selection.logicalValue
      case ._INTERFACE_CONNECTION(let selection): return selection.logicalValue
      case ._INTERFACE_CONNECTOR_AS_PLANNED(let selection): return selection.logicalValue
      case ._INTERFACE_CONNECTOR_AS_REALIZED(let selection): return selection.logicalValue
      case ._INTERFACE_CONNECTOR_DESIGN(let selection): return selection.logicalValue
      case ._INTERFACE_CONNECTOR_OCCURRENCE(let selection): return selection.logicalValue
      case ._INTERFACE_DEFINITION_CONNECTION(let selection): return selection.logicalValue
      case ._INTERFACE_DEFINITION_FOR(let selection): return selection.logicalValue
      case ._MAKE_FROM_USAGE_OPTION(let selection): return selection.logicalValue
      case ._MATERIAL_DESIGNATION(let selection): return selection.logicalValue
      case ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(let selection): return selection.logicalValue
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.logicalValue
      case ._PACKAGE_PRODUCT_CONCEPT_FEATURE(let selection): return selection.logicalValue
      case ._PRESENTATION_AREA(let selection): return selection.logicalValue
      case ._PROCESS_PLAN(let selection): return selection.logicalValue
      case ._PRODUCT(let selection): return selection.logicalValue
      case ._PRODUCT_CLASS(let selection): return selection.logicalValue
      case ._PRODUCT_CONCEPT(let selection): return selection.logicalValue
      case ._PRODUCT_CONCEPT_FEATURE(let selection): return selection.logicalValue
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY(let selection): return selection.logicalValue
      case ._PRODUCT_DEFINITION(let selection): return selection.logicalValue
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.logicalValue
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let selection): return selection.logicalValue
      case ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(let selection): return selection.logicalValue
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.logicalValue
      case ._PRODUCT_DEFINITION_USAGE(let selection): return selection.logicalValue
      case ._PRODUCT_DESIGN_TO_INDIVIDUAL(let selection): return selection.logicalValue
      case ._PRODUCT_DESIGN_VERSION_TO_INDIVIDUAL(let selection): return selection.logicalValue
      case ._PRODUCT_GROUP(let selection): return selection.logicalValue
      case ._PRODUCT_GROUP_MEMBERSHIP(let selection): return selection.logicalValue
      case ._PRODUCT_GROUP_RELATIONSHIP(let selection): return selection.logicalValue
      case ._PRODUCT_IDENTIFICATION(let selection): return selection.logicalValue
      case ._PRODUCT_PROCESS_PLAN(let selection): return selection.logicalValue
      case ._PRODUCT_RELATIONSHIP(let selection): return selection.logicalValue
      case ._PROPERTY_DEFINITION(let selection): return selection.logicalValue
      case ._PROPERTY_DEFINITION_REPRESENTATION(let selection): return selection.logicalValue
      case ._REPRESENTATION(let selection): return selection.logicalValue
      case ._REQUIREMENT_ASSIGNMENT(let selection): return selection.logicalValue
      case ._REQUIREMENT_SOURCE(let selection): return selection.logicalValue
      case ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(let selection): return selection.logicalValue
      case ._RESOURCE_PROPERTY(let selection): return selection.logicalValue
      case ._SHAPE_REPRESENTATION(let selection): return selection.logicalValue
      case ._STRUCTURED_MESSAGE(let selection): return selection.logicalValue
      case ._VALIDATION(let selection): return selection.logicalValue
      case ._VERIFICATION(let selection): return selection.logicalValue
      case ._VERSIONED_ACTION_REQUEST(let selection): return selection.logicalValue
      }
    }
    public var booleanValue: SDAI.BOOLEAN? {
      switch self {
      case ._ACTION(let selection): return selection.booleanValue
      case ._ACTION_DIRECTIVE(let selection): return selection.booleanValue
      case ._ACTION_METHOD(let selection): return selection.booleanValue
      case ._ACTION_METHOD_RELATIONSHIP(let selection): return selection.booleanValue
      case ._ACTION_PROPERTY(let selection): return selection.booleanValue
      case ._ACTION_PROPERTY_REPRESENTATION(let selection): return selection.booleanValue
      case ._APPLIED_ACTION_ASSIGNMENT(let selection): return selection.booleanValue
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let selection): return selection.booleanValue
      case ._APPLIED_CLASSIFICATION_ASSIGNMENT(let selection): return selection.booleanValue
      case ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT(let selection): return selection.booleanValue
      case ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT_RELATIONSHIP(let selection): return selection.booleanValue
      case ._APPLIED_DOCUMENT_REFERENCE(let selection): return selection.booleanValue
      case ._APPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT(let selection): return selection.booleanValue
      case ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(let selection): return selection.booleanValue
      case ._APPLIED_IDENTIFICATION_ASSIGNMENT(let selection): return selection.booleanValue
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.booleanValue
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let selection): return selection.booleanValue
      case ._CLASS_SYSTEM(let selection): return selection.booleanValue
      case ._CONDITIONAL_EFFECTIVITY(let selection): return selection.booleanValue
      case ._CONFIGURATION_DESIGN(let selection): return selection.booleanValue
      case ._CONFIGURATION_EFFECTIVITY(let selection): return selection.booleanValue
      case ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(let selection): return selection.booleanValue
      case ._DOCUMENT(let selection): return selection.booleanValue
      case ._DOCUMENT_FILE(let selection): return selection.booleanValue
      case ._DRAUGHTING_MODEL(let selection): return selection.booleanValue
      case ._DRAWING_REVISION(let selection): return selection.booleanValue
      case ._ENVELOPE(let selection): return selection.booleanValue
      case ._EVALUATED_CHARACTERISTIC_OF_PRODUCT_AS_INDIVIDUAL_TEST_RESULT(let selection): return selection.booleanValue
      case ._EVIDENCE(let selection): return selection.booleanValue
      case ._EXCLUSIVE_PRODUCT_CONCEPT_FEATURE_CATEGORY(let selection): return selection.booleanValue
      case ._EXECUTED_ACTION(let selection): return selection.booleanValue
      case ._EXTERNALLY_DEFINED_GENERAL_PROPERTY(let selection): return selection.booleanValue
      case ._GENERAL_PROPERTY(let selection): return selection.booleanValue
      case ._GROUP(let selection): return selection.booleanValue
      case ._IDENTIFICATION_ASSIGNMENT_RELATIONSHIP(let selection): return selection.booleanValue
      case ._INTERFACE_CONNECTION(let selection): return selection.booleanValue
      case ._INTERFACE_CONNECTOR_AS_PLANNED(let selection): return selection.booleanValue
      case ._INTERFACE_CONNECTOR_AS_REALIZED(let selection): return selection.booleanValue
      case ._INTERFACE_CONNECTOR_DESIGN(let selection): return selection.booleanValue
      case ._INTERFACE_CONNECTOR_OCCURRENCE(let selection): return selection.booleanValue
      case ._INTERFACE_DEFINITION_CONNECTION(let selection): return selection.booleanValue
      case ._INTERFACE_DEFINITION_FOR(let selection): return selection.booleanValue
      case ._MAKE_FROM_USAGE_OPTION(let selection): return selection.booleanValue
      case ._MATERIAL_DESIGNATION(let selection): return selection.booleanValue
      case ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(let selection): return selection.booleanValue
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.booleanValue
      case ._PACKAGE_PRODUCT_CONCEPT_FEATURE(let selection): return selection.booleanValue
      case ._PRESENTATION_AREA(let selection): return selection.booleanValue
      case ._PROCESS_PLAN(let selection): return selection.booleanValue
      case ._PRODUCT(let selection): return selection.booleanValue
      case ._PRODUCT_CLASS(let selection): return selection.booleanValue
      case ._PRODUCT_CONCEPT(let selection): return selection.booleanValue
      case ._PRODUCT_CONCEPT_FEATURE(let selection): return selection.booleanValue
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY(let selection): return selection.booleanValue
      case ._PRODUCT_DEFINITION(let selection): return selection.booleanValue
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.booleanValue
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let selection): return selection.booleanValue
      case ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(let selection): return selection.booleanValue
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.booleanValue
      case ._PRODUCT_DEFINITION_USAGE(let selection): return selection.booleanValue
      case ._PRODUCT_DESIGN_TO_INDIVIDUAL(let selection): return selection.booleanValue
      case ._PRODUCT_DESIGN_VERSION_TO_INDIVIDUAL(let selection): return selection.booleanValue
      case ._PRODUCT_GROUP(let selection): return selection.booleanValue
      case ._PRODUCT_GROUP_MEMBERSHIP(let selection): return selection.booleanValue
      case ._PRODUCT_GROUP_RELATIONSHIP(let selection): return selection.booleanValue
      case ._PRODUCT_IDENTIFICATION(let selection): return selection.booleanValue
      case ._PRODUCT_PROCESS_PLAN(let selection): return selection.booleanValue
      case ._PRODUCT_RELATIONSHIP(let selection): return selection.booleanValue
      case ._PROPERTY_DEFINITION(let selection): return selection.booleanValue
      case ._PROPERTY_DEFINITION_REPRESENTATION(let selection): return selection.booleanValue
      case ._REPRESENTATION(let selection): return selection.booleanValue
      case ._REQUIREMENT_ASSIGNMENT(let selection): return selection.booleanValue
      case ._REQUIREMENT_SOURCE(let selection): return selection.booleanValue
      case ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(let selection): return selection.booleanValue
      case ._RESOURCE_PROPERTY(let selection): return selection.booleanValue
      case ._SHAPE_REPRESENTATION(let selection): return selection.booleanValue
      case ._STRUCTURED_MESSAGE(let selection): return selection.booleanValue
      case ._VALIDATION(let selection): return selection.booleanValue
      case ._VERIFICATION(let selection): return selection.booleanValue
      case ._VERSIONED_ACTION_REQUEST(let selection): return selection.booleanValue
      }
    }
    public var numberValue: SDAI.NUMBER? {
      switch self {
      case ._ACTION(let selection): return selection.numberValue
      case ._ACTION_DIRECTIVE(let selection): return selection.numberValue
      case ._ACTION_METHOD(let selection): return selection.numberValue
      case ._ACTION_METHOD_RELATIONSHIP(let selection): return selection.numberValue
      case ._ACTION_PROPERTY(let selection): return selection.numberValue
      case ._ACTION_PROPERTY_REPRESENTATION(let selection): return selection.numberValue
      case ._APPLIED_ACTION_ASSIGNMENT(let selection): return selection.numberValue
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let selection): return selection.numberValue
      case ._APPLIED_CLASSIFICATION_ASSIGNMENT(let selection): return selection.numberValue
      case ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT(let selection): return selection.numberValue
      case ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT_RELATIONSHIP(let selection): return selection.numberValue
      case ._APPLIED_DOCUMENT_REFERENCE(let selection): return selection.numberValue
      case ._APPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT(let selection): return selection.numberValue
      case ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(let selection): return selection.numberValue
      case ._APPLIED_IDENTIFICATION_ASSIGNMENT(let selection): return selection.numberValue
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.numberValue
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let selection): return selection.numberValue
      case ._CLASS_SYSTEM(let selection): return selection.numberValue
      case ._CONDITIONAL_EFFECTIVITY(let selection): return selection.numberValue
      case ._CONFIGURATION_DESIGN(let selection): return selection.numberValue
      case ._CONFIGURATION_EFFECTIVITY(let selection): return selection.numberValue
      case ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(let selection): return selection.numberValue
      case ._DOCUMENT(let selection): return selection.numberValue
      case ._DOCUMENT_FILE(let selection): return selection.numberValue
      case ._DRAUGHTING_MODEL(let selection): return selection.numberValue
      case ._DRAWING_REVISION(let selection): return selection.numberValue
      case ._ENVELOPE(let selection): return selection.numberValue
      case ._EVALUATED_CHARACTERISTIC_OF_PRODUCT_AS_INDIVIDUAL_TEST_RESULT(let selection): return selection.numberValue
      case ._EVIDENCE(let selection): return selection.numberValue
      case ._EXCLUSIVE_PRODUCT_CONCEPT_FEATURE_CATEGORY(let selection): return selection.numberValue
      case ._EXECUTED_ACTION(let selection): return selection.numberValue
      case ._EXTERNALLY_DEFINED_GENERAL_PROPERTY(let selection): return selection.numberValue
      case ._GENERAL_PROPERTY(let selection): return selection.numberValue
      case ._GROUP(let selection): return selection.numberValue
      case ._IDENTIFICATION_ASSIGNMENT_RELATIONSHIP(let selection): return selection.numberValue
      case ._INTERFACE_CONNECTION(let selection): return selection.numberValue
      case ._INTERFACE_CONNECTOR_AS_PLANNED(let selection): return selection.numberValue
      case ._INTERFACE_CONNECTOR_AS_REALIZED(let selection): return selection.numberValue
      case ._INTERFACE_CONNECTOR_DESIGN(let selection): return selection.numberValue
      case ._INTERFACE_CONNECTOR_OCCURRENCE(let selection): return selection.numberValue
      case ._INTERFACE_DEFINITION_CONNECTION(let selection): return selection.numberValue
      case ._INTERFACE_DEFINITION_FOR(let selection): return selection.numberValue
      case ._MAKE_FROM_USAGE_OPTION(let selection): return selection.numberValue
      case ._MATERIAL_DESIGNATION(let selection): return selection.numberValue
      case ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(let selection): return selection.numberValue
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.numberValue
      case ._PACKAGE_PRODUCT_CONCEPT_FEATURE(let selection): return selection.numberValue
      case ._PRESENTATION_AREA(let selection): return selection.numberValue
      case ._PROCESS_PLAN(let selection): return selection.numberValue
      case ._PRODUCT(let selection): return selection.numberValue
      case ._PRODUCT_CLASS(let selection): return selection.numberValue
      case ._PRODUCT_CONCEPT(let selection): return selection.numberValue
      case ._PRODUCT_CONCEPT_FEATURE(let selection): return selection.numberValue
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY(let selection): return selection.numberValue
      case ._PRODUCT_DEFINITION(let selection): return selection.numberValue
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.numberValue
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let selection): return selection.numberValue
      case ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(let selection): return selection.numberValue
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.numberValue
      case ._PRODUCT_DEFINITION_USAGE(let selection): return selection.numberValue
      case ._PRODUCT_DESIGN_TO_INDIVIDUAL(let selection): return selection.numberValue
      case ._PRODUCT_DESIGN_VERSION_TO_INDIVIDUAL(let selection): return selection.numberValue
      case ._PRODUCT_GROUP(let selection): return selection.numberValue
      case ._PRODUCT_GROUP_MEMBERSHIP(let selection): return selection.numberValue
      case ._PRODUCT_GROUP_RELATIONSHIP(let selection): return selection.numberValue
      case ._PRODUCT_IDENTIFICATION(let selection): return selection.numberValue
      case ._PRODUCT_PROCESS_PLAN(let selection): return selection.numberValue
      case ._PRODUCT_RELATIONSHIP(let selection): return selection.numberValue
      case ._PROPERTY_DEFINITION(let selection): return selection.numberValue
      case ._PROPERTY_DEFINITION_REPRESENTATION(let selection): return selection.numberValue
      case ._REPRESENTATION(let selection): return selection.numberValue
      case ._REQUIREMENT_ASSIGNMENT(let selection): return selection.numberValue
      case ._REQUIREMENT_SOURCE(let selection): return selection.numberValue
      case ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(let selection): return selection.numberValue
      case ._RESOURCE_PROPERTY(let selection): return selection.numberValue
      case ._SHAPE_REPRESENTATION(let selection): return selection.numberValue
      case ._STRUCTURED_MESSAGE(let selection): return selection.numberValue
      case ._VALIDATION(let selection): return selection.numberValue
      case ._VERIFICATION(let selection): return selection.numberValue
      case ._VERSIONED_ACTION_REQUEST(let selection): return selection.numberValue
      }
    }
    public var realValue: SDAI.REAL? {
      switch self {
      case ._ACTION(let selection): return selection.realValue
      case ._ACTION_DIRECTIVE(let selection): return selection.realValue
      case ._ACTION_METHOD(let selection): return selection.realValue
      case ._ACTION_METHOD_RELATIONSHIP(let selection): return selection.realValue
      case ._ACTION_PROPERTY(let selection): return selection.realValue
      case ._ACTION_PROPERTY_REPRESENTATION(let selection): return selection.realValue
      case ._APPLIED_ACTION_ASSIGNMENT(let selection): return selection.realValue
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let selection): return selection.realValue
      case ._APPLIED_CLASSIFICATION_ASSIGNMENT(let selection): return selection.realValue
      case ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT(let selection): return selection.realValue
      case ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT_RELATIONSHIP(let selection): return selection.realValue
      case ._APPLIED_DOCUMENT_REFERENCE(let selection): return selection.realValue
      case ._APPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT(let selection): return selection.realValue
      case ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(let selection): return selection.realValue
      case ._APPLIED_IDENTIFICATION_ASSIGNMENT(let selection): return selection.realValue
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.realValue
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let selection): return selection.realValue
      case ._CLASS_SYSTEM(let selection): return selection.realValue
      case ._CONDITIONAL_EFFECTIVITY(let selection): return selection.realValue
      case ._CONFIGURATION_DESIGN(let selection): return selection.realValue
      case ._CONFIGURATION_EFFECTIVITY(let selection): return selection.realValue
      case ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(let selection): return selection.realValue
      case ._DOCUMENT(let selection): return selection.realValue
      case ._DOCUMENT_FILE(let selection): return selection.realValue
      case ._DRAUGHTING_MODEL(let selection): return selection.realValue
      case ._DRAWING_REVISION(let selection): return selection.realValue
      case ._ENVELOPE(let selection): return selection.realValue
      case ._EVALUATED_CHARACTERISTIC_OF_PRODUCT_AS_INDIVIDUAL_TEST_RESULT(let selection): return selection.realValue
      case ._EVIDENCE(let selection): return selection.realValue
      case ._EXCLUSIVE_PRODUCT_CONCEPT_FEATURE_CATEGORY(let selection): return selection.realValue
      case ._EXECUTED_ACTION(let selection): return selection.realValue
      case ._EXTERNALLY_DEFINED_GENERAL_PROPERTY(let selection): return selection.realValue
      case ._GENERAL_PROPERTY(let selection): return selection.realValue
      case ._GROUP(let selection): return selection.realValue
      case ._IDENTIFICATION_ASSIGNMENT_RELATIONSHIP(let selection): return selection.realValue
      case ._INTERFACE_CONNECTION(let selection): return selection.realValue
      case ._INTERFACE_CONNECTOR_AS_PLANNED(let selection): return selection.realValue
      case ._INTERFACE_CONNECTOR_AS_REALIZED(let selection): return selection.realValue
      case ._INTERFACE_CONNECTOR_DESIGN(let selection): return selection.realValue
      case ._INTERFACE_CONNECTOR_OCCURRENCE(let selection): return selection.realValue
      case ._INTERFACE_DEFINITION_CONNECTION(let selection): return selection.realValue
      case ._INTERFACE_DEFINITION_FOR(let selection): return selection.realValue
      case ._MAKE_FROM_USAGE_OPTION(let selection): return selection.realValue
      case ._MATERIAL_DESIGNATION(let selection): return selection.realValue
      case ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(let selection): return selection.realValue
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.realValue
      case ._PACKAGE_PRODUCT_CONCEPT_FEATURE(let selection): return selection.realValue
      case ._PRESENTATION_AREA(let selection): return selection.realValue
      case ._PROCESS_PLAN(let selection): return selection.realValue
      case ._PRODUCT(let selection): return selection.realValue
      case ._PRODUCT_CLASS(let selection): return selection.realValue
      case ._PRODUCT_CONCEPT(let selection): return selection.realValue
      case ._PRODUCT_CONCEPT_FEATURE(let selection): return selection.realValue
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY(let selection): return selection.realValue
      case ._PRODUCT_DEFINITION(let selection): return selection.realValue
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.realValue
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let selection): return selection.realValue
      case ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(let selection): return selection.realValue
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.realValue
      case ._PRODUCT_DEFINITION_USAGE(let selection): return selection.realValue
      case ._PRODUCT_DESIGN_TO_INDIVIDUAL(let selection): return selection.realValue
      case ._PRODUCT_DESIGN_VERSION_TO_INDIVIDUAL(let selection): return selection.realValue
      case ._PRODUCT_GROUP(let selection): return selection.realValue
      case ._PRODUCT_GROUP_MEMBERSHIP(let selection): return selection.realValue
      case ._PRODUCT_GROUP_RELATIONSHIP(let selection): return selection.realValue
      case ._PRODUCT_IDENTIFICATION(let selection): return selection.realValue
      case ._PRODUCT_PROCESS_PLAN(let selection): return selection.realValue
      case ._PRODUCT_RELATIONSHIP(let selection): return selection.realValue
      case ._PROPERTY_DEFINITION(let selection): return selection.realValue
      case ._PROPERTY_DEFINITION_REPRESENTATION(let selection): return selection.realValue
      case ._REPRESENTATION(let selection): return selection.realValue
      case ._REQUIREMENT_ASSIGNMENT(let selection): return selection.realValue
      case ._REQUIREMENT_SOURCE(let selection): return selection.realValue
      case ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(let selection): return selection.realValue
      case ._RESOURCE_PROPERTY(let selection): return selection.realValue
      case ._SHAPE_REPRESENTATION(let selection): return selection.realValue
      case ._STRUCTURED_MESSAGE(let selection): return selection.realValue
      case ._VALIDATION(let selection): return selection.realValue
      case ._VERIFICATION(let selection): return selection.realValue
      case ._VERSIONED_ACTION_REQUEST(let selection): return selection.realValue
      }
    }
    public var integerValue: SDAI.INTEGER? {
      switch self {
      case ._ACTION(let selection): return selection.integerValue
      case ._ACTION_DIRECTIVE(let selection): return selection.integerValue
      case ._ACTION_METHOD(let selection): return selection.integerValue
      case ._ACTION_METHOD_RELATIONSHIP(let selection): return selection.integerValue
      case ._ACTION_PROPERTY(let selection): return selection.integerValue
      case ._ACTION_PROPERTY_REPRESENTATION(let selection): return selection.integerValue
      case ._APPLIED_ACTION_ASSIGNMENT(let selection): return selection.integerValue
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let selection): return selection.integerValue
      case ._APPLIED_CLASSIFICATION_ASSIGNMENT(let selection): return selection.integerValue
      case ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT(let selection): return selection.integerValue
      case ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT_RELATIONSHIP(let selection): return selection.integerValue
      case ._APPLIED_DOCUMENT_REFERENCE(let selection): return selection.integerValue
      case ._APPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT(let selection): return selection.integerValue
      case ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(let selection): return selection.integerValue
      case ._APPLIED_IDENTIFICATION_ASSIGNMENT(let selection): return selection.integerValue
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.integerValue
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let selection): return selection.integerValue
      case ._CLASS_SYSTEM(let selection): return selection.integerValue
      case ._CONDITIONAL_EFFECTIVITY(let selection): return selection.integerValue
      case ._CONFIGURATION_DESIGN(let selection): return selection.integerValue
      case ._CONFIGURATION_EFFECTIVITY(let selection): return selection.integerValue
      case ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(let selection): return selection.integerValue
      case ._DOCUMENT(let selection): return selection.integerValue
      case ._DOCUMENT_FILE(let selection): return selection.integerValue
      case ._DRAUGHTING_MODEL(let selection): return selection.integerValue
      case ._DRAWING_REVISION(let selection): return selection.integerValue
      case ._ENVELOPE(let selection): return selection.integerValue
      case ._EVALUATED_CHARACTERISTIC_OF_PRODUCT_AS_INDIVIDUAL_TEST_RESULT(let selection): return selection.integerValue
      case ._EVIDENCE(let selection): return selection.integerValue
      case ._EXCLUSIVE_PRODUCT_CONCEPT_FEATURE_CATEGORY(let selection): return selection.integerValue
      case ._EXECUTED_ACTION(let selection): return selection.integerValue
      case ._EXTERNALLY_DEFINED_GENERAL_PROPERTY(let selection): return selection.integerValue
      case ._GENERAL_PROPERTY(let selection): return selection.integerValue
      case ._GROUP(let selection): return selection.integerValue
      case ._IDENTIFICATION_ASSIGNMENT_RELATIONSHIP(let selection): return selection.integerValue
      case ._INTERFACE_CONNECTION(let selection): return selection.integerValue
      case ._INTERFACE_CONNECTOR_AS_PLANNED(let selection): return selection.integerValue
      case ._INTERFACE_CONNECTOR_AS_REALIZED(let selection): return selection.integerValue
      case ._INTERFACE_CONNECTOR_DESIGN(let selection): return selection.integerValue
      case ._INTERFACE_CONNECTOR_OCCURRENCE(let selection): return selection.integerValue
      case ._INTERFACE_DEFINITION_CONNECTION(let selection): return selection.integerValue
      case ._INTERFACE_DEFINITION_FOR(let selection): return selection.integerValue
      case ._MAKE_FROM_USAGE_OPTION(let selection): return selection.integerValue
      case ._MATERIAL_DESIGNATION(let selection): return selection.integerValue
      case ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(let selection): return selection.integerValue
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.integerValue
      case ._PACKAGE_PRODUCT_CONCEPT_FEATURE(let selection): return selection.integerValue
      case ._PRESENTATION_AREA(let selection): return selection.integerValue
      case ._PROCESS_PLAN(let selection): return selection.integerValue
      case ._PRODUCT(let selection): return selection.integerValue
      case ._PRODUCT_CLASS(let selection): return selection.integerValue
      case ._PRODUCT_CONCEPT(let selection): return selection.integerValue
      case ._PRODUCT_CONCEPT_FEATURE(let selection): return selection.integerValue
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY(let selection): return selection.integerValue
      case ._PRODUCT_DEFINITION(let selection): return selection.integerValue
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.integerValue
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let selection): return selection.integerValue
      case ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(let selection): return selection.integerValue
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.integerValue
      case ._PRODUCT_DEFINITION_USAGE(let selection): return selection.integerValue
      case ._PRODUCT_DESIGN_TO_INDIVIDUAL(let selection): return selection.integerValue
      case ._PRODUCT_DESIGN_VERSION_TO_INDIVIDUAL(let selection): return selection.integerValue
      case ._PRODUCT_GROUP(let selection): return selection.integerValue
      case ._PRODUCT_GROUP_MEMBERSHIP(let selection): return selection.integerValue
      case ._PRODUCT_GROUP_RELATIONSHIP(let selection): return selection.integerValue
      case ._PRODUCT_IDENTIFICATION(let selection): return selection.integerValue
      case ._PRODUCT_PROCESS_PLAN(let selection): return selection.integerValue
      case ._PRODUCT_RELATIONSHIP(let selection): return selection.integerValue
      case ._PROPERTY_DEFINITION(let selection): return selection.integerValue
      case ._PROPERTY_DEFINITION_REPRESENTATION(let selection): return selection.integerValue
      case ._REPRESENTATION(let selection): return selection.integerValue
      case ._REQUIREMENT_ASSIGNMENT(let selection): return selection.integerValue
      case ._REQUIREMENT_SOURCE(let selection): return selection.integerValue
      case ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(let selection): return selection.integerValue
      case ._RESOURCE_PROPERTY(let selection): return selection.integerValue
      case ._SHAPE_REPRESENTATION(let selection): return selection.integerValue
      case ._STRUCTURED_MESSAGE(let selection): return selection.integerValue
      case ._VALIDATION(let selection): return selection.integerValue
      case ._VERIFICATION(let selection): return selection.integerValue
      case ._VERSIONED_ACTION_REQUEST(let selection): return selection.integerValue
      }
    }
    public var genericEnumValue: SDAI.GenericEnumValue? {
      switch self {
      case ._ACTION(let selection): return selection.genericEnumValue
      case ._ACTION_DIRECTIVE(let selection): return selection.genericEnumValue
      case ._ACTION_METHOD(let selection): return selection.genericEnumValue
      case ._ACTION_METHOD_RELATIONSHIP(let selection): return selection.genericEnumValue
      case ._ACTION_PROPERTY(let selection): return selection.genericEnumValue
      case ._ACTION_PROPERTY_REPRESENTATION(let selection): return selection.genericEnumValue
      case ._APPLIED_ACTION_ASSIGNMENT(let selection): return selection.genericEnumValue
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let selection): return selection.genericEnumValue
      case ._APPLIED_CLASSIFICATION_ASSIGNMENT(let selection): return selection.genericEnumValue
      case ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT(let selection): return selection.genericEnumValue
      case ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT_RELATIONSHIP(let selection): return selection.genericEnumValue
      case ._APPLIED_DOCUMENT_REFERENCE(let selection): return selection.genericEnumValue
      case ._APPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT(let selection): return selection.genericEnumValue
      case ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(let selection): return selection.genericEnumValue
      case ._APPLIED_IDENTIFICATION_ASSIGNMENT(let selection): return selection.genericEnumValue
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.genericEnumValue
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let selection): return selection.genericEnumValue
      case ._CLASS_SYSTEM(let selection): return selection.genericEnumValue
      case ._CONDITIONAL_EFFECTIVITY(let selection): return selection.genericEnumValue
      case ._CONFIGURATION_DESIGN(let selection): return selection.genericEnumValue
      case ._CONFIGURATION_EFFECTIVITY(let selection): return selection.genericEnumValue
      case ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(let selection): return selection.genericEnumValue
      case ._DOCUMENT(let selection): return selection.genericEnumValue
      case ._DOCUMENT_FILE(let selection): return selection.genericEnumValue
      case ._DRAUGHTING_MODEL(let selection): return selection.genericEnumValue
      case ._DRAWING_REVISION(let selection): return selection.genericEnumValue
      case ._ENVELOPE(let selection): return selection.genericEnumValue
      case ._EVALUATED_CHARACTERISTIC_OF_PRODUCT_AS_INDIVIDUAL_TEST_RESULT(let selection): return selection.genericEnumValue
      case ._EVIDENCE(let selection): return selection.genericEnumValue
      case ._EXCLUSIVE_PRODUCT_CONCEPT_FEATURE_CATEGORY(let selection): return selection.genericEnumValue
      case ._EXECUTED_ACTION(let selection): return selection.genericEnumValue
      case ._EXTERNALLY_DEFINED_GENERAL_PROPERTY(let selection): return selection.genericEnumValue
      case ._GENERAL_PROPERTY(let selection): return selection.genericEnumValue
      case ._GROUP(let selection): return selection.genericEnumValue
      case ._IDENTIFICATION_ASSIGNMENT_RELATIONSHIP(let selection): return selection.genericEnumValue
      case ._INTERFACE_CONNECTION(let selection): return selection.genericEnumValue
      case ._INTERFACE_CONNECTOR_AS_PLANNED(let selection): return selection.genericEnumValue
      case ._INTERFACE_CONNECTOR_AS_REALIZED(let selection): return selection.genericEnumValue
      case ._INTERFACE_CONNECTOR_DESIGN(let selection): return selection.genericEnumValue
      case ._INTERFACE_CONNECTOR_OCCURRENCE(let selection): return selection.genericEnumValue
      case ._INTERFACE_DEFINITION_CONNECTION(let selection): return selection.genericEnumValue
      case ._INTERFACE_DEFINITION_FOR(let selection): return selection.genericEnumValue
      case ._MAKE_FROM_USAGE_OPTION(let selection): return selection.genericEnumValue
      case ._MATERIAL_DESIGNATION(let selection): return selection.genericEnumValue
      case ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(let selection): return selection.genericEnumValue
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.genericEnumValue
      case ._PACKAGE_PRODUCT_CONCEPT_FEATURE(let selection): return selection.genericEnumValue
      case ._PRESENTATION_AREA(let selection): return selection.genericEnumValue
      case ._PROCESS_PLAN(let selection): return selection.genericEnumValue
      case ._PRODUCT(let selection): return selection.genericEnumValue
      case ._PRODUCT_CLASS(let selection): return selection.genericEnumValue
      case ._PRODUCT_CONCEPT(let selection): return selection.genericEnumValue
      case ._PRODUCT_CONCEPT_FEATURE(let selection): return selection.genericEnumValue
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY(let selection): return selection.genericEnumValue
      case ._PRODUCT_DEFINITION(let selection): return selection.genericEnumValue
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.genericEnumValue
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let selection): return selection.genericEnumValue
      case ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(let selection): return selection.genericEnumValue
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.genericEnumValue
      case ._PRODUCT_DEFINITION_USAGE(let selection): return selection.genericEnumValue
      case ._PRODUCT_DESIGN_TO_INDIVIDUAL(let selection): return selection.genericEnumValue
      case ._PRODUCT_DESIGN_VERSION_TO_INDIVIDUAL(let selection): return selection.genericEnumValue
      case ._PRODUCT_GROUP(let selection): return selection.genericEnumValue
      case ._PRODUCT_GROUP_MEMBERSHIP(let selection): return selection.genericEnumValue
      case ._PRODUCT_GROUP_RELATIONSHIP(let selection): return selection.genericEnumValue
      case ._PRODUCT_IDENTIFICATION(let selection): return selection.genericEnumValue
      case ._PRODUCT_PROCESS_PLAN(let selection): return selection.genericEnumValue
      case ._PRODUCT_RELATIONSHIP(let selection): return selection.genericEnumValue
      case ._PROPERTY_DEFINITION(let selection): return selection.genericEnumValue
      case ._PROPERTY_DEFINITION_REPRESENTATION(let selection): return selection.genericEnumValue
      case ._REPRESENTATION(let selection): return selection.genericEnumValue
      case ._REQUIREMENT_ASSIGNMENT(let selection): return selection.genericEnumValue
      case ._REQUIREMENT_SOURCE(let selection): return selection.genericEnumValue
      case ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(let selection): return selection.genericEnumValue
      case ._RESOURCE_PROPERTY(let selection): return selection.genericEnumValue
      case ._SHAPE_REPRESENTATION(let selection): return selection.genericEnumValue
      case ._STRUCTURED_MESSAGE(let selection): return selection.genericEnumValue
      case ._VALIDATION(let selection): return selection.genericEnumValue
      case ._VERIFICATION(let selection): return selection.genericEnumValue
      case ._VERSIONED_ACTION_REQUEST(let selection): return selection.genericEnumValue
      }
    }
    public func arrayOptionalValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.ARRAY_OPTIONAL<ELEM>? {
      switch self {
      case ._ACTION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._ACTION_DIRECTIVE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._ACTION_METHOD(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._ACTION_METHOD_RELATIONSHIP(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._ACTION_PROPERTY(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._ACTION_PROPERTY_REPRESENTATION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._APPLIED_ACTION_ASSIGNMENT(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._APPLIED_CLASSIFICATION_ASSIGNMENT(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT_RELATIONSHIP(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._APPLIED_DOCUMENT_REFERENCE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._APPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._APPLIED_IDENTIFICATION_ASSIGNMENT(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._CLASS_SYSTEM(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._CONDITIONAL_EFFECTIVITY(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._CONFIGURATION_DESIGN(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._CONFIGURATION_EFFECTIVITY(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._DOCUMENT(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._DOCUMENT_FILE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._DRAUGHTING_MODEL(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._DRAWING_REVISION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._ENVELOPE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._EVALUATED_CHARACTERISTIC_OF_PRODUCT_AS_INDIVIDUAL_TEST_RESULT(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._EVIDENCE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._EXCLUSIVE_PRODUCT_CONCEPT_FEATURE_CATEGORY(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._EXECUTED_ACTION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._EXTERNALLY_DEFINED_GENERAL_PROPERTY(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._GENERAL_PROPERTY(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._GROUP(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._IDENTIFICATION_ASSIGNMENT_RELATIONSHIP(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._INTERFACE_CONNECTION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._INTERFACE_CONNECTOR_AS_PLANNED(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._INTERFACE_CONNECTOR_AS_REALIZED(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._INTERFACE_CONNECTOR_DESIGN(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._INTERFACE_CONNECTOR_OCCURRENCE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._INTERFACE_DEFINITION_CONNECTION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._INTERFACE_DEFINITION_FOR(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._MAKE_FROM_USAGE_OPTION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._MATERIAL_DESIGNATION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PACKAGE_PRODUCT_CONCEPT_FEATURE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PRESENTATION_AREA(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PROCESS_PLAN(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PRODUCT(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PRODUCT_CLASS(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PRODUCT_CONCEPT(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PRODUCT_CONCEPT_FEATURE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PRODUCT_DEFINITION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_USAGE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PRODUCT_DESIGN_TO_INDIVIDUAL(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PRODUCT_DESIGN_VERSION_TO_INDIVIDUAL(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PRODUCT_GROUP(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PRODUCT_GROUP_MEMBERSHIP(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PRODUCT_GROUP_RELATIONSHIP(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PRODUCT_IDENTIFICATION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PRODUCT_PROCESS_PLAN(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PRODUCT_RELATIONSHIP(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PROPERTY_DEFINITION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PROPERTY_DEFINITION_REPRESENTATION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._REPRESENTATION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._REQUIREMENT_ASSIGNMENT(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._REQUIREMENT_SOURCE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._RESOURCE_PROPERTY(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._SHAPE_REPRESENTATION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._STRUCTURED_MESSAGE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._VALIDATION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._VERIFICATION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._VERSIONED_ACTION_REQUEST(let selection): return selection.arrayOptionalValue(elementType:elementType)
      }
    }
    public func arrayValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.ARRAY<ELEM>? {
      switch self {
      case ._ACTION(let selection): return selection.arrayValue(elementType:elementType)
      case ._ACTION_DIRECTIVE(let selection): return selection.arrayValue(elementType:elementType)
      case ._ACTION_METHOD(let selection): return selection.arrayValue(elementType:elementType)
      case ._ACTION_METHOD_RELATIONSHIP(let selection): return selection.arrayValue(elementType:elementType)
      case ._ACTION_PROPERTY(let selection): return selection.arrayValue(elementType:elementType)
      case ._ACTION_PROPERTY_REPRESENTATION(let selection): return selection.arrayValue(elementType:elementType)
      case ._APPLIED_ACTION_ASSIGNMENT(let selection): return selection.arrayValue(elementType:elementType)
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let selection): return selection.arrayValue(elementType:elementType)
      case ._APPLIED_CLASSIFICATION_ASSIGNMENT(let selection): return selection.arrayValue(elementType:elementType)
      case ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT(let selection): return selection.arrayValue(elementType:elementType)
      case ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT_RELATIONSHIP(let selection): return selection.arrayValue(elementType:elementType)
      case ._APPLIED_DOCUMENT_REFERENCE(let selection): return selection.arrayValue(elementType:elementType)
      case ._APPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT(let selection): return selection.arrayValue(elementType:elementType)
      case ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(let selection): return selection.arrayValue(elementType:elementType)
      case ._APPLIED_IDENTIFICATION_ASSIGNMENT(let selection): return selection.arrayValue(elementType:elementType)
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.arrayValue(elementType:elementType)
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let selection): return selection.arrayValue(elementType:elementType)
      case ._CLASS_SYSTEM(let selection): return selection.arrayValue(elementType:elementType)
      case ._CONDITIONAL_EFFECTIVITY(let selection): return selection.arrayValue(elementType:elementType)
      case ._CONFIGURATION_DESIGN(let selection): return selection.arrayValue(elementType:elementType)
      case ._CONFIGURATION_EFFECTIVITY(let selection): return selection.arrayValue(elementType:elementType)
      case ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(let selection): return selection.arrayValue(elementType:elementType)
      case ._DOCUMENT(let selection): return selection.arrayValue(elementType:elementType)
      case ._DOCUMENT_FILE(let selection): return selection.arrayValue(elementType:elementType)
      case ._DRAUGHTING_MODEL(let selection): return selection.arrayValue(elementType:elementType)
      case ._DRAWING_REVISION(let selection): return selection.arrayValue(elementType:elementType)
      case ._ENVELOPE(let selection): return selection.arrayValue(elementType:elementType)
      case ._EVALUATED_CHARACTERISTIC_OF_PRODUCT_AS_INDIVIDUAL_TEST_RESULT(let selection): return selection.arrayValue(elementType:elementType)
      case ._EVIDENCE(let selection): return selection.arrayValue(elementType:elementType)
      case ._EXCLUSIVE_PRODUCT_CONCEPT_FEATURE_CATEGORY(let selection): return selection.arrayValue(elementType:elementType)
      case ._EXECUTED_ACTION(let selection): return selection.arrayValue(elementType:elementType)
      case ._EXTERNALLY_DEFINED_GENERAL_PROPERTY(let selection): return selection.arrayValue(elementType:elementType)
      case ._GENERAL_PROPERTY(let selection): return selection.arrayValue(elementType:elementType)
      case ._GROUP(let selection): return selection.arrayValue(elementType:elementType)
      case ._IDENTIFICATION_ASSIGNMENT_RELATIONSHIP(let selection): return selection.arrayValue(elementType:elementType)
      case ._INTERFACE_CONNECTION(let selection): return selection.arrayValue(elementType:elementType)
      case ._INTERFACE_CONNECTOR_AS_PLANNED(let selection): return selection.arrayValue(elementType:elementType)
      case ._INTERFACE_CONNECTOR_AS_REALIZED(let selection): return selection.arrayValue(elementType:elementType)
      case ._INTERFACE_CONNECTOR_DESIGN(let selection): return selection.arrayValue(elementType:elementType)
      case ._INTERFACE_CONNECTOR_OCCURRENCE(let selection): return selection.arrayValue(elementType:elementType)
      case ._INTERFACE_DEFINITION_CONNECTION(let selection): return selection.arrayValue(elementType:elementType)
      case ._INTERFACE_DEFINITION_FOR(let selection): return selection.arrayValue(elementType:elementType)
      case ._MAKE_FROM_USAGE_OPTION(let selection): return selection.arrayValue(elementType:elementType)
      case ._MATERIAL_DESIGNATION(let selection): return selection.arrayValue(elementType:elementType)
      case ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(let selection): return selection.arrayValue(elementType:elementType)
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.arrayValue(elementType:elementType)
      case ._PACKAGE_PRODUCT_CONCEPT_FEATURE(let selection): return selection.arrayValue(elementType:elementType)
      case ._PRESENTATION_AREA(let selection): return selection.arrayValue(elementType:elementType)
      case ._PROCESS_PLAN(let selection): return selection.arrayValue(elementType:elementType)
      case ._PRODUCT(let selection): return selection.arrayValue(elementType:elementType)
      case ._PRODUCT_CLASS(let selection): return selection.arrayValue(elementType:elementType)
      case ._PRODUCT_CONCEPT(let selection): return selection.arrayValue(elementType:elementType)
      case ._PRODUCT_CONCEPT_FEATURE(let selection): return selection.arrayValue(elementType:elementType)
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY(let selection): return selection.arrayValue(elementType:elementType)
      case ._PRODUCT_DEFINITION(let selection): return selection.arrayValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.arrayValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let selection): return selection.arrayValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(let selection): return selection.arrayValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.arrayValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_USAGE(let selection): return selection.arrayValue(elementType:elementType)
      case ._PRODUCT_DESIGN_TO_INDIVIDUAL(let selection): return selection.arrayValue(elementType:elementType)
      case ._PRODUCT_DESIGN_VERSION_TO_INDIVIDUAL(let selection): return selection.arrayValue(elementType:elementType)
      case ._PRODUCT_GROUP(let selection): return selection.arrayValue(elementType:elementType)
      case ._PRODUCT_GROUP_MEMBERSHIP(let selection): return selection.arrayValue(elementType:elementType)
      case ._PRODUCT_GROUP_RELATIONSHIP(let selection): return selection.arrayValue(elementType:elementType)
      case ._PRODUCT_IDENTIFICATION(let selection): return selection.arrayValue(elementType:elementType)
      case ._PRODUCT_PROCESS_PLAN(let selection): return selection.arrayValue(elementType:elementType)
      case ._PRODUCT_RELATIONSHIP(let selection): return selection.arrayValue(elementType:elementType)
      case ._PROPERTY_DEFINITION(let selection): return selection.arrayValue(elementType:elementType)
      case ._PROPERTY_DEFINITION_REPRESENTATION(let selection): return selection.arrayValue(elementType:elementType)
      case ._REPRESENTATION(let selection): return selection.arrayValue(elementType:elementType)
      case ._REQUIREMENT_ASSIGNMENT(let selection): return selection.arrayValue(elementType:elementType)
      case ._REQUIREMENT_SOURCE(let selection): return selection.arrayValue(elementType:elementType)
      case ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(let selection): return selection.arrayValue(elementType:elementType)
      case ._RESOURCE_PROPERTY(let selection): return selection.arrayValue(elementType:elementType)
      case ._SHAPE_REPRESENTATION(let selection): return selection.arrayValue(elementType:elementType)
      case ._STRUCTURED_MESSAGE(let selection): return selection.arrayValue(elementType:elementType)
      case ._VALIDATION(let selection): return selection.arrayValue(elementType:elementType)
      case ._VERIFICATION(let selection): return selection.arrayValue(elementType:elementType)
      case ._VERSIONED_ACTION_REQUEST(let selection): return selection.arrayValue(elementType:elementType)
      }
    }
    public func listValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.LIST<ELEM>? {
      switch self {
      case ._ACTION(let selection): return selection.listValue(elementType:elementType)
      case ._ACTION_DIRECTIVE(let selection): return selection.listValue(elementType:elementType)
      case ._ACTION_METHOD(let selection): return selection.listValue(elementType:elementType)
      case ._ACTION_METHOD_RELATIONSHIP(let selection): return selection.listValue(elementType:elementType)
      case ._ACTION_PROPERTY(let selection): return selection.listValue(elementType:elementType)
      case ._ACTION_PROPERTY_REPRESENTATION(let selection): return selection.listValue(elementType:elementType)
      case ._APPLIED_ACTION_ASSIGNMENT(let selection): return selection.listValue(elementType:elementType)
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let selection): return selection.listValue(elementType:elementType)
      case ._APPLIED_CLASSIFICATION_ASSIGNMENT(let selection): return selection.listValue(elementType:elementType)
      case ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT(let selection): return selection.listValue(elementType:elementType)
      case ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT_RELATIONSHIP(let selection): return selection.listValue(elementType:elementType)
      case ._APPLIED_DOCUMENT_REFERENCE(let selection): return selection.listValue(elementType:elementType)
      case ._APPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT(let selection): return selection.listValue(elementType:elementType)
      case ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(let selection): return selection.listValue(elementType:elementType)
      case ._APPLIED_IDENTIFICATION_ASSIGNMENT(let selection): return selection.listValue(elementType:elementType)
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.listValue(elementType:elementType)
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let selection): return selection.listValue(elementType:elementType)
      case ._CLASS_SYSTEM(let selection): return selection.listValue(elementType:elementType)
      case ._CONDITIONAL_EFFECTIVITY(let selection): return selection.listValue(elementType:elementType)
      case ._CONFIGURATION_DESIGN(let selection): return selection.listValue(elementType:elementType)
      case ._CONFIGURATION_EFFECTIVITY(let selection): return selection.listValue(elementType:elementType)
      case ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(let selection): return selection.listValue(elementType:elementType)
      case ._DOCUMENT(let selection): return selection.listValue(elementType:elementType)
      case ._DOCUMENT_FILE(let selection): return selection.listValue(elementType:elementType)
      case ._DRAUGHTING_MODEL(let selection): return selection.listValue(elementType:elementType)
      case ._DRAWING_REVISION(let selection): return selection.listValue(elementType:elementType)
      case ._ENVELOPE(let selection): return selection.listValue(elementType:elementType)
      case ._EVALUATED_CHARACTERISTIC_OF_PRODUCT_AS_INDIVIDUAL_TEST_RESULT(let selection): return selection.listValue(elementType:elementType)
      case ._EVIDENCE(let selection): return selection.listValue(elementType:elementType)
      case ._EXCLUSIVE_PRODUCT_CONCEPT_FEATURE_CATEGORY(let selection): return selection.listValue(elementType:elementType)
      case ._EXECUTED_ACTION(let selection): return selection.listValue(elementType:elementType)
      case ._EXTERNALLY_DEFINED_GENERAL_PROPERTY(let selection): return selection.listValue(elementType:elementType)
      case ._GENERAL_PROPERTY(let selection): return selection.listValue(elementType:elementType)
      case ._GROUP(let selection): return selection.listValue(elementType:elementType)
      case ._IDENTIFICATION_ASSIGNMENT_RELATIONSHIP(let selection): return selection.listValue(elementType:elementType)
      case ._INTERFACE_CONNECTION(let selection): return selection.listValue(elementType:elementType)
      case ._INTERFACE_CONNECTOR_AS_PLANNED(let selection): return selection.listValue(elementType:elementType)
      case ._INTERFACE_CONNECTOR_AS_REALIZED(let selection): return selection.listValue(elementType:elementType)
      case ._INTERFACE_CONNECTOR_DESIGN(let selection): return selection.listValue(elementType:elementType)
      case ._INTERFACE_CONNECTOR_OCCURRENCE(let selection): return selection.listValue(elementType:elementType)
      case ._INTERFACE_DEFINITION_CONNECTION(let selection): return selection.listValue(elementType:elementType)
      case ._INTERFACE_DEFINITION_FOR(let selection): return selection.listValue(elementType:elementType)
      case ._MAKE_FROM_USAGE_OPTION(let selection): return selection.listValue(elementType:elementType)
      case ._MATERIAL_DESIGNATION(let selection): return selection.listValue(elementType:elementType)
      case ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(let selection): return selection.listValue(elementType:elementType)
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.listValue(elementType:elementType)
      case ._PACKAGE_PRODUCT_CONCEPT_FEATURE(let selection): return selection.listValue(elementType:elementType)
      case ._PRESENTATION_AREA(let selection): return selection.listValue(elementType:elementType)
      case ._PROCESS_PLAN(let selection): return selection.listValue(elementType:elementType)
      case ._PRODUCT(let selection): return selection.listValue(elementType:elementType)
      case ._PRODUCT_CLASS(let selection): return selection.listValue(elementType:elementType)
      case ._PRODUCT_CONCEPT(let selection): return selection.listValue(elementType:elementType)
      case ._PRODUCT_CONCEPT_FEATURE(let selection): return selection.listValue(elementType:elementType)
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY(let selection): return selection.listValue(elementType:elementType)
      case ._PRODUCT_DEFINITION(let selection): return selection.listValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.listValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let selection): return selection.listValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(let selection): return selection.listValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.listValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_USAGE(let selection): return selection.listValue(elementType:elementType)
      case ._PRODUCT_DESIGN_TO_INDIVIDUAL(let selection): return selection.listValue(elementType:elementType)
      case ._PRODUCT_DESIGN_VERSION_TO_INDIVIDUAL(let selection): return selection.listValue(elementType:elementType)
      case ._PRODUCT_GROUP(let selection): return selection.listValue(elementType:elementType)
      case ._PRODUCT_GROUP_MEMBERSHIP(let selection): return selection.listValue(elementType:elementType)
      case ._PRODUCT_GROUP_RELATIONSHIP(let selection): return selection.listValue(elementType:elementType)
      case ._PRODUCT_IDENTIFICATION(let selection): return selection.listValue(elementType:elementType)
      case ._PRODUCT_PROCESS_PLAN(let selection): return selection.listValue(elementType:elementType)
      case ._PRODUCT_RELATIONSHIP(let selection): return selection.listValue(elementType:elementType)
      case ._PROPERTY_DEFINITION(let selection): return selection.listValue(elementType:elementType)
      case ._PROPERTY_DEFINITION_REPRESENTATION(let selection): return selection.listValue(elementType:elementType)
      case ._REPRESENTATION(let selection): return selection.listValue(elementType:elementType)
      case ._REQUIREMENT_ASSIGNMENT(let selection): return selection.listValue(elementType:elementType)
      case ._REQUIREMENT_SOURCE(let selection): return selection.listValue(elementType:elementType)
      case ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(let selection): return selection.listValue(elementType:elementType)
      case ._RESOURCE_PROPERTY(let selection): return selection.listValue(elementType:elementType)
      case ._SHAPE_REPRESENTATION(let selection): return selection.listValue(elementType:elementType)
      case ._STRUCTURED_MESSAGE(let selection): return selection.listValue(elementType:elementType)
      case ._VALIDATION(let selection): return selection.listValue(elementType:elementType)
      case ._VERIFICATION(let selection): return selection.listValue(elementType:elementType)
      case ._VERSIONED_ACTION_REQUEST(let selection): return selection.listValue(elementType:elementType)
      }
    }
    public func bagValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.BAG<ELEM>? {
      switch self {
      case ._ACTION(let selection): return selection.bagValue(elementType:elementType)
      case ._ACTION_DIRECTIVE(let selection): return selection.bagValue(elementType:elementType)
      case ._ACTION_METHOD(let selection): return selection.bagValue(elementType:elementType)
      case ._ACTION_METHOD_RELATIONSHIP(let selection): return selection.bagValue(elementType:elementType)
      case ._ACTION_PROPERTY(let selection): return selection.bagValue(elementType:elementType)
      case ._ACTION_PROPERTY_REPRESENTATION(let selection): return selection.bagValue(elementType:elementType)
      case ._APPLIED_ACTION_ASSIGNMENT(let selection): return selection.bagValue(elementType:elementType)
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let selection): return selection.bagValue(elementType:elementType)
      case ._APPLIED_CLASSIFICATION_ASSIGNMENT(let selection): return selection.bagValue(elementType:elementType)
      case ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT(let selection): return selection.bagValue(elementType:elementType)
      case ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT_RELATIONSHIP(let selection): return selection.bagValue(elementType:elementType)
      case ._APPLIED_DOCUMENT_REFERENCE(let selection): return selection.bagValue(elementType:elementType)
      case ._APPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT(let selection): return selection.bagValue(elementType:elementType)
      case ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(let selection): return selection.bagValue(elementType:elementType)
      case ._APPLIED_IDENTIFICATION_ASSIGNMENT(let selection): return selection.bagValue(elementType:elementType)
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.bagValue(elementType:elementType)
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let selection): return selection.bagValue(elementType:elementType)
      case ._CLASS_SYSTEM(let selection): return selection.bagValue(elementType:elementType)
      case ._CONDITIONAL_EFFECTIVITY(let selection): return selection.bagValue(elementType:elementType)
      case ._CONFIGURATION_DESIGN(let selection): return selection.bagValue(elementType:elementType)
      case ._CONFIGURATION_EFFECTIVITY(let selection): return selection.bagValue(elementType:elementType)
      case ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(let selection): return selection.bagValue(elementType:elementType)
      case ._DOCUMENT(let selection): return selection.bagValue(elementType:elementType)
      case ._DOCUMENT_FILE(let selection): return selection.bagValue(elementType:elementType)
      case ._DRAUGHTING_MODEL(let selection): return selection.bagValue(elementType:elementType)
      case ._DRAWING_REVISION(let selection): return selection.bagValue(elementType:elementType)
      case ._ENVELOPE(let selection): return selection.bagValue(elementType:elementType)
      case ._EVALUATED_CHARACTERISTIC_OF_PRODUCT_AS_INDIVIDUAL_TEST_RESULT(let selection): return selection.bagValue(elementType:elementType)
      case ._EVIDENCE(let selection): return selection.bagValue(elementType:elementType)
      case ._EXCLUSIVE_PRODUCT_CONCEPT_FEATURE_CATEGORY(let selection): return selection.bagValue(elementType:elementType)
      case ._EXECUTED_ACTION(let selection): return selection.bagValue(elementType:elementType)
      case ._EXTERNALLY_DEFINED_GENERAL_PROPERTY(let selection): return selection.bagValue(elementType:elementType)
      case ._GENERAL_PROPERTY(let selection): return selection.bagValue(elementType:elementType)
      case ._GROUP(let selection): return selection.bagValue(elementType:elementType)
      case ._IDENTIFICATION_ASSIGNMENT_RELATIONSHIP(let selection): return selection.bagValue(elementType:elementType)
      case ._INTERFACE_CONNECTION(let selection): return selection.bagValue(elementType:elementType)
      case ._INTERFACE_CONNECTOR_AS_PLANNED(let selection): return selection.bagValue(elementType:elementType)
      case ._INTERFACE_CONNECTOR_AS_REALIZED(let selection): return selection.bagValue(elementType:elementType)
      case ._INTERFACE_CONNECTOR_DESIGN(let selection): return selection.bagValue(elementType:elementType)
      case ._INTERFACE_CONNECTOR_OCCURRENCE(let selection): return selection.bagValue(elementType:elementType)
      case ._INTERFACE_DEFINITION_CONNECTION(let selection): return selection.bagValue(elementType:elementType)
      case ._INTERFACE_DEFINITION_FOR(let selection): return selection.bagValue(elementType:elementType)
      case ._MAKE_FROM_USAGE_OPTION(let selection): return selection.bagValue(elementType:elementType)
      case ._MATERIAL_DESIGNATION(let selection): return selection.bagValue(elementType:elementType)
      case ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(let selection): return selection.bagValue(elementType:elementType)
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.bagValue(elementType:elementType)
      case ._PACKAGE_PRODUCT_CONCEPT_FEATURE(let selection): return selection.bagValue(elementType:elementType)
      case ._PRESENTATION_AREA(let selection): return selection.bagValue(elementType:elementType)
      case ._PROCESS_PLAN(let selection): return selection.bagValue(elementType:elementType)
      case ._PRODUCT(let selection): return selection.bagValue(elementType:elementType)
      case ._PRODUCT_CLASS(let selection): return selection.bagValue(elementType:elementType)
      case ._PRODUCT_CONCEPT(let selection): return selection.bagValue(elementType:elementType)
      case ._PRODUCT_CONCEPT_FEATURE(let selection): return selection.bagValue(elementType:elementType)
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY(let selection): return selection.bagValue(elementType:elementType)
      case ._PRODUCT_DEFINITION(let selection): return selection.bagValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.bagValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let selection): return selection.bagValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(let selection): return selection.bagValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.bagValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_USAGE(let selection): return selection.bagValue(elementType:elementType)
      case ._PRODUCT_DESIGN_TO_INDIVIDUAL(let selection): return selection.bagValue(elementType:elementType)
      case ._PRODUCT_DESIGN_VERSION_TO_INDIVIDUAL(let selection): return selection.bagValue(elementType:elementType)
      case ._PRODUCT_GROUP(let selection): return selection.bagValue(elementType:elementType)
      case ._PRODUCT_GROUP_MEMBERSHIP(let selection): return selection.bagValue(elementType:elementType)
      case ._PRODUCT_GROUP_RELATIONSHIP(let selection): return selection.bagValue(elementType:elementType)
      case ._PRODUCT_IDENTIFICATION(let selection): return selection.bagValue(elementType:elementType)
      case ._PRODUCT_PROCESS_PLAN(let selection): return selection.bagValue(elementType:elementType)
      case ._PRODUCT_RELATIONSHIP(let selection): return selection.bagValue(elementType:elementType)
      case ._PROPERTY_DEFINITION(let selection): return selection.bagValue(elementType:elementType)
      case ._PROPERTY_DEFINITION_REPRESENTATION(let selection): return selection.bagValue(elementType:elementType)
      case ._REPRESENTATION(let selection): return selection.bagValue(elementType:elementType)
      case ._REQUIREMENT_ASSIGNMENT(let selection): return selection.bagValue(elementType:elementType)
      case ._REQUIREMENT_SOURCE(let selection): return selection.bagValue(elementType:elementType)
      case ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(let selection): return selection.bagValue(elementType:elementType)
      case ._RESOURCE_PROPERTY(let selection): return selection.bagValue(elementType:elementType)
      case ._SHAPE_REPRESENTATION(let selection): return selection.bagValue(elementType:elementType)
      case ._STRUCTURED_MESSAGE(let selection): return selection.bagValue(elementType:elementType)
      case ._VALIDATION(let selection): return selection.bagValue(elementType:elementType)
      case ._VERIFICATION(let selection): return selection.bagValue(elementType:elementType)
      case ._VERSIONED_ACTION_REQUEST(let selection): return selection.bagValue(elementType:elementType)
      }
    }
    public func setValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.SET<ELEM>? {
      switch self {
      case ._ACTION(let selection): return selection.setValue(elementType:elementType)
      case ._ACTION_DIRECTIVE(let selection): return selection.setValue(elementType:elementType)
      case ._ACTION_METHOD(let selection): return selection.setValue(elementType:elementType)
      case ._ACTION_METHOD_RELATIONSHIP(let selection): return selection.setValue(elementType:elementType)
      case ._ACTION_PROPERTY(let selection): return selection.setValue(elementType:elementType)
      case ._ACTION_PROPERTY_REPRESENTATION(let selection): return selection.setValue(elementType:elementType)
      case ._APPLIED_ACTION_ASSIGNMENT(let selection): return selection.setValue(elementType:elementType)
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let selection): return selection.setValue(elementType:elementType)
      case ._APPLIED_CLASSIFICATION_ASSIGNMENT(let selection): return selection.setValue(elementType:elementType)
      case ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT(let selection): return selection.setValue(elementType:elementType)
      case ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT_RELATIONSHIP(let selection): return selection.setValue(elementType:elementType)
      case ._APPLIED_DOCUMENT_REFERENCE(let selection): return selection.setValue(elementType:elementType)
      case ._APPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT(let selection): return selection.setValue(elementType:elementType)
      case ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(let selection): return selection.setValue(elementType:elementType)
      case ._APPLIED_IDENTIFICATION_ASSIGNMENT(let selection): return selection.setValue(elementType:elementType)
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.setValue(elementType:elementType)
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let selection): return selection.setValue(elementType:elementType)
      case ._CLASS_SYSTEM(let selection): return selection.setValue(elementType:elementType)
      case ._CONDITIONAL_EFFECTIVITY(let selection): return selection.setValue(elementType:elementType)
      case ._CONFIGURATION_DESIGN(let selection): return selection.setValue(elementType:elementType)
      case ._CONFIGURATION_EFFECTIVITY(let selection): return selection.setValue(elementType:elementType)
      case ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(let selection): return selection.setValue(elementType:elementType)
      case ._DOCUMENT(let selection): return selection.setValue(elementType:elementType)
      case ._DOCUMENT_FILE(let selection): return selection.setValue(elementType:elementType)
      case ._DRAUGHTING_MODEL(let selection): return selection.setValue(elementType:elementType)
      case ._DRAWING_REVISION(let selection): return selection.setValue(elementType:elementType)
      case ._ENVELOPE(let selection): return selection.setValue(elementType:elementType)
      case ._EVALUATED_CHARACTERISTIC_OF_PRODUCT_AS_INDIVIDUAL_TEST_RESULT(let selection): return selection.setValue(elementType:elementType)
      case ._EVIDENCE(let selection): return selection.setValue(elementType:elementType)
      case ._EXCLUSIVE_PRODUCT_CONCEPT_FEATURE_CATEGORY(let selection): return selection.setValue(elementType:elementType)
      case ._EXECUTED_ACTION(let selection): return selection.setValue(elementType:elementType)
      case ._EXTERNALLY_DEFINED_GENERAL_PROPERTY(let selection): return selection.setValue(elementType:elementType)
      case ._GENERAL_PROPERTY(let selection): return selection.setValue(elementType:elementType)
      case ._GROUP(let selection): return selection.setValue(elementType:elementType)
      case ._IDENTIFICATION_ASSIGNMENT_RELATIONSHIP(let selection): return selection.setValue(elementType:elementType)
      case ._INTERFACE_CONNECTION(let selection): return selection.setValue(elementType:elementType)
      case ._INTERFACE_CONNECTOR_AS_PLANNED(let selection): return selection.setValue(elementType:elementType)
      case ._INTERFACE_CONNECTOR_AS_REALIZED(let selection): return selection.setValue(elementType:elementType)
      case ._INTERFACE_CONNECTOR_DESIGN(let selection): return selection.setValue(elementType:elementType)
      case ._INTERFACE_CONNECTOR_OCCURRENCE(let selection): return selection.setValue(elementType:elementType)
      case ._INTERFACE_DEFINITION_CONNECTION(let selection): return selection.setValue(elementType:elementType)
      case ._INTERFACE_DEFINITION_FOR(let selection): return selection.setValue(elementType:elementType)
      case ._MAKE_FROM_USAGE_OPTION(let selection): return selection.setValue(elementType:elementType)
      case ._MATERIAL_DESIGNATION(let selection): return selection.setValue(elementType:elementType)
      case ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(let selection): return selection.setValue(elementType:elementType)
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.setValue(elementType:elementType)
      case ._PACKAGE_PRODUCT_CONCEPT_FEATURE(let selection): return selection.setValue(elementType:elementType)
      case ._PRESENTATION_AREA(let selection): return selection.setValue(elementType:elementType)
      case ._PROCESS_PLAN(let selection): return selection.setValue(elementType:elementType)
      case ._PRODUCT(let selection): return selection.setValue(elementType:elementType)
      case ._PRODUCT_CLASS(let selection): return selection.setValue(elementType:elementType)
      case ._PRODUCT_CONCEPT(let selection): return selection.setValue(elementType:elementType)
      case ._PRODUCT_CONCEPT_FEATURE(let selection): return selection.setValue(elementType:elementType)
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY(let selection): return selection.setValue(elementType:elementType)
      case ._PRODUCT_DEFINITION(let selection): return selection.setValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.setValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let selection): return selection.setValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(let selection): return selection.setValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.setValue(elementType:elementType)
      case ._PRODUCT_DEFINITION_USAGE(let selection): return selection.setValue(elementType:elementType)
      case ._PRODUCT_DESIGN_TO_INDIVIDUAL(let selection): return selection.setValue(elementType:elementType)
      case ._PRODUCT_DESIGN_VERSION_TO_INDIVIDUAL(let selection): return selection.setValue(elementType:elementType)
      case ._PRODUCT_GROUP(let selection): return selection.setValue(elementType:elementType)
      case ._PRODUCT_GROUP_MEMBERSHIP(let selection): return selection.setValue(elementType:elementType)
      case ._PRODUCT_GROUP_RELATIONSHIP(let selection): return selection.setValue(elementType:elementType)
      case ._PRODUCT_IDENTIFICATION(let selection): return selection.setValue(elementType:elementType)
      case ._PRODUCT_PROCESS_PLAN(let selection): return selection.setValue(elementType:elementType)
      case ._PRODUCT_RELATIONSHIP(let selection): return selection.setValue(elementType:elementType)
      case ._PROPERTY_DEFINITION(let selection): return selection.setValue(elementType:elementType)
      case ._PROPERTY_DEFINITION_REPRESENTATION(let selection): return selection.setValue(elementType:elementType)
      case ._REPRESENTATION(let selection): return selection.setValue(elementType:elementType)
      case ._REQUIREMENT_ASSIGNMENT(let selection): return selection.setValue(elementType:elementType)
      case ._REQUIREMENT_SOURCE(let selection): return selection.setValue(elementType:elementType)
      case ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(let selection): return selection.setValue(elementType:elementType)
      case ._RESOURCE_PROPERTY(let selection): return selection.setValue(elementType:elementType)
      case ._SHAPE_REPRESENTATION(let selection): return selection.setValue(elementType:elementType)
      case ._STRUCTURED_MESSAGE(let selection): return selection.setValue(elementType:elementType)
      case ._VALIDATION(let selection): return selection.setValue(elementType:elementType)
      case ._VERIFICATION(let selection): return selection.setValue(elementType:elementType)
      case ._VERSIONED_ACTION_REQUEST(let selection): return selection.setValue(elementType:elementType)
      }
    }
    public func enumValue<ENUM:SDAIEnumerationType>(enumType:ENUM.Type) -> ENUM? {
      switch self {
      case ._ACTION(let selection): return selection.enumValue(enumType:enumType)
      case ._ACTION_DIRECTIVE(let selection): return selection.enumValue(enumType:enumType)
      case ._ACTION_METHOD(let selection): return selection.enumValue(enumType:enumType)
      case ._ACTION_METHOD_RELATIONSHIP(let selection): return selection.enumValue(enumType:enumType)
      case ._ACTION_PROPERTY(let selection): return selection.enumValue(enumType:enumType)
      case ._ACTION_PROPERTY_REPRESENTATION(let selection): return selection.enumValue(enumType:enumType)
      case ._APPLIED_ACTION_ASSIGNMENT(let selection): return selection.enumValue(enumType:enumType)
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let selection): return selection.enumValue(enumType:enumType)
      case ._APPLIED_CLASSIFICATION_ASSIGNMENT(let selection): return selection.enumValue(enumType:enumType)
      case ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT(let selection): return selection.enumValue(enumType:enumType)
      case ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT_RELATIONSHIP(let selection): return selection.enumValue(enumType:enumType)
      case ._APPLIED_DOCUMENT_REFERENCE(let selection): return selection.enumValue(enumType:enumType)
      case ._APPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT(let selection): return selection.enumValue(enumType:enumType)
      case ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(let selection): return selection.enumValue(enumType:enumType)
      case ._APPLIED_IDENTIFICATION_ASSIGNMENT(let selection): return selection.enumValue(enumType:enumType)
      case ._ASSEMBLY_COMPONENT_USAGE(let selection): return selection.enumValue(enumType:enumType)
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let selection): return selection.enumValue(enumType:enumType)
      case ._CLASS_SYSTEM(let selection): return selection.enumValue(enumType:enumType)
      case ._CONDITIONAL_EFFECTIVITY(let selection): return selection.enumValue(enumType:enumType)
      case ._CONFIGURATION_DESIGN(let selection): return selection.enumValue(enumType:enumType)
      case ._CONFIGURATION_EFFECTIVITY(let selection): return selection.enumValue(enumType:enumType)
      case ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(let selection): return selection.enumValue(enumType:enumType)
      case ._DOCUMENT(let selection): return selection.enumValue(enumType:enumType)
      case ._DOCUMENT_FILE(let selection): return selection.enumValue(enumType:enumType)
      case ._DRAUGHTING_MODEL(let selection): return selection.enumValue(enumType:enumType)
      case ._DRAWING_REVISION(let selection): return selection.enumValue(enumType:enumType)
      case ._ENVELOPE(let selection): return selection.enumValue(enumType:enumType)
      case ._EVALUATED_CHARACTERISTIC_OF_PRODUCT_AS_INDIVIDUAL_TEST_RESULT(let selection): return selection.enumValue(enumType:enumType)
      case ._EVIDENCE(let selection): return selection.enumValue(enumType:enumType)
      case ._EXCLUSIVE_PRODUCT_CONCEPT_FEATURE_CATEGORY(let selection): return selection.enumValue(enumType:enumType)
      case ._EXECUTED_ACTION(let selection): return selection.enumValue(enumType:enumType)
      case ._EXTERNALLY_DEFINED_GENERAL_PROPERTY(let selection): return selection.enumValue(enumType:enumType)
      case ._GENERAL_PROPERTY(let selection): return selection.enumValue(enumType:enumType)
      case ._GROUP(let selection): return selection.enumValue(enumType:enumType)
      case ._IDENTIFICATION_ASSIGNMENT_RELATIONSHIP(let selection): return selection.enumValue(enumType:enumType)
      case ._INTERFACE_CONNECTION(let selection): return selection.enumValue(enumType:enumType)
      case ._INTERFACE_CONNECTOR_AS_PLANNED(let selection): return selection.enumValue(enumType:enumType)
      case ._INTERFACE_CONNECTOR_AS_REALIZED(let selection): return selection.enumValue(enumType:enumType)
      case ._INTERFACE_CONNECTOR_DESIGN(let selection): return selection.enumValue(enumType:enumType)
      case ._INTERFACE_CONNECTOR_OCCURRENCE(let selection): return selection.enumValue(enumType:enumType)
      case ._INTERFACE_DEFINITION_CONNECTION(let selection): return selection.enumValue(enumType:enumType)
      case ._INTERFACE_DEFINITION_FOR(let selection): return selection.enumValue(enumType:enumType)
      case ._MAKE_FROM_USAGE_OPTION(let selection): return selection.enumValue(enumType:enumType)
      case ._MATERIAL_DESIGNATION(let selection): return selection.enumValue(enumType:enumType)
      case ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(let selection): return selection.enumValue(enumType:enumType)
      case ._ORGANIZATIONAL_PROJECT(let selection): return selection.enumValue(enumType:enumType)
      case ._PACKAGE_PRODUCT_CONCEPT_FEATURE(let selection): return selection.enumValue(enumType:enumType)
      case ._PRESENTATION_AREA(let selection): return selection.enumValue(enumType:enumType)
      case ._PROCESS_PLAN(let selection): return selection.enumValue(enumType:enumType)
      case ._PRODUCT(let selection): return selection.enumValue(enumType:enumType)
      case ._PRODUCT_CLASS(let selection): return selection.enumValue(enumType:enumType)
      case ._PRODUCT_CONCEPT(let selection): return selection.enumValue(enumType:enumType)
      case ._PRODUCT_CONCEPT_FEATURE(let selection): return selection.enumValue(enumType:enumType)
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY(let selection): return selection.enumValue(enumType:enumType)
      case ._PRODUCT_DEFINITION(let selection): return selection.enumValue(enumType:enumType)
      case ._PRODUCT_DEFINITION_FORMATION(let selection): return selection.enumValue(enumType:enumType)
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let selection): return selection.enumValue(enumType:enumType)
      case ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(let selection): return selection.enumValue(enumType:enumType)
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selection): return selection.enumValue(enumType:enumType)
      case ._PRODUCT_DEFINITION_USAGE(let selection): return selection.enumValue(enumType:enumType)
      case ._PRODUCT_DESIGN_TO_INDIVIDUAL(let selection): return selection.enumValue(enumType:enumType)
      case ._PRODUCT_DESIGN_VERSION_TO_INDIVIDUAL(let selection): return selection.enumValue(enumType:enumType)
      case ._PRODUCT_GROUP(let selection): return selection.enumValue(enumType:enumType)
      case ._PRODUCT_GROUP_MEMBERSHIP(let selection): return selection.enumValue(enumType:enumType)
      case ._PRODUCT_GROUP_RELATIONSHIP(let selection): return selection.enumValue(enumType:enumType)
      case ._PRODUCT_IDENTIFICATION(let selection): return selection.enumValue(enumType:enumType)
      case ._PRODUCT_PROCESS_PLAN(let selection): return selection.enumValue(enumType:enumType)
      case ._PRODUCT_RELATIONSHIP(let selection): return selection.enumValue(enumType:enumType)
      case ._PROPERTY_DEFINITION(let selection): return selection.enumValue(enumType:enumType)
      case ._PROPERTY_DEFINITION_REPRESENTATION(let selection): return selection.enumValue(enumType:enumType)
      case ._REPRESENTATION(let selection): return selection.enumValue(enumType:enumType)
      case ._REQUIREMENT_ASSIGNMENT(let selection): return selection.enumValue(enumType:enumType)
      case ._REQUIREMENT_SOURCE(let selection): return selection.enumValue(enumType:enumType)
      case ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(let selection): return selection.enumValue(enumType:enumType)
      case ._RESOURCE_PROPERTY(let selection): return selection.enumValue(enumType:enumType)
      case ._SHAPE_REPRESENTATION(let selection): return selection.enumValue(enumType:enumType)
      case ._STRUCTURED_MESSAGE(let selection): return selection.enumValue(enumType:enumType)
      case ._VALIDATION(let selection): return selection.enumValue(enumType:enumType)
      case ._VERIFICATION(let selection): return selection.enumValue(enumType:enumType)
      case ._VERSIONED_ACTION_REQUEST(let selection): return selection.enumValue(enumType:enumType)
      }
    }

    //MARK: SDAIUnderlyingType
    public typealias FundamentalType = Self
    public static var typeName: String = 
      "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SECURITY_CLASSIFICATION_ITEM"
    public var asFundamentalType: FundamentalType { return self }

    //MARK: SDAIObservableAggregateElement
    public var entityReferences: AnySequence<SDAI.EntityReference> {
      switch self {
      case ._ACTION(let entity): return entity.entityReferences
      case ._ACTION_DIRECTIVE(let entity): return entity.entityReferences
      case ._ACTION_METHOD(let entity): return entity.entityReferences
      case ._ACTION_METHOD_RELATIONSHIP(let entity): return entity.entityReferences
      case ._ACTION_PROPERTY(let entity): return entity.entityReferences
      case ._ACTION_PROPERTY_REPRESENTATION(let entity): return entity.entityReferences
      case ._APPLIED_ACTION_ASSIGNMENT(let entity): return entity.entityReferences
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let entity): return entity.entityReferences
      case ._APPLIED_CLASSIFICATION_ASSIGNMENT(let entity): return entity.entityReferences
      case ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT(let entity): return entity.entityReferences
      case ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT_RELATIONSHIP(let entity): return entity.entityReferences
      case ._APPLIED_DOCUMENT_REFERENCE(let entity): return entity.entityReferences
      case ._APPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT(let entity): return entity.entityReferences
      case ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(let entity): return entity.entityReferences
      case ._APPLIED_IDENTIFICATION_ASSIGNMENT(let entity): return entity.entityReferences
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): return entity.entityReferences
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let entity): return entity.entityReferences
      case ._CLASS_SYSTEM(let entity): return entity.entityReferences
      case ._CONDITIONAL_EFFECTIVITY(let entity): return entity.entityReferences
      case ._CONFIGURATION_DESIGN(let entity): return entity.entityReferences
      case ._CONFIGURATION_EFFECTIVITY(let entity): return entity.entityReferences
      case ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(let entity): return entity.entityReferences
      case ._DOCUMENT(let entity): return entity.entityReferences
      case ._DOCUMENT_FILE(let entity): return entity.entityReferences
      case ._DRAUGHTING_MODEL(let entity): return entity.entityReferences
      case ._DRAWING_REVISION(let entity): return entity.entityReferences
      case ._ENVELOPE(let entity): return entity.entityReferences
      case ._EVALUATED_CHARACTERISTIC_OF_PRODUCT_AS_INDIVIDUAL_TEST_RESULT(let entity): return entity.entityReferences
      case ._EVIDENCE(let entity): return entity.entityReferences
      case ._EXCLUSIVE_PRODUCT_CONCEPT_FEATURE_CATEGORY(let entity): return entity.entityReferences
      case ._EXECUTED_ACTION(let entity): return entity.entityReferences
      case ._EXTERNALLY_DEFINED_GENERAL_PROPERTY(let entity): return entity.entityReferences
      case ._GENERAL_PROPERTY(let entity): return entity.entityReferences
      case ._GROUP(let entity): return entity.entityReferences
      case ._IDENTIFICATION_ASSIGNMENT_RELATIONSHIP(let entity): return entity.entityReferences
      case ._INTERFACE_CONNECTION(let entity): return entity.entityReferences
      case ._INTERFACE_CONNECTOR_AS_PLANNED(let entity): return entity.entityReferences
      case ._INTERFACE_CONNECTOR_AS_REALIZED(let entity): return entity.entityReferences
      case ._INTERFACE_CONNECTOR_DESIGN(let entity): return entity.entityReferences
      case ._INTERFACE_CONNECTOR_OCCURRENCE(let entity): return entity.entityReferences
      case ._INTERFACE_DEFINITION_CONNECTION(let entity): return entity.entityReferences
      case ._INTERFACE_DEFINITION_FOR(let entity): return entity.entityReferences
      case ._MAKE_FROM_USAGE_OPTION(let entity): return entity.entityReferences
      case ._MATERIAL_DESIGNATION(let entity): return entity.entityReferences
      case ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(let entity): return entity.entityReferences
      case ._ORGANIZATIONAL_PROJECT(let entity): return entity.entityReferences
      case ._PACKAGE_PRODUCT_CONCEPT_FEATURE(let entity): return entity.entityReferences
      case ._PRESENTATION_AREA(let entity): return entity.entityReferences
      case ._PROCESS_PLAN(let entity): return entity.entityReferences
      case ._PRODUCT(let entity): return entity.entityReferences
      case ._PRODUCT_CLASS(let entity): return entity.entityReferences
      case ._PRODUCT_CONCEPT(let entity): return entity.entityReferences
      case ._PRODUCT_CONCEPT_FEATURE(let entity): return entity.entityReferences
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY(let entity): return entity.entityReferences
      case ._PRODUCT_DEFINITION(let entity): return entity.entityReferences
      case ._PRODUCT_DEFINITION_FORMATION(let entity): return entity.entityReferences
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let entity): return entity.entityReferences
      case ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(let entity): return entity.entityReferences
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): return entity.entityReferences
      case ._PRODUCT_DEFINITION_USAGE(let entity): return entity.entityReferences
      case ._PRODUCT_DESIGN_TO_INDIVIDUAL(let entity): return entity.entityReferences
      case ._PRODUCT_DESIGN_VERSION_TO_INDIVIDUAL(let entity): return entity.entityReferences
      case ._PRODUCT_GROUP(let entity): return entity.entityReferences
      case ._PRODUCT_GROUP_MEMBERSHIP(let entity): return entity.entityReferences
      case ._PRODUCT_GROUP_RELATIONSHIP(let entity): return entity.entityReferences
      case ._PRODUCT_IDENTIFICATION(let entity): return entity.entityReferences
      case ._PRODUCT_PROCESS_PLAN(let entity): return entity.entityReferences
      case ._PRODUCT_RELATIONSHIP(let entity): return entity.entityReferences
      case ._PROPERTY_DEFINITION(let entity): return entity.entityReferences
      case ._PROPERTY_DEFINITION_REPRESENTATION(let entity): return entity.entityReferences
      case ._REPRESENTATION(let entity): return entity.entityReferences
      case ._REQUIREMENT_ASSIGNMENT(let entity): return entity.entityReferences
      case ._REQUIREMENT_SOURCE(let entity): return entity.entityReferences
      case ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(let entity): return entity.entityReferences
      case ._RESOURCE_PROPERTY(let entity): return entity.entityReferences
      case ._SHAPE_REPRESENTATION(let entity): return entity.entityReferences
      case ._STRUCTURED_MESSAGE(let entity): return entity.entityReferences
      case ._VALIDATION(let entity): return entity.entityReferences
      case ._VERIFICATION(let entity): return entity.entityReferences
      case ._VERSIONED_ACTION_REQUEST(let entity): return entity.entityReferences
      }
    }

    public mutating func configure(with observer: SDAI.EntityReferenceObserver) {
      switch self {
      case ._ACTION(let entity): 
        entity.configure(with: observer)
        self = ._ACTION(entity)
      case ._ACTION_DIRECTIVE(let entity): 
        entity.configure(with: observer)
        self = ._ACTION_DIRECTIVE(entity)
      case ._ACTION_METHOD(let entity): 
        entity.configure(with: observer)
        self = ._ACTION_METHOD(entity)
      case ._ACTION_METHOD_RELATIONSHIP(let entity): 
        entity.configure(with: observer)
        self = ._ACTION_METHOD_RELATIONSHIP(entity)
      case ._ACTION_PROPERTY(let entity): 
        entity.configure(with: observer)
        self = ._ACTION_PROPERTY(entity)
      case ._ACTION_PROPERTY_REPRESENTATION(let entity): 
        entity.configure(with: observer)
        self = ._ACTION_PROPERTY_REPRESENTATION(entity)
      case ._APPLIED_ACTION_ASSIGNMENT(let entity): 
        entity.configure(with: observer)
        self = ._APPLIED_ACTION_ASSIGNMENT(entity)
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let entity): 
        entity.configure(with: observer)
        self = ._APPLIED_ACTION_METHOD_ASSIGNMENT(entity)
      case ._APPLIED_CLASSIFICATION_ASSIGNMENT(let entity): 
        entity.configure(with: observer)
        self = ._APPLIED_CLASSIFICATION_ASSIGNMENT(entity)
      case ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT(let entity): 
        entity.configure(with: observer)
        self = ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT(entity)
      case ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT_RELATIONSHIP(let entity): 
        entity.configure(with: observer)
        self = ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT_RELATIONSHIP(entity)
      case ._APPLIED_DOCUMENT_REFERENCE(let entity): 
        entity.configure(with: observer)
        self = ._APPLIED_DOCUMENT_REFERENCE(entity)
      case ._APPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT(let entity): 
        entity.configure(with: observer)
        self = ._APPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT(entity)
      case ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(let entity): 
        entity.configure(with: observer)
        self = ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(entity)
      case ._APPLIED_IDENTIFICATION_ASSIGNMENT(let entity): 
        entity.configure(with: observer)
        self = ._APPLIED_IDENTIFICATION_ASSIGNMENT(entity)
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): 
        entity.configure(with: observer)
        self = ._ASSEMBLY_COMPONENT_USAGE(entity)
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let entity): 
        entity.configure(with: observer)
        self = ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(entity)
      case ._CLASS_SYSTEM(let entity): 
        entity.configure(with: observer)
        self = ._CLASS_SYSTEM(entity)
      case ._CONDITIONAL_EFFECTIVITY(let entity): 
        entity.configure(with: observer)
        self = ._CONDITIONAL_EFFECTIVITY(entity)
      case ._CONFIGURATION_DESIGN(let entity): 
        entity.configure(with: observer)
        self = ._CONFIGURATION_DESIGN(entity)
      case ._CONFIGURATION_EFFECTIVITY(let entity): 
        entity.configure(with: observer)
        self = ._CONFIGURATION_EFFECTIVITY(entity)
      case ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(let entity): 
        entity.configure(with: observer)
        self = ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(entity)
      case ._DOCUMENT(let entity): 
        entity.configure(with: observer)
        self = ._DOCUMENT(entity)
      case ._DOCUMENT_FILE(let entity): 
        entity.configure(with: observer)
        self = ._DOCUMENT_FILE(entity)
      case ._DRAUGHTING_MODEL(let entity): 
        entity.configure(with: observer)
        self = ._DRAUGHTING_MODEL(entity)
      case ._DRAWING_REVISION(let entity): 
        entity.configure(with: observer)
        self = ._DRAWING_REVISION(entity)
      case ._ENVELOPE(let entity): 
        entity.configure(with: observer)
        self = ._ENVELOPE(entity)
      case ._EVALUATED_CHARACTERISTIC_OF_PRODUCT_AS_INDIVIDUAL_TEST_RESULT(let entity): 
        entity.configure(with: observer)
        self = ._EVALUATED_CHARACTERISTIC_OF_PRODUCT_AS_INDIVIDUAL_TEST_RESULT(entity)
      case ._EVIDENCE(let entity): 
        entity.configure(with: observer)
        self = ._EVIDENCE(entity)
      case ._EXCLUSIVE_PRODUCT_CONCEPT_FEATURE_CATEGORY(let entity): 
        entity.configure(with: observer)
        self = ._EXCLUSIVE_PRODUCT_CONCEPT_FEATURE_CATEGORY(entity)
      case ._EXECUTED_ACTION(let entity): 
        entity.configure(with: observer)
        self = ._EXECUTED_ACTION(entity)
      case ._EXTERNALLY_DEFINED_GENERAL_PROPERTY(let entity): 
        entity.configure(with: observer)
        self = ._EXTERNALLY_DEFINED_GENERAL_PROPERTY(entity)
      case ._GENERAL_PROPERTY(let entity): 
        entity.configure(with: observer)
        self = ._GENERAL_PROPERTY(entity)
      case ._GROUP(let entity): 
        entity.configure(with: observer)
        self = ._GROUP(entity)
      case ._IDENTIFICATION_ASSIGNMENT_RELATIONSHIP(let entity): 
        entity.configure(with: observer)
        self = ._IDENTIFICATION_ASSIGNMENT_RELATIONSHIP(entity)
      case ._INTERFACE_CONNECTION(let entity): 
        entity.configure(with: observer)
        self = ._INTERFACE_CONNECTION(entity)
      case ._INTERFACE_CONNECTOR_AS_PLANNED(let entity): 
        entity.configure(with: observer)
        self = ._INTERFACE_CONNECTOR_AS_PLANNED(entity)
      case ._INTERFACE_CONNECTOR_AS_REALIZED(let entity): 
        entity.configure(with: observer)
        self = ._INTERFACE_CONNECTOR_AS_REALIZED(entity)
      case ._INTERFACE_CONNECTOR_DESIGN(let entity): 
        entity.configure(with: observer)
        self = ._INTERFACE_CONNECTOR_DESIGN(entity)
      case ._INTERFACE_CONNECTOR_OCCURRENCE(let entity): 
        entity.configure(with: observer)
        self = ._INTERFACE_CONNECTOR_OCCURRENCE(entity)
      case ._INTERFACE_DEFINITION_CONNECTION(let entity): 
        entity.configure(with: observer)
        self = ._INTERFACE_DEFINITION_CONNECTION(entity)
      case ._INTERFACE_DEFINITION_FOR(let entity): 
        entity.configure(with: observer)
        self = ._INTERFACE_DEFINITION_FOR(entity)
      case ._MAKE_FROM_USAGE_OPTION(let entity): 
        entity.configure(with: observer)
        self = ._MAKE_FROM_USAGE_OPTION(entity)
      case ._MATERIAL_DESIGNATION(let entity): 
        entity.configure(with: observer)
        self = ._MATERIAL_DESIGNATION(entity)
      case ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(let entity): 
        entity.configure(with: observer)
        self = ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(entity)
      case ._ORGANIZATIONAL_PROJECT(let entity): 
        entity.configure(with: observer)
        self = ._ORGANIZATIONAL_PROJECT(entity)
      case ._PACKAGE_PRODUCT_CONCEPT_FEATURE(let entity): 
        entity.configure(with: observer)
        self = ._PACKAGE_PRODUCT_CONCEPT_FEATURE(entity)
      case ._PRESENTATION_AREA(let entity): 
        entity.configure(with: observer)
        self = ._PRESENTATION_AREA(entity)
      case ._PROCESS_PLAN(let entity): 
        entity.configure(with: observer)
        self = ._PROCESS_PLAN(entity)
      case ._PRODUCT(let entity): 
        entity.configure(with: observer)
        self = ._PRODUCT(entity)
      case ._PRODUCT_CLASS(let entity): 
        entity.configure(with: observer)
        self = ._PRODUCT_CLASS(entity)
      case ._PRODUCT_CONCEPT(let entity): 
        entity.configure(with: observer)
        self = ._PRODUCT_CONCEPT(entity)
      case ._PRODUCT_CONCEPT_FEATURE(let entity): 
        entity.configure(with: observer)
        self = ._PRODUCT_CONCEPT_FEATURE(entity)
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY(let entity): 
        entity.configure(with: observer)
        self = ._PRODUCT_CONCEPT_FEATURE_CATEGORY(entity)
      case ._PRODUCT_DEFINITION(let entity): 
        entity.configure(with: observer)
        self = ._PRODUCT_DEFINITION(entity)
      case ._PRODUCT_DEFINITION_FORMATION(let entity): 
        entity.configure(with: observer)
        self = ._PRODUCT_DEFINITION_FORMATION(entity)
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let entity): 
        entity.configure(with: observer)
        self = ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(entity)
      case ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(let entity): 
        entity.configure(with: observer)
        self = ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(entity)
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): 
        entity.configure(with: observer)
        self = ._PRODUCT_DEFINITION_RELATIONSHIP(entity)
      case ._PRODUCT_DEFINITION_USAGE(let entity): 
        entity.configure(with: observer)
        self = ._PRODUCT_DEFINITION_USAGE(entity)
      case ._PRODUCT_DESIGN_TO_INDIVIDUAL(let entity): 
        entity.configure(with: observer)
        self = ._PRODUCT_DESIGN_TO_INDIVIDUAL(entity)
      case ._PRODUCT_DESIGN_VERSION_TO_INDIVIDUAL(let entity): 
        entity.configure(with: observer)
        self = ._PRODUCT_DESIGN_VERSION_TO_INDIVIDUAL(entity)
      case ._PRODUCT_GROUP(let entity): 
        entity.configure(with: observer)
        self = ._PRODUCT_GROUP(entity)
      case ._PRODUCT_GROUP_MEMBERSHIP(let entity): 
        entity.configure(with: observer)
        self = ._PRODUCT_GROUP_MEMBERSHIP(entity)
      case ._PRODUCT_GROUP_RELATIONSHIP(let entity): 
        entity.configure(with: observer)
        self = ._PRODUCT_GROUP_RELATIONSHIP(entity)
      case ._PRODUCT_IDENTIFICATION(let entity): 
        entity.configure(with: observer)
        self = ._PRODUCT_IDENTIFICATION(entity)
      case ._PRODUCT_PROCESS_PLAN(let entity): 
        entity.configure(with: observer)
        self = ._PRODUCT_PROCESS_PLAN(entity)
      case ._PRODUCT_RELATIONSHIP(let entity): 
        entity.configure(with: observer)
        self = ._PRODUCT_RELATIONSHIP(entity)
      case ._PROPERTY_DEFINITION(let entity): 
        entity.configure(with: observer)
        self = ._PROPERTY_DEFINITION(entity)
      case ._PROPERTY_DEFINITION_REPRESENTATION(let entity): 
        entity.configure(with: observer)
        self = ._PROPERTY_DEFINITION_REPRESENTATION(entity)
      case ._REPRESENTATION(let entity): 
        entity.configure(with: observer)
        self = ._REPRESENTATION(entity)
      case ._REQUIREMENT_ASSIGNMENT(let entity): 
        entity.configure(with: observer)
        self = ._REQUIREMENT_ASSIGNMENT(entity)
      case ._REQUIREMENT_SOURCE(let entity): 
        entity.configure(with: observer)
        self = ._REQUIREMENT_SOURCE(entity)
      case ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(let entity): 
        entity.configure(with: observer)
        self = ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(entity)
      case ._RESOURCE_PROPERTY(let entity): 
        entity.configure(with: observer)
        self = ._RESOURCE_PROPERTY(entity)
      case ._SHAPE_REPRESENTATION(let entity): 
        entity.configure(with: observer)
        self = ._SHAPE_REPRESENTATION(entity)
      case ._STRUCTURED_MESSAGE(let entity): 
        entity.configure(with: observer)
        self = ._STRUCTURED_MESSAGE(entity)
      case ._VALIDATION(let entity): 
        entity.configure(with: observer)
        self = ._VALIDATION(entity)
      case ._VERIFICATION(let entity): 
        entity.configure(with: observer)
        self = ._VERIFICATION(entity)
      case ._VERSIONED_ACTION_REQUEST(let entity): 
        entity.configure(with: observer)
        self = ._VERSIONED_ACTION_REQUEST(entity)
      }
    }

    public mutating func teardownObserver() {
      switch self {
      case ._ACTION(let entity): 
        entity.teardownObserver()
        self = ._ACTION(entity)
      case ._ACTION_DIRECTIVE(let entity): 
        entity.teardownObserver()
        self = ._ACTION_DIRECTIVE(entity)
      case ._ACTION_METHOD(let entity): 
        entity.teardownObserver()
        self = ._ACTION_METHOD(entity)
      case ._ACTION_METHOD_RELATIONSHIP(let entity): 
        entity.teardownObserver()
        self = ._ACTION_METHOD_RELATIONSHIP(entity)
      case ._ACTION_PROPERTY(let entity): 
        entity.teardownObserver()
        self = ._ACTION_PROPERTY(entity)
      case ._ACTION_PROPERTY_REPRESENTATION(let entity): 
        entity.teardownObserver()
        self = ._ACTION_PROPERTY_REPRESENTATION(entity)
      case ._APPLIED_ACTION_ASSIGNMENT(let entity): 
        entity.teardownObserver()
        self = ._APPLIED_ACTION_ASSIGNMENT(entity)
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let entity): 
        entity.teardownObserver()
        self = ._APPLIED_ACTION_METHOD_ASSIGNMENT(entity)
      case ._APPLIED_CLASSIFICATION_ASSIGNMENT(let entity): 
        entity.teardownObserver()
        self = ._APPLIED_CLASSIFICATION_ASSIGNMENT(entity)
      case ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT(let entity): 
        entity.teardownObserver()
        self = ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT(entity)
      case ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT_RELATIONSHIP(let entity): 
        entity.teardownObserver()
        self = ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT_RELATIONSHIP(entity)
      case ._APPLIED_DOCUMENT_REFERENCE(let entity): 
        entity.teardownObserver()
        self = ._APPLIED_DOCUMENT_REFERENCE(entity)
      case ._APPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT(let entity): 
        entity.teardownObserver()
        self = ._APPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT(entity)
      case ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(let entity): 
        entity.teardownObserver()
        self = ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(entity)
      case ._APPLIED_IDENTIFICATION_ASSIGNMENT(let entity): 
        entity.teardownObserver()
        self = ._APPLIED_IDENTIFICATION_ASSIGNMENT(entity)
      case ._ASSEMBLY_COMPONENT_USAGE(let entity): 
        entity.teardownObserver()
        self = ._ASSEMBLY_COMPONENT_USAGE(entity)
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let entity): 
        entity.teardownObserver()
        self = ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(entity)
      case ._CLASS_SYSTEM(let entity): 
        entity.teardownObserver()
        self = ._CLASS_SYSTEM(entity)
      case ._CONDITIONAL_EFFECTIVITY(let entity): 
        entity.teardownObserver()
        self = ._CONDITIONAL_EFFECTIVITY(entity)
      case ._CONFIGURATION_DESIGN(let entity): 
        entity.teardownObserver()
        self = ._CONFIGURATION_DESIGN(entity)
      case ._CONFIGURATION_EFFECTIVITY(let entity): 
        entity.teardownObserver()
        self = ._CONFIGURATION_EFFECTIVITY(entity)
      case ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(let entity): 
        entity.teardownObserver()
        self = ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(entity)
      case ._DOCUMENT(let entity): 
        entity.teardownObserver()
        self = ._DOCUMENT(entity)
      case ._DOCUMENT_FILE(let entity): 
        entity.teardownObserver()
        self = ._DOCUMENT_FILE(entity)
      case ._DRAUGHTING_MODEL(let entity): 
        entity.teardownObserver()
        self = ._DRAUGHTING_MODEL(entity)
      case ._DRAWING_REVISION(let entity): 
        entity.teardownObserver()
        self = ._DRAWING_REVISION(entity)
      case ._ENVELOPE(let entity): 
        entity.teardownObserver()
        self = ._ENVELOPE(entity)
      case ._EVALUATED_CHARACTERISTIC_OF_PRODUCT_AS_INDIVIDUAL_TEST_RESULT(let entity): 
        entity.teardownObserver()
        self = ._EVALUATED_CHARACTERISTIC_OF_PRODUCT_AS_INDIVIDUAL_TEST_RESULT(entity)
      case ._EVIDENCE(let entity): 
        entity.teardownObserver()
        self = ._EVIDENCE(entity)
      case ._EXCLUSIVE_PRODUCT_CONCEPT_FEATURE_CATEGORY(let entity): 
        entity.teardownObserver()
        self = ._EXCLUSIVE_PRODUCT_CONCEPT_FEATURE_CATEGORY(entity)
      case ._EXECUTED_ACTION(let entity): 
        entity.teardownObserver()
        self = ._EXECUTED_ACTION(entity)
      case ._EXTERNALLY_DEFINED_GENERAL_PROPERTY(let entity): 
        entity.teardownObserver()
        self = ._EXTERNALLY_DEFINED_GENERAL_PROPERTY(entity)
      case ._GENERAL_PROPERTY(let entity): 
        entity.teardownObserver()
        self = ._GENERAL_PROPERTY(entity)
      case ._GROUP(let entity): 
        entity.teardownObserver()
        self = ._GROUP(entity)
      case ._IDENTIFICATION_ASSIGNMENT_RELATIONSHIP(let entity): 
        entity.teardownObserver()
        self = ._IDENTIFICATION_ASSIGNMENT_RELATIONSHIP(entity)
      case ._INTERFACE_CONNECTION(let entity): 
        entity.teardownObserver()
        self = ._INTERFACE_CONNECTION(entity)
      case ._INTERFACE_CONNECTOR_AS_PLANNED(let entity): 
        entity.teardownObserver()
        self = ._INTERFACE_CONNECTOR_AS_PLANNED(entity)
      case ._INTERFACE_CONNECTOR_AS_REALIZED(let entity): 
        entity.teardownObserver()
        self = ._INTERFACE_CONNECTOR_AS_REALIZED(entity)
      case ._INTERFACE_CONNECTOR_DESIGN(let entity): 
        entity.teardownObserver()
        self = ._INTERFACE_CONNECTOR_DESIGN(entity)
      case ._INTERFACE_CONNECTOR_OCCURRENCE(let entity): 
        entity.teardownObserver()
        self = ._INTERFACE_CONNECTOR_OCCURRENCE(entity)
      case ._INTERFACE_DEFINITION_CONNECTION(let entity): 
        entity.teardownObserver()
        self = ._INTERFACE_DEFINITION_CONNECTION(entity)
      case ._INTERFACE_DEFINITION_FOR(let entity): 
        entity.teardownObserver()
        self = ._INTERFACE_DEFINITION_FOR(entity)
      case ._MAKE_FROM_USAGE_OPTION(let entity): 
        entity.teardownObserver()
        self = ._MAKE_FROM_USAGE_OPTION(entity)
      case ._MATERIAL_DESIGNATION(let entity): 
        entity.teardownObserver()
        self = ._MATERIAL_DESIGNATION(entity)
      case ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(let entity): 
        entity.teardownObserver()
        self = ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(entity)
      case ._ORGANIZATIONAL_PROJECT(let entity): 
        entity.teardownObserver()
        self = ._ORGANIZATIONAL_PROJECT(entity)
      case ._PACKAGE_PRODUCT_CONCEPT_FEATURE(let entity): 
        entity.teardownObserver()
        self = ._PACKAGE_PRODUCT_CONCEPT_FEATURE(entity)
      case ._PRESENTATION_AREA(let entity): 
        entity.teardownObserver()
        self = ._PRESENTATION_AREA(entity)
      case ._PROCESS_PLAN(let entity): 
        entity.teardownObserver()
        self = ._PROCESS_PLAN(entity)
      case ._PRODUCT(let entity): 
        entity.teardownObserver()
        self = ._PRODUCT(entity)
      case ._PRODUCT_CLASS(let entity): 
        entity.teardownObserver()
        self = ._PRODUCT_CLASS(entity)
      case ._PRODUCT_CONCEPT(let entity): 
        entity.teardownObserver()
        self = ._PRODUCT_CONCEPT(entity)
      case ._PRODUCT_CONCEPT_FEATURE(let entity): 
        entity.teardownObserver()
        self = ._PRODUCT_CONCEPT_FEATURE(entity)
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY(let entity): 
        entity.teardownObserver()
        self = ._PRODUCT_CONCEPT_FEATURE_CATEGORY(entity)
      case ._PRODUCT_DEFINITION(let entity): 
        entity.teardownObserver()
        self = ._PRODUCT_DEFINITION(entity)
      case ._PRODUCT_DEFINITION_FORMATION(let entity): 
        entity.teardownObserver()
        self = ._PRODUCT_DEFINITION_FORMATION(entity)
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let entity): 
        entity.teardownObserver()
        self = ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(entity)
      case ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(let entity): 
        entity.teardownObserver()
        self = ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(entity)
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let entity): 
        entity.teardownObserver()
        self = ._PRODUCT_DEFINITION_RELATIONSHIP(entity)
      case ._PRODUCT_DEFINITION_USAGE(let entity): 
        entity.teardownObserver()
        self = ._PRODUCT_DEFINITION_USAGE(entity)
      case ._PRODUCT_DESIGN_TO_INDIVIDUAL(let entity): 
        entity.teardownObserver()
        self = ._PRODUCT_DESIGN_TO_INDIVIDUAL(entity)
      case ._PRODUCT_DESIGN_VERSION_TO_INDIVIDUAL(let entity): 
        entity.teardownObserver()
        self = ._PRODUCT_DESIGN_VERSION_TO_INDIVIDUAL(entity)
      case ._PRODUCT_GROUP(let entity): 
        entity.teardownObserver()
        self = ._PRODUCT_GROUP(entity)
      case ._PRODUCT_GROUP_MEMBERSHIP(let entity): 
        entity.teardownObserver()
        self = ._PRODUCT_GROUP_MEMBERSHIP(entity)
      case ._PRODUCT_GROUP_RELATIONSHIP(let entity): 
        entity.teardownObserver()
        self = ._PRODUCT_GROUP_RELATIONSHIP(entity)
      case ._PRODUCT_IDENTIFICATION(let entity): 
        entity.teardownObserver()
        self = ._PRODUCT_IDENTIFICATION(entity)
      case ._PRODUCT_PROCESS_PLAN(let entity): 
        entity.teardownObserver()
        self = ._PRODUCT_PROCESS_PLAN(entity)
      case ._PRODUCT_RELATIONSHIP(let entity): 
        entity.teardownObserver()
        self = ._PRODUCT_RELATIONSHIP(entity)
      case ._PROPERTY_DEFINITION(let entity): 
        entity.teardownObserver()
        self = ._PROPERTY_DEFINITION(entity)
      case ._PROPERTY_DEFINITION_REPRESENTATION(let entity): 
        entity.teardownObserver()
        self = ._PROPERTY_DEFINITION_REPRESENTATION(entity)
      case ._REPRESENTATION(let entity): 
        entity.teardownObserver()
        self = ._REPRESENTATION(entity)
      case ._REQUIREMENT_ASSIGNMENT(let entity): 
        entity.teardownObserver()
        self = ._REQUIREMENT_ASSIGNMENT(entity)
      case ._REQUIREMENT_SOURCE(let entity): 
        entity.teardownObserver()
        self = ._REQUIREMENT_SOURCE(entity)
      case ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(let entity): 
        entity.teardownObserver()
        self = ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(entity)
      case ._RESOURCE_PROPERTY(let entity): 
        entity.teardownObserver()
        self = ._RESOURCE_PROPERTY(entity)
      case ._SHAPE_REPRESENTATION(let entity): 
        entity.teardownObserver()
        self = ._SHAPE_REPRESENTATION(entity)
      case ._STRUCTURED_MESSAGE(let entity): 
        entity.teardownObserver()
        self = ._STRUCTURED_MESSAGE(entity)
      case ._VALIDATION(let entity): 
        entity.teardownObserver()
        self = ._VALIDATION(entity)
      case ._VERIFICATION(let entity): 
        entity.teardownObserver()
        self = ._VERIFICATION(entity)
      case ._VERSIONED_ACTION_REQUEST(let entity): 
        entity.teardownObserver()
        self = ._VERSIONED_ACTION_REQUEST(entity)
      }
    }

    //MARK: SDAIAggregationBehavior
    public var aggregationHiBound: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationHiIndex: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationLoBound: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationLoIndex: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationSize: Int? {
      switch self {
      default: return nil
      }
    }

    //MARK: WHERE RULE VALIDATION (SELECT TYPE)
    public static func validateWhereRules(instance:Self?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      var result: [SDAI.WhereLabel:SDAI.LOGICAL] = [:]
      switch instance {
      case ._ACTION(let selectValue): result = eACTION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\ACTION")
      case ._ACTION_DIRECTIVE(let selectValue): 
        result = eACTION_DIRECTIVE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\ACTION_DIRECTIVE")
      case ._ACTION_METHOD(let selectValue): 
        result = eACTION_METHOD.validateWhereRules(instance:selectValue, prefix:prefix + "\\ACTION_METHOD")
      case ._ACTION_METHOD_RELATIONSHIP(let selectValue): 
        result = eACTION_METHOD_RELATIONSHIP.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\ACTION_METHOD_RELATIONSHIP")
      case ._ACTION_PROPERTY(let selectValue): 
        result = eACTION_PROPERTY.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\ACTION_PROPERTY")
      case ._ACTION_PROPERTY_REPRESENTATION(let selectValue): 
        result = eACTION_PROPERTY_REPRESENTATION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\ACTION_PROPERTY_REPRESENTATION")
      case ._APPLIED_ACTION_ASSIGNMENT(let selectValue): 
        result = eAPPLIED_ACTION_ASSIGNMENT.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\APPLIED_ACTION_ASSIGNMENT")
      case ._APPLIED_ACTION_METHOD_ASSIGNMENT(let selectValue): 
        result = eAPPLIED_ACTION_METHOD_ASSIGNMENT.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\APPLIED_ACTION_METHOD_ASSIGNMENT")
      case ._APPLIED_CLASSIFICATION_ASSIGNMENT(let selectValue): 
        result = eAPPLIED_CLASSIFICATION_ASSIGNMENT.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\APPLIED_CLASSIFICATION_ASSIGNMENT")
      case ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT(let selectValue): 
        result = eAPPLIED_DESCRIPTION_TEXT_ASSIGNMENT.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\APPLIED_DESCRIPTION_TEXT_ASSIGNMENT")
      case ._APPLIED_DESCRIPTION_TEXT_ASSIGNMENT_RELATIONSHIP(let selectValue): 
        result = eAPPLIED_DESCRIPTION_TEXT_ASSIGNMENT_RELATIONSHIP.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\APPLIED_DESCRIPTION_TEXT_ASSIGNMENT_RELATIONSHIP")
      case ._APPLIED_DOCUMENT_REFERENCE(let selectValue): 
        result = eAPPLIED_DOCUMENT_REFERENCE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\APPLIED_DOCUMENT_REFERENCE")
      case ._APPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT(let selectValue): 
        result = eAPPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\APPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT")
      case ._APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT(let selectValue): 
        result = eAPPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT")
      case ._APPLIED_IDENTIFICATION_ASSIGNMENT(let selectValue): 
        result = eAPPLIED_IDENTIFICATION_ASSIGNMENT.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\APPLIED_IDENTIFICATION_ASSIGNMENT")
      case ._ASSEMBLY_COMPONENT_USAGE(let selectValue): 
        result = eASSEMBLY_COMPONENT_USAGE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\ASSEMBLY_COMPONENT_USAGE")
      case ._ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE(let selectValue): 
        result = eASSEMBLY_COMPONENT_USAGE_SUBSTITUTE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE")
      case ._CLASS_SYSTEM(let selectValue): result = eCLASS_SYSTEM.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\CLASS_SYSTEM")
      case ._CONDITIONAL_EFFECTIVITY(let selectValue): 
        result = eCONDITIONAL_EFFECTIVITY.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\CONDITIONAL_EFFECTIVITY")
      case ._CONFIGURATION_DESIGN(let selectValue): 
        result = eCONFIGURATION_DESIGN.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\CONFIGURATION_DESIGN")
      case ._CONFIGURATION_EFFECTIVITY(let selectValue): 
        result = eCONFIGURATION_EFFECTIVITY.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\CONFIGURATION_EFFECTIVITY")
      case ._CONFIGURED_EFFECTIVITY_ASSIGNMENT(let selectValue): 
        result = eCONFIGURED_EFFECTIVITY_ASSIGNMENT.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\CONFIGURED_EFFECTIVITY_ASSIGNMENT")
      case ._DOCUMENT(let selectValue): result = eDOCUMENT.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\DOCUMENT")
      case ._DOCUMENT_FILE(let selectValue): 
        result = eDOCUMENT_FILE.validateWhereRules(instance:selectValue, prefix:prefix + "\\DOCUMENT_FILE")
      case ._DRAUGHTING_MODEL(let selectValue): 
        result = eDRAUGHTING_MODEL.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\DRAUGHTING_MODEL")
      case ._DRAWING_REVISION(let selectValue): 
        result = eDRAWING_REVISION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\DRAWING_REVISION")
      case ._ENVELOPE(let selectValue): result = eENVELOPE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\ENVELOPE")
      case ._EVALUATED_CHARACTERISTIC_OF_PRODUCT_AS_INDIVIDUAL_TEST_RESULT(let selectValue): result = eEVALUATED_CHARACTERISTIC_OF_PRODUCT_AS_INDIVIDUAL_TEST_RESULT.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\EVALUATED_CHARACTERISTIC_OF_PRODUCT_AS_INDIVIDUAL_TEST_RESULT")
      case ._EVIDENCE(let selectValue): result = eEVIDENCE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\EVIDENCE")
      case ._EXCLUSIVE_PRODUCT_CONCEPT_FEATURE_CATEGORY(let selectValue): 
        result = eEXCLUSIVE_PRODUCT_CONCEPT_FEATURE_CATEGORY.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\EXCLUSIVE_PRODUCT_CONCEPT_FEATURE_CATEGORY")
      case ._EXECUTED_ACTION(let selectValue): 
        result = eEXECUTED_ACTION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\EXECUTED_ACTION")
      case ._EXTERNALLY_DEFINED_GENERAL_PROPERTY(let selectValue): 
        result = eEXTERNALLY_DEFINED_GENERAL_PROPERTY.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\EXTERNALLY_DEFINED_GENERAL_PROPERTY")
      case ._GENERAL_PROPERTY(let selectValue): 
        result = eGENERAL_PROPERTY.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\GENERAL_PROPERTY")
      case ._GROUP(let selectValue): result = eGROUP.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\GROUP")
      case ._IDENTIFICATION_ASSIGNMENT_RELATIONSHIP(let selectValue): 
        result = eIDENTIFICATION_ASSIGNMENT_RELATIONSHIP.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\IDENTIFICATION_ASSIGNMENT_RELATIONSHIP")
      case ._INTERFACE_CONNECTION(let selectValue): 
        result = eINTERFACE_CONNECTION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\INTERFACE_CONNECTION")
      case ._INTERFACE_CONNECTOR_AS_PLANNED(let selectValue): 
        result = eINTERFACE_CONNECTOR_AS_PLANNED.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\INTERFACE_CONNECTOR_AS_PLANNED")
      case ._INTERFACE_CONNECTOR_AS_REALIZED(let selectValue): 
        result = eINTERFACE_CONNECTOR_AS_REALIZED.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\INTERFACE_CONNECTOR_AS_REALIZED")
      case ._INTERFACE_CONNECTOR_DESIGN(let selectValue): 
        result = eINTERFACE_CONNECTOR_DESIGN.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\INTERFACE_CONNECTOR_DESIGN")
      case ._INTERFACE_CONNECTOR_OCCURRENCE(let selectValue): 
        result = eINTERFACE_CONNECTOR_OCCURRENCE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\INTERFACE_CONNECTOR_OCCURRENCE")
      case ._INTERFACE_DEFINITION_CONNECTION(let selectValue): 
        result = eINTERFACE_DEFINITION_CONNECTION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\INTERFACE_DEFINITION_CONNECTION")
      case ._INTERFACE_DEFINITION_FOR(let selectValue): 
        result = eINTERFACE_DEFINITION_FOR.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\INTERFACE_DEFINITION_FOR")
      case ._MAKE_FROM_USAGE_OPTION(let selectValue): 
        result = eMAKE_FROM_USAGE_OPTION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\MAKE_FROM_USAGE_OPTION")
      case ._MATERIAL_DESIGNATION(let selectValue): 
        result = eMATERIAL_DESIGNATION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\MATERIAL_DESIGNATION")
      case ._MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(let selectValue): result = eMECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION")
      case ._ORGANIZATIONAL_PROJECT(let selectValue): 
        result = eORGANIZATIONAL_PROJECT.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\ORGANIZATIONAL_PROJECT")
      case ._PACKAGE_PRODUCT_CONCEPT_FEATURE(let selectValue): 
        result = ePACKAGE_PRODUCT_CONCEPT_FEATURE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PACKAGE_PRODUCT_CONCEPT_FEATURE")
      case ._PRESENTATION_AREA(let selectValue): 
        result = ePRESENTATION_AREA.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PRESENTATION_AREA")
      case ._PROCESS_PLAN(let selectValue): result = ePROCESS_PLAN.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PROCESS_PLAN")
      case ._PRODUCT(let selectValue): result = ePRODUCT.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PRODUCT")
      case ._PRODUCT_CLASS(let selectValue): 
        result = ePRODUCT_CLASS.validateWhereRules(instance:selectValue, prefix:prefix + "\\PRODUCT_CLASS")
      case ._PRODUCT_CONCEPT(let selectValue): 
        result = ePRODUCT_CONCEPT.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PRODUCT_CONCEPT")
      case ._PRODUCT_CONCEPT_FEATURE(let selectValue): 
        result = ePRODUCT_CONCEPT_FEATURE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PRODUCT_CONCEPT_FEATURE")
      case ._PRODUCT_CONCEPT_FEATURE_CATEGORY(let selectValue): 
        result = ePRODUCT_CONCEPT_FEATURE_CATEGORY.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PRODUCT_CONCEPT_FEATURE_CATEGORY")
      case ._PRODUCT_DEFINITION(let selectValue): 
        result = ePRODUCT_DEFINITION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PRODUCT_DEFINITION")
      case ._PRODUCT_DEFINITION_FORMATION(let selectValue): 
        result = ePRODUCT_DEFINITION_FORMATION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PRODUCT_DEFINITION_FORMATION")
      case ._PRODUCT_DEFINITION_FORMATION_RELATIONSHIP(let selectValue): 
        result = ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PRODUCT_DEFINITION_FORMATION_RELATIONSHIP")
      case ._PRODUCT_DEFINITION_GROUP_ASSIGNMENT(let selectValue): 
        result = ePRODUCT_DEFINITION_GROUP_ASSIGNMENT.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PRODUCT_DEFINITION_GROUP_ASSIGNMENT")
      case ._PRODUCT_DEFINITION_RELATIONSHIP(let selectValue): 
        result = ePRODUCT_DEFINITION_RELATIONSHIP.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PRODUCT_DEFINITION_RELATIONSHIP")
      case ._PRODUCT_DEFINITION_USAGE(let selectValue): 
        result = ePRODUCT_DEFINITION_USAGE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PRODUCT_DEFINITION_USAGE")
      case ._PRODUCT_DESIGN_TO_INDIVIDUAL(let selectValue): 
        result = ePRODUCT_DESIGN_TO_INDIVIDUAL.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PRODUCT_DESIGN_TO_INDIVIDUAL")
      case ._PRODUCT_DESIGN_VERSION_TO_INDIVIDUAL(let selectValue): 
        result = ePRODUCT_DESIGN_VERSION_TO_INDIVIDUAL.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PRODUCT_DESIGN_VERSION_TO_INDIVIDUAL")
      case ._PRODUCT_GROUP(let selectValue): 
        result = ePRODUCT_GROUP.validateWhereRules(instance:selectValue, prefix:prefix + "\\PRODUCT_GROUP")
      case ._PRODUCT_GROUP_MEMBERSHIP(let selectValue): 
        result = ePRODUCT_GROUP_MEMBERSHIP.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PRODUCT_GROUP_MEMBERSHIP")
      case ._PRODUCT_GROUP_RELATIONSHIP(let selectValue): 
        result = ePRODUCT_GROUP_RELATIONSHIP.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PRODUCT_GROUP_RELATIONSHIP")
      case ._PRODUCT_IDENTIFICATION(let selectValue): 
        result = ePRODUCT_IDENTIFICATION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PRODUCT_IDENTIFICATION")
      case ._PRODUCT_PROCESS_PLAN(let selectValue): 
        result = ePRODUCT_PROCESS_PLAN.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PRODUCT_PROCESS_PLAN")
      case ._PRODUCT_RELATIONSHIP(let selectValue): 
        result = ePRODUCT_RELATIONSHIP.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PRODUCT_RELATIONSHIP")
      case ._PROPERTY_DEFINITION(let selectValue): 
        result = ePROPERTY_DEFINITION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PROPERTY_DEFINITION")
      case ._PROPERTY_DEFINITION_REPRESENTATION(let selectValue): 
        result = ePROPERTY_DEFINITION_REPRESENTATION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PROPERTY_DEFINITION_REPRESENTATION")
      case ._REPRESENTATION(let selectValue): 
        result = eREPRESENTATION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\REPRESENTATION")
      case ._REQUIREMENT_ASSIGNMENT(let selectValue): 
        result = eREQUIREMENT_ASSIGNMENT.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\REQUIREMENT_ASSIGNMENT")
      case ._REQUIREMENT_SOURCE(let selectValue): 
        result = eREQUIREMENT_SOURCE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\REQUIREMENT_SOURCE")
      case ._REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP(let selectValue): 
        result = eREQUIREMENT_VIEW_DEFINITION_RELATIONSHIP.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP")
      case ._RESOURCE_PROPERTY(let selectValue): 
        result = eRESOURCE_PROPERTY.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\RESOURCE_PROPERTY")
      case ._SHAPE_REPRESENTATION(let selectValue): 
        result = eSHAPE_REPRESENTATION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\SHAPE_REPRESENTATION")
      case ._STRUCTURED_MESSAGE(let selectValue): 
        result = eSTRUCTURED_MESSAGE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\STRUCTURED_MESSAGE")
      case ._VALIDATION(let selectValue): result = eVALIDATION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\VALIDATION")
      case ._VERIFICATION(let selectValue): result = eVERIFICATION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\VERIFICATION")
      case ._VERSIONED_ACTION_REQUEST(let selectValue): 
        result = eVERSIONED_ACTION_REQUEST.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\VERSIONED_ACTION_REQUEST")
      case nil: break
      }

      return result
    }

  }

}


//MARK: - SELECT TYPE HIERARCHY
public protocol AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sSECURITY_CLASSIFICATION_ITEM__type: 
  SDAISelectType {

  //MARK: GROUP REFERENCES
  var super_ePRODUCT_IDENTIFICATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_IDENTIFICATION? { get }
  var super_eGROUP_RELATIONSHIP: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGROUP_RELATIONSHIP? { get }
  var super_eAPPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eAPPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT? { get }
  var super_eREPRESENTATION_RELATIONSHIP: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_RELATIONSHIP? { get }
  var super_eAPPLIED_DESCRIPTION_TEXT_ASSIGNMENT_RELATIONSHIP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eAPPLIED_DESCRIPTION_TEXT_ASSIGNMENT_RELATIONSHIP? { get }
  var super_eASSEMBLY_COMPONENT_USAGE_SUBSTITUTE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eASSEMBLY_COMPONENT_USAGE_SUBSTITUTE? { get }
  var super_eMATERIAL_DESIGNATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMATERIAL_DESIGNATION? { get }
  var super_eREPRESENTATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION? { get }
  var super_eENVELOPE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eENVELOPE? { get }
  var super_eREQUIREMENT_SOURCE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREQUIREMENT_SOURCE? { get }
  var super_eAPPLIED_IDENTIFICATION_ASSIGNMENT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eAPPLIED_IDENTIFICATION_ASSIGNMENT? { get }
  var super_ePRODUCT_DEFINITION_GROUP_ASSIGNMENT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_GROUP_ASSIGNMENT? { get }
  var super_eINTERFACE_DEFINITION_CONNECTION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eINTERFACE_DEFINITION_CONNECTION? { get }
  var super_eEFFECTIVITY_ASSIGNMENT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEFFECTIVITY_ASSIGNMENT? { get }
  var super_eINTERFACE_CONNECTOR_AS_PLANNED: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eINTERFACE_CONNECTOR_AS_PLANNED? { get }
  var super_ePROPERTY_DEFINITION_REPRESENTATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePROPERTY_DEFINITION_REPRESENTATION? { get }
  var super_eEVALUATED_CHARACTERISTIC: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEVALUATED_CHARACTERISTIC? { get }
  var super_eINTERFACE_CONNECTOR_DESIGN: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eINTERFACE_CONNECTOR_DESIGN? { get }
  var super_eIDENTIFICATION_ASSIGNMENT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eIDENTIFICATION_ASSIGNMENT? { get }
  var super_ePROPERTY_DEFINITION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePROPERTY_DEFINITION? { get }
  var super_eEXCLUSIVE_PRODUCT_CONCEPT_FEATURE_CATEGORY: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEXCLUSIVE_PRODUCT_CONCEPT_FEATURE_CATEGORY? { get }
  var super_eSTRUCTURED_MESSAGE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSTRUCTURED_MESSAGE? { get }
  var super_eVALIDATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eVALIDATION? { get }
  var super_ePRODUCT_CONCEPT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_CONCEPT? { get }
  var super_eGROUP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGROUP? { get }
  var super_ePRODUCT_DESIGN_VERSION_TO_INDIVIDUAL: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DESIGN_VERSION_TO_INDIVIDUAL? { get }
  var super_eCONFIGURATION_ITEM: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONFIGURATION_ITEM? { get }
  var super_eINTERFACE_CONNECTOR_AS_REALIZED: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eINTERFACE_CONNECTOR_AS_REALIZED? { get }
  var super_ePRESENTATION_REPRESENTATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRESENTATION_REPRESENTATION? { get }
  var super_ePROCESS_PLAN: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePROCESS_PLAN? { get }
  var super_eDESCRIPTION_TEXT_ASSIGNMENT_RELATIONSHIP: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDESCRIPTION_TEXT_ASSIGNMENT_RELATIONSHIP? { get }
  var super_eDOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT? { get }
  var super_eSHAPE_REPRESENTATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_REPRESENTATION? { get }
  var super_eACTION_METHOD: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION_METHOD? { get }
  var super_eGROUP_ASSIGNMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGROUP_ASSIGNMENT? { get }
  var super_ePRODUCT_DEFINITION_PROCESS: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_PROCESS? { get }
  var super_eCONFIGURATION_DESIGN: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONFIGURATION_DESIGN? { get }
  var super_eEXECUTED_ACTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEXECUTED_ACTION? { get }
  var super_ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP? { get }
  var super_eEXTERNALLY_DEFINED_ITEM: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEXTERNALLY_DEFINED_ITEM? { get }
  var super_ePRODUCT_CONCEPT_FEATURE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_CONCEPT_FEATURE? { get }
  var super_eDESCRIPTION_TEXT_ASSIGNMENT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDESCRIPTION_TEXT_ASSIGNMENT? { get }
  var super_eDRAUGHTING_MODEL: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDRAUGHTING_MODEL? { get }
  var super_eCONDITIONAL_EFFECTIVITY: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONDITIONAL_EFFECTIVITY? { get }
  var super_eACTION_PROPERTY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION_PROPERTY? { get }
  var super_eEXTERNAL_IDENTIFICATION_ASSIGNMENT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEXTERNAL_IDENTIFICATION_ASSIGNMENT? { get }
  var super_ePRODUCT_DEFINITION_USAGE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_USAGE? { get }
  var super_eAPPLIED_ACTION_METHOD_ASSIGNMENT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eAPPLIED_ACTION_METHOD_ASSIGNMENT? { get }
  var super_ePRODUCT_GROUP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_GROUP? { get }
  var super_eGENERAL_PROPERTY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGENERAL_PROPERTY? { get }
  var super_ePACKAGE_PRODUCT_CONCEPT_FEATURE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePACKAGE_PRODUCT_CONCEPT_FEATURE? { get }
  var super_eEVALUATED_CHARACTERISTIC_OF_PRODUCT_AS_INDIVIDUAL_TEST_RESULT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEVALUATED_CHARACTERISTIC_OF_PRODUCT_AS_INDIVIDUAL_TEST_RESULT? { get }
  var super_eRESOURCE_PROPERTY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eRESOURCE_PROPERTY? { get }
  var super_ePRODUCT_GROUP_MEMBERSHIP: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_GROUP_MEMBERSHIP? { get }
  var super_ePRODUCT_DEFINITION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION? { get }
  var super_eINTERFACE_CONNECTION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eINTERFACE_CONNECTION? { get }
  var super_eAPPLIED_DOCUMENT_REFERENCE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eAPPLIED_DOCUMENT_REFERENCE? { get }
  var super_eEVIDENCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEVIDENCE? { get }
  var super_eACTION_METHOD_RELATIONSHIP: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION_METHOD_RELATIONSHIP? { get }
  var super_eAPPLIED_CLASSIFICATION_ASSIGNMENT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eAPPLIED_CLASSIFICATION_ASSIGNMENT? { get }
  var super_eDOCUMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDOCUMENT? { get }
  var super_eACTION_METHOD_ASSIGNMENT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION_METHOD_ASSIGNMENT? { get }
  var super_eCONFIGURATION_EFFECTIVITY: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONFIGURATION_EFFECTIVITY? { get }
  var super_ePRODUCT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT? { get }
  var super_eCONDITION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONDITION? { get }
  var super_eVERSIONED_ACTION_REQUEST: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eVERSIONED_ACTION_REQUEST? { get }
  var super_eORGANIZATIONAL_PROJECT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eORGANIZATIONAL_PROJECT? { get }
  var super_eDRAWING_REVISION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDRAWING_REVISION? { get }
  var super_eVERIFICATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eVERIFICATION? { get }
  var super_eAPPLIED_DESCRIPTION_TEXT_ASSIGNMENT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eAPPLIED_DESCRIPTION_TEXT_ASSIGNMENT? { get }
  var super_eEFFECTIVITY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEFFECTIVITY? { get }
  var super_ePRODUCT_PROCESS_PLAN: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_PROCESS_PLAN? { get }
  var super_eEXTERNALLY_DEFINED_GENERAL_PROPERTY: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEXTERNALLY_DEFINED_GENERAL_PROPERTY? { get }
  var super_ePRODUCT_DEFINITION_FORMATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_FORMATION? { get }
  var super_ePRODUCT_CLASS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_CLASS? { get }
  var super_ePRODUCT_DEFINITION_EFFECTIVITY: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_EFFECTIVITY? { get }
  var super_eINTERFACE_DEFINITION_FOR: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eINTERFACE_DEFINITION_FOR? { get }
  var super_ePRODUCT_GROUP_RELATIONSHIP: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_GROUP_RELATIONSHIP? { get }
  var super_eASSEMBLY_COMPONENT_USAGE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eASSEMBLY_COMPONENT_USAGE? { get }
  var super_eIDENTIFICATION_ASSIGNMENT_RELATIONSHIP: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eIDENTIFICATION_ASSIGNMENT_RELATIONSHIP? { get }
  var super_ePRESENTATION_SET: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRESENTATION_SET? { get }
  var super_eACTION_ASSIGNMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION_ASSIGNMENT? { get }
  var super_eCLASS_SYSTEM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCLASS_SYSTEM? { get }
  var super_eDOCUMENT_REFERENCE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDOCUMENT_REFERENCE? { get }
  var super_eAPPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eAPPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT? { get }
  var super_eACTION_PROPERTY_REPRESENTATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION_PROPERTY_REPRESENTATION? { get }
  var super_ePRODUCT_CONCEPT_FEATURE_CATEGORY: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_CONCEPT_FEATURE_CATEGORY? { get }
  var super_eCLASSIFICATION_ASSIGNMENT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCLASSIFICATION_ASSIGNMENT? { get }
  var super_eCONFIGURED_EFFECTIVITY_ASSIGNMENT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONFIGURED_EFFECTIVITY_ASSIGNMENT? { get }
  var super_ePRODUCT_DESIGN_TO_INDIVIDUAL: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DESIGN_TO_INDIVIDUAL? { get }
  var super_eREQUIREMENT_VIEW_DEFINITION_RELATIONSHIP: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREQUIREMENT_VIEW_DEFINITION_RELATIONSHIP? { get }
  var super_eDOCUMENT_FILE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDOCUMENT_FILE? { get }
  var super_eMAKE_FROM_USAGE_OPTION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMAKE_FROM_USAGE_OPTION? { get }
  var super_ePRODUCT_DEFINITION_RELATIONSHIP: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_RELATIONSHIP? { get }
  var super_eMECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION? { get }
  var super_eACTION_DIRECTIVE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION_DIRECTIVE? { get }
  var super_ePRESENTATION_AREA: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRESENTATION_AREA? { get }
  var super_eAPPLIED_ACTION_ASSIGNMENT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eAPPLIED_ACTION_ASSIGNMENT? { get }
  var super_ePRODUCT_RELATIONSHIP: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_RELATIONSHIP? { get }
  var super_eACTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION? { get }
  var super_eINTERFACE_CONNECTOR_OCCURRENCE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eINTERFACE_CONNECTOR_OCCURRENCE? { get }
  var super_eREQUIREMENT_ASSIGNMENT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREQUIREMENT_ASSIGNMENT? { get }
  var super_eCHARACTERIZED_OBJECT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCHARACTERIZED_OBJECT? { get }

  //MARK: ENTITY ATTRIBUTE REFERENCES
  var ASSIGNED_DOCUMENT_USAGE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDOCUMENT_USAGE_CONSTRAINT?  { get }
  var RELATED_METHOD: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION_METHOD?  { get }
  var REPRESENTATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION?  { get }
  var ITEM_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sSOURCE_ITEM?  { get }
  var PROPERTIES: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePROCESS_PROPERTY_ASSOCIATION>/*[
    1:nil]*/ )?  { get }
  var LEAF: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sPRODUCT_DEFINITION_OR_REFERENCE?  { get }
  var DIRECTIVE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION_DIRECTIVE?  { get }
  var RIGHT_APPLIED: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eINFORMATION_RIGHT?  { get }
  var REALIZED_PRODUCT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_FORMATION?  { get }
  var DEPENDENT_ENVIRONMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDATA_ENVIRONMENT?  { get }
  var NEXT_USAGE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eNEXT_ASSEMBLY_USAGE_OCCURRENCE?  { get }
  var ROLE: SDAI.GENERIC_ENTITY?  { get }
  var REFERENCE_DESIGNATOR: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { get }
  var SUBSTITUTE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eASSEMBLY_COMPONENT_USAGE?  { get }
  var RELATED_GROUP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGROUP?  { get }
  var STATUS: SDAI.STRING?  { get }
  var RELATED_PRODUCT_DEFINITION_FORMATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_FORMATION?  { get }
  var CHARACTER_BOX: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePLANAR_EXTENT?  { get }
  var DESIGN: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sCONFIGURATION_DESIGN_ITEM?  { get }
  var ANALYSIS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT?  { get }
  var CONSTITUENT_AMOUNT: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sCHARACTERIZED_PRODUCT_COMPOSITION_VALUE>/*[1:nil]*/ )?  { get }
  var UPPER_USAGE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eASSEMBLY_COMPONENT_USAGE?  { get }
  var RANKING_RATIONALE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT?  { get }
  var QUANTITY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMEASURE_WITH_UNIT?  { get }
  var DEFINITIONS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sCHARACTERIZED_DEFINITION>/*[1:
    nil]*/ )?  { get }
  var RELATING_IDENTIFICATION_ASSIGNMENT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eIDENTIFICATION_ASSIGNMENT?  { get }
  var CLASS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { get }
  var CM_LINK: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eVARIATIONAL_CURRENT_REPRESENTATION_RELATIONSHIP?  { get }
  var DEFINED_VERSION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOLLECTION_VERSION?  { get }
  var RELATED_MESSAGE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSTRUCTURED_MESSAGE?  { get }
  var OF_COLLECTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOLLECTION?  { get }
  var OUTLINES: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eANNOTATION_FILL_AREA>/*[1:nil]*/ )?  { get }
  var PRODUCT_DESIGN_VERSION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_FORMATION?  { get }
  var OF_SHAPE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMATED_PART_RELATIONSHIP?  { get }
  var RANKING: SDAI.INTEGER?  { get }
  var REQUIRED_GENERAL_ACCURACY: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_MEASUREMENT_ACCURACY>/*[1:nil]*/ )?  { get }
  var MAKE_OR_BUY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nSOURCE?  { get }
  var CHOSEN_METHOD: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION_METHOD?  { get }
  var USED_REPRESENTATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION?  { get }
  var PURPOSE: SDAI.STRING?  { get }
  var AREAS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eAREA_IN_SET>/*[1:nil]*/ )?  { get }
  var RESOURCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sCHARACTERIZED_RESOURCE_DEFINITION?  { get }
  var INTENDED_SCALE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT?  { get }
  var ASSOCIATED_SHAPE_REPRESENTATION: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eKINEMATIC_LINK_REPRESENTATION_ASSOCIATION>/*[0:1]*/ )?  { get }
  var RELATING_PRODUCT_DEFINITION_FORMATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_FORMATION?  { get }
  var RELATING_VERSION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOLLECTION_VERSION?  { get }
  var IDENTIFICATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { get }
  var RELATED_COLLECTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOLLECTION?  { get }
  var ASSIGNED_CLASS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGROUP?  { get }
  var COMPOSITION_BASIS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { get }
  var DOCUMENTATION_IDS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDOCUMENT>/*[1:nil]*/ )?  { get }
  var RELATING: SDAI.GENERIC_ENTITY?  { get }
  var RELATION_TYPE: SDAI.STRING?  { get }
  var BASELINE_RATIO: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tRATIO_MEASURE?  { get }
  var RIGHT_USAGE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eINFORMATION_USAGE_RIGHT?  { get }
  var ASSIGNED_ACTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION?  { get }
  var PROPERTY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION_PROPERTY?  { get }
  var ASSIGNED_ACTION_METHOD: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION_METHOD?  { get }
  var SPECIFICATION: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION>/*[1:nil]*/ )?  { get }
  var PLANNED_PRODUCT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_FORMATION?  { get }
  var ASSIGNED_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { get }
  var REVISION_IDENTIFIER: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { get }
  var SIZE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRESENTATION_SIZE?  { get }
  var SUCCESSOR: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOLLECTION_VERSION?  { get }
  var TESSELLATION_ACCURACY_PARAMETERS: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sTESSELLATION_ACCURACY_PARAMETER_ITEM>/*[1:nil]*/ )?  { get }
  var RELATED_IDENTIFICATION_ASSIGNMENT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eIDENTIFICATION_ASSIGNMENT?  { get }
  var MEMBER: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sPRODUCT_SELECT?  { get }
  var REPRESENTED_JOINTS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eKINEMATIC_JOINT>/*[1:nil]*/ )?  { get }
  var INDIVIDUAL_PRODUCT: SDAI.GENERIC_ENTITY?  { get }
  var RELATED_PRODUCT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT?  { get }
  var RELATED: SDAI.GENERIC_ENTITY?  { get }
  var CONDITION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONCEPT_FEATURE_RELATIONSHIP_WITH_CONDITION?  { get }
  var ITEM_CONCEPT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_CLASS?  { get }
  var BOX_HEIGHT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE?  { get }
  var KIND: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDOCUMENT_TYPE?  { get }
  var DETERMINATION_METHOD: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT?  { get }
  var RELATING_COLLECTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOLLECTION?  { get }
  var CONSEQUENCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT?  { get }
  var ROOT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION?  { get }
  var RELATING_GROUP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGROUP?  { get }
  var DRAWING_IDENTIFIER: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDRAWING_DEFINITION?  { get }
  var BASE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eASSEMBLY_COMPONENT_USAGE?  { get }
  var PRODUCT_DEFINITIONS: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePROCESS_PRODUCT_ASSOCIATION>/*[1:nil]*/ )?  { get }
  var RELATING_PRODUCT_DEFINITION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sPRODUCT_DEFINITION_OR_REFERENCE?  { get }
  var STROKES: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCURVE>/*[1:nil]*/ )?  { get }
  var REPRESENTATION_TYPES: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDOCUMENT_REPRESENTATION_TYPE>/*[0:nil]*/ )?  { get }
  var RELATED_VERSION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOLLECTION_VERSION?  { get }
  var ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { get }
  var APPLIED_GENERAL_ACCURACY: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_MEASUREMENT_ACCURACY>/*[1:nil]*/ )?  { get }
  var RELATING_MESSAGE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSTRUCTURED_MESSAGE?  { get }
  var CONTEXT_OF_ITEMS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_CONTEXT?  { get }
  var REP_1: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sREPRESENTATION_OR_REPRESENTATION_REFERENCE?  { get }
  var REP_2: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sREPRESENTATION_OR_REPRESENTATION_REFERENCE?  { get }
  var VERSION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { get }
  var RESPONSIBLE_ORGANIZATIONS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eORGANIZATION>/*[1:
    nil]*/ )?  { get }
  var OF_PRODUCT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT?  { get }
  var REPRESENTATION_RELATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eKINEMATIC_PROPERTY_DEFINITION_REPRESENTATION?  { get }
  var PRODUCT_DEFINITION_OCCURRENCE_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { get }
  var ASSIGNED_EFFECTIVITY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEFFECTIVITY?  { get }
  var ASSIGNED_DOCUMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDOCUMENT?  { get }
  var NEUTRAL_SKETCH_SEMANTICS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nCURVES_OR_AREA?  { get }
  var REQUESTS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eVERSIONED_ACTION_REQUEST>/*[1:nil]*/ )?  { get }
  var MARKET_CONTEXT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_CONCEPT_CONTEXT?  { get }
  var REPRESENTED_LINK: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eKINEMATIC_LINK?  { get }
  var REPRESENTED_TOPOLOGY: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sKINEMATIC_TOPOLOGY_REPRESENTATION_SELECT?  { get }
  var UNCERTAINTY: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eUNCERTAINTY_MEASURE_WITH_UNIT>
    /*[1:nil]*/ )?  { get }
  var ASSIGNED_GROUP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGROUP?  { get }
  var LOCATION: (SDAI.LIST_UNIQUE<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eNEXT_ASSEMBLY_USAGE_OCCURRENCE>/*[1:nil]*/ )?  { get }
  var COMMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT?  { get }
  var RELATING_PRODUCT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT?  { get }
  var CONFIGURATION: SDAI.GENERIC_ENTITY?  { get }
  var RELATED_PRODUCT_DEFINITION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sPRODUCT_DEFINITION_OR_REFERENCE?  { get }
  var NAME: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { get }
  var REPRESENTED_MECHANISM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMECHANISM_REPRESENTATION?  { get }
  var PREDECESSOR: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOLLECTION_VERSION?  { get }
  var RELATING_METHOD: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION_METHOD?  { get }
  var USAGE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_RELATIONSHIP?  { get }
  var PRODUCT_DESIGN: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT?  { get }
  var FORMATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_FORMATION?  { get }
}

public protocol AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sSECURITY_CLASSIFICATION_ITEM__subtype: 
  AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sSECURITY_CLASSIFICATION_ITEM__type, SDAIDefinedType
where Supertype: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sSECURITY_CLASSIFICATION_ITEM__type
{}

public extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sSECURITY_CLASSIFICATION_ITEM__subtype {
  //MARK: CONSTRUCTORS
  init?(possiblyFrom complex: SDAI.ComplexEntity?) {
    self.init(fundamental: FundamentalType(possiblyFrom: complex))
  }

  init?<T: SDAIUnderlyingType>(possiblyFrom underlyingType: T?) {
    self.init(fundamental: FundamentalType(possiblyFrom: underlyingType))
  }

  init?<G: SDAIGenericType>(fromGeneric generic: G?) {
    self.init(fundamental: FundamentalType.convert(fromGeneric: generic))
  }

  //MARK: GROUP REFERENCES
  var super_ePRODUCT_IDENTIFICATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_IDENTIFICATION? { rep.super_ePRODUCT_IDENTIFICATION }
  var super_eGROUP_RELATIONSHIP: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGROUP_RELATIONSHIP? { rep.super_eGROUP_RELATIONSHIP }
  var super_eAPPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eAPPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT? { rep.super_eAPPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT }
  var super_eREPRESENTATION_RELATIONSHIP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_RELATIONSHIP? { rep.super_eREPRESENTATION_RELATIONSHIP }
  var super_eAPPLIED_DESCRIPTION_TEXT_ASSIGNMENT_RELATIONSHIP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eAPPLIED_DESCRIPTION_TEXT_ASSIGNMENT_RELATIONSHIP? { rep.super_eAPPLIED_DESCRIPTION_TEXT_ASSIGNMENT_RELATIONSHIP }
  var super_eASSEMBLY_COMPONENT_USAGE_SUBSTITUTE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eASSEMBLY_COMPONENT_USAGE_SUBSTITUTE? { rep.super_eASSEMBLY_COMPONENT_USAGE_SUBSTITUTE }
  var super_eMATERIAL_DESIGNATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMATERIAL_DESIGNATION? { rep.super_eMATERIAL_DESIGNATION }
  var super_eREPRESENTATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION? { rep.super_eREPRESENTATION }
  var super_eENVELOPE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eENVELOPE? { rep.super_eENVELOPE }
  var super_eREQUIREMENT_SOURCE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREQUIREMENT_SOURCE? { rep.super_eREQUIREMENT_SOURCE }
  var super_eAPPLIED_IDENTIFICATION_ASSIGNMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eAPPLIED_IDENTIFICATION_ASSIGNMENT? { rep.super_eAPPLIED_IDENTIFICATION_ASSIGNMENT }
  var super_ePRODUCT_DEFINITION_GROUP_ASSIGNMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_GROUP_ASSIGNMENT? { rep.super_ePRODUCT_DEFINITION_GROUP_ASSIGNMENT }
  var super_eINTERFACE_DEFINITION_CONNECTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eINTERFACE_DEFINITION_CONNECTION? { rep.super_eINTERFACE_DEFINITION_CONNECTION }
  var super_eEFFECTIVITY_ASSIGNMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEFFECTIVITY_ASSIGNMENT? { rep.super_eEFFECTIVITY_ASSIGNMENT }
  var super_eINTERFACE_CONNECTOR_AS_PLANNED: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eINTERFACE_CONNECTOR_AS_PLANNED? { rep.super_eINTERFACE_CONNECTOR_AS_PLANNED }
  var super_ePROPERTY_DEFINITION_REPRESENTATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePROPERTY_DEFINITION_REPRESENTATION? { rep.super_ePROPERTY_DEFINITION_REPRESENTATION }
  var super_eEVALUATED_CHARACTERISTIC: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEVALUATED_CHARACTERISTIC? { rep.super_eEVALUATED_CHARACTERISTIC }
  var super_eINTERFACE_CONNECTOR_DESIGN: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eINTERFACE_CONNECTOR_DESIGN? { rep.super_eINTERFACE_CONNECTOR_DESIGN }
  var super_eIDENTIFICATION_ASSIGNMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eIDENTIFICATION_ASSIGNMENT? { rep.super_eIDENTIFICATION_ASSIGNMENT }
  var super_ePROPERTY_DEFINITION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePROPERTY_DEFINITION? { rep.super_ePROPERTY_DEFINITION }
  var super_eEXCLUSIVE_PRODUCT_CONCEPT_FEATURE_CATEGORY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEXCLUSIVE_PRODUCT_CONCEPT_FEATURE_CATEGORY? { rep.super_eEXCLUSIVE_PRODUCT_CONCEPT_FEATURE_CATEGORY }
  var super_eSTRUCTURED_MESSAGE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSTRUCTURED_MESSAGE? { rep.super_eSTRUCTURED_MESSAGE }
  var super_eVALIDATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eVALIDATION? { rep.super_eVALIDATION }
  var super_ePRODUCT_CONCEPT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_CONCEPT? { rep.super_ePRODUCT_CONCEPT }
  var super_eGROUP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGROUP? { rep.super_eGROUP }
  var super_ePRODUCT_DESIGN_VERSION_TO_INDIVIDUAL: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DESIGN_VERSION_TO_INDIVIDUAL? { rep.super_ePRODUCT_DESIGN_VERSION_TO_INDIVIDUAL }
  var super_eCONFIGURATION_ITEM: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONFIGURATION_ITEM? { rep.super_eCONFIGURATION_ITEM }
  var super_eINTERFACE_CONNECTOR_AS_REALIZED: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eINTERFACE_CONNECTOR_AS_REALIZED? { rep.super_eINTERFACE_CONNECTOR_AS_REALIZED }
  var super_ePRESENTATION_REPRESENTATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRESENTATION_REPRESENTATION? { rep.super_ePRESENTATION_REPRESENTATION }
  var super_ePROCESS_PLAN: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePROCESS_PLAN? { rep.super_ePROCESS_PLAN }
  var super_eDESCRIPTION_TEXT_ASSIGNMENT_RELATIONSHIP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDESCRIPTION_TEXT_ASSIGNMENT_RELATIONSHIP? { rep.super_eDESCRIPTION_TEXT_ASSIGNMENT_RELATIONSHIP }
  var super_eDOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT? { rep.super_eDOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT }
  var super_eSHAPE_REPRESENTATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_REPRESENTATION? { rep.super_eSHAPE_REPRESENTATION }
  var super_eACTION_METHOD: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION_METHOD? { rep.super_eACTION_METHOD }
  var super_eGROUP_ASSIGNMENT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGROUP_ASSIGNMENT? { rep.super_eGROUP_ASSIGNMENT }
  var super_ePRODUCT_DEFINITION_PROCESS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_PROCESS? { rep.super_ePRODUCT_DEFINITION_PROCESS }
  var super_eCONFIGURATION_DESIGN: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONFIGURATION_DESIGN? { rep.super_eCONFIGURATION_DESIGN }
  var super_eEXECUTED_ACTION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEXECUTED_ACTION? { rep.super_eEXECUTED_ACTION }
  var super_ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP? { rep.super_ePRODUCT_DEFINITION_FORMATION_RELATIONSHIP }
  var super_eEXTERNALLY_DEFINED_ITEM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEXTERNALLY_DEFINED_ITEM? { rep.super_eEXTERNALLY_DEFINED_ITEM }
  var super_ePRODUCT_CONCEPT_FEATURE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_CONCEPT_FEATURE? { rep.super_ePRODUCT_CONCEPT_FEATURE }
  var super_eDESCRIPTION_TEXT_ASSIGNMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDESCRIPTION_TEXT_ASSIGNMENT? { rep.super_eDESCRIPTION_TEXT_ASSIGNMENT }
  var super_eDRAUGHTING_MODEL: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDRAUGHTING_MODEL? { rep.super_eDRAUGHTING_MODEL }
  var super_eCONDITIONAL_EFFECTIVITY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONDITIONAL_EFFECTIVITY? { rep.super_eCONDITIONAL_EFFECTIVITY }
  var super_eACTION_PROPERTY: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION_PROPERTY? { rep.super_eACTION_PROPERTY }
  var super_eEXTERNAL_IDENTIFICATION_ASSIGNMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEXTERNAL_IDENTIFICATION_ASSIGNMENT? { rep.super_eEXTERNAL_IDENTIFICATION_ASSIGNMENT }
  var super_ePRODUCT_DEFINITION_USAGE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_USAGE? { rep.super_ePRODUCT_DEFINITION_USAGE }
  var super_eAPPLIED_ACTION_METHOD_ASSIGNMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eAPPLIED_ACTION_METHOD_ASSIGNMENT? { rep.super_eAPPLIED_ACTION_METHOD_ASSIGNMENT }
  var super_ePRODUCT_GROUP: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_GROUP? { rep.super_ePRODUCT_GROUP }
  var super_eGENERAL_PROPERTY: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGENERAL_PROPERTY? { rep.super_eGENERAL_PROPERTY }
  var super_ePACKAGE_PRODUCT_CONCEPT_FEATURE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePACKAGE_PRODUCT_CONCEPT_FEATURE? { rep.super_ePACKAGE_PRODUCT_CONCEPT_FEATURE }
  var super_eEVALUATED_CHARACTERISTIC_OF_PRODUCT_AS_INDIVIDUAL_TEST_RESULT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEVALUATED_CHARACTERISTIC_OF_PRODUCT_AS_INDIVIDUAL_TEST_RESULT? { rep.super_eEVALUATED_CHARACTERISTIC_OF_PRODUCT_AS_INDIVIDUAL_TEST_RESULT }
  var super_eRESOURCE_PROPERTY: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eRESOURCE_PROPERTY? { rep.super_eRESOURCE_PROPERTY }
  var super_ePRODUCT_GROUP_MEMBERSHIP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_GROUP_MEMBERSHIP? { rep.super_ePRODUCT_GROUP_MEMBERSHIP }
  var super_ePRODUCT_DEFINITION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION? { rep.super_ePRODUCT_DEFINITION }
  var super_eINTERFACE_CONNECTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eINTERFACE_CONNECTION? { rep.super_eINTERFACE_CONNECTION }
  var super_eAPPLIED_DOCUMENT_REFERENCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eAPPLIED_DOCUMENT_REFERENCE? { rep.super_eAPPLIED_DOCUMENT_REFERENCE }
  var super_eEVIDENCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEVIDENCE? { rep.super_eEVIDENCE }
  var super_eACTION_METHOD_RELATIONSHIP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION_METHOD_RELATIONSHIP? { rep.super_eACTION_METHOD_RELATIONSHIP }
  var super_eAPPLIED_CLASSIFICATION_ASSIGNMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eAPPLIED_CLASSIFICATION_ASSIGNMENT? { rep.super_eAPPLIED_CLASSIFICATION_ASSIGNMENT }
  var super_eDOCUMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDOCUMENT? { rep.super_eDOCUMENT }
  var super_eACTION_METHOD_ASSIGNMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION_METHOD_ASSIGNMENT? { rep.super_eACTION_METHOD_ASSIGNMENT }
  var super_eCONFIGURATION_EFFECTIVITY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONFIGURATION_EFFECTIVITY? { rep.super_eCONFIGURATION_EFFECTIVITY }
  var super_ePRODUCT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT? { rep.super_ePRODUCT }
  var super_eCONDITION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONDITION? { rep.super_eCONDITION }
  var super_eVERSIONED_ACTION_REQUEST: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eVERSIONED_ACTION_REQUEST? { rep.super_eVERSIONED_ACTION_REQUEST }
  var super_eORGANIZATIONAL_PROJECT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eORGANIZATIONAL_PROJECT? { rep.super_eORGANIZATIONAL_PROJECT }
  var super_eDRAWING_REVISION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDRAWING_REVISION? { rep.super_eDRAWING_REVISION }
  var super_eVERIFICATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eVERIFICATION? { rep.super_eVERIFICATION }
  var super_eAPPLIED_DESCRIPTION_TEXT_ASSIGNMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eAPPLIED_DESCRIPTION_TEXT_ASSIGNMENT? { rep.super_eAPPLIED_DESCRIPTION_TEXT_ASSIGNMENT }
  var super_eEFFECTIVITY: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEFFECTIVITY? { rep.super_eEFFECTIVITY }
  var super_ePRODUCT_PROCESS_PLAN: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_PROCESS_PLAN? { rep.super_ePRODUCT_PROCESS_PLAN }
  var super_eEXTERNALLY_DEFINED_GENERAL_PROPERTY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEXTERNALLY_DEFINED_GENERAL_PROPERTY? { rep.super_eEXTERNALLY_DEFINED_GENERAL_PROPERTY }
  var super_ePRODUCT_DEFINITION_FORMATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_FORMATION? { rep.super_ePRODUCT_DEFINITION_FORMATION }
  var super_ePRODUCT_CLASS: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_CLASS? { rep.super_ePRODUCT_CLASS }
  var super_ePRODUCT_DEFINITION_EFFECTIVITY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_EFFECTIVITY? { rep.super_ePRODUCT_DEFINITION_EFFECTIVITY }
  var super_eINTERFACE_DEFINITION_FOR: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eINTERFACE_DEFINITION_FOR? { rep.super_eINTERFACE_DEFINITION_FOR }
  var super_ePRODUCT_GROUP_RELATIONSHIP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_GROUP_RELATIONSHIP? { rep.super_ePRODUCT_GROUP_RELATIONSHIP }
  var super_eASSEMBLY_COMPONENT_USAGE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eASSEMBLY_COMPONENT_USAGE? { rep.super_eASSEMBLY_COMPONENT_USAGE }
  var super_eIDENTIFICATION_ASSIGNMENT_RELATIONSHIP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eIDENTIFICATION_ASSIGNMENT_RELATIONSHIP? { rep.super_eIDENTIFICATION_ASSIGNMENT_RELATIONSHIP }
  var super_ePRESENTATION_SET: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRESENTATION_SET? { rep.super_ePRESENTATION_SET }
  var super_eACTION_ASSIGNMENT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION_ASSIGNMENT? { rep.super_eACTION_ASSIGNMENT }
  var super_eCLASS_SYSTEM: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCLASS_SYSTEM? { rep.super_eCLASS_SYSTEM }
  var super_eDOCUMENT_REFERENCE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDOCUMENT_REFERENCE? { rep.super_eDOCUMENT_REFERENCE }
  var super_eAPPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eAPPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT? { rep.super_eAPPLIED_DOCUMENT_USAGE_CONSTRAINT_ASSIGNMENT }
  var super_eACTION_PROPERTY_REPRESENTATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION_PROPERTY_REPRESENTATION? { rep.super_eACTION_PROPERTY_REPRESENTATION }
  var super_ePRODUCT_CONCEPT_FEATURE_CATEGORY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_CONCEPT_FEATURE_CATEGORY? { rep.super_ePRODUCT_CONCEPT_FEATURE_CATEGORY }
  var super_eCLASSIFICATION_ASSIGNMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCLASSIFICATION_ASSIGNMENT? { rep.super_eCLASSIFICATION_ASSIGNMENT }
  var super_eCONFIGURED_EFFECTIVITY_ASSIGNMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONFIGURED_EFFECTIVITY_ASSIGNMENT? { rep.super_eCONFIGURED_EFFECTIVITY_ASSIGNMENT }
  var super_ePRODUCT_DESIGN_TO_INDIVIDUAL: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DESIGN_TO_INDIVIDUAL? { rep.super_ePRODUCT_DESIGN_TO_INDIVIDUAL }
  var super_eREQUIREMENT_VIEW_DEFINITION_RELATIONSHIP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREQUIREMENT_VIEW_DEFINITION_RELATIONSHIP? { rep.super_eREQUIREMENT_VIEW_DEFINITION_RELATIONSHIP }
  var super_eDOCUMENT_FILE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDOCUMENT_FILE? { rep.super_eDOCUMENT_FILE }
  var super_eMAKE_FROM_USAGE_OPTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMAKE_FROM_USAGE_OPTION? { rep.super_eMAKE_FROM_USAGE_OPTION }
  var super_ePRODUCT_DEFINITION_RELATIONSHIP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_RELATIONSHIP? { rep.super_ePRODUCT_DEFINITION_RELATIONSHIP }
  var super_eMECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION? { rep.super_eMECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION }
  var super_eACTION_DIRECTIVE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION_DIRECTIVE? { rep.super_eACTION_DIRECTIVE }
  var super_ePRESENTATION_AREA: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRESENTATION_AREA? { rep.super_ePRESENTATION_AREA }
  var super_eAPPLIED_ACTION_ASSIGNMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eAPPLIED_ACTION_ASSIGNMENT? { rep.super_eAPPLIED_ACTION_ASSIGNMENT }
  var super_ePRODUCT_RELATIONSHIP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_RELATIONSHIP? { rep.super_ePRODUCT_RELATIONSHIP }
  var super_eACTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION? { rep.super_eACTION }
  var super_eINTERFACE_CONNECTOR_OCCURRENCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eINTERFACE_CONNECTOR_OCCURRENCE? { rep.super_eINTERFACE_CONNECTOR_OCCURRENCE }
  var super_eREQUIREMENT_ASSIGNMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREQUIREMENT_ASSIGNMENT? { rep.super_eREQUIREMENT_ASSIGNMENT }
  var super_eCHARACTERIZED_OBJECT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCHARACTERIZED_OBJECT? { rep.super_eCHARACTERIZED_OBJECT }

  //MARK: ENTITY ATTRIBUTE REFERENCES
  var ASSIGNED_DOCUMENT_USAGE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDOCUMENT_USAGE_CONSTRAINT?  { rep.ASSIGNED_DOCUMENT_USAGE }
  var RELATED_METHOD: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION_METHOD?  { rep.RELATED_METHOD }
  var REPRESENTATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION?  { rep.REPRESENTATION }
  var ITEM_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sSOURCE_ITEM?  { rep.ITEM_ID }
  var PROPERTIES: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePROCESS_PROPERTY_ASSOCIATION>/*[
    1:nil]*/ )?  { rep.PROPERTIES }
  var LEAF: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sPRODUCT_DEFINITION_OR_REFERENCE?  { rep.LEAF }
  var DIRECTIVE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION_DIRECTIVE?  { rep.DIRECTIVE }
  var RIGHT_APPLIED: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eINFORMATION_RIGHT?  { rep.RIGHT_APPLIED }
  var REALIZED_PRODUCT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_FORMATION?  { rep.REALIZED_PRODUCT }
  var DEPENDENT_ENVIRONMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDATA_ENVIRONMENT?  { rep.DEPENDENT_ENVIRONMENT }
  var NEXT_USAGE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eNEXT_ASSEMBLY_USAGE_OCCURRENCE?  { rep.NEXT_USAGE }
  var ROLE: SDAI.GENERIC_ENTITY?  { rep.ROLE }
  var REFERENCE_DESIGNATOR: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { rep.REFERENCE_DESIGNATOR }
  var SUBSTITUTE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eASSEMBLY_COMPONENT_USAGE?  { rep.SUBSTITUTE }
  var RELATED_GROUP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGROUP?  { rep.RELATED_GROUP }
  var STATUS: SDAI.STRING?  { rep.STATUS }
  var RELATED_PRODUCT_DEFINITION_FORMATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_FORMATION?  { rep.RELATED_PRODUCT_DEFINITION_FORMATION }
  var CHARACTER_BOX: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePLANAR_EXTENT?  { rep.CHARACTER_BOX }
  var DESIGN: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sCONFIGURATION_DESIGN_ITEM?  { rep.DESIGN }
  var ANALYSIS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT?  { rep.ANALYSIS }
  var CONSTITUENT_AMOUNT: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sCHARACTERIZED_PRODUCT_COMPOSITION_VALUE>/*[1:nil]*/ )?  { rep.CONSTITUENT_AMOUNT }
  var UPPER_USAGE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eASSEMBLY_COMPONENT_USAGE?  { rep.UPPER_USAGE }
  var RANKING_RATIONALE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT?  { rep.RANKING_RATIONALE }
  var QUANTITY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMEASURE_WITH_UNIT?  { rep.QUANTITY }
  var DEFINITIONS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sCHARACTERIZED_DEFINITION>/*[1:
    nil]*/ )?  { rep.DEFINITIONS }
  var RELATING_IDENTIFICATION_ASSIGNMENT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eIDENTIFICATION_ASSIGNMENT?  { rep.RELATING_IDENTIFICATION_ASSIGNMENT }
  var CLASS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { rep.CLASS }
  var CM_LINK: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eVARIATIONAL_CURRENT_REPRESENTATION_RELATIONSHIP?  { rep.CM_LINK }
  var DEFINED_VERSION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOLLECTION_VERSION?  { rep.DEFINED_VERSION }
  var RELATED_MESSAGE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSTRUCTURED_MESSAGE?  { rep.RELATED_MESSAGE }
  var OF_COLLECTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOLLECTION?  { rep.OF_COLLECTION }
  var OUTLINES: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eANNOTATION_FILL_AREA>/*[1:nil]*/ )?  { rep.OUTLINES }
  var PRODUCT_DESIGN_VERSION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_FORMATION?  { rep.PRODUCT_DESIGN_VERSION }
  var OF_SHAPE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMATED_PART_RELATIONSHIP?  { rep.OF_SHAPE }
  var RANKING: SDAI.INTEGER?  { rep.RANKING }
  var REQUIRED_GENERAL_ACCURACY: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_MEASUREMENT_ACCURACY>/*[1:nil]*/ )?  { rep.REQUIRED_GENERAL_ACCURACY }
  var MAKE_OR_BUY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nSOURCE?  { rep.MAKE_OR_BUY }
  var CHOSEN_METHOD: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION_METHOD?  { rep.CHOSEN_METHOD }
  var USED_REPRESENTATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION?  { rep.USED_REPRESENTATION }
  var PURPOSE: SDAI.STRING?  { rep.PURPOSE }
  var AREAS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eAREA_IN_SET>/*[1:nil]*/ )?  { rep.AREAS }
  var RESOURCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sCHARACTERIZED_RESOURCE_DEFINITION?  { rep.RESOURCE }
  var INTENDED_SCALE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT?  { rep.INTENDED_SCALE }
  var ASSOCIATED_SHAPE_REPRESENTATION: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eKINEMATIC_LINK_REPRESENTATION_ASSOCIATION>/*[0:1]*/ )?  { rep.ASSOCIATED_SHAPE_REPRESENTATION }
  var RELATING_PRODUCT_DEFINITION_FORMATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_FORMATION?  { rep.RELATING_PRODUCT_DEFINITION_FORMATION }
  var RELATING_VERSION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOLLECTION_VERSION?  { rep.RELATING_VERSION }
  var IDENTIFICATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { rep.IDENTIFICATION }
  var RELATED_COLLECTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOLLECTION?  { rep.RELATED_COLLECTION }
  var ASSIGNED_CLASS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGROUP?  { rep.ASSIGNED_CLASS }
  var COMPOSITION_BASIS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { rep.COMPOSITION_BASIS }
  var DOCUMENTATION_IDS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDOCUMENT>/*[1:nil]*/ )?  { rep.DOCUMENTATION_IDS }
  var RELATING: SDAI.GENERIC_ENTITY?  { rep.RELATING }
  var RELATION_TYPE: SDAI.STRING?  { rep.RELATION_TYPE }
  var BASELINE_RATIO: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tRATIO_MEASURE?  { rep.BASELINE_RATIO }
  var RIGHT_USAGE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eINFORMATION_USAGE_RIGHT?  { rep.RIGHT_USAGE }
  var ASSIGNED_ACTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION?  { rep.ASSIGNED_ACTION }
  var PROPERTY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION_PROPERTY?  { rep.PROPERTY }
  var ASSIGNED_ACTION_METHOD: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION_METHOD?  { rep.ASSIGNED_ACTION_METHOD }
  var SPECIFICATION: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION>/*[1:nil]*/ )?  { rep.SPECIFICATION }
  var PLANNED_PRODUCT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_FORMATION?  { rep.PLANNED_PRODUCT }
  var ASSIGNED_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { rep.ASSIGNED_ID }
  var REVISION_IDENTIFIER: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { rep.REVISION_IDENTIFIER }
  var SIZE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRESENTATION_SIZE?  { rep.SIZE }
  var SUCCESSOR: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOLLECTION_VERSION?  { rep.SUCCESSOR }
  var TESSELLATION_ACCURACY_PARAMETERS: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sTESSELLATION_ACCURACY_PARAMETER_ITEM>/*[1:nil]*/ )?  { rep.TESSELLATION_ACCURACY_PARAMETERS }
  var RELATED_IDENTIFICATION_ASSIGNMENT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eIDENTIFICATION_ASSIGNMENT?  { rep.RELATED_IDENTIFICATION_ASSIGNMENT }
  var MEMBER: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sPRODUCT_SELECT?  { rep.MEMBER }
  var REPRESENTED_JOINTS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eKINEMATIC_JOINT>/*[1:nil]*/ )?  { rep.REPRESENTED_JOINTS }
  var INDIVIDUAL_PRODUCT: SDAI.GENERIC_ENTITY?  { rep.INDIVIDUAL_PRODUCT }
  var RELATED_PRODUCT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT?  { rep.RELATED_PRODUCT }
  var RELATED: SDAI.GENERIC_ENTITY?  { rep.RELATED }
  var CONDITION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONCEPT_FEATURE_RELATIONSHIP_WITH_CONDITION?  { rep.CONDITION }
  var ITEM_CONCEPT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_CLASS?  { rep.ITEM_CONCEPT }
  var BOX_HEIGHT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE?  { rep.BOX_HEIGHT }
  var KIND: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDOCUMENT_TYPE?  { rep.KIND }
  var DETERMINATION_METHOD: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT?  { rep.DETERMINATION_METHOD }
  var RELATING_COLLECTION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOLLECTION?  { rep.RELATING_COLLECTION }
  var CONSEQUENCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT?  { rep.CONSEQUENCE }
  var ROOT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION?  { rep.ROOT }
  var RELATING_GROUP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGROUP?  { rep.RELATING_GROUP }
  var DRAWING_IDENTIFIER: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDRAWING_DEFINITION?  { rep.DRAWING_IDENTIFIER }
  var BASE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eASSEMBLY_COMPONENT_USAGE?  { rep.BASE }
  var PRODUCT_DEFINITIONS: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePROCESS_PRODUCT_ASSOCIATION>/*[1:nil]*/ )?  { rep.PRODUCT_DEFINITIONS }
  var RELATING_PRODUCT_DEFINITION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sPRODUCT_DEFINITION_OR_REFERENCE?  { rep.RELATING_PRODUCT_DEFINITION }
  var STROKES: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCURVE>/*[1:nil]*/ )?  { rep.STROKES }
  var REPRESENTATION_TYPES: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDOCUMENT_REPRESENTATION_TYPE>/*[0:nil]*/ )?  { rep.REPRESENTATION_TYPES }
  var RELATED_VERSION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOLLECTION_VERSION?  { rep.RELATED_VERSION }
  var ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { rep.ID }
  var APPLIED_GENERAL_ACCURACY: (SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_MEASUREMENT_ACCURACY>/*[1:nil]*/ )?  { rep.APPLIED_GENERAL_ACCURACY }
  var RELATING_MESSAGE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSTRUCTURED_MESSAGE?  { rep.RELATING_MESSAGE }
  var CONTEXT_OF_ITEMS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_CONTEXT?  { rep.CONTEXT_OF_ITEMS }
  var REP_1: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sREPRESENTATION_OR_REPRESENTATION_REFERENCE?  { rep.REP_1 }
  var REP_2: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sREPRESENTATION_OR_REPRESENTATION_REFERENCE?  { rep.REP_2 }
  var VERSION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { rep.VERSION }
  var RESPONSIBLE_ORGANIZATIONS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eORGANIZATION>/*[1:
    nil]*/ )?  { rep.RESPONSIBLE_ORGANIZATIONS }
  var OF_PRODUCT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT?  { rep.OF_PRODUCT }
  var REPRESENTATION_RELATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eKINEMATIC_PROPERTY_DEFINITION_REPRESENTATION?  { rep.REPRESENTATION_RELATION }
  var PRODUCT_DEFINITION_OCCURRENCE_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { rep.PRODUCT_DEFINITION_OCCURRENCE_ID }
  var ASSIGNED_EFFECTIVITY: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEFFECTIVITY?  { rep.ASSIGNED_EFFECTIVITY }
  var ASSIGNED_DOCUMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDOCUMENT?  { rep.ASSIGNED_DOCUMENT }
  var NEUTRAL_SKETCH_SEMANTICS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nCURVES_OR_AREA?  { rep.NEUTRAL_SKETCH_SEMANTICS }
  var REQUESTS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eVERSIONED_ACTION_REQUEST>/*[1:nil]*/ )?  { rep.REQUESTS }
  var MARKET_CONTEXT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_CONCEPT_CONTEXT?  { rep.MARKET_CONTEXT }
  var REPRESENTED_LINK: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eKINEMATIC_LINK?  { rep.REPRESENTED_LINK }
  var REPRESENTED_TOPOLOGY: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sKINEMATIC_TOPOLOGY_REPRESENTATION_SELECT?  { rep.REPRESENTED_TOPOLOGY }
  var UNCERTAINTY: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eUNCERTAINTY_MEASURE_WITH_UNIT>
    /*[1:nil]*/ )?  { rep.UNCERTAINTY }
  var ASSIGNED_GROUP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGROUP?  { rep.ASSIGNED_GROUP }
  var LOCATION: (SDAI.LIST_UNIQUE<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eNEXT_ASSEMBLY_USAGE_OCCURRENCE>/*[1:nil]*/ )?  { rep.LOCATION }
  var COMMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tTEXT?  { rep.COMMENT }
  var RELATING_PRODUCT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT?  { rep.RELATING_PRODUCT }
  var CONFIGURATION: SDAI.GENERIC_ENTITY?  { rep.CONFIGURATION }
  var RELATED_PRODUCT_DEFINITION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sPRODUCT_DEFINITION_OR_REFERENCE?  { rep.RELATED_PRODUCT_DEFINITION }
  var NAME: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { rep.NAME }
  var REPRESENTED_MECHANISM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMECHANISM_REPRESENTATION?  { rep.REPRESENTED_MECHANISM }
  var PREDECESSOR: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOLLECTION_VERSION?  { rep.PREDECESSOR }
  var RELATING_METHOD: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eACTION_METHOD?  { rep.RELATING_METHOD }
  var USAGE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_RELATIONSHIP?  { rep.USAGE }
  var PRODUCT_DESIGN: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT?  { rep.PRODUCT_DESIGN }
  var FORMATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_FORMATION?  { rep.FORMATION }
}

