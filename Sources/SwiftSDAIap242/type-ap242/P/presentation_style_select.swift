/* file: presentation_style_select.swift 	 generated: Sun Oct 31 15:32:10 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -TYPE DEFINITION in EXPRESS
/*
  TYPE presentation_style_select = SELECT
    ( curve_style (*ENTITY*),
     externally_defined_style (*ENTITY*),
     fill_area_style (*ENTITY*),
     null_style (*ENUM*),
     point_style (*ENTITY*),
     surface_style_usage (*ENTITY*),
     symbol_style (*ENTITY*),
     texture_style_tessellation_specification (*ENTITY*),
     text_style (*ENTITY*) );
  END_TYPE; -- presentation_style_select (line:4884 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES FOR SELECT
/*
  curve_style (*ENTITY*):
  ATTR:  curve_width: size_select
  ATTR:  users: SET [0 : ?] OF founded_item_select
  ATTR:  curve_colour: colour
  ATTR:  curve_font: curve_font_or_scaled_curve_font_select
  ATTR:  name: label *** Multiple Select Case Sources ***

  externally_defined_style (*ENTITY*):
  ATTR:  item_id: source_item
  ATTR:  users: SET [0 : ?] OF founded_item_select
  ATTR:  source: external_source

  fill_area_style (*ENTITY*):
  ATTR:  users: SET [0 : ?] OF founded_item_select
  ATTR:  fill_styles: SET [1 : ?] OF fill_style_select
  ATTR:  name: label *** Multiple Select Case Sources ***

  null_style (*ENUM*): null_style

  point_style (*ENTITY*):
  ATTR:  marker_colour: colour
  ATTR:  marker_size: size_select
  ATTR:  marker: marker_select
  ATTR:  users: SET [0 : ?] OF founded_item_select
  ATTR:  name: label *** Multiple Select Case Sources ***

  surface_style_usage (*ENTITY*):
  ATTR:  side: surface_side
  ATTR:  users: SET [0 : ?] OF founded_item_select
  ATTR:  style: surface_side_style_select

  symbol_style (*ENTITY*):
  ATTR:  style_of_symbol: symbol_style_select
  ATTR:  users: SET [0 : ?] OF founded_item_select
  ATTR:  name: label *** Multiple Select Case Sources ***

  texture_style_tessellation_specification (*ENTITY*):
  ATTR:  texture_coordinates: LIST [1 : ?] OF LIST [2 : 2] OF non_negative_real
  ATTR:  users: SET [0 : ?] OF founded_item_select
  ATTR:  texture_format: texture_file_type
  ATTR:  repeating_pattern: BOOLEAN
  ATTR:  texture_image: label

  text_style (*ENTITY*):
  ATTR:  character_appearance: character_style_select
  ATTR:  character_spacing: character_spacing_select
  ATTR:  users: SET [0 : ?] OF founded_item_select
  ATTR:  mirror_placement: axis2_placement
  ATTR:  characteristics: SET [1 : 4] OF box_characteristic_select
  ATTR:  name: label *** Multiple Select Case Sources ***

*/

/** SELECT type
- EXPRESS:
```express
  TYPE presentation_style_select = SELECT
    ( curve_style (*ENTITY*),
     externally_defined_style (*ENTITY*),
     fill_area_style (*ENTITY*),
     null_style (*ENUM*),
     point_style (*ENTITY*),
     surface_style_usage (*ENTITY*),
     symbol_style (*ENTITY*),
     texture_style_tessellation_specification (*ENTITY*),
     text_style (*ENTITY*) );
  END_TYPE; -- presentation_style_select (line:4884 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public enum sPRESENTATION_STYLE_SELECT : SDAIValue, AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sPRESENTATION_STYLE_SELECT__type {

    /// SELECT case ``eCURVE_STYLE`` (ENTITY) in ``sPRESENTATION_STYLE_SELECT``
    case _CURVE_STYLE(eCURVE_STYLE)	// (ENTITY)

    /// SELECT case ``eEXTERNALLY_DEFINED_STYLE`` (ENTITY) in ``sPRESENTATION_STYLE_SELECT``
    case _EXTERNALLY_DEFINED_STYLE(eEXTERNALLY_DEFINED_STYLE)	// (ENTITY)

    /// SELECT case ``eFILL_AREA_STYLE`` (ENTITY) in ``sPRESENTATION_STYLE_SELECT``
    case _FILL_AREA_STYLE(eFILL_AREA_STYLE)	// (ENTITY)

    /// SELECT case ``nNULL_STYLE`` (ENUM) in ``sPRESENTATION_STYLE_SELECT``
    case _NULL_STYLE(nNULL_STYLE)	// (ENUM)

    /// SELECT case ``ePOINT_STYLE`` (ENTITY) in ``sPRESENTATION_STYLE_SELECT``
    case _POINT_STYLE(ePOINT_STYLE)	// (ENTITY)

    /// SELECT case ``eSURFACE_STYLE_USAGE`` (ENTITY) in ``sPRESENTATION_STYLE_SELECT``
    case _SURFACE_STYLE_USAGE(eSURFACE_STYLE_USAGE)	// (ENTITY)

    /// SELECT case ``eSYMBOL_STYLE`` (ENTITY) in ``sPRESENTATION_STYLE_SELECT``
    case _SYMBOL_STYLE(eSYMBOL_STYLE)	// (ENTITY)

    /// SELECT case ``eTEXTURE_STYLE_TESSELLATION_SPECIFICATION`` (ENTITY) in ``sPRESENTATION_STYLE_SELECT``
    case _TEXTURE_STYLE_TESSELLATION_SPECIFICATION(eTEXTURE_STYLE_TESSELLATION_SPECIFICATION)	// (ENTITY)

    /// SELECT case ``eTEXT_STYLE`` (ENTITY) in ``sPRESENTATION_STYLE_SELECT``
    case _TEXT_STYLE(eTEXT_STYLE)	// (ENTITY)

    //MARK: - CONSTRUCTORS
    public init(fundamental: FundamentalType) { self = fundamental }

    public init?<T: SDAIUnderlyingType>(possiblyFrom underlyingType: T?){
      guard let underlyingType = underlyingType else { return nil }

      if let base = underlyingType as? nNULL_STYLE {
        self = ._NULL_STYLE(base)
      }
      else if let fundamental = underlyingType.asFundamentalType as? nNULL_STYLE.FundamentalType {
        self = ._NULL_STYLE( nNULL_STYLE(fundamental: fundamental) )
      }
      else { return nil }
    }

    public init?(possiblyFrom complex: SDAI.ComplexEntity?) {
      guard let complex = complex else { return nil }

      if let base = complex.entityReference(eCURVE_STYLE.self) {self = ._CURVE_STYLE(base) }
      else if let base = complex.entityReference(eEXTERNALLY_DEFINED_STYLE.self) {self = ._EXTERNALLY_DEFINED_STYLE(base) }
      else if let base = complex.entityReference(eFILL_AREA_STYLE.self) {self = ._FILL_AREA_STYLE(base) }
      else if let base = complex.entityReference(ePOINT_STYLE.self) {self = ._POINT_STYLE(base) }
      else if let base = complex.entityReference(eSURFACE_STYLE_USAGE.self) {self = ._SURFACE_STYLE_USAGE(base) }
      else if let base = complex.entityReference(eSYMBOL_STYLE.self) {self = ._SYMBOL_STYLE(base) }
      else if let base = complex.entityReference(eTEXTURE_STYLE_TESSELLATION_SPECIFICATION.self) {self = ._TEXTURE_STYLE_TESSELLATION_SPECIFICATION(base) }
      else if let base = complex.entityReference(eTEXT_STYLE.self) {self = ._TEXT_STYLE(base) }
      else { return nil }
    }

    public init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let select = generic else { return nil }

      if let fundamental = select as? Self {
        self.init(fundamental: fundamental)
      }
      else if let base = eCURVE_STYLE.convert(fromGeneric: select) {
        self = ._CURVE_STYLE(base)
      }
      else if let base = eEXTERNALLY_DEFINED_STYLE.convert(fromGeneric: select) {
        self = ._EXTERNALLY_DEFINED_STYLE(base)
      }
      else if let base = eFILL_AREA_STYLE.convert(fromGeneric: select) {
        self = ._FILL_AREA_STYLE(base)
      }
      else if let base = nNULL_STYLE.convert(fromGeneric: select) {
        self = ._NULL_STYLE(base)
      }
      else if let base = ePOINT_STYLE.convert(fromGeneric: select) {
        self = ._POINT_STYLE(base)
      }
      else if let base = eSURFACE_STYLE_USAGE.convert(fromGeneric: select) {
        self = ._SURFACE_STYLE_USAGE(base)
      }
      else if let base = eSYMBOL_STYLE.convert(fromGeneric: select) {
        self = ._SYMBOL_STYLE(base)
      }
      else if let base = eTEXTURE_STYLE_TESSELLATION_SPECIFICATION.convert(fromGeneric: select) {
        self = ._TEXTURE_STYLE_TESSELLATION_SPECIFICATION(base)
      }
      else if let base = eTEXT_STYLE.convert(fromGeneric: select) {
        self = ._TEXT_STYLE(base)
      }
      else { return nil }
    }

    // InitializableByP21Parameter
    public static var bareTypeName: String = "PRESENTATION_STYLE_SELECT"

    public init?(p21typedParam: P21Decode.ExchangeStructure.TypedParameter, from exchangeStructure: P21Decode.ExchangeStructure) {
      guard let keyword = p21typedParam.keyword.asStandardKeyword else { exchangeStructure.error = "unexpected p21parameter(\(p21typedParam)) while resolving \(Self.bareTypeName) select value"; return nil }

      switch(keyword) {
      case nNULL_STYLE.bareTypeName:
        guard let base = nNULL_STYLE(p21typedParam: p21typedParam, from: exchangeStructure) else { exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) select value"); return nil }
        self = ._NULL_STYLE(base)

      default:
        exchangeStructure.error = "unexpected p21parameter(\(p21typedParam)) while resolving \(Self.bareTypeName) select value"
        return nil
      }
    }

    public init?(p21untypedParam: P21Decode.ExchangeStructure.UntypedParameter, from exchangeStructure: P21Decode.ExchangeStructure) {
      switch p21untypedParam {
      case .rhsOccurenceName(let rhsname):
        switch rhsname {
        case .constantEntityName(let name):
          guard let entity = exchangeStructure.resolve(constantEntityName: name) else {exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) instance"); return nil }
          self.init(possiblyFrom: entity.complexEntity)

        case .entityInstanceName(let name):
          guard let complex = exchangeStructure.resolve(entityInstanceName: name) else {exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) instance"); return nil }
          self.init(possiblyFrom: complex)

        default:
          exchangeStructure.error = "unexpected p21parameter(\(p21untypedParam)) while resolving \(Self.bareTypeName) select instance"
          return nil
        }

      default:
        exchangeStructure.error = "unexpected p21parameter(\(p21untypedParam)) while resolving \(Self.bareTypeName) select instance"
        return nil
      }
    }

    public init?(p21omittedParamfrom exchangeStructure: P21Decode.ExchangeStructure) {
      return nil
    }


    //MARK: - NON-ENTITY UNDERLYING TYPE REFERENCES
    public var super_nNULL_STYLE: nNULL_STYLE? {
      switch self {
      case ._NULL_STYLE(let selectValue): return selectValue
      default: return nil
      }
    }

    //MARK: - ENTITY UNDERLYING TYPE REFERENCES
    public var super_eTEXTURE_STYLE_SPECIFICATION: eTEXTURE_STYLE_SPECIFICATION? {
      switch self {
      case ._TEXTURE_STYLE_TESSELLATION_SPECIFICATION(let entity): return entity
        .super_eTEXTURE_STYLE_SPECIFICATION
      default: return nil
      }
    }

    public var super_eFILL_AREA_STYLE: eFILL_AREA_STYLE? {
      switch self {
      case ._FILL_AREA_STYLE(let entity): return entity
      default: return nil
      }
    }

    public var super_eTEXT_STYLE: eTEXT_STYLE? {
      switch self {
      case ._TEXT_STYLE(let entity): return entity
      default: return nil
      }
    }

    public var super_eFOUNDED_ITEM: eFOUNDED_ITEM? {
      switch self {
      case ._CURVE_STYLE(let entity): return entity.super_eFOUNDED_ITEM
      case ._EXTERNALLY_DEFINED_STYLE(let entity): return entity.super_eFOUNDED_ITEM
      case ._FILL_AREA_STYLE(let entity): return entity.super_eFOUNDED_ITEM
      case ._POINT_STYLE(let entity): return entity.super_eFOUNDED_ITEM
      case ._SURFACE_STYLE_USAGE(let entity): return entity.super_eFOUNDED_ITEM
      case ._SYMBOL_STYLE(let entity): return entity.super_eFOUNDED_ITEM
      case ._TEXTURE_STYLE_TESSELLATION_SPECIFICATION(let entity): return entity.super_eFOUNDED_ITEM
      case ._TEXT_STYLE(let entity): return entity.super_eFOUNDED_ITEM
      default: return nil
      }
    }

    public var super_eCURVE_STYLE: eCURVE_STYLE? {
      switch self {
      case ._CURVE_STYLE(let entity): return entity
      default: return nil
      }
    }

    public var super_eEXTERNALLY_DEFINED_ITEM: eEXTERNALLY_DEFINED_ITEM? {
      switch self {
      case ._EXTERNALLY_DEFINED_STYLE(let entity): return entity.super_eEXTERNALLY_DEFINED_ITEM
      default: return nil
      }
    }

    public var super_eEXTERNALLY_DEFINED_STYLE: eEXTERNALLY_DEFINED_STYLE? {
      switch self {
      case ._EXTERNALLY_DEFINED_STYLE(let entity): return entity
      default: return nil
      }
    }

    public var super_eSYMBOL_STYLE: eSYMBOL_STYLE? {
      switch self {
      case ._SYMBOL_STYLE(let entity): return entity
      default: return nil
      }
    }

    public var super_eSURFACE_STYLE_USAGE: eSURFACE_STYLE_USAGE? {
      switch self {
      case ._SURFACE_STYLE_USAGE(let entity): return entity
      default: return nil
      }
    }

    public var super_eTEXTURE_STYLE_TESSELLATION_SPECIFICATION: eTEXTURE_STYLE_TESSELLATION_SPECIFICATION? {
      switch self {
      case ._TEXTURE_STYLE_TESSELLATION_SPECIFICATION(let entity): return entity
      default: return nil
      }
    }

    public var super_ePOINT_STYLE: ePOINT_STYLE? {
      switch self {
      case ._POINT_STYLE(let entity): return entity
      default: return nil
      }
    }


    //MARK: - ENTITY ATTRIBUTE REFERENCES
    /// attribute of SELECT type ``sPRESENTATION_STYLE_SELECT``
    /// - origin: ENTITY( ``eTEXTURE_STYLE_TESSELLATION_SPECIFICATION`` )
    public var TEXTURE_COORDINATES: (SDAI.LIST<SDAI.LIST<tNON_NEGATIVE_REAL>/*[2:2]*/ >/*[1:nil]*/ )?  {
      switch self {
      case ._TEXTURE_STYLE_TESSELLATION_SPECIFICATION(let entity): return entity.TEXTURE_COORDINATES
      default: return nil
      }
    }

    /// attribute of SELECT type ``sPRESENTATION_STYLE_SELECT``
    /// - origin: ENTITY( ``ePOINT_STYLE`` )
    public var MARKER_COLOUR: eCOLOUR?  {
      switch self {
      case ._POINT_STYLE(let entity): return entity.MARKER_COLOUR
      default: return nil
      }
    }

    /// attribute of SELECT type ``sPRESENTATION_STYLE_SELECT``
    /// - origin: ENTITY( ``eEXTERNALLY_DEFINED_STYLE`` )
    public var ITEM_ID: sSOURCE_ITEM?  {
      switch self {
      case ._EXTERNALLY_DEFINED_STYLE(let entity): return entity.ITEM_ID
      default: return nil
      }
    }

    /// attribute of SELECT type ``sPRESENTATION_STYLE_SELECT``
    /// - origin: ENTITY( ``eSYMBOL_STYLE`` )
    public var STYLE_OF_SYMBOL: sSYMBOL_STYLE_SELECT?  {
      switch self {
      case ._SYMBOL_STYLE(let entity): return entity.STYLE_OF_SYMBOL
      default: return nil
      }
    }

    /// attribute of SELECT type ``sPRESENTATION_STYLE_SELECT``
    /// - origin: ENTITY( ``eSURFACE_STYLE_USAGE`` )
    public var SIDE: nSURFACE_SIDE?  {
      switch self {
      case ._SURFACE_STYLE_USAGE(let entity): return entity.SIDE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sPRESENTATION_STYLE_SELECT``
    /// - origin: ENTITY( ``eCURVE_STYLE`` )
    public var CURVE_WIDTH: sSIZE_SELECT?  {
      switch self {
      case ._CURVE_STYLE(let entity): return entity.CURVE_WIDTH
      default: return nil
      }
    }

    /// attribute of SELECT type ``sPRESENTATION_STYLE_SELECT``
    /// - origin: ENTITY( ``eTEXT_STYLE`` )
    public var CHARACTER_APPEARANCE: sCHARACTER_STYLE_SELECT?  {
      switch self {
      case ._TEXT_STYLE(let entity): return entity.CHARACTER_APPEARANCE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sPRESENTATION_STYLE_SELECT``
    /// - origin: ENTITY( ``ePOINT_STYLE`` )
    public var MARKER_SIZE: sSIZE_SELECT?  {
      switch self {
      case ._POINT_STYLE(let entity): return entity.MARKER_SIZE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sPRESENTATION_STYLE_SELECT``
    /// - origin: ENTITY( ``ePOINT_STYLE`` )
    public var MARKER: sMARKER_SELECT?  {
      switch self {
      case ._POINT_STYLE(let entity): return entity.MARKER
      default: return nil
      }
    }

    /// attribute of SELECT type ``sPRESENTATION_STYLE_SELECT``
    /// - origin: ENTITY( ``eTEXT_STYLE`` )
    public var CHARACTER_SPACING: sCHARACTER_SPACING_SELECT?  {
      switch self {
      case ._TEXT_STYLE(let entity): return entity.CHARACTER_SPACING
      default: return nil
      }
    }

    /// attribute of SELECT type ``sPRESENTATION_STYLE_SELECT``
    /// - origin: ENTITY( ``eCURVE_STYLE`` )
    /// - origin: ENTITY( ``eEXTERNALLY_DEFINED_STYLE`` )
    /// - origin: ENTITY( ``eFILL_AREA_STYLE`` )
    /// - origin: ENTITY( ``ePOINT_STYLE`` )
    /// - origin: ENTITY( ``eSURFACE_STYLE_USAGE`` )
    /// - origin: ENTITY( ``eSYMBOL_STYLE`` )
    /// - origin: ENTITY( ``eTEXTURE_STYLE_TESSELLATION_SPECIFICATION`` )
    /// - origin: ENTITY( ``eTEXT_STYLE`` )
    public var USERS: (SDAI.SET<sFOUNDED_ITEM_SELECT>/*[0:nil]*/ )?  {
      switch self {
      case ._CURVE_STYLE(let entity): return entity.USERS
      case ._EXTERNALLY_DEFINED_STYLE(let entity): return entity.USERS
      case ._FILL_AREA_STYLE(let entity): return entity.USERS
      case ._POINT_STYLE(let entity): return entity.USERS
      case ._SURFACE_STYLE_USAGE(let entity): return entity.USERS
      case ._SYMBOL_STYLE(let entity): return entity.USERS
      case ._TEXTURE_STYLE_TESSELLATION_SPECIFICATION(let entity): return entity.USERS
      case ._TEXT_STYLE(let entity): return entity.USERS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sPRESENTATION_STYLE_SELECT``
    /// - origin: ENTITY( ``eTEXTURE_STYLE_TESSELLATION_SPECIFICATION`` )
    public var TEXTURE_FORMAT: nTEXTURE_FILE_TYPE?  {
      switch self {
      case ._TEXTURE_STYLE_TESSELLATION_SPECIFICATION(let entity): return entity.TEXTURE_FORMAT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sPRESENTATION_STYLE_SELECT``
    /// - origin: ENTITY( ``eSURFACE_STYLE_USAGE`` )
    public var STYLE: sSURFACE_SIDE_STYLE_SELECT?  {
      switch self {
      case ._SURFACE_STYLE_USAGE(let entity): return entity.STYLE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sPRESENTATION_STYLE_SELECT``
    /// - origin: ENTITY( ``eCURVE_STYLE`` )
    public var CURVE_COLOUR: eCOLOUR?  {
      switch self {
      case ._CURVE_STYLE(let entity): return entity.CURVE_COLOUR
      default: return nil
      }
    }

    /// attribute of SELECT type ``sPRESENTATION_STYLE_SELECT``
    /// - origin: ENTITY( ``eTEXT_STYLE`` )
    public var MIRROR_PLACEMENT: sAXIS2_PLACEMENT?  {
      switch self {
      case ._TEXT_STYLE(let entity): return entity.MIRROR_PLACEMENT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sPRESENTATION_STYLE_SELECT``
    /// - origin: ENTITY( ``eCURVE_STYLE`` )
    public var CURVE_FONT: sCURVE_FONT_OR_SCALED_CURVE_FONT_SELECT?  {
      switch self {
      case ._CURVE_STYLE(let entity): return entity.CURVE_FONT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sPRESENTATION_STYLE_SELECT``
    /// - origin: ENTITY( ``eTEXTURE_STYLE_TESSELLATION_SPECIFICATION`` )
    public var REPEATING_PATTERN: SDAI.BOOLEAN?  {
      switch self {
      case ._TEXTURE_STYLE_TESSELLATION_SPECIFICATION(let entity): return entity.REPEATING_PATTERN
      default: return nil
      }
    }

    /// attribute of SELECT type ``sPRESENTATION_STYLE_SELECT``
    /// - origin: ENTITY( ``eFILL_AREA_STYLE`` )
    public var FILL_STYLES: (SDAI.SET<sFILL_STYLE_SELECT>/*[1:nil]*/ )?  {
      switch self {
      case ._FILL_AREA_STYLE(let entity): return entity.FILL_STYLES
      default: return nil
      }
    }

    /// attribute of SELECT type ``sPRESENTATION_STYLE_SELECT``
    /// - origin: ENTITY( ``eTEXTURE_STYLE_TESSELLATION_SPECIFICATION`` )
    public var TEXTURE_IMAGE: tLABEL?  {
      switch self {
      case ._TEXTURE_STYLE_TESSELLATION_SPECIFICATION(let entity): return entity.TEXTURE_IMAGE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sPRESENTATION_STYLE_SELECT``
    /// - origin: ENTITY( ``eEXTERNALLY_DEFINED_STYLE`` )
    public var SOURCE: eEXTERNAL_SOURCE?  {
      switch self {
      case ._EXTERNALLY_DEFINED_STYLE(let entity): return entity.SOURCE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sPRESENTATION_STYLE_SELECT``
    /// - origin: ENTITY( ``eTEXT_STYLE`` )
    public var CHARACTERISTICS: (SDAI.SET<sBOX_CHARACTERISTIC_SELECT>/*[1:4]*/ )?  {
      switch self {
      case ._TEXT_STYLE(let entity): return entity.CHARACTERISTICS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sPRESENTATION_STYLE_SELECT``
    /// - origin: ENTITY( ``eCURVE_STYLE`` )
    /// - origin: ENTITY( ``eFILL_AREA_STYLE`` )
    /// - origin: ENTITY( ``ePOINT_STYLE`` )
    /// - origin: ENTITY( ``eSYMBOL_STYLE`` )
    /// - origin: ENTITY( ``eTEXT_STYLE`` )
    public var NAME: tLABEL?  {
      switch self {
      case ._CURVE_STYLE(let entity): return entity.NAME
      case ._FILL_AREA_STYLE(let entity): return entity.NAME
      case ._POINT_STYLE(let entity): return entity.NAME
      case ._SYMBOL_STYLE(let entity): return entity.NAME
      case ._TEXT_STYLE(let entity): return entity.NAME
      default: return nil
      }
    }


    //MARK: - SDAIValue
    public func isValueEqual<T: SDAIValue>(to rhs: T) -> Bool {
      switch self {
      case ._CURVE_STYLE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._EXTERNALLY_DEFINED_STYLE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._FILL_AREA_STYLE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._NULL_STYLE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._POINT_STYLE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._SURFACE_STYLE_USAGE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._SYMBOL_STYLE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._TEXTURE_STYLE_TESSELLATION_SPECIFICATION(let selection): return selection.value.isValueEqual(to: rhs)
      case ._TEXT_STYLE(let selection): return selection.value.isValueEqual(to: rhs)
      }
    }

    public func isValueEqualOptionally<T: SDAIValue>(to rhs: T?) -> Bool? {
      switch self {
      case ._CURVE_STYLE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._EXTERNALLY_DEFINED_STYLE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._FILL_AREA_STYLE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._NULL_STYLE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._POINT_STYLE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._SURFACE_STYLE_USAGE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._SYMBOL_STYLE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._TEXTURE_STYLE_TESSELLATION_SPECIFICATION(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._TEXT_STYLE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      }
    }

    public func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      switch self {
      case ._CURVE_STYLE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._EXTERNALLY_DEFINED_STYLE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._FILL_AREA_STYLE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._NULL_STYLE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._POINT_STYLE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._SURFACE_STYLE_USAGE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._SYMBOL_STYLE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._TEXTURE_STYLE_TESSELLATION_SPECIFICATION(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._TEXT_STYLE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      }
    }

    public func isValueEqual<T: SDAIValue>(to rhs: T, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      switch self {
      case ._CURVE_STYLE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._EXTERNALLY_DEFINED_STYLE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._FILL_AREA_STYLE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._NULL_STYLE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._POINT_STYLE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._SURFACE_STYLE_USAGE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._SYMBOL_STYLE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._TEXTURE_STYLE_TESSELLATION_SPECIFICATION(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._TEXT_STYLE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      }
    }

    public func isValueEqualOptionally<T: SDAIValue>(to rhs: T?, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      switch self {
      case ._CURVE_STYLE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._EXTERNALLY_DEFINED_STYLE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._FILL_AREA_STYLE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._NULL_STYLE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._POINT_STYLE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._SURFACE_STYLE_USAGE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._SYMBOL_STYLE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._TEXTURE_STYLE_TESSELLATION_SPECIFICATION(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._TEXT_STYLE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      }
    }


    //MARK: SDAIGenericTypeBase
    public func copy() -> Self {
      switch self {
      case ._CURVE_STYLE(let selection): return ._CURVE_STYLE(selection.copy())
      case ._EXTERNALLY_DEFINED_STYLE(let selection): return ._EXTERNALLY_DEFINED_STYLE(selection.copy())
      case ._FILL_AREA_STYLE(let selection): return ._FILL_AREA_STYLE(selection.copy())
      case ._NULL_STYLE(let selection): return ._NULL_STYLE(selection.copy())
      case ._POINT_STYLE(let selection): return ._POINT_STYLE(selection.copy())
      case ._SURFACE_STYLE_USAGE(let selection): return ._SURFACE_STYLE_USAGE(selection.copy())
      case ._SYMBOL_STYLE(let selection): return ._SYMBOL_STYLE(selection.copy())
      case ._TEXTURE_STYLE_TESSELLATION_SPECIFICATION(let selection): return ._TEXTURE_STYLE_TESSELLATION_SPECIFICATION(selection.copy())
      case ._TEXT_STYLE(let selection): return ._TEXT_STYLE(selection.copy())
      }
    }

    //MARK: SDAIGenericType
    public var typeMembers: Set<SDAI.STRING> {
      var members: Set<SDAI.STRING> = [SDAI.STRING(Self.typeName)]
      switch self {
      case ._CURVE_STYLE(let selection): members.formUnion(selection.typeMembers)
      case ._EXTERNALLY_DEFINED_STYLE(let selection): members.formUnion(selection.typeMembers)
      case ._FILL_AREA_STYLE(let selection): members.formUnion(selection.typeMembers)
      case ._NULL_STYLE(let selection): members.formUnion(selection.typeMembers)
      case ._POINT_STYLE(let selection): members.formUnion(selection.typeMembers)
      case ._SURFACE_STYLE_USAGE(let selection): members.formUnion(selection.typeMembers)
      case ._SYMBOL_STYLE(let selection): members.formUnion(selection.typeMembers)
      case ._TEXTURE_STYLE_TESSELLATION_SPECIFICATION(let selection): members.formUnion(selection.typeMembers)
      case ._TEXT_STYLE(let selection): members.formUnion(selection.typeMembers)
      }
      return members
    }

    public var entityReference: SDAI.EntityReference? {
      switch self {
      case ._CURVE_STYLE(let selection): return selection.entityReference
      case ._EXTERNALLY_DEFINED_STYLE(let selection): return selection.entityReference
      case ._FILL_AREA_STYLE(let selection): return selection.entityReference
      case ._NULL_STYLE(let selection): return selection.entityReference
      case ._POINT_STYLE(let selection): return selection.entityReference
      case ._SURFACE_STYLE_USAGE(let selection): return selection.entityReference
      case ._SYMBOL_STYLE(let selection): return selection.entityReference
      case ._TEXTURE_STYLE_TESSELLATION_SPECIFICATION(let selection): return selection.entityReference
      case ._TEXT_STYLE(let selection): return selection.entityReference
      }
    }
    public var stringValue: SDAI.STRING? {
      switch self {
      case ._CURVE_STYLE(let selection): return selection.stringValue
      case ._EXTERNALLY_DEFINED_STYLE(let selection): return selection.stringValue
      case ._FILL_AREA_STYLE(let selection): return selection.stringValue
      case ._NULL_STYLE(let selection): return selection.stringValue
      case ._POINT_STYLE(let selection): return selection.stringValue
      case ._SURFACE_STYLE_USAGE(let selection): return selection.stringValue
      case ._SYMBOL_STYLE(let selection): return selection.stringValue
      case ._TEXTURE_STYLE_TESSELLATION_SPECIFICATION(let selection): return selection.stringValue
      case ._TEXT_STYLE(let selection): return selection.stringValue
      }
    }
    public var binaryValue: SDAI.BINARY? {
      switch self {
      case ._CURVE_STYLE(let selection): return selection.binaryValue
      case ._EXTERNALLY_DEFINED_STYLE(let selection): return selection.binaryValue
      case ._FILL_AREA_STYLE(let selection): return selection.binaryValue
      case ._NULL_STYLE(let selection): return selection.binaryValue
      case ._POINT_STYLE(let selection): return selection.binaryValue
      case ._SURFACE_STYLE_USAGE(let selection): return selection.binaryValue
      case ._SYMBOL_STYLE(let selection): return selection.binaryValue
      case ._TEXTURE_STYLE_TESSELLATION_SPECIFICATION(let selection): return selection.binaryValue
      case ._TEXT_STYLE(let selection): return selection.binaryValue
      }
    }
    public var logicalValue: SDAI.LOGICAL? {
      switch self {
      case ._CURVE_STYLE(let selection): return selection.logicalValue
      case ._EXTERNALLY_DEFINED_STYLE(let selection): return selection.logicalValue
      case ._FILL_AREA_STYLE(let selection): return selection.logicalValue
      case ._NULL_STYLE(let selection): return selection.logicalValue
      case ._POINT_STYLE(let selection): return selection.logicalValue
      case ._SURFACE_STYLE_USAGE(let selection): return selection.logicalValue
      case ._SYMBOL_STYLE(let selection): return selection.logicalValue
      case ._TEXTURE_STYLE_TESSELLATION_SPECIFICATION(let selection): return selection.logicalValue
      case ._TEXT_STYLE(let selection): return selection.logicalValue
      }
    }
    public var booleanValue: SDAI.BOOLEAN? {
      switch self {
      case ._CURVE_STYLE(let selection): return selection.booleanValue
      case ._EXTERNALLY_DEFINED_STYLE(let selection): return selection.booleanValue
      case ._FILL_AREA_STYLE(let selection): return selection.booleanValue
      case ._NULL_STYLE(let selection): return selection.booleanValue
      case ._POINT_STYLE(let selection): return selection.booleanValue
      case ._SURFACE_STYLE_USAGE(let selection): return selection.booleanValue
      case ._SYMBOL_STYLE(let selection): return selection.booleanValue
      case ._TEXTURE_STYLE_TESSELLATION_SPECIFICATION(let selection): return selection.booleanValue
      case ._TEXT_STYLE(let selection): return selection.booleanValue
      }
    }
    public var numberValue: SDAI.NUMBER? {
      switch self {
      case ._CURVE_STYLE(let selection): return selection.numberValue
      case ._EXTERNALLY_DEFINED_STYLE(let selection): return selection.numberValue
      case ._FILL_AREA_STYLE(let selection): return selection.numberValue
      case ._NULL_STYLE(let selection): return selection.numberValue
      case ._POINT_STYLE(let selection): return selection.numberValue
      case ._SURFACE_STYLE_USAGE(let selection): return selection.numberValue
      case ._SYMBOL_STYLE(let selection): return selection.numberValue
      case ._TEXTURE_STYLE_TESSELLATION_SPECIFICATION(let selection): return selection.numberValue
      case ._TEXT_STYLE(let selection): return selection.numberValue
      }
    }
    public var realValue: SDAI.REAL? {
      switch self {
      case ._CURVE_STYLE(let selection): return selection.realValue
      case ._EXTERNALLY_DEFINED_STYLE(let selection): return selection.realValue
      case ._FILL_AREA_STYLE(let selection): return selection.realValue
      case ._NULL_STYLE(let selection): return selection.realValue
      case ._POINT_STYLE(let selection): return selection.realValue
      case ._SURFACE_STYLE_USAGE(let selection): return selection.realValue
      case ._SYMBOL_STYLE(let selection): return selection.realValue
      case ._TEXTURE_STYLE_TESSELLATION_SPECIFICATION(let selection): return selection.realValue
      case ._TEXT_STYLE(let selection): return selection.realValue
      }
    }
    public var integerValue: SDAI.INTEGER? {
      switch self {
      case ._CURVE_STYLE(let selection): return selection.integerValue
      case ._EXTERNALLY_DEFINED_STYLE(let selection): return selection.integerValue
      case ._FILL_AREA_STYLE(let selection): return selection.integerValue
      case ._NULL_STYLE(let selection): return selection.integerValue
      case ._POINT_STYLE(let selection): return selection.integerValue
      case ._SURFACE_STYLE_USAGE(let selection): return selection.integerValue
      case ._SYMBOL_STYLE(let selection): return selection.integerValue
      case ._TEXTURE_STYLE_TESSELLATION_SPECIFICATION(let selection): return selection.integerValue
      case ._TEXT_STYLE(let selection): return selection.integerValue
      }
    }
    public var genericEnumValue: SDAI.GenericEnumValue? {
      switch self {
      case ._CURVE_STYLE(let selection): return selection.genericEnumValue
      case ._EXTERNALLY_DEFINED_STYLE(let selection): return selection.genericEnumValue
      case ._FILL_AREA_STYLE(let selection): return selection.genericEnumValue
      case ._NULL_STYLE(let selection): return selection.genericEnumValue
      case ._POINT_STYLE(let selection): return selection.genericEnumValue
      case ._SURFACE_STYLE_USAGE(let selection): return selection.genericEnumValue
      case ._SYMBOL_STYLE(let selection): return selection.genericEnumValue
      case ._TEXTURE_STYLE_TESSELLATION_SPECIFICATION(let selection): return selection.genericEnumValue
      case ._TEXT_STYLE(let selection): return selection.genericEnumValue
      }
    }
    public func arrayOptionalValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.ARRAY_OPTIONAL<ELEM>? {
      switch self {
      case ._CURVE_STYLE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._EXTERNALLY_DEFINED_STYLE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._FILL_AREA_STYLE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._NULL_STYLE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._POINT_STYLE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._SURFACE_STYLE_USAGE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._SYMBOL_STYLE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._TEXTURE_STYLE_TESSELLATION_SPECIFICATION(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._TEXT_STYLE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      }
    }
    public func arrayValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.ARRAY<ELEM>? {
      switch self {
      case ._CURVE_STYLE(let selection): return selection.arrayValue(elementType:elementType)
      case ._EXTERNALLY_DEFINED_STYLE(let selection): return selection.arrayValue(elementType:elementType)
      case ._FILL_AREA_STYLE(let selection): return selection.arrayValue(elementType:elementType)
      case ._NULL_STYLE(let selection): return selection.arrayValue(elementType:elementType)
      case ._POINT_STYLE(let selection): return selection.arrayValue(elementType:elementType)
      case ._SURFACE_STYLE_USAGE(let selection): return selection.arrayValue(elementType:elementType)
      case ._SYMBOL_STYLE(let selection): return selection.arrayValue(elementType:elementType)
      case ._TEXTURE_STYLE_TESSELLATION_SPECIFICATION(let selection): return selection.arrayValue(elementType:elementType)
      case ._TEXT_STYLE(let selection): return selection.arrayValue(elementType:elementType)
      }
    }
    public func listValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.LIST<ELEM>? {
      switch self {
      case ._CURVE_STYLE(let selection): return selection.listValue(elementType:elementType)
      case ._EXTERNALLY_DEFINED_STYLE(let selection): return selection.listValue(elementType:elementType)
      case ._FILL_AREA_STYLE(let selection): return selection.listValue(elementType:elementType)
      case ._NULL_STYLE(let selection): return selection.listValue(elementType:elementType)
      case ._POINT_STYLE(let selection): return selection.listValue(elementType:elementType)
      case ._SURFACE_STYLE_USAGE(let selection): return selection.listValue(elementType:elementType)
      case ._SYMBOL_STYLE(let selection): return selection.listValue(elementType:elementType)
      case ._TEXTURE_STYLE_TESSELLATION_SPECIFICATION(let selection): return selection.listValue(elementType:elementType)
      case ._TEXT_STYLE(let selection): return selection.listValue(elementType:elementType)
      }
    }
    public func bagValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.BAG<ELEM>? {
      switch self {
      case ._CURVE_STYLE(let selection): return selection.bagValue(elementType:elementType)
      case ._EXTERNALLY_DEFINED_STYLE(let selection): return selection.bagValue(elementType:elementType)
      case ._FILL_AREA_STYLE(let selection): return selection.bagValue(elementType:elementType)
      case ._NULL_STYLE(let selection): return selection.bagValue(elementType:elementType)
      case ._POINT_STYLE(let selection): return selection.bagValue(elementType:elementType)
      case ._SURFACE_STYLE_USAGE(let selection): return selection.bagValue(elementType:elementType)
      case ._SYMBOL_STYLE(let selection): return selection.bagValue(elementType:elementType)
      case ._TEXTURE_STYLE_TESSELLATION_SPECIFICATION(let selection): return selection.bagValue(elementType:elementType)
      case ._TEXT_STYLE(let selection): return selection.bagValue(elementType:elementType)
      }
    }
    public func setValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.SET<ELEM>? {
      switch self {
      case ._CURVE_STYLE(let selection): return selection.setValue(elementType:elementType)
      case ._EXTERNALLY_DEFINED_STYLE(let selection): return selection.setValue(elementType:elementType)
      case ._FILL_AREA_STYLE(let selection): return selection.setValue(elementType:elementType)
      case ._NULL_STYLE(let selection): return selection.setValue(elementType:elementType)
      case ._POINT_STYLE(let selection): return selection.setValue(elementType:elementType)
      case ._SURFACE_STYLE_USAGE(let selection): return selection.setValue(elementType:elementType)
      case ._SYMBOL_STYLE(let selection): return selection.setValue(elementType:elementType)
      case ._TEXTURE_STYLE_TESSELLATION_SPECIFICATION(let selection): return selection.setValue(elementType:elementType)
      case ._TEXT_STYLE(let selection): return selection.setValue(elementType:elementType)
      }
    }
    public func enumValue<ENUM:SDAIEnumerationType>(enumType:ENUM.Type) -> ENUM? {
      switch self {
      case ._CURVE_STYLE(let selection): return selection.enumValue(enumType:enumType)
      case ._EXTERNALLY_DEFINED_STYLE(let selection): return selection.enumValue(enumType:enumType)
      case ._FILL_AREA_STYLE(let selection): return selection.enumValue(enumType:enumType)
      case ._NULL_STYLE(let selection): return selection.enumValue(enumType:enumType)
      case ._POINT_STYLE(let selection): return selection.enumValue(enumType:enumType)
      case ._SURFACE_STYLE_USAGE(let selection): return selection.enumValue(enumType:enumType)
      case ._SYMBOL_STYLE(let selection): return selection.enumValue(enumType:enumType)
      case ._TEXTURE_STYLE_TESSELLATION_SPECIFICATION(let selection): return selection.enumValue(enumType:enumType)
      case ._TEXT_STYLE(let selection): return selection.enumValue(enumType:enumType)
      }
    }

    //MARK: SDAIUnderlyingType
    public typealias FundamentalType = Self
    public static var typeName: String = 
      "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PRESENTATION_STYLE_SELECT"
    public var asFundamentalType: FundamentalType { return self }

    //MARK: SDAIObservableAggregateElement
    public var entityReferences: AnySequence<SDAI.EntityReference> {
      switch self {
      case ._CURVE_STYLE(let entity): return entity.entityReferences
      case ._EXTERNALLY_DEFINED_STYLE(let entity): return entity.entityReferences
      case ._FILL_AREA_STYLE(let entity): return entity.entityReferences
      case ._NULL_STYLE: return AnySequence<SDAI.EntityReference>(EmptyCollection<SDAI.EntityReference>())
      case ._POINT_STYLE(let entity): return entity.entityReferences
      case ._SURFACE_STYLE_USAGE(let entity): return entity.entityReferences
      case ._SYMBOL_STYLE(let entity): return entity.entityReferences
      case ._TEXTURE_STYLE_TESSELLATION_SPECIFICATION(let entity): return entity.entityReferences
      case ._TEXT_STYLE(let entity): return entity.entityReferences
      }
    }

    public mutating func configure(with observer: SDAI.EntityReferenceObserver) {
      switch self {
      case ._CURVE_STYLE(let entity): 
        entity.configure(with: observer)
        self = ._CURVE_STYLE(entity)
      case ._EXTERNALLY_DEFINED_STYLE(let entity): 
        entity.configure(with: observer)
        self = ._EXTERNALLY_DEFINED_STYLE(entity)
      case ._FILL_AREA_STYLE(let entity): 
        entity.configure(with: observer)
        self = ._FILL_AREA_STYLE(entity)
      case ._NULL_STYLE: break
      case ._POINT_STYLE(let entity): 
        entity.configure(with: observer)
        self = ._POINT_STYLE(entity)
      case ._SURFACE_STYLE_USAGE(let entity): 
        entity.configure(with: observer)
        self = ._SURFACE_STYLE_USAGE(entity)
      case ._SYMBOL_STYLE(let entity): 
        entity.configure(with: observer)
        self = ._SYMBOL_STYLE(entity)
      case ._TEXTURE_STYLE_TESSELLATION_SPECIFICATION(let entity): 
        entity.configure(with: observer)
        self = ._TEXTURE_STYLE_TESSELLATION_SPECIFICATION(entity)
      case ._TEXT_STYLE(let entity): 
        entity.configure(with: observer)
        self = ._TEXT_STYLE(entity)
      }
    }

    public mutating func teardownObserver() {
      switch self {
      case ._CURVE_STYLE(let entity): 
        entity.teardownObserver()
        self = ._CURVE_STYLE(entity)
      case ._EXTERNALLY_DEFINED_STYLE(let entity): 
        entity.teardownObserver()
        self = ._EXTERNALLY_DEFINED_STYLE(entity)
      case ._FILL_AREA_STYLE(let entity): 
        entity.teardownObserver()
        self = ._FILL_AREA_STYLE(entity)
      case ._NULL_STYLE: break
      case ._POINT_STYLE(let entity): 
        entity.teardownObserver()
        self = ._POINT_STYLE(entity)
      case ._SURFACE_STYLE_USAGE(let entity): 
        entity.teardownObserver()
        self = ._SURFACE_STYLE_USAGE(entity)
      case ._SYMBOL_STYLE(let entity): 
        entity.teardownObserver()
        self = ._SYMBOL_STYLE(entity)
      case ._TEXTURE_STYLE_TESSELLATION_SPECIFICATION(let entity): 
        entity.teardownObserver()
        self = ._TEXTURE_STYLE_TESSELLATION_SPECIFICATION(entity)
      case ._TEXT_STYLE(let entity): 
        entity.teardownObserver()
        self = ._TEXT_STYLE(entity)
      }
    }

    //MARK: SDAIAggregationBehavior
    public var aggregationHiBound: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationHiIndex: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationLoBound: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationLoIndex: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationSize: Int? {
      switch self {
      default: return nil
      }
    }

    //MARK: WHERE RULE VALIDATION (SELECT TYPE)
    public static func validateWhereRules(instance:Self?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      var result: [SDAI.WhereLabel:SDAI.LOGICAL] = [:]
      switch instance {
      case ._CURVE_STYLE(let selectValue): result = eCURVE_STYLE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\CURVE_STYLE")
      case ._EXTERNALLY_DEFINED_STYLE(let selectValue): 
        result = eEXTERNALLY_DEFINED_STYLE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\EXTERNALLY_DEFINED_STYLE")
      case ._FILL_AREA_STYLE(let selectValue): 
        result = eFILL_AREA_STYLE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\FILL_AREA_STYLE")
      case ._NULL_STYLE(let selectValue): result = nNULL_STYLE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\NULL_STYLE")
      case ._POINT_STYLE(let selectValue): result = ePOINT_STYLE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\POINT_STYLE")
      case ._SURFACE_STYLE_USAGE(let selectValue): 
        result = eSURFACE_STYLE_USAGE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\SURFACE_STYLE_USAGE")
      case ._SYMBOL_STYLE(let selectValue): result = eSYMBOL_STYLE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\SYMBOL_STYLE")
      case ._TEXTURE_STYLE_TESSELLATION_SPECIFICATION(let selectValue): 
        result = eTEXTURE_STYLE_TESSELLATION_SPECIFICATION.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\TEXTURE_STYLE_TESSELLATION_SPECIFICATION")
      case ._TEXT_STYLE(let selectValue): result = eTEXT_STYLE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\TEXT_STYLE")
      case nil: break
      }

      return result
    }

  }

}


//MARK: - SELECT TYPE HIERARCHY
public protocol AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sPRESENTATION_STYLE_SELECT__type: 
  SDAISelectType {

  //MARK: GROUP REFERENCES
  var super_nNULL_STYLE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nNULL_STYLE? { get }
  var super_eTEXTURE_STYLE_SPECIFICATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eTEXTURE_STYLE_SPECIFICATION? { get }
  var super_eFILL_AREA_STYLE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFILL_AREA_STYLE? { get }
  var super_eTEXT_STYLE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eTEXT_STYLE? { get }
  var super_eFOUNDED_ITEM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFOUNDED_ITEM? { get }
  var super_eCURVE_STYLE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCURVE_STYLE? { get }
  var super_eEXTERNALLY_DEFINED_ITEM: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEXTERNALLY_DEFINED_ITEM? { get }
  var super_eEXTERNALLY_DEFINED_STYLE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEXTERNALLY_DEFINED_STYLE? { get }
  var super_eSYMBOL_STYLE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSYMBOL_STYLE? { get }
  var super_eSURFACE_STYLE_USAGE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSURFACE_STYLE_USAGE? { get }
  var super_eTEXTURE_STYLE_TESSELLATION_SPECIFICATION: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eTEXTURE_STYLE_TESSELLATION_SPECIFICATION? { get }
  var super_ePOINT_STYLE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePOINT_STYLE? { get }

  //MARK: ENTITY ATTRIBUTE REFERENCES
  var TEXTURE_COORDINATES: (SDAI.LIST<SDAI.LIST<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tNON_NEGATIVE_REAL>/*[2:2]*/ >/*[1:nil]*/ )?  { get }
  var MARKER_COLOUR: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOLOUR?  { get }
  var ITEM_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sSOURCE_ITEM?  { get }
  var STYLE_OF_SYMBOL: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sSYMBOL_STYLE_SELECT?  { get }
  var SIDE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nSURFACE_SIDE?  { get }
  var CURVE_WIDTH: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sSIZE_SELECT?  { get }
  var CHARACTER_APPEARANCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sCHARACTER_STYLE_SELECT?  { get }
  var MARKER_SIZE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sSIZE_SELECT?  { get }
  var MARKER: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sMARKER_SELECT?  { get }
  var CHARACTER_SPACING: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sCHARACTER_SPACING_SELECT?  { get }
  var USERS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sFOUNDED_ITEM_SELECT>/*[0:nil]*/ )?  { get }
  var TEXTURE_FORMAT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nTEXTURE_FILE_TYPE?  { get }
  var STYLE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sSURFACE_SIDE_STYLE_SELECT?  { get }
  var CURVE_COLOUR: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOLOUR?  { get }
  var MIRROR_PLACEMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sAXIS2_PLACEMENT?  { get }
  var CURVE_FONT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sCURVE_FONT_OR_SCALED_CURVE_FONT_SELECT?  { get }
  var REPEATING_PATTERN: SDAI.BOOLEAN?  { get }
  var FILL_STYLES: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sFILL_STYLE_SELECT>/*[1:nil]*/ )?  { get }
  var TEXTURE_IMAGE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { get }
  var SOURCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEXTERNAL_SOURCE?  { get }
  var CHARACTERISTICS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sBOX_CHARACTERISTIC_SELECT>
    /*[1:4]*/ )?  { get }
  var NAME: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { get }
}

public protocol AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sPRESENTATION_STYLE_SELECT__subtype: 
  AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sPRESENTATION_STYLE_SELECT__type, SDAIDefinedType
where Supertype: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sPRESENTATION_STYLE_SELECT__type
{}

public extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sPRESENTATION_STYLE_SELECT__subtype {
  //MARK: CONSTRUCTORS
  init?(possiblyFrom complex: SDAI.ComplexEntity?) {
    self.init(fundamental: FundamentalType(possiblyFrom: complex))
  }

  init?<T: SDAIUnderlyingType>(possiblyFrom underlyingType: T?) {
    self.init(fundamental: FundamentalType(possiblyFrom: underlyingType))
  }

  init?<G: SDAIGenericType>(fromGeneric generic: G?) {
    self.init(fundamental: FundamentalType.convert(fromGeneric: generic))
  }

  //MARK: GROUP REFERENCES
  var super_nNULL_STYLE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nNULL_STYLE? { rep.super_nNULL_STYLE }
  var super_eTEXTURE_STYLE_SPECIFICATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eTEXTURE_STYLE_SPECIFICATION? { rep.super_eTEXTURE_STYLE_SPECIFICATION }
  var super_eFILL_AREA_STYLE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFILL_AREA_STYLE? { rep.super_eFILL_AREA_STYLE }
  var super_eTEXT_STYLE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eTEXT_STYLE? { rep.super_eTEXT_STYLE }
  var super_eFOUNDED_ITEM: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFOUNDED_ITEM? { rep.super_eFOUNDED_ITEM }
  var super_eCURVE_STYLE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCURVE_STYLE? { rep.super_eCURVE_STYLE }
  var super_eEXTERNALLY_DEFINED_ITEM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEXTERNALLY_DEFINED_ITEM? { rep.super_eEXTERNALLY_DEFINED_ITEM }
  var super_eEXTERNALLY_DEFINED_STYLE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEXTERNALLY_DEFINED_STYLE? { rep.super_eEXTERNALLY_DEFINED_STYLE }
  var super_eSYMBOL_STYLE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSYMBOL_STYLE? { rep.super_eSYMBOL_STYLE }
  var super_eSURFACE_STYLE_USAGE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSURFACE_STYLE_USAGE? { rep.super_eSURFACE_STYLE_USAGE }
  var super_eTEXTURE_STYLE_TESSELLATION_SPECIFICATION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eTEXTURE_STYLE_TESSELLATION_SPECIFICATION? { rep.super_eTEXTURE_STYLE_TESSELLATION_SPECIFICATION }
  var super_ePOINT_STYLE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePOINT_STYLE? { rep.super_ePOINT_STYLE }

  //MARK: ENTITY ATTRIBUTE REFERENCES
  var TEXTURE_COORDINATES: (SDAI.LIST<SDAI.LIST<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tNON_NEGATIVE_REAL>/*[2:2]*/ >/*[1:nil]*/ )?  { rep.TEXTURE_COORDINATES }
  var MARKER_COLOUR: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOLOUR?  { rep.MARKER_COLOUR }
  var ITEM_ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sSOURCE_ITEM?  { rep.ITEM_ID }
  var STYLE_OF_SYMBOL: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sSYMBOL_STYLE_SELECT?  { rep.STYLE_OF_SYMBOL }
  var SIDE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nSURFACE_SIDE?  { rep.SIDE }
  var CURVE_WIDTH: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sSIZE_SELECT?  { rep.CURVE_WIDTH }
  var CHARACTER_APPEARANCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sCHARACTER_STYLE_SELECT?  { rep.CHARACTER_APPEARANCE }
  var MARKER_SIZE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sSIZE_SELECT?  { rep.MARKER_SIZE }
  var MARKER: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sMARKER_SELECT?  { rep.MARKER }
  var CHARACTER_SPACING: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sCHARACTER_SPACING_SELECT?  { rep.CHARACTER_SPACING }
  var USERS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sFOUNDED_ITEM_SELECT>/*[0:nil]*/ )?  { rep.USERS }
  var TEXTURE_FORMAT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nTEXTURE_FILE_TYPE?  { rep.TEXTURE_FORMAT }
  var STYLE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sSURFACE_SIDE_STYLE_SELECT?  { rep.STYLE }
  var CURVE_COLOUR: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCOLOUR?  { rep.CURVE_COLOUR }
  var MIRROR_PLACEMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sAXIS2_PLACEMENT?  { rep.MIRROR_PLACEMENT }
  var CURVE_FONT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sCURVE_FONT_OR_SCALED_CURVE_FONT_SELECT?  { rep.CURVE_FONT }
  var REPEATING_PATTERN: SDAI.BOOLEAN?  { rep.REPEATING_PATTERN }
  var FILL_STYLES: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sFILL_STYLE_SELECT>/*[1:nil]*/ )?  { rep.FILL_STYLES }
  var TEXTURE_IMAGE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { rep.TEXTURE_IMAGE }
  var SOURCE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eEXTERNAL_SOURCE?  { rep.SOURCE }
  var CHARACTERISTICS: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sBOX_CHARACTERISTIC_SELECT>
    /*[1:4]*/ )?  { rep.CHARACTERISTICS }
  var NAME: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { rep.NAME }
}

