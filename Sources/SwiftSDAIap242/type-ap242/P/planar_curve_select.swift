/* file: planar_curve_select.swift 	 generated: Mon Jan  3 16:32:52 2022 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.1, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -TYPE DEFINITION in EXPRESS
/*
  TYPE planar_curve_select = SELECT
    ( line (*ENTITY*),
     conic (*ENTITY*),
     trimmed_curve (*ENTITY*),
     pcurve (*ENTITY*),
     surface_curve (*ENTITY*) );
  WHERE
    wr1: ( SELF\geometric_representation_item.dim = 3 );
    wr2: check_curve_planarity( SELF );
  END_TYPE; -- planar_curve_select (line:4795 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES FOR SELECT
/*
  line (*ENTITY*):
  ATTR:  pnt: cartesian_point
  ATTR:  dir: vector
  ATTR:  name: label
  ATTR:  dim: dimension_count

  conic (*ENTITY*):
  ATTR:  radius: positive_length_measure
  ATTR:  semi_imag_axis: positive_length_measure
  ATTR:  position: axis2_placement
  ATTR:  semi_axis_1: positive_length_measure
  ATTR:  semi_axis_2: positive_length_measure
  ATTR:  semi_axis: positive_length_measure
  ATTR:  focal_dist: length_measure
  ATTR:  name: label
  ATTR:  dim: dimension_count

  trimmed_curve (*ENTITY*):
  ATTR:  basis_curve: curve
  ATTR:  trim_1: SET [1 : 2] OF trimming_select
  ATTR:  trim_2: SET [1 : 2] OF trimming_select
  ATTR:  sense_agreement: BOOLEAN
  ATTR:  master_representation: trimming_preference (AMBIGUOUS (SELECT LEVEL))
  ATTR:  name: label
  ATTR:  dim: dimension_count

  pcurve (*ENTITY*):
  ATTR:  reference_to_curve: definitional_representation
  ATTR:  basis_surface: surface (AMBIGUOUS (SELECT LEVEL))
  ATTR:  name: label
  ATTR:  dim: dimension_count

  surface_curve (*ENTITY*):
  ATTR:  associated_geometry: LIST [1 : 2] OF pcurve_or_surface
  ATTR:  master_representation: preferred_surface_curve_representation (AMBIGUOUS (SELECT LEVEL))
  ATTR:  curve_3d: curve
  ATTR:  basis_surface: SET [1 : 2] OF surface (AMBIGUOUS (SELECT LEVEL))
  ATTR:  name: label
  ATTR:  dim: dimension_count

*/

/** SELECT type
- EXPRESS:
```express
  TYPE planar_curve_select = SELECT
    ( line (*ENTITY*),
     conic (*ENTITY*),
     trimmed_curve (*ENTITY*),
     pcurve (*ENTITY*),
     surface_curve (*ENTITY*) );
  WHERE
    wr1: ( SELF\geometric_representation_item.dim = 3 );
    wr2: check_curve_planarity( SELF );
  END_TYPE; -- planar_curve_select (line:4795 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public enum sPLANAR_CURVE_SELECT : SDAIValue, AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sPLANAR_CURVE_SELECT__type {

    /// SELECT case ``eLINE`` (ENTITY) in ``sPLANAR_CURVE_SELECT``
    case _LINE(eLINE)	// (ENTITY)

    /// SELECT case ``eCONIC`` (ENTITY) in ``sPLANAR_CURVE_SELECT``
    case _CONIC(eCONIC)	// (ENTITY)

    /// SELECT case ``eTRIMMED_CURVE`` (ENTITY) in ``sPLANAR_CURVE_SELECT``
    case _TRIMMED_CURVE(eTRIMMED_CURVE)	// (ENTITY)

    /// SELECT case ``ePCURVE`` (ENTITY) in ``sPLANAR_CURVE_SELECT``
    case _PCURVE(ePCURVE)	// (ENTITY)

    /// SELECT case ``eSURFACE_CURVE`` (ENTITY) in ``sPLANAR_CURVE_SELECT``
    case _SURFACE_CURVE(eSURFACE_CURVE)	// (ENTITY)

    //MARK: - CONSTRUCTORS
    public init(fundamental: FundamentalType) { self = fundamental }

    public init?<T: SDAIUnderlyingType>(possiblyFrom underlyingType: T?){
      return nil
    }

    public init?(possiblyFrom complex: SDAI.ComplexEntity?) {
      guard let complex = complex else { return nil }

      if let base = complex.entityReference(eLINE.self) {self = ._LINE(base) }
      else if let base = complex.entityReference(eCONIC.self) {self = ._CONIC(base) }
      else if let base = complex.entityReference(eTRIMMED_CURVE.self) {self = ._TRIMMED_CURVE(base) }
      else if let base = complex.entityReference(ePCURVE.self) {self = ._PCURVE(base) }
      else if let base = complex.entityReference(eSURFACE_CURVE.self) {self = ._SURFACE_CURVE(base) }
      else { return nil }
    }

    public init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let select = generic else { return nil }

      if let fundamental = select as? Self {
        self.init(fundamental: fundamental)
      }
      else if let base = eLINE.convert(fromGeneric: select) {
        self = ._LINE(base)
      }
      else if let base = eCONIC.convert(fromGeneric: select) {
        self = ._CONIC(base)
      }
      else if let base = eTRIMMED_CURVE.convert(fromGeneric: select) {
        self = ._TRIMMED_CURVE(base)
      }
      else if let base = ePCURVE.convert(fromGeneric: select) {
        self = ._PCURVE(base)
      }
      else if let base = eSURFACE_CURVE.convert(fromGeneric: select) {
        self = ._SURFACE_CURVE(base)
      }
      else { return nil }
    }

    // InitializableByP21Parameter
    public static var bareTypeName: String = "PLANAR_CURVE_SELECT"

    public init?(p21typedParam: P21Decode.ExchangeStructure.TypedParameter, from exchangeStructure: P21Decode.ExchangeStructure) {
      guard let keyword = p21typedParam.keyword.asStandardKeyword else { exchangeStructure.error = "unexpected p21parameter(\(p21typedParam)) while resolving \(Self.bareTypeName) select value"; return nil }

      switch(keyword) {
      default:
        exchangeStructure.error = "unexpected p21parameter(\(p21typedParam)) while resolving \(Self.bareTypeName) select value"
        return nil
      }
    }

    public init?(p21untypedParam: P21Decode.ExchangeStructure.UntypedParameter, from exchangeStructure: P21Decode.ExchangeStructure) {
      switch p21untypedParam {
      case .rhsOccurenceName(let rhsname):
        switch rhsname {
        case .constantEntityName(let name):
          guard let entity = exchangeStructure.resolve(constantEntityName: name) else {exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) instance"); return nil }
          self.init(possiblyFrom: entity.complexEntity)

        case .entityInstanceName(let name):
          guard let complex = exchangeStructure.resolve(entityInstanceName: name) else {exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) instance"); return nil }
          self.init(possiblyFrom: complex)

        default:
          exchangeStructure.error = "unexpected p21parameter(\(p21untypedParam)) while resolving \(Self.bareTypeName) select instance"
          return nil
        }

      default:
        exchangeStructure.error = "unexpected p21parameter(\(p21untypedParam)) while resolving \(Self.bareTypeName) select instance"
        return nil
      }
    }

    public init?(p21omittedParamfrom exchangeStructure: P21Decode.ExchangeStructure) {
      return nil
    }


    //MARK: - ENTITY UNDERLYING TYPE REFERENCES
    public var super_eTRIMMED_CURVE: eTRIMMED_CURVE? {
      switch self {
      case ._TRIMMED_CURVE(let entity): return entity
      default: return nil
      }
    }

    public var super_eCONIC: eCONIC? {
      switch self {
      case ._CONIC(let entity): return entity
      default: return nil
      }
    }

    public var super_eSURFACE_CURVE: eSURFACE_CURVE? {
      switch self {
      case ._SURFACE_CURVE(let entity): return entity
      default: return nil
      }
    }

    public var super_eREPRESENTATION_ITEM: eREPRESENTATION_ITEM? {
      switch self {
      case ._LINE(let entity): return entity.super_eREPRESENTATION_ITEM
      case ._CONIC(let entity): return entity.super_eREPRESENTATION_ITEM
      case ._TRIMMED_CURVE(let entity): return entity.super_eREPRESENTATION_ITEM
      case ._PCURVE(let entity): return entity.super_eREPRESENTATION_ITEM
      case ._SURFACE_CURVE(let entity): return entity.super_eREPRESENTATION_ITEM
      }
    }

    public var super_eLINE: eLINE? {
      switch self {
      case ._LINE(let entity): return entity
      default: return nil
      }
    }

    public var super_ePCURVE: ePCURVE? {
      switch self {
      case ._PCURVE(let entity): return entity
      default: return nil
      }
    }

    public var super_eCURVE: eCURVE? {
      switch self {
      case ._LINE(let entity): return entity.super_eCURVE
      case ._CONIC(let entity): return entity.super_eCURVE
      case ._TRIMMED_CURVE(let entity): return entity.super_eCURVE
      case ._PCURVE(let entity): return entity.super_eCURVE
      case ._SURFACE_CURVE(let entity): return entity.super_eCURVE
      }
    }

    public var super_eBOUNDED_CURVE: eBOUNDED_CURVE? {
      switch self {
      case ._TRIMMED_CURVE(let entity): return entity.super_eBOUNDED_CURVE
      default: return nil
      }
    }

    public var super_eGEOMETRIC_REPRESENTATION_ITEM: eGEOMETRIC_REPRESENTATION_ITEM? {
      switch self {
      case ._LINE(let entity): return entity.super_eGEOMETRIC_REPRESENTATION_ITEM
      case ._CONIC(let entity): return entity.super_eGEOMETRIC_REPRESENTATION_ITEM
      case ._TRIMMED_CURVE(let entity): return entity.super_eGEOMETRIC_REPRESENTATION_ITEM
      case ._PCURVE(let entity): return entity.super_eGEOMETRIC_REPRESENTATION_ITEM
      case ._SURFACE_CURVE(let entity): return entity.super_eGEOMETRIC_REPRESENTATION_ITEM
      }
    }


    //MARK: - ENTITY ATTRIBUTE REFERENCES
    /// attribute of SELECT type ``sPLANAR_CURVE_SELECT``
    /// - origin: ENTITY( ``ePCURVE`` )
    public var REFERENCE_TO_CURVE: eDEFINITIONAL_REPRESENTATION?  {
      switch self {
      case ._PCURVE(let entity): return entity.REFERENCE_TO_CURVE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sPLANAR_CURVE_SELECT``
    /// - origin: ENTITY( ``eTRIMMED_CURVE`` )
    public var BASIS_CURVE: eCURVE?  {
      switch self {
      case ._TRIMMED_CURVE(let entity): return entity.BASIS_CURVE
      default: return nil
      }
    }

    /// attribute of SELECT type ``sPLANAR_CURVE_SELECT``
    /// - origin: ENTITY( ``eTRIMMED_CURVE`` )
    public var TRIM_1: (SDAI.SET<sTRIMMING_SELECT>/*[1:2]*/ )?  {
      switch self {
      case ._TRIMMED_CURVE(let entity): return entity.TRIM_1
      default: return nil
      }
    }

    /// attribute of SELECT type ``sPLANAR_CURVE_SELECT``
    /// - origin: ENTITY( ``eTRIMMED_CURVE`` )
    public var TRIM_2: (SDAI.SET<sTRIMMING_SELECT>/*[1:2]*/ )?  {
      switch self {
      case ._TRIMMED_CURVE(let entity): return entity.TRIM_2
      default: return nil
      }
    }

    /// attribute of SELECT type ``sPLANAR_CURVE_SELECT``
    /// - origin: ENTITY( ``eLINE`` )
    public var PNT: eCARTESIAN_POINT?  {
      switch self {
      case ._LINE(let entity): return entity.PNT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sPLANAR_CURVE_SELECT``
    /// - origin: ENTITY( ``eTRIMMED_CURVE`` )
    public var SENSE_AGREEMENT: SDAI.BOOLEAN?  {
      switch self {
      case ._TRIMMED_CURVE(let entity): return entity.SENSE_AGREEMENT
      default: return nil
      }
    }

    /// attribute of SELECT type ``sPLANAR_CURVE_SELECT``
    /// - origin: ENTITY( ``eCONIC`` )
    public var RADIUS: tPOSITIVE_LENGTH_MEASURE?  {
      switch self {
      case ._CONIC(let entity): return entity.RADIUS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sPLANAR_CURVE_SELECT``
    /// - origin: ENTITY( ``eCONIC`` )
    public var SEMI_IMAG_AXIS: tPOSITIVE_LENGTH_MEASURE?  {
      switch self {
      case ._CONIC(let entity): return entity.SEMI_IMAG_AXIS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sPLANAR_CURVE_SELECT``
    /// - origin: ENTITY( ``eCONIC`` )
    public var POSITION: sAXIS2_PLACEMENT?  {
      switch self {
      case ._CONIC(let entity): return entity.POSITION
      default: return nil
      }
    }

    /// attribute of SELECT type ``sPLANAR_CURVE_SELECT``
    /// - origin: ENTITY( ``eSURFACE_CURVE`` )
    public var ASSOCIATED_GEOMETRY: (SDAI.LIST<sPCURVE_OR_SURFACE>/*[1:2]*/ )?  {
      switch self {
      case ._SURFACE_CURVE(let entity): return entity.ASSOCIATED_GEOMETRY
      default: return nil
      }
    }

    //MARK: var MASTER_REPRESENTATION: (AMBIGUOUS)

    /// attribute of SELECT type ``sPLANAR_CURVE_SELECT``
    /// - origin: ENTITY( ``eSURFACE_CURVE`` )
    public var CURVE_3D: eCURVE?  {
      switch self {
      case ._SURFACE_CURVE(let entity): return entity.CURVE_3D
      default: return nil
      }
    }

    /// attribute of SELECT type ``sPLANAR_CURVE_SELECT``
    /// - origin: ENTITY( ``eCONIC`` )
    public var SEMI_AXIS_1: tPOSITIVE_LENGTH_MEASURE?  {
      switch self {
      case ._CONIC(let entity): return entity.SEMI_AXIS_1
      default: return nil
      }
    }

    //MARK: var BASIS_SURFACE: (AMBIGUOUS)

    /// attribute of SELECT type ``sPLANAR_CURVE_SELECT``
    /// - origin: ENTITY( ``eCONIC`` )
    public var SEMI_AXIS_2: tPOSITIVE_LENGTH_MEASURE?  {
      switch self {
      case ._CONIC(let entity): return entity.SEMI_AXIS_2
      default: return nil
      }
    }

    /// attribute of SELECT type ``sPLANAR_CURVE_SELECT``
    /// - origin: ENTITY( ``eCONIC`` )
    public var SEMI_AXIS: tPOSITIVE_LENGTH_MEASURE?  {
      switch self {
      case ._CONIC(let entity): return entity.SEMI_AXIS
      default: return nil
      }
    }

    /// attribute of SELECT type ``sPLANAR_CURVE_SELECT``
    /// - origin: ENTITY( ``eLINE`` )
    public var DIR: eVECTOR?  {
      switch self {
      case ._LINE(let entity): return entity.DIR
      default: return nil
      }
    }

    /// attribute of SELECT type ``sPLANAR_CURVE_SELECT``
    /// - origin: ENTITY( ``eCONIC`` )
    public var FOCAL_DIST: tLENGTH_MEASURE?  {
      switch self {
      case ._CONIC(let entity): return entity.FOCAL_DIST
      default: return nil
      }
    }

    /// attribute of SELECT type ``sPLANAR_CURVE_SELECT``
    /// - origin: ENTITY( ``eLINE`` )
    /// - origin: ENTITY( ``eCONIC`` )
    /// - origin: ENTITY( ``eTRIMMED_CURVE`` )
    /// - origin: ENTITY( ``ePCURVE`` )
    /// - origin: ENTITY( ``eSURFACE_CURVE`` )
    public var NAME: tLABEL?  {
      switch self {
      case ._LINE(let entity): return entity.NAME
      case ._CONIC(let entity): return entity.NAME
      case ._TRIMMED_CURVE(let entity): return entity.NAME
      case ._PCURVE(let entity): return entity.NAME
      case ._SURFACE_CURVE(let entity): return entity.NAME
      }
    }

    /// attribute of SELECT type ``sPLANAR_CURVE_SELECT``
    /// - origin: ENTITY( ``eLINE`` )
    /// - origin: ENTITY( ``eCONIC`` )
    /// - origin: ENTITY( ``eTRIMMED_CURVE`` )
    /// - origin: ENTITY( ``ePCURVE`` )
    /// - origin: ENTITY( ``eSURFACE_CURVE`` )
    public var DIM: tDIMENSION_COUNT?  {
      switch self {
      case ._LINE(let entity): return entity.DIM
      case ._CONIC(let entity): return entity.DIM
      case ._TRIMMED_CURVE(let entity): return entity.DIM
      case ._PCURVE(let entity): return entity.DIM
      case ._SURFACE_CURVE(let entity): return entity.DIM
      }
    }


    //MARK: - SDAIValue
    public func isValueEqual<T: SDAIValue>(to rhs: T) -> Bool {
      switch self {
      case ._LINE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._CONIC(let selection): return selection.value.isValueEqual(to: rhs)
      case ._TRIMMED_CURVE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._PCURVE(let selection): return selection.value.isValueEqual(to: rhs)
      case ._SURFACE_CURVE(let selection): return selection.value.isValueEqual(to: rhs)
      }
    }

    public func isValueEqualOptionally<T: SDAIValue>(to rhs: T?) -> Bool? {
      switch self {
      case ._LINE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._CONIC(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._TRIMMED_CURVE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._PCURVE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._SURFACE_CURVE(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      }
    }

    public func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      switch self {
      case ._LINE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._CONIC(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._TRIMMED_CURVE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._PCURVE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._SURFACE_CURVE(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      }
    }

    public func isValueEqual<T: SDAIValue>(to rhs: T, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      switch self {
      case ._LINE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._CONIC(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._TRIMMED_CURVE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._PCURVE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._SURFACE_CURVE(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      }
    }

    public func isValueEqualOptionally<T: SDAIValue>(to rhs: T?, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      switch self {
      case ._LINE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._CONIC(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._TRIMMED_CURVE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._PCURVE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._SURFACE_CURVE(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      }
    }


    //MARK: SDAIGenericTypeBase
    public func copy() -> Self {
      switch self {
      case ._LINE(let selection): return ._LINE(selection.copy())
      case ._CONIC(let selection): return ._CONIC(selection.copy())
      case ._TRIMMED_CURVE(let selection): return ._TRIMMED_CURVE(selection.copy())
      case ._PCURVE(let selection): return ._PCURVE(selection.copy())
      case ._SURFACE_CURVE(let selection): return ._SURFACE_CURVE(selection.copy())
      }
    }

    //MARK: SDAIGenericType
    public var typeMembers: Set<SDAI.STRING> {
      var members: Set<SDAI.STRING> = [SDAI.STRING(Self.typeName)]
      switch self {
      case ._LINE(let selection): members.formUnion(selection.typeMembers)
      case ._CONIC(let selection): members.formUnion(selection.typeMembers)
      case ._TRIMMED_CURVE(let selection): members.formUnion(selection.typeMembers)
      case ._PCURVE(let selection): members.formUnion(selection.typeMembers)
      case ._SURFACE_CURVE(let selection): members.formUnion(selection.typeMembers)
      }
      //SELECT data types (indirectly) referencing the current type as a member of the select list
      members.insert(SDAI.STRING(sSKETCH_BASIS_SELECT.typeName)) // -> Self
      return members
    }

    public var entityReference: SDAI.EntityReference? {
      switch self {
      case ._LINE(let selection): return selection.entityReference
      case ._CONIC(let selection): return selection.entityReference
      case ._TRIMMED_CURVE(let selection): return selection.entityReference
      case ._PCURVE(let selection): return selection.entityReference
      case ._SURFACE_CURVE(let selection): return selection.entityReference
      }
    }
    public var stringValue: SDAI.STRING? {
      switch self {
      case ._LINE(let selection): return selection.stringValue
      case ._CONIC(let selection): return selection.stringValue
      case ._TRIMMED_CURVE(let selection): return selection.stringValue
      case ._PCURVE(let selection): return selection.stringValue
      case ._SURFACE_CURVE(let selection): return selection.stringValue
      }
    }
    public var binaryValue: SDAI.BINARY? {
      switch self {
      case ._LINE(let selection): return selection.binaryValue
      case ._CONIC(let selection): return selection.binaryValue
      case ._TRIMMED_CURVE(let selection): return selection.binaryValue
      case ._PCURVE(let selection): return selection.binaryValue
      case ._SURFACE_CURVE(let selection): return selection.binaryValue
      }
    }
    public var logicalValue: SDAI.LOGICAL? {
      switch self {
      case ._LINE(let selection): return selection.logicalValue
      case ._CONIC(let selection): return selection.logicalValue
      case ._TRIMMED_CURVE(let selection): return selection.logicalValue
      case ._PCURVE(let selection): return selection.logicalValue
      case ._SURFACE_CURVE(let selection): return selection.logicalValue
      }
    }
    public var booleanValue: SDAI.BOOLEAN? {
      switch self {
      case ._LINE(let selection): return selection.booleanValue
      case ._CONIC(let selection): return selection.booleanValue
      case ._TRIMMED_CURVE(let selection): return selection.booleanValue
      case ._PCURVE(let selection): return selection.booleanValue
      case ._SURFACE_CURVE(let selection): return selection.booleanValue
      }
    }
    public var numberValue: SDAI.NUMBER? {
      switch self {
      case ._LINE(let selection): return selection.numberValue
      case ._CONIC(let selection): return selection.numberValue
      case ._TRIMMED_CURVE(let selection): return selection.numberValue
      case ._PCURVE(let selection): return selection.numberValue
      case ._SURFACE_CURVE(let selection): return selection.numberValue
      }
    }
    public var realValue: SDAI.REAL? {
      switch self {
      case ._LINE(let selection): return selection.realValue
      case ._CONIC(let selection): return selection.realValue
      case ._TRIMMED_CURVE(let selection): return selection.realValue
      case ._PCURVE(let selection): return selection.realValue
      case ._SURFACE_CURVE(let selection): return selection.realValue
      }
    }
    public var integerValue: SDAI.INTEGER? {
      switch self {
      case ._LINE(let selection): return selection.integerValue
      case ._CONIC(let selection): return selection.integerValue
      case ._TRIMMED_CURVE(let selection): return selection.integerValue
      case ._PCURVE(let selection): return selection.integerValue
      case ._SURFACE_CURVE(let selection): return selection.integerValue
      }
    }
    public var genericEnumValue: SDAI.GenericEnumValue? {
      switch self {
      case ._LINE(let selection): return selection.genericEnumValue
      case ._CONIC(let selection): return selection.genericEnumValue
      case ._TRIMMED_CURVE(let selection): return selection.genericEnumValue
      case ._PCURVE(let selection): return selection.genericEnumValue
      case ._SURFACE_CURVE(let selection): return selection.genericEnumValue
      }
    }
    public func arrayOptionalValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.ARRAY_OPTIONAL<ELEM>? {
      switch self {
      case ._LINE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._CONIC(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._TRIMMED_CURVE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._PCURVE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._SURFACE_CURVE(let selection): return selection.arrayOptionalValue(elementType:elementType)
      }
    }
    public func arrayValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.ARRAY<ELEM>? {
      switch self {
      case ._LINE(let selection): return selection.arrayValue(elementType:elementType)
      case ._CONIC(let selection): return selection.arrayValue(elementType:elementType)
      case ._TRIMMED_CURVE(let selection): return selection.arrayValue(elementType:elementType)
      case ._PCURVE(let selection): return selection.arrayValue(elementType:elementType)
      case ._SURFACE_CURVE(let selection): return selection.arrayValue(elementType:elementType)
      }
    }
    public func listValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.LIST<ELEM>? {
      switch self {
      case ._LINE(let selection): return selection.listValue(elementType:elementType)
      case ._CONIC(let selection): return selection.listValue(elementType:elementType)
      case ._TRIMMED_CURVE(let selection): return selection.listValue(elementType:elementType)
      case ._PCURVE(let selection): return selection.listValue(elementType:elementType)
      case ._SURFACE_CURVE(let selection): return selection.listValue(elementType:elementType)
      }
    }
    public func bagValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.BAG<ELEM>? {
      switch self {
      case ._LINE(let selection): return selection.bagValue(elementType:elementType)
      case ._CONIC(let selection): return selection.bagValue(elementType:elementType)
      case ._TRIMMED_CURVE(let selection): return selection.bagValue(elementType:elementType)
      case ._PCURVE(let selection): return selection.bagValue(elementType:elementType)
      case ._SURFACE_CURVE(let selection): return selection.bagValue(elementType:elementType)
      }
    }
    public func setValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.SET<ELEM>? {
      switch self {
      case ._LINE(let selection): return selection.setValue(elementType:elementType)
      case ._CONIC(let selection): return selection.setValue(elementType:elementType)
      case ._TRIMMED_CURVE(let selection): return selection.setValue(elementType:elementType)
      case ._PCURVE(let selection): return selection.setValue(elementType:elementType)
      case ._SURFACE_CURVE(let selection): return selection.setValue(elementType:elementType)
      }
    }
    public func enumValue<ENUM:SDAIEnumerationType>(enumType:ENUM.Type) -> ENUM? {
      switch self {
      case ._LINE(let selection): return selection.enumValue(enumType:enumType)
      case ._CONIC(let selection): return selection.enumValue(enumType:enumType)
      case ._TRIMMED_CURVE(let selection): return selection.enumValue(enumType:enumType)
      case ._PCURVE(let selection): return selection.enumValue(enumType:enumType)
      case ._SURFACE_CURVE(let selection): return selection.enumValue(enumType:enumType)
      }
    }

    //MARK: SDAIUnderlyingType
    public typealias FundamentalType = Self
    public static var typeName: String = 
      "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PLANAR_CURVE_SELECT"
    public var asFundamentalType: FundamentalType { return self }

    //MARK: SDAIObservableAggregateElement
    public var entityReferences: AnySequence<SDAI.EntityReference> {
      switch self {
      case ._LINE(let entity): return entity.entityReferences
      case ._CONIC(let entity): return entity.entityReferences
      case ._TRIMMED_CURVE(let entity): return entity.entityReferences
      case ._PCURVE(let entity): return entity.entityReferences
      case ._SURFACE_CURVE(let entity): return entity.entityReferences
      }
    }

    public mutating func configure(with observer: SDAI.EntityReferenceObserver) {
      switch self {
      case ._LINE(let entity): 
        entity.configure(with: observer)
        self = ._LINE(entity)
      case ._CONIC(let entity): 
        entity.configure(with: observer)
        self = ._CONIC(entity)
      case ._TRIMMED_CURVE(let entity): 
        entity.configure(with: observer)
        self = ._TRIMMED_CURVE(entity)
      case ._PCURVE(let entity): 
        entity.configure(with: observer)
        self = ._PCURVE(entity)
      case ._SURFACE_CURVE(let entity): 
        entity.configure(with: observer)
        self = ._SURFACE_CURVE(entity)
      }
    }

    public mutating func teardownObserver() {
      switch self {
      case ._LINE(let entity): 
        entity.teardownObserver()
        self = ._LINE(entity)
      case ._CONIC(let entity): 
        entity.teardownObserver()
        self = ._CONIC(entity)
      case ._TRIMMED_CURVE(let entity): 
        entity.teardownObserver()
        self = ._TRIMMED_CURVE(entity)
      case ._PCURVE(let entity): 
        entity.teardownObserver()
        self = ._PCURVE(entity)
      case ._SURFACE_CURVE(let entity): 
        entity.teardownObserver()
        self = ._SURFACE_CURVE(entity)
      }
    }

    //MARK: SDAIAggregationBehavior
    public var aggregationHiBound: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationHiIndex: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationLoBound: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationLoIndex: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationSize: Int? {
      switch self {
      default: return nil
      }
    }

    //MARK: WHERE RULES (DEFINED TYPE)
    public static func WHERE_wr1(SELF: sPLANAR_CURVE_SELECT?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.GROUP_REF(eGEOMETRIC_REPRESENTATION_ITEM.self)
      let _TEMP2 = _TEMP1?.DIM
      let _TEMP3 = _TEMP2 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(3))
      return _TEMP3
    }
    public static func WHERE_wr2(SELF: sPLANAR_CURVE_SELECT?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = CHECK_CURVE_PLANARITY(eCURVE(/*sPLANAR_CURVE_SELECT*/SELF))
      return SDAI.LOGICAL(_TEMP1)
    }

    //MARK: WHERE RULE VALIDATION (SELECT TYPE)
    public static func validateWhereRules(instance:Self?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      var result: [SDAI.WhereLabel:SDAI.LOGICAL] = [:]
      switch instance {
      case ._LINE(let selectValue): result = eLINE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\LINE")
      case ._CONIC(let selectValue): result = eCONIC.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\CONIC")
      case ._TRIMMED_CURVE(let selectValue): 
        result = eTRIMMED_CURVE.validateWhereRules(instance:selectValue, prefix:prefix + "\\TRIMMED_CURVE")
      case ._PCURVE(let selectValue): result = ePCURVE.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\PCURVE")
      case ._SURFACE_CURVE(let selectValue): 
        result = eSURFACE_CURVE.validateWhereRules(instance:selectValue, prefix:prefix + "\\SURFACE_CURVE")
      case nil: break
      }

      result[prefix + ".WHERE_wr1"] = sPLANAR_CURVE_SELECT.WHERE_wr1(SELF: instance)
      result[prefix + ".WHERE_wr2"] = sPLANAR_CURVE_SELECT.WHERE_wr2(SELF: instance)
      return result
    }

  }

}


//MARK: - SELECT TYPE HIERARCHY
public protocol AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sPLANAR_CURVE_SELECT__type: SDAISelectType {

  //MARK: GROUP REFERENCES
  var super_eTRIMMED_CURVE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eTRIMMED_CURVE? { get }
  var super_eCONIC: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONIC? { get }
  var super_eSURFACE_CURVE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSURFACE_CURVE? { get }
  var super_eREPRESENTATION_ITEM: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_ITEM? { get }
  var super_eLINE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eLINE? { get }
  var super_ePCURVE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePCURVE? { get }
  var super_eCURVE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCURVE? { get }
  var super_eBOUNDED_CURVE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eBOUNDED_CURVE? { get }
  var super_eGEOMETRIC_REPRESENTATION_ITEM: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGEOMETRIC_REPRESENTATION_ITEM? { get }

  //MARK: ENTITY ATTRIBUTE REFERENCES
  var REFERENCE_TO_CURVE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDEFINITIONAL_REPRESENTATION?  { get }
  var BASIS_CURVE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCURVE?  { get }
  var TRIM_1: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sTRIMMING_SELECT>/*[1:2]*/ )?  { get }
  var TRIM_2: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sTRIMMING_SELECT>/*[1:2]*/ )?  { get }
  var PNT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCARTESIAN_POINT?  { get }
  var SENSE_AGREEMENT: SDAI.BOOLEAN?  { get }
  var RADIUS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { get }
  var SEMI_IMAG_AXIS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { get }
  var POSITION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sAXIS2_PLACEMENT?  { get }
  var ASSOCIATED_GEOMETRY: (SDAI.LIST<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sPCURVE_OR_SURFACE>/*[1:
    2]*/ )?  { get }
  var CURVE_3D: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCURVE?  { get }
  var SEMI_AXIS_1: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { get }
  var SEMI_AXIS_2: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { get }
  var SEMI_AXIS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { get }
  var DIR: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eVECTOR?  { get }
  var FOCAL_DIST: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE?  { get }
  var NAME: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { get }
  var DIM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tDIMENSION_COUNT?  { get }
}

public protocol AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sPLANAR_CURVE_SELECT__subtype: 
  AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sPLANAR_CURVE_SELECT__type, SDAIDefinedType
where Supertype: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sPLANAR_CURVE_SELECT__type
{}

public extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sPLANAR_CURVE_SELECT__subtype {
  //MARK: CONSTRUCTORS
  init?(possiblyFrom complex: SDAI.ComplexEntity?) {
    self.init(fundamental: FundamentalType(possiblyFrom: complex))
  }

  init?<T: SDAIUnderlyingType>(possiblyFrom underlyingType: T?) {
    self.init(fundamental: FundamentalType(possiblyFrom: underlyingType))
  }

  init?<G: SDAIGenericType>(fromGeneric generic: G?) {
    self.init(fundamental: FundamentalType.convert(fromGeneric: generic))
  }

  //MARK: GROUP REFERENCES
  var super_eTRIMMED_CURVE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eTRIMMED_CURVE? { rep.super_eTRIMMED_CURVE }
  var super_eCONIC: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCONIC? { rep.super_eCONIC }
  var super_eSURFACE_CURVE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSURFACE_CURVE? { rep.super_eSURFACE_CURVE }
  var super_eREPRESENTATION_ITEM: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION_ITEM? { rep.super_eREPRESENTATION_ITEM }
  var super_eLINE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eLINE? { rep.super_eLINE }
  var super_ePCURVE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePCURVE? { rep.super_ePCURVE }
  var super_eCURVE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCURVE? { rep.super_eCURVE }
  var super_eBOUNDED_CURVE: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eBOUNDED_CURVE? { rep.super_eBOUNDED_CURVE }
  var super_eGEOMETRIC_REPRESENTATION_ITEM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGEOMETRIC_REPRESENTATION_ITEM? { rep.super_eGEOMETRIC_REPRESENTATION_ITEM }

  //MARK: ENTITY ATTRIBUTE REFERENCES
  var REFERENCE_TO_CURVE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDEFINITIONAL_REPRESENTATION?  { rep.REFERENCE_TO_CURVE }
  var BASIS_CURVE: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCURVE?  { rep.BASIS_CURVE }
  var TRIM_1: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sTRIMMING_SELECT>/*[1:2]*/ )?  { rep.TRIM_1 }
  var TRIM_2: (SDAI.SET<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sTRIMMING_SELECT>/*[1:2]*/ )?  { rep.TRIM_2 }
  var PNT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCARTESIAN_POINT?  { rep.PNT }
  var SENSE_AGREEMENT: SDAI.BOOLEAN?  { rep.SENSE_AGREEMENT }
  var RADIUS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { rep.RADIUS }
  var SEMI_IMAG_AXIS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { rep.SEMI_IMAG_AXIS }
  var POSITION: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sAXIS2_PLACEMENT?  { rep.POSITION }
  var ASSOCIATED_GEOMETRY: (SDAI.LIST<AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sPCURVE_OR_SURFACE>/*[1:
    2]*/ )?  { rep.ASSOCIATED_GEOMETRY }
  var CURVE_3D: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCURVE?  { rep.CURVE_3D }
  var SEMI_AXIS_1: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { rep.SEMI_AXIS_1 }
  var SEMI_AXIS_2: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { rep.SEMI_AXIS_2 }
  var SEMI_AXIS: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tPOSITIVE_LENGTH_MEASURE?  { rep.SEMI_AXIS }
  var DIR: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eVECTOR?  { rep.DIR }
  var FOCAL_DIST: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLENGTH_MEASURE?  { rep.FOCAL_DIST }
  var NAME: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL?  { rep.NAME }
  var DIM: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tDIMENSION_COUNT?  { rep.DIM }
}

