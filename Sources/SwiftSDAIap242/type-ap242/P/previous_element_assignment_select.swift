/* file: previous_element_assignment_select.swift 	 generated: Tue Nov 16 05:35:44 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -TYPE DEFINITION in EXPRESS
/*
  TYPE previous_element_assignment_select = SELECT
    ( delete_element (*ENTITY*),
     modify_element (*ENTITY*) );
  END_TYPE; -- previous_element_assignment_select (line:4925 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES FOR SELECT
/*
  delete_element (*ENTITY*):
  ATTR:  description: (AMBIGUOUS (CASE LEVEL))
  ATTR:  id: identifier
  ATTR:  name: (AMBIGUOUS (CASE LEVEL))

  modify_element (*ENTITY*):
  ATTR:  description: (AMBIGUOUS (CASE LEVEL))
  ATTR:  id: identifier
  ATTR:  name: (AMBIGUOUS (CASE LEVEL))

*/

/** SELECT type
- EXPRESS:
```express
  TYPE previous_element_assignment_select = SELECT
    ( delete_element (*ENTITY*),
     modify_element (*ENTITY*) );
  END_TYPE; -- previous_element_assignment_select (line:4925 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public enum sPREVIOUS_ELEMENT_ASSIGNMENT_SELECT : SDAIValue, AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sPREVIOUS_ELEMENT_ASSIGNMENT_SELECT__type {

    /// SELECT case ``eDELETE_ELEMENT`` (ENTITY) in ``sPREVIOUS_ELEMENT_ASSIGNMENT_SELECT``
    case _DELETE_ELEMENT(eDELETE_ELEMENT)	// (ENTITY)

    /// SELECT case ``eMODIFY_ELEMENT`` (ENTITY) in ``sPREVIOUS_ELEMENT_ASSIGNMENT_SELECT``
    case _MODIFY_ELEMENT(eMODIFY_ELEMENT)	// (ENTITY)

    //MARK: - CONSTRUCTORS
    public init(fundamental: FundamentalType) { self = fundamental }

    public init?<T: SDAIUnderlyingType>(possiblyFrom underlyingType: T?){
      return nil
    }

    public init?(possiblyFrom complex: SDAI.ComplexEntity?) {
      guard let complex = complex else { return nil }

      if let base = complex.entityReference(eDELETE_ELEMENT.self) {self = ._DELETE_ELEMENT(base) }
      else if let base = complex.entityReference(eMODIFY_ELEMENT.self) {self = ._MODIFY_ELEMENT(base) }
      else { return nil }
    }

    public init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let select = generic else { return nil }

      if let fundamental = select as? Self {
        self.init(fundamental: fundamental)
      }
      else if let base = eDELETE_ELEMENT.convert(fromGeneric: select) {
        self = ._DELETE_ELEMENT(base)
      }
      else if let base = eMODIFY_ELEMENT.convert(fromGeneric: select) {
        self = ._MODIFY_ELEMENT(base)
      }
      else { return nil }
    }

    // InitializableByP21Parameter
    public static var bareTypeName: String = "PREVIOUS_ELEMENT_ASSIGNMENT_SELECT"

    public init?(p21typedParam: P21Decode.ExchangeStructure.TypedParameter, from exchangeStructure: P21Decode.ExchangeStructure) {
      guard let keyword = p21typedParam.keyword.asStandardKeyword else { exchangeStructure.error = "unexpected p21parameter(\(p21typedParam)) while resolving \(Self.bareTypeName) select value"; return nil }

      switch(keyword) {
      default:
        exchangeStructure.error = "unexpected p21parameter(\(p21typedParam)) while resolving \(Self.bareTypeName) select value"
        return nil
      }
    }

    public init?(p21untypedParam: P21Decode.ExchangeStructure.UntypedParameter, from exchangeStructure: P21Decode.ExchangeStructure) {
      switch p21untypedParam {
      case .rhsOccurenceName(let rhsname):
        switch rhsname {
        case .constantEntityName(let name):
          guard let entity = exchangeStructure.resolve(constantEntityName: name) else {exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) instance"); return nil }
          self.init(possiblyFrom: entity.complexEntity)

        case .entityInstanceName(let name):
          guard let complex = exchangeStructure.resolve(entityInstanceName: name) else {exchangeStructure.add(errorContext: "while resolving \(Self.bareTypeName) instance"); return nil }
          self.init(possiblyFrom: complex)

        default:
          exchangeStructure.error = "unexpected p21parameter(\(p21untypedParam)) while resolving \(Self.bareTypeName) select instance"
          return nil
        }

      default:
        exchangeStructure.error = "unexpected p21parameter(\(p21untypedParam)) while resolving \(Self.bareTypeName) select instance"
        return nil
      }
    }

    public init?(p21omittedParamfrom exchangeStructure: P21Decode.ExchangeStructure) {
      return nil
    }


    //MARK: - ENTITY UNDERLYING TYPE REFERENCES
    public var super_eGROUP: eGROUP? {
      switch self {
      case ._DELETE_ELEMENT(let entity): return entity.super_eGROUP
      case ._MODIFY_ELEMENT(let entity): return entity.super_eGROUP
      }
    }

    public var super_eDELETE_ELEMENT: eDELETE_ELEMENT? {
      switch self {
      case ._DELETE_ELEMENT(let entity): return entity
      default: return nil
      }
    }

    public var super_eMODIFY_ELEMENT: eMODIFY_ELEMENT? {
      switch self {
      case ._MODIFY_ELEMENT(let entity): return entity
      default: return nil
      }
    }

    public var super_eCHANGE_ELEMENT: eCHANGE_ELEMENT? {
      switch self {
      case ._DELETE_ELEMENT(let entity): return entity.super_eCHANGE_ELEMENT
      case ._MODIFY_ELEMENT(let entity): return entity.super_eCHANGE_ELEMENT
      }
    }

    public var super_eCHARACTERIZED_OBJECT: eCHARACTERIZED_OBJECT? {
      switch self {
      case ._DELETE_ELEMENT(let entity): return entity.super_eCHARACTERIZED_OBJECT
      case ._MODIFY_ELEMENT(let entity): return entity.super_eCHARACTERIZED_OBJECT
      }
    }


    //MARK: - ENTITY ATTRIBUTE REFERENCES
    /// attribute of SELECT type ``sPREVIOUS_ELEMENT_ASSIGNMENT_SELECT``
    /// - origin: ENTITY( ``eDELETE_ELEMENT`` )
    /// - origin: ENTITY( ``eMODIFY_ELEMENT`` )
    public var ID: tIDENTIFIER?  {
      switch self {
      case ._DELETE_ELEMENT(let entity): return entity.ID
      case ._MODIFY_ELEMENT(let entity): return entity.ID
      }
    }


    //MARK: - SDAIValue
    public func isValueEqual<T: SDAIValue>(to rhs: T) -> Bool {
      switch self {
      case ._DELETE_ELEMENT(let selection): return selection.value.isValueEqual(to: rhs)
      case ._MODIFY_ELEMENT(let selection): return selection.value.isValueEqual(to: rhs)
      }
    }

    public func isValueEqualOptionally<T: SDAIValue>(to rhs: T?) -> Bool? {
      switch self {
      case ._DELETE_ELEMENT(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      case ._MODIFY_ELEMENT(let selection): return selection.value.isValueEqualOptionally(to: rhs)
      }
    }

    public func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      switch self {
      case ._DELETE_ELEMENT(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      case ._MODIFY_ELEMENT(let selection): selection.value.hashAsValue(into: &hasher, visited: &complexEntities)
      }
    }

    public func isValueEqual<T: SDAIValue>(to rhs: T, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      switch self {
      case ._DELETE_ELEMENT(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      case ._MODIFY_ELEMENT(let selection): return selection.value.isValueEqual(to: rhs, visited: &comppairs)
      }
    }

    public func isValueEqualOptionally<T: SDAIValue>(to rhs: T?, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      switch self {
      case ._DELETE_ELEMENT(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      case ._MODIFY_ELEMENT(let selection): return selection.value.isValueEqualOptionally(to: rhs, visited: &comppairs)
      }
    }


    //MARK: SDAIGenericTypeBase
    public func copy() -> Self {
      switch self {
      case ._DELETE_ELEMENT(let selection): return ._DELETE_ELEMENT(selection.copy())
      case ._MODIFY_ELEMENT(let selection): return ._MODIFY_ELEMENT(selection.copy())
      }
    }

    //MARK: SDAIGenericType
    public var typeMembers: Set<SDAI.STRING> {
      var members: Set<SDAI.STRING> = [SDAI.STRING(Self.typeName)]
      switch self {
      case ._DELETE_ELEMENT(let selection): members.formUnion(selection.typeMembers)
      case ._MODIFY_ELEMENT(let selection): members.formUnion(selection.typeMembers)
      }
      return members
    }

    public var entityReference: SDAI.EntityReference? {
      switch self {
      case ._DELETE_ELEMENT(let selection): return selection.entityReference
      case ._MODIFY_ELEMENT(let selection): return selection.entityReference
      }
    }
    public var stringValue: SDAI.STRING? {
      switch self {
      case ._DELETE_ELEMENT(let selection): return selection.stringValue
      case ._MODIFY_ELEMENT(let selection): return selection.stringValue
      }
    }
    public var binaryValue: SDAI.BINARY? {
      switch self {
      case ._DELETE_ELEMENT(let selection): return selection.binaryValue
      case ._MODIFY_ELEMENT(let selection): return selection.binaryValue
      }
    }
    public var logicalValue: SDAI.LOGICAL? {
      switch self {
      case ._DELETE_ELEMENT(let selection): return selection.logicalValue
      case ._MODIFY_ELEMENT(let selection): return selection.logicalValue
      }
    }
    public var booleanValue: SDAI.BOOLEAN? {
      switch self {
      case ._DELETE_ELEMENT(let selection): return selection.booleanValue
      case ._MODIFY_ELEMENT(let selection): return selection.booleanValue
      }
    }
    public var numberValue: SDAI.NUMBER? {
      switch self {
      case ._DELETE_ELEMENT(let selection): return selection.numberValue
      case ._MODIFY_ELEMENT(let selection): return selection.numberValue
      }
    }
    public var realValue: SDAI.REAL? {
      switch self {
      case ._DELETE_ELEMENT(let selection): return selection.realValue
      case ._MODIFY_ELEMENT(let selection): return selection.realValue
      }
    }
    public var integerValue: SDAI.INTEGER? {
      switch self {
      case ._DELETE_ELEMENT(let selection): return selection.integerValue
      case ._MODIFY_ELEMENT(let selection): return selection.integerValue
      }
    }
    public var genericEnumValue: SDAI.GenericEnumValue? {
      switch self {
      case ._DELETE_ELEMENT(let selection): return selection.genericEnumValue
      case ._MODIFY_ELEMENT(let selection): return selection.genericEnumValue
      }
    }
    public func arrayOptionalValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.ARRAY_OPTIONAL<ELEM>? {
      switch self {
      case ._DELETE_ELEMENT(let selection): return selection.arrayOptionalValue(elementType:elementType)
      case ._MODIFY_ELEMENT(let selection): return selection.arrayOptionalValue(elementType:elementType)
      }
    }
    public func arrayValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.ARRAY<ELEM>? {
      switch self {
      case ._DELETE_ELEMENT(let selection): return selection.arrayValue(elementType:elementType)
      case ._MODIFY_ELEMENT(let selection): return selection.arrayValue(elementType:elementType)
      }
    }
    public func listValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.LIST<ELEM>? {
      switch self {
      case ._DELETE_ELEMENT(let selection): return selection.listValue(elementType:elementType)
      case ._MODIFY_ELEMENT(let selection): return selection.listValue(elementType:elementType)
      }
    }
    public func bagValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.BAG<ELEM>? {
      switch self {
      case ._DELETE_ELEMENT(let selection): return selection.bagValue(elementType:elementType)
      case ._MODIFY_ELEMENT(let selection): return selection.bagValue(elementType:elementType)
      }
    }
    public func setValue<ELEM:SDAIGenericType>(elementType:ELEM.Type) -> SDAI.SET<ELEM>? {
      switch self {
      case ._DELETE_ELEMENT(let selection): return selection.setValue(elementType:elementType)
      case ._MODIFY_ELEMENT(let selection): return selection.setValue(elementType:elementType)
      }
    }
    public func enumValue<ENUM:SDAIEnumerationType>(enumType:ENUM.Type) -> ENUM? {
      switch self {
      case ._DELETE_ELEMENT(let selection): return selection.enumValue(enumType:enumType)
      case ._MODIFY_ELEMENT(let selection): return selection.enumValue(enumType:enumType)
      }
    }

    //MARK: SDAIUnderlyingType
    public typealias FundamentalType = Self
    public static var typeName: String = 
      "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PREVIOUS_ELEMENT_ASSIGNMENT_SELECT"
    public var asFundamentalType: FundamentalType { return self }

    //MARK: SDAIObservableAggregateElement
    public var entityReferences: AnySequence<SDAI.EntityReference> {
      switch self {
      case ._DELETE_ELEMENT(let entity): return entity.entityReferences
      case ._MODIFY_ELEMENT(let entity): return entity.entityReferences
      }
    }

    public mutating func configure(with observer: SDAI.EntityReferenceObserver) {
      switch self {
      case ._DELETE_ELEMENT(let entity): 
        entity.configure(with: observer)
        self = ._DELETE_ELEMENT(entity)
      case ._MODIFY_ELEMENT(let entity): 
        entity.configure(with: observer)
        self = ._MODIFY_ELEMENT(entity)
      }
    }

    public mutating func teardownObserver() {
      switch self {
      case ._DELETE_ELEMENT(let entity): 
        entity.teardownObserver()
        self = ._DELETE_ELEMENT(entity)
      case ._MODIFY_ELEMENT(let entity): 
        entity.teardownObserver()
        self = ._MODIFY_ELEMENT(entity)
      }
    }

    //MARK: SDAIAggregationBehavior
    public var aggregationHiBound: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationHiIndex: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationLoBound: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationLoIndex: Int? {
      switch self {
      default: return nil
      }
    }
    public var aggregationSize: Int? {
      switch self {
      default: return nil
      }
    }

    //MARK: WHERE RULE VALIDATION (SELECT TYPE)
    public static func validateWhereRules(instance:Self?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      var result: [SDAI.WhereLabel:SDAI.LOGICAL] = [:]
      switch instance {
      case ._DELETE_ELEMENT(let selectValue): 
        result = eDELETE_ELEMENT.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\DELETE_ELEMENT")
      case ._MODIFY_ELEMENT(let selectValue): 
        result = eMODIFY_ELEMENT.validateWhereRules(instance:selectValue, 
        prefix:prefix + "\\MODIFY_ELEMENT")
      case nil: break
      }

      return result
    }

  }

}


//MARK: - SELECT TYPE HIERARCHY
public protocol AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sPREVIOUS_ELEMENT_ASSIGNMENT_SELECT__type: 
  SDAISelectType {

  //MARK: GROUP REFERENCES
  var super_eGROUP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGROUP? { get }
  var super_eDELETE_ELEMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDELETE_ELEMENT? { get }
  var super_eMODIFY_ELEMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMODIFY_ELEMENT? { get }
  var super_eCHANGE_ELEMENT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCHANGE_ELEMENT? { get }
  var super_eCHARACTERIZED_OBJECT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCHARACTERIZED_OBJECT? { get }

  //MARK: ENTITY ATTRIBUTE REFERENCES
  var ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { get }
}

public protocol AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sPREVIOUS_ELEMENT_ASSIGNMENT_SELECT__subtype: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sPREVIOUS_ELEMENT_ASSIGNMENT_SELECT__type, SDAIDefinedType
where Supertype: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sPREVIOUS_ELEMENT_ASSIGNMENT_SELECT__type
{}

public extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF__sPREVIOUS_ELEMENT_ASSIGNMENT_SELECT__subtype {
  //MARK: CONSTRUCTORS
  init?(possiblyFrom complex: SDAI.ComplexEntity?) {
    self.init(fundamental: FundamentalType(possiblyFrom: complex))
  }

  init?<T: SDAIUnderlyingType>(possiblyFrom underlyingType: T?) {
    self.init(fundamental: FundamentalType(possiblyFrom: underlyingType))
  }

  init?<G: SDAIGenericType>(fromGeneric generic: G?) {
    self.init(fundamental: FundamentalType.convert(fromGeneric: generic))
  }

  //MARK: GROUP REFERENCES
  var super_eGROUP: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGROUP? { rep.super_eGROUP }
  var super_eDELETE_ELEMENT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDELETE_ELEMENT? { rep.super_eDELETE_ELEMENT }
  var super_eMODIFY_ELEMENT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMODIFY_ELEMENT? { rep.super_eMODIFY_ELEMENT }
  var super_eCHANGE_ELEMENT: 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCHANGE_ELEMENT? { rep.super_eCHANGE_ELEMENT }
  var super_eCHARACTERIZED_OBJECT: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eCHARACTERIZED_OBJECT? { rep.super_eCHARACTERIZED_OBJECT }

  //MARK: ENTITY ATTRIBUTE REFERENCES
  var ID: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tIDENTIFIER?  { rep.ID }
}

