/* file: build_transformed_set.swift 	 generated: Mon Jan  3 16:32:52 2022 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.1, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION build_transformed_set(
               tr : cartesian_transformation_operator;
               gset : geometric_set
           ) : SET [0 : ?] OF geometric_set_select;

    LOCAL
      s     : SET [1 : ?] OF geometric_set_select := gset.elements;
      trset : SET [0 : ?] OF geometric_set_select := [];
    END_LOCAL;
    REPEAT j := 1 TO SIZEOF( s ) BY 1;
      IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CURVE' IN TYPEOF( s[j] ) THEN
        trset := trset + ( dummy_gri || curve(  ) || curve_replica( s[j], tr ) );
      ELSE
        IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.POINT' IN TYPEOF( s[j] ) THEN
          trset := trset + ( dummy_gri || point(  ) || point_replica( s[j], tr ) );
        ELSE
          IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SURFACE' IN TYPEOF( s[j] ) THEN
            trset := trset + ( dummy_gri || surface(  ) || surface_replica( s[j], tr || 
                cartesian_transformation_operator_3d( ? ) ) );
          END_IF;
        END_IF;
      END_IF;
    END_REPEAT;
    RETURN( trset );

  END_FUNCTION; -- build_transformed_set (line:51351 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func BUILD_TRANSFORMED_SET(TR: eCARTESIAN_TRANSFORMATION_OPERATOR? , GSET: eGEOMETRIC_SET? ) 
    -> (SDAI.SET<sGEOMETRIC_SET_SELECT>/*[0:nil]*/ )? {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( TR, GSET )
    if case .available(let _cached_value) = _build_transformed_set__cache.cachedValue(params: _params) {
      return _cached_value as? SDAI.SET<sGEOMETRIC_SET_SELECT>
    }

    var TR = TR; SDAI.TOUCH(var: &TR)
    var GSET = GSET; SDAI.TOUCH(var: &GSET)

    //LOCAL
    var S: (SDAI.SET<sGEOMETRIC_SET_SELECT>/*[1:nil]*/ )?  = GSET?.ELEMENTS; SDAI.TOUCH(var: &S)
    var TRSET: (SDAI.SET<sGEOMETRIC_SET_SELECT>/*[0:nil]*/ )?  = SDAI.SET<sGEOMETRIC_SET_SELECT>(
                                                                 bound1: SDAI.UNWRAP(SDAI.INTEGER(0)), 
                                                                 bound2: (nil as SDAI.INTEGER?), 
                                                                 SDAI.EMPLY_AGGREGATE); SDAI.TOUCH(var: &TRSET)
    //END_LOCAL

    if let incrementControl/*SDAI.INTEGER*/ = SDAI.FROM(/*SDAI.INTEGER*/1, TO:/*SDAI.INTEGER*/SDAI.SIZEOF(
      S)) {
      for J in incrementControl {
        
        let _TEMP1 = SDAI.TYPEOF(S?[J], IS: eCURVE.self)
        if SDAI.IS_TRUE( _TEMP1 ) {
          
          let _TEMP2 = _curve()
          let _TEMP3 = DUMMY_GRI .||. _TEMP2
          let _TEMP4 = S?[J]
          let _TEMP5 = _curve_replica(
            PARENT_CURVE: SDAI.UNWRAP(eCURVE(/*sGEOMETRIC_SET_SELECT*/_TEMP4)), 
            TRANSFORMATION: SDAI.UNWRAP(TR))
          let _TEMP6 = _TEMP3 .||. _TEMP5
          let _TEMP7 = TRSET + SDAI.FORCE_OPTIONAL(_TEMP6)
          TRSET = SDAI.SET<sGEOMETRIC_SET_SELECT>(bound1: SDAI.UNWRAP(SDAI.INTEGER(0)), bound2: (nil as SDAI.INTEGER?), 
            generic: /*SDAI.SET<runtime>*/_TEMP7)
        }
        else {
          
          let _TEMP8 = SDAI.TYPEOF(S?[J], IS: ePOINT.self)
          if SDAI.IS_TRUE( _TEMP8 ) {
            
            let _TEMP9 = _point()
            let _TEMP10 = DUMMY_GRI .||. _TEMP9
            let _TEMP11 = S?[J]
            let _TEMP12 = _point_replica(
              PARENT_PT: SDAI.UNWRAP(ePOINT(/*sGEOMETRIC_SET_SELECT*/_TEMP11)), 
              TRANSFORMATION: SDAI.UNWRAP(TR))
            let _TEMP13 = _TEMP10 .||. _TEMP12
            let _TEMP14 = TRSET + SDAI.FORCE_OPTIONAL(_TEMP13)
            TRSET = SDAI.SET<sGEOMETRIC_SET_SELECT>(bound1: SDAI.UNWRAP(SDAI.INTEGER(0)), bound2: (nil as 
              SDAI.INTEGER?), generic: /*SDAI.SET<runtime>*/_TEMP14)
          }
          else {
            
            let _TEMP15 = SDAI.TYPEOF(S?[J], IS: eSURFACE.self)
            if SDAI.IS_TRUE( _TEMP15 ) {
              
              let _TEMP16 = _surface()
              let _TEMP17 = DUMMY_GRI .||. _TEMP16
              let _TEMP18 = S?[J]
              let _TEMP19 = _cartesian_transformation_operator_3d(AXIS3: (nil as eDIRECTION?))
              let _TEMP20 = TR .||. _TEMP19
              let _TEMP21 = _surface_replica(
                PARENT_SURFACE: SDAI.UNWRAP(eSURFACE(/*sGEOMETRIC_SET_SELECT*/_TEMP18)), 
                TRANSFORMATION: SDAI.UNWRAP(eCARTESIAN_TRANSFORMATION_OPERATOR_3D(/*SDAI.GENERIC_ENTITY*/
                _TEMP20)))
              let _TEMP22 = _TEMP17 .||. _TEMP21
              let _TEMP23 = TRSET + SDAI.FORCE_OPTIONAL(_TEMP22)
              TRSET = SDAI.SET<sGEOMETRIC_SET_SELECT>(bound1: SDAI.UNWRAP(SDAI.INTEGER(0)), bound2: (nil as 
                SDAI.INTEGER?), generic: /*SDAI.SET<runtime>*/_TEMP23)
            }
          }
        }
      }
    }
    return _build_transformed_set__cache.updateCache(params: _params, value: TRSET)
  }

}

//MARK: - function result cache
private var _build_transformed_set__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

