/* file: has_values_space.swift 	 generated: Mon Jan  3 16:32:52 2022 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.1, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION has_values_space(
               expr : generic_expression
           ) : BOOLEAN;

    LOCAL
      typenames : SET OF STRING := stripped_typeof( expr );
    END_LOCAL;
    IF 'EXPRESSION' IN typenames THEN
      RETURN( bool( ( 'NUMERIC_EXPRESSION' IN typenames ) OR ( 'STRING_EXPRESSION' IN typenames ) OR ( 
          'BOOLEAN_EXPRESSION'  IN typenames ) ) );
    END_IF;
    IF 'MATHS_FUNCTION' IN typenames THEN
      RETURN( TRUE );
    END_IF;
    IF 'FUNCTION_APPLICATION' IN typenames THEN
      RETURN( TRUE );
    END_IF;
    IF 'MATHS_SPACE' IN typenames THEN
      RETURN( TRUE );
    END_IF;
    IF 'MATHS_VARIABLE' IN typenames THEN
      RETURN( TRUE );
    END_IF;
    IF 'DEPENDENT_VARIABLE_DEFINITION' IN typenames THEN
      RETURN( has_values_space( expr\unary_generic_expression.operand ) );
    END_IF;
    IF 'COMPLEX_NUMBER_LITERAL' IN typenames THEN
      RETURN( TRUE );
    END_IF;
    IF 'LOGICAL_LITERAL' IN typenames THEN
      RETURN( TRUE );
    END_IF;
    IF 'BINARY_LITERAL' IN typenames THEN
      RETURN( TRUE );
    END_IF;
    IF 'MATHS_ENUM_LITERAL' IN typenames THEN
      RETURN( TRUE );
    END_IF;
    IF 'REAL_TUPLE_LITERAL' IN typenames THEN
      RETURN( TRUE );
    END_IF;
    IF 'INTEGER_TUPLE_LITERAL' IN typenames THEN
      RETURN( TRUE );
    END_IF;
    IF 'ATOM_BASED_LITERAL' IN typenames THEN
      RETURN( TRUE );
    END_IF;
    IF 'MATHS_TUPLE_LITERAL' IN typenames THEN
      RETURN( TRUE );
    END_IF;
    IF 'PARTIAL_DERIVATIVE_EXPRESSION' IN typenames THEN
      RETURN( TRUE );
    END_IF;
    IF 'DEFINITE_INTEGRAL_EXPRESSION' IN typenames THEN
      RETURN( TRUE );
    END_IF;
    RETURN( FALSE );

  END_FUNCTION; -- has_values_space (line:41988 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func HAS_VALUES_SPACE(_ EXPR: eGENERIC_EXPRESSION? ) 
    -> SDAI.BOOLEAN? {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( EXPR )
    if case .available(let _cached_value) = _has_values_space__cache.cachedValue(params: _params) {
      return _cached_value as? SDAI.BOOLEAN
    }

    var EXPR = EXPR; SDAI.TOUCH(var: &EXPR)

    //LOCAL
    var TYPENAMES: SDAI.SET<SDAI.STRING>?  = STRIPPED_TYPEOF(EXPR); SDAI.TOUCH(var: &TYPENAMES)

    
    let _TEMP1 = SDAI.aggregate(TYPENAMES, contains: SDAI.STRING("EXPRESSION"))
    if SDAI.IS_TRUE( _TEMP1 ) {
      
      let _TEMP2 = SDAI.aggregate(TYPENAMES, contains: SDAI.STRING("NUMERIC_EXPRESSION"))
      let _TEMP3 = SDAI.aggregate(TYPENAMES, contains: SDAI.STRING("STRING_EXPRESSION"))
      let _TEMP4 = _TEMP2 || _TEMP3
      let _TEMP5 = SDAI.aggregate(TYPENAMES, contains: SDAI.STRING("BOOLEAN_EXPRESSION"))
      let _TEMP6 = _TEMP4 || _TEMP5
      let _TEMP7 = BOOL(SDAI.LOGICAL(_TEMP6))
      return _has_values_space__cache.updateCache(params: _params, value: _TEMP7)
    }
    
    let _TEMP8 = SDAI.aggregate(TYPENAMES, contains: SDAI.STRING("MATHS_FUNCTION"))
    if SDAI.IS_TRUE( _TEMP8 ) {
      return _has_values_space__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.TRUE))
    }
    
    let _TEMP9 = SDAI.aggregate(TYPENAMES, contains: SDAI.STRING("FUNCTION_APPLICATION"))
    if SDAI.IS_TRUE( _TEMP9 ) {
      return _has_values_space__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.TRUE))
    }
    
    let _TEMP10 = SDAI.aggregate(TYPENAMES, contains: SDAI.STRING("MATHS_SPACE"))
    if SDAI.IS_TRUE( _TEMP10 ) {
      return _has_values_space__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.TRUE))
    }
    
    let _TEMP11 = SDAI.aggregate(TYPENAMES, contains: SDAI.STRING("MATHS_VARIABLE"))
    if SDAI.IS_TRUE( _TEMP11 ) {
      return _has_values_space__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.TRUE))
    }
    
    let _TEMP12 = SDAI.aggregate(TYPENAMES, contains: SDAI.STRING("DEPENDENT_VARIABLE_DEFINITION"))
    if SDAI.IS_TRUE( _TEMP12 ) {
      
      let _TEMP13 = EXPR?.GROUP_REF(eUNARY_GENERIC_EXPRESSION.self)
      let _TEMP14 = _TEMP13?.OPERAND
      let _TEMP15 = HAS_VALUES_SPACE(_TEMP14)
      return _has_values_space__cache.updateCache(params: _params, value: _TEMP15)
    }
    
    let _TEMP16 = SDAI.aggregate(TYPENAMES, contains: SDAI.STRING("COMPLEX_NUMBER_LITERAL"))
    if SDAI.IS_TRUE( _TEMP16 ) {
      return _has_values_space__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.TRUE))
    }
    
    let _TEMP17 = SDAI.aggregate(TYPENAMES, contains: SDAI.STRING("LOGICAL_LITERAL"))
    if SDAI.IS_TRUE( _TEMP17 ) {
      return _has_values_space__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.TRUE))
    }
    
    let _TEMP18 = SDAI.aggregate(TYPENAMES, contains: SDAI.STRING("BINARY_LITERAL"))
    if SDAI.IS_TRUE( _TEMP18 ) {
      return _has_values_space__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.TRUE))
    }
    
    let _TEMP19 = SDAI.aggregate(TYPENAMES, contains: SDAI.STRING("MATHS_ENUM_LITERAL"))
    if SDAI.IS_TRUE( _TEMP19 ) {
      return _has_values_space__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.TRUE))
    }
    
    let _TEMP20 = SDAI.aggregate(TYPENAMES, contains: SDAI.STRING("REAL_TUPLE_LITERAL"))
    if SDAI.IS_TRUE( _TEMP20 ) {
      return _has_values_space__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.TRUE))
    }
    
    let _TEMP21 = SDAI.aggregate(TYPENAMES, contains: SDAI.STRING("INTEGER_TUPLE_LITERAL"))
    if SDAI.IS_TRUE( _TEMP21 ) {
      return _has_values_space__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.TRUE))
    }
    
    let _TEMP22 = SDAI.aggregate(TYPENAMES, contains: SDAI.STRING("ATOM_BASED_LITERAL"))
    if SDAI.IS_TRUE( _TEMP22 ) {
      return _has_values_space__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.TRUE))
    }
    
    let _TEMP23 = SDAI.aggregate(TYPENAMES, contains: SDAI.STRING("MATHS_TUPLE_LITERAL"))
    if SDAI.IS_TRUE( _TEMP23 ) {
      return _has_values_space__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.TRUE))
    }
    
    let _TEMP24 = SDAI.aggregate(TYPENAMES, contains: SDAI.STRING("PARTIAL_DERIVATIVE_EXPRESSION"))
    if SDAI.IS_TRUE( _TEMP24 ) {
      return _has_values_space__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.TRUE))
    }
    
    let _TEMP25 = SDAI.aggregate(TYPENAMES, contains: SDAI.STRING("DEFINITE_INTEGRAL_EXPRESSION"))
    if SDAI.IS_TRUE( _TEMP25 ) {
      return _has_values_space__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.TRUE))
    }
    return _has_values_space__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
  }

}

//MARK: - function result cache
private var _has_values_space__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

