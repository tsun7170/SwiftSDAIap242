/* file: sts_get_product_definition_shape.swift 	 generated: Sat Aug 14 13:46:02 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION sts_get_product_definition_shape(
               input : geometric_tolerance_target
           ) : product_definition_shape;
    CASE TRUE OF
      'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.DIMENSIONAL_LOCATION' IN TYPEOF( input ) :         RETURN
            ( input\shape_aspect_relationship.relating_shape_aspect\shape_aspect.of_shape );
      'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.DIMENSIONAL_SIZE' IN TYPEOF( input ) :         RETURN
            ( input\dimensional_size.applies_to\shape_aspect.of_shape );
      'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PRODUCT_DEFINITION_SHAPE' IN TYPEOF( input ) :         RETURN
            ( input );
      'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SHAPE_ASPECT' IN TYPEOF( input ) :         RETURN( 
            input\shape_aspect.of_shape );
      OTHERWISE                   :         RETURN( ? );
    END_CASE;

  END_FUNCTION; -- sts_get_product_definition_shape (line:46509 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func STS_GET_PRODUCT_DEFINITION_SHAPE(
    _ INPUT: sGEOMETRIC_TOLERANCE_TARGET? ) 
    -> ePRODUCT_DEFINITION_SHAPE? {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( INPUT )
    if case .available(let _cached_value) = _sts_get_product_definition_shape__cache.cachedValue(params: _params) {
      return _cached_value as? ePRODUCT_DEFINITION_SHAPE
    }

    var INPUT = INPUT; SDAI.TOUCH(var: &INPUT)

    if let selector = SDAI.FORCE_OPTIONAL(SDAI.TRUE) {
      switch selector {
      case SDAI.TYPEOF(INPUT, IS: eDIMENSIONAL_LOCATION.self):
        
        let _TEMP1 = INPUT?.GROUP_REF(eSHAPE_ASPECT_RELATIONSHIP.self)
        let _TEMP2 = _TEMP1?.RELATING_SHAPE_ASPECT
        let _TEMP3 = _TEMP2?.GROUP_REF(eSHAPE_ASPECT.self)
        let _TEMP4 = _TEMP3?.OF_SHAPE
        return _sts_get_product_definition_shape__cache.updateCache(params: _params, value: _TEMP4)

      case SDAI.TYPEOF(INPUT, IS: eDIMENSIONAL_SIZE.self):
        
        let _TEMP5 = INPUT?.GROUP_REF(eDIMENSIONAL_SIZE.self)
        let _TEMP6 = _TEMP5?.APPLIES_TO
        let _TEMP7 = _TEMP6?.GROUP_REF(eSHAPE_ASPECT.self)
        let _TEMP8 = _TEMP7?.OF_SHAPE
        return _sts_get_product_definition_shape__cache.updateCache(params: _params, value: _TEMP8)

      case SDAI.TYPEOF(INPUT, IS: ePRODUCT_DEFINITION_SHAPE.self):
        return _sts_get_product_definition_shape__cache.updateCache(params: _params, value: 
          ePRODUCT_DEFINITION_SHAPE(/*sGEOMETRIC_TOLERANCE_TARGET*/INPUT))

      case SDAI.TYPEOF(INPUT, IS: eSHAPE_ASPECT.self):
        
        let _TEMP9 = INPUT?.GROUP_REF(eSHAPE_ASPECT.self)
        let _TEMP10 = _TEMP9?.OF_SHAPE
        return _sts_get_product_definition_shape__cache.updateCache(params: _params, value: _TEMP10)

      default:
        return _sts_get_product_definition_shape__cache.updateCache(params: _params, value: (nil as 
          ePRODUCT_DEFINITION_SHAPE?))
      } //end switch
    }
    else {
      return _sts_get_product_definition_shape__cache.updateCache(params: _params, value: (nil as 
        ePRODUCT_DEFINITION_SHAPE?))
    }
  }

}

//MARK: - function result cache
private var _sts_get_product_definition_shape__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

