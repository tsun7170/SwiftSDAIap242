/* file: substitute.swift 	 generated: Sat Aug 14 13:46:02 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION substitute(
               expr : generic_expression;
               vars : LIST [1 : ?] OF generic_variable;
               vals : LIST [1 : ?] OF maths_value
           ) : generic_expression;

    LOCAL
      types  : SET OF STRING := stripped_typeof( expr );
      opnds  : LIST OF generic_expression;
      op1    : generic_expression;
      op2    : generic_expression;
      qvars  : LIST OF generic_variable;
      srcdom : maths_space_or_function;
      prpfun : LIST [1 : ?] OF maths_function;
      finfun : maths_function_select;
    END_LOCAL;
    IF SIZEOF( vars ) <> SIZEOF( vals ) THEN
      RETURN( ? );
    END_IF;
    IF 'GENERIC_LITERAL' IN types THEN
      RETURN( expr );
    END_IF;
    IF 'GENERIC_VARIABLE' IN types THEN
      REPEAT i := 1 TO SIZEOF( vars ) BY 1;
        IF expr :=: vars[i] THEN
          RETURN( vals[i] );
        END_IF;
      END_REPEAT;
      RETURN( expr );
    END_IF;
    IF 'QUANTIFIER_EXPRESSION' IN types THEN
      qvars := expr\quantifier_expression.variables;
      REPEAT i := SIZEOF( vars ) TO 1 BY -1;
        IF vars[i] IN qvars THEN
          REMOVE( vars, i );
          REMOVE( vals, i );
        END_IF;
      END_REPEAT;
      opnds := expr\multiple_arity_generic_expression.operands;
      REPEAT i := 1 TO SIZEOF( opnds ) BY 1;
        IF NOT ( opnds[i] IN qvars ) THEN
          expr\multiple_arity_generic_expression.operands[i] := substitute( opnds[i], vars, vals );
        END_IF;
      END_REPEAT;
      RETURN( expr );
    END_IF;
    IF 'UNARY_GENERIC_EXPRESSION' IN types THEN
      op1 := expr\unary_generic_expression.operand;
      expr\unary_generic_expression.operand := substitute( op1, vars, vals );
    END_IF;
    IF 'BINARY_GENERIC_EXPRESSION' IN types THEN
      op1 := expr\binary_generic_expression.operands[1];
      expr\binary_generic_expression.operands[1] := substitute( op1, vars, vals );
      op2 := expr\binary_generic_expression.operands[2];
      expr\binary_generic_expression.operands[2] := substitute( op2, vars, vals );
    END_IF;
    IF 'PARALLEL_COMPOSED_FUNCTION' IN types THEN
      srcdom := expr\parallel_composed_function.source_of_domain;
      prpfun := expr\parallel_composed_function.prep_functions;
      finfun := expr\parallel_composed_function.final_function;
      srcdom := substitute( srcdom, vars, vals );
      REPEAT i := 1 TO SIZEOF( prpfun ) BY 1;
        prpfun[i] := substitute( prpfun[i], vars, vals );
      END_REPEAT;
      IF 'MATHS_FUNCTION' IN stripped_typeof( finfun ) THEN
        finfun := substitute( finfun, vars, vals );
      END_IF;
      RETURN( make_parallel_composed_function( srcdom, prpfun, finfun ) );
    END_IF;
    IF 'MULTIPLE_ARITY_GENERIC_EXPRESSION' IN types THEN
      opnds := expr\multiple_arity_generic_expression.operands;
      REPEAT i := 1 TO SIZEOF( opnds ) BY 1;
        expr\multiple_arity_generic_expression.operands[i] := substitute( opnds[i], vars, vals );
      END_REPEAT;
    END_IF;
    RETURN( expr );

  END_FUNCTION; -- substitute (line:46929 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func SUBSTITUTE(EXPR: eGENERIC_EXPRESSION? , VARS: (SDAI.LIST<eGENERIC_VARIABLE>/*[1:nil]*/ )? , 
                  VALS: (SDAI.LIST<sMATHS_VALUE>/*[1:nil]*/ )? ) 
    -> eGENERIC_EXPRESSION? {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( EXPR, VARS, VALS )
    if case .available(let _cached_value) = _substitute__cache.cachedValue(params: _params) {
      return _cached_value as? eGENERIC_EXPRESSION
    }

    var EXPR = EXPR; SDAI.TOUCH(var: &EXPR)
    var VARS = VARS; SDAI.TOUCH(var: &VARS)
    var VALS = VALS; SDAI.TOUCH(var: &VALS)

    //LOCAL
    var TYPES: SDAI.SET<SDAI.STRING>?  = STRIPPED_TYPEOF(EXPR); SDAI.TOUCH(var: &TYPES)
    var OPNDS: SDAI.LIST<eGENERIC_EXPRESSION>? 
    var OP1: eGENERIC_EXPRESSION? 
    var OP2: eGENERIC_EXPRESSION? 
    var QVARS: SDAI.LIST<eGENERIC_VARIABLE>? 
    var SRCDOM: sMATHS_SPACE_OR_FUNCTION? 
    var PRPFUN: (SDAI.LIST<eMATHS_FUNCTION>/*[1:nil]*/ )? 
    var FINFUN: sMATHS_FUNCTION_SELECT? 
    //END_LOCAL

    
    let _TEMP1 = SDAI.SIZEOF(VARS)
    let _TEMP2 = SDAI.SIZEOF(VALS)
    let _TEMP3 = _TEMP1 .!=. _TEMP2
    if SDAI.IS_TRUE( _TEMP3 ) {
      return _substitute__cache.updateCache(params: _params, value: (nil as eGENERIC_EXPRESSION?))
    }
    
    let _TEMP4 = SDAI.aggregate(TYPES, contains: SDAI.STRING("GENERIC_LITERAL"))
    if SDAI.IS_TRUE( _TEMP4 ) {
      return _substitute__cache.updateCache(params: _params, value: EXPR)
    }
    
    let _TEMP5 = SDAI.aggregate(TYPES, contains: SDAI.STRING("GENERIC_VARIABLE"))
    if SDAI.IS_TRUE( _TEMP5 ) {
      if let incrementControl/*SDAI.INTEGER*/ = SDAI.FROM(/*SDAI.INTEGER*/1, TO:/*SDAI.INTEGER*/SDAI.SIZEOF(
        VARS)) {
        for I in incrementControl {
          
          let _TEMP6 = VARS?[I]
          let _TEMP7 = EXPR .===. _TEMP6
          if SDAI.IS_TRUE( _TEMP7 ) {
            
            let _TEMP8 = VALS?[I]
            return _substitute__cache.updateCache(params: _params, value: eGENERIC_EXPRESSION(/*sMATHS_VALUE*/
              _TEMP8))
          }
        }
      }
      return _substitute__cache.updateCache(params: _params, value: EXPR)
    }
    
    let _TEMP9 = SDAI.aggregate(TYPES, contains: SDAI.STRING("QUANTIFIER_EXPRESSION"))
    if SDAI.IS_TRUE( _TEMP9 ) {
      
      let _TEMP10 = EXPR?.GROUP_REF(eQUANTIFIER_EXPRESSION.self)
      let _TEMP11 = _TEMP10?.VARIABLES
      QVARS = SDAI.LIST<eGENERIC_VARIABLE>(/*SDAI.LIST_UNIQUE<eGENERIC_VARIABLE>[1:nil] */_TEMP11)
      if let incrementControl/*SDAI.INTEGER*/ = SDAI.FROM(/*SDAI.INTEGER*/SDAI.SIZEOF(
        VARS), TO:/*SDAI.INTEGER*/1, BY:/*SDAI.INTEGER*/ -1) {
        for I in incrementControl {
          
          let _TEMP12 = VARS?[I]
          let _TEMP13 = SDAI.aggregate(QVARS, contains: _TEMP12)
          if SDAI.IS_TRUE( _TEMP13 ) {
            SDAI.REMOVE( L: &VARS, P: I )
            SDAI.REMOVE( L: &VALS, P: I )
          }
        }
      }
      
      let _TEMP14 = EXPR?.GROUP_REF(eMULTIPLE_ARITY_GENERIC_EXPRESSION.self)
      let _TEMP15 = _TEMP14?.OPERANDS
      OPNDS = SDAI.LIST<eGENERIC_EXPRESSION>(/*SDAI.LIST<eGENERIC_EXPRESSION>[2:nil] */_TEMP15)
      if let incrementControl/*SDAI.INTEGER*/ = SDAI.FROM(/*SDAI.INTEGER*/1, TO:/*SDAI.INTEGER*/SDAI.SIZEOF(
        OPNDS)) {
        for I in incrementControl {
          
          let _TEMP16 = OPNDS?[I]
          let _TEMP17 = SDAI.aggregate(QVARS, contains: eGENERIC_VARIABLE(/*eGENERIC_EXPRESSION*/_TEMP16))
          let _TEMP18 =  !_TEMP17
          if SDAI.IS_TRUE( _TEMP18 ) {
            
            let _TEMP19 = OPNDS?[I]
            let _TEMP20 = SUBSTITUTE(
              EXPR: _TEMP19, VARS: VARS, 
              VALS: VALS)
            let _TEMP21 = EXPR?.GROUP_REF(eMULTIPLE_ARITY_GENERIC_EXPRESSION.self)
            _TEMP21?.OPERANDS[I] = _TEMP20
          }
        }
      }
      return _substitute__cache.updateCache(params: _params, value: EXPR)
    }
    
    let _TEMP22 = SDAI.aggregate(TYPES, contains: SDAI.STRING("UNARY_GENERIC_EXPRESSION"))
    if SDAI.IS_TRUE( _TEMP22 ) {
      
      let _TEMP23 = EXPR?.GROUP_REF(eUNARY_GENERIC_EXPRESSION.self)
      let _TEMP24 = _TEMP23?.OPERAND
      OP1 = _TEMP24
      
      let _TEMP25 = SUBSTITUTE(EXPR: OP1, 
                               VARS: VARS, 
                               VALS: VALS)
      let _TEMP26 = EXPR?.GROUP_REF(eUNARY_GENERIC_EXPRESSION.self)
      _TEMP26?.OPERAND = SDAI.UNWRAP(_TEMP25)
    }
    
    let _TEMP27 = SDAI.aggregate(TYPES, contains: SDAI.STRING("BINARY_GENERIC_EXPRESSION"))
    if SDAI.IS_TRUE( _TEMP27 ) {
      
      let _TEMP28 = EXPR?.GROUP_REF(eBINARY_GENERIC_EXPRESSION.self)
      let _TEMP29 = _TEMP28?.OPERANDS
      let _TEMP30 = _TEMP29?[1]
      OP1 = _TEMP30
      
      let _TEMP31 = SUBSTITUTE(EXPR: OP1, 
                               VARS: VARS, 
                               VALS: VALS)
      let _TEMP32 = EXPR?.GROUP_REF(eBINARY_GENERIC_EXPRESSION.self)
      _TEMP32?.OPERANDS[1] = _TEMP31
      
      let _TEMP33 = EXPR?.GROUP_REF(eBINARY_GENERIC_EXPRESSION.self)
      let _TEMP34 = _TEMP33?.OPERANDS
      let _TEMP35 = _TEMP34?[2]
      OP2 = _TEMP35
      
      let _TEMP36 = SUBSTITUTE(EXPR: OP2, 
                               VARS: VARS, 
                               VALS: VALS)
      let _TEMP37 = EXPR?.GROUP_REF(eBINARY_GENERIC_EXPRESSION.self)
      _TEMP37?.OPERANDS[2] = _TEMP36
    }
    
    let _TEMP38 = SDAI.aggregate(TYPES, contains: SDAI.STRING("PARALLEL_COMPOSED_FUNCTION"))
    if SDAI.IS_TRUE( _TEMP38 ) {
      
      let _TEMP39 = EXPR?.GROUP_REF(ePARALLEL_COMPOSED_FUNCTION.self)
      let _TEMP40 = _TEMP39?.SOURCE_OF_DOMAIN
      SRCDOM = _TEMP40
      
      let _TEMP41 = EXPR?.GROUP_REF(ePARALLEL_COMPOSED_FUNCTION.self)
      let _TEMP42 = _TEMP41?.PREP_FUNCTIONS
      PRPFUN = _TEMP42
      
      let _TEMP43 = EXPR?.GROUP_REF(ePARALLEL_COMPOSED_FUNCTION.self)
      let _TEMP44 = _TEMP43?.FINAL_FUNCTION
      FINFUN = _TEMP44
      
      let _TEMP45 = SUBSTITUTE(EXPR: eGENERIC_EXPRESSION(/*sMATHS_SPACE_OR_FUNCTION*/SRCDOM), 
                               VARS: VARS, 
                               VALS: VALS)
      SRCDOM = sMATHS_SPACE_OR_FUNCTION(/*eGENERIC_EXPRESSION*/_TEMP45)
      if let incrementControl/*SDAI.INTEGER*/ = SDAI.FROM(/*SDAI.INTEGER*/1, TO:/*SDAI.INTEGER*/SDAI.SIZEOF(
        PRPFUN)) {
        for I in incrementControl {
          
          let _TEMP46 = PRPFUN?[I]
          let _TEMP47 = SUBSTITUTE(EXPR: eGENERIC_EXPRESSION(/*eMATHS_FUNCTION*/_TEMP46), 
                                   VARS: VARS, 
                                   VALS: VALS)
          PRPFUN?[I] = eMATHS_FUNCTION(/*eGENERIC_EXPRESSION*/_TEMP47)
        }
      }
      
      let _TEMP48 = STRIPPED_TYPEOF(FINFUN)
      let _TEMP49 = SDAI.aggregate(_TEMP48, contains: SDAI.STRING("MATHS_FUNCTION"))
      if SDAI.IS_TRUE( _TEMP49 ) {
        
        let _TEMP50 = SUBSTITUTE(EXPR: eGENERIC_EXPRESSION(/*sMATHS_FUNCTION_SELECT*/FINFUN), 
                                 VARS: VARS, 
                                 VALS: VALS)
        FINFUN = sMATHS_FUNCTION_SELECT(/*eGENERIC_EXPRESSION*/_TEMP50)
      }
      
      let _TEMP51 = MAKE_PARALLEL_COMPOSED_FUNCTION(
        SRCDOM: SRCDOM, PREPFUNCS: SDAI.LIST<eMATHS_FUNCTION>(bound1: SDAI.UNWRAP(SDAI.INTEGER(2)), bound2: (nil as 
        SDAI.INTEGER?), /*SDAI.LIST<eMATHS_FUNCTION>[1:nil] */PRPFUN), 
        FINFUNC: FINFUN)
      return _substitute__cache.updateCache(params: _params, value: eGENERIC_EXPRESSION(/*
        ePARALLEL_COMPOSED_FUNCTION*/_TEMP51))
    }
    
    let _TEMP52 = SDAI.aggregate(TYPES, contains: SDAI.STRING("MULTIPLE_ARITY_GENERIC_EXPRESSION"))
    if SDAI.IS_TRUE( _TEMP52 ) {
      
      let _TEMP53 = EXPR?.GROUP_REF(eMULTIPLE_ARITY_GENERIC_EXPRESSION.self)
      let _TEMP54 = _TEMP53?.OPERANDS
      OPNDS = SDAI.LIST<eGENERIC_EXPRESSION>(/*SDAI.LIST<eGENERIC_EXPRESSION>[2:nil] */_TEMP54)
      if let incrementControl/*SDAI.INTEGER*/ = SDAI.FROM(/*SDAI.INTEGER*/1, TO:/*SDAI.INTEGER*/SDAI.SIZEOF(
        OPNDS)) {
        for I in incrementControl {
          
          let _TEMP55 = OPNDS?[I]
          let _TEMP56 = SUBSTITUTE(EXPR: _TEMP55, 
                                   VARS: VARS, 
                                   VALS: VALS)
          let _TEMP57 = EXPR?.GROUP_REF(eMULTIPLE_ARITY_GENERIC_EXPRESSION.self)
          _TEMP57?.OPERANDS[I] = _TEMP56
        }
      }
    }
    return _substitute__cache.updateCache(params: _params, value: EXPR)
  }

}

//MARK: - function result cache
private var _substitute__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

