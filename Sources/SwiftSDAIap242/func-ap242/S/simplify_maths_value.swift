/* file: simplify_maths_value.swift 	 generated: Sat Aug 14 13:46:02 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION simplify_maths_value(
               val : maths_value
           ) : maths_value;

    LOCAL
      vtypes : SET OF STRING := stripped_typeof( val );
      vlist  : LIST OF maths_value;
      nlist  : LIST OF maths_value := [];
    END_LOCAL;
    IF 'GENERIC_EXPRESSION' IN vtypes THEN
      RETURN( simplify_generic_expression( val ) );
    END_IF;
    IF 'LIST' IN vtypes THEN
      vlist := val;
      REPEAT i := 1 TO SIZEOF( vlist ) BY 1;
        INSERT( nlist, simplify_maths_value( vlist[i] ), i - 1 );
      END_REPEAT;
      RETURN( convert_to_maths_value( nlist ) );
    END_IF;
    RETURN( val );

  END_FUNCTION; -- simplify_maths_value (line:46348 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func SIMPLIFY_MATHS_VALUE(_ VAL: sMATHS_VALUE? ) 
    -> sMATHS_VALUE? {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( VAL )
    if case .available(let _cached_value) = _simplify_maths_value__cache.cachedValue(params: _params) {
      return _cached_value as? sMATHS_VALUE
    }

    var VAL = VAL; SDAI.TOUCH(var: &VAL)

    //LOCAL
    var VTYPES: SDAI.SET<SDAI.STRING>?  = STRIPPED_TYPEOF(VAL); SDAI.TOUCH(var: &VTYPES)
    var VLIST: SDAI.LIST<sMATHS_VALUE>? 
    var NLIST: SDAI.LIST<sMATHS_VALUE>?  = SDAI.LIST<sMATHS_VALUE>(SDAI.EMPLY_AGGREGATE); SDAI.TOUCH(var: &NLIST)
    //END_LOCAL

    
    let _TEMP1 = SDAI.aggregate(VTYPES, contains: SDAI.STRING("GENERIC_EXPRESSION"))
    if SDAI.IS_TRUE( _TEMP1 ) {
      
      let _TEMP2 = SIMPLIFY_GENERIC_EXPRESSION(eGENERIC_EXPRESSION(/*sMATHS_VALUE*/VAL))
      return _simplify_maths_value__cache.updateCache(params: _params, value: _TEMP2)
    }
    
    let _TEMP3 = SDAI.aggregate(VTYPES, contains: SDAI.STRING("LIST"))
    if SDAI.IS_TRUE( _TEMP3 ) {
      VLIST = SDAI.LIST<sMATHS_VALUE>(/*sMATHS_VALUE*/VAL)
      if let incrementControl/*SDAI.INTEGER*/ = SDAI.FROM(/*SDAI.INTEGER*/1, TO:/*SDAI.INTEGER*/SDAI.SIZEOF(
        VLIST)) {
        for I in incrementControl {
          SDAI.INSERT( L: &NLIST, E: SIMPLIFY_MATHS_VALUE(VLIST?[I]), P: SDAI.FORCE_OPTIONAL(I) - SDAI.FORCE_OPTIONAL(
            SDAI.INTEGER(1)) )
        }
      }
      
      let _TEMP4 = CONVERT_TO_MATHS_VALUE(NLIST)
      return _simplify_maths_value__cache.updateCache(params: _params, value: _TEMP4)
    }
    return _simplify_maths_value__cache.updateCache(params: _params, value: VAL)
  }

}

//MARK: - function result cache
private var _simplify_maths_value__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

