/* file: shape_of_array.swift 	 generated: Mon Jan  3 16:32:52 2022 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.1, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION shape_of_array(
               func : maths_function
           ) : LIST OF positive_integer;

    LOCAL
      tspace : tuple_space;
      temp   : maths_space;
      result : LIST OF positive_integer := [];
    END_LOCAL;
    IF ( schema_prefix + 'EXPLICIT_TABLE_FUNCTION' ) IN TYPEOF( func ) THEN
      RETURN( func\explicit_table_function.shape );
    END_IF;
    tspace := func.domain;
    IF ( space_dimension( tspace ) = 1 ) AND ( ( schema_prefix + 'TUPLE_SPACE' ) IN TYPEOF( factor1( tspace ) ) )
        THEN
      tspace := factor1( tspace );
    END_IF;
    REPEAT i := 1 TO space_dimension( tspace ) BY 1;
      temp := factor_space( tspace, i );
      IF NOT ( ( schema_prefix + 'FINITE_INTEGER_INTERVAL' ) IN TYPEOF( temp ) ) THEN
        RETURN( ? );
      END_IF;
      INSERT( result, temp\finite_integer_interval.size, i - 1 );
    END_REPEAT;
    RETURN( result );

  END_FUNCTION; -- shape_of_array (line:44290 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func SHAPE_OF_ARRAY(_ FUNC: eMATHS_FUNCTION? ) 
    -> SDAI.LIST<tPOSITIVE_INTEGER>? {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( FUNC )
    if case .available(let _cached_value) = _shape_of_array__cache.cachedValue(params: _params) {
      return _cached_value as? SDAI.LIST<tPOSITIVE_INTEGER>
    }

    var FUNC = FUNC; SDAI.TOUCH(var: &FUNC)

    //LOCAL
    var TSPACE: sTUPLE_SPACE? 
    var TEMP: eMATHS_SPACE? 
    var RESULT: SDAI.LIST<tPOSITIVE_INTEGER>?  = SDAI.LIST<tPOSITIVE_INTEGER>(SDAI.EMPLY_AGGREGATE); SDAI.TOUCH(var: &RESULT)
    //END_LOCAL

    
    let _TEMP1 = SDAI.FORCE_OPTIONAL(SCHEMA_PREFIX) + SDAI.FORCE_OPTIONAL(SDAI.STRING("EXPLICIT_TABLE_FUNCTION"))
    let _TEMP2 = SDAI.TYPEOF(FUNC)
    let _TEMP3 = SDAI.aggregate(_TEMP2, contains: _TEMP1)
    if SDAI.IS_TRUE( _TEMP3 ) {
      
      let _TEMP4 = FUNC?.GROUP_REF(eEXPLICIT_TABLE_FUNCTION.self)
      let _TEMP5 = _TEMP4?.SHAPE
      return _shape_of_array__cache.updateCache(params: _params, value: SDAI.LIST<tPOSITIVE_INTEGER>(/*SDAI.LIST<
        tPOSITIVE_INTEGER>[1:nil] */_TEMP5))
    }
    
    let _TEMP6 = FUNC?.DOMAIN
    TSPACE = _TEMP6
    
    let _TEMP7 = SPACE_DIMENSION(TSPACE)
    let _TEMP8 = _TEMP7 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
    let _TEMP9 = SDAI.FORCE_OPTIONAL(SCHEMA_PREFIX) + SDAI.FORCE_OPTIONAL(SDAI.STRING("TUPLE_SPACE"))
    let _TEMP10 = FACTOR1(TSPACE)
    let _TEMP11 = SDAI.TYPEOF(_TEMP10)
    let _TEMP12 = SDAI.aggregate(_TEMP11, contains: _TEMP9)
    let _TEMP13 = _TEMP8 && _TEMP12
    if SDAI.IS_TRUE( _TEMP13 ) {
      
      let _TEMP14 = FACTOR1(TSPACE)
      TSPACE = sTUPLE_SPACE(/*eMATHS_SPACE*/_TEMP14)
    }
    if let incrementControl/*SDAI.INTEGER*/ = SDAI.FROM(/*SDAI.INTEGER*/1, TO:/*tNONNEGATIVE_INTEGER*/
      SPACE_DIMENSION(TSPACE)) {
      for I in incrementControl {
        
        let _TEMP15 = FACTOR_SPACE(TSPACE: TSPACE, 
                                   IDX: tPOSITIVE_INTEGER(/*SDAI.INTEGER*/I))
        TEMP = _TEMP15
        
        let _TEMP16 = SDAI.FORCE_OPTIONAL(SCHEMA_PREFIX) + SDAI.FORCE_OPTIONAL(SDAI.STRING(
          "FINITE_INTEGER_INTERVAL"))
        let _TEMP17 = SDAI.TYPEOF(TEMP)
        let _TEMP18 = SDAI.aggregate(_TEMP17, contains: _TEMP16)
        let _TEMP19 =  !_TEMP18
        if SDAI.IS_TRUE( _TEMP19 ) {
          return _shape_of_array__cache.updateCache(params: _params, value: (nil as SDAI.LIST<
            tPOSITIVE_INTEGER>?))
        }
        SDAI.INSERT( L: &RESULT, E: TEMP?.GROUP_REF(eFINITE_INTEGER_INTERVAL.self)?.SIZE, 
          P: SDAI.FORCE_OPTIONAL(I) - SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1)) )
      }
    }
    return _shape_of_array__cache.updateCache(params: _params, value: RESULT)
  }

}

//MARK: - function result cache
private var _shape_of_array__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

