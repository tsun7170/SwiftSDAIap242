/* file: edge_curve_pcurves.swift 	 generated: Mon Jan  3 16:32:52 2022 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.1, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION edge_curve_pcurves(
               an_edge : edge_curve;
               the_surface_curves : SET OF surface_curve
           ) : SET OF pcurve;

    LOCAL
      a_curve      : curve;
      result       : SET OF pcurve;
      the_geometry : LIST [1 : 2] OF pcurve_or_surface;
    END_LOCAL;
    a_curve := an_edge.edge_geometry;
    result := [];
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PCURVE' IN TYPEOF( a_curve ) THEN
      result := result + a_curve;
    ELSE
      IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SURFACE_CURVE' IN TYPEOF( a_curve ) THEN
        the_geometry := a_curve\surface_curve.associated_geometry;
        REPEAT k := 1 TO SIZEOF( the_geometry ) BY 1;
          IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PCURVE' IN TYPEOF( the_geometry[k] ) THEN
            result := result + the_geometry[k];
          END_IF;
        END_REPEAT;
      ELSE
        REPEAT j := 1 TO SIZEOF( the_surface_curves ) BY 1;
          the_geometry := the_surface_curves[j].associated_geometry;
          IF the_surface_curves[j].curve_3d :=: a_curve THEN
            REPEAT k := 1 TO SIZEOF( the_geometry ) BY 1;
              IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PCURVE' IN TYPEOF( the_geometry[k] ) THEN
                result := result + the_geometry[k];
              END_IF;
            END_REPEAT;
          END_IF;
        END_REPEAT;
      END_IF;
    END_IF;
    RETURN( result );

  END_FUNCTION; -- edge_curve_pcurves (line:51550 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func EDGE_CURVE_PCURVES(AN_EDGE: eEDGE_CURVE? , THE_SURFACE_CURVES: SDAI.SET<eSURFACE_CURVE>? ) 
    -> SDAI.SET<ePCURVE>? {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( AN_EDGE, THE_SURFACE_CURVES )
    if case .available(let _cached_value) = _edge_curve_pcurves__cache.cachedValue(params: _params) {
      return _cached_value as? SDAI.SET<ePCURVE>
    }

    var AN_EDGE = AN_EDGE; SDAI.TOUCH(var: &AN_EDGE)
    var THE_SURFACE_CURVES = THE_SURFACE_CURVES; SDAI.TOUCH(var: &THE_SURFACE_CURVES)

    //LOCAL
    var A_CURVE: eCURVE? 
    var RESULT: SDAI.SET<ePCURVE>? 
    var THE_GEOMETRY: (SDAI.LIST<sPCURVE_OR_SURFACE>/*[1:2]*/ )? 
    //END_LOCAL

    
    let _TEMP1 = AN_EDGE?.EDGE_GEOMETRY
    A_CURVE = _TEMP1
    
    let _TEMP2 = SDAI.SET<ePCURVE>(SDAI.EMPLY_AGGREGATE)
    RESULT = _TEMP2
    
    let _TEMP3 = SDAI.TYPEOF(A_CURVE, IS: ePCURVE.self)
    if SDAI.IS_TRUE( _TEMP3 ) {
      
      let _TEMP4 = RESULT + A_CURVE
      RESULT = SDAI.SET<ePCURVE>(/*SDAI.SET<SDAI.GENERIC_ENTITY>*/_TEMP4)
    }
    else {
      
      let _TEMP5 = SDAI.TYPEOF(A_CURVE, IS: eSURFACE_CURVE.self)
      if SDAI.IS_TRUE( _TEMP5 ) {
        
        let _TEMP6 = A_CURVE?.GROUP_REF(eSURFACE_CURVE.self)
        let _TEMP7 = _TEMP6?.ASSOCIATED_GEOMETRY
        THE_GEOMETRY = _TEMP7
        if let incrementControl/*SDAI.INTEGER*/ = SDAI.FROM(/*SDAI.INTEGER*/1, TO:/*SDAI.INTEGER*/
          SDAI.SIZEOF(THE_GEOMETRY)) {
          for K in incrementControl {
            
            let _TEMP8 = SDAI.TYPEOF(THE_GEOMETRY?[K], IS: ePCURVE.self)
            if SDAI.IS_TRUE( _TEMP8 ) {
              
              let _TEMP9 = THE_GEOMETRY?[K]
              let _TEMP10 = RESULT + _TEMP9
              RESULT = _TEMP10
            }
          }
        }
      }
      else {
        if let incrementControl/*SDAI.INTEGER*/ = SDAI.FROM(/*SDAI.INTEGER*/1, TO:/*SDAI.INTEGER*/
          SDAI.SIZEOF(THE_SURFACE_CURVES)) {
          for J in incrementControl {
            
            let _TEMP11 = THE_SURFACE_CURVES?[J]
            let _TEMP12 = _TEMP11?.ASSOCIATED_GEOMETRY
            THE_GEOMETRY = _TEMP12
            
            let _TEMP13 = THE_SURFACE_CURVES?[J]
            let _TEMP14 = _TEMP13?.CURVE_3D
            let _TEMP15 = _TEMP14 .===. A_CURVE
            if SDAI.IS_TRUE( _TEMP15 ) {
              if let incrementControl/*SDAI.INTEGER*/ = SDAI.FROM(/*SDAI.INTEGER*/1, TO:/*SDAI.INTEGER*/
                SDAI.SIZEOF(THE_GEOMETRY)) {
                for K in incrementControl {
                  
                  let _TEMP16 = SDAI.TYPEOF(THE_GEOMETRY?[K], IS: ePCURVE.self)
                  if SDAI.IS_TRUE( _TEMP16 ) {
                    
                    let _TEMP17 = THE_GEOMETRY?[K]
                    let _TEMP18 = RESULT + _TEMP17
                    RESULT = _TEMP18
                  }
                }
              }
            }
          }
        }
      }
    }
    return _edge_curve_pcurves__cache.updateCache(params: _params, value: RESULT)
  }

}

//MARK: - function result cache
private var _edge_curve_pcurves__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

