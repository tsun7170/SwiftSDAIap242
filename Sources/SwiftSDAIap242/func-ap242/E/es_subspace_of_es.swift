/* file: es_subspace_of_es.swift 	 generated: Mon Jan  3 16:32:52 2022 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.1, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION es_subspace_of_es(
               es1, es2 : elementary_space_enumerators
           ) : BOOLEAN;
    IF ( NOT EXISTS( es1 ) ) OR ( NOT EXISTS( es2 ) ) THEN
      RETURN( FALSE );
    END_IF;
    IF es1 = es2 THEN
      RETURN( TRUE );
    END_IF;
    IF es2 = es_generics THEN
      RETURN( TRUE );
    END_IF;
    IF ( es1 = es_booleans ) AND ( es2 = es_logicals ) THEN
      RETURN( TRUE );
    END_IF;
    IF ( es2 = es_numbers ) AND ( ( es1 = es_complex_numbers ) OR ( es1 = es_reals ) OR ( es1 = es_integers ) )
        THEN
      RETURN( TRUE );
    END_IF;
    RETURN( FALSE );

  END_FUNCTION; -- es_subspace_of_es (line:40560 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func ES_SUBSPACE_OF_ES(ES1: nELEMENTARY_SPACE_ENUMERATORS? , ES2: nELEMENTARY_SPACE_ENUMERATORS? ) 
    -> SDAI.BOOLEAN? {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( ES1, ES2 )
    if case .available(let _cached_value) = _es_subspace_of_es__cache.cachedValue(params: _params) {
      return _cached_value as? SDAI.BOOLEAN
    }

    var ES1 = ES1; SDAI.TOUCH(var: &ES1)
    var ES2 = ES2; SDAI.TOUCH(var: &ES2)

    
    let _TEMP1 = SDAI.EXISTS(ES1)
    let _TEMP2 =  !_TEMP1
    let _TEMP3 = SDAI.EXISTS(ES2)
    let _TEMP4 =  !_TEMP3
    let _TEMP5 = _TEMP2 || _TEMP4
    if SDAI.IS_TRUE( _TEMP5 ) {
      return _es_subspace_of_es__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
    }
    
    let _TEMP6 = ES1 .==. ES2
    if SDAI.IS_TRUE( _TEMP6 ) {
      return _es_subspace_of_es__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.TRUE))
    }
    
    let _TEMP7 = ES2 .==. SDAI.FORCE_OPTIONAL(ES_GENERICS)
    if SDAI.IS_TRUE( _TEMP7 ) {
      return _es_subspace_of_es__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.TRUE))
    }
    
    let _TEMP8 = ES1 .==. SDAI.FORCE_OPTIONAL(ES_BOOLEANS)
    let _TEMP9 = ES2 .==. SDAI.FORCE_OPTIONAL(ES_LOGICALS)
    let _TEMP10 = _TEMP8 && _TEMP9
    if SDAI.IS_TRUE( _TEMP10 ) {
      return _es_subspace_of_es__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.TRUE))
    }
    
    let _TEMP11 = ES2 .==. SDAI.FORCE_OPTIONAL(ES_NUMBERS)
    let _TEMP12 = ES1 .==. SDAI.FORCE_OPTIONAL(ES_COMPLEX_NUMBERS)
    let _TEMP13 = ES1 .==. SDAI.FORCE_OPTIONAL(ES_REALS)
    let _TEMP14 = _TEMP12 || _TEMP13
    let _TEMP15 = ES1 .==. SDAI.FORCE_OPTIONAL(ES_INTEGERS)
    let _TEMP16 = _TEMP14 || _TEMP15
    let _TEMP17 = _TEMP11 && _TEMP16
    if SDAI.IS_TRUE( _TEMP17 ) {
      return _es_subspace_of_es__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.TRUE))
    }
    return _es_subspace_of_es__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
  }

}

//MARK: - function result cache
private var _es_subspace_of_es__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

