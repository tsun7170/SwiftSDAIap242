/* file: nmsf_surface_check.swift 	 generated: Sun Oct 31 15:32:10 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION nmsf_surface_check(
               surf : surface
           ) : BOOLEAN;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ELEMENTARY_SURFACE' IN TYPEOF( surf ) THEN
      RETURN( TRUE );
    ELSE
      IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SWEPT_SURFACE' IN TYPEOF( surf ) THEN
        RETURN( nmsf_curve_check( surf\swept_surface.swept_curve ) );
      ELSE
        IF ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.OFFSET_SURFACE' IN TYPEOF( surf ) ) AND ( 
            surf\offset_surface.self_intersect = FALSE ) ) OR ( surf\offset_surface.self_intersect = UNKNOWN )
            THEN
          RETURN( nmsf_surface_check( surf\offset_surface.basis_surface ) );
        ELSE
          IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SURFACE_REPLICA' IN TYPEOF( surf ) THEN
            RETURN( nmsf_surface_check( surf\surface_replica.parent_surface ) );
          ELSE
            IF ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.B_SPLINE_SURFACE' IN TYPEOF( surf ) ) AND
                ( surf\b_spline_surface.self_intersect = FALSE ) ) OR ( surf\b_spline_surface.self_intersect 
                = UNKNOWN ) THEN
              RETURN( TRUE );
            END_IF;
          END_IF;
        END_IF;
      END_IF;
    END_IF;
    RETURN( FALSE );

  END_FUNCTION; -- nmsf_surface_check (line:43583 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func NMSF_SURFACE_CHECK(_ SURF: eSURFACE? ) 
    -> SDAI.BOOLEAN? {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( SURF )
    if case .available(let _cached_value) = _nmsf_surface_check__cache.cachedValue(params: _params) {
      return _cached_value as? SDAI.BOOLEAN
    }

    var SURF = SURF; SDAI.TOUCH(var: &SURF)

    
    let _TEMP1 = SDAI.TYPEOF(SURF, IS: eELEMENTARY_SURFACE.self)
    if SDAI.IS_TRUE( _TEMP1 ) {
      return _nmsf_surface_check__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.TRUE))
    }
    else {
      
      let _TEMP2 = SDAI.TYPEOF(SURF, IS: eSWEPT_SURFACE.self)
      if SDAI.IS_TRUE( _TEMP2 ) {
        
        let _TEMP3 = SURF?.GROUP_REF(eSWEPT_SURFACE.self)
        let _TEMP4 = _TEMP3?.SWEPT_CURVE
        let _TEMP5 = NMSF_CURVE_CHECK(eREPRESENTATION_ITEM(/*eCURVE*/_TEMP4))
        return _nmsf_surface_check__cache.updateCache(params: _params, value: _TEMP5)
      }
      else {
        
        let _TEMP6 = SDAI.TYPEOF(SURF, IS: eOFFSET_SURFACE.self)
        let _TEMP7 = SURF?.GROUP_REF(eOFFSET_SURFACE.self)
        let _TEMP8 = _TEMP7?.SELF_INTERSECT
        let _TEMP9 = _TEMP8 .==. SDAI.FORCE_OPTIONAL(SDAI.LOGICAL(SDAI.FALSE))
        let _TEMP10 = _TEMP6 && _TEMP9
        let _TEMP11 = SURF?.GROUP_REF(eOFFSET_SURFACE.self)
        let _TEMP12 = _TEMP11?.SELF_INTERSECT
        let _TEMP13 = _TEMP12 .==. SDAI.FORCE_OPTIONAL(SDAI.LOGICAL(SDAI.UNKNOWN))
        let _TEMP14 = _TEMP10 || _TEMP13
        if SDAI.IS_TRUE( _TEMP14 ) {
          
          let _TEMP15 = SURF?.GROUP_REF(eOFFSET_SURFACE.self)
          let _TEMP16 = _TEMP15?.BASIS_SURFACE
          let _TEMP17 = NMSF_SURFACE_CHECK(_TEMP16)
          return _nmsf_surface_check__cache.updateCache(params: _params, value: _TEMP17)
        }
        else {
          
          let _TEMP18 = SDAI.TYPEOF(SURF, IS: eSURFACE_REPLICA.self)
          if SDAI.IS_TRUE( _TEMP18 ) {
            
            let _TEMP19 = SURF?.GROUP_REF(eSURFACE_REPLICA.self)
            let _TEMP20 = _TEMP19?.PARENT_SURFACE
            let _TEMP21 = NMSF_SURFACE_CHECK(_TEMP20)
            return _nmsf_surface_check__cache.updateCache(params: _params, value: _TEMP21)
          }
          else {
            
            let _TEMP22 = SDAI.TYPEOF(SURF, IS: eB_SPLINE_SURFACE.self)
            let _TEMP23 = SURF?.GROUP_REF(eB_SPLINE_SURFACE.self)
            let _TEMP24 = _TEMP23?.SELF_INTERSECT
            let _TEMP25 = _TEMP24 .==. SDAI.FORCE_OPTIONAL(SDAI.LOGICAL(SDAI.FALSE))
            let _TEMP26 = _TEMP22 && _TEMP25
            let _TEMP27 = SURF?.GROUP_REF(eB_SPLINE_SURFACE.self)
            let _TEMP28 = _TEMP27?.SELF_INTERSECT
            let _TEMP29 = _TEMP28 .==. SDAI.FORCE_OPTIONAL(SDAI.LOGICAL(SDAI.UNKNOWN))
            let _TEMP30 = _TEMP26 || _TEMP29
            if SDAI.IS_TRUE( _TEMP30 ) {
              return _nmsf_surface_check__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.TRUE))
            }
          }
        }
      }
    }
    return _nmsf_surface_check__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
  }

}

//MARK: - function result cache
private var _nmsf_surface_check__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

