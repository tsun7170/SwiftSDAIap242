/* file: no_cyclic_space_reference.swift 	 generated: Tue Nov 16 05:35:44 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION no_cyclic_space_reference(
               spc : maths_space;
               refs : SET OF maths_space
           ) : BOOLEAN;

    LOCAL
      types     : SET OF STRING;
      refs_plus : SET OF maths_space;
    END_LOCAL;
    IF spc IN refs THEN
      RETURN( FALSE );
    END_IF;
    types := TYPEOF( spc );
    refs_plus := refs + spc;
    IF ( schema_prefix + 'FINITE_SPACE' ) IN types THEN
      RETURN( bool( SIZEOF( QUERY ( sp <* QUERY ( mem <* spc\finite_space.members | ( ( schema_prefix + 
          'MATHS_SPACE'  ) IN TYPEOF( mem ) ) ) | ( NOT no_cyclic_space_reference( sp, refs_plus ) ) ) ) = 0 ) );
    END_IF;
    IF ( schema_prefix + 'UNIFORM_PRODUCT_SPACE' ) IN types THEN
      RETURN( no_cyclic_space_reference( spc\uniform_product_space.base, refs_plus ) );
    END_IF;
    IF ( schema_prefix + 'LISTED_PRODUCT_SPACE' ) IN types THEN
      RETURN( bool( SIZEOF( QUERY ( fac <* spc\listed_product_space.factors | ( NOT 
          no_cyclic_space_reference( fac, refs_plus ) ) ) ) = 0 ) );
    END_IF;
    IF ( schema_prefix + 'EXTENDED_TUPLE_SPACE' ) IN types THEN
      RETURN( no_cyclic_space_reference( spc\extended_tuple_space.base, refs_plus ) AND 
          no_cyclic_space_reference( spc\extended_tuple_space.extender, refs_plus ) );
    END_IF;
    RETURN( TRUE );

  END_FUNCTION; -- no_cyclic_space_reference (line:43673 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func NO_CYCLIC_SPACE_REFERENCE(SPC: eMATHS_SPACE? , REFS: SDAI.SET<eMATHS_SPACE>? ) 
    -> SDAI.BOOLEAN? {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( SPC, REFS )
    if case .available(let _cached_value) = _no_cyclic_space_reference__cache.cachedValue(params: _params) {
      return _cached_value as? SDAI.BOOLEAN
    }

    var SPC = SPC; SDAI.TOUCH(var: &SPC)
    var REFS = REFS; SDAI.TOUCH(var: &REFS)

    //LOCAL
    var TYPES: SDAI.SET<SDAI.STRING>? 
    var REFS_PLUS: SDAI.SET<eMATHS_SPACE>? 
    //END_LOCAL

    
    let _TEMP1 = SDAI.aggregate(REFS, contains: SPC)
    if SDAI.IS_TRUE( _TEMP1 ) {
      return _no_cyclic_space_reference__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
    }
    
    let _TEMP2 = SDAI.TYPEOF(SPC)
    TYPES = _TEMP2
    
    let _TEMP3 = REFS + SPC
    REFS_PLUS = _TEMP3
    
    let _TEMP4 = SDAI.FORCE_OPTIONAL(SCHEMA_PREFIX) + SDAI.FORCE_OPTIONAL(SDAI.STRING("FINITE_SPACE"))
    let _TEMP5 = SDAI.aggregate(TYPES, contains: SDAI.STRING(/*SDAI.INTEGER*/_TEMP4))
    if SDAI.IS_TRUE( _TEMP5 ) {
      
      let _TEMP6 = SPC?.GROUP_REF(eFINITE_SPACE.self)
      let _TEMP7 = _TEMP6?.MEMBERS
      let _TEMP8 = _TEMP7?.QUERY{ MEM in 

          let _TEMP1 = SDAI.FORCE_OPTIONAL(SCHEMA_PREFIX) + SDAI.FORCE_OPTIONAL(SDAI.STRING("MATHS_SPACE"))
          let _TEMP2 = SDAI.TYPEOF(MEM)
          let _TEMP3 = SDAI.aggregate(_TEMP2, contains: SDAI.STRING(/*SDAI.INTEGER*/_TEMP1))
          return _TEMP3 }
      let _TEMP9 = _TEMP8?.QUERY{ SP in 

          let _TEMP1 = NO_CYCLIC_SPACE_REFERENCE(
            SPC: eMATHS_SPACE(/*sMATHS_VALUE*/SP), 
            REFS: REFS_PLUS)
          let _TEMP2 =  !_TEMP1
          return _TEMP2 }
      let _TEMP10 = SDAI.SIZEOF(_TEMP9)
      let _TEMP11 = _TEMP10 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      let _TEMP12 = BOOL(SDAI.LOGICAL(_TEMP11))
      return _no_cyclic_space_reference__cache.updateCache(params: _params, value: _TEMP12)
    }
    
    let _TEMP13 = SDAI.FORCE_OPTIONAL(SCHEMA_PREFIX) + SDAI.FORCE_OPTIONAL(SDAI.STRING("UNIFORM_PRODUCT_SPACE"))
    let _TEMP14 = SDAI.aggregate(TYPES, contains: SDAI.STRING(/*SDAI.INTEGER*/_TEMP13))
    if SDAI.IS_TRUE( _TEMP14 ) {
      
      let _TEMP15 = SPC?.GROUP_REF(eUNIFORM_PRODUCT_SPACE.self)
      let _TEMP16 = _TEMP15?.BASE
      let _TEMP17 = NO_CYCLIC_SPACE_REFERENCE(
        SPC: _TEMP16, REFS: REFS_PLUS)
      return _no_cyclic_space_reference__cache.updateCache(params: _params, value: _TEMP17)
    }
    
    let _TEMP18 = SDAI.FORCE_OPTIONAL(SCHEMA_PREFIX) + SDAI.FORCE_OPTIONAL(SDAI.STRING("LISTED_PRODUCT_SPACE"))
    let _TEMP19 = SDAI.aggregate(TYPES, contains: SDAI.STRING(/*SDAI.INTEGER*/_TEMP18))
    if SDAI.IS_TRUE( _TEMP19 ) {
      
      let _TEMP20 = SPC?.GROUP_REF(eLISTED_PRODUCT_SPACE.self)
      let _TEMP21 = _TEMP20?.FACTORS
      let _TEMP22 = _TEMP21?.QUERY{ FAC in 

          let _TEMP1 = NO_CYCLIC_SPACE_REFERENCE(
            SPC: FAC, REFS: REFS_PLUS)
          let _TEMP2 =  !_TEMP1
          return _TEMP2 }
      let _TEMP23 = SDAI.SIZEOF(_TEMP22)
      let _TEMP24 = _TEMP23 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      let _TEMP25 = BOOL(SDAI.LOGICAL(_TEMP24))
      return _no_cyclic_space_reference__cache.updateCache(params: _params, value: _TEMP25)
    }
    
    let _TEMP26 = SDAI.FORCE_OPTIONAL(SCHEMA_PREFIX) + SDAI.FORCE_OPTIONAL(SDAI.STRING("EXTENDED_TUPLE_SPACE"))
    let _TEMP27 = SDAI.aggregate(TYPES, contains: SDAI.STRING(/*SDAI.INTEGER*/_TEMP26))
    if SDAI.IS_TRUE( _TEMP27 ) {
      
      let _TEMP28 = SPC?.GROUP_REF(eEXTENDED_TUPLE_SPACE.self)
      let _TEMP29 = _TEMP28?.BASE
      let _TEMP30 = NO_CYCLIC_SPACE_REFERENCE(
        SPC: eMATHS_SPACE(/*sTUPLE_SPACE*/_TEMP29), 
        REFS: REFS_PLUS)
      let _TEMP31 = SPC?.GROUP_REF(eEXTENDED_TUPLE_SPACE.self)
      let _TEMP32 = _TEMP31?.EXTENDER
      let _TEMP33 = NO_CYCLIC_SPACE_REFERENCE(
        SPC: _TEMP32, REFS: REFS_PLUS)
      let _TEMP34 = _TEMP30 && _TEMP33
      return _no_cyclic_space_reference__cache.updateCache(params: _params, value: SDAI.BOOLEAN(/*SDAI.LOGICAL*/
        _TEMP34))
    }
    return _no_cyclic_space_reference__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.TRUE))
  }

}

//MARK: - function result cache
private var _no_cyclic_space_reference__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

