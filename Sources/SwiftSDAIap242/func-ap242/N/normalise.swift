/* file: normalise.swift 	 generated: Mon Jan  3 16:32:52 2022 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.1, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION normalise(
               arg : vector_or_direction
           ) : vector_or_direction;

    LOCAL
      ndim   : INTEGER;
      v      : direction := dummy_gri || direction( [1, 0, 0] );
      result : vector_or_direction;
      vec    : vector := dummy_gri || vector( v, 1 );
      mag    : REAL;
    END_LOCAL;
    IF NOT EXISTS( arg ) THEN
      result := ?;
    ELSE
      ndim := arg.dim;
      IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.VECTOR' IN TYPEOF( arg ) THEN

        BEGIN
          v := dummy_gri || direction( arg\vector.orientation.direction_ratios );
          IF arg\vector.magnitude = 0 THEN
            RETURN( ? );
          ELSE
            vec := dummy_gri || vector( v, 1 );
          END_IF;
        END;
      ELSE
        v := dummy_gri || direction( arg.direction_ratios );
      END_IF;
      mag := 0;
      REPEAT i := 1 TO ndim BY 1;
        mag := mag + ( v.direction_ratios[i] * v.direction_ratios[i] );
      END_REPEAT;
      IF mag > 0 THEN
        mag := SQRT( mag );
        REPEAT i := 1 TO ndim BY 1;
          v.direction_ratios[i] := v.direction_ratios[i] / mag;
        END_REPEAT;
        IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.VECTOR' IN TYPEOF( arg ) THEN
          vec.orientation := v;
          result := vec;
        ELSE
          result := v;
        END_IF;
      ELSE
        RETURN( ? );
      END_IF;
    END_IF;
    RETURN( result );

  END_FUNCTION; -- normalise (line:43726 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func NORMALISE(_ ARG: sVECTOR_OR_DIRECTION? ) 
    -> sVECTOR_OR_DIRECTION? {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( ARG )
    if case .available(let _cached_value) = _normalise__cache.cachedValue(params: _params) {
      return _cached_value as? sVECTOR_OR_DIRECTION
    }

    var ARG = ARG; SDAI.TOUCH(var: &ARG)

    //LOCAL
    var NDIM: SDAI.INTEGER? 
    var V: eDIRECTION?  = eDIRECTION(/*SDAI.GENERIC_ENTITY*/DUMMY_GRI .||. 
                          _direction(DIRECTION_RATIOS: SDAI.UNWRAP(SDAI.LIST<SDAI.REAL>(
                          bound1: SDAI.UNWRAP(SDAI.INTEGER(2)), bound2: SDAI.INTEGER(3), 
                          ([SDAI.AIE(SDAI.REAL(1.0000000000e+00)), 
                          SDAI.AIE(SDAI.REAL(0)), 
                          SDAI.AIE(SDAI.REAL(0))] as [SDAI.AggregationInitializerElement<SDAI.REAL>]))))); SDAI.TOUCH(var: &V)
    var RESULT: sVECTOR_OR_DIRECTION? 
    var VEC: eVECTOR?  = eVECTOR(/*SDAI.GENERIC_ENTITY*/DUMMY_GRI .||. _vector(
                         ORIENTATION: SDAI.UNWRAP(V), 
                         MAGNITUDE: SDAI.UNWRAP(tLENGTH_MEASURE(1.0000000000e+00)))); SDAI.TOUCH(var: &VEC)
    var MAG: SDAI.REAL? 
    //END_LOCAL

    
    let _TEMP1 = SDAI.EXISTS(ARG)
    let _TEMP2 =  !_TEMP1
    if SDAI.IS_TRUE( _TEMP2 ) {
      RESULT = (nil as sVECTOR_OR_DIRECTION?)
    }
    else {
      
      let _TEMP3 = ARG?.DIM
      NDIM = SDAI.INTEGER(/*tDIMENSION_COUNT*/_TEMP3)
      
      let _TEMP4 = SDAI.TYPEOF(ARG, IS: eVECTOR.self)
      if SDAI.IS_TRUE( _TEMP4 ) {
        //BEGIN
        
        let _TEMP5 = ARG?.GROUP_REF(eVECTOR.self)
        let _TEMP6 = _TEMP5?.ORIENTATION
        let _TEMP7 = _TEMP6?.DIRECTION_RATIOS
        let _TEMP8 = _direction(DIRECTION_RATIOS: SDAI.UNWRAP(_TEMP7))
        let _TEMP9 = DUMMY_GRI .||. _TEMP8
        V = eDIRECTION(/*SDAI.GENERIC_ENTITY*/_TEMP9)
        
        let _TEMP10 = ARG?.GROUP_REF(eVECTOR.self)
        let _TEMP11 = _TEMP10?.MAGNITUDE
        let _TEMP12 = _TEMP11 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
        if SDAI.IS_TRUE( _TEMP12 ) {
          return _normalise__cache.updateCache(params: _params, value: (nil as sVECTOR_OR_DIRECTION?))
        }
        else {
          
          let _TEMP13 = _vector(ORIENTATION: SDAI.UNWRAP(V), 
                                MAGNITUDE: SDAI.UNWRAP(tLENGTH_MEASURE(1.0000000000e+00)))
          let _TEMP14 = DUMMY_GRI .||. _TEMP13
          VEC = eVECTOR(/*SDAI.GENERIC_ENTITY*/_TEMP14)
        }
        //END
      }
      else {
        
        let _TEMP15 = ARG?.DIRECTION_RATIOS
        let _TEMP16 = _direction(DIRECTION_RATIOS: SDAI.UNWRAP(_TEMP15))
        let _TEMP17 = DUMMY_GRI .||. _TEMP16
        V = eDIRECTION(/*SDAI.GENERIC_ENTITY*/_TEMP17)
      }
      MAG = SDAI.REAL(0)
      if let incrementControl/*SDAI.INTEGER*/ = SDAI.FROM(/*SDAI.INTEGER*/1, TO:/*SDAI.INTEGER*/NDIM) {
        for I in incrementControl {
          
          let _TEMP18 = V?.DIRECTION_RATIOS
          let _TEMP19 = _TEMP18?[I]
          let _TEMP20 = V?.DIRECTION_RATIOS
          let _TEMP21 = _TEMP20?[I]
          let _TEMP22 = _TEMP19 * _TEMP21
          let _TEMP23 = MAG + _TEMP22
          MAG = _TEMP23
        }
      }
      
      let _TEMP24 = MAG > SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      if SDAI.IS_TRUE( _TEMP24 ) {
        
        let _TEMP25 = SDAI.SQRT(MAG)
        MAG = _TEMP25
        if let incrementControl/*SDAI.INTEGER*/ = SDAI.FROM(/*SDAI.INTEGER*/1, TO:/*SDAI.INTEGER*/NDIM) {
          for I in incrementControl {
            
            let _TEMP26 = V?.DIRECTION_RATIOS
            let _TEMP27 = _TEMP26?[I]
            let _TEMP28 = _TEMP27 / MAG
            V?.DIRECTION_RATIOS[I] = 
              _TEMP28
          }
        }
        
        let _TEMP29 = SDAI.TYPEOF(ARG, IS: eVECTOR.self)
        if SDAI.IS_TRUE( _TEMP29 ) {
          VEC?.ORIENTATION = SDAI.UNWRAP(V)
          RESULT = sVECTOR_OR_DIRECTION(/*eVECTOR*/VEC)
        }
        else {
          RESULT = sVECTOR_OR_DIRECTION(/*eDIRECTION*/V)
        }
      }
      else {
        return _normalise__cache.updateCache(params: _params, value: (nil as sVECTOR_OR_DIRECTION?))
      }
    }
    return _normalise__cache.updateCache(params: _params, value: RESULT)
  }

}

//MARK: - function result cache
private var _normalise__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

