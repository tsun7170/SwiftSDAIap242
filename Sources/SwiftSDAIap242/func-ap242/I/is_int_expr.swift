/* file: is_int_expr.swift 	 generated: Mon Jan  3 16:32:52 2022 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.1, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION is_int_expr(
               arg : numeric_expression
           ) : BOOLEAN;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.INT_LITERAL' IN TYPEOF( arg ) THEN
      RETURN( TRUE );
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.REAL_LITERAL' IN TYPEOF( arg ) THEN
      RETURN( FALSE );
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.INT_NUMERIC_VARIABLE' IN TYPEOF( arg ) THEN
      RETURN( TRUE );
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.REAL_NUMERIC_VARIABLE' IN TYPEOF( arg ) THEN
      RETURN( FALSE );
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ABS_FUNCTION' IN TYPEOF( arg ) THEN
      RETURN( is_int_expr( arg\unary_numeric_expression.operand ) );
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.MINUS_FUNCTION' IN TYPEOF( arg ) THEN
      RETURN( is_int_expr( arg\unary_numeric_expression.operand ) );
    END_IF;
    IF ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SIN_FUNCTION' IN TYPEOF( arg ) ) OR ( 
        'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.COS_FUNCTION'  IN TYPEOF( arg ) ) OR ( 
        'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.TAN_FUNCTION'  IN TYPEOF( arg ) ) OR ( 
        'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ASIN_FUNCTION'  IN TYPEOF( arg ) ) OR ( 
        'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ACOS_FUNCTION'  IN TYPEOF( arg ) ) OR ( 
        'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ATAN_FUNCTION'  IN TYPEOF( arg ) ) OR ( 
        'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.EXP_FUNCTION'  IN TYPEOF( arg ) ) OR ( 
        'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.LOG_FUNCTION'  IN TYPEOF( arg ) ) OR ( 
        'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.LOG2_FUNCTION'  IN TYPEOF( arg ) ) OR ( 
        'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.LOG10_FUNCTION'  IN TYPEOF( arg ) ) OR ( 
        'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SQUARE_ROOT_FUNCTION'  IN TYPEOF( arg ) ) THEN
      RETURN( FALSE );
    END_IF;
    IF ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PLUS_EXPRESSION' IN TYPEOF( arg ) ) OR ( 
        'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.MULT_EXPRESSION'  IN TYPEOF( arg ) ) OR ( 
        'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.MAXIMUM_FUNCTION'  IN TYPEOF( arg ) ) OR ( 
        'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.MINIMUM_FUNCTION'  IN TYPEOF( arg ) ) THEN
      REPEAT i := 1 TO SIZEOF( arg\multiple_arity_numeric_expression.operands ) BY 1;
        IF NOT is_int_expr( arg\multiple_arity_numeric_expression.operands[i] ) THEN
          RETURN( FALSE );
        END_IF;
      END_REPEAT;
      RETURN( TRUE );
    END_IF;
    IF ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.MINUS_EXPRESSION' IN TYPEOF( arg ) ) OR ( 
        'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.POWER_EXPRESSION'  IN TYPEOF( arg ) ) THEN
      RETURN( is_int_expr( arg\binary_numeric_expression.operands[1] ) AND is_int_expr( arg\
          binary_numeric_expression.operands[2] ) );
    END_IF;
    IF ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.DIV_EXPRESSION' IN TYPEOF( arg ) ) OR ( 
        'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.MOD_EXPRESSION'  IN TYPEOF( arg ) ) THEN
      RETURN( TRUE );
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SLASH_EXPRESSION' IN TYPEOF( arg ) THEN
      RETURN( FALSE );
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.LENGTH_FUNCTION' IN TYPEOF( arg ) THEN
      RETURN( TRUE );
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.VALUE_FUNCTION' IN TYPEOF( arg ) THEN
      IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.INT_VALUE_FUNCTION' IN TYPEOF( arg ) THEN
        RETURN( TRUE );
      ELSE
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.INTEGER_DEFINED_FUNCTION' IN TYPEOF( arg ) THEN
      RETURN( TRUE );
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.REAL_DEFINED_FUNCTION' IN TYPEOF( arg ) THEN
      RETURN( FALSE );
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.BOOLEAN_DEFINED_FUNCTION' IN TYPEOF( arg ) THEN
      RETURN( FALSE );
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.STRING_DEFINED_FUNCTION' IN TYPEOF( arg ) THEN
      RETURN( FALSE );
    END_IF;
    RETURN( FALSE );

  END_FUNCTION; -- is_int_expr (line:42177 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func IS_INT_EXPR(_ ARG: eNUMERIC_EXPRESSION? ) 
    -> SDAI.BOOLEAN? {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( ARG )
    if case .available(let _cached_value) = _is_int_expr__cache.cachedValue(params: _params) {
      return _cached_value as? SDAI.BOOLEAN
    }

    var ARG = ARG; SDAI.TOUCH(var: &ARG)

    
    let _TEMP1 = SDAI.TYPEOF(ARG, IS: eINT_LITERAL.self)
    if SDAI.IS_TRUE( _TEMP1 ) {
      return _is_int_expr__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.TRUE))
    }
    
    let _TEMP2 = SDAI.TYPEOF(ARG, IS: eREAL_LITERAL.self)
    if SDAI.IS_TRUE( _TEMP2 ) {
      return _is_int_expr__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
    }
    
    let _TEMP3 = SDAI.TYPEOF(ARG, IS: eINT_NUMERIC_VARIABLE.self)
    if SDAI.IS_TRUE( _TEMP3 ) {
      return _is_int_expr__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.TRUE))
    }
    
    let _TEMP4 = SDAI.TYPEOF(ARG, IS: eREAL_NUMERIC_VARIABLE.self)
    if SDAI.IS_TRUE( _TEMP4 ) {
      return _is_int_expr__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
    }
    
    let _TEMP5 = SDAI.TYPEOF(ARG, IS: eABS_FUNCTION.self)
    if SDAI.IS_TRUE( _TEMP5 ) {
      
      let _TEMP6 = ARG?.GROUP_REF(eUNARY_NUMERIC_EXPRESSION.self)
      let _TEMP7 = _TEMP6?.OPERAND
      let _TEMP8 = IS_INT_EXPR(_TEMP7)
      return _is_int_expr__cache.updateCache(params: _params, value: _TEMP8)
    }
    
    let _TEMP9 = SDAI.TYPEOF(ARG, IS: eMINUS_FUNCTION.self)
    if SDAI.IS_TRUE( _TEMP9 ) {
      
      let _TEMP10 = ARG?.GROUP_REF(eUNARY_NUMERIC_EXPRESSION.self)
      let _TEMP11 = _TEMP10?.OPERAND
      let _TEMP12 = IS_INT_EXPR(_TEMP11)
      return _is_int_expr__cache.updateCache(params: _params, value: _TEMP12)
    }
    
    let _TEMP13 = SDAI.TYPEOF(ARG, IS: eSIN_FUNCTION.self)
    let _TEMP14 = SDAI.TYPEOF(ARG, IS: eCOS_FUNCTION.self)
    let _TEMP15 = _TEMP13 || _TEMP14
    let _TEMP16 = SDAI.TYPEOF(ARG, IS: eTAN_FUNCTION.self)
    let _TEMP17 = _TEMP15 || _TEMP16
    let _TEMP18 = SDAI.TYPEOF(ARG, IS: eASIN_FUNCTION.self)
    let _TEMP19 = _TEMP17 || _TEMP18
    let _TEMP20 = SDAI.TYPEOF(ARG, IS: eACOS_FUNCTION.self)
    let _TEMP21 = _TEMP19 || _TEMP20
    let _TEMP22 = SDAI.TYPEOF(ARG, IS: eATAN_FUNCTION.self)
    let _TEMP23 = _TEMP21 || _TEMP22
    let _TEMP24 = SDAI.TYPEOF(ARG, IS: eEXP_FUNCTION.self)
    let _TEMP25 = _TEMP23 || _TEMP24
    let _TEMP26 = SDAI.TYPEOF(ARG, IS: eLOG_FUNCTION.self)
    let _TEMP27 = _TEMP25 || _TEMP26
    let _TEMP28 = SDAI.TYPEOF(ARG, IS: eLOG2_FUNCTION.self)
    let _TEMP29 = _TEMP27 || _TEMP28
    let _TEMP30 = SDAI.TYPEOF(ARG, IS: eLOG10_FUNCTION.self)
    let _TEMP31 = _TEMP29 || _TEMP30
    let _TEMP32 = SDAI.TYPEOF(ARG, IS: eSQUARE_ROOT_FUNCTION.self)
    let _TEMP33 = _TEMP31 || _TEMP32
    if SDAI.IS_TRUE( _TEMP33 ) {
      return _is_int_expr__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
    }
    
    let _TEMP34 = SDAI.TYPEOF(ARG, IS: ePLUS_EXPRESSION.self)
    let _TEMP35 = SDAI.TYPEOF(ARG, IS: eMULT_EXPRESSION.self)
    let _TEMP36 = _TEMP34 || _TEMP35
    let _TEMP37 = SDAI.TYPEOF(ARG, IS: eMAXIMUM_FUNCTION.self)
    let _TEMP38 = _TEMP36 || _TEMP37
    let _TEMP39 = SDAI.TYPEOF(ARG, IS: eMINIMUM_FUNCTION.self)
    let _TEMP40 = _TEMP38 || _TEMP39
    if SDAI.IS_TRUE( _TEMP40 ) {
      if let incrementControl/*SDAI.INTEGER*/ = SDAI.FROM(/*SDAI.INTEGER*/1, TO:/*SDAI.INTEGER*/SDAI.SIZEOF(
        ARG?.GROUP_REF(eMULTIPLE_ARITY_NUMERIC_EXPRESSION.self)?.OPERANDS)) {
        for I in incrementControl {
          
          let _TEMP41 = ARG?.GROUP_REF(eMULTIPLE_ARITY_NUMERIC_EXPRESSION.self)
          let _TEMP42 = _TEMP41?.OPERANDS
          let _TEMP43 = _TEMP42?[I]
          let _TEMP44 = IS_INT_EXPR(_TEMP43)
          let _TEMP45 =  !_TEMP44
          if SDAI.IS_TRUE( _TEMP45 ) {
            return _is_int_expr__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
          }
        }
      }
      return _is_int_expr__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.TRUE))
    }
    
    let _TEMP46 = SDAI.TYPEOF(ARG, IS: eMINUS_EXPRESSION.self)
    let _TEMP47 = SDAI.TYPEOF(ARG, IS: ePOWER_EXPRESSION.self)
    let _TEMP48 = _TEMP46 || _TEMP47
    if SDAI.IS_TRUE( _TEMP48 ) {
      
      let _TEMP49 = ARG?.GROUP_REF(eBINARY_NUMERIC_EXPRESSION.self)
      let _TEMP50 = _TEMP49?.OPERANDS
      let _TEMP51 = _TEMP50?[1]
      let _TEMP52 = IS_INT_EXPR(_TEMP51)
      let _TEMP53 = ARG?.GROUP_REF(eBINARY_NUMERIC_EXPRESSION.self)
      let _TEMP54 = _TEMP53?.OPERANDS
      let _TEMP55 = _TEMP54?[2]
      let _TEMP56 = IS_INT_EXPR(_TEMP55)
      let _TEMP57 = _TEMP52 && _TEMP56
      return _is_int_expr__cache.updateCache(params: _params, value: SDAI.BOOLEAN(/*SDAI.LOGICAL*/_TEMP57))
    }
    
    let _TEMP58 = SDAI.TYPEOF(ARG, IS: eDIV_EXPRESSION.self)
    let _TEMP59 = SDAI.TYPEOF(ARG, IS: eMOD_EXPRESSION.self)
    let _TEMP60 = _TEMP58 || _TEMP59
    if SDAI.IS_TRUE( _TEMP60 ) {
      return _is_int_expr__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.TRUE))
    }
    
    let _TEMP61 = SDAI.TYPEOF(ARG, IS: eSLASH_EXPRESSION.self)
    if SDAI.IS_TRUE( _TEMP61 ) {
      return _is_int_expr__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
    }
    
    let _TEMP62 = SDAI.TYPEOF(ARG, IS: eLENGTH_FUNCTION.self)
    if SDAI.IS_TRUE( _TEMP62 ) {
      return _is_int_expr__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.TRUE))
    }
    
    let _TEMP63 = SDAI.TYPEOF(ARG, IS: eVALUE_FUNCTION.self)
    if SDAI.IS_TRUE( _TEMP63 ) {
      
      let _TEMP64 = SDAI.TYPEOF(ARG, IS: eINT_VALUE_FUNCTION.self)
      if SDAI.IS_TRUE( _TEMP64 ) {
        return _is_int_expr__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.TRUE))
      }
      else {
        return _is_int_expr__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
      }
    }
    
    let _TEMP65 = SDAI.TYPEOF(ARG, IS: eINTEGER_DEFINED_FUNCTION.self)
    if SDAI.IS_TRUE( _TEMP65 ) {
      return _is_int_expr__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.TRUE))
    }
    
    let _TEMP66 = SDAI.TYPEOF(ARG, IS: eREAL_DEFINED_FUNCTION.self)
    if SDAI.IS_TRUE( _TEMP66 ) {
      return _is_int_expr__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
    }
    
    let _TEMP67 = SDAI.TYPEOF(ARG, IS: eBOOLEAN_DEFINED_FUNCTION.self)
    if SDAI.IS_TRUE( _TEMP67 ) {
      return _is_int_expr__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
    }
    
    let _TEMP68 = SDAI.TYPEOF(ARG, IS: eSTRING_DEFINED_FUNCTION.self)
    if SDAI.IS_TRUE( _TEMP68 ) {
      return _is_int_expr__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
    }
    return _is_int_expr__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
  }

}

//MARK: - function result cache
private var _is_int_expr__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

