/* file: is_sql_mappable.swift 	 generated: Sat Aug 14 13:46:02 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION is_sql_mappable(
               arg : expression
           ) : BOOLEAN;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SIMPLE_NUMERIC_EXPRESSION' IN TYPEOF( arg ) THEN
      RETURN( TRUE );
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SQL_MAPPABLE_DEFINED_FUNCTION' IN TYPEOF( arg ) THEN
      RETURN( TRUE );
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.MINUS_FUNCTION' IN TYPEOF( arg ) THEN
      RETURN( is_sql_mappable( arg\unary_numeric_expression.operand ) );
    END_IF;
    IF ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ABS_FUNCTION' IN TYPEOF( arg ) ) OR ( 
        'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SIN_FUNCTION'  IN TYPEOF( arg ) ) OR ( 
        'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.COS_FUNCTION'  IN TYPEOF( arg ) ) OR ( 
        'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.TAN_FUNCTION'  IN TYPEOF( arg ) ) OR ( 
        'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ASIN_FUNCTION'  IN TYPEOF( arg ) ) OR ( 
        'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ACOS_FUNCTION'  IN TYPEOF( arg ) ) OR ( 
        'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ATAN_FUNCTION'  IN TYPEOF( arg ) ) OR ( 
        'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.EXP_FUNCTION'  IN TYPEOF( arg ) ) OR ( 
        'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.LOG_FUNCTION'  IN TYPEOF( arg ) ) OR ( 
        'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.LOG2_FUNCTION'  IN TYPEOF( arg ) ) OR ( 
        'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.LOG10_FUNCTION'  IN TYPEOF( arg ) ) OR ( 
        'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SQUARE_ROOT_FUNCTION'  IN TYPEOF( arg ) ) OR ( 
        'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.VALUE_FUNCTION'  IN TYPEOF( arg ) ) OR ( 
        'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.LENGTH_FUNCTION'  IN TYPEOF( arg ) ) THEN
      RETURN( FALSE );
    END_IF;
    IF ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PLUS_EXPRESSION' IN TYPEOF( arg ) ) OR ( 
        'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.MULT_EXPRESSION'  IN TYPEOF( arg ) ) OR ( 
        'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.MAXIMUM_FUNCTION'  IN TYPEOF( arg ) ) OR ( 
        'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.MINIMUM_FUNCTION'  IN TYPEOF( arg ) ) THEN
      REPEAT i := 1 TO SIZEOF( arg\multiple_arity_numeric_expression.operands ) BY 1;
        IF NOT is_sql_mappable( arg\multiple_arity_numeric_expression.operands[i] ) THEN
          RETURN( FALSE );
        END_IF;
      END_REPEAT;
      RETURN( TRUE );
    END_IF;
    IF ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.MINUS_EXPRESSION' IN TYPEOF( arg ) ) OR ( 
        'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SLASH_EXPRESSION'  IN TYPEOF( arg ) ) THEN
      RETURN( is_sql_mappable( arg\binary_numeric_expression.operands[1] ) AND is_sql_mappable( arg\
          binary_numeric_expression.operands[2] ) );
    END_IF;
    IF ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.DIV_EXPRESSION' IN TYPEOF( arg ) ) OR ( 
        'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.MOD_EXPRESSION'  IN TYPEOF( arg ) ) OR ( 
        'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.POWER_EXPRESSION'  IN TYPEOF( arg ) ) THEN
      RETURN( FALSE );
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SIMPLE_BOOLEAN_EXPRESSION' IN TYPEOF( arg ) THEN
      RETURN( TRUE );
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.NOT_EXPRESSION' IN TYPEOF( arg ) THEN
      RETURN( is_sql_mappable( arg\unary_generic_expression.operand ) );
    END_IF;
    IF ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ODD_FUNCTION' IN TYPEOF( arg ) ) OR ( 
        'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.XOR_EXPRESSION'  IN TYPEOF( arg ) ) THEN
      RETURN( FALSE );
    END_IF;
    IF ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.AND_EXPRESSION' IN TYPEOF( arg ) ) OR ( 
        'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.OR_EXPRESSION'  IN TYPEOF( arg ) ) THEN
      REPEAT i := 1 TO SIZEOF( arg\multiple_arity_boolean_expression.operands ) BY 1;
        IF NOT is_sql_mappable( arg\multiple_arity_boolean_expression.operands[i] ) THEN
          RETURN( FALSE );
        END_IF;
      END_REPEAT;
      RETURN( TRUE );
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.EQUALS_EXPRESSION' IN TYPEOF( arg ) THEN
      RETURN( is_sql_mappable( arg\binary_generic_expression.operands[1] ) AND is_sql_mappable( arg\
          binary_generic_expression.operands[2] ) );
    END_IF;
    IF ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.COMPARISON_EQUAL' IN TYPEOF( arg ) ) OR ( 
        'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.COMPARISON_GREATER'  IN TYPEOF( arg ) ) OR ( 
        'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.COMPARISON_GREATER_EQUAL'  IN TYPEOF( arg ) ) OR ( 
        'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.COMPARISON_LESS'  IN TYPEOF( arg ) ) OR ( 
        'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.COMPARISON_LESS_EQUAL'  IN TYPEOF( arg ) ) OR ( 
        'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.COMPARISON_NOT_EQUAL'  IN TYPEOF( arg ) ) OR ( 
        'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.LIKE_EXPRESSION'  IN TYPEOF( arg ) ) THEN
      RETURN( is_sql_mappable( arg\comparison_expression.operands[1] ) AND is_sql_mappable( arg\
          comparison_expression.operands[2] ) );
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.INTERVAL_EXPRESSION' IN TYPEOF( arg ) THEN
      RETURN( is_sql_mappable( arg\interval_expression.interval_low ) AND is_sql_mappable( arg\
          interval_expression.interval_high ) AND is_sql_mappable( arg\interval_expression.interval_item ) );
    END_IF;
    IF ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.NUMERIC_DEFINED_FUNCTION' IN TYPEOF( arg ) ) OR ( 
        'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.BOOLEAN_DEFINED_FUNCTION'  IN TYPEOF( arg ) ) OR ( 
        'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.STRING_DEFINED_FUNCTION'  IN TYPEOF( arg ) ) THEN
      RETURN( FALSE );
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SIMPLE_STRING_EXPRESSION' IN TYPEOF( arg ) THEN
      RETURN( TRUE );
    END_IF;
    IF ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.INDEX_EXPRESSION' IN TYPEOF( arg ) ) OR ( 
        'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SUBSTRING_EXPRESSION'  IN TYPEOF( arg ) ) OR ( 
        'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CONCAT_EXPRESSION'  IN TYPEOF( arg ) ) OR ( 
        'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.FORMAT_FUNCTION'  IN TYPEOF( arg ) ) THEN
      RETURN( FALSE );
    END_IF;
    RETURN( FALSE );

  END_FUNCTION; -- is_sql_mappable (line:42261 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func IS_SQL_MAPPABLE(_ ARG: eEXPRESSION? ) 
    -> SDAI.BOOLEAN? {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( ARG )
    if case .available(let _cached_value) = _is_sql_mappable__cache.cachedValue(params: _params) {
      return _cached_value as? SDAI.BOOLEAN
    }

    var ARG = ARG; SDAI.TOUCH(var: &ARG)

    
    let _TEMP1 = SDAI.TYPEOF(ARG, IS: eSIMPLE_NUMERIC_EXPRESSION.self)
    if SDAI.IS_TRUE( _TEMP1 ) {
      return _is_sql_mappable__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.TRUE))
    }
    
    let _TEMP2 = SDAI.TYPEOF(ARG, IS: eSQL_MAPPABLE_DEFINED_FUNCTION.self)
    if SDAI.IS_TRUE( _TEMP2 ) {
      return _is_sql_mappable__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.TRUE))
    }
    
    let _TEMP3 = SDAI.TYPEOF(ARG, IS: eMINUS_FUNCTION.self)
    if SDAI.IS_TRUE( _TEMP3 ) {
      
      let _TEMP4 = ARG?.GROUP_REF(eUNARY_NUMERIC_EXPRESSION.self)
      let _TEMP5 = _TEMP4?.OPERAND
      let _TEMP6 = IS_SQL_MAPPABLE(eEXPRESSION(/*eNUMERIC_EXPRESSION*/_TEMP5))
      return _is_sql_mappable__cache.updateCache(params: _params, value: _TEMP6)
    }
    
    let _TEMP7 = SDAI.TYPEOF(ARG, IS: eABS_FUNCTION.self)
    let _TEMP8 = SDAI.TYPEOF(ARG, IS: eSIN_FUNCTION.self)
    let _TEMP9 = _TEMP7 || _TEMP8
    let _TEMP10 = SDAI.TYPEOF(ARG, IS: eCOS_FUNCTION.self)
    let _TEMP11 = _TEMP9 || _TEMP10
    let _TEMP12 = SDAI.TYPEOF(ARG, IS: eTAN_FUNCTION.self)
    let _TEMP13 = _TEMP11 || _TEMP12
    let _TEMP14 = SDAI.TYPEOF(ARG, IS: eASIN_FUNCTION.self)
    let _TEMP15 = _TEMP13 || _TEMP14
    let _TEMP16 = SDAI.TYPEOF(ARG, IS: eACOS_FUNCTION.self)
    let _TEMP17 = _TEMP15 || _TEMP16
    let _TEMP18 = SDAI.TYPEOF(ARG, IS: eATAN_FUNCTION.self)
    let _TEMP19 = _TEMP17 || _TEMP18
    let _TEMP20 = SDAI.TYPEOF(ARG, IS: eEXP_FUNCTION.self)
    let _TEMP21 = _TEMP19 || _TEMP20
    let _TEMP22 = SDAI.TYPEOF(ARG, IS: eLOG_FUNCTION.self)
    let _TEMP23 = _TEMP21 || _TEMP22
    let _TEMP24 = SDAI.TYPEOF(ARG, IS: eLOG2_FUNCTION.self)
    let _TEMP25 = _TEMP23 || _TEMP24
    let _TEMP26 = SDAI.TYPEOF(ARG, IS: eLOG10_FUNCTION.self)
    let _TEMP27 = _TEMP25 || _TEMP26
    let _TEMP28 = SDAI.TYPEOF(ARG, IS: eSQUARE_ROOT_FUNCTION.self)
    let _TEMP29 = _TEMP27 || _TEMP28
    let _TEMP30 = SDAI.TYPEOF(ARG, IS: eVALUE_FUNCTION.self)
    let _TEMP31 = _TEMP29 || _TEMP30
    let _TEMP32 = SDAI.TYPEOF(ARG, IS: eLENGTH_FUNCTION.self)
    let _TEMP33 = _TEMP31 || _TEMP32
    if SDAI.IS_TRUE( _TEMP33 ) {
      return _is_sql_mappable__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
    }
    
    let _TEMP34 = SDAI.TYPEOF(ARG, IS: ePLUS_EXPRESSION.self)
    let _TEMP35 = SDAI.TYPEOF(ARG, IS: eMULT_EXPRESSION.self)
    let _TEMP36 = _TEMP34 || _TEMP35
    let _TEMP37 = SDAI.TYPEOF(ARG, IS: eMAXIMUM_FUNCTION.self)
    let _TEMP38 = _TEMP36 || _TEMP37
    let _TEMP39 = SDAI.TYPEOF(ARG, IS: eMINIMUM_FUNCTION.self)
    let _TEMP40 = _TEMP38 || _TEMP39
    if SDAI.IS_TRUE( _TEMP40 ) {
      if let incrementControl/*SDAI.INTEGER*/ = SDAI.FROM(/*SDAI.INTEGER*/1, TO:/*SDAI.INTEGER*/SDAI.SIZEOF(
        ARG?.GROUP_REF(eMULTIPLE_ARITY_NUMERIC_EXPRESSION.self)?.OPERANDS)) {
        for I in incrementControl {
          
          let _TEMP41 = ARG?.GROUP_REF(eMULTIPLE_ARITY_NUMERIC_EXPRESSION.self)
          let _TEMP42 = _TEMP41?.OPERANDS
          let _TEMP43 = _TEMP42?[I]
          let _TEMP44 = IS_SQL_MAPPABLE(eEXPRESSION(/*eNUMERIC_EXPRESSION*/_TEMP43))
          let _TEMP45 =  !_TEMP44
          if SDAI.IS_TRUE( _TEMP45 ) {
            return _is_sql_mappable__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
          }
        }
      }
      return _is_sql_mappable__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.TRUE))
    }
    
    let _TEMP46 = SDAI.TYPEOF(ARG, IS: eMINUS_EXPRESSION.self)
    let _TEMP47 = SDAI.TYPEOF(ARG, IS: eSLASH_EXPRESSION.self)
    let _TEMP48 = _TEMP46 || _TEMP47
    if SDAI.IS_TRUE( _TEMP48 ) {
      
      let _TEMP49 = ARG?.GROUP_REF(eBINARY_NUMERIC_EXPRESSION.self)
      let _TEMP50 = _TEMP49?.OPERANDS
      let _TEMP51 = _TEMP50?[1]
      let _TEMP52 = IS_SQL_MAPPABLE(eEXPRESSION(/*eNUMERIC_EXPRESSION*/_TEMP51))
      let _TEMP53 = ARG?.GROUP_REF(eBINARY_NUMERIC_EXPRESSION.self)
      let _TEMP54 = _TEMP53?.OPERANDS
      let _TEMP55 = _TEMP54?[2]
      let _TEMP56 = IS_SQL_MAPPABLE(eEXPRESSION(/*eNUMERIC_EXPRESSION*/_TEMP55))
      let _TEMP57 = _TEMP52 && _TEMP56
      return _is_sql_mappable__cache.updateCache(params: _params, value: SDAI.BOOLEAN(/*SDAI.LOGICAL*/_TEMP57))
    }
    
    let _TEMP58 = SDAI.TYPEOF(ARG, IS: eDIV_EXPRESSION.self)
    let _TEMP59 = SDAI.TYPEOF(ARG, IS: eMOD_EXPRESSION.self)
    let _TEMP60 = _TEMP58 || _TEMP59
    let _TEMP61 = SDAI.TYPEOF(ARG, IS: ePOWER_EXPRESSION.self)
    let _TEMP62 = _TEMP60 || _TEMP61
    if SDAI.IS_TRUE( _TEMP62 ) {
      return _is_sql_mappable__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
    }
    
    let _TEMP63 = SDAI.TYPEOF(ARG, IS: eSIMPLE_BOOLEAN_EXPRESSION.self)
    if SDAI.IS_TRUE( _TEMP63 ) {
      return _is_sql_mappable__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.TRUE))
    }
    
    let _TEMP64 = SDAI.TYPEOF(ARG, IS: eNOT_EXPRESSION.self)
    if SDAI.IS_TRUE( _TEMP64 ) {
      
      let _TEMP65 = ARG?.GROUP_REF(eUNARY_GENERIC_EXPRESSION.self)
      let _TEMP66 = _TEMP65?.OPERAND
      let _TEMP67 = IS_SQL_MAPPABLE(eEXPRESSION(/*eGENERIC_EXPRESSION*/_TEMP66))
      return _is_sql_mappable__cache.updateCache(params: _params, value: _TEMP67)
    }
    
    let _TEMP68 = SDAI.TYPEOF(ARG, IS: eODD_FUNCTION.self)
    let _TEMP69 = SDAI.TYPEOF(ARG, IS: eXOR_EXPRESSION.self)
    let _TEMP70 = _TEMP68 || _TEMP69
    if SDAI.IS_TRUE( _TEMP70 ) {
      return _is_sql_mappable__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
    }
    
    let _TEMP71 = SDAI.TYPEOF(ARG, IS: eAND_EXPRESSION.self)
    let _TEMP72 = SDAI.TYPEOF(ARG, IS: eOR_EXPRESSION.self)
    let _TEMP73 = _TEMP71 || _TEMP72
    if SDAI.IS_TRUE( _TEMP73 ) {
      if let incrementControl/*SDAI.INTEGER*/ = SDAI.FROM(/*SDAI.INTEGER*/1, TO:/*SDAI.INTEGER*/SDAI.SIZEOF(
        ARG?.GROUP_REF(eMULTIPLE_ARITY_BOOLEAN_EXPRESSION.self)?.OPERANDS)) {
        for I in incrementControl {
          
          let _TEMP74 = ARG?.GROUP_REF(eMULTIPLE_ARITY_BOOLEAN_EXPRESSION.self)
          let _TEMP75 = _TEMP74?.OPERANDS
          let _TEMP76 = _TEMP75?[I]
          let _TEMP77 = IS_SQL_MAPPABLE(eEXPRESSION(/*eBOOLEAN_EXPRESSION*/_TEMP76))
          let _TEMP78 =  !_TEMP77
          if SDAI.IS_TRUE( _TEMP78 ) {
            return _is_sql_mappable__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
          }
        }
      }
      return _is_sql_mappable__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.TRUE))
    }
    
    let _TEMP79 = SDAI.TYPEOF(ARG, IS: eEQUALS_EXPRESSION.self)
    if SDAI.IS_TRUE( _TEMP79 ) {
      
      let _TEMP80 = ARG?.GROUP_REF(eBINARY_GENERIC_EXPRESSION.self)
      let _TEMP81 = _TEMP80?.OPERANDS
      let _TEMP82 = _TEMP81?[1]
      let _TEMP83 = IS_SQL_MAPPABLE(eEXPRESSION(/*eGENERIC_EXPRESSION*/_TEMP82))
      let _TEMP84 = ARG?.GROUP_REF(eBINARY_GENERIC_EXPRESSION.self)
      let _TEMP85 = _TEMP84?.OPERANDS
      let _TEMP86 = _TEMP85?[2]
      let _TEMP87 = IS_SQL_MAPPABLE(eEXPRESSION(/*eGENERIC_EXPRESSION*/_TEMP86))
      let _TEMP88 = _TEMP83 && _TEMP87
      return _is_sql_mappable__cache.updateCache(params: _params, value: SDAI.BOOLEAN(/*SDAI.LOGICAL*/_TEMP88))
    }
    
    let _TEMP89 = SDAI.TYPEOF(ARG, IS: eCOMPARISON_EQUAL.self)
    let _TEMP90 = SDAI.TYPEOF(ARG, IS: eCOMPARISON_GREATER.self)
    let _TEMP91 = _TEMP89 || _TEMP90
    let _TEMP92 = SDAI.TYPEOF(ARG, IS: eCOMPARISON_GREATER_EQUAL.self)
    let _TEMP93 = _TEMP91 || _TEMP92
    let _TEMP94 = SDAI.TYPEOF(ARG, IS: eCOMPARISON_LESS.self)
    let _TEMP95 = _TEMP93 || _TEMP94
    let _TEMP96 = SDAI.TYPEOF(ARG, IS: eCOMPARISON_LESS_EQUAL.self)
    let _TEMP97 = _TEMP95 || _TEMP96
    let _TEMP98 = SDAI.TYPEOF(ARG, IS: eCOMPARISON_NOT_EQUAL.self)
    let _TEMP99 = _TEMP97 || _TEMP98
    let _TEMP100 = SDAI.TYPEOF(ARG, IS: eLIKE_EXPRESSION.self)
    let _TEMP101 = _TEMP99 || _TEMP100
    if SDAI.IS_TRUE( _TEMP101 ) {
      
      let _TEMP102 = ARG?.GROUP_REF(eCOMPARISON_EXPRESSION.self)
      let _TEMP103 = _TEMP102?.OPERANDS
      let _TEMP104 = _TEMP103?[1]
      let _TEMP105 = IS_SQL_MAPPABLE(_TEMP104)
      let _TEMP106 = ARG?.GROUP_REF(eCOMPARISON_EXPRESSION.self)
      let _TEMP107 = _TEMP106?.OPERANDS
      let _TEMP108 = _TEMP107?[2]
      let _TEMP109 = IS_SQL_MAPPABLE(_TEMP108)
      let _TEMP110 = _TEMP105 && _TEMP109
      return _is_sql_mappable__cache.updateCache(params: _params, value: SDAI.BOOLEAN(/*SDAI.LOGICAL*/
        _TEMP110))
    }
    
    let _TEMP111 = SDAI.TYPEOF(ARG, IS: eINTERVAL_EXPRESSION.self)
    if SDAI.IS_TRUE( _TEMP111 ) {
      
      let _TEMP112 = ARG?.GROUP_REF(eINTERVAL_EXPRESSION.self)
      let _TEMP113 = _TEMP112?.INTERVAL_LOW
      let _TEMP114 = IS_SQL_MAPPABLE(eEXPRESSION(/*eGENERIC_EXPRESSION*/_TEMP113))
      let _TEMP115 = ARG?.GROUP_REF(eINTERVAL_EXPRESSION.self)
      let _TEMP116 = _TEMP115?.INTERVAL_HIGH
      let _TEMP117 = IS_SQL_MAPPABLE(eEXPRESSION(/*eGENERIC_EXPRESSION*/_TEMP116))
      let _TEMP118 = _TEMP114 && _TEMP117
      let _TEMP119 = ARG?.GROUP_REF(eINTERVAL_EXPRESSION.self)
      let _TEMP120 = _TEMP119?.INTERVAL_ITEM
      let _TEMP121 = IS_SQL_MAPPABLE(eEXPRESSION(/*eGENERIC_EXPRESSION*/_TEMP120))
      let _TEMP122 = _TEMP118 && _TEMP121
      return _is_sql_mappable__cache.updateCache(params: _params, value: SDAI.BOOLEAN(/*SDAI.LOGICAL*/
        _TEMP122))
    }
    
    let _TEMP123 = SDAI.TYPEOF(ARG, IS: eNUMERIC_DEFINED_FUNCTION.self)
    let _TEMP124 = SDAI.TYPEOF(ARG, IS: eBOOLEAN_DEFINED_FUNCTION.self)
    let _TEMP125 = _TEMP123 || _TEMP124
    let _TEMP126 = SDAI.TYPEOF(ARG, IS: eSTRING_DEFINED_FUNCTION.self)
    let _TEMP127 = _TEMP125 || _TEMP126
    if SDAI.IS_TRUE( _TEMP127 ) {
      return _is_sql_mappable__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
    }
    
    let _TEMP128 = SDAI.TYPEOF(ARG, IS: eSIMPLE_STRING_EXPRESSION.self)
    if SDAI.IS_TRUE( _TEMP128 ) {
      return _is_sql_mappable__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.TRUE))
    }
    
    let _TEMP129 = SDAI.TYPEOF(ARG, IS: eINDEX_EXPRESSION.self)
    let _TEMP130 = SDAI.TYPEOF(ARG, IS: eSUBSTRING_EXPRESSION.self)
    let _TEMP131 = _TEMP129 || _TEMP130
    let _TEMP132 = SDAI.TYPEOF(ARG, IS: eCONCAT_EXPRESSION.self)
    let _TEMP133 = _TEMP131 || _TEMP132
    let _TEMP134 = SDAI.TYPEOF(ARG, IS: eFORMAT_FUNCTION.self)
    let _TEMP135 = _TEMP133 || _TEMP134
    if SDAI.IS_TRUE( _TEMP135 ) {
      return _is_sql_mappable__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
    }
    return _is_sql_mappable__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
  }

}

//MARK: - function result cache
private var _is_sql_mappable__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

