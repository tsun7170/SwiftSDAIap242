/* file: invalidate_vrep_item.swift 	 generated: Mon Jan  3 16:32:52 2022 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.1, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION invalidate_vrep_item(
               item : variational_representation_item
           ) : BOOLEAN;

    LOCAL
      reps : SET [1 : ?] OF representation := using_representations( item );
      svri : SET [1 : ?] OF variational_representation_item;
      iar  : instance_attribute_reference;
      n    : INTEGER := HIINDEX( reps );
    END_LOCAL;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.BOUND_VARIATIONAL_PARAMETER' IN TYPEOF( item ) THEN
      IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.INSTANCE_ATTRIBUTE_REFERENCE' IN TYPEOF( item\
          generic_variable.interpretation\environment.semantics ) THEN

        BEGIN
          iar := item\generic_variable.interpretation\environment.semantics;
          IF reps <> using_representations( iar\instance_attribute_reference.owning_instance ) THEN
            RETURN( TRUE );
          END_IF;
        END;
      ELSE
        RETURN( TRUE );
      END_IF;
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.UNBOUND_VARIATIONAL_PARAMETER' IN TYPEOF( item )
        THEN

      BEGIN
        REPEAT i := 1 TO n BY 1;
          svri := QUERY ( q <* reps[i]\representation.items | ( 
              'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.FREE_FORM_CONSTRAINT'  IN TYPEOF( q ) ) );
          IF SIZEOF( QUERY ( r <* svri | ( item IN ( r\free_form_constraint.reference_elements + r\
              free_form_constraint.constrained_elements ) ) ) ) = 0 THEN
            RETURN( TRUE );
          END_IF;
        END_REPEAT;
      END;
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.FIXED_INSTANCE_ATTRIBUTE_SET' IN TYPEOF( item ) THEN
      REPEAT i := 1 TO SIZEOF( item\fixed_instance_attribute_set.fixed_attributes ) BY 1;
        IF reps <> using_representations( item\fixed_instance_attribute_set.fixed_attributes[i]\
            instance_attribute_reference.owning_instance ) THEN
          RETURN( TRUE );
        END_IF;
      END_REPEAT;
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.EXPLICIT_CONSTRAINT' IN TYPEOF( item ) THEN
      IF SIZEOF( QUERY ( q <* ( item\explicit_constraint.reference_elements + item\explicit_constraint.
          constrained_elements ) | ( reps <> using_representations( q ) ) ) ) > 0 THEN
        RETURN( TRUE );
      END_IF;
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.AUXILIARY_GEOMETRIC_REPRESENTATION_ITEM' IN TYPEOF( 
        item ) THEN

      BEGIN
        REPEAT i := 1 TO n BY 1;
          svri := QUERY ( q <* reps[i]\representation.items | ( 
              'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.EXPLICIT_GEOMETRIC_CONSTRAINT'  IN TYPEOF( q ) ) );
          IF SIZEOF( QUERY ( r <* svri | ( item IN r\explicit_geometric_constraint.reference_elements ) ) ) =
              0 THEN
            RETURN( TRUE );
          END_IF;
        END_REPEAT;
      END;
    END_IF;
    RETURN( FALSE );

  END_FUNCTION; -- invalidate_vrep_item (line:42092 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func INVALIDATE_VREP_ITEM(_ ITEM: eVARIATIONAL_REPRESENTATION_ITEM? ) 
    -> SDAI.BOOLEAN? {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( ITEM )
    if case .available(let _cached_value) = _invalidate_vrep_item__cache.cachedValue(params: _params) {
      return _cached_value as? SDAI.BOOLEAN
    }

    var ITEM = ITEM; SDAI.TOUCH(var: &ITEM)

    //LOCAL
    var REPS: (SDAI.SET<eREPRESENTATION>/*[1:nil]*/ )?  = SDAI.SET<eREPRESENTATION>(
                                                          bound1: SDAI.UNWRAP(SDAI.INTEGER(1)), bound2: (nil as 
                                                          SDAI.INTEGER?), 
                                                          /*SDAI.SET<eREPRESENTATION>*/USING_REPRESENTATIONS(
                                                          sFOUNDED_ITEM_SELECT(/*
                                                          eVARIATIONAL_REPRESENTATION_ITEM*/ITEM))); SDAI.TOUCH(var: &REPS)
    var SVRI: (SDAI.SET<eVARIATIONAL_REPRESENTATION_ITEM>/*[1:nil]*/ )? 
    var IAR: eINSTANCE_ATTRIBUTE_REFERENCE? 
    var N: SDAI.INTEGER?  = SDAI.HIINDEX(REPS); SDAI.TOUCH(var: &N)
    //END_LOCAL

    
    let _TEMP1 = SDAI.TYPEOF(ITEM, IS: eBOUND_VARIATIONAL_PARAMETER.self)
    if SDAI.IS_TRUE( _TEMP1 ) {
      
      let _TEMP2 = SDAI.TYPEOF(ITEM?.GROUP_REF(eGENERIC_VARIABLE.self)?.INTERPRETATION?.GROUP_REF(
        eENVIRONMENT.self)?.SEMANTICS, IS: eINSTANCE_ATTRIBUTE_REFERENCE.self)
      if SDAI.IS_TRUE( _TEMP2 ) {
        //BEGIN
        
        let _TEMP3 = ITEM?.GROUP_REF(eGENERIC_VARIABLE.self)
        let _TEMP4 = _TEMP3?.INTERPRETATION
        let _TEMP5 = _TEMP4?.GROUP_REF(eENVIRONMENT.self)
        let _TEMP6 = _TEMP5?.SEMANTICS
        IAR = eINSTANCE_ATTRIBUTE_REFERENCE(/*eVARIABLE_SEMANTICS*/_TEMP6)
        
        let _TEMP7 = IAR?.GROUP_REF(eINSTANCE_ATTRIBUTE_REFERENCE.self)
        let _TEMP8 = _TEMP7?.OWNING_INSTANCE
        let _TEMP9 = USING_REPRESENTATIONS(sFOUNDED_ITEM_SELECT(/*eREPRESENTATION_ITEM*/_TEMP8))
        let _TEMP10 = REPS .!=. _TEMP9
        if SDAI.IS_TRUE( _TEMP10 ) {
          return _invalidate_vrep_item__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.TRUE))
        }
        //END
      }
      else {
        return _invalidate_vrep_item__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.TRUE))
      }
    }
    
    let _TEMP11 = SDAI.TYPEOF(ITEM, IS: eUNBOUND_VARIATIONAL_PARAMETER.self)
    if SDAI.IS_TRUE( _TEMP11 ) {
      //BEGIN
      if let incrementControl/*SDAI.INTEGER*/ = SDAI.FROM(/*SDAI.INTEGER*/1, TO:/*SDAI.INTEGER*/N) {
        for I in incrementControl {
          
          let _TEMP12 = REPS?[I]
          let _TEMP13 = _TEMP12?.GROUP_REF(eREPRESENTATION.self)
          let _TEMP14 = _TEMP13?.ITEMS
          let _TEMP15 = _TEMP14?.QUERY{ Q in 

              let _TEMP1 = SDAI.TYPEOF(Q, IS: eFREE_FORM_CONSTRAINT.self)
              return _TEMP1 }
          SVRI = SDAI.SET<eVARIATIONAL_REPRESENTATION_ITEM>(bound1: SDAI.UNWRAP(SDAI.INTEGER(1)), bound2: (nil as 
            SDAI.INTEGER?), /*SDAI.SET<eREPRESENTATION_ITEM>[1:nil] */_TEMP15)
          
          let _TEMP16 = SVRI?.QUERY{ R in 

              let _TEMP1 = R.GROUP_REF(eFREE_FORM_CONSTRAINT.self)
              let _TEMP2 = _TEMP1?.REFERENCE_ELEMENTS
              let _TEMP3 = R.GROUP_REF(eFREE_FORM_CONSTRAINT.self)
              let _TEMP4 = _TEMP3?.CONSTRAINED_ELEMENTS
              let _TEMP5 = _TEMP2 + _TEMP4
              let _TEMP6 = SDAI.aggregate(_TEMP5, contains: eVARIATIONAL_PARAMETER(/*
                eVARIATIONAL_REPRESENTATION_ITEM*/ITEM))
              return _TEMP6 }
          let _TEMP17 = SDAI.SIZEOF(_TEMP16)
          let _TEMP18 = _TEMP17 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
          if SDAI.IS_TRUE( _TEMP18 ) {
            return _invalidate_vrep_item__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.TRUE))
          }
        }
      }
      //END
    }
    
    let _TEMP19 = SDAI.TYPEOF(ITEM, IS: eFIXED_INSTANCE_ATTRIBUTE_SET.self)
    if SDAI.IS_TRUE( _TEMP19 ) {
      if let incrementControl/*SDAI.INTEGER*/ = SDAI.FROM(/*SDAI.INTEGER*/1, TO:/*SDAI.INTEGER*/SDAI.SIZEOF(
        ITEM?.GROUP_REF(eFIXED_INSTANCE_ATTRIBUTE_SET.self)?.FIXED_ATTRIBUTES)) {
        for I in incrementControl {
          
          let _TEMP20 = ITEM?.GROUP_REF(eFIXED_INSTANCE_ATTRIBUTE_SET.self)
          let _TEMP21 = _TEMP20?.FIXED_ATTRIBUTES
          let _TEMP22 = _TEMP21?[I]
          let _TEMP23 = _TEMP22?.GROUP_REF(eINSTANCE_ATTRIBUTE_REFERENCE.self)
          let _TEMP24 = _TEMP23?.OWNING_INSTANCE
          let _TEMP25 = USING_REPRESENTATIONS(sFOUNDED_ITEM_SELECT(/*eREPRESENTATION_ITEM*/_TEMP24))
          let _TEMP26 = REPS .!=. _TEMP25
          if SDAI.IS_TRUE( _TEMP26 ) {
            return _invalidate_vrep_item__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.TRUE))
          }
        }
      }
    }
    
    let _TEMP27 = SDAI.TYPEOF(ITEM, IS: eEXPLICIT_CONSTRAINT.self)
    if SDAI.IS_TRUE( _TEMP27 ) {
      
      let _TEMP28 = ITEM?.GROUP_REF(eEXPLICIT_CONSTRAINT.self)
      let _TEMP29 = _TEMP28?.REFERENCE_ELEMENTS
      let _TEMP30 = ITEM?.GROUP_REF(eEXPLICIT_CONSTRAINT.self)
      let _TEMP31 = _TEMP30?.CONSTRAINED_ELEMENTS
      let _TEMP32 = _TEMP29 + _TEMP31
      let _TEMP33 = _TEMP32?.QUERY{ Q in 

          let _TEMP1 = USING_REPRESENTATIONS(sFOUNDED_ITEM_SELECT(/*eREPRESENTATION_ITEM*/Q))
          let _TEMP2 = REPS .!=. _TEMP1
          return _TEMP2 }
      let _TEMP34 = SDAI.SIZEOF(_TEMP33)
      let _TEMP35 = _TEMP34 > SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      if SDAI.IS_TRUE( _TEMP35 ) {
        return _invalidate_vrep_item__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.TRUE))
      }
    }
    
    let _TEMP36 = SDAI.TYPEOF(ITEM, IS: eAUXILIARY_GEOMETRIC_REPRESENTATION_ITEM.self)
    if SDAI.IS_TRUE( _TEMP36 ) {
      //BEGIN
      if let incrementControl/*SDAI.INTEGER*/ = SDAI.FROM(/*SDAI.INTEGER*/1, TO:/*SDAI.INTEGER*/N) {
        for I in incrementControl {
          
          let _TEMP37 = REPS?[I]
          let _TEMP38 = _TEMP37?.GROUP_REF(eREPRESENTATION.self)
          let _TEMP39 = _TEMP38?.ITEMS
          let _TEMP40 = _TEMP39?.QUERY{ Q in 

              let _TEMP1 = SDAI.TYPEOF(Q, IS: eEXPLICIT_GEOMETRIC_CONSTRAINT.self)
              return _TEMP1 }
          SVRI = SDAI.SET<eVARIATIONAL_REPRESENTATION_ITEM>(bound1: SDAI.UNWRAP(SDAI.INTEGER(1)), bound2: (nil as 
            SDAI.INTEGER?), /*SDAI.SET<eREPRESENTATION_ITEM>[1:nil] */_TEMP40)
          
          let _TEMP41 = SVRI?.QUERY{ R in 

              let _TEMP1 = R.GROUP_REF(eEXPLICIT_GEOMETRIC_CONSTRAINT.self)
              let _TEMP2 = _TEMP1?.REFERENCE_ELEMENTS
              let _TEMP3 = SDAI.aggregate(_TEMP2, contains: eGEOMETRIC_REPRESENTATION_ITEM(/*
                eVARIATIONAL_REPRESENTATION_ITEM*/ITEM))
              return _TEMP3 }
          let _TEMP42 = SDAI.SIZEOF(_TEMP41)
          let _TEMP43 = _TEMP42 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
          if SDAI.IS_TRUE( _TEMP43 ) {
            return _invalidate_vrep_item__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.TRUE))
          }
        }
      }
      //END
    }
    return _invalidate_vrep_item__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
  }

}

//MARK: - function result cache
private var _invalidate_vrep_item__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

