/* file: make_numeric_set.swift 	 generated: Sat Aug 14 13:46:02 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION make_numeric_set(
               start, delta : maths_number;
               incs : positive_integer
           ) : SET [2 : ?] OF maths_number;

    LOCAL
      numeric_set : SET [2 : ?] OF maths_number := [start, start + delta];
    END_LOCAL;
    IF incs > 1 THEN
      REPEAT i := 2 TO incs BY 1;
        numeric_set := numeric_set + start + ( i * delta );
      END_REPEAT;
    END_IF;
    RETURN( numeric_set );

  END_FUNCTION; -- make_numeric_set (line:42644 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func MAKE_NUMERIC_SET(START: tMATHS_NUMBER? , DELTA: tMATHS_NUMBER? , INCS: tPOSITIVE_INTEGER? ) 
    -> (SDAI.SET<tMATHS_NUMBER>/*[2:nil]*/ )? {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( START, DELTA, INCS )
    if case .available(let _cached_value) = _make_numeric_set__cache.cachedValue(params: _params) {
      return _cached_value as? SDAI.SET<tMATHS_NUMBER>
    }

    var START = START; SDAI.TOUCH(var: &START)
    var DELTA = DELTA; SDAI.TOUCH(var: &DELTA)
    var INCS = INCS; SDAI.TOUCH(var: &INCS)

    //LOCAL
    var NUMERIC_SET: (SDAI.SET<tMATHS_NUMBER>/*[2:nil]*/ )?  = SDAI.SET<tMATHS_NUMBER>(
                                                               bound1: SDAI.UNWRAP(SDAI.INTEGER(2)), bound2: (nil as 
                                                               SDAI.INTEGER?), 
                                                               ([
                                                               SDAI.AIE(START), 
                                                               SDAI.AIE(tMATHS_NUMBER(/*SDAI.INTEGER*/START
                                                               + DELTA))] 
                                                               as [SDAI.AggregationInitializerElement<
                                                               tMATHS_NUMBER>])); SDAI.TOUCH(var: &NUMERIC_SET)

    
    let _TEMP1 = INCS > SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
    if SDAI.IS_TRUE( _TEMP1 ) {
      if let incrementControl/*SDAI.INTEGER*/ = SDAI.FROM(/*SDAI.INTEGER*/2, TO:/*tPOSITIVE_INTEGER*/INCS) {
        for I in incrementControl {
          
          let _TEMP2 = SDAI.FORCE_OPTIONAL(I) * DELTA
          let _TEMP3 = START + _TEMP2
          let _TEMP4 = NUMERIC_SET + _TEMP3
          NUMERIC_SET = SDAI.SET<tMATHS_NUMBER>(bound1: SDAI.UNWRAP(SDAI.INTEGER(2)), bound2: (nil as SDAI.INTEGER?), 
            /*SDAI.SET<SDAI.NUMBER>*/_TEMP4)
        }
      }
    }
    return _make_numeric_set__cache.updateCache(params: _params, value: NUMERIC_SET)
  }

}

//MARK: - function result cache
private var _make_numeric_set__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

