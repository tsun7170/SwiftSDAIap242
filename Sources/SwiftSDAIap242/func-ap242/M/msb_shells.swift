/* file: msb_shells.swift 	 generated: Sun Oct 31 15:32:10 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION msb_shells(
               brep : manifold_solid_brep
           ) : SET [1 : ?] OF closed_shell;

    LOCAL
      return_set : SET [1 : ?] OF closed_shell := [brep.outer];
    END_LOCAL;
    IF SIZEOF( QUERY ( msbtype <* TYPEOF( brep ) | ( msbtype LIKE '*BREP_WITH_VOIDS' ) ) ) >= 1 THEN
      return_set := return_set + brep\brep_with_voids.voids;
    END_IF;
    RETURN( return_set );

  END_FUNCTION; -- msb_shells (line:43323 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func MSB_SHELLS(_ BREP: eMANIFOLD_SOLID_BREP? ) 
    -> (SDAI.SET<eCLOSED_SHELL>/*[1:nil]*/ )? {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( BREP )
    if case .available(let _cached_value) = _msb_shells__cache.cachedValue(params: _params) {
      return _cached_value as? SDAI.SET<eCLOSED_SHELL>
    }

    var BREP = BREP; SDAI.TOUCH(var: &BREP)

    //LOCAL
    var RETURN_SET: (SDAI.SET<eCLOSED_SHELL>/*[1:nil]*/ )?  = SDAI.SET<eCLOSED_SHELL>(
                                                              bound1: SDAI.UNWRAP(SDAI.INTEGER(1)), bound2: (nil as 
                                                              SDAI.INTEGER?), 
                                                              ([
                                                              SDAI.AIE(BREP?.OUTER)] 
                                                              as [SDAI.AggregationInitializerElement<
                                                              eCLOSED_SHELL>])); SDAI.TOUCH(var: &RETURN_SET)

    
    let _TEMP1 = SDAI.TYPEOF(BREP)
    let _TEMP2 = _TEMP1.QUERY{ MSBTYPE in 

        let _TEMP1 = MSBTYPE.ISLIKE( PATTERN: "*BREP_WITH_VOIDS" )
        return _TEMP1 }
    let _TEMP3 = SDAI.SIZEOF(_TEMP2)
    let _TEMP4 = _TEMP3 >= SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
    if SDAI.IS_TRUE( _TEMP4 ) {
      
      let _TEMP5 = BREP?.GROUP_REF(eBREP_WITH_VOIDS.self)
      let _TEMP6 = _TEMP5?.VOIDS
      let _TEMP7 = SDAI.SET<SDAI.GENERIC_ENTITY>(bound1: SDAI.UNWRAP(SDAI.INTEGER(1)), bound2: (nil as SDAI.INTEGER?), 
        /*SDAI.SET<eCLOSED_SHELL>[1:nil] */RETURN_SET) + SDAI.SET<SDAI.GENERIC_ENTITY>(
        bound1: SDAI.UNWRAP(SDAI.INTEGER(1)), bound2: (nil as SDAI.INTEGER?), 
        /*SDAI.SET<eORIENTED_CLOSED_SHELL>[1:nil] */_TEMP6)
      RETURN_SET = SDAI.SET<eCLOSED_SHELL>(bound1: SDAI.UNWRAP(SDAI.INTEGER(1)), bound2: (nil as SDAI.INTEGER?), 
        /*SDAI.SET<SDAI.GENERIC_ENTITY>*/_TEMP7)
    }
    return _msb_shells__cache.updateCache(params: _params, value: RETURN_SET)
  }

}

//MARK: - function result cache
private var _msb_shells__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

