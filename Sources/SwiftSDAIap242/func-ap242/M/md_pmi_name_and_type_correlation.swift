/* file: md_pmi_name_and_type_correlation.swift 	 generated: Sat Aug 14 13:46:02 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION md_pmi_name_and_type_correlation(
               input : annotation_placeholder_occurrence
           ) : BOOLEAN;

    LOCAL
      pmi_role : STRING := input\annotation_placeholder_occurrence.item\representation_item.name;
      dmiawps  : SET OF draughting_model_item_association_with_placeholder := input\
                  annotation_placeholder_occurrence.the_draughting_model_item_association_with_placeholders;
      v        : SET OF STRING := [];
    END_LOCAL;
    IF SIZEOF( dmiawps ) = 1 THEN
      v := TYPEOF( dmiawps[1]\draughting_model_item_association_with_placeholder.definition );
    ELSE
      RETURN( FALSE );
    END_IF;
    IF NOT ( pmi_role IN [ 'angular dimension', 'angularity', 'circular runout', 'circularity', 'coaxiality', 
        'concentricity' , 'curve dimension', 'cylindricity', 'datum', 'datum target', 'diameter dimension', 
        'flatness' , 'general dimension', 'general note', 'general tolerance', 'label', 'linear dimension', 
        'note' , 'ordinate dimension', 'parallelism', 'perpendicularity', 'position', 'profile of line', 
        'profile of surface' , 'radial dimension', 'roundness', 'runout', 'straightness', 'surface roughness', 
        'symmetry' , 'total runout'] ) THEN
      RETURN( ? );
    END_IF;
    CASE pmi_role OF
      'angular dimension'         :         IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
            + 'ANGULAR_LOCATION'  IN v THEN
          RETURN( TRUE );
        END_IF;
      'angularity'                :         IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
            + 'ANGULARITY_TOLERANCE'  IN v THEN
          RETURN( TRUE );
        END_IF;
      'circular runout'           :         IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
            + 'CIRCULAR_RUNOUT_TOLERANCE'  IN v THEN
          RETURN( TRUE );
        END_IF;
      'circularity'               :         IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
            + 'ROUNDNESS_TOLERANCE'  IN v THEN
          RETURN( TRUE );
        END_IF;
      'coaxiality'                :         IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
            + 'COAXIALITY_TOLERANCE'  IN v THEN
          RETURN( TRUE );
        END_IF;
      'concentricity'             :         IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
            + 'CONCENTRICITY_TOLERANCE'  IN v THEN
          RETURN( TRUE );
        END_IF;
      'curve dimension'           :         IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
            + 'DIMENSIONAL_SIZE'  IN v THEN
          RETURN( TRUE );
        END_IF;
      'cylindricity'              :         IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
            + 'CYLINDRICITY_TOLERANCE'  IN v THEN
          RETURN( TRUE );
        END_IF;
      'datum'                     :         IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.DATUM' IN v
            THEN
          RETURN( TRUE );
        END_IF;
      'datum target'              :         IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.DATUM_TARGET' 
            IN v THEN
          RETURN( TRUE );
        END_IF;
      'diameter dimension'        :         IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
            + 'DIMENSIONAL_SIZE'  IN v THEN
          RETURN( TRUE );
        END_IF;
      'flatness'                  :         IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
            + 'FLATNESS_TOLERANCE'  IN v THEN
          RETURN( TRUE );
        END_IF;
      'general dimension'         :         IF SIZEOF( [ 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
            + 'DIMENSIONAL_SIZE' , 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.DIMENSIONAL_LOCATION'] * 
            v ) = 1 THEN
          RETURN( TRUE );
        END_IF;
      'general note'              :         IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
            + 'PROPERTY_DEFINITION'  IN v THEN
          RETURN( TRUE );
        END_IF;
      'general tolerance'         :         IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
            + 'GEOMETRIC_TOLERANCE'  IN v THEN
          RETURN( TRUE );
        END_IF;
      'label'                     :         IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
            + 'PROPERTY_DEFINITION'  IN v THEN
          RETURN( TRUE );
        END_IF;
      'linear dimension'          :         IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
            + 'DIMENSIONAL_SIZE'  IN v THEN
          RETURN( TRUE );
        END_IF;
      'note'                      :         IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
            + 'PROPERTY_DEFINITION'  IN v THEN
          RETURN( TRUE );
        END_IF;
      'ordinate dimension'        :         IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
            + 'DIMENSIONAL_SIZE'  IN v THEN
          RETURN( TRUE );
        END_IF;
      'parallelism'               :         IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
            + 'PARALLELISM_TOLERANCE'  IN v THEN
          RETURN( TRUE );
        END_IF;
      'perpendicularity'          :         IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
            + 'PERPENDICULARITY_TOLERANCE'  IN v THEN
          RETURN( TRUE );
        END_IF;
      'position'                  :         IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
            + 'POSITION_TOLERANCE'  IN v THEN
          RETURN( TRUE );
        END_IF;
      'profile of line'           :         IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
            + 'LINE_PROFILE_TOLERANCE'  IN v THEN
          RETURN( TRUE );
        END_IF;
      'profile of surface'        :         IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
            + 'SURFACE_PROFILE_TOLERANCE'  IN v THEN
          RETURN( TRUE );
        END_IF;
      'radial dimension'          :         IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
            + 'DIMENSIONAL_SIZE'  IN v THEN
          RETURN( TRUE );
        END_IF;
      'roundness'                 :         IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
            + 'ROUNDNESS_TOLERANCE'  IN v THEN
          RETURN( TRUE );
        END_IF;
      'runout'                    :         IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
            + 'TOTAL_RUNOUT_TOLERANCE'  IN v THEN
          RETURN( TRUE );
        END_IF;
      'straightness'              :         IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
            + 'STRAIGHTNESS_TOLERANCE'  IN v THEN
          RETURN( TRUE );
        END_IF;
      'surface roughness'         :         IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
            + 'PROPERTY_DEFINITION'  IN v THEN
          RETURN( TRUE );
        END_IF;
      'symmetry'                  :         IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
            + 'SYMMETRY_TOLERANCE'  IN v THEN
          RETURN( TRUE );
        END_IF;
      'total runout'              :         IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
            + 'TOTAL_RUNOUT_TOLERANCE'  IN v THEN
          RETURN( TRUE );
        END_IF;
      OTHERWISE                   :         RETURN( FALSE );
    END_CASE;
    RETURN( FALSE );

  END_FUNCTION; -- md_pmi_name_and_type_correlation (line:42731 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func MD_PMI_NAME_AND_TYPE_CORRELATION(
    _ INPUT: eANNOTATION_PLACEHOLDER_OCCURRENCE? ) 
    -> SDAI.BOOLEAN? {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( INPUT )
    if case .available(let _cached_value) = _md_pmi_name_and_type_correlation__cache.cachedValue(params: _params) {
      return _cached_value as? SDAI.BOOLEAN
    }

    var INPUT = INPUT; SDAI.TOUCH(var: &INPUT)

    //LOCAL
    var PMI_ROLE: SDAI.STRING?  = SDAI.STRING(/*tLABEL*/INPUT?.GROUP_REF(eANNOTATION_PLACEHOLDER_OCCURRENCE.self)?
                                  .ITEM.GROUP_REF(eREPRESENTATION_ITEM.self)?.NAME); SDAI.TOUCH(var: &PMI_ROLE)
    var DMIAWPS: SDAI.SET<eDRAUGHTING_MODEL_ITEM_ASSOCIATION_WITH_PLACEHOLDER>?  = 
      SDAI.SET<eDRAUGHTING_MODEL_ITEM_ASSOCIATION_WITH_PLACEHOLDER>(/*SDAI.SET<
      eDRAUGHTING_MODEL_ITEM_ASSOCIATION_WITH_PLACEHOLDER>[0:1] */INPUT?.GROUP_REF(
      eANNOTATION_PLACEHOLDER_OCCURRENCE.self)?.THE_DRAUGHTING_MODEL_ITEM_ASSOCIATION_WITH_PLACEHOLDERS); SDAI.TOUCH(var: &DMIAWPS)
    var V: SDAI.SET<SDAI.STRING>?  = SDAI.SET<SDAI.STRING>(SDAI.EMPLY_AGGREGATE); SDAI.TOUCH(var: &V)
    //END_LOCAL

    
    let _TEMP1 = SDAI.SIZEOF(DMIAWPS)
    let _TEMP2 = _TEMP1 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
    if SDAI.IS_TRUE( _TEMP2 ) {
      
      let _TEMP3 = DMIAWPS?[1]
      let _TEMP4 = _TEMP3?.GROUP_REF(eDRAUGHTING_MODEL_ITEM_ASSOCIATION_WITH_PLACEHOLDER.self)
      let _TEMP5 = _TEMP4?.DEFINITION
      let _TEMP6 = SDAI.TYPEOF(_TEMP5)
      V = _TEMP6
    }
    else {
      return _md_pmi_name_and_type_correlation__cache.updateCache(params: _params, value: SDAI.BOOLEAN(
        SDAI.FALSE))
    }
    
    let _TEMP7 = ([SDAI.AIE(SDAI.STRING("angular dimension")), 
      SDAI.AIE(SDAI.STRING("angularity")), 
      SDAI.AIE(SDAI.STRING("circular runout")), 
      SDAI.AIE(SDAI.STRING("circularity")), 
      SDAI.AIE(SDAI.STRING("coaxiality")), 
      SDAI.AIE(SDAI.STRING("concentricity")), 
      SDAI.AIE(SDAI.STRING("curve dimension")), 
      SDAI.AIE(SDAI.STRING("cylindricity")), 
      SDAI.AIE(SDAI.STRING("datum")), 
      SDAI.AIE(SDAI.STRING("datum target")), 
      SDAI.AIE(SDAI.STRING("diameter dimension")), 
      SDAI.AIE(SDAI.STRING("flatness")), 
      SDAI.AIE(SDAI.STRING("general dimension")), 
      SDAI.AIE(SDAI.STRING("general note")), 
      SDAI.AIE(SDAI.STRING("general tolerance")), 
      SDAI.AIE(SDAI.STRING("label")), 
      SDAI.AIE(SDAI.STRING("linear dimension")), 
      SDAI.AIE(SDAI.STRING("note")), 
      SDAI.AIE(SDAI.STRING("ordinate dimension")), 
      SDAI.AIE(SDAI.STRING("parallelism")), 
      SDAI.AIE(SDAI.STRING("perpendicularity")), 
      SDAI.AIE(SDAI.STRING("position")), 
      SDAI.AIE(SDAI.STRING("profile of line")), 
      SDAI.AIE(SDAI.STRING("profile of surface")), 
      SDAI.AIE(SDAI.STRING("radial dimension")), 
      SDAI.AIE(SDAI.STRING("roundness")), 
      SDAI.AIE(SDAI.STRING("runout")), 
      SDAI.AIE(SDAI.STRING("straightness")), 
      SDAI.AIE(SDAI.STRING("surface roughness")), 
      SDAI.AIE(SDAI.STRING("symmetry")), 
      SDAI.AIE(SDAI.STRING("total runout"))] as [SDAI.AggregationInitializerElement<SDAI.STRING>])
    let _TEMP8 = SDAI.aggregate(_TEMP7, contains: PMI_ROLE)
    let _TEMP9 =  !_TEMP8
    if SDAI.IS_TRUE( _TEMP9 ) {
      return _md_pmi_name_and_type_correlation__cache.updateCache(params: _params, value: (nil as SDAI.BOOLEAN?))
    }
    if let selector = PMI_ROLE {
      switch selector {
      case "angular dimension":
        
        let _TEMP10 = SDAI.aggregate(V, contains: SDAI.STRING(
          "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ANGULAR_LOCATION"))
        if SDAI.IS_TRUE( _TEMP10 ) {
          return _md_pmi_name_and_type_correlation__cache.updateCache(params: _params, value: SDAI.BOOLEAN(
            SDAI.TRUE))
        }

      case "angularity":
        
        let _TEMP11 = SDAI.aggregate(V, contains: SDAI.STRING(
          "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ANGULARITY_TOLERANCE"))
        if SDAI.IS_TRUE( _TEMP11 ) {
          return _md_pmi_name_and_type_correlation__cache.updateCache(params: _params, value: SDAI.BOOLEAN(
            SDAI.TRUE))
        }

      case "circular runout":
        
        let _TEMP12 = SDAI.aggregate(V, contains: SDAI.STRING(
          "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CIRCULAR_RUNOUT_TOLERANCE"))
        if SDAI.IS_TRUE( _TEMP12 ) {
          return _md_pmi_name_and_type_correlation__cache.updateCache(params: _params, value: SDAI.BOOLEAN(
            SDAI.TRUE))
        }

      case "circularity":
        
        let _TEMP13 = SDAI.aggregate(V, contains: SDAI.STRING(
          "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ROUNDNESS_TOLERANCE"))
        if SDAI.IS_TRUE( _TEMP13 ) {
          return _md_pmi_name_and_type_correlation__cache.updateCache(params: _params, value: SDAI.BOOLEAN(
            SDAI.TRUE))
        }

      case "coaxiality":
        
        let _TEMP14 = SDAI.aggregate(V, contains: SDAI.STRING(
          "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.COAXIALITY_TOLERANCE"))
        if SDAI.IS_TRUE( _TEMP14 ) {
          return _md_pmi_name_and_type_correlation__cache.updateCache(params: _params, value: SDAI.BOOLEAN(
            SDAI.TRUE))
        }

      case "concentricity":
        
        let _TEMP15 = SDAI.aggregate(V, contains: SDAI.STRING(
          "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CONCENTRICITY_TOLERANCE"))
        if SDAI.IS_TRUE( _TEMP15 ) {
          return _md_pmi_name_and_type_correlation__cache.updateCache(params: _params, value: SDAI.BOOLEAN(
            SDAI.TRUE))
        }

      case "curve dimension":
        
        let _TEMP16 = SDAI.aggregate(V, contains: SDAI.STRING(
          "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.DIMENSIONAL_SIZE"))
        if SDAI.IS_TRUE( _TEMP16 ) {
          return _md_pmi_name_and_type_correlation__cache.updateCache(params: _params, value: SDAI.BOOLEAN(
            SDAI.TRUE))
        }

      case "cylindricity":
        
        let _TEMP17 = SDAI.aggregate(V, contains: SDAI.STRING(
          "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CYLINDRICITY_TOLERANCE"))
        if SDAI.IS_TRUE( _TEMP17 ) {
          return _md_pmi_name_and_type_correlation__cache.updateCache(params: _params, value: SDAI.BOOLEAN(
            SDAI.TRUE))
        }

      case "datum":
        
        let _TEMP18 = SDAI.aggregate(V, contains: SDAI.STRING(
          "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.DATUM"))
        if SDAI.IS_TRUE( _TEMP18 ) {
          return _md_pmi_name_and_type_correlation__cache.updateCache(params: _params, value: SDAI.BOOLEAN(
            SDAI.TRUE))
        }

      case "datum target":
        
        let _TEMP19 = SDAI.aggregate(V, contains: SDAI.STRING(
          "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.DATUM_TARGET"))
        if SDAI.IS_TRUE( _TEMP19 ) {
          return _md_pmi_name_and_type_correlation__cache.updateCache(params: _params, value: SDAI.BOOLEAN(
            SDAI.TRUE))
        }

      case "diameter dimension":
        
        let _TEMP20 = SDAI.aggregate(V, contains: SDAI.STRING(
          "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.DIMENSIONAL_SIZE"))
        if SDAI.IS_TRUE( _TEMP20 ) {
          return _md_pmi_name_and_type_correlation__cache.updateCache(params: _params, value: SDAI.BOOLEAN(
            SDAI.TRUE))
        }

      case "flatness":
        
        let _TEMP21 = SDAI.aggregate(V, contains: SDAI.STRING(
          "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.FLATNESS_TOLERANCE"))
        if SDAI.IS_TRUE( _TEMP21 ) {
          return _md_pmi_name_and_type_correlation__cache.updateCache(params: _params, value: SDAI.BOOLEAN(
            SDAI.TRUE))
        }

      case "general dimension":
        
        let _TEMP22 = ([SDAI.AIE(SDAI.STRING("AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.DIMENSIONAL_SIZE")), 
          SDAI.AIE(SDAI.STRING("AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.DIMENSIONAL_LOCATION"))] 
          as [SDAI.AggregationInitializerElement<SDAI.STRING>])
        let _TEMP23 = SDAI.FORCE_OPTIONAL(_TEMP22) * V
        let _TEMP24 = SDAI.SIZEOF(_TEMP23)
        let _TEMP25 = _TEMP24 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
        if SDAI.IS_TRUE( _TEMP25 ) {
          return _md_pmi_name_and_type_correlation__cache.updateCache(params: _params, value: SDAI.BOOLEAN(
            SDAI.TRUE))
        }

      case "general note":
        
        let _TEMP26 = SDAI.aggregate(V, contains: SDAI.STRING(
          "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PROPERTY_DEFINITION"))
        if SDAI.IS_TRUE( _TEMP26 ) {
          return _md_pmi_name_and_type_correlation__cache.updateCache(params: _params, value: SDAI.BOOLEAN(
            SDAI.TRUE))
        }

      case "general tolerance":
        
        let _TEMP27 = SDAI.aggregate(V, contains: SDAI.STRING(
          "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.GEOMETRIC_TOLERANCE"))
        if SDAI.IS_TRUE( _TEMP27 ) {
          return _md_pmi_name_and_type_correlation__cache.updateCache(params: _params, value: SDAI.BOOLEAN(
            SDAI.TRUE))
        }

      case "label":
        
        let _TEMP28 = SDAI.aggregate(V, contains: SDAI.STRING(
          "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PROPERTY_DEFINITION"))
        if SDAI.IS_TRUE( _TEMP28 ) {
          return _md_pmi_name_and_type_correlation__cache.updateCache(params: _params, value: SDAI.BOOLEAN(
            SDAI.TRUE))
        }

      case "linear dimension":
        
        let _TEMP29 = SDAI.aggregate(V, contains: SDAI.STRING(
          "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.DIMENSIONAL_SIZE"))
        if SDAI.IS_TRUE( _TEMP29 ) {
          return _md_pmi_name_and_type_correlation__cache.updateCache(params: _params, value: SDAI.BOOLEAN(
            SDAI.TRUE))
        }

      case "note":
        
        let _TEMP30 = SDAI.aggregate(V, contains: SDAI.STRING(
          "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PROPERTY_DEFINITION"))
        if SDAI.IS_TRUE( _TEMP30 ) {
          return _md_pmi_name_and_type_correlation__cache.updateCache(params: _params, value: SDAI.BOOLEAN(
            SDAI.TRUE))
        }

      case "ordinate dimension":
        
        let _TEMP31 = SDAI.aggregate(V, contains: SDAI.STRING(
          "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.DIMENSIONAL_SIZE"))
        if SDAI.IS_TRUE( _TEMP31 ) {
          return _md_pmi_name_and_type_correlation__cache.updateCache(params: _params, value: SDAI.BOOLEAN(
            SDAI.TRUE))
        }

      case "parallelism":
        
        let _TEMP32 = SDAI.aggregate(V, contains: SDAI.STRING(
          "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PARALLELISM_TOLERANCE"))
        if SDAI.IS_TRUE( _TEMP32 ) {
          return _md_pmi_name_and_type_correlation__cache.updateCache(params: _params, value: SDAI.BOOLEAN(
            SDAI.TRUE))
        }

      case "perpendicularity":
        
        let _TEMP33 = SDAI.aggregate(V, contains: SDAI.STRING(
          "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PERPENDICULARITY_TOLERANCE"))
        if SDAI.IS_TRUE( _TEMP33 ) {
          return _md_pmi_name_and_type_correlation__cache.updateCache(params: _params, value: SDAI.BOOLEAN(
            SDAI.TRUE))
        }

      case "position":
        
        let _TEMP34 = SDAI.aggregate(V, contains: SDAI.STRING(
          "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.POSITION_TOLERANCE"))
        if SDAI.IS_TRUE( _TEMP34 ) {
          return _md_pmi_name_and_type_correlation__cache.updateCache(params: _params, value: SDAI.BOOLEAN(
            SDAI.TRUE))
        }

      case "profile of line":
        
        let _TEMP35 = SDAI.aggregate(V, contains: SDAI.STRING(
          "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.LINE_PROFILE_TOLERANCE"))
        if SDAI.IS_TRUE( _TEMP35 ) {
          return _md_pmi_name_and_type_correlation__cache.updateCache(params: _params, value: SDAI.BOOLEAN(
            SDAI.TRUE))
        }

      case "profile of surface":
        
        let _TEMP36 = SDAI.aggregate(V, contains: SDAI.STRING(
          "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SURFACE_PROFILE_TOLERANCE"))
        if SDAI.IS_TRUE( _TEMP36 ) {
          return _md_pmi_name_and_type_correlation__cache.updateCache(params: _params, value: SDAI.BOOLEAN(
            SDAI.TRUE))
        }

      case "radial dimension":
        
        let _TEMP37 = SDAI.aggregate(V, contains: SDAI.STRING(
          "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.DIMENSIONAL_SIZE"))
        if SDAI.IS_TRUE( _TEMP37 ) {
          return _md_pmi_name_and_type_correlation__cache.updateCache(params: _params, value: SDAI.BOOLEAN(
            SDAI.TRUE))
        }

      case "roundness":
        
        let _TEMP38 = SDAI.aggregate(V, contains: SDAI.STRING(
          "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ROUNDNESS_TOLERANCE"))
        if SDAI.IS_TRUE( _TEMP38 ) {
          return _md_pmi_name_and_type_correlation__cache.updateCache(params: _params, value: SDAI.BOOLEAN(
            SDAI.TRUE))
        }

      case "runout":
        
        let _TEMP39 = SDAI.aggregate(V, contains: SDAI.STRING(
          "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.TOTAL_RUNOUT_TOLERANCE"))
        if SDAI.IS_TRUE( _TEMP39 ) {
          return _md_pmi_name_and_type_correlation__cache.updateCache(params: _params, value: SDAI.BOOLEAN(
            SDAI.TRUE))
        }

      case "straightness":
        
        let _TEMP40 = SDAI.aggregate(V, contains: SDAI.STRING(
          "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.STRAIGHTNESS_TOLERANCE"))
        if SDAI.IS_TRUE( _TEMP40 ) {
          return _md_pmi_name_and_type_correlation__cache.updateCache(params: _params, value: SDAI.BOOLEAN(
            SDAI.TRUE))
        }

      case "surface roughness":
        
        let _TEMP41 = SDAI.aggregate(V, contains: SDAI.STRING(
          "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PROPERTY_DEFINITION"))
        if SDAI.IS_TRUE( _TEMP41 ) {
          return _md_pmi_name_and_type_correlation__cache.updateCache(params: _params, value: SDAI.BOOLEAN(
            SDAI.TRUE))
        }

      case "symmetry":
        
        let _TEMP42 = SDAI.aggregate(V, contains: SDAI.STRING(
          "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SYMMETRY_TOLERANCE"))
        if SDAI.IS_TRUE( _TEMP42 ) {
          return _md_pmi_name_and_type_correlation__cache.updateCache(params: _params, value: SDAI.BOOLEAN(
            SDAI.TRUE))
        }

      case "total runout":
        
        let _TEMP43 = SDAI.aggregate(V, contains: SDAI.STRING(
          "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.TOTAL_RUNOUT_TOLERANCE"))
        if SDAI.IS_TRUE( _TEMP43 ) {
          return _md_pmi_name_and_type_correlation__cache.updateCache(params: _params, value: SDAI.BOOLEAN(
            SDAI.TRUE))
        }

      default:
        return _md_pmi_name_and_type_correlation__cache.updateCache(params: _params, value: SDAI.BOOLEAN(
          SDAI.FALSE))
      } //end switch
    }
    else {
      return _md_pmi_name_and_type_correlation__cache.updateCache(params: _params, value: SDAI.BOOLEAN(
        SDAI.FALSE))
    }
    return _md_pmi_name_and_type_correlation__cache.updateCache(params: _params, value: SDAI.BOOLEAN(
      SDAI.FALSE))
  }

}

//MARK: - function result cache
private var _md_pmi_name_and_type_correlation__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

