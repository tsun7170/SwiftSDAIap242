/* file: valid_datum_target_parameters.swift 	 generated: Tue Nov 16 05:35:44 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION valid_datum_target_parameters(
               pdf : placed_datum_target_feature
           ) : BOOLEAN;

    LOCAL
      rep_set                   : SET OF representation := [];
      parameter_representations : SET OF representation;
    END_LOCAL;
    REPEAT i := 1 TO HIINDEX( pdf.representation_associations ) BY 1;
      rep_set := rep_set + pdf.representation_associations[i].used_representation;
    END_REPEAT;
    parameter_representations := QUERY ( rep <* rep_set | ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
        + 'SHAPE_REPRESENTATION_WITH_PARAMETERS'  IN TYPEOF( rep ) ) );
    IF SIZEOF( QUERY ( srwp <* parameter_representations | ( SIZEOF( QUERY ( i <* srwp.items | ( ( i.name = 
        'orientation'  ) AND ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PLACEMENT' IN TYPEOF( i ) ) ) ) ) 
        = 1 ) ) ) <> 1 THEN
      RETURN( FALSE );
    END_IF;
    CASE pdf\shape_aspect.description OF
      'point'                               :         RETURN( SIZEOF( QUERY ( srwp <* 
            parameter_representations | ( SIZEOF( srwp.items ) = 1 ) ) ) = 1 );
      'circle', 'circular curve'            :         RETURN( ( SIZEOF( QUERY ( srwp <* 
            parameter_representations | ( SIZEOF( srwp.items ) = 2 ) ) ) = 1 ) AND ( SIZEOF( QUERY ( srwp <* 
            parameter_representations | ( SIZEOF( QUERY ( i <* srwp.items | ( ( i.name = 'target diameter' ) 
            AND ( SIZEOF( [ 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.MEASURE_REPRESENTATION_ITEM', 
            'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( i ) ) = 2 ) ) ) ) 
            = 1 ) ) ) = 1 ) );
      'line'                                :         RETURN( SIZEOF( QUERY ( srwp <* 
            parameter_representations | ( SIZEOF( QUERY ( i <* srwp.items | ( ( i.name = 'target length' ) 
            AND ( SIZEOF( [ 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.MEASURE_REPRESENTATION_ITEM', 
            'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( i ) ) = 2 ) ) ) ) 
            = 1 ) ) ) = 1 );
      'rectangle'                           :         RETURN( ( SIZEOF( QUERY ( srwp <* 
            parameter_representations | ( SIZEOF( srwp.items ) = 3 ) ) ) = 1 ) AND ( SIZEOF( QUERY ( srwp <* 
            parameter_representations | ( SIZEOF( QUERY ( i <* srwp.items | ( ( i.name = 'target length' ) 
            AND ( SIZEOF( [ 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.MEASURE_REPRESENTATION_ITEM', 
            'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( i ) ) = 2 ) ) ) ) 
            = 1 ) ) ) = 1 ) AND ( SIZEOF( QUERY ( srwp <* parameter_representations | ( SIZEOF( QUERY ( i <* 
            srwp.items | ( ( i.name = 'target width' ) AND ( SIZEOF( [
            'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.MEASURE_REPRESENTATION_ITEM' , 
            'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( i ) ) = 2 ) ) ) ) 
            = 1 ) ) ) = 1 ) );
      OTHERWISE                             :         RETURN( FALSE );
    END_CASE;

  END_FUNCTION; -- valid_datum_target_parameters (line:47545 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func VALID_DATUM_TARGET_PARAMETERS(
    _ PDF: ePLACED_DATUM_TARGET_FEATURE? ) 
    -> SDAI.BOOLEAN? {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( PDF )
    if case .available(let _cached_value) = _valid_datum_target_parameters__cache.cachedValue(params: _params) {
      return _cached_value as? SDAI.BOOLEAN
    }

    var PDF = PDF; SDAI.TOUCH(var: &PDF)

    //LOCAL
    var REP_SET: SDAI.SET<eREPRESENTATION>?  = SDAI.SET<eREPRESENTATION>(SDAI.EMPLY_AGGREGATE); SDAI.TOUCH(var: &REP_SET)
    var PARAMETER_REPRESENTATIONS: SDAI.SET<eREPRESENTATION>? 
    //END_LOCAL

    if let incrementControl/*SDAI.INTEGER*/ = SDAI.FROM(/*SDAI.INTEGER*/1, TO:/*SDAI.INTEGER*/SDAI.HIINDEX(
      PDF?.REPRESENTATION_ASSOCIATIONS)) {
      for I in incrementControl {
        
        let _TEMP1 = PDF?.REPRESENTATION_ASSOCIATIONS
        let _TEMP2 = _TEMP1?[I]
        let _TEMP3 = _TEMP2?.USED_REPRESENTATION
        let _TEMP4 = REP_SET + _TEMP3
        REP_SET = _TEMP4
      }
    }
    
    let _TEMP5 = REP_SET?.QUERY{ REP in 

        let _TEMP1 = SDAI.TYPEOF(REP, IS: eSHAPE_REPRESENTATION_WITH_PARAMETERS.self)
        return _TEMP1 }
    PARAMETER_REPRESENTATIONS = _TEMP5
    
    let _TEMP6 = PARAMETER_REPRESENTATIONS?
      .QUERY{ SRWP in 

        let _TEMP1 = SRWP.ITEMS
        let _TEMP2 = _TEMP1.QUERY{ I in 

            let _TEMP1 = I.NAME
            let _TEMP2 = SDAI.FORCE_OPTIONAL(_TEMP1) .==. SDAI.FORCE_OPTIONAL(SDAI.STRING("orientation"))
            let _TEMP3 = SDAI.TYPEOF(I, IS: ePLACEMENT.self)
            let _TEMP4 = _TEMP2 && _TEMP3
            return _TEMP4 }
        let _TEMP3 = SDAI.SIZEOF(_TEMP2)
        let _TEMP4 = _TEMP3 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
        return _TEMP4 }
    let _TEMP7 = SDAI.SIZEOF(_TEMP6)
    let _TEMP8 = _TEMP7 .!=. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
    if SDAI.IS_TRUE( _TEMP8 ) {
      return _valid_datum_target_parameters__cache.updateCache(params: _params, value: SDAI.BOOLEAN(
        SDAI.FALSE))
    }
    
    let _TEMP9 = PDF?.GROUP_REF(eSHAPE_ASPECT.self)
    let _TEMP10 = _TEMP9?.DESCRIPTION
    if let selector = _TEMP10 {
      switch selector {
      case "point":
        
        let _TEMP11 = PARAMETER_REPRESENTATIONS?
          .QUERY{ SRWP in 

            let _TEMP1 = SRWP.ITEMS
            let _TEMP2 = SDAI.SIZEOF(_TEMP1)
            let _TEMP3 = _TEMP2 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
            return _TEMP3 }
        let _TEMP12 = SDAI.SIZEOF(_TEMP11)
        let _TEMP13 = _TEMP12 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
        return _valid_datum_target_parameters__cache.updateCache(params: _params, value: SDAI.BOOLEAN(/*SDAI.LOGICAL*/
          _TEMP13))

      case "circle", "circular curve":
        
        let _TEMP14 = PARAMETER_REPRESENTATIONS?
          .QUERY{ SRWP in 

            let _TEMP1 = SRWP.ITEMS
            let _TEMP2 = SDAI.SIZEOF(_TEMP1)
            let _TEMP3 = _TEMP2 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(2))
            return _TEMP3 }
        let _TEMP15 = SDAI.SIZEOF(_TEMP14)
        let _TEMP16 = _TEMP15 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
        let _TEMP17 = PARAMETER_REPRESENTATIONS?
          .QUERY{ SRWP in 

            let _TEMP1 = SRWP.ITEMS
            let _TEMP2 = _TEMP1.QUERY{ I in 

                let _TEMP1 = I.NAME
                let _TEMP2 = SDAI.FORCE_OPTIONAL(_TEMP1) .==. SDAI.FORCE_OPTIONAL(SDAI.STRING("target diameter"))
                let _TEMP3 = ([SDAI.AIE(SDAI.STRING(
                  "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.MEASURE_REPRESENTATION_ITEM")), 
                  SDAI.AIE(SDAI.STRING(
                  "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.LENGTH_MEASURE_WITH_UNIT"))] 
                  as [SDAI.AggregationInitializerElement<SDAI.STRING>])
                let _TEMP4 = SDAI.TYPEOF(I)
                let _TEMP5 = SDAI.FORCE_OPTIONAL(_TEMP3) * SDAI.FORCE_OPTIONAL(_TEMP4)
                let _TEMP6 = SDAI.SIZEOF(_TEMP5)
                let _TEMP7 = _TEMP6 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(2))
                let _TEMP8 = _TEMP2 && _TEMP7
                return _TEMP8 }
            let _TEMP3 = SDAI.SIZEOF(_TEMP2)
            let _TEMP4 = _TEMP3 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
            return _TEMP4 }
        let _TEMP18 = SDAI.SIZEOF(_TEMP17)
        let _TEMP19 = _TEMP18 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
        let _TEMP20 = _TEMP16 && _TEMP19
        return _valid_datum_target_parameters__cache.updateCache(params: _params, value: SDAI.BOOLEAN(/*SDAI.LOGICAL*/
          _TEMP20))

      case "line":
        
        let _TEMP21 = PARAMETER_REPRESENTATIONS?
          .QUERY{ SRWP in 

            let _TEMP1 = SRWP.ITEMS
            let _TEMP2 = _TEMP1.QUERY{ I in 

                let _TEMP1 = I.NAME
                let _TEMP2 = SDAI.FORCE_OPTIONAL(_TEMP1) .==. SDAI.FORCE_OPTIONAL(SDAI.STRING("target length"))
                let _TEMP3 = ([SDAI.AIE(SDAI.STRING(
                  "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.MEASURE_REPRESENTATION_ITEM")), 
                  SDAI.AIE(SDAI.STRING(
                  "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.LENGTH_MEASURE_WITH_UNIT"))] 
                  as [SDAI.AggregationInitializerElement<SDAI.STRING>])
                let _TEMP4 = SDAI.TYPEOF(I)
                let _TEMP5 = SDAI.FORCE_OPTIONAL(_TEMP3) * SDAI.FORCE_OPTIONAL(_TEMP4)
                let _TEMP6 = SDAI.SIZEOF(_TEMP5)
                let _TEMP7 = _TEMP6 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(2))
                let _TEMP8 = _TEMP2 && _TEMP7
                return _TEMP8 }
            let _TEMP3 = SDAI.SIZEOF(_TEMP2)
            let _TEMP4 = _TEMP3 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
            return _TEMP4 }
        let _TEMP22 = SDAI.SIZEOF(_TEMP21)
        let _TEMP23 = _TEMP22 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
        return _valid_datum_target_parameters__cache.updateCache(params: _params, value: SDAI.BOOLEAN(/*SDAI.LOGICAL*/
          _TEMP23))

      case "rectangle":
        
        let _TEMP24 = PARAMETER_REPRESENTATIONS?
          .QUERY{ SRWP in 

            let _TEMP1 = SRWP.ITEMS
            let _TEMP2 = SDAI.SIZEOF(_TEMP1)
            let _TEMP3 = _TEMP2 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(3))
            return _TEMP3 }
        let _TEMP25 = SDAI.SIZEOF(_TEMP24)
        let _TEMP26 = _TEMP25 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
        let _TEMP27 = PARAMETER_REPRESENTATIONS?
          .QUERY{ SRWP in 

            let _TEMP1 = SRWP.ITEMS
            let _TEMP2 = _TEMP1.QUERY{ I in 

                let _TEMP1 = I.NAME
                let _TEMP2 = SDAI.FORCE_OPTIONAL(_TEMP1) .==. SDAI.FORCE_OPTIONAL(SDAI.STRING("target length"))
                let _TEMP3 = ([SDAI.AIE(SDAI.STRING(
                  "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.MEASURE_REPRESENTATION_ITEM")), 
                  SDAI.AIE(SDAI.STRING(
                  "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.LENGTH_MEASURE_WITH_UNIT"))] 
                  as [SDAI.AggregationInitializerElement<SDAI.STRING>])
                let _TEMP4 = SDAI.TYPEOF(I)
                let _TEMP5 = SDAI.FORCE_OPTIONAL(_TEMP3) * SDAI.FORCE_OPTIONAL(_TEMP4)
                let _TEMP6 = SDAI.SIZEOF(_TEMP5)
                let _TEMP7 = _TEMP6 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(2))
                let _TEMP8 = _TEMP2 && _TEMP7
                return _TEMP8 }
            let _TEMP3 = SDAI.SIZEOF(_TEMP2)
            let _TEMP4 = _TEMP3 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
            return _TEMP4 }
        let _TEMP28 = SDAI.SIZEOF(_TEMP27)
        let _TEMP29 = _TEMP28 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
        let _TEMP30 = _TEMP26 && _TEMP29
        let _TEMP31 = PARAMETER_REPRESENTATIONS?
          .QUERY{ SRWP in 

            let _TEMP1 = SRWP.ITEMS
            let _TEMP2 = _TEMP1.QUERY{ I in 

                let _TEMP1 = I.NAME
                let _TEMP2 = SDAI.FORCE_OPTIONAL(_TEMP1) .==. SDAI.FORCE_OPTIONAL(SDAI.STRING("target width"))
                let _TEMP3 = ([SDAI.AIE(SDAI.STRING(
                  "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.MEASURE_REPRESENTATION_ITEM")), 
                  SDAI.AIE(SDAI.STRING(
                  "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.LENGTH_MEASURE_WITH_UNIT"))] 
                  as [SDAI.AggregationInitializerElement<SDAI.STRING>])
                let _TEMP4 = SDAI.TYPEOF(I)
                let _TEMP5 = SDAI.FORCE_OPTIONAL(_TEMP3) * SDAI.FORCE_OPTIONAL(_TEMP4)
                let _TEMP6 = SDAI.SIZEOF(_TEMP5)
                let _TEMP7 = _TEMP6 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(2))
                let _TEMP8 = _TEMP2 && _TEMP7
                return _TEMP8 }
            let _TEMP3 = SDAI.SIZEOF(_TEMP2)
            let _TEMP4 = _TEMP3 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
            return _TEMP4 }
        let _TEMP32 = SDAI.SIZEOF(_TEMP31)
        let _TEMP33 = _TEMP32 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
        let _TEMP34 = _TEMP30 && _TEMP33
        return _valid_datum_target_parameters__cache.updateCache(params: _params, value: SDAI.BOOLEAN(/*SDAI.LOGICAL*/
          _TEMP34))

      default:
        return _valid_datum_target_parameters__cache.updateCache(params: _params, value: SDAI.BOOLEAN(
          SDAI.FALSE))
      } //end switch
    }
    else {
      return _valid_datum_target_parameters__cache.updateCache(params: _params, value: SDAI.BOOLEAN(
        SDAI.FALSE))
    }
  }

}

//MARK: - function result cache
private var _valid_datum_target_parameters__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

