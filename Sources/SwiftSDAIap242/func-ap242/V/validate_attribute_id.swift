/* file: validate_attribute_id.swift 	 generated: Tue Nov 16 05:35:44 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION validate_attribute_id(
               attid : attribute_identifier
           ) : BOOLEAN;

    CONSTANT
      letters     : SET [52 : 52] OF STRING :=
                     [ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r' , 
                       's' , 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 
                       'J' , 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];
      numbers_etc : SET [15 : 15] OF STRING :=
                     [ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '_', '[', ']', '.', '\'];
      valid_chars : SET [67 : 67] OF STRING :=
                     letters + numbers_etc;
    END_CONSTANT;

    LOCAL
      id_length : INTEGER := LENGTH( attid );
      id_valid  : BOOLEAN := TRUE;
    END_LOCAL;
    IF NOT ( attid[1] IN letters ) THEN
      id_valid := FALSE;
    END_IF;
    REPEAT i := 2 TO id_length BY 1 WHILE id_valid = TRUE;
      IF NOT ( attid[i] IN valid_chars ) THEN
        id_valid := FALSE;
      END_IF;
    END_REPEAT;
    RETURN( id_valid );

  END_FUNCTION; -- validate_attribute_id (line:48135 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func VALIDATE_ATTRIBUTE_ID(_ ATTID: tATTRIBUTE_IDENTIFIER? ) 
    -> SDAI.BOOLEAN? {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( ATTID )
    if case .available(let _cached_value) = _validate_attribute_id__cache.cachedValue(params: _params) {
      return _cached_value as? SDAI.BOOLEAN
    }

    var ATTID = ATTID; SDAI.TOUCH(var: &ATTID)


    //CONSTANT
    let LETTERS: SDAI.SET<SDAI.STRING>/*[52:52]*/  = SDAI.UNWRAP(
      SDAI.SET<SDAI.STRING>(bound1: SDAI.UNWRAP(SDAI.INTEGER(52)), bound2: SDAI.INTEGER(52), 
      ([SDAI.AIE(SDAI.STRING("a")), 
      SDAI.AIE(SDAI.STRING("b")), SDAI.AIE(SDAI.STRING("c")), 
      SDAI.AIE(SDAI.STRING("d")), SDAI.AIE(SDAI.STRING("e")), 
      SDAI.AIE(SDAI.STRING("f")), SDAI.AIE(SDAI.STRING("g")), 
      SDAI.AIE(SDAI.STRING("h")), SDAI.AIE(SDAI.STRING("i")), 
      SDAI.AIE(SDAI.STRING("j")), SDAI.AIE(SDAI.STRING("k")), 
      SDAI.AIE(SDAI.STRING("l")), SDAI.AIE(SDAI.STRING("m")), 
      SDAI.AIE(SDAI.STRING("n")), SDAI.AIE(SDAI.STRING("o")), 
      SDAI.AIE(SDAI.STRING("p")), SDAI.AIE(SDAI.STRING("q")), 
      SDAI.AIE(SDAI.STRING("r")), SDAI.AIE(SDAI.STRING("s")), 
      SDAI.AIE(SDAI.STRING("t")), SDAI.AIE(SDAI.STRING("u")), 
      SDAI.AIE(SDAI.STRING("v")), SDAI.AIE(SDAI.STRING("w")), 
      SDAI.AIE(SDAI.STRING("x")), SDAI.AIE(SDAI.STRING("y")), 
      SDAI.AIE(SDAI.STRING("z")), SDAI.AIE(SDAI.STRING("A")), 
      SDAI.AIE(SDAI.STRING("B")), SDAI.AIE(SDAI.STRING("C")), 
      SDAI.AIE(SDAI.STRING("D")), SDAI.AIE(SDAI.STRING("E")), 
      SDAI.AIE(SDAI.STRING("F")), SDAI.AIE(SDAI.STRING("G")), 
      SDAI.AIE(SDAI.STRING("H")), SDAI.AIE(SDAI.STRING("I")), 
      SDAI.AIE(SDAI.STRING("J")), SDAI.AIE(SDAI.STRING("K")), 
      SDAI.AIE(SDAI.STRING("L")), SDAI.AIE(SDAI.STRING("M")), 
      SDAI.AIE(SDAI.STRING("N")), SDAI.AIE(SDAI.STRING("O")), 
      SDAI.AIE(SDAI.STRING("P")), SDAI.AIE(SDAI.STRING("Q")), 
      SDAI.AIE(SDAI.STRING("R")), SDAI.AIE(SDAI.STRING("S")), 
      SDAI.AIE(SDAI.STRING("T")), SDAI.AIE(SDAI.STRING("U")), 
      SDAI.AIE(SDAI.STRING("V")), SDAI.AIE(SDAI.STRING("W")), 
      SDAI.AIE(SDAI.STRING("X")), SDAI.AIE(SDAI.STRING("Y")), 
      SDAI.AIE(SDAI.STRING("Z"))] as [SDAI.AggregationInitializerElement<SDAI.STRING>])))

    let NUMBERS_ETC: SDAI.SET<SDAI.STRING>/*[15:15]*/  = SDAI.UNWRAP(
      SDAI.SET<SDAI.STRING>(bound1: SDAI.UNWRAP(SDAI.INTEGER(15)), bound2: SDAI.INTEGER(15), 
      ([SDAI.AIE(SDAI.STRING("0")), 
      SDAI.AIE(SDAI.STRING("1")), SDAI.AIE(SDAI.STRING("2")), 
      SDAI.AIE(SDAI.STRING("3")), SDAI.AIE(SDAI.STRING("4")), 
      SDAI.AIE(SDAI.STRING("5")), SDAI.AIE(SDAI.STRING("6")), 
      SDAI.AIE(SDAI.STRING("7")), SDAI.AIE(SDAI.STRING("8")), 
      SDAI.AIE(SDAI.STRING("9")), SDAI.AIE(SDAI.STRING("_")), 
      SDAI.AIE(SDAI.STRING("[")), SDAI.AIE(SDAI.STRING("]")), 
      SDAI.AIE(SDAI.STRING(".")), SDAI.AIE(SDAI.STRING("\\"))] as [SDAI.AggregationInitializerElement<SDAI.STRING>])))

    let VALID_CHARS: SDAI.SET<SDAI.STRING>/*[67:67]*/  = SDAI.UNWRAP(
      SDAI.SET<SDAI.STRING>(bound1: SDAI.UNWRAP(SDAI.INTEGER(67)), bound2: SDAI.INTEGER(67), 
      /*SDAI.SET<SDAI.STRING>*/SDAI.FORCE_OPTIONAL(LETTERS) + SDAI.FORCE_OPTIONAL(NUMBERS_ETC)))

    //END_CONSTANT

    //LOCAL
    var ID_LENGTH: SDAI.INTEGER?  = SDAI.LENGTH(ATTID); SDAI.TOUCH(var: &ID_LENGTH)
    var ID_VALID: SDAI.BOOLEAN?  = SDAI.BOOLEAN(SDAI.TRUE); SDAI.TOUCH(var: &ID_VALID)
    //END_LOCAL

    
    let _TEMP1 = ATTID?[1]
    let _TEMP2 = SDAI.aggregate(LETTERS, contains: SDAI.STRING(/*tATTRIBUTE_IDENTIFIER*/_TEMP1))
    let _TEMP3 =  !_TEMP2
    if SDAI.IS_TRUE( _TEMP3 ) {
      ID_VALID = SDAI.BOOLEAN(SDAI.FALSE)
    }
    if let incrementControl/*SDAI.INTEGER*/ = SDAI.FROM(/*SDAI.INTEGER*/2, TO:/*SDAI.INTEGER*/ID_LENGTH) {
      for I in incrementControl {

      let _TEMP4 = ID_VALID .==. SDAI.FORCE_OPTIONAL(SDAI.LOGICAL(SDAI.TRUE))
        if !SDAI.IS_TRUE(_TEMP4) { break }
        
        let _TEMP5 = ATTID?[I]
        let _TEMP6 = SDAI.aggregate(VALID_CHARS, contains: SDAI.STRING(/*tATTRIBUTE_IDENTIFIER*/_TEMP5))
        let _TEMP7 =  !_TEMP6
        if SDAI.IS_TRUE( _TEMP7 ) {
          ID_VALID = SDAI.BOOLEAN(SDAI.FALSE)
        }
      }
    }
    return _validate_attribute_id__cache.updateCache(params: _params, value: ID_VALID)
  }

}

//MARK: - function result cache
private var _validate_attribute_id__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

