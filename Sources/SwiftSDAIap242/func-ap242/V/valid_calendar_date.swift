/* file: valid_calendar_date.swift 	 generated: Sat Aug 14 13:46:02 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION valid_calendar_date(
               date : calendar_date
           ) : LOGICAL;
    CASE date.month_component OF
      1            :         RETURN( ( 1 <= date.day_component ) AND ( date.day_component <= 31 ) );
      2            : 
        BEGIN
          IF leap_year( date.year_component ) THEN
            RETURN( ( 1 <= date.day_component ) AND ( date.day_component <= 29 ) );
          ELSE
            RETURN( ( 1 <= date.day_component ) AND ( date.day_component <= 28 ) );
          END_IF;
        END;
      3            :         RETURN( ( 1 <= date.day_component ) AND ( date.day_component <= 31 ) );
      4            :         RETURN( ( 1 <= date.day_component ) AND ( date.day_component <= 30 ) );
      5            :         RETURN( ( 1 <= date.day_component ) AND ( date.day_component <= 31 ) );
      6            :         RETURN( ( 1 <= date.day_component ) AND ( date.day_component <= 30 ) );
      7            :         RETURN( ( 1 <= date.day_component ) AND ( date.day_component <= 31 ) );
      8            :         RETURN( ( 1 <= date.day_component ) AND ( date.day_component <= 31 ) );
      9            :         RETURN( ( 1 <= date.day_component ) AND ( date.day_component <= 30 ) );
      10           :         RETURN( ( 1 <= date.day_component ) AND ( date.day_component <= 31 ) );
      11           :         RETURN( ( 1 <= date.day_component ) AND ( date.day_component <= 30 ) );
      12           :         RETURN( ( 1 <= date.day_component ) AND ( date.day_component <= 31 ) );
    END_CASE;
    RETURN( FALSE );

  END_FUNCTION; -- valid_calendar_date (line:47480 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func VALID_CALENDAR_DATE(_ DATE: eCALENDAR_DATE? ) 
    -> SDAI.LOGICAL {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( DATE )
    if case .available(let _cached_value) = _valid_calendar_date__cache.cachedValue(params: _params) {
      return _cached_value as! SDAI.LOGICAL
    }

    var DATE = DATE; SDAI.TOUCH(var: &DATE)

    
    let _TEMP1 = DATE?.MONTH_COMPONENT
    if let selector = _TEMP1 {
      switch selector {
      case 1:
        
        let _TEMP2 = DATE?.DAY_COMPONENT
        let _TEMP3 = SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1)) <= _TEMP2
        let _TEMP4 = DATE?.DAY_COMPONENT
        let _TEMP5 = _TEMP4 <= SDAI.FORCE_OPTIONAL(SDAI.INTEGER(31))
        let _TEMP6 = _TEMP3 && _TEMP5
        return _valid_calendar_date__cache.updateCache(params: _params, value: _TEMP6)

      case 2:
        //BEGIN
        
        let _TEMP7 = DATE?.YEAR_COMPONENT
        let _TEMP8 = LEAP_YEAR(_TEMP7)
        if SDAI.IS_TRUE( _TEMP8 ) {
          
          let _TEMP9 = DATE?.DAY_COMPONENT
          let _TEMP10 = SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1)) <= _TEMP9
          let _TEMP11 = DATE?.DAY_COMPONENT
          let _TEMP12 = _TEMP11 <= SDAI.FORCE_OPTIONAL(SDAI.INTEGER(29))
          let _TEMP13 = _TEMP10 && _TEMP12
          return _valid_calendar_date__cache.updateCache(params: _params, value: _TEMP13)
        }
        else {
          
          let _TEMP14 = DATE?.DAY_COMPONENT
          let _TEMP15 = SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1)) <= _TEMP14
          let _TEMP16 = DATE?.DAY_COMPONENT
          let _TEMP17 = _TEMP16 <= SDAI.FORCE_OPTIONAL(SDAI.INTEGER(28))
          let _TEMP18 = _TEMP15 && _TEMP17
          return _valid_calendar_date__cache.updateCache(params: _params, value: _TEMP18)
        }
        //END

      case 3:
        
        let _TEMP19 = DATE?.DAY_COMPONENT
        let _TEMP20 = SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1)) <= _TEMP19
        let _TEMP21 = DATE?.DAY_COMPONENT
        let _TEMP22 = _TEMP21 <= SDAI.FORCE_OPTIONAL(SDAI.INTEGER(31))
        let _TEMP23 = _TEMP20 && _TEMP22
        return _valid_calendar_date__cache.updateCache(params: _params, value: _TEMP23)

      case 4:
        
        let _TEMP24 = DATE?.DAY_COMPONENT
        let _TEMP25 = SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1)) <= _TEMP24
        let _TEMP26 = DATE?.DAY_COMPONENT
        let _TEMP27 = _TEMP26 <= SDAI.FORCE_OPTIONAL(SDAI.INTEGER(30))
        let _TEMP28 = _TEMP25 && _TEMP27
        return _valid_calendar_date__cache.updateCache(params: _params, value: _TEMP28)

      case 5:
        
        let _TEMP29 = DATE?.DAY_COMPONENT
        let _TEMP30 = SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1)) <= _TEMP29
        let _TEMP31 = DATE?.DAY_COMPONENT
        let _TEMP32 = _TEMP31 <= SDAI.FORCE_OPTIONAL(SDAI.INTEGER(31))
        let _TEMP33 = _TEMP30 && _TEMP32
        return _valid_calendar_date__cache.updateCache(params: _params, value: _TEMP33)

      case 6:
        
        let _TEMP34 = DATE?.DAY_COMPONENT
        let _TEMP35 = SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1)) <= _TEMP34
        let _TEMP36 = DATE?.DAY_COMPONENT
        let _TEMP37 = _TEMP36 <= SDAI.FORCE_OPTIONAL(SDAI.INTEGER(30))
        let _TEMP38 = _TEMP35 && _TEMP37
        return _valid_calendar_date__cache.updateCache(params: _params, value: _TEMP38)

      case 7:
        
        let _TEMP39 = DATE?.DAY_COMPONENT
        let _TEMP40 = SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1)) <= _TEMP39
        let _TEMP41 = DATE?.DAY_COMPONENT
        let _TEMP42 = _TEMP41 <= SDAI.FORCE_OPTIONAL(SDAI.INTEGER(31))
        let _TEMP43 = _TEMP40 && _TEMP42
        return _valid_calendar_date__cache.updateCache(params: _params, value: _TEMP43)

      case 8:
        
        let _TEMP44 = DATE?.DAY_COMPONENT
        let _TEMP45 = SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1)) <= _TEMP44
        let _TEMP46 = DATE?.DAY_COMPONENT
        let _TEMP47 = _TEMP46 <= SDAI.FORCE_OPTIONAL(SDAI.INTEGER(31))
        let _TEMP48 = _TEMP45 && _TEMP47
        return _valid_calendar_date__cache.updateCache(params: _params, value: _TEMP48)

      case 9:
        
        let _TEMP49 = DATE?.DAY_COMPONENT
        let _TEMP50 = SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1)) <= _TEMP49
        let _TEMP51 = DATE?.DAY_COMPONENT
        let _TEMP52 = _TEMP51 <= SDAI.FORCE_OPTIONAL(SDAI.INTEGER(30))
        let _TEMP53 = _TEMP50 && _TEMP52
        return _valid_calendar_date__cache.updateCache(params: _params, value: _TEMP53)

      case 10:
        
        let _TEMP54 = DATE?.DAY_COMPONENT
        let _TEMP55 = SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1)) <= _TEMP54
        let _TEMP56 = DATE?.DAY_COMPONENT
        let _TEMP57 = _TEMP56 <= SDAI.FORCE_OPTIONAL(SDAI.INTEGER(31))
        let _TEMP58 = _TEMP55 && _TEMP57
        return _valid_calendar_date__cache.updateCache(params: _params, value: _TEMP58)

      case 11:
        
        let _TEMP59 = DATE?.DAY_COMPONENT
        let _TEMP60 = SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1)) <= _TEMP59
        let _TEMP61 = DATE?.DAY_COMPONENT
        let _TEMP62 = _TEMP61 <= SDAI.FORCE_OPTIONAL(SDAI.INTEGER(30))
        let _TEMP63 = _TEMP60 && _TEMP62
        return _valid_calendar_date__cache.updateCache(params: _params, value: _TEMP63)

      case 12:
        
        let _TEMP64 = DATE?.DAY_COMPONENT
        let _TEMP65 = SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1)) <= _TEMP64
        let _TEMP66 = DATE?.DAY_COMPONENT
        let _TEMP67 = _TEMP66 <= SDAI.FORCE_OPTIONAL(SDAI.INTEGER(31))
        let _TEMP68 = _TEMP65 && _TEMP67
        return _valid_calendar_date__cache.updateCache(params: _params, value: _TEMP68)

      default: break
      } //end switch
    }
    return _valid_calendar_date__cache.updateCache(params: _params, value: SDAI.LOGICAL(SDAI.FALSE))
  }

}

//MARK: - function result cache
private var _valid_calendar_date__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

