/* file: valid_tri_ids.swift 	 generated: Mon Jan  3 16:32:52 2022 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.1, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION valid_tri_ids(
               objs : SET OF topological_representation_item
           ) : BOOLEAN;

    LOCAL
      values : BAG OF identifier := [];
    END_LOCAL;
    REPEAT i := LOINDEX( objs ) TO HIINDEX( objs ) BY 1;
      IF NOT ( EXISTS( objs[i]\topological_representation_item.permanent_id ) OR EXISTS( objs[i]\
          topological_representation_item.permanent_aggregate_id ) ) THEN
        RETURN( FALSE );
      END_IF;
      values := values + objs[i]\topological_representation_item.permanent_id + objs[i]\
          topological_representation_item.permanent_aggregate_id;
    END_REPEAT;
    IF SIZEOF( bag_to_set( values ) ) <> SIZEOF( values ) THEN
      RETURN( FALSE );
    END_IF;
    RETURN( TRUE );

  END_FUNCTION; -- valid_tri_ids (line:51687 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func VALID_TRI_IDS(_ OBJS: SDAI.SET<eTOPOLOGICAL_REPRESENTATION_ITEM>? ) 
    -> SDAI.BOOLEAN? {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( OBJS )
    if case .available(let _cached_value) = _valid_tri_ids__cache.cachedValue(params: _params) {
      return _cached_value as? SDAI.BOOLEAN
    }

    var OBJS = OBJS; SDAI.TOUCH(var: &OBJS)

    //LOCAL
    var VALUES: SDAI.BAG<tIDENTIFIER>?  = SDAI.BAG<tIDENTIFIER>(SDAI.EMPLY_AGGREGATE); SDAI.TOUCH(var: &VALUES)

    if let incrementControl/*SDAI.INTEGER*/ = SDAI.FROM(/*SDAI.INTEGER*/SDAI.LOINDEX(
      OBJS), TO:/*SDAI.INTEGER*/SDAI.HIINDEX(OBJS)) {
      for I in incrementControl {
        
        let _TEMP1 = OBJS?[I]
        let _TEMP2 = _TEMP1?.GROUP_REF(eTOPOLOGICAL_REPRESENTATION_ITEM.self)
        let _TEMP3 = _TEMP2?.PERMANENT_ID
        let _TEMP4 = SDAI.EXISTS(_TEMP3)
        let _TEMP5 = OBJS?[I]
        let _TEMP6 = _TEMP5?.GROUP_REF(eTOPOLOGICAL_REPRESENTATION_ITEM.self)
        let _TEMP7 = _TEMP6?.PERMANENT_AGGREGATE_ID
        let _TEMP8 = SDAI.EXISTS(_TEMP7)
        let _TEMP9 = _TEMP4 || _TEMP8
        let _TEMP10 =  !_TEMP9
        if SDAI.IS_TRUE( _TEMP10 ) {
          return _valid_tri_ids__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
        }
        
        let _TEMP11 = OBJS?[I]
        let _TEMP12 = _TEMP11?.GROUP_REF(eTOPOLOGICAL_REPRESENTATION_ITEM.self)
        let _TEMP13 = _TEMP12?.PERMANENT_ID
        let _TEMP14 = VALUES + _TEMP13
        let _TEMP15 = OBJS?[I]
        let _TEMP16 = _TEMP15?.GROUP_REF(eTOPOLOGICAL_REPRESENTATION_ITEM.self)
        let _TEMP17 = _TEMP16?.PERMANENT_AGGREGATE_ID
        let _TEMP18 = _TEMP14 + _TEMP17
        VALUES = _TEMP18
      }
    }
    
    let _TEMP19 = BAG_TO_SET(VALUES)
    let _TEMP20 = SDAI.SIZEOF(_TEMP19)
    let _TEMP21 = SDAI.SIZEOF(VALUES)
    let _TEMP22 = _TEMP20 .!=. _TEMP21
    if SDAI.IS_TRUE( _TEMP22 ) {
      return _valid_tri_ids__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
    }
    return _valid_tri_ids__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.TRUE))
  }

}

//MARK: - function result cache
private var _valid_tri_ids__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

