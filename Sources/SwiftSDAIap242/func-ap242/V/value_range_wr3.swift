/* file: value_range_wr3.swift 	 generated: Sat Aug 14 13:46:02 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION value_range_wr3(
               agg : compound_item_definition
           ) : BOOLEAN;

    BEGIN
      IF SIZEOF( QUERY ( i1 <* agg | ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
          + 'MEASURE_REPRESENTATION_ITEM'  IN TYPEOF( i1 ) ) AND ( SIZEOF( QUERY ( i2 <* agg | ( ( 
          'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.MEASURE_REPRESENTATION_ITEM'  IN TYPEOF( i2 ) ) 
          AND ( i1 :<>: i2 ) AND ( i1\measure_with_unit.unit_component :=: i2\measure_with_unit.
          unit_component ) ) ) ) = 1 ) ) ) ) = 2 THEN
        RETURN( TRUE );
      ELSE
        RETURN( FALSE );
      END_IF;
    END;

  END_FUNCTION; -- value_range_wr3 (line:48582 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func VALUE_RANGE_WR3(_ AGG: sCOMPOUND_ITEM_DEFINITION? ) 
    -> SDAI.BOOLEAN? {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( AGG )
    if case .available(let _cached_value) = _value_range_wr3__cache.cachedValue(params: _params) {
      return _cached_value as? SDAI.BOOLEAN
    }

    var AGG = AGG; SDAI.TOUCH(var: &AGG)

    //BEGIN
    
    let _TEMP1 = AGG?.QUERY{ I1 in 

        let _TEMP1 = SDAI.TYPEOF(I1, IS: eMEASURE_REPRESENTATION_ITEM.self)
        let _TEMP2 = AGG?.QUERY{ I2 in 

            let _TEMP1 = SDAI.TYPEOF(I2, IS: eMEASURE_REPRESENTATION_ITEM.self)
            let _TEMP2 = SDAI.FORCE_OPTIONAL(I1) .!==. SDAI.FORCE_OPTIONAL(I2)
            let _TEMP3 = _TEMP1 && _TEMP2
            let _TEMP4 = I1.GROUP_REF(eMEASURE_WITH_UNIT.self)
            let _TEMP5 = _TEMP4?.UNIT_COMPONENT
            let _TEMP6 = I2.GROUP_REF(eMEASURE_WITH_UNIT.self)
            let _TEMP7 = _TEMP6?.UNIT_COMPONENT
            let _TEMP8 = _TEMP5 .===. _TEMP7
            let _TEMP9 = _TEMP3 && _TEMP8
            return _TEMP9 }
        let _TEMP3 = SDAI.SIZEOF(SDAI.AGGREGATE<SDAI.GENERIC>(/*sCOMPOUND_ITEM_DEFINITION*/_TEMP2))
        let _TEMP4 = _TEMP3 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
        let _TEMP5 = _TEMP1 && _TEMP4
        return _TEMP5 }
    let _TEMP2 = SDAI.SIZEOF(SDAI.AGGREGATE<SDAI.GENERIC>(/*sCOMPOUND_ITEM_DEFINITION*/_TEMP1))
    let _TEMP3 = _TEMP2 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(2))
    if SDAI.IS_TRUE( _TEMP3 ) {
      return _value_range_wr3__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.TRUE))
    }
    else {
      return _value_range_wr3__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
    }
    //END
  }

}

//MARK: - function result cache
private var _value_range_wr3__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

