/* file: valid_selected_instance_representation.swift 	 generated: Sun Oct 31 15:32:10 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION valid_selected_instance_representation(
               pd : product_definition_or_assembly_relationship
           ) : LOGICAL;

    LOCAL
      properties                          : SET OF property_definition := bag_to_set( QUERY ( prd <* USEDIN( 
                                             pd, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
                                             + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( prd.name = 
                                             'occurrence selection'  ) ) );
      property_definition_representations : SET OF property_definition_representation := bag_to_set( 
                                             QUERY ( pdr <* USEDIN( properties[1], 
                                             'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
                                             + 'PROPERTY_DEFINITION_REPRESENTATION.DEFINITION'  ) | ( pdr.
                                             used_representation.name = 'selection criteria' ) ) );
      selected_representation             : representation;
    END_LOCAL;
    IF SIZEOF( properties ) <> 1 THEN
      RETURN( FALSE );
    END_IF;
    IF SIZEOF( property_definition_representations ) <> 1 THEN
      RETURN( FALSE );
    END_IF;
    selected_representation := property_definition_representations[1]\property_definition_representation.
        used_representation;
    IF ( SIZEOF( selected_representation\representation.items ) < 1 ) OR ( SIZEOF( selected_representation\
        representation.items ) > 2 ) THEN
      RETURN( FALSE );
    END_IF;
    IF SIZEOF( QUERY ( i <* selected_representation\representation.items | ( ( SIZEOF( [
        'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.MEASURE_REPRESENTATION_ITEM' , 
        'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.VALUE_RANGE' ] * TYPEOF( i ) ) = 1 ) AND ( i.name = 
        'selection quantity'  ) ) ) ) <> 1 THEN
      RETURN( FALSE );
    END_IF;
    IF SIZEOF( QUERY ( i <* selected_representation\representation.items | ( ( 
        'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.DESCRIPTIVE_REPRESENTATION_ITEM'  IN TYPEOF( i ) ) 
        AND ( i.name = 'selection control' ) ) ) ) > 1 THEN
      RETURN( FALSE );
    END_IF;
    IF ( SIZEOF( QUERY ( i <* selected_representation\representation.items | ( ( 
        'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.DESCRIPTIVE_REPRESENTATION_ITEM'  IN TYPEOF( i ) ) 
        AND ( i.name = 'selection control' ) ) ) ) = 0 ) AND ( SIZEOF( QUERY ( i <* selected_representation\
        representation.items | ( ( i.name = 'selection quantity' ) AND ( SIZEOF( [
        'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.QUALIFIED_REPRESENTATION_ITEM' , 
        'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.VALUE_RANGE' ] * TYPEOF( i ) ) = 0 ) ) ) ) > 0 )
        THEN
      RETURN( FALSE );
    END_IF;
    RETURN( TRUE );

  END_FUNCTION; -- valid_selected_instance_representation (line:47684 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func VALID_SELECTED_INSTANCE_REPRESENTATION(
    _ PD: sPRODUCT_DEFINITION_OR_ASSEMBLY_RELATIONSHIP? ) 
    -> SDAI.LOGICAL {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( PD )
    if case .available(let _cached_value) = _valid_selected_instance_representation__cache.cachedValue(params: _params) {
      return _cached_value as! SDAI.LOGICAL
    }

    var PD = PD; SDAI.TOUCH(var: &PD)

    //LOCAL
    var PROPERTIES: SDAI.SET<ePROPERTY_DEFINITION>?  = SDAI.SET<ePROPERTY_DEFINITION>(generic: /*SDAI.SET<
                                                       gINTYPE>*/BAG_TO_SET(
                                                       SDAI.USEDIN(T: PD, 
                                                       ROLE: \AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF
                                                       .ePROPERTY_DEFINITION.DEFINITION)
                                                       .QUERY{ PRD in 

                                                         let _TEMP1 = /*runtime*/PRD.NAME
                                                         let _TEMP2 = SDAI.FORCE_OPTIONAL(/*runtime*/_TEMP1)
                                                           .==. SDAI.FORCE_OPTIONAL(SDAI.STRING(
                                                           "occurrence selection"))
                                                         return _TEMP2 })); SDAI.TOUCH(var: &PROPERTIES)
    var PROPERTY_DEFINITION_REPRESENTATIONS: SDAI.SET<ePROPERTY_DEFINITION_REPRESENTATION>?  = 
      SDAI.SET<ePROPERTY_DEFINITION_REPRESENTATION>(generic: /*SDAI.SET<gINTYPE>*/BAG_TO_SET(
      SDAI.USEDIN(T: PROPERTIES?[1], ROLE: \AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF
      .ePROPERTY_DEFINITION_REPRESENTATION.DEFINITION)
      .QUERY{ PDR in 

        let _TEMP1 = /*runtime*/PDR.USED_REPRESENTATION
        let _TEMP2 = /*runtime*/SDAI.FORCE_OPTIONAL(_TEMP1)?.NAME
        let _TEMP3 = SDAI.FORCE_OPTIONAL(/*runtime*/_TEMP2) .==. SDAI.FORCE_OPTIONAL(SDAI.STRING(
          "selection criteria"))
        return _TEMP3 })); SDAI.TOUCH(var: &PROPERTY_DEFINITION_REPRESENTATIONS)
    var SELECTED_REPRESENTATION: eREPRESENTATION? 
    //END_LOCAL

    
    let _TEMP1 = SDAI.SIZEOF(PROPERTIES)
    let _TEMP2 = _TEMP1 .!=. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
    if SDAI.IS_TRUE( _TEMP2 ) {
      return _valid_selected_instance_representation__cache.updateCache(params: _params, value: SDAI.UNWRAP(
        SDAI.LOGICAL(SDAI.FALSE)))
    }
    
    let _TEMP3 = SDAI.SIZEOF(PROPERTY_DEFINITION_REPRESENTATIONS)
    let _TEMP4 = _TEMP3 .!=. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
    if SDAI.IS_TRUE( _TEMP4 ) {
      return _valid_selected_instance_representation__cache.updateCache(params: _params, value: SDAI.UNWRAP(
        SDAI.LOGICAL(SDAI.FALSE)))
    }
    
    let _TEMP5 = PROPERTY_DEFINITION_REPRESENTATIONS?[1]
    let _TEMP6 = _TEMP5?.GROUP_REF(ePROPERTY_DEFINITION_REPRESENTATION.self)
    let _TEMP7 = _TEMP6?.USED_REPRESENTATION
    SELECTED_REPRESENTATION = _TEMP7
    
    let _TEMP8 = SELECTED_REPRESENTATION?.GROUP_REF(eREPRESENTATION.self)
    let _TEMP9 = _TEMP8?.ITEMS
    let _TEMP10 = SDAI.SIZEOF(_TEMP9)
    let _TEMP11 = _TEMP10 < SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
    let _TEMP12 = SELECTED_REPRESENTATION?.GROUP_REF(eREPRESENTATION.self)
    let _TEMP13 = _TEMP12?.ITEMS
    let _TEMP14 = SDAI.SIZEOF(_TEMP13)
    let _TEMP15 = _TEMP14 > SDAI.FORCE_OPTIONAL(SDAI.INTEGER(2))
    let _TEMP16 = _TEMP11 || _TEMP15
    if SDAI.IS_TRUE( _TEMP16 ) {
      return _valid_selected_instance_representation__cache.updateCache(params: _params, value: SDAI.UNWRAP(
        SDAI.LOGICAL(SDAI.FALSE)))
    }
    
    let _TEMP17 = SELECTED_REPRESENTATION?.GROUP_REF(eREPRESENTATION.self)
    let _TEMP18 = _TEMP17?.ITEMS
    let _TEMP19 = _TEMP18?.QUERY{ I in 

        let _TEMP1 = ([SDAI.AIE(SDAI.STRING(
          "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.MEASURE_REPRESENTATION_ITEM")), 
          SDAI.AIE(SDAI.STRING("AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.VALUE_RANGE"))] 
          as [SDAI.AggregationInitializerElement<SDAI.STRING>])
        let _TEMP2 = SDAI.TYPEOF(I)
        let _TEMP3 = SDAI.FORCE_OPTIONAL(_TEMP1) * SDAI.FORCE_OPTIONAL(_TEMP2)
        let _TEMP4 = SDAI.SIZEOF(_TEMP3)
        let _TEMP5 = _TEMP4 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
        let _TEMP6 = I.NAME
        let _TEMP7 = SDAI.FORCE_OPTIONAL(_TEMP6) .==. SDAI.FORCE_OPTIONAL(SDAI.STRING("selection quantity"))
        let _TEMP8 = _TEMP5 && _TEMP7
        return _TEMP8 }
    let _TEMP20 = SDAI.SIZEOF(_TEMP19)
    let _TEMP21 = _TEMP20 .!=. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
    if SDAI.IS_TRUE( _TEMP21 ) {
      return _valid_selected_instance_representation__cache.updateCache(params: _params, value: SDAI.UNWRAP(
        SDAI.LOGICAL(SDAI.FALSE)))
    }
    
    let _TEMP22 = SELECTED_REPRESENTATION?.GROUP_REF(eREPRESENTATION.self)
    let _TEMP23 = _TEMP22?.ITEMS
    let _TEMP24 = _TEMP23?.QUERY{ I in 

        let _TEMP1 = SDAI.TYPEOF(I, IS: eDESCRIPTIVE_REPRESENTATION_ITEM.self)
        let _TEMP2 = I.NAME
        let _TEMP3 = SDAI.FORCE_OPTIONAL(_TEMP2) .==. SDAI.FORCE_OPTIONAL(SDAI.STRING("selection control"))
        let _TEMP4 = _TEMP1 && _TEMP3
        return _TEMP4 }
    let _TEMP25 = SDAI.SIZEOF(_TEMP24)
    let _TEMP26 = _TEMP25 > SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
    if SDAI.IS_TRUE( _TEMP26 ) {
      return _valid_selected_instance_representation__cache.updateCache(params: _params, value: SDAI.UNWRAP(
        SDAI.LOGICAL(SDAI.FALSE)))
    }
    
    let _TEMP27 = SELECTED_REPRESENTATION?.GROUP_REF(eREPRESENTATION.self)
    let _TEMP28 = _TEMP27?.ITEMS
    let _TEMP29 = _TEMP28?.QUERY{ I in 

        let _TEMP1 = SDAI.TYPEOF(I, IS: eDESCRIPTIVE_REPRESENTATION_ITEM.self)
        let _TEMP2 = I.NAME
        let _TEMP3 = SDAI.FORCE_OPTIONAL(_TEMP2) .==. SDAI.FORCE_OPTIONAL(SDAI.STRING("selection control"))
        let _TEMP4 = _TEMP1 && _TEMP3
        return _TEMP4 }
    let _TEMP30 = SDAI.SIZEOF(_TEMP29)
    let _TEMP31 = _TEMP30 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
    let _TEMP32 = SELECTED_REPRESENTATION?.GROUP_REF(eREPRESENTATION.self)
    let _TEMP33 = _TEMP32?.ITEMS
    let _TEMP34 = _TEMP33?.QUERY{ I in 

        let _TEMP1 = I.NAME
        let _TEMP2 = SDAI.FORCE_OPTIONAL(_TEMP1) .==. SDAI.FORCE_OPTIONAL(SDAI.STRING("selection quantity"))
        let _TEMP3 = ([SDAI.AIE(SDAI.STRING(
          "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.QUALIFIED_REPRESENTATION_ITEM")), 
          SDAI.AIE(SDAI.STRING("AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.VALUE_RANGE"))] 
          as [SDAI.AggregationInitializerElement<SDAI.STRING>])
        let _TEMP4 = SDAI.TYPEOF(I)
        let _TEMP5 = SDAI.FORCE_OPTIONAL(_TEMP3) * SDAI.FORCE_OPTIONAL(_TEMP4)
        let _TEMP6 = SDAI.SIZEOF(_TEMP5)
        let _TEMP7 = _TEMP6 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
        let _TEMP8 = _TEMP2 && _TEMP7
        return _TEMP8 }
    let _TEMP35 = SDAI.SIZEOF(_TEMP34)
    let _TEMP36 = _TEMP35 > SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
    let _TEMP37 = _TEMP31 && _TEMP36
    if SDAI.IS_TRUE( _TEMP37 ) {
      return _valid_selected_instance_representation__cache.updateCache(params: _params, value: SDAI.UNWRAP(
        SDAI.LOGICAL(SDAI.FALSE)))
    }
    return _valid_selected_instance_representation__cache.updateCache(params: _params, value: SDAI.UNWRAP(
      SDAI.LOGICAL(SDAI.TRUE)))
  }

}

//MARK: - function result cache
private var _valid_selected_instance_representation__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

