/* file: valid_units.swift 	 generated: Mon Jan  3 16:32:52 2022 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.1, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION valid_units(
               m : measure_with_unit
           ) : BOOLEAN;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.LENGTH_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( 1, 0, 0, 0, 0, 0, 0 )
          THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.MASS_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( 0, 1, 0, 0, 0, 0, 0 )
          THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.TIME_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( 0, 0, 1, 0, 0, 0, 0 )
          THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ELECTRIC_CURRENT_MEASURE' IN TYPEOF( m.
        value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( 0, 0, 0, 1, 0, 0, 0 )
          THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.THERMODYNAMIC_TEMPERATURE_MEASURE' IN TYPEOF( m.
        value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( 0, 0, 0, 0, 1, 0, 0 )
          THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CELSIUS_TEMPERATURE_MEASURE' IN TYPEOF( m.
        value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( 0, 0, 0, 0, 1, 0, 0 )
          THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.AMOUNT_OF_SUBSTANCE_MEASURE' IN TYPEOF( m.
        value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( 0, 0, 0, 0, 0, 1, 0 )
          THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.LUMINOUS_INTENSITY_MEASURE' IN TYPEOF( m.
        value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( 0, 0, 0, 0, 0, 0, 1 )
          THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PLANE_ANGLE_MEASURE' IN TYPEOF( m.value_component )
        THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( 0, 0, 0, 0, 0, 0, 0 )
          THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SOLID_ANGLE_MEASURE' IN TYPEOF( m.value_component )
        THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( 0, 0, 0, 0, 0, 0, 0 )
          THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.AREA_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( 2, 0, 0, 0, 0, 0, 0 )
          THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.VOLUME_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( 3, 0, 0, 0, 0, 0, 0 )
          THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.RATIO_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( 0, 0, 0, 0, 0, 0, 0 )
          THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.POSITIVE_LENGTH_MEASURE' IN TYPEOF( m.value_component )
        THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( 1, 0, 0, 0, 0, 0, 0 )
          THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.POSITIVE_PLANE_ANGLE_MEASURE' IN TYPEOF( m.
        value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( 0, 0, 0, 0, 0, 0, 0 )
          THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ACCELERATION_MEASURE' IN TYPEOF( m.value_component )
        THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( 1, 0, -2, 0, 0, 0, 0 )
          THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CAPACITANCE_MEASURE' IN TYPEOF( m.value_component )
        THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( -2, -1, 4, 2, 0, 0, 0 )
          THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ELECTRIC_CHARGE_MEASURE' IN TYPEOF( m.value_component )
        THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( 0, 0, 1, 1, 0, 0, 0 )
          THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CONDUCTANCE_MEASURE' IN TYPEOF( m.value_component )
        THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( -2, -1, 3, 2, 0, 0, 0 )
          THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ELECTRIC_POTENTIAL_MEASURE' IN TYPEOF( m.
        value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( 2, 1, -3, -1, 0, 0, 0 )
          THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ENERGY_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( 2, 1, -2, 0, 0, 0, 0 )
          THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.FORCE_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( 1, 1, -2, 0, 0, 0, 0 )
          THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.FREQUENCY_MEASURE' IN TYPEOF( m.value_component )
        THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( 0, 0, -1, 0, 0, 0, 0 )
          THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ILLUMINANCE_MEASURE' IN TYPEOF( m.value_component )
        THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( -2, 0, 0, 0, 0, 0, 1 )
          THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.INDUCTANCE_MEASURE' IN TYPEOF( m.value_component )
        THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( 2, 1, -2, -2, 0, 0, 0 )
          THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.LUMINOUS_FLUX_MEASURE' IN TYPEOF( m.value_component )
        THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( 0, 0, 0, 0, 0, 0, 1 )
          THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.MAGNETIC_FLUX_MEASURE' IN TYPEOF( m.value_component )
        THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( 2, 1, -2, -1, 0, 0, 0 )
          THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.MAGNETIC_FLUX_DENSITY_MEASURE' IN TYPEOF( m.
        value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( 0, 1, -2, -1, 0, 0, 0 )
          THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.POWER_MEASURE' IN TYPEOF( m.value_component ) THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( 2, 1, -3, 0, 0, 0, 0 )
          THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PRESSURE_MEASURE' IN TYPEOF( m.value_component )
        THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( -1, 1, -2, 0, 0, 0, 0 )
          THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.RESISTANCE_MEASURE' IN TYPEOF( m.value_component )
        THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( 2, 1, -3, -2, 0, 0, 0 )
          THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.VELOCITY_MEASURE' IN TYPEOF( m.value_component )
        THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( 1, 0, -1, 0, 0, 0, 0 )
          THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.RADIOACTIVITY_MEASURE' IN TYPEOF( m.value_component )
        THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( 0, 0, -1, 0, 0, 0, 0 )
          THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ABSORBED_DOSE_MEASURE' IN TYPEOF( m.value_component )
        THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( 2, 0, -2, 0, 0, 0, 0 )
          THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.DOSE_EQUIVALENT_MEASURE' IN TYPEOF( m.value_component )
        THEN
      IF derive_dimensional_exponents( m.unit_component ) <> dimensional_exponents( 2, 0, -2, 0, 0, 0, 0 )
          THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    RETURN( TRUE );

  END_FUNCTION; -- valid_units (line:47772 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func VALID_UNITS(_ M: eMEASURE_WITH_UNIT? ) 
    -> SDAI.BOOLEAN? {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( M )
    if case .available(let _cached_value) = _valid_units__cache.cachedValue(params: _params) {
      return _cached_value as? SDAI.BOOLEAN
    }

    var M = M; SDAI.TOUCH(var: &M)

    
    let _TEMP1 = SDAI.TYPEOF(M?.VALUE_COMPONENT, IS: tLENGTH_MEASURE.self)
    if SDAI.IS_TRUE( _TEMP1 ) {
      
      let _TEMP2 = M?.UNIT_COMPONENT
      let _TEMP3 = DERIVE_DIMENSIONAL_EXPONENTS(_TEMP2)
      let _TEMP4 = _dimensional_exponents(
        LENGTH_EXPONENT: SDAI.UNWRAP(SDAI.REAL(1.0000000000e+00)), 
        MASS_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        TIME_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        ELECTRIC_CURRENT_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        THERMODYNAMIC_TEMPERATURE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        AMOUNT_OF_SUBSTANCE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        LUMINOUS_INTENSITY_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)))
      let _TEMP5 = _TEMP3 .!=. SDAI.FORCE_OPTIONAL(eDIMENSIONAL_EXPONENTS(/*partial entity*/_TEMP4))
      if SDAI.IS_TRUE( _TEMP5 ) {
        return _valid_units__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
      }
    }
    
    let _TEMP6 = SDAI.TYPEOF(M?.VALUE_COMPONENT, IS: tMASS_MEASURE.self)
    if SDAI.IS_TRUE( _TEMP6 ) {
      
      let _TEMP7 = M?.UNIT_COMPONENT
      let _TEMP8 = DERIVE_DIMENSIONAL_EXPONENTS(_TEMP7)
      let _TEMP9 = _dimensional_exponents(
        LENGTH_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        MASS_EXPONENT: SDAI.UNWRAP(SDAI.REAL(1.0000000000e+00)), 
        TIME_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        ELECTRIC_CURRENT_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        THERMODYNAMIC_TEMPERATURE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        AMOUNT_OF_SUBSTANCE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        LUMINOUS_INTENSITY_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)))
      let _TEMP10 = _TEMP8 .!=. SDAI.FORCE_OPTIONAL(eDIMENSIONAL_EXPONENTS(/*partial entity*/_TEMP9))
      if SDAI.IS_TRUE( _TEMP10 ) {
        return _valid_units__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
      }
    }
    
    let _TEMP11 = SDAI.TYPEOF(M?.VALUE_COMPONENT, IS: tTIME_MEASURE.self)
    if SDAI.IS_TRUE( _TEMP11 ) {
      
      let _TEMP12 = M?.UNIT_COMPONENT
      let _TEMP13 = DERIVE_DIMENSIONAL_EXPONENTS(_TEMP12)
      let _TEMP14 = _dimensional_exponents(
        LENGTH_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        MASS_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        TIME_EXPONENT: SDAI.UNWRAP(SDAI.REAL(1.0000000000e+00)), 
        ELECTRIC_CURRENT_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        THERMODYNAMIC_TEMPERATURE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        AMOUNT_OF_SUBSTANCE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        LUMINOUS_INTENSITY_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)))
      let _TEMP15 = _TEMP13 .!=. SDAI.FORCE_OPTIONAL(eDIMENSIONAL_EXPONENTS(/*partial entity*/_TEMP14))
      if SDAI.IS_TRUE( _TEMP15 ) {
        return _valid_units__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
      }
    }
    
    let _TEMP16 = SDAI.TYPEOF(M?.VALUE_COMPONENT, IS: tELECTRIC_CURRENT_MEASURE.self)
    if SDAI.IS_TRUE( _TEMP16 ) {
      
      let _TEMP17 = M?.UNIT_COMPONENT
      let _TEMP18 = DERIVE_DIMENSIONAL_EXPONENTS(_TEMP17)
      let _TEMP19 = _dimensional_exponents(
        LENGTH_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        MASS_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        TIME_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        ELECTRIC_CURRENT_EXPONENT: SDAI.UNWRAP(SDAI.REAL(1.0000000000e+00)), 
        THERMODYNAMIC_TEMPERATURE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        AMOUNT_OF_SUBSTANCE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        LUMINOUS_INTENSITY_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)))
      let _TEMP20 = _TEMP18 .!=. SDAI.FORCE_OPTIONAL(eDIMENSIONAL_EXPONENTS(/*partial entity*/_TEMP19))
      if SDAI.IS_TRUE( _TEMP20 ) {
        return _valid_units__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
      }
    }
    
    let _TEMP21 = SDAI.TYPEOF(M?.VALUE_COMPONENT, IS: tTHERMODYNAMIC_TEMPERATURE_MEASURE.self)
    if SDAI.IS_TRUE( _TEMP21 ) {
      
      let _TEMP22 = M?.UNIT_COMPONENT
      let _TEMP23 = DERIVE_DIMENSIONAL_EXPONENTS(_TEMP22)
      let _TEMP24 = _dimensional_exponents(
        LENGTH_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        MASS_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        TIME_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        ELECTRIC_CURRENT_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        THERMODYNAMIC_TEMPERATURE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(1.0000000000e+00)), 
        AMOUNT_OF_SUBSTANCE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        LUMINOUS_INTENSITY_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)))
      let _TEMP25 = _TEMP23 .!=. SDAI.FORCE_OPTIONAL(eDIMENSIONAL_EXPONENTS(/*partial entity*/_TEMP24))
      if SDAI.IS_TRUE( _TEMP25 ) {
        return _valid_units__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
      }
    }
    
    let _TEMP26 = SDAI.TYPEOF(M?.VALUE_COMPONENT, IS: tCELSIUS_TEMPERATURE_MEASURE.self)
    if SDAI.IS_TRUE( _TEMP26 ) {
      
      let _TEMP27 = M?.UNIT_COMPONENT
      let _TEMP28 = DERIVE_DIMENSIONAL_EXPONENTS(_TEMP27)
      let _TEMP29 = _dimensional_exponents(
        LENGTH_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        MASS_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        TIME_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        ELECTRIC_CURRENT_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        THERMODYNAMIC_TEMPERATURE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(1.0000000000e+00)), 
        AMOUNT_OF_SUBSTANCE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        LUMINOUS_INTENSITY_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)))
      let _TEMP30 = _TEMP28 .!=. SDAI.FORCE_OPTIONAL(eDIMENSIONAL_EXPONENTS(/*partial entity*/_TEMP29))
      if SDAI.IS_TRUE( _TEMP30 ) {
        return _valid_units__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
      }
    }
    
    let _TEMP31 = SDAI.TYPEOF(M?.VALUE_COMPONENT, IS: tAMOUNT_OF_SUBSTANCE_MEASURE.self)
    if SDAI.IS_TRUE( _TEMP31 ) {
      
      let _TEMP32 = M?.UNIT_COMPONENT
      let _TEMP33 = DERIVE_DIMENSIONAL_EXPONENTS(_TEMP32)
      let _TEMP34 = _dimensional_exponents(
        LENGTH_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        MASS_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        TIME_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        ELECTRIC_CURRENT_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        THERMODYNAMIC_TEMPERATURE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        AMOUNT_OF_SUBSTANCE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(1.0000000000e+00)), 
        LUMINOUS_INTENSITY_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)))
      let _TEMP35 = _TEMP33 .!=. SDAI.FORCE_OPTIONAL(eDIMENSIONAL_EXPONENTS(/*partial entity*/_TEMP34))
      if SDAI.IS_TRUE( _TEMP35 ) {
        return _valid_units__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
      }
    }
    
    let _TEMP36 = SDAI.TYPEOF(M?.VALUE_COMPONENT, IS: tLUMINOUS_INTENSITY_MEASURE.self)
    if SDAI.IS_TRUE( _TEMP36 ) {
      
      let _TEMP37 = M?.UNIT_COMPONENT
      let _TEMP38 = DERIVE_DIMENSIONAL_EXPONENTS(_TEMP37)
      let _TEMP39 = _dimensional_exponents(
        LENGTH_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        MASS_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        TIME_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        ELECTRIC_CURRENT_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        THERMODYNAMIC_TEMPERATURE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        AMOUNT_OF_SUBSTANCE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        LUMINOUS_INTENSITY_EXPONENT: SDAI.UNWRAP(SDAI.REAL(1.0000000000e+00)))
      let _TEMP40 = _TEMP38 .!=. SDAI.FORCE_OPTIONAL(eDIMENSIONAL_EXPONENTS(/*partial entity*/_TEMP39))
      if SDAI.IS_TRUE( _TEMP40 ) {
        return _valid_units__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
      }
    }
    
    let _TEMP41 = SDAI.TYPEOF(M?.VALUE_COMPONENT, IS: tPLANE_ANGLE_MEASURE.self)
    if SDAI.IS_TRUE( _TEMP41 ) {
      
      let _TEMP42 = M?.UNIT_COMPONENT
      let _TEMP43 = DERIVE_DIMENSIONAL_EXPONENTS(_TEMP42)
      let _TEMP44 = _dimensional_exponents(
        LENGTH_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        MASS_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        TIME_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        ELECTRIC_CURRENT_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        THERMODYNAMIC_TEMPERATURE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        AMOUNT_OF_SUBSTANCE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        LUMINOUS_INTENSITY_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)))
      let _TEMP45 = _TEMP43 .!=. SDAI.FORCE_OPTIONAL(eDIMENSIONAL_EXPONENTS(/*partial entity*/_TEMP44))
      if SDAI.IS_TRUE( _TEMP45 ) {
        return _valid_units__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
      }
    }
    
    let _TEMP46 = SDAI.TYPEOF(M?.VALUE_COMPONENT, IS: tSOLID_ANGLE_MEASURE.self)
    if SDAI.IS_TRUE( _TEMP46 ) {
      
      let _TEMP47 = M?.UNIT_COMPONENT
      let _TEMP48 = DERIVE_DIMENSIONAL_EXPONENTS(_TEMP47)
      let _TEMP49 = _dimensional_exponents(
        LENGTH_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        MASS_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        TIME_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        ELECTRIC_CURRENT_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        THERMODYNAMIC_TEMPERATURE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        AMOUNT_OF_SUBSTANCE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        LUMINOUS_INTENSITY_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)))
      let _TEMP50 = _TEMP48 .!=. SDAI.FORCE_OPTIONAL(eDIMENSIONAL_EXPONENTS(/*partial entity*/_TEMP49))
      if SDAI.IS_TRUE( _TEMP50 ) {
        return _valid_units__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
      }
    }
    
    let _TEMP51 = SDAI.TYPEOF(M?.VALUE_COMPONENT, IS: tAREA_MEASURE.self)
    if SDAI.IS_TRUE( _TEMP51 ) {
      
      let _TEMP52 = M?.UNIT_COMPONENT
      let _TEMP53 = DERIVE_DIMENSIONAL_EXPONENTS(_TEMP52)
      let _TEMP54 = _dimensional_exponents(
        LENGTH_EXPONENT: SDAI.UNWRAP(SDAI.REAL(2.0000000000e+00)), 
        MASS_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        TIME_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        ELECTRIC_CURRENT_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        THERMODYNAMIC_TEMPERATURE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        AMOUNT_OF_SUBSTANCE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        LUMINOUS_INTENSITY_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)))
      let _TEMP55 = _TEMP53 .!=. SDAI.FORCE_OPTIONAL(eDIMENSIONAL_EXPONENTS(/*partial entity*/_TEMP54))
      if SDAI.IS_TRUE( _TEMP55 ) {
        return _valid_units__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
      }
    }
    
    let _TEMP56 = SDAI.TYPEOF(M?.VALUE_COMPONENT, IS: tVOLUME_MEASURE.self)
    if SDAI.IS_TRUE( _TEMP56 ) {
      
      let _TEMP57 = M?.UNIT_COMPONENT
      let _TEMP58 = DERIVE_DIMENSIONAL_EXPONENTS(_TEMP57)
      let _TEMP59 = _dimensional_exponents(
        LENGTH_EXPONENT: SDAI.UNWRAP(SDAI.REAL(3.0000000000e+00)), 
        MASS_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        TIME_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        ELECTRIC_CURRENT_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        THERMODYNAMIC_TEMPERATURE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        AMOUNT_OF_SUBSTANCE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        LUMINOUS_INTENSITY_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)))
      let _TEMP60 = _TEMP58 .!=. SDAI.FORCE_OPTIONAL(eDIMENSIONAL_EXPONENTS(/*partial entity*/_TEMP59))
      if SDAI.IS_TRUE( _TEMP60 ) {
        return _valid_units__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
      }
    }
    
    let _TEMP61 = SDAI.TYPEOF(M?.VALUE_COMPONENT, IS: tRATIO_MEASURE.self)
    if SDAI.IS_TRUE( _TEMP61 ) {
      
      let _TEMP62 = M?.UNIT_COMPONENT
      let _TEMP63 = DERIVE_DIMENSIONAL_EXPONENTS(_TEMP62)
      let _TEMP64 = _dimensional_exponents(
        LENGTH_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        MASS_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        TIME_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        ELECTRIC_CURRENT_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        THERMODYNAMIC_TEMPERATURE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        AMOUNT_OF_SUBSTANCE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        LUMINOUS_INTENSITY_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)))
      let _TEMP65 = _TEMP63 .!=. SDAI.FORCE_OPTIONAL(eDIMENSIONAL_EXPONENTS(/*partial entity*/_TEMP64))
      if SDAI.IS_TRUE( _TEMP65 ) {
        return _valid_units__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
      }
    }
    
    let _TEMP66 = SDAI.TYPEOF(M?.VALUE_COMPONENT, IS: tPOSITIVE_LENGTH_MEASURE.self)
    if SDAI.IS_TRUE( _TEMP66 ) {
      
      let _TEMP67 = M?.UNIT_COMPONENT
      let _TEMP68 = DERIVE_DIMENSIONAL_EXPONENTS(_TEMP67)
      let _TEMP69 = _dimensional_exponents(
        LENGTH_EXPONENT: SDAI.UNWRAP(SDAI.REAL(1.0000000000e+00)), 
        MASS_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        TIME_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        ELECTRIC_CURRENT_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        THERMODYNAMIC_TEMPERATURE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        AMOUNT_OF_SUBSTANCE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        LUMINOUS_INTENSITY_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)))
      let _TEMP70 = _TEMP68 .!=. SDAI.FORCE_OPTIONAL(eDIMENSIONAL_EXPONENTS(/*partial entity*/_TEMP69))
      if SDAI.IS_TRUE( _TEMP70 ) {
        return _valid_units__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
      }
    }
    
    let _TEMP71 = SDAI.TYPEOF(M?.VALUE_COMPONENT, IS: tPOSITIVE_PLANE_ANGLE_MEASURE.self)
    if SDAI.IS_TRUE( _TEMP71 ) {
      
      let _TEMP72 = M?.UNIT_COMPONENT
      let _TEMP73 = DERIVE_DIMENSIONAL_EXPONENTS(_TEMP72)
      let _TEMP74 = _dimensional_exponents(
        LENGTH_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        MASS_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        TIME_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        ELECTRIC_CURRENT_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        THERMODYNAMIC_TEMPERATURE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        AMOUNT_OF_SUBSTANCE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        LUMINOUS_INTENSITY_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)))
      let _TEMP75 = _TEMP73 .!=. SDAI.FORCE_OPTIONAL(eDIMENSIONAL_EXPONENTS(/*partial entity*/_TEMP74))
      if SDAI.IS_TRUE( _TEMP75 ) {
        return _valid_units__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
      }
    }
    
    let _TEMP76 = SDAI.TYPEOF(M?.VALUE_COMPONENT, IS: tACCELERATION_MEASURE.self)
    if SDAI.IS_TRUE( _TEMP76 ) {
      
      let _TEMP77 = M?.UNIT_COMPONENT
      let _TEMP78 = DERIVE_DIMENSIONAL_EXPONENTS(_TEMP77)
      let _TEMP79 = _dimensional_exponents(
        LENGTH_EXPONENT: SDAI.UNWRAP(SDAI.REAL(1.0000000000e+00)), 
        MASS_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        TIME_EXPONENT: SDAI.UNWRAP(SDAI.REAL( -2.0000000000e+00)), 
        ELECTRIC_CURRENT_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        THERMODYNAMIC_TEMPERATURE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        AMOUNT_OF_SUBSTANCE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        LUMINOUS_INTENSITY_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)))
      let _TEMP80 = _TEMP78 .!=. SDAI.FORCE_OPTIONAL(eDIMENSIONAL_EXPONENTS(/*partial entity*/_TEMP79))
      if SDAI.IS_TRUE( _TEMP80 ) {
        return _valid_units__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
      }
    }
    
    let _TEMP81 = SDAI.TYPEOF(M?.VALUE_COMPONENT, IS: tCAPACITANCE_MEASURE.self)
    if SDAI.IS_TRUE( _TEMP81 ) {
      
      let _TEMP82 = M?.UNIT_COMPONENT
      let _TEMP83 = DERIVE_DIMENSIONAL_EXPONENTS(_TEMP82)
      let _TEMP84 = _dimensional_exponents(
        LENGTH_EXPONENT: SDAI.UNWRAP(SDAI.REAL( -2.0000000000e+00)), 
        MASS_EXPONENT: SDAI.UNWRAP(SDAI.REAL( -1.0000000000e+00)), 
        TIME_EXPONENT: SDAI.UNWRAP(SDAI.REAL(4.0000000000e+00)), 
        ELECTRIC_CURRENT_EXPONENT: SDAI.UNWRAP(SDAI.REAL(2.0000000000e+00)), 
        THERMODYNAMIC_TEMPERATURE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        AMOUNT_OF_SUBSTANCE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        LUMINOUS_INTENSITY_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)))
      let _TEMP85 = _TEMP83 .!=. SDAI.FORCE_OPTIONAL(eDIMENSIONAL_EXPONENTS(/*partial entity*/_TEMP84))
      if SDAI.IS_TRUE( _TEMP85 ) {
        return _valid_units__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
      }
    }
    
    let _TEMP86 = SDAI.TYPEOF(M?.VALUE_COMPONENT, IS: tELECTRIC_CHARGE_MEASURE.self)
    if SDAI.IS_TRUE( _TEMP86 ) {
      
      let _TEMP87 = M?.UNIT_COMPONENT
      let _TEMP88 = DERIVE_DIMENSIONAL_EXPONENTS(_TEMP87)
      let _TEMP89 = _dimensional_exponents(
        LENGTH_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        MASS_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        TIME_EXPONENT: SDAI.UNWRAP(SDAI.REAL(1.0000000000e+00)), 
        ELECTRIC_CURRENT_EXPONENT: SDAI.UNWRAP(SDAI.REAL(1.0000000000e+00)), 
        THERMODYNAMIC_TEMPERATURE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        AMOUNT_OF_SUBSTANCE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        LUMINOUS_INTENSITY_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)))
      let _TEMP90 = _TEMP88 .!=. SDAI.FORCE_OPTIONAL(eDIMENSIONAL_EXPONENTS(/*partial entity*/_TEMP89))
      if SDAI.IS_TRUE( _TEMP90 ) {
        return _valid_units__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
      }
    }
    
    let _TEMP91 = SDAI.TYPEOF(M?.VALUE_COMPONENT, IS: tCONDUCTANCE_MEASURE.self)
    if SDAI.IS_TRUE( _TEMP91 ) {
      
      let _TEMP92 = M?.UNIT_COMPONENT
      let _TEMP93 = DERIVE_DIMENSIONAL_EXPONENTS(_TEMP92)
      let _TEMP94 = _dimensional_exponents(
        LENGTH_EXPONENT: SDAI.UNWRAP(SDAI.REAL( -2.0000000000e+00)), 
        MASS_EXPONENT: SDAI.UNWRAP(SDAI.REAL( -1.0000000000e+00)), 
        TIME_EXPONENT: SDAI.UNWRAP(SDAI.REAL(3.0000000000e+00)), 
        ELECTRIC_CURRENT_EXPONENT: SDAI.UNWRAP(SDAI.REAL(2.0000000000e+00)), 
        THERMODYNAMIC_TEMPERATURE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        AMOUNT_OF_SUBSTANCE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        LUMINOUS_INTENSITY_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)))
      let _TEMP95 = _TEMP93 .!=. SDAI.FORCE_OPTIONAL(eDIMENSIONAL_EXPONENTS(/*partial entity*/_TEMP94))
      if SDAI.IS_TRUE( _TEMP95 ) {
        return _valid_units__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
      }
    }
    
    let _TEMP96 = SDAI.TYPEOF(M?.VALUE_COMPONENT, IS: tELECTRIC_POTENTIAL_MEASURE.self)
    if SDAI.IS_TRUE( _TEMP96 ) {
      
      let _TEMP97 = M?.UNIT_COMPONENT
      let _TEMP98 = DERIVE_DIMENSIONAL_EXPONENTS(_TEMP97)
      let _TEMP99 = _dimensional_exponents(
        LENGTH_EXPONENT: SDAI.UNWRAP(SDAI.REAL(2.0000000000e+00)), 
        MASS_EXPONENT: SDAI.UNWRAP(SDAI.REAL(1.0000000000e+00)), 
        TIME_EXPONENT: SDAI.UNWRAP(SDAI.REAL( -3.0000000000e+00)), 
        ELECTRIC_CURRENT_EXPONENT: SDAI.UNWRAP(SDAI.REAL( -1.0000000000e+00)), 
        THERMODYNAMIC_TEMPERATURE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        AMOUNT_OF_SUBSTANCE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        LUMINOUS_INTENSITY_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)))
      let _TEMP100 = _TEMP98 .!=. SDAI.FORCE_OPTIONAL(eDIMENSIONAL_EXPONENTS(/*partial entity*/_TEMP99))
      if SDAI.IS_TRUE( _TEMP100 ) {
        return _valid_units__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
      }
    }
    
    let _TEMP101 = SDAI.TYPEOF(M?.VALUE_COMPONENT, IS: tENERGY_MEASURE.self)
    if SDAI.IS_TRUE( _TEMP101 ) {
      
      let _TEMP102 = M?.UNIT_COMPONENT
      let _TEMP103 = DERIVE_DIMENSIONAL_EXPONENTS(_TEMP102)
      let _TEMP104 = _dimensional_exponents(
        LENGTH_EXPONENT: SDAI.UNWRAP(SDAI.REAL(2.0000000000e+00)), 
        MASS_EXPONENT: SDAI.UNWRAP(SDAI.REAL(1.0000000000e+00)), 
        TIME_EXPONENT: SDAI.UNWRAP(SDAI.REAL( -2.0000000000e+00)), 
        ELECTRIC_CURRENT_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        THERMODYNAMIC_TEMPERATURE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        AMOUNT_OF_SUBSTANCE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        LUMINOUS_INTENSITY_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)))
      let _TEMP105 = _TEMP103 .!=. SDAI.FORCE_OPTIONAL(eDIMENSIONAL_EXPONENTS(/*partial entity*/_TEMP104))
      if SDAI.IS_TRUE( _TEMP105 ) {
        return _valid_units__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
      }
    }
    
    let _TEMP106 = SDAI.TYPEOF(M?.VALUE_COMPONENT, IS: tFORCE_MEASURE.self)
    if SDAI.IS_TRUE( _TEMP106 ) {
      
      let _TEMP107 = M?.UNIT_COMPONENT
      let _TEMP108 = DERIVE_DIMENSIONAL_EXPONENTS(_TEMP107)
      let _TEMP109 = _dimensional_exponents(
        LENGTH_EXPONENT: SDAI.UNWRAP(SDAI.REAL(1.0000000000e+00)), 
        MASS_EXPONENT: SDAI.UNWRAP(SDAI.REAL(1.0000000000e+00)), 
        TIME_EXPONENT: SDAI.UNWRAP(SDAI.REAL( -2.0000000000e+00)), 
        ELECTRIC_CURRENT_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        THERMODYNAMIC_TEMPERATURE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        AMOUNT_OF_SUBSTANCE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        LUMINOUS_INTENSITY_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)))
      let _TEMP110 = _TEMP108 .!=. SDAI.FORCE_OPTIONAL(eDIMENSIONAL_EXPONENTS(/*partial entity*/_TEMP109))
      if SDAI.IS_TRUE( _TEMP110 ) {
        return _valid_units__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
      }
    }
    
    let _TEMP111 = SDAI.TYPEOF(M?.VALUE_COMPONENT, IS: tFREQUENCY_MEASURE.self)
    if SDAI.IS_TRUE( _TEMP111 ) {
      
      let _TEMP112 = M?.UNIT_COMPONENT
      let _TEMP113 = DERIVE_DIMENSIONAL_EXPONENTS(_TEMP112)
      let _TEMP114 = _dimensional_exponents(
        LENGTH_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        MASS_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        TIME_EXPONENT: SDAI.UNWRAP(SDAI.REAL( -1.0000000000e+00)), 
        ELECTRIC_CURRENT_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        THERMODYNAMIC_TEMPERATURE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        AMOUNT_OF_SUBSTANCE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        LUMINOUS_INTENSITY_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)))
      let _TEMP115 = _TEMP113 .!=. SDAI.FORCE_OPTIONAL(eDIMENSIONAL_EXPONENTS(/*partial entity*/_TEMP114))
      if SDAI.IS_TRUE( _TEMP115 ) {
        return _valid_units__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
      }
    }
    
    let _TEMP116 = SDAI.TYPEOF(M?.VALUE_COMPONENT, IS: tILLUMINANCE_MEASURE.self)
    if SDAI.IS_TRUE( _TEMP116 ) {
      
      let _TEMP117 = M?.UNIT_COMPONENT
      let _TEMP118 = DERIVE_DIMENSIONAL_EXPONENTS(_TEMP117)
      let _TEMP119 = _dimensional_exponents(
        LENGTH_EXPONENT: SDAI.UNWRAP(SDAI.REAL( -2.0000000000e+00)), 
        MASS_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        TIME_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        ELECTRIC_CURRENT_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        THERMODYNAMIC_TEMPERATURE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        AMOUNT_OF_SUBSTANCE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        LUMINOUS_INTENSITY_EXPONENT: SDAI.UNWRAP(SDAI.REAL(1.0000000000e+00)))
      let _TEMP120 = _TEMP118 .!=. SDAI.FORCE_OPTIONAL(eDIMENSIONAL_EXPONENTS(/*partial entity*/_TEMP119))
      if SDAI.IS_TRUE( _TEMP120 ) {
        return _valid_units__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
      }
    }
    
    let _TEMP121 = SDAI.TYPEOF(M?.VALUE_COMPONENT, IS: tINDUCTANCE_MEASURE.self)
    if SDAI.IS_TRUE( _TEMP121 ) {
      
      let _TEMP122 = M?.UNIT_COMPONENT
      let _TEMP123 = DERIVE_DIMENSIONAL_EXPONENTS(_TEMP122)
      let _TEMP124 = _dimensional_exponents(
        LENGTH_EXPONENT: SDAI.UNWRAP(SDAI.REAL(2.0000000000e+00)), 
        MASS_EXPONENT: SDAI.UNWRAP(SDAI.REAL(1.0000000000e+00)), 
        TIME_EXPONENT: SDAI.UNWRAP(SDAI.REAL( -2.0000000000e+00)), 
        ELECTRIC_CURRENT_EXPONENT: SDAI.UNWRAP(SDAI.REAL( -2.0000000000e+00)), 
        THERMODYNAMIC_TEMPERATURE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        AMOUNT_OF_SUBSTANCE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        LUMINOUS_INTENSITY_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)))
      let _TEMP125 = _TEMP123 .!=. SDAI.FORCE_OPTIONAL(eDIMENSIONAL_EXPONENTS(/*partial entity*/_TEMP124))
      if SDAI.IS_TRUE( _TEMP125 ) {
        return _valid_units__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
      }
    }
    
    let _TEMP126 = SDAI.TYPEOF(M?.VALUE_COMPONENT, IS: tLUMINOUS_FLUX_MEASURE.self)
    if SDAI.IS_TRUE( _TEMP126 ) {
      
      let _TEMP127 = M?.UNIT_COMPONENT
      let _TEMP128 = DERIVE_DIMENSIONAL_EXPONENTS(_TEMP127)
      let _TEMP129 = _dimensional_exponents(
        LENGTH_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        MASS_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        TIME_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        ELECTRIC_CURRENT_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        THERMODYNAMIC_TEMPERATURE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        AMOUNT_OF_SUBSTANCE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        LUMINOUS_INTENSITY_EXPONENT: SDAI.UNWRAP(SDAI.REAL(1.0000000000e+00)))
      let _TEMP130 = _TEMP128 .!=. SDAI.FORCE_OPTIONAL(eDIMENSIONAL_EXPONENTS(/*partial entity*/_TEMP129))
      if SDAI.IS_TRUE( _TEMP130 ) {
        return _valid_units__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
      }
    }
    
    let _TEMP131 = SDAI.TYPEOF(M?.VALUE_COMPONENT, IS: tMAGNETIC_FLUX_MEASURE.self)
    if SDAI.IS_TRUE( _TEMP131 ) {
      
      let _TEMP132 = M?.UNIT_COMPONENT
      let _TEMP133 = DERIVE_DIMENSIONAL_EXPONENTS(_TEMP132)
      let _TEMP134 = _dimensional_exponents(
        LENGTH_EXPONENT: SDAI.UNWRAP(SDAI.REAL(2.0000000000e+00)), 
        MASS_EXPONENT: SDAI.UNWRAP(SDAI.REAL(1.0000000000e+00)), 
        TIME_EXPONENT: SDAI.UNWRAP(SDAI.REAL( -2.0000000000e+00)), 
        ELECTRIC_CURRENT_EXPONENT: SDAI.UNWRAP(SDAI.REAL( -1.0000000000e+00)), 
        THERMODYNAMIC_TEMPERATURE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        AMOUNT_OF_SUBSTANCE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        LUMINOUS_INTENSITY_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)))
      let _TEMP135 = _TEMP133 .!=. SDAI.FORCE_OPTIONAL(eDIMENSIONAL_EXPONENTS(/*partial entity*/_TEMP134))
      if SDAI.IS_TRUE( _TEMP135 ) {
        return _valid_units__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
      }
    }
    
    let _TEMP136 = SDAI.TYPEOF(M?.VALUE_COMPONENT, IS: tMAGNETIC_FLUX_DENSITY_MEASURE.self)
    if SDAI.IS_TRUE( _TEMP136 ) {
      
      let _TEMP137 = M?.UNIT_COMPONENT
      let _TEMP138 = DERIVE_DIMENSIONAL_EXPONENTS(_TEMP137)
      let _TEMP139 = _dimensional_exponents(
        LENGTH_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        MASS_EXPONENT: SDAI.UNWRAP(SDAI.REAL(1.0000000000e+00)), 
        TIME_EXPONENT: SDAI.UNWRAP(SDAI.REAL( -2.0000000000e+00)), 
        ELECTRIC_CURRENT_EXPONENT: SDAI.UNWRAP(SDAI.REAL( -1.0000000000e+00)), 
        THERMODYNAMIC_TEMPERATURE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        AMOUNT_OF_SUBSTANCE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        LUMINOUS_INTENSITY_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)))
      let _TEMP140 = _TEMP138 .!=. SDAI.FORCE_OPTIONAL(eDIMENSIONAL_EXPONENTS(/*partial entity*/_TEMP139))
      if SDAI.IS_TRUE( _TEMP140 ) {
        return _valid_units__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
      }
    }
    
    let _TEMP141 = SDAI.TYPEOF(M?.VALUE_COMPONENT, IS: tPOWER_MEASURE.self)
    if SDAI.IS_TRUE( _TEMP141 ) {
      
      let _TEMP142 = M?.UNIT_COMPONENT
      let _TEMP143 = DERIVE_DIMENSIONAL_EXPONENTS(_TEMP142)
      let _TEMP144 = _dimensional_exponents(
        LENGTH_EXPONENT: SDAI.UNWRAP(SDAI.REAL(2.0000000000e+00)), 
        MASS_EXPONENT: SDAI.UNWRAP(SDAI.REAL(1.0000000000e+00)), 
        TIME_EXPONENT: SDAI.UNWRAP(SDAI.REAL( -3.0000000000e+00)), 
        ELECTRIC_CURRENT_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        THERMODYNAMIC_TEMPERATURE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        AMOUNT_OF_SUBSTANCE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        LUMINOUS_INTENSITY_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)))
      let _TEMP145 = _TEMP143 .!=. SDAI.FORCE_OPTIONAL(eDIMENSIONAL_EXPONENTS(/*partial entity*/_TEMP144))
      if SDAI.IS_TRUE( _TEMP145 ) {
        return _valid_units__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
      }
    }
    
    let _TEMP146 = SDAI.TYPEOF(M?.VALUE_COMPONENT, IS: tPRESSURE_MEASURE.self)
    if SDAI.IS_TRUE( _TEMP146 ) {
      
      let _TEMP147 = M?.UNIT_COMPONENT
      let _TEMP148 = DERIVE_DIMENSIONAL_EXPONENTS(_TEMP147)
      let _TEMP149 = _dimensional_exponents(
        LENGTH_EXPONENT: SDAI.UNWRAP(SDAI.REAL( -1.0000000000e+00)), 
        MASS_EXPONENT: SDAI.UNWRAP(SDAI.REAL(1.0000000000e+00)), 
        TIME_EXPONENT: SDAI.UNWRAP(SDAI.REAL( -2.0000000000e+00)), 
        ELECTRIC_CURRENT_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        THERMODYNAMIC_TEMPERATURE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        AMOUNT_OF_SUBSTANCE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        LUMINOUS_INTENSITY_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)))
      let _TEMP150 = _TEMP148 .!=. SDAI.FORCE_OPTIONAL(eDIMENSIONAL_EXPONENTS(/*partial entity*/_TEMP149))
      if SDAI.IS_TRUE( _TEMP150 ) {
        return _valid_units__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
      }
    }
    
    let _TEMP151 = SDAI.TYPEOF(M?.VALUE_COMPONENT, IS: tRESISTANCE_MEASURE.self)
    if SDAI.IS_TRUE( _TEMP151 ) {
      
      let _TEMP152 = M?.UNIT_COMPONENT
      let _TEMP153 = DERIVE_DIMENSIONAL_EXPONENTS(_TEMP152)
      let _TEMP154 = _dimensional_exponents(
        LENGTH_EXPONENT: SDAI.UNWRAP(SDAI.REAL(2.0000000000e+00)), 
        MASS_EXPONENT: SDAI.UNWRAP(SDAI.REAL(1.0000000000e+00)), 
        TIME_EXPONENT: SDAI.UNWRAP(SDAI.REAL( -3.0000000000e+00)), 
        ELECTRIC_CURRENT_EXPONENT: SDAI.UNWRAP(SDAI.REAL( -2.0000000000e+00)), 
        THERMODYNAMIC_TEMPERATURE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        AMOUNT_OF_SUBSTANCE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        LUMINOUS_INTENSITY_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)))
      let _TEMP155 = _TEMP153 .!=. SDAI.FORCE_OPTIONAL(eDIMENSIONAL_EXPONENTS(/*partial entity*/_TEMP154))
      if SDAI.IS_TRUE( _TEMP155 ) {
        return _valid_units__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
      }
    }
    
    let _TEMP156 = SDAI.TYPEOF(M?.VALUE_COMPONENT, IS: tVELOCITY_MEASURE.self)
    if SDAI.IS_TRUE( _TEMP156 ) {
      
      let _TEMP157 = M?.UNIT_COMPONENT
      let _TEMP158 = DERIVE_DIMENSIONAL_EXPONENTS(_TEMP157)
      let _TEMP159 = _dimensional_exponents(
        LENGTH_EXPONENT: SDAI.UNWRAP(SDAI.REAL(1.0000000000e+00)), 
        MASS_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        TIME_EXPONENT: SDAI.UNWRAP(SDAI.REAL( -1.0000000000e+00)), 
        ELECTRIC_CURRENT_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        THERMODYNAMIC_TEMPERATURE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        AMOUNT_OF_SUBSTANCE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        LUMINOUS_INTENSITY_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)))
      let _TEMP160 = _TEMP158 .!=. SDAI.FORCE_OPTIONAL(eDIMENSIONAL_EXPONENTS(/*partial entity*/_TEMP159))
      if SDAI.IS_TRUE( _TEMP160 ) {
        return _valid_units__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
      }
    }
    
    let _TEMP161 = SDAI.TYPEOF(M?.VALUE_COMPONENT, IS: tRADIOACTIVITY_MEASURE.self)
    if SDAI.IS_TRUE( _TEMP161 ) {
      
      let _TEMP162 = M?.UNIT_COMPONENT
      let _TEMP163 = DERIVE_DIMENSIONAL_EXPONENTS(_TEMP162)
      let _TEMP164 = _dimensional_exponents(
        LENGTH_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        MASS_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        TIME_EXPONENT: SDAI.UNWRAP(SDAI.REAL( -1.0000000000e+00)), 
        ELECTRIC_CURRENT_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        THERMODYNAMIC_TEMPERATURE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        AMOUNT_OF_SUBSTANCE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        LUMINOUS_INTENSITY_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)))
      let _TEMP165 = _TEMP163 .!=. SDAI.FORCE_OPTIONAL(eDIMENSIONAL_EXPONENTS(/*partial entity*/_TEMP164))
      if SDAI.IS_TRUE( _TEMP165 ) {
        return _valid_units__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
      }
    }
    
    let _TEMP166 = SDAI.TYPEOF(M?.VALUE_COMPONENT, IS: tABSORBED_DOSE_MEASURE.self)
    if SDAI.IS_TRUE( _TEMP166 ) {
      
      let _TEMP167 = M?.UNIT_COMPONENT
      let _TEMP168 = DERIVE_DIMENSIONAL_EXPONENTS(_TEMP167)
      let _TEMP169 = _dimensional_exponents(
        LENGTH_EXPONENT: SDAI.UNWRAP(SDAI.REAL(2.0000000000e+00)), 
        MASS_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        TIME_EXPONENT: SDAI.UNWRAP(SDAI.REAL( -2.0000000000e+00)), 
        ELECTRIC_CURRENT_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        THERMODYNAMIC_TEMPERATURE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        AMOUNT_OF_SUBSTANCE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        LUMINOUS_INTENSITY_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)))
      let _TEMP170 = _TEMP168 .!=. SDAI.FORCE_OPTIONAL(eDIMENSIONAL_EXPONENTS(/*partial entity*/_TEMP169))
      if SDAI.IS_TRUE( _TEMP170 ) {
        return _valid_units__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
      }
    }
    
    let _TEMP171 = SDAI.TYPEOF(M?.VALUE_COMPONENT, IS: tDOSE_EQUIVALENT_MEASURE.self)
    if SDAI.IS_TRUE( _TEMP171 ) {
      
      let _TEMP172 = M?.UNIT_COMPONENT
      let _TEMP173 = DERIVE_DIMENSIONAL_EXPONENTS(_TEMP172)
      let _TEMP174 = _dimensional_exponents(
        LENGTH_EXPONENT: SDAI.UNWRAP(SDAI.REAL(2.0000000000e+00)), 
        MASS_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        TIME_EXPONENT: SDAI.UNWRAP(SDAI.REAL( -2.0000000000e+00)), 
        ELECTRIC_CURRENT_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        THERMODYNAMIC_TEMPERATURE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        AMOUNT_OF_SUBSTANCE_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)), 
        LUMINOUS_INTENSITY_EXPONENT: SDAI.UNWRAP(SDAI.REAL(0)))
      let _TEMP175 = _TEMP173 .!=. SDAI.FORCE_OPTIONAL(eDIMENSIONAL_EXPONENTS(/*partial entity*/_TEMP174))
      if SDAI.IS_TRUE( _TEMP175 ) {
        return _valid_units__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
      }
    }
    return _valid_units__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.TRUE))
  }

}

//MARK: - function result cache
private var _valid_units__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

