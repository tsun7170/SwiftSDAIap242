/* file: valid_basis_curve_in_2d_wireframe.swift 	 generated: Mon Jan  3 16:32:52 2022 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.1, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION valid_basis_curve_in_2d_wireframe(
               crv : curve
           ) : BOOLEAN;
    IF SIZEOF( [ 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.POLYLINE', 
        'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.B_SPLINE_CURVE' , 
        'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ELLIPSE' , 
        'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CIRCLE' ] * TYPEOF( crv ) ) = 1 THEN
      RETURN( TRUE );
    ELSE
      IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.TRIMMED_CURVE' IN TYPEOF( crv ) THEN
        IF SIZEOF( [ 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.LINE', 
            'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PARABOLA' , 
            'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.HYPERBOLA' ] * TYPEOF( crv\trimmed_curve.
            basis_curve ) ) = 1 THEN
          RETURN( TRUE );
        ELSE
          RETURN( valid_basis_curve_in_2d_wireframe( crv\trimmed_curve.basis_curve ) );
        END_IF;
      ELSE
        IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.OFFSET_CURVE_2D' IN TYPEOF( crv ) THEN
          RETURN( valid_basis_curve_in_2d_wireframe( crv\offset_curve_2d.basis_curve ) );
        ELSE
          IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CURVE_REPLICA' IN TYPEOF( crv ) THEN
            RETURN( valid_basis_curve_in_2d_wireframe( crv\curve_replica.parent_curve ) );
          ELSE
            IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.COMPOSITE_CURVE' IN TYPEOF( crv ) THEN
              RETURN( SIZEOF( QUERY ( ccs <* crv\composite_curve.segments | ( NOT 
                  valid_basis_curve_in_2d_wireframe( ccs.parent_curve ) ) ) ) = 0 );
            END_IF;
          END_IF;
        END_IF;
      END_IF;
    END_IF;
    RETURN( FALSE );

  END_FUNCTION; -- valid_basis_curve_in_2d_wireframe (line:47445 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func VALID_BASIS_CURVE_IN_2D_WIREFRAME(
    _ CRV: eCURVE? ) -> SDAI.BOOLEAN? {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( CRV )
    if case .available(let _cached_value) = _valid_basis_curve_in_2d_wireframe__cache.cachedValue(params: _params) {
      return _cached_value as? SDAI.BOOLEAN
    }

    var CRV = CRV; SDAI.TOUCH(var: &CRV)

    
    let _TEMP1 = ([SDAI.AIE(SDAI.STRING("AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.POLYLINE")), 
      SDAI.AIE(SDAI.STRING("AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.B_SPLINE_CURVE")), 
      SDAI.AIE(SDAI.STRING("AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ELLIPSE")), 
      SDAI.AIE(SDAI.STRING("AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CIRCLE"))] 
      as [SDAI.AggregationInitializerElement<SDAI.STRING>])
    let _TEMP2 = SDAI.TYPEOF(CRV)
    let _TEMP3 = SDAI.FORCE_OPTIONAL(_TEMP1) * SDAI.FORCE_OPTIONAL(_TEMP2)
    let _TEMP4 = SDAI.SIZEOF(_TEMP3)
    let _TEMP5 = _TEMP4 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
    if SDAI.IS_TRUE( _TEMP5 ) {
      return _valid_basis_curve_in_2d_wireframe__cache.updateCache(params: _params, value: SDAI.BOOLEAN(
        SDAI.TRUE))
    }
    else {
      
      let _TEMP6 = SDAI.TYPEOF(CRV, IS: eTRIMMED_CURVE.self)
      if SDAI.IS_TRUE( _TEMP6 ) {
        
        let _TEMP7 = ([SDAI.AIE(SDAI.STRING("AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.LINE")), 
          SDAI.AIE(SDAI.STRING("AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PARABOLA")), 
          SDAI.AIE(SDAI.STRING("AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.HYPERBOLA"))] 
          as [SDAI.AggregationInitializerElement<SDAI.STRING>])
        let _TEMP8 = CRV?.GROUP_REF(eTRIMMED_CURVE.self)
        let _TEMP9 = _TEMP8?.BASIS_CURVE
        let _TEMP10 = SDAI.TYPEOF(_TEMP9)
        let _TEMP11 = SDAI.FORCE_OPTIONAL(_TEMP7) * SDAI.FORCE_OPTIONAL(_TEMP10)
        let _TEMP12 = SDAI.SIZEOF(_TEMP11)
        let _TEMP13 = _TEMP12 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
        if SDAI.IS_TRUE( _TEMP13 ) {
          return _valid_basis_curve_in_2d_wireframe__cache.updateCache(params: _params, value: SDAI.BOOLEAN(
            SDAI.TRUE))
        }
        else {
          
          let _TEMP14 = CRV?.GROUP_REF(eTRIMMED_CURVE.self)
          let _TEMP15 = _TEMP14?.BASIS_CURVE
          let _TEMP16 = VALID_BASIS_CURVE_IN_2D_WIREFRAME(_TEMP15)
          return _valid_basis_curve_in_2d_wireframe__cache.updateCache(params: _params, value: _TEMP16)
        }
      }
      else {
        
        let _TEMP17 = SDAI.TYPEOF(CRV, IS: eOFFSET_CURVE_2D.self)
        if SDAI.IS_TRUE( _TEMP17 ) {
          
          let _TEMP18 = CRV?.GROUP_REF(eOFFSET_CURVE_2D.self)
          let _TEMP19 = _TEMP18?.BASIS_CURVE
          let _TEMP20 = VALID_BASIS_CURVE_IN_2D_WIREFRAME(_TEMP19)
          return _valid_basis_curve_in_2d_wireframe__cache.updateCache(params: _params, value: _TEMP20)
        }
        else {
          
          let _TEMP21 = SDAI.TYPEOF(CRV, IS: eCURVE_REPLICA.self)
          if SDAI.IS_TRUE( _TEMP21 ) {
            
            let _TEMP22 = CRV?.GROUP_REF(eCURVE_REPLICA.self)
            let _TEMP23 = _TEMP22?.PARENT_CURVE
            let _TEMP24 = VALID_BASIS_CURVE_IN_2D_WIREFRAME(_TEMP23)
            return _valid_basis_curve_in_2d_wireframe__cache.updateCache(params: _params, value: _TEMP24)
          }
          else {
            
            let _TEMP25 = SDAI.TYPEOF(CRV, IS: eCOMPOSITE_CURVE.self)
            if SDAI.IS_TRUE( _TEMP25 ) {
              
              let _TEMP26 = CRV?.GROUP_REF(eCOMPOSITE_CURVE.self)
              let _TEMP27 = _TEMP26?.SEGMENTS
              let _TEMP28 = _TEMP27?
                .QUERY{ CCS in 

                  let _TEMP1 = CCS.PARENT_CURVE
                  let _TEMP2 = VALID_BASIS_CURVE_IN_2D_WIREFRAME(_TEMP1)
                  let _TEMP3 =  !_TEMP2
                  return _TEMP3 }
              let _TEMP29 = SDAI.SIZEOF(_TEMP28)
              let _TEMP30 = _TEMP29 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
              return _valid_basis_curve_in_2d_wireframe__cache.updateCache(params: _params, value: SDAI.BOOLEAN(/*
                SDAI.LOGICAL*/_TEMP30))
            }
          }
        }
      }
    }
    return _valid_basis_curve_in_2d_wireframe__cache.updateCache(params: _params, value: SDAI.BOOLEAN(
      SDAI.FALSE))
  }

}

//MARK: - function result cache
private var _valid_basis_curve_in_2d_wireframe__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

