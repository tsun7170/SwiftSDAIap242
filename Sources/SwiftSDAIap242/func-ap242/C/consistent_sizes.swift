/* file: consistent_sizes.swift 	 generated: Tue Nov 16 05:35:44 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION consistent_sizes(
               max : INTEGER;
               point_lists : LIST OF point_cloud_dataset
           ) : BOOLEAN;

    LOCAL
      ndatasets : INTEGER := SIZEOF( point_lists );
      result    : BOOLEAN := TRUE;
    END_LOCAL;
    REPEAT i := 1 TO ndatasets - 1 BY 1;
      IF SIZEOF( point_lists[i].point_coordinates ) <> max THEN
        result := FALSE;
        RETURN( result );
      END_IF;
    END_REPEAT;
    IF SIZEOF( point_lists[ndatasets].point_coordinates ) > max THEN
      result := FALSE;
      RETURN( result );
    END_IF;
    RETURN( result );

  END_FUNCTION; -- consistent_sizes (line:36731 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func CONSISTENT_SIZES(MAX: SDAI.INTEGER? , POINT_LISTS: SDAI.LIST<ePOINT_CLOUD_DATASET>? ) 
    -> SDAI.BOOLEAN? {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( MAX, POINT_LISTS )
    if case .available(let _cached_value) = _consistent_sizes__cache.cachedValue(params: _params) {
      return _cached_value as? SDAI.BOOLEAN
    }

    var MAX = MAX; SDAI.TOUCH(var: &MAX)
    var POINT_LISTS = POINT_LISTS; SDAI.TOUCH(var: &POINT_LISTS)

    //LOCAL
    var NDATASETS: SDAI.INTEGER?  = SDAI.SIZEOF(POINT_LISTS); SDAI.TOUCH(var: &NDATASETS)
    var RESULT: SDAI.BOOLEAN?  = SDAI.BOOLEAN(SDAI.TRUE); SDAI.TOUCH(var: &RESULT)
    //END_LOCAL

    if let incrementControl/*SDAI.INTEGER*/ = SDAI.FROM(/*SDAI.INTEGER*/1, TO:/*SDAI.INTEGER*/NDATASETS - SDAI.FORCE_OPTIONAL(
      SDAI.INTEGER(1))) {
      for I in incrementControl {
        
        let _TEMP1 = POINT_LISTS?[I]
        let _TEMP2 = _TEMP1?.POINT_COORDINATES
        let _TEMP3 = SDAI.SIZEOF(_TEMP2)
        let _TEMP4 = _TEMP3 .!=. MAX
        if SDAI.IS_TRUE( _TEMP4 ) {
          RESULT = SDAI.BOOLEAN(SDAI.FALSE)
          return _consistent_sizes__cache.updateCache(params: _params, value: RESULT)
        }
      }
    }
    
    let _TEMP5 = POINT_LISTS?[NDATASETS]
    let _TEMP6 = _TEMP5?.POINT_COORDINATES
    let _TEMP7 = SDAI.SIZEOF(_TEMP6)
    let _TEMP8 = _TEMP7 > MAX
    if SDAI.IS_TRUE( _TEMP8 ) {
      RESULT = SDAI.BOOLEAN(SDAI.FALSE)
      return _consistent_sizes__cache.updateCache(params: _params, value: RESULT)
    }
    return _consistent_sizes__cache.updateCache(params: _params, value: RESULT)
  }

}

//MARK: - function result cache
private var _consistent_sizes__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

