/* file: convert_to_literal.swift 	 generated: Tue Nov 16 05:35:44 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION convert_to_literal(
               val : maths_atom
           ) : generic_literal;

    LOCAL
      types : SET OF STRING := TYPEOF( val );
    END_LOCAL;
    IF 'INTEGER' IN types THEN
      RETURN( make_int_literal( val ) );
    END_IF;
    IF 'REAL' IN types THEN
      RETURN( make_real_literal( val ) );
    END_IF;
    IF 'BOOLEAN' IN types THEN
      RETURN( make_boolean_literal( val ) );
    END_IF;
    IF 'STRING' IN types THEN
      RETURN( make_string_literal( val ) );
    END_IF;
    IF 'LOGICAL' IN types THEN
      RETURN( make_logical_literal( val ) );
    END_IF;
    IF 'BINARY' IN types THEN
      RETURN( make_binary_literal( val ) );
    END_IF;
    IF ( schema_prefix + 'MATHS_ENUM_ATOM' ) IN types THEN
      RETURN( make_maths_enum_literal( val ) );
    END_IF;
    RETURN( ? );

  END_FUNCTION; -- convert_to_literal (line:37129 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func CONVERT_TO_LITERAL(_ VAL: sMATHS_ATOM? ) 
    -> eGENERIC_LITERAL? {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( VAL )
    if case .available(let _cached_value) = _convert_to_literal__cache.cachedValue(params: _params) {
      return _cached_value as? eGENERIC_LITERAL
    }

    var VAL = VAL; SDAI.TOUCH(var: &VAL)

    //LOCAL
    var TYPES: SDAI.SET<SDAI.STRING>?  = SDAI.TYPEOF(VAL); SDAI.TOUCH(var: &TYPES)

    
    let _TEMP1 = SDAI.aggregate(TYPES, contains: SDAI.STRING("INTEGER"))
    if SDAI.IS_TRUE( _TEMP1 ) {
      
      let _TEMP2 = MAKE_INT_LITERAL(SDAI.INTEGER(/*sMATHS_ATOM*/VAL))
      return _convert_to_literal__cache.updateCache(params: _params, value: eGENERIC_LITERAL(/*eINT_LITERAL*/
        _TEMP2))
    }
    
    let _TEMP3 = SDAI.aggregate(TYPES, contains: SDAI.STRING("REAL"))
    if SDAI.IS_TRUE( _TEMP3 ) {
      
      let _TEMP4 = MAKE_REAL_LITERAL(SDAI.REAL(/*sMATHS_ATOM*/VAL))
      return _convert_to_literal__cache.updateCache(params: _params, value: eGENERIC_LITERAL(/*eREAL_LITERAL*/
        _TEMP4))
    }
    
    let _TEMP5 = SDAI.aggregate(TYPES, contains: SDAI.STRING("BOOLEAN"))
    if SDAI.IS_TRUE( _TEMP5 ) {
      
      let _TEMP6 = MAKE_BOOLEAN_LITERAL(SDAI.BOOLEAN(/*sMATHS_ATOM*/VAL))
      return _convert_to_literal__cache.updateCache(params: _params, value: eGENERIC_LITERAL(/*
        eBOOLEAN_LITERAL*/_TEMP6))
    }
    
    let _TEMP7 = SDAI.aggregate(TYPES, contains: SDAI.STRING("STRING"))
    if SDAI.IS_TRUE( _TEMP7 ) {
      
      let _TEMP8 = MAKE_STRING_LITERAL(SDAI.STRING(/*sMATHS_ATOM*/VAL))
      return _convert_to_literal__cache.updateCache(params: _params, value: eGENERIC_LITERAL(/*
        eSTRING_LITERAL*/_TEMP8))
    }
    
    let _TEMP9 = SDAI.aggregate(TYPES, contains: SDAI.STRING("LOGICAL"))
    if SDAI.IS_TRUE( _TEMP9 ) {
      
      let _TEMP10 = MAKE_LOGICAL_LITERAL(SDAI.LOGICAL(SDAI.LOGICAL(/*sMATHS_ATOM*/VAL)))
      return _convert_to_literal__cache.updateCache(params: _params, value: eGENERIC_LITERAL(/*
        eLOGICAL_LITERAL*/_TEMP10))
    }
    
    let _TEMP11 = SDAI.aggregate(TYPES, contains: SDAI.STRING("BINARY"))
    if SDAI.IS_TRUE( _TEMP11 ) {
      
      let _TEMP12 = MAKE_BINARY_LITERAL(SDAI.BINARY(/*sMATHS_ATOM*/VAL))
      return _convert_to_literal__cache.updateCache(params: _params, value: eGENERIC_LITERAL(/*
        eBINARY_LITERAL*/_TEMP12))
    }
    
    let _TEMP13 = SDAI.FORCE_OPTIONAL(SCHEMA_PREFIX) + SDAI.FORCE_OPTIONAL(SDAI.STRING("MATHS_ENUM_ATOM"))
    let _TEMP14 = SDAI.aggregate(TYPES, contains: SDAI.STRING(/*SDAI.INTEGER*/_TEMP13))
    if SDAI.IS_TRUE( _TEMP14 ) {
      
      let _TEMP15 = MAKE_MATHS_ENUM_LITERAL(sMATHS_ENUM_ATOM(/*sMATHS_ATOM*/VAL))
      return _convert_to_literal__cache.updateCache(params: _params, value: eGENERIC_LITERAL(/*
        eMATHS_ENUM_LITERAL*/_TEMP15))
    }
    return _convert_to_literal__cache.updateCache(params: _params, value: (nil as eGENERIC_LITERAL?))
  }

}

//MARK: - function result cache
private var _convert_to_literal__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

