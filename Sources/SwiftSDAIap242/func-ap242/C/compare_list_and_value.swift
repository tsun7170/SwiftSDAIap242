/* file: compare_list_and_value.swift 	 generated: Mon Jan  3 16:32:52 2022 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.1, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION compare_list_and_value(
               lv : LIST OF GENERIC:g;
               op : elementary_function_enumerators;
               v : GENERIC:g
           ) : BOOLEAN;
    IF ( NOT EXISTS( lv ) ) OR ( NOT EXISTS( op ) ) OR ( NOT EXISTS( v ) ) THEN
      RETURN( FALSE );
    END_IF;
    REPEAT i := 1 TO SIZEOF( lv ) BY 1;
      IF NOT compare_values( lv[i], op, v ) THEN
        RETURN( FALSE );
      END_IF;
    END_REPEAT;
    RETURN( TRUE );

  END_FUNCTION; -- compare_list_and_value (line:52090 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func COMPARE_LIST_AND_VALUE<gG: SDAIGenericType>(
    LV: SDAI.LIST<gG>? , OP: nELEMENTARY_FUNCTION_ENUMERATORS? , V: gG? ) 
    -> SDAI.BOOLEAN? {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( LV, OP, V )
    if case .available(let _cached_value) = _compare_list_and_value__cache.cachedValue(params: _params) {
      return _cached_value as? SDAI.BOOLEAN
    }

    var LV = LV; SDAI.TOUCH(var: &LV)
    var OP = OP; SDAI.TOUCH(var: &OP)
    var V = V; SDAI.TOUCH(var: &V)

    
    let _TEMP1 = SDAI.EXISTS(LV)
    let _TEMP2 =  !_TEMP1
    let _TEMP3 = SDAI.EXISTS(OP)
    let _TEMP4 =  !_TEMP3
    let _TEMP5 = _TEMP2 || _TEMP4
    let _TEMP6 = SDAI.EXISTS(V)
    let _TEMP7 =  !_TEMP6
    let _TEMP8 = _TEMP5 || _TEMP7
    if SDAI.IS_TRUE( _TEMP8 ) {
      return _compare_list_and_value__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
    }
    if let incrementControl/*SDAI.INTEGER*/ = SDAI.FROM(/*SDAI.INTEGER*/1, TO:/*SDAI.INTEGER*/SDAI.SIZEOF(
      LV)) {
      for I in incrementControl {
        
        let _TEMP9 = LV?[I]
        let _TEMP10 = COMPARE_VALUES(
          V1: _TEMP9, OP: OP, V2: V)
        let _TEMP11 =  !_TEMP10
        if SDAI.IS_TRUE( _TEMP11 ) {
          return _compare_list_and_value__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
        }
      }
    }
    return _compare_list_and_value__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.TRUE))
  }

}

//MARK: - function result cache
private var _compare_list_and_value__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

