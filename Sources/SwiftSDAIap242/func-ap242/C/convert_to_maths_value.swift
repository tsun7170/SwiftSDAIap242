/* file: convert_to_maths_value.swift 	 generated: Mon Jan  3 16:32:52 2022 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.1, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION convert_to_maths_value(
               val : GENERIC:g
           ) : maths_value;

    LOCAL
      types    : SET OF STRING := TYPEOF( val );
      ival     : maths_integer;
      rval     : maths_real;
      nval     : maths_number;
      tfval    : maths_boolean;
      lval     : maths_logical;
      sval     : maths_string;
      bval     : maths_binary;
      tval     : maths_tuple := the_empty_maths_tuple;
      mval     : maths_value;
      val_list : LIST OF GENERIC;
    END_LOCAL;
    IF ( schema_prefix + 'MATHS_VALUE' ) IN types THEN
      RETURN( val );
    END_IF;
    IF 'INTEGER' IN types THEN
      ival := val;
      RETURN( ival );
    END_IF;
    IF 'REAL' IN types THEN
      rval := val;
      RETURN( rval );
    END_IF;
    IF 'NUMBER' IN types THEN
      nval := val;
      RETURN( nval );
    END_IF;
    IF 'BOOLEAN' IN types THEN
      tfval := val;
      RETURN( tfval );
    END_IF;
    IF 'LOGICAL' IN types THEN
      lval := val;
      RETURN( lval );
    END_IF;
    IF 'STRING' IN types THEN
      sval := val;
      RETURN( sval );
    END_IF;
    IF 'BINARY' IN types THEN
      bval := val;
      RETURN( bval );
    END_IF;
    IF 'LIST' IN types THEN
      val_list := val;
      REPEAT i := 1 TO SIZEOF( val_list ) BY 1;
        mval := convert_to_maths_value( val_list[i] );
        IF NOT EXISTS( mval ) THEN
          RETURN( ? );
        END_IF;
        INSERT( tval, mval, i - 1 );
      END_REPEAT;
      RETURN( tval );
    END_IF;
    RETURN( ? );

  END_FUNCTION; -- convert_to_maths_value (line:37180 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func CONVERT_TO_MATHS_VALUE<gG: SDAIGenericType>(
    _ VAL: gG? ) -> sMATHS_VALUE? {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( VAL )
    if case .available(let _cached_value) = _convert_to_maths_value__cache.cachedValue(params: _params) {
      return _cached_value as? sMATHS_VALUE
    }

    var VAL = VAL; SDAI.TOUCH(var: &VAL)

    //LOCAL
    var TYPES: SDAI.SET<SDAI.STRING>?  = SDAI.TYPEOF(VAL); SDAI.TOUCH(var: &TYPES)
    var IVAL: tMATHS_INTEGER? 
    var RVAL: tMATHS_REAL? 
    var NVAL: tMATHS_NUMBER? 
    var TFVAL: tMATHS_BOOLEAN? 
    var LVAL: tMATHS_LOGICAL
    var SVAL: tMATHS_STRING? 
    var BVAL: tMATHS_BINARY? 
    var TVAL: tMATHS_TUPLE?  = THE_EMPTY_MATHS_TUPLE; SDAI.TOUCH(var: &TVAL)
    var MVAL: sMATHS_VALUE? 
    var VAL_LIST: SDAI.LIST<SDAI.GENERIC>? 
    //END_LOCAL

    
    let _TEMP1 = SDAI.FORCE_OPTIONAL(SCHEMA_PREFIX) + SDAI.FORCE_OPTIONAL(SDAI.STRING("MATHS_VALUE"))
    let _TEMP2 = SDAI.aggregate(TYPES, contains: _TEMP1)
    if SDAI.IS_TRUE( _TEMP2 ) {
      return _convert_to_maths_value__cache.updateCache(params: _params, value: sMATHS_VALUE(fromGeneric: /*
        gG*/VAL))
    }
    
    let _TEMP3 = SDAI.aggregate(TYPES, contains: SDAI.STRING("INTEGER"))
    if SDAI.IS_TRUE( _TEMP3 ) {
      IVAL = tMATHS_INTEGER(fromGeneric: /*gG*/VAL)
      return _convert_to_maths_value__cache.updateCache(params: _params, value: sMATHS_VALUE(/*tMATHS_INTEGER*/
        IVAL))
    }
    
    let _TEMP4 = SDAI.aggregate(TYPES, contains: SDAI.STRING("REAL"))
    if SDAI.IS_TRUE( _TEMP4 ) {
      RVAL = tMATHS_REAL(fromGeneric: /*gG*/VAL)
      return _convert_to_maths_value__cache.updateCache(params: _params, value: sMATHS_VALUE(/*tMATHS_REAL*/
        RVAL))
    }
    
    let _TEMP5 = SDAI.aggregate(TYPES, contains: SDAI.STRING("NUMBER"))
    if SDAI.IS_TRUE( _TEMP5 ) {
      NVAL = tMATHS_NUMBER(fromGeneric: /*gG*/VAL)
      return _convert_to_maths_value__cache.updateCache(params: _params, value: sMATHS_VALUE(/*tMATHS_NUMBER*/
        NVAL))
    }
    
    let _TEMP6 = SDAI.aggregate(TYPES, contains: SDAI.STRING("BOOLEAN"))
    if SDAI.IS_TRUE( _TEMP6 ) {
      TFVAL = tMATHS_BOOLEAN(fromGeneric: /*gG*/VAL)
      return _convert_to_maths_value__cache.updateCache(params: _params, value: sMATHS_VALUE(/*tMATHS_BOOLEAN*/
        TFVAL))
    }
    
    let _TEMP7 = SDAI.aggregate(TYPES, contains: SDAI.STRING("LOGICAL"))
    if SDAI.IS_TRUE( _TEMP7 ) {
      LVAL = SDAI.UNWRAP(tMATHS_LOGICAL(fromGeneric: /*gG*/VAL))
      return _convert_to_maths_value__cache.updateCache(params: _params, value: sMATHS_VALUE(/*tMATHS_LOGICAL*/
        LVAL))
    }
    
    let _TEMP8 = SDAI.aggregate(TYPES, contains: SDAI.STRING("STRING"))
    if SDAI.IS_TRUE( _TEMP8 ) {
      SVAL = tMATHS_STRING(fromGeneric: /*gG*/VAL)
      return _convert_to_maths_value__cache.updateCache(params: _params, value: sMATHS_VALUE(/*tMATHS_STRING*/
        SVAL))
    }
    
    let _TEMP9 = SDAI.aggregate(TYPES, contains: SDAI.STRING("BINARY"))
    if SDAI.IS_TRUE( _TEMP9 ) {
      BVAL = tMATHS_BINARY(fromGeneric: /*gG*/VAL)
      return _convert_to_maths_value__cache.updateCache(params: _params, value: sMATHS_VALUE(/*tMATHS_BINARY*/
        BVAL))
    }
    
    let _TEMP10 = SDAI.aggregate(TYPES, contains: SDAI.STRING("LIST"))
    if SDAI.IS_TRUE( _TEMP10 ) {
      VAL_LIST = SDAI.LIST<SDAI.GENERIC>(fromGeneric: /*gG*/VAL)
      if let incrementControl/*SDAI.INTEGER*/ = SDAI.FROM(/*SDAI.INTEGER*/1, TO:/*SDAI.INTEGER*/SDAI.SIZEOF(
        VAL_LIST)) {
        for I in incrementControl {
          
          let _TEMP11 = VAL_LIST?[I]
          let _TEMP12 = CONVERT_TO_MATHS_VALUE(_TEMP11)
          MVAL = _TEMP12
          
          let _TEMP13 = SDAI.EXISTS(MVAL)
          let _TEMP14 =  !_TEMP13
          if SDAI.IS_TRUE( _TEMP14 ) {
            return _convert_to_maths_value__cache.updateCache(params: _params, value: (nil as sMATHS_VALUE?))
          }
          SDAI.INSERT( L: &TVAL, E: MVAL, P: SDAI.FORCE_OPTIONAL(I) - SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1)) )
        }
      }
      return _convert_to_maths_value__cache.updateCache(params: _params, value: sMATHS_VALUE(/*tMATHS_TUPLE*/
        TVAL))
    }
    return _convert_to_maths_value__cache.updateCache(params: _params, value: (nil as sMATHS_VALUE?))
  }

}

//MARK: - function result cache
private var _convert_to_maths_value__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

