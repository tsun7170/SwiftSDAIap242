/* file: class_assignment_is_valid.swift 	 generated: Sun Oct 31 15:32:10 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION class_assignment_is_valid(
               aia : applied_classification_assignment
           ) : BOOLEAN;

    LOCAL
      item : classification_item;
      role : classification_role;
    END_LOCAL;
    role := aia\classification_assignment.role;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CLASS_SYSTEM' IN TYPEOF( aia\
        classification_assignment.assigned_class ) THEN
      IF role\classification_role.name <> 'class system membership' THEN
        RETURN( FALSE );
      END_IF;
      REPEAT i := LOINDEX( aia\applied_classification_assignment.items ) TO HIINDEX( aia\
          applied_classification_assignment.items ) BY 1;
        item := aia\applied_classification_assignment.items[i];
        IF SIZEOF( [ 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CHARACTERIZED_CLASS'] * TYPEOF( item ) ) 
            = 0 THEN
          RETURN( FALSE );
        END_IF;
      END_REPEAT;
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CHARACTERIZED_CLASS' IN TYPEOF( aia\
        classification_assignment.assigned_class ) THEN
      IF NOT ( role\classification_role.name IN [ 'definitional', 'non-definitional', ''] ) THEN
        RETURN( FALSE );
      END_IF;
      REPEAT i := LOINDEX( aia\applied_classification_assignment.items ) TO HIINDEX( aia\
          applied_classification_assignment.items ) BY 1;
        item := aia\applied_classification_assignment.items[i];
        IF SIZEOF( [ 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CLASSIFIED_ITEM'] * TYPEOF( item ) ) = 
            0 THEN
          RETURN( FALSE );
        END_IF;
      END_REPEAT;
    END_IF;
    IF role\classification_role.name = 'definitional' THEN
      IF NOT ( SIZEOF( QUERY ( it <* aia\applied_classification_assignment.items | ( NOT ( SIZEOF( [
          'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PRODUCT' , 
          'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PRODUCT_DEFINITION_FORMATION' , 
          'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PRODUCT_DEFINITION' ] * TYPEOF( it ) ) = 1 ) ) ) ) 
          = 0 ) THEN
        RETURN( FALSE );
      END_IF;
    END_IF;
    RETURN( TRUE );

  END_FUNCTION; -- class_assignment_is_valid (line:36084 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func CLASS_ASSIGNMENT_IS_VALID(_ AIA: eAPPLIED_CLASSIFICATION_ASSIGNMENT? ) 
    -> SDAI.BOOLEAN? {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( AIA )
    if case .available(let _cached_value) = _class_assignment_is_valid__cache.cachedValue(params: _params) {
      return _cached_value as? SDAI.BOOLEAN
    }

    var AIA = AIA; SDAI.TOUCH(var: &AIA)

    //LOCAL
    var ITEM: sCLASSIFICATION_ITEM? 
    var ROLE: eCLASSIFICATION_ROLE? 
    //END_LOCAL

    
    let _TEMP1 = AIA?.GROUP_REF(eCLASSIFICATION_ASSIGNMENT.self)
    let _TEMP2 = _TEMP1?.ROLE
    ROLE = _TEMP2
    
    let _TEMP3 = SDAI.TYPEOF(AIA?.GROUP_REF(eCLASSIFICATION_ASSIGNMENT.self)?.ASSIGNED_CLASS, 
      IS: eCLASS_SYSTEM.self)
    if SDAI.IS_TRUE( _TEMP3 ) {
      
      let _TEMP4 = ROLE?.GROUP_REF(eCLASSIFICATION_ROLE.self)
      let _TEMP5 = _TEMP4?.NAME
      let _TEMP6 = _TEMP5 .!=. SDAI.FORCE_OPTIONAL(SDAI.STRING("class system membership"))
      if SDAI.IS_TRUE( _TEMP6 ) {
        return _class_assignment_is_valid__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
      }
      if let incrementControl/*SDAI.INTEGER*/ = SDAI.FROM(/*SDAI.INTEGER*/SDAI.LOINDEX(
        AIA?.GROUP_REF(eAPPLIED_CLASSIFICATION_ASSIGNMENT.self)?.ITEMS), TO:/*SDAI.INTEGER*/SDAI.HIINDEX(
        AIA?.GROUP_REF(eAPPLIED_CLASSIFICATION_ASSIGNMENT.self)?.ITEMS)) {
        for I in incrementControl {
          
          let _TEMP7 = AIA?.GROUP_REF(eAPPLIED_CLASSIFICATION_ASSIGNMENT.self)
          let _TEMP8 = _TEMP7?.ITEMS
          let _TEMP9 = _TEMP8?[I]
          ITEM = _TEMP9
          
          let _TEMP10 = ([SDAI.AIE(SDAI.STRING(
            "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CHARACTERIZED_CLASS"))] 
            as [SDAI.AggregationInitializerElement<SDAI.STRING>])
          let _TEMP11 = SDAI.TYPEOF(ITEM)
          let _TEMP12 = SDAI.FORCE_OPTIONAL(_TEMP10) * SDAI.FORCE_OPTIONAL(_TEMP11)
          let _TEMP13 = SDAI.SIZEOF(_TEMP12)
          let _TEMP14 = _TEMP13 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
          if SDAI.IS_TRUE( _TEMP14 ) {
            return _class_assignment_is_valid__cache.updateCache(params: _params, value: SDAI.BOOLEAN(
              SDAI.FALSE))
          }
        }
      }
    }
    
    let _TEMP15 = SDAI.TYPEOF(AIA?.GROUP_REF(eCLASSIFICATION_ASSIGNMENT.self)?.ASSIGNED_CLASS, 
      IS: eCHARACTERIZED_CLASS.self)
    if SDAI.IS_TRUE( _TEMP15 ) {
      
      let _TEMP16 = ROLE?.GROUP_REF(eCLASSIFICATION_ROLE.self)
      let _TEMP17 = _TEMP16?.NAME
      let _TEMP18 = ([SDAI.AIE(SDAI.STRING("definitional")), 
        SDAI.AIE(SDAI.STRING("non-definitional")), 
        SDAI.AIE(SDAI.STRING(""))] as [SDAI.AggregationInitializerElement<SDAI.STRING>])
      let _TEMP19 = SDAI.aggregate(_TEMP18, contains: SDAI.STRING(/*tLABEL*/_TEMP17))
      let _TEMP20 =  !_TEMP19
      if SDAI.IS_TRUE( _TEMP20 ) {
        return _class_assignment_is_valid__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
      }
      if let incrementControl/*SDAI.INTEGER*/ = SDAI.FROM(/*SDAI.INTEGER*/SDAI.LOINDEX(
        AIA?.GROUP_REF(eAPPLIED_CLASSIFICATION_ASSIGNMENT.self)?.ITEMS), TO:/*SDAI.INTEGER*/SDAI.HIINDEX(
        AIA?.GROUP_REF(eAPPLIED_CLASSIFICATION_ASSIGNMENT.self)?.ITEMS)) {
        for I in incrementControl {
          
          let _TEMP21 = AIA?.GROUP_REF(eAPPLIED_CLASSIFICATION_ASSIGNMENT.self)
          let _TEMP22 = _TEMP21?.ITEMS
          let _TEMP23 = _TEMP22?[I]
          ITEM = _TEMP23
          
          let _TEMP24 = ([SDAI.AIE(SDAI.STRING(
            "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CLASSIFIED_ITEM"))] 
            as [SDAI.AggregationInitializerElement<SDAI.STRING>])
          let _TEMP25 = SDAI.TYPEOF(ITEM)
          let _TEMP26 = SDAI.FORCE_OPTIONAL(_TEMP24) * SDAI.FORCE_OPTIONAL(_TEMP25)
          let _TEMP27 = SDAI.SIZEOF(_TEMP26)
          let _TEMP28 = _TEMP27 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
          if SDAI.IS_TRUE( _TEMP28 ) {
            return _class_assignment_is_valid__cache.updateCache(params: _params, value: SDAI.BOOLEAN(
              SDAI.FALSE))
          }
        }
      }
    }
    
    let _TEMP29 = ROLE?.GROUP_REF(eCLASSIFICATION_ROLE.self)
    let _TEMP30 = _TEMP29?.NAME
    let _TEMP31 = _TEMP30 .==. SDAI.FORCE_OPTIONAL(SDAI.STRING("definitional"))
    if SDAI.IS_TRUE( _TEMP31 ) {
      
      let _TEMP32 = AIA?.GROUP_REF(eAPPLIED_CLASSIFICATION_ASSIGNMENT.self)
      let _TEMP33 = _TEMP32?.ITEMS
      let _TEMP34 = _TEMP33?.QUERY{ IT in 

          let _TEMP1 = ([SDAI.AIE(SDAI.STRING("AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PRODUCT")), 
            SDAI.AIE(SDAI.STRING("AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PRODUCT_DEFINITION_FORMATION")), 
            SDAI.AIE(SDAI.STRING("AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PRODUCT_DEFINITION"))] 
            as [SDAI.AggregationInitializerElement<SDAI.STRING>])
          let _TEMP2 = SDAI.TYPEOF(IT)
          let _TEMP3 = SDAI.FORCE_OPTIONAL(_TEMP1) * SDAI.FORCE_OPTIONAL(_TEMP2)
          let _TEMP4 = SDAI.SIZEOF(_TEMP3)
          let _TEMP5 = _TEMP4 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
          let _TEMP6 =  !_TEMP5
          return _TEMP6 }
      let _TEMP35 = SDAI.SIZEOF(_TEMP34)
      let _TEMP36 = _TEMP35 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      let _TEMP37 =  !_TEMP36
      if SDAI.IS_TRUE( _TEMP37 ) {
        return _class_assignment_is_valid__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
      }
    }
    return _class_assignment_is_valid__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.TRUE))
  }

}

//MARK: - function result cache
private var _class_assignment_is_valid__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

