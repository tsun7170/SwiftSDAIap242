/* file: compute_total_depth.swift 	 generated: Sat Aug 14 13:46:02 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION compute_total_depth(
               swsrh : solid_with_stepped_round_hole
           ) : positive_length_measure;

    LOCAL
      n  : positive_integer := swsrh.segments;
      td : positive_length_measure := swsrh.segment_depths[1];
    END_LOCAL;
    IF n = 1 THEN
      RETURN( td );
    ELSE
      REPEAT i := 2 TO n BY 1;
        td := td + swsrh.segment_depths[i];
      END_REPEAT;
    END_IF;
    RETURN( td );

  END_FUNCTION; -- compute_total_depth (line:36690 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func COMPUTE_TOTAL_DEPTH(_ SWSRH: eSOLID_WITH_STEPPED_ROUND_HOLE? ) 
    -> tPOSITIVE_LENGTH_MEASURE? {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( SWSRH )
    if case .available(let _cached_value) = _compute_total_depth__cache.cachedValue(params: _params) {
      return _cached_value as? tPOSITIVE_LENGTH_MEASURE
    }

    var SWSRH = SWSRH; SDAI.TOUCH(var: &SWSRH)

    //LOCAL
    var N: tPOSITIVE_INTEGER?  = SWSRH?.SEGMENTS; SDAI.TOUCH(var: &N)
    var TD: tPOSITIVE_LENGTH_MEASURE?  = SWSRH?.SEGMENT_DEPTHS[1]; SDAI.TOUCH(var: &TD)
    //END_LOCAL

    
    let _TEMP1 = N .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
    if SDAI.IS_TRUE( _TEMP1 ) {
      return _compute_total_depth__cache.updateCache(params: _params, value: TD)
    }
    else {
      if let incrementControl/*SDAI.INTEGER*/ = SDAI.FROM(/*SDAI.INTEGER*/2, TO:/*tPOSITIVE_INTEGER*/N) {
        for I in incrementControl {
          
          let _TEMP2 = SWSRH?.SEGMENT_DEPTHS
          let _TEMP3 = _TEMP2?[I]
          let _TEMP4 = TD + _TEMP3
          TD = tPOSITIVE_LENGTH_MEASURE(/*SDAI.REAL*/_TEMP4)
        }
      }
    }
    return _compute_total_depth__cache.updateCache(params: _params, value: TD)
  }

}

//MARK: - function result cache
private var _compute_total_depth__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

