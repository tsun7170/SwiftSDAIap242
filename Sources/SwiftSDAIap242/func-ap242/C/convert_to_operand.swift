/* file: convert_to_operand.swift 	 generated: Sat Aug 14 13:46:02 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION convert_to_operand(
               val : maths_value
           ) : generic_expression;

    LOCAL
      types : SET OF STRING := stripped_typeof( val );
    END_LOCAL;
    IF 'GENERIC_EXPRESSION' IN types THEN
      RETURN( val );
    END_IF;
    IF 'MATHS_ATOM' IN types THEN
      RETURN( convert_to_literal( val ) );
    END_IF;
    IF 'ATOM_BASED_VALUE' IN types THEN
      RETURN( make_atom_based_literal( val ) );
    END_IF;
    IF 'MATHS_TUPLE' IN types THEN
      RETURN( make_maths_tuple_literal( val ) );
    END_IF;
    RETURN( ? );

  END_FUNCTION; -- convert_to_operand (line:37234 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func CONVERT_TO_OPERAND(_ VAL: sMATHS_VALUE? ) 
    -> eGENERIC_EXPRESSION? {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( VAL )
    if case .available(let _cached_value) = _convert_to_operand__cache.cachedValue(params: _params) {
      return _cached_value as? eGENERIC_EXPRESSION
    }

    var VAL = VAL; SDAI.TOUCH(var: &VAL)

    //LOCAL
    var TYPES: SDAI.SET<SDAI.STRING>?  = STRIPPED_TYPEOF(VAL); SDAI.TOUCH(var: &TYPES)

    
    let _TEMP1 = SDAI.aggregate(TYPES, contains: SDAI.STRING("GENERIC_EXPRESSION"))
    if SDAI.IS_TRUE( _TEMP1 ) {
      return _convert_to_operand__cache.updateCache(params: _params, value: eGENERIC_EXPRESSION(/*
        sMATHS_VALUE*/VAL))
    }
    
    let _TEMP2 = SDAI.aggregate(TYPES, contains: SDAI.STRING("MATHS_ATOM"))
    if SDAI.IS_TRUE( _TEMP2 ) {
      
      let _TEMP3 = CONVERT_TO_LITERAL(sMATHS_ATOM(/*sMATHS_VALUE*/VAL))
      return _convert_to_operand__cache.updateCache(params: _params, value: eGENERIC_EXPRESSION(/*
        eGENERIC_LITERAL*/_TEMP3))
    }
    
    let _TEMP4 = SDAI.aggregate(TYPES, contains: SDAI.STRING("ATOM_BASED_VALUE"))
    if SDAI.IS_TRUE( _TEMP4 ) {
      
      let _TEMP5 = MAKE_ATOM_BASED_LITERAL(sATOM_BASED_VALUE(/*sMATHS_VALUE*/VAL))
      return _convert_to_operand__cache.updateCache(params: _params, value: eGENERIC_EXPRESSION(/*
        eATOM_BASED_LITERAL*/_TEMP5))
    }
    
    let _TEMP6 = SDAI.aggregate(TYPES, contains: SDAI.STRING("MATHS_TUPLE"))
    if SDAI.IS_TRUE( _TEMP6 ) {
      
      let _TEMP7 = MAKE_MATHS_TUPLE_LITERAL(SDAI.LIST<sMATHS_VALUE>(/*sMATHS_VALUE*/VAL))
      return _convert_to_operand__cache.updateCache(params: _params, value: eGENERIC_EXPRESSION(/*
        eMATHS_TUPLE_LITERAL*/_TEMP7))
    }
    return _convert_to_operand__cache.updateCache(params: _params, value: (nil as eGENERIC_EXPRESSION?))
  }

}

//MARK: - function result cache
private var _convert_to_operand__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

