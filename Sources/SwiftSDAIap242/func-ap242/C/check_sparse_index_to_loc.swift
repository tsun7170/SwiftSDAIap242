/* file: check_sparse_index_to_loc.swift 	 generated: Mon Jan  3 16:32:52 2022 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.1, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION check_sparse_index_to_loc(
               index_range, loc_domain : tuple_space
           ) : BOOLEAN;

    LOCAL
      temp         : maths_space;
      idx_rng_itvl : finite_integer_interval;
      loc_dmn_itvl : finite_integer_interval;
    END_LOCAL;
    temp := factor1( index_range );
    IF ( schema_prefix + 'TUPLE_SPACE' ) IN TYPEOF( temp ) THEN
      temp := factor1( temp );
    END_IF;
    IF NOT ( ( schema_prefix + 'FINITE_INTEGER_INTERVAL' ) IN TYPEOF( temp ) ) THEN
      RETURN( FALSE );
    END_IF;
    idx_rng_itvl := temp;
    temp := factor1( loc_domain );
    IF ( schema_prefix + 'TUPLE_SPACE' ) IN TYPEOF( temp ) THEN
      temp := factor1( temp );
    END_IF;
    IF NOT ( ( schema_prefix + 'FINITE_INTEGER_INTERVAL' ) IN TYPEOF( temp ) ) THEN
      RETURN( FALSE );
    END_IF;
    loc_dmn_itvl := temp;
    RETURN( bool( ( loc_dmn_itvl.min <= idx_rng_itvl.min ) AND ( idx_rng_itvl.max <= ( loc_dmn_itvl.max + 1 ) ) ) );

  END_FUNCTION; -- check_sparse_index_to_loc (line:36021 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func CHECK_SPARSE_INDEX_TO_LOC(INDEX_RANGE: sTUPLE_SPACE? , LOC_DOMAIN: sTUPLE_SPACE? ) 
    -> SDAI.BOOLEAN? {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( INDEX_RANGE, LOC_DOMAIN )
    if case .available(let _cached_value) = _check_sparse_index_to_loc__cache.cachedValue(params: _params) {
      return _cached_value as? SDAI.BOOLEAN
    }

    var INDEX_RANGE = INDEX_RANGE; SDAI.TOUCH(var: &INDEX_RANGE)
    var LOC_DOMAIN = LOC_DOMAIN; SDAI.TOUCH(var: &LOC_DOMAIN)

    //LOCAL
    var TEMP: eMATHS_SPACE? 
    var IDX_RNG_ITVL: eFINITE_INTEGER_INTERVAL? 
    var LOC_DMN_ITVL: eFINITE_INTEGER_INTERVAL? 
    //END_LOCAL

    
    let _TEMP1 = FACTOR1(INDEX_RANGE)
    TEMP = _TEMP1
    
    let _TEMP2 = SDAI.FORCE_OPTIONAL(SCHEMA_PREFIX) + SDAI.FORCE_OPTIONAL(SDAI.STRING("TUPLE_SPACE"))
    let _TEMP3 = SDAI.TYPEOF(TEMP)
    let _TEMP4 = SDAI.aggregate(_TEMP3, contains: _TEMP2)
    if SDAI.IS_TRUE( _TEMP4 ) {
      
      let _TEMP5 = FACTOR1(sTUPLE_SPACE(/*eMATHS_SPACE*/TEMP))
      TEMP = _TEMP5
    }
    
    let _TEMP6 = SDAI.FORCE_OPTIONAL(SCHEMA_PREFIX) + SDAI.FORCE_OPTIONAL(SDAI.STRING("FINITE_INTEGER_INTERVAL"))
    let _TEMP7 = SDAI.TYPEOF(TEMP)
    let _TEMP8 = SDAI.aggregate(_TEMP7, contains: _TEMP6)
    let _TEMP9 =  !_TEMP8
    if SDAI.IS_TRUE( _TEMP9 ) {
      return _check_sparse_index_to_loc__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
    }
    IDX_RNG_ITVL = eFINITE_INTEGER_INTERVAL(/*eMATHS_SPACE*/TEMP)
    
    let _TEMP10 = FACTOR1(LOC_DOMAIN)
    TEMP = _TEMP10
    
    let _TEMP11 = SDAI.FORCE_OPTIONAL(SCHEMA_PREFIX) + SDAI.FORCE_OPTIONAL(SDAI.STRING("TUPLE_SPACE"))
    let _TEMP12 = SDAI.TYPEOF(TEMP)
    let _TEMP13 = SDAI.aggregate(_TEMP12, contains: _TEMP11)
    if SDAI.IS_TRUE( _TEMP13 ) {
      
      let _TEMP14 = FACTOR1(sTUPLE_SPACE(/*eMATHS_SPACE*/TEMP))
      TEMP = _TEMP14
    }
    
    let _TEMP15 = SDAI.FORCE_OPTIONAL(SCHEMA_PREFIX) + SDAI.FORCE_OPTIONAL(SDAI.STRING(
      "FINITE_INTEGER_INTERVAL"))
    let _TEMP16 = SDAI.TYPEOF(TEMP)
    let _TEMP17 = SDAI.aggregate(_TEMP16, contains: _TEMP15)
    let _TEMP18 =  !_TEMP17
    if SDAI.IS_TRUE( _TEMP18 ) {
      return _check_sparse_index_to_loc__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
    }
    LOC_DMN_ITVL = eFINITE_INTEGER_INTERVAL(/*eMATHS_SPACE*/TEMP)
    
    let _TEMP19 = LOC_DMN_ITVL?.MIN
    let _TEMP20 = IDX_RNG_ITVL?.MIN
    let _TEMP21 = _TEMP19 <= _TEMP20
    let _TEMP22 = IDX_RNG_ITVL?.MAX
    let _TEMP23 = LOC_DMN_ITVL?.MAX
    let _TEMP24 = _TEMP23 + SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
    let _TEMP25 = _TEMP22 <= _TEMP24
    let _TEMP26 = _TEMP21 && _TEMP25
    let _TEMP27 = BOOL(SDAI.LOGICAL(_TEMP26))
    return _check_sparse_index_to_loc__cache.updateCache(params: _params, value: _TEMP27)
  }

}

//MARK: - function result cache
private var _check_sparse_index_to_loc__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

