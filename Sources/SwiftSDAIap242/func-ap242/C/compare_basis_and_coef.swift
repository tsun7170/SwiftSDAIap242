/* file: compare_basis_and_coef.swift 	 generated: Mon Jan  3 16:32:52 2022 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.1, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION compare_basis_and_coef(
               basis : LIST [1 : ?] OF b_spline_basis;
               coef : maths_function
           ) : BOOLEAN;

    LOCAL
      shape : LIST OF positive_integer;
    END_LOCAL;
    IF ( NOT EXISTS( basis ) ) OR ( NOT EXISTS( coef ) ) THEN
      RETURN( FALSE );
    END_IF;
    shape := shape_of_array( coef );
    IF NOT EXISTS( shape ) THEN
      RETURN( FALSE );
    END_IF;
    IF SIZEOF( shape ) < SIZEOF( basis ) THEN
      RETURN( FALSE );
    END_IF;
    REPEAT i := 1 TO SIZEOF( basis ) BY 1;
      IF ( basis[i].num_basis = shape[i] ) <> TRUE THEN
        RETURN( FALSE );
      END_IF;
    END_REPEAT;
    RETURN( TRUE );

  END_FUNCTION; -- compare_basis_and_coef (line:36178 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func COMPARE_BASIS_AND_COEF(BASIS: (SDAI.LIST<eB_SPLINE_BASIS>/*[1:nil]*/ )? , 
                              COEF: eMATHS_FUNCTION? ) 
    -> SDAI.BOOLEAN? {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( BASIS, COEF )
    if case .available(let _cached_value) = _compare_basis_and_coef__cache.cachedValue(params: _params) {
      return _cached_value as? SDAI.BOOLEAN
    }

    var BASIS = BASIS; SDAI.TOUCH(var: &BASIS)
    var COEF = COEF; SDAI.TOUCH(var: &COEF)

    //LOCAL
    var SHAPE: SDAI.LIST<tPOSITIVE_INTEGER>? 

    
    let _TEMP1 = SDAI.EXISTS(BASIS)
    let _TEMP2 =  !_TEMP1
    let _TEMP3 = SDAI.EXISTS(COEF)
    let _TEMP4 =  !_TEMP3
    let _TEMP5 = _TEMP2 || _TEMP4
    if SDAI.IS_TRUE( _TEMP5 ) {
      return _compare_basis_and_coef__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
    }
    
    let _TEMP6 = SHAPE_OF_ARRAY(COEF)
    SHAPE = _TEMP6
    
    let _TEMP7 = SDAI.EXISTS(SHAPE)
    let _TEMP8 =  !_TEMP7
    if SDAI.IS_TRUE( _TEMP8 ) {
      return _compare_basis_and_coef__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
    }
    
    let _TEMP9 = SDAI.SIZEOF(SHAPE)
    let _TEMP10 = SDAI.SIZEOF(BASIS)
    let _TEMP11 = _TEMP9 < _TEMP10
    if SDAI.IS_TRUE( _TEMP11 ) {
      return _compare_basis_and_coef__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
    }
    if let incrementControl/*SDAI.INTEGER*/ = SDAI.FROM(/*SDAI.INTEGER*/1, TO:/*SDAI.INTEGER*/SDAI.SIZEOF(
      BASIS)) {
      for I in incrementControl {
        
        let _TEMP12 = BASIS?[I]
        let _TEMP13 = _TEMP12?.NUM_BASIS
        let _TEMP14 = SHAPE?[I]
        let _TEMP15 = _TEMP13 .==. _TEMP14
        let _TEMP16 = SDAI.FORCE_OPTIONAL(_TEMP15) .!=. SDAI.FORCE_OPTIONAL(SDAI.LOGICAL(SDAI.TRUE))
        if SDAI.IS_TRUE( _TEMP16 ) {
          return _compare_basis_and_coef__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
        }
      }
    }
    return _compare_basis_and_coef__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.TRUE))
  }

}

//MARK: - function result cache
private var _compare_basis_and_coef__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

