/* file: cross_product.swift 	 generated: Sat Aug 14 13:46:02 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION cross_product(
               arg1, arg2 : direction
           ) : vector;

    LOCAL
      mag    : REAL;
      res    : direction;
      v1     : LIST [3 : 3] OF REAL;
      v2     : LIST [3 : 3] OF REAL;
      result : vector;
    END_LOCAL;
    IF ( NOT EXISTS( arg1 ) ) OR ( arg1.dim = 2 ) OR ( NOT EXISTS( arg2 ) ) OR ( arg2.dim = 2 ) THEN
      RETURN( ? );
    ELSE

      BEGIN
        v1 := normalise( arg1 ).direction_ratios;
        v2 := normalise( arg2 ).direction_ratios;
        res := dummy_gri || direction( [( v1[2] * v2[3] ) - ( v1[3] * v2[2] ), ( v1[3] * v2[1] ) - ( v1[1] * 
            v2[3] ), ( v1[1] * v2[2] ) - ( v1[2] * v2[1] )] );
        mag := 0;
        REPEAT i := 1 TO 3 BY 1;
          mag := mag + ( res.direction_ratios[i] * res.direction_ratios[i] );
        END_REPEAT;
        IF mag > 0 THEN
          result := dummy_gri || vector( res, SQRT( mag ) );
        ELSE
          result := dummy_gri || vector( arg1, 0 );
        END_IF;
        RETURN( result );
      END;
    END_IF;

  END_FUNCTION; -- cross_product (line:37287 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func CROSS_PRODUCT(ARG1: eDIRECTION? , ARG2: eDIRECTION? ) 
    -> eVECTOR? {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( ARG1, ARG2 )
    if case .available(let _cached_value) = _cross_product__cache.cachedValue(params: _params) {
      return _cached_value as? eVECTOR
    }

    var ARG1 = ARG1; SDAI.TOUCH(var: &ARG1)
    var ARG2 = ARG2; SDAI.TOUCH(var: &ARG2)

    //LOCAL
    var MAG: SDAI.REAL? 
    var RES: eDIRECTION? 
    var V1: (SDAI.LIST<SDAI.REAL>/*[3:3]*/ )? 
    var V2: (SDAI.LIST<SDAI.REAL>/*[3:3]*/ )? 
    var RESULT: eVECTOR? 
    //END_LOCAL

    
    let _TEMP1 = SDAI.EXISTS(ARG1)
    let _TEMP2 =  !_TEMP1
    let _TEMP3 = ARG1?.DIM
    let _TEMP4 = _TEMP3 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(2))
    let _TEMP5 = _TEMP2 || _TEMP4
    let _TEMP6 = SDAI.EXISTS(ARG2)
    let _TEMP7 =  !_TEMP6
    let _TEMP8 = ARG2?.DIM
    let _TEMP9 = _TEMP8 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(2))
    let _TEMP10 = _TEMP7 || _TEMP9
    let _TEMP11 = _TEMP5 || _TEMP10
    if SDAI.IS_TRUE( _TEMP11 ) {
      return _cross_product__cache.updateCache(params: _params, value: (nil as eVECTOR?))
    }
    else {
      //BEGIN
      
      let _TEMP12 = NORMALISE(sVECTOR_OR_DIRECTION(/*eDIRECTION*/ARG1))
      let _TEMP13 = _TEMP12?.DIRECTION_RATIOS
      V1 = SDAI.LIST<SDAI.REAL>(bound1: SDAI.UNWRAP(SDAI.INTEGER(3)), bound2: SDAI.INTEGER(3), 
        /*SDAI.LIST<SDAI.REAL>[2:3] */_TEMP13)
      
      let _TEMP14 = NORMALISE(sVECTOR_OR_DIRECTION(/*eDIRECTION*/ARG2))
      let _TEMP15 = _TEMP14?.DIRECTION_RATIOS
      V2 = SDAI.LIST<SDAI.REAL>(bound1: SDAI.UNWRAP(SDAI.INTEGER(3)), bound2: SDAI.INTEGER(3), 
        /*SDAI.LIST<SDAI.REAL>[2:3] */_TEMP15)
      
      let _TEMP16 = V1?[2]
      let _TEMP17 = V2?[3]
      let _TEMP18 = _TEMP16 * _TEMP17
      let _TEMP19 = V1?[3]
      let _TEMP20 = V2?[2]
      let _TEMP21 = _TEMP19 * _TEMP20
      let _TEMP22 = _TEMP18 - _TEMP21
      let _TEMP23 = V1?[3]
      let _TEMP24 = V2?[1]
      let _TEMP25 = _TEMP23 * _TEMP24
      let _TEMP26 = V1?[1]
      let _TEMP27 = V2?[3]
      let _TEMP28 = _TEMP26 * _TEMP27
      let _TEMP29 = _TEMP25 - _TEMP28
      let _TEMP30 = V1?[1]
      let _TEMP31 = V2?[2]
      let _TEMP32 = _TEMP30 * _TEMP31
      let _TEMP33 = V1?[2]
      let _TEMP34 = V2?[1]
      let _TEMP35 = _TEMP33 * _TEMP34
      let _TEMP36 = _TEMP32 - _TEMP35
      let _TEMP37 = SDAI.LIST<SDAI.REAL>(bound1: SDAI.UNWRAP(SDAI.INTEGER(2)), bound2: SDAI.INTEGER(3), 
        ([SDAI.AIE(_TEMP22), SDAI.AIE(_TEMP29), 
        SDAI.AIE(_TEMP36)] as [SDAI.AggregationInitializerElement<SDAI.REAL>]))
      let _TEMP38 = _direction(DIRECTION_RATIOS: SDAI.UNWRAP(_TEMP37))
      let _TEMP39 = DUMMY_GRI .||. _TEMP38
      RES = eDIRECTION(/*SDAI.GENERIC_ENTITY*/_TEMP39)
      MAG = SDAI.REAL(0)
      if let incrementControl/*SDAI.INTEGER*/ = SDAI.FROM(/*SDAI.INTEGER*/1, TO:/*SDAI.INTEGER*/3) {
        for I in incrementControl {
          
          let _TEMP40 = RES?.DIRECTION_RATIOS
          let _TEMP41 = _TEMP40?[I]
          let _TEMP42 = RES?.DIRECTION_RATIOS
          let _TEMP43 = _TEMP42?[I]
          let _TEMP44 = _TEMP41 * _TEMP43
          let _TEMP45 = MAG + _TEMP44
          MAG = _TEMP45
        }
      }
      
      let _TEMP46 = MAG > SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      if SDAI.IS_TRUE( _TEMP46 ) {
        
        let _TEMP47 = SDAI.SQRT(MAG)
        let _TEMP48 = _vector(ORIENTATION: SDAI.UNWRAP(RES), 
                              MAGNITUDE: SDAI.UNWRAP(tLENGTH_MEASURE(/*SDAI.REAL*/_TEMP47)))
        let _TEMP49 = DUMMY_GRI .||. _TEMP48
        RESULT = eVECTOR(/*SDAI.GENERIC_ENTITY*/_TEMP49)
      }
      else {
        
        let _TEMP50 = _vector(ORIENTATION: SDAI.UNWRAP(ARG1), 
                              MAGNITUDE: SDAI.UNWRAP(tLENGTH_MEASURE(0)))
        let _TEMP51 = DUMMY_GRI .||. _TEMP50
        RESULT = eVECTOR(/*SDAI.GENERIC_ENTITY*/_TEMP51)
      }
      return _cross_product__cache.updateCache(params: _params, value: RESULT)
      //END
    }
  }

}

//MARK: - function result cache
private var _cross_product__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

