/* file: check_geometric_dimension.swift 	 generated: Sun Oct 31 15:32:10 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION check_geometric_dimension(
               capt : SET [0 : ?] OF cartesian_point;
               dir : SET [0 : ?] OF direction;
               grc : SET [0 : ?] OF geometric_representation_context
           ) : BOOLEAN;

    LOCAL
      globaldim : INTEGER := 0;
      reps      : SET [0 : ?] OF representation := [];
      result    : BOOLEAN := TRUE;
    END_LOCAL;
    IF SIZEOF( grc ) = 0 THEN
      RETURN( FALSE );
    END_IF;
    globaldim := geometric_dimensionalities_in_contexts( grc );
    IF globaldim > 0 THEN
      IF SIZEOF( capt ) > 0 THEN
        REPEAT i := 1 TO HIINDEX( capt ) BY 1;
          IF HIINDEX( capt[i].coordinates ) <> globaldim THEN
            RETURN( FALSE );
          END_IF;
        END_REPEAT;
      END_IF;
      IF SIZEOF( dir ) > 0 THEN
        REPEAT i := 1 TO HIINDEX( dir ) BY 1;
          IF HIINDEX( dir[i].direction_ratios ) <> globaldim THEN
            RETURN( FALSE );
          END_IF;
        END_REPEAT;
      END_IF;
      RETURN( result );
    ELSE
      IF SIZEOF( capt ) > 0 THEN
        REPEAT i := 1 TO HIINDEX( capt ) BY 1;
          reps := using_representations( capt[i] );
          IF SIZEOF( reps ) > 0 THEN
            REPEAT j := 1 TO HIINDEX( reps ) BY 1;
              IF HIINDEX( capt[i].coordinates ) <> reps[j].context_of_items\geometric_representation_context.
                  coordinate_space_dimension THEN
                RETURN( FALSE );
              END_IF;
            END_REPEAT;
          ELSE
            RETURN( FALSE );
          END_IF;
        END_REPEAT;
      END_IF;
      IF SIZEOF( dir ) > 0 THEN
        REPEAT i := 1 TO HIINDEX( dir ) BY 1;
          reps := using_representations( dir[i] );
          IF SIZEOF( reps ) > 0 THEN
            REPEAT j := 1 TO HIINDEX( reps ) BY 1;
              IF HIINDEX( dir[i].direction_ratios ) <> reps[j].context_of_items\
                  geometric_representation_context.coordinate_space_dimension THEN
                RETURN( FALSE );
              END_IF;
            END_REPEAT;
          ELSE
            RETURN( FALSE );
          END_IF;
        END_REPEAT;
      END_IF;
    END_IF;
    RETURN( result );

  END_FUNCTION; -- check_geometric_dimension (line:35911 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func CHECK_GEOMETRIC_DIMENSION(CAPT: (SDAI.SET<eCARTESIAN_POINT>/*[0:nil]*/ )? , 
                                 DIR: (SDAI.SET<eDIRECTION>/*[0:nil]*/ )? , 
                                 GRC: (SDAI.SET<eGEOMETRIC_REPRESENTATION_CONTEXT>/*[0:nil]*/ )? ) 
    -> SDAI.BOOLEAN? {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( CAPT, DIR, GRC )
    if case .available(let _cached_value) = _check_geometric_dimension__cache.cachedValue(params: _params) {
      return _cached_value as? SDAI.BOOLEAN
    }

    var CAPT = CAPT; SDAI.TOUCH(var: &CAPT)
    var DIR = DIR; SDAI.TOUCH(var: &DIR)
    var GRC = GRC; SDAI.TOUCH(var: &GRC)

    //LOCAL
    var GLOBALDIM: SDAI.INTEGER?  = SDAI.INTEGER(0); SDAI.TOUCH(var: &GLOBALDIM)
    var REPS: (SDAI.SET<eREPRESENTATION>/*[0:nil]*/ )?  = SDAI.SET<eREPRESENTATION>(
                                                          bound1: SDAI.UNWRAP(SDAI.INTEGER(0)), bound2: (nil as 
                                                          SDAI.INTEGER?), 
                                                          SDAI.EMPLY_AGGREGATE); SDAI.TOUCH(var: &REPS)
    var RESULT: SDAI.BOOLEAN?  = SDAI.BOOLEAN(SDAI.TRUE); SDAI.TOUCH(var: &RESULT)
    //END_LOCAL

    
    let _TEMP1 = SDAI.SIZEOF(GRC)
    let _TEMP2 = _TEMP1 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
    if SDAI.IS_TRUE( _TEMP2 ) {
      return _check_geometric_dimension__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
    }
    
    let _TEMP3 = GEOMETRIC_DIMENSIONALITIES_IN_CONTEXTS(SDAI.SET<eGEOMETRIC_REPRESENTATION_CONTEXT>(
      bound1: SDAI.UNWRAP(SDAI.INTEGER(1)), bound2: (nil as SDAI.INTEGER?), 
      /*SDAI.SET<eGEOMETRIC_REPRESENTATION_CONTEXT>[0:nil] */GRC))
    GLOBALDIM = _TEMP3
    
    let _TEMP4 = GLOBALDIM > SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
    if SDAI.IS_TRUE( _TEMP4 ) {
      
      let _TEMP5 = SDAI.SIZEOF(CAPT)
      let _TEMP6 = _TEMP5 > SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      if SDAI.IS_TRUE( _TEMP6 ) {
        if let incrementControl/*SDAI.INTEGER*/ = SDAI.FROM(/*SDAI.INTEGER*/1, TO:/*SDAI.INTEGER*/
          SDAI.HIINDEX(CAPT)) {
          for I in incrementControl {
            
            let _TEMP7 = CAPT?[I]
            let _TEMP8 = _TEMP7?.COORDINATES
            let _TEMP9 = SDAI.HIINDEX(_TEMP8)
            let _TEMP10 = _TEMP9 .!=. GLOBALDIM
            if SDAI.IS_TRUE( _TEMP10 ) {
              return _check_geometric_dimension__cache.updateCache(params: _params, value: SDAI.BOOLEAN(
                SDAI.FALSE))
            }
          }
        }
      }
      
      let _TEMP11 = SDAI.SIZEOF(DIR)
      let _TEMP12 = _TEMP11 > SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      if SDAI.IS_TRUE( _TEMP12 ) {
        if let incrementControl/*SDAI.INTEGER*/ = SDAI.FROM(/*SDAI.INTEGER*/1, TO:/*SDAI.INTEGER*/
          SDAI.HIINDEX(DIR)) {
          for I in incrementControl {
            
            let _TEMP13 = DIR?[I]
            let _TEMP14 = _TEMP13?.DIRECTION_RATIOS
            let _TEMP15 = SDAI.HIINDEX(_TEMP14)
            let _TEMP16 = _TEMP15 .!=. GLOBALDIM
            if SDAI.IS_TRUE( _TEMP16 ) {
              return _check_geometric_dimension__cache.updateCache(params: _params, value: SDAI.BOOLEAN(
                SDAI.FALSE))
            }
          }
        }
      }
      return _check_geometric_dimension__cache.updateCache(params: _params, value: RESULT)
    }
    else {
      
      let _TEMP17 = SDAI.SIZEOF(CAPT)
      let _TEMP18 = _TEMP17 > SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      if SDAI.IS_TRUE( _TEMP18 ) {
        if let incrementControl/*SDAI.INTEGER*/ = SDAI.FROM(/*SDAI.INTEGER*/1, TO:/*SDAI.INTEGER*/
          SDAI.HIINDEX(CAPT)) {
          for I in incrementControl {
            
            let _TEMP19 = CAPT?[I]
            let _TEMP20 = USING_REPRESENTATIONS(sFOUNDED_ITEM_SELECT(/*eCARTESIAN_POINT*/_TEMP19))
            REPS = SDAI.SET<eREPRESENTATION>(bound1: SDAI.UNWRAP(SDAI.INTEGER(0)), bound2: (nil as SDAI.INTEGER?), 
              /*SDAI.SET<eREPRESENTATION>*/_TEMP20)
            
            let _TEMP21 = SDAI.SIZEOF(REPS)
            let _TEMP22 = _TEMP21 > SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
            if SDAI.IS_TRUE( _TEMP22 ) {
              if let incrementControl/*SDAI.INTEGER*/ = SDAI.FROM(/*SDAI.INTEGER*/1, TO:/*SDAI.INTEGER*/
                SDAI.HIINDEX(REPS)) {
                for J in incrementControl {
                  
                  let _TEMP23 = CAPT?[I]
                  let _TEMP24 = _TEMP23?.COORDINATES
                  let _TEMP25 = SDAI.HIINDEX(_TEMP24)
                  let _TEMP26 = REPS?[J]
                  let _TEMP27 = _TEMP26?.CONTEXT_OF_ITEMS
                  let _TEMP28 = _TEMP27?.GROUP_REF(eGEOMETRIC_REPRESENTATION_CONTEXT.self)
                  let _TEMP29 = _TEMP28?.COORDINATE_SPACE_DIMENSION
                  let _TEMP30 = _TEMP25 .!=. _TEMP29
                  if SDAI.IS_TRUE( _TEMP30 ) {
                    return _check_geometric_dimension__cache.updateCache(params: _params, value: SDAI.BOOLEAN(
                      SDAI.FALSE))
                  }
                }
              }
            }
            else {
              return _check_geometric_dimension__cache.updateCache(params: _params, value: SDAI.BOOLEAN(
                SDAI.FALSE))
            }
          }
        }
      }
      
      let _TEMP31 = SDAI.SIZEOF(DIR)
      let _TEMP32 = _TEMP31 > SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      if SDAI.IS_TRUE( _TEMP32 ) {
        if let incrementControl/*SDAI.INTEGER*/ = SDAI.FROM(/*SDAI.INTEGER*/1, TO:/*SDAI.INTEGER*/
          SDAI.HIINDEX(DIR)) {
          for I in incrementControl {
            
            let _TEMP33 = DIR?[I]
            let _TEMP34 = USING_REPRESENTATIONS(sFOUNDED_ITEM_SELECT(/*eDIRECTION*/_TEMP33))
            REPS = SDAI.SET<eREPRESENTATION>(bound1: SDAI.UNWRAP(SDAI.INTEGER(0)), bound2: (nil as SDAI.INTEGER?), 
              /*SDAI.SET<eREPRESENTATION>*/_TEMP34)
            
            let _TEMP35 = SDAI.SIZEOF(REPS)
            let _TEMP36 = _TEMP35 > SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
            if SDAI.IS_TRUE( _TEMP36 ) {
              if let incrementControl/*SDAI.INTEGER*/ = SDAI.FROM(/*SDAI.INTEGER*/1, TO:/*SDAI.INTEGER*/
                SDAI.HIINDEX(REPS)) {
                for J in incrementControl {
                  
                  let _TEMP37 = DIR?[I]
                  let _TEMP38 = _TEMP37?.DIRECTION_RATIOS
                  let _TEMP39 = SDAI.HIINDEX(_TEMP38)
                  let _TEMP40 = REPS?[J]
                  let _TEMP41 = _TEMP40?.CONTEXT_OF_ITEMS
                  let _TEMP42 = _TEMP41?.GROUP_REF(eGEOMETRIC_REPRESENTATION_CONTEXT.self)
                  let _TEMP43 = _TEMP42?.COORDINATE_SPACE_DIMENSION
                  let _TEMP44 = _TEMP39 .!=. _TEMP43
                  if SDAI.IS_TRUE( _TEMP44 ) {
                    return _check_geometric_dimension__cache.updateCache(params: _params, value: SDAI.BOOLEAN(
                      SDAI.FALSE))
                  }
                }
              }
            }
            else {
              return _check_geometric_dimension__cache.updateCache(params: _params, value: SDAI.BOOLEAN(
                SDAI.FALSE))
            }
          }
        }
      }
    }
    return _check_geometric_dimension__cache.updateCache(params: _params, value: RESULT)
  }

}

//MARK: - function result cache
private var _check_geometric_dimension__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

