/* file: default_b_spline_knots.swift 	 generated: Mon Jan  3 16:32:52 2022 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.1, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION default_b_spline_knots(
               degree : INTEGER;
               up_knots : INTEGER;
               uniform : knot_type
           ) : LIST [2 : ?] OF parameter_value;

    LOCAL
      knots  : LIST [1 : up_knots] OF parameter_value := [0 : up_knots];
      ishift : INTEGER := 1;
    END_LOCAL;
    IF uniform = uniform_knots THEN
      ishift := degree + 1;
    END_IF;
    IF ( uniform = uniform_knots ) OR ( uniform = quasi_uniform_knots ) OR ( uniform = piecewise_bezier_knots )
        THEN
      REPEAT i := 1 TO up_knots BY 1;
        knots[i] := i - ishift;
      END_REPEAT;
    END_IF;
    RETURN( knots );

  END_FUNCTION; -- default_b_spline_knots (line:51440 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func DEFAULT_B_SPLINE_KNOTS(DEGREE: SDAI.INTEGER? , UP_KNOTS: SDAI.INTEGER? , 
                              UNIFORM: nKNOT_TYPE? ) 
    -> (SDAI.LIST<tPARAMETER_VALUE>/*[2:nil]*/ )? {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( DEGREE, UP_KNOTS, UNIFORM )
    if case .available(let _cached_value) = _default_b_spline_knots__cache.cachedValue(params: _params) {
      return _cached_value as? SDAI.LIST<tPARAMETER_VALUE>
    }

    var DEGREE = DEGREE; SDAI.TOUCH(var: &DEGREE)
    var UP_KNOTS = UP_KNOTS; SDAI.TOUCH(var: &UP_KNOTS)
    var UNIFORM = UNIFORM; SDAI.TOUCH(var: &UNIFORM)

    //LOCAL
    var KNOTS: (SDAI.LIST<tPARAMETER_VALUE>/*[1:UP_KNOTS]*/ )?  = SDAI.LIST<tPARAMETER_VALUE>(
                                                                  bound1: SDAI.UNWRAP(SDAI.INTEGER(1)), 
                                                                  bound2: UP_KNOTS, 
                                                                  ([
                                                                  SDAI.AIE(tPARAMETER_VALUE(0), repeat: 
                                                                  UP_KNOTS)] 
                                                                  as [SDAI.AggregationInitializerElement<
                                                                  tPARAMETER_VALUE>])); SDAI.TOUCH(var: &KNOTS)
    var ISHIFT: SDAI.INTEGER?  = SDAI.INTEGER(1); SDAI.TOUCH(var: &ISHIFT)
    //END_LOCAL

    
    let _TEMP1 = UNIFORM .==. SDAI.FORCE_OPTIONAL(UNIFORM_KNOTS)
    if SDAI.IS_TRUE( _TEMP1 ) {
      
      let _TEMP2 = DEGREE + SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
      ISHIFT = _TEMP2
    }
    
    let _TEMP3 = UNIFORM .==. SDAI.FORCE_OPTIONAL(UNIFORM_KNOTS)
    let _TEMP4 = UNIFORM .==. SDAI.FORCE_OPTIONAL(QUASI_UNIFORM_KNOTS)
    let _TEMP5 = _TEMP3 || _TEMP4
    let _TEMP6 = UNIFORM .==. SDAI.FORCE_OPTIONAL(PIECEWISE_BEZIER_KNOTS)
    let _TEMP7 = _TEMP5 || _TEMP6
    if SDAI.IS_TRUE( _TEMP7 ) {
      if let incrementControl/*SDAI.INTEGER*/ = SDAI.FROM(/*SDAI.INTEGER*/1, TO:/*SDAI.INTEGER*/UP_KNOTS) {
        for I in incrementControl {
          
          let _TEMP8 = SDAI.FORCE_OPTIONAL(I) - ISHIFT
          KNOTS?[I] = tPARAMETER_VALUE(/*SDAI.INTEGER*/_TEMP8)
        }
      }
    }
    return _default_b_spline_knots__cache.updateCache(params: _params, value: SDAI.LIST<tPARAMETER_VALUE>(
      bound1: SDAI.UNWRAP(SDAI.INTEGER(2)), bound2: (nil as SDAI.INTEGER?), 
      /*SDAI.LIST<tPARAMETER_VALUE>[1:UP_KNOTS] */KNOTS))
  }

}

//MARK: - function result cache
private var _default_b_spline_knots__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

