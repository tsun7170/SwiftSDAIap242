/* file: default_b_spline_knot_mult.swift 	 generated: Mon Jan  3 16:32:52 2022 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.1, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION default_b_spline_knot_mult(
               degree : INTEGER;
               up_knots : INTEGER;
               uniform : knot_type
           ) : LIST [2 : ?] OF INTEGER;

    LOCAL
      knot_mult : LIST [1 : up_knots] OF INTEGER;
    END_LOCAL;
    IF uniform = uniform_knots THEN
      knot_mult := [1 : up_knots];
    ELSE
      IF uniform = quasi_uniform_knots THEN
        knot_mult := [1 : up_knots];
        knot_mult[1] := degree + 1;
        knot_mult[up_knots] := degree + 1;
      ELSE
        IF uniform = piecewise_bezier_knots THEN
          knot_mult := [degree : up_knots];
          knot_mult[1] := degree + 1;
          knot_mult[up_knots] := degree + 1;
        ELSE
          knot_mult := [0 : up_knots];
        END_IF;
      END_IF;
    END_IF;
    RETURN( knot_mult );

  END_FUNCTION; -- default_b_spline_knot_mult (line:51414 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func DEFAULT_B_SPLINE_KNOT_MULT(DEGREE: SDAI.INTEGER? , UP_KNOTS: SDAI.INTEGER? , 
                                  UNIFORM: nKNOT_TYPE? ) 
    -> (SDAI.LIST<SDAI.INTEGER>/*[2:nil]*/ )? {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( DEGREE, UP_KNOTS, UNIFORM )
    if case .available(let _cached_value) = _default_b_spline_knot_mult__cache.cachedValue(params: _params) {
      return _cached_value as? SDAI.LIST<SDAI.INTEGER>
    }

    var DEGREE = DEGREE; SDAI.TOUCH(var: &DEGREE)
    var UP_KNOTS = UP_KNOTS; SDAI.TOUCH(var: &UP_KNOTS)
    var UNIFORM = UNIFORM; SDAI.TOUCH(var: &UNIFORM)

    //LOCAL
    var KNOT_MULT: (SDAI.LIST<SDAI.INTEGER>/*[1:UP_KNOTS]*/ )? 

    
    let _TEMP1 = UNIFORM .==. SDAI.FORCE_OPTIONAL(UNIFORM_KNOTS)
    if SDAI.IS_TRUE( _TEMP1 ) {
      
      let _TEMP2 = SDAI.LIST<SDAI.INTEGER>(bound1: SDAI.UNWRAP(SDAI.INTEGER(1)), bound2: UP_KNOTS, 
        ([SDAI.AIE(SDAI.INTEGER(1), repeat: UP_KNOTS)] as [SDAI.AggregationInitializerElement<SDAI.INTEGER>]))
      KNOT_MULT = _TEMP2
    }
    else {
      
      let _TEMP3 = UNIFORM .==. SDAI.FORCE_OPTIONAL(QUASI_UNIFORM_KNOTS)
      if SDAI.IS_TRUE( _TEMP3 ) {
        
        let _TEMP4 = SDAI.LIST<SDAI.INTEGER>(bound1: SDAI.UNWRAP(SDAI.INTEGER(1)), bound2: UP_KNOTS, 
          ([SDAI.AIE(SDAI.INTEGER(1), repeat: UP_KNOTS)] as [SDAI.AggregationInitializerElement<SDAI.INTEGER>]))
        KNOT_MULT = _TEMP4
        
        let _TEMP5 = DEGREE + SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
        KNOT_MULT?[1] = _TEMP5
        
        let _TEMP6 = DEGREE + SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
        KNOT_MULT?[UP_KNOTS] = _TEMP6
      }
      else {
        
        let _TEMP7 = UNIFORM .==. SDAI.FORCE_OPTIONAL(PIECEWISE_BEZIER_KNOTS)
        if SDAI.IS_TRUE( _TEMP7 ) {
          
          let _TEMP8 = SDAI.LIST<SDAI.INTEGER>(bound1: SDAI.UNWRAP(SDAI.INTEGER(1)), bound2: UP_KNOTS, 
            ([SDAI.AIE(DEGREE, repeat: UP_KNOTS)] as [SDAI.AggregationInitializerElement<SDAI.INTEGER>]))
          KNOT_MULT = _TEMP8
          
          let _TEMP9 = DEGREE + SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
          KNOT_MULT?[1] = _TEMP9
          
          let _TEMP10 = DEGREE + SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
          KNOT_MULT?[UP_KNOTS] = _TEMP10
        }
        else {
          
          let _TEMP11 = SDAI.LIST<SDAI.INTEGER>(bound1: SDAI.UNWRAP(SDAI.INTEGER(1)), bound2: UP_KNOTS, 
            ([SDAI.AIE(SDAI.INTEGER(0), repeat: UP_KNOTS)] as [SDAI.AggregationInitializerElement<SDAI.INTEGER>]))
          KNOT_MULT = _TEMP11
        }
      }
    }
    return _default_b_spline_knot_mult__cache.updateCache(params: _params, value: SDAI.LIST<SDAI.INTEGER>(
      bound1: SDAI.UNWRAP(SDAI.INTEGER(2)), bound2: (nil as SDAI.INTEGER?), 
      /*SDAI.LIST<SDAI.INTEGER>[1:UP_KNOTS] */KNOT_MULT))
  }

}

//MARK: - function result cache
private var _default_b_spline_knot_mult__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

