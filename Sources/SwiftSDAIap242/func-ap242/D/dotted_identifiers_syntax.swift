/* file: dotted_identifiers_syntax.swift 	 generated: Sat Aug 14 13:46:02 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION dotted_identifiers_syntax(
               str : STRING
           ) : BOOLEAN;

    LOCAL
      k : positive_integer;
      m : positive_integer;
    END_LOCAL;
    IF NOT EXISTS( str ) THEN
      RETURN( FALSE );
    END_IF;
    k := parse_express_identifier( str, 1 );
    IF k = 1 THEN
      RETURN( FALSE );
    END_IF;
    REPEAT WHILE k <= LENGTH( str );
      IF ( str[k] <> '.' ) OR ( k = LENGTH( str ) ) THEN
        RETURN( FALSE );
      END_IF;
      m := parse_express_identifier( str, k + 1 );
      IF m = ( k + 1 ) THEN
        RETURN( FALSE );
      END_IF;
      k := m;
    END_REPEAT;
    RETURN( TRUE );

  END_FUNCTION; -- dotted_identifiers_syntax (line:38592 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func DOTTED_IDENTIFIERS_SYNTAX(_ STR: SDAI.STRING? ) 
    -> SDAI.BOOLEAN? {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( STR )
    if case .available(let _cached_value) = _dotted_identifiers_syntax__cache.cachedValue(params: _params) {
      return _cached_value as? SDAI.BOOLEAN
    }

    var STR = STR; SDAI.TOUCH(var: &STR)

    //LOCAL
    var K: tPOSITIVE_INTEGER? 
    var M: tPOSITIVE_INTEGER? 
    //END_LOCAL

    
    let _TEMP1 = SDAI.EXISTS(STR)
    let _TEMP2 =  !_TEMP1
    if SDAI.IS_TRUE( _TEMP2 ) {
      return _dotted_identifiers_syntax__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
    }
    
    let _TEMP3 = PARSE_EXPRESS_IDENTIFIER(
      S: STR, I: tPOSITIVE_INTEGER(1))
    K = _TEMP3
    
    let _TEMP4 = K .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
    if SDAI.IS_TRUE( _TEMP4 ) {
      return _dotted_identifiers_syntax__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
    }
    while !SDAI.IS_TRUE(( K <= SDAI.LENGTH(STR) )) {
      
      let _TEMP5 = STR?[K]
      let _TEMP6 = _TEMP5 .!=. SDAI.FORCE_OPTIONAL(SDAI.STRING("."))
      let _TEMP7 = SDAI.LENGTH(STR)
      let _TEMP8 = K .==. _TEMP7
      let _TEMP9 = _TEMP6 || _TEMP8
      if SDAI.IS_TRUE( _TEMP9 ) {
        return _dotted_identifiers_syntax__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
      }
      
      let _TEMP10 = K + SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
      let _TEMP11 = PARSE_EXPRESS_IDENTIFIER(
        S: STR, I: tPOSITIVE_INTEGER(/*SDAI.INTEGER*/_TEMP10))
      M = _TEMP11
      
      let _TEMP12 = K + SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
      let _TEMP13 = M .==. _TEMP12
      if SDAI.IS_TRUE( _TEMP13 ) {
        return _dotted_identifiers_syntax__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
      }
      K = M
    }
    return _dotted_identifiers_syntax__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.TRUE))
  }

}

//MARK: - function result cache
private var _dotted_identifiers_syntax__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

