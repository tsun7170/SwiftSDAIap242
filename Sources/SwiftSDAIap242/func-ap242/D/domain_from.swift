/* file: domain_from.swift 	 generated: Tue Nov 16 05:35:44 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION domain_from(
               ref : maths_space_or_function
           ) : tuple_space;

    LOCAL
      typenames : SET OF STRING := stripped_typeof( ref );
      func      : maths_function;
    END_LOCAL;
    IF NOT EXISTS( ref ) THEN
      RETURN( ? );
    END_IF;
    IF 'TUPLE_SPACE' IN typenames THEN
      RETURN( ref );
    END_IF;
    IF 'MATHS_SPACE' IN typenames THEN
      RETURN( one_tuples_of( ref ) );
    END_IF;
    func := ref;
    IF 'CONSTANT_FUNCTION' IN typenames THEN
      RETURN( domain_from( func\constant_function.source_of_domain ) );
    END_IF;
    IF 'SELECTOR_FUNCTION' IN typenames THEN
      RETURN( domain_from( func\selector_function.source_of_domain ) );
    END_IF;
    IF 'PARALLEL_COMPOSED_FUNCTION' IN typenames THEN
      RETURN( domain_from( func\parallel_composed_function.source_of_domain ) );
    END_IF;
    RETURN( func.domain );

  END_FUNCTION; -- domain_from (line:38530 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func DOMAIN_FROM(_ REF: sMATHS_SPACE_OR_FUNCTION? ) 
    -> sTUPLE_SPACE? {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( REF )
    if case .available(let _cached_value) = _domain_from__cache.cachedValue(params: _params) {
      return _cached_value as? sTUPLE_SPACE
    }

    var REF = REF; SDAI.TOUCH(var: &REF)

    //LOCAL
    var TYPENAMES: SDAI.SET<SDAI.STRING>?  = STRIPPED_TYPEOF(REF); SDAI.TOUCH(var: &TYPENAMES)
    var FUNC: eMATHS_FUNCTION? 
    //END_LOCAL

    
    let _TEMP1 = SDAI.EXISTS(REF)
    let _TEMP2 =  !_TEMP1
    if SDAI.IS_TRUE( _TEMP2 ) {
      return _domain_from__cache.updateCache(params: _params, value: (nil as sTUPLE_SPACE?))
    }
    
    let _TEMP3 = SDAI.aggregate(TYPENAMES, contains: SDAI.STRING("TUPLE_SPACE"))
    if SDAI.IS_TRUE( _TEMP3 ) {
      return _domain_from__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*sMATHS_SPACE_OR_FUNCTION*/
        REF))
    }
    
    let _TEMP4 = SDAI.aggregate(TYPENAMES, contains: SDAI.STRING("MATHS_SPACE"))
    if SDAI.IS_TRUE( _TEMP4 ) {
      
      let _TEMP5 = ONE_TUPLES_OF(eMATHS_SPACE(/*sMATHS_SPACE_OR_FUNCTION*/REF))
      return _domain_from__cache.updateCache(params: _params, value: _TEMP5)
    }
    FUNC = eMATHS_FUNCTION(/*sMATHS_SPACE_OR_FUNCTION*/REF)
    
    let _TEMP6 = SDAI.aggregate(TYPENAMES, contains: SDAI.STRING("CONSTANT_FUNCTION"))
    if SDAI.IS_TRUE( _TEMP6 ) {
      
      let _TEMP7 = FUNC?.GROUP_REF(eCONSTANT_FUNCTION.self)
      let _TEMP8 = _TEMP7?.SOURCE_OF_DOMAIN
      let _TEMP9 = DOMAIN_FROM(_TEMP8)
      return _domain_from__cache.updateCache(params: _params, value: _TEMP9)
    }
    
    let _TEMP10 = SDAI.aggregate(TYPENAMES, contains: SDAI.STRING("SELECTOR_FUNCTION"))
    if SDAI.IS_TRUE( _TEMP10 ) {
      
      let _TEMP11 = FUNC?.GROUP_REF(eSELECTOR_FUNCTION.self)
      let _TEMP12 = _TEMP11?.SOURCE_OF_DOMAIN
      let _TEMP13 = DOMAIN_FROM(_TEMP12)
      return _domain_from__cache.updateCache(params: _params, value: _TEMP13)
    }
    
    let _TEMP14 = SDAI.aggregate(TYPENAMES, contains: SDAI.STRING("PARALLEL_COMPOSED_FUNCTION"))
    if SDAI.IS_TRUE( _TEMP14 ) {
      
      let _TEMP15 = FUNC?.GROUP_REF(ePARALLEL_COMPOSED_FUNCTION.self)
      let _TEMP16 = _TEMP15?.SOURCE_OF_DOMAIN
      let _TEMP17 = DOMAIN_FROM(_TEMP16)
      return _domain_from__cache.updateCache(params: _params, value: _TEMP17)
    }
    
    let _TEMP18 = FUNC?.DOMAIN
    return _domain_from__cache.updateCache(params: _params, value: _TEMP18)
  }

}

//MARK: - function result cache
private var _domain_from__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

