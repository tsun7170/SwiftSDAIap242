/* file: definite_integral_check.swift 	 generated: Sat Aug 14 13:46:02 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION definite_integral_check(
               domain : tuple_space;
               vrblint : input_selector;
               lowerinf : BOOLEAN;
               upperinf : BOOLEAN
           ) : BOOLEAN;

    LOCAL
      domn : tuple_space := domain;
      fspc : maths_space;
      dim  : nonnegative_integer;
      k    : positive_integer;
    END_LOCAL;
    IF ( space_dimension( domain ) = 1 ) AND ( ( schema_prefix + 'TUPLE_SPACE' ) IN TYPEOF( factor1( domain ) ) )
        THEN
      domn := factor1( domain );
    END_IF;
    dim := space_dimension( domn );
    k := vrblint;
    IF k > dim THEN
      RETURN( FALSE );
    END_IF;
    fspc := factor_space( domn, k );
    IF NOT ( ( schema_prefix + 'REAL_INTERVAL' ) IN TYPEOF( fspc ) ) THEN
      RETURN( FALSE );
    END_IF;
    IF lowerinf AND min_exists( fspc ) THEN
      RETURN( FALSE );
    END_IF;
    IF upperinf AND max_exists( fspc ) THEN
      RETURN( FALSE );
    END_IF;
    RETURN( TRUE );

  END_FUNCTION; -- definite_integral_check (line:37427 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func DEFINITE_INTEGRAL_CHECK(DOMAIN: sTUPLE_SPACE? , VRBLINT: tINPUT_SELECTOR? , 
                               LOWERINF: SDAI.BOOLEAN? , UPPERINF: SDAI.BOOLEAN? ) 
    -> SDAI.BOOLEAN? {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( DOMAIN, VRBLINT, LOWERINF, UPPERINF )
    if case .available(let _cached_value) = _definite_integral_check__cache.cachedValue(params: _params) {
      return _cached_value as? SDAI.BOOLEAN
    }

    var DOMAIN = DOMAIN; SDAI.TOUCH(var: &DOMAIN)
    var VRBLINT = VRBLINT; SDAI.TOUCH(var: &VRBLINT)
    var LOWERINF = LOWERINF; SDAI.TOUCH(var: &LOWERINF)
    var UPPERINF = UPPERINF; SDAI.TOUCH(var: &UPPERINF)

    //LOCAL
    var DOMN: sTUPLE_SPACE?  = DOMAIN; SDAI.TOUCH(var: &DOMN)
    var FSPC: eMATHS_SPACE? 
    var DIM: tNONNEGATIVE_INTEGER? 
    var K: tPOSITIVE_INTEGER? 
    //END_LOCAL

    
    let _TEMP1 = SPACE_DIMENSION(DOMAIN)
    let _TEMP2 = _TEMP1 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
    let _TEMP3 = SDAI.FORCE_OPTIONAL(SCHEMA_PREFIX) + SDAI.FORCE_OPTIONAL(SDAI.STRING("TUPLE_SPACE"))
    let _TEMP4 = FACTOR1(DOMAIN)
    let _TEMP5 = SDAI.TYPEOF(_TEMP4)
    let _TEMP6 = SDAI.aggregate(_TEMP5, contains: SDAI.STRING(/*SDAI.INTEGER*/_TEMP3))
    let _TEMP7 = _TEMP2 && _TEMP6
    if SDAI.IS_TRUE( _TEMP7 ) {
      
      let _TEMP8 = FACTOR1(DOMAIN)
      DOMN = sTUPLE_SPACE(/*eMATHS_SPACE*/_TEMP8)
    }
    
    let _TEMP9 = SPACE_DIMENSION(DOMN)
    DIM = _TEMP9
    K = tPOSITIVE_INTEGER(/*tINPUT_SELECTOR*/VRBLINT)
    
    let _TEMP10 = K > DIM
    if SDAI.IS_TRUE( _TEMP10 ) {
      return _definite_integral_check__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
    }
    
    let _TEMP11 = FACTOR_SPACE(TSPACE: DOMN, 
                               IDX: K)
    FSPC = _TEMP11
    
    let _TEMP12 = SDAI.FORCE_OPTIONAL(SCHEMA_PREFIX) + SDAI.FORCE_OPTIONAL(SDAI.STRING("REAL_INTERVAL"))
    let _TEMP13 = SDAI.TYPEOF(FSPC)
    let _TEMP14 = SDAI.aggregate(_TEMP13, contains: SDAI.STRING(/*SDAI.INTEGER*/_TEMP12))
    let _TEMP15 =  !_TEMP14
    if SDAI.IS_TRUE( _TEMP15 ) {
      return _definite_integral_check__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
    }
    
    let _TEMP16 = MIN_EXISTS(FSPC)
    let _TEMP17 = LOWERINF && _TEMP16
    if SDAI.IS_TRUE( _TEMP17 ) {
      return _definite_integral_check__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
    }
    
    let _TEMP18 = MAX_EXISTS(FSPC)
    let _TEMP19 = UPPERINF && _TEMP18
    if SDAI.IS_TRUE( _TEMP19 ) {
      return _definite_integral_check__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
    }
    return _definite_integral_check__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.TRUE))
  }

}

//MARK: - function result cache
private var _definite_integral_check__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

