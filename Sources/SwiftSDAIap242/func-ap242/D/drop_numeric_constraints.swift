/* file: drop_numeric_constraints.swift 	 generated: Tue Nov 16 05:35:44 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION drop_numeric_constraints(
               spc : maths_space
           ) : maths_space;

    LOCAL
      typenames : SET OF STRING := stripped_typeof( spc );
      tspc      : listed_product_space;
      factors   : LIST OF maths_space := [];
      xspc      : extended_tuple_space;
    END_LOCAL;
    IF 'UNIFORM_PRODUCT_SPACE' IN typenames THEN
      RETURN( make_uniform_product_space( drop_numeric_constraints( spc\uniform_product_space.base ), spc\
          uniform_product_space.exponent ) );
    END_IF;
    IF 'LISTED_PRODUCT_SPACE' IN typenames THEN
      tspc := spc;
      REPEAT i := 1 TO SIZEOF( tspc.factors ) BY 1;
        INSERT( factors, drop_numeric_constraints( tspc.factors[i] ), i - 1 );
      END_REPEAT;
      RETURN( make_listed_product_space( factors ) );
    END_IF;
    IF 'EXTENDED_TUPLE_SPACE' IN typenames THEN
      xspc := spc;
      RETURN( make_extended_tuple_space( drop_numeric_constraints( xspc.base ), drop_numeric_constraints( 
          xspc.extender ) ) );
    END_IF;
    IF subspace_of_es( spc, es_numbers ) THEN
      RETURN( number_superspace_of( spc ) );
    END_IF;
    RETURN( spc );

  END_FUNCTION; -- drop_numeric_constraints (line:38635 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func DROP_NUMERIC_CONSTRAINTS(_ SPC: eMATHS_SPACE? ) 
    -> eMATHS_SPACE? {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( SPC )
    if case .available(let _cached_value) = _drop_numeric_constraints__cache.cachedValue(params: _params) {
      return _cached_value as? eMATHS_SPACE
    }

    var SPC = SPC; SDAI.TOUCH(var: &SPC)

    //LOCAL
    var TYPENAMES: SDAI.SET<SDAI.STRING>?  = STRIPPED_TYPEOF(SPC); SDAI.TOUCH(var: &TYPENAMES)
    var TSPC: eLISTED_PRODUCT_SPACE? 
    var FACTORS: SDAI.LIST<eMATHS_SPACE>?  = SDAI.LIST<eMATHS_SPACE>(SDAI.EMPLY_AGGREGATE); SDAI.TOUCH(var: &FACTORS)
    var XSPC: eEXTENDED_TUPLE_SPACE? 
    //END_LOCAL

    
    let _TEMP1 = SDAI.aggregate(TYPENAMES, contains: SDAI.STRING("UNIFORM_PRODUCT_SPACE"))
    if SDAI.IS_TRUE( _TEMP1 ) {
      
      let _TEMP2 = SPC?.GROUP_REF(eUNIFORM_PRODUCT_SPACE.self)
      let _TEMP3 = _TEMP2?.BASE
      let _TEMP4 = DROP_NUMERIC_CONSTRAINTS(_TEMP3)
      let _TEMP5 = SPC?.GROUP_REF(eUNIFORM_PRODUCT_SPACE.self)
      let _TEMP6 = _TEMP5?.EXPONENT
      let _TEMP7 = MAKE_UNIFORM_PRODUCT_SPACE(
        BASE: _TEMP4, EXPONENT: _TEMP6)
      return _drop_numeric_constraints__cache.updateCache(params: _params, value: eMATHS_SPACE(/*
        eUNIFORM_PRODUCT_SPACE*/_TEMP7))
    }
    
    let _TEMP8 = SDAI.aggregate(TYPENAMES, contains: SDAI.STRING("LISTED_PRODUCT_SPACE"))
    if SDAI.IS_TRUE( _TEMP8 ) {
      TSPC = eLISTED_PRODUCT_SPACE(/*eMATHS_SPACE*/SPC)
      if let incrementControl/*SDAI.INTEGER*/ = SDAI.FROM(/*SDAI.INTEGER*/1, TO:/*SDAI.INTEGER*/SDAI.SIZEOF(
        TSPC?.FACTORS)) {
        for I in incrementControl {
          SDAI.INSERT( L: &FACTORS, E: DROP_NUMERIC_CONSTRAINTS(TSPC?.FACTORS[I]), 
            P: SDAI.FORCE_OPTIONAL(I) - SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1)) )
        }
      }
      
      let _TEMP9 = MAKE_LISTED_PRODUCT_SPACE(FACTORS)
      return _drop_numeric_constraints__cache.updateCache(params: _params, value: eMATHS_SPACE(/*
        eLISTED_PRODUCT_SPACE*/_TEMP9))
    }
    
    let _TEMP10 = SDAI.aggregate(TYPENAMES, contains: SDAI.STRING("EXTENDED_TUPLE_SPACE"))
    if SDAI.IS_TRUE( _TEMP10 ) {
      XSPC = eEXTENDED_TUPLE_SPACE(/*eMATHS_SPACE*/SPC)
      
      let _TEMP11 = XSPC?.BASE
      let _TEMP12 = DROP_NUMERIC_CONSTRAINTS(eMATHS_SPACE(/*sTUPLE_SPACE*/_TEMP11))
      let _TEMP13 = XSPC?.EXTENDER
      let _TEMP14 = DROP_NUMERIC_CONSTRAINTS(_TEMP13)
      let _TEMP15 = MAKE_EXTENDED_TUPLE_SPACE(
        BASE: sTUPLE_SPACE(/*eMATHS_SPACE*/_TEMP12), 
        EXTENDER: _TEMP14)
      return _drop_numeric_constraints__cache.updateCache(params: _params, value: eMATHS_SPACE(/*
        eEXTENDED_TUPLE_SPACE*/_TEMP15))
    }
    
    let _TEMP16 = SUBSPACE_OF_ES(SPC: SPC, 
                                 ES: ES_NUMBERS)
    if SDAI.IS_TRUE( _TEMP16 ) {
      
      let _TEMP17 = NUMBER_SUPERSPACE_OF(SPC)
      return _drop_numeric_constraints__cache.updateCache(params: _params, value: eMATHS_SPACE(/*
        eELEMENTARY_SPACE*/_TEMP17))
    }
    return _drop_numeric_constraints__cache.updateCache(params: _params, value: SPC)
  }

}

//MARK: - function result cache
private var _drop_numeric_constraints__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

