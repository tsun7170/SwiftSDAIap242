/* file: derive_elementary_function_domain.swift 	 generated: Tue Nov 16 05:35:44 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION derive_elementary_function_domain(
               ef_val : elementary_function_enumerators
           ) : tuple_space;
    IF NOT EXISTS( ef_val ) THEN
      RETURN( ? );
    END_IF;
    CASE ef_val OF
      ef_and                      :         RETURN( make_extended_tuple_space( the_zero_tuple_space, 
            the_logicals ) );
      ef_or                       :         RETURN( make_extended_tuple_space( the_zero_tuple_space, 
            the_logicals ) );
      ef_not                      :         RETURN( make_uniform_product_space( the_logicals, 1 ) );
      ef_xor                      :         RETURN( make_uniform_product_space( the_logicals, 2 ) );
      ef_negate_i                 :         RETURN( make_uniform_product_space( the_integers, 1 ) );
      ef_add_i                    :         RETURN( the_integer_tuples );
      ef_subtract_i               :         RETURN( make_uniform_product_space( the_integers, 2 ) );
      ef_multiply_i               :         RETURN( the_integer_tuples );
      ef_divide_i                 :         RETURN( make_uniform_product_space( the_integers, 2 ) );
      ef_mod_i                    :         RETURN( make_uniform_product_space( the_integers, 2 ) );
      ef_exponentiate_i           :         RETURN( make_uniform_product_space( the_integers, 2 ) );
      ef_eq_i                     :         RETURN( make_uniform_product_space( the_integers, 2 ) );
      ef_ne_i                     :         RETURN( make_uniform_product_space( the_integers, 2 ) );
      ef_gt_i                     :         RETURN( make_uniform_product_space( the_integers, 2 ) );
      ef_lt_i                     :         RETURN( make_uniform_product_space( the_integers, 2 ) );
      ef_ge_i                     :         RETURN( make_uniform_product_space( the_integers, 2 ) );
      ef_le_i                     :         RETURN( make_uniform_product_space( the_integers, 2 ) );
      ef_abs_i                    :         RETURN( make_uniform_product_space( the_integers, 1 ) );
      ef_if_i                     :         RETURN( make_listed_product_space( [the_logicals, the_integers, 
            the_integers] ) );
      ef_negate_r                 :         RETURN( make_uniform_product_space( the_reals, 1 ) );
      ef_reciprocal_r             :         RETURN( make_uniform_product_space( the_reals, 1 ) );
      ef_add_r                    :         RETURN( the_real_tuples );
      ef_subtract_r               :         RETURN( make_uniform_product_space( the_reals, 2 ) );
      ef_multiply_r               :         RETURN( the_real_tuples );
      ef_divide_r                 :         RETURN( make_uniform_product_space( the_reals, 2 ) );
      ef_mod_r                    :         RETURN( make_uniform_product_space( the_reals, 2 ) );
      ef_exponentiate_r           :         RETURN( make_listed_product_space( [the_nonnegative_reals, 
            the_reals] ) );
      ef_exponentiate_ri          :         RETURN( make_listed_product_space( [the_reals, the_integers] ) );
      ef_eq_r                     :         RETURN( make_uniform_product_space( the_reals, 2 ) );
      ef_ne_r                     :         RETURN( make_uniform_product_space( the_reals, 2 ) );
      ef_gt_r                     :         RETURN( make_uniform_product_space( the_reals, 2 ) );
      ef_lt_r                     :         RETURN( make_uniform_product_space( the_reals, 2 ) );
      ef_ge_r                     :         RETURN( make_uniform_product_space( the_reals, 2 ) );
      ef_le_r                     :         RETURN( make_uniform_product_space( the_reals, 2 ) );
      ef_abs_r                    :         RETURN( make_uniform_product_space( the_reals, 1 ) );
      ef_acos_r                   :         RETURN( make_uniform_product_space( the_neg1_one_interval, 1 ) );
      ef_asin_r                   :         RETURN( make_uniform_product_space( the_neg1_one_interval, 1 ) );
      ef_atan2_r                  :         RETURN( make_uniform_product_space( the_reals, 2 ) );
      ef_cos_r                    :         RETURN( make_uniform_product_space( the_reals, 1 ) );
      ef_exp_r                    :         RETURN( make_uniform_product_space( the_reals, 1 ) );
      ef_ln_r                     :         RETURN( make_uniform_product_space( the_nonnegative_reals, 1 ) );
      ef_log2_r                   :         RETURN( make_uniform_product_space( the_nonnegative_reals, 1 ) );
      ef_log10_r                  :         RETURN( make_uniform_product_space( the_nonnegative_reals, 1 ) );
      ef_sin_r                    :         RETURN( make_uniform_product_space( the_reals, 1 ) );
      ef_sqrt_r                   :         RETURN( make_uniform_product_space( the_nonnegative_reals, 1 ) );
      ef_tan_r                    :         RETURN( make_uniform_product_space( the_reals, 1 ) );
      ef_if_r                     :         RETURN( make_listed_product_space( [the_logicals, the_reals, 
            the_reals] ) );
      ef_negate_c                 :         RETURN( make_uniform_product_space( the_complex_numbers, 1 ) );
      ef_reciprocal_c             :         RETURN( make_uniform_product_space( the_complex_numbers, 1 ) );
      ef_add_c                    :         RETURN( the_complex_tuples );
      ef_subtract_c               :         RETURN( make_uniform_product_space( the_complex_numbers, 2 ) );
      ef_multiply_c               :         RETURN( the_complex_tuples );
      ef_divide_c                 :         RETURN( make_uniform_product_space( the_complex_numbers, 2 ) );
      ef_exponentiate_c           :         RETURN( make_uniform_product_space( the_complex_numbers, 2 ) );
      ef_exponentiate_ci          :         RETURN( make_listed_product_space( [the_complex_numbers, 
            the_integers] ) );
      ef_eq_c                     :         RETURN( make_uniform_product_space( the_complex_numbers, 2 ) );
      ef_ne_c                     :         RETURN( make_uniform_product_space( the_complex_numbers, 2 ) );
      ef_conjugate_c              :         RETURN( make_uniform_product_space( the_complex_numbers, 1 ) );
      ef_abs_c                    :         RETURN( make_uniform_product_space( the_complex_numbers, 1 ) );
      ef_arg_c                    :         RETURN( make_uniform_product_space( the_complex_numbers, 1 ) );
      ef_cos_c                    :         RETURN( make_uniform_product_space( the_complex_numbers, 1 ) );
      ef_exp_c                    :         RETURN( make_uniform_product_space( the_complex_numbers, 1 ) );
      ef_ln_c                     :         RETURN( make_uniform_product_space( the_complex_numbers, 1 ) );
      ef_sin_c                    :         RETURN( make_uniform_product_space( the_complex_numbers, 1 ) );
      ef_sqrt_c                   :         RETURN( make_uniform_product_space( the_complex_numbers, 1 ) );
      ef_tan_c                    :         RETURN( make_uniform_product_space( the_complex_numbers, 1 ) );
      ef_if_c                     :         RETURN( make_listed_product_space( [the_logicals, 
            the_complex_numbers, the_complex_numbers] ) );
      ef_subscript_s              :         RETURN( make_listed_product_space( [the_strings, the_integers] ) );
      ef_eq_s                     :         RETURN( make_uniform_product_space( the_strings, 2 ) );
      ef_ne_s                     :         RETURN( make_uniform_product_space( the_strings, 2 ) );
      ef_gt_s                     :         RETURN( make_uniform_product_space( the_strings, 2 ) );
      ef_lt_s                     :         RETURN( make_uniform_product_space( the_strings, 2 ) );
      ef_ge_s                     :         RETURN( make_uniform_product_space( the_strings, 2 ) );
      ef_le_s                     :         RETURN( make_uniform_product_space( the_strings, 2 ) );
      ef_subsequence_s            :         RETURN( make_listed_product_space( [the_strings, the_integers, 
            the_integers] ) );
      ef_concat_s                 :         RETURN( make_extended_tuple_space( the_zero_tuple_space, 
            the_strings ) );
      ef_size_s                   :         RETURN( make_uniform_product_space( the_strings, 1 ) );
      ef_format                   :         RETURN( make_listed_product_space( [the_numbers, the_strings] ) );
      ef_value                    :         RETURN( make_uniform_product_space( the_strings, 1 ) );
      ef_like                     :         RETURN( make_uniform_product_space( the_strings, 2 ) );
      ef_if_s                     :         RETURN( make_listed_product_space( [the_logicals, the_strings, 
            the_strings] ) );
      ef_subscript_b              :         RETURN( make_listed_product_space( [the_binarys, the_integers] ) );
      ef_eq_b                     :         RETURN( make_uniform_product_space( the_binarys, 2 ) );
      ef_ne_b                     :         RETURN( make_uniform_product_space( the_binarys, 2 ) );
      ef_gt_b                     :         RETURN( make_uniform_product_space( the_binarys, 2 ) );
      ef_lt_b                     :         RETURN( make_uniform_product_space( the_binarys, 2 ) );
      ef_ge_b                     :         RETURN( make_uniform_product_space( the_binarys, 2 ) );
      ef_le_b                     :         RETURN( make_uniform_product_space( the_binarys, 2 ) );
      ef_subsequence_b            :         RETURN( make_listed_product_space( [the_binarys, the_integers, 
            the_integers] ) );
      ef_concat_b                 :         RETURN( make_extended_tuple_space( the_zero_tuple_space, 
            the_binarys ) );
      ef_size_b                   :         RETURN( make_uniform_product_space( the_binarys, 1 ) );
      ef_if_b                     :         RETURN( make_listed_product_space( [the_logicals, the_binarys, 
            the_binarys] ) );
      ef_subscript_t              :         RETURN( make_listed_product_space( [the_tuples, the_integers] ) );
      ef_eq_t                     :         RETURN( make_uniform_product_space( the_tuples, 2 ) );
      ef_ne_t                     :         RETURN( make_uniform_product_space( the_tuples, 2 ) );
      ef_concat_t                 :         RETURN( make_extended_tuple_space( the_zero_tuple_space, 
            the_tuples ) );
      ef_size_t                   :         RETURN( make_uniform_product_space( the_tuples, 1 ) );
      ef_entuple                  :         RETURN( the_tuples );
      ef_detuple                  :         RETURN( make_uniform_product_space( the_generics, 1 ) );
      ef_insert                   :         RETURN( make_listed_product_space( [the_tuples, the_generics, 
            the_integers] ) );
      ef_remove                   :         RETURN( make_listed_product_space( [the_tuples, the_integers] ) );
      ef_if_t                     :         RETURN( make_listed_product_space( [the_logicals, the_tuples, 
            the_tuples] ) );
      ef_sum_it                   :         RETURN( make_uniform_product_space( the_integer_tuples, 1 ) );
      ef_product_it               :         RETURN( make_uniform_product_space( the_integer_tuples, 1 ) );
      ef_add_it                   :         RETURN( make_extended_tuple_space( the_integer_tuples, 
            the_integer_tuples ) );
      ef_subtract_it              :         RETURN( make_uniform_product_space( the_integer_tuples, 2 ) );
      ef_scalar_mult_it           :         RETURN( make_listed_product_space( [the_integers, 
            the_integer_tuples] ) );
      ef_dot_prod_it              :         RETURN( make_uniform_product_space( the_integer_tuples, 2 ) );
      ef_sum_rt                   :         RETURN( make_uniform_product_space( the_real_tuples, 1 ) );
      ef_product_rt               :         RETURN( make_uniform_product_space( the_real_tuples, 1 ) );
      ef_add_rt                   :         RETURN( make_extended_tuple_space( the_real_tuples, 
            the_real_tuples ) );
      ef_subtract_rt              :         RETURN( make_uniform_product_space( the_real_tuples, 2 ) );
      ef_scalar_mult_rt           :         RETURN( make_listed_product_space( [the_reals, the_real_tuples] ) );
      ef_dot_prod_rt              :         RETURN( make_uniform_product_space( the_real_tuples, 2 ) );
      ef_norm_rt                  :         RETURN( make_uniform_product_space( the_real_tuples, 1 ) );
      ef_sum_ct                   :         RETURN( make_uniform_product_space( the_complex_tuples, 1 ) );
      ef_product_ct               :         RETURN( make_uniform_product_space( the_complex_tuples, 1 ) );
      ef_add_ct                   :         RETURN( make_extended_tuple_space( the_complex_tuples, 
            the_complex_tuples ) );
      ef_subtract_ct              :         RETURN( make_uniform_product_space( the_complex_tuples, 2 ) );
      ef_scalar_mult_ct           :         RETURN( make_listed_product_space( [the_complex_numbers, 
            the_complex_tuples] ) );
      ef_dot_prod_ct              :         RETURN( make_uniform_product_space( the_complex_tuples, 2 ) );
      ef_norm_ct                  :         RETURN( make_uniform_product_space( the_complex_tuples, 1 ) );
      ef_if                       :         RETURN( make_listed_product_space( [the_logicals, the_generics, 
            the_generics] ) );
      ef_ensemble                 :         RETURN( the_tuples );
      ef_member_of                :         RETURN( make_listed_product_space( [the_generics, 
            the_maths_spaces] ) );
      OTHERWISE                   :         RETURN( ? );
    END_CASE;

  END_FUNCTION; -- derive_elementary_function_domain (line:37830 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func DERIVE_ELEMENTARY_FUNCTION_DOMAIN(
    _ EF_VAL: nELEMENTARY_FUNCTION_ENUMERATORS? ) 
    -> sTUPLE_SPACE? {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( EF_VAL )
    if case .available(let _cached_value) = _derive_elementary_function_domain__cache.cachedValue(params: _params) {
      return _cached_value as? sTUPLE_SPACE
    }

    var EF_VAL = EF_VAL; SDAI.TOUCH(var: &EF_VAL)

    
    let _TEMP1 = SDAI.EXISTS(EF_VAL)
    let _TEMP2 =  !_TEMP1
    if SDAI.IS_TRUE( _TEMP2 ) {
      return _derive_elementary_function_domain__cache.updateCache(params: _params, value: (nil as 
        sTUPLE_SPACE?))
    }
    if let selector = EF_VAL {
      switch selector {
      case EF_AND:
        
        let _TEMP3 = MAKE_EXTENDED_TUPLE_SPACE(
          BASE: sTUPLE_SPACE(/*eLISTED_PRODUCT_SPACE*/THE_ZERO_TUPLE_SPACE), 
          EXTENDER: eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_LOGICALS))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eEXTENDED_TUPLE_SPACE*/_TEMP3))

      case EF_OR:
        
        let _TEMP4 = MAKE_EXTENDED_TUPLE_SPACE(
          BASE: sTUPLE_SPACE(/*eLISTED_PRODUCT_SPACE*/THE_ZERO_TUPLE_SPACE), 
          EXTENDER: eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_LOGICALS))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eEXTENDED_TUPLE_SPACE*/_TEMP4))

      case EF_NOT:
        
        let _TEMP5 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_LOGICALS), 
          EXPONENT: tPOSITIVE_INTEGER(1))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP5))

      case EF_XOR:
        
        let _TEMP6 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_LOGICALS), 
          EXPONENT: tPOSITIVE_INTEGER(2))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP6))

      case EF_NEGATE_I:
        
        let _TEMP7 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_INTEGERS), 
          EXPONENT: tPOSITIVE_INTEGER(1))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP7))

      case EF_ADD_I:
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eEXTENDED_TUPLE_SPACE*/THE_INTEGER_TUPLES))

      case EF_SUBTRACT_I:
        
        let _TEMP8 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_INTEGERS), 
          EXPONENT: tPOSITIVE_INTEGER(2))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP8))

      case EF_MULTIPLY_I:
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eEXTENDED_TUPLE_SPACE*/THE_INTEGER_TUPLES))

      case EF_DIVIDE_I:
        
        let _TEMP9 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_INTEGERS), 
          EXPONENT: tPOSITIVE_INTEGER(2))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP9))

      case EF_MOD_I:
        
        let _TEMP10 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_INTEGERS), 
          EXPONENT: tPOSITIVE_INTEGER(2))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP10))

      case EF_EXPONENTIATE_I:
        
        let _TEMP11 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_INTEGERS), 
          EXPONENT: tPOSITIVE_INTEGER(2))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP11))

      case EF_EQ_I:
        
        let _TEMP12 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_INTEGERS), 
          EXPONENT: tPOSITIVE_INTEGER(2))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP12))

      case EF_NE_I:
        
        let _TEMP13 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_INTEGERS), 
          EXPONENT: tPOSITIVE_INTEGER(2))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP13))

      case EF_GT_I:
        
        let _TEMP14 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_INTEGERS), 
          EXPONENT: tPOSITIVE_INTEGER(2))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP14))

      case EF_LT_I:
        
        let _TEMP15 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_INTEGERS), 
          EXPONENT: tPOSITIVE_INTEGER(2))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP15))

      case EF_GE_I:
        
        let _TEMP16 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_INTEGERS), 
          EXPONENT: tPOSITIVE_INTEGER(2))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP16))

      case EF_LE_I:
        
        let _TEMP17 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_INTEGERS), 
          EXPONENT: tPOSITIVE_INTEGER(2))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP17))

      case EF_ABS_I:
        
        let _TEMP18 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_INTEGERS), 
          EXPONENT: tPOSITIVE_INTEGER(1))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP18))

      case EF_IF_I:
        
        let _TEMP19 = SDAI.LIST<eMATHS_SPACE>(([
          SDAI.AIE(eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_LOGICALS)), 
          SDAI.AIE(eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_INTEGERS)), 
          SDAI.AIE(eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_INTEGERS))] as [SDAI.AggregationInitializerElement<
          eMATHS_SPACE>]))
        let _TEMP20 = MAKE_LISTED_PRODUCT_SPACE(_TEMP19)
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eLISTED_PRODUCT_SPACE*/_TEMP20))

      case EF_NEGATE_R:
        
        let _TEMP21 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_REALS), 
          EXPONENT: tPOSITIVE_INTEGER(1))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP21))

      case EF_RECIPROCAL_R:
        
        let _TEMP22 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_REALS), 
          EXPONENT: tPOSITIVE_INTEGER(1))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP22))

      case EF_ADD_R:
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eEXTENDED_TUPLE_SPACE*/THE_REAL_TUPLES))

      case EF_SUBTRACT_R:
        
        let _TEMP23 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_REALS), 
          EXPONENT: tPOSITIVE_INTEGER(2))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP23))

      case EF_MULTIPLY_R:
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eEXTENDED_TUPLE_SPACE*/THE_REAL_TUPLES))

      case EF_DIVIDE_R:
        
        let _TEMP24 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_REALS), 
          EXPONENT: tPOSITIVE_INTEGER(2))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP24))

      case EF_MOD_R:
        
        let _TEMP25 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_REALS), 
          EXPONENT: tPOSITIVE_INTEGER(2))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP25))

      case EF_EXPONENTIATE_R:
        
        let _TEMP26 = SDAI.LIST<eMATHS_SPACE>(([
          SDAI.AIE(eMATHS_SPACE(/*eREAL_INTERVAL_FROM_MIN*/THE_NONNEGATIVE_REALS)), 
          SDAI.AIE(eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_REALS))] as [SDAI.AggregationInitializerElement<
          eMATHS_SPACE>]))
        let _TEMP27 = MAKE_LISTED_PRODUCT_SPACE(_TEMP26)
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eLISTED_PRODUCT_SPACE*/_TEMP27))

      case EF_EXPONENTIATE_RI:
        
        let _TEMP28 = SDAI.LIST<eMATHS_SPACE>(([
          SDAI.AIE(eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_REALS)), 
          SDAI.AIE(eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_INTEGERS))] as [SDAI.AggregationInitializerElement<
          eMATHS_SPACE>]))
        let _TEMP29 = MAKE_LISTED_PRODUCT_SPACE(_TEMP28)
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eLISTED_PRODUCT_SPACE*/_TEMP29))

      case EF_EQ_R:
        
        let _TEMP30 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_REALS), 
          EXPONENT: tPOSITIVE_INTEGER(2))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP30))

      case EF_NE_R:
        
        let _TEMP31 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_REALS), 
          EXPONENT: tPOSITIVE_INTEGER(2))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP31))

      case EF_GT_R:
        
        let _TEMP32 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_REALS), 
          EXPONENT: tPOSITIVE_INTEGER(2))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP32))

      case EF_LT_R:
        
        let _TEMP33 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_REALS), 
          EXPONENT: tPOSITIVE_INTEGER(2))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP33))

      case EF_GE_R:
        
        let _TEMP34 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_REALS), 
          EXPONENT: tPOSITIVE_INTEGER(2))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP34))

      case EF_LE_R:
        
        let _TEMP35 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_REALS), 
          EXPONENT: tPOSITIVE_INTEGER(2))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP35))

      case EF_ABS_R:
        
        let _TEMP36 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_REALS), 
          EXPONENT: tPOSITIVE_INTEGER(1))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP36))

      case EF_ACOS_R:
        
        let _TEMP37 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eFINITE_REAL_INTERVAL*/THE_NEG1_ONE_INTERVAL), 
          EXPONENT: tPOSITIVE_INTEGER(1))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP37))

      case EF_ASIN_R:
        
        let _TEMP38 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eFINITE_REAL_INTERVAL*/THE_NEG1_ONE_INTERVAL), 
          EXPONENT: tPOSITIVE_INTEGER(1))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP38))

      case EF_ATAN2_R:
        
        let _TEMP39 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_REALS), 
          EXPONENT: tPOSITIVE_INTEGER(2))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP39))

      case EF_COS_R:
        
        let _TEMP40 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_REALS), 
          EXPONENT: tPOSITIVE_INTEGER(1))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP40))

      case EF_EXP_R:
        
        let _TEMP41 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_REALS), 
          EXPONENT: tPOSITIVE_INTEGER(1))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP41))

      case EF_LN_R:
        
        let _TEMP42 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eREAL_INTERVAL_FROM_MIN*/THE_NONNEGATIVE_REALS), 
          EXPONENT: tPOSITIVE_INTEGER(1))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP42))

      case EF_LOG2_R:
        
        let _TEMP43 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eREAL_INTERVAL_FROM_MIN*/THE_NONNEGATIVE_REALS), 
          EXPONENT: tPOSITIVE_INTEGER(1))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP43))

      case EF_LOG10_R:
        
        let _TEMP44 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eREAL_INTERVAL_FROM_MIN*/THE_NONNEGATIVE_REALS), 
          EXPONENT: tPOSITIVE_INTEGER(1))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP44))

      case EF_SIN_R:
        
        let _TEMP45 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_REALS), 
          EXPONENT: tPOSITIVE_INTEGER(1))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP45))

      case EF_SQRT_R:
        
        let _TEMP46 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eREAL_INTERVAL_FROM_MIN*/THE_NONNEGATIVE_REALS), 
          EXPONENT: tPOSITIVE_INTEGER(1))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP46))

      case EF_TAN_R:
        
        let _TEMP47 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_REALS), 
          EXPONENT: tPOSITIVE_INTEGER(1))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP47))

      case EF_IF_R:
        
        let _TEMP48 = SDAI.LIST<eMATHS_SPACE>(([
          SDAI.AIE(eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_LOGICALS)), 
          SDAI.AIE(eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_REALS)), 
          SDAI.AIE(eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_REALS))] as [SDAI.AggregationInitializerElement<
          eMATHS_SPACE>]))
        let _TEMP49 = MAKE_LISTED_PRODUCT_SPACE(_TEMP48)
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eLISTED_PRODUCT_SPACE*/_TEMP49))

      case EF_NEGATE_C:
        
        let _TEMP50 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_COMPLEX_NUMBERS), 
          EXPONENT: tPOSITIVE_INTEGER(1))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP50))

      case EF_RECIPROCAL_C:
        
        let _TEMP51 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_COMPLEX_NUMBERS), 
          EXPONENT: tPOSITIVE_INTEGER(1))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP51))

      case EF_ADD_C:
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eEXTENDED_TUPLE_SPACE*/THE_COMPLEX_TUPLES))

      case EF_SUBTRACT_C:
        
        let _TEMP52 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_COMPLEX_NUMBERS), 
          EXPONENT: tPOSITIVE_INTEGER(2))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP52))

      case EF_MULTIPLY_C:
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eEXTENDED_TUPLE_SPACE*/THE_COMPLEX_TUPLES))

      case EF_DIVIDE_C:
        
        let _TEMP53 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_COMPLEX_NUMBERS), 
          EXPONENT: tPOSITIVE_INTEGER(2))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP53))

      case EF_EXPONENTIATE_C:
        
        let _TEMP54 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_COMPLEX_NUMBERS), 
          EXPONENT: tPOSITIVE_INTEGER(2))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP54))

      case EF_EXPONENTIATE_CI:
        
        let _TEMP55 = SDAI.LIST<eMATHS_SPACE>(([
          SDAI.AIE(eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_COMPLEX_NUMBERS)), 
          SDAI.AIE(eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_INTEGERS))] as [SDAI.AggregationInitializerElement<
          eMATHS_SPACE>]))
        let _TEMP56 = MAKE_LISTED_PRODUCT_SPACE(_TEMP55)
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eLISTED_PRODUCT_SPACE*/_TEMP56))

      case EF_EQ_C:
        
        let _TEMP57 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_COMPLEX_NUMBERS), 
          EXPONENT: tPOSITIVE_INTEGER(2))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP57))

      case EF_NE_C:
        
        let _TEMP58 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_COMPLEX_NUMBERS), 
          EXPONENT: tPOSITIVE_INTEGER(2))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP58))

      case EF_CONJUGATE_C:
        
        let _TEMP59 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_COMPLEX_NUMBERS), 
          EXPONENT: tPOSITIVE_INTEGER(1))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP59))

      case EF_ABS_C:
        
        let _TEMP60 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_COMPLEX_NUMBERS), 
          EXPONENT: tPOSITIVE_INTEGER(1))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP60))

      case EF_ARG_C:
        
        let _TEMP61 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_COMPLEX_NUMBERS), 
          EXPONENT: tPOSITIVE_INTEGER(1))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP61))

      case EF_COS_C:
        
        let _TEMP62 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_COMPLEX_NUMBERS), 
          EXPONENT: tPOSITIVE_INTEGER(1))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP62))

      case EF_EXP_C:
        
        let _TEMP63 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_COMPLEX_NUMBERS), 
          EXPONENT: tPOSITIVE_INTEGER(1))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP63))

      case EF_LN_C:
        
        let _TEMP64 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_COMPLEX_NUMBERS), 
          EXPONENT: tPOSITIVE_INTEGER(1))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP64))

      case EF_SIN_C:
        
        let _TEMP65 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_COMPLEX_NUMBERS), 
          EXPONENT: tPOSITIVE_INTEGER(1))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP65))

      case EF_SQRT_C:
        
        let _TEMP66 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_COMPLEX_NUMBERS), 
          EXPONENT: tPOSITIVE_INTEGER(1))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP66))

      case EF_TAN_C:
        
        let _TEMP67 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_COMPLEX_NUMBERS), 
          EXPONENT: tPOSITIVE_INTEGER(1))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP67))

      case EF_IF_C:
        
        let _TEMP68 = SDAI.LIST<eMATHS_SPACE>(([
          SDAI.AIE(eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_LOGICALS)), 
          SDAI.AIE(eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_COMPLEX_NUMBERS)), 
          SDAI.AIE(eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_COMPLEX_NUMBERS))] 
          as [SDAI.AggregationInitializerElement<eMATHS_SPACE>]))
        let _TEMP69 = MAKE_LISTED_PRODUCT_SPACE(_TEMP68)
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eLISTED_PRODUCT_SPACE*/_TEMP69))

      case EF_SUBSCRIPT_S:
        
        let _TEMP70 = SDAI.LIST<eMATHS_SPACE>(([
          SDAI.AIE(eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_STRINGS)), 
          SDAI.AIE(eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_INTEGERS))] as [SDAI.AggregationInitializerElement<
          eMATHS_SPACE>]))
        let _TEMP71 = MAKE_LISTED_PRODUCT_SPACE(_TEMP70)
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eLISTED_PRODUCT_SPACE*/_TEMP71))

      case EF_EQ_S:
        
        let _TEMP72 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_STRINGS), 
          EXPONENT: tPOSITIVE_INTEGER(2))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP72))

      case EF_NE_S:
        
        let _TEMP73 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_STRINGS), 
          EXPONENT: tPOSITIVE_INTEGER(2))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP73))

      case EF_GT_S:
        
        let _TEMP74 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_STRINGS), 
          EXPONENT: tPOSITIVE_INTEGER(2))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP74))

      case EF_LT_S:
        
        let _TEMP75 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_STRINGS), 
          EXPONENT: tPOSITIVE_INTEGER(2))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP75))

      case EF_GE_S:
        
        let _TEMP76 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_STRINGS), 
          EXPONENT: tPOSITIVE_INTEGER(2))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP76))

      case EF_LE_S:
        
        let _TEMP77 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_STRINGS), 
          EXPONENT: tPOSITIVE_INTEGER(2))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP77))

      case EF_SUBSEQUENCE_S:
        
        let _TEMP78 = SDAI.LIST<eMATHS_SPACE>(([
          SDAI.AIE(eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_STRINGS)), 
          SDAI.AIE(eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_INTEGERS)), 
          SDAI.AIE(eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_INTEGERS))] as [SDAI.AggregationInitializerElement<
          eMATHS_SPACE>]))
        let _TEMP79 = MAKE_LISTED_PRODUCT_SPACE(_TEMP78)
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eLISTED_PRODUCT_SPACE*/_TEMP79))

      case EF_CONCAT_S:
        
        let _TEMP80 = MAKE_EXTENDED_TUPLE_SPACE(
          BASE: sTUPLE_SPACE(/*eLISTED_PRODUCT_SPACE*/THE_ZERO_TUPLE_SPACE), 
          EXTENDER: eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_STRINGS))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eEXTENDED_TUPLE_SPACE*/_TEMP80))

      case EF_SIZE_S:
        
        let _TEMP81 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_STRINGS), 
          EXPONENT: tPOSITIVE_INTEGER(1))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP81))

      case EF_FORMAT:
        
        let _TEMP82 = SDAI.LIST<eMATHS_SPACE>(([
          SDAI.AIE(eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_NUMBERS)), 
          SDAI.AIE(eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_STRINGS))] as [SDAI.AggregationInitializerElement<
          eMATHS_SPACE>]))
        let _TEMP83 = MAKE_LISTED_PRODUCT_SPACE(_TEMP82)
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eLISTED_PRODUCT_SPACE*/_TEMP83))

      case EF_VALUE:
        
        let _TEMP84 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_STRINGS), 
          EXPONENT: tPOSITIVE_INTEGER(1))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP84))

      case EF_LIKE:
        
        let _TEMP85 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_STRINGS), 
          EXPONENT: tPOSITIVE_INTEGER(2))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP85))

      case EF_IF_S:
        
        let _TEMP86 = SDAI.LIST<eMATHS_SPACE>(([
          SDAI.AIE(eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_LOGICALS)), 
          SDAI.AIE(eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_STRINGS)), 
          SDAI.AIE(eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_STRINGS))] as [SDAI.AggregationInitializerElement<
          eMATHS_SPACE>]))
        let _TEMP87 = MAKE_LISTED_PRODUCT_SPACE(_TEMP86)
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eLISTED_PRODUCT_SPACE*/_TEMP87))

      case EF_SUBSCRIPT_B:
        
        let _TEMP88 = SDAI.LIST<eMATHS_SPACE>(([
          SDAI.AIE(eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_BINARYS)), 
          SDAI.AIE(eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_INTEGERS))] as [SDAI.AggregationInitializerElement<
          eMATHS_SPACE>]))
        let _TEMP89 = MAKE_LISTED_PRODUCT_SPACE(_TEMP88)
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eLISTED_PRODUCT_SPACE*/_TEMP89))

      case EF_EQ_B:
        
        let _TEMP90 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_BINARYS), 
          EXPONENT: tPOSITIVE_INTEGER(2))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP90))

      case EF_NE_B:
        
        let _TEMP91 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_BINARYS), 
          EXPONENT: tPOSITIVE_INTEGER(2))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP91))

      case EF_GT_B:
        
        let _TEMP92 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_BINARYS), 
          EXPONENT: tPOSITIVE_INTEGER(2))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP92))

      case EF_LT_B:
        
        let _TEMP93 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_BINARYS), 
          EXPONENT: tPOSITIVE_INTEGER(2))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP93))

      case EF_GE_B:
        
        let _TEMP94 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_BINARYS), 
          EXPONENT: tPOSITIVE_INTEGER(2))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP94))

      case EF_LE_B:
        
        let _TEMP95 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_BINARYS), 
          EXPONENT: tPOSITIVE_INTEGER(2))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP95))

      case EF_SUBSEQUENCE_B:
        
        let _TEMP96 = SDAI.LIST<eMATHS_SPACE>(([
          SDAI.AIE(eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_BINARYS)), 
          SDAI.AIE(eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_INTEGERS)), 
          SDAI.AIE(eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_INTEGERS))] as [SDAI.AggregationInitializerElement<
          eMATHS_SPACE>]))
        let _TEMP97 = MAKE_LISTED_PRODUCT_SPACE(_TEMP96)
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eLISTED_PRODUCT_SPACE*/_TEMP97))

      case EF_CONCAT_B:
        
        let _TEMP98 = MAKE_EXTENDED_TUPLE_SPACE(
          BASE: sTUPLE_SPACE(/*eLISTED_PRODUCT_SPACE*/THE_ZERO_TUPLE_SPACE), 
          EXTENDER: eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_BINARYS))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eEXTENDED_TUPLE_SPACE*/_TEMP98))

      case EF_SIZE_B:
        
        let _TEMP99 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_BINARYS), 
          EXPONENT: tPOSITIVE_INTEGER(1))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP99))

      case EF_IF_B:
        
        let _TEMP100 = SDAI.LIST<eMATHS_SPACE>(([
          SDAI.AIE(eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_LOGICALS)), 
          SDAI.AIE(eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_BINARYS)), 
          SDAI.AIE(eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_BINARYS))] as [SDAI.AggregationInitializerElement<
          eMATHS_SPACE>]))
        let _TEMP101 = MAKE_LISTED_PRODUCT_SPACE(_TEMP100)
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eLISTED_PRODUCT_SPACE*/_TEMP101))

      case EF_SUBSCRIPT_T:
        
        let _TEMP102 = SDAI.LIST<eMATHS_SPACE>(([
          SDAI.AIE(eMATHS_SPACE(/*eEXTENDED_TUPLE_SPACE*/THE_TUPLES)), 
          SDAI.AIE(eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_INTEGERS))] as [SDAI.AggregationInitializerElement<
          eMATHS_SPACE>]))
        let _TEMP103 = MAKE_LISTED_PRODUCT_SPACE(_TEMP102)
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eLISTED_PRODUCT_SPACE*/_TEMP103))

      case EF_EQ_T:
        
        let _TEMP104 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eEXTENDED_TUPLE_SPACE*/THE_TUPLES), 
          EXPONENT: tPOSITIVE_INTEGER(2))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP104))

      case EF_NE_T:
        
        let _TEMP105 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eEXTENDED_TUPLE_SPACE*/THE_TUPLES), 
          EXPONENT: tPOSITIVE_INTEGER(2))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP105))

      case EF_CONCAT_T:
        
        let _TEMP106 = MAKE_EXTENDED_TUPLE_SPACE(
          BASE: sTUPLE_SPACE(/*eLISTED_PRODUCT_SPACE*/THE_ZERO_TUPLE_SPACE), 
          EXTENDER: eMATHS_SPACE(/*eEXTENDED_TUPLE_SPACE*/THE_TUPLES))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eEXTENDED_TUPLE_SPACE*/_TEMP106))

      case EF_SIZE_T:
        
        let _TEMP107 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eEXTENDED_TUPLE_SPACE*/THE_TUPLES), 
          EXPONENT: tPOSITIVE_INTEGER(1))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP107))

      case EF_ENTUPLE:
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eEXTENDED_TUPLE_SPACE*/THE_TUPLES))

      case EF_DETUPLE:
        
        let _TEMP108 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_GENERICS), 
          EXPONENT: tPOSITIVE_INTEGER(1))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP108))

      case EF_INSERT:
        
        let _TEMP109 = SDAI.LIST<eMATHS_SPACE>(([
          SDAI.AIE(eMATHS_SPACE(/*eEXTENDED_TUPLE_SPACE*/THE_TUPLES)), 
          SDAI.AIE(eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_GENERICS)), 
          SDAI.AIE(eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_INTEGERS))] as [SDAI.AggregationInitializerElement<
          eMATHS_SPACE>]))
        let _TEMP110 = MAKE_LISTED_PRODUCT_SPACE(_TEMP109)
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eLISTED_PRODUCT_SPACE*/_TEMP110))

      case EF_REMOVE:
        
        let _TEMP111 = SDAI.LIST<eMATHS_SPACE>(([
          SDAI.AIE(eMATHS_SPACE(/*eEXTENDED_TUPLE_SPACE*/THE_TUPLES)), 
          SDAI.AIE(eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_INTEGERS))] as [SDAI.AggregationInitializerElement<
          eMATHS_SPACE>]))
        let _TEMP112 = MAKE_LISTED_PRODUCT_SPACE(_TEMP111)
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eLISTED_PRODUCT_SPACE*/_TEMP112))

      case EF_IF_T:
        
        let _TEMP113 = SDAI.LIST<eMATHS_SPACE>(([
          SDAI.AIE(eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_LOGICALS)), 
          SDAI.AIE(eMATHS_SPACE(/*eEXTENDED_TUPLE_SPACE*/THE_TUPLES)), 
          SDAI.AIE(eMATHS_SPACE(/*eEXTENDED_TUPLE_SPACE*/THE_TUPLES))] 
          as [SDAI.AggregationInitializerElement<eMATHS_SPACE>]))
        let _TEMP114 = MAKE_LISTED_PRODUCT_SPACE(_TEMP113)
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eLISTED_PRODUCT_SPACE*/_TEMP114))

      case EF_SUM_IT:
        
        let _TEMP115 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eEXTENDED_TUPLE_SPACE*/THE_INTEGER_TUPLES), 
          EXPONENT: tPOSITIVE_INTEGER(1))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP115))

      case EF_PRODUCT_IT:
        
        let _TEMP116 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eEXTENDED_TUPLE_SPACE*/THE_INTEGER_TUPLES), 
          EXPONENT: tPOSITIVE_INTEGER(1))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP116))

      case EF_ADD_IT:
        
        let _TEMP117 = MAKE_EXTENDED_TUPLE_SPACE(
          BASE: sTUPLE_SPACE(/*eEXTENDED_TUPLE_SPACE*/THE_INTEGER_TUPLES), 
          EXTENDER: eMATHS_SPACE(/*eEXTENDED_TUPLE_SPACE*/THE_INTEGER_TUPLES))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eEXTENDED_TUPLE_SPACE*/_TEMP117))

      case EF_SUBTRACT_IT:
        
        let _TEMP118 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eEXTENDED_TUPLE_SPACE*/THE_INTEGER_TUPLES), 
          EXPONENT: tPOSITIVE_INTEGER(2))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP118))

      case EF_SCALAR_MULT_IT:
        
        let _TEMP119 = SDAI.LIST<eMATHS_SPACE>(([
          SDAI.AIE(eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_INTEGERS)), 
          SDAI.AIE(eMATHS_SPACE(/*eEXTENDED_TUPLE_SPACE*/THE_INTEGER_TUPLES))] 
          as [SDAI.AggregationInitializerElement<eMATHS_SPACE>]))
        let _TEMP120 = MAKE_LISTED_PRODUCT_SPACE(_TEMP119)
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eLISTED_PRODUCT_SPACE*/_TEMP120))

      case EF_DOT_PROD_IT:
        
        let _TEMP121 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eEXTENDED_TUPLE_SPACE*/THE_INTEGER_TUPLES), 
          EXPONENT: tPOSITIVE_INTEGER(2))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP121))

      case EF_SUM_RT:
        
        let _TEMP122 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eEXTENDED_TUPLE_SPACE*/THE_REAL_TUPLES), 
          EXPONENT: tPOSITIVE_INTEGER(1))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP122))

      case EF_PRODUCT_RT:
        
        let _TEMP123 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eEXTENDED_TUPLE_SPACE*/THE_REAL_TUPLES), 
          EXPONENT: tPOSITIVE_INTEGER(1))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP123))

      case EF_ADD_RT:
        
        let _TEMP124 = MAKE_EXTENDED_TUPLE_SPACE(
          BASE: sTUPLE_SPACE(/*eEXTENDED_TUPLE_SPACE*/THE_REAL_TUPLES), 
          EXTENDER: eMATHS_SPACE(/*eEXTENDED_TUPLE_SPACE*/THE_REAL_TUPLES))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eEXTENDED_TUPLE_SPACE*/_TEMP124))

      case EF_SUBTRACT_RT:
        
        let _TEMP125 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eEXTENDED_TUPLE_SPACE*/THE_REAL_TUPLES), 
          EXPONENT: tPOSITIVE_INTEGER(2))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP125))

      case EF_SCALAR_MULT_RT:
        
        let _TEMP126 = SDAI.LIST<eMATHS_SPACE>(([
          SDAI.AIE(eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_REALS)), 
          SDAI.AIE(eMATHS_SPACE(/*eEXTENDED_TUPLE_SPACE*/THE_REAL_TUPLES))] 
          as [SDAI.AggregationInitializerElement<eMATHS_SPACE>]))
        let _TEMP127 = MAKE_LISTED_PRODUCT_SPACE(_TEMP126)
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eLISTED_PRODUCT_SPACE*/_TEMP127))

      case EF_DOT_PROD_RT:
        
        let _TEMP128 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eEXTENDED_TUPLE_SPACE*/THE_REAL_TUPLES), 
          EXPONENT: tPOSITIVE_INTEGER(2))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP128))

      case EF_NORM_RT:
        
        let _TEMP129 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eEXTENDED_TUPLE_SPACE*/THE_REAL_TUPLES), 
          EXPONENT: tPOSITIVE_INTEGER(1))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP129))

      case EF_SUM_CT:
        
        let _TEMP130 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eEXTENDED_TUPLE_SPACE*/THE_COMPLEX_TUPLES), 
          EXPONENT: tPOSITIVE_INTEGER(1))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP130))

      case EF_PRODUCT_CT:
        
        let _TEMP131 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eEXTENDED_TUPLE_SPACE*/THE_COMPLEX_TUPLES), 
          EXPONENT: tPOSITIVE_INTEGER(1))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP131))

      case EF_ADD_CT:
        
        let _TEMP132 = MAKE_EXTENDED_TUPLE_SPACE(
          BASE: sTUPLE_SPACE(/*eEXTENDED_TUPLE_SPACE*/THE_COMPLEX_TUPLES), 
          EXTENDER: eMATHS_SPACE(/*eEXTENDED_TUPLE_SPACE*/THE_COMPLEX_TUPLES))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eEXTENDED_TUPLE_SPACE*/_TEMP132))

      case EF_SUBTRACT_CT:
        
        let _TEMP133 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eEXTENDED_TUPLE_SPACE*/THE_COMPLEX_TUPLES), 
          EXPONENT: tPOSITIVE_INTEGER(2))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP133))

      case EF_SCALAR_MULT_CT:
        
        let _TEMP134 = SDAI.LIST<eMATHS_SPACE>(([
          SDAI.AIE(eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_COMPLEX_NUMBERS)), 
          SDAI.AIE(eMATHS_SPACE(/*eEXTENDED_TUPLE_SPACE*/THE_COMPLEX_TUPLES))] 
          as [SDAI.AggregationInitializerElement<eMATHS_SPACE>]))
        let _TEMP135 = MAKE_LISTED_PRODUCT_SPACE(_TEMP134)
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eLISTED_PRODUCT_SPACE*/_TEMP135))

      case EF_DOT_PROD_CT:
        
        let _TEMP136 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eEXTENDED_TUPLE_SPACE*/THE_COMPLEX_TUPLES), 
          EXPONENT: tPOSITIVE_INTEGER(2))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP136))

      case EF_NORM_CT:
        
        let _TEMP137 = MAKE_UNIFORM_PRODUCT_SPACE(
          BASE: eMATHS_SPACE(/*eEXTENDED_TUPLE_SPACE*/THE_COMPLEX_TUPLES), 
          EXPONENT: tPOSITIVE_INTEGER(1))
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eUNIFORM_PRODUCT_SPACE*/_TEMP137))

      case EF_IF:
        
        let _TEMP138 = SDAI.LIST<eMATHS_SPACE>(([
          SDAI.AIE(eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_LOGICALS)), 
          SDAI.AIE(eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_GENERICS)), 
          SDAI.AIE(eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_GENERICS))] as [SDAI.AggregationInitializerElement<
          eMATHS_SPACE>]))
        let _TEMP139 = MAKE_LISTED_PRODUCT_SPACE(_TEMP138)
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eLISTED_PRODUCT_SPACE*/_TEMP139))

      case EF_ENSEMBLE:
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eEXTENDED_TUPLE_SPACE*/THE_TUPLES))

      case EF_MEMBER_OF:
        
        let _TEMP140 = SDAI.LIST<eMATHS_SPACE>(([
          SDAI.AIE(eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_GENERICS)), 
          SDAI.AIE(eMATHS_SPACE(/*eELEMENTARY_SPACE*/THE_MATHS_SPACES))] 
          as [SDAI.AggregationInitializerElement<eMATHS_SPACE>]))
        let _TEMP141 = MAKE_LISTED_PRODUCT_SPACE(_TEMP140)
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: sTUPLE_SPACE(/*
          eLISTED_PRODUCT_SPACE*/_TEMP141))

      default:
        return _derive_elementary_function_domain__cache.updateCache(params: _params, value: (nil as 
          sTUPLE_SPACE?))
      } //end switch
    }
    else {
      return _derive_elementary_function_domain__cache.updateCache(params: _params, value: (nil as 
        sTUPLE_SPACE?))
    }
  }

}

//MARK: - function result cache
private var _derive_elementary_function_domain__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

