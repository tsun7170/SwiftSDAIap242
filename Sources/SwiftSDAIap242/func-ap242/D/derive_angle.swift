/* file: derive_angle.swift 	 generated: Sun Oct 31 15:32:10 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION derive_angle(
               placement_1, placement_2 : axis2_placement_3d
           ) : plane_angle_measure;

    LOCAL
      v1     : direction;
      v2     : direction;
      mag_v1 : REAL;
      mag_v2 : REAL;
      theta  : plane_angle_measure;
    END_LOCAL;
    v1 := placement_1.p[1];
    v2 := placement_2.p[1];
    mag_v1 := SQRT( ( v1.direction_ratios[1] * v1.direction_ratios[1] ) + ( v1.direction_ratios[2] * v1.
        direction_ratios[2] ) );
    mag_v2 := SQRT( ( v2.direction_ratios[1] * v2.direction_ratios[1] ) + ( v2.direction_ratios[2] * v2.
        direction_ratios[2] ) );
    IF ( mag_v1 = 0 ) OR ( mag_v2 = 0 ) THEN
      theta := 0;
      RETURN( theta );
    END_IF;
    theta := ACOS( ( ( v1.direction_ratios[1] * v2.direction_ratios[1] ) + ( v1.direction_ratios[2] * v2.
        direction_ratios[2] ) ) / ( mag_v1 * mag_v2 ) );
    RETURN( theta );

  END_FUNCTION; -- derive_angle (line:37677 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func DERIVE_ANGLE(PLACEMENT_1: eAXIS2_PLACEMENT_3D? , PLACEMENT_2: eAXIS2_PLACEMENT_3D? ) 
    -> tPLANE_ANGLE_MEASURE? {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( PLACEMENT_1, PLACEMENT_2 )
    if case .available(let _cached_value) = _derive_angle__cache.cachedValue(params: _params) {
      return _cached_value as? tPLANE_ANGLE_MEASURE
    }

    var PLACEMENT_1 = PLACEMENT_1; SDAI.TOUCH(var: &PLACEMENT_1)
    var PLACEMENT_2 = PLACEMENT_2; SDAI.TOUCH(var: &PLACEMENT_2)

    //LOCAL
    var V1: eDIRECTION? 
    var V2: eDIRECTION? 
    var MAG_V1: SDAI.REAL? 
    var MAG_V2: SDAI.REAL? 
    var THETA: tPLANE_ANGLE_MEASURE? 
    //END_LOCAL

    
    let _TEMP1 = PLACEMENT_1?.P
    let _TEMP2 = _TEMP1?[1]
    V1 = _TEMP2
    
    let _TEMP3 = PLACEMENT_2?.P
    let _TEMP4 = _TEMP3?[1]
    V2 = _TEMP4
    
    let _TEMP5 = V1?.DIRECTION_RATIOS
    let _TEMP6 = _TEMP5?[1]
    let _TEMP7 = V1?.DIRECTION_RATIOS
    let _TEMP8 = _TEMP7?[1]
    let _TEMP9 = _TEMP6 * _TEMP8
    let _TEMP10 = V1?.DIRECTION_RATIOS
    let _TEMP11 = _TEMP10?[2]
    let _TEMP12 = V1?.DIRECTION_RATIOS
    let _TEMP13 = _TEMP12?[2]
    let _TEMP14 = _TEMP11 * _TEMP13
    let _TEMP15 = _TEMP9 + _TEMP14
    let _TEMP16 = SDAI.SQRT(_TEMP15)
    MAG_V1 = _TEMP16
    
    let _TEMP17 = V2?.DIRECTION_RATIOS
    let _TEMP18 = _TEMP17?[1]
    let _TEMP19 = V2?.DIRECTION_RATIOS
    let _TEMP20 = _TEMP19?[1]
    let _TEMP21 = _TEMP18 * _TEMP20
    let _TEMP22 = V2?.DIRECTION_RATIOS
    let _TEMP23 = _TEMP22?[2]
    let _TEMP24 = V2?.DIRECTION_RATIOS
    let _TEMP25 = _TEMP24?[2]
    let _TEMP26 = _TEMP23 * _TEMP25
    let _TEMP27 = _TEMP21 + _TEMP26
    let _TEMP28 = SDAI.SQRT(_TEMP27)
    MAG_V2 = _TEMP28
    
    let _TEMP29 = MAG_V1 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
    let _TEMP30 = MAG_V2 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
    let _TEMP31 = _TEMP29 || _TEMP30
    if SDAI.IS_TRUE( _TEMP31 ) {
      THETA = tPLANE_ANGLE_MEASURE(0)
      return _derive_angle__cache.updateCache(params: _params, value: THETA)
    }
    
    let _TEMP32 = V1?.DIRECTION_RATIOS
    let _TEMP33 = _TEMP32?[1]
    let _TEMP34 = V2?.DIRECTION_RATIOS
    let _TEMP35 = _TEMP34?[1]
    let _TEMP36 = _TEMP33 * _TEMP35
    let _TEMP37 = V1?.DIRECTION_RATIOS
    let _TEMP38 = _TEMP37?[2]
    let _TEMP39 = V2?.DIRECTION_RATIOS
    let _TEMP40 = _TEMP39?[2]
    let _TEMP41 = _TEMP38 * _TEMP40
    let _TEMP42 = _TEMP36 + _TEMP41
    let _TEMP43 = MAG_V1 * MAG_V2
    let _TEMP44 = _TEMP42 / _TEMP43
    let _TEMP45 = SDAI.ACOS(_TEMP44)
    THETA = tPLANE_ANGLE_MEASURE(/*SDAI.REAL*/_TEMP45)
    return _derive_angle__cache.updateCache(params: _params, value: THETA)
  }

}

//MARK: - function result cache
private var _derive_angle__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

