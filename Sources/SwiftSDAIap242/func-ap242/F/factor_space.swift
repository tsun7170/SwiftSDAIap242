/* file: factor_space.swift 	 generated: Sun Oct 31 15:32:10 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION factor_space(
               tspace : tuple_space;
               idx : positive_integer
           ) : maths_space;

    LOCAL
      typenames : SET OF STRING := TYPEOF( tspace );
    END_LOCAL;
    IF ( schema_prefix + 'UNIFORM_PRODUCT_SPACE' ) IN typenames THEN
      IF idx <= tspace\uniform_product_space.exponent THEN
        RETURN( tspace\uniform_product_space.base );
      END_IF;
      RETURN( ? );
    END_IF;
    IF ( schema_prefix + 'LISTED_PRODUCT_SPACE' ) IN typenames THEN
      IF idx <= SIZEOF( tspace\listed_product_space.factors ) THEN
        RETURN( tspace\listed_product_space.factors[idx] );
      END_IF;
      RETURN( ? );
    END_IF;
    IF ( schema_prefix + 'EXTENDED_TUPLE_SPACE' ) IN typenames THEN
      IF idx <= space_dimension( tspace\extended_tuple_space.base ) THEN
        RETURN( factor_space( tspace\extended_tuple_space.base, idx ) );
      END_IF;
      RETURN( tspace\extended_tuple_space.extender );
    END_IF;
    RETURN( ? );

  END_FUNCTION; -- factor_space (line:40704 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func FACTOR_SPACE(TSPACE: sTUPLE_SPACE? , IDX: tPOSITIVE_INTEGER? ) 
    -> eMATHS_SPACE? {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( TSPACE, IDX )
    if case .available(let _cached_value) = _factor_space__cache.cachedValue(params: _params) {
      return _cached_value as? eMATHS_SPACE
    }

    var TSPACE = TSPACE; SDAI.TOUCH(var: &TSPACE)
    var IDX = IDX; SDAI.TOUCH(var: &IDX)

    //LOCAL
    var TYPENAMES: SDAI.SET<SDAI.STRING>?  = SDAI.TYPEOF(TSPACE); SDAI.TOUCH(var: &TYPENAMES)

    
    let _TEMP1 = SDAI.FORCE_OPTIONAL(SCHEMA_PREFIX) + SDAI.FORCE_OPTIONAL(SDAI.STRING("UNIFORM_PRODUCT_SPACE"))
    let _TEMP2 = SDAI.aggregate(TYPENAMES, contains: SDAI.STRING(/*SDAI.INTEGER*/_TEMP1))
    if SDAI.IS_TRUE( _TEMP2 ) {
      
      let _TEMP3 = TSPACE?.GROUP_REF(eUNIFORM_PRODUCT_SPACE.self)
      let _TEMP4 = _TEMP3?.EXPONENT
      let _TEMP5 = IDX <= _TEMP4
      if SDAI.IS_TRUE( _TEMP5 ) {
        
        let _TEMP6 = TSPACE?.GROUP_REF(eUNIFORM_PRODUCT_SPACE.self)
        let _TEMP7 = _TEMP6?.BASE
        return _factor_space__cache.updateCache(params: _params, value: _TEMP7)
      }
      return _factor_space__cache.updateCache(params: _params, value: (nil as eMATHS_SPACE?))
    }
    
    let _TEMP8 = SDAI.FORCE_OPTIONAL(SCHEMA_PREFIX) + SDAI.FORCE_OPTIONAL(SDAI.STRING("LISTED_PRODUCT_SPACE"))
    let _TEMP9 = SDAI.aggregate(TYPENAMES, contains: SDAI.STRING(/*SDAI.INTEGER*/_TEMP8))
    if SDAI.IS_TRUE( _TEMP9 ) {
      
      let _TEMP10 = TSPACE?.GROUP_REF(eLISTED_PRODUCT_SPACE.self)
      let _TEMP11 = _TEMP10?.FACTORS
      let _TEMP12 = SDAI.SIZEOF(_TEMP11)
      let _TEMP13 = IDX <= _TEMP12
      if SDAI.IS_TRUE( _TEMP13 ) {
        
        let _TEMP14 = TSPACE?.GROUP_REF(eLISTED_PRODUCT_SPACE.self)
        let _TEMP15 = _TEMP14?.FACTORS
        let _TEMP16 = _TEMP15?[IDX]
        return _factor_space__cache.updateCache(params: _params, value: _TEMP16)
      }
      return _factor_space__cache.updateCache(params: _params, value: (nil as eMATHS_SPACE?))
    }
    
    let _TEMP17 = SDAI.FORCE_OPTIONAL(SCHEMA_PREFIX) + SDAI.FORCE_OPTIONAL(SDAI.STRING("EXTENDED_TUPLE_SPACE"))
    let _TEMP18 = SDAI.aggregate(TYPENAMES, contains: SDAI.STRING(/*SDAI.INTEGER*/_TEMP17))
    if SDAI.IS_TRUE( _TEMP18 ) {
      
      let _TEMP19 = TSPACE?.GROUP_REF(eEXTENDED_TUPLE_SPACE.self)
      let _TEMP20 = _TEMP19?.BASE
      let _TEMP21 = SPACE_DIMENSION(_TEMP20)
      let _TEMP22 = IDX <= _TEMP21
      if SDAI.IS_TRUE( _TEMP22 ) {
        
        let _TEMP23 = TSPACE?.GROUP_REF(eEXTENDED_TUPLE_SPACE.self)
        let _TEMP24 = _TEMP23?.BASE
        let _TEMP25 = FACTOR_SPACE(TSPACE: _TEMP24, 
                                   IDX: IDX)
        return _factor_space__cache.updateCache(params: _params, value: _TEMP25)
      }
      
      let _TEMP26 = TSPACE?.GROUP_REF(eEXTENDED_TUPLE_SPACE.self)
      let _TEMP27 = _TEMP26?.EXTENDER
      return _factor_space__cache.updateCache(params: _params, value: _TEMP27)
    }
    return _factor_space__cache.updateCache(params: _params, value: (nil as eMATHS_SPACE?))
  }

}

//MARK: - function result cache
private var _factor_space__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

