/* file: function_applicability.swift 	 generated: Sat Aug 14 13:46:02 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION function_applicability(
               func : maths_function_select;
               arguments : LIST [1 : ?] OF maths_value
           ) : BOOLEAN;

    LOCAL
      domain       : tuple_space := convert_to_maths_function( func ).domain;
      domain_types : SET OF STRING := TYPEOF( domain );
      narg         : positive_integer := SIZEOF( arguments );
      arg          : generic_expression;
    END_LOCAL;
    IF ( schema_prefix + 'PRODUCT_SPACE' ) IN domain_types THEN
      IF space_dimension( domain ) <> narg THEN
        RETURN( FALSE );
      END_IF;
    ELSE
      IF ( schema_prefix + 'EXTENDED_TUPLE_SPACE' ) IN domain_types THEN
        IF space_dimension( domain ) > narg THEN
          RETURN( FALSE );
        END_IF;
      ELSE
        RETURN( FALSE );
      END_IF;
    END_IF;
    REPEAT i := 1 TO narg BY 1;
      arg := convert_to_operand( arguments[i] );
      IF NOT has_values_space( arg ) THEN
        RETURN( FALSE );
      END_IF;
      IF NOT compatible_spaces( factor_space( domain, i ), values_space_of( arg ) ) THEN
        RETURN( FALSE );
      END_IF;
    END_REPEAT;
    RETURN( TRUE );

  END_FUNCTION; -- function_applicability (line:41008 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func FUNCTION_APPLICABILITY(FUNC: sMATHS_FUNCTION_SELECT? , ARGUMENTS: (SDAI.LIST<sMATHS_VALUE>/*[1:nil]*/ )? ) 
    -> SDAI.BOOLEAN? {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( FUNC, ARGUMENTS )
    if case .available(let _cached_value) = _function_applicability__cache.cachedValue(params: _params) {
      return _cached_value as? SDAI.BOOLEAN
    }

    var FUNC = FUNC; SDAI.TOUCH(var: &FUNC)
    var ARGUMENTS = ARGUMENTS; SDAI.TOUCH(var: &ARGUMENTS)

    //LOCAL
    var DOMAIN: sTUPLE_SPACE?  = CONVERT_TO_MATHS_FUNCTION(FUNC)?.DOMAIN; SDAI.TOUCH(var: &DOMAIN)
    var DOMAIN_TYPES: SDAI.SET<SDAI.STRING>?  = SDAI.TYPEOF(DOMAIN); SDAI.TOUCH(var: &DOMAIN_TYPES)
    var NARG: tPOSITIVE_INTEGER?  = tPOSITIVE_INTEGER(/*SDAI.INTEGER*/SDAI.SIZEOF(
                                    ARGUMENTS)); SDAI.TOUCH(var: &NARG)
    var ARG: eGENERIC_EXPRESSION? 
    //END_LOCAL

    
    let _TEMP1 = SDAI.FORCE_OPTIONAL(SCHEMA_PREFIX) + SDAI.FORCE_OPTIONAL(SDAI.STRING("PRODUCT_SPACE"))
    let _TEMP2 = SDAI.aggregate(DOMAIN_TYPES, contains: SDAI.STRING(/*SDAI.INTEGER*/_TEMP1))
    if SDAI.IS_TRUE( _TEMP2 ) {
      
      let _TEMP3 = SPACE_DIMENSION(DOMAIN)
      let _TEMP4 = _TEMP3 .!=. NARG
      if SDAI.IS_TRUE( _TEMP4 ) {
        return _function_applicability__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
      }
    }
    else {
      
      let _TEMP5 = SDAI.FORCE_OPTIONAL(SCHEMA_PREFIX) + SDAI.FORCE_OPTIONAL(SDAI.STRING("EXTENDED_TUPLE_SPACE"))
      let _TEMP6 = SDAI.aggregate(DOMAIN_TYPES, contains: SDAI.STRING(/*SDAI.INTEGER*/_TEMP5))
      if SDAI.IS_TRUE( _TEMP6 ) {
        
        let _TEMP7 = SPACE_DIMENSION(DOMAIN)
        let _TEMP8 = _TEMP7 > NARG
        if SDAI.IS_TRUE( _TEMP8 ) {
          return _function_applicability__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
        }
      }
      else {
        return _function_applicability__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
      }
    }
    if let incrementControl/*SDAI.INTEGER*/ = SDAI.FROM(/*SDAI.INTEGER*/1, TO:/*tPOSITIVE_INTEGER*/NARG) {
      for I in incrementControl {
        
        let _TEMP9 = ARGUMENTS?[I]
        let _TEMP10 = CONVERT_TO_OPERAND(_TEMP9)
        ARG = _TEMP10
        
        let _TEMP11 = HAS_VALUES_SPACE(ARG)
        let _TEMP12 =  !_TEMP11
        if SDAI.IS_TRUE( _TEMP12 ) {
          return _function_applicability__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
        }
        
        let _TEMP13 = FACTOR_SPACE(TSPACE: DOMAIN, 
                                   IDX: tPOSITIVE_INTEGER(/*SDAI.INTEGER*/I))
        let _TEMP14 = VALUES_SPACE_OF(ARG)
        let _TEMP15 = COMPATIBLE_SPACES(
          SP1: _TEMP13, SP2: _TEMP14)
        let _TEMP16 =  !_TEMP15
        if SDAI.IS_TRUE( _TEMP16 ) {
          return _function_applicability__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
        }
      }
    }
    return _function_applicability__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.TRUE))
  }

}

//MARK: - function result cache
private var _function_applicability__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

