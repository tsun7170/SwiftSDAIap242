/* file: function_is_2d_table.swift 	 generated: Mon Jan  3 16:32:52 2022 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.1, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION function_is_2d_table(
               func : maths_function
           ) : BOOLEAN;

    LOCAL
      temp   : maths_space;
      pspace : product_space;
      itvl1  : finite_integer_interval;
      itvl2  : finite_integer_interval;
    END_LOCAL;
    IF NOT EXISTS( func ) THEN
      RETURN( FALSE );
    END_IF;
    IF space_dimension( func.domain ) <> 1 THEN
      RETURN( FALSE );
    END_IF;
    temp := factor1( func.domain );
    IF NOT ( 'PRODUCT_SPACE' IN stripped_typeof( temp ) ) THEN
      RETURN( FALSE );
    END_IF;
    pspace := temp;
    IF space_dimension( pspace ) <> 2 THEN
      RETURN( FALSE );
    END_IF;
    temp := factor1( pspace );
    IF NOT ( 'FINITE_INTEGER_INTERVAL' IN stripped_typeof( temp ) ) THEN
      RETURN( FALSE );
    END_IF;
    itvl1 := temp;
    temp := factor_space( pspace, 2 );
    IF NOT ( 'FINITE_INTEGER_INTERVAL' IN stripped_typeof( temp ) ) THEN
      RETURN( FALSE );
    END_IF;
    itvl2 := temp;
    RETURN( bool( ( itvl1.min = itvl2.min ) AND ( ( itvl1.min = 0 ) OR ( itvl1.min = 1 ) ) ) );

  END_FUNCTION; -- function_is_2d_table (line:41120 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func FUNCTION_IS_2D_TABLE(_ FUNC: eMATHS_FUNCTION? ) 
    -> SDAI.BOOLEAN? {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( FUNC )
    if case .available(let _cached_value) = _function_is_2d_table__cache.cachedValue(params: _params) {
      return _cached_value as? SDAI.BOOLEAN
    }

    var FUNC = FUNC; SDAI.TOUCH(var: &FUNC)

    //LOCAL
    var TEMP: eMATHS_SPACE? 
    var PSPACE: sPRODUCT_SPACE? 
    var ITVL1: eFINITE_INTEGER_INTERVAL? 
    var ITVL2: eFINITE_INTEGER_INTERVAL? 
    //END_LOCAL

    
    let _TEMP1 = SDAI.EXISTS(FUNC)
    let _TEMP2 =  !_TEMP1
    if SDAI.IS_TRUE( _TEMP2 ) {
      return _function_is_2d_table__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
    }
    
    let _TEMP3 = FUNC?.DOMAIN
    let _TEMP4 = SPACE_DIMENSION(_TEMP3)
    let _TEMP5 = _TEMP4 .!=. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
    if SDAI.IS_TRUE( _TEMP5 ) {
      return _function_is_2d_table__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
    }
    
    let _TEMP6 = FUNC?.DOMAIN
    let _TEMP7 = FACTOR1(_TEMP6)
    TEMP = _TEMP7
    
    let _TEMP8 = STRIPPED_TYPEOF(TEMP)
    let _TEMP9 = SDAI.aggregate(_TEMP8, contains: SDAI.STRING("PRODUCT_SPACE"))
    let _TEMP10 =  !_TEMP9
    if SDAI.IS_TRUE( _TEMP10 ) {
      return _function_is_2d_table__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
    }
    PSPACE = sPRODUCT_SPACE(/*eMATHS_SPACE*/TEMP)
    
    let _TEMP11 = SPACE_DIMENSION(sTUPLE_SPACE(/*sPRODUCT_SPACE*/PSPACE))
    let _TEMP12 = _TEMP11 .!=. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(2))
    if SDAI.IS_TRUE( _TEMP12 ) {
      return _function_is_2d_table__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
    }
    
    let _TEMP13 = FACTOR1(sTUPLE_SPACE(/*sPRODUCT_SPACE*/PSPACE))
    TEMP = _TEMP13
    
    let _TEMP14 = STRIPPED_TYPEOF(TEMP)
    let _TEMP15 = SDAI.aggregate(_TEMP14, contains: SDAI.STRING("FINITE_INTEGER_INTERVAL"))
    let _TEMP16 =  !_TEMP15
    if SDAI.IS_TRUE( _TEMP16 ) {
      return _function_is_2d_table__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
    }
    ITVL1 = eFINITE_INTEGER_INTERVAL(/*eMATHS_SPACE*/TEMP)
    
    let _TEMP17 = FACTOR_SPACE(TSPACE: sTUPLE_SPACE(/*sPRODUCT_SPACE*/PSPACE), 
                               IDX: tPOSITIVE_INTEGER(2))
    TEMP = _TEMP17
    
    let _TEMP18 = STRIPPED_TYPEOF(TEMP)
    let _TEMP19 = SDAI.aggregate(_TEMP18, contains: SDAI.STRING("FINITE_INTEGER_INTERVAL"))
    let _TEMP20 =  !_TEMP19
    if SDAI.IS_TRUE( _TEMP20 ) {
      return _function_is_2d_table__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
    }
    ITVL2 = eFINITE_INTEGER_INTERVAL(/*eMATHS_SPACE*/TEMP)
    
    let _TEMP21 = ITVL1?.MIN
    let _TEMP22 = ITVL2?.MIN
    let _TEMP23 = _TEMP21 .==. _TEMP22
    let _TEMP24 = ITVL1?.MIN
    let _TEMP25 = _TEMP24 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
    let _TEMP26 = ITVL1?.MIN
    let _TEMP27 = _TEMP26 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
    let _TEMP28 = _TEMP25 || _TEMP27
    let _TEMP29 = _TEMP23 && _TEMP28
    let _TEMP30 = BOOL(SDAI.LOGICAL(_TEMP29))
    return _function_is_2d_table__cache.updateCache(params: _params, value: _TEMP30)
  }

}

//MARK: - function result cache
private var _function_is_2d_table__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

