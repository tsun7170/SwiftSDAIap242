/* file: function_is_array.swift 	 generated: Tue Nov 16 05:35:44 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION function_is_array(
               func : maths_function
           ) : BOOLEAN;

    LOCAL
      tspace : tuple_space;
      temp   : maths_space;
    END_LOCAL;
    IF NOT EXISTS( func ) THEN
      RETURN( FALSE );
    END_IF;
    tspace := func.domain;
    IF ( space_dimension( tspace ) = 1 ) AND ( ( schema_prefix + 'TUPLE_SPACE' ) IN TYPEOF( factor1( tspace ) ) )
        THEN
      tspace := factor1( tspace );
    END_IF;
    IF NOT ( ( schema_prefix + 'PRODUCT_SPACE' ) IN TYPEOF( tspace ) ) THEN
      RETURN( FALSE );
    END_IF;
    REPEAT i := 1 TO space_dimension( tspace ) BY 1;
      temp := factor_space( tspace, i );
      IF NOT ( ( schema_prefix + 'FINITE_INTEGER_INTERVAL' ) IN TYPEOF( temp ) ) THEN
        RETURN( FALSE );
      END_IF;
    END_REPEAT;
    RETURN( TRUE );

  END_FUNCTION; -- function_is_array (line:41159 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func FUNCTION_IS_ARRAY(_ FUNC: eMATHS_FUNCTION? ) 
    -> SDAI.BOOLEAN? {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( FUNC )
    if case .available(let _cached_value) = _function_is_array__cache.cachedValue(params: _params) {
      return _cached_value as? SDAI.BOOLEAN
    }

    var FUNC = FUNC; SDAI.TOUCH(var: &FUNC)

    //LOCAL
    var TSPACE: sTUPLE_SPACE? 
    var TEMP: eMATHS_SPACE? 
    //END_LOCAL

    
    let _TEMP1 = SDAI.EXISTS(FUNC)
    let _TEMP2 =  !_TEMP1
    if SDAI.IS_TRUE( _TEMP2 ) {
      return _function_is_array__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
    }
    
    let _TEMP3 = FUNC?.DOMAIN
    TSPACE = _TEMP3
    
    let _TEMP4 = SPACE_DIMENSION(TSPACE)
    let _TEMP5 = _TEMP4 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
    let _TEMP6 = SDAI.FORCE_OPTIONAL(SCHEMA_PREFIX) + SDAI.FORCE_OPTIONAL(SDAI.STRING("TUPLE_SPACE"))
    let _TEMP7 = FACTOR1(TSPACE)
    let _TEMP8 = SDAI.TYPEOF(_TEMP7)
    let _TEMP9 = SDAI.aggregate(_TEMP8, contains: SDAI.STRING(/*SDAI.INTEGER*/_TEMP6))
    let _TEMP10 = _TEMP5 && _TEMP9
    if SDAI.IS_TRUE( _TEMP10 ) {
      
      let _TEMP11 = FACTOR1(TSPACE)
      TSPACE = sTUPLE_SPACE(/*eMATHS_SPACE*/_TEMP11)
    }
    
    let _TEMP12 = SDAI.FORCE_OPTIONAL(SCHEMA_PREFIX) + SDAI.FORCE_OPTIONAL(SDAI.STRING("PRODUCT_SPACE"))
    let _TEMP13 = SDAI.TYPEOF(TSPACE)
    let _TEMP14 = SDAI.aggregate(_TEMP13, contains: SDAI.STRING(/*SDAI.INTEGER*/_TEMP12))
    let _TEMP15 =  !_TEMP14
    if SDAI.IS_TRUE( _TEMP15 ) {
      return _function_is_array__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
    }
    if let incrementControl/*SDAI.INTEGER*/ = SDAI.FROM(/*SDAI.INTEGER*/1, TO:/*tNONNEGATIVE_INTEGER*/
      SPACE_DIMENSION(TSPACE)) {
      for I in incrementControl {
        
        let _TEMP16 = FACTOR_SPACE(TSPACE: TSPACE, 
                                   IDX: tPOSITIVE_INTEGER(/*SDAI.INTEGER*/I))
        TEMP = _TEMP16
        
        let _TEMP17 = SDAI.FORCE_OPTIONAL(SCHEMA_PREFIX) + SDAI.FORCE_OPTIONAL(SDAI.STRING(
          "FINITE_INTEGER_INTERVAL"))
        let _TEMP18 = SDAI.TYPEOF(TEMP)
        let _TEMP19 = SDAI.aggregate(_TEMP18, contains: SDAI.STRING(/*SDAI.INTEGER*/_TEMP17))
        let _TEMP20 =  !_TEMP19
        if SDAI.IS_TRUE( _TEMP20 ) {
          return _function_is_array__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
        }
      }
    }
    return _function_is_array__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.TRUE))
  }

}

//MARK: - function result cache
private var _function_is_array__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

