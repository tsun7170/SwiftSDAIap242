/* file: face_bound_reversed.swift 	 generated: Mon Jan  3 16:32:52 2022 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.1, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION face_bound_reversed(
               a_face_bound : face_bound
           ) : face_bound;

    LOCAL
      the_reverse : face_bound;
    END_LOCAL;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.FACE_OUTER_BOUND' IN TYPEOF( a_face_bound ) THEN
      the_reverse := dummy_tri || face_bound( a_face_bound\face_bound.bound, NOT a_face_bound\face_bound.
          orientation ) || face_outer_bound(  );
    ELSE
      the_reverse := dummy_tri || face_bound( a_face_bound.bound, NOT a_face_bound.orientation );
    END_IF;
    RETURN( the_reverse );

  END_FUNCTION; -- face_bound_reversed (line:40691 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func FACE_BOUND_REVERSED(_ A_FACE_BOUND: eFACE_BOUND? ) 
    -> eFACE_BOUND? {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( A_FACE_BOUND )
    if case .available(let _cached_value) = _face_bound_reversed__cache.cachedValue(params: _params) {
      return _cached_value as? eFACE_BOUND
    }

    var A_FACE_BOUND = A_FACE_BOUND; SDAI.TOUCH(var: &A_FACE_BOUND)

    //LOCAL
    var THE_REVERSE: eFACE_BOUND? 

    
    let _TEMP1 = SDAI.TYPEOF(A_FACE_BOUND, IS: eFACE_OUTER_BOUND.self)
    if SDAI.IS_TRUE( _TEMP1 ) {
      
      let _TEMP2 = A_FACE_BOUND?.GROUP_REF(eFACE_BOUND.self)
      let _TEMP3 = _TEMP2?.BOUND
      let _TEMP4 = A_FACE_BOUND?.GROUP_REF(eFACE_BOUND.self)
      let _TEMP5 = _TEMP4?.ORIENTATION
      let _TEMP6 =  !_TEMP5
      let _TEMP7 = _face_bound(BOUND: SDAI.UNWRAP(_TEMP3), 
                               ORIENTATION: SDAI.UNWRAP(SDAI.BOOLEAN(/*SDAI.LOGICAL*/_TEMP6)))
      let _TEMP8 = DUMMY_TRI .||. _TEMP7
      let _TEMP9 = _face_outer_bound()
      let _TEMP10 = _TEMP8 .||. _TEMP9
      THE_REVERSE = eFACE_BOUND(/*SDAI.GENERIC_ENTITY*/_TEMP10)
    }
    else {
      
      let _TEMP11 = A_FACE_BOUND?.BOUND
      let _TEMP12 = A_FACE_BOUND?.ORIENTATION
      let _TEMP13 =  !_TEMP12
      let _TEMP14 = _face_bound(BOUND: SDAI.UNWRAP(_TEMP11), 
                                ORIENTATION: SDAI.UNWRAP(SDAI.BOOLEAN(/*SDAI.LOGICAL*/_TEMP13)))
      let _TEMP15 = DUMMY_TRI .||. _TEMP14
      THE_REVERSE = eFACE_BOUND(/*SDAI.GENERIC_ENTITY*/_TEMP15)
    }
    return _face_bound_reversed__cache.updateCache(params: _params, value: THE_REVERSE)
  }

}

//MARK: - function result cache
private var _face_bound_reversed__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

