/* file: factor1.swift 	 generated: Sun Oct 31 15:32:10 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION factor1(
               tspace : tuple_space
           ) : maths_space;

    LOCAL
      typenames : SET OF STRING := TYPEOF( tspace );
    END_LOCAL;
    IF ( schema_prefix + 'UNIFORM_PRODUCT_SPACE' ) IN typenames THEN
      RETURN( tspace\uniform_product_space.base );
    END_IF;
    IF ( schema_prefix + 'LISTED_PRODUCT_SPACE' ) IN typenames THEN
      RETURN( tspace\listed_product_space.factors[1] );
    END_IF;
    IF ( schema_prefix + 'EXTENDED_TUPLE_SPACE' ) IN typenames THEN
      RETURN( factor1( tspace\extended_tuple_space.base ) );
    END_IF;
    RETURN( ? );

  END_FUNCTION; -- factor1 (line:40736 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func FACTOR1(_ TSPACE: sTUPLE_SPACE? ) 
    -> eMATHS_SPACE? {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( TSPACE )
    if case .available(let _cached_value) = _factor1__cache.cachedValue(params: _params) {
      return _cached_value as? eMATHS_SPACE
    }

    var TSPACE = TSPACE; SDAI.TOUCH(var: &TSPACE)

    //LOCAL
    var TYPENAMES: SDAI.SET<SDAI.STRING>?  = SDAI.TYPEOF(TSPACE); SDAI.TOUCH(var: &TYPENAMES)

    
    let _TEMP1 = SDAI.FORCE_OPTIONAL(SCHEMA_PREFIX) + SDAI.FORCE_OPTIONAL(SDAI.STRING("UNIFORM_PRODUCT_SPACE"))
    let _TEMP2 = SDAI.aggregate(TYPENAMES, contains: SDAI.STRING(/*SDAI.INTEGER*/_TEMP1))
    if SDAI.IS_TRUE( _TEMP2 ) {
      
      let _TEMP3 = TSPACE?.GROUP_REF(eUNIFORM_PRODUCT_SPACE.self)
      let _TEMP4 = _TEMP3?.BASE
      return _factor1__cache.updateCache(params: _params, value: _TEMP4)
    }
    
    let _TEMP5 = SDAI.FORCE_OPTIONAL(SCHEMA_PREFIX) + SDAI.FORCE_OPTIONAL(SDAI.STRING("LISTED_PRODUCT_SPACE"))
    let _TEMP6 = SDAI.aggregate(TYPENAMES, contains: SDAI.STRING(/*SDAI.INTEGER*/_TEMP5))
    if SDAI.IS_TRUE( _TEMP6 ) {
      
      let _TEMP7 = TSPACE?.GROUP_REF(eLISTED_PRODUCT_SPACE.self)
      let _TEMP8 = _TEMP7?.FACTORS
      let _TEMP9 = _TEMP8?[1]
      return _factor1__cache.updateCache(params: _params, value: _TEMP9)
    }
    
    let _TEMP10 = SDAI.FORCE_OPTIONAL(SCHEMA_PREFIX) + SDAI.FORCE_OPTIONAL(SDAI.STRING("EXTENDED_TUPLE_SPACE"))
    let _TEMP11 = SDAI.aggregate(TYPENAMES, contains: SDAI.STRING(/*SDAI.INTEGER*/_TEMP10))
    if SDAI.IS_TRUE( _TEMP11 ) {
      
      let _TEMP12 = TSPACE?.GROUP_REF(eEXTENDED_TUPLE_SPACE.self)
      let _TEMP13 = _TEMP12?.BASE
      let _TEMP14 = FACTOR1(_TEMP13)
      return _factor1__cache.updateCache(params: _params, value: _TEMP14)
    }
    return _factor1__cache.updateCache(params: _params, value: (nil as eMATHS_SPACE?))
  }

}

//MARK: - function result cache
private var _factor1__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

