/* file: find_assembly_root.swift 	 generated: Mon Jan  3 16:32:52 2022 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.1, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION find_assembly_root(
               constituent : SET OF product_definition
           ) : SET OF product_definition;

    LOCAL
      local_relation  : SET OF assembly_component_usage := [];
      local_relation2 : BAG OF assembly_component_usage := [];
      local_parent    : SET OF product_definition := [];
      root            : SET OF product_definition;
      i               : INTEGER := 0;
      j               : INTEGER := 0;
      pd              : product_definition;
    END_LOCAL;
    IF ( SIZEOF( constituent ) = 1 ) AND assembly_root( constituent[1] ) THEN
      RETURN( [constituent[1]] );
    ELSE
      IF SIZEOF( constituent ) = 0 THEN
        RETURN( [] );
      ELSE
        REPEAT j := 1 TO HIINDEX( constituent ) BY 1;
          local_relation2 := local_relation2 + QUERY ( pdr <* USEDIN( constituent[j], 
              'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PRODUCT_DEFINITION_RELATIONSHIP.'
              + 'RELATED_PRODUCT_DEFINITION'  ) | ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
              + 'ASSEMBLY_COMPONENT_USAGE'  IN TYPEOF( pdr ) ) );
        END_REPEAT;
        local_relation := bag_to_set( local_relation2 );
        IF SIZEOF( local_relation ) = 0 THEN
          IF SIZEOF( constituent ) = 1 THEN
            RETURN( [constituent[1]] );
          ELSE
            RETURN( [] );
          END_IF;
        ELSE
          REPEAT i := 1 TO HIINDEX( local_relation ) BY 1;
            REPEAT j := 1 TO HIINDEX( constituent ) BY 1;
              IF local_relation[i].relating_product_definition <> constituent[j] THEN
                pd := local_relation[i].relating_product_definition;
                local_parent := local_parent + pd;
              END_IF;
            END_REPEAT;
          END_REPEAT;
          IF ( SIZEOF( local_parent ) = 1 ) AND assembly_root( local_parent[1] ) THEN
            RETURN( [local_parent[1]] );
          ELSE
            IF SIZEOF( local_parent ) = 0 THEN
              RETURN( [] );
            ELSE
              root := find_assembly_root( local_parent );
              IF SIZEOF( root ) = 1 THEN
                RETURN( root );
              ELSE
                IF SIZEOF( root ) = 0 THEN
                  RETURN( [] );
                END_IF;
              END_IF;
            END_IF;
          END_IF;
        END_IF;
      END_IF;
    END_IF;
    RETURN( [] );

  END_FUNCTION; -- find_assembly_root (line:40770 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func FIND_ASSEMBLY_ROOT(_ CONSTITUENT: SDAI.SET<ePRODUCT_DEFINITION>? ) 
    -> SDAI.SET<ePRODUCT_DEFINITION>? {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( CONSTITUENT )
    if case .available(let _cached_value) = _find_assembly_root__cache.cachedValue(params: _params) {
      return _cached_value as? SDAI.SET<ePRODUCT_DEFINITION>
    }

    var CONSTITUENT = CONSTITUENT; SDAI.TOUCH(var: &CONSTITUENT)

    //LOCAL
    var LOCAL_RELATION: SDAI.SET<eASSEMBLY_COMPONENT_USAGE>?  = SDAI.SET<eASSEMBLY_COMPONENT_USAGE>(
                                                                SDAI.EMPLY_AGGREGATE); SDAI.TOUCH(var: &LOCAL_RELATION)
    var LOCAL_RELATION2: SDAI.BAG<eASSEMBLY_COMPONENT_USAGE>?  = SDAI.BAG<eASSEMBLY_COMPONENT_USAGE>(
                                                                 SDAI.EMPLY_AGGREGATE); SDAI.TOUCH(var: &LOCAL_RELATION2)
    var LOCAL_PARENT: SDAI.SET<ePRODUCT_DEFINITION>?  = SDAI.SET<ePRODUCT_DEFINITION>(SDAI.EMPLY_AGGREGATE); SDAI.TOUCH(var: &LOCAL_PARENT)
    var ROOT: SDAI.SET<ePRODUCT_DEFINITION>? 
    var I: SDAI.INTEGER?  = SDAI.INTEGER(0); SDAI.TOUCH(var: &I)
    var J: SDAI.INTEGER?  = SDAI.INTEGER(0); SDAI.TOUCH(var: &J)
    var PD: ePRODUCT_DEFINITION? 
    //END_LOCAL

    
    let _TEMP1 = SDAI.SIZEOF(CONSTITUENT)
    let _TEMP2 = _TEMP1 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
    let _TEMP3 = CONSTITUENT?[1]
    let _TEMP4 = ASSEMBLY_ROOT(_TEMP3)
    let _TEMP5 = _TEMP2 && _TEMP4
    if SDAI.IS_TRUE( _TEMP5 ) {
      
      let _TEMP6 = CONSTITUENT?[1]
      let _TEMP7 = SDAI.SET<ePRODUCT_DEFINITION>(([
        SDAI.AIE(_TEMP6)] as [SDAI.AggregationInitializerElement<ePRODUCT_DEFINITION>]))
      return _find_assembly_root__cache.updateCache(params: _params, value: _TEMP7)
    }
    else {
      
      let _TEMP8 = SDAI.SIZEOF(CONSTITUENT)
      let _TEMP9 = _TEMP8 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      if SDAI.IS_TRUE( _TEMP9 ) {
        
        let _TEMP10 = SDAI.SET<ePRODUCT_DEFINITION>(SDAI.EMPLY_AGGREGATE)
        return _find_assembly_root__cache.updateCache(params: _params, value: _TEMP10)
      }
      else {
        if let incrementControl/*SDAI.INTEGER*/ = SDAI.FROM(/*SDAI.INTEGER*/1, TO:/*SDAI.INTEGER*/
          SDAI.HIINDEX(CONSTITUENT)) {
          for J in incrementControl {
            
            let _TEMP11 = CONSTITUENT?[J]
            let _TEMP12 = SDAI.USEDIN(T: _TEMP11, ROLE: \AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF
              .ePRODUCT_DEFINITION_RELATIONSHIP.RELATED_PRODUCT_DEFINITION)
            let _TEMP13 = _TEMP12.QUERY{ PDR in 

                let _TEMP1 = SDAI.TYPEOF(PDR, IS: eASSEMBLY_COMPONENT_USAGE.self)
                return _TEMP1 }
            let _TEMP14 = SDAI.BAG<SDAI.GENERIC_ENTITY>(/*SDAI.BAG<eASSEMBLY_COMPONENT_USAGE>*/
              LOCAL_RELATION2) + SDAI.FORCE_OPTIONAL(_TEMP13)
            LOCAL_RELATION2 = SDAI.BAG<eASSEMBLY_COMPONENT_USAGE>(/*SDAI.BAG<SDAI.GENERIC_ENTITY>*/_TEMP14)
          }
        }
        
        let _TEMP15 = BAG_TO_SET(LOCAL_RELATION2)
        LOCAL_RELATION = SDAI.SET<eASSEMBLY_COMPONENT_USAGE>(generic: /*SDAI.SET<gINTYPE>*/_TEMP15)
        
        let _TEMP16 = SDAI.SIZEOF(LOCAL_RELATION)
        let _TEMP17 = _TEMP16 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
        if SDAI.IS_TRUE( _TEMP17 ) {
          
          let _TEMP18 = SDAI.SIZEOF(CONSTITUENT)
          let _TEMP19 = _TEMP18 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
          if SDAI.IS_TRUE( _TEMP19 ) {
            
            let _TEMP20 = CONSTITUENT?[1]
            let _TEMP21 = SDAI.SET<ePRODUCT_DEFINITION>(([
              SDAI.AIE(_TEMP20)] as [SDAI.AggregationInitializerElement<ePRODUCT_DEFINITION>]))
            return _find_assembly_root__cache.updateCache(params: _params, value: _TEMP21)
          }
          else {
            
            let _TEMP22 = SDAI.SET<ePRODUCT_DEFINITION>(SDAI.EMPLY_AGGREGATE)
            return _find_assembly_root__cache.updateCache(params: _params, value: _TEMP22)
          }
        }
        else {
          if let incrementControl/*SDAI.INTEGER*/ = SDAI.FROM(/*SDAI.INTEGER*/1, TO:/*SDAI.INTEGER*/
            SDAI.HIINDEX(LOCAL_RELATION)) {
            for I in incrementControl {
              if let incrementControl/*SDAI.INTEGER*/ = SDAI.FROM(/*SDAI.INTEGER*/1, TO:/*SDAI.INTEGER*/
                SDAI.HIINDEX(CONSTITUENT)) {
                for J in incrementControl {
                  
                  let _TEMP23 = LOCAL_RELATION?[I]
                  let _TEMP24 = _TEMP23?.RELATING_PRODUCT_DEFINITION
                  let _TEMP25 = CONSTITUENT?[J]
                  let _TEMP26 = _TEMP24 .!=. _TEMP25
                  if SDAI.IS_TRUE( _TEMP26 ) {
                    
                    let _TEMP27 = LOCAL_RELATION?[I]
                    let _TEMP28 = _TEMP27?.RELATING_PRODUCT_DEFINITION
                    PD = ePRODUCT_DEFINITION(/*sPRODUCT_DEFINITION_OR_REFERENCE*/_TEMP28)
                    
                    let _TEMP29 = LOCAL_PARENT + PD
                    LOCAL_PARENT = _TEMP29
                  }
                }
              }
            }
          }
          
          let _TEMP30 = SDAI.SIZEOF(LOCAL_PARENT)
          let _TEMP31 = _TEMP30 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
          let _TEMP32 = LOCAL_PARENT?[1]
          let _TEMP33 = ASSEMBLY_ROOT(_TEMP32)
          let _TEMP34 = _TEMP31 && _TEMP33
          if SDAI.IS_TRUE( _TEMP34 ) {
            
            let _TEMP35 = LOCAL_PARENT?[1]
            let _TEMP36 = SDAI.SET<ePRODUCT_DEFINITION>(([
              SDAI.AIE(_TEMP35)] as [SDAI.AggregationInitializerElement<ePRODUCT_DEFINITION>]))
            return _find_assembly_root__cache.updateCache(params: _params, value: _TEMP36)
          }
          else {
            
            let _TEMP37 = SDAI.SIZEOF(LOCAL_PARENT)
            let _TEMP38 = _TEMP37 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
            if SDAI.IS_TRUE( _TEMP38 ) {
              
              let _TEMP39 = SDAI.SET<ePRODUCT_DEFINITION>(SDAI.EMPLY_AGGREGATE)
              return _find_assembly_root__cache.updateCache(params: _params, value: _TEMP39)
            }
            else {
              
              let _TEMP40 = FIND_ASSEMBLY_ROOT(LOCAL_PARENT)
              ROOT = _TEMP40
              
              let _TEMP41 = SDAI.SIZEOF(ROOT)
              let _TEMP42 = _TEMP41 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
              if SDAI.IS_TRUE( _TEMP42 ) {
                return _find_assembly_root__cache.updateCache(params: _params, value: ROOT)
              }
              else {
                
                let _TEMP43 = SDAI.SIZEOF(ROOT)
                let _TEMP44 = _TEMP43 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
                if SDAI.IS_TRUE( _TEMP44 ) {
                  
                  let _TEMP45 = SDAI.SET<ePRODUCT_DEFINITION>(SDAI.EMPLY_AGGREGATE)
                  return _find_assembly_root__cache.updateCache(params: _params, value: _TEMP45)
                }
              }
            }
          }
        }
      }
    }
    
    let _TEMP46 = SDAI.SET<ePRODUCT_DEFINITION>(SDAI.EMPLY_AGGREGATE)
    return _find_assembly_root__cache.updateCache(params: _params, value: _TEMP46)
  }

}

//MARK: - function result cache
private var _find_assembly_root__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

