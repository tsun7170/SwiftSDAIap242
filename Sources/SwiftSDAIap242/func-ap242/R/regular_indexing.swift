/* file: regular_indexing.swift 	 generated: Mon Jan  3 16:32:52 2022 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.1, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION regular_indexing(
               sub : LIST OF INTEGER;
               base : zero_or_one;
               shape : LIST [1 : ?] OF positive_integer;
               inc : LIST [1 : ?] OF INTEGER;
               first : INTEGER
           ) : INTEGER;

    LOCAL
      k     : INTEGER;
      index : INTEGER;
    END_LOCAL;
    IF ( NOT EXISTS( sub ) ) OR ( NOT EXISTS( base ) ) OR ( NOT EXISTS( shape ) ) OR ( NOT EXISTS( inc ) ) OR
        ( NOT EXISTS( first ) ) THEN
      RETURN( ? );
    END_IF;
    IF ( SIZEOF( sub ) <> SIZEOF( inc ) ) OR ( SIZEOF( sub ) <> SIZEOF( shape ) ) THEN
      RETURN( ? );
    END_IF;
    index := first;
    REPEAT j := 1 TO SIZEOF( sub ) BY 1;
      IF ( NOT EXISTS( sub[j] ) ) OR ( NOT EXISTS( inc[j] ) ) THEN
        RETURN( ? );
      END_IF;
      k := sub[j] - base;
      IF NOT ( ( 0 <= k ) AND ( k < shape[j] ) ) THEN
        RETURN( ? );
      END_IF;
      index := index + ( k * inc[j] );
    END_REPEAT;
    RETURN( index );

  END_FUNCTION; -- regular_indexing (line:44078 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func REGULAR_INDEXING(SUB: SDAI.LIST<SDAI.INTEGER>? , BASE: tZERO_OR_ONE? , 
                        SHAPE: (SDAI.LIST<tPOSITIVE_INTEGER>/*[1:nil]*/ )? , 
                        INC: (SDAI.LIST<SDAI.INTEGER>/*[1:nil]*/ )? , FIRST: SDAI.INTEGER? ) 
    -> SDAI.INTEGER? {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( SUB, BASE, SHAPE, INC, FIRST )
    if case .available(let _cached_value) = _regular_indexing__cache.cachedValue(params: _params) {
      return _cached_value as? SDAI.INTEGER
    }

    var SUB = SUB; SDAI.TOUCH(var: &SUB)
    var BASE = BASE; SDAI.TOUCH(var: &BASE)
    var SHAPE = SHAPE; SDAI.TOUCH(var: &SHAPE)
    var INC = INC; SDAI.TOUCH(var: &INC)
    var FIRST = FIRST; SDAI.TOUCH(var: &FIRST)

    //LOCAL
    var K: SDAI.INTEGER? 
    var INDEX: SDAI.INTEGER? 
    //END_LOCAL

    
    let _TEMP1 = SDAI.EXISTS(SUB)
    let _TEMP2 =  !_TEMP1
    let _TEMP3 = SDAI.EXISTS(BASE)
    let _TEMP4 =  !_TEMP3
    let _TEMP5 = _TEMP2 || _TEMP4
    let _TEMP6 = SDAI.EXISTS(SHAPE)
    let _TEMP7 =  !_TEMP6
    let _TEMP8 = _TEMP5 || _TEMP7
    let _TEMP9 = SDAI.EXISTS(INC)
    let _TEMP10 =  !_TEMP9
    let _TEMP11 = _TEMP8 || _TEMP10
    let _TEMP12 = SDAI.EXISTS(FIRST)
    let _TEMP13 =  !_TEMP12
    let _TEMP14 = _TEMP11 || _TEMP13
    if SDAI.IS_TRUE( _TEMP14 ) {
      return _regular_indexing__cache.updateCache(params: _params, value: (nil as SDAI.INTEGER?))
    }
    
    let _TEMP15 = SDAI.SIZEOF(SUB)
    let _TEMP16 = SDAI.SIZEOF(INC)
    let _TEMP17 = _TEMP15 .!=. _TEMP16
    let _TEMP18 = SDAI.SIZEOF(SUB)
    let _TEMP19 = SDAI.SIZEOF(SHAPE)
    let _TEMP20 = _TEMP18 .!=. _TEMP19
    let _TEMP21 = _TEMP17 || _TEMP20
    if SDAI.IS_TRUE( _TEMP21 ) {
      return _regular_indexing__cache.updateCache(params: _params, value: (nil as SDAI.INTEGER?))
    }
    INDEX = FIRST
    if let incrementControl/*SDAI.INTEGER*/ = SDAI.FROM(/*SDAI.INTEGER*/1, TO:/*SDAI.INTEGER*/SDAI.SIZEOF(
      SUB)) {
      for J in incrementControl {
        
        let _TEMP22 = SUB?[J]
        let _TEMP23 = SDAI.EXISTS(_TEMP22)
        let _TEMP24 =  !_TEMP23
        let _TEMP25 = INC?[J]
        let _TEMP26 = SDAI.EXISTS(_TEMP25)
        let _TEMP27 =  !_TEMP26
        let _TEMP28 = _TEMP24 || _TEMP27
        if SDAI.IS_TRUE( _TEMP28 ) {
          return _regular_indexing__cache.updateCache(params: _params, value: (nil as SDAI.INTEGER?))
        }
        
        let _TEMP29 = SUB?[J]
        let _TEMP30 = _TEMP29 - BASE
        K = _TEMP30
        
        let _TEMP31 = SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0)) <= K
        let _TEMP32 = SHAPE?[J]
        let _TEMP33 = K < _TEMP32
        let _TEMP34 = _TEMP31 && _TEMP33
        let _TEMP35 =  !_TEMP34
        if SDAI.IS_TRUE( _TEMP35 ) {
          return _regular_indexing__cache.updateCache(params: _params, value: (nil as SDAI.INTEGER?))
        }
        
        let _TEMP36 = INC?[J]
        let _TEMP37 = K * _TEMP36
        let _TEMP38 = INDEX + _TEMP37
        INDEX = _TEMP38
      }
    }
    return _regular_indexing__cache.updateCache(params: _params, value: INDEX)
  }

}

//MARK: - function result cache
private var _regular_indexing__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

