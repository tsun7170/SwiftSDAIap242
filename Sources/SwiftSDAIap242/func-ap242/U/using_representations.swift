/* file: using_representations.swift 	 generated: Sun Oct 31 15:32:10 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION using_representations(
               item : founded_item_select
           ) : SET OF representation;

    LOCAL
      results            : SET OF representation;
      result_bag         : BAG OF representation;
      intermediate_items : SET OF founded_item_select;
    END_LOCAL;
    results := [];
    result_bag := USEDIN( item, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.REPRESENTATION.ITEMS' );
    IF SIZEOF( result_bag ) > 0 THEN
      REPEAT i := 1 TO HIINDEX( result_bag ) BY 1;
        results := results + result_bag[i];
      END_REPEAT;
    END_IF;
    intermediate_items := using_items( item, [] );
    IF SIZEOF( intermediate_items ) > 0 THEN
      REPEAT i := 1 TO HIINDEX( intermediate_items ) BY 1;
        result_bag := USEDIN( intermediate_items[i], 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
            + 'REPRESENTATION.ITEMS'  );
        IF SIZEOF( result_bag ) > 0 THEN
          REPEAT j := 1 TO HIINDEX( result_bag ) BY 1;
            results := results + result_bag[j];
          END_REPEAT;
        END_IF;
      END_REPEAT;
    END_IF;
    RETURN( results );

  END_FUNCTION; -- using_representations (line:47376 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func USING_REPRESENTATIONS(_ ITEM: sFOUNDED_ITEM_SELECT? ) 
    -> SDAI.SET<eREPRESENTATION>? {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( ITEM )
    if case .available(let _cached_value) = _using_representations__cache.cachedValue(params: _params) {
      return _cached_value as? SDAI.SET<eREPRESENTATION>
    }

    var ITEM = ITEM; SDAI.TOUCH(var: &ITEM)

    //LOCAL
    var RESULTS: SDAI.SET<eREPRESENTATION>? 
    var RESULT_BAG: SDAI.BAG<eREPRESENTATION>? 
    var INTERMEDIATE_ITEMS: SDAI.SET<sFOUNDED_ITEM_SELECT>? 
    //END_LOCAL

    
    let _TEMP1 = SDAI.SET<eREPRESENTATION>(SDAI.EMPLY_AGGREGATE)
    RESULTS = _TEMP1
    
    let _TEMP2 = SDAI.USEDIN(T: ITEM, ROLE: \AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eREPRESENTATION
      .ITEMS)
    RESULT_BAG = SDAI.BAG<eREPRESENTATION>(/*SDAI.BAG<SDAI.GENERIC_ENTITY>*/_TEMP2)
    
    let _TEMP3 = SDAI.SIZEOF(RESULT_BAG)
    let _TEMP4 = _TEMP3 > SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
    if SDAI.IS_TRUE( _TEMP4 ) {
      if let incrementControl/*SDAI.INTEGER*/ = SDAI.FROM(/*SDAI.INTEGER*/1, TO:/*SDAI.INTEGER*/SDAI.HIINDEX(
        RESULT_BAG)) {
        for I in incrementControl {
          
          let _TEMP5 = RESULT_BAG?[I]
          let _TEMP6 = RESULTS + _TEMP5
          RESULTS = _TEMP6
        }
      }
    }
    
    let _TEMP7 = SDAI.SET<sFOUNDED_ITEM_SELECT>(SDAI.EMPLY_AGGREGATE)
    let _TEMP8 = USING_ITEMS(ITEM: ITEM, 
                             CHECKED_ITEMS: _TEMP7)
    INTERMEDIATE_ITEMS = _TEMP8
    
    let _TEMP9 = SDAI.SIZEOF(INTERMEDIATE_ITEMS)
    let _TEMP10 = _TEMP9 > SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
    if SDAI.IS_TRUE( _TEMP10 ) {
      if let incrementControl/*SDAI.INTEGER*/ = SDAI.FROM(/*SDAI.INTEGER*/1, TO:/*SDAI.INTEGER*/SDAI.HIINDEX(
        INTERMEDIATE_ITEMS)) {
        for I in incrementControl {
          
          let _TEMP11 = INTERMEDIATE_ITEMS?[I]
          let _TEMP12 = SDAI.USEDIN(T: _TEMP11, ROLE: \AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF
            .eREPRESENTATION.ITEMS)
          RESULT_BAG = SDAI.BAG<eREPRESENTATION>(/*SDAI.BAG<SDAI.GENERIC_ENTITY>*/_TEMP12)
          
          let _TEMP13 = SDAI.SIZEOF(RESULT_BAG)
          let _TEMP14 = _TEMP13 > SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
          if SDAI.IS_TRUE( _TEMP14 ) {
            if let incrementControl/*SDAI.INTEGER*/ = SDAI.FROM(/*SDAI.INTEGER*/1, TO:/*SDAI.INTEGER*/
              SDAI.HIINDEX(RESULT_BAG)) {
              for J in incrementControl {
                
                let _TEMP15 = RESULT_BAG?[J]
                let _TEMP16 = RESULTS + _TEMP15
                RESULTS = _TEMP16
              }
            }
          }
        }
      }
    }
    return _using_representations__cache.updateCache(params: _params, value: RESULTS)
  }

}

//MARK: - function result cache
private var _using_representations__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

