/* file: using_items.swift 	 generated: Mon Jan  3 16:32:52 2022 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.1, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION using_items(
               item : founded_item_select;
               checked_items : SET OF founded_item_select
           ) : SET OF founded_item_select;

    LOCAL
      result_items         : SET OF founded_item_select;
      next_items           : SET OF founded_item_select;
      number_of_next_items : INTEGER;
      next_item            : founded_item_select;
      new_check_items      : SET OF founded_item_select;
      descendants          : SET OF founded_item_select;
    END_LOCAL;
    IF item IN checked_items THEN
      RETURN( [] );
    END_IF;
    checked_items := checked_items + item;
    result_items := QUERY ( z <* bag_to_set( USEDIN( item, '' ) ) | ( ( 
        'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.REPRESENTATION_ITEM'  IN TYPEOF( z ) ) OR ( 
        'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.FOUNDED_ITEM'  IN TYPEOF( z ) ) ) );
    next_items := result_items - checked_items;
    number_of_next_items := SIZEOF( next_items );
    IF number_of_next_items = 0 THEN
      RETURN( result_items );
    END_IF;
    REPEAT i := 1 TO number_of_next_items BY 1;
      next_item := next_items[i];
      new_check_items := checked_items + ( next_items - next_item );
      descendants := using_items( next_item, new_check_items );
      result_items := result_items + descendants;
      checked_items := checked_items + next_item + descendants;
    END_REPEAT;
    RETURN( result_items );

  END_FUNCTION; -- using_items (line:47245 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func USING_ITEMS(ITEM: sFOUNDED_ITEM_SELECT? , CHECKED_ITEMS: SDAI.SET<sFOUNDED_ITEM_SELECT>? ) 
    -> SDAI.SET<sFOUNDED_ITEM_SELECT>? {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( ITEM, CHECKED_ITEMS )
    if case .available(let _cached_value) = _using_items__cache.cachedValue(params: _params) {
      return _cached_value as? SDAI.SET<sFOUNDED_ITEM_SELECT>
    }

    var ITEM = ITEM; SDAI.TOUCH(var: &ITEM)
    var CHECKED_ITEMS = CHECKED_ITEMS; SDAI.TOUCH(var: &CHECKED_ITEMS)

    //LOCAL
    var RESULT_ITEMS: SDAI.SET<sFOUNDED_ITEM_SELECT>? 
    var NEXT_ITEMS: SDAI.SET<sFOUNDED_ITEM_SELECT>? 
    var NUMBER_OF_NEXT_ITEMS: SDAI.INTEGER? 
    var NEXT_ITEM: sFOUNDED_ITEM_SELECT? 
    var NEW_CHECK_ITEMS: SDAI.SET<sFOUNDED_ITEM_SELECT>? 
    var DESCENDANTS: SDAI.SET<sFOUNDED_ITEM_SELECT>? 
    //END_LOCAL

    
    let _TEMP1 = SDAI.aggregate(CHECKED_ITEMS, contains: ITEM)
    if SDAI.IS_TRUE( _TEMP1 ) {
      
      let _TEMP2 = SDAI.SET<sFOUNDED_ITEM_SELECT>(SDAI.EMPLY_AGGREGATE)
      return _using_items__cache.updateCache(params: _params, value: _TEMP2)
    }
    
    let _TEMP3 = CHECKED_ITEMS + ITEM
    CHECKED_ITEMS = _TEMP3
    
    let _TEMP4 = SDAI.USEDIN(T: ITEM)
    let _TEMP5 = BAG_TO_SET(_TEMP4)
    let _TEMP6 = _TEMP5?.QUERY{ Z in 

        let _TEMP1 = SDAI.TYPEOF(Z, IS: eREPRESENTATION_ITEM.self)
        let _TEMP2 = SDAI.TYPEOF(Z, IS: eFOUNDED_ITEM.self)
        let _TEMP3 = _TEMP1 || _TEMP2
        return _TEMP3 }
    RESULT_ITEMS = SDAI.SET<sFOUNDED_ITEM_SELECT>(generic: /*SDAI.SET<gINTYPE>*/_TEMP6)
    
    let _TEMP7 = RESULT_ITEMS - CHECKED_ITEMS
    NEXT_ITEMS = _TEMP7
    
    let _TEMP8 = SDAI.SIZEOF(NEXT_ITEMS)
    NUMBER_OF_NEXT_ITEMS = _TEMP8
    
    let _TEMP9 = NUMBER_OF_NEXT_ITEMS .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
    if SDAI.IS_TRUE( _TEMP9 ) {
      return _using_items__cache.updateCache(params: _params, value: RESULT_ITEMS)
    }
    if let incrementControl/*SDAI.INTEGER*/ = SDAI.FROM(/*SDAI.INTEGER*/1, TO:/*SDAI.INTEGER*/
      NUMBER_OF_NEXT_ITEMS) {
      for I in incrementControl {
        
        let _TEMP10 = NEXT_ITEMS?[I]
        NEXT_ITEM = _TEMP10
        
        let _TEMP11 = NEXT_ITEMS - NEXT_ITEM
        let _TEMP12 = CHECKED_ITEMS + _TEMP11
        NEW_CHECK_ITEMS = _TEMP12
        
        let _TEMP13 = USING_ITEMS(ITEM: NEXT_ITEM, 
                                  CHECKED_ITEMS: NEW_CHECK_ITEMS)
        DESCENDANTS = _TEMP13
        
        let _TEMP14 = RESULT_ITEMS + DESCENDANTS
        RESULT_ITEMS = _TEMP14
        
        let _TEMP15 = CHECKED_ITEMS + NEXT_ITEM
        let _TEMP16 = _TEMP15 + DESCENDANTS
        CHECKED_ITEMS = _TEMP16
      }
    }
    return _using_items__cache.updateCache(params: _params, value: RESULT_ITEMS)
  }

}

//MARK: - function result cache
private var _using_items__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

