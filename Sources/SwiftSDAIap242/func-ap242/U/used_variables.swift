/* file: used_variables.swift 	 generated: Sat Aug 14 13:46:02 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION used_variables(
               arg : generic_expression
           ) : SET OF generic_variable;

    LOCAL
      result : SET OF generic_variable := [];
    END_LOCAL;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.GENERIC_VARIABLE' IN TYPEOF( arg ) THEN
      RETURN( [arg] );
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.UNARY_GENERIC_EXPRESSION' IN TYPEOF( arg ) THEN
      RETURN( used_variables( arg\unary_generic_expression.operand ) );
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.BINARY_GENERIC_EXPRESSION' IN TYPEOF( arg ) THEN
      RETURN( used_variables( arg\binary_generic_expression.operands[1] ) + used_variables( arg\
          binary_generic_expression.operands[2] ) );
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.MULTIPLE_ARITY_GENERIC_EXPRESSION' IN TYPEOF( arg )
        THEN
      REPEAT i := 1 TO SIZEOF( arg\multiple_arity_generic_expression.operands ) BY 1;
        result := result + used_variables( arg\multiple_arity_generic_expression.operands[i] );
      END_REPEAT;
      RETURN( result );
    END_IF;
    RETURN( [] );

  END_FUNCTION; -- used_variables (line:47207 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func USED_VARIABLES(_ ARG: eGENERIC_EXPRESSION? ) 
    -> SDAI.SET<eGENERIC_VARIABLE>? {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( ARG )
    if case .available(let _cached_value) = _used_variables__cache.cachedValue(params: _params) {
      return _cached_value as? SDAI.SET<eGENERIC_VARIABLE>
    }

    var ARG = ARG; SDAI.TOUCH(var: &ARG)

    //LOCAL
    var RESULT: SDAI.SET<eGENERIC_VARIABLE>?  = SDAI.SET<eGENERIC_VARIABLE>(SDAI.EMPLY_AGGREGATE); SDAI.TOUCH(var: &RESULT)

    
    let _TEMP1 = SDAI.TYPEOF(ARG, IS: eGENERIC_VARIABLE.self)
    if SDAI.IS_TRUE( _TEMP1 ) {
      
      let _TEMP2 = SDAI.SET<eGENERIC_VARIABLE>(([
        SDAI.AIE(eGENERIC_VARIABLE(/*eGENERIC_EXPRESSION*/ARG))] as [SDAI.AggregationInitializerElement<
        eGENERIC_VARIABLE>]))
      return _used_variables__cache.updateCache(params: _params, value: _TEMP2)
    }
    
    let _TEMP3 = SDAI.TYPEOF(ARG, IS: eUNARY_GENERIC_EXPRESSION.self)
    if SDAI.IS_TRUE( _TEMP3 ) {
      
      let _TEMP4 = ARG?.GROUP_REF(eUNARY_GENERIC_EXPRESSION.self)
      let _TEMP5 = _TEMP4?.OPERAND
      let _TEMP6 = USED_VARIABLES(_TEMP5)
      return _used_variables__cache.updateCache(params: _params, value: _TEMP6)
    }
    
    let _TEMP7 = SDAI.TYPEOF(ARG, IS: eBINARY_GENERIC_EXPRESSION.self)
    if SDAI.IS_TRUE( _TEMP7 ) {
      
      let _TEMP8 = ARG?.GROUP_REF(eBINARY_GENERIC_EXPRESSION.self)
      let _TEMP9 = _TEMP8?.OPERANDS
      let _TEMP10 = _TEMP9?[1]
      let _TEMP11 = USED_VARIABLES(_TEMP10)
      let _TEMP12 = ARG?.GROUP_REF(eBINARY_GENERIC_EXPRESSION.self)
      let _TEMP13 = _TEMP12?.OPERANDS
      let _TEMP14 = _TEMP13?[2]
      let _TEMP15 = USED_VARIABLES(_TEMP14)
      let _TEMP16 = _TEMP11 + _TEMP15
      return _used_variables__cache.updateCache(params: _params, value: _TEMP16)
    }
    
    let _TEMP17 = SDAI.TYPEOF(ARG, IS: eMULTIPLE_ARITY_GENERIC_EXPRESSION.self)
    if SDAI.IS_TRUE( _TEMP17 ) {
      if let incrementControl/*SDAI.INTEGER*/ = SDAI.FROM(/*SDAI.INTEGER*/1, TO:/*SDAI.INTEGER*/SDAI.SIZEOF(
        ARG?.GROUP_REF(eMULTIPLE_ARITY_GENERIC_EXPRESSION.self)?.OPERANDS)) {
        for I in incrementControl {
          
          let _TEMP18 = ARG?.GROUP_REF(eMULTIPLE_ARITY_GENERIC_EXPRESSION.self)
          let _TEMP19 = _TEMP18?.OPERANDS
          let _TEMP20 = _TEMP19?[I]
          let _TEMP21 = USED_VARIABLES(_TEMP20)
          let _TEMP22 = RESULT + _TEMP21
          RESULT = _TEMP22
        }
      }
      return _used_variables__cache.updateCache(params: _params, value: RESULT)
    }
    
    let _TEMP23 = SDAI.SET<eGENERIC_VARIABLE>(SDAI.EMPLY_AGGREGATE)
    return _used_variables__cache.updateCache(params: _params, value: _TEMP23)
  }

}

//MARK: - function result cache
private var _used_variables__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

