/* file: path_reversed.swift 	 generated: Sat Aug 14 13:46:02 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION path_reversed(
               a_path : path
           ) : oriented_path;

    LOCAL
      the_reverse : oriented_path;
    END_LOCAL;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ORIENTED_PATH' IN TYPEOF( a_path ) THEN
      the_reverse := dummy_tri || path( list_of_topology_reversed( a_path.edge_list ) ) || oriented_path( 
          a_path\oriented_path.path_element, NOT a_path\oriented_path.orientation );
    ELSE
      the_reverse := dummy_tri || path( list_of_topology_reversed( a_path.edge_list ) ) || oriented_path( 
          a_path, FALSE );
    END_IF;
    RETURN( the_reverse );

  END_FUNCTION; -- path_reversed (line:43941 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func PATH_REVERSED(_ A_PATH: ePATH? ) 
    -> eORIENTED_PATH? {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( A_PATH )
    if case .available(let _cached_value) = _path_reversed__cache.cachedValue(params: _params) {
      return _cached_value as? eORIENTED_PATH
    }

    var A_PATH = A_PATH; SDAI.TOUCH(var: &A_PATH)

    //LOCAL
    var THE_REVERSE: eORIENTED_PATH? 

    
    let _TEMP1 = SDAI.TYPEOF(A_PATH, IS: eORIENTED_PATH.self)
    if SDAI.IS_TRUE( _TEMP1 ) {
      
      let _TEMP2 = A_PATH?.EDGE_LIST
      let _TEMP3 = LIST_OF_TOPOLOGY_REVERSED(tLIST_OF_REVERSIBLE_TOPOLOGY_ITEM(
        bound1: SDAI.UNWRAP(SDAI.INTEGER(0)), bound2: (nil as SDAI.INTEGER?), 
        /*SDAI.LIST_UNIQUE<eORIENTED_EDGE>[1:nil] */_TEMP2))
      let _TEMP4 = _path(EDGE_LIST: SDAI.UNWRAP(SDAI.LIST_UNIQUE<eORIENTED_EDGE>(
        bound1: SDAI.UNWRAP(SDAI.INTEGER(1)), bound2: (nil as SDAI.INTEGER?), 
        /*tLIST_OF_REVERSIBLE_TOPOLOGY_ITEM*/_TEMP3)))
      let _TEMP5 = DUMMY_TRI .||. _TEMP4
      let _TEMP6 = A_PATH?.GROUP_REF(eORIENTED_PATH.self)
      let _TEMP7 = _TEMP6?.PATH_ELEMENT
      let _TEMP8 = A_PATH?.GROUP_REF(eORIENTED_PATH.self)
      let _TEMP9 = _TEMP8?.ORIENTATION
      let _TEMP10 =  !_TEMP9
      let _TEMP11 = _oriented_path(PATH_ELEMENT: SDAI.UNWRAP(_TEMP7), 
                                   ORIENTATION: SDAI.UNWRAP(SDAI.BOOLEAN(/*SDAI.LOGICAL*/_TEMP10)))
      let _TEMP12 = _TEMP5 .||. _TEMP11
      THE_REVERSE = eORIENTED_PATH(/*SDAI.GENERIC_ENTITY*/_TEMP12)
    }
    else {
      
      let _TEMP13 = A_PATH?.EDGE_LIST
      let _TEMP14 = LIST_OF_TOPOLOGY_REVERSED(tLIST_OF_REVERSIBLE_TOPOLOGY_ITEM(
        bound1: SDAI.UNWRAP(SDAI.INTEGER(0)), bound2: (nil as SDAI.INTEGER?), 
        /*SDAI.LIST_UNIQUE<eORIENTED_EDGE>[1:nil] */_TEMP13))
      let _TEMP15 = _path(EDGE_LIST: SDAI.UNWRAP(SDAI.LIST_UNIQUE<eORIENTED_EDGE>(
        bound1: SDAI.UNWRAP(SDAI.INTEGER(1)), bound2: (nil as SDAI.INTEGER?), 
        /*tLIST_OF_REVERSIBLE_TOPOLOGY_ITEM*/_TEMP14)))
      let _TEMP16 = DUMMY_TRI .||. _TEMP15
      let _TEMP17 = _oriented_path(PATH_ELEMENT: SDAI.UNWRAP(A_PATH), 
                                   ORIENTATION: SDAI.UNWRAP(SDAI.BOOLEAN(SDAI.FALSE)))
      let _TEMP18 = _TEMP16 .||. _TEMP17
      THE_REVERSE = eORIENTED_PATH(/*SDAI.GENERIC_ENTITY*/_TEMP18)
    }
    return _path_reversed__cache.updateCache(params: _params, value: THE_REVERSE)
  }

}

//MARK: - function result cache
private var _path_reversed__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

