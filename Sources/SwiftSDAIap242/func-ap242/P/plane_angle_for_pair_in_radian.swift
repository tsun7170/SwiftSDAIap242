/* file: plane_angle_for_pair_in_radian.swift 	 generated: Tue Nov 16 05:35:44 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION plane_angle_for_pair_in_radian(
               pair : kinematic_pair;
               angle : plane_angle_measure
           ) : plane_angle_measure;

    LOCAL
      converted_angle : plane_angle_measure := angle;
      link_rep        : kinematic_link_representation := representation_of_link( pair.joint.edge_start );
      link_cntxt      : representation_context;
      pa_units        : SET OF unit := [];
      pau             : unit;
    END_LOCAL;
    link_cntxt := link_rep\representation.context_of_items;
    IF NOT ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.GLOBAL_UNIT_ASSIGNED_CONTEXT' IN TYPEOF( 
        link_cntxt ) ) THEN
      RETURN( ? );
    END_IF;
    pa_units := QUERY ( unit <* link_cntxt\global_unit_assigned_context.units | ( 
        'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PLANE_ANGLE_UNIT'  IN TYPEOF( unit ) ) );
    IF SIZEOF( pa_units ) <> 1 THEN
      RETURN( ? );
    END_IF;
    pau := pa_units[1];
    IF ( NOT ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SI_UNIT' IN TYPEOF( pau ) ) ) AND ( NOT ( 
        'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CONVERSION_BASED_UNIT'  IN TYPEOF( pau ) ) ) THEN
      RETURN( ? );
    END_IF;
    REPEAT WHILE 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CONVERSION_BASED_UNIT' IN TYPEOF( pau );
      converted_angle := converted_angle * pau\conversion_based_unit.conversion_factor.value_component;
      pau := pau\conversion_based_unit.conversion_factor.unit_component;
      IF ( ( NOT ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SI_UNIT' IN TYPEOF( pau ) ) ) AND ( NOT 
          ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CONVERSION_BASED_UNIT' IN TYPEOF( pau ) ) ) ) OR
          ( NOT ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PLANE_ANGLE_UNIT' IN TYPEOF( pau ) ) )
          THEN
        RETURN( ? );
      END_IF;
    END_REPEAT;
    IF pau\si_unit.name <> si_unit_name.radian THEN
      RETURN( ? );
    END_IF;
    CASE pau\si_unit.prefix OF
      si_prefix.exa               :         RETURN( 1.e+18 * converted_angle );
      si_prefix.peta              :         RETURN( 1.e+15 * converted_angle );
      si_prefix.tera              :         RETURN( 1000000000000 * converted_angle );
      si_prefix.giga              :         RETURN( 1000000000 * converted_angle );
      si_prefix.mega              :         RETURN( 1000000 * converted_angle );
      si_prefix.kilo              :         RETURN( 1000 * converted_angle );
      si_prefix.hecto             :         RETURN( 100 * converted_angle );
      si_prefix.deca              :         RETURN( 10 * converted_angle );
      si_prefix.deci              :         RETURN( 0.1 * converted_angle );
      si_prefix.centi             :         RETURN( 0.01 * converted_angle );
      si_prefix.milli             :         RETURN( 0.001 * converted_angle );
      si_prefix.micro             :         RETURN( 1.e-06 * converted_angle );
      si_prefix.nano              :         RETURN( 1.e-09 * converted_angle );
      si_prefix.pico              :         RETURN( 1.e-12 * converted_angle );
      si_prefix.femto             :         RETURN( 1.e-15 * converted_angle );
      si_prefix.atto              :         RETURN( 1.e-18 * converted_angle );
      OTHERWISE                   :         RETURN( converted_angle );
    END_CASE;

  END_FUNCTION; -- plane_angle_for_pair_in_radian (line:43969 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func PLANE_ANGLE_FOR_PAIR_IN_RADIAN(
    PAIR: eKINEMATIC_PAIR? , ANGLE: tPLANE_ANGLE_MEASURE? ) 
    -> tPLANE_ANGLE_MEASURE? {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( PAIR, ANGLE )
    if case .available(let _cached_value) = _plane_angle_for_pair_in_radian__cache.cachedValue(params: _params) {
      return _cached_value as? tPLANE_ANGLE_MEASURE
    }

    var PAIR = PAIR; SDAI.TOUCH(var: &PAIR)
    var ANGLE = ANGLE; SDAI.TOUCH(var: &ANGLE)

    //LOCAL
    var CONVERTED_ANGLE: tPLANE_ANGLE_MEASURE?  = ANGLE; SDAI.TOUCH(var: &CONVERTED_ANGLE)
    var LINK_REP: eKINEMATIC_LINK_REPRESENTATION?  = REPRESENTATION_OF_LINK(
                                                     PAIR?.JOINT.EDGE_START); SDAI.TOUCH(var: &LINK_REP)
    var LINK_CNTXT: eREPRESENTATION_CONTEXT? 
    var PA_UNITS: SDAI.SET<sUNIT>?  = SDAI.SET<sUNIT>(SDAI.EMPLY_AGGREGATE); SDAI.TOUCH(var: &PA_UNITS)
    var PAU: sUNIT? 
    //END_LOCAL

    
    let _TEMP1 = LINK_REP?.GROUP_REF(eREPRESENTATION.self)
    let _TEMP2 = _TEMP1?.CONTEXT_OF_ITEMS
    LINK_CNTXT = _TEMP2
    
    let _TEMP3 = SDAI.TYPEOF(LINK_CNTXT, IS: eGLOBAL_UNIT_ASSIGNED_CONTEXT.self)
    let _TEMP4 =  !_TEMP3
    if SDAI.IS_TRUE( _TEMP4 ) {
      return _plane_angle_for_pair_in_radian__cache.updateCache(params: _params, value: (nil as 
        tPLANE_ANGLE_MEASURE?))
    }
    
    let _TEMP5 = LINK_CNTXT?.GROUP_REF(eGLOBAL_UNIT_ASSIGNED_CONTEXT.self)
    let _TEMP6 = _TEMP5?.UNITS
    let _TEMP7 = _TEMP6?.QUERY{ UNIT in 

        let _TEMP1 = SDAI.TYPEOF(UNIT, IS: ePLANE_ANGLE_UNIT.self)
        return _TEMP1 }
    PA_UNITS = SDAI.SET<sUNIT>(/*SDAI.SET<sUNIT>[1:nil] */_TEMP7)
    
    let _TEMP8 = SDAI.SIZEOF(PA_UNITS)
    let _TEMP9 = _TEMP8 .!=. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
    if SDAI.IS_TRUE( _TEMP9 ) {
      return _plane_angle_for_pair_in_radian__cache.updateCache(params: _params, value: (nil as 
        tPLANE_ANGLE_MEASURE?))
    }
    
    let _TEMP10 = PA_UNITS?[1]
    PAU = _TEMP10
    
    let _TEMP11 = SDAI.TYPEOF(PAU, IS: eSI_UNIT.self)
    let _TEMP12 =  !_TEMP11
    let _TEMP13 = SDAI.TYPEOF(PAU, IS: eCONVERSION_BASED_UNIT.self)
    let _TEMP14 =  !_TEMP13
    let _TEMP15 = _TEMP12 && _TEMP14
    if SDAI.IS_TRUE( _TEMP15 ) {
      return _plane_angle_for_pair_in_radian__cache.updateCache(params: _params, value: (nil as 
        tPLANE_ANGLE_MEASURE?))
    }
    while !SDAI.IS_TRUE(SDAI.TYPEOF(PAU, IS: eCONVERSION_BASED_UNIT.self)) {
      
      let _TEMP16 = PAU?.GROUP_REF(eCONVERSION_BASED_UNIT.self)
      let _TEMP17 = _TEMP16?.CONVERSION_FACTOR
      let _TEMP18 = _TEMP17?.VALUE_COMPONENT
      let _TEMP19 = CONVERTED_ANGLE * _TEMP18
      CONVERTED_ANGLE = tPLANE_ANGLE_MEASURE(/*SDAI.REAL*/_TEMP19)
      
      let _TEMP20 = PAU?.GROUP_REF(eCONVERSION_BASED_UNIT.self)
      let _TEMP21 = _TEMP20?.CONVERSION_FACTOR
      let _TEMP22 = _TEMP21?.UNIT_COMPONENT
      PAU = _TEMP22
      
      let _TEMP23 = SDAI.TYPEOF(PAU, IS: eSI_UNIT.self)
      let _TEMP24 =  !_TEMP23
      let _TEMP25 = SDAI.TYPEOF(PAU, IS: eCONVERSION_BASED_UNIT.self)
      let _TEMP26 =  !_TEMP25
      let _TEMP27 = _TEMP24 && _TEMP26
      let _TEMP28 = SDAI.TYPEOF(PAU, IS: ePLANE_ANGLE_UNIT.self)
      let _TEMP29 =  !_TEMP28
      let _TEMP30 = _TEMP27 || _TEMP29
      if SDAI.IS_TRUE( _TEMP30 ) {
        return _plane_angle_for_pair_in_radian__cache.updateCache(params: _params, value: (nil as 
          tPLANE_ANGLE_MEASURE?))
      }
    }
    
    let _TEMP31 = PAU?.GROUP_REF(eSI_UNIT.self)
    let _TEMP32 = _TEMP31?.NAME
    let _TEMP33 = nSI_UNIT_NAME.RADIAN
    let _TEMP34 = _TEMP32 .!=. SDAI.FORCE_OPTIONAL(_TEMP33)
    if SDAI.IS_TRUE( _TEMP34 ) {
      return _plane_angle_for_pair_in_radian__cache.updateCache(params: _params, value: (nil as 
        tPLANE_ANGLE_MEASURE?))
    }
    
    let _TEMP35 = PAU?.GROUP_REF(eSI_UNIT.self)
    let _TEMP36 = _TEMP35?.PREFIX
    if let selector = _TEMP36 {
      switch selector {
      case nSI_PREFIX.EXA:
        
        let _TEMP37 = SDAI.FORCE_OPTIONAL(SDAI.REAL(1.0000000000e+18)) * CONVERTED_ANGLE
        return _plane_angle_for_pair_in_radian__cache.updateCache(params: _params, value: 
          tPLANE_ANGLE_MEASURE(/*SDAI.REAL*/_TEMP37))

      case nSI_PREFIX.PETA:
        
        let _TEMP38 = SDAI.FORCE_OPTIONAL(SDAI.REAL(1.0000000000e+15)) * CONVERTED_ANGLE
        return _plane_angle_for_pair_in_radian__cache.updateCache(params: _params, value: 
          tPLANE_ANGLE_MEASURE(/*SDAI.REAL*/_TEMP38))

      case nSI_PREFIX.TERA:
        
        let _TEMP39 = SDAI.FORCE_OPTIONAL(SDAI.REAL(1.0000000000e+12)) * CONVERTED_ANGLE
        return _plane_angle_for_pair_in_radian__cache.updateCache(params: _params, value: 
          tPLANE_ANGLE_MEASURE(/*SDAI.REAL*/_TEMP39))

      case nSI_PREFIX.GIGA:
        
        let _TEMP40 = SDAI.FORCE_OPTIONAL(SDAI.REAL(1.0000000000e+09)) * CONVERTED_ANGLE
        return _plane_angle_for_pair_in_radian__cache.updateCache(params: _params, value: 
          tPLANE_ANGLE_MEASURE(/*SDAI.REAL*/_TEMP40))

      case nSI_PREFIX.MEGA:
        
        let _TEMP41 = SDAI.FORCE_OPTIONAL(SDAI.REAL(1.0000000000e+06)) * CONVERTED_ANGLE
        return _plane_angle_for_pair_in_radian__cache.updateCache(params: _params, value: 
          tPLANE_ANGLE_MEASURE(/*SDAI.REAL*/_TEMP41))

      case nSI_PREFIX.KILO:
        
        let _TEMP42 = SDAI.FORCE_OPTIONAL(SDAI.REAL(1.0000000000e+03)) * CONVERTED_ANGLE
        return _plane_angle_for_pair_in_radian__cache.updateCache(params: _params, value: 
          tPLANE_ANGLE_MEASURE(/*SDAI.REAL*/_TEMP42))

      case nSI_PREFIX.HECTO:
        
        let _TEMP43 = SDAI.FORCE_OPTIONAL(SDAI.REAL(1.0000000000e+02)) * CONVERTED_ANGLE
        return _plane_angle_for_pair_in_radian__cache.updateCache(params: _params, value: 
          tPLANE_ANGLE_MEASURE(/*SDAI.REAL*/_TEMP43))

      case nSI_PREFIX.DECA:
        
        let _TEMP44 = SDAI.FORCE_OPTIONAL(SDAI.REAL(1.0000000000e+01)) * CONVERTED_ANGLE
        return _plane_angle_for_pair_in_radian__cache.updateCache(params: _params, value: 
          tPLANE_ANGLE_MEASURE(/*SDAI.REAL*/_TEMP44))

      case nSI_PREFIX.DECI:
        
        let _TEMP45 = SDAI.FORCE_OPTIONAL(SDAI.REAL(1.0000000000e-01)) * CONVERTED_ANGLE
        return _plane_angle_for_pair_in_radian__cache.updateCache(params: _params, value: 
          tPLANE_ANGLE_MEASURE(/*SDAI.REAL*/_TEMP45))

      case nSI_PREFIX.CENTI:
        
        let _TEMP46 = SDAI.FORCE_OPTIONAL(SDAI.REAL(1.0000000000e-02)) * CONVERTED_ANGLE
        return _plane_angle_for_pair_in_radian__cache.updateCache(params: _params, value: 
          tPLANE_ANGLE_MEASURE(/*SDAI.REAL*/_TEMP46))

      case nSI_PREFIX.MILLI:
        
        let _TEMP47 = SDAI.FORCE_OPTIONAL(SDAI.REAL(1.0000000000e-03)) * CONVERTED_ANGLE
        return _plane_angle_for_pair_in_radian__cache.updateCache(params: _params, value: 
          tPLANE_ANGLE_MEASURE(/*SDAI.REAL*/_TEMP47))

      case nSI_PREFIX.MICRO:
        
        let _TEMP48 = SDAI.FORCE_OPTIONAL(SDAI.REAL(1.0000000000e-06)) * CONVERTED_ANGLE
        return _plane_angle_for_pair_in_radian__cache.updateCache(params: _params, value: 
          tPLANE_ANGLE_MEASURE(/*SDAI.REAL*/_TEMP48))

      case nSI_PREFIX.NANO:
        
        let _TEMP49 = SDAI.FORCE_OPTIONAL(SDAI.REAL(1.0000000000e-09)) * CONVERTED_ANGLE
        return _plane_angle_for_pair_in_radian__cache.updateCache(params: _params, value: 
          tPLANE_ANGLE_MEASURE(/*SDAI.REAL*/_TEMP49))

      case nSI_PREFIX.PICO:
        
        let _TEMP50 = SDAI.FORCE_OPTIONAL(SDAI.REAL(1.0000000000e-12)) * CONVERTED_ANGLE
        return _plane_angle_for_pair_in_radian__cache.updateCache(params: _params, value: 
          tPLANE_ANGLE_MEASURE(/*SDAI.REAL*/_TEMP50))

      case nSI_PREFIX.FEMTO:
        
        let _TEMP51 = SDAI.FORCE_OPTIONAL(SDAI.REAL(1.0000000000e-15)) * CONVERTED_ANGLE
        return _plane_angle_for_pair_in_radian__cache.updateCache(params: _params, value: 
          tPLANE_ANGLE_MEASURE(/*SDAI.REAL*/_TEMP51))

      case nSI_PREFIX.ATTO:
        
        let _TEMP52 = SDAI.FORCE_OPTIONAL(SDAI.REAL(1.0000000000e-18)) * CONVERTED_ANGLE
        return _plane_angle_for_pair_in_radian__cache.updateCache(params: _params, value: 
          tPLANE_ANGLE_MEASURE(/*SDAI.REAL*/_TEMP52))

      default:
        return _plane_angle_for_pair_in_radian__cache.updateCache(params: _params, value: CONVERTED_ANGLE)
      } //end switch
    }
    else {
      return _plane_angle_for_pair_in_radian__cache.updateCache(params: _params, value: CONVERTED_ANGLE)
    }
  }

}

//MARK: - function result cache
private var _plane_angle_for_pair_in_radian__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

