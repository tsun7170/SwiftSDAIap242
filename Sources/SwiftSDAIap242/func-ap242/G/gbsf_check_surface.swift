/* file: gbsf_check_surface.swift 	 generated: Sun Oct 31 15:32:10 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION gbsf_check_surface(
               sf : surface
           ) : BOOLEAN;
    IF ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.B_SPLINE_SURFACE' IN TYPEOF( sf ) ) AND ( sf\
        b_spline_surface.self_intersect = FALSE ) ) OR ( sf\b_spline_surface.self_intersect = UNKNOWN ) THEN
      RETURN( TRUE );
    ELSE
      IF SIZEOF( [ 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SPHERICAL_SURFACE', 
          'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.TOROIDAL_SURFACE' , 
          'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CURVE_BOUNDED_SURFACE' , 
          'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.RECTANGULAR_TRIMMED_SURFACE' ] * TYPEOF( sf ) ) = 
          1 THEN
        RETURN( TRUE );
      ELSE
        IF ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.OFFSET_SURFACE' IN TYPEOF( sf ) ) AND ( sf\
            offset_surface.self_intersect = FALSE ) ) OR ( sf\offset_surface.self_intersect = UNKNOWN ) THEN
          RETURN( gbsf_check_surface( sf\offset_surface.basis_surface ) );
        ELSE
          IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.RECTANGULAR_COMPOSITE_SURFACE' IN TYPEOF( sf )
              THEN
            REPEAT i := 1 TO SIZEOF( sf\rectangular_composite_surface.segments ) BY 1;
              REPEAT j := 1 TO SIZEOF( sf\rectangular_composite_surface.segments[i] ) BY 1;
                IF NOT gbsf_check_surface( sf\rectangular_composite_surface.segments[i][j].parent_surface )
                    THEN
                  RETURN( FALSE );
                END_IF;
              END_REPEAT;
            END_REPEAT;
            RETURN( TRUE );
          ELSE
            IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SURFACE_REPLICA' IN TYPEOF( sf ) THEN
              RETURN( gbsf_check_surface( sf\surface_replica.parent_surface ) );
            ELSE
              IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SURFACE_OF_REVOLUTION' IN TYPEOF( sf )
                  THEN
                RETURN( gbsf_check_curve( sf\swept_surface.swept_curve ) );
              END_IF;
            END_IF;
          END_IF;
        END_IF;
      END_IF;
    END_IF;
    RETURN( FALSE );

  END_FUNCTION; -- gbsf_check_surface (line:41330 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func GBSF_CHECK_SURFACE(_ SF: eSURFACE? ) 
    -> SDAI.BOOLEAN? {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( SF )
    if case .available(let _cached_value) = _gbsf_check_surface__cache.cachedValue(params: _params) {
      return _cached_value as? SDAI.BOOLEAN
    }

    var SF = SF; SDAI.TOUCH(var: &SF)

    
    let _TEMP1 = SDAI.TYPEOF(SF, IS: eB_SPLINE_SURFACE.self)
    let _TEMP2 = SF?.GROUP_REF(eB_SPLINE_SURFACE.self)
    let _TEMP3 = _TEMP2?.SELF_INTERSECT
    let _TEMP4 = _TEMP3 .==. SDAI.FORCE_OPTIONAL(SDAI.LOGICAL(SDAI.FALSE))
    let _TEMP5 = _TEMP1 && _TEMP4
    let _TEMP6 = SF?.GROUP_REF(eB_SPLINE_SURFACE.self)
    let _TEMP7 = _TEMP6?.SELF_INTERSECT
    let _TEMP8 = _TEMP7 .==. SDAI.FORCE_OPTIONAL(SDAI.LOGICAL(SDAI.UNKNOWN))
    let _TEMP9 = _TEMP5 || _TEMP8
    if SDAI.IS_TRUE( _TEMP9 ) {
      return _gbsf_check_surface__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.TRUE))
    }
    else {
      
      let _TEMP10 = ([SDAI.AIE(SDAI.STRING("AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SPHERICAL_SURFACE")), 
        SDAI.AIE(SDAI.STRING("AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.TOROIDAL_SURFACE")), 
        SDAI.AIE(SDAI.STRING("AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CURVE_BOUNDED_SURFACE")), 
        SDAI.AIE(SDAI.STRING("AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.RECTANGULAR_TRIMMED_SURFACE"))] 
        as [SDAI.AggregationInitializerElement<SDAI.STRING>])
      let _TEMP11 = SDAI.TYPEOF(SF)
      let _TEMP12 = SDAI.FORCE_OPTIONAL(_TEMP10) * SDAI.FORCE_OPTIONAL(_TEMP11)
      let _TEMP13 = SDAI.SIZEOF(_TEMP12)
      let _TEMP14 = _TEMP13 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
      if SDAI.IS_TRUE( _TEMP14 ) {
        return _gbsf_check_surface__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.TRUE))
      }
      else {
        
        let _TEMP15 = SDAI.TYPEOF(SF, IS: eOFFSET_SURFACE.self)
        let _TEMP16 = SF?.GROUP_REF(eOFFSET_SURFACE.self)
        let _TEMP17 = _TEMP16?.SELF_INTERSECT
        let _TEMP18 = _TEMP17 .==. SDAI.FORCE_OPTIONAL(SDAI.LOGICAL(SDAI.FALSE))
        let _TEMP19 = _TEMP15 && _TEMP18
        let _TEMP20 = SF?.GROUP_REF(eOFFSET_SURFACE.self)
        let _TEMP21 = _TEMP20?.SELF_INTERSECT
        let _TEMP22 = _TEMP21 .==. SDAI.FORCE_OPTIONAL(SDAI.LOGICAL(SDAI.UNKNOWN))
        let _TEMP23 = _TEMP19 || _TEMP22
        if SDAI.IS_TRUE( _TEMP23 ) {
          
          let _TEMP24 = SF?.GROUP_REF(eOFFSET_SURFACE.self)
          let _TEMP25 = _TEMP24?.BASIS_SURFACE
          let _TEMP26 = GBSF_CHECK_SURFACE(_TEMP25)
          return _gbsf_check_surface__cache.updateCache(params: _params, value: _TEMP26)
        }
        else {
          
          let _TEMP27 = SDAI.TYPEOF(SF, IS: eRECTANGULAR_COMPOSITE_SURFACE.self)
          if SDAI.IS_TRUE( _TEMP27 ) {
            if let incrementControl/*SDAI.INTEGER*/ = SDAI.FROM(/*SDAI.INTEGER*/1, TO:/*SDAI.INTEGER*/
              SDAI.SIZEOF(SF?.GROUP_REF(eRECTANGULAR_COMPOSITE_SURFACE.self)?.SEGMENTS)) {
              for I in incrementControl {
                if let incrementControl/*SDAI.INTEGER*/ = SDAI.FROM(/*SDAI.INTEGER*/1, TO:/*SDAI.INTEGER*/
                  SDAI.SIZEOF(SF?.GROUP_REF(eRECTANGULAR_COMPOSITE_SURFACE.self)?.SEGMENTS[I])) {
                  for J in incrementControl {
                    
                    let _TEMP28 = SF?.GROUP_REF(eRECTANGULAR_COMPOSITE_SURFACE.self)
                    let _TEMP29 = _TEMP28?.SEGMENTS
                    let _TEMP30 = _TEMP29?[I]
                    let _TEMP31 = _TEMP30?[J]
                    let _TEMP32 = _TEMP31?.PARENT_SURFACE
                    let _TEMP33 = GBSF_CHECK_SURFACE(eSURFACE(/*eBOUNDED_SURFACE*/_TEMP32))
                    let _TEMP34 =  !_TEMP33
                    if SDAI.IS_TRUE( _TEMP34 ) {
                      return _gbsf_check_surface__cache.updateCache(params: _params, value: SDAI.BOOLEAN(
                        SDAI.FALSE))
                    }
                  }
                }
              }
            }
            return _gbsf_check_surface__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.TRUE))
          }
          else {
            
            let _TEMP35 = SDAI.TYPEOF(SF, IS: eSURFACE_REPLICA.self)
            if SDAI.IS_TRUE( _TEMP35 ) {
              
              let _TEMP36 = SF?.GROUP_REF(eSURFACE_REPLICA.self)
              let _TEMP37 = _TEMP36?.PARENT_SURFACE
              let _TEMP38 = GBSF_CHECK_SURFACE(_TEMP37)
              return _gbsf_check_surface__cache.updateCache(params: _params, value: _TEMP38)
            }
            else {
              
              let _TEMP39 = SDAI.TYPEOF(SF, IS: eSURFACE_OF_REVOLUTION.self)
              if SDAI.IS_TRUE( _TEMP39 ) {
                
                let _TEMP40 = SF?.GROUP_REF(eSWEPT_SURFACE.self)
                let _TEMP41 = _TEMP40?.SWEPT_CURVE
                let _TEMP42 = GBSF_CHECK_CURVE(eREPRESENTATION_ITEM(/*eCURVE*/_TEMP41))
                return _gbsf_check_surface__cache.updateCache(params: _params, value: _TEMP42)
              }
            }
          }
        }
      }
    }
    return _gbsf_check_surface__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
  }

}

//MARK: - function result cache
private var _gbsf_check_surface__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

