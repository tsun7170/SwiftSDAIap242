/* file: get_coordinate_values.swift 	 generated: Sat Aug 14 13:46:02 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION get_coordinate_values(
               source : tessellated_surface_item
           ) : coordinates_list;

    LOCAL
      coordinate_values : coordinates_list;
      max               : INTEGER;
    END_LOCAL;
    CASE TRUE OF
      'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.TESSELLATED_FACE' IN TYPEOF( source ) : 
        BEGIN
          coordinate_values := source\tessellated_face.coordinates;
          RETURN( coordinate_values );
        END;
      'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.TESSELLATED_SURFACE_SET' IN TYPEOF( source ) : 
        BEGIN
          coordinate_values := source\tessellated_surface_set.coordinates;
          RETURN( coordinate_values );
        END;
      'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.TESSELLATED_SOLID' IN TYPEOF( source ) : 
        BEGIN
          IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.TESSELLATED_FACE' IN TYPEOF( source\
              tessellated_solid.items[1] ) THEN
            coordinate_values := source\tessellated_solid.items[1]\tessellated_face.coordinates;
          END_IF;
          IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.TESSELLATED_EDGE' IN TYPEOF( source\
              tessellated_solid.items[1] ) THEN
            coordinate_values := source\tessellated_solid.items[1]\tessellated_edge.coordinates;
          END_IF;
          IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.TESSELLATED_VERTEX' IN TYPEOF( source\
              tessellated_solid.items[1] ) THEN
            coordinate_values := source\tessellated_solid.items[1]\tessellated_vertex.coordinates;
          END_IF;
          max := SIZEOF( source\tessellated_solid.items );
          IF max = 1 THEN
            RETURN( coordinate_values );
          ELSE
            REPEAT i := 2 TO max BY 1;
              IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.TESSELLATED_FACE' IN TYPEOF( source\
                  tessellated_solid.items[i] ) THEN
                IF NOT ( coordinate_values :=: source\tessellated_solid.items[i]\tessellated_face.coordinates )
                    THEN
                  RETURN( ? );
                END_IF;
              END_IF;
              IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.TESSELLATED_EDGE' IN TYPEOF( source\
                  tessellated_solid.items[i] ) THEN
                IF NOT ( coordinate_values :=: source\tessellated_solid.items[i]\tessellated_edge.coordinates )
                    THEN
                  RETURN( ? );
                END_IF;
              END_IF;
              IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.TESSELLATED_VERTEX' IN TYPEOF( source\
                  tessellated_solid.items[i] ) THEN
                IF NOT ( coordinate_values :=: source\tessellated_solid.items[i]\tessellated_vertex.
                    coordinates ) THEN
                  RETURN( ? );
                END_IF;
              END_IF;
            END_REPEAT;
            RETURN( coordinate_values );
          END_IF;
        END;
      'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.TESSELLATED_SHELL' IN TYPEOF( source ) : 
        BEGIN
          IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.TESSELLATED_FACE' IN TYPEOF( source\
              tessellated_shell.items[1] ) THEN
            coordinate_values := source\tessellated_shell.items[1]\tessellated_face.coordinates;
          END_IF;
          IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.TESSELLATED_EDGE' IN TYPEOF( source\
              tessellated_shell.items[1] ) THEN
            coordinate_values := source\tessellated_shell.items[1]\tessellated_edge.coordinates;
          END_IF;
          IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.TESSELLATED_VERTEX' IN TYPEOF( source\
              tessellated_shell.items[1] ) THEN
            coordinate_values := source\tessellated_shell.items[1]\tessellated_vertex.coordinates;
          END_IF;
          max := SIZEOF( source\tessellated_shell.items );
          IF max = 1 THEN
            RETURN( coordinate_values );
          ELSE
            REPEAT i := 2 TO max BY 1;
              IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.TESSELLATED_FACE' IN TYPEOF( source\
                  tessellated_shell.items[i] ) THEN
                IF NOT ( coordinate_values :=: source\tessellated_shell.items[i]\tessellated_face.coordinates )
                    THEN
                  RETURN( ? );
                END_IF;
              END_IF;
              IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.TESSELLATED_EDGE' IN TYPEOF( source\
                  tessellated_shell.items[i] ) THEN
                IF NOT ( coordinate_values :=: source\tessellated_shell.items[i]\tessellated_edge.coordinates )
                    THEN
                  RETURN( ? );
                END_IF;
              END_IF;
              IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.TESSELLATED_VERTEX' IN TYPEOF( source\
                  tessellated_shell.items[i] ) THEN
                IF NOT ( coordinate_values :=: source\tessellated_shell.items[i]\tessellated_vertex.
                    coordinates ) THEN
                  RETURN( ? );
                END_IF;
              END_IF;
            END_REPEAT;
            RETURN( coordinate_values );
          END_IF;
        END;
    END_CASE;
    RETURN( ? );

  END_FUNCTION; -- get_coordinate_values (line:41507 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func GET_COORDINATE_VALUES(_ SOURCE: sTESSELLATED_SURFACE_ITEM? ) 
    -> eCOORDINATES_LIST? {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( SOURCE )
    if case .available(let _cached_value) = _get_coordinate_values__cache.cachedValue(params: _params) {
      return _cached_value as? eCOORDINATES_LIST
    }

    var SOURCE = SOURCE; SDAI.TOUCH(var: &SOURCE)

    //LOCAL
    var COORDINATE_VALUES: eCOORDINATES_LIST? 
    var MAX: SDAI.INTEGER? 
    //END_LOCAL

    if let selector = SDAI.FORCE_OPTIONAL(SDAI.TRUE) {
      switch selector {
      case SDAI.TYPEOF(SOURCE, IS: eTESSELLATED_FACE.self):
        //BEGIN
        
        let _TEMP1 = SOURCE?.GROUP_REF(eTESSELLATED_FACE.self)
        let _TEMP2 = _TEMP1?.COORDINATES
        COORDINATE_VALUES = _TEMP2
        return _get_coordinate_values__cache.updateCache(params: _params, value: COORDINATE_VALUES)
        //END

      case SDAI.TYPEOF(SOURCE, IS: eTESSELLATED_SURFACE_SET.self):
        //BEGIN
        
        let _TEMP3 = SOURCE?.GROUP_REF(eTESSELLATED_SURFACE_SET.self)
        let _TEMP4 = _TEMP3?.COORDINATES
        COORDINATE_VALUES = _TEMP4
        return _get_coordinate_values__cache.updateCache(params: _params, value: COORDINATE_VALUES)
        //END

      case SDAI.TYPEOF(SOURCE, IS: eTESSELLATED_SOLID.self):
        //BEGIN
        
        let _TEMP5 = SDAI.TYPEOF(SOURCE?.GROUP_REF(eTESSELLATED_SOLID.self)?.ITEMS[1], 
          IS: eTESSELLATED_FACE.self)
        if SDAI.IS_TRUE( _TEMP5 ) {
          
          let _TEMP6 = SOURCE?.GROUP_REF(eTESSELLATED_SOLID.self)
          let _TEMP7 = _TEMP6?.ITEMS
          let _TEMP8 = _TEMP7?[1]
          let _TEMP9 = _TEMP8?.GROUP_REF(eTESSELLATED_FACE.self)
          let _TEMP10 = _TEMP9?.COORDINATES
          COORDINATE_VALUES = _TEMP10
        }
        
        let _TEMP11 = SDAI.TYPEOF(SOURCE?.GROUP_REF(eTESSELLATED_SOLID.self)?.ITEMS[1], 
          IS: eTESSELLATED_EDGE.self)
        if SDAI.IS_TRUE( _TEMP11 ) {
          
          let _TEMP12 = SOURCE?.GROUP_REF(eTESSELLATED_SOLID.self)
          let _TEMP13 = _TEMP12?.ITEMS
          let _TEMP14 = _TEMP13?[1]
          let _TEMP15 = _TEMP14?.GROUP_REF(eTESSELLATED_EDGE.self)
          let _TEMP16 = _TEMP15?.COORDINATES
          COORDINATE_VALUES = _TEMP16
        }
        
        let _TEMP17 = SDAI.TYPEOF(SOURCE?.GROUP_REF(eTESSELLATED_SOLID.self)?.ITEMS[1], 
          IS: eTESSELLATED_VERTEX.self)
        if SDAI.IS_TRUE( _TEMP17 ) {
          
          let _TEMP18 = SOURCE?.GROUP_REF(eTESSELLATED_SOLID.self)
          let _TEMP19 = _TEMP18?.ITEMS
          let _TEMP20 = _TEMP19?[1]
          let _TEMP21 = _TEMP20?.GROUP_REF(eTESSELLATED_VERTEX.self)
          let _TEMP22 = _TEMP21?.COORDINATES
          COORDINATE_VALUES = _TEMP22
        }
        
        let _TEMP23 = SOURCE?.GROUP_REF(eTESSELLATED_SOLID.self)
        let _TEMP24 = _TEMP23?.ITEMS
        let _TEMP25 = SDAI.SIZEOF(_TEMP24)
        MAX = _TEMP25
        
        let _TEMP26 = MAX .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
        if SDAI.IS_TRUE( _TEMP26 ) {
          return _get_coordinate_values__cache.updateCache(params: _params, value: COORDINATE_VALUES)
        }
        else {
          if let incrementControl/*SDAI.INTEGER*/ = SDAI.FROM(/*SDAI.INTEGER*/2, TO:/*SDAI.INTEGER*/MAX) {
            for I in incrementControl {
              
              let _TEMP27 = SDAI.TYPEOF(SOURCE?.GROUP_REF(eTESSELLATED_SOLID.self)?.ITEMS[I], 
                IS: eTESSELLATED_FACE.self)
              if SDAI.IS_TRUE( _TEMP27 ) {
                
                let _TEMP28 = SOURCE?.GROUP_REF(eTESSELLATED_SOLID.self)
                let _TEMP29 = _TEMP28?.ITEMS
                let _TEMP30 = _TEMP29?[I]
                let _TEMP31 = _TEMP30?.GROUP_REF(eTESSELLATED_FACE.self)
                let _TEMP32 = _TEMP31?.COORDINATES
                let _TEMP33 = COORDINATE_VALUES .===. _TEMP32
                let _TEMP34 =  !_TEMP33
                if SDAI.IS_TRUE( _TEMP34 ) {
                  return _get_coordinate_values__cache.updateCache(params: _params, value: (nil as 
                    eCOORDINATES_LIST?))
                }
              }
              
              let _TEMP35 = SDAI.TYPEOF(SOURCE?.GROUP_REF(eTESSELLATED_SOLID.self)?.ITEMS[I], 
                IS: eTESSELLATED_EDGE.self)
              if SDAI.IS_TRUE( _TEMP35 ) {
                
                let _TEMP36 = SOURCE?.GROUP_REF(eTESSELLATED_SOLID.self)
                let _TEMP37 = _TEMP36?.ITEMS
                let _TEMP38 = _TEMP37?[I]
                let _TEMP39 = _TEMP38?.GROUP_REF(eTESSELLATED_EDGE.self)
                let _TEMP40 = _TEMP39?.COORDINATES
                let _TEMP41 = COORDINATE_VALUES .===. _TEMP40
                let _TEMP42 =  !_TEMP41
                if SDAI.IS_TRUE( _TEMP42 ) {
                  return _get_coordinate_values__cache.updateCache(params: _params, value: (nil as 
                    eCOORDINATES_LIST?))
                }
              }
              
              let _TEMP43 = SDAI.TYPEOF(SOURCE?.GROUP_REF(eTESSELLATED_SOLID.self)?.ITEMS[I], 
                IS: eTESSELLATED_VERTEX.self)
              if SDAI.IS_TRUE( _TEMP43 ) {
                
                let _TEMP44 = SOURCE?.GROUP_REF(eTESSELLATED_SOLID.self)
                let _TEMP45 = _TEMP44?.ITEMS
                let _TEMP46 = _TEMP45?[I]
                let _TEMP47 = _TEMP46?.GROUP_REF(eTESSELLATED_VERTEX.self)
                let _TEMP48 = _TEMP47?.COORDINATES
                let _TEMP49 = COORDINATE_VALUES .===. _TEMP48
                let _TEMP50 =  !_TEMP49
                if SDAI.IS_TRUE( _TEMP50 ) {
                  return _get_coordinate_values__cache.updateCache(params: _params, value: (nil as 
                    eCOORDINATES_LIST?))
                }
              }
            }
          }
          return _get_coordinate_values__cache.updateCache(params: _params, value: COORDINATE_VALUES)
        }
        //END

      case SDAI.TYPEOF(SOURCE, IS: eTESSELLATED_SHELL.self):
        //BEGIN
        
        let _TEMP51 = SDAI.TYPEOF(SOURCE?.GROUP_REF(eTESSELLATED_SHELL.self)?.ITEMS[1], 
          IS: eTESSELLATED_FACE.self)
        if SDAI.IS_TRUE( _TEMP51 ) {
          
          let _TEMP52 = SOURCE?.GROUP_REF(eTESSELLATED_SHELL.self)
          let _TEMP53 = _TEMP52?.ITEMS
          let _TEMP54 = _TEMP53?[1]
          let _TEMP55 = _TEMP54?.GROUP_REF(eTESSELLATED_FACE.self)
          let _TEMP56 = _TEMP55?.COORDINATES
          COORDINATE_VALUES = _TEMP56
        }
        
        let _TEMP57 = SDAI.TYPEOF(SOURCE?.GROUP_REF(eTESSELLATED_SHELL.self)?.ITEMS[1], 
          IS: eTESSELLATED_EDGE.self)
        if SDAI.IS_TRUE( _TEMP57 ) {
          
          let _TEMP58 = SOURCE?.GROUP_REF(eTESSELLATED_SHELL.self)
          let _TEMP59 = _TEMP58?.ITEMS
          let _TEMP60 = _TEMP59?[1]
          let _TEMP61 = _TEMP60?.GROUP_REF(eTESSELLATED_EDGE.self)
          let _TEMP62 = _TEMP61?.COORDINATES
          COORDINATE_VALUES = _TEMP62
        }
        
        let _TEMP63 = SDAI.TYPEOF(SOURCE?.GROUP_REF(eTESSELLATED_SHELL.self)?.ITEMS[1], 
          IS: eTESSELLATED_VERTEX.self)
        if SDAI.IS_TRUE( _TEMP63 ) {
          
          let _TEMP64 = SOURCE?.GROUP_REF(eTESSELLATED_SHELL.self)
          let _TEMP65 = _TEMP64?.ITEMS
          let _TEMP66 = _TEMP65?[1]
          let _TEMP67 = _TEMP66?.GROUP_REF(eTESSELLATED_VERTEX.self)
          let _TEMP68 = _TEMP67?.COORDINATES
          COORDINATE_VALUES = _TEMP68
        }
        
        let _TEMP69 = SOURCE?.GROUP_REF(eTESSELLATED_SHELL.self)
        let _TEMP70 = _TEMP69?.ITEMS
        let _TEMP71 = SDAI.SIZEOF(_TEMP70)
        MAX = _TEMP71
        
        let _TEMP72 = MAX .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
        if SDAI.IS_TRUE( _TEMP72 ) {
          return _get_coordinate_values__cache.updateCache(params: _params, value: COORDINATE_VALUES)
        }
        else {
          if let incrementControl/*SDAI.INTEGER*/ = SDAI.FROM(/*SDAI.INTEGER*/2, TO:/*SDAI.INTEGER*/MAX) {
            for I in incrementControl {
              
              let _TEMP73 = SDAI.TYPEOF(SOURCE?.GROUP_REF(eTESSELLATED_SHELL.self)?.ITEMS[I], 
                IS: eTESSELLATED_FACE.self)
              if SDAI.IS_TRUE( _TEMP73 ) {
                
                let _TEMP74 = SOURCE?.GROUP_REF(eTESSELLATED_SHELL.self)
                let _TEMP75 = _TEMP74?.ITEMS
                let _TEMP76 = _TEMP75?[I]
                let _TEMP77 = _TEMP76?.GROUP_REF(eTESSELLATED_FACE.self)
                let _TEMP78 = _TEMP77?.COORDINATES
                let _TEMP79 = COORDINATE_VALUES .===. _TEMP78
                let _TEMP80 =  !_TEMP79
                if SDAI.IS_TRUE( _TEMP80 ) {
                  return _get_coordinate_values__cache.updateCache(params: _params, value: (nil as 
                    eCOORDINATES_LIST?))
                }
              }
              
              let _TEMP81 = SDAI.TYPEOF(SOURCE?.GROUP_REF(eTESSELLATED_SHELL.self)?.ITEMS[I], 
                IS: eTESSELLATED_EDGE.self)
              if SDAI.IS_TRUE( _TEMP81 ) {
                
                let _TEMP82 = SOURCE?.GROUP_REF(eTESSELLATED_SHELL.self)
                let _TEMP83 = _TEMP82?.ITEMS
                let _TEMP84 = _TEMP83?[I]
                let _TEMP85 = _TEMP84?.GROUP_REF(eTESSELLATED_EDGE.self)
                let _TEMP86 = _TEMP85?.COORDINATES
                let _TEMP87 = COORDINATE_VALUES .===. _TEMP86
                let _TEMP88 =  !_TEMP87
                if SDAI.IS_TRUE( _TEMP88 ) {
                  return _get_coordinate_values__cache.updateCache(params: _params, value: (nil as 
                    eCOORDINATES_LIST?))
                }
              }
              
              let _TEMP89 = SDAI.TYPEOF(SOURCE?.GROUP_REF(eTESSELLATED_SHELL.self)?.ITEMS[I], 
                IS: eTESSELLATED_VERTEX.self)
              if SDAI.IS_TRUE( _TEMP89 ) {
                
                let _TEMP90 = SOURCE?.GROUP_REF(eTESSELLATED_SHELL.self)
                let _TEMP91 = _TEMP90?.ITEMS
                let _TEMP92 = _TEMP91?[I]
                let _TEMP93 = _TEMP92?.GROUP_REF(eTESSELLATED_VERTEX.self)
                let _TEMP94 = _TEMP93?.COORDINATES
                let _TEMP95 = COORDINATE_VALUES .===. _TEMP94
                let _TEMP96 =  !_TEMP95
                if SDAI.IS_TRUE( _TEMP96 ) {
                  return _get_coordinate_values__cache.updateCache(params: _params, value: (nil as 
                    eCOORDINATES_LIST?))
                }
              }
            }
          }
          return _get_coordinate_values__cache.updateCache(params: _params, value: COORDINATE_VALUES)
        }
        //END

      default: break
      } //end switch
    }
    return _get_coordinate_values__cache.updateCache(params: _params, value: (nil as eCOORDINATES_LIST?))
  }

}

//MARK: - function result cache
private var _get_coordinate_values__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

