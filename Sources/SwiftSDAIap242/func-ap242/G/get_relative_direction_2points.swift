/* file: get_relative_direction_2points.swift 	 generated: Sun Oct 31 15:32:10 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION get_relative_direction_2points(
               cp1, cp2 : cartesian_point
           ) : direction;

    LOCAL
      d1        : REAL;
      d2        : REAL;
      d3        : REAL;
      magnitude : REAL;
      result    : direction := ?;
    END_LOCAL;
    IF ( cp1.dim <> 3 ) OR ( cp2.dim <> 3 ) THEN
      RETURN( result );
    ELSE

      BEGIN
        d1 := cp2.coordinates[1] - cp1.coordinates[1];
        d2 := cp2.coordinates[2] - cp1.coordinates[2];
        d3 := cp2.coordinates[3] - cp1.coordinates[3];
        magnitude := SQRT( ( d1 * d1 ) + ( d2 * d2 ) + ( d3 * d3 ) );
        IF magnitude = 0 THEN
          RETURN( result );
        END_IF;
        result := dummy_gri || direction( [d1, d2, d3] );
      END;
    END_IF;
    RETURN( result );

  END_FUNCTION; -- get_relative_direction_2points (line:41872 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func GET_RELATIVE_DIRECTION_2POINTS(
    CP1: eCARTESIAN_POINT? , CP2: eCARTESIAN_POINT? ) 
    -> eDIRECTION? {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( CP1, CP2 )
    if case .available(let _cached_value) = _get_relative_direction_2points__cache.cachedValue(params: _params) {
      return _cached_value as? eDIRECTION
    }

    var CP1 = CP1; SDAI.TOUCH(var: &CP1)
    var CP2 = CP2; SDAI.TOUCH(var: &CP2)

    //LOCAL
    var D1: SDAI.REAL? 
    var D2: SDAI.REAL? 
    var D3: SDAI.REAL? 
    var MAGNITUDE: SDAI.REAL? 
    var RESULT: eDIRECTION?  = (nil as eDIRECTION?); SDAI.TOUCH(var: &RESULT)
    //END_LOCAL

    
    let _TEMP1 = CP1?.DIM
    let _TEMP2 = _TEMP1 .!=. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(3))
    let _TEMP3 = CP2?.DIM
    let _TEMP4 = _TEMP3 .!=. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(3))
    let _TEMP5 = _TEMP2 || _TEMP4
    if SDAI.IS_TRUE( _TEMP5 ) {
      return _get_relative_direction_2points__cache.updateCache(params: _params, value: RESULT)
    }
    else {
      //BEGIN
      
      let _TEMP6 = CP2?.COORDINATES
      let _TEMP7 = _TEMP6?[1]
      let _TEMP8 = CP1?.COORDINATES
      let _TEMP9 = _TEMP8?[1]
      let _TEMP10 = _TEMP7 - _TEMP9
      D1 = _TEMP10
      
      let _TEMP11 = CP2?.COORDINATES
      let _TEMP12 = _TEMP11?[2]
      let _TEMP13 = CP1?.COORDINATES
      let _TEMP14 = _TEMP13?[2]
      let _TEMP15 = _TEMP12 - _TEMP14
      D2 = _TEMP15
      
      let _TEMP16 = CP2?.COORDINATES
      let _TEMP17 = _TEMP16?[3]
      let _TEMP18 = CP1?.COORDINATES
      let _TEMP19 = _TEMP18?[3]
      let _TEMP20 = _TEMP17 - _TEMP19
      D3 = _TEMP20
      
      let _TEMP21 = D1 * D1
      let _TEMP22 = D2 * D2
      let _TEMP23 = _TEMP21 + _TEMP22
      let _TEMP24 = D3 * D3
      let _TEMP25 = _TEMP23 + _TEMP24
      let _TEMP26 = SDAI.SQRT(_TEMP25)
      MAGNITUDE = _TEMP26
      
      let _TEMP27 = MAGNITUDE .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      if SDAI.IS_TRUE( _TEMP27 ) {
        return _get_relative_direction_2points__cache.updateCache(params: _params, value: RESULT)
      }
      
      let _TEMP28 = SDAI.LIST<SDAI.REAL>(bound1: SDAI.UNWRAP(SDAI.INTEGER(2)), bound2: SDAI.INTEGER(3), 
        ([SDAI.AIE(D1), SDAI.AIE(D2), 
        SDAI.AIE(D3)] as [SDAI.AggregationInitializerElement<SDAI.REAL>]))
      let _TEMP29 = _direction(DIRECTION_RATIOS: SDAI.UNWRAP(_TEMP28))
      let _TEMP30 = DUMMY_GRI .||. _TEMP29
      RESULT = eDIRECTION(/*SDAI.GENERIC_ENTITY*/_TEMP30)
      //END
    }
    return _get_relative_direction_2points__cache.updateCache(params: _params, value: RESULT)
  }

}

//MARK: - function result cache
private var _get_relative_direction_2points__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

