/* file: get_plane_of_implicit_geometry.swift 	 generated: Mon Jan  3 16:32:52 2022 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.1, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION get_plane_of_implicit_geometry(
               ps : positioned_sketch
           ) : plane;

    LOCAL
      sb     : sketch_basis_select := ps.sketch_basis;
      result : plane := ?;
    END_LOCAL;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.FACE_SURFACE' IN TYPEOF( sb ) THEN
      result := sb\face_surface.face_geometry;
    ELSE
      IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CURVE_BOUNDED_SURFACE' IN TYPEOF( sb ) THEN
        result := sb\curve_bounded_surface.basis_surface;
      ELSE
        IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PLANAR_CURVE_SELECT' IN TYPEOF( sb ) THEN

          BEGIN
            IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CONIC' IN TYPEOF( sb ) THEN
              result := dummy_gri || surface(  ) || elementary_surface( sb\conic.position ) || plane(  );
            END_IF;
            IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.TRIMMED_CURVE' IN TYPEOF( sb ) THEN

              BEGIN
                result := get_plane_of_implicit_geometry( dummy_gri || positioned_sketch( sb\trimmed_curve.
                    basis_curve, [] ) );
              END;
            END_IF;
            IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PCURVE' IN TYPEOF( sb ) THEN
              result := sb\pcurve.basis_surface;
            END_IF;
            IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SURFACE_CURVE' IN TYPEOF( sb ) THEN

              BEGIN
                IF ( SIZEOF( sb\surface_curve.basis_surface ) = 1 ) AND ( 
                    'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PLANE'  IN TYPEOF( sb\surface_curve.
                    basis_surface[1] ) ) THEN
                  result := sb\surface_curve.basis_surface[1];
                ELSE
                  IF ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PLANE' IN TYPEOF( sb\surface_curve.
                      basis_surface[1] ) ) AND ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PLANE' IN 
                      TYPEOF( sb\surface_curve.basis_surface[2] ) ) THEN
                    result := ?;
                  ELSE
                    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PLANE' IN TYPEOF( sb\surface_curve.
                        basis_surface[1] ) THEN
                      result := sb\surface_curve.basis_surface[1];
                    ELSE
                      result := sb\surface_curve.basis_surface[2];
                    END_IF;
                  END_IF;
                END_IF;
              END;
            END_IF;
          END;
        END_IF;
      END_IF;
    END_IF;
    RETURN( result );

  END_FUNCTION; -- get_plane_of_implicit_geometry (line:41803 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func GET_PLANE_OF_IMPLICIT_GEOMETRY(
    _ PS: ePOSITIONED_SKETCH? ) -> ePLANE? {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( PS )
    if case .available(let _cached_value) = _get_plane_of_implicit_geometry__cache.cachedValue(params: _params) {
      return _cached_value as? ePLANE
    }

    var PS = PS; SDAI.TOUCH(var: &PS)

    //LOCAL
    var SB: sSKETCH_BASIS_SELECT?  = PS?.SKETCH_BASIS; SDAI.TOUCH(var: &SB)
    var RESULT: ePLANE?  = (nil as ePLANE?); SDAI.TOUCH(var: &RESULT)
    //END_LOCAL

    
    let _TEMP1 = SDAI.TYPEOF(SB, IS: eFACE_SURFACE.self)
    if SDAI.IS_TRUE( _TEMP1 ) {
      
      let _TEMP2 = SB?.GROUP_REF(eFACE_SURFACE.self)
      let _TEMP3 = _TEMP2?.FACE_GEOMETRY
      RESULT = ePLANE(/*eSURFACE*/_TEMP3)
    }
    else {
      
      let _TEMP4 = SDAI.TYPEOF(SB, IS: eCURVE_BOUNDED_SURFACE.self)
      if SDAI.IS_TRUE( _TEMP4 ) {
        
        let _TEMP5 = SB?.GROUP_REF(eCURVE_BOUNDED_SURFACE.self)
        let _TEMP6 = _TEMP5?.BASIS_SURFACE
        RESULT = ePLANE(/*eSURFACE*/_TEMP6)
      }
      else {
        
        let _TEMP7 = SDAI.TYPEOF(SB, IS: sPLANAR_CURVE_SELECT.self)
        if SDAI.IS_TRUE( _TEMP7 ) {
          //BEGIN
          
          let _TEMP8 = SDAI.TYPEOF(SB, IS: eCONIC.self)
          if SDAI.IS_TRUE( _TEMP8 ) {
            
            let _TEMP9 = _surface()
            let _TEMP10 = DUMMY_GRI .||. _TEMP9
            let _TEMP11 = SB?.GROUP_REF(eCONIC.self)
            let _TEMP12 = _TEMP11?.POSITION
            let _TEMP13 = _elementary_surface(POSITION: SDAI.UNWRAP(eAXIS2_PLACEMENT_3D(/*sAXIS2_PLACEMENT*/
              _TEMP12)))
            let _TEMP14 = _TEMP10 .||. _TEMP13
            let _TEMP15 = _plane()
            let _TEMP16 = _TEMP14 .||. _TEMP15
            RESULT = ePLANE(/*SDAI.GENERIC_ENTITY*/_TEMP16)
          }
          
          let _TEMP17 = SDAI.TYPEOF(SB, IS: eTRIMMED_CURVE.self)
          if SDAI.IS_TRUE( _TEMP17 ) {
            //BEGIN
            
            let _TEMP18 = SB?.GROUP_REF(eTRIMMED_CURVE.self)
            let _TEMP19 = _TEMP18?.BASIS_CURVE
            let _TEMP20 = SDAI.SET<eAUXILIARY_GEOMETRIC_REPRESENTATION_ITEM>(
              bound1: SDAI.UNWRAP(SDAI.INTEGER(0)), bound2: (nil as SDAI.INTEGER?), 
              SDAI.EMPLY_AGGREGATE)
            let _TEMP21 = _positioned_sketch(
              SKETCH_BASIS: SDAI.UNWRAP(sSKETCH_BASIS_SELECT(/*eCURVE*/_TEMP19)), 
              AUXILIARY_ELEMENTS: SDAI.UNWRAP(_TEMP20))
            let _TEMP22 = DUMMY_GRI .||. _TEMP21
            let _TEMP23 = GET_PLANE_OF_IMPLICIT_GEOMETRY(ePOSITIONED_SKETCH(/*SDAI.GENERIC_ENTITY*/_TEMP22))
            RESULT = _TEMP23
            //END
          }
          
          let _TEMP24 = SDAI.TYPEOF(SB, IS: ePCURVE.self)
          if SDAI.IS_TRUE( _TEMP24 ) {
            
            let _TEMP25 = SB?.GROUP_REF(ePCURVE.self)
            let _TEMP26 = _TEMP25?.BASIS_SURFACE
            RESULT = ePLANE(/*eSURFACE*/_TEMP26)
          }
          
          let _TEMP27 = SDAI.TYPEOF(SB, IS: eSURFACE_CURVE.self)
          if SDAI.IS_TRUE( _TEMP27 ) {
            //BEGIN
            
            let _TEMP28 = SB?.GROUP_REF(eSURFACE_CURVE.self)
            let _TEMP29 = _TEMP28?.BASIS_SURFACE
            let _TEMP30 = SDAI.SIZEOF(_TEMP29)
            let _TEMP31 = _TEMP30 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
            let _TEMP32 = SDAI.TYPEOF(SB?.GROUP_REF(eSURFACE_CURVE.self)?.BASIS_SURFACE?[1], IS: ePLANE.self)
            let _TEMP33 = _TEMP31 && _TEMP32
            if SDAI.IS_TRUE( _TEMP33 ) {
              
              let _TEMP34 = SB?.GROUP_REF(eSURFACE_CURVE.self)
              let _TEMP35 = _TEMP34?.BASIS_SURFACE
              let _TEMP36 = _TEMP35?[1]
              RESULT = ePLANE(/*eSURFACE*/_TEMP36)
            }
            else {
              
              let _TEMP37 = SDAI.TYPEOF(SB?.GROUP_REF(eSURFACE_CURVE.self)?.BASIS_SURFACE?[1], 
                IS: ePLANE.self)
              let _TEMP38 = SDAI.TYPEOF(SB?.GROUP_REF(eSURFACE_CURVE.self)?.BASIS_SURFACE?[2], 
                IS: ePLANE.self)
              let _TEMP39 = _TEMP37 && _TEMP38
              if SDAI.IS_TRUE( _TEMP39 ) {
                RESULT = (nil as ePLANE?)
              }
              else {
                
                let _TEMP40 = SDAI.TYPEOF(SB?.GROUP_REF(eSURFACE_CURVE.self)?.BASIS_SURFACE?[1], 
                  IS: ePLANE.self)
                if SDAI.IS_TRUE( _TEMP40 ) {
                  
                  let _TEMP41 = SB?.GROUP_REF(eSURFACE_CURVE.self)
                  let _TEMP42 = _TEMP41?.BASIS_SURFACE
                  let _TEMP43 = _TEMP42?[1]
                  RESULT = ePLANE(/*eSURFACE*/_TEMP43)
                }
                else {
                  
                  let _TEMP44 = SB?.GROUP_REF(eSURFACE_CURVE.self)
                  let _TEMP45 = _TEMP44?.BASIS_SURFACE
                  let _TEMP46 = _TEMP45?[2]
                  RESULT = ePLANE(/*eSURFACE*/_TEMP46)
                }
              }
            }
            //END
          }
          //END
        }
      }
    }
    return _get_plane_of_implicit_geometry__cache.updateCache(params: _params, value: RESULT)
  }

}

//MARK: - function result cache
private var _get_plane_of_implicit_geometry__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

