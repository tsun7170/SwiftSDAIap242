/* file: get_tri_in_representations.swift 	 generated: Mon Jan  3 16:32:52 2022 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.1, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION get_tri_in_representations(
               members : SET OF representation
           ) : SET OF topological_representation_item;

    LOCAL
      tri_set : SET OF topological_representation_item := [];
    END_LOCAL;
    IF SIZEOF( members ) = 0 THEN
      RETURN( ? );
    END_IF;
    REPEAT i := LOINDEX( members ) TO HIINDEX( members ) BY 1;
      REPEAT j := LOINDEX( members[i]\representation.items ) TO HIINDEX( members[i]\representation.items )
          BY 1;
        IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.TOPOLOGICAL_REPRESENTATION_ITEM' IN TYPEOF( 
            members[i]\representation.items[j] ) THEN
          tri_set := tri_set + members[i]\representation.items[j];
        END_IF;
      END_REPEAT;
    END_REPEAT;
    RETURN( tri_set );

  END_FUNCTION; -- get_tri_in_representations (line:51592 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func GET_TRI_IN_REPRESENTATIONS(_ MEMBERS: SDAI.SET<eREPRESENTATION>? ) 
    -> SDAI.SET<eTOPOLOGICAL_REPRESENTATION_ITEM>? {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( MEMBERS )
    if case .available(let _cached_value) = _get_tri_in_representations__cache.cachedValue(params: _params) {
      return _cached_value as? SDAI.SET<eTOPOLOGICAL_REPRESENTATION_ITEM>
    }

    var MEMBERS = MEMBERS; SDAI.TOUCH(var: &MEMBERS)

    //LOCAL
    var TRI_SET: SDAI.SET<eTOPOLOGICAL_REPRESENTATION_ITEM>?  = SDAI.SET<eTOPOLOGICAL_REPRESENTATION_ITEM>(
                                                                SDAI.EMPLY_AGGREGATE); SDAI.TOUCH(var: &TRI_SET)

    
    let _TEMP1 = SDAI.SIZEOF(MEMBERS)
    let _TEMP2 = _TEMP1 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
    if SDAI.IS_TRUE( _TEMP2 ) {
      return _get_tri_in_representations__cache.updateCache(params: _params, value: (nil as SDAI.SET<
        eTOPOLOGICAL_REPRESENTATION_ITEM>?))
    }
    if let incrementControl/*SDAI.INTEGER*/ = SDAI.FROM(/*SDAI.INTEGER*/SDAI.LOINDEX(
      MEMBERS), TO:/*SDAI.INTEGER*/SDAI.HIINDEX(MEMBERS)) {
      for I in incrementControl {
        if let incrementControl/*SDAI.INTEGER*/ = SDAI.FROM(/*SDAI.INTEGER*/SDAI.LOINDEX(
          MEMBERS?[I]?.GROUP_REF(eREPRESENTATION.self)?.ITEMS), TO:/*SDAI.INTEGER*/SDAI.HIINDEX(
          MEMBERS?[I]?.GROUP_REF(eREPRESENTATION.self)?.ITEMS)) {
          for J in incrementControl {
            
            let _TEMP3 = SDAI.TYPEOF(MEMBERS?[I]?.GROUP_REF(eREPRESENTATION.self)?.ITEMS[J], 
              IS: eTOPOLOGICAL_REPRESENTATION_ITEM.self)
            if SDAI.IS_TRUE( _TEMP3 ) {
              
              let _TEMP4 = MEMBERS?[I]
              let _TEMP5 = _TEMP4?.GROUP_REF(eREPRESENTATION.self)
              let _TEMP6 = _TEMP5?.ITEMS
              let _TEMP7 = _TEMP6?[J]
              let _TEMP8 = TRI_SET + _TEMP7
              TRI_SET = SDAI.SET<eTOPOLOGICAL_REPRESENTATION_ITEM>(/*SDAI.SET<SDAI.GENERIC_ENTITY>*/_TEMP8)
            }
          }
        }
      }
    }
    return _get_tri_in_representations__cache.updateCache(params: _params, value: TRI_SET)
  }

}

//MARK: - function result cache
private var _get_tri_in_representations__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

