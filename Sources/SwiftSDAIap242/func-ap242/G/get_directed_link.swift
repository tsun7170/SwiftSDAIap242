/* file: get_directed_link.swift 	 generated: Sun Oct 31 15:32:10 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION get_directed_link(
               nodes : LIST OF representation;
               undirected_link : LIST OF chained_representation_link
           ) : LIST OF representation_relationship;

    LOCAL
      directed_link : LIST OF representation_relationship := [];
    END_LOCAL;
    IF ( SIZEOF( nodes ) <> ( SIZEOF( undirected_link ) + 1 ) ) OR ( VALUE_UNIQUE( nodes ) = FALSE ) THEN
      RETURN( ? );
    END_IF;
    REPEAT i := 1 TO SIZEOF( undirected_link ) BY 1;
      CASE TRUE OF
        'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.REPRESENTATION_CONTEXT' IN TYPEOF( undirected_link[i] ) : 
          BEGIN
            IF ( nodes[i]\representation.context_of_items :=: undirected_link[i] ) AND ( nodes[i + 1]\
                representation.context_of_items :=: undirected_link[i] ) THEN
              INSERT( directed_link, representation_relationship( '', '', nodes[i + 1], nodes[i] ), i - 1 );
            ELSE
              RETURN( ? );
            END_IF;
          END;
        'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.REPRESENTATION_RELATIONSHIP' IN TYPEOF( 
            undirected_link[i] )  : 
          BEGIN
            IF ( ( nodes[i] :=: undirected_link[i]\representation_relationship.rep_1 ) AND ( nodes[i + 1] :=:
                undirected_link[i]\representation_relationship.rep_2 ) ) OR ( ( nodes[i] :=: undirected_link[
                i]\representation_relationship.rep_2 ) AND ( nodes[i + 1] :=: undirected_link[i]\
                representation_relationship.rep_1 ) ) THEN
              INSERT( directed_link, representation_relationship( '', '', nodes[i + 1], nodes[i] ), i - 1 );
            ELSE
              RETURN( ? );
            END_IF;
          END;
        'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.MAPPED_ITEM' IN TYPEOF( undirected_link[i] ) : 
          BEGIN
            IF ( nodes[i] IN using_representations( undirected_link[i] ) ) AND ( nodes[i + 1] :=: 
                undirected_link[i]\mapped_item.mapping_source\representation_map.mapped_representation )
                THEN
              INSERT( directed_link, representation_relationship( '', '', nodes[i + 1], nodes[i] ), i - 1 );
            ELSE
              RETURN( ? );
            END_IF;
          END;
        OTHERWISE                 :           RETURN( ? );
      END_CASE;
    END_REPEAT;
    IF VALUE_UNIQUE( directed_link ) = FALSE THEN
      RETURN( ? );
    END_IF;
    RETURN( directed_link );

  END_FUNCTION; -- get_directed_link (line:41659 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func GET_DIRECTED_LINK(NODES: SDAI.LIST<eREPRESENTATION>? , UNDIRECTED_LINK: SDAI.LIST<
                         sCHAINED_REPRESENTATION_LINK>? ) 
    -> SDAI.LIST<eREPRESENTATION_RELATIONSHIP>? {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( NODES, UNDIRECTED_LINK )
    if case .available(let _cached_value) = _get_directed_link__cache.cachedValue(params: _params) {
      return _cached_value as? SDAI.LIST<eREPRESENTATION_RELATIONSHIP>
    }

    var NODES = NODES; SDAI.TOUCH(var: &NODES)
    var UNDIRECTED_LINK = UNDIRECTED_LINK; SDAI.TOUCH(var: &UNDIRECTED_LINK)

    //LOCAL
    var DIRECTED_LINK: SDAI.LIST<eREPRESENTATION_RELATIONSHIP>?  = SDAI.LIST<eREPRESENTATION_RELATIONSHIP>(
                                                                   SDAI.EMPLY_AGGREGATE); SDAI.TOUCH(var: &DIRECTED_LINK)

    
    let _TEMP1 = SDAI.SIZEOF(NODES)
    let _TEMP2 = SDAI.SIZEOF(UNDIRECTED_LINK)
    let _TEMP3 = _TEMP2 + SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
    let _TEMP4 = _TEMP1 .!=. _TEMP3
    let _TEMP5 = SDAI.VALUE_UNIQUE(NODES)
    let _TEMP6 = SDAI.FORCE_OPTIONAL(_TEMP5) .==. SDAI.FORCE_OPTIONAL(SDAI.LOGICAL(SDAI.FALSE))
    let _TEMP7 = _TEMP4 || _TEMP6
    if SDAI.IS_TRUE( _TEMP7 ) {
      return _get_directed_link__cache.updateCache(params: _params, value: (nil as SDAI.LIST<
        eREPRESENTATION_RELATIONSHIP>?))
    }
    if let incrementControl/*SDAI.INTEGER*/ = SDAI.FROM(/*SDAI.INTEGER*/1, TO:/*SDAI.INTEGER*/SDAI.SIZEOF(
      UNDIRECTED_LINK)) {
      for I in incrementControl {
        if let selector = SDAI.FORCE_OPTIONAL(SDAI.TRUE) {
          switch selector {
          case SDAI.TYPEOF(UNDIRECTED_LINK?[I], IS: eREPRESENTATION_CONTEXT.self):
            //BEGIN
            
            let _TEMP8 = NODES?[I]
            let _TEMP9 = _TEMP8?.GROUP_REF(eREPRESENTATION.self)
            let _TEMP10 = _TEMP9?.CONTEXT_OF_ITEMS
            let _TEMP11 = UNDIRECTED_LINK?[I]
            let _TEMP12 = _TEMP10 .===. _TEMP11
            let _TEMP13 = SDAI.FORCE_OPTIONAL(I) + SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
            let _TEMP14 = NODES?[_TEMP13]
            let _TEMP15 = _TEMP14?.GROUP_REF(eREPRESENTATION.self)
            let _TEMP16 = _TEMP15?.CONTEXT_OF_ITEMS
            let _TEMP17 = UNDIRECTED_LINK?[I]
            let _TEMP18 = _TEMP16 .===. _TEMP17
            let _TEMP19 = _TEMP12 && _TEMP18
            if SDAI.IS_TRUE( _TEMP19 ) {
              SDAI.INSERT( L: &DIRECTED_LINK, E: eREPRESENTATION_RELATIONSHIP(/*partial entity*/
                _representation_relationship(
                NAME: SDAI.UNWRAP(tLABEL("")), 
                DESCRIPTION: tTEXT(""), 
                REP_1: SDAI.UNWRAP(sREPRESENTATION_OR_REPRESENTATION_REFERENCE(/*eREPRESENTATION*/NODES?[SDAI.FORCE_OPTIONAL(
                I) + SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))])), 
                REP_2: SDAI.UNWRAP(sREPRESENTATION_OR_REPRESENTATION_REFERENCE(/*eREPRESENTATION*/NODES?[I])))), 
                P: SDAI.FORCE_OPTIONAL(I) - SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1)) )
            }
            else {
              return _get_directed_link__cache.updateCache(params: _params, value: (nil as SDAI.LIST<
                eREPRESENTATION_RELATIONSHIP>?))
            }
            //END

          case SDAI.TYPEOF(UNDIRECTED_LINK?[I], IS: eREPRESENTATION_RELATIONSHIP.self):
            //BEGIN
            
            let _TEMP20 = NODES?[I]
            let _TEMP21 = UNDIRECTED_LINK?[I]
            let _TEMP22 = _TEMP21?.GROUP_REF(eREPRESENTATION_RELATIONSHIP.self)
            let _TEMP23 = _TEMP22?.REP_1
            let _TEMP24 = _TEMP20 .===. _TEMP23
            let _TEMP25 = SDAI.FORCE_OPTIONAL(I) + SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
            let _TEMP26 = NODES?[_TEMP25]
            let _TEMP27 = UNDIRECTED_LINK?[I]
            let _TEMP28 = _TEMP27?.GROUP_REF(eREPRESENTATION_RELATIONSHIP.self)
            let _TEMP29 = _TEMP28?.REP_2
            let _TEMP30 = _TEMP26 .===. _TEMP29
            let _TEMP31 = _TEMP24 && _TEMP30
            let _TEMP32 = NODES?[I]
            let _TEMP33 = UNDIRECTED_LINK?[I]
            let _TEMP34 = _TEMP33?.GROUP_REF(eREPRESENTATION_RELATIONSHIP.self)
            let _TEMP35 = _TEMP34?.REP_2
            let _TEMP36 = _TEMP32 .===. _TEMP35
            let _TEMP37 = SDAI.FORCE_OPTIONAL(I) + SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
            let _TEMP38 = NODES?[_TEMP37]
            let _TEMP39 = UNDIRECTED_LINK?[I]
            let _TEMP40 = _TEMP39?.GROUP_REF(eREPRESENTATION_RELATIONSHIP.self)
            let _TEMP41 = _TEMP40?.REP_1
            let _TEMP42 = _TEMP38 .===. _TEMP41
            let _TEMP43 = _TEMP36 && _TEMP42
            let _TEMP44 = _TEMP31 || _TEMP43
            if SDAI.IS_TRUE( _TEMP44 ) {
              SDAI.INSERT( L: &DIRECTED_LINK, E: eREPRESENTATION_RELATIONSHIP(/*partial entity*/
                _representation_relationship(
                NAME: SDAI.UNWRAP(tLABEL("")), 
                DESCRIPTION: tTEXT(""), 
                REP_1: SDAI.UNWRAP(sREPRESENTATION_OR_REPRESENTATION_REFERENCE(/*eREPRESENTATION*/NODES?[SDAI.FORCE_OPTIONAL(
                I) + SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))])), 
                REP_2: SDAI.UNWRAP(sREPRESENTATION_OR_REPRESENTATION_REFERENCE(/*eREPRESENTATION*/NODES?[I])))), 
                P: SDAI.FORCE_OPTIONAL(I) - SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1)) )
            }
            else {
              return _get_directed_link__cache.updateCache(params: _params, value: (nil as SDAI.LIST<
                eREPRESENTATION_RELATIONSHIP>?))
            }
            //END

          case SDAI.TYPEOF(UNDIRECTED_LINK?[I], IS: eMAPPED_ITEM.self):
            //BEGIN
            
            let _TEMP45 = NODES?[I]
            let _TEMP46 = UNDIRECTED_LINK?[I]
            let _TEMP47 = USING_REPRESENTATIONS(sFOUNDED_ITEM_SELECT(/*sCHAINED_REPRESENTATION_LINK*/_TEMP46))
            let _TEMP48 = SDAI.aggregate(_TEMP47, contains: _TEMP45)
            let _TEMP49 = SDAI.FORCE_OPTIONAL(I) + SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
            let _TEMP50 = NODES?[_TEMP49]
            let _TEMP51 = UNDIRECTED_LINK?[I]
            let _TEMP52 = _TEMP51?.GROUP_REF(eMAPPED_ITEM.self)
            let _TEMP53 = _TEMP52?.MAPPING_SOURCE
            let _TEMP54 = _TEMP53?.GROUP_REF(eREPRESENTATION_MAP.self)
            let _TEMP55 = _TEMP54?.MAPPED_REPRESENTATION
            let _TEMP56 = _TEMP50 .===. _TEMP55
            let _TEMP57 = _TEMP48 && _TEMP56
            if SDAI.IS_TRUE( _TEMP57 ) {
              SDAI.INSERT( L: &DIRECTED_LINK, E: eREPRESENTATION_RELATIONSHIP(/*partial entity*/
                _representation_relationship(
                NAME: SDAI.UNWRAP(tLABEL("")), 
                DESCRIPTION: tTEXT(""), 
                REP_1: SDAI.UNWRAP(sREPRESENTATION_OR_REPRESENTATION_REFERENCE(/*eREPRESENTATION*/NODES?[SDAI.FORCE_OPTIONAL(
                I) + SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))])), 
                REP_2: SDAI.UNWRAP(sREPRESENTATION_OR_REPRESENTATION_REFERENCE(/*eREPRESENTATION*/NODES?[I])))), 
                P: SDAI.FORCE_OPTIONAL(I) - SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1)) )
            }
            else {
              return _get_directed_link__cache.updateCache(params: _params, value: (nil as SDAI.LIST<
                eREPRESENTATION_RELATIONSHIP>?))
            }
            //END

          default:
            return _get_directed_link__cache.updateCache(params: _params, value: (nil as SDAI.LIST<
              eREPRESENTATION_RELATIONSHIP>?))
          } //end switch
        }
        else {
          return _get_directed_link__cache.updateCache(params: _params, value: (nil as SDAI.LIST<
            eREPRESENTATION_RELATIONSHIP>?))
        }
      }
    }
    
    let _TEMP58 = SDAI.VALUE_UNIQUE(DIRECTED_LINK)
    let _TEMP59 = SDAI.FORCE_OPTIONAL(_TEMP58) .==. SDAI.FORCE_OPTIONAL(SDAI.LOGICAL(SDAI.FALSE))
    if SDAI.IS_TRUE( _TEMP59 ) {
      return _get_directed_link__cache.updateCache(params: _params, value: (nil as SDAI.LIST<
        eREPRESENTATION_RELATIONSHIP>?))
    }
    return _get_directed_link__cache.updateCache(params: _params, value: DIRECTED_LINK)
  }

}

//MARK: - function result cache
private var _get_directed_link__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

