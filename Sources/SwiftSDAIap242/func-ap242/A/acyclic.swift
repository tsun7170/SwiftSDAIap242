/* file: acyclic.swift 	 generated: Sun Oct 31 15:32:10 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION acyclic(
               arg1 : generic_expression;
               arg2 : SET OF generic_expression
           ) : BOOLEAN;

    LOCAL
      result : BOOLEAN := TRUE;
    END_LOCAL;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SIMPLE_GENERIC_EXPRESSION' IN TYPEOF( arg1 ) THEN
      RETURN( TRUE );
    END_IF;
    IF arg1 IN arg2 THEN
      RETURN( FALSE );
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.UNARY_GENERIC_EXPRESSION' IN TYPEOF( arg1 ) THEN
      RETURN( acyclic( arg1\unary_generic_expression.operand, arg2 + [arg1] ) );
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.BINARY_GENERIC_EXPRESSION' IN TYPEOF( arg1 ) THEN
      RETURN( acyclic( arg1\binary_generic_expression.operands[1], arg2 + [arg1] ) AND acyclic( arg1\
          binary_generic_expression.operands[2], arg2 + [arg1] ) );
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.MULTIPLE_ARITY_GENERIC_EXPRESSION' IN TYPEOF( arg1 )
        THEN
      result := TRUE;
      REPEAT i := 1 TO SIZEOF( arg1\multiple_arity_generic_expression.operands ) BY 1;
        result := result AND acyclic( arg1\multiple_arity_generic_expression.operands[i], arg2 + [arg1] );
      END_REPEAT;
      RETURN( result );
    END_IF;
    RETURN( result );

  END_FUNCTION; -- acyclic (line:34756 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func ACYCLIC(ARG1: eGENERIC_EXPRESSION? , ARG2: SDAI.SET<eGENERIC_EXPRESSION>? ) 
    -> SDAI.BOOLEAN? {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( ARG1, ARG2 )
    if case .available(let _cached_value) = _acyclic__cache.cachedValue(params: _params) {
      return _cached_value as? SDAI.BOOLEAN
    }

    var ARG1 = ARG1; SDAI.TOUCH(var: &ARG1)
    var ARG2 = ARG2; SDAI.TOUCH(var: &ARG2)

    //LOCAL
    var RESULT: SDAI.BOOLEAN?  = SDAI.BOOLEAN(SDAI.TRUE); SDAI.TOUCH(var: &RESULT)

    
    let _TEMP1 = SDAI.TYPEOF(ARG1, IS: eSIMPLE_GENERIC_EXPRESSION.self)
    if SDAI.IS_TRUE( _TEMP1 ) {
      return _acyclic__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.TRUE))
    }
    
    let _TEMP2 = SDAI.aggregate(ARG2, contains: ARG1)
    if SDAI.IS_TRUE( _TEMP2 ) {
      return _acyclic__cache.updateCache(params: _params, value: SDAI.BOOLEAN(SDAI.FALSE))
    }
    
    let _TEMP3 = SDAI.TYPEOF(ARG1, IS: eUNARY_GENERIC_EXPRESSION.self)
    if SDAI.IS_TRUE( _TEMP3 ) {
      
      let _TEMP4 = ARG1?.GROUP_REF(eUNARY_GENERIC_EXPRESSION.self)
      let _TEMP5 = _TEMP4?.OPERAND
      let _TEMP6 = ([SDAI.AIE(ARG1)] as [SDAI.AggregationInitializerElement<eGENERIC_EXPRESSION>])
      let _TEMP7 = ARG2 + SDAI.FORCE_OPTIONAL(_TEMP6)
      let _TEMP8 = ACYCLIC(ARG1: _TEMP5, 
                           ARG2: _TEMP7)
      return _acyclic__cache.updateCache(params: _params, value: _TEMP8)
    }
    
    let _TEMP9 = SDAI.TYPEOF(ARG1, IS: eBINARY_GENERIC_EXPRESSION.self)
    if SDAI.IS_TRUE( _TEMP9 ) {
      
      let _TEMP10 = ARG1?.GROUP_REF(eBINARY_GENERIC_EXPRESSION.self)
      let _TEMP11 = _TEMP10?.OPERANDS
      let _TEMP12 = _TEMP11?[1]
      let _TEMP13 = ([SDAI.AIE(ARG1)] as [SDAI.AggregationInitializerElement<eGENERIC_EXPRESSION>])
      let _TEMP14 = ARG2 + SDAI.FORCE_OPTIONAL(_TEMP13)
      let _TEMP15 = ACYCLIC(ARG1: _TEMP12, 
                            ARG2: _TEMP14)
      let _TEMP16 = ARG1?.GROUP_REF(eBINARY_GENERIC_EXPRESSION.self)
      let _TEMP17 = _TEMP16?.OPERANDS
      let _TEMP18 = _TEMP17?[2]
      let _TEMP19 = ([SDAI.AIE(ARG1)] as [SDAI.AggregationInitializerElement<eGENERIC_EXPRESSION>])
      let _TEMP20 = ARG2 + SDAI.FORCE_OPTIONAL(_TEMP19)
      let _TEMP21 = ACYCLIC(ARG1: _TEMP18, 
                            ARG2: _TEMP20)
      let _TEMP22 = _TEMP15 && _TEMP21
      return _acyclic__cache.updateCache(params: _params, value: SDAI.BOOLEAN(/*SDAI.LOGICAL*/_TEMP22))
    }
    
    let _TEMP23 = SDAI.TYPEOF(ARG1, IS: eMULTIPLE_ARITY_GENERIC_EXPRESSION.self)
    if SDAI.IS_TRUE( _TEMP23 ) {
      RESULT = SDAI.BOOLEAN(SDAI.TRUE)
      if let incrementControl/*SDAI.INTEGER*/ = SDAI.FROM(/*SDAI.INTEGER*/1, TO:/*SDAI.INTEGER*/SDAI.SIZEOF(
        ARG1?.GROUP_REF(eMULTIPLE_ARITY_GENERIC_EXPRESSION.self)?.OPERANDS)) {
        for I in incrementControl {
          
          let _TEMP24 = ARG1?.GROUP_REF(eMULTIPLE_ARITY_GENERIC_EXPRESSION.self)
          let _TEMP25 = _TEMP24?.OPERANDS
          let _TEMP26 = _TEMP25?[I]
          let _TEMP27 = ([SDAI.AIE(ARG1)] as [SDAI.AggregationInitializerElement<eGENERIC_EXPRESSION>])
          let _TEMP28 = ARG2 + SDAI.FORCE_OPTIONAL(_TEMP27)
          let _TEMP29 = ACYCLIC(ARG1: _TEMP26, 
                                ARG2: _TEMP28)
          let _TEMP30 = RESULT && _TEMP29
          RESULT = SDAI.BOOLEAN(/*SDAI.LOGICAL*/_TEMP30)
        }
      }
      return _acyclic__cache.updateCache(params: _params, value: RESULT)
    }
    return _acyclic__cache.updateCache(params: _params, value: RESULT)
  }

}

//MARK: - function result cache
private var _acyclic__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

