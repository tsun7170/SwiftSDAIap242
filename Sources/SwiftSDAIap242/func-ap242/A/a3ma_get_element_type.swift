/* file: a3ma_get_element_type.swift 	 generated: Sat Aug 14 13:46:02 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION a3ma_get_element_type(
               ei : SET [1 : ?] OF inspected_equivalence_element_select
           ) : a3ma_element_type_name;

    LOCAL
      type_out : SET OF STRING;
    END_LOCAL;
    type_out := TYPEOF( ei[1] );
    IF SIZEOF( ei ) > 1 THEN
      RETURN( etna_others );
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PRODUCT_DEFINITION_OR_REFERENCE' IN type_out THEN
      RETURN( etna_product_definition_or_reference );
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SHAPE_REPRESENTATION' IN type_out THEN
      RETURN( etna_shape_representation );
    END_IF;
    RETURN( etna_others );

  END_FUNCTION; -- a3ma_get_element_type (line:33998 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func A3MA_GET_ELEMENT_TYPE(_ EI: (SDAI.SET<sINSPECTED_EQUIVALENCE_ELEMENT_SELECT>/*[1:nil]*/ )? ) 
    -> nA3MA_ELEMENT_TYPE_NAME? {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( EI )
    if case .available(let _cached_value) = _a3ma_get_element_type__cache.cachedValue(params: _params) {
      return _cached_value as? nA3MA_ELEMENT_TYPE_NAME
    }

    var EI = EI; SDAI.TOUCH(var: &EI)

    //LOCAL
    var TYPE_OUT: SDAI.SET<SDAI.STRING>? 

    
    let _TEMP1 = EI?[1]
    let _TEMP2 = SDAI.TYPEOF(_TEMP1)
    TYPE_OUT = _TEMP2
    
    let _TEMP3 = SDAI.SIZEOF(EI)
    let _TEMP4 = _TEMP3 > SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
    if SDAI.IS_TRUE( _TEMP4 ) {
      return _a3ma_get_element_type__cache.updateCache(params: _params, value: nA3MA_ELEMENT_TYPE_NAME(/*
        nA3M_ELEMENT_TYPE_NAME*/ETNA_OTHERS))
    }
    
    let _TEMP5 = SDAI.aggregate(TYPE_OUT, contains: SDAI.STRING(
      "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PRODUCT_DEFINITION_OR_REFERENCE"))
    if SDAI.IS_TRUE( _TEMP5 ) {
      return _a3ma_get_element_type__cache.updateCache(params: _params, value: nA3MA_ELEMENT_TYPE_NAME(/*
        nA3M_ELEMENT_TYPE_NAME*/ETNA_PRODUCT_DEFINITION_OR_REFERENCE))
    }
    
    let _TEMP6 = SDAI.aggregate(TYPE_OUT, contains: SDAI.STRING(
      "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SHAPE_REPRESENTATION"))
    if SDAI.IS_TRUE( _TEMP6 ) {
      return _a3ma_get_element_type__cache.updateCache(params: _params, value: nA3MA_ELEMENT_TYPE_NAME(/*
        nA3M_ELEMENT_TYPE_NAME*/ETNA_SHAPE_REPRESENTATION))
    }
    return _a3ma_get_element_type__cache.updateCache(params: _params, value: nA3MA_ELEMENT_TYPE_NAME(/*
      nA3M_ELEMENT_TYPE_NAME*/ETNA_OTHERS))
  }

}

//MARK: - function result cache
private var _a3ma_get_element_type__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

