/* file: a3ms_validate_element_types.swift 	 generated: Tue Nov 16 05:35:44 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION a3ms_validate_element_types(
               ei : data_equivalence_inspection_report;
               cr : a3m_equivalence_criterion_for_shape
           ) : LOGICAL;

    LOCAL
      compared_et  : a3ms_element_type_name;
      comparing_et : a3ms_element_type_name;
      deiir        : data_equivalence_inspection_instance_report;
      aeiiri       : a3m_equivalence_inspection_instance_report_item;
      deiep        : data_equivalence_inspected_element_pair;
    END_LOCAL;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.DATA_EQUIVALENCE_INSPECTION_INSTANCE_REPORT' IN 
        TYPEOF( ei ) THEN
      deiir := ei;
      REPEAT i := 1 TO SIZEOF( deiir.inspected_instances ) BY 1;
        IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.A3M_EQUIVALENCE_INSPECTION_INSTANCE_REPORT_ITEM' 
            IN TYPEOF( deiir.inspected_instances[i] ) THEN
          aeiiri := deiir.inspected_instances[i];
          deiep := aeiiri.inspected_element;
          compared_et := a3ms_get_element_type( deiep.compared_elements );
          comparing_et := a3ms_get_element_type( deiep.comparing_elements );
          IF ( ( NOT ( compared_et IN cr.compared_element_types ) ) AND ( compared_et <> 
              etns_external_representation_item ) ) OR ( ( NOT ( comparing_et IN cr.comparing_element_types ) ) 
              AND ( comparing_et <> etns_external_representation_item ) ) THEN
            RETURN( FALSE );
          END_IF;
          IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.MISMATCH_OF_POINT_CLOUD_AND_RELATED_GEOMETRY' 
              IN TYPEOF( cr ) THEN
            IF ( comparing_et <> etns_external_representation_item ) AND ( compared_et <> 
                etns_external_representation_item ) AND ( compared_et = comparing_et ) THEN
              RETURN( FALSE );
            END_IF;
          ELSE
            IF ( comparing_et <> etns_external_representation_item ) AND ( compared_et <> 
                etns_external_representation_item ) AND ( compared_et <> comparing_et ) THEN
              RETURN( FALSE );
            END_IF;
          END_IF;
        END_IF;
      END_REPEAT;
    END_IF;
    RETURN( TRUE );

  END_FUNCTION; -- a3ms_validate_element_types (line:34641 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func A3MS_VALIDATE_ELEMENT_TYPES(EI: eDATA_EQUIVALENCE_INSPECTION_REPORT? , 
                                   CR: eA3M_EQUIVALENCE_CRITERION_FOR_SHAPE? ) 
    -> SDAI.LOGICAL {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( EI, CR )
    if case .available(let _cached_value) = _a3ms_validate_element_types__cache.cachedValue(params: _params) {
      return _cached_value as! SDAI.LOGICAL
    }

    var EI = EI; SDAI.TOUCH(var: &EI)
    var CR = CR; SDAI.TOUCH(var: &CR)

    //LOCAL
    var COMPARED_ET: nA3MS_ELEMENT_TYPE_NAME? 
    var COMPARING_ET: nA3MS_ELEMENT_TYPE_NAME? 
    var DEIIR: eDATA_EQUIVALENCE_INSPECTION_INSTANCE_REPORT? 
    var AEIIRI: eA3M_EQUIVALENCE_INSPECTION_INSTANCE_REPORT_ITEM? 
    var DEIEP: eDATA_EQUIVALENCE_INSPECTED_ELEMENT_PAIR? 
    //END_LOCAL

    
    let _TEMP1 = SDAI.TYPEOF(EI, IS: eDATA_EQUIVALENCE_INSPECTION_INSTANCE_REPORT.self)
    if SDAI.IS_TRUE( _TEMP1 ) {
      DEIIR = eDATA_EQUIVALENCE_INSPECTION_INSTANCE_REPORT(/*eDATA_EQUIVALENCE_INSPECTION_REPORT*/EI)
      if let incrementControl/*SDAI.INTEGER*/ = SDAI.FROM(/*SDAI.INTEGER*/1, TO:/*SDAI.INTEGER*/SDAI.SIZEOF(
        DEIIR?.INSPECTED_INSTANCES)) {
        for I in incrementControl {
          
          let _TEMP2 = SDAI.TYPEOF(DEIIR?.INSPECTED_INSTANCES[I], 
            IS: eA3M_EQUIVALENCE_INSPECTION_INSTANCE_REPORT_ITEM.self)
          if SDAI.IS_TRUE( _TEMP2 ) {
            
            let _TEMP3 = DEIIR?.INSPECTED_INSTANCES
            let _TEMP4 = _TEMP3?[I]
            AEIIRI = eA3M_EQUIVALENCE_INSPECTION_INSTANCE_REPORT_ITEM(/*
              eDATA_EQUIVALENCE_INSPECTION_INSTANCE_REPORT_ITEM*/_TEMP4)
            
            let _TEMP5 = AEIIRI?.INSPECTED_ELEMENT
            DEIEP = _TEMP5
            
            let _TEMP6 = DEIEP?.COMPARED_ELEMENTS
            let _TEMP7 = A3MS_GET_ELEMENT_TYPE(_TEMP6)
            COMPARED_ET = _TEMP7
            
            let _TEMP8 = DEIEP?.COMPARING_ELEMENTS
            let _TEMP9 = A3MS_GET_ELEMENT_TYPE(_TEMP8)
            COMPARING_ET = _TEMP9
            
            let _TEMP10 = CR?.COMPARED_ELEMENT_TYPES
            let _TEMP11 = SDAI.aggregate(_TEMP10, contains: COMPARED_ET)
            let _TEMP12 =  !_TEMP11
            let _TEMP13 = COMPARED_ET .!=. SDAI.FORCE_OPTIONAL(ETNS_EXTERNAL_REPRESENTATION_ITEM)
            let _TEMP14 = _TEMP12 && _TEMP13
            let _TEMP15 = CR?.COMPARING_ELEMENT_TYPES
            let _TEMP16 = SDAI.aggregate(_TEMP15, contains: COMPARING_ET)
            let _TEMP17 =  !_TEMP16
            let _TEMP18 = COMPARING_ET .!=. SDAI.FORCE_OPTIONAL(ETNS_EXTERNAL_REPRESENTATION_ITEM)
            let _TEMP19 = _TEMP17 && _TEMP18
            let _TEMP20 = _TEMP14 || _TEMP19
            if SDAI.IS_TRUE( _TEMP20 ) {
              return _a3ms_validate_element_types__cache.updateCache(params: _params, value: SDAI.UNWRAP(
                SDAI.LOGICAL(SDAI.FALSE)))
            }
            
            let _TEMP21 = SDAI.TYPEOF(CR, IS: eMISMATCH_OF_POINT_CLOUD_AND_RELATED_GEOMETRY.self)
            if SDAI.IS_TRUE( _TEMP21 ) {
              
              let _TEMP22 = COMPARING_ET .!=. SDAI.FORCE_OPTIONAL(ETNS_EXTERNAL_REPRESENTATION_ITEM)
              let _TEMP23 = COMPARED_ET .!=. SDAI.FORCE_OPTIONAL(ETNS_EXTERNAL_REPRESENTATION_ITEM)
              let _TEMP24 = _TEMP22 && _TEMP23
              let _TEMP25 = COMPARED_ET .==. COMPARING_ET
              let _TEMP26 = _TEMP24 && _TEMP25
              if SDAI.IS_TRUE( _TEMP26 ) {
                return _a3ms_validate_element_types__cache.updateCache(params: _params, value: SDAI.UNWRAP(
                  SDAI.LOGICAL(SDAI.FALSE)))
              }
            }
            else {
              
              let _TEMP27 = COMPARING_ET .!=. SDAI.FORCE_OPTIONAL(ETNS_EXTERNAL_REPRESENTATION_ITEM)
              let _TEMP28 = COMPARED_ET .!=. SDAI.FORCE_OPTIONAL(ETNS_EXTERNAL_REPRESENTATION_ITEM)
              let _TEMP29 = _TEMP27 && _TEMP28
              let _TEMP30 = COMPARED_ET .!=. COMPARING_ET
              let _TEMP31 = _TEMP29 && _TEMP30
              if SDAI.IS_TRUE( _TEMP31 ) {
                return _a3ms_validate_element_types__cache.updateCache(params: _params, value: SDAI.UNWRAP(
                  SDAI.LOGICAL(SDAI.FALSE)))
              }
            }
          }
        }
      }
    }
    return _a3ms_validate_element_types__cache.updateCache(params: _params, value: SDAI.UNWRAP(SDAI.LOGICAL(
      SDAI.TRUE)))
  }

}

//MARK: - function result cache
private var _a3ms_validate_element_types__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

