/* file: a3ma_validate_detected_difference_types.swift 	 generated: Mon Jan  3 16:32:52 2022 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.1, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION a3ma_validate_detected_difference_types(
               ei : data_equivalence_inspection_report;
               cr : a3m_equivalence_criterion_for_assembly
           ) : LOGICAL;

    LOCAL
      deiir   : data_equivalence_inspection_instance_report;
      eiriwei : equivalence_instance_report_item_with_notable_instances;
    END_LOCAL;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.DATA_EQUIVALENCE_INSPECTION_INSTANCE_REPORT' IN 
        TYPEOF( ei ) THEN
      deiir := ei;
      REPEAT i := 1 TO SIZEOF( deiir.inspected_instances ) BY 1;
        IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
            + 'EQUIVALENCE_INSTANCE_REPORT_ITEM_WITH_NOTABLE_INSTANCES'  IN TYPEOF( deiir.inspected_instances
            [i] ) THEN
          eiriwei := deiir.inspected_instances[i];
          REPEAT j := 1 TO SIZEOF( eiriwei.notable_instances ) BY 1;
            IF NOT ( a3ma_get_detected_difference_type( eiriwei.notable_instances[j].comparing_elements ) IN 
                cr.detected_difference_types ) THEN
              RETURN( FALSE );
            END_IF;
            IF NOT ( a3ma_get_detected_difference_type( eiriwei.notable_instances[j].compared_elements ) IN 
                cr.detected_difference_types ) THEN
              RETURN( FALSE );
            END_IF;
          END_REPEAT;
        END_IF;
      END_REPEAT;
    END_IF;
    RETURN( TRUE );

  END_FUNCTION; -- a3ma_validate_detected_difference_types (line:34139 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func A3MA_VALIDATE_DETECTED_DIFFERENCE_TYPES(
    EI: eDATA_EQUIVALENCE_INSPECTION_REPORT? , CR: eA3M_EQUIVALENCE_CRITERION_FOR_ASSEMBLY? ) 
    -> SDAI.LOGICAL {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( EI, CR )
    if case .available(let _cached_value) = _a3ma_validate_detected_difference_types__cache.cachedValue(params: _params) {
      return _cached_value as! SDAI.LOGICAL
    }

    var EI = EI; SDAI.TOUCH(var: &EI)
    var CR = CR; SDAI.TOUCH(var: &CR)

    //LOCAL
    var DEIIR: eDATA_EQUIVALENCE_INSPECTION_INSTANCE_REPORT? 
    var EIRIWEI: eEQUIVALENCE_INSTANCE_REPORT_ITEM_WITH_NOTABLE_INSTANCES? 
    //END_LOCAL

    
    let _TEMP1 = SDAI.TYPEOF(EI, IS: eDATA_EQUIVALENCE_INSPECTION_INSTANCE_REPORT.self)
    if SDAI.IS_TRUE( _TEMP1 ) {
      DEIIR = eDATA_EQUIVALENCE_INSPECTION_INSTANCE_REPORT(/*eDATA_EQUIVALENCE_INSPECTION_REPORT*/EI)
      if let incrementControl/*SDAI.INTEGER*/ = SDAI.FROM(/*SDAI.INTEGER*/1, TO:/*SDAI.INTEGER*/SDAI.SIZEOF(
        DEIIR?.INSPECTED_INSTANCES)) {
        for I in incrementControl {
          
          let _TEMP2 = SDAI.TYPEOF(DEIIR?.INSPECTED_INSTANCES[I], 
            IS: eEQUIVALENCE_INSTANCE_REPORT_ITEM_WITH_NOTABLE_INSTANCES.self)
          if SDAI.IS_TRUE( _TEMP2 ) {
            
            let _TEMP3 = DEIIR?.INSPECTED_INSTANCES
            let _TEMP4 = _TEMP3?[I]
            EIRIWEI = eEQUIVALENCE_INSTANCE_REPORT_ITEM_WITH_NOTABLE_INSTANCES(/*
              eDATA_EQUIVALENCE_INSPECTION_INSTANCE_REPORT_ITEM*/_TEMP4)
            if let incrementControl/*SDAI.INTEGER*/ = SDAI.FROM(/*SDAI.INTEGER*/1, TO:/*SDAI.INTEGER*/
              SDAI.SIZEOF(EIRIWEI?.NOTABLE_INSTANCES)) {
              for J in incrementControl {
                
                let _TEMP5 = EIRIWEI?.NOTABLE_INSTANCES
                let _TEMP6 = _TEMP5?[J]
                let _TEMP7 = _TEMP6?.COMPARING_ELEMENTS
                let _TEMP8 = A3MA_GET_DETECTED_DIFFERENCE_TYPE(_TEMP7)
                let _TEMP9 = CR?.DETECTED_DIFFERENCE_TYPES
                let _TEMP10 = SDAI.aggregate(_TEMP9, contains: _TEMP8)
                let _TEMP11 =  !_TEMP10
                if SDAI.IS_TRUE( _TEMP11 ) {
                  return _a3ma_validate_detected_difference_types__cache.updateCache(params: _params, value: SDAI.UNWRAP(
                    SDAI.LOGICAL(SDAI.FALSE)))
                }
                
                let _TEMP12 = EIRIWEI?.NOTABLE_INSTANCES
                let _TEMP13 = _TEMP12?[J]
                let _TEMP14 = _TEMP13?.COMPARED_ELEMENTS
                let _TEMP15 = A3MA_GET_DETECTED_DIFFERENCE_TYPE(_TEMP14)
                let _TEMP16 = CR?.DETECTED_DIFFERENCE_TYPES
                let _TEMP17 = SDAI.aggregate(_TEMP16, contains: _TEMP15)
                let _TEMP18 =  !_TEMP17
                if SDAI.IS_TRUE( _TEMP18 ) {
                  return _a3ma_validate_detected_difference_types__cache.updateCache(params: _params, value: SDAI.UNWRAP(
                    SDAI.LOGICAL(SDAI.FALSE)))
                }
              }
            }
          }
        }
      }
    }
    return _a3ma_validate_detected_difference_types__cache.updateCache(params: _params, value: SDAI.UNWRAP(
      SDAI.LOGICAL(SDAI.TRUE)))
  }

}

//MARK: - function result cache
private var _a3ma_validate_detected_difference_types__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

