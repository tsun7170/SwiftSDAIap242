/* file: all_members_of_es.swift 	 generated: Sat Aug 14 13:46:02 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION all_members_of_es(
               sv : SET OF maths_value;
               es : elementary_space_enumerators
           ) : LOGICAL;

    CONSTANT
      base_types : SET OF STRING :=
                    [ 'NUMBER', 'COMPLEX_NUMBER_LITERAL', 'REAL', 'INTEGER', 'LOGICAL', 'BOOLEAN', 'STRING', 
                      'BINARY' , 'MATHS_SPACE', 'MATHS_FUNCTION', 'LIST', 'ELEMENTARY_SPACE_ENUMERATORS', 
                      'ORDERING_TYPE' , 'LOWER_UPPER', 'SYMMETRY_TYPE', 'ELEMENTARY_FUNCTION_ENUMERATORS', 
                      'OPEN_CLOSED' , 'SPACE_CONSTRAINT_TYPE', 'REPACKAGE_OPTIONS', 'EXTENSION_OPTIONS'];
    END_CONSTANT;

    LOCAL
      v        : maths_value;
      key_type : STRING := '';
      types    : SET OF STRING;
      ge       : generic_expression;
      cum      : LOGICAL := TRUE;
      vspc     : maths_space;
    END_LOCAL;
    IF ( NOT EXISTS( sv ) ) OR ( NOT EXISTS( es ) ) THEN
      RETURN( FALSE );
    END_IF;
    CASE es OF
      es_numbers                  :         key_type := 'NUMBER';
      es_complex_numbers          :         key_type := 'COMPLEX_NUMBER_LITERAL';
      es_reals                    :         key_type := 'REAL';
      es_integers                 :         key_type := 'INTEGER';
      es_logicals                 :         key_type := 'LOGICAL';
      es_booleans                 :         key_type := 'BOOLEAN';
      es_strings                  :         key_type := 'STRING';
      es_binarys                  :         key_type := 'BINARY';
      es_maths_spaces             :         key_type := 'MATHS_SPACE';
      es_maths_functions          :         key_type := 'MATHS_FUNCTION';
      es_generics                 :         RETURN( TRUE );
    END_CASE;
    REPEAT i := 1 TO SIZEOF( sv ) BY 1;
      IF NOT EXISTS( sv[i] ) THEN
        RETURN( FALSE );
      END_IF;
      v := simplify_maths_value( sv[i] );
      types := stripped_typeof( v );
      IF key_type IN types THEN
        SKIP;
      END_IF;
      IF ( es = es_numbers ) AND ( 'COMPLEX_NUMBER_LITERAL' IN types ) THEN
        SKIP;
      END_IF;
      IF SIZEOF( base_types * types ) > 0 THEN
        RETURN( FALSE );
      END_IF;
      ge := v;
      IF has_values_space( ge ) THEN
        vspc := values_space_of( ge );
        IF NOT subspace_of_es( vspc, es ) THEN
          IF NOT compatible_spaces( vspc, make_elementary_space( es ) ) THEN
            RETURN( FALSE );
          END_IF;
          cum := UNKNOWN;
        END_IF;
      ELSE
        cum := UNKNOWN;
      END_IF;
      IF cum = FALSE THEN
        RETURN( FALSE );
      END_IF;
    END_REPEAT;
    RETURN( cum );

  END_FUNCTION; -- all_members_of_es (line:35301 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func ALL_MEMBERS_OF_ES(SV: SDAI.SET<sMATHS_VALUE>? , ES: nELEMENTARY_SPACE_ENUMERATORS? ) 
    -> SDAI.LOGICAL {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( SV, ES )
    if case .available(let _cached_value) = _all_members_of_es__cache.cachedValue(params: _params) {
      return _cached_value as! SDAI.LOGICAL
    }

    var SV = SV; SDAI.TOUCH(var: &SV)
    var ES = ES; SDAI.TOUCH(var: &ES)


    //CONSTANT
    let BASE_TYPES: SDAI.SET<SDAI.STRING> = SDAI.UNWRAP(
      SDAI.SET<SDAI.STRING>(([SDAI.AIE(SDAI.STRING("NUMBER")), 
      SDAI.AIE(SDAI.STRING("COMPLEX_NUMBER_LITERAL")), 
      SDAI.AIE(SDAI.STRING("REAL")), 
      SDAI.AIE(SDAI.STRING("INTEGER")), 
      SDAI.AIE(SDAI.STRING("LOGICAL")), 
      SDAI.AIE(SDAI.STRING("BOOLEAN")), 
      SDAI.AIE(SDAI.STRING("STRING")), 
      SDAI.AIE(SDAI.STRING("BINARY")), 
      SDAI.AIE(SDAI.STRING("MATHS_SPACE")), 
      SDAI.AIE(SDAI.STRING("MATHS_FUNCTION")), 
      SDAI.AIE(SDAI.STRING("LIST")), 
      SDAI.AIE(SDAI.STRING("ELEMENTARY_SPACE_ENUMERATORS")), 
      SDAI.AIE(SDAI.STRING("ORDERING_TYPE")), 
      SDAI.AIE(SDAI.STRING("LOWER_UPPER")), 
      SDAI.AIE(SDAI.STRING("SYMMETRY_TYPE")), 
      SDAI.AIE(SDAI.STRING("ELEMENTARY_FUNCTION_ENUMERATORS")), 
      SDAI.AIE(SDAI.STRING("OPEN_CLOSED")), 
      SDAI.AIE(SDAI.STRING("SPACE_CONSTRAINT_TYPE")), 
      SDAI.AIE(SDAI.STRING("REPACKAGE_OPTIONS")), 
      SDAI.AIE(SDAI.STRING("EXTENSION_OPTIONS"))] as [SDAI.AggregationInitializerElement<SDAI.STRING>])))

    //LOCAL
    var V: sMATHS_VALUE? 
    var KEY_TYPE: SDAI.STRING?  = SDAI.STRING(""); SDAI.TOUCH(var: &KEY_TYPE)
    var TYPES: SDAI.SET<SDAI.STRING>? 
    var GE: eGENERIC_EXPRESSION? 
    var CUM: SDAI.LOGICAL = SDAI.LOGICAL(SDAI.TRUE); SDAI.TOUCH(var: &CUM)
    var VSPC: eMATHS_SPACE? 
    //END_LOCAL

    
    let _TEMP1 = SDAI.EXISTS(SV)
    let _TEMP2 =  !_TEMP1
    let _TEMP3 = SDAI.EXISTS(ES)
    let _TEMP4 =  !_TEMP3
    let _TEMP5 = _TEMP2 || _TEMP4
    if SDAI.IS_TRUE( _TEMP5 ) {
      return _all_members_of_es__cache.updateCache(params: _params, value: SDAI.LOGICAL(SDAI.FALSE))
    }
    if let selector = ES {
      switch selector {
      case ES_NUMBERS:
        KEY_TYPE = SDAI.STRING("NUMBER")

      case ES_COMPLEX_NUMBERS:
        KEY_TYPE = SDAI.STRING("COMPLEX_NUMBER_LITERAL")

      case ES_REALS:
        KEY_TYPE = SDAI.STRING("REAL")

      case ES_INTEGERS:
        KEY_TYPE = SDAI.STRING("INTEGER")

      case ES_LOGICALS:
        KEY_TYPE = SDAI.STRING("LOGICAL")

      case ES_BOOLEANS:
        KEY_TYPE = SDAI.STRING("BOOLEAN")

      case ES_STRINGS:
        KEY_TYPE = SDAI.STRING("STRING")

      case ES_BINARYS:
        KEY_TYPE = SDAI.STRING("BINARY")

      case ES_MATHS_SPACES:
        KEY_TYPE = SDAI.STRING("MATHS_SPACE")

      case ES_MATHS_FUNCTIONS:
        KEY_TYPE = SDAI.STRING("MATHS_FUNCTION")

      case ES_GENERICS:
        return _all_members_of_es__cache.updateCache(params: _params, value: SDAI.LOGICAL(SDAI.TRUE))

      default: break
      } //end switch
    }
    if let incrementControl/*SDAI.INTEGER*/ = SDAI.FROM(/*SDAI.INTEGER*/1, TO:/*SDAI.INTEGER*/SDAI.SIZEOF(
      SV)) {
      for I in incrementControl {
        
        let _TEMP6 = SV?[I]
        let _TEMP7 = SDAI.EXISTS(_TEMP6)
        let _TEMP8 =  !_TEMP7
        if SDAI.IS_TRUE( _TEMP8 ) {
          return _all_members_of_es__cache.updateCache(params: _params, value: SDAI.LOGICAL(SDAI.FALSE))
        }
        
        let _TEMP9 = SV?[I]
        let _TEMP10 = SIMPLIFY_MATHS_VALUE(_TEMP9)
        V = _TEMP10
        
        let _TEMP11 = STRIPPED_TYPEOF(V)
        TYPES = _TEMP11
        
        let _TEMP12 = SDAI.aggregate(TYPES, contains: KEY_TYPE)
        if SDAI.IS_TRUE( _TEMP12 ) {
          continue
        }
        
        let _TEMP13 = ES .==. SDAI.FORCE_OPTIONAL(ES_NUMBERS)
        let _TEMP14 = SDAI.aggregate(TYPES, contains: SDAI.STRING("COMPLEX_NUMBER_LITERAL"))
        let _TEMP15 = _TEMP13 && _TEMP14
        if SDAI.IS_TRUE( _TEMP15 ) {
          continue
        }
        
        let _TEMP16 = SDAI.FORCE_OPTIONAL(BASE_TYPES) * TYPES
        let _TEMP17 = SDAI.SIZEOF(_TEMP16)
        let _TEMP18 = _TEMP17 > SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
        if SDAI.IS_TRUE( _TEMP18 ) {
          return _all_members_of_es__cache.updateCache(params: _params, value: SDAI.LOGICAL(SDAI.FALSE))
        }
        GE = eGENERIC_EXPRESSION(/*sMATHS_VALUE*/V)
        
        let _TEMP19 = HAS_VALUES_SPACE(GE)
        if SDAI.IS_TRUE( _TEMP19 ) {
          
          let _TEMP20 = VALUES_SPACE_OF(GE)
          VSPC = _TEMP20
          
          let _TEMP21 = SUBSPACE_OF_ES(
            SPC: VSPC, ES: ES)
          let _TEMP22 =  !_TEMP21
          if SDAI.IS_TRUE( _TEMP22 ) {
            
            let _TEMP23 = MAKE_ELEMENTARY_SPACE(ES)
            let _TEMP24 = COMPATIBLE_SPACES(
              SP1: VSPC, SP2: eMATHS_SPACE(/*eELEMENTARY_SPACE*/_TEMP23))
            let _TEMP25 =  !_TEMP24
            if SDAI.IS_TRUE( _TEMP25 ) {
              return _all_members_of_es__cache.updateCache(params: _params, value: SDAI.LOGICAL(SDAI.FALSE))
            }
            CUM = SDAI.UNWRAP(SDAI.LOGICAL(SDAI.UNKNOWN))
          }
        }
        else {
          CUM = SDAI.UNWRAP(SDAI.LOGICAL(SDAI.UNKNOWN))
        }
        
        let _TEMP26 = SDAI.FORCE_OPTIONAL(CUM) .==. SDAI.FORCE_OPTIONAL(SDAI.LOGICAL(SDAI.FALSE))
        if SDAI.IS_TRUE( _TEMP26 ) {
          return _all_members_of_es__cache.updateCache(params: _params, value: SDAI.LOGICAL(SDAI.FALSE))
        }
      }
    }
    return _all_members_of_es__cache.updateCache(params: _params, value: CUM)
  }

}

//MARK: - function result cache
private var _all_members_of_es__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

