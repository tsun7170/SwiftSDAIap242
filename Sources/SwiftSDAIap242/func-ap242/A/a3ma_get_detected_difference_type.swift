/* file: a3ma_get_detected_difference_type.swift 	 generated: Sun Oct 31 15:32:10 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION a3ma_get_detected_difference_type(
               ei : LIST [0 : ?] OF equivalence_detected_difference_select
           ) : a3ma_detected_difference_type_name;

    LOCAL
      type_out : SET OF STRING;
      sizeei   : INTEGER;
    END_LOCAL;
    sizeei := SIZEOF( ei );
    IF sizeei = 0 THEN
      RETURN( ddna_no_element );
    END_IF;
    type_out := TYPEOF( ei[1] );
    IF SIZEOF( ei ) > 1 THEN
      RETURN( ddna_others );
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ASSEMBLY_COMPONENT_USAGE' IN type_out THEN
      RETURN( ddna_assembly_component_usage );
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.BINARY_ASSEMBLY_CONSTRAINT' IN type_out THEN
      RETURN( ddna_binary_assembly_constraint );
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CARTESIAN_POINT' IN type_out THEN
      RETURN( ddna_cartesian_point );
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CONTEXT_DEPENDENT_SHAPE_REPRESENTATION' IN type_out
        THEN
      RETURN( ddna_context_dependent_shape_representation );
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.COUNT_MEASURE' IN type_out THEN
      RETURN( ddna_count_measure );
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.MULTI_LEVEL_REFERENCE_DESIGNATOR' IN type_out THEN
      RETURN( ddna_multi_level_reference_designator );
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.VOLUME_MEASURE' IN type_out THEN
      RETURN( ddna_volume_measure );
    END_IF;
    IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT' IN 
        type_out THEN
      RETURN( ddna_a3ms_inspected_equivalence_element_select );
    END_IF;
    RETURN( ddna_others );

  END_FUNCTION; -- a3ma_get_detected_difference_type (line:33948 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func A3MA_GET_DETECTED_DIFFERENCE_TYPE(
    _ EI: (SDAI.LIST<sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT>/*[0:nil]*/ )? ) 
    -> nA3MA_DETECTED_DIFFERENCE_TYPE_NAME? {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( EI )
    if case .available(let _cached_value) = _a3ma_get_detected_difference_type__cache.cachedValue(params: _params) {
      return _cached_value as? nA3MA_DETECTED_DIFFERENCE_TYPE_NAME
    }

    var EI = EI; SDAI.TOUCH(var: &EI)

    //LOCAL
    var TYPE_OUT: SDAI.SET<SDAI.STRING>? 
    var SIZEEI: SDAI.INTEGER? 
    //END_LOCAL

    
    let _TEMP1 = SDAI.SIZEOF(EI)
    SIZEEI = _TEMP1
    
    let _TEMP2 = SIZEEI .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
    if SDAI.IS_TRUE( _TEMP2 ) {
      return _a3ma_get_detected_difference_type__cache.updateCache(params: _params, value: 
        nA3MA_DETECTED_DIFFERENCE_TYPE_NAME(/*nA3M_DETECTED_DIFFERENCE_TYPE_NAME*/DDNA_NO_ELEMENT))
    }
    
    let _TEMP3 = EI?[1]
    let _TEMP4 = SDAI.TYPEOF(_TEMP3)
    TYPE_OUT = _TEMP4
    
    let _TEMP5 = SDAI.SIZEOF(EI)
    let _TEMP6 = _TEMP5 > SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
    if SDAI.IS_TRUE( _TEMP6 ) {
      return _a3ma_get_detected_difference_type__cache.updateCache(params: _params, value: 
        nA3MA_DETECTED_DIFFERENCE_TYPE_NAME(/*nA3M_DETECTED_DIFFERENCE_TYPE_NAME*/DDNA_OTHERS))
    }
    
    let _TEMP7 = SDAI.aggregate(TYPE_OUT, contains: SDAI.STRING(
      "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ASSEMBLY_COMPONENT_USAGE"))
    if SDAI.IS_TRUE( _TEMP7 ) {
      return _a3ma_get_detected_difference_type__cache.updateCache(params: _params, value: 
        nA3MA_DETECTED_DIFFERENCE_TYPE_NAME(/*nA3M_DETECTED_DIFFERENCE_TYPE_NAME*/
        DDNA_ASSEMBLY_COMPONENT_USAGE))
    }
    
    let _TEMP8 = SDAI.aggregate(TYPE_OUT, contains: SDAI.STRING(
      "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.BINARY_ASSEMBLY_CONSTRAINT"))
    if SDAI.IS_TRUE( _TEMP8 ) {
      return _a3ma_get_detected_difference_type__cache.updateCache(params: _params, value: 
        nA3MA_DETECTED_DIFFERENCE_TYPE_NAME(/*nA3M_DETECTED_DIFFERENCE_TYPE_NAME*/
        DDNA_BINARY_ASSEMBLY_CONSTRAINT))
    }
    
    let _TEMP9 = SDAI.aggregate(TYPE_OUT, contains: SDAI.STRING(
      "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CARTESIAN_POINT"))
    if SDAI.IS_TRUE( _TEMP9 ) {
      return _a3ma_get_detected_difference_type__cache.updateCache(params: _params, value: 
        nA3MA_DETECTED_DIFFERENCE_TYPE_NAME(/*nA3M_DETECTED_DIFFERENCE_TYPE_NAME*/DDNA_CARTESIAN_POINT))
    }
    
    let _TEMP10 = SDAI.aggregate(TYPE_OUT, contains: SDAI.STRING(
      "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CONTEXT_DEPENDENT_SHAPE_REPRESENTATION"))
    if SDAI.IS_TRUE( _TEMP10 ) {
      return _a3ma_get_detected_difference_type__cache.updateCache(params: _params, value: 
        nA3MA_DETECTED_DIFFERENCE_TYPE_NAME(/*nA3M_DETECTED_DIFFERENCE_TYPE_NAME*/
        DDNA_CONTEXT_DEPENDENT_SHAPE_REPRESENTATION))
    }
    
    let _TEMP11 = SDAI.aggregate(TYPE_OUT, contains: SDAI.STRING(
      "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.COUNT_MEASURE"))
    if SDAI.IS_TRUE( _TEMP11 ) {
      return _a3ma_get_detected_difference_type__cache.updateCache(params: _params, value: 
        nA3MA_DETECTED_DIFFERENCE_TYPE_NAME(/*nA3M_DETECTED_DIFFERENCE_TYPE_NAME*/DDNA_COUNT_MEASURE))
    }
    
    let _TEMP12 = SDAI.aggregate(TYPE_OUT, contains: SDAI.STRING(
      "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.MULTI_LEVEL_REFERENCE_DESIGNATOR"))
    if SDAI.IS_TRUE( _TEMP12 ) {
      return _a3ma_get_detected_difference_type__cache.updateCache(params: _params, value: 
        nA3MA_DETECTED_DIFFERENCE_TYPE_NAME(/*nA3M_DETECTED_DIFFERENCE_TYPE_NAME*/
        DDNA_MULTI_LEVEL_REFERENCE_DESIGNATOR))
    }
    
    let _TEMP13 = SDAI.aggregate(TYPE_OUT, contains: SDAI.STRING(
      "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.VOLUME_MEASURE"))
    if SDAI.IS_TRUE( _TEMP13 ) {
      return _a3ma_get_detected_difference_type__cache.updateCache(params: _params, value: 
        nA3MA_DETECTED_DIFFERENCE_TYPE_NAME(/*nA3M_DETECTED_DIFFERENCE_TYPE_NAME*/DDNA_VOLUME_MEASURE))
    }
    
    let _TEMP14 = SDAI.aggregate(TYPE_OUT, contains: SDAI.STRING(
      "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT"))
    if SDAI.IS_TRUE( _TEMP14 ) {
      return _a3ma_get_detected_difference_type__cache.updateCache(params: _params, value: 
        nA3MA_DETECTED_DIFFERENCE_TYPE_NAME(/*nA3M_DETECTED_DIFFERENCE_TYPE_NAME*/
        DDNA_A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT))
    }
    return _a3ma_get_detected_difference_type__cache.updateCache(params: _params, value: 
      nA3MA_DETECTED_DIFFERENCE_TYPE_NAME(/*nA3M_DETECTED_DIFFERENCE_TYPE_NAME*/DDNA_OTHERS))
  }

}

//MARK: - function result cache
private var _a3ma_get_detected_difference_type__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

