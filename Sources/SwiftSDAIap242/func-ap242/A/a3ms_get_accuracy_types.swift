/* file: a3ms_get_accuracy_types.swift 	 generated: Mon Jan  3 16:32:52 2022 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.1, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION a3ms_get_accuracy_types(
               ei : SET [0 : ?] OF a3m_equivalence_accuracy_association
           ) : SET [0 : ?] OF a3ms_accuracy_type_name;

    LOCAL
      type_out : a3ms_measured_data_type_name;
      retval   : SET OF a3ms_accuracy_type_name := [];
    END_LOCAL;
    REPEAT i := 1 TO SIZEOF( ei ) BY 1;
      type_out := a3ms_get_value_limit_type( ei[i].specific_accuracy.range );
      IF type_out = mdns_area_measure THEN
        retval := retval + [atns_area_measure];
      ELSE
        IF type_out = mdns_length_measure THEN
          retval := retval + [atns_length_measure];
        ELSE
          IF type_out = mdns_plane_angle_measure THEN
            retval := retval + [atns_plane_angle_measure];
          ELSE
            IF type_out = mdns_volume_measure THEN
              retval := retval + [atns_volume_measure];
            ELSE
              retval := retval + [atns_others];
            END_IF;
          END_IF;
        END_IF;
      END_IF;
    END_REPEAT;
    RETURN( retval );

  END_FUNCTION; -- a3ms_get_accuracy_types (line:34260 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func A3MS_GET_ACCURACY_TYPES(_ EI: (SDAI.SET<eA3M_EQUIVALENCE_ACCURACY_ASSOCIATION>/*[0:nil]*/ )? ) 
    -> (SDAI.SET<nA3MS_ACCURACY_TYPE_NAME>/*[0:nil]*/ )? {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( EI )
    if case .available(let _cached_value) = _a3ms_get_accuracy_types__cache.cachedValue(params: _params) {
      return _cached_value as? SDAI.SET<nA3MS_ACCURACY_TYPE_NAME>
    }

    var EI = EI; SDAI.TOUCH(var: &EI)

    //LOCAL
    var TYPE_OUT: nA3MS_MEASURED_DATA_TYPE_NAME? 
    var RETVAL: SDAI.SET<nA3MS_ACCURACY_TYPE_NAME>?  = SDAI.SET<nA3MS_ACCURACY_TYPE_NAME>(
                                                       SDAI.EMPLY_AGGREGATE); SDAI.TOUCH(var: &RETVAL)
    //END_LOCAL

    if let incrementControl/*SDAI.INTEGER*/ = SDAI.FROM(/*SDAI.INTEGER*/1, TO:/*SDAI.INTEGER*/SDAI.SIZEOF(
      EI)) {
      for I in incrementControl {
        
        let _TEMP1 = EI?[I]
        let _TEMP2 = _TEMP1?.SPECIFIC_ACCURACY
        let _TEMP3 = _TEMP2?.RANGE
        let _TEMP4 = A3MS_GET_VALUE_LIMIT_TYPE(_TEMP3)
        TYPE_OUT = _TEMP4
        
        let _TEMP5 = TYPE_OUT .==. SDAI.FORCE_OPTIONAL(MDNS_AREA_MEASURE)
        if SDAI.IS_TRUE( _TEMP5 ) {
          
          let _TEMP6 = ([SDAI.AIE(ATNS_AREA_MEASURE)] as [SDAI.AggregationInitializerElement<
            nA3M_ACCURACY_TYPE_NAME>])
          let _TEMP7 = SDAI.SET<nA3M_ACCURACY_TYPE_NAME>(/*SDAI.SET<nA3MS_ACCURACY_TYPE_NAME>*/RETVAL) + SDAI.FORCE_OPTIONAL(
            _TEMP6)
          RETVAL = SDAI.SET<nA3MS_ACCURACY_TYPE_NAME>(/*SDAI.SET<nA3M_ACCURACY_TYPE_NAME>*/_TEMP7)
        }
        else {
          
          let _TEMP8 = TYPE_OUT .==. SDAI.FORCE_OPTIONAL(MDNS_LENGTH_MEASURE)
          if SDAI.IS_TRUE( _TEMP8 ) {
            
            let _TEMP9 = ([SDAI.AIE(ATNS_LENGTH_MEASURE)] as [SDAI.AggregationInitializerElement<
              nA3M_ACCURACY_TYPE_NAME>])
            let _TEMP10 = SDAI.SET<nA3M_ACCURACY_TYPE_NAME>(/*SDAI.SET<nA3MS_ACCURACY_TYPE_NAME>*/RETVAL) + SDAI.FORCE_OPTIONAL(
              _TEMP9)
            RETVAL = SDAI.SET<nA3MS_ACCURACY_TYPE_NAME>(/*SDAI.SET<nA3M_ACCURACY_TYPE_NAME>*/_TEMP10)
          }
          else {
            
            let _TEMP11 = TYPE_OUT .==. SDAI.FORCE_OPTIONAL(MDNS_PLANE_ANGLE_MEASURE)
            if SDAI.IS_TRUE( _TEMP11 ) {
              
              let _TEMP12 = ([SDAI.AIE(ATNS_PLANE_ANGLE_MEASURE)] as [SDAI.AggregationInitializerElement<
                nA3M_ACCURACY_TYPE_NAME>])
              let _TEMP13 = SDAI.SET<nA3M_ACCURACY_TYPE_NAME>(/*SDAI.SET<nA3MS_ACCURACY_TYPE_NAME>*/RETVAL)
                + SDAI.FORCE_OPTIONAL(_TEMP12)
              RETVAL = SDAI.SET<nA3MS_ACCURACY_TYPE_NAME>(/*SDAI.SET<nA3M_ACCURACY_TYPE_NAME>*/_TEMP13)
            }
            else {
              
              let _TEMP14 = TYPE_OUT .==. SDAI.FORCE_OPTIONAL(MDNS_VOLUME_MEASURE)
              if SDAI.IS_TRUE( _TEMP14 ) {
                
                let _TEMP15 = ([SDAI.AIE(ATNS_VOLUME_MEASURE)] as [SDAI.AggregationInitializerElement<
                  nA3M_ACCURACY_TYPE_NAME>])
                let _TEMP16 = SDAI.SET<nA3M_ACCURACY_TYPE_NAME>(/*SDAI.SET<nA3MS_ACCURACY_TYPE_NAME>*/RETVAL)
                  + SDAI.FORCE_OPTIONAL(_TEMP15)
                RETVAL = SDAI.SET<nA3MS_ACCURACY_TYPE_NAME>(/*SDAI.SET<nA3M_ACCURACY_TYPE_NAME>*/_TEMP16)
              }
              else {
                
                let _TEMP17 = ([SDAI.AIE(ATNS_OTHERS)] as [SDAI.AggregationInitializerElement<
                  nA3M_ACCURACY_TYPE_NAME>])
                let _TEMP18 = SDAI.SET<nA3M_ACCURACY_TYPE_NAME>(/*SDAI.SET<nA3MS_ACCURACY_TYPE_NAME>*/RETVAL)
                  + SDAI.FORCE_OPTIONAL(_TEMP17)
                RETVAL = SDAI.SET<nA3MS_ACCURACY_TYPE_NAME>(/*SDAI.SET<nA3M_ACCURACY_TYPE_NAME>*/_TEMP18)
              }
            }
          }
        }
      }
    }
    return _a3ms_get_accuracy_types__cache.updateCache(params: _params, value: SDAI.SET<
      nA3MS_ACCURACY_TYPE_NAME>(bound1: SDAI.UNWRAP(SDAI.INTEGER(0)), bound2: (nil as SDAI.INTEGER?), 
      /*SDAI.SET<nA3MS_ACCURACY_TYPE_NAME>*/RETVAL))
  }

}

//MARK: - function result cache
private var _a3ms_get_accuracy_types__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

