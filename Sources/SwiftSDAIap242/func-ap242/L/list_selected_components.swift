/* file: list_selected_components.swift 	 generated: Mon Jan  3 16:32:52 2022 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.1, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION list_selected_components(
               aggr : AGGREGATE OF LIST OF maths_value;
               k : positive_integer
           ) : LIST OF maths_value;

    LOCAL
      result : LIST OF maths_value := [];
      j      : INTEGER := 0;
    END_LOCAL;
    REPEAT i := LOINDEX( aggr ) TO HIINDEX( aggr ) BY 1;
      IF k <= SIZEOF( aggr[i] ) THEN
        INSERT( result, aggr[i][k], j );
        j := j + 1;
      END_IF;
    END_REPEAT;
    RETURN( result );

  END_FUNCTION; -- list_selected_components (line:42456 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func LIST_SELECTED_COMPONENTS<g_AGG1: SDAIAggregationType>(
    AGGR: g_AGG1? , K: tPOSITIVE_INTEGER? ) 
    -> SDAI.LIST<sMATHS_VALUE>? 
  where g_AGG1.ELEMENT == SDAI.LIST<sMATHS_VALUE> {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( AGGR, K )
    if case .available(let _cached_value) = _list_selected_components__cache.cachedValue(params: _params) {
      return _cached_value as? SDAI.LIST<sMATHS_VALUE>
    }

    var AGGR = AGGR; SDAI.TOUCH(var: &AGGR)
    var K = K; SDAI.TOUCH(var: &K)

    //LOCAL
    var RESULT: SDAI.LIST<sMATHS_VALUE>?  = SDAI.LIST<sMATHS_VALUE>(SDAI.EMPLY_AGGREGATE); SDAI.TOUCH(var: &RESULT)
    var J: SDAI.INTEGER?  = SDAI.INTEGER(0); SDAI.TOUCH(var: &J)
    //END_LOCAL

    if let incrementControl/*SDAI.INTEGER*/ = SDAI.FROM(/*SDAI.INTEGER*/SDAI.LOINDEX(
      SDAI.AGGREGATE<SDAI.LIST<sMATHS_VALUE>>(fromGeneric: /*g_AGG1*/AGGR)), TO:/*SDAI.INTEGER*/SDAI.HIINDEX(
      SDAI.AGGREGATE<SDAI.LIST<sMATHS_VALUE>>(fromGeneric: /*g_AGG1*/AGGR))) {
      for I in incrementControl {
        
        let _TEMP1 = AGGR?[I]
        let _TEMP2 = SDAI.SIZEOF(_TEMP1)
        let _TEMP3 = K <= _TEMP2
        if SDAI.IS_TRUE( _TEMP3 ) {
          SDAI.INSERT( L: &RESULT, E: AGGR?[I]?[K], P: J )
          
          let _TEMP4 = J + SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
          J = _TEMP4
        }
      }
    }
    return _list_selected_components__cache.updateCache(params: _params, value: RESULT)
  }

}

//MARK: - function result cache
private var _list_selected_components__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

