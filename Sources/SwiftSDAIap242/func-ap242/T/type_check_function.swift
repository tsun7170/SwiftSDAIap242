/* file: type_check_function.swift 	 generated: Sun Oct 31 15:32:10 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -FUNCTION DEFINITION in EXPRESS
/*

  FUNCTION type_check_function(
               the_type : GENERIC;
               sub_names : SET OF STRING;
               criterion : INTEGER
           ) : LOGICAL;
    IF ( NOT EXISTS( the_type ) ) OR ( SIZEOF( sub_names ) = 0 ) THEN
      RETURN( UNKNOWN );
    ELSE
      CASE criterion OF
        0      :           RETURN( SIZEOF( sub_names * TYPEOF( the_type ) ) > 0 );
        1      :           RETURN( SIZEOF( sub_names * TYPEOF( the_type ) ) = 0 );
        2      :           RETURN( SIZEOF( sub_names * TYPEOF( the_type ) ) = 1 );
        3      :           RETURN( SIZEOF( sub_names * TYPEOF( the_type ) ) <= 1 );
        OTHERWISE    :           RETURN( UNKNOWN );
      END_CASE;
    END_IF;

  END_FUNCTION; -- type_check_function (line:47073 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/

  public static 
  func TYPE_CHECK_FUNCTION<g_GEN1: SDAIGenericType>(
    THE_TYPE: g_GEN1? , SUB_NAMES: SDAI.SET<SDAI.STRING>? , CRITERION: SDAI.INTEGER? ) 
    -> SDAI.LOGICAL {

    // CACHE LOOKUP
    let _params = SDAI.ParameterList( THE_TYPE, SUB_NAMES, CRITERION )
    if case .available(let _cached_value) = _type_check_function__cache.cachedValue(params: _params) {
      return _cached_value as! SDAI.LOGICAL
    }

    var THE_TYPE = THE_TYPE; SDAI.TOUCH(var: &THE_TYPE)
    var SUB_NAMES = SUB_NAMES; SDAI.TOUCH(var: &SUB_NAMES)
    var CRITERION = CRITERION; SDAI.TOUCH(var: &CRITERION)

    
    let _TEMP1 = SDAI.EXISTS(THE_TYPE)
    let _TEMP2 =  !_TEMP1
    let _TEMP3 = SDAI.SIZEOF(SUB_NAMES)
    let _TEMP4 = _TEMP3 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
    let _TEMP5 = _TEMP2 || _TEMP4
    if SDAI.IS_TRUE( _TEMP5 ) {
      return _type_check_function__cache.updateCache(params: _params, value: SDAI.UNWRAP(SDAI.LOGICAL(
        SDAI.UNKNOWN)))
    }
    else {
      if let selector = CRITERION {
        switch selector {
        case 0:
          
          let _TEMP6 = SDAI.TYPEOF(THE_TYPE)
          let _TEMP7 = SUB_NAMES * SDAI.FORCE_OPTIONAL(_TEMP6)
          let _TEMP8 = SDAI.SIZEOF(_TEMP7)
          let _TEMP9 = _TEMP8 > SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
          return _type_check_function__cache.updateCache(params: _params, value: SDAI.UNWRAP(_TEMP9))

        case 1:
          
          let _TEMP10 = SDAI.TYPEOF(THE_TYPE)
          let _TEMP11 = SUB_NAMES * SDAI.FORCE_OPTIONAL(_TEMP10)
          let _TEMP12 = SDAI.SIZEOF(_TEMP11)
          let _TEMP13 = _TEMP12 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
          return _type_check_function__cache.updateCache(params: _params, value: SDAI.UNWRAP(_TEMP13))

        case 2:
          
          let _TEMP14 = SDAI.TYPEOF(THE_TYPE)
          let _TEMP15 = SUB_NAMES * SDAI.FORCE_OPTIONAL(_TEMP14)
          let _TEMP16 = SDAI.SIZEOF(_TEMP15)
          let _TEMP17 = _TEMP16 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
          return _type_check_function__cache.updateCache(params: _params, value: SDAI.UNWRAP(_TEMP17))

        case 3:
          
          let _TEMP18 = SDAI.TYPEOF(THE_TYPE)
          let _TEMP19 = SUB_NAMES * SDAI.FORCE_OPTIONAL(_TEMP18)
          let _TEMP20 = SDAI.SIZEOF(_TEMP19)
          let _TEMP21 = _TEMP20 <= SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
          return _type_check_function__cache.updateCache(params: _params, value: SDAI.UNWRAP(_TEMP21))

        default:
          return _type_check_function__cache.updateCache(params: _params, value: SDAI.UNWRAP(SDAI.LOGICAL(
            SDAI.UNKNOWN)))
        } //end switch
      }
      else {
        return _type_check_function__cache.updateCache(params: _params, value: SDAI.UNWRAP(SDAI.LOGICAL(
          SDAI.UNKNOWN)))
      }
    }
  }

}

//MARK: - function result cache
private var _type_check_function__cache = SDAI.FunctionResultCache(
  controller: AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.schemaDefinition)

