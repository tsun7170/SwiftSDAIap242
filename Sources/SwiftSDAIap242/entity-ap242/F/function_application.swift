/* file: function_application.swift 	 generated: Tue Nov 16 05:35:44 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY function_application
    SUBTYPE OF ( multiple_arity_generic_expression );
      func       : maths_function_select;
      arguments  : LIST [1 : ?] OF maths_expression;
    DERIVE
      SELF\multiple_arity_generic_expression.operands : LIST [2 : ?] OF generic_expression := [
                                          convert_to_maths_function( func )] + convert_to_operands( arguments );
    WHERE
      wr1: function_applicability( func, arguments );
  END_ENTITY; -- function_application (line:16037 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	generic_expression
    (no local attributes)

  SUPER- ENTITY(2)	multiple_arity_generic_expression
    ATTR:  operands,	TYPE: LIST [2 : ?] OF generic_expression -- EXPLICIT (DYNAMIC)
      -- possibly overriden by
          ENTITY: series_composed_function,	TYPE: LIST [2 : ?] OF maths_function
          ENTITY: concat_expression,	TYPE: LIST [2 : ?] OF string_expression
          ENTITY: multiple_arity_numeric_expression,	TYPE: LIST [2 : ?] OF numeric_expression
          ENTITY: multiple_arity_boolean_expression,	TYPE: LIST [2 : ?] OF boolean_expression
          ENTITY: basic_sparse_matrix,	TYPE: LIST [3 : 3] OF maths_function
          ENTITY: parallel_composed_function,	TYPE: LIST [2 : ?] OF generic_expression	(as DERIVED)
      *** ENTITY: function_application,	TYPE: LIST [2 : ?] OF generic_expression	(as DERIVED)


  ENTITY(SELF)	function_application
    ATTR:  func,	TYPE: maths_function_select -- EXPLICIT

    ATTR:  arguments,	TYPE: LIST [1 : ?] OF maths_expression -- EXPLICIT

    REDCR: operands,	TYPE: LIST [2 : ?] OF generic_expression -- DERIVED (DYNAMIC)
      := [convert_to_maths_function( func )] + convert_to_operands( arguments )
      -- OVERRIDING ENTITY: multiple_arity_generic_expression


*/


//MARK: - Partial Entity
  public final class _function_application : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eFUNCTION_APPLICATION.self
    }

    //ATTRIBUTES
    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _func: sMATHS_FUNCTION_SELECT // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _arguments: SDAI.LIST<sMATHS_EXPRESSION>/*[1:nil]*/  // PLAIN EXPLICIT ATTRIBUTE

    /// DERIVE ATTRIBUTE REDEFINITION(origin: eMULTIPLE_ARITY_GENERIC_EXPRESSION)
    /// - attribute value provider protocol conformance wrapper
    internal func _operands__getter(complex: SDAI.ComplexEntity) -> SDAI.LIST<eGENERIC_EXPRESSION>/*[2:nil]*/  {
      let SELF = complex.entityReference( eFUNCTION_APPLICATION.self )!
      return SDAI.UNWRAP( SDAI.LIST<eGENERIC_EXPRESSION>(SELF.OPERANDS) )
    }
    /// DERIVE ATTRIBUTE REDEFINITION(origin: eMULTIPLE_ARITY_GENERIC_EXPRESSION)
    /// - gut of derived attribute logic
    internal func _operands__getter(SELF: eFUNCTION_APPLICATION) -> SDAI.LIST<eGENERIC_EXPRESSION>/*[2:nil]*/  {

      let _TEMP1 = CONVERT_TO_MATHS_FUNCTION(SELF.FUNC)
      let _TEMP2 = ([SDAI.AIE(_TEMP1)] as [SDAI.AggregationInitializerElement<eMATHS_FUNCTION>])
      let _TEMP3 = CONVERT_TO_OPERANDS(SDAI.LIST<sMATHS_VALUE>(/*SDAI.LIST<sMATHS_EXPRESSION>[1:nil] */SELF.ARGUMENTS))
      let _TEMP4 = SDAI.FORCE_OPTIONAL(_TEMP2) + SDAI.LIST<SDAI.GENERIC_ENTITY>(/*SDAI.LIST<
        eGENERIC_EXPRESSION>*/_TEMP3)
      let value = SDAI.LIST<eGENERIC_EXPRESSION>(bound1: SDAI.UNWRAP(SDAI.INTEGER(2)), bound2: (nil as SDAI.INTEGER?), 
        /*SDAI.LIST<SDAI.GENERIC_ENTITY>*/_TEMP4)
      return SDAI.UNWRAP( value )
    }

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._func.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._arguments.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._func.value.isValueEqualOptionally(to: rhs._func.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._arguments.value.isValueEqualOptionally(to: rhs._arguments.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._func.value.isValueEqualOptionally(to: rhs._func.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._arguments.value.isValueEqualOptionally(to: rhs._arguments.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: eFUNCTION_APPLICATION?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = FUNCTION_APPLICABILITY(
        FUNC: SELF.FUNC, ARGUMENTS: SDAI.LIST<sMATHS_VALUE>(bound1: SDAI.UNWRAP(SDAI.INTEGER(1)), bound2: (nil as 
        SDAI.INTEGER?), /*SDAI.LIST<sMATHS_EXPRESSION>[1:nil] */SELF.ARGUMENTS))
      return SDAI.LOGICAL(_TEMP1)
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(FUNC: sMATHS_FUNCTION_SELECT, ARGUMENTS: SDAI.LIST<sMATHS_EXPRESSION>/*[1:nil]*/ ) {
      self._func = FUNC
      self._arguments = ARGUMENTS
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 2
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverRequiredParameter(as: sMATHS_FUNCTION_SELECT.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p1) = exchangeStructure.recoverRequiredParameter(as: SDAI.LIST<
        sMATHS_EXPRESSION>.self, from: parameters[1])
      else { exchangeStructure.add(errorContext: "while recovering parameter #1 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( FUNC: p0, ARGUMENTS: p1 )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY function_application
    SUBTYPE OF ( multiple_arity_generic_expression );
      func       : maths_function_select;
      arguments  : LIST [1 : ?] OF maths_expression;
    DERIVE
      SELF\multiple_arity_generic_expression.operands : LIST [2 : ?] OF generic_expression := [
                                          convert_to_maths_function( func )] + convert_to_operands( arguments );
    WHERE
      wr1: function_applicability( func, arguments );
  END_ENTITY; -- function_application (line:16037 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eFUNCTION_APPLICATION : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _function_application.self
    }
    public let partialEntity: _function_application

    //MARK: SUPERTYPES
    public let super_eGENERIC_EXPRESSION: eGENERIC_EXPRESSION 	// [1]
    public let super_eMULTIPLE_ARITY_GENERIC_EXPRESSION: eMULTIPLE_ARITY_GENERIC_EXPRESSION 	// [2]
    public var super_eFUNCTION_APPLICATION: eFUNCTION_APPLICATION { return self } 	// [3]

    //MARK: SUBTYPES

    //MARK: ATTRIBUTES
    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eFUNCTION_APPLICATION`` )
    public var FUNC: sMATHS_FUNCTION_SELECT {
      get {
        return SDAI.UNWRAP( self.partialEntity._func )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._func = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT REDEF(DERIVE)__ attribute
    /// - origin: SELF( ``eFUNCTION_APPLICATION`` )
    public var OPERANDS: SDAI.LIST<eGENERIC_EXPRESSION>/*[2:nil]*/  {
      get {
        if let cached = cachedValue(derivedAttributeName:"OPERANDS") {
          return cached.value as! SDAI.LIST<eGENERIC_EXPRESSION>/*[2:nil]*/ 
        }
        let origin = self
        let value = SDAI.UNWRAP( origin.partialEntity._operands__getter(SELF: origin) )
        updateCache(derivedAttributeName:"OPERANDS", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eFUNCTION_APPLICATION`` )
    public var ARGUMENTS: SDAI.LIST<sMATHS_EXPRESSION>/*[1:nil]*/  {
      get {
        return SDAI.UNWRAP( self.partialEntity._arguments )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._arguments = SDAI.UNWRAP(newValue)
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_function_application.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eGENERIC_EXPRESSION.self) else { return nil }
      self.super_eGENERIC_EXPRESSION = super1

      guard let super2 = complexEntity?.entityReference(eMULTIPLE_ARITY_GENERIC_EXPRESSION.self) else { return nil }
      self.super_eMULTIPLE_ARITY_GENERIC_EXPRESSION = super2

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _function_application.WHERE_wr1(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "FUNCTION_APPLICATION", type: self, explicitAttributeCount: 2)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eGENERIC_EXPRESSION.self)
      entityDef.add(supertype: eMULTIPLE_ARITY_GENERIC_EXPRESSION.self)
      entityDef.add(supertype: eFUNCTION_APPLICATION.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "FUNC", keyPath: \eFUNCTION_APPLICATION.FUNC, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "OPERANDS", keyPath: \eFUNCTION_APPLICATION.OPERANDS, 
        kind: .derivedRedeclaring, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "ARGUMENTS", keyPath: \eFUNCTION_APPLICATION.ARGUMENTS, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)

      return entityDef
    }

  }
}

//MARK: - partial Entity Dynamic Attribute Protocol Conformances
extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF._function_application :
  eMULTIPLE_ARITY_GENERIC_EXPRESSION__OPERANDS__provider {}
