/* file: fill_area_style_tile_coloured_region.swift 	 generated: Mon Jan  3 16:32:52 2022 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.1, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY fill_area_style_tile_coloured_region
    SUBTYPE OF ( geometric_representation_item );
      closed_curve   : curve_or_annotation_curve_occurrence;
      region_colour  : colour;
    WHERE
      wr1: ( ( NOT ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CURVE' IN TYPEOF( closed_curve ) ) ) OR
               ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CIRCLE' IN TYPEOF( closed_curve ) ) OR ( 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ELLIPSE'  IN TYPEOF( closed_curve ) ) OR ( ( 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.B_SPLINE_CURVE'  IN TYPEOF( closed_curve ) ) 
               AND ( closed_curve\b_spline_curve.closed_curve = TRUE ) ) OR ( ( 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.COMPOSITE_CURVE'  IN TYPEOF( closed_curve ) ) 
               AND ( closed_curve\composite_curve.closed_curve = TRUE ) ) OR ( ( 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.POLYLINE'  IN TYPEOF( closed_curve ) ) AND ( 
               closed_curve\polyline.points[LOINDEX( closed_curve\polyline.points )] = closed_curve\polyline.
               points[HIINDEX( closed_curve\polyline.points )] ) ) );
  END_ENTITY; -- fill_area_style_tile_coloured_region (line:15470 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	representation_item
    ATTR:  name,	TYPE: label -- EXPLICIT


  SUPER- ENTITY(2)	geometric_representation_item
    ATTR:  dim,	TYPE: dimension_count -- DERIVED
      := dimension_of( SELF )


  ENTITY(SELF)	fill_area_style_tile_coloured_region
    ATTR:  closed_curve,	TYPE: curve_or_annotation_curve_occurrence -- EXPLICIT

    ATTR:  region_colour,	TYPE: colour -- EXPLICIT


*/


//MARK: - Partial Entity
  public final class _fill_area_style_tile_coloured_region : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eFILL_AREA_STYLE_TILE_COLOURED_REGION.self
    }

    //ATTRIBUTES
    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _closed_curve: sCURVE_OR_ANNOTATION_CURVE_OCCURRENCE // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _region_colour: eCOLOUR // PLAIN EXPLICIT ATTRIBUTE

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      //SELECT data types (indirectly) referencing the current type as a member of the select list
      members.insert(SDAI.STRING(sFILL_AREA_STYLE_TILE_SHAPE_SELECT.typeName)) // -> Self
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._closed_curve.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._region_colour.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._closed_curve.value.isValueEqualOptionally(to: rhs._closed_curve.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._region_colour.value.isValueEqualOptionally(to: rhs._region_colour.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._closed_curve.value.isValueEqualOptionally(to: rhs._closed_curve.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._region_colour.value.isValueEqualOptionally(to: rhs._region_colour.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: eFILL_AREA_STYLE_TILE_COLOURED_REGION?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.TYPEOF(SELF.CLOSED_CURVE, IS: eCURVE.self)
      let _TEMP2 =  !_TEMP1
      let _TEMP3 = SDAI.TYPEOF(SELF.CLOSED_CURVE, IS: eCIRCLE.self)
      let _TEMP4 = _TEMP2 || _TEMP3
      let _TEMP5 = SDAI.TYPEOF(SELF.CLOSED_CURVE, IS: eELLIPSE.self)
      let _TEMP6 = _TEMP4 || _TEMP5
      let _TEMP7 = SDAI.TYPEOF(SELF.CLOSED_CURVE, IS: eB_SPLINE_CURVE.self)
      let _TEMP8 = SELF.CLOSED_CURVE.GROUP_REF(eB_SPLINE_CURVE.self)
      let _TEMP9 = _TEMP8?.CLOSED_CURVE
      let _TEMP10 = _TEMP9 .==. SDAI.FORCE_OPTIONAL(SDAI.LOGICAL(SDAI.TRUE))
      let _TEMP11 = _TEMP7 && _TEMP10
      let _TEMP12 = _TEMP6 || _TEMP11
      let _TEMP13 = SDAI.TYPEOF(SELF.CLOSED_CURVE, IS: eCOMPOSITE_CURVE.self)
      let _TEMP14 = SELF.CLOSED_CURVE.GROUP_REF(eCOMPOSITE_CURVE.self)
      let _TEMP15 = _TEMP14?.CLOSED_CURVE
      let _TEMP16 = _TEMP15 .==. SDAI.FORCE_OPTIONAL(SDAI.LOGICAL(SDAI.TRUE))
      let _TEMP17 = _TEMP13 && _TEMP16
      let _TEMP18 = _TEMP12 || _TEMP17
      let _TEMP19 = SDAI.TYPEOF(SELF.CLOSED_CURVE, IS: ePOLYLINE.self)
      let _TEMP20 = SELF.CLOSED_CURVE.GROUP_REF(ePOLYLINE.self)
      let _TEMP21 = _TEMP20?.POINTS
      let _TEMP22 = SELF.CLOSED_CURVE.GROUP_REF(ePOLYLINE.self)
      let _TEMP23 = _TEMP22?.POINTS
      let _TEMP24 = SDAI.LOINDEX(_TEMP23)
      let _TEMP25 = _TEMP21?[_TEMP24]
      let _TEMP26 = SELF.CLOSED_CURVE.GROUP_REF(ePOLYLINE.self)
      let _TEMP27 = _TEMP26?.POINTS
      let _TEMP28 = SELF.CLOSED_CURVE.GROUP_REF(ePOLYLINE.self)
      let _TEMP29 = _TEMP28?.POINTS
      let _TEMP30 = SDAI.HIINDEX(_TEMP29)
      let _TEMP31 = _TEMP27?[_TEMP30]
      let _TEMP32 = _TEMP25 .==. _TEMP31
      let _TEMP33 = _TEMP19 && _TEMP32
      let _TEMP34 = _TEMP18 || _TEMP33
      return _TEMP34
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(CLOSED_CURVE: sCURVE_OR_ANNOTATION_CURVE_OCCURRENCE, REGION_COLOUR: eCOLOUR) {
      self._closed_curve = CLOSED_CURVE
      self._region_colour = REGION_COLOUR
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 2
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverRequiredParameter(as: 
        sCURVE_OR_ANNOTATION_CURVE_OCCURRENCE.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p1) = exchangeStructure.recoverRequiredParameter(as: eCOLOUR.self, from: parameters[1])
      else { exchangeStructure.add(errorContext: "while recovering parameter #1 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( CLOSED_CURVE: p0, REGION_COLOUR: p1 )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY fill_area_style_tile_coloured_region
    SUBTYPE OF ( geometric_representation_item );
      closed_curve   : curve_or_annotation_curve_occurrence;
      region_colour  : colour;
    WHERE
      wr1: ( ( NOT ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CURVE' IN TYPEOF( closed_curve ) ) ) OR
               ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CIRCLE' IN TYPEOF( closed_curve ) ) OR ( 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ELLIPSE'  IN TYPEOF( closed_curve ) ) OR ( ( 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.B_SPLINE_CURVE'  IN TYPEOF( closed_curve ) ) 
               AND ( closed_curve\b_spline_curve.closed_curve = TRUE ) ) OR ( ( 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.COMPOSITE_CURVE'  IN TYPEOF( closed_curve ) ) 
               AND ( closed_curve\composite_curve.closed_curve = TRUE ) ) OR ( ( 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.POLYLINE'  IN TYPEOF( closed_curve ) ) AND ( 
               closed_curve\polyline.points[LOINDEX( closed_curve\polyline.points )] = closed_curve\polyline.
               points[HIINDEX( closed_curve\polyline.points )] ) ) );
  END_ENTITY; -- fill_area_style_tile_coloured_region (line:15470 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eFILL_AREA_STYLE_TILE_COLOURED_REGION : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _fill_area_style_tile_coloured_region.self
    }
    public let partialEntity: _fill_area_style_tile_coloured_region

    //MARK: SUPERTYPES
    public let super_eREPRESENTATION_ITEM: eREPRESENTATION_ITEM 	// [1]
    public let super_eGEOMETRIC_REPRESENTATION_ITEM: eGEOMETRIC_REPRESENTATION_ITEM 	// [2]
    public var super_eFILL_AREA_STYLE_TILE_COLOURED_REGION: eFILL_AREA_STYLE_TILE_COLOURED_REGION { return self } 	// [3]

    //MARK: SUBTYPES

    //MARK: ATTRIBUTES
    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eFILL_AREA_STYLE_TILE_COLOURED_REGION`` )
    public var REGION_COLOUR: eCOLOUR {
      get {
        return SDAI.UNWRAP( self.partialEntity._region_colour )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._region_colour = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eFILL_AREA_STYLE_TILE_COLOURED_REGION`` )
    public var CLOSED_CURVE: sCURVE_OR_ANNOTATION_CURVE_OCCURRENCE {
      get {
        return SDAI.UNWRAP( self.partialEntity._closed_curve )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._closed_curve = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eREPRESENTATION_ITEM`` )
    public var NAME: tLABEL {
      get {
        return SDAI.UNWRAP( super_eREPRESENTATION_ITEM.partialEntity._name )
      }
      set(newValue) {
        let partial = super_eREPRESENTATION_ITEM.partialEntity
        partial._name = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUPER( ``eGEOMETRIC_REPRESENTATION_ITEM`` )
    public var DIM: tDIMENSION_COUNT?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"DIM") {
          return cached.value as! tDIMENSION_COUNT? 
        }
        let origin = super_eGEOMETRIC_REPRESENTATION_ITEM
        let value = tDIMENSION_COUNT(origin.partialEntity._dim__getter(SELF: origin))
        updateCache(derivedAttributeName:"DIM", value:value)
        return value
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_fill_area_style_tile_coloured_region.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eREPRESENTATION_ITEM.self) else { return nil }
      self.super_eREPRESENTATION_ITEM = super1

      guard let super2 = complexEntity?.entityReference(eGEOMETRIC_REPRESENTATION_ITEM.self) else { return nil }
      self.super_eGEOMETRIC_REPRESENTATION_ITEM = super2

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _fill_area_style_tile_coloured_region.WHERE_wr1(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "FILL_AREA_STYLE_TILE_COLOURED_REGION", type: self, explicitAttributeCount: 2)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eREPRESENTATION_ITEM.self)
      entityDef.add(supertype: eGEOMETRIC_REPRESENTATION_ITEM.self)
      entityDef.add(supertype: eFILL_AREA_STYLE_TILE_COLOURED_REGION.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "REGION_COLOUR", keyPath: \eFILL_AREA_STYLE_TILE_COLOURED_REGION.REGION_COLOUR, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "CLOSED_CURVE", keyPath: \eFILL_AREA_STYLE_TILE_COLOURED_REGION.CLOSED_CURVE, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "NAME", keyPath: \eFILL_AREA_STYLE_TILE_COLOURED_REGION.NAME, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "DIM", keyPath: \eFILL_AREA_STYLE_TILE_COLOURED_REGION.DIM, 
        kind: .derived, source: .superEntity, mayYieldEntityReference: false)

      return entityDef
    }

  }
}
