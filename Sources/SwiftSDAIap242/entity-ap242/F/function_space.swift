/* file: function_space.swift 	 generated: Mon Jan  3 16:32:52 2022 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.1, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY function_space
    SUBTYPE OF ( maths_space, generic_literal );
      domain_constraint  : space_constraint_type;
      domain_argument    : maths_space;
      range_constraint   : space_constraint_type;
      range_argument     : maths_space;
    WHERE
      wr1: ( expression_is_constant( domain_argument ) AND expression_is_constant( range_argument ) );
      wr2: ( ( domain_argument <> the_empty_space ) AND ( range_argument <> the_empty_space ) );
      wr3: ( ( domain_constraint <> sc_member ) OR ( NOT member_of( the_empty_space, domain_argument ) ) );
      wr4: ( ( range_constraint <> sc_member ) OR ( NOT member_of( the_empty_space, range_argument ) ) );
      wr5: ( NOT ( any_space_satisfies( domain_constraint, domain_argument ) AND any_space_satisfies( 
               range_constraint, range_argument ) ) );
  END_ENTITY; -- function_space (line:16049 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	generic_expression
    (no local attributes)

  SUPER- ENTITY(2)	maths_space
    (no local attributes)

  SUPER- ENTITY(3)	simple_generic_expression
    (no local attributes)

  SUPER- ENTITY(4)	generic_literal
    (no local attributes)

  ENTITY(SELF)	function_space
    ATTR:  domain_constraint,	TYPE: space_constraint_type -- EXPLICIT

    ATTR:  domain_argument,	TYPE: maths_space -- EXPLICIT

    ATTR:  range_constraint,	TYPE: space_constraint_type -- EXPLICIT

    ATTR:  range_argument,	TYPE: maths_space -- EXPLICIT


*/


//MARK: - Partial Entity
  public final class _function_space : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eFUNCTION_SPACE.self
    }

    //ATTRIBUTES
    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _domain_constraint: nSPACE_CONSTRAINT_TYPE // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _domain_argument: eMATHS_SPACE // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _range_constraint: nSPACE_CONSTRAINT_TYPE // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _range_argument: eMATHS_SPACE // PLAIN EXPLICIT ATTRIBUTE

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._domain_constraint.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._domain_argument.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._range_constraint.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._range_argument.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._domain_constraint.value.isValueEqualOptionally(to: rhs._domain_constraint.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._domain_argument.value.isValueEqualOptionally(to: rhs._domain_argument.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._range_constraint.value.isValueEqualOptionally(to: rhs._range_constraint.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._range_argument.value.isValueEqualOptionally(to: rhs._range_argument.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._domain_constraint.value.isValueEqualOptionally(to: rhs._domain_constraint.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._domain_argument.value.isValueEqualOptionally(to: rhs._domain_argument.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._range_constraint.value.isValueEqualOptionally(to: rhs._range_constraint.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._range_argument.value.isValueEqualOptionally(to: rhs._range_argument.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: eFUNCTION_SPACE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = EXPRESSION_IS_CONSTANT(eGENERIC_EXPRESSION(/*eMATHS_SPACE*/SELF.DOMAIN_ARGUMENT))
      let _TEMP2 = EXPRESSION_IS_CONSTANT(eGENERIC_EXPRESSION(/*eMATHS_SPACE*/SELF.RANGE_ARGUMENT))
      let _TEMP3 = _TEMP1 && _TEMP2
      return _TEMP3
    }
    public static func WHERE_wr2(SELF: eFUNCTION_SPACE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.FORCE_OPTIONAL(SELF.DOMAIN_ARGUMENT) .!=. SDAI.FORCE_OPTIONAL(THE_EMPTY_SPACE)
      let _TEMP2 = SDAI.FORCE_OPTIONAL(SELF.RANGE_ARGUMENT) .!=. SDAI.FORCE_OPTIONAL(THE_EMPTY_SPACE)
      let _TEMP3 = _TEMP1 && _TEMP2
      return _TEMP3
    }
    public static func WHERE_wr3(SELF: eFUNCTION_SPACE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.FORCE_OPTIONAL(SELF.DOMAIN_CONSTRAINT) .!=. SDAI.FORCE_OPTIONAL(SC_MEMBER)
      let _TEMP2 = MEMBER_OF(VAL: THE_EMPTY_SPACE, 
                             SPC: SELF.DOMAIN_ARGUMENT)
      let _TEMP3 =  !_TEMP2
      let _TEMP4 = _TEMP1 || _TEMP3
      return _TEMP4
    }
    public static func WHERE_wr4(SELF: eFUNCTION_SPACE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.FORCE_OPTIONAL(SELF.RANGE_CONSTRAINT) .!=. SDAI.FORCE_OPTIONAL(SC_MEMBER)
      let _TEMP2 = MEMBER_OF(VAL: THE_EMPTY_SPACE, 
                             SPC: SELF.RANGE_ARGUMENT)
      let _TEMP3 =  !_TEMP2
      let _TEMP4 = _TEMP1 || _TEMP3
      return _TEMP4
    }
    public static func WHERE_wr5(SELF: eFUNCTION_SPACE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = ANY_SPACE_SATISFIES(
        SC: SELF.DOMAIN_CONSTRAINT, 
        SPC: SELF.DOMAIN_ARGUMENT)
      let _TEMP2 = ANY_SPACE_SATISFIES(
        SC: SELF.RANGE_CONSTRAINT, SPC: SELF.RANGE_ARGUMENT)
      let _TEMP3 = _TEMP1 && _TEMP2
      let _TEMP4 =  !_TEMP3
      return _TEMP4
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(DOMAIN_CONSTRAINT: nSPACE_CONSTRAINT_TYPE, DOMAIN_ARGUMENT: eMATHS_SPACE, 
                RANGE_CONSTRAINT: nSPACE_CONSTRAINT_TYPE, RANGE_ARGUMENT: eMATHS_SPACE) {
      self._domain_constraint = DOMAIN_CONSTRAINT
      self._domain_argument = DOMAIN_ARGUMENT
      self._range_constraint = RANGE_CONSTRAINT
      self._range_argument = RANGE_ARGUMENT
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 4
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverRequiredParameter(as: nSPACE_CONSTRAINT_TYPE.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p1) = exchangeStructure.recoverRequiredParameter(as: eMATHS_SPACE.self, from: parameters[1])
      else { exchangeStructure.add(errorContext: "while recovering parameter #1 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p2) = exchangeStructure.recoverRequiredParameter(as: nSPACE_CONSTRAINT_TYPE.self, from: parameters[2])
      else { exchangeStructure.add(errorContext: "while recovering parameter #2 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p3) = exchangeStructure.recoverRequiredParameter(as: eMATHS_SPACE.self, from: parameters[3])
      else { exchangeStructure.add(errorContext: "while recovering parameter #3 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( DOMAIN_CONSTRAINT: p0, DOMAIN_ARGUMENT: p1, RANGE_CONSTRAINT: p2, RANGE_ARGUMENT: p3 )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY function_space
    SUBTYPE OF ( maths_space, generic_literal );
      domain_constraint  : space_constraint_type;
      domain_argument    : maths_space;
      range_constraint   : space_constraint_type;
      range_argument     : maths_space;
    WHERE
      wr1: ( expression_is_constant( domain_argument ) AND expression_is_constant( range_argument ) );
      wr2: ( ( domain_argument <> the_empty_space ) AND ( range_argument <> the_empty_space ) );
      wr3: ( ( domain_constraint <> sc_member ) OR ( NOT member_of( the_empty_space, domain_argument ) ) );
      wr4: ( ( range_constraint <> sc_member ) OR ( NOT member_of( the_empty_space, range_argument ) ) );
      wr5: ( NOT ( any_space_satisfies( domain_constraint, domain_argument ) AND any_space_satisfies( 
               range_constraint, range_argument ) ) );
  END_ENTITY; -- function_space (line:16049 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eFUNCTION_SPACE : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _function_space.self
    }
    public let partialEntity: _function_space

    //MARK: SUPERTYPES
    public let super_eGENERIC_EXPRESSION: eGENERIC_EXPRESSION 	// [1]
    public let super_eMATHS_SPACE: eMATHS_SPACE 	// [2]
    public let super_eSIMPLE_GENERIC_EXPRESSION: eSIMPLE_GENERIC_EXPRESSION 	// [3]
    public let super_eGENERIC_LITERAL: eGENERIC_LITERAL 	// [4]
    public var super_eFUNCTION_SPACE: eFUNCTION_SPACE { return self } 	// [5]

    //MARK: SUBTYPES

    //MARK: ATTRIBUTES
    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eFUNCTION_SPACE`` )
    public var RANGE_ARGUMENT: eMATHS_SPACE {
      get {
        return SDAI.UNWRAP( self.partialEntity._range_argument )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._range_argument = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eFUNCTION_SPACE`` )
    public var DOMAIN_CONSTRAINT: nSPACE_CONSTRAINT_TYPE {
      get {
        return SDAI.UNWRAP( self.partialEntity._domain_constraint )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._domain_constraint = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eFUNCTION_SPACE`` )
    public var RANGE_CONSTRAINT: nSPACE_CONSTRAINT_TYPE {
      get {
        return SDAI.UNWRAP( self.partialEntity._range_constraint )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._range_constraint = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eFUNCTION_SPACE`` )
    public var DOMAIN_ARGUMENT: eMATHS_SPACE {
      get {
        return SDAI.UNWRAP( self.partialEntity._domain_argument )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._domain_argument = SDAI.UNWRAP(newValue)
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_function_space.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eGENERIC_EXPRESSION.self) else { return nil }
      self.super_eGENERIC_EXPRESSION = super1

      guard let super2 = complexEntity?.entityReference(eMATHS_SPACE.self) else { return nil }
      self.super_eMATHS_SPACE = super2

      guard let super3 = complexEntity?.entityReference(eSIMPLE_GENERIC_EXPRESSION.self) else { return nil }
      self.super_eSIMPLE_GENERIC_EXPRESSION = super3

      guard let super4 = complexEntity?.entityReference(eGENERIC_LITERAL.self) else { return nil }
      self.super_eGENERIC_LITERAL = super4

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _function_space.WHERE_wr1(SELF: instance)
      result[prefix2 + " .WHERE_wr2"] = _function_space.WHERE_wr2(SELF: instance)
      result[prefix2 + " .WHERE_wr3"] = _function_space.WHERE_wr3(SELF: instance)
      result[prefix2 + " .WHERE_wr4"] = _function_space.WHERE_wr4(SELF: instance)
      result[prefix2 + " .WHERE_wr5"] = _function_space.WHERE_wr5(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "FUNCTION_SPACE", type: self, explicitAttributeCount: 4)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eGENERIC_EXPRESSION.self)
      entityDef.add(supertype: eMATHS_SPACE.self)
      entityDef.add(supertype: eSIMPLE_GENERIC_EXPRESSION.self)
      entityDef.add(supertype: eGENERIC_LITERAL.self)
      entityDef.add(supertype: eFUNCTION_SPACE.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "RANGE_ARGUMENT", keyPath: \eFUNCTION_SPACE.RANGE_ARGUMENT, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "DOMAIN_CONSTRAINT", keyPath: \eFUNCTION_SPACE.DOMAIN_CONSTRAINT, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "RANGE_CONSTRAINT", keyPath: \eFUNCTION_SPACE.RANGE_CONSTRAINT, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "DOMAIN_ARGUMENT", keyPath: \eFUNCTION_SPACE.DOMAIN_ARGUMENT, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)

      return entityDef
    }

  }
}
