/* file: functionally_defined_transformation.swift 	 generated: Mon Jan  3 16:32:52 2022 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.1, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY functionally_defined_transformation;
      name         : label;
      description  : OPTIONAL text;
  END_ENTITY; -- functionally_defined_transformation (line:16072 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  ENTITY(SELF)	functionally_defined_transformation
    ATTR:  name,	TYPE: label -- EXPLICIT

    ATTR:  description,	TYPE: OPTIONAL text -- EXPLICIT


  SUB- ENTITY(2)	cartesian_transformation_operator_3d
    ATTR:  axis3,	TYPE: OPTIONAL direction -- EXPLICIT

    ATTR:  u,	TYPE: LIST [3 : 3] OF direction -- DERIVED	(AMBIGUOUS/MASKED)
      := base_axis( 3, SELF\cartesian_transformation_operator.axis1, SELF\cartesian_transformation_operator.
        axis2, axis3 )


  SUB- ENTITY(3)	cartesian_transformation_operator_2d
    ATTR:  u,	TYPE: LIST [2 : 2] OF direction -- DERIVED	(AMBIGUOUS/MASKED)
      := base_axis( 2, SELF\cartesian_transformation_operator.axis1, SELF\cartesian_transformation_operator.
        axis2, ? )


  SUB- ENTITY(4)	cartesian_transformation_operator
    ATTR:  axis1,	TYPE: OPTIONAL direction -- EXPLICIT

    ATTR:  axis2,	TYPE: OPTIONAL direction -- EXPLICIT

    ATTR:  local_origin,	TYPE: cartesian_point -- EXPLICIT

    ATTR:  scale,	TYPE: OPTIONAL REAL -- EXPLICIT

    ATTR:  scl,	TYPE: REAL -- DERIVED
      := NVL( scale, 1 )


*/


//MARK: - Partial Entity
  public final class _functionally_defined_transformation : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eFUNCTIONALLY_DEFINED_TRANSFORMATION.self
    }

    //ATTRIBUTES
    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _name: tLABEL // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _description: tTEXT?  // PLAIN EXPLICIT ATTRIBUTE

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      //SELECT data types (indirectly) referencing the current type as a member of the select list
      members.insert(SDAI.STRING(sTRANSFORMATION.typeName)) // -> Self
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._name.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._description?.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._name.value.isValueEqualOptionally(to: rhs._name.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._description?.value.isValueEqualOptionally(to: rhs._description?.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._name.value.isValueEqualOptionally(to: rhs._name.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._description?.value.isValueEqualOptionally(to: rhs._description?.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(NAME: tLABEL, DESCRIPTION: tTEXT? ) {
      self._name = NAME
      self._description = DESCRIPTION
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 2
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverRequiredParameter(as: tLABEL.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p1) = exchangeStructure.recoverOptionalParameter(as: tTEXT.self, from: parameters[1])
      else { exchangeStructure.add(errorContext: "while recovering parameter #1 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( NAME: p0, DESCRIPTION: p1 )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY functionally_defined_transformation;
      name         : label;
      description  : OPTIONAL text;
  END_ENTITY; -- functionally_defined_transformation (line:16072 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eFUNCTIONALLY_DEFINED_TRANSFORMATION : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _functionally_defined_transformation.self
    }
    public let partialEntity: _functionally_defined_transformation

    //MARK: SUPERTYPES
    public var super_eFUNCTIONALLY_DEFINED_TRANSFORMATION: eFUNCTIONALLY_DEFINED_TRANSFORMATION { return self } 	// [1]

    //MARK: SUBTYPES
    public var sub_eCARTESIAN_TRANSFORMATION_OPERATOR_3D: eCARTESIAN_TRANSFORMATION_OPERATOR_3D? {	// [2]
      return self.complexEntity.entityReference(eCARTESIAN_TRANSFORMATION_OPERATOR_3D.self)
    }

    public var sub_eCARTESIAN_TRANSFORMATION_OPERATOR_2D: eCARTESIAN_TRANSFORMATION_OPERATOR_2D? {	// [3]
      return self.complexEntity.entityReference(eCARTESIAN_TRANSFORMATION_OPERATOR_2D.self)
    }

    public var sub_eCARTESIAN_TRANSFORMATION_OPERATOR: eCARTESIAN_TRANSFORMATION_OPERATOR? {	// [4]
      return self.complexEntity.entityReference(eCARTESIAN_TRANSFORMATION_OPERATOR.self)
    }


    //MARK: ATTRIBUTES
    // U: (2 AMBIGUOUS REFs)

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eFUNCTIONALLY_DEFINED_TRANSFORMATION`` )
    public var DESCRIPTION: tTEXT?  {
      get {
        return self.partialEntity._description
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._description = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCARTESIAN_TRANSFORMATION_OPERATOR`` )
    public var SCALE: SDAI.REAL?  {
      get {
        return sub_eCARTESIAN_TRANSFORMATION_OPERATOR?.partialEntity._scale
      }
      set(newValue) {
        guard let partial = sub_eCARTESIAN_TRANSFORMATION_OPERATOR?.super_eCARTESIAN_TRANSFORMATION_OPERATOR
          .partialEntity else { return }
        partial._scale = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCARTESIAN_TRANSFORMATION_OPERATOR`` )
    public var LOCAL_ORIGIN: eCARTESIAN_POINT?  {
      get {
        return sub_eCARTESIAN_TRANSFORMATION_OPERATOR?.partialEntity._local_origin
      }
      set(newValue) {
        guard let partial = sub_eCARTESIAN_TRANSFORMATION_OPERATOR?.super_eCARTESIAN_TRANSFORMATION_OPERATOR
          .partialEntity else { return }
        partial._local_origin = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eCARTESIAN_TRANSFORMATION_OPERATOR`` )
    public var SCL: SDAI.REAL?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"SCL") {
          return cached.value as! SDAI.REAL? 
        }
        guard let origin = sub_eCARTESIAN_TRANSFORMATION_OPERATOR else { return nil }
        let value = SDAI.REAL(origin.partialEntity._scl__getter(SELF: origin))
        updateCache(derivedAttributeName:"SCL", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCARTESIAN_TRANSFORMATION_OPERATOR_3D`` )
    public var AXIS3: eDIRECTION?  {
      get {
        return sub_eCARTESIAN_TRANSFORMATION_OPERATOR_3D?.partialEntity._axis3
      }
      set(newValue) {
        guard let partial = sub_eCARTESIAN_TRANSFORMATION_OPERATOR_3D?.super_eCARTESIAN_TRANSFORMATION_OPERATOR_3D
          .partialEntity else { return }
        partial._axis3 = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCARTESIAN_TRANSFORMATION_OPERATOR`` )
    public var AXIS2: eDIRECTION?  {
      get {
        return sub_eCARTESIAN_TRANSFORMATION_OPERATOR?.partialEntity._axis2
      }
      set(newValue) {
        guard let partial = sub_eCARTESIAN_TRANSFORMATION_OPERATOR?.super_eCARTESIAN_TRANSFORMATION_OPERATOR
          .partialEntity else { return }
        partial._axis2 = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCARTESIAN_TRANSFORMATION_OPERATOR`` )
    public var AXIS1: eDIRECTION?  {
      get {
        return sub_eCARTESIAN_TRANSFORMATION_OPERATOR?.partialEntity._axis1
      }
      set(newValue) {
        guard let partial = sub_eCARTESIAN_TRANSFORMATION_OPERATOR?.super_eCARTESIAN_TRANSFORMATION_OPERATOR
          .partialEntity else { return }
        partial._axis1 = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eFUNCTIONALLY_DEFINED_TRANSFORMATION`` )
    public var NAME: tLABEL {
      get {
        return SDAI.UNWRAP( self.partialEntity._name )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._name = SDAI.UNWRAP(newValue)
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_functionally_defined_transformation.self) else { return nil }
      self.partialEntity = partial

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }

    //SIMPLE ENTITY REFERENCE
    public convenience init?(_ partial:_functionally_defined_transformation) {
      let complex = SDAI.ComplexEntity(entities:[partial])
      self.init(complex: complex)
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "FUNCTIONALLY_DEFINED_TRANSFORMATION", type: self, explicitAttributeCount: 2)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eFUNCTIONALLY_DEFINED_TRANSFORMATION.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "DESCRIPTION", keyPath: \eFUNCTIONALLY_DEFINED_TRANSFORMATION.DESCRIPTION, 
        kind: .explicitOptional, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "SCALE", keyPath: \eFUNCTIONALLY_DEFINED_TRANSFORMATION.SCALE, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "LOCAL_ORIGIN", keyPath: \eFUNCTIONALLY_DEFINED_TRANSFORMATION.LOCAL_ORIGIN, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "SCL", keyPath: \eFUNCTIONALLY_DEFINED_TRANSFORMATION.SCL, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "AXIS3", keyPath: \eFUNCTIONALLY_DEFINED_TRANSFORMATION.AXIS3, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "AXIS2", keyPath: \eFUNCTIONALLY_DEFINED_TRANSFORMATION.AXIS2, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "AXIS1", keyPath: \eFUNCTIONALLY_DEFINED_TRANSFORMATION.AXIS1, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "NAME", keyPath: \eFUNCTIONALLY_DEFINED_TRANSFORMATION.NAME, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: false)

      return entityDef
    }

  }
}
