/* file: feature_definition.swift 	 generated: Mon Jan  3 16:32:52 2022 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.1, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY feature_definition
    SUPERTYPE OF ( 
        ONEOF ( 
            boss, 
            compound_feature, 
            externally_defined_feature_definition, 
            flat_face, 
            gear, 
            marking, 
            outer_round, 
            outside_profile, 
            pocket, 
            protrusion, 
            removal_volume, 
            replicate_feature, 
            revolved_profile, 
            rib_top, 
            round_hole, 
            rounded_end, 
            spherical_cap, 
            step, 
            slot, 
            thread, 
            turned_knurl ) )
    SUBTYPE OF ( characterized_object );
  END_ENTITY; -- feature_definition (line:15279 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	characterized_object
    ATTR:  name,	TYPE: label -- EXPLICIT (DYNAMIC)
      -- possibly overriden by
          ENTITY: shape_feature_definition_element_relationship,	TYPE: label	(as DERIVED)
          ENTITY: shape_feature_fit_relationship,	TYPE: label	(as DERIVED)
          ENTITY: characterized_representation,	TYPE: label	(as DERIVED)
          ENTITY: shape_feature_definition_relationship,	TYPE: label	(as DERIVED)

    ATTR:  description,	TYPE: OPTIONAL text -- EXPLICIT (DYNAMIC)
      -- possibly overriden by
          ENTITY: shape_feature_definition_element_relationship,	TYPE: text	(as DERIVED)
          ENTITY: shape_feature_fit_relationship,	TYPE: text	(as DERIVED)
          ENTITY: characterized_representation,	TYPE: text	(as DERIVED)
          ENTITY: shape_feature_definition_relationship,	TYPE: text	(as DERIVED)


  ENTITY(SELF)	feature_definition
    (no local attributes)

  SUB- ENTITY(3)	circular_pattern
    (no local attributes)

  SUB- ENTITY(4)	rectangular_pattern
    (no local attributes)

  SUB- ENTITY(5)	feature_pattern
    (no local attributes)

  SUB- ENTITY(6)	replicate_feature
    (no local attributes)

  SUB- ENTITY(7)	outer_round
    (no local attributes)

  SUB- ENTITY(8)	boss
    (no local attributes)

  SUB- ENTITY(9)	instanced_feature
    (no local attributes)

  SUB- ENTITY(10)	spherical_cap
    (no local attributes)

  SUB- ENTITY(11)	simplified_counterdrill_hole_definition
    (no local attributes)

  SUB- ENTITY(12)	counterdrill_hole_definition
    ATTR:  counterbore,	TYPE: explicit_round_hole -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  counterdrill_angle,	TYPE: positive_plane_angle_measure_with_unit -- EXPLICIT

    ATTR:  counterdrill_angle_tolerance,	TYPE: tolerance_value -- EXPLICIT

    ATTR:  drilled_hole_depth,	TYPE: OPTIONAL positive_length_measure_with_unit -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  drilled_hole_depth_tolerance,	TYPE: OPTIONAL tolerance_value -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  drilled_hole_diameter,	TYPE: positive_length_measure_with_unit -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  drilled_hole_diameter_tolerance,	TYPE: OPTIONAL tolerance_value_or_limits_and_fits -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  through_hole,	TYPE: BOOLEAN -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(13)	simplified_countersink_hole_definition
    (no local attributes)

  SUB- ENTITY(14)	countersink_hole_definition
    ATTR:  countersink_angle,	TYPE: positive_plane_angle_measure_with_unit -- EXPLICIT

    ATTR:  countersink_angle_tolerance,	TYPE: tolerance_value -- EXPLICIT

    ATTR:  countersink_diameter,	TYPE: positive_length_measure_with_unit -- EXPLICIT

    ATTR:  countersink_diameter_tolerance,	TYPE: OPTIONAL tolerance_value_or_limits_and_fits -- EXPLICIT

    ATTR:  drilled_hole_depth,	TYPE: OPTIONAL positive_length_measure_with_unit -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  drilled_hole_depth_tolerance,	TYPE: OPTIONAL tolerance_value -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  drilled_hole_diameter,	TYPE: positive_length_measure_with_unit -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  drilled_hole_diameter_tolerance,	TYPE: OPTIONAL tolerance_value_or_limits_and_fits -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  through_hole,	TYPE: BOOLEAN -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(15)	simplified_spotface_hole_definition
    (no local attributes)

  SUB- ENTITY(16)	spotface_hole_definition
    REDCR: counterbore,	TYPE: LIST [1 : ?] OF UNIQUE spotface_definition -- EXPLICIT	(AMBIGUOUS/MASKED)
      -- OVERRIDING ENTITY: counterbore_hole_definition

    ATTR:  spotface,	TYPE: LIST [1 : ?] OF UNIQUE spotface_definition -- DERIVED
      := SELF\counterbore_hole_definition.counterbore


  SUB- ENTITY(17)	simplified_counterbore_hole_definition
    (no local attributes)

  SUB- ENTITY(18)	counterbore_hole_definition
    ATTR:  counterbore,	TYPE: LIST [1 : ?] OF UNIQUE explicit_round_hole -- EXPLICIT	(AMBIGUOUS/MASKED)
      -- possibly overriden by
          ENTITY: spotface_hole_definition,	TYPE: LIST [1 : ?] OF UNIQUE spotface_definition

    ATTR:  drilled_hole_depth,	TYPE: OPTIONAL positive_length_measure_with_unit -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  drilled_hole_depth_tolerance,	TYPE: OPTIONAL tolerance_value -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  drilled_hole_diameter,	TYPE: positive_length_measure_with_unit -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  drilled_hole_diameter_tolerance,	TYPE: OPTIONAL tolerance_value_or_limits_and_fits -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  through_hole,	TYPE: BOOLEAN -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(19)	explicit_composite_hole
    ATTR:  placement,	TYPE: shape_representation -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  explicit_shape,	TYPE: SET [0 : ?] OF item_identified_representation_usage -- INVERSE
      FOR definition;


  SUB- ENTITY(20)	composite_hole
    (no local attributes)

  SUB- ENTITY(21)	compound_feature
    (no local attributes)

  SUB- ENTITY(22)	rounded_end
    (no local attributes)

  SUB- ENTITY(23)	outside_profile
    (no local attributes)

  SUB- ENTITY(24)	flat_face
    (no local attributes)

  SUB- ENTITY(25)	general_feature
    (no local attributes)

  SUB- ENTITY(26)	feature_definition_with_connection_area
    (no local attributes)

  SUB- ENTITY(27)	contact_feature_definition
    (no local attributes)

  SUB- ENTITY(28)	shape_feature_definition
    (no local attributes)

  SUB- ENTITY(29)	slot
    (no local attributes)

  SUB- ENTITY(30)	externally_defined_feature_definition
    (no local attributes)

  SUB- ENTITY(31)	gear
    (no local attributes)

  SUB- ENTITY(32)	marking
    (no local attributes)

  SUB- ENTITY(33)	pocket
    (no local attributes)

  SUB- ENTITY(34)	protrusion
    (no local attributes)

  SUB- ENTITY(35)	removal_volume
    (no local attributes)

  SUB- ENTITY(36)	revolved_profile
    (no local attributes)

  SUB- ENTITY(37)	rib_top
    (no local attributes)

  SUB- ENTITY(38)	spotface_definition
    ATTR:  spotface_radius,	TYPE: positive_length_measure_with_unit -- EXPLICIT

    ATTR:  spotface_radius_tolerance,	TYPE: OPTIONAL tolerance_value -- EXPLICIT


  SUB- ENTITY(39)	explicit_round_hole
    ATTR:  depth,	TYPE: positive_length_measure_with_unit -- EXPLICIT

    ATTR:  depth_tolerance,	TYPE: OPTIONAL tolerance_value -- EXPLICIT

    ATTR:  diameter,	TYPE: positive_length_measure_with_unit -- EXPLICIT

    ATTR:  diameter_tolerance,	TYPE: OPTIONAL tolerance_value_or_limits_and_fits -- EXPLICIT

    ATTR:  placement,	TYPE: shape_representation -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(40)	round_hole
    (no local attributes)

  SUB- ENTITY(41)	step
    (no local attributes)

  SUB- ENTITY(42)	thread
    (no local attributes)

  SUB- ENTITY(43)	turned_knurl
    (no local attributes)

  SUB- ENTITY(44)	locator
    (no local attributes)

  SUB- ENTITY(45)	barring_hole
    (no local attributes)

  SUB- ENTITY(46)	bead
    (no local attributes)

  SUB- ENTITY(47)	hole_in_panel
    (no local attributes)

  SUB- ENTITY(48)	feature_in_panel
    (no local attributes)

  SUB- ENTITY(49)	joggle
    (no local attributes)

*/


//MARK: - Partial Entity
  public final class _feature_definition : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eFEATURE_DEFINITION.self
    }

    //ATTRIBUTES
    // (no local attributes)

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      //SELECT data types (indirectly) referencing the current type as a member of the select list
      members.insert(SDAI.STRING(sCLASSIFICATION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sACTION_ITEMS.typeName)) // -> sCLASSIFICATION_ITEM
      members.insert(SDAI.STRING(sCHANGE_MANAGEMENT_OBJECT.typeName)) // -> sACTION_ITEMS
      members.insert(SDAI.STRING(sIR_USAGE_ITEM.typeName)) // -> sCLASSIFICATION_ITEM
      members.insert(SDAI.STRING(sDOCUMENT_REFERENCE_ITEM.typeName)) // -> Self
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init() {
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 0
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      self.init( )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY feature_definition
    SUPERTYPE OF ( 
        ONEOF ( 
            boss, 
            compound_feature, 
            externally_defined_feature_definition, 
            flat_face, 
            gear, 
            marking, 
            outer_round, 
            outside_profile, 
            pocket, 
            protrusion, 
            removal_volume, 
            replicate_feature, 
            revolved_profile, 
            rib_top, 
            round_hole, 
            rounded_end, 
            spherical_cap, 
            step, 
            slot, 
            thread, 
            turned_knurl ) )
    SUBTYPE OF ( characterized_object );
  END_ENTITY; -- feature_definition (line:15279 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eFEATURE_DEFINITION : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _feature_definition.self
    }
    public let partialEntity: _feature_definition

    //MARK: SUPERTYPES
    public let super_eCHARACTERIZED_OBJECT: eCHARACTERIZED_OBJECT 	// [1]
    public var super_eFEATURE_DEFINITION: eFEATURE_DEFINITION { return self } 	// [2]

    //MARK: SUBTYPES
    public var sub_eCIRCULAR_PATTERN: eCIRCULAR_PATTERN? {	// [3]
      return self.complexEntity.entityReference(eCIRCULAR_PATTERN.self)
    }

    public var sub_eRECTANGULAR_PATTERN: eRECTANGULAR_PATTERN? {	// [4]
      return self.complexEntity.entityReference(eRECTANGULAR_PATTERN.self)
    }

    public var sub_eFEATURE_PATTERN: eFEATURE_PATTERN? {	// [5]
      return self.complexEntity.entityReference(eFEATURE_PATTERN.self)
    }

    public var sub_eREPLICATE_FEATURE: eREPLICATE_FEATURE? {	// [6]
      return self.complexEntity.entityReference(eREPLICATE_FEATURE.self)
    }

    public var sub_eOUTER_ROUND: eOUTER_ROUND? {	// [7]
      return self.complexEntity.entityReference(eOUTER_ROUND.self)
    }

    public var sub_eBOSS: eBOSS? {	// [8]
      return self.complexEntity.entityReference(eBOSS.self)
    }

    public var sub_eINSTANCED_FEATURE: eINSTANCED_FEATURE? {	// [9]
      return self.complexEntity.entityReference(eINSTANCED_FEATURE.self)
    }

    public var sub_eSPHERICAL_CAP: eSPHERICAL_CAP? {	// [10]
      return self.complexEntity.entityReference(eSPHERICAL_CAP.self)
    }

    public var sub_eSIMPLIFIED_COUNTERDRILL_HOLE_DEFINITION: eSIMPLIFIED_COUNTERDRILL_HOLE_DEFINITION? {	// [11]
      return self.complexEntity.entityReference(eSIMPLIFIED_COUNTERDRILL_HOLE_DEFINITION.self)
    }

    public var sub_eCOUNTERDRILL_HOLE_DEFINITION: eCOUNTERDRILL_HOLE_DEFINITION? {	// [12]
      return self.complexEntity.entityReference(eCOUNTERDRILL_HOLE_DEFINITION.self)
    }

    public var sub_eSIMPLIFIED_COUNTERSINK_HOLE_DEFINITION: eSIMPLIFIED_COUNTERSINK_HOLE_DEFINITION? {	// [13]
      return self.complexEntity.entityReference(eSIMPLIFIED_COUNTERSINK_HOLE_DEFINITION.self)
    }

    public var sub_eCOUNTERSINK_HOLE_DEFINITION: eCOUNTERSINK_HOLE_DEFINITION? {	// [14]
      return self.complexEntity.entityReference(eCOUNTERSINK_HOLE_DEFINITION.self)
    }

    public var sub_eSIMPLIFIED_SPOTFACE_HOLE_DEFINITION: eSIMPLIFIED_SPOTFACE_HOLE_DEFINITION? {	// [15]
      return self.complexEntity.entityReference(eSIMPLIFIED_SPOTFACE_HOLE_DEFINITION.self)
    }

    public var sub_eSPOTFACE_HOLE_DEFINITION: eSPOTFACE_HOLE_DEFINITION? {	// [16]
      return self.complexEntity.entityReference(eSPOTFACE_HOLE_DEFINITION.self)
    }

    public var sub_eSIMPLIFIED_COUNTERBORE_HOLE_DEFINITION: eSIMPLIFIED_COUNTERBORE_HOLE_DEFINITION? {	// [17]
      return self.complexEntity.entityReference(eSIMPLIFIED_COUNTERBORE_HOLE_DEFINITION.self)
    }

    public var sub_eCOUNTERBORE_HOLE_DEFINITION: eCOUNTERBORE_HOLE_DEFINITION? {	// [18]
      return self.complexEntity.entityReference(eCOUNTERBORE_HOLE_DEFINITION.self)
    }

    public var sub_eEXPLICIT_COMPOSITE_HOLE: eEXPLICIT_COMPOSITE_HOLE? {	// [19]
      return self.complexEntity.entityReference(eEXPLICIT_COMPOSITE_HOLE.self)
    }

    public var sub_eCOMPOSITE_HOLE: eCOMPOSITE_HOLE? {	// [20]
      return self.complexEntity.entityReference(eCOMPOSITE_HOLE.self)
    }

    public var sub_eCOMPOUND_FEATURE: eCOMPOUND_FEATURE? {	// [21]
      return self.complexEntity.entityReference(eCOMPOUND_FEATURE.self)
    }

    public var sub_eROUNDED_END: eROUNDED_END? {	// [22]
      return self.complexEntity.entityReference(eROUNDED_END.self)
    }

    public var sub_eOUTSIDE_PROFILE: eOUTSIDE_PROFILE? {	// [23]
      return self.complexEntity.entityReference(eOUTSIDE_PROFILE.self)
    }

    public var sub_eFLAT_FACE: eFLAT_FACE? {	// [24]
      return self.complexEntity.entityReference(eFLAT_FACE.self)
    }

    public var sub_eGENERAL_FEATURE: eGENERAL_FEATURE? {	// [25]
      return self.complexEntity.entityReference(eGENERAL_FEATURE.self)
    }

    public var sub_eFEATURE_DEFINITION_WITH_CONNECTION_AREA: eFEATURE_DEFINITION_WITH_CONNECTION_AREA? {	// [26]
      return self.complexEntity.entityReference(eFEATURE_DEFINITION_WITH_CONNECTION_AREA.self)
    }

    public var sub_eCONTACT_FEATURE_DEFINITION: eCONTACT_FEATURE_DEFINITION? {	// [27]
      return self.complexEntity.entityReference(eCONTACT_FEATURE_DEFINITION.self)
    }

    public var sub_eSHAPE_FEATURE_DEFINITION: eSHAPE_FEATURE_DEFINITION? {	// [28]
      return self.complexEntity.entityReference(eSHAPE_FEATURE_DEFINITION.self)
    }

    public var sub_eSLOT: eSLOT? {	// [29]
      return self.complexEntity.entityReference(eSLOT.self)
    }

    public var sub_eEXTERNALLY_DEFINED_FEATURE_DEFINITION: eEXTERNALLY_DEFINED_FEATURE_DEFINITION? {	// [30]
      return self.complexEntity.entityReference(eEXTERNALLY_DEFINED_FEATURE_DEFINITION.self)
    }

    public var sub_eGEAR: eGEAR? {	// [31]
      return self.complexEntity.entityReference(eGEAR.self)
    }

    public var sub_eMARKING: eMARKING? {	// [32]
      return self.complexEntity.entityReference(eMARKING.self)
    }

    public var sub_ePOCKET: ePOCKET? {	// [33]
      return self.complexEntity.entityReference(ePOCKET.self)
    }

    public var sub_ePROTRUSION: ePROTRUSION? {	// [34]
      return self.complexEntity.entityReference(ePROTRUSION.self)
    }

    public var sub_eREMOVAL_VOLUME: eREMOVAL_VOLUME? {	// [35]
      return self.complexEntity.entityReference(eREMOVAL_VOLUME.self)
    }

    public var sub_eREVOLVED_PROFILE: eREVOLVED_PROFILE? {	// [36]
      return self.complexEntity.entityReference(eREVOLVED_PROFILE.self)
    }

    public var sub_eRIB_TOP: eRIB_TOP? {	// [37]
      return self.complexEntity.entityReference(eRIB_TOP.self)
    }

    public var sub_eSPOTFACE_DEFINITION: eSPOTFACE_DEFINITION? {	// [38]
      return self.complexEntity.entityReference(eSPOTFACE_DEFINITION.self)
    }

    public var sub_eEXPLICIT_ROUND_HOLE: eEXPLICIT_ROUND_HOLE? {	// [39]
      return self.complexEntity.entityReference(eEXPLICIT_ROUND_HOLE.self)
    }

    public var sub_eROUND_HOLE: eROUND_HOLE? {	// [40]
      return self.complexEntity.entityReference(eROUND_HOLE.self)
    }

    public var sub_eSTEP: eSTEP? {	// [41]
      return self.complexEntity.entityReference(eSTEP.self)
    }

    public var sub_eTHREAD: eTHREAD? {	// [42]
      return self.complexEntity.entityReference(eTHREAD.self)
    }

    public var sub_eTURNED_KNURL: eTURNED_KNURL? {	// [43]
      return self.complexEntity.entityReference(eTURNED_KNURL.self)
    }

    public var sub_eLOCATOR: eLOCATOR? {	// [44]
      return self.complexEntity.entityReference(eLOCATOR.self)
    }

    public var sub_eBARRING_HOLE: eBARRING_HOLE? {	// [45]
      return self.complexEntity.entityReference(eBARRING_HOLE.self)
    }

    public var sub_eBEAD: eBEAD? {	// [46]
      return self.complexEntity.entityReference(eBEAD.self)
    }

    public var sub_eHOLE_IN_PANEL: eHOLE_IN_PANEL? {	// [47]
      return self.complexEntity.entityReference(eHOLE_IN_PANEL.self)
    }

    public var sub_eFEATURE_IN_PANEL: eFEATURE_IN_PANEL? {	// [48]
      return self.complexEntity.entityReference(eFEATURE_IN_PANEL.self)
    }

    public var sub_eJOGGLE: eJOGGLE? {	// [49]
      return self.complexEntity.entityReference(eJOGGLE.self)
    }


    //MARK: ATTRIBUTES
    // DRILLED_HOLE_DEPTH: (3 AMBIGUOUS REFs)

    // DRILLED_HOLE_DIAMETER_TOLERANCE: (3 AMBIGUOUS REFs)

    // PLACEMENT: (2 AMBIGUOUS REFs)

    // THROUGH_HOLE: (3 AMBIGUOUS REFs)

    // COUNTERBORE: (3 AMBIGUOUS REFs)

    // DRILLED_HOLE_DIAMETER: (3 AMBIGUOUS REFs)

    // DRILLED_HOLE_DEPTH_TOLERANCE: (3 AMBIGUOUS REFs)

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eEXPLICIT_ROUND_HOLE`` )
    public var DIAMETER_TOLERANCE: sTOLERANCE_VALUE_OR_LIMITS_AND_FITS?  {
      get {
        return sub_eEXPLICIT_ROUND_HOLE?.partialEntity._diameter_tolerance
      }
      set(newValue) {
        guard let partial = sub_eEXPLICIT_ROUND_HOLE?.super_eEXPLICIT_ROUND_HOLE.partialEntity
          else { return }
        partial._diameter_tolerance = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eEXPLICIT_ROUND_HOLE`` )
    public var DEPTH_TOLERANCE: eTOLERANCE_VALUE?  {
      get {
        return sub_eEXPLICIT_ROUND_HOLE?.partialEntity._depth_tolerance
      }
      set(newValue) {
        guard let partial = sub_eEXPLICIT_ROUND_HOLE?.super_eEXPLICIT_ROUND_HOLE.partialEntity
          else { return }
        partial._depth_tolerance = newValue
      }
    }

    /// __EXPLICIT(DYNAMIC)__ attribute
    /// - origin: SUPER( ``eCHARACTERIZED_OBJECT`` )
    public var DESCRIPTION: tTEXT?  {
      get {
        if let resolved = _characterized_object._description__provider(complex: self.complexEntity) {
          let value = resolved._description__getter(complex: self.complexEntity)
          return value
        }
        else {
          return super_eCHARACTERIZED_OBJECT.partialEntity._description
        }
      }
      set(newValue) {
        if let _ = _characterized_object._description__provider(complex: self.complexEntity) { return }

        let partial = super_eCHARACTERIZED_OBJECT.partialEntity
        partial._description = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCOUNTERDRILL_HOLE_DEFINITION`` )
    public var COUNTERDRILL_ANGLE_TOLERANCE: eTOLERANCE_VALUE?  {
      get {
        return sub_eCOUNTERDRILL_HOLE_DEFINITION?.partialEntity._counterdrill_angle_tolerance
      }
      set(newValue) {
        guard let partial = sub_eCOUNTERDRILL_HOLE_DEFINITION?.super_eCOUNTERDRILL_HOLE_DEFINITION
          .partialEntity else { return }
        partial._counterdrill_angle_tolerance = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCOUNTERSINK_HOLE_DEFINITION`` )
    public var COUNTERSINK_DIAMETER: ePOSITIVE_LENGTH_MEASURE_WITH_UNIT?  {
      get {
        return sub_eCOUNTERSINK_HOLE_DEFINITION?.partialEntity._countersink_diameter
      }
      set(newValue) {
        guard let partial = sub_eCOUNTERSINK_HOLE_DEFINITION?.super_eCOUNTERSINK_HOLE_DEFINITION
          .partialEntity else { return }
        partial._countersink_diameter = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCOUNTERSINK_HOLE_DEFINITION`` )
    public var COUNTERSINK_ANGLE: ePOSITIVE_PLANE_ANGLE_MEASURE_WITH_UNIT?  {
      get {
        return sub_eCOUNTERSINK_HOLE_DEFINITION?.partialEntity._countersink_angle
      }
      set(newValue) {
        guard let partial = sub_eCOUNTERSINK_HOLE_DEFINITION?.super_eCOUNTERSINK_HOLE_DEFINITION
          .partialEntity else { return }
        partial._countersink_angle = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eEXPLICIT_ROUND_HOLE`` )
    public var DIAMETER: ePOSITIVE_LENGTH_MEASURE_WITH_UNIT?  {
      get {
        return sub_eEXPLICIT_ROUND_HOLE?.partialEntity._diameter
      }
      set(newValue) {
        guard let partial = sub_eEXPLICIT_ROUND_HOLE?.super_eEXPLICIT_ROUND_HOLE.partialEntity
          else { return }
        partial._diameter = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eSPOTFACE_HOLE_DEFINITION`` )
    public var SPOTFACE: (SDAI.LIST_UNIQUE<eSPOTFACE_DEFINITION>/*[1:nil]*/ )?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"SPOTFACE") {
          return cached.value as! (SDAI.LIST_UNIQUE<eSPOTFACE_DEFINITION>/*[1:nil]*/ )? 
        }
        guard let origin = sub_eSPOTFACE_HOLE_DEFINITION else { return nil }
        let value = SDAI.LIST_UNIQUE<eSPOTFACE_DEFINITION>(
          origin.partialEntity._spotface__getter(SELF: origin))
        updateCache(derivedAttributeName:"SPOTFACE", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCOUNTERDRILL_HOLE_DEFINITION`` )
    public var COUNTERDRILL_ANGLE: ePOSITIVE_PLANE_ANGLE_MEASURE_WITH_UNIT?  {
      get {
        return sub_eCOUNTERDRILL_HOLE_DEFINITION?.partialEntity._counterdrill_angle
      }
      set(newValue) {
        guard let partial = sub_eCOUNTERDRILL_HOLE_DEFINITION?.super_eCOUNTERDRILL_HOLE_DEFINITION
          .partialEntity else { return }
        partial._counterdrill_angle = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCOUNTERSINK_HOLE_DEFINITION`` )
    public var COUNTERSINK_ANGLE_TOLERANCE: eTOLERANCE_VALUE?  {
      get {
        return sub_eCOUNTERSINK_HOLE_DEFINITION?.partialEntity._countersink_angle_tolerance
      }
      set(newValue) {
        guard let partial = sub_eCOUNTERSINK_HOLE_DEFINITION?.super_eCOUNTERSINK_HOLE_DEFINITION
          .partialEntity else { return }
        partial._countersink_angle_tolerance = SDAI.UNWRAP(newValue)
      }
    }

    /// __INVERSE__ attribute
    /// observing eITEM_IDENTIFIED_REPRESENTATION_USAGE .DEFINITION
    /// - origin: SUB( ``eEXPLICIT_COMPOSITE_HOLE`` )
    public var EXPLICIT_SHAPE: (SDAI.SET<eITEM_IDENTIFIED_REPRESENTATION_USAGE>/*[0:nil]*/ )?  {
      get {
        return sub_eEXPLICIT_COMPOSITE_HOLE?.partialEntity._explicit_shape
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSPOTFACE_DEFINITION`` )
    public var SPOTFACE_RADIUS: ePOSITIVE_LENGTH_MEASURE_WITH_UNIT?  {
      get {
        return sub_eSPOTFACE_DEFINITION?.partialEntity._spotface_radius
      }
      set(newValue) {
        guard let partial = sub_eSPOTFACE_DEFINITION?.super_eSPOTFACE_DEFINITION.partialEntity
          else { return }
        partial._spotface_radius = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSPOTFACE_DEFINITION`` )
    public var SPOTFACE_RADIUS_TOLERANCE: eTOLERANCE_VALUE?  {
      get {
        return sub_eSPOTFACE_DEFINITION?.partialEntity._spotface_radius_tolerance
      }
      set(newValue) {
        guard let partial = sub_eSPOTFACE_DEFINITION?.super_eSPOTFACE_DEFINITION.partialEntity
          else { return }
        partial._spotface_radius_tolerance = newValue
      }
    }

    /// __EXPLICIT(DYNAMIC)__ attribute
    /// - origin: SUPER( ``eCHARACTERIZED_OBJECT`` )
    public var NAME: tLABEL {
      get {
        if let resolved = _characterized_object._name__provider(complex: self.complexEntity) {
          let value = resolved._name__getter(complex: self.complexEntity)
          return value
        }
        else {
          return SDAI.UNWRAP( super_eCHARACTERIZED_OBJECT.partialEntity._name )
        }
      }
      set(newValue) {
        if let _ = _characterized_object._name__provider(complex: self.complexEntity) { return }

        let partial = super_eCHARACTERIZED_OBJECT.partialEntity
        partial._name = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eEXPLICIT_ROUND_HOLE`` )
    public var DEPTH: ePOSITIVE_LENGTH_MEASURE_WITH_UNIT?  {
      get {
        return sub_eEXPLICIT_ROUND_HOLE?.partialEntity._depth
      }
      set(newValue) {
        guard let partial = sub_eEXPLICIT_ROUND_HOLE?.super_eEXPLICIT_ROUND_HOLE.partialEntity
          else { return }
        partial._depth = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCOUNTERSINK_HOLE_DEFINITION`` )
    public var COUNTERSINK_DIAMETER_TOLERANCE: sTOLERANCE_VALUE_OR_LIMITS_AND_FITS?  {
      get {
        return sub_eCOUNTERSINK_HOLE_DEFINITION?.partialEntity._countersink_diameter_tolerance
      }
      set(newValue) {
        guard let partial = sub_eCOUNTERSINK_HOLE_DEFINITION?.super_eCOUNTERSINK_HOLE_DEFINITION
          .partialEntity else { return }
        partial._countersink_diameter_tolerance = newValue
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_feature_definition.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eCHARACTERIZED_OBJECT.self) else { return nil }
      self.super_eCHARACTERIZED_OBJECT = super1

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "FEATURE_DEFINITION", type: self, explicitAttributeCount: 0)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eCHARACTERIZED_OBJECT.self)
      entityDef.add(supertype: eFEATURE_DEFINITION.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "DIAMETER_TOLERANCE", keyPath: \eFEATURE_DEFINITION.DIAMETER_TOLERANCE, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "DEPTH_TOLERANCE", keyPath: \eFEATURE_DEFINITION.DEPTH_TOLERANCE, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "DESCRIPTION", keyPath: \eFEATURE_DEFINITION.DESCRIPTION, 
        kind: .explicitOptional, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "COUNTERDRILL_ANGLE_TOLERANCE", keyPath: \eFEATURE_DEFINITION.COUNTERDRILL_ANGLE_TOLERANCE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "COUNTERSINK_DIAMETER", keyPath: \eFEATURE_DEFINITION.COUNTERSINK_DIAMETER, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "COUNTERSINK_ANGLE", keyPath: \eFEATURE_DEFINITION.COUNTERSINK_ANGLE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "DIAMETER", keyPath: \eFEATURE_DEFINITION.DIAMETER, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "SPOTFACE", keyPath: \eFEATURE_DEFINITION.SPOTFACE, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "COUNTERDRILL_ANGLE", keyPath: \eFEATURE_DEFINITION.COUNTERDRILL_ANGLE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "COUNTERSINK_ANGLE_TOLERANCE", keyPath: \eFEATURE_DEFINITION.COUNTERSINK_ANGLE_TOLERANCE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "EXPLICIT_SHAPE", keyPath: \eFEATURE_DEFINITION.EXPLICIT_SHAPE, 
        kind: .inverse, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "SPOTFACE_RADIUS", keyPath: \eFEATURE_DEFINITION.SPOTFACE_RADIUS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "SPOTFACE_RADIUS_TOLERANCE", keyPath: \eFEATURE_DEFINITION.SPOTFACE_RADIUS_TOLERANCE, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "NAME", keyPath: \eFEATURE_DEFINITION.NAME, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "DEPTH", keyPath: \eFEATURE_DEFINITION.DEPTH, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "COUNTERSINK_DIAMETER_TOLERANCE", keyPath: \eFEATURE_DEFINITION.COUNTERSINK_DIAMETER_TOLERANCE, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: true)

      return entityDef
    }

  }
}
