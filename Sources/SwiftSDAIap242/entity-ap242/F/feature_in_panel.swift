/* file: feature_in_panel.swift 	 generated: Tue Nov 16 05:35:44 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY feature_in_panel
    SUBTYPE OF ( feature_definition );
    WHERE
      wr1 : ( SELF.description IN [ 'pocket', 'boss', 'stairstep'] );
      wr2 : ( SIZEOF( QUERY ( pdr <* get_property_definition_representations( SELF ) | ( ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS'  IN 
                TYPEOF( pdr.used_representation ) ) AND ( NOT ( ( 2 <= SIZEOF( pdr.used_representation.items ) ) 
                AND ( SIZEOF( pdr.used_representation.items ) <= 3 ) ) ) ) ) ) = 0 );
      wr3 : ( SIZEOF( QUERY ( pdr <* get_property_definition_representations( SELF ) | ( ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS'  IN 
                TYPEOF( pdr.used_representation ) ) AND ( SIZEOF( QUERY ( i <* pdr.used_representation.items
                | ( NOT ( i.name IN [ 'orientation', 'base radius', 'target radius'] ) ) ) ) > 0 ) ) ) ) = 0 );
      wr4 : ( SIZEOF( QUERY ( pdr <* get_property_definition_representations( SELF ) | ( ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS'  IN 
                TYPEOF( pdr.used_representation ) ) AND ( SIZEOF( QUERY ( i <* pdr.used_representation.items
                | ( ( i.name = 'base radius' ) AND ( SIZEOF( [
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.MEASURE_REPRESENTATION_ITEM' , 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( i ) ) 
                = 2 ) ) ) ) = 1 ) ) ) ) = 1 );
      wr5 : ( SIZEOF( QUERY ( pdr <* get_property_definition_representations( SELF ) | ( ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS'  IN 
                TYPEOF( pdr.used_representation ) ) AND ( SIZEOF( QUERY ( i <* pdr.used_representation.items
                | ( ( i.name = 'target radius' ) AND ( SIZEOF( [
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.MEASURE_REPRESENTATION_ITEM' , 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( i ) ) 
                = 2 ) ) ) ) = 1 ) ) ) ) = 1 );
      wr6 : ( SIZEOF( QUERY ( sa <* get_shape_aspects( SELF ) | ( ( sa.name = 'base boundary' ) AND ( sa.
                description IN [ 'directed angle occurrence', 'closed profile occurrence'] ) ) ) ) = 1 );
      wr7 : ( SIZEOF( QUERY ( sa <* get_shape_aspects( SELF ) | ( ( sa.name = 'target boundary' ) AND ( sa.
                description IN [ 'directed angle occurrence', 'closed profile occurrence'] ) ) ) ) = 1 );
      wr8 : ( SIZEOF( QUERY ( sa <* get_shape_aspects( SELF ) | ( sa.description = 'directed angle occurrence' ) ) ) 
                <= 1 );
      wr9 : ( SIZEOF( QUERY ( sa <* get_shape_aspects( SELF ) | ( ( sa.description = 
                'directed angle occurrence'  ) AND ( SIZEOF( QUERY ( sar <* USEDIN( sa, 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.'
                + 'RELATED_SHAPE_ASPECT'  ) | ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
                + 'SHAPE_DEFINING_RELATIONSHIP'  IN TYPEOF( sar ) ) AND ( sar.name = 'directed angle usage' ) 
                AND ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.DIRECTED_ANGLE' IN TYPEOF( sar.
                relating_shape_aspect ) ) ) ) ) = 1 ) ) ) ) = SIZEOF( QUERY ( sa <* get_shape_aspects( SELF )
                | ( sa.description = 'directed angle occurrence' ) ) ) );
      wr10: ( SIZEOF( QUERY ( sa <* get_shape_aspects( SELF ) | ( ( sa.description = 
                'closed profile occurrence'  ) AND ( SIZEOF( QUERY ( sar <* USEDIN( sa, 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.'
                + 'RELATED_SHAPE_ASPECT'  ) | ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
                + 'SHAPE_DEFINING_RELATIONSHIP'  IN TYPEOF( sar ) ) AND ( sar.description = 'profile usage' ) 
                AND ( SIZEOF( [ 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CIRCULAR_CLOSED_PROFILE', 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.NGON_CLOSED_PROFILE' , 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.RECTANGULAR_CLOSED_PROFILE' , 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CLOSED_PATH_PROFILE' ] * TYPEOF( sar.
                relating_shape_aspect ) ) = 1 ) ) ) ) = 1 ) ) ) ) = SIZEOF( QUERY ( sa <* get_shape_aspects( 
                SELF ) | ( sa.description = 'closed profile occurrence' ) ) ) );
      wr11: ( ( SIZEOF( QUERY ( pdr <* get_property_definition_representations( SELF ) | ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.FACE_SHAPE_REPRESENTATION'  IN TYPEOF( pdr.
                used_representation ) ) ) ) <= 1 ) AND ( SIZEOF( QUERY ( pdr <* 
                get_property_definition_representations( SELF ) | ( ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.FACE_SHAPE_REPRESENTATION'  IN TYPEOF( pdr.
                used_representation ) ) AND ( NOT ( pdr.used_representation.name = 'target face' ) ) ) ) ) = 
                0 ) );
      wr12: ( ( SIZEOF( QUERY ( sa <* get_shape_aspects( SELF ) | ( ( sa.name = 'target boundary' ) AND ( sa.
                description = 'directed angle occurrence' ) ) ) ) = 0 ) OR ( SIZEOF( QUERY ( pdr <* 
                get_property_definition_representations( SELF ) | ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.FACE_SHAPE_REPRESENTATION'  IN TYPEOF( pdr.
                used_representation ) ) ) ) = 1 ) );
  END_ENTITY; -- feature_in_panel (line:15300 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	characterized_object
    ATTR:  name,	TYPE: label -- EXPLICIT (DYNAMIC)
      -- possibly overriden by
          ENTITY: shape_feature_definition_element_relationship,	TYPE: label	(as DERIVED)
          ENTITY: shape_feature_fit_relationship,	TYPE: label	(as DERIVED)
          ENTITY: characterized_representation,	TYPE: label	(as DERIVED)
          ENTITY: shape_feature_definition_relationship,	TYPE: label	(as DERIVED)

    ATTR:  description,	TYPE: OPTIONAL text -- EXPLICIT (DYNAMIC)
      -- possibly overriden by
          ENTITY: shape_feature_definition_element_relationship,	TYPE: text	(as DERIVED)
          ENTITY: shape_feature_fit_relationship,	TYPE: text	(as DERIVED)
          ENTITY: characterized_representation,	TYPE: text	(as DERIVED)
          ENTITY: shape_feature_definition_relationship,	TYPE: text	(as DERIVED)


  SUPER- ENTITY(2)	feature_definition
    (no local attributes)

  ENTITY(SELF)	feature_in_panel
    (no local attributes)

*/


//MARK: - Partial Entity
  public final class _feature_in_panel : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eFEATURE_IN_PANEL.self
    }

    //ATTRIBUTES
    // (no local attributes)

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: eFEATURE_IN_PANEL?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.DESCRIPTION
      let _TEMP2 = ([SDAI.AIE(SDAI.STRING("pocket")), 
        SDAI.AIE(SDAI.STRING("boss")), 
        SDAI.AIE(SDAI.STRING("stairstep"))] as [SDAI.AggregationInitializerElement<SDAI.STRING>])
      let _TEMP3 = SDAI.aggregate(_TEMP2, contains: SDAI.STRING(/*tTEXT*/_TEMP1))
      return _TEMP3
    }
    public static func WHERE_wr2(SELF: eFEATURE_IN_PANEL?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = GET_PROPERTY_DEFINITION_REPRESENTATIONS(sCHARACTERIZED_DEFINITION(/*eFEATURE_IN_PANEL*/
        SELF))
      let _TEMP2 = _TEMP1?.QUERY{ PDR in 

          let _TEMP1 = SDAI.TYPEOF(PDR.USED_REPRESENTATION, IS: eSHAPE_REPRESENTATION_WITH_PARAMETERS.self)
          let _TEMP2 = PDR.USED_REPRESENTATION
          let _TEMP3 = _TEMP2.ITEMS
          let _TEMP4 = SDAI.SIZEOF(_TEMP3)
          let _TEMP5 = SDAI.FORCE_OPTIONAL(SDAI.INTEGER(2)) <= _TEMP4
          let _TEMP6 = PDR.USED_REPRESENTATION
          let _TEMP7 = _TEMP6.ITEMS
          let _TEMP8 = SDAI.SIZEOF(_TEMP7)
          let _TEMP9 = _TEMP8 <= SDAI.FORCE_OPTIONAL(SDAI.INTEGER(3))
          let _TEMP10 = _TEMP5 && _TEMP9
          let _TEMP11 =  !_TEMP10
          let _TEMP12 = _TEMP1 && _TEMP11
          return _TEMP12 }
      let _TEMP3 = SDAI.SIZEOF(_TEMP2)
      let _TEMP4 = _TEMP3 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      return _TEMP4
    }
    public static func WHERE_wr3(SELF: eFEATURE_IN_PANEL?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = GET_PROPERTY_DEFINITION_REPRESENTATIONS(sCHARACTERIZED_DEFINITION(/*eFEATURE_IN_PANEL*/
        SELF))
      let _TEMP2 = _TEMP1?.QUERY{ PDR in 

          let _TEMP1 = SDAI.TYPEOF(PDR.USED_REPRESENTATION, IS: eSHAPE_REPRESENTATION_WITH_PARAMETERS.self)
          let _TEMP2 = PDR.USED_REPRESENTATION
          let _TEMP3 = _TEMP2.ITEMS
          let _TEMP4 = _TEMP3.QUERY{ I in 

              let _TEMP1 = I.NAME
              let _TEMP2 = ([SDAI.AIE(SDAI.STRING("orientation")), 
                SDAI.AIE(SDAI.STRING("base radius")), 
                SDAI.AIE(SDAI.STRING("target radius"))] as [SDAI.AggregationInitializerElement<SDAI.STRING>])
              let _TEMP3 = SDAI.aggregate(_TEMP2, contains: SDAI.STRING(/*tLABEL*/_TEMP1))
              let _TEMP4 =  !_TEMP3
              return _TEMP4 }
          let _TEMP5 = SDAI.SIZEOF(_TEMP4)
          let _TEMP6 = _TEMP5 > SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
          let _TEMP7 = _TEMP1 && _TEMP6
          return _TEMP7 }
      let _TEMP3 = SDAI.SIZEOF(_TEMP2)
      let _TEMP4 = _TEMP3 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      return _TEMP4
    }
    public static func WHERE_wr4(SELF: eFEATURE_IN_PANEL?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = GET_PROPERTY_DEFINITION_REPRESENTATIONS(sCHARACTERIZED_DEFINITION(/*eFEATURE_IN_PANEL*/
        SELF))
      let _TEMP2 = _TEMP1?.QUERY{ PDR in 

          let _TEMP1 = SDAI.TYPEOF(PDR.USED_REPRESENTATION, IS: eSHAPE_REPRESENTATION_WITH_PARAMETERS.self)
          let _TEMP2 = PDR.USED_REPRESENTATION
          let _TEMP3 = _TEMP2.ITEMS
          let _TEMP4 = _TEMP3.QUERY{ I in 

              let _TEMP1 = I.NAME
              let _TEMP2 = SDAI.FORCE_OPTIONAL(_TEMP1) .==. SDAI.FORCE_OPTIONAL(SDAI.STRING("base radius"))
              let _TEMP3 = ([SDAI.AIE(SDAI.STRING(
                "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.MEASURE_REPRESENTATION_ITEM")), 
                SDAI.AIE(SDAI.STRING("AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.LENGTH_MEASURE_WITH_UNIT"))] 
                as [SDAI.AggregationInitializerElement<SDAI.STRING>])
              let _TEMP4 = SDAI.TYPEOF(I)
              let _TEMP5 = SDAI.FORCE_OPTIONAL(_TEMP3) * SDAI.FORCE_OPTIONAL(_TEMP4)
              let _TEMP6 = SDAI.SIZEOF(_TEMP5)
              let _TEMP7 = _TEMP6 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(2))
              let _TEMP8 = _TEMP2 && _TEMP7
              return _TEMP8 }
          let _TEMP5 = SDAI.SIZEOF(_TEMP4)
          let _TEMP6 = _TEMP5 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
          let _TEMP7 = _TEMP1 && _TEMP6
          return _TEMP7 }
      let _TEMP3 = SDAI.SIZEOF(_TEMP2)
      let _TEMP4 = _TEMP3 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
      return _TEMP4
    }
    public static func WHERE_wr5(SELF: eFEATURE_IN_PANEL?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = GET_PROPERTY_DEFINITION_REPRESENTATIONS(sCHARACTERIZED_DEFINITION(/*eFEATURE_IN_PANEL*/
        SELF))
      let _TEMP2 = _TEMP1?.QUERY{ PDR in 

          let _TEMP1 = SDAI.TYPEOF(PDR.USED_REPRESENTATION, IS: eSHAPE_REPRESENTATION_WITH_PARAMETERS.self)
          let _TEMP2 = PDR.USED_REPRESENTATION
          let _TEMP3 = _TEMP2.ITEMS
          let _TEMP4 = _TEMP3.QUERY{ I in 

              let _TEMP1 = I.NAME
              let _TEMP2 = SDAI.FORCE_OPTIONAL(_TEMP1) .==. SDAI.FORCE_OPTIONAL(SDAI.STRING("target radius"))
              let _TEMP3 = ([SDAI.AIE(SDAI.STRING(
                "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.MEASURE_REPRESENTATION_ITEM")), 
                SDAI.AIE(SDAI.STRING("AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.LENGTH_MEASURE_WITH_UNIT"))] 
                as [SDAI.AggregationInitializerElement<SDAI.STRING>])
              let _TEMP4 = SDAI.TYPEOF(I)
              let _TEMP5 = SDAI.FORCE_OPTIONAL(_TEMP3) * SDAI.FORCE_OPTIONAL(_TEMP4)
              let _TEMP6 = SDAI.SIZEOF(_TEMP5)
              let _TEMP7 = _TEMP6 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(2))
              let _TEMP8 = _TEMP2 && _TEMP7
              return _TEMP8 }
          let _TEMP5 = SDAI.SIZEOF(_TEMP4)
          let _TEMP6 = _TEMP5 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
          let _TEMP7 = _TEMP1 && _TEMP6
          return _TEMP7 }
      let _TEMP3 = SDAI.SIZEOF(_TEMP2)
      let _TEMP4 = _TEMP3 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
      return _TEMP4
    }
    public static func WHERE_wr6(SELF: eFEATURE_IN_PANEL?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = GET_SHAPE_ASPECTS(sCHARACTERIZED_DEFINITION(/*eFEATURE_IN_PANEL*/SELF))
      let _TEMP2 = _TEMP1?.QUERY{ SA in 

          let _TEMP1 = SA.NAME
          let _TEMP2 = SDAI.FORCE_OPTIONAL(_TEMP1) .==. SDAI.FORCE_OPTIONAL(SDAI.STRING("base boundary"))
          let _TEMP3 = SA.DESCRIPTION
          let _TEMP4 = ([SDAI.AIE(SDAI.STRING("directed angle occurrence")), 
            SDAI.AIE(SDAI.STRING("closed profile occurrence"))] as [SDAI.AggregationInitializerElement<SDAI.STRING>])
          let _TEMP5 = SDAI.aggregate(_TEMP4, contains: SDAI.STRING(/*tTEXT*/_TEMP3))
          let _TEMP6 = _TEMP2 && _TEMP5
          return _TEMP6 }
      let _TEMP3 = SDAI.SIZEOF(_TEMP2)
      let _TEMP4 = _TEMP3 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
      return _TEMP4
    }
    public static func WHERE_wr7(SELF: eFEATURE_IN_PANEL?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = GET_SHAPE_ASPECTS(sCHARACTERIZED_DEFINITION(/*eFEATURE_IN_PANEL*/SELF))
      let _TEMP2 = _TEMP1?.QUERY{ SA in 

          let _TEMP1 = SA.NAME
          let _TEMP2 = SDAI.FORCE_OPTIONAL(_TEMP1) .==. SDAI.FORCE_OPTIONAL(SDAI.STRING("target boundary"))
          let _TEMP3 = SA.DESCRIPTION
          let _TEMP4 = ([SDAI.AIE(SDAI.STRING("directed angle occurrence")), 
            SDAI.AIE(SDAI.STRING("closed profile occurrence"))] as [SDAI.AggregationInitializerElement<SDAI.STRING>])
          let _TEMP5 = SDAI.aggregate(_TEMP4, contains: SDAI.STRING(/*tTEXT*/_TEMP3))
          let _TEMP6 = _TEMP2 && _TEMP5
          return _TEMP6 }
      let _TEMP3 = SDAI.SIZEOF(_TEMP2)
      let _TEMP4 = _TEMP3 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
      return _TEMP4
    }
    public static func WHERE_wr8(SELF: eFEATURE_IN_PANEL?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = GET_SHAPE_ASPECTS(sCHARACTERIZED_DEFINITION(/*eFEATURE_IN_PANEL*/SELF))
      let _TEMP2 = _TEMP1?.QUERY{ SA in 

          let _TEMP1 = SA.DESCRIPTION
          let _TEMP2 = _TEMP1 .==. SDAI.FORCE_OPTIONAL(SDAI.STRING("directed angle occurrence"))
          return _TEMP2 }
      let _TEMP3 = SDAI.SIZEOF(_TEMP2)
      let _TEMP4 = _TEMP3 <= SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
      return _TEMP4
    }
    public static func WHERE_wr9(SELF: eFEATURE_IN_PANEL?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = GET_SHAPE_ASPECTS(sCHARACTERIZED_DEFINITION(/*eFEATURE_IN_PANEL*/SELF))
      let _TEMP2 = _TEMP1?.QUERY{ SA in 

          let _TEMP1 = SA.DESCRIPTION
          let _TEMP2 = _TEMP1 .==. SDAI.FORCE_OPTIONAL(SDAI.STRING("directed angle occurrence"))
          let _TEMP3 = SDAI.USEDIN(T: SA, ROLE: \AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF
            .eSHAPE_ASPECT_RELATIONSHIP.RELATED_SHAPE_ASPECT)
          let _TEMP4 = _TEMP3.QUERY{ SAR in 

              let _TEMP1 = SDAI.TYPEOF(SAR, IS: eSHAPE_DEFINING_RELATIONSHIP.self)
              let _TEMP2 = /*runtime*/SAR.NAME
              let _TEMP3 = SDAI.FORCE_OPTIONAL(/*runtime*/_TEMP2) .==. SDAI.FORCE_OPTIONAL(SDAI.STRING(
                "directed angle usage"))
              let _TEMP4 = _TEMP1 && _TEMP3
              let _TEMP5 = SDAI.TYPEOF(SAR.RELATING_SHAPE_ASPECT, IS: eDIRECTED_ANGLE.self)
              let _TEMP6 = _TEMP4 && _TEMP5
              return _TEMP6 }
          let _TEMP5 = SDAI.SIZEOF(_TEMP4)
          let _TEMP6 = _TEMP5 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
          let _TEMP7 = _TEMP2 && _TEMP6
          return _TEMP7 }
      let _TEMP3 = SDAI.SIZEOF(_TEMP2)
      let _TEMP4 = GET_SHAPE_ASPECTS(sCHARACTERIZED_DEFINITION(/*eFEATURE_IN_PANEL*/SELF))
      let _TEMP5 = _TEMP4?.QUERY{ SA in 

          let _TEMP1 = SA.DESCRIPTION
          let _TEMP2 = _TEMP1 .==. SDAI.FORCE_OPTIONAL(SDAI.STRING("directed angle occurrence"))
          return _TEMP2 }
      let _TEMP6 = SDAI.SIZEOF(_TEMP5)
      let _TEMP7 = _TEMP3 .==. _TEMP6
      return _TEMP7
    }
    public static func WHERE_wr10(SELF: eFEATURE_IN_PANEL?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = GET_SHAPE_ASPECTS(sCHARACTERIZED_DEFINITION(/*eFEATURE_IN_PANEL*/SELF))
      let _TEMP2 = _TEMP1?.QUERY{ SA in 

          let _TEMP1 = SA.DESCRIPTION
          let _TEMP2 = _TEMP1 .==. SDAI.FORCE_OPTIONAL(SDAI.STRING("closed profile occurrence"))
          let _TEMP3 = SDAI.USEDIN(T: SA, ROLE: \AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF
            .eSHAPE_ASPECT_RELATIONSHIP.RELATED_SHAPE_ASPECT)
          let _TEMP4 = _TEMP3.QUERY{ SAR in 

              let _TEMP1 = SDAI.TYPEOF(SAR, IS: eSHAPE_DEFINING_RELATIONSHIP.self)
              let _TEMP2 = /*runtime*/SAR.DESCRIPTION
              let _TEMP3 = SDAI.FORCE_OPTIONAL(/*runtime*/_TEMP2) .==. SDAI.FORCE_OPTIONAL(SDAI.STRING(
                "profile usage"))
              let _TEMP4 = _TEMP1 && _TEMP3
              let _TEMP5 = ([SDAI.AIE(SDAI.STRING(
                "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CIRCULAR_CLOSED_PROFILE")), 
                SDAI.AIE(SDAI.STRING("AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.NGON_CLOSED_PROFILE")), 
                SDAI.AIE(SDAI.STRING(
                "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.RECTANGULAR_CLOSED_PROFILE")), 
                SDAI.AIE(SDAI.STRING("AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CLOSED_PATH_PROFILE"))] 
                as [SDAI.AggregationInitializerElement<SDAI.STRING>])
              let _TEMP6 = /*runtime*/SAR.RELATING_SHAPE_ASPECT
              let _TEMP7 = SDAI.TYPEOF(_TEMP6)
              let _TEMP8 = SDAI.FORCE_OPTIONAL(_TEMP5) * SDAI.FORCE_OPTIONAL(_TEMP7)
              let _TEMP9 = SDAI.SIZEOF(_TEMP8)
              let _TEMP10 = _TEMP9 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
              let _TEMP11 = _TEMP4 && _TEMP10
              return _TEMP11 }
          let _TEMP5 = SDAI.SIZEOF(_TEMP4)
          let _TEMP6 = _TEMP5 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
          let _TEMP7 = _TEMP2 && _TEMP6
          return _TEMP7 }
      let _TEMP3 = SDAI.SIZEOF(_TEMP2)
      let _TEMP4 = GET_SHAPE_ASPECTS(sCHARACTERIZED_DEFINITION(/*eFEATURE_IN_PANEL*/SELF))
      let _TEMP5 = _TEMP4?.QUERY{ SA in 

          let _TEMP1 = SA.DESCRIPTION
          let _TEMP2 = _TEMP1 .==. SDAI.FORCE_OPTIONAL(SDAI.STRING("closed profile occurrence"))
          return _TEMP2 }
      let _TEMP6 = SDAI.SIZEOF(_TEMP5)
      let _TEMP7 = _TEMP3 .==. _TEMP6
      return _TEMP7
    }
    public static func WHERE_wr11(SELF: eFEATURE_IN_PANEL?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = GET_PROPERTY_DEFINITION_REPRESENTATIONS(sCHARACTERIZED_DEFINITION(/*eFEATURE_IN_PANEL*/
        SELF))
      let _TEMP2 = _TEMP1?.QUERY{ PDR in 

          let _TEMP1 = SDAI.TYPEOF(PDR.USED_REPRESENTATION, IS: eFACE_SHAPE_REPRESENTATION.self)
          return _TEMP1 }
      let _TEMP3 = SDAI.SIZEOF(_TEMP2)
      let _TEMP4 = _TEMP3 <= SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
      let _TEMP5 = GET_PROPERTY_DEFINITION_REPRESENTATIONS(sCHARACTERIZED_DEFINITION(/*eFEATURE_IN_PANEL*/
        SELF))
      let _TEMP6 = _TEMP5?.QUERY{ PDR in 

          let _TEMP1 = SDAI.TYPEOF(PDR.USED_REPRESENTATION, IS: eFACE_SHAPE_REPRESENTATION.self)
          let _TEMP2 = PDR.USED_REPRESENTATION
          let _TEMP3 = _TEMP2.NAME
          let _TEMP4 = SDAI.FORCE_OPTIONAL(_TEMP3) .==. SDAI.FORCE_OPTIONAL(SDAI.STRING("target face"))
          let _TEMP5 =  !_TEMP4
          let _TEMP6 = _TEMP1 && _TEMP5
          return _TEMP6 }
      let _TEMP7 = SDAI.SIZEOF(_TEMP6)
      let _TEMP8 = _TEMP7 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      let _TEMP9 = _TEMP4 && _TEMP8
      return _TEMP9
    }
    public static func WHERE_wr12(SELF: eFEATURE_IN_PANEL?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = GET_SHAPE_ASPECTS(sCHARACTERIZED_DEFINITION(/*eFEATURE_IN_PANEL*/SELF))
      let _TEMP2 = _TEMP1?.QUERY{ SA in 

          let _TEMP1 = SA.NAME
          let _TEMP2 = SDAI.FORCE_OPTIONAL(_TEMP1) .==. SDAI.FORCE_OPTIONAL(SDAI.STRING("target boundary"))
          let _TEMP3 = SA.DESCRIPTION
          let _TEMP4 = _TEMP3 .==. SDAI.FORCE_OPTIONAL(SDAI.STRING("directed angle occurrence"))
          let _TEMP5 = _TEMP2 && _TEMP4
          return _TEMP5 }
      let _TEMP3 = SDAI.SIZEOF(_TEMP2)
      let _TEMP4 = _TEMP3 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      let _TEMP5 = GET_PROPERTY_DEFINITION_REPRESENTATIONS(sCHARACTERIZED_DEFINITION(/*eFEATURE_IN_PANEL*/
        SELF))
      let _TEMP6 = _TEMP5?.QUERY{ PDR in 

          let _TEMP1 = SDAI.TYPEOF(PDR.USED_REPRESENTATION, IS: eFACE_SHAPE_REPRESENTATION.self)
          return _TEMP1 }
      let _TEMP7 = SDAI.SIZEOF(_TEMP6)
      let _TEMP8 = _TEMP7 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
      let _TEMP9 = _TEMP4 || _TEMP8
      return _TEMP9
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init() {
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 0
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      self.init( )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY feature_in_panel
    SUBTYPE OF ( feature_definition );
    WHERE
      wr1 : ( SELF.description IN [ 'pocket', 'boss', 'stairstep'] );
      wr2 : ( SIZEOF( QUERY ( pdr <* get_property_definition_representations( SELF ) | ( ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS'  IN 
                TYPEOF( pdr.used_representation ) ) AND ( NOT ( ( 2 <= SIZEOF( pdr.used_representation.items ) ) 
                AND ( SIZEOF( pdr.used_representation.items ) <= 3 ) ) ) ) ) ) = 0 );
      wr3 : ( SIZEOF( QUERY ( pdr <* get_property_definition_representations( SELF ) | ( ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS'  IN 
                TYPEOF( pdr.used_representation ) ) AND ( SIZEOF( QUERY ( i <* pdr.used_representation.items
                | ( NOT ( i.name IN [ 'orientation', 'base radius', 'target radius'] ) ) ) ) > 0 ) ) ) ) = 0 );
      wr4 : ( SIZEOF( QUERY ( pdr <* get_property_definition_representations( SELF ) | ( ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS'  IN 
                TYPEOF( pdr.used_representation ) ) AND ( SIZEOF( QUERY ( i <* pdr.used_representation.items
                | ( ( i.name = 'base radius' ) AND ( SIZEOF( [
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.MEASURE_REPRESENTATION_ITEM' , 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( i ) ) 
                = 2 ) ) ) ) = 1 ) ) ) ) = 1 );
      wr5 : ( SIZEOF( QUERY ( pdr <* get_property_definition_representations( SELF ) | ( ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS'  IN 
                TYPEOF( pdr.used_representation ) ) AND ( SIZEOF( QUERY ( i <* pdr.used_representation.items
                | ( ( i.name = 'target radius' ) AND ( SIZEOF( [
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.MEASURE_REPRESENTATION_ITEM' , 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.LENGTH_MEASURE_WITH_UNIT' ] * TYPEOF( i ) ) 
                = 2 ) ) ) ) = 1 ) ) ) ) = 1 );
      wr6 : ( SIZEOF( QUERY ( sa <* get_shape_aspects( SELF ) | ( ( sa.name = 'base boundary' ) AND ( sa.
                description IN [ 'directed angle occurrence', 'closed profile occurrence'] ) ) ) ) = 1 );
      wr7 : ( SIZEOF( QUERY ( sa <* get_shape_aspects( SELF ) | ( ( sa.name = 'target boundary' ) AND ( sa.
                description IN [ 'directed angle occurrence', 'closed profile occurrence'] ) ) ) ) = 1 );
      wr8 : ( SIZEOF( QUERY ( sa <* get_shape_aspects( SELF ) | ( sa.description = 'directed angle occurrence' ) ) ) 
                <= 1 );
      wr9 : ( SIZEOF( QUERY ( sa <* get_shape_aspects( SELF ) | ( ( sa.description = 
                'directed angle occurrence'  ) AND ( SIZEOF( QUERY ( sar <* USEDIN( sa, 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.'
                + 'RELATED_SHAPE_ASPECT'  ) | ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
                + 'SHAPE_DEFINING_RELATIONSHIP'  IN TYPEOF( sar ) ) AND ( sar.name = 'directed angle usage' ) 
                AND ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.DIRECTED_ANGLE' IN TYPEOF( sar.
                relating_shape_aspect ) ) ) ) ) = 1 ) ) ) ) = SIZEOF( QUERY ( sa <* get_shape_aspects( SELF )
                | ( sa.description = 'directed angle occurrence' ) ) ) );
      wr10: ( SIZEOF( QUERY ( sa <* get_shape_aspects( SELF ) | ( ( sa.description = 
                'closed profile occurrence'  ) AND ( SIZEOF( QUERY ( sar <* USEDIN( sa, 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.'
                + 'RELATED_SHAPE_ASPECT'  ) | ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
                + 'SHAPE_DEFINING_RELATIONSHIP'  IN TYPEOF( sar ) ) AND ( sar.description = 'profile usage' ) 
                AND ( SIZEOF( [ 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CIRCULAR_CLOSED_PROFILE', 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.NGON_CLOSED_PROFILE' , 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.RECTANGULAR_CLOSED_PROFILE' , 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CLOSED_PATH_PROFILE' ] * TYPEOF( sar.
                relating_shape_aspect ) ) = 1 ) ) ) ) = 1 ) ) ) ) = SIZEOF( QUERY ( sa <* get_shape_aspects( 
                SELF ) | ( sa.description = 'closed profile occurrence' ) ) ) );
      wr11: ( ( SIZEOF( QUERY ( pdr <* get_property_definition_representations( SELF ) | ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.FACE_SHAPE_REPRESENTATION'  IN TYPEOF( pdr.
                used_representation ) ) ) ) <= 1 ) AND ( SIZEOF( QUERY ( pdr <* 
                get_property_definition_representations( SELF ) | ( ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.FACE_SHAPE_REPRESENTATION'  IN TYPEOF( pdr.
                used_representation ) ) AND ( NOT ( pdr.used_representation.name = 'target face' ) ) ) ) ) = 
                0 ) );
      wr12: ( ( SIZEOF( QUERY ( sa <* get_shape_aspects( SELF ) | ( ( sa.name = 'target boundary' ) AND ( sa.
                description = 'directed angle occurrence' ) ) ) ) = 0 ) OR ( SIZEOF( QUERY ( pdr <* 
                get_property_definition_representations( SELF ) | ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.FACE_SHAPE_REPRESENTATION'  IN TYPEOF( pdr.
                used_representation ) ) ) ) = 1 ) );
  END_ENTITY; -- feature_in_panel (line:15300 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eFEATURE_IN_PANEL : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _feature_in_panel.self
    }
    public let partialEntity: _feature_in_panel

    //MARK: SUPERTYPES
    public let super_eCHARACTERIZED_OBJECT: eCHARACTERIZED_OBJECT 	// [1]
    public let super_eFEATURE_DEFINITION: eFEATURE_DEFINITION 	// [2]
    public var super_eFEATURE_IN_PANEL: eFEATURE_IN_PANEL { return self } 	// [3]

    //MARK: SUBTYPES

    //MARK: ATTRIBUTES
    /// __EXPLICIT(DYNAMIC)__ attribute
    /// - origin: SUPER( ``eCHARACTERIZED_OBJECT`` )
    public var DESCRIPTION: tTEXT?  {
      get {
        if let resolved = _characterized_object._description__provider(complex: self.complexEntity) {
          let value = resolved._description__getter(complex: self.complexEntity)
          return value
        }
        else {
          return super_eCHARACTERIZED_OBJECT.partialEntity._description
        }
      }
      set(newValue) {
        if let _ = _characterized_object._description__provider(complex: self.complexEntity) { return }

        let partial = super_eCHARACTERIZED_OBJECT.partialEntity
        partial._description = newValue
      }
    }

    /// __EXPLICIT(DYNAMIC)__ attribute
    /// - origin: SUPER( ``eCHARACTERIZED_OBJECT`` )
    public var NAME: tLABEL {
      get {
        if let resolved = _characterized_object._name__provider(complex: self.complexEntity) {
          let value = resolved._name__getter(complex: self.complexEntity)
          return value
        }
        else {
          return SDAI.UNWRAP( super_eCHARACTERIZED_OBJECT.partialEntity._name )
        }
      }
      set(newValue) {
        if let _ = _characterized_object._name__provider(complex: self.complexEntity) { return }

        let partial = super_eCHARACTERIZED_OBJECT.partialEntity
        partial._name = SDAI.UNWRAP(newValue)
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_feature_in_panel.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eCHARACTERIZED_OBJECT.self) else { return nil }
      self.super_eCHARACTERIZED_OBJECT = super1

      guard let super2 = complexEntity?.entityReference(eFEATURE_DEFINITION.self) else { return nil }
      self.super_eFEATURE_DEFINITION = super2

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _feature_in_panel.WHERE_wr1(SELF: instance)
      result[prefix2 + " .WHERE_wr2"] = _feature_in_panel.WHERE_wr2(SELF: instance)
      result[prefix2 + " .WHERE_wr3"] = _feature_in_panel.WHERE_wr3(SELF: instance)
      result[prefix2 + " .WHERE_wr4"] = _feature_in_panel.WHERE_wr4(SELF: instance)
      result[prefix2 + " .WHERE_wr5"] = _feature_in_panel.WHERE_wr5(SELF: instance)
      result[prefix2 + " .WHERE_wr6"] = _feature_in_panel.WHERE_wr6(SELF: instance)
      result[prefix2 + " .WHERE_wr7"] = _feature_in_panel.WHERE_wr7(SELF: instance)
      result[prefix2 + " .WHERE_wr8"] = _feature_in_panel.WHERE_wr8(SELF: instance)
      result[prefix2 + " .WHERE_wr9"] = _feature_in_panel.WHERE_wr9(SELF: instance)
      result[prefix2 + " .WHERE_wr10"] = _feature_in_panel.WHERE_wr10(SELF: instance)
      result[prefix2 + " .WHERE_wr11"] = _feature_in_panel.WHERE_wr11(SELF: instance)
      result[prefix2 + " .WHERE_wr12"] = _feature_in_panel.WHERE_wr12(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "FEATURE_IN_PANEL", type: self, explicitAttributeCount: 0)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eCHARACTERIZED_OBJECT.self)
      entityDef.add(supertype: eFEATURE_DEFINITION.self)
      entityDef.add(supertype: eFEATURE_IN_PANEL.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "DESCRIPTION", keyPath: \eFEATURE_IN_PANEL.DESCRIPTION, 
        kind: .explicitOptional, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "NAME", keyPath: \eFEATURE_IN_PANEL.NAME, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)

      return entityDef
    }

  }
}
