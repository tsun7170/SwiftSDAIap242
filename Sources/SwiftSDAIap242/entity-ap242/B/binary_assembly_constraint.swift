/* file: binary_assembly_constraint.swift 	 generated: Mon Jan  3 16:32:52 2022 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.1, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY binary_assembly_constraint
    ABSTRACT SUPERTYPE OF ( 
        ONEOF ( 
            parallel_assembly_constraint, 
            surface_distance_assembly_constraint_with_dimension, 
            angle_assembly_constraint_with_dimension, 
            perpendicular_assembly_constraint, 
            incidence_assembly_constraint, 
            coaxial_assembly_constraint, 
            tangent_assembly_constraint ) )
    SUBTYPE OF ( assembly_geometric_constraint, representation_relationship_with_transformation );
      SELF\representation_relationship.rep_1 : representative_shape_representation;
      SELF\representation_relationship.rep_2 : representative_shape_representation;
    WHERE
      wr1: ( ( SELF\explicit_constraint.constrained_elements[1]\geometric_representation_item.dim = 3 ) AND 
               ( SELF\explicit_constraint.reference_elements[1]\geometric_representation_item.dim = 3 ) );
      wr2: ( ( SELF\representation_relationship.rep_1 IN ( using_representations( SELF\
               representation_relationship_with_transformation.transformation_operator\
               item_defined_transformation.transform_item_1 ) + using_representation_with_mapping( SELF\
               representation_relationship_with_transformation.transformation_operator\
               item_defined_transformation.transform_item_1 ) ) ) AND ( SELF\representation_relationship.
               rep_2 IN ( using_representations( SELF\representation_relationship_with_transformation.
               transformation_operator\item_defined_transformation.transform_item_2 ) + 
               using_representation_with_mapping( SELF\representation_relationship_with_transformation.
               transformation_operator\item_defined_transformation.transform_item_2 ) ) ) );
      wr3: ( ( SIZEOF( SELF\explicit_constraint.constrained_elements ) = 1 ) AND ( SIZEOF( SELF\
               explicit_constraint.reference_elements ) = 1 ) );
      wr4: ( ( SELF\representation_relationship_with_transformation.transformation_operator\
               item_defined_transformation.transform_item_1 = SELF\explicit_constraint.reference_elements[1] ) 
               AND ( SELF\representation_relationship_with_transformation.transformation_operator\
               item_defined_transformation.transform_item_2 = SELF\explicit_constraint.constrained_elements[1] ) );
  END_ENTITY; -- binary_assembly_constraint (line:8184 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	representation_item
    ATTR:  name,	TYPE: label -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUPER- ENTITY(2)	variational_representation_item
    (no local attributes)

  SUPER- ENTITY(3)	explicit_constraint
    ATTR:  description,	TYPE: OPTIONAL text -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  constrained_elements,	TYPE: SET [1 : ?] OF representation_item -- EXPLICIT
      -- possibly overriden by
          ENTITY: symmetry_geometric_constraint,	TYPE: SET [2 : 2] OF geometric_representation_item
          ENTITY: swept_point_curve_geometric_constraint,	TYPE: SET [1 : ?] OF curve
          ENTITY: coaxial_geometric_constraint,	TYPE: SET [1 : ?] OF axial_geometry_constraint_element
          ENTITY: curve_smoothness_geometric_constraint,	TYPE: SET [1 : 1] OF curve_segment_set
          ENTITY: incidence_geometric_constraint,	TYPE: SET [1 : ?] OF geometric_constraint_element
          ENTITY: curve_length_geometric_constraint,	TYPE: SET [1 : ?] OF bounded_curve
          ENTITY: equal_parameter_constraint,	TYPE: SET [1 : ?] OF variational_parameter
          ENTITY: free_form_constraint,	TYPE: SET [1 : ?] OF variational_parameter
          ENTITY: surface_smoothness_geometric_constraint,	TYPE: SET [1 : 1] OF surface_patch_set
          ENTITY: fixed_element_geometric_constraint,	TYPE: SET [1 : ?] OF geometric_constraint_element
          ENTITY: angle_geometric_constraint,	TYPE: SET [1 : ?] OF linear_geometry_constraint_element
          ENTITY: perpendicular_geometric_constraint,	TYPE: SET [1 : ?] OF linear_geometry_constraint_element
          ENTITY: parallel_offset_geometric_constraint,	TYPE: SET [1 : ?] OF curve_or_surface_constraint_element
          ENTITY: surface_distance_geometric_constraint,	TYPE: SET [1 : 2] OF surface
          ENTITY: parallel_geometric_constraint,	TYPE: SET [1 : ?] OF linear_geometry_constraint_element
          ENTITY: point_distance_geometric_constraint,	TYPE: SET [1 : ?] OF point
          ENTITY: radius_geometric_constraint,	TYPE: SET [1 : ?] OF radial_geometry_constraint_element
          ENTITY: skew_line_distance_geometric_constraint,	TYPE: SET [1 : 2] OF line
          ENTITY: explicit_geometric_constraint,	TYPE: SET [1 : ?] OF geometric_representation_item
          ENTITY: curve_distance_geometric_constraint,	TYPE: SET [1 : 2] OF curve
          ENTITY: swept_curve_surface_geometric_constraint,	TYPE: SET [1 : ?] OF surface
          ENTITY: tangent_geometric_constraint,	TYPE: SET [1 : ?] OF curve_or_surface_constraint_element

    ATTR:  reference_elements,	TYPE: SET [0 : ?] OF representation_item -- EXPLICIT
      -- possibly overriden by
          ENTITY: swept_point_curve_geometric_constraint,	TYPE: SET [1 : 1] OF swept_face_solid
          ENTITY: coaxial_geometric_constraint,	TYPE: SET [0 : 1] OF axial_geometry_constraint_element
          ENTITY: incidence_geometric_constraint,	TYPE: SET [0 : ?] OF geometric_constraint_element
          ENTITY: equal_parameter_constraint,	TYPE: SET [0 : 1] OF variational_parameter
          ENTITY: free_form_constraint,	TYPE: SET [0 : ?] OF variational_parameter
          ENTITY: angle_geometric_constraint,	TYPE: SET [0 : 1] OF linear_geometry_constraint_element
          ENTITY: perpendicular_geometric_constraint,	TYPE: SET [0 : 2] OF linear_geometry_constraint_element
          ENTITY: parallel_offset_geometric_constraint,	TYPE: SET [0 : 1] OF curve_or_surface_constraint_element
          ENTITY: surface_distance_geometric_constraint,	TYPE: SET [0 : 4] OF point_curve_or_surface_constraint_element
          ENTITY: parallel_geometric_constraint,	TYPE: SET [0 : 1] OF linear_geometry_constraint_element
          ENTITY: point_distance_geometric_constraint,	TYPE: SET [0 : 4] OF point_curve_or_surface_constraint_element
          ENTITY: skew_line_distance_geometric_constraint,	TYPE: SET [0 : 1] OF line
          ENTITY: explicit_geometric_constraint,	TYPE: SET [0 : ?] OF geometric_representation_item
          ENTITY: curve_distance_geometric_constraint,	TYPE: SET [0 : 4] OF point_curve_or_surface_constraint_element
          ENTITY: swept_curve_surface_geometric_constraint,	TYPE: SET [1 : 1] OF swept_surface_or_solid
          ENTITY: tangent_geometric_constraint,	TYPE: SET [0 : ?] OF curve_or_surface_constraint_element


  SUPER- ENTITY(4)	assembly_geometric_constraint
    (no local attributes)

  SUPER- ENTITY(5)	representation_relationship
    ATTR:  name,	TYPE: label -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  description,	TYPE: OPTIONAL text -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  rep_1,	TYPE: representation_or_representation_reference -- EXPLICIT
      -- possibly overriden by
          ENTITY: mechanical_design_and_draughting_relationship,	TYPE: mechanical_design_and_draughting_relationship_select
          ENTITY: constructive_geometry_representation_relationship,	TYPE: constructive_geometry_representation_or_shape_representation
          ENTITY: kinematic_link_representation_association,	TYPE: kinematic_link_representation	(OBSERVED)
      *** ENTITY: binary_assembly_constraint,	TYPE: representative_shape_representation
          ENTITY: shape_data_quality_inspected_shape_and_result_relationship,	TYPE: shape_representation
          ENTITY: item_link_motion_relationship,	TYPE: shape_representation
          ENTITY: explicit_procedural_representation_relationship,	TYPE: procedural_representation
          ENTITY: link_motion_relationship,	TYPE: link_or_shape_representation
          ENTITY: pair_representation_relationship,	TYPE: kinematic_link_representation
          ENTITY: variational_current_representation_relationship,	TYPE: variational_representation	(OBSERVED)
          ENTITY: ply_orientation_angle,	TYPE: reinforcement_orientation_basis
          ENTITY: constrained_kinematic_motion_representation,	TYPE: representative_shape_representation
          ENTITY: free_kinematic_motion_representation,	TYPE: representative_shape_representation
          ENTITY: explicit_procedural_shape_representation_relationship,	TYPE: procedural_shape_representation

    ATTR:  rep_2,	TYPE: representation_or_representation_reference -- EXPLICIT
      -- possibly overriden by
          ENTITY: mechanical_design_and_draughting_relationship,	TYPE: mechanical_design_and_draughting_relationship_select
          ENTITY: constructive_geometry_representation_relationship,	TYPE: constructive_geometry_representation
          ENTITY: kinematic_link_representation_association,	TYPE: shape_representation
      *** ENTITY: binary_assembly_constraint,	TYPE: representative_shape_representation
          ENTITY: shape_data_quality_inspected_shape_and_result_relationship,	TYPE: shape_data_quality_inspection_result_representation
          ENTITY: link_motion_relationship,	TYPE: link_motion_representation_along_path
          ENTITY: pair_representation_relationship,	TYPE: kinematic_link_representation
          ENTITY: ply_orientation_angle,	TYPE: ply_angle_representation
          ENTITY: constrained_kinematic_motion_representation,	TYPE: representative_shape_representation
          ENTITY: free_kinematic_motion_representation,	TYPE: representative_shape_representation
          ENTITY: explicit_procedural_shape_representation_relationship,	TYPE: shape_representation


  SUPER- ENTITY(6)	representation_relationship_with_transformation
    ATTR:  transformation_operator,	TYPE: transformation -- EXPLICIT
      -- possibly overriden by
          ENTITY: link_motion_relationship,	TYPE: link_motion_transformation
          ENTITY: pair_representation_relationship,	TYPE: kinematic_pair	(OBSERVED)


  ENTITY(SELF)	binary_assembly_constraint
    REDCR: rep_1,	TYPE: representative_shape_representation -- EXPLICIT
      -- OVERRIDING ENTITY: representation_relationship

    REDCR: rep_2,	TYPE: representative_shape_representation -- EXPLICIT
      -- OVERRIDING ENTITY: representation_relationship


  SUB- ENTITY(8)	surface_distance_assembly_constraint_with_dimension
    (no local attributes)

  SUB- ENTITY(9)	perpendicular_assembly_constraint
    (no local attributes)

  SUB- ENTITY(10)	parallel_assembly_constraint_with_dimension
    (no local attributes)

  SUB- ENTITY(11)	parallel_assembly_constraint
    (no local attributes)

  SUB- ENTITY(12)	angle_assembly_constraint_with_dimension
    (no local attributes)

  SUB- ENTITY(13)	incidence_assembly_constraint
    (no local attributes)

  SUB- ENTITY(14)	coaxial_assembly_constraint
    (no local attributes)

  SUB- ENTITY(15)	tangent_assembly_constraint
    (no local attributes)

*/


//MARK: - Partial Entity
  public final class _binary_assembly_constraint : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eBINARY_ASSEMBLY_CONSTRAINT.self
    }

    //ATTRIBUTES
    /* override var _rep_1: eREPRESENTATIVE_SHAPE_REPRESENTATION	//EXPLICIT REDEFINITION(eREPRESENTATION_RELATIONSHIP) */

    /* override var _rep_2: eREPRESENTATIVE_SHAPE_REPRESENTATION	//EXPLICIT REDEFINITION(eREPRESENTATION_RELATIONSHIP) */

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      //SELECT data types (indirectly) referencing the current type as a member of the select list
      members.insert(SDAI.STRING(sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT.typeName)) // -> Self
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: eBINARY_ASSEMBLY_CONSTRAINT?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.GROUP_REF(eEXPLICIT_CONSTRAINT.self)
      let _TEMP2 = _TEMP1?.CONSTRAINED_ELEMENTS
      let _TEMP3 = _TEMP2?[1]
      let _TEMP4 = _TEMP3?.GROUP_REF(eGEOMETRIC_REPRESENTATION_ITEM.self)
      let _TEMP5 = _TEMP4?.DIM
      let _TEMP6 = _TEMP5 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(3))
      let _TEMP7 = SELF.GROUP_REF(eEXPLICIT_CONSTRAINT.self)
      let _TEMP8 = _TEMP7?.REFERENCE_ELEMENTS
      let _TEMP9 = _TEMP8?[1]
      let _TEMP10 = _TEMP9?.GROUP_REF(eGEOMETRIC_REPRESENTATION_ITEM.self)
      let _TEMP11 = _TEMP10?.DIM
      let _TEMP12 = _TEMP11 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(3))
      let _TEMP13 = _TEMP6 && _TEMP12
      return _TEMP13
    }
    public static func WHERE_wr2(SELF: eBINARY_ASSEMBLY_CONSTRAINT?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.GROUP_REF(eREPRESENTATION_RELATIONSHIP.self)
      let _TEMP2 = _TEMP1?.REP_1
      let _TEMP3 = SELF.GROUP_REF(eREPRESENTATION_RELATIONSHIP_WITH_TRANSFORMATION.self)
      let _TEMP4 = _TEMP3?.TRANSFORMATION_OPERATOR
      let _TEMP5 = _TEMP4?.GROUP_REF(eITEM_DEFINED_TRANSFORMATION.self)
      let _TEMP6 = _TEMP5?.TRANSFORM_ITEM_1
      let _TEMP7 = USING_REPRESENTATIONS(sFOUNDED_ITEM_SELECT(/*eREPRESENTATION_ITEM*/_TEMP6))
      let _TEMP8 = SELF.GROUP_REF(eREPRESENTATION_RELATIONSHIP_WITH_TRANSFORMATION.self)
      let _TEMP9 = _TEMP8?.TRANSFORMATION_OPERATOR
      let _TEMP10 = _TEMP9?.GROUP_REF(eITEM_DEFINED_TRANSFORMATION.self)
      let _TEMP11 = _TEMP10?.TRANSFORM_ITEM_1
      let _TEMP12 = USING_REPRESENTATION_WITH_MAPPING(_TEMP11)
      let _TEMP13 = _TEMP7 + _TEMP12
      let _TEMP14 = SDAI.aggregate(_TEMP13, contains: eREPRESENTATION(/*
        sREPRESENTATION_OR_REPRESENTATION_REFERENCE*/_TEMP2))
      let _TEMP15 = SELF.GROUP_REF(eREPRESENTATION_RELATIONSHIP.self)
      let _TEMP16 = _TEMP15?.REP_2
      let _TEMP17 = SELF.GROUP_REF(eREPRESENTATION_RELATIONSHIP_WITH_TRANSFORMATION.self)
      let _TEMP18 = _TEMP17?.TRANSFORMATION_OPERATOR
      let _TEMP19 = _TEMP18?.GROUP_REF(eITEM_DEFINED_TRANSFORMATION.self)
      let _TEMP20 = _TEMP19?.TRANSFORM_ITEM_2
      let _TEMP21 = USING_REPRESENTATIONS(sFOUNDED_ITEM_SELECT(/*eREPRESENTATION_ITEM*/_TEMP20))
      let _TEMP22 = SELF.GROUP_REF(eREPRESENTATION_RELATIONSHIP_WITH_TRANSFORMATION.self)
      let _TEMP23 = _TEMP22?.TRANSFORMATION_OPERATOR
      let _TEMP24 = _TEMP23?.GROUP_REF(eITEM_DEFINED_TRANSFORMATION.self)
      let _TEMP25 = _TEMP24?.TRANSFORM_ITEM_2
      let _TEMP26 = USING_REPRESENTATION_WITH_MAPPING(_TEMP25)
      let _TEMP27 = _TEMP21 + _TEMP26
      let _TEMP28 = SDAI.aggregate(_TEMP27, contains: eREPRESENTATION(/*
        sREPRESENTATION_OR_REPRESENTATION_REFERENCE*/_TEMP16))
      let _TEMP29 = _TEMP14 && _TEMP28
      return _TEMP29
    }
    public static func WHERE_wr3(SELF: eBINARY_ASSEMBLY_CONSTRAINT?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.GROUP_REF(eEXPLICIT_CONSTRAINT.self)
      let _TEMP2 = _TEMP1?.CONSTRAINED_ELEMENTS
      let _TEMP3 = SDAI.SIZEOF(_TEMP2)
      let _TEMP4 = _TEMP3 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
      let _TEMP5 = SELF.GROUP_REF(eEXPLICIT_CONSTRAINT.self)
      let _TEMP6 = _TEMP5?.REFERENCE_ELEMENTS
      let _TEMP7 = SDAI.SIZEOF(_TEMP6)
      let _TEMP8 = _TEMP7 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
      let _TEMP9 = _TEMP4 && _TEMP8
      return _TEMP9
    }
    public static func WHERE_wr4(SELF: eBINARY_ASSEMBLY_CONSTRAINT?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.GROUP_REF(eREPRESENTATION_RELATIONSHIP_WITH_TRANSFORMATION.self)
      let _TEMP2 = _TEMP1?.TRANSFORMATION_OPERATOR
      let _TEMP3 = _TEMP2?.GROUP_REF(eITEM_DEFINED_TRANSFORMATION.self)
      let _TEMP4 = _TEMP3?.TRANSFORM_ITEM_1
      let _TEMP5 = SELF.GROUP_REF(eEXPLICIT_CONSTRAINT.self)
      let _TEMP6 = _TEMP5?.REFERENCE_ELEMENTS
      let _TEMP7 = _TEMP6?[1]
      let _TEMP8 = _TEMP4 .==. _TEMP7
      let _TEMP9 = SELF.GROUP_REF(eREPRESENTATION_RELATIONSHIP_WITH_TRANSFORMATION.self)
      let _TEMP10 = _TEMP9?.TRANSFORMATION_OPERATOR
      let _TEMP11 = _TEMP10?.GROUP_REF(eITEM_DEFINED_TRANSFORMATION.self)
      let _TEMP12 = _TEMP11?.TRANSFORM_ITEM_2
      let _TEMP13 = SELF.GROUP_REF(eEXPLICIT_CONSTRAINT.self)
      let _TEMP14 = _TEMP13?.CONSTRAINED_ELEMENTS
      let _TEMP15 = _TEMP14?[1]
      let _TEMP16 = _TEMP12 .==. _TEMP15
      let _TEMP17 = _TEMP8 && _TEMP16
      return _TEMP17
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init() {
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 0
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      self.init( )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY binary_assembly_constraint
    ABSTRACT SUPERTYPE OF ( 
        ONEOF ( 
            parallel_assembly_constraint, 
            surface_distance_assembly_constraint_with_dimension, 
            angle_assembly_constraint_with_dimension, 
            perpendicular_assembly_constraint, 
            incidence_assembly_constraint, 
            coaxial_assembly_constraint, 
            tangent_assembly_constraint ) )
    SUBTYPE OF ( assembly_geometric_constraint, representation_relationship_with_transformation );
      SELF\representation_relationship.rep_1 : representative_shape_representation;
      SELF\representation_relationship.rep_2 : representative_shape_representation;
    WHERE
      wr1: ( ( SELF\explicit_constraint.constrained_elements[1]\geometric_representation_item.dim = 3 ) AND 
               ( SELF\explicit_constraint.reference_elements[1]\geometric_representation_item.dim = 3 ) );
      wr2: ( ( SELF\representation_relationship.rep_1 IN ( using_representations( SELF\
               representation_relationship_with_transformation.transformation_operator\
               item_defined_transformation.transform_item_1 ) + using_representation_with_mapping( SELF\
               representation_relationship_with_transformation.transformation_operator\
               item_defined_transformation.transform_item_1 ) ) ) AND ( SELF\representation_relationship.
               rep_2 IN ( using_representations( SELF\representation_relationship_with_transformation.
               transformation_operator\item_defined_transformation.transform_item_2 ) + 
               using_representation_with_mapping( SELF\representation_relationship_with_transformation.
               transformation_operator\item_defined_transformation.transform_item_2 ) ) ) );
      wr3: ( ( SIZEOF( SELF\explicit_constraint.constrained_elements ) = 1 ) AND ( SIZEOF( SELF\
               explicit_constraint.reference_elements ) = 1 ) );
      wr4: ( ( SELF\representation_relationship_with_transformation.transformation_operator\
               item_defined_transformation.transform_item_1 = SELF\explicit_constraint.reference_elements[1] ) 
               AND ( SELF\representation_relationship_with_transformation.transformation_operator\
               item_defined_transformation.transform_item_2 = SELF\explicit_constraint.constrained_elements[1] ) );
  END_ENTITY; -- binary_assembly_constraint (line:8184 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eBINARY_ASSEMBLY_CONSTRAINT : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _binary_assembly_constraint.self
    }
    public let partialEntity: _binary_assembly_constraint

    //MARK: SUPERTYPES
    public let super_eREPRESENTATION_ITEM: eREPRESENTATION_ITEM 	// [1]
    public let super_eVARIATIONAL_REPRESENTATION_ITEM: eVARIATIONAL_REPRESENTATION_ITEM 	// [2]
    public let super_eEXPLICIT_CONSTRAINT: eEXPLICIT_CONSTRAINT 	// [3]
    public let super_eASSEMBLY_GEOMETRIC_CONSTRAINT: eASSEMBLY_GEOMETRIC_CONSTRAINT 	// [4]
    public let super_eREPRESENTATION_RELATIONSHIP: eREPRESENTATION_RELATIONSHIP 	// [5]
    public let super_eREPRESENTATION_RELATIONSHIP_WITH_TRANSFORMATION: eREPRESENTATION_RELATIONSHIP_WITH_TRANSFORMATION 	// [6]
    public var super_eBINARY_ASSEMBLY_CONSTRAINT: eBINARY_ASSEMBLY_CONSTRAINT { return self } 	// [7]

    //MARK: SUBTYPES
    public var sub_eSURFACE_DISTANCE_ASSEMBLY_CONSTRAINT_WITH_DIMENSION: eSURFACE_DISTANCE_ASSEMBLY_CONSTRAINT_WITH_DIMENSION? {	// [8]
      return self.complexEntity.entityReference(eSURFACE_DISTANCE_ASSEMBLY_CONSTRAINT_WITH_DIMENSION.self)
    }

    public var sub_ePERPENDICULAR_ASSEMBLY_CONSTRAINT: ePERPENDICULAR_ASSEMBLY_CONSTRAINT? {	// [9]
      return self.complexEntity.entityReference(ePERPENDICULAR_ASSEMBLY_CONSTRAINT.self)
    }

    public var sub_ePARALLEL_ASSEMBLY_CONSTRAINT_WITH_DIMENSION: ePARALLEL_ASSEMBLY_CONSTRAINT_WITH_DIMENSION? {	// [10]
      return self.complexEntity.entityReference(ePARALLEL_ASSEMBLY_CONSTRAINT_WITH_DIMENSION.self)
    }

    public var sub_ePARALLEL_ASSEMBLY_CONSTRAINT: ePARALLEL_ASSEMBLY_CONSTRAINT? {	// [11]
      return self.complexEntity.entityReference(ePARALLEL_ASSEMBLY_CONSTRAINT.self)
    }

    public var sub_eANGLE_ASSEMBLY_CONSTRAINT_WITH_DIMENSION: eANGLE_ASSEMBLY_CONSTRAINT_WITH_DIMENSION? {	// [12]
      return self.complexEntity.entityReference(eANGLE_ASSEMBLY_CONSTRAINT_WITH_DIMENSION.self)
    }

    public var sub_eINCIDENCE_ASSEMBLY_CONSTRAINT: eINCIDENCE_ASSEMBLY_CONSTRAINT? {	// [13]
      return self.complexEntity.entityReference(eINCIDENCE_ASSEMBLY_CONSTRAINT.self)
    }

    public var sub_eCOAXIAL_ASSEMBLY_CONSTRAINT: eCOAXIAL_ASSEMBLY_CONSTRAINT? {	// [14]
      return self.complexEntity.entityReference(eCOAXIAL_ASSEMBLY_CONSTRAINT.self)
    }

    public var sub_eTANGENT_ASSEMBLY_CONSTRAINT: eTANGENT_ASSEMBLY_CONSTRAINT? {	// [15]
      return self.complexEntity.entityReference(eTANGENT_ASSEMBLY_CONSTRAINT.self)
    }


    //MARK: ATTRIBUTES
    // DESCRIPTION: (2 AMBIGUOUS REFs)

    // NAME: (2 AMBIGUOUS REFs)

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eREPRESENTATION_RELATIONSHIP_WITH_TRANSFORMATION`` )
    public var TRANSFORMATION_OPERATOR: sTRANSFORMATION {
      get {
        return SDAI.UNWRAP( super_eREPRESENTATION_RELATIONSHIP_WITH_TRANSFORMATION.partialEntity
          ._transformation_operator )
      }
      set(newValue) {
        let partial = super_eREPRESENTATION_RELATIONSHIP_WITH_TRANSFORMATION.partialEntity
        partial._transformation_operator = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eEXPLICIT_CONSTRAINT`` )
    public var CONSTRAINED_ELEMENTS: SDAI.SET<eREPRESENTATION_ITEM>/*[1:nil]*/  {
      get {
        return SDAI.UNWRAP( super_eEXPLICIT_CONSTRAINT.partialEntity._constrained_elements )
      }
      set(newValue) {
        let partial = super_eEXPLICIT_CONSTRAINT.partialEntity
        partial._constrained_elements = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eEXPLICIT_CONSTRAINT`` )
    public var REFERENCE_ELEMENTS: SDAI.SET<eREPRESENTATION_ITEM>/*[0:nil]*/  {
      get {
        return SDAI.UNWRAP( super_eEXPLICIT_CONSTRAINT.partialEntity._reference_elements )
      }
      set(newValue) {
        let partial = super_eEXPLICIT_CONSTRAINT.partialEntity
        partial._reference_elements = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT REDEF__ attribute
    /// - origin: SELF( ``eBINARY_ASSEMBLY_CONSTRAINT`` )
    public var REP_1: eREPRESENTATIVE_SHAPE_REPRESENTATION {
      get {
        return SDAI.UNWRAP( eREPRESENTATIVE_SHAPE_REPRESENTATION( super_eREPRESENTATION_RELATIONSHIP
          .partialEntity._rep_1 ) )
      }
      set(newValue) {
        let partial = super_eREPRESENTATION_RELATIONSHIP.partialEntity
        partial._rep_1 = SDAI.UNWRAP(
          sREPRESENTATION_OR_REPRESENTATION_REFERENCE(newValue))
      }
    }

    /// __EXPLICIT REDEF__ attribute
    /// - origin: SELF( ``eBINARY_ASSEMBLY_CONSTRAINT`` )
    public var REP_2: eREPRESENTATIVE_SHAPE_REPRESENTATION {
      get {
        return SDAI.UNWRAP( eREPRESENTATIVE_SHAPE_REPRESENTATION( super_eREPRESENTATION_RELATIONSHIP
          .partialEntity._rep_2 ) )
      }
      set(newValue) {
        let partial = super_eREPRESENTATION_RELATIONSHIP.partialEntity
        partial._rep_2 = SDAI.UNWRAP(
          sREPRESENTATION_OR_REPRESENTATION_REFERENCE(newValue))
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_binary_assembly_constraint.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eREPRESENTATION_ITEM.self) else { return nil }
      self.super_eREPRESENTATION_ITEM = super1

      guard let super2 = complexEntity?.entityReference(eVARIATIONAL_REPRESENTATION_ITEM.self) else { return nil }
      self.super_eVARIATIONAL_REPRESENTATION_ITEM = super2

      guard let super3 = complexEntity?.entityReference(eEXPLICIT_CONSTRAINT.self) else { return nil }
      self.super_eEXPLICIT_CONSTRAINT = super3

      guard let super4 = complexEntity?.entityReference(eASSEMBLY_GEOMETRIC_CONSTRAINT.self) else { return nil }
      self.super_eASSEMBLY_GEOMETRIC_CONSTRAINT = super4

      guard let super5 = complexEntity?.entityReference(eREPRESENTATION_RELATIONSHIP.self) else { return nil }
      self.super_eREPRESENTATION_RELATIONSHIP = super5

      guard let super6 = complexEntity?.entityReference(eREPRESENTATION_RELATIONSHIP_WITH_TRANSFORMATION.self) else { return nil }
      self.super_eREPRESENTATION_RELATIONSHIP_WITH_TRANSFORMATION = super6

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _binary_assembly_constraint.WHERE_wr1(SELF: instance)
      result[prefix2 + " .WHERE_wr2"] = _binary_assembly_constraint.WHERE_wr2(SELF: instance)
      result[prefix2 + " .WHERE_wr3"] = _binary_assembly_constraint.WHERE_wr3(SELF: instance)
      result[prefix2 + " .WHERE_wr4"] = _binary_assembly_constraint.WHERE_wr4(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "BINARY_ASSEMBLY_CONSTRAINT", type: self, explicitAttributeCount: 0)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eREPRESENTATION_ITEM.self)
      entityDef.add(supertype: eVARIATIONAL_REPRESENTATION_ITEM.self)
      entityDef.add(supertype: eEXPLICIT_CONSTRAINT.self)
      entityDef.add(supertype: eASSEMBLY_GEOMETRIC_CONSTRAINT.self)
      entityDef.add(supertype: eREPRESENTATION_RELATIONSHIP.self)
      entityDef.add(supertype: eREPRESENTATION_RELATIONSHIP_WITH_TRANSFORMATION.self)
      entityDef.add(supertype: eBINARY_ASSEMBLY_CONSTRAINT.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "TRANSFORMATION_OPERATOR", keyPath: \eBINARY_ASSEMBLY_CONSTRAINT.TRANSFORMATION_OPERATOR, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "CONSTRAINED_ELEMENTS", keyPath: \eBINARY_ASSEMBLY_CONSTRAINT.CONSTRAINED_ELEMENTS, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "REFERENCE_ELEMENTS", keyPath: \eBINARY_ASSEMBLY_CONSTRAINT.REFERENCE_ELEMENTS, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "REP_1", keyPath: \eBINARY_ASSEMBLY_CONSTRAINT.REP_1, 
        kind: .explicitRedeclaring, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "REP_2", keyPath: \eBINARY_ASSEMBLY_CONSTRAINT.REP_2, 
        kind: .explicitRedeclaring, source: .thisEntity, mayYieldEntityReference: true)

      return entityDef
    }

  }
}
