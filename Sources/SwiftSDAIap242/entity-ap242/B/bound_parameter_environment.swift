/* file: bound_parameter_environment.swift 	 generated: Sun Oct 31 15:32:10 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY bound_parameter_environment
    SUBTYPE OF ( environment );
    WHERE
      wr1: ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.BOUND_VARIATIONAL_PARAMETER' IN TYPEOF( SELF\
               environment.syntactic_representation ) ) AND ( 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.INSTANCE_ATTRIBUTE_REFERENCE'  IN TYPEOF( 
               SELF\environment.semantics ) ) );
  END_ENTITY; -- bound_parameter_environment (line:8594 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	environment
    ATTR:  syntactic_representation,	TYPE: generic_variable -- EXPLICIT
      -- observed by
        ENTITY(1): generic_variable,	ATTR: interpretation,	TYPE: environment

    ATTR:  semantics,	TYPE: variable_semantics -- EXPLICIT
      -- observed by
        ENTITY(1): expression_conversion_based_unit,	ATTR: associated_variable_environment,	TYPE: environment


  ENTITY(SELF)	bound_parameter_environment
    (no local attributes)

*/


//MARK: - Partial Entity
  public final class _bound_parameter_environment : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eBOUND_PARAMETER_ENVIRONMENT.self
    }

    //ATTRIBUTES
    // (no local attributes)

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: eBOUND_PARAMETER_ENVIRONMENT?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.TYPEOF(SELF.GROUP_REF(eENVIRONMENT.self)?.SYNTACTIC_REPRESENTATION, 
        IS: eBOUND_VARIATIONAL_PARAMETER.self)
      let _TEMP2 = SDAI.TYPEOF(SELF.GROUP_REF(eENVIRONMENT.self)?.SEMANTICS, 
        IS: eINSTANCE_ATTRIBUTE_REFERENCE.self)
      let _TEMP3 = _TEMP1 && _TEMP2
      return _TEMP3
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init() {
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 0
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      self.init( )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY bound_parameter_environment
    SUBTYPE OF ( environment );
    WHERE
      wr1: ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.BOUND_VARIATIONAL_PARAMETER' IN TYPEOF( SELF\
               environment.syntactic_representation ) ) AND ( 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.INSTANCE_ATTRIBUTE_REFERENCE'  IN TYPEOF( 
               SELF\environment.semantics ) ) );
  END_ENTITY; -- bound_parameter_environment (line:8594 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eBOUND_PARAMETER_ENVIRONMENT : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _bound_parameter_environment.self
    }
    public let partialEntity: _bound_parameter_environment

    //MARK: SUPERTYPES
    public let super_eENVIRONMENT: eENVIRONMENT 	// [1]
    public var super_eBOUND_PARAMETER_ENVIRONMENT: eBOUND_PARAMETER_ENVIRONMENT { return self } 	// [2]

    //MARK: SUBTYPES

    //MARK: ATTRIBUTES
    /// __EXPLICIT(OBSERVED)__ attribute
    /// - origin: SUPER( ``eENVIRONMENT`` )
    public var SEMANTICS: eVARIABLE_SEMANTICS {
      get {
        return SDAI.UNWRAP( super_eENVIRONMENT.partialEntity._semantics )
      }
      set(newValue) {
        let partial = super_eENVIRONMENT.partialEntity
        partial._semantics = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT(OBSERVED)__ attribute
    /// - origin: SUPER( ``eENVIRONMENT`` )
    public var SYNTACTIC_REPRESENTATION: eGENERIC_VARIABLE {
      get {
        return SDAI.UNWRAP( super_eENVIRONMENT.partialEntity._syntactic_representation )
      }
      set(newValue) {
        let partial = super_eENVIRONMENT.partialEntity
        partial._syntactic_representation = SDAI.UNWRAP(newValue)
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_bound_parameter_environment.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eENVIRONMENT.self) else { return nil }
      self.super_eENVIRONMENT = super1

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _bound_parameter_environment.WHERE_wr1(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "BOUND_PARAMETER_ENVIRONMENT", type: self, explicitAttributeCount: 0)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eENVIRONMENT.self)
      entityDef.add(supertype: eBOUND_PARAMETER_ENVIRONMENT.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "SEMANTICS", keyPath: \eBOUND_PARAMETER_ENVIRONMENT.SEMANTICS, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "SYNTACTIC_REPRESENTATION", keyPath: \eBOUND_PARAMETER_ENVIRONMENT.SYNTACTIC_REPRESENTATION, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: true)

      return entityDef
    }

  }
}
