/* file: inclusion_product_concept_feature.swift 	 generated: Mon Jan  3 16:32:52 2022 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.1, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY inclusion_product_concept_feature
    SUBTYPE OF ( conditional_concept_feature );
    WHERE
      wr1: ( NOT ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PACKAGE_PRODUCT_CONCEPT_FEATURE' IN 
               TYPEOF( SELF ) ) );
      wr2: ( ( SIZEOF( QUERY ( cfr <* USEDIN( SELF, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
               + 'CONCEPT_FEATURE_RELATIONSHIP.RELATING_PRODUCT_CONCEPT_FEATURE'  ) | ( 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CONCEPT_FEATURE_RELATIONSHIP_WITH_CONDITION'  
               IN TYPEOF( cfr ) ) ) ) + SIZEOF( QUERY ( cfr <* USEDIN( SELF, 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CONCEPT_FEATURE_RELATIONSHIP.'
               + 'RELATED_PRODUCT_CONCEPT_FEATURE'  ) | ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
               + 'CONCEPT_FEATURE_RELATIONSHIP_WITH_CONDITION'  IN TYPEOF( cfr ) ) ) ) ) = 0 );
      wr3: ( SELF.condition.conditional_operator.name = 'implication' );
  END_ENTITY; -- inclusion_product_concept_feature (line:18027 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	product_concept_feature
    ATTR:  id,	TYPE: identifier -- EXPLICIT

    ATTR:  name,	TYPE: label -- EXPLICIT

    ATTR:  description,	TYPE: OPTIONAL text -- EXPLICIT


  SUPER- ENTITY(2)	conditional_concept_feature
    ATTR:  condition,	TYPE: concept_feature_relationship_with_condition -- EXPLICIT


  ENTITY(SELF)	inclusion_product_concept_feature
    (no local attributes)

*/


//MARK: - Partial Entity
  public final class _inclusion_product_concept_feature : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eINCLUSION_PRODUCT_CONCEPT_FEATURE.self
    }

    //ATTRIBUTES
    // (no local attributes)

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      //SELECT data types (indirectly) referencing the current type as a member of the select list
      members.insert(SDAI.STRING(sCHANGE_MANAGEMENT_OBJECT.typeName)) // -> Self
      members.insert(SDAI.STRING(sAPPROVAL_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sACTION_ITEMS.typeName)) // -> Self
      members.insert(SDAI.STRING(sGENERAL_ORGANIZATIONAL_DATA_SELECT.typeName)) // -> Self
      members.insert(SDAI.STRING(sEVENT_OCCURRENCE_ITEM.typeName)) // -> sGENERAL_ORGANIZATIONAL_DATA_SELECT
      members.insert(SDAI.STRING(sIR_USAGE_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sEFFECTIVITY_ITEM.typeName)) // -> Self
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: eINCLUSION_PRODUCT_CONCEPT_FEATURE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.TYPEOF(SELF, IS: ePACKAGE_PRODUCT_CONCEPT_FEATURE.self)
      let _TEMP2 =  !_TEMP1
      return _TEMP2
    }
    public static func WHERE_wr2(SELF: eINCLUSION_PRODUCT_CONCEPT_FEATURE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.USEDIN(T: SELF, ROLE: \AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF
        .eCONCEPT_FEATURE_RELATIONSHIP.RELATING_PRODUCT_CONCEPT_FEATURE)
      let _TEMP2 = _TEMP1.QUERY{ CFR in 

          let _TEMP1 = SDAI.TYPEOF(CFR, IS: eCONCEPT_FEATURE_RELATIONSHIP_WITH_CONDITION.self)
          return _TEMP1 }
      let _TEMP3 = SDAI.SIZEOF(_TEMP2)
      let _TEMP4 = SDAI.USEDIN(T: SELF, ROLE: \AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF
        .eCONCEPT_FEATURE_RELATIONSHIP.RELATED_PRODUCT_CONCEPT_FEATURE)
      let _TEMP5 = _TEMP4.QUERY{ CFR in 

          let _TEMP1 = SDAI.TYPEOF(CFR, IS: eCONCEPT_FEATURE_RELATIONSHIP_WITH_CONDITION.self)
          return _TEMP1 }
      let _TEMP6 = SDAI.SIZEOF(_TEMP5)
      let _TEMP7 = _TEMP3 + _TEMP6
      let _TEMP8 = _TEMP7 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      return _TEMP8
    }
    public static func WHERE_wr3(SELF: eINCLUSION_PRODUCT_CONCEPT_FEATURE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.CONDITION
      let _TEMP2 = _TEMP1.CONDITIONAL_OPERATOR
      let _TEMP3 = _TEMP2.NAME
      let _TEMP4 = SDAI.FORCE_OPTIONAL(_TEMP3) .==. SDAI.FORCE_OPTIONAL(SDAI.STRING("implication"))
      return _TEMP4
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init() {
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 0
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      self.init( )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY inclusion_product_concept_feature
    SUBTYPE OF ( conditional_concept_feature );
    WHERE
      wr1: ( NOT ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PACKAGE_PRODUCT_CONCEPT_FEATURE' IN 
               TYPEOF( SELF ) ) );
      wr2: ( ( SIZEOF( QUERY ( cfr <* USEDIN( SELF, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
               + 'CONCEPT_FEATURE_RELATIONSHIP.RELATING_PRODUCT_CONCEPT_FEATURE'  ) | ( 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CONCEPT_FEATURE_RELATIONSHIP_WITH_CONDITION'  
               IN TYPEOF( cfr ) ) ) ) + SIZEOF( QUERY ( cfr <* USEDIN( SELF, 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CONCEPT_FEATURE_RELATIONSHIP.'
               + 'RELATED_PRODUCT_CONCEPT_FEATURE'  ) | ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
               + 'CONCEPT_FEATURE_RELATIONSHIP_WITH_CONDITION'  IN TYPEOF( cfr ) ) ) ) ) = 0 );
      wr3: ( SELF.condition.conditional_operator.name = 'implication' );
  END_ENTITY; -- inclusion_product_concept_feature (line:18027 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eINCLUSION_PRODUCT_CONCEPT_FEATURE : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _inclusion_product_concept_feature.self
    }
    public let partialEntity: _inclusion_product_concept_feature

    //MARK: SUPERTYPES
    public let super_ePRODUCT_CONCEPT_FEATURE: ePRODUCT_CONCEPT_FEATURE 	// [1]
    public let super_eCONDITIONAL_CONCEPT_FEATURE: eCONDITIONAL_CONCEPT_FEATURE 	// [2]
    public var super_eINCLUSION_PRODUCT_CONCEPT_FEATURE: eINCLUSION_PRODUCT_CONCEPT_FEATURE { return self } 	// [3]

    //MARK: SUBTYPES

    //MARK: ATTRIBUTES
    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``ePRODUCT_CONCEPT_FEATURE`` )
    public var DESCRIPTION: tTEXT?  {
      get {
        return super_ePRODUCT_CONCEPT_FEATURE.partialEntity._description
      }
      set(newValue) {
        let partial = super_ePRODUCT_CONCEPT_FEATURE.partialEntity
        partial._description = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eCONDITIONAL_CONCEPT_FEATURE`` )
    public var CONDITION: eCONCEPT_FEATURE_RELATIONSHIP_WITH_CONDITION {
      get {
        return SDAI.UNWRAP( super_eCONDITIONAL_CONCEPT_FEATURE.partialEntity._condition )
      }
      set(newValue) {
        let partial = super_eCONDITIONAL_CONCEPT_FEATURE.partialEntity
        partial._condition = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``ePRODUCT_CONCEPT_FEATURE`` )
    public var ID: tIDENTIFIER {
      get {
        return SDAI.UNWRAP( super_ePRODUCT_CONCEPT_FEATURE.partialEntity._id )
      }
      set(newValue) {
        let partial = super_ePRODUCT_CONCEPT_FEATURE.partialEntity
        partial._id = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``ePRODUCT_CONCEPT_FEATURE`` )
    public var NAME: tLABEL {
      get {
        return SDAI.UNWRAP( super_ePRODUCT_CONCEPT_FEATURE.partialEntity._name )
      }
      set(newValue) {
        let partial = super_ePRODUCT_CONCEPT_FEATURE.partialEntity
        partial._name = SDAI.UNWRAP(newValue)
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_inclusion_product_concept_feature.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(ePRODUCT_CONCEPT_FEATURE.self) else { return nil }
      self.super_ePRODUCT_CONCEPT_FEATURE = super1

      guard let super2 = complexEntity?.entityReference(eCONDITIONAL_CONCEPT_FEATURE.self) else { return nil }
      self.super_eCONDITIONAL_CONCEPT_FEATURE = super2

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _inclusion_product_concept_feature.WHERE_wr1(SELF: instance)
      result[prefix2 + " .WHERE_wr2"] = _inclusion_product_concept_feature.WHERE_wr2(SELF: instance)
      result[prefix2 + " .WHERE_wr3"] = _inclusion_product_concept_feature.WHERE_wr3(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "INCLUSION_PRODUCT_CONCEPT_FEATURE", type: self, explicitAttributeCount: 0)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: ePRODUCT_CONCEPT_FEATURE.self)
      entityDef.add(supertype: eCONDITIONAL_CONCEPT_FEATURE.self)
      entityDef.add(supertype: eINCLUSION_PRODUCT_CONCEPT_FEATURE.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "DESCRIPTION", keyPath: \eINCLUSION_PRODUCT_CONCEPT_FEATURE.DESCRIPTION, 
        kind: .explicitOptional, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "CONDITION", keyPath: \eINCLUSION_PRODUCT_CONCEPT_FEATURE.CONDITION, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "ID", keyPath: \eINCLUSION_PRODUCT_CONCEPT_FEATURE.ID, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "NAME", keyPath: \eINCLUSION_PRODUCT_CONCEPT_FEATURE.NAME, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)

      return entityDef
    }

  }
}
