/* file: inapt_topology_and_geometry_relationship.swift 	 generated: Tue Nov 16 05:35:44 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY inapt_topology_and_geometry_relationship
    ABSTRACT SUPERTYPE OF ( 
        ONEOF ( 
            topology_related_to_nearly_degenerate_geometry, 
            geometric_gap_in_topology, 
            non_smooth_geometry_transition_across_edge, 
            topology_related_to_self_intersecting_geometry, 
            steep_geometry_transition_across_edge, 
            topology_related_to_overlapping_geometry, 
            topology_related_to_multiply_defined_geometry, 
            overcomplex_topology_and_geometry_relationship ) )
    SUBTYPE OF ( inapt_data );
  END_ENTITY; -- inapt_topology_and_geometry_relationship (line:17990 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	representation_item
    ATTR:  name,	TYPE: label -- EXPLICIT


  SUPER- ENTITY(2)	data_quality_criterion
    (no local attributes)

  SUPER- ENTITY(3)	data_quality_measurement_requirement
    (no local attributes)

  SUPER- ENTITY(4)	shape_data_quality_criterion
    ATTR:  assessment_specification,	TYPE: shape_data_quality_assessment_specification_select -- EXPLICIT
      -- possibly overriden by
          ENTITY: multiply_defined_placements,	TYPE: shape_data_quality_assessment_by_numerical_test
          ENTITY: steep_angle_between_adjacent_edges,	TYPE: shape_data_quality_assessment_by_numerical_test
          ENTITY: multiply_defined_directions,	TYPE: shape_data_quality_assessment_by_numerical_test
          ENTITY: short_length_edge,	TYPE: shape_data_quality_assessment_by_numerical_test
          ENTITY: wrongly_placed_void,	TYPE: shape_data_quality_assessment_by_logical_test
          ENTITY: g1_discontinuous_surface,	TYPE: shape_data_quality_assessment_by_numerical_test
          ENTITY: short_length_curve,	TYPE: shape_data_quality_assessment_by_numerical_test
          ENTITY: non_manifold_at_edge,	TYPE: shape_data_quality_assessment_by_logical_test
          ENTITY: multiply_defined_cartesian_points,	TYPE: shape_data_quality_assessment_by_numerical_test
          ENTITY: small_area_surface,	TYPE: shape_data_quality_assessment_by_numerical_test
          ENTITY: g2_discontinuity_between_adjacent_faces,	TYPE: shape_data_quality_assessment_by_numerical_test
          ENTITY: indistinct_surface_knots,	TYPE: shape_data_quality_assessment_by_numerical_test
          ENTITY: excessively_high_degree_curve,	TYPE: shape_data_quality_assessment_by_numerical_test
          ENTITY: solid_with_wrong_number_of_voids,	TYPE: shape_data_quality_assessment_by_logical_test
          ENTITY: wrongly_oriented_void,	TYPE: shape_data_quality_assessment_by_logical_test
          ENTITY: entirely_narrow_surface,	TYPE: shape_data_quality_assessment_by_logical_test
          ENTITY: excessively_high_degree_surface,	TYPE: shape_data_quality_assessment_by_numerical_test
          ENTITY: wrongly_placed_loop,	TYPE: shape_data_quality_assessment_by_logical_test
          ENTITY: self_intersecting_surface,	TYPE: shape_data_quality_assessment_by_logical_test
          ENTITY: curve_with_small_curvature_radius,	TYPE: shape_data_quality_assessment_by_numerical_test
          ENTITY: self_intersecting_shell,	TYPE: shape_data_quality_assessment_by_logical_test
          ENTITY: entirely_narrow_solid,	TYPE: shape_data_quality_assessment_by_logical_test
          ENTITY: gap_between_pcurves_related_to_an_edge,	TYPE: shape_data_quality_assessment_by_numerical_test
          ENTITY: inconsistent_face_and_surface_normals,	TYPE: shape_data_quality_assessment_by_logical_test
          ENTITY: intersecting_connected_face_sets,	TYPE: shape_data_quality_assessment_by_logical_test
          ENTITY: inconsistent_face_and_closed_shell_normals,	TYPE: shape_data_quality_assessment_by_logical_test
          ENTITY: indistinct_curve_knots,	TYPE: shape_data_quality_assessment_by_numerical_test
          ENTITY: surface_with_excessive_patches_in_one_direction,	TYPE: shape_data_quality_assessment_by_numerical_test
          ENTITY: non_manifold_at_vertex,	TYPE: shape_data_quality_assessment_by_logical_test
          ENTITY: partly_overlapping_edges,	TYPE: shape_data_quality_assessment_by_numerical_test
          ENTITY: gap_between_edge_and_base_surface,	TYPE: shape_data_quality_assessment_by_numerical_test
          ENTITY: inconsistent_curve_transition_code,	TYPE: shape_data_quality_assessment_by_logical_test
          ENTITY: free_edge,	TYPE: shape_data_quality_assessment_by_logical_test
          ENTITY: multiply_defined_faces,	TYPE: shape_data_quality_assessment_by_numerical_test
          ENTITY: multiply_defined_edges,	TYPE: shape_data_quality_assessment_by_numerical_test
          ENTITY: open_closed_shell,	TYPE: shape_data_quality_assessment_by_logical_test
          ENTITY: steep_angle_between_adjacent_faces,	TYPE: shape_data_quality_assessment_by_numerical_test
          ENTITY: intersecting_shells_in_solid,	TYPE: shape_data_quality_assessment_by_logical_test
          ENTITY: intersecting_loops_in_face,	TYPE: shape_data_quality_assessment_by_logical_test
          ENTITY: erroneous_b_spline_curve_definition,	TYPE: shape_data_quality_assessment_by_logical_test
          ENTITY: entirely_narrow_face,	TYPE: shape_data_quality_assessment_by_logical_test
          ENTITY: unused_patches,	TYPE: shape_data_quality_assessment_by_numerical_test
          ENTITY: g2_discontinuous_curve,	TYPE: shape_data_quality_assessment_by_numerical_test
          ENTITY: solid_with_excessive_number_of_voids,	TYPE: shape_data_quality_assessment_by_numerical_test
          ENTITY: partly_overlapping_solids,	TYPE: shape_data_quality_assessment_by_numerical_test
          ENTITY: small_area_surface_patch,	TYPE: shape_data_quality_assessment_by_numerical_test
          ENTITY: nearly_degenerate_surface_boundary,	TYPE: shape_data_quality_assessment_by_numerical_test
          ENTITY: g2_discontinuous_surface,	TYPE: shape_data_quality_assessment_by_numerical_test
          ENTITY: partly_overlapping_surfaces,	TYPE: shape_data_quality_assessment_by_numerical_test
          ENTITY: gap_between_vertex_and_edge,	TYPE: shape_data_quality_assessment_by_numerical_test
          ENTITY: high_degree_linear_curve,	TYPE: shape_data_quality_assessment_by_numerical_test
          ENTITY: multiply_defined_solids,	TYPE: shape_data_quality_assessment_by_numerical_test
          ENTITY: high_degree_planar_surface,	TYPE: shape_data_quality_assessment_by_numerical_test
          ENTITY: inconsistent_edge_and_curve_directions,	TYPE: shape_data_quality_assessment_by_logical_test
          ENTITY: edge_with_excessive_segments,	TYPE: shape_data_quality_assessment_by_numerical_test
          ENTITY: g1_discontinuity_between_adjacent_faces,	TYPE: shape_data_quality_assessment_by_numerical_test
          ENTITY: partly_overlapping_curves,	TYPE: shape_data_quality_assessment_by_numerical_test
          ENTITY: self_intersecting_curve,	TYPE: shape_data_quality_assessment_by_logical_test
          ENTITY: gap_between_adjacent_edges_in_loop,	TYPE: shape_data_quality_assessment_by_numerical_test
          ENTITY: g1_discontinuous_curve,	TYPE: shape_data_quality_assessment_by_numerical_test
          ENTITY: small_volume_solid,	TYPE: shape_data_quality_assessment_by_numerical_test
          ENTITY: surface_with_small_curvature_radius,	TYPE: shape_data_quality_assessment_by_numerical_test
          ENTITY: short_length_curve_segment,	TYPE: shape_data_quality_assessment_by_numerical_test
          ENTITY: over_used_vertex,	TYPE: shape_data_quality_assessment_by_numerical_test
          ENTITY: zero_surface_normal,	TYPE: shape_data_quality_assessment_by_numerical_test
          ENTITY: disconnected_face_set,	TYPE: shape_data_quality_assessment_by_logical_test
          ENTITY: multiply_defined_surfaces,	TYPE: shape_data_quality_assessment_by_numerical_test
          ENTITY: partly_overlapping_faces,	TYPE: shape_data_quality_assessment_by_numerical_test
          ENTITY: narrow_surface_patch,	TYPE: shape_data_quality_assessment_by_logical_test
          ENTITY: multiply_defined_curves,	TYPE: shape_data_quality_assessment_by_numerical_test
          ENTITY: self_intersecting_loop,	TYPE: shape_data_quality_assessment_by_logical_test
          ENTITY: curve_with_excessive_segments,	TYPE: shape_data_quality_assessment_by_numerical_test
          ENTITY: multiply_defined_vertices,	TYPE: shape_data_quality_assessment_by_numerical_test
          ENTITY: gap_between_faces_related_to_an_edge,	TYPE: shape_data_quality_assessment_by_numerical_test
          ENTITY: extreme_patch_width_variation,	TYPE: shape_data_quality_assessment_by_numerical_test
          ENTITY: inconsistent_adjacent_face_normals,	TYPE: shape_data_quality_assessment_by_logical_test
          ENTITY: inconsistent_surface_transition_code,	TYPE: shape_data_quality_assessment_by_logical_test
          ENTITY: nearly_degenerate_surface_patch,	TYPE: shape_data_quality_assessment_by_numerical_test
          ENTITY: erroneous_b_spline_surface_definition,	TYPE: shape_data_quality_assessment_by_logical_test
          ENTITY: face_surface_with_excessive_patches_in_one_direction,	TYPE: shape_data_quality_assessment_by_numerical_test
          ENTITY: high_degree_axi_symmetric_surface,	TYPE: shape_data_quality_assessment_by_numerical_test
          ENTITY: open_edge_loop,	TYPE: shape_data_quality_assessment_by_logical_test
          ENTITY: small_area_face,	TYPE: shape_data_quality_assessment_by_numerical_test
          ENTITY: abrupt_change_of_surface_normal,	TYPE: shape_data_quality_assessment_by_logical_test
          ENTITY: high_degree_conic,	TYPE: shape_data_quality_assessment_by_numerical_test
          ENTITY: gap_between_vertex_and_base_surface,	TYPE: shape_data_quality_assessment_by_numerical_test


  SUPER- ENTITY(5)	inapt_data
    (no local attributes)

  ENTITY(SELF)	inapt_topology_and_geometry_relationship
    (no local attributes)

  SUB- ENTITY(7)	self_intersecting_shell
    REDCR: assessment_specification,	TYPE: shape_data_quality_assessment_by_logical_test -- EXPLICIT
      -- OVERRIDING ENTITY: shape_data_quality_criterion

    ATTR:  geodesic_separation_factor,	TYPE: REAL -- EXPLICIT

    ATTR:  interference_tolerance,	TYPE: length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(8)	intersecting_connected_face_sets
    REDCR: assessment_specification,	TYPE: shape_data_quality_assessment_by_logical_test -- EXPLICIT
      -- OVERRIDING ENTITY: shape_data_quality_criterion

    ATTR:  interference_tolerance,	TYPE: length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(9)	self_intersecting_loop
    REDCR: assessment_specification,	TYPE: shape_data_quality_assessment_by_logical_test -- EXPLICIT
      -- OVERRIDING ENTITY: shape_data_quality_criterion

    ATTR:  arc_length_distance_factor,	TYPE: REAL -- EXPLICIT

    ATTR:  interference_tolerance,	TYPE: length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(10)	topology_related_to_self_intersecting_geometry
    (no local attributes)

  SUB- ENTITY(11)	short_length_edge
    REDCR: assessment_specification,	TYPE: shape_data_quality_assessment_by_numerical_test -- EXPLICIT
      -- OVERRIDING ENTITY: shape_data_quality_criterion


  SUB- ENTITY(12)	small_area_face
    REDCR: assessment_specification,	TYPE: shape_data_quality_assessment_by_numerical_test -- EXPLICIT
      -- OVERRIDING ENTITY: shape_data_quality_criterion


  SUB- ENTITY(13)	entirely_narrow_face
    REDCR: assessment_specification,	TYPE: shape_data_quality_assessment_by_logical_test -- EXPLICIT
      -- OVERRIDING ENTITY: shape_data_quality_criterion

    ATTR:  width_tolerance,	TYPE: length_measure -- EXPLICIT


  SUB- ENTITY(14)	topology_related_to_nearly_degenerate_geometry
    (no local attributes)

  SUB- ENTITY(15)	multiply_defined_faces
    REDCR: assessment_specification,	TYPE: shape_data_quality_assessment_by_numerical_test -- EXPLICIT
      -- OVERRIDING ENTITY: shape_data_quality_criterion


  SUB- ENTITY(16)	multiply_defined_edges
    REDCR: assessment_specification,	TYPE: shape_data_quality_assessment_by_numerical_test -- EXPLICIT
      -- OVERRIDING ENTITY: shape_data_quality_criterion


  SUB- ENTITY(17)	multiply_defined_vertices
    REDCR: assessment_specification,	TYPE: shape_data_quality_assessment_by_numerical_test -- EXPLICIT
      -- OVERRIDING ENTITY: shape_data_quality_criterion


  SUB- ENTITY(18)	topology_related_to_multiply_defined_geometry
    (no local attributes)

  SUB- ENTITY(19)	gap_between_pcurves_related_to_an_edge
    REDCR: assessment_specification,	TYPE: shape_data_quality_assessment_by_numerical_test -- EXPLICIT
      -- OVERRIDING ENTITY: shape_data_quality_criterion


  SUB- ENTITY(20)	gap_between_edge_and_base_surface
    REDCR: assessment_specification,	TYPE: shape_data_quality_assessment_by_numerical_test -- EXPLICIT
      -- OVERRIDING ENTITY: shape_data_quality_criterion


  SUB- ENTITY(21)	gap_between_vertex_and_edge
    REDCR: assessment_specification,	TYPE: shape_data_quality_assessment_by_numerical_test -- EXPLICIT
      -- OVERRIDING ENTITY: shape_data_quality_criterion


  SUB- ENTITY(22)	gap_between_adjacent_edges_in_loop
    REDCR: assessment_specification,	TYPE: shape_data_quality_assessment_by_numerical_test -- EXPLICIT
      -- OVERRIDING ENTITY: shape_data_quality_criterion


  SUB- ENTITY(23)	gap_between_faces_related_to_an_edge
    REDCR: assessment_specification,	TYPE: shape_data_quality_assessment_by_numerical_test -- EXPLICIT
      -- OVERRIDING ENTITY: shape_data_quality_criterion


  SUB- ENTITY(24)	gap_between_vertex_and_base_surface
    REDCR: assessment_specification,	TYPE: shape_data_quality_assessment_by_numerical_test -- EXPLICIT
      -- OVERRIDING ENTITY: shape_data_quality_criterion


  SUB- ENTITY(25)	geometric_gap_in_topology
    (no local attributes)

  SUB- ENTITY(26)	g2_discontinuity_between_adjacent_faces
    REDCR: assessment_specification,	TYPE: shape_data_quality_assessment_by_numerical_test -- EXPLICIT
      -- OVERRIDING ENTITY: shape_data_quality_criterion

    ATTR:  assessment_specification_2,	TYPE: shape_data_quality_assessment_by_numerical_test -- EXPLICIT

    ATTR:  flat_curvature_radius_tolerance,	TYPE: length_measure -- EXPLICIT


  SUB- ENTITY(27)	g1_discontinuity_between_adjacent_faces
    REDCR: assessment_specification,	TYPE: shape_data_quality_assessment_by_numerical_test -- EXPLICIT
      -- OVERRIDING ENTITY: shape_data_quality_criterion


  SUB- ENTITY(28)	non_smooth_geometry_transition_across_edge
    (no local attributes)

  SUB- ENTITY(29)	steep_angle_between_adjacent_edges
    REDCR: assessment_specification,	TYPE: shape_data_quality_assessment_by_numerical_test -- EXPLICIT
      -- OVERRIDING ENTITY: shape_data_quality_criterion


  SUB- ENTITY(30)	steep_angle_between_adjacent_faces
    REDCR: assessment_specification,	TYPE: shape_data_quality_assessment_by_numerical_test -- EXPLICIT
      -- OVERRIDING ENTITY: shape_data_quality_criterion


  SUB- ENTITY(31)	steep_geometry_transition_across_edge
    (no local attributes)

  SUB- ENTITY(32)	partly_overlapping_edges
    REDCR: assessment_specification,	TYPE: shape_data_quality_assessment_by_numerical_test -- EXPLICIT
      -- OVERRIDING ENTITY: shape_data_quality_criterion

    ATTR:  interference_tolerance,	TYPE: length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(33)	partly_overlapping_faces
    REDCR: assessment_specification,	TYPE: shape_data_quality_assessment_by_numerical_test -- EXPLICIT
      -- OVERRIDING ENTITY: shape_data_quality_criterion

    ATTR:  interference_tolerance,	TYPE: length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(34)	topology_related_to_overlapping_geometry
    (no local attributes)

  SUB- ENTITY(35)	unused_patches
    REDCR: assessment_specification,	TYPE: shape_data_quality_assessment_by_numerical_test -- EXPLICIT
      -- OVERRIDING ENTITY: shape_data_quality_criterion


  SUB- ENTITY(36)	edge_with_excessive_segments
    REDCR: assessment_specification,	TYPE: shape_data_quality_assessment_by_numerical_test -- EXPLICIT
      -- OVERRIDING ENTITY: shape_data_quality_criterion


  SUB- ENTITY(37)	face_surface_with_excessive_patches_in_one_direction
    REDCR: assessment_specification,	TYPE: shape_data_quality_assessment_by_numerical_test -- EXPLICIT
      -- OVERRIDING ENTITY: shape_data_quality_criterion


  SUB- ENTITY(38)	overcomplex_topology_and_geometry_relationship
    (no local attributes)

*/


//MARK: - Partial Entity
  public final class _inapt_topology_and_geometry_relationship : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eINAPT_TOPOLOGY_AND_GEOMETRY_RELATIONSHIP.self
    }

    //ATTRIBUTES
    // (no local attributes)

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init() {
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 0
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      self.init( )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY inapt_topology_and_geometry_relationship
    ABSTRACT SUPERTYPE OF ( 
        ONEOF ( 
            topology_related_to_nearly_degenerate_geometry, 
            geometric_gap_in_topology, 
            non_smooth_geometry_transition_across_edge, 
            topology_related_to_self_intersecting_geometry, 
            steep_geometry_transition_across_edge, 
            topology_related_to_overlapping_geometry, 
            topology_related_to_multiply_defined_geometry, 
            overcomplex_topology_and_geometry_relationship ) )
    SUBTYPE OF ( inapt_data );
  END_ENTITY; -- inapt_topology_and_geometry_relationship (line:17990 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eINAPT_TOPOLOGY_AND_GEOMETRY_RELATIONSHIP : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _inapt_topology_and_geometry_relationship.self
    }
    public let partialEntity: _inapt_topology_and_geometry_relationship

    //MARK: SUPERTYPES
    public let super_eREPRESENTATION_ITEM: eREPRESENTATION_ITEM 	// [1]
    public let super_eDATA_QUALITY_CRITERION: eDATA_QUALITY_CRITERION 	// [2]
    public let super_eDATA_QUALITY_MEASUREMENT_REQUIREMENT: eDATA_QUALITY_MEASUREMENT_REQUIREMENT 	// [3]
    public let super_eSHAPE_DATA_QUALITY_CRITERION: eSHAPE_DATA_QUALITY_CRITERION 	// [4]
    public let super_eINAPT_DATA: eINAPT_DATA 	// [5]
    public var super_eINAPT_TOPOLOGY_AND_GEOMETRY_RELATIONSHIP: eINAPT_TOPOLOGY_AND_GEOMETRY_RELATIONSHIP { return self } 	// [6]

    //MARK: SUBTYPES
    public var sub_eSELF_INTERSECTING_SHELL: eSELF_INTERSECTING_SHELL? {	// [7]
      return self.complexEntity.entityReference(eSELF_INTERSECTING_SHELL.self)
    }

    public var sub_eINTERSECTING_CONNECTED_FACE_SETS: eINTERSECTING_CONNECTED_FACE_SETS? {	// [8]
      return self.complexEntity.entityReference(eINTERSECTING_CONNECTED_FACE_SETS.self)
    }

    public var sub_eSELF_INTERSECTING_LOOP: eSELF_INTERSECTING_LOOP? {	// [9]
      return self.complexEntity.entityReference(eSELF_INTERSECTING_LOOP.self)
    }

    public var sub_eTOPOLOGY_RELATED_TO_SELF_INTERSECTING_GEOMETRY: eTOPOLOGY_RELATED_TO_SELF_INTERSECTING_GEOMETRY? {	// [10]
      return self.complexEntity.entityReference(eTOPOLOGY_RELATED_TO_SELF_INTERSECTING_GEOMETRY.self)
    }

    public var sub_eSHORT_LENGTH_EDGE: eSHORT_LENGTH_EDGE? {	// [11]
      return self.complexEntity.entityReference(eSHORT_LENGTH_EDGE.self)
    }

    public var sub_eSMALL_AREA_FACE: eSMALL_AREA_FACE? {	// [12]
      return self.complexEntity.entityReference(eSMALL_AREA_FACE.self)
    }

    public var sub_eENTIRELY_NARROW_FACE: eENTIRELY_NARROW_FACE? {	// [13]
      return self.complexEntity.entityReference(eENTIRELY_NARROW_FACE.self)
    }

    public var sub_eTOPOLOGY_RELATED_TO_NEARLY_DEGENERATE_GEOMETRY: eTOPOLOGY_RELATED_TO_NEARLY_DEGENERATE_GEOMETRY? {	// [14]
      return self.complexEntity.entityReference(eTOPOLOGY_RELATED_TO_NEARLY_DEGENERATE_GEOMETRY.self)
    }

    public var sub_eMULTIPLY_DEFINED_FACES: eMULTIPLY_DEFINED_FACES? {	// [15]
      return self.complexEntity.entityReference(eMULTIPLY_DEFINED_FACES.self)
    }

    public var sub_eMULTIPLY_DEFINED_EDGES: eMULTIPLY_DEFINED_EDGES? {	// [16]
      return self.complexEntity.entityReference(eMULTIPLY_DEFINED_EDGES.self)
    }

    public var sub_eMULTIPLY_DEFINED_VERTICES: eMULTIPLY_DEFINED_VERTICES? {	// [17]
      return self.complexEntity.entityReference(eMULTIPLY_DEFINED_VERTICES.self)
    }

    public var sub_eTOPOLOGY_RELATED_TO_MULTIPLY_DEFINED_GEOMETRY: eTOPOLOGY_RELATED_TO_MULTIPLY_DEFINED_GEOMETRY? {	// [18]
      return self.complexEntity.entityReference(eTOPOLOGY_RELATED_TO_MULTIPLY_DEFINED_GEOMETRY.self)
    }

    public var sub_eGAP_BETWEEN_PCURVES_RELATED_TO_AN_EDGE: eGAP_BETWEEN_PCURVES_RELATED_TO_AN_EDGE? {	// [19]
      return self.complexEntity.entityReference(eGAP_BETWEEN_PCURVES_RELATED_TO_AN_EDGE.self)
    }

    public var sub_eGAP_BETWEEN_EDGE_AND_BASE_SURFACE: eGAP_BETWEEN_EDGE_AND_BASE_SURFACE? {	// [20]
      return self.complexEntity.entityReference(eGAP_BETWEEN_EDGE_AND_BASE_SURFACE.self)
    }

    public var sub_eGAP_BETWEEN_VERTEX_AND_EDGE: eGAP_BETWEEN_VERTEX_AND_EDGE? {	// [21]
      return self.complexEntity.entityReference(eGAP_BETWEEN_VERTEX_AND_EDGE.self)
    }

    public var sub_eGAP_BETWEEN_ADJACENT_EDGES_IN_LOOP: eGAP_BETWEEN_ADJACENT_EDGES_IN_LOOP? {	// [22]
      return self.complexEntity.entityReference(eGAP_BETWEEN_ADJACENT_EDGES_IN_LOOP.self)
    }

    public var sub_eGAP_BETWEEN_FACES_RELATED_TO_AN_EDGE: eGAP_BETWEEN_FACES_RELATED_TO_AN_EDGE? {	// [23]
      return self.complexEntity.entityReference(eGAP_BETWEEN_FACES_RELATED_TO_AN_EDGE.self)
    }

    public var sub_eGAP_BETWEEN_VERTEX_AND_BASE_SURFACE: eGAP_BETWEEN_VERTEX_AND_BASE_SURFACE? {	// [24]
      return self.complexEntity.entityReference(eGAP_BETWEEN_VERTEX_AND_BASE_SURFACE.self)
    }

    public var sub_eGEOMETRIC_GAP_IN_TOPOLOGY: eGEOMETRIC_GAP_IN_TOPOLOGY? {	// [25]
      return self.complexEntity.entityReference(eGEOMETRIC_GAP_IN_TOPOLOGY.self)
    }

    public var sub_eG2_DISCONTINUITY_BETWEEN_ADJACENT_FACES: eG2_DISCONTINUITY_BETWEEN_ADJACENT_FACES? {	// [26]
      return self.complexEntity.entityReference(eG2_DISCONTINUITY_BETWEEN_ADJACENT_FACES.self)
    }

    public var sub_eG1_DISCONTINUITY_BETWEEN_ADJACENT_FACES: eG1_DISCONTINUITY_BETWEEN_ADJACENT_FACES? {	// [27]
      return self.complexEntity.entityReference(eG1_DISCONTINUITY_BETWEEN_ADJACENT_FACES.self)
    }

    public var sub_eNON_SMOOTH_GEOMETRY_TRANSITION_ACROSS_EDGE: eNON_SMOOTH_GEOMETRY_TRANSITION_ACROSS_EDGE? {	// [28]
      return self.complexEntity.entityReference(eNON_SMOOTH_GEOMETRY_TRANSITION_ACROSS_EDGE.self)
    }

    public var sub_eSTEEP_ANGLE_BETWEEN_ADJACENT_EDGES: eSTEEP_ANGLE_BETWEEN_ADJACENT_EDGES? {	// [29]
      return self.complexEntity.entityReference(eSTEEP_ANGLE_BETWEEN_ADJACENT_EDGES.self)
    }

    public var sub_eSTEEP_ANGLE_BETWEEN_ADJACENT_FACES: eSTEEP_ANGLE_BETWEEN_ADJACENT_FACES? {	// [30]
      return self.complexEntity.entityReference(eSTEEP_ANGLE_BETWEEN_ADJACENT_FACES.self)
    }

    public var sub_eSTEEP_GEOMETRY_TRANSITION_ACROSS_EDGE: eSTEEP_GEOMETRY_TRANSITION_ACROSS_EDGE? {	// [31]
      return self.complexEntity.entityReference(eSTEEP_GEOMETRY_TRANSITION_ACROSS_EDGE.self)
    }

    public var sub_ePARTLY_OVERLAPPING_EDGES: ePARTLY_OVERLAPPING_EDGES? {	// [32]
      return self.complexEntity.entityReference(ePARTLY_OVERLAPPING_EDGES.self)
    }

    public var sub_ePARTLY_OVERLAPPING_FACES: ePARTLY_OVERLAPPING_FACES? {	// [33]
      return self.complexEntity.entityReference(ePARTLY_OVERLAPPING_FACES.self)
    }

    public var sub_eTOPOLOGY_RELATED_TO_OVERLAPPING_GEOMETRY: eTOPOLOGY_RELATED_TO_OVERLAPPING_GEOMETRY? {	// [34]
      return self.complexEntity.entityReference(eTOPOLOGY_RELATED_TO_OVERLAPPING_GEOMETRY.self)
    }

    public var sub_eUNUSED_PATCHES: eUNUSED_PATCHES? {	// [35]
      return self.complexEntity.entityReference(eUNUSED_PATCHES.self)
    }

    public var sub_eEDGE_WITH_EXCESSIVE_SEGMENTS: eEDGE_WITH_EXCESSIVE_SEGMENTS? {	// [36]
      return self.complexEntity.entityReference(eEDGE_WITH_EXCESSIVE_SEGMENTS.self)
    }

    public var sub_eFACE_SURFACE_WITH_EXCESSIVE_PATCHES_IN_ONE_DIRECTION: eFACE_SURFACE_WITH_EXCESSIVE_PATCHES_IN_ONE_DIRECTION? {	// [37]
      return self.complexEntity.entityReference(eFACE_SURFACE_WITH_EXCESSIVE_PATCHES_IN_ONE_DIRECTION.self)
    }

    public var sub_eOVERCOMPLEX_TOPOLOGY_AND_GEOMETRY_RELATIONSHIP: eOVERCOMPLEX_TOPOLOGY_AND_GEOMETRY_RELATIONSHIP? {	// [38]
      return self.complexEntity.entityReference(eOVERCOMPLEX_TOPOLOGY_AND_GEOMETRY_RELATIONSHIP.self)
    }


    //MARK: ATTRIBUTES
    // INTERFERENCE_TOLERANCE: (5 AMBIGUOUS REFs)

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eG2_DISCONTINUITY_BETWEEN_ADJACENT_FACES`` )
    public var FLAT_CURVATURE_RADIUS_TOLERANCE: tLENGTH_MEASURE?  {
      get {
        return sub_eG2_DISCONTINUITY_BETWEEN_ADJACENT_FACES?.partialEntity._flat_curvature_radius_tolerance
      }
      set(newValue) {
        guard let partial = sub_eG2_DISCONTINUITY_BETWEEN_ADJACENT_FACES?.super_eG2_DISCONTINUITY_BETWEEN_ADJACENT_FACES
          .partialEntity else { return }
        partial._flat_curvature_radius_tolerance = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSELF_INTERSECTING_LOOP`` )
    public var ARC_LENGTH_DISTANCE_FACTOR: SDAI.REAL?  {
      get {
        return sub_eSELF_INTERSECTING_LOOP?.partialEntity._arc_length_distance_factor
      }
      set(newValue) {
        guard let partial = sub_eSELF_INTERSECTING_LOOP?.super_eSELF_INTERSECTING_LOOP.partialEntity
          else { return }
        partial._arc_length_distance_factor = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eENTIRELY_NARROW_FACE`` )
    public var WIDTH_TOLERANCE: tLENGTH_MEASURE?  {
      get {
        return sub_eENTIRELY_NARROW_FACE?.partialEntity._width_tolerance
      }
      set(newValue) {
        guard let partial = sub_eENTIRELY_NARROW_FACE?.super_eENTIRELY_NARROW_FACE.partialEntity
          else { return }
        partial._width_tolerance = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eG2_DISCONTINUITY_BETWEEN_ADJACENT_FACES`` )
    public var ASSESSMENT_SPECIFICATION_2: eSHAPE_DATA_QUALITY_ASSESSMENT_BY_NUMERICAL_TEST?  {
      get {
        return sub_eG2_DISCONTINUITY_BETWEEN_ADJACENT_FACES?.partialEntity._assessment_specification_2
      }
      set(newValue) {
        guard let partial = sub_eG2_DISCONTINUITY_BETWEEN_ADJACENT_FACES?.super_eG2_DISCONTINUITY_BETWEEN_ADJACENT_FACES
          .partialEntity else { return }
        partial._assessment_specification_2 = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eSHAPE_DATA_QUALITY_CRITERION`` )
    public var ASSESSMENT_SPECIFICATION: sSHAPE_DATA_QUALITY_ASSESSMENT_SPECIFICATION_SELECT {
      get {
        return SDAI.UNWRAP( super_eSHAPE_DATA_QUALITY_CRITERION.partialEntity._assessment_specification )
      }
      set(newValue) {
        let partial = super_eSHAPE_DATA_QUALITY_CRITERION.partialEntity
        partial._assessment_specification = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSELF_INTERSECTING_SHELL`` )
    public var GEODESIC_SEPARATION_FACTOR: SDAI.REAL?  {
      get {
        return sub_eSELF_INTERSECTING_SHELL?.partialEntity._geodesic_separation_factor
      }
      set(newValue) {
        guard let partial = sub_eSELF_INTERSECTING_SHELL?.super_eSELF_INTERSECTING_SHELL.partialEntity
          else { return }
        partial._geodesic_separation_factor = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eREPRESENTATION_ITEM`` )
    public var NAME: tLABEL {
      get {
        return SDAI.UNWRAP( super_eREPRESENTATION_ITEM.partialEntity._name )
      }
      set(newValue) {
        let partial = super_eREPRESENTATION_ITEM.partialEntity
        partial._name = SDAI.UNWRAP(newValue)
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_inapt_topology_and_geometry_relationship.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eREPRESENTATION_ITEM.self) else { return nil }
      self.super_eREPRESENTATION_ITEM = super1

      guard let super2 = complexEntity?.entityReference(eDATA_QUALITY_CRITERION.self) else { return nil }
      self.super_eDATA_QUALITY_CRITERION = super2

      guard let super3 = complexEntity?.entityReference(eDATA_QUALITY_MEASUREMENT_REQUIREMENT.self) else { return nil }
      self.super_eDATA_QUALITY_MEASUREMENT_REQUIREMENT = super3

      guard let super4 = complexEntity?.entityReference(eSHAPE_DATA_QUALITY_CRITERION.self) else { return nil }
      self.super_eSHAPE_DATA_QUALITY_CRITERION = super4

      guard let super5 = complexEntity?.entityReference(eINAPT_DATA.self) else { return nil }
      self.super_eINAPT_DATA = super5

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "INAPT_TOPOLOGY_AND_GEOMETRY_RELATIONSHIP", type: self, explicitAttributeCount: 0)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eREPRESENTATION_ITEM.self)
      entityDef.add(supertype: eDATA_QUALITY_CRITERION.self)
      entityDef.add(supertype: eDATA_QUALITY_MEASUREMENT_REQUIREMENT.self)
      entityDef.add(supertype: eSHAPE_DATA_QUALITY_CRITERION.self)
      entityDef.add(supertype: eINAPT_DATA.self)
      entityDef.add(supertype: eINAPT_TOPOLOGY_AND_GEOMETRY_RELATIONSHIP.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "FLAT_CURVATURE_RADIUS_TOLERANCE", keyPath: \eINAPT_TOPOLOGY_AND_GEOMETRY_RELATIONSHIP.FLAT_CURVATURE_RADIUS_TOLERANCE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "ARC_LENGTH_DISTANCE_FACTOR", keyPath: \eINAPT_TOPOLOGY_AND_GEOMETRY_RELATIONSHIP.ARC_LENGTH_DISTANCE_FACTOR, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "WIDTH_TOLERANCE", keyPath: \eINAPT_TOPOLOGY_AND_GEOMETRY_RELATIONSHIP.WIDTH_TOLERANCE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "ASSESSMENT_SPECIFICATION_2", keyPath: \eINAPT_TOPOLOGY_AND_GEOMETRY_RELATIONSHIP.ASSESSMENT_SPECIFICATION_2, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "ASSESSMENT_SPECIFICATION", keyPath: \eINAPT_TOPOLOGY_AND_GEOMETRY_RELATIONSHIP.ASSESSMENT_SPECIFICATION, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "GEODESIC_SEPARATION_FACTOR", keyPath: \eINAPT_TOPOLOGY_AND_GEOMETRY_RELATIONSHIP.GEODESIC_SEPARATION_FACTOR, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "NAME", keyPath: \eINAPT_TOPOLOGY_AND_GEOMETRY_RELATIONSHIP.NAME, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)

      return entityDef
    }

  }
}
