/* file: item_defined_transformation.swift 	 generated: Tue Nov 16 05:35:44 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY item_defined_transformation;
      name              : label;
      description       : OPTIONAL text;
      transform_item_1  : representation_item;
      transform_item_2  : representation_item;
  END_ENTITY; -- item_defined_transformation (line:18433 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  ENTITY(SELF)	item_defined_transformation
    ATTR:  name,	TYPE: label -- EXPLICIT (DYNAMIC)
      -- possibly overriden by
          ENTITY: kinematic_pair,	TYPE: label	(as DERIVED)

    ATTR:  description,	TYPE: OPTIONAL text -- EXPLICIT

    ATTR:  transform_item_1,	TYPE: representation_item -- EXPLICIT
      -- possibly overriden by
          ENTITY: kinematic_pair,	TYPE: rigid_placement
          ENTITY: link_motion_transformation,	TYPE: rigid_placement
          ENTITY: transformation_with_derived_angle,	TYPE: angle_direction_reference_with_a2p3d_select

    ATTR:  transform_item_2,	TYPE: representation_item -- EXPLICIT
      -- possibly overriden by
          ENTITY: kinematic_pair,	TYPE: rigid_placement
          ENTITY: link_motion_transformation,	TYPE: kinematic_path
          ENTITY: transformation_with_derived_angle,	TYPE: axis2_placement_3d


  SUB- ENTITY(2)	gear_pair_with_range
    ATTR:  lower_limit_actual_rotation_1,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT

    ATTR:  upper_limit_actual_rotation_1,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT


  SUB- ENTITY(3)	gear_pair
    ATTR:  radius_first_link,	TYPE: length_measure -- EXPLICIT

    ATTR:  radius_second_link,	TYPE: length_measure -- EXPLICIT

    ATTR:  bevel,	TYPE: plane_angle_measure -- EXPLICIT

    ATTR:  helical_angle,	TYPE: plane_angle_measure -- EXPLICIT

    ATTR:  gear_ratio,	TYPE: REAL -- EXPLICIT


  SUB- ENTITY(4)	linear_flexible_and_pinion_pair
    ATTR:  pinion_radius,	TYPE: length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(5)	rack_and_pinion_pair_with_range
    ATTR:  lower_limit_rack_displacement,	TYPE: OPTIONAL length_measure -- EXPLICIT

    ATTR:  upper_limit_rack_displacement,	TYPE: OPTIONAL length_measure -- EXPLICIT


  SUB- ENTITY(6)	rack_and_pinion_pair
    ATTR:  pinion_radius,	TYPE: length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(7)	screw_pair_with_range
    ATTR:  lower_limit_actual_rotation,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  upper_limit_actual_rotation,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(8)	screw_pair
    ATTR:  pitch,	TYPE: length_measure -- EXPLICIT


  SUB- ENTITY(9)	low_order_kinematic_pair_with_motion_coupling
    (no local attributes)

  SUB- ENTITY(10)	actuated_kinematic_pair
    ATTR:  t_x,	TYPE: OPTIONAL actuated_direction -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  t_y,	TYPE: OPTIONAL actuated_direction -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  t_z,	TYPE: OPTIONAL actuated_direction -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  r_x,	TYPE: OPTIONAL actuated_direction -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  r_y,	TYPE: OPTIONAL actuated_direction -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  r_z,	TYPE: OPTIONAL actuated_direction -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(11)	point_on_planar_curve_pair_with_range
    ATTR:  range_on_pair_curve,	TYPE: trimmed_curve -- EXPLICIT

    ATTR:  lower_limit_yaw,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  upper_limit_yaw,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  lower_limit_pitch,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  upper_limit_pitch,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  lower_limit_roll,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  upper_limit_roll,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(12)	point_on_planar_curve_pair
    ATTR:  pair_curve,	TYPE: curve -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  orientation,	TYPE: BOOLEAN -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(13)	sliding_curve_pair
    (no local attributes)

  SUB- ENTITY(14)	rolling_curve_pair
    (no local attributes)

  SUB- ENTITY(15)	planar_curve_pair_range
    ATTR:  range_on_curve_1,	TYPE: trimmed_curve -- EXPLICIT

    ATTR:  range_on_curve_2,	TYPE: trimmed_curve -- EXPLICIT


  SUB- ENTITY(16)	planar_curve_pair
    ATTR:  curve_1,	TYPE: curve -- EXPLICIT

    ATTR:  curve_2,	TYPE: curve -- EXPLICIT

    ATTR:  orientation,	TYPE: BOOLEAN -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(17)	linear_flexible_and_planar_curve_pair
    ATTR:  pair_curve,	TYPE: curve -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  orientation,	TYPE: BOOLEAN -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(18)	point_on_surface_pair_with_range
    ATTR:  range_on_pair_surface,	TYPE: rectangular_trimmed_surface -- EXPLICIT

    ATTR:  lower_limit_yaw,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  upper_limit_yaw,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  lower_limit_pitch,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  upper_limit_pitch,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  lower_limit_roll,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  upper_limit_roll,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(19)	point_on_surface_pair
    ATTR:  pair_surface,	TYPE: surface -- EXPLICIT


  SUB- ENTITY(20)	surface_pair_with_range
    ATTR:  range_on_surface_1,	TYPE: rectangular_trimmed_surface -- EXPLICIT

    ATTR:  range_on_surface_2,	TYPE: rectangular_trimmed_surface -- EXPLICIT

    ATTR:  lower_limit_actual_rotation,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  upper_limit_actual_rotation,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(21)	rolling_surface_pair
    (no local attributes)

  SUB- ENTITY(22)	sliding_surface_pair
    (no local attributes)

  SUB- ENTITY(23)	surface_pair
    ATTR:  surface_1,	TYPE: surface -- EXPLICIT

    ATTR:  surface_2,	TYPE: surface -- EXPLICIT

    ATTR:  orientation,	TYPE: BOOLEAN -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(24)	high_order_kinematic_pair
    (no local attributes)

  SUB- ENTITY(25)	planar_pair_with_range
    ATTR:  lower_limit_actual_rotation,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  upper_limit_actual_rotation,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  lower_limit_actual_translation_x,	TYPE: OPTIONAL length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  upper_limit_actual_translation_x,	TYPE: OPTIONAL length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  lower_limit_actual_translation_y,	TYPE: OPTIONAL length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  upper_limit_actual_translation_y,	TYPE: OPTIONAL length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(26)	planar_pair
    REDCR: t_x,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := TRUE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: t_y,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := TRUE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: t_z,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_x,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_y,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_z,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := TRUE
      -- OVERRIDING ENTITY: low_order_kinematic_pair


  SUB- ENTITY(27)	revolute_pair_with_range
    ATTR:  lower_limit_actual_rotation,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  upper_limit_actual_rotation,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(28)	revolute_pair
    REDCR: t_x,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: t_y,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: t_z,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_x,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_y,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_z,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := TRUE
      -- OVERRIDING ENTITY: low_order_kinematic_pair


  SUB- ENTITY(29)	cylindrical_pair_with_range
    ATTR:  lower_limit_actual_translation,	TYPE: OPTIONAL length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  upper_limit_actual_translation,	TYPE: OPTIONAL length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  lower_limit_actual_rotation,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  upper_limit_actual_rotation,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(30)	cylindrical_pair
    REDCR: t_x,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: t_y,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: t_z,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := TRUE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_x,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_y,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_z,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := TRUE
      -- OVERRIDING ENTITY: low_order_kinematic_pair


  SUB- ENTITY(31)	spherical_pair_with_range
    ATTR:  lower_limit_yaw,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  upper_limit_yaw,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  lower_limit_pitch,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  upper_limit_pitch,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  lower_limit_roll,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  upper_limit_roll,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(32)	spherical_pair
    REDCR: t_x,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: t_y,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: t_z,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_x,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := TRUE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_y,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := TRUE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_z,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := TRUE
      -- OVERRIDING ENTITY: low_order_kinematic_pair


  SUB- ENTITY(33)	fully_constrained_pair
    REDCR: t_x,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: t_y,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: t_z,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_x,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_y,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_z,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair


  SUB- ENTITY(34)	low_order_kinematic_pair_with_range
    ATTR:  lower_limit_actual_rotation_x,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT

    ATTR:  upper_limit_actual_rotation_x,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT

    ATTR:  lower_limit_actual_rotation_y,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT

    ATTR:  upper_limit_actual_rotation_y,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT

    ATTR:  lower_limit_actual_rotation_z,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT

    ATTR:  upper_limit_actual_rotation_z,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT

    ATTR:  lower_limit_actual_translation_x,	TYPE: OPTIONAL length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  upper_limit_actual_translation_x,	TYPE: OPTIONAL length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  lower_limit_actual_translation_y,	TYPE: OPTIONAL length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  upper_limit_actual_translation_y,	TYPE: OPTIONAL length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  lower_limit_actual_translation_z,	TYPE: OPTIONAL length_measure -- EXPLICIT

    ATTR:  upper_limit_actual_translation_z,	TYPE: OPTIONAL length_measure -- EXPLICIT


  SUB- ENTITY(35)	homokinetic_pair
    (no local attributes)

  SUB- ENTITY(36)	universal_pair_with_range
    ATTR:  lower_limit_first_rotation,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT

    ATTR:  upper_limit_first_rotation,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT

    ATTR:  lower_limit_second_rotation,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT

    ATTR:  upper_limit_second_rotation,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT


  SUB- ENTITY(37)	universal_pair
    ATTR:  input_skew_angle,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT

    REDCR: t_x,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: t_y,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: t_z,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_x,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := TRUE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_y,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_z,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := TRUE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    ATTR:  skew_angle,	TYPE: plane_angle_measure -- DERIVED
      := NVL( input_skew_angle, 0 )


  SUB- ENTITY(38)	spherical_pair_with_pin_and_range
    ATTR:  lower_limit_yaw,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  upper_limit_yaw,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  lower_limit_roll,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  upper_limit_roll,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(39)	spherical_pair_with_pin
    REDCR: t_x,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: t_y,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: t_z,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_x,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_y,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := TRUE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_z,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := TRUE
      -- OVERRIDING ENTITY: low_order_kinematic_pair


  SUB- ENTITY(40)	unconstrained_pair
    REDCR: t_x,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := TRUE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: t_y,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := TRUE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: t_z,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := TRUE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_x,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := TRUE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_y,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := TRUE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_z,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := TRUE
      -- OVERRIDING ENTITY: low_order_kinematic_pair


  SUB- ENTITY(41)	prismatic_pair_with_range
    ATTR:  lower_limit_actual_translation,	TYPE: OPTIONAL length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  upper_limit_actual_translation,	TYPE: OPTIONAL length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(42)	prismatic_pair
    REDCR: t_x,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := TRUE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: t_y,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: t_z,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_x,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_y,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_z,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair


  SUB- ENTITY(43)	low_order_kinematic_pair
    ATTR:  t_x,	TYPE: BOOLEAN -- EXPLICIT (DYNAMIC)	(AMBIGUOUS/MASKED)
      -- possibly overriden by
          ENTITY: planar_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: revolute_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: cylindrical_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: spherical_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: fully_constrained_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: universal_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: unconstrained_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: prismatic_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: spherical_pair_with_pin,	TYPE: BOOLEAN	(as DERIVED)

    ATTR:  t_y,	TYPE: BOOLEAN -- EXPLICIT (DYNAMIC)	(AMBIGUOUS/MASKED)
      -- possibly overriden by
          ENTITY: planar_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: revolute_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: cylindrical_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: spherical_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: fully_constrained_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: universal_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: unconstrained_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: prismatic_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: spherical_pair_with_pin,	TYPE: BOOLEAN	(as DERIVED)

    ATTR:  t_z,	TYPE: BOOLEAN -- EXPLICIT (DYNAMIC)	(AMBIGUOUS/MASKED)
      -- possibly overriden by
          ENTITY: planar_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: revolute_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: cylindrical_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: spherical_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: fully_constrained_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: universal_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: unconstrained_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: prismatic_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: spherical_pair_with_pin,	TYPE: BOOLEAN	(as DERIVED)

    ATTR:  r_x,	TYPE: BOOLEAN -- EXPLICIT (DYNAMIC)	(AMBIGUOUS/MASKED)
      -- possibly overriden by
          ENTITY: planar_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: revolute_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: cylindrical_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: spherical_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: fully_constrained_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: universal_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: unconstrained_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: prismatic_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: spherical_pair_with_pin,	TYPE: BOOLEAN	(as DERIVED)

    ATTR:  r_y,	TYPE: BOOLEAN -- EXPLICIT (DYNAMIC)	(AMBIGUOUS/MASKED)
      -- possibly overriden by
          ENTITY: planar_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: revolute_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: cylindrical_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: spherical_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: fully_constrained_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: universal_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: unconstrained_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: prismatic_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: spherical_pair_with_pin,	TYPE: BOOLEAN	(as DERIVED)

    ATTR:  r_z,	TYPE: BOOLEAN -- EXPLICIT (DYNAMIC)	(AMBIGUOUS/MASKED)
      -- possibly overriden by
          ENTITY: planar_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: revolute_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: cylindrical_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: spherical_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: fully_constrained_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: universal_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: unconstrained_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: prismatic_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: spherical_pair_with_pin,	TYPE: BOOLEAN	(as DERIVED)


  SUB- ENTITY(44)	kinematic_pair
    ATTR:  joint,	TYPE: kinematic_joint -- EXPLICIT

    REDCR: transform_item_1,	TYPE: rigid_placement -- EXPLICIT
      -- OVERRIDING ENTITY: item_defined_transformation

    REDCR: transform_item_2,	TYPE: rigid_placement -- EXPLICIT
      -- OVERRIDING ENTITY: item_defined_transformation

    ATTR:  associated_link_representations_1,	TYPE: SET [1 : ?] OF kinematic_link_representation -- DERIVED
      := sort_link_associations( link_representation_associations, TRUE )

    ATTR:  associated_link_representations_2,	TYPE: SET [1 : ?] OF kinematic_link_representation -- DERIVED
      := sort_link_associations( link_representation_associations, FALSE )

    REDCR: name,	TYPE: label -- DERIVED (DYNAMIC)
      := SELF\representation_item.name
      -- OVERRIDING ENTITY: item_defined_transformation

    ATTR:  link_representation_associations,	TYPE: SET [1 : ?] OF pair_representation_relationship -- INVERSE
      FOR transformation_operator;


  SUB- ENTITY(45)	link_motion_transformation
    REDCR: transform_item_1,	TYPE: rigid_placement -- EXPLICIT
      -- OVERRIDING ENTITY: item_defined_transformation

    REDCR: transform_item_2,	TYPE: kinematic_path -- EXPLICIT
      -- OVERRIDING ENTITY: item_defined_transformation


  SUB- ENTITY(46)	laid_defined_transformation
    (no local attributes)

  SUB- ENTITY(47)	draped_defined_transformation
    (no local attributes)

  SUB- ENTITY(48)	transformation_with_derived_angle
    REDCR: transform_item_1,	TYPE: angle_direction_reference_with_a2p3d_select -- EXPLICIT
      -- OVERRIDING ENTITY: item_defined_transformation

    REDCR: transform_item_2,	TYPE: axis2_placement_3d -- EXPLICIT
      -- OVERRIDING ENTITY: item_defined_transformation

    ATTR:  orientation_angle,	TYPE: plane_angle_measure -- DERIVED
      := derive_angle( SELF\item_defined_transformation.transform_item_1, SELF\item_defined_transformation.
        transform_item_2 )


*/


//MARK: - Partial Entity
  public final class _item_defined_transformation : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eITEM_DEFINED_TRANSFORMATION.self
    }

    //ATTRIBUTES
    /// EXPLICIT ATTRIBUTE 
    /// - see the corresponding attribute accesser in the entity reference definition for the attribute value dynamic lookup logic
    public internal(set) var _name: tLABEL?  // PLAIN EXPLICIT ATTRIBUTE

    internal static func _name__provider(complex: SDAI.ComplexEntity) -> eITEM_DEFINED_TRANSFORMATION__NAME__provider? {
      let resolved = complex.resolvePartialEntityInstance(from: [_kinematic_pair.typeIdentity])
      return resolved as? eITEM_DEFINED_TRANSFORMATION__NAME__provider
    }

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _description: tTEXT?  // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _transform_item_1: eREPRESENTATION_ITEM // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _transform_item_2: eREPRESENTATION_ITEM // PLAIN EXPLICIT ATTRIBUTE

    //PARTIAL COMPLEX ENTITY SUPPORT
    final public override class func fixupPartialComplexEntityAttributes(partialComplex: SDAI.ComplexEntity, baseComplex: SDAI.ComplexEntity) {
      guard let pe = partialComplex.partialEntityInstance(_item_defined_transformation.self) else { return }

      if pe._name == nil, self._name__provider(complex: partialComplex) == nil, 
        let base__name__provider = self._name__provider(complex: baseComplex) {
        pe._name = base__name__provider._name__getter(complex: baseComplex)
      }
    }
    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      //SELECT data types (indirectly) referencing the current type as a member of the select list
      members.insert(SDAI.STRING(sTRANSFORMATION.typeName)) // -> Self
      members.insert(SDAI.STRING(sGROUPABLE_ITEM.typeName)) // -> Self
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._name?.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._description?.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._transform_item_1.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._transform_item_2.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._name?.value.isValueEqualOptionally(to: rhs._name?.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._description?.value.isValueEqualOptionally(to: rhs._description?.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._transform_item_1.value.isValueEqualOptionally(to: rhs._transform_item_1.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._transform_item_2.value.isValueEqualOptionally(to: rhs._transform_item_2.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._name?.value.isValueEqualOptionally(to: rhs._name?.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._description?.value.isValueEqualOptionally(to: rhs._description?.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._transform_item_1.value.isValueEqualOptionally(to: rhs._transform_item_1.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._transform_item_2.value.isValueEqualOptionally(to: rhs._transform_item_2.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(NAME: tLABEL? , DESCRIPTION: tTEXT? , TRANSFORM_ITEM_1: eREPRESENTATION_ITEM, 
                TRANSFORM_ITEM_2: eREPRESENTATION_ITEM) {
      self._name = NAME
      self._description = DESCRIPTION
      self._transform_item_1 = TRANSFORM_ITEM_1
      self._transform_item_2 = TRANSFORM_ITEM_2
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 4
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverOmittableParameter(as: tLABEL.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p1) = exchangeStructure.recoverOptionalParameter(as: tTEXT.self, from: parameters[1])
      else { exchangeStructure.add(errorContext: "while recovering parameter #1 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p2) = exchangeStructure.recoverRequiredParameter(as: eREPRESENTATION_ITEM.self, from: parameters[2])
      else { exchangeStructure.add(errorContext: "while recovering parameter #2 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p3) = exchangeStructure.recoverRequiredParameter(as: eREPRESENTATION_ITEM.self, from: parameters[3])
      else { exchangeStructure.add(errorContext: "while recovering parameter #3 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( NAME: p0, DESCRIPTION: p1, TRANSFORM_ITEM_1: p2, TRANSFORM_ITEM_2: p3 )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY item_defined_transformation;
      name              : label;
      description       : OPTIONAL text;
      transform_item_1  : representation_item;
      transform_item_2  : representation_item;
  END_ENTITY; -- item_defined_transformation (line:18433 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eITEM_DEFINED_TRANSFORMATION : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _item_defined_transformation.self
    }
    public let partialEntity: _item_defined_transformation

    //MARK: SUPERTYPES
    public var super_eITEM_DEFINED_TRANSFORMATION: eITEM_DEFINED_TRANSFORMATION { return self } 	// [1]

    //MARK: SUBTYPES
    public var sub_eGEAR_PAIR_WITH_RANGE: eGEAR_PAIR_WITH_RANGE? {	// [2]
      return self.complexEntity.entityReference(eGEAR_PAIR_WITH_RANGE.self)
    }

    public var sub_eGEAR_PAIR: eGEAR_PAIR? {	// [3]
      return self.complexEntity.entityReference(eGEAR_PAIR.self)
    }

    public var sub_eLINEAR_FLEXIBLE_AND_PINION_PAIR: eLINEAR_FLEXIBLE_AND_PINION_PAIR? {	// [4]
      return self.complexEntity.entityReference(eLINEAR_FLEXIBLE_AND_PINION_PAIR.self)
    }

    public var sub_eRACK_AND_PINION_PAIR_WITH_RANGE: eRACK_AND_PINION_PAIR_WITH_RANGE? {	// [5]
      return self.complexEntity.entityReference(eRACK_AND_PINION_PAIR_WITH_RANGE.self)
    }

    public var sub_eRACK_AND_PINION_PAIR: eRACK_AND_PINION_PAIR? {	// [6]
      return self.complexEntity.entityReference(eRACK_AND_PINION_PAIR.self)
    }

    public var sub_eSCREW_PAIR_WITH_RANGE: eSCREW_PAIR_WITH_RANGE? {	// [7]
      return self.complexEntity.entityReference(eSCREW_PAIR_WITH_RANGE.self)
    }

    public var sub_eSCREW_PAIR: eSCREW_PAIR? {	// [8]
      return self.complexEntity.entityReference(eSCREW_PAIR.self)
    }

    public var sub_eLOW_ORDER_KINEMATIC_PAIR_WITH_MOTION_COUPLING: eLOW_ORDER_KINEMATIC_PAIR_WITH_MOTION_COUPLING? {	// [9]
      return self.complexEntity.entityReference(eLOW_ORDER_KINEMATIC_PAIR_WITH_MOTION_COUPLING.self)
    }

    public var sub_eACTUATED_KINEMATIC_PAIR: eACTUATED_KINEMATIC_PAIR? {	// [10]
      return self.complexEntity.entityReference(eACTUATED_KINEMATIC_PAIR.self)
    }

    public var sub_ePOINT_ON_PLANAR_CURVE_PAIR_WITH_RANGE: ePOINT_ON_PLANAR_CURVE_PAIR_WITH_RANGE? {	// [11]
      return self.complexEntity.entityReference(ePOINT_ON_PLANAR_CURVE_PAIR_WITH_RANGE.self)
    }

    public var sub_ePOINT_ON_PLANAR_CURVE_PAIR: ePOINT_ON_PLANAR_CURVE_PAIR? {	// [12]
      return self.complexEntity.entityReference(ePOINT_ON_PLANAR_CURVE_PAIR.self)
    }

    public var sub_eSLIDING_CURVE_PAIR: eSLIDING_CURVE_PAIR? {	// [13]
      return self.complexEntity.entityReference(eSLIDING_CURVE_PAIR.self)
    }

    public var sub_eROLLING_CURVE_PAIR: eROLLING_CURVE_PAIR? {	// [14]
      return self.complexEntity.entityReference(eROLLING_CURVE_PAIR.self)
    }

    public var sub_ePLANAR_CURVE_PAIR_RANGE: ePLANAR_CURVE_PAIR_RANGE? {	// [15]
      return self.complexEntity.entityReference(ePLANAR_CURVE_PAIR_RANGE.self)
    }

    public var sub_ePLANAR_CURVE_PAIR: ePLANAR_CURVE_PAIR? {	// [16]
      return self.complexEntity.entityReference(ePLANAR_CURVE_PAIR.self)
    }

    public var sub_eLINEAR_FLEXIBLE_AND_PLANAR_CURVE_PAIR: eLINEAR_FLEXIBLE_AND_PLANAR_CURVE_PAIR? {	// [17]
      return self.complexEntity.entityReference(eLINEAR_FLEXIBLE_AND_PLANAR_CURVE_PAIR.self)
    }

    public var sub_ePOINT_ON_SURFACE_PAIR_WITH_RANGE: ePOINT_ON_SURFACE_PAIR_WITH_RANGE? {	// [18]
      return self.complexEntity.entityReference(ePOINT_ON_SURFACE_PAIR_WITH_RANGE.self)
    }

    public var sub_ePOINT_ON_SURFACE_PAIR: ePOINT_ON_SURFACE_PAIR? {	// [19]
      return self.complexEntity.entityReference(ePOINT_ON_SURFACE_PAIR.self)
    }

    public var sub_eSURFACE_PAIR_WITH_RANGE: eSURFACE_PAIR_WITH_RANGE? {	// [20]
      return self.complexEntity.entityReference(eSURFACE_PAIR_WITH_RANGE.self)
    }

    public var sub_eROLLING_SURFACE_PAIR: eROLLING_SURFACE_PAIR? {	// [21]
      return self.complexEntity.entityReference(eROLLING_SURFACE_PAIR.self)
    }

    public var sub_eSLIDING_SURFACE_PAIR: eSLIDING_SURFACE_PAIR? {	// [22]
      return self.complexEntity.entityReference(eSLIDING_SURFACE_PAIR.self)
    }

    public var sub_eSURFACE_PAIR: eSURFACE_PAIR? {	// [23]
      return self.complexEntity.entityReference(eSURFACE_PAIR.self)
    }

    public var sub_eHIGH_ORDER_KINEMATIC_PAIR: eHIGH_ORDER_KINEMATIC_PAIR? {	// [24]
      return self.complexEntity.entityReference(eHIGH_ORDER_KINEMATIC_PAIR.self)
    }

    public var sub_ePLANAR_PAIR_WITH_RANGE: ePLANAR_PAIR_WITH_RANGE? {	// [25]
      return self.complexEntity.entityReference(ePLANAR_PAIR_WITH_RANGE.self)
    }

    public var sub_ePLANAR_PAIR: ePLANAR_PAIR? {	// [26]
      return self.complexEntity.entityReference(ePLANAR_PAIR.self)
    }

    public var sub_eREVOLUTE_PAIR_WITH_RANGE: eREVOLUTE_PAIR_WITH_RANGE? {	// [27]
      return self.complexEntity.entityReference(eREVOLUTE_PAIR_WITH_RANGE.self)
    }

    public var sub_eREVOLUTE_PAIR: eREVOLUTE_PAIR? {	// [28]
      return self.complexEntity.entityReference(eREVOLUTE_PAIR.self)
    }

    public var sub_eCYLINDRICAL_PAIR_WITH_RANGE: eCYLINDRICAL_PAIR_WITH_RANGE? {	// [29]
      return self.complexEntity.entityReference(eCYLINDRICAL_PAIR_WITH_RANGE.self)
    }

    public var sub_eCYLINDRICAL_PAIR: eCYLINDRICAL_PAIR? {	// [30]
      return self.complexEntity.entityReference(eCYLINDRICAL_PAIR.self)
    }

    public var sub_eSPHERICAL_PAIR_WITH_RANGE: eSPHERICAL_PAIR_WITH_RANGE? {	// [31]
      return self.complexEntity.entityReference(eSPHERICAL_PAIR_WITH_RANGE.self)
    }

    public var sub_eSPHERICAL_PAIR: eSPHERICAL_PAIR? {	// [32]
      return self.complexEntity.entityReference(eSPHERICAL_PAIR.self)
    }

    public var sub_eFULLY_CONSTRAINED_PAIR: eFULLY_CONSTRAINED_PAIR? {	// [33]
      return self.complexEntity.entityReference(eFULLY_CONSTRAINED_PAIR.self)
    }

    public var sub_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE: eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE? {	// [34]
      return self.complexEntity.entityReference(eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE.self)
    }

    public var sub_eHOMOKINETIC_PAIR: eHOMOKINETIC_PAIR? {	// [35]
      return self.complexEntity.entityReference(eHOMOKINETIC_PAIR.self)
    }

    public var sub_eUNIVERSAL_PAIR_WITH_RANGE: eUNIVERSAL_PAIR_WITH_RANGE? {	// [36]
      return self.complexEntity.entityReference(eUNIVERSAL_PAIR_WITH_RANGE.self)
    }

    public var sub_eUNIVERSAL_PAIR: eUNIVERSAL_PAIR? {	// [37]
      return self.complexEntity.entityReference(eUNIVERSAL_PAIR.self)
    }

    public var sub_eSPHERICAL_PAIR_WITH_PIN_AND_RANGE: eSPHERICAL_PAIR_WITH_PIN_AND_RANGE? {	// [38]
      return self.complexEntity.entityReference(eSPHERICAL_PAIR_WITH_PIN_AND_RANGE.self)
    }

    public var sub_eSPHERICAL_PAIR_WITH_PIN: eSPHERICAL_PAIR_WITH_PIN? {	// [39]
      return self.complexEntity.entityReference(eSPHERICAL_PAIR_WITH_PIN.self)
    }

    public var sub_eUNCONSTRAINED_PAIR: eUNCONSTRAINED_PAIR? {	// [40]
      return self.complexEntity.entityReference(eUNCONSTRAINED_PAIR.self)
    }

    public var sub_ePRISMATIC_PAIR_WITH_RANGE: ePRISMATIC_PAIR_WITH_RANGE? {	// [41]
      return self.complexEntity.entityReference(ePRISMATIC_PAIR_WITH_RANGE.self)
    }

    public var sub_ePRISMATIC_PAIR: ePRISMATIC_PAIR? {	// [42]
      return self.complexEntity.entityReference(ePRISMATIC_PAIR.self)
    }

    public var sub_eLOW_ORDER_KINEMATIC_PAIR: eLOW_ORDER_KINEMATIC_PAIR? {	// [43]
      return self.complexEntity.entityReference(eLOW_ORDER_KINEMATIC_PAIR.self)
    }

    public var sub_eKINEMATIC_PAIR: eKINEMATIC_PAIR? {	// [44]
      return self.complexEntity.entityReference(eKINEMATIC_PAIR.self)
    }

    public var sub_eLINK_MOTION_TRANSFORMATION: eLINK_MOTION_TRANSFORMATION? {	// [45]
      return self.complexEntity.entityReference(eLINK_MOTION_TRANSFORMATION.self)
    }

    public var sub_eLAID_DEFINED_TRANSFORMATION: eLAID_DEFINED_TRANSFORMATION? {	// [46]
      return self.complexEntity.entityReference(eLAID_DEFINED_TRANSFORMATION.self)
    }

    public var sub_eDRAPED_DEFINED_TRANSFORMATION: eDRAPED_DEFINED_TRANSFORMATION? {	// [47]
      return self.complexEntity.entityReference(eDRAPED_DEFINED_TRANSFORMATION.self)
    }

    public var sub_eTRANSFORMATION_WITH_DERIVED_ANGLE: eTRANSFORMATION_WITH_DERIVED_ANGLE? {	// [48]
      return self.complexEntity.entityReference(eTRANSFORMATION_WITH_DERIVED_ANGLE.self)
    }


    //MARK: ATTRIBUTES
    // LOWER_LIMIT_PITCH: (3 AMBIGUOUS REFs)

    // R_Y: (11 AMBIGUOUS REFs)

    // R_X: (11 AMBIGUOUS REFs)

    // PINION_RADIUS: (2 AMBIGUOUS REFs)

    // R_Z: (11 AMBIGUOUS REFs)

    // UPPER_LIMIT_ACTUAL_TRANSLATION_X: (2 AMBIGUOUS REFs)

    // UPPER_LIMIT_ACTUAL_TRANSLATION_Y: (2 AMBIGUOUS REFs)

    // ORIENTATION: (4 AMBIGUOUS REFs)

    // LOWER_LIMIT_ACTUAL_TRANSLATION_Y: (2 AMBIGUOUS REFs)

    // LOWER_LIMIT_ACTUAL_TRANSLATION_X: (2 AMBIGUOUS REFs)

    // UPPER_LIMIT_ROLL: (4 AMBIGUOUS REFs)

    // LOWER_LIMIT_YAW: (4 AMBIGUOUS REFs)

    // PAIR_CURVE: (2 AMBIGUOUS REFs)

    // LOWER_LIMIT_ACTUAL_ROTATION: (5 AMBIGUOUS REFs)

    // T_Z: (11 AMBIGUOUS REFs)

    // T_Y: (11 AMBIGUOUS REFs)

    // T_X: (11 AMBIGUOUS REFs)

    // UPPER_LIMIT_PITCH: (3 AMBIGUOUS REFs)

    // UPPER_LIMIT_YAW: (4 AMBIGUOUS REFs)

    // UPPER_LIMIT_ACTUAL_ROTATION: (5 AMBIGUOUS REFs)

    // LOWER_LIMIT_ROLL: (4 AMBIGUOUS REFs)

    // UPPER_LIMIT_ACTUAL_TRANSLATION: (2 AMBIGUOUS REFs)

    // LOWER_LIMIT_ACTUAL_TRANSLATION: (2 AMBIGUOUS REFs)

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSURFACE_PAIR_WITH_RANGE`` )
    public var RANGE_ON_SURFACE_1: eRECTANGULAR_TRIMMED_SURFACE?  {
      get {
        return sub_eSURFACE_PAIR_WITH_RANGE?.partialEntity._range_on_surface_1
      }
      set(newValue) {
        guard let partial = sub_eSURFACE_PAIR_WITH_RANGE?.super_eSURFACE_PAIR_WITH_RANGE.partialEntity
          else { return }
        partial._range_on_surface_1 = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSURFACE_PAIR_WITH_RANGE`` )
    public var RANGE_ON_SURFACE_2: eRECTANGULAR_TRIMMED_SURFACE?  {
      get {
        return sub_eSURFACE_PAIR_WITH_RANGE?.partialEntity._range_on_surface_2
      }
      set(newValue) {
        guard let partial = sub_eSURFACE_PAIR_WITH_RANGE?.super_eSURFACE_PAIR_WITH_RANGE.partialEntity
          else { return }
        partial._range_on_surface_2 = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePOINT_ON_PLANAR_CURVE_PAIR_WITH_RANGE`` )
    public var RANGE_ON_PAIR_CURVE: eTRIMMED_CURVE?  {
      get {
        return sub_ePOINT_ON_PLANAR_CURVE_PAIR_WITH_RANGE?.partialEntity._range_on_pair_curve
      }
      set(newValue) {
        guard let partial = sub_ePOINT_ON_PLANAR_CURVE_PAIR_WITH_RANGE?.super_ePOINT_ON_PLANAR_CURVE_PAIR_WITH_RANGE
          .partialEntity else { return }
        partial._range_on_pair_curve = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eITEM_DEFINED_TRANSFORMATION`` )
    public var DESCRIPTION: tTEXT?  {
      get {
        return self.partialEntity._description
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._description = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePLANAR_CURVE_PAIR`` )
    public var CURVE_1: eCURVE?  {
      get {
        return sub_ePLANAR_CURVE_PAIR?.partialEntity._curve_1
      }
      set(newValue) {
        guard let partial = sub_ePLANAR_CURVE_PAIR?.super_ePLANAR_CURVE_PAIR.partialEntity else { return }
        partial._curve_1 = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePLANAR_CURVE_PAIR`` )
    public var CURVE_2: eCURVE?  {
      get {
        return sub_ePLANAR_CURVE_PAIR?.partialEntity._curve_2
      }
      set(newValue) {
        guard let partial = sub_ePLANAR_CURVE_PAIR?.super_ePLANAR_CURVE_PAIR.partialEntity else { return }
        partial._curve_2 = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePLANAR_CURVE_PAIR_RANGE`` )
    public var RANGE_ON_CURVE_2: eTRIMMED_CURVE?  {
      get {
        return sub_ePLANAR_CURVE_PAIR_RANGE?.partialEntity._range_on_curve_2
      }
      set(newValue) {
        guard let partial = sub_ePLANAR_CURVE_PAIR_RANGE?.super_ePLANAR_CURVE_PAIR_RANGE.partialEntity
          else { return }
        partial._range_on_curve_2 = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePLANAR_CURVE_PAIR_RANGE`` )
    public var RANGE_ON_CURVE_1: eTRIMMED_CURVE?  {
      get {
        return sub_ePLANAR_CURVE_PAIR_RANGE?.partialEntity._range_on_curve_1
      }
      set(newValue) {
        guard let partial = sub_ePLANAR_CURVE_PAIR_RANGE?.super_ePLANAR_CURVE_PAIR_RANGE.partialEntity
          else { return }
        partial._range_on_curve_1 = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eGEAR_PAIR`` )
    public var GEAR_RATIO: SDAI.REAL?  {
      get {
        return sub_eGEAR_PAIR?.partialEntity._gear_ratio
      }
      set(newValue) {
        guard let partial = sub_eGEAR_PAIR?.super_eGEAR_PAIR.partialEntity else { return }
        partial._gear_ratio = SDAI.UNWRAP(newValue)
      }
    }

    /// __INVERSE__ attribute
    /// observing ePAIR_REPRESENTATION_RELATIONSHIP .TRANSFORMATION_OPERATOR
    /// - origin: SUB( ``eKINEMATIC_PAIR`` )
    public var LINK_REPRESENTATION_ASSOCIATIONS: (SDAI.SET<ePAIR_REPRESENTATION_RELATIONSHIP>/*[1:nil]*/ )?  {
      get {
        return sub_eKINEMATIC_PAIR?.partialEntity._link_representation_associations
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE`` )
    public var UPPER_LIMIT_ACTUAL_TRANSLATION_Z: tLENGTH_MEASURE?  {
      get {
        return sub_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE?.partialEntity._upper_limit_actual_translation_z
      }
      set(newValue) {
        guard let partial = sub_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE?.super_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE
          .partialEntity else { return }
        partial._upper_limit_actual_translation_z = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eRACK_AND_PINION_PAIR_WITH_RANGE`` )
    public var LOWER_LIMIT_RACK_DISPLACEMENT: tLENGTH_MEASURE?  {
      get {
        return sub_eRACK_AND_PINION_PAIR_WITH_RANGE?.partialEntity._lower_limit_rack_displacement
      }
      set(newValue) {
        guard let partial = sub_eRACK_AND_PINION_PAIR_WITH_RANGE?.super_eRACK_AND_PINION_PAIR_WITH_RANGE
          .partialEntity else { return }
        partial._lower_limit_rack_displacement = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSCREW_PAIR`` )
    public var PITCH: tLENGTH_MEASURE?  {
      get {
        return sub_eSCREW_PAIR?.partialEntity._pitch
      }
      set(newValue) {
        guard let partial = sub_eSCREW_PAIR?.super_eSCREW_PAIR.partialEntity else { return }
        partial._pitch = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eGEAR_PAIR_WITH_RANGE`` )
    public var UPPER_LIMIT_ACTUAL_ROTATION_1: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eGEAR_PAIR_WITH_RANGE?.partialEntity._upper_limit_actual_rotation_1
      }
      set(newValue) {
        guard let partial = sub_eGEAR_PAIR_WITH_RANGE?.super_eGEAR_PAIR_WITH_RANGE.partialEntity
          else { return }
        partial._upper_limit_actual_rotation_1 = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eGEAR_PAIR`` )
    public var BEVEL: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eGEAR_PAIR?.partialEntity._bevel
      }
      set(newValue) {
        guard let partial = sub_eGEAR_PAIR?.super_eGEAR_PAIR.partialEntity else { return }
        partial._bevel = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eTRANSFORMATION_WITH_DERIVED_ANGLE`` )
    public var ORIENTATION_ANGLE: tPLANE_ANGLE_MEASURE?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"ORIENTATION_ANGLE") {
          return cached.value as! tPLANE_ANGLE_MEASURE? 
        }
        guard let origin = sub_eTRANSFORMATION_WITH_DERIVED_ANGLE else { return nil }
        let value = tPLANE_ANGLE_MEASURE(origin.partialEntity._orientation_angle__getter(SELF: origin))
        updateCache(derivedAttributeName:"ORIENTATION_ANGLE", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eITEM_DEFINED_TRANSFORMATION`` )
    public var TRANSFORM_ITEM_1: eREPRESENTATION_ITEM {
      get {
        return SDAI.UNWRAP( self.partialEntity._transform_item_1 )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._transform_item_1 = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eITEM_DEFINED_TRANSFORMATION`` )
    public var TRANSFORM_ITEM_2: eREPRESENTATION_ITEM {
      get {
        return SDAI.UNWRAP( self.partialEntity._transform_item_2 )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._transform_item_2 = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eUNIVERSAL_PAIR_WITH_RANGE`` )
    public var LOWER_LIMIT_SECOND_ROTATION: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eUNIVERSAL_PAIR_WITH_RANGE?.partialEntity._lower_limit_second_rotation
      }
      set(newValue) {
        guard let partial = sub_eUNIVERSAL_PAIR_WITH_RANGE?.super_eUNIVERSAL_PAIR_WITH_RANGE.partialEntity
          else { return }
        partial._lower_limit_second_rotation = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eGEAR_PAIR`` )
    public var RADIUS_SECOND_LINK: tLENGTH_MEASURE?  {
      get {
        return sub_eGEAR_PAIR?.partialEntity._radius_second_link
      }
      set(newValue) {
        guard let partial = sub_eGEAR_PAIR?.super_eGEAR_PAIR.partialEntity else { return }
        partial._radius_second_link = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eUNIVERSAL_PAIR_WITH_RANGE`` )
    public var UPPER_LIMIT_FIRST_ROTATION: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eUNIVERSAL_PAIR_WITH_RANGE?.partialEntity._upper_limit_first_rotation
      }
      set(newValue) {
        guard let partial = sub_eUNIVERSAL_PAIR_WITH_RANGE?.super_eUNIVERSAL_PAIR_WITH_RANGE.partialEntity
          else { return }
        partial._upper_limit_first_rotation = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eGEAR_PAIR_WITH_RANGE`` )
    public var LOWER_LIMIT_ACTUAL_ROTATION_1: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eGEAR_PAIR_WITH_RANGE?.partialEntity._lower_limit_actual_rotation_1
      }
      set(newValue) {
        guard let partial = sub_eGEAR_PAIR_WITH_RANGE?.super_eGEAR_PAIR_WITH_RANGE.partialEntity
          else { return }
        partial._lower_limit_actual_rotation_1 = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE`` )
    public var LOWER_LIMIT_ACTUAL_TRANSLATION_Z: tLENGTH_MEASURE?  {
      get {
        return sub_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE?.partialEntity._lower_limit_actual_translation_z
      }
      set(newValue) {
        guard let partial = sub_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE?.super_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE
          .partialEntity else { return }
        partial._lower_limit_actual_translation_z = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eGEAR_PAIR`` )
    public var HELICAL_ANGLE: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eGEAR_PAIR?.partialEntity._helical_angle
      }
      set(newValue) {
        guard let partial = sub_eGEAR_PAIR?.super_eGEAR_PAIR.partialEntity else { return }
        partial._helical_angle = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePOINT_ON_SURFACE_PAIR`` )
    public var PAIR_SURFACE: eSURFACE?  {
      get {
        return sub_ePOINT_ON_SURFACE_PAIR?.partialEntity._pair_surface
      }
      set(newValue) {
        guard let partial = sub_ePOINT_ON_SURFACE_PAIR?.super_ePOINT_ON_SURFACE_PAIR.partialEntity
          else { return }
        partial._pair_surface = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eUNIVERSAL_PAIR`` )
    public var INPUT_SKEW_ANGLE: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eUNIVERSAL_PAIR?.partialEntity._input_skew_angle
      }
      set(newValue) {
        guard let partial = sub_eUNIVERSAL_PAIR?.super_eUNIVERSAL_PAIR.partialEntity else { return }
        partial._input_skew_angle = newValue
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eUNIVERSAL_PAIR`` )
    public var SKEW_ANGLE: tPLANE_ANGLE_MEASURE?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"SKEW_ANGLE") {
          return cached.value as! tPLANE_ANGLE_MEASURE? 
        }
        guard let origin = sub_eUNIVERSAL_PAIR else { return nil }
        let value = tPLANE_ANGLE_MEASURE(origin.partialEntity._skew_angle__getter(SELF: origin))
        updateCache(derivedAttributeName:"SKEW_ANGLE", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE`` )
    public var UPPER_LIMIT_ACTUAL_ROTATION_Y: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE?.partialEntity._upper_limit_actual_rotation_y
      }
      set(newValue) {
        guard let partial = sub_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE?.super_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE
          .partialEntity else { return }
        partial._upper_limit_actual_rotation_y = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE`` )
    public var UPPER_LIMIT_ACTUAL_ROTATION_X: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE?.partialEntity._upper_limit_actual_rotation_x
      }
      set(newValue) {
        guard let partial = sub_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE?.super_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE
          .partialEntity else { return }
        partial._upper_limit_actual_rotation_x = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE`` )
    public var UPPER_LIMIT_ACTUAL_ROTATION_Z: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE?.partialEntity._upper_limit_actual_rotation_z
      }
      set(newValue) {
        guard let partial = sub_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE?.super_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE
          .partialEntity else { return }
        partial._upper_limit_actual_rotation_z = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePOINT_ON_SURFACE_PAIR_WITH_RANGE`` )
    public var RANGE_ON_PAIR_SURFACE: eRECTANGULAR_TRIMMED_SURFACE?  {
      get {
        return sub_ePOINT_ON_SURFACE_PAIR_WITH_RANGE?.partialEntity._range_on_pair_surface
      }
      set(newValue) {
        guard let partial = sub_ePOINT_ON_SURFACE_PAIR_WITH_RANGE?.super_ePOINT_ON_SURFACE_PAIR_WITH_RANGE
          .partialEntity else { return }
        partial._range_on_pair_surface = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eKINEMATIC_PAIR`` )
    public var JOINT: eKINEMATIC_JOINT?  {
      get {
        return sub_eKINEMATIC_PAIR?.partialEntity._joint
      }
      set(newValue) {
        guard let partial = sub_eKINEMATIC_PAIR?.super_eKINEMATIC_PAIR.partialEntity else { return }
        partial._joint = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eRACK_AND_PINION_PAIR_WITH_RANGE`` )
    public var UPPER_LIMIT_RACK_DISPLACEMENT: tLENGTH_MEASURE?  {
      get {
        return sub_eRACK_AND_PINION_PAIR_WITH_RANGE?.partialEntity._upper_limit_rack_displacement
      }
      set(newValue) {
        guard let partial = sub_eRACK_AND_PINION_PAIR_WITH_RANGE?.super_eRACK_AND_PINION_PAIR_WITH_RANGE
          .partialEntity else { return }
        partial._upper_limit_rack_displacement = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE`` )
    public var LOWER_LIMIT_ACTUAL_ROTATION_X: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE?.partialEntity._lower_limit_actual_rotation_x
      }
      set(newValue) {
        guard let partial = sub_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE?.super_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE
          .partialEntity else { return }
        partial._lower_limit_actual_rotation_x = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE`` )
    public var LOWER_LIMIT_ACTUAL_ROTATION_Y: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE?.partialEntity._lower_limit_actual_rotation_y
      }
      set(newValue) {
        guard let partial = sub_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE?.super_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE
          .partialEntity else { return }
        partial._lower_limit_actual_rotation_y = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE`` )
    public var LOWER_LIMIT_ACTUAL_ROTATION_Z: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE?.partialEntity._lower_limit_actual_rotation_z
      }
      set(newValue) {
        guard let partial = sub_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE?.super_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE
          .partialEntity else { return }
        partial._lower_limit_actual_rotation_z = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eUNIVERSAL_PAIR_WITH_RANGE`` )
    public var LOWER_LIMIT_FIRST_ROTATION: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eUNIVERSAL_PAIR_WITH_RANGE?.partialEntity._lower_limit_first_rotation
      }
      set(newValue) {
        guard let partial = sub_eUNIVERSAL_PAIR_WITH_RANGE?.super_eUNIVERSAL_PAIR_WITH_RANGE.partialEntity
          else { return }
        partial._lower_limit_first_rotation = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eGEAR_PAIR`` )
    public var RADIUS_FIRST_LINK: tLENGTH_MEASURE?  {
      get {
        return sub_eGEAR_PAIR?.partialEntity._radius_first_link
      }
      set(newValue) {
        guard let partial = sub_eGEAR_PAIR?.super_eGEAR_PAIR.partialEntity else { return }
        partial._radius_first_link = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSURFACE_PAIR`` )
    public var SURFACE_2: eSURFACE?  {
      get {
        return sub_eSURFACE_PAIR?.partialEntity._surface_2
      }
      set(newValue) {
        guard let partial = sub_eSURFACE_PAIR?.super_eSURFACE_PAIR.partialEntity else { return }
        partial._surface_2 = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eKINEMATIC_PAIR`` )
    public var ASSOCIATED_LINK_REPRESENTATIONS_1: (SDAI.SET<eKINEMATIC_LINK_REPRESENTATION>/*[1:nil]*/ )?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"ASSOCIATED_LINK_REPRESENTATIONS_1") {
          return cached.value as! (SDAI.SET<eKINEMATIC_LINK_REPRESENTATION>/*[1:nil]*/ )? 
        }
        guard let origin = sub_eKINEMATIC_PAIR else { return nil }
        let value = SDAI.SET<eKINEMATIC_LINK_REPRESENTATION>(
          origin.partialEntity._associated_link_representations_1__getter(SELF: origin))
        updateCache(derivedAttributeName:"ASSOCIATED_LINK_REPRESENTATIONS_1", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSURFACE_PAIR`` )
    public var SURFACE_1: eSURFACE?  {
      get {
        return sub_eSURFACE_PAIR?.partialEntity._surface_1
      }
      set(newValue) {
        guard let partial = sub_eSURFACE_PAIR?.super_eSURFACE_PAIR.partialEntity else { return }
        partial._surface_1 = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eKINEMATIC_PAIR`` )
    public var ASSOCIATED_LINK_REPRESENTATIONS_2: (SDAI.SET<eKINEMATIC_LINK_REPRESENTATION>/*[1:nil]*/ )?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"ASSOCIATED_LINK_REPRESENTATIONS_2") {
          return cached.value as! (SDAI.SET<eKINEMATIC_LINK_REPRESENTATION>/*[1:nil]*/ )? 
        }
        guard let origin = sub_eKINEMATIC_PAIR else { return nil }
        let value = SDAI.SET<eKINEMATIC_LINK_REPRESENTATION>(
          origin.partialEntity._associated_link_representations_2__getter(SELF: origin))
        updateCache(derivedAttributeName:"ASSOCIATED_LINK_REPRESENTATIONS_2", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eUNIVERSAL_PAIR_WITH_RANGE`` )
    public var UPPER_LIMIT_SECOND_ROTATION: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eUNIVERSAL_PAIR_WITH_RANGE?.partialEntity._upper_limit_second_rotation
      }
      set(newValue) {
        guard let partial = sub_eUNIVERSAL_PAIR_WITH_RANGE?.super_eUNIVERSAL_PAIR_WITH_RANGE.partialEntity
          else { return }
        partial._upper_limit_second_rotation = newValue
      }
    }

    /// __EXPLICIT(DYNAMIC)__ attribute
    /// - origin: SELF( ``eITEM_DEFINED_TRANSFORMATION`` )
    public var NAME: tLABEL {
      get {
        if let resolved = _item_defined_transformation._name__provider(complex: self.complexEntity) {
          let value = resolved._name__getter(complex: self.complexEntity)
          return value
        }
        else {
          return SDAI.UNWRAP( self.partialEntity._name )
        }
      }
      set(newValue) {
        if let _ = _item_defined_transformation._name__provider(complex: self.complexEntity) { return }

        let partial = self.partialEntity
        partial._name = SDAI.UNWRAP(newValue)
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_item_defined_transformation.self) else { return nil }
      self.partialEntity = partial

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }

    //SIMPLE ENTITY REFERENCE
    public convenience init?(_ partial:_item_defined_transformation) {
      let complex = SDAI.ComplexEntity(entities:[partial])
      self.init(complex: complex)
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "ITEM_DEFINED_TRANSFORMATION", type: self, explicitAttributeCount: 4)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eITEM_DEFINED_TRANSFORMATION.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "RANGE_ON_SURFACE_1", keyPath: \eITEM_DEFINED_TRANSFORMATION.RANGE_ON_SURFACE_1, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "RANGE_ON_SURFACE_2", keyPath: \eITEM_DEFINED_TRANSFORMATION.RANGE_ON_SURFACE_2, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "RANGE_ON_PAIR_CURVE", keyPath: \eITEM_DEFINED_TRANSFORMATION.RANGE_ON_PAIR_CURVE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "DESCRIPTION", keyPath: \eITEM_DEFINED_TRANSFORMATION.DESCRIPTION, 
        kind: .explicitOptional, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "CURVE_1", keyPath: \eITEM_DEFINED_TRANSFORMATION.CURVE_1, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "CURVE_2", keyPath: \eITEM_DEFINED_TRANSFORMATION.CURVE_2, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "RANGE_ON_CURVE_2", keyPath: \eITEM_DEFINED_TRANSFORMATION.RANGE_ON_CURVE_2, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "RANGE_ON_CURVE_1", keyPath: \eITEM_DEFINED_TRANSFORMATION.RANGE_ON_CURVE_1, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "GEAR_RATIO", keyPath: \eITEM_DEFINED_TRANSFORMATION.GEAR_RATIO, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "LINK_REPRESENTATION_ASSOCIATIONS", keyPath: \eITEM_DEFINED_TRANSFORMATION.LINK_REPRESENTATION_ASSOCIATIONS, 
        kind: .inverse, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "UPPER_LIMIT_ACTUAL_TRANSLATION_Z", keyPath: \eITEM_DEFINED_TRANSFORMATION.UPPER_LIMIT_ACTUAL_TRANSLATION_Z, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "LOWER_LIMIT_RACK_DISPLACEMENT", keyPath: \eITEM_DEFINED_TRANSFORMATION.LOWER_LIMIT_RACK_DISPLACEMENT, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "PITCH", keyPath: \eITEM_DEFINED_TRANSFORMATION.PITCH, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "UPPER_LIMIT_ACTUAL_ROTATION_1", keyPath: \eITEM_DEFINED_TRANSFORMATION.UPPER_LIMIT_ACTUAL_ROTATION_1, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "BEVEL", keyPath: \eITEM_DEFINED_TRANSFORMATION.BEVEL, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "ORIENTATION_ANGLE", keyPath: \eITEM_DEFINED_TRANSFORMATION.ORIENTATION_ANGLE, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "TRANSFORM_ITEM_1", keyPath: \eITEM_DEFINED_TRANSFORMATION.TRANSFORM_ITEM_1, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "TRANSFORM_ITEM_2", keyPath: \eITEM_DEFINED_TRANSFORMATION.TRANSFORM_ITEM_2, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "LOWER_LIMIT_SECOND_ROTATION", keyPath: \eITEM_DEFINED_TRANSFORMATION.LOWER_LIMIT_SECOND_ROTATION, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "RADIUS_SECOND_LINK", keyPath: \eITEM_DEFINED_TRANSFORMATION.RADIUS_SECOND_LINK, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "UPPER_LIMIT_FIRST_ROTATION", keyPath: \eITEM_DEFINED_TRANSFORMATION.UPPER_LIMIT_FIRST_ROTATION, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "LOWER_LIMIT_ACTUAL_ROTATION_1", keyPath: \eITEM_DEFINED_TRANSFORMATION.LOWER_LIMIT_ACTUAL_ROTATION_1, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "LOWER_LIMIT_ACTUAL_TRANSLATION_Z", keyPath: \eITEM_DEFINED_TRANSFORMATION.LOWER_LIMIT_ACTUAL_TRANSLATION_Z, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "HELICAL_ANGLE", keyPath: \eITEM_DEFINED_TRANSFORMATION.HELICAL_ANGLE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "PAIR_SURFACE", keyPath: \eITEM_DEFINED_TRANSFORMATION.PAIR_SURFACE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "INPUT_SKEW_ANGLE", keyPath: \eITEM_DEFINED_TRANSFORMATION.INPUT_SKEW_ANGLE, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "SKEW_ANGLE", keyPath: \eITEM_DEFINED_TRANSFORMATION.SKEW_ANGLE, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "UPPER_LIMIT_ACTUAL_ROTATION_Y", keyPath: \eITEM_DEFINED_TRANSFORMATION.UPPER_LIMIT_ACTUAL_ROTATION_Y, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "UPPER_LIMIT_ACTUAL_ROTATION_X", keyPath: \eITEM_DEFINED_TRANSFORMATION.UPPER_LIMIT_ACTUAL_ROTATION_X, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "UPPER_LIMIT_ACTUAL_ROTATION_Z", keyPath: \eITEM_DEFINED_TRANSFORMATION.UPPER_LIMIT_ACTUAL_ROTATION_Z, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "RANGE_ON_PAIR_SURFACE", keyPath: \eITEM_DEFINED_TRANSFORMATION.RANGE_ON_PAIR_SURFACE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "JOINT", keyPath: \eITEM_DEFINED_TRANSFORMATION.JOINT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "UPPER_LIMIT_RACK_DISPLACEMENT", keyPath: \eITEM_DEFINED_TRANSFORMATION.UPPER_LIMIT_RACK_DISPLACEMENT, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "LOWER_LIMIT_ACTUAL_ROTATION_X", keyPath: \eITEM_DEFINED_TRANSFORMATION.LOWER_LIMIT_ACTUAL_ROTATION_X, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "LOWER_LIMIT_ACTUAL_ROTATION_Y", keyPath: \eITEM_DEFINED_TRANSFORMATION.LOWER_LIMIT_ACTUAL_ROTATION_Y, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "LOWER_LIMIT_ACTUAL_ROTATION_Z", keyPath: \eITEM_DEFINED_TRANSFORMATION.LOWER_LIMIT_ACTUAL_ROTATION_Z, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "LOWER_LIMIT_FIRST_ROTATION", keyPath: \eITEM_DEFINED_TRANSFORMATION.LOWER_LIMIT_FIRST_ROTATION, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "RADIUS_FIRST_LINK", keyPath: \eITEM_DEFINED_TRANSFORMATION.RADIUS_FIRST_LINK, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "SURFACE_2", keyPath: \eITEM_DEFINED_TRANSFORMATION.SURFACE_2, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "ASSOCIATED_LINK_REPRESENTATIONS_1", keyPath: \eITEM_DEFINED_TRANSFORMATION.ASSOCIATED_LINK_REPRESENTATIONS_1, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "SURFACE_1", keyPath: \eITEM_DEFINED_TRANSFORMATION.SURFACE_1, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "ASSOCIATED_LINK_REPRESENTATIONS_2", keyPath: \eITEM_DEFINED_TRANSFORMATION.ASSOCIATED_LINK_REPRESENTATIONS_2, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "UPPER_LIMIT_SECOND_ROTATION", keyPath: \eITEM_DEFINED_TRANSFORMATION.UPPER_LIMIT_SECOND_ROTATION, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "NAME", keyPath: \eITEM_DEFINED_TRANSFORMATION.NAME, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: false)

      return entityDef
    }

  }
}

//MARK: - Entity Dynamic Attribute Protocols
internal protocol eITEM_DEFINED_TRANSFORMATION__NAME__provider {
  func _name__getter(complex: SDAI.ComplexEntity) -> AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.tLABEL
}
