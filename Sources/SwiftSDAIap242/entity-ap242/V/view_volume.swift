/* file: view_volume.swift 	 generated: Mon Jan  3 16:32:52 2022 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.1, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY view_volume
    SUBTYPE OF ( founded_item );
      projection_type             : central_or_parallel;
      projection_point            : cartesian_point;
      view_plane_distance         : length_measure;
      front_plane_distance        : length_measure;
      front_plane_clipping        : BOOLEAN;
      back_plane_distance         : length_measure;
      back_plane_clipping         : BOOLEAN;
      view_volume_sides_clipping  : BOOLEAN;
      view_window                 : planar_box;
    INVERSE
      camera_usages : SET [1 : ?] OF camera_model_d3 FOR perspective_of_volume -- defined in ENTITY: camera_model_d3;
    WHERE
      wr1: ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.AXIS2_PLACEMENT_2D' IN TYPEOF( SELF\
               view_volume.view_window.placement ) ) OR ( dot_product( representation_item( ' ' ) || 
               geometric_representation_item(  ) || direction( [0, 0, 1] ), view_window\planar_box.placement\
               axis2_placement_3d.p[3] ) = 1 ) );
      wr2: ( view_plane_distance = view_window.placement\placement.location.coordinates[3] );
  END_ENTITY; -- view_volume (line:33739 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	founded_item
    ATTR:  users,	TYPE: SET [0 : ?] OF founded_item_select -- DERIVED
      := using_items( SELF, [] )


  ENTITY(SELF)	view_volume
    ATTR:  projection_type,	TYPE: central_or_parallel -- EXPLICIT

    ATTR:  projection_point,	TYPE: cartesian_point -- EXPLICIT

    ATTR:  view_plane_distance,	TYPE: length_measure -- EXPLICIT

    ATTR:  front_plane_distance,	TYPE: length_measure -- EXPLICIT

    ATTR:  front_plane_clipping,	TYPE: BOOLEAN -- EXPLICIT

    ATTR:  back_plane_distance,	TYPE: length_measure -- EXPLICIT

    ATTR:  back_plane_clipping,	TYPE: BOOLEAN -- EXPLICIT

    ATTR:  view_volume_sides_clipping,	TYPE: BOOLEAN -- EXPLICIT

    ATTR:  view_window,	TYPE: planar_box -- EXPLICIT

    ATTR:  camera_usages,	TYPE: SET [1 : ?] OF camera_model_d3 -- INVERSE
      FOR perspective_of_volume;


*/


//MARK: - Partial Entity
  public final class _view_volume : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eVIEW_VOLUME.self
    }

    //ATTRIBUTES
    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _projection_type: nCENTRAL_OR_PARALLEL // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _projection_point: eCARTESIAN_POINT // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _view_plane_distance: tLENGTH_MEASURE // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _front_plane_distance: tLENGTH_MEASURE // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _front_plane_clipping: SDAI.BOOLEAN // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _back_plane_distance: tLENGTH_MEASURE // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _back_plane_clipping: SDAI.BOOLEAN // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _view_volume_sides_clipping: SDAI.BOOLEAN // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _view_window: ePLANAR_BOX // PLAIN EXPLICIT ATTRIBUTE

    /// INVERSE AGGREGATE ATTRIBUTE
    /// observing _camera_model_d3 ._perspective_of_volume
    internal var _camera_usages: SDAI.SET<eCAMERA_MODEL_D3> {
      return __camera_usages.map{ $0.reference }
    }
    private var __camera_usages = SDAI.SET<SDAI.UnownedWrap<eCAMERA_MODEL_D3>>(
      bound1: SDAI.UNWRAP(SDAI.INTEGER(1)), bound2: (nil as SDAI.INTEGER?), 
      SDAI.EMPLY_AGGREGATE) // unowned backing store
    /// INVERSE AGGREGATE ATTR SUPPORT(ADDER)
    internal func _camera_usages__observeAddedReference(in complex: SDAI.ComplexEntity) {
      guard let newSource = complex.entityReference(eCAMERA_MODEL_D3.self) else { return }
      self.__camera_usages.add(member: SDAI.UnownedWrap(newSource) )
    }
    /// INVERSE AGGREGATE ATTR SUPPORT(REMOVER)
    internal func _camera_usages__observeRemovedReference(in complex: SDAI.ComplexEntity) {
      guard let oldSource = complex.entityReference(eCAMERA_MODEL_D3.self) else { return }
      let success = self.__camera_usages.remove(member: SDAI.UnownedWrap(oldSource) )
      assert(success, "failed to remove inverse attribute element")
    }
    /// INVERSE AGGREGATE ATTR SUPPORT(LEAVING REFERENCE OWNER)
    internal func _camera_usages__observe(leavingReferencerOwner complex: SDAI.ComplexEntity) {
      guard let oldSource = complex.entityReference(eCAMERA_MODEL_D3.self) else { return }
      let success = self.__camera_usages.removeAll(member: SDAI.UnownedWrap(oldSource) )
      assert(success, "failed to remove inverse attribute elements")
    }

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._projection_type.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._projection_point.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._view_plane_distance.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._front_plane_distance.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._front_plane_clipping.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._back_plane_distance.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._back_plane_clipping.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._view_volume_sides_clipping.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._view_window.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._projection_type.value.isValueEqualOptionally(to: rhs._projection_type.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._projection_point.value.isValueEqualOptionally(to: rhs._projection_point.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._view_plane_distance.value.isValueEqualOptionally(to: rhs._view_plane_distance.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._front_plane_distance.value.isValueEqualOptionally(to: rhs._front_plane_distance.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._front_plane_clipping.value.isValueEqualOptionally(to: rhs._front_plane_clipping.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._back_plane_distance.value.isValueEqualOptionally(to: rhs._back_plane_distance.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._back_plane_clipping.value.isValueEqualOptionally(to: rhs._back_plane_clipping.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._view_volume_sides_clipping.value.isValueEqualOptionally(to: rhs._view_volume_sides_clipping.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._view_window.value.isValueEqualOptionally(to: rhs._view_window.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._projection_type.value.isValueEqualOptionally(to: rhs._projection_type.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._projection_point.value.isValueEqualOptionally(to: rhs._projection_point.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._view_plane_distance.value.isValueEqualOptionally(to: rhs._view_plane_distance.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._front_plane_distance.value.isValueEqualOptionally(to: rhs._front_plane_distance.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._front_plane_clipping.value.isValueEqualOptionally(to: rhs._front_plane_clipping.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._back_plane_distance.value.isValueEqualOptionally(to: rhs._back_plane_distance.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._back_plane_clipping.value.isValueEqualOptionally(to: rhs._back_plane_clipping.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._view_volume_sides_clipping.value.isValueEqualOptionally(to: rhs._view_volume_sides_clipping.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._view_window.value.isValueEqualOptionally(to: rhs._view_window.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: eVIEW_VOLUME?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.TYPEOF(SELF.GROUP_REF(eVIEW_VOLUME.self)?.VIEW_WINDOW.PLACEMENT, 
        IS: eAXIS2_PLACEMENT_2D.self)
      let _TEMP2 = _representation_item(NAME: SDAI.UNWRAP(tLABEL(" ")))
      let _TEMP3 = _geometric_representation_item()
      let _TEMP4 = _TEMP2 .||. _TEMP3
      let _TEMP5 = SDAI.LIST<SDAI.REAL>(bound1: SDAI.UNWRAP(SDAI.INTEGER(2)), bound2: SDAI.INTEGER(3), 
        ([SDAI.AIE(SDAI.REAL(0)), SDAI.AIE(SDAI.REAL(0)), 
        SDAI.AIE(SDAI.REAL(1.0000000000e+00))] as [SDAI.AggregationInitializerElement<SDAI.REAL>]))
      let _TEMP6 = _direction(DIRECTION_RATIOS: SDAI.UNWRAP(_TEMP5))
      let _TEMP7 = _TEMP4 .||. _TEMP6
      let _TEMP8 = SELF.VIEW_WINDOW.GROUP_REF(ePLANAR_BOX.self)
      let _TEMP9 = _TEMP8?.PLACEMENT
      let _TEMP10 = _TEMP9?.GROUP_REF(eAXIS2_PLACEMENT_3D.self)
      let _TEMP11 = _TEMP10?.P
      let _TEMP12 = _TEMP11?[3]
      let _TEMP13 = DOT_PRODUCT(ARG1: eDIRECTION(/*SDAI.GENERIC_ENTITY*/_TEMP7), 
                                ARG2: _TEMP12)
      let _TEMP14 = _TEMP13 .==. SDAI.FORCE_OPTIONAL(SDAI.REAL(1.0000000000e+00))
      let _TEMP15 = _TEMP1 || _TEMP14
      return _TEMP15
    }
    public static func WHERE_wr2(SELF: eVIEW_VOLUME?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.VIEW_WINDOW.PLACEMENT
      let _TEMP2 = _TEMP1.GROUP_REF(ePLACEMENT.self)
      let _TEMP3 = _TEMP2?.LOCATION
      let _TEMP4 = _TEMP3?.COORDINATES
      let _TEMP5 = _TEMP4?[3]
      let _TEMP6 = SDAI.FORCE_OPTIONAL(SELF.VIEW_PLANE_DISTANCE) .==. _TEMP5
      return _TEMP6
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(PROJECTION_TYPE: nCENTRAL_OR_PARALLEL, PROJECTION_POINT: eCARTESIAN_POINT, 
                VIEW_PLANE_DISTANCE: tLENGTH_MEASURE, FRONT_PLANE_DISTANCE: tLENGTH_MEASURE, 
                FRONT_PLANE_CLIPPING: SDAI.BOOLEAN, BACK_PLANE_DISTANCE: tLENGTH_MEASURE, 
                BACK_PLANE_CLIPPING: SDAI.BOOLEAN, VIEW_VOLUME_SIDES_CLIPPING: SDAI.BOOLEAN, 
                VIEW_WINDOW: ePLANAR_BOX) {
      self._projection_type = PROJECTION_TYPE
      self._projection_point = PROJECTION_POINT
      self._view_plane_distance = VIEW_PLANE_DISTANCE
      self._front_plane_distance = FRONT_PLANE_DISTANCE
      self._front_plane_clipping = FRONT_PLANE_CLIPPING
      self._back_plane_distance = BACK_PLANE_DISTANCE
      self._back_plane_clipping = BACK_PLANE_CLIPPING
      self._view_volume_sides_clipping = VIEW_VOLUME_SIDES_CLIPPING
      self._view_window = VIEW_WINDOW
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 9
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverRequiredParameter(as: nCENTRAL_OR_PARALLEL.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p1) = exchangeStructure.recoverRequiredParameter(as: eCARTESIAN_POINT.self, from: parameters[1])
      else { exchangeStructure.add(errorContext: "while recovering parameter #1 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p2) = exchangeStructure.recoverRequiredParameter(as: tLENGTH_MEASURE.self, from: parameters[2])
      else { exchangeStructure.add(errorContext: "while recovering parameter #2 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p3) = exchangeStructure.recoverRequiredParameter(as: tLENGTH_MEASURE.self, from: parameters[3])
      else { exchangeStructure.add(errorContext: "while recovering parameter #3 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p4) = exchangeStructure.recoverRequiredParameter(as: SDAI.BOOLEAN.self, from: parameters[4])
      else { exchangeStructure.add(errorContext: "while recovering parameter #4 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p5) = exchangeStructure.recoverRequiredParameter(as: tLENGTH_MEASURE.self, from: parameters[5])
      else { exchangeStructure.add(errorContext: "while recovering parameter #5 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p6) = exchangeStructure.recoverRequiredParameter(as: SDAI.BOOLEAN.self, from: parameters[6])
      else { exchangeStructure.add(errorContext: "while recovering parameter #6 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p7) = exchangeStructure.recoverRequiredParameter(as: SDAI.BOOLEAN.self, from: parameters[7])
      else { exchangeStructure.add(errorContext: "while recovering parameter #7 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p8) = exchangeStructure.recoverRequiredParameter(as: ePLANAR_BOX.self, from: parameters[8])
      else { exchangeStructure.add(errorContext: "while recovering parameter #8 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( PROJECTION_TYPE: p0, PROJECTION_POINT: p1, VIEW_PLANE_DISTANCE: p2, FRONT_PLANE_DISTANCE: p3, FRONT_PLANE_CLIPPING: p4, BACK_PLANE_DISTANCE: p5, BACK_PLANE_CLIPPING: p6, VIEW_VOLUME_SIDES_CLIPPING: p7, VIEW_WINDOW: p8 )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY view_volume
    SUBTYPE OF ( founded_item );
      projection_type             : central_or_parallel;
      projection_point            : cartesian_point;
      view_plane_distance         : length_measure;
      front_plane_distance        : length_measure;
      front_plane_clipping        : BOOLEAN;
      back_plane_distance         : length_measure;
      back_plane_clipping         : BOOLEAN;
      view_volume_sides_clipping  : BOOLEAN;
      view_window                 : planar_box;
    INVERSE
      camera_usages : SET [1 : ?] OF camera_model_d3 FOR perspective_of_volume -- defined in ENTITY: camera_model_d3;
    WHERE
      wr1: ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.AXIS2_PLACEMENT_2D' IN TYPEOF( SELF\
               view_volume.view_window.placement ) ) OR ( dot_product( representation_item( ' ' ) || 
               geometric_representation_item(  ) || direction( [0, 0, 1] ), view_window\planar_box.placement\
               axis2_placement_3d.p[3] ) = 1 ) );
      wr2: ( view_plane_distance = view_window.placement\placement.location.coordinates[3] );
  END_ENTITY; -- view_volume (line:33739 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eVIEW_VOLUME : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _view_volume.self
    }
    public let partialEntity: _view_volume

    //MARK: SUPERTYPES
    public let super_eFOUNDED_ITEM: eFOUNDED_ITEM 	// [1]
    public var super_eVIEW_VOLUME: eVIEW_VOLUME { return self } 	// [2]

    //MARK: SUBTYPES

    //MARK: ATTRIBUTES
    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eVIEW_VOLUME`` )
    public var VIEW_PLANE_DISTANCE: tLENGTH_MEASURE {
      get {
        return SDAI.UNWRAP( self.partialEntity._view_plane_distance )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._view_plane_distance = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eVIEW_VOLUME`` )
    public var VIEW_VOLUME_SIDES_CLIPPING: SDAI.BOOLEAN {
      get {
        return SDAI.UNWRAP( self.partialEntity._view_volume_sides_clipping )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._view_volume_sides_clipping = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eVIEW_VOLUME`` )
    public var PROJECTION_POINT: eCARTESIAN_POINT {
      get {
        return SDAI.UNWRAP( self.partialEntity._projection_point )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._projection_point = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eVIEW_VOLUME`` )
    public var BACK_PLANE_DISTANCE: tLENGTH_MEASURE {
      get {
        return SDAI.UNWRAP( self.partialEntity._back_plane_distance )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._back_plane_distance = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUPER( ``eFOUNDED_ITEM`` )
    public var USERS: (SDAI.SET<sFOUNDED_ITEM_SELECT>/*[0:nil]*/ )?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"USERS") {
          return cached.value as! (SDAI.SET<sFOUNDED_ITEM_SELECT>/*[0:nil]*/ )? 
        }
        let origin = super_eFOUNDED_ITEM
        let value = SDAI.SET<sFOUNDED_ITEM_SELECT>(origin.partialEntity._users__getter(SELF: origin))
        updateCache(derivedAttributeName:"USERS", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eVIEW_VOLUME`` )
    public var PROJECTION_TYPE: nCENTRAL_OR_PARALLEL {
      get {
        return SDAI.UNWRAP( self.partialEntity._projection_type )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._projection_type = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eVIEW_VOLUME`` )
    public var FRONT_PLANE_DISTANCE: tLENGTH_MEASURE {
      get {
        return SDAI.UNWRAP( self.partialEntity._front_plane_distance )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._front_plane_distance = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eVIEW_VOLUME`` )
    public var BACK_PLANE_CLIPPING: SDAI.BOOLEAN {
      get {
        return SDAI.UNWRAP( self.partialEntity._back_plane_clipping )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._back_plane_clipping = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eVIEW_VOLUME`` )
    public var FRONT_PLANE_CLIPPING: SDAI.BOOLEAN {
      get {
        return SDAI.UNWRAP( self.partialEntity._front_plane_clipping )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._front_plane_clipping = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eVIEW_VOLUME`` )
    public var VIEW_WINDOW: ePLANAR_BOX {
      get {
        return SDAI.UNWRAP( self.partialEntity._view_window )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._view_window = SDAI.UNWRAP(newValue)
      }
    }

    /// __INVERSE__ attribute
    /// observing eCAMERA_MODEL_D3 .PERSPECTIVE_OF_VOLUME
    /// - origin: SELF( ``eVIEW_VOLUME`` )
    public var CAMERA_USAGES: SDAI.SET<eCAMERA_MODEL_D3>/*[1:nil]*/  {
      get {
        return SDAI.UNWRAP( self.partialEntity._camera_usages )
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_view_volume.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eFOUNDED_ITEM.self) else { return nil }
      self.super_eFOUNDED_ITEM = super1

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _view_volume.WHERE_wr1(SELF: instance)
      result[prefix2 + " .WHERE_wr2"] = _view_volume.WHERE_wr2(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "VIEW_VOLUME", type: self, explicitAttributeCount: 9)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eFOUNDED_ITEM.self)
      entityDef.add(supertype: eVIEW_VOLUME.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "VIEW_PLANE_DISTANCE", keyPath: \eVIEW_VOLUME.VIEW_PLANE_DISTANCE, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "VIEW_VOLUME_SIDES_CLIPPING", keyPath: \eVIEW_VOLUME.VIEW_VOLUME_SIDES_CLIPPING, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "PROJECTION_POINT", keyPath: \eVIEW_VOLUME.PROJECTION_POINT, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "BACK_PLANE_DISTANCE", keyPath: \eVIEW_VOLUME.BACK_PLANE_DISTANCE, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "USERS", keyPath: \eVIEW_VOLUME.USERS, 
        kind: .derived, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "PROJECTION_TYPE", keyPath: \eVIEW_VOLUME.PROJECTION_TYPE, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "FRONT_PLANE_DISTANCE", keyPath: \eVIEW_VOLUME.FRONT_PLANE_DISTANCE, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "BACK_PLANE_CLIPPING", keyPath: \eVIEW_VOLUME.BACK_PLANE_CLIPPING, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "FRONT_PLANE_CLIPPING", keyPath: \eVIEW_VOLUME.FRONT_PLANE_CLIPPING, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "VIEW_WINDOW", keyPath: \eVIEW_VOLUME.VIEW_WINDOW, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "CAMERA_USAGES", keyPath: \eVIEW_VOLUME.CAMERA_USAGES, 
        kind: .inverse, source: .thisEntity, mayYieldEntityReference: true)

      return entityDef
    }

  }
}
