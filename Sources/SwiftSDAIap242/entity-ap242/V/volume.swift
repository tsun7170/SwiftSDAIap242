/* file: volume.swift 	 generated: Tue Nov 16 05:35:44 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY volume
    SUPERTYPE OF ( 
        ONEOF ( 
            block_volume, 
            wedge_volume, 
            spherical_volume, 
            cylindrical_volume, 
            eccentric_conical_volume, 
            toroidal_volume, 
            pyramid_volume, 
            b_spline_volume, 
            ellipsoid_volume, 
            tetrahedron_volume, 
            hexahedron_volume, 
            locally_refined_spline_volume ) )
    SUBTYPE OF ( geometric_representation_item );
    WHERE
      wr1: ( SELF\geometric_representation_item.dim = 3 );
  END_ENTITY; -- volume (line:33807 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	representation_item
    ATTR:  name,	TYPE: label -- EXPLICIT


  SUPER- ENTITY(2)	geometric_representation_item
    ATTR:  dim,	TYPE: dimension_count -- DERIVED
      := dimension_of( SELF )


  ENTITY(SELF)	volume
    (no local attributes)

  SUB- ENTITY(4)	hexahedron_volume
    ATTR:  points,	TYPE: LIST [8 : 8] OF cartesian_point -- EXPLICIT


  SUB- ENTITY(5)	wedge_volume
    ATTR:  position,	TYPE: axis2_placement_3d -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  x,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  y,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  z,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  ltx,	TYPE: length_measure -- EXPLICIT


  SUB- ENTITY(6)	toroidal_volume
    ATTR:  position,	TYPE: axis2_placement_3d -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  major_radius,	TYPE: positive_length_measure -- EXPLICIT

    ATTR:  minor_radius,	TYPE: positive_length_measure -- EXPLICIT


  SUB- ENTITY(7)	rational_locally_refined_spline_volume
    ATTR:  weights_data,	TYPE: LIST [8 : ?] OF REAL -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(8)	locally_refined_spline_volume
    ATTR:  u_b_splines,	TYPE: LIST [8 : ?] OF local_b_spline -- EXPLICIT

    ATTR:  v_b_splines,	TYPE: LIST [8 : ?] OF local_b_spline -- EXPLICIT

    ATTR:  w_b_splines,	TYPE: LIST [8 : ?] OF local_b_spline -- EXPLICIT

    ATTR:  u_knots,	TYPE: spline_knot_values -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  v_knots,	TYPE: spline_knot_values -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  w_knots,	TYPE: spline_knot_values -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  control_points_list,	TYPE: LIST [8 : ?] OF cartesian_point -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  scaling_factors,	TYPE: LIST [8 : ?] OF REAL -- EXPLICIT

    ATTR:  linearly_independent,	TYPE: linearly_independent_enum -- EXPLICIT

    ATTR:  locally_refined_spline_type,	TYPE: locally_refined_spline_type_enum -- EXPLICIT

    ATTR:  domain,	TYPE: LIST [3 : 3] OF LIST [2 : 2] OF REAL -- EXPLICIT


  SUB- ENTITY(9)	pyramid_volume
    ATTR:  position,	TYPE: axis2_placement_3d -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  xlength,	TYPE: positive_length_measure -- EXPLICIT

    ATTR:  ylength,	TYPE: positive_length_measure -- EXPLICIT

    ATTR:  height,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(10)	spherical_volume
    ATTR:  position,	TYPE: axis2_placement_3d -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  radius,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(11)	cylindrical_volume
    ATTR:  position,	TYPE: axis2_placement_3d -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  radius,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  height,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(12)	block_volume
    ATTR:  position,	TYPE: axis2_placement_3d -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  x,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  y,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  z,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(13)	b_spline_volume_with_knots
    ATTR:  u_multiplicities,	TYPE: LIST [2 : ?] OF INTEGER -- EXPLICIT

    ATTR:  v_multiplicities,	TYPE: LIST [2 : ?] OF INTEGER -- EXPLICIT

    ATTR:  w_multiplicities,	TYPE: LIST [2 : ?] OF INTEGER -- EXPLICIT

    ATTR:  u_knots,	TYPE: LIST [2 : ?] OF parameter_value -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  v_knots,	TYPE: LIST [2 : ?] OF parameter_value -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  w_knots,	TYPE: LIST [2 : ?] OF parameter_value -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  knot_u_upper,	TYPE: INTEGER -- DERIVED
      := SIZEOF( u_knots )

    ATTR:  knot_v_upper,	TYPE: INTEGER -- DERIVED
      := SIZEOF( v_knots )

    ATTR:  knot_w_upper,	TYPE: INTEGER -- DERIVED
      := SIZEOF( w_knots )


  SUB- ENTITY(14)	rational_b_spline_volume
    ATTR:  weights_data,	TYPE: LIST [2 : ?] OF LIST [2 : ?] OF LIST [2 : ?] OF REAL -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  weights,	TYPE: ARRAY [0 : u_upper] OF ARRAY [0 : v_upper] OF ARRAY [0 : w_upper] OF REAL -- DERIVED
      := make_array_of_array_of_array( weights_data, 0, u_upper, 0, v_upper, 0, w_upper )


  SUB- ENTITY(15)	quasi_uniform_volume
    (no local attributes)

  SUB- ENTITY(16)	uniform_volume
    (no local attributes)

  SUB- ENTITY(17)	bezier_volume
    (no local attributes)

  SUB- ENTITY(18)	b_spline_volume
    ATTR:  u_degree,	TYPE: INTEGER -- EXPLICIT

    ATTR:  v_degree,	TYPE: INTEGER -- EXPLICIT

    ATTR:  w_degree,	TYPE: INTEGER -- EXPLICIT

    ATTR:  control_points_list,	TYPE: LIST [2 : ?] OF LIST [2 : ?] OF LIST [2 : ?] OF cartesian_point -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  u_upper,	TYPE: INTEGER -- DERIVED
      := SIZEOF( control_points_list ) - 1

    ATTR:  v_upper,	TYPE: INTEGER -- DERIVED
      := SIZEOF( control_points_list[1] ) - 1

    ATTR:  w_upper,	TYPE: INTEGER -- DERIVED
      := SIZEOF( control_points_list[1][1] ) - 1

    ATTR:  control_points,	TYPE: ARRAY [0 : u_upper] OF ARRAY [0 : v_upper] OF ARRAY [0 : w_upper] OF cartesian_point -- DERIVED
      := make_array_of_array_of_array( control_points_list, 0, u_upper, 0, v_upper, 0, w_upper )


  SUB- ENTITY(19)	eccentric_conical_volume
    ATTR:  position,	TYPE: axis2_placement_3d -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  semi_axis_1,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  semi_axis_2,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  height,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  x_offset,	TYPE: length_measure -- EXPLICIT

    ATTR:  y_offset,	TYPE: length_measure -- EXPLICIT

    ATTR:  ratio,	TYPE: REAL -- EXPLICIT


  SUB- ENTITY(20)	ellipsoid_volume
    ATTR:  position,	TYPE: axis2_placement_3d -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  semi_axis_1,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  semi_axis_2,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  semi_axis_3,	TYPE: positive_length_measure -- EXPLICIT


  SUB- ENTITY(21)	tetrahedron_volume
    ATTR:  point_1,	TYPE: cartesian_point -- EXPLICIT

    ATTR:  point_2,	TYPE: cartesian_point -- EXPLICIT

    ATTR:  point_3,	TYPE: cartesian_point -- EXPLICIT

    ATTR:  point_4,	TYPE: cartesian_point -- EXPLICIT


*/


//MARK: - Partial Entity
  public final class _volume : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eVOLUME.self
    }

    //ATTRIBUTES
    // (no local attributes)

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: eVOLUME?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.GROUP_REF(eGEOMETRIC_REPRESENTATION_ITEM.self)
      let _TEMP2 = _TEMP1?.DIM
      let _TEMP3 = _TEMP2 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(3))
      return _TEMP3
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init() {
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 0
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      self.init( )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY volume
    SUPERTYPE OF ( 
        ONEOF ( 
            block_volume, 
            wedge_volume, 
            spherical_volume, 
            cylindrical_volume, 
            eccentric_conical_volume, 
            toroidal_volume, 
            pyramid_volume, 
            b_spline_volume, 
            ellipsoid_volume, 
            tetrahedron_volume, 
            hexahedron_volume, 
            locally_refined_spline_volume ) )
    SUBTYPE OF ( geometric_representation_item );
    WHERE
      wr1: ( SELF\geometric_representation_item.dim = 3 );
  END_ENTITY; -- volume (line:33807 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eVOLUME : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _volume.self
    }
    public let partialEntity: _volume

    //MARK: SUPERTYPES
    public let super_eREPRESENTATION_ITEM: eREPRESENTATION_ITEM 	// [1]
    public let super_eGEOMETRIC_REPRESENTATION_ITEM: eGEOMETRIC_REPRESENTATION_ITEM 	// [2]
    public var super_eVOLUME: eVOLUME { return self } 	// [3]

    //MARK: SUBTYPES
    public var sub_eHEXAHEDRON_VOLUME: eHEXAHEDRON_VOLUME? {	// [4]
      return self.complexEntity.entityReference(eHEXAHEDRON_VOLUME.self)
    }

    public var sub_eWEDGE_VOLUME: eWEDGE_VOLUME? {	// [5]
      return self.complexEntity.entityReference(eWEDGE_VOLUME.self)
    }

    public var sub_eTOROIDAL_VOLUME: eTOROIDAL_VOLUME? {	// [6]
      return self.complexEntity.entityReference(eTOROIDAL_VOLUME.self)
    }

    public var sub_eRATIONAL_LOCALLY_REFINED_SPLINE_VOLUME: eRATIONAL_LOCALLY_REFINED_SPLINE_VOLUME? {	// [7]
      return self.complexEntity.entityReference(eRATIONAL_LOCALLY_REFINED_SPLINE_VOLUME.self)
    }

    public var sub_eLOCALLY_REFINED_SPLINE_VOLUME: eLOCALLY_REFINED_SPLINE_VOLUME? {	// [8]
      return self.complexEntity.entityReference(eLOCALLY_REFINED_SPLINE_VOLUME.self)
    }

    public var sub_ePYRAMID_VOLUME: ePYRAMID_VOLUME? {	// [9]
      return self.complexEntity.entityReference(ePYRAMID_VOLUME.self)
    }

    public var sub_eSPHERICAL_VOLUME: eSPHERICAL_VOLUME? {	// [10]
      return self.complexEntity.entityReference(eSPHERICAL_VOLUME.self)
    }

    public var sub_eCYLINDRICAL_VOLUME: eCYLINDRICAL_VOLUME? {	// [11]
      return self.complexEntity.entityReference(eCYLINDRICAL_VOLUME.self)
    }

    public var sub_eBLOCK_VOLUME: eBLOCK_VOLUME? {	// [12]
      return self.complexEntity.entityReference(eBLOCK_VOLUME.self)
    }

    public var sub_eB_SPLINE_VOLUME_WITH_KNOTS: eB_SPLINE_VOLUME_WITH_KNOTS? {	// [13]
      return self.complexEntity.entityReference(eB_SPLINE_VOLUME_WITH_KNOTS.self)
    }

    public var sub_eRATIONAL_B_SPLINE_VOLUME: eRATIONAL_B_SPLINE_VOLUME? {	// [14]
      return self.complexEntity.entityReference(eRATIONAL_B_SPLINE_VOLUME.self)
    }

    public var sub_eQUASI_UNIFORM_VOLUME: eQUASI_UNIFORM_VOLUME? {	// [15]
      return self.complexEntity.entityReference(eQUASI_UNIFORM_VOLUME.self)
    }

    public var sub_eUNIFORM_VOLUME: eUNIFORM_VOLUME? {	// [16]
      return self.complexEntity.entityReference(eUNIFORM_VOLUME.self)
    }

    public var sub_eBEZIER_VOLUME: eBEZIER_VOLUME? {	// [17]
      return self.complexEntity.entityReference(eBEZIER_VOLUME.self)
    }

    public var sub_eB_SPLINE_VOLUME: eB_SPLINE_VOLUME? {	// [18]
      return self.complexEntity.entityReference(eB_SPLINE_VOLUME.self)
    }

    public var sub_eECCENTRIC_CONICAL_VOLUME: eECCENTRIC_CONICAL_VOLUME? {	// [19]
      return self.complexEntity.entityReference(eECCENTRIC_CONICAL_VOLUME.self)
    }

    public var sub_eELLIPSOID_VOLUME: eELLIPSOID_VOLUME? {	// [20]
      return self.complexEntity.entityReference(eELLIPSOID_VOLUME.self)
    }

    public var sub_eTETRAHEDRON_VOLUME: eTETRAHEDRON_VOLUME? {	// [21]
      return self.complexEntity.entityReference(eTETRAHEDRON_VOLUME.self)
    }


    //MARK: ATTRIBUTES
    // WEIGHTS_DATA: (2 AMBIGUOUS REFs)

    // CONTROL_POINTS_LIST: (2 AMBIGUOUS REFs)

    // X: (2 AMBIGUOUS REFs)

    // Y: (2 AMBIGUOUS REFs)

    // Z: (2 AMBIGUOUS REFs)

    // W_KNOTS: (2 AMBIGUOUS REFs)

    // RADIUS: (2 AMBIGUOUS REFs)

    // POSITION: (8 AMBIGUOUS REFs)

    // U_KNOTS: (2 AMBIGUOUS REFs)

    // V_KNOTS: (2 AMBIGUOUS REFs)

    // SEMI_AXIS_1: (2 AMBIGUOUS REFs)

    // SEMI_AXIS_2: (2 AMBIGUOUS REFs)

    // HEIGHT: (3 AMBIGUOUS REFs)

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eB_SPLINE_VOLUME_WITH_KNOTS`` )
    public var KNOT_V_UPPER: SDAI.INTEGER?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"KNOT_V_UPPER") {
          return cached.value as! SDAI.INTEGER? 
        }
        guard let origin = sub_eB_SPLINE_VOLUME_WITH_KNOTS else { return nil }
        let value = SDAI.INTEGER(origin.partialEntity._knot_v_upper__getter(SELF: origin))
        updateCache(derivedAttributeName:"KNOT_V_UPPER", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eTOROIDAL_VOLUME`` )
    public var MAJOR_RADIUS: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eTOROIDAL_VOLUME?.partialEntity._major_radius
      }
      set(newValue) {
        guard let partial = sub_eTOROIDAL_VOLUME?.super_eTOROIDAL_VOLUME.partialEntity else { return }
        partial._major_radius = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eWEDGE_VOLUME`` )
    public var LTX: tLENGTH_MEASURE?  {
      get {
        return sub_eWEDGE_VOLUME?.partialEntity._ltx
      }
      set(newValue) {
        guard let partial = sub_eWEDGE_VOLUME?.super_eWEDGE_VOLUME.partialEntity else { return }
        partial._ltx = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eLOCALLY_REFINED_SPLINE_VOLUME`` )
    public var U_B_SPLINES: (SDAI.LIST<eLOCAL_B_SPLINE>/*[8:nil]*/ )?  {
      get {
        return sub_eLOCALLY_REFINED_SPLINE_VOLUME?.partialEntity._u_b_splines
      }
      set(newValue) {
        guard let partial = sub_eLOCALLY_REFINED_SPLINE_VOLUME?.super_eLOCALLY_REFINED_SPLINE_VOLUME
          .partialEntity else { return }
        partial._u_b_splines = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eB_SPLINE_VOLUME_WITH_KNOTS`` )
    public var U_MULTIPLICITIES: (SDAI.LIST<SDAI.INTEGER>/*[2:nil]*/ )?  {
      get {
        return sub_eB_SPLINE_VOLUME_WITH_KNOTS?.partialEntity._u_multiplicities
      }
      set(newValue) {
        guard let partial = sub_eB_SPLINE_VOLUME_WITH_KNOTS?.super_eB_SPLINE_VOLUME_WITH_KNOTS.partialEntity
          else { return }
        partial._u_multiplicities = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eLOCALLY_REFINED_SPLINE_VOLUME`` )
    public var LINEARLY_INDEPENDENT: nLINEARLY_INDEPENDENT_ENUM?  {
      get {
        return sub_eLOCALLY_REFINED_SPLINE_VOLUME?.partialEntity._linearly_independent
      }
      set(newValue) {
        guard let partial = sub_eLOCALLY_REFINED_SPLINE_VOLUME?.super_eLOCALLY_REFINED_SPLINE_VOLUME
          .partialEntity else { return }
        partial._linearly_independent = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eECCENTRIC_CONICAL_VOLUME`` )
    public var X_OFFSET: tLENGTH_MEASURE?  {
      get {
        return sub_eECCENTRIC_CONICAL_VOLUME?.partialEntity._x_offset
      }
      set(newValue) {
        guard let partial = sub_eECCENTRIC_CONICAL_VOLUME?.super_eECCENTRIC_CONICAL_VOLUME.partialEntity
          else { return }
        partial._x_offset = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eB_SPLINE_VOLUME`` )
    public var V_DEGREE: SDAI.INTEGER?  {
      get {
        return sub_eB_SPLINE_VOLUME?.partialEntity._v_degree
      }
      set(newValue) {
        guard let partial = sub_eB_SPLINE_VOLUME?.super_eB_SPLINE_VOLUME.partialEntity else { return }
        partial._v_degree = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eLOCALLY_REFINED_SPLINE_VOLUME`` )
    public var LOCALLY_REFINED_SPLINE_TYPE: nLOCALLY_REFINED_SPLINE_TYPE_ENUM?  {
      get {
        return sub_eLOCALLY_REFINED_SPLINE_VOLUME?.partialEntity._locally_refined_spline_type
      }
      set(newValue) {
        guard let partial = sub_eLOCALLY_REFINED_SPLINE_VOLUME?.super_eLOCALLY_REFINED_SPLINE_VOLUME
          .partialEntity else { return }
        partial._locally_refined_spline_type = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eB_SPLINE_VOLUME_WITH_KNOTS`` )
    public var V_MULTIPLICITIES: (SDAI.LIST<SDAI.INTEGER>/*[2:nil]*/ )?  {
      get {
        return sub_eB_SPLINE_VOLUME_WITH_KNOTS?.partialEntity._v_multiplicities
      }
      set(newValue) {
        guard let partial = sub_eB_SPLINE_VOLUME_WITH_KNOTS?.super_eB_SPLINE_VOLUME_WITH_KNOTS.partialEntity
          else { return }
        partial._v_multiplicities = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eTOROIDAL_VOLUME`` )
    public var MINOR_RADIUS: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eTOROIDAL_VOLUME?.partialEntity._minor_radius
      }
      set(newValue) {
        guard let partial = sub_eTOROIDAL_VOLUME?.super_eTOROIDAL_VOLUME.partialEntity else { return }
        partial._minor_radius = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eB_SPLINE_VOLUME`` )
    public var V_UPPER: SDAI.INTEGER?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"V_UPPER") {
          return cached.value as! SDAI.INTEGER? 
        }
        guard let origin = sub_eB_SPLINE_VOLUME else { return nil }
        let value = SDAI.INTEGER(origin.partialEntity._v_upper__getter(SELF: origin))
        updateCache(derivedAttributeName:"V_UPPER", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eLOCALLY_REFINED_SPLINE_VOLUME`` )
    public var SCALING_FACTORS: (SDAI.LIST<SDAI.REAL>/*[8:nil]*/ )?  {
      get {
        return sub_eLOCALLY_REFINED_SPLINE_VOLUME?.partialEntity._scaling_factors
      }
      set(newValue) {
        guard let partial = sub_eLOCALLY_REFINED_SPLINE_VOLUME?.super_eLOCALLY_REFINED_SPLINE_VOLUME
          .partialEntity else { return }
        partial._scaling_factors = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eECCENTRIC_CONICAL_VOLUME`` )
    public var RATIO: SDAI.REAL?  {
      get {
        return sub_eECCENTRIC_CONICAL_VOLUME?.partialEntity._ratio
      }
      set(newValue) {
        guard let partial = sub_eECCENTRIC_CONICAL_VOLUME?.super_eECCENTRIC_CONICAL_VOLUME.partialEntity
          else { return }
        partial._ratio = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eB_SPLINE_VOLUME`` )
    public var W_UPPER: SDAI.INTEGER?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"W_UPPER") {
          return cached.value as! SDAI.INTEGER? 
        }
        guard let origin = sub_eB_SPLINE_VOLUME else { return nil }
        let value = SDAI.INTEGER(origin.partialEntity._w_upper__getter(SELF: origin))
        updateCache(derivedAttributeName:"W_UPPER", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eHEXAHEDRON_VOLUME`` )
    public var POINTS: (SDAI.LIST<eCARTESIAN_POINT>/*[8:8]*/ )?  {
      get {
        return sub_eHEXAHEDRON_VOLUME?.partialEntity._points
      }
      set(newValue) {
        guard let partial = sub_eHEXAHEDRON_VOLUME?.super_eHEXAHEDRON_VOLUME.partialEntity else { return }
        partial._points = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eELLIPSOID_VOLUME`` )
    public var SEMI_AXIS_3: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eELLIPSOID_VOLUME?.partialEntity._semi_axis_3
      }
      set(newValue) {
        guard let partial = sub_eELLIPSOID_VOLUME?.super_eELLIPSOID_VOLUME.partialEntity else { return }
        partial._semi_axis_3 = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eLOCALLY_REFINED_SPLINE_VOLUME`` )
    public var W_B_SPLINES: (SDAI.LIST<eLOCAL_B_SPLINE>/*[8:nil]*/ )?  {
      get {
        return sub_eLOCALLY_REFINED_SPLINE_VOLUME?.partialEntity._w_b_splines
      }
      set(newValue) {
        guard let partial = sub_eLOCALLY_REFINED_SPLINE_VOLUME?.super_eLOCALLY_REFINED_SPLINE_VOLUME
          .partialEntity else { return }
        partial._w_b_splines = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eB_SPLINE_VOLUME`` )
    public var W_DEGREE: SDAI.INTEGER?  {
      get {
        return sub_eB_SPLINE_VOLUME?.partialEntity._w_degree
      }
      set(newValue) {
        guard let partial = sub_eB_SPLINE_VOLUME?.super_eB_SPLINE_VOLUME.partialEntity else { return }
        partial._w_degree = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eB_SPLINE_VOLUME`` )
    public var CONTROL_POINTS: (SDAI.ARRAY<SDAI.ARRAY<SDAI.ARRAY<eCARTESIAN_POINT>/*[0:W_UPPER]*/ >/*[0:
      V_UPPER]*/ >/*[0:U_UPPER]*/ )?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"CONTROL_POINTS") {
          return cached.value as! (SDAI.ARRAY<SDAI.ARRAY<SDAI.ARRAY<eCARTESIAN_POINT>/*[0:W_UPPER]*/ >/*[0:
            V_UPPER]*/ >/*[0:U_UPPER]*/ )? 
        }
        guard let origin = sub_eB_SPLINE_VOLUME else { return nil }
        let value = SDAI.ARRAY<SDAI.ARRAY<SDAI.ARRAY<eCARTESIAN_POINT>>>(
          origin.partialEntity._control_points__getter(SELF: origin))
        updateCache(derivedAttributeName:"CONTROL_POINTS", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eECCENTRIC_CONICAL_VOLUME`` )
    public var Y_OFFSET: tLENGTH_MEASURE?  {
      get {
        return sub_eECCENTRIC_CONICAL_VOLUME?.partialEntity._y_offset
      }
      set(newValue) {
        guard let partial = sub_eECCENTRIC_CONICAL_VOLUME?.super_eECCENTRIC_CONICAL_VOLUME.partialEntity
          else { return }
        partial._y_offset = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eB_SPLINE_VOLUME`` )
    public var U_DEGREE: SDAI.INTEGER?  {
      get {
        return sub_eB_SPLINE_VOLUME?.partialEntity._u_degree
      }
      set(newValue) {
        guard let partial = sub_eB_SPLINE_VOLUME?.super_eB_SPLINE_VOLUME.partialEntity else { return }
        partial._u_degree = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eB_SPLINE_VOLUME_WITH_KNOTS`` )
    public var W_MULTIPLICITIES: (SDAI.LIST<SDAI.INTEGER>/*[2:nil]*/ )?  {
      get {
        return sub_eB_SPLINE_VOLUME_WITH_KNOTS?.partialEntity._w_multiplicities
      }
      set(newValue) {
        guard let partial = sub_eB_SPLINE_VOLUME_WITH_KNOTS?.super_eB_SPLINE_VOLUME_WITH_KNOTS.partialEntity
          else { return }
        partial._w_multiplicities = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eB_SPLINE_VOLUME_WITH_KNOTS`` )
    public var KNOT_U_UPPER: SDAI.INTEGER?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"KNOT_U_UPPER") {
          return cached.value as! SDAI.INTEGER? 
        }
        guard let origin = sub_eB_SPLINE_VOLUME_WITH_KNOTS else { return nil }
        let value = SDAI.INTEGER(origin.partialEntity._knot_u_upper__getter(SELF: origin))
        updateCache(derivedAttributeName:"KNOT_U_UPPER", value:value)
        return value
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eB_SPLINE_VOLUME`` )
    public var U_UPPER: SDAI.INTEGER?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"U_UPPER") {
          return cached.value as! SDAI.INTEGER? 
        }
        guard let origin = sub_eB_SPLINE_VOLUME else { return nil }
        let value = SDAI.INTEGER(origin.partialEntity._u_upper__getter(SELF: origin))
        updateCache(derivedAttributeName:"U_UPPER", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eLOCALLY_REFINED_SPLINE_VOLUME`` )
    public var V_B_SPLINES: (SDAI.LIST<eLOCAL_B_SPLINE>/*[8:nil]*/ )?  {
      get {
        return sub_eLOCALLY_REFINED_SPLINE_VOLUME?.partialEntity._v_b_splines
      }
      set(newValue) {
        guard let partial = sub_eLOCALLY_REFINED_SPLINE_VOLUME?.super_eLOCALLY_REFINED_SPLINE_VOLUME
          .partialEntity else { return }
        partial._v_b_splines = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eLOCALLY_REFINED_SPLINE_VOLUME`` )
    public var DOMAIN: (SDAI.LIST<SDAI.LIST<SDAI.REAL>/*[2:2]*/ >/*[3:3]*/ )?  {
      get {
        return sub_eLOCALLY_REFINED_SPLINE_VOLUME?.partialEntity._domain
      }
      set(newValue) {
        guard let partial = sub_eLOCALLY_REFINED_SPLINE_VOLUME?.super_eLOCALLY_REFINED_SPLINE_VOLUME
          .partialEntity else { return }
        partial._domain = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eTETRAHEDRON_VOLUME`` )
    public var POINT_3: eCARTESIAN_POINT?  {
      get {
        return sub_eTETRAHEDRON_VOLUME?.partialEntity._point_3
      }
      set(newValue) {
        guard let partial = sub_eTETRAHEDRON_VOLUME?.super_eTETRAHEDRON_VOLUME.partialEntity else { return }
        partial._point_3 = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eTETRAHEDRON_VOLUME`` )
    public var POINT_2: eCARTESIAN_POINT?  {
      get {
        return sub_eTETRAHEDRON_VOLUME?.partialEntity._point_2
      }
      set(newValue) {
        guard let partial = sub_eTETRAHEDRON_VOLUME?.super_eTETRAHEDRON_VOLUME.partialEntity else { return }
        partial._point_2 = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eTETRAHEDRON_VOLUME`` )
    public var POINT_1: eCARTESIAN_POINT?  {
      get {
        return sub_eTETRAHEDRON_VOLUME?.partialEntity._point_1
      }
      set(newValue) {
        guard let partial = sub_eTETRAHEDRON_VOLUME?.super_eTETRAHEDRON_VOLUME.partialEntity else { return }
        partial._point_1 = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eREPRESENTATION_ITEM`` )
    public var NAME: tLABEL {
      get {
        return SDAI.UNWRAP( super_eREPRESENTATION_ITEM.partialEntity._name )
      }
      set(newValue) {
        let partial = super_eREPRESENTATION_ITEM.partialEntity
        partial._name = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePYRAMID_VOLUME`` )
    public var YLENGTH: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_ePYRAMID_VOLUME?.partialEntity._ylength
      }
      set(newValue) {
        guard let partial = sub_ePYRAMID_VOLUME?.super_ePYRAMID_VOLUME.partialEntity else { return }
        partial._ylength = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eB_SPLINE_VOLUME_WITH_KNOTS`` )
    public var KNOT_W_UPPER: SDAI.INTEGER?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"KNOT_W_UPPER") {
          return cached.value as! SDAI.INTEGER? 
        }
        guard let origin = sub_eB_SPLINE_VOLUME_WITH_KNOTS else { return nil }
        let value = SDAI.INTEGER(origin.partialEntity._knot_w_upper__getter(SELF: origin))
        updateCache(derivedAttributeName:"KNOT_W_UPPER", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePYRAMID_VOLUME`` )
    public var XLENGTH: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_ePYRAMID_VOLUME?.partialEntity._xlength
      }
      set(newValue) {
        guard let partial = sub_ePYRAMID_VOLUME?.super_ePYRAMID_VOLUME.partialEntity else { return }
        partial._xlength = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eTETRAHEDRON_VOLUME`` )
    public var POINT_4: eCARTESIAN_POINT?  {
      get {
        return sub_eTETRAHEDRON_VOLUME?.partialEntity._point_4
      }
      set(newValue) {
        guard let partial = sub_eTETRAHEDRON_VOLUME?.super_eTETRAHEDRON_VOLUME.partialEntity else { return }
        partial._point_4 = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eRATIONAL_B_SPLINE_VOLUME`` )
    public var WEIGHTS: (SDAI.ARRAY<SDAI.ARRAY<SDAI.ARRAY<SDAI.REAL>/*[0:W_UPPER]*/ >/*[0:V_UPPER]*/ >/*[0:
      U_UPPER]*/ )?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"WEIGHTS") {
          return cached.value as! (SDAI.ARRAY<SDAI.ARRAY<SDAI.ARRAY<SDAI.REAL>/*[0:W_UPPER]*/ >/*[0:V_UPPER]*/ >
            /*[0:U_UPPER]*/ )? 
        }
        guard let origin = sub_eRATIONAL_B_SPLINE_VOLUME else { return nil }
        let value = SDAI.ARRAY<SDAI.ARRAY<SDAI.ARRAY<SDAI.REAL>>>(
          origin.partialEntity._weights__getter(SELF: origin))
        updateCache(derivedAttributeName:"WEIGHTS", value:value)
        return value
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUPER( ``eGEOMETRIC_REPRESENTATION_ITEM`` )
    public var DIM: tDIMENSION_COUNT?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"DIM") {
          return cached.value as! tDIMENSION_COUNT? 
        }
        let origin = super_eGEOMETRIC_REPRESENTATION_ITEM
        let value = tDIMENSION_COUNT(origin.partialEntity._dim__getter(SELF: origin))
        updateCache(derivedAttributeName:"DIM", value:value)
        return value
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_volume.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eREPRESENTATION_ITEM.self) else { return nil }
      self.super_eREPRESENTATION_ITEM = super1

      guard let super2 = complexEntity?.entityReference(eGEOMETRIC_REPRESENTATION_ITEM.self) else { return nil }
      self.super_eGEOMETRIC_REPRESENTATION_ITEM = super2

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _volume.WHERE_wr1(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "VOLUME", type: self, explicitAttributeCount: 0)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eREPRESENTATION_ITEM.self)
      entityDef.add(supertype: eGEOMETRIC_REPRESENTATION_ITEM.self)
      entityDef.add(supertype: eVOLUME.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "KNOT_V_UPPER", keyPath: \eVOLUME.KNOT_V_UPPER, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "MAJOR_RADIUS", keyPath: \eVOLUME.MAJOR_RADIUS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "LTX", keyPath: \eVOLUME.LTX, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "U_B_SPLINES", keyPath: \eVOLUME.U_B_SPLINES, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "U_MULTIPLICITIES", keyPath: \eVOLUME.U_MULTIPLICITIES, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "LINEARLY_INDEPENDENT", keyPath: \eVOLUME.LINEARLY_INDEPENDENT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "X_OFFSET", keyPath: \eVOLUME.X_OFFSET, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "V_DEGREE", keyPath: \eVOLUME.V_DEGREE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "LOCALLY_REFINED_SPLINE_TYPE", keyPath: \eVOLUME.LOCALLY_REFINED_SPLINE_TYPE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "V_MULTIPLICITIES", keyPath: \eVOLUME.V_MULTIPLICITIES, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "MINOR_RADIUS", keyPath: \eVOLUME.MINOR_RADIUS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "V_UPPER", keyPath: \eVOLUME.V_UPPER, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "SCALING_FACTORS", keyPath: \eVOLUME.SCALING_FACTORS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "RATIO", keyPath: \eVOLUME.RATIO, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "W_UPPER", keyPath: \eVOLUME.W_UPPER, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "POINTS", keyPath: \eVOLUME.POINTS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "SEMI_AXIS_3", keyPath: \eVOLUME.SEMI_AXIS_3, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "W_B_SPLINES", keyPath: \eVOLUME.W_B_SPLINES, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "W_DEGREE", keyPath: \eVOLUME.W_DEGREE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "CONTROL_POINTS", keyPath: \eVOLUME.CONTROL_POINTS, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "Y_OFFSET", keyPath: \eVOLUME.Y_OFFSET, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "U_DEGREE", keyPath: \eVOLUME.U_DEGREE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "W_MULTIPLICITIES", keyPath: \eVOLUME.W_MULTIPLICITIES, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "KNOT_U_UPPER", keyPath: \eVOLUME.KNOT_U_UPPER, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "U_UPPER", keyPath: \eVOLUME.U_UPPER, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "V_B_SPLINES", keyPath: \eVOLUME.V_B_SPLINES, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "DOMAIN", keyPath: \eVOLUME.DOMAIN, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "POINT_3", keyPath: \eVOLUME.POINT_3, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "POINT_2", keyPath: \eVOLUME.POINT_2, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "POINT_1", keyPath: \eVOLUME.POINT_1, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "NAME", keyPath: \eVOLUME.NAME, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "YLENGTH", keyPath: \eVOLUME.YLENGTH, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "KNOT_W_UPPER", keyPath: \eVOLUME.KNOT_W_UPPER, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "XLENGTH", keyPath: \eVOLUME.XLENGTH, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "POINT_4", keyPath: \eVOLUME.POINT_4, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "WEIGHTS", keyPath: \eVOLUME.WEIGHTS, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "DIM", keyPath: \eVOLUME.DIM, 
        kind: .derived, source: .superEntity, mayYieldEntityReference: false)

      return entityDef
    }

  }
}
