/* file: variational_current_representation_relationship.swift 	 generated: Mon Jan  3 16:32:52 2022 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.1, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY variational_current_representation_relationship
    SUBTYPE OF ( representation_relationship );
      SELF\representation_relationship.rep_1 : variational_representation; (* observed by
          variational_representation.cm_link
          *)
      current_result                  : representation;
    UNIQUE
      ur1 : current_result;
    WHERE
      wr1: ( QUERY ( q <* SELF\representation_relationship.rep_1.items | ( NOT ( 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.VARIATIONAL_REPRESENTATION_ITEM'  IN TYPEOF( 
               q ) ) ) ) = SELF\representation_relationship.rep_2.items );
      wr2: ( SELF\representation_relationship.rep_1.context_of_items :=: SELF\representation_relationship.
               rep_2.context_of_items );
      wr3: ( SIZEOF( QUERY ( q <* SELF\representation_relationship.rep_2.items | ( 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.VARIATIONAL_REPRESENTATION_ITEM'  IN TYPEOF( 
               q ) ) ) ) = 0 );
      wr4: ( ( TYPEOF( SELF\representation_relationship.rep_1 ) - TYPEOF( SELF\representation_relationship.
               rep_2 ) ) = [ 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.VARIATIONAL_REPRESENTATION'] );
      wr5: ( current_result :=: SELF\representation_relationship.rep_2 );
  END_ENTITY; -- variational_current_representation_relationship (line:33444 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	representation_relationship
    ATTR:  name,	TYPE: label -- EXPLICIT

    ATTR:  description,	TYPE: OPTIONAL text -- EXPLICIT

    ATTR:  rep_1,	TYPE: representation_or_representation_reference -- EXPLICIT
      -- possibly overriden by
          ENTITY: mechanical_design_and_draughting_relationship,	TYPE: mechanical_design_and_draughting_relationship_select
          ENTITY: constructive_geometry_representation_relationship,	TYPE: constructive_geometry_representation_or_shape_representation
          ENTITY: kinematic_link_representation_association,	TYPE: kinematic_link_representation	(OBSERVED)
          ENTITY: binary_assembly_constraint,	TYPE: representative_shape_representation
          ENTITY: shape_data_quality_inspected_shape_and_result_relationship,	TYPE: shape_representation
          ENTITY: item_link_motion_relationship,	TYPE: shape_representation
          ENTITY: explicit_procedural_representation_relationship,	TYPE: procedural_representation
          ENTITY: link_motion_relationship,	TYPE: link_or_shape_representation
          ENTITY: pair_representation_relationship,	TYPE: kinematic_link_representation
      *** ENTITY: variational_current_representation_relationship,	TYPE: variational_representation	(OBSERVED)
          ENTITY: ply_orientation_angle,	TYPE: reinforcement_orientation_basis
          ENTITY: constrained_kinematic_motion_representation,	TYPE: representative_shape_representation
          ENTITY: free_kinematic_motion_representation,	TYPE: representative_shape_representation
          ENTITY: explicit_procedural_shape_representation_relationship,	TYPE: procedural_shape_representation

    ATTR:  rep_2,	TYPE: representation_or_representation_reference -- EXPLICIT
      -- possibly overriden by
          ENTITY: mechanical_design_and_draughting_relationship,	TYPE: mechanical_design_and_draughting_relationship_select
          ENTITY: constructive_geometry_representation_relationship,	TYPE: constructive_geometry_representation
          ENTITY: kinematic_link_representation_association,	TYPE: shape_representation
          ENTITY: binary_assembly_constraint,	TYPE: representative_shape_representation
          ENTITY: shape_data_quality_inspected_shape_and_result_relationship,	TYPE: shape_data_quality_inspection_result_representation
          ENTITY: link_motion_relationship,	TYPE: link_motion_representation_along_path
          ENTITY: pair_representation_relationship,	TYPE: kinematic_link_representation
          ENTITY: ply_orientation_angle,	TYPE: ply_angle_representation
          ENTITY: constrained_kinematic_motion_representation,	TYPE: representative_shape_representation
          ENTITY: free_kinematic_motion_representation,	TYPE: representative_shape_representation
          ENTITY: explicit_procedural_shape_representation_relationship,	TYPE: shape_representation


  ENTITY(SELF)	variational_current_representation_relationship
    REDCR: rep_1,	TYPE: variational_representation -- EXPLICIT
      -- observed by
        ENTITY(1): variational_representation,	ATTR: cm_link,	TYPE: 
          variational_current_representation_relationship
      -- OVERRIDING ENTITY: representation_relationship

    ATTR:  current_result,	TYPE: representation -- EXPLICIT


*/


//MARK: - Partial Entity
  public final class _variational_current_representation_relationship : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eVARIATIONAL_CURRENT_REPRESENTATION_RELATIONSHIP.self
    }

    //ATTRIBUTES
    /* override var _rep_1: eVARIATIONAL_REPRESENTATION	//EXPLICIT REDEFINITION(eREPRESENTATION_RELATIONSHIP) //OBSERVED */

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _current_result: eREPRESENTATION // PLAIN EXPLICIT ATTRIBUTE

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._current_result.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._current_result.value.isValueEqualOptionally(to: rhs._current_result.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._current_result.value.isValueEqualOptionally(to: rhs._current_result.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: eVARIATIONAL_CURRENT_REPRESENTATION_RELATIONSHIP?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.GROUP_REF(eREPRESENTATION_RELATIONSHIP.self)
      let _TEMP2 = _TEMP1?.REP_1
      let _TEMP3 = _TEMP2?.ITEMS
      let _TEMP4 = _TEMP3?.QUERY{ Q in 

          let _TEMP1 = SDAI.TYPEOF(Q, IS: eVARIATIONAL_REPRESENTATION_ITEM.self)
          let _TEMP2 =  !_TEMP1
          return _TEMP2 }
      let _TEMP5 = SELF.GROUP_REF(eREPRESENTATION_RELATIONSHIP.self)
      let _TEMP6 = _TEMP5?.REP_2
      let _TEMP7 = _TEMP6?.ITEMS
      let _TEMP8 = _TEMP4 .==. _TEMP7
      return _TEMP8
    }
    public static func WHERE_wr2(SELF: eVARIATIONAL_CURRENT_REPRESENTATION_RELATIONSHIP?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.GROUP_REF(eREPRESENTATION_RELATIONSHIP.self)
      let _TEMP2 = _TEMP1?.REP_1
      let _TEMP3 = /*runtime*/_TEMP2?.CONTEXT_OF_ITEMS
      let _TEMP4 = SELF.GROUP_REF(eREPRESENTATION_RELATIONSHIP.self)
      let _TEMP5 = _TEMP4?.REP_2
      let _TEMP6 = /*runtime*/_TEMP5?.CONTEXT_OF_ITEMS
      let _TEMP7 = /*runtime*/_TEMP3 .===. /*runtime*/_TEMP6
      return _TEMP7
    }
    public static func WHERE_wr3(SELF: eVARIATIONAL_CURRENT_REPRESENTATION_RELATIONSHIP?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.GROUP_REF(eREPRESENTATION_RELATIONSHIP.self)
      let _TEMP2 = _TEMP1?.REP_2
      let _TEMP3 = _TEMP2?.ITEMS
      let _TEMP4 = _TEMP3?.QUERY{ Q in 

          let _TEMP1 = SDAI.TYPEOF(Q, IS: eVARIATIONAL_REPRESENTATION_ITEM.self)
          return _TEMP1 }
      let _TEMP5 = SDAI.SIZEOF(_TEMP4)
      let _TEMP6 = _TEMP5 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      return _TEMP6
    }
    public static func WHERE_wr4(SELF: eVARIATIONAL_CURRENT_REPRESENTATION_RELATIONSHIP?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.GROUP_REF(eREPRESENTATION_RELATIONSHIP.self)
      let _TEMP2 = _TEMP1?.REP_1
      let _TEMP3 = SDAI.TYPEOF(_TEMP2)
      let _TEMP4 = SELF.GROUP_REF(eREPRESENTATION_RELATIONSHIP.self)
      let _TEMP5 = _TEMP4?.REP_2
      let _TEMP6 = SDAI.TYPEOF(_TEMP5)
      let _TEMP7 = SDAI.FORCE_OPTIONAL(_TEMP3) - SDAI.FORCE_OPTIONAL(_TEMP6)
      let _TEMP8 = ([SDAI.AIE(SDAI.STRING(
        "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.VARIATIONAL_REPRESENTATION"))] 
        as [SDAI.AggregationInitializerElement<SDAI.STRING>])
      let _TEMP9 = _TEMP7 .==. SDAI.FORCE_OPTIONAL(_TEMP8)
      return _TEMP9
    }
    public static func WHERE_wr5(SELF: eVARIATIONAL_CURRENT_REPRESENTATION_RELATIONSHIP?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.GROUP_REF(eREPRESENTATION_RELATIONSHIP.self)
      let _TEMP2 = _TEMP1?.REP_2
      let _TEMP3 = SDAI.FORCE_OPTIONAL(SELF.CURRENT_RESULT) .===. _TEMP2
      return _TEMP3
    }

    //UNIQUENESS RULES
    public static func UNIQUE_ur1(SELF: SDAI.EntityReference) -> AnyHashable? {
      guard let SELF = SELF as? eVARIATIONAL_CURRENT_REPRESENTATION_RELATIONSHIP else { return nil }
      //SIMPLE UNIQUE RULE

      let attr = SELF.CURRENT_RESULT
      return AnyHashable( attr )
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(CURRENT_RESULT: eREPRESENTATION) {
      self._current_result = CURRENT_RESULT
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 1
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverRequiredParameter(as: eREPRESENTATION.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( CURRENT_RESULT: p0 )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY variational_current_representation_relationship
    SUBTYPE OF ( representation_relationship );
      SELF\representation_relationship.rep_1 : variational_representation; (* observed by
          variational_representation.cm_link
          *)
      current_result                  : representation;
    UNIQUE
      ur1 : current_result;
    WHERE
      wr1: ( QUERY ( q <* SELF\representation_relationship.rep_1.items | ( NOT ( 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.VARIATIONAL_REPRESENTATION_ITEM'  IN TYPEOF( 
               q ) ) ) ) = SELF\representation_relationship.rep_2.items );
      wr2: ( SELF\representation_relationship.rep_1.context_of_items :=: SELF\representation_relationship.
               rep_2.context_of_items );
      wr3: ( SIZEOF( QUERY ( q <* SELF\representation_relationship.rep_2.items | ( 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.VARIATIONAL_REPRESENTATION_ITEM'  IN TYPEOF( 
               q ) ) ) ) = 0 );
      wr4: ( ( TYPEOF( SELF\representation_relationship.rep_1 ) - TYPEOF( SELF\representation_relationship.
               rep_2 ) ) = [ 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.VARIATIONAL_REPRESENTATION'] );
      wr5: ( current_result :=: SELF\representation_relationship.rep_2 );
  END_ENTITY; -- variational_current_representation_relationship (line:33444 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eVARIATIONAL_CURRENT_REPRESENTATION_RELATIONSHIP : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _variational_current_representation_relationship.self
    }
    public let partialEntity: _variational_current_representation_relationship

    //MARK: SUPERTYPES
    public let super_eREPRESENTATION_RELATIONSHIP: eREPRESENTATION_RELATIONSHIP 	// [1]
    public var super_eVARIATIONAL_CURRENT_REPRESENTATION_RELATIONSHIP: eVARIATIONAL_CURRENT_REPRESENTATION_RELATIONSHIP { return self } 	// [2]

    //MARK: SUBTYPES

    //MARK: ATTRIBUTES
    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eVARIATIONAL_CURRENT_REPRESENTATION_RELATIONSHIP`` )
    public var CURRENT_RESULT: eREPRESENTATION {
      get {
        return SDAI.UNWRAP( self.partialEntity._current_result )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._current_result = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eREPRESENTATION_RELATIONSHIP`` )
    public var DESCRIPTION: tTEXT?  {
      get {
        return super_eREPRESENTATION_RELATIONSHIP.partialEntity._description
      }
      set(newValue) {
        let partial = super_eREPRESENTATION_RELATIONSHIP.partialEntity
        partial._description = newValue
      }
    }

    /// __EXPLICIT REDEF(OBSERVED)__ attribute
    /// - origin: SELF( ``eVARIATIONAL_CURRENT_REPRESENTATION_RELATIONSHIP`` )
    public var REP_1: eVARIATIONAL_REPRESENTATION {
      get {
        return SDAI.UNWRAP( eVARIATIONAL_REPRESENTATION( super_eREPRESENTATION_RELATIONSHIP.partialEntity
          ._rep_1 ) )
      }
      set(newValue) {
        let partial = super_eREPRESENTATION_RELATIONSHIP.partialEntity
        partial._rep_1 = SDAI.UNWRAP(
          sREPRESENTATION_OR_REPRESENTATION_REFERENCE(newValue))
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eREPRESENTATION_RELATIONSHIP`` )
    public var REP_2: sREPRESENTATION_OR_REPRESENTATION_REFERENCE {
      get {
        return SDAI.UNWRAP( super_eREPRESENTATION_RELATIONSHIP.partialEntity._rep_2 )
      }
      set(newValue) {
        let partial = super_eREPRESENTATION_RELATIONSHIP.partialEntity
        partial._rep_2 = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eREPRESENTATION_RELATIONSHIP`` )
    public var NAME: tLABEL {
      get {
        return SDAI.UNWRAP( super_eREPRESENTATION_RELATIONSHIP.partialEntity._name )
      }
      set(newValue) {
        let partial = super_eREPRESENTATION_RELATIONSHIP.partialEntity
        partial._name = SDAI.UNWRAP(newValue)
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_variational_current_representation_relationship.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eREPRESENTATION_RELATIONSHIP.self) else { return nil }
      self.super_eREPRESENTATION_RELATIONSHIP = super1

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _variational_current_representation_relationship.WHERE_wr1(SELF: instance)
      result[prefix2 + " .WHERE_wr2"] = _variational_current_representation_relationship.WHERE_wr2(SELF: instance)
      result[prefix2 + " .WHERE_wr3"] = _variational_current_representation_relationship.WHERE_wr3(SELF: instance)
      result[prefix2 + " .WHERE_wr4"] = _variational_current_representation_relationship.WHERE_wr4(SELF: instance)
      result[prefix2 + " .WHERE_wr5"] = _variational_current_representation_relationship.WHERE_wr5(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "VARIATIONAL_CURRENT_REPRESENTATION_RELATIONSHIP", type: self, explicitAttributeCount: 1)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eREPRESENTATION_RELATIONSHIP.self)
      entityDef.add(supertype: eVARIATIONAL_CURRENT_REPRESENTATION_RELATIONSHIP.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "CURRENT_RESULT", keyPath: \eVARIATIONAL_CURRENT_REPRESENTATION_RELATIONSHIP.CURRENT_RESULT, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "DESCRIPTION", keyPath: \eVARIATIONAL_CURRENT_REPRESENTATION_RELATIONSHIP.DESCRIPTION, 
        kind: .explicitOptional, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "REP_1", keyPath: \eVARIATIONAL_CURRENT_REPRESENTATION_RELATIONSHIP.REP_1, 
        kind: .explicitRedeclaring, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "REP_2", keyPath: \eVARIATIONAL_CURRENT_REPRESENTATION_RELATIONSHIP.REP_2, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "NAME", keyPath: \eVARIATIONAL_CURRENT_REPRESENTATION_RELATIONSHIP.NAME, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)

      //MARK: UNIQUENESS RULE REGISTRATIONS
      entityDef.addUniqunessRule(label:"UNIQUE_ur1", rule: _variational_current_representation_relationship.UNIQUE_ur1)

      return entityDef
    }

  }
}
