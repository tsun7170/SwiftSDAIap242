/* file: variational_parameter.swift 	 generated: Sat Aug 14 13:46:02 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY variational_parameter
    ABSTRACT SUPERTYPE OF ( 
        ONEOF ( 
            bound_variational_parameter, 
            unbound_variational_parameter ) )
    SUBTYPE OF ( variational_representation_item, maths_variable );
      parameter_description    : OPTIONAL text;
      parameter_current_value  : maths_value;
    WHERE
      wr1: member_of( parameter_current_value, SELF\maths_variable.values_space );
      wr2: ( SELF\maths_variable.name = SELF\representation_item.name );
  END_ENTITY; -- variational_parameter (line:33452 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	representation_item
    ATTR:  name,	TYPE: label -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUPER- ENTITY(2)	variational_representation_item
    (no local attributes)

  SUPER- ENTITY(3)	generic_expression
    (no local attributes)

  SUPER- ENTITY(4)	simple_generic_expression
    (no local attributes)

  SUPER- ENTITY(5)	generic_variable
    ATTR:  interpretation,	TYPE: environment -- INVERSE
      FOR syntactic_representation;


  SUPER- ENTITY(6)	maths_variable
    ATTR:  values_space,	TYPE: maths_space -- EXPLICIT

    ATTR:  name,	TYPE: label -- EXPLICIT	(AMBIGUOUS/MASKED)


  ENTITY(SELF)	variational_parameter
    ATTR:  parameter_description,	TYPE: OPTIONAL text -- EXPLICIT

    ATTR:  parameter_current_value,	TYPE: maths_value -- EXPLICIT (DYNAMIC)
      -- possibly overriden by
          ENTITY: bound_variational_parameter,	TYPE: maths_value	(as DERIVED)


  SUB- ENTITY(8)	bound_variational_parameter
    REDCR: parameter_current_value,	TYPE: maths_value -- DERIVED (DYNAMIC)
      := ?
      -- OVERRIDING ENTITY: variational_parameter


  SUB- ENTITY(9)	unbound_variational_parameter
    (no local attributes)

*/


//MARK: - Partial Entity
  public final class _variational_parameter : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eVARIATIONAL_PARAMETER.self
    }

    //ATTRIBUTES
    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _parameter_description: tTEXT?  // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    /// - see the corresponding attribute accesser in the entity reference definition for the attribute value dynamic lookup logic
    public internal(set) var _parameter_current_value: sMATHS_VALUE?  // PLAIN EXPLICIT ATTRIBUTE

    internal static func _parameter_current_value__provider(complex: SDAI.ComplexEntity) -> eVARIATIONAL_PARAMETER__PARAMETER_CURRENT_VALUE__provider? {
      let resolved = complex.resolvePartialEntityInstance(from: [_bound_variational_parameter.typeIdentity])
      return resolved as? eVARIATIONAL_PARAMETER__PARAMETER_CURRENT_VALUE__provider
    }

    //PARTIAL COMPLEX ENTITY SUPPORT
    final public override class func fixupPartialComplexEntityAttributes(partialComplex: SDAI.ComplexEntity, baseComplex: SDAI.ComplexEntity) {
      guard let pe = partialComplex.partialEntityInstance(_variational_parameter.self) else { return }

      if pe._parameter_current_value == nil, 
        self._parameter_current_value__provider(complex: partialComplex) == nil, 
        let base__parameter_current_value__provider = self._parameter_current_value__provider(complex: baseComplex) {
        pe._parameter_current_value = base__parameter_current_value__provider._parameter_current_value__getter(complex: baseComplex)
      }
    }
    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._parameter_description?.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._parameter_current_value?.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._parameter_description?.value.isValueEqualOptionally(to: rhs._parameter_description?.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._parameter_current_value?.value.isValueEqualOptionally(to: rhs._parameter_current_value?.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._parameter_description?.value.isValueEqualOptionally(to: rhs._parameter_description?.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._parameter_current_value?.value.isValueEqualOptionally(to: rhs._parameter_current_value?.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: eVARIATIONAL_PARAMETER?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.GROUP_REF(eMATHS_VARIABLE.self)
      let _TEMP2 = _TEMP1?.VALUES_SPACE
      let _TEMP3 = MEMBER_OF(VAL: SELF.PARAMETER_CURRENT_VALUE, 
                             SPC: _TEMP2)
      return _TEMP3
    }
    public static func WHERE_wr2(SELF: eVARIATIONAL_PARAMETER?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.GROUP_REF(eMATHS_VARIABLE.self)
      let _TEMP2 = _TEMP1?.NAME
      let _TEMP3 = SELF.GROUP_REF(eREPRESENTATION_ITEM.self)
      let _TEMP4 = _TEMP3?.NAME
      let _TEMP5 = _TEMP2 .==. _TEMP4
      return _TEMP5
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(PARAMETER_DESCRIPTION: tTEXT? , PARAMETER_CURRENT_VALUE: sMATHS_VALUE? ) {
      self._parameter_description = PARAMETER_DESCRIPTION
      self._parameter_current_value = PARAMETER_CURRENT_VALUE
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 2
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverOptionalParameter(as: tTEXT.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p1) = exchangeStructure.recoverOmittableParameter(as: sMATHS_VALUE.self, from: parameters[1])
      else { exchangeStructure.add(errorContext: "while recovering parameter #1 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( PARAMETER_DESCRIPTION: p0, PARAMETER_CURRENT_VALUE: p1 )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY variational_parameter
    ABSTRACT SUPERTYPE OF ( 
        ONEOF ( 
            bound_variational_parameter, 
            unbound_variational_parameter ) )
    SUBTYPE OF ( variational_representation_item, maths_variable );
      parameter_description    : OPTIONAL text;
      parameter_current_value  : maths_value;
    WHERE
      wr1: member_of( parameter_current_value, SELF\maths_variable.values_space );
      wr2: ( SELF\maths_variable.name = SELF\representation_item.name );
  END_ENTITY; -- variational_parameter (line:33452 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eVARIATIONAL_PARAMETER : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _variational_parameter.self
    }
    public let partialEntity: _variational_parameter

    //MARK: SUPERTYPES
    public let super_eREPRESENTATION_ITEM: eREPRESENTATION_ITEM 	// [1]
    public let super_eVARIATIONAL_REPRESENTATION_ITEM: eVARIATIONAL_REPRESENTATION_ITEM 	// [2]
    public let super_eGENERIC_EXPRESSION: eGENERIC_EXPRESSION 	// [3]
    public let super_eSIMPLE_GENERIC_EXPRESSION: eSIMPLE_GENERIC_EXPRESSION 	// [4]
    public let super_eGENERIC_VARIABLE: eGENERIC_VARIABLE 	// [5]
    public let super_eMATHS_VARIABLE: eMATHS_VARIABLE 	// [6]
    public var super_eVARIATIONAL_PARAMETER: eVARIATIONAL_PARAMETER { return self } 	// [7]

    //MARK: SUBTYPES
    public var sub_eBOUND_VARIATIONAL_PARAMETER: eBOUND_VARIATIONAL_PARAMETER? {	// [8]
      return self.complexEntity.entityReference(eBOUND_VARIATIONAL_PARAMETER.self)
    }

    public var sub_eUNBOUND_VARIATIONAL_PARAMETER: eUNBOUND_VARIATIONAL_PARAMETER? {	// [9]
      return self.complexEntity.entityReference(eUNBOUND_VARIATIONAL_PARAMETER.self)
    }


    //MARK: ATTRIBUTES
    // NAME: (2 AMBIGUOUS REFs)

    /// __INVERSE__ attribute
    /// observing eENVIRONMENT .SYNTACTIC_REPRESENTATION
    /// - origin: SUPER( ``eGENERIC_VARIABLE`` )
    public var INTERPRETATION: eENVIRONMENT?  {
      get {
        return super_eGENERIC_VARIABLE.partialEntity._interpretation
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eVARIATIONAL_PARAMETER`` )
    public var PARAMETER_DESCRIPTION: tTEXT?  {
      get {
        return self.partialEntity._parameter_description
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._parameter_description = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eMATHS_VARIABLE`` )
    public var VALUES_SPACE: eMATHS_SPACE {
      get {
        return SDAI.UNWRAP( super_eMATHS_VARIABLE.partialEntity._values_space )
      }
      set(newValue) {
        let partial = super_eMATHS_VARIABLE.partialEntity
        partial._values_space = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT(DYNAMIC)__ attribute
    /// - origin: SELF( ``eVARIATIONAL_PARAMETER`` )
    public var PARAMETER_CURRENT_VALUE: sMATHS_VALUE {
      get {
        if let resolved = _variational_parameter._parameter_current_value__provider(complex: self.complexEntity) {
          let value = resolved._parameter_current_value__getter(complex: self.complexEntity)
          return value
        }
        else {
          return SDAI.UNWRAP( self.partialEntity._parameter_current_value )
        }
      }
      set(newValue) {
        if let _ = _variational_parameter._parameter_current_value__provider(complex: self.complexEntity) { return }

        let partial = self.partialEntity
        partial._parameter_current_value = SDAI.UNWRAP(newValue)
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_variational_parameter.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eREPRESENTATION_ITEM.self) else { return nil }
      self.super_eREPRESENTATION_ITEM = super1

      guard let super2 = complexEntity?.entityReference(eVARIATIONAL_REPRESENTATION_ITEM.self) else { return nil }
      self.super_eVARIATIONAL_REPRESENTATION_ITEM = super2

      guard let super3 = complexEntity?.entityReference(eGENERIC_EXPRESSION.self) else { return nil }
      self.super_eGENERIC_EXPRESSION = super3

      guard let super4 = complexEntity?.entityReference(eSIMPLE_GENERIC_EXPRESSION.self) else { return nil }
      self.super_eSIMPLE_GENERIC_EXPRESSION = super4

      guard let super5 = complexEntity?.entityReference(eGENERIC_VARIABLE.self) else { return nil }
      self.super_eGENERIC_VARIABLE = super5

      guard let super6 = complexEntity?.entityReference(eMATHS_VARIABLE.self) else { return nil }
      self.super_eMATHS_VARIABLE = super6

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _variational_parameter.WHERE_wr1(SELF: instance)
      result[prefix2 + " .WHERE_wr2"] = _variational_parameter.WHERE_wr2(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "VARIATIONAL_PARAMETER", type: self, explicitAttributeCount: 2)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eREPRESENTATION_ITEM.self)
      entityDef.add(supertype: eVARIATIONAL_REPRESENTATION_ITEM.self)
      entityDef.add(supertype: eGENERIC_EXPRESSION.self)
      entityDef.add(supertype: eSIMPLE_GENERIC_EXPRESSION.self)
      entityDef.add(supertype: eGENERIC_VARIABLE.self)
      entityDef.add(supertype: eMATHS_VARIABLE.self)
      entityDef.add(supertype: eVARIATIONAL_PARAMETER.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "INTERPRETATION", keyPath: \eVARIATIONAL_PARAMETER.INTERPRETATION, 
        kind: .inverse, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "PARAMETER_DESCRIPTION", keyPath: \eVARIATIONAL_PARAMETER.PARAMETER_DESCRIPTION, 
        kind: .explicitOptional, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "VALUES_SPACE", keyPath: \eVARIATIONAL_PARAMETER.VALUES_SPACE, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "PARAMETER_CURRENT_VALUE", keyPath: \eVARIATIONAL_PARAMETER.PARAMETER_CURRENT_VALUE, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)

      return entityDef
    }

  }
}

//MARK: - Entity Dynamic Attribute Protocols
internal protocol eVARIATIONAL_PARAMETER__PARAMETER_CURRENT_VALUE__provider {
  func _parameter_current_value__getter(complex: SDAI.ComplexEntity) -> 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.sMATHS_VALUE
}
