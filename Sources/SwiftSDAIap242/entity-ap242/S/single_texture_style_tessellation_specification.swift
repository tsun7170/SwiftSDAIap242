/* file: single_texture_style_tessellation_specification.swift 	 generated: Mon Jan  3 16:32:52 2022 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.1, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY single_texture_style_tessellation_specification
    SUBTYPE OF ( texture_style_tessellation_specification );
      texture_image        : label;
      texture_coordinates  : LIST [1 : ?] OF LIST [2 : 2] OF non_negative_real;
      texture_format       : texture_file_type;
      repeating_pattern    : BOOLEAN;
  END_ENTITY; -- single_texture_style_tessellation_specification (line:29494 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	founded_item
    ATTR:  users,	TYPE: SET [0 : ?] OF founded_item_select -- DERIVED
      := using_items( SELF, [] )


  SUPER- ENTITY(2)	texture_style_specification
    (no local attributes)

  SUPER- ENTITY(3)	texture_style_tessellation_specification
    (no local attributes)

  ENTITY(SELF)	single_texture_style_tessellation_specification
    ATTR:  texture_image,	TYPE: label -- EXPLICIT

    ATTR:  texture_coordinates,	TYPE: LIST [1 : ?] OF LIST [2 : 2] OF non_negative_real -- EXPLICIT

    ATTR:  texture_format,	TYPE: texture_file_type -- EXPLICIT

    ATTR:  repeating_pattern,	TYPE: BOOLEAN -- EXPLICIT


*/


//MARK: - Partial Entity
  public final class _single_texture_style_tessellation_specification : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eSINGLE_TEXTURE_STYLE_TESSELLATION_SPECIFICATION.self
    }

    //ATTRIBUTES
    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _texture_image: tLABEL // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _texture_coordinates: SDAI.LIST<SDAI.LIST<tNON_NEGATIVE_REAL>/*[2:2]*/ >/*[1:nil]*/  // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _texture_format: nTEXTURE_FILE_TYPE // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _repeating_pattern: SDAI.BOOLEAN // PLAIN EXPLICIT ATTRIBUTE

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._texture_image.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._texture_coordinates.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._texture_format.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._repeating_pattern.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._texture_image.value.isValueEqualOptionally(to: rhs._texture_image.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._texture_coordinates.value.isValueEqualOptionally(to: rhs._texture_coordinates.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._texture_format.value.isValueEqualOptionally(to: rhs._texture_format.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._repeating_pattern.value.isValueEqualOptionally(to: rhs._repeating_pattern.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._texture_image.value.isValueEqualOptionally(to: rhs._texture_image.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._texture_coordinates.value.isValueEqualOptionally(to: rhs._texture_coordinates.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._texture_format.value.isValueEqualOptionally(to: rhs._texture_format.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._repeating_pattern.value.isValueEqualOptionally(to: rhs._repeating_pattern.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(TEXTURE_IMAGE: tLABEL, TEXTURE_COORDINATES: SDAI.LIST<SDAI.LIST<tNON_NEGATIVE_REAL>/*[2:2]*/ >
                /*[1:nil]*/ , TEXTURE_FORMAT: nTEXTURE_FILE_TYPE, REPEATING_PATTERN: SDAI.BOOLEAN) {
      self._texture_image = TEXTURE_IMAGE
      self._texture_coordinates = TEXTURE_COORDINATES
      self._texture_format = TEXTURE_FORMAT
      self._repeating_pattern = REPEATING_PATTERN
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 4
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverRequiredParameter(as: tLABEL.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p1) = exchangeStructure.recoverRequiredParameter(as: SDAI.LIST<SDAI.LIST<
        tNON_NEGATIVE_REAL>>.self, from: parameters[1])
      else { exchangeStructure.add(errorContext: "while recovering parameter #1 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p2) = exchangeStructure.recoverRequiredParameter(as: nTEXTURE_FILE_TYPE.self, from: parameters[2])
      else { exchangeStructure.add(errorContext: "while recovering parameter #2 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p3) = exchangeStructure.recoverRequiredParameter(as: SDAI.BOOLEAN.self, from: parameters[3])
      else { exchangeStructure.add(errorContext: "while recovering parameter #3 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( TEXTURE_IMAGE: p0, TEXTURE_COORDINATES: p1, TEXTURE_FORMAT: p2, REPEATING_PATTERN: p3 )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY single_texture_style_tessellation_specification
    SUBTYPE OF ( texture_style_tessellation_specification );
      texture_image        : label;
      texture_coordinates  : LIST [1 : ?] OF LIST [2 : 2] OF non_negative_real;
      texture_format       : texture_file_type;
      repeating_pattern    : BOOLEAN;
  END_ENTITY; -- single_texture_style_tessellation_specification (line:29494 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eSINGLE_TEXTURE_STYLE_TESSELLATION_SPECIFICATION : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _single_texture_style_tessellation_specification.self
    }
    public let partialEntity: _single_texture_style_tessellation_specification

    //MARK: SUPERTYPES
    public let super_eFOUNDED_ITEM: eFOUNDED_ITEM 	// [1]
    public let super_eTEXTURE_STYLE_SPECIFICATION: eTEXTURE_STYLE_SPECIFICATION 	// [2]
    public let super_eTEXTURE_STYLE_TESSELLATION_SPECIFICATION: eTEXTURE_STYLE_TESSELLATION_SPECIFICATION 	// [3]
    public var super_eSINGLE_TEXTURE_STYLE_TESSELLATION_SPECIFICATION: eSINGLE_TEXTURE_STYLE_TESSELLATION_SPECIFICATION { return self } 	// [4]

    //MARK: SUBTYPES

    //MARK: ATTRIBUTES
    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eSINGLE_TEXTURE_STYLE_TESSELLATION_SPECIFICATION`` )
    public var TEXTURE_COORDINATES: SDAI.LIST<SDAI.LIST<tNON_NEGATIVE_REAL>/*[2:2]*/ >/*[1:nil]*/  {
      get {
        return SDAI.UNWRAP( self.partialEntity._texture_coordinates )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._texture_coordinates = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUPER( ``eFOUNDED_ITEM`` )
    public var USERS: (SDAI.SET<sFOUNDED_ITEM_SELECT>/*[0:nil]*/ )?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"USERS") {
          return cached.value as! (SDAI.SET<sFOUNDED_ITEM_SELECT>/*[0:nil]*/ )? 
        }
        let origin = super_eFOUNDED_ITEM
        let value = SDAI.SET<sFOUNDED_ITEM_SELECT>(origin.partialEntity._users__getter(SELF: origin))
        updateCache(derivedAttributeName:"USERS", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eSINGLE_TEXTURE_STYLE_TESSELLATION_SPECIFICATION`` )
    public var TEXTURE_FORMAT: nTEXTURE_FILE_TYPE {
      get {
        return SDAI.UNWRAP( self.partialEntity._texture_format )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._texture_format = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eSINGLE_TEXTURE_STYLE_TESSELLATION_SPECIFICATION`` )
    public var REPEATING_PATTERN: SDAI.BOOLEAN {
      get {
        return SDAI.UNWRAP( self.partialEntity._repeating_pattern )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._repeating_pattern = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eSINGLE_TEXTURE_STYLE_TESSELLATION_SPECIFICATION`` )
    public var TEXTURE_IMAGE: tLABEL {
      get {
        return SDAI.UNWRAP( self.partialEntity._texture_image )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._texture_image = SDAI.UNWRAP(newValue)
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_single_texture_style_tessellation_specification.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eFOUNDED_ITEM.self) else { return nil }
      self.super_eFOUNDED_ITEM = super1

      guard let super2 = complexEntity?.entityReference(eTEXTURE_STYLE_SPECIFICATION.self) else { return nil }
      self.super_eTEXTURE_STYLE_SPECIFICATION = super2

      guard let super3 = complexEntity?.entityReference(eTEXTURE_STYLE_TESSELLATION_SPECIFICATION.self) else { return nil }
      self.super_eTEXTURE_STYLE_TESSELLATION_SPECIFICATION = super3

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "SINGLE_TEXTURE_STYLE_TESSELLATION_SPECIFICATION", type: self, explicitAttributeCount: 4)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eFOUNDED_ITEM.self)
      entityDef.add(supertype: eTEXTURE_STYLE_SPECIFICATION.self)
      entityDef.add(supertype: eTEXTURE_STYLE_TESSELLATION_SPECIFICATION.self)
      entityDef.add(supertype: eSINGLE_TEXTURE_STYLE_TESSELLATION_SPECIFICATION.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "TEXTURE_COORDINATES", keyPath: \eSINGLE_TEXTURE_STYLE_TESSELLATION_SPECIFICATION.TEXTURE_COORDINATES, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "USERS", keyPath: \eSINGLE_TEXTURE_STYLE_TESSELLATION_SPECIFICATION.USERS, 
        kind: .derived, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "TEXTURE_FORMAT", keyPath: \eSINGLE_TEXTURE_STYLE_TESSELLATION_SPECIFICATION.TEXTURE_FORMAT, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "REPEATING_PATTERN", keyPath: \eSINGLE_TEXTURE_STYLE_TESSELLATION_SPECIFICATION.REPEATING_PATTERN, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "TEXTURE_IMAGE", keyPath: \eSINGLE_TEXTURE_STYLE_TESSELLATION_SPECIFICATION.TEXTURE_IMAGE, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: false)

      return entityDef
    }

  }
}
