/* file: surface.swift 	 generated: Tue Nov 16 05:35:44 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY surface
    SUPERTYPE OF ( 
        ONEOF ( 
            elementary_surface, 
            swept_surface, 
            bounded_surface, 
            offset_surface, 
            surface_replica ) )
    SUBTYPE OF ( geometric_representation_item );
  END_ENTITY; -- surface (line:31090 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	representation_item
    ATTR:  name,	TYPE: label -- EXPLICIT


  SUPER- ENTITY(2)	geometric_representation_item
    ATTR:  dim,	TYPE: dimension_count -- DERIVED
      := dimension_of( SELF )


  ENTITY(SELF)	surface
    (no local attributes)

  SUB- ENTITY(4)	oriented_surface
    ATTR:  orientation,	TYPE: BOOLEAN -- EXPLICIT


  SUB- ENTITY(5)	surface_replica
    ATTR:  parent_surface,	TYPE: surface -- EXPLICIT

    ATTR:  transformation,	TYPE: cartesian_transformation_operator_3d -- EXPLICIT


  SUB- ENTITY(6)	rectangular_composite_surface
    ATTR:  segments,	TYPE: LIST [1 : ?] OF LIST [1 : ?] OF surface_patch -- EXPLICIT
      -- observed by
        ENTITY(1): surface_patch,	ATTR: using_surfaces,	TYPE: BAG [1 : ?] OF rectangular_composite_surface

    ATTR:  n_u,	TYPE: INTEGER -- DERIVED
      := SIZEOF( segments )

    ATTR:  n_v,	TYPE: INTEGER -- DERIVED
      := SIZEOF( segments[1] )


  SUB- ENTITY(7)	b_spline_surface_with_knots
    ATTR:  u_multiplicities,	TYPE: LIST [2 : ?] OF INTEGER -- EXPLICIT

    ATTR:  v_multiplicities,	TYPE: LIST [2 : ?] OF INTEGER -- EXPLICIT

    ATTR:  u_knots,	TYPE: LIST [2 : ?] OF parameter_value -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  v_knots,	TYPE: LIST [2 : ?] OF parameter_value -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  knot_spec,	TYPE: knot_type -- EXPLICIT

    ATTR:  knot_u_upper,	TYPE: INTEGER -- DERIVED
      := SIZEOF( u_knots )

    ATTR:  knot_v_upper,	TYPE: INTEGER -- DERIVED
      := SIZEOF( v_knots )


  SUB- ENTITY(8)	quasi_uniform_surface
    (no local attributes)

  SUB- ENTITY(9)	uniform_surface
    (no local attributes)

  SUB- ENTITY(10)	bezier_surface
    (no local attributes)

  SUB- ENTITY(11)	rational_b_spline_surface
    ATTR:  weights_data,	TYPE: LIST [2 : ?] OF LIST [2 : ?] OF REAL -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  weights,	TYPE: ARRAY [0 : u_upper] OF ARRAY [0 : v_upper] OF REAL -- DERIVED
      := make_array_of_array( weights_data, 0, u_upper, 0, v_upper )


  SUB- ENTITY(12)	b_spline_surface
    ATTR:  u_degree,	TYPE: INTEGER -- EXPLICIT

    ATTR:  v_degree,	TYPE: INTEGER -- EXPLICIT

    ATTR:  control_points_list,	TYPE: LIST [2 : ?] OF LIST [2 : ?] OF cartesian_point -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  surface_form,	TYPE: b_spline_surface_form -- EXPLICIT

    ATTR:  u_closed,	TYPE: LOGICAL -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  v_closed,	TYPE: LOGICAL -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  self_intersect,	TYPE: LOGICAL -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  u_upper,	TYPE: INTEGER -- DERIVED
      := SIZEOF( control_points_list ) - 1

    ATTR:  v_upper,	TYPE: INTEGER -- DERIVED
      := SIZEOF( control_points_list[1] ) - 1

    ATTR:  control_points,	TYPE: ARRAY [0 : u_upper] OF ARRAY [0 : v_upper] OF cartesian_point -- DERIVED
      := make_array_of_array( control_points_list, 0, u_upper, 0, v_upper )


  SUB- ENTITY(13)	rectangular_trimmed_surface
    ATTR:  basis_surface,	TYPE: surface -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  u1,	TYPE: parameter_value -- EXPLICIT

    ATTR:  u2,	TYPE: parameter_value -- EXPLICIT

    ATTR:  v1,	TYPE: parameter_value -- EXPLICIT

    ATTR:  v2,	TYPE: parameter_value -- EXPLICIT

    ATTR:  usense,	TYPE: BOOLEAN -- EXPLICIT

    ATTR:  vsense,	TYPE: BOOLEAN -- EXPLICIT


  SUB- ENTITY(14)	curve_bounded_surface
    ATTR:  basis_surface,	TYPE: surface -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  boundaries,	TYPE: SET [1 : ?] OF boundary_curve -- EXPLICIT

    ATTR:  implicit_outer,	TYPE: BOOLEAN -- EXPLICIT


  SUB- ENTITY(15)	rational_locally_refined_spline_surface
    ATTR:  weights_data,	TYPE: LIST [4 : ?] OF REAL -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(16)	locally_refined_spline_surface
    ATTR:  u_b_splines,	TYPE: LIST [4 : ?] OF local_b_spline -- EXPLICIT

    ATTR:  v_b_splines,	TYPE: LIST [4 : ?] OF local_b_spline -- EXPLICIT

    ATTR:  u_knots,	TYPE: spline_knot_values -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  v_knots,	TYPE: spline_knot_values -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  control_points_list,	TYPE: LIST [4 : ?] OF cartesian_point -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  scaling_factors,	TYPE: LIST [4 : ?] OF REAL -- EXPLICIT

    ATTR:  linearly_independent,	TYPE: linearly_independent_enum -- EXPLICIT

    ATTR:  locally_refined_spline_type,	TYPE: locally_refined_spline_type_enum -- EXPLICIT

    ATTR:  self_intersect,	TYPE: LOGICAL -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  u_closed,	TYPE: LOGICAL -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  v_closed,	TYPE: LOGICAL -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  domain,	TYPE: LIST [2 : 2] OF LIST [2 : 2] OF REAL -- EXPLICIT


  SUB- ENTITY(17)	bounded_surface
    (no local attributes)

  SUB- ENTITY(18)	degenerate_toroidal_surface
    ATTR:  select_outer,	TYPE: BOOLEAN -- EXPLICIT


  SUB- ENTITY(19)	toroidal_surface
    ATTR:  major_radius,	TYPE: positive_length_measure -- EXPLICIT

    ATTR:  minor_radius,	TYPE: positive_length_measure -- EXPLICIT


  SUB- ENTITY(20)	spherical_surface
    ATTR:  radius,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(21)	plane
    (no local attributes)

  SUB- ENTITY(22)	cylindrical_surface
    ATTR:  radius,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(23)	conical_surface
    ATTR:  radius,	TYPE: length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  semi_angle,	TYPE: plane_angle_measure -- EXPLICIT


  SUB- ENTITY(24)	dupin_cyclide_surface
    ATTR:  generalised_major_radius,	TYPE: positive_length_measure -- EXPLICIT

    ATTR:  generalised_minor_radius,	TYPE: positive_length_measure -- EXPLICIT

    ATTR:  skewness,	TYPE: length_measure -- EXPLICIT


  SUB- ENTITY(25)	elementary_surface
    ATTR:  position,	TYPE: axis2_placement_3d -- EXPLICIT


  SUB- ENTITY(26)	surface_of_revolution
    ATTR:  axis_position,	TYPE: axis1_placement -- EXPLICIT

    ATTR:  axis_line,	TYPE: line -- DERIVED
      := representation_item( '' ) || geometric_representation_item(  ) || curve(  ) || line( axis_position.
        location, representation_item( '' ) || geometric_representation_item(  ) || vector( axis_position.z, 
        1 ) )


  SUB- ENTITY(27)	surface_of_linear_extrusion
    ATTR:  extrusion_axis,	TYPE: vector -- EXPLICIT


  SUB- ENTITY(28)	surface_curve_swept_surface
    ATTR:  directrix,	TYPE: curve -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  reference_surface,	TYPE: surface -- EXPLICIT


  SUB- ENTITY(29)	fixed_reference_swept_surface
    ATTR:  directrix,	TYPE: curve -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  fixed_reference,	TYPE: direction -- EXPLICIT


  SUB- ENTITY(30)	swept_surface
    ATTR:  swept_curve,	TYPE: curve -- EXPLICIT


  SUB- ENTITY(31)	offset_surface
    ATTR:  basis_surface,	TYPE: surface -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  distance,	TYPE: length_measure -- EXPLICIT

    ATTR:  self_intersect,	TYPE: LOGICAL -- EXPLICIT	(AMBIGUOUS/MASKED)


*/


//MARK: - Partial Entity
  public final class _surface : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eSURFACE.self
    }

    //ATTRIBUTES
    // (no local attributes)

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      //SELECT data types (indirectly) referencing the current type as a member of the select list
      members.insert(SDAI.STRING(sFACE_OR_SURFACE.typeName)) // -> Self
      members.insert(SDAI.STRING(sGENERALIZED_SURFACE_SELECT.typeName)) // -> Self
      members.insert(SDAI.STRING(sTRIM_CONDITION_SELECT.typeName)) // -> sGENERALIZED_SURFACE_SELECT
      members.insert(SDAI.STRING(sEXTERNAL_IDENTIFICATION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sPCURVE_OR_SURFACE.typeName)) // -> Self
      members.insert(SDAI.STRING(sINSPECTED_ECDQ_ELEMENT_SELECT.typeName)) // -> Self
      members.insert(SDAI.STRING(sLOCATION_OF_EXTREME_VALUE_SELECT.typeName)) // -> sINSPECTED_ECDQ_ELEMENT_SELECT
      members.insert(SDAI.STRING(sGEOMETRIC_SET_SELECT.typeName)) // -> Self
      members.insert(SDAI.STRING(sKINEMATIC_LINK_REPRESENTATION_ITEMS.typeName)) // -> Self
      members.insert(SDAI.STRING(sGEOMETRIC_CONSTRAINT_ELEMENT.typeName)) // -> Self
      members.insert(SDAI.STRING(sINSPECTED_SHAPE_ELEMENT_SELECT.typeName)) // -> Self
      members.insert(SDAI.STRING(sCURVE_OR_SURFACE_CONSTRAINT_ELEMENT.typeName)) // -> Self
      members.insert(SDAI.STRING(sINSPECTED_ELEMENT_SELECT.typeName)) // -> Self
      members.insert(SDAI.STRING(sPOINT_CURVE_OR_SURFACE_CONSTRAINT_ELEMENT.typeName)) // -> Self
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init() {
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 0
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      self.init( )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY surface
    SUPERTYPE OF ( 
        ONEOF ( 
            elementary_surface, 
            swept_surface, 
            bounded_surface, 
            offset_surface, 
            surface_replica ) )
    SUBTYPE OF ( geometric_representation_item );
  END_ENTITY; -- surface (line:31090 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eSURFACE : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _surface.self
    }
    public let partialEntity: _surface

    //MARK: SUPERTYPES
    public let super_eREPRESENTATION_ITEM: eREPRESENTATION_ITEM 	// [1]
    public let super_eGEOMETRIC_REPRESENTATION_ITEM: eGEOMETRIC_REPRESENTATION_ITEM 	// [2]
    public var super_eSURFACE: eSURFACE { return self } 	// [3]

    //MARK: SUBTYPES
    public var sub_eORIENTED_SURFACE: eORIENTED_SURFACE? {	// [4]
      return self.complexEntity.entityReference(eORIENTED_SURFACE.self)
    }

    public var sub_eSURFACE_REPLICA: eSURFACE_REPLICA? {	// [5]
      return self.complexEntity.entityReference(eSURFACE_REPLICA.self)
    }

    public var sub_eRECTANGULAR_COMPOSITE_SURFACE: eRECTANGULAR_COMPOSITE_SURFACE? {	// [6]
      return self.complexEntity.entityReference(eRECTANGULAR_COMPOSITE_SURFACE.self)
    }

    public var sub_eB_SPLINE_SURFACE_WITH_KNOTS: eB_SPLINE_SURFACE_WITH_KNOTS? {	// [7]
      return self.complexEntity.entityReference(eB_SPLINE_SURFACE_WITH_KNOTS.self)
    }

    public var sub_eQUASI_UNIFORM_SURFACE: eQUASI_UNIFORM_SURFACE? {	// [8]
      return self.complexEntity.entityReference(eQUASI_UNIFORM_SURFACE.self)
    }

    public var sub_eUNIFORM_SURFACE: eUNIFORM_SURFACE? {	// [9]
      return self.complexEntity.entityReference(eUNIFORM_SURFACE.self)
    }

    public var sub_eBEZIER_SURFACE: eBEZIER_SURFACE? {	// [10]
      return self.complexEntity.entityReference(eBEZIER_SURFACE.self)
    }

    public var sub_eRATIONAL_B_SPLINE_SURFACE: eRATIONAL_B_SPLINE_SURFACE? {	// [11]
      return self.complexEntity.entityReference(eRATIONAL_B_SPLINE_SURFACE.self)
    }

    public var sub_eB_SPLINE_SURFACE: eB_SPLINE_SURFACE? {	// [12]
      return self.complexEntity.entityReference(eB_SPLINE_SURFACE.self)
    }

    public var sub_eRECTANGULAR_TRIMMED_SURFACE: eRECTANGULAR_TRIMMED_SURFACE? {	// [13]
      return self.complexEntity.entityReference(eRECTANGULAR_TRIMMED_SURFACE.self)
    }

    public var sub_eCURVE_BOUNDED_SURFACE: eCURVE_BOUNDED_SURFACE? {	// [14]
      return self.complexEntity.entityReference(eCURVE_BOUNDED_SURFACE.self)
    }

    public var sub_eRATIONAL_LOCALLY_REFINED_SPLINE_SURFACE: eRATIONAL_LOCALLY_REFINED_SPLINE_SURFACE? {	// [15]
      return self.complexEntity.entityReference(eRATIONAL_LOCALLY_REFINED_SPLINE_SURFACE.self)
    }

    public var sub_eLOCALLY_REFINED_SPLINE_SURFACE: eLOCALLY_REFINED_SPLINE_SURFACE? {	// [16]
      return self.complexEntity.entityReference(eLOCALLY_REFINED_SPLINE_SURFACE.self)
    }

    public var sub_eBOUNDED_SURFACE: eBOUNDED_SURFACE? {	// [17]
      return self.complexEntity.entityReference(eBOUNDED_SURFACE.self)
    }

    public var sub_eDEGENERATE_TOROIDAL_SURFACE: eDEGENERATE_TOROIDAL_SURFACE? {	// [18]
      return self.complexEntity.entityReference(eDEGENERATE_TOROIDAL_SURFACE.self)
    }

    public var sub_eTOROIDAL_SURFACE: eTOROIDAL_SURFACE? {	// [19]
      return self.complexEntity.entityReference(eTOROIDAL_SURFACE.self)
    }

    public var sub_eSPHERICAL_SURFACE: eSPHERICAL_SURFACE? {	// [20]
      return self.complexEntity.entityReference(eSPHERICAL_SURFACE.self)
    }

    public var sub_ePLANE: ePLANE? {	// [21]
      return self.complexEntity.entityReference(ePLANE.self)
    }

    public var sub_eCYLINDRICAL_SURFACE: eCYLINDRICAL_SURFACE? {	// [22]
      return self.complexEntity.entityReference(eCYLINDRICAL_SURFACE.self)
    }

    public var sub_eCONICAL_SURFACE: eCONICAL_SURFACE? {	// [23]
      return self.complexEntity.entityReference(eCONICAL_SURFACE.self)
    }

    public var sub_eDUPIN_CYCLIDE_SURFACE: eDUPIN_CYCLIDE_SURFACE? {	// [24]
      return self.complexEntity.entityReference(eDUPIN_CYCLIDE_SURFACE.self)
    }

    public var sub_eELEMENTARY_SURFACE: eELEMENTARY_SURFACE? {	// [25]
      return self.complexEntity.entityReference(eELEMENTARY_SURFACE.self)
    }

    public var sub_eSURFACE_OF_REVOLUTION: eSURFACE_OF_REVOLUTION? {	// [26]
      return self.complexEntity.entityReference(eSURFACE_OF_REVOLUTION.self)
    }

    public var sub_eSURFACE_OF_LINEAR_EXTRUSION: eSURFACE_OF_LINEAR_EXTRUSION? {	// [27]
      return self.complexEntity.entityReference(eSURFACE_OF_LINEAR_EXTRUSION.self)
    }

    public var sub_eSURFACE_CURVE_SWEPT_SURFACE: eSURFACE_CURVE_SWEPT_SURFACE? {	// [28]
      return self.complexEntity.entityReference(eSURFACE_CURVE_SWEPT_SURFACE.self)
    }

    public var sub_eFIXED_REFERENCE_SWEPT_SURFACE: eFIXED_REFERENCE_SWEPT_SURFACE? {	// [29]
      return self.complexEntity.entityReference(eFIXED_REFERENCE_SWEPT_SURFACE.self)
    }

    public var sub_eSWEPT_SURFACE: eSWEPT_SURFACE? {	// [30]
      return self.complexEntity.entityReference(eSWEPT_SURFACE.self)
    }

    public var sub_eOFFSET_SURFACE: eOFFSET_SURFACE? {	// [31]
      return self.complexEntity.entityReference(eOFFSET_SURFACE.self)
    }


    //MARK: ATTRIBUTES
    // WEIGHTS_DATA: (2 AMBIGUOUS REFs)

    // CONTROL_POINTS_LIST: (2 AMBIGUOUS REFs)

    // V_CLOSED: (2 AMBIGUOUS REFs)

    // RADIUS: (3 AMBIGUOUS REFs)

    // U_CLOSED: (2 AMBIGUOUS REFs)

    // U_KNOTS: (2 AMBIGUOUS REFs)

    // DIRECTRIX: (2 AMBIGUOUS REFs)

    // SELF_INTERSECT: (3 AMBIGUOUS REFs)

    // V_KNOTS: (2 AMBIGUOUS REFs)

    // BASIS_SURFACE: (3 AMBIGUOUS REFs)

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eB_SPLINE_SURFACE_WITH_KNOTS`` )
    public var KNOT_V_UPPER: SDAI.INTEGER?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"KNOT_V_UPPER") {
          return cached.value as! SDAI.INTEGER? 
        }
        guard let origin = sub_eB_SPLINE_SURFACE_WITH_KNOTS else { return nil }
        let value = SDAI.INTEGER(origin.partialEntity._knot_v_upper__getter(SELF: origin))
        updateCache(derivedAttributeName:"KNOT_V_UPPER", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eTOROIDAL_SURFACE`` )
    public var MAJOR_RADIUS: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eTOROIDAL_SURFACE?.partialEntity._major_radius
      }
      set(newValue) {
        guard let partial = sub_eTOROIDAL_SURFACE?.super_eTOROIDAL_SURFACE.partialEntity else { return }
        partial._major_radius = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eDUPIN_CYCLIDE_SURFACE`` )
    public var GENERALISED_MAJOR_RADIUS: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eDUPIN_CYCLIDE_SURFACE?.partialEntity._generalised_major_radius
      }
      set(newValue) {
        guard let partial = sub_eDUPIN_CYCLIDE_SURFACE?.super_eDUPIN_CYCLIDE_SURFACE.partialEntity
          else { return }
        partial._generalised_major_radius = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eLOCALLY_REFINED_SPLINE_SURFACE`` )
    public var U_B_SPLINES: (SDAI.LIST<eLOCAL_B_SPLINE>/*[4:nil]*/ )?  {
      get {
        return sub_eLOCALLY_REFINED_SPLINE_SURFACE?.partialEntity._u_b_splines
      }
      set(newValue) {
        guard let partial = sub_eLOCALLY_REFINED_SPLINE_SURFACE?.super_eLOCALLY_REFINED_SPLINE_SURFACE
          .partialEntity else { return }
        partial._u_b_splines = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eB_SPLINE_SURFACE_WITH_KNOTS`` )
    public var U_MULTIPLICITIES: (SDAI.LIST<SDAI.INTEGER>/*[2:nil]*/ )?  {
      get {
        return sub_eB_SPLINE_SURFACE_WITH_KNOTS?.partialEntity._u_multiplicities
      }
      set(newValue) {
        guard let partial = sub_eB_SPLINE_SURFACE_WITH_KNOTS?.super_eB_SPLINE_SURFACE_WITH_KNOTS
          .partialEntity else { return }
        partial._u_multiplicities = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eRECTANGULAR_TRIMMED_SURFACE`` )
    public var VSENSE: SDAI.BOOLEAN?  {
      get {
        return sub_eRECTANGULAR_TRIMMED_SURFACE?.partialEntity._vsense
      }
      set(newValue) {
        guard let partial = sub_eRECTANGULAR_TRIMMED_SURFACE?.super_eRECTANGULAR_TRIMMED_SURFACE
          .partialEntity else { return }
        partial._vsense = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSWEPT_SURFACE`` )
    public var SWEPT_CURVE: eCURVE?  {
      get {
        return sub_eSWEPT_SURFACE?.partialEntity._swept_curve
      }
      set(newValue) {
        guard let partial = sub_eSWEPT_SURFACE?.super_eSWEPT_SURFACE.partialEntity else { return }
        partial._swept_curve = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eRECTANGULAR_COMPOSITE_SURFACE`` )
    public var N_U: SDAI.INTEGER?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"N_U") {
          return cached.value as! SDAI.INTEGER? 
        }
        guard let origin = sub_eRECTANGULAR_COMPOSITE_SURFACE else { return nil }
        let value = SDAI.INTEGER(origin.partialEntity._n_u__getter(SELF: origin))
        updateCache(derivedAttributeName:"N_U", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSURFACE_CURVE_SWEPT_SURFACE`` )
    public var REFERENCE_SURFACE: eSURFACE?  {
      get {
        return sub_eSURFACE_CURVE_SWEPT_SURFACE?.partialEntity._reference_surface
      }
      set(newValue) {
        guard let partial = sub_eSURFACE_CURVE_SWEPT_SURFACE?.super_eSURFACE_CURVE_SWEPT_SURFACE
          .partialEntity else { return }
        partial._reference_surface = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eRECTANGULAR_COMPOSITE_SURFACE`` )
    public var N_V: SDAI.INTEGER?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"N_V") {
          return cached.value as! SDAI.INTEGER? 
        }
        guard let origin = sub_eRECTANGULAR_COMPOSITE_SURFACE else { return nil }
        let value = SDAI.INTEGER(origin.partialEntity._n_v__getter(SELF: origin))
        updateCache(derivedAttributeName:"N_V", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eLOCALLY_REFINED_SPLINE_SURFACE`` )
    public var LINEARLY_INDEPENDENT: nLINEARLY_INDEPENDENT_ENUM?  {
      get {
        return sub_eLOCALLY_REFINED_SPLINE_SURFACE?.partialEntity._linearly_independent
      }
      set(newValue) {
        guard let partial = sub_eLOCALLY_REFINED_SPLINE_SURFACE?.super_eLOCALLY_REFINED_SPLINE_SURFACE
          .partialEntity else { return }
        partial._linearly_independent = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eB_SPLINE_SURFACE`` )
    public var V_DEGREE: SDAI.INTEGER?  {
      get {
        return sub_eB_SPLINE_SURFACE?.partialEntity._v_degree
      }
      set(newValue) {
        guard let partial = sub_eB_SPLINE_SURFACE?.super_eB_SPLINE_SURFACE.partialEntity else { return }
        partial._v_degree = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eLOCALLY_REFINED_SPLINE_SURFACE`` )
    public var LOCALLY_REFINED_SPLINE_TYPE: nLOCALLY_REFINED_SPLINE_TYPE_ENUM?  {
      get {
        return sub_eLOCALLY_REFINED_SPLINE_SURFACE?.partialEntity._locally_refined_spline_type
      }
      set(newValue) {
        guard let partial = sub_eLOCALLY_REFINED_SPLINE_SURFACE?.super_eLOCALLY_REFINED_SPLINE_SURFACE
          .partialEntity else { return }
        partial._locally_refined_spline_type = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eB_SPLINE_SURFACE_WITH_KNOTS`` )
    public var V_MULTIPLICITIES: (SDAI.LIST<SDAI.INTEGER>/*[2:nil]*/ )?  {
      get {
        return sub_eB_SPLINE_SURFACE_WITH_KNOTS?.partialEntity._v_multiplicities
      }
      set(newValue) {
        guard let partial = sub_eB_SPLINE_SURFACE_WITH_KNOTS?.super_eB_SPLINE_SURFACE_WITH_KNOTS
          .partialEntity else { return }
        partial._v_multiplicities = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCURVE_BOUNDED_SURFACE`` )
    public var BOUNDARIES: (SDAI.SET<eBOUNDARY_CURVE>/*[1:nil]*/ )?  {
      get {
        return sub_eCURVE_BOUNDED_SURFACE?.partialEntity._boundaries
      }
      set(newValue) {
        guard let partial = sub_eCURVE_BOUNDED_SURFACE?.super_eCURVE_BOUNDED_SURFACE.partialEntity
          else { return }
        partial._boundaries = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eDEGENERATE_TOROIDAL_SURFACE`` )
    public var SELECT_OUTER: SDAI.BOOLEAN?  {
      get {
        return sub_eDEGENERATE_TOROIDAL_SURFACE?.partialEntity._select_outer
      }
      set(newValue) {
        guard let partial = sub_eDEGENERATE_TOROIDAL_SURFACE?.super_eDEGENERATE_TOROIDAL_SURFACE
          .partialEntity else { return }
        partial._select_outer = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eTOROIDAL_SURFACE`` )
    public var MINOR_RADIUS: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eTOROIDAL_SURFACE?.partialEntity._minor_radius
      }
      set(newValue) {
        guard let partial = sub_eTOROIDAL_SURFACE?.super_eTOROIDAL_SURFACE.partialEntity else { return }
        partial._minor_radius = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eB_SPLINE_SURFACE`` )
    public var V_UPPER: SDAI.INTEGER?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"V_UPPER") {
          return cached.value as! SDAI.INTEGER? 
        }
        guard let origin = sub_eB_SPLINE_SURFACE else { return nil }
        let value = SDAI.INTEGER(origin.partialEntity._v_upper__getter(SELF: origin))
        updateCache(derivedAttributeName:"V_UPPER", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eORIENTED_SURFACE`` )
    public var ORIENTATION: SDAI.BOOLEAN?  {
      get {
        return sub_eORIENTED_SURFACE?.partialEntity._orientation
      }
      set(newValue) {
        guard let partial = sub_eORIENTED_SURFACE?.super_eORIENTED_SURFACE.partialEntity else { return }
        partial._orientation = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSURFACE_OF_REVOLUTION`` )
    public var AXIS_POSITION: eAXIS1_PLACEMENT?  {
      get {
        return sub_eSURFACE_OF_REVOLUTION?.partialEntity._axis_position
      }
      set(newValue) {
        guard let partial = sub_eSURFACE_OF_REVOLUTION?.super_eSURFACE_OF_REVOLUTION.partialEntity
          else { return }
        partial._axis_position = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eRECTANGULAR_TRIMMED_SURFACE`` )
    public var U1: tPARAMETER_VALUE?  {
      get {
        return sub_eRECTANGULAR_TRIMMED_SURFACE?.partialEntity._u1
      }
      set(newValue) {
        guard let partial = sub_eRECTANGULAR_TRIMMED_SURFACE?.super_eRECTANGULAR_TRIMMED_SURFACE
          .partialEntity else { return }
        partial._u1 = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eRECTANGULAR_TRIMMED_SURFACE`` )
    public var U2: tPARAMETER_VALUE?  {
      get {
        return sub_eRECTANGULAR_TRIMMED_SURFACE?.partialEntity._u2
      }
      set(newValue) {
        guard let partial = sub_eRECTANGULAR_TRIMMED_SURFACE?.super_eRECTANGULAR_TRIMMED_SURFACE
          .partialEntity else { return }
        partial._u2 = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eDUPIN_CYCLIDE_SURFACE`` )
    public var SKEWNESS: tLENGTH_MEASURE?  {
      get {
        return sub_eDUPIN_CYCLIDE_SURFACE?.partialEntity._skewness
      }
      set(newValue) {
        guard let partial = sub_eDUPIN_CYCLIDE_SURFACE?.super_eDUPIN_CYCLIDE_SURFACE.partialEntity
          else { return }
        partial._skewness = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSURFACE_REPLICA`` )
    public var PARENT_SURFACE: eSURFACE?  {
      get {
        return sub_eSURFACE_REPLICA?.partialEntity._parent_surface
      }
      set(newValue) {
        guard let partial = sub_eSURFACE_REPLICA?.super_eSURFACE_REPLICA.partialEntity else { return }
        partial._parent_surface = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eRECTANGULAR_TRIMMED_SURFACE`` )
    public var USENSE: SDAI.BOOLEAN?  {
      get {
        return sub_eRECTANGULAR_TRIMMED_SURFACE?.partialEntity._usense
      }
      set(newValue) {
        guard let partial = sub_eRECTANGULAR_TRIMMED_SURFACE?.super_eRECTANGULAR_TRIMMED_SURFACE
          .partialEntity else { return }
        partial._usense = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eB_SPLINE_SURFACE`` )
    public var SURFACE_FORM: nB_SPLINE_SURFACE_FORM?  {
      get {
        return sub_eB_SPLINE_SURFACE?.partialEntity._surface_form
      }
      set(newValue) {
        guard let partial = sub_eB_SPLINE_SURFACE?.super_eB_SPLINE_SURFACE.partialEntity else { return }
        partial._surface_form = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eLOCALLY_REFINED_SPLINE_SURFACE`` )
    public var SCALING_FACTORS: (SDAI.LIST<SDAI.REAL>/*[4:nil]*/ )?  {
      get {
        return sub_eLOCALLY_REFINED_SPLINE_SURFACE?.partialEntity._scaling_factors
      }
      set(newValue) {
        guard let partial = sub_eLOCALLY_REFINED_SPLINE_SURFACE?.super_eLOCALLY_REFINED_SPLINE_SURFACE
          .partialEntity else { return }
        partial._scaling_factors = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eOFFSET_SURFACE`` )
    public var DISTANCE: tLENGTH_MEASURE?  {
      get {
        return sub_eOFFSET_SURFACE?.partialEntity._distance
      }
      set(newValue) {
        guard let partial = sub_eOFFSET_SURFACE?.super_eOFFSET_SURFACE.partialEntity else { return }
        partial._distance = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eELEMENTARY_SURFACE`` )
    public var POSITION: eAXIS2_PLACEMENT_3D?  {
      get {
        return sub_eELEMENTARY_SURFACE?.partialEntity._position
      }
      set(newValue) {
        guard let partial = sub_eELEMENTARY_SURFACE?.super_eELEMENTARY_SURFACE.partialEntity else { return }
        partial._position = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSURFACE_REPLICA`` )
    public var TRANSFORMATION: eCARTESIAN_TRANSFORMATION_OPERATOR_3D?  {
      get {
        return sub_eSURFACE_REPLICA?.partialEntity._transformation
      }
      set(newValue) {
        guard let partial = sub_eSURFACE_REPLICA?.super_eSURFACE_REPLICA.partialEntity else { return }
        partial._transformation = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eDUPIN_CYCLIDE_SURFACE`` )
    public var GENERALISED_MINOR_RADIUS: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eDUPIN_CYCLIDE_SURFACE?.partialEntity._generalised_minor_radius
      }
      set(newValue) {
        guard let partial = sub_eDUPIN_CYCLIDE_SURFACE?.super_eDUPIN_CYCLIDE_SURFACE.partialEntity
          else { return }
        partial._generalised_minor_radius = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eRECTANGULAR_TRIMMED_SURFACE`` )
    public var V2: tPARAMETER_VALUE?  {
      get {
        return sub_eRECTANGULAR_TRIMMED_SURFACE?.partialEntity._v2
      }
      set(newValue) {
        guard let partial = sub_eRECTANGULAR_TRIMMED_SURFACE?.super_eRECTANGULAR_TRIMMED_SURFACE
          .partialEntity else { return }
        partial._v2 = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eRECTANGULAR_TRIMMED_SURFACE`` )
    public var V1: tPARAMETER_VALUE?  {
      get {
        return sub_eRECTANGULAR_TRIMMED_SURFACE?.partialEntity._v1
      }
      set(newValue) {
        guard let partial = sub_eRECTANGULAR_TRIMMED_SURFACE?.super_eRECTANGULAR_TRIMMED_SURFACE
          .partialEntity else { return }
        partial._v1 = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eSURFACE_OF_REVOLUTION`` )
    public var AXIS_LINE: eLINE?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"AXIS_LINE") {
          return cached.value as! eLINE? 
        }
        guard let origin = sub_eSURFACE_OF_REVOLUTION else { return nil }
        let value = eLINE(origin.partialEntity._axis_line__getter(SELF: origin))
        updateCache(derivedAttributeName:"AXIS_LINE", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCONICAL_SURFACE`` )
    public var SEMI_ANGLE: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eCONICAL_SURFACE?.partialEntity._semi_angle
      }
      set(newValue) {
        guard let partial = sub_eCONICAL_SURFACE?.super_eCONICAL_SURFACE.partialEntity else { return }
        partial._semi_angle = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eB_SPLINE_SURFACE_WITH_KNOTS`` )
    public var KNOT_SPEC: nKNOT_TYPE?  {
      get {
        return sub_eB_SPLINE_SURFACE_WITH_KNOTS?.partialEntity._knot_spec
      }
      set(newValue) {
        guard let partial = sub_eB_SPLINE_SURFACE_WITH_KNOTS?.super_eB_SPLINE_SURFACE_WITH_KNOTS
          .partialEntity else { return }
        partial._knot_spec = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT(OBSERVED)__ attribute
    /// - origin: SUB( ``eRECTANGULAR_COMPOSITE_SURFACE`` )
    public var SEGMENTS: (SDAI.LIST<SDAI.LIST<eSURFACE_PATCH>/*[1:nil]*/ >/*[1:nil]*/ )?  {
      get {
        return sub_eRECTANGULAR_COMPOSITE_SURFACE?.partialEntity._segments
      }
      set(newValue) {
        guard let partial = sub_eRECTANGULAR_COMPOSITE_SURFACE?.super_eRECTANGULAR_COMPOSITE_SURFACE
          .partialEntity else { return }
        partial._segments = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eFIXED_REFERENCE_SWEPT_SURFACE`` )
    public var FIXED_REFERENCE: eDIRECTION?  {
      get {
        return sub_eFIXED_REFERENCE_SWEPT_SURFACE?.partialEntity._fixed_reference
      }
      set(newValue) {
        guard let partial = sub_eFIXED_REFERENCE_SWEPT_SURFACE?.super_eFIXED_REFERENCE_SWEPT_SURFACE
          .partialEntity else { return }
        partial._fixed_reference = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eB_SPLINE_SURFACE`` )
    public var CONTROL_POINTS: (SDAI.ARRAY<SDAI.ARRAY<eCARTESIAN_POINT>/*[0:V_UPPER]*/ >/*[0:U_UPPER]*/ )?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"CONTROL_POINTS") {
          return cached.value as! (SDAI.ARRAY<SDAI.ARRAY<eCARTESIAN_POINT>/*[0:V_UPPER]*/ >/*[0:U_UPPER]*/ )? 
        }
        guard let origin = sub_eB_SPLINE_SURFACE else { return nil }
        let value = SDAI.ARRAY<SDAI.ARRAY<eCARTESIAN_POINT>>(
          origin.partialEntity._control_points__getter(SELF: origin))
        updateCache(derivedAttributeName:"CONTROL_POINTS", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eB_SPLINE_SURFACE`` )
    public var U_DEGREE: SDAI.INTEGER?  {
      get {
        return sub_eB_SPLINE_SURFACE?.partialEntity._u_degree
      }
      set(newValue) {
        guard let partial = sub_eB_SPLINE_SURFACE?.super_eB_SPLINE_SURFACE.partialEntity else { return }
        partial._u_degree = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCURVE_BOUNDED_SURFACE`` )
    public var IMPLICIT_OUTER: SDAI.BOOLEAN?  {
      get {
        return sub_eCURVE_BOUNDED_SURFACE?.partialEntity._implicit_outer
      }
      set(newValue) {
        guard let partial = sub_eCURVE_BOUNDED_SURFACE?.super_eCURVE_BOUNDED_SURFACE.partialEntity
          else { return }
        partial._implicit_outer = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eB_SPLINE_SURFACE_WITH_KNOTS`` )
    public var KNOT_U_UPPER: SDAI.INTEGER?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"KNOT_U_UPPER") {
          return cached.value as! SDAI.INTEGER? 
        }
        guard let origin = sub_eB_SPLINE_SURFACE_WITH_KNOTS else { return nil }
        let value = SDAI.INTEGER(origin.partialEntity._knot_u_upper__getter(SELF: origin))
        updateCache(derivedAttributeName:"KNOT_U_UPPER", value:value)
        return value
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eB_SPLINE_SURFACE`` )
    public var U_UPPER: SDAI.INTEGER?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"U_UPPER") {
          return cached.value as! SDAI.INTEGER? 
        }
        guard let origin = sub_eB_SPLINE_SURFACE else { return nil }
        let value = SDAI.INTEGER(origin.partialEntity._u_upper__getter(SELF: origin))
        updateCache(derivedAttributeName:"U_UPPER", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eLOCALLY_REFINED_SPLINE_SURFACE`` )
    public var V_B_SPLINES: (SDAI.LIST<eLOCAL_B_SPLINE>/*[4:nil]*/ )?  {
      get {
        return sub_eLOCALLY_REFINED_SPLINE_SURFACE?.partialEntity._v_b_splines
      }
      set(newValue) {
        guard let partial = sub_eLOCALLY_REFINED_SPLINE_SURFACE?.super_eLOCALLY_REFINED_SPLINE_SURFACE
          .partialEntity else { return }
        partial._v_b_splines = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eLOCALLY_REFINED_SPLINE_SURFACE`` )
    public var DOMAIN: (SDAI.LIST<SDAI.LIST<SDAI.REAL>/*[2:2]*/ >/*[2:2]*/ )?  {
      get {
        return sub_eLOCALLY_REFINED_SPLINE_SURFACE?.partialEntity._domain
      }
      set(newValue) {
        guard let partial = sub_eLOCALLY_REFINED_SPLINE_SURFACE?.super_eLOCALLY_REFINED_SPLINE_SURFACE
          .partialEntity else { return }
        partial._domain = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eREPRESENTATION_ITEM`` )
    public var NAME: tLABEL {
      get {
        return SDAI.UNWRAP( super_eREPRESENTATION_ITEM.partialEntity._name )
      }
      set(newValue) {
        let partial = super_eREPRESENTATION_ITEM.partialEntity
        partial._name = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSURFACE_OF_LINEAR_EXTRUSION`` )
    public var EXTRUSION_AXIS: eVECTOR?  {
      get {
        return sub_eSURFACE_OF_LINEAR_EXTRUSION?.partialEntity._extrusion_axis
      }
      set(newValue) {
        guard let partial = sub_eSURFACE_OF_LINEAR_EXTRUSION?.super_eSURFACE_OF_LINEAR_EXTRUSION
          .partialEntity else { return }
        partial._extrusion_axis = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eRATIONAL_B_SPLINE_SURFACE`` )
    public var WEIGHTS: (SDAI.ARRAY<SDAI.ARRAY<SDAI.REAL>/*[0:V_UPPER]*/ >/*[0:U_UPPER]*/ )?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"WEIGHTS") {
          return cached.value as! (SDAI.ARRAY<SDAI.ARRAY<SDAI.REAL>/*[0:V_UPPER]*/ >/*[0:U_UPPER]*/ )? 
        }
        guard let origin = sub_eRATIONAL_B_SPLINE_SURFACE else { return nil }
        let value = SDAI.ARRAY<SDAI.ARRAY<SDAI.REAL>>(origin.partialEntity._weights__getter(SELF: origin))
        updateCache(derivedAttributeName:"WEIGHTS", value:value)
        return value
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUPER( ``eGEOMETRIC_REPRESENTATION_ITEM`` )
    public var DIM: tDIMENSION_COUNT?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"DIM") {
          return cached.value as! tDIMENSION_COUNT? 
        }
        let origin = super_eGEOMETRIC_REPRESENTATION_ITEM
        let value = tDIMENSION_COUNT(origin.partialEntity._dim__getter(SELF: origin))
        updateCache(derivedAttributeName:"DIM", value:value)
        return value
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_surface.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eREPRESENTATION_ITEM.self) else { return nil }
      self.super_eREPRESENTATION_ITEM = super1

      guard let super2 = complexEntity?.entityReference(eGEOMETRIC_REPRESENTATION_ITEM.self) else { return nil }
      self.super_eGEOMETRIC_REPRESENTATION_ITEM = super2

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "SURFACE", type: self, explicitAttributeCount: 0)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eREPRESENTATION_ITEM.self)
      entityDef.add(supertype: eGEOMETRIC_REPRESENTATION_ITEM.self)
      entityDef.add(supertype: eSURFACE.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "KNOT_V_UPPER", keyPath: \eSURFACE.KNOT_V_UPPER, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "MAJOR_RADIUS", keyPath: \eSURFACE.MAJOR_RADIUS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "GENERALISED_MAJOR_RADIUS", keyPath: \eSURFACE.GENERALISED_MAJOR_RADIUS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "U_B_SPLINES", keyPath: \eSURFACE.U_B_SPLINES, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "U_MULTIPLICITIES", keyPath: \eSURFACE.U_MULTIPLICITIES, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "VSENSE", keyPath: \eSURFACE.VSENSE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "SWEPT_CURVE", keyPath: \eSURFACE.SWEPT_CURVE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "N_U", keyPath: \eSURFACE.N_U, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "REFERENCE_SURFACE", keyPath: \eSURFACE.REFERENCE_SURFACE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "N_V", keyPath: \eSURFACE.N_V, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "LINEARLY_INDEPENDENT", keyPath: \eSURFACE.LINEARLY_INDEPENDENT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "V_DEGREE", keyPath: \eSURFACE.V_DEGREE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "LOCALLY_REFINED_SPLINE_TYPE", keyPath: \eSURFACE.LOCALLY_REFINED_SPLINE_TYPE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "V_MULTIPLICITIES", keyPath: \eSURFACE.V_MULTIPLICITIES, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "BOUNDARIES", keyPath: \eSURFACE.BOUNDARIES, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "SELECT_OUTER", keyPath: \eSURFACE.SELECT_OUTER, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "MINOR_RADIUS", keyPath: \eSURFACE.MINOR_RADIUS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "V_UPPER", keyPath: \eSURFACE.V_UPPER, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "ORIENTATION", keyPath: \eSURFACE.ORIENTATION, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "AXIS_POSITION", keyPath: \eSURFACE.AXIS_POSITION, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "U1", keyPath: \eSURFACE.U1, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "U2", keyPath: \eSURFACE.U2, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "SKEWNESS", keyPath: \eSURFACE.SKEWNESS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "PARENT_SURFACE", keyPath: \eSURFACE.PARENT_SURFACE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "USENSE", keyPath: \eSURFACE.USENSE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "SURFACE_FORM", keyPath: \eSURFACE.SURFACE_FORM, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "SCALING_FACTORS", keyPath: \eSURFACE.SCALING_FACTORS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "DISTANCE", keyPath: \eSURFACE.DISTANCE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "POSITION", keyPath: \eSURFACE.POSITION, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "TRANSFORMATION", keyPath: \eSURFACE.TRANSFORMATION, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "GENERALISED_MINOR_RADIUS", keyPath: \eSURFACE.GENERALISED_MINOR_RADIUS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "V2", keyPath: \eSURFACE.V2, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "V1", keyPath: \eSURFACE.V1, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "AXIS_LINE", keyPath: \eSURFACE.AXIS_LINE, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "SEMI_ANGLE", keyPath: \eSURFACE.SEMI_ANGLE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "KNOT_SPEC", keyPath: \eSURFACE.KNOT_SPEC, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "SEGMENTS", keyPath: \eSURFACE.SEGMENTS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "FIXED_REFERENCE", keyPath: \eSURFACE.FIXED_REFERENCE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "CONTROL_POINTS", keyPath: \eSURFACE.CONTROL_POINTS, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "U_DEGREE", keyPath: \eSURFACE.U_DEGREE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "IMPLICIT_OUTER", keyPath: \eSURFACE.IMPLICIT_OUTER, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "KNOT_U_UPPER", keyPath: \eSURFACE.KNOT_U_UPPER, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "U_UPPER", keyPath: \eSURFACE.U_UPPER, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "V_B_SPLINES", keyPath: \eSURFACE.V_B_SPLINES, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "DOMAIN", keyPath: \eSURFACE.DOMAIN, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "NAME", keyPath: \eSURFACE.NAME, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "EXTRUSION_AXIS", keyPath: \eSURFACE.EXTRUSION_AXIS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "WEIGHTS", keyPath: \eSURFACE.WEIGHTS, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "DIM", keyPath: \eSURFACE.DIM, 
        kind: .derived, source: .superEntity, mayYieldEntityReference: false)

      return entityDef
    }

  }
}
