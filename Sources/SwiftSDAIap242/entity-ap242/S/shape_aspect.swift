/* file: shape_aspect.swift 	 generated: Sun Oct 31 15:32:10 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY shape_aspect
    SUPERTYPE OF ( 
        ONEOF ( 
            shape_aspect_occurrence, 
            component_path_shape_aspect ) 
        ANDOR
        constituent_shape_aspect 
        ANDOR
        ONEOF ( 
            harness_node, 
            harness_segment ) 
        ANDOR
        ONEOF ( 
            contacting_feature, 
            datum, 
            datum_feature, 
            datum_target, 
            datum_system, 
            general_datum_reference ) 
        ANDOR
        ONEOF ( 
            assembly_shape_constraint, 
            assembly_shape_joint, 
            connectivity_definition, 
            contact_feature, 
            transport_feature ) );
      name                  : label;
      description           : OPTIONAL text;
      of_shape              : product_definition_shape;
      product_definitional  : LOGICAL;
    DERIVE
      id  : identifier := get_id_value( SELF );
    UNIQUE
      ur1 : id, of_shape;
    WHERE
      wr1: ( SIZEOF( USEDIN( SELF, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ID_ATTRIBUTE.'
               + 'IDENTIFIED_ITEM'  ) ) <= 1 );
  END_ENTITY; -- shape_aspect (line:28632 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  ENTITY(SELF)	shape_aspect
    ATTR:  name,	TYPE: label -- EXPLICIT

    ATTR:  description,	TYPE: OPTIONAL text -- EXPLICIT

    ATTR:  of_shape,	TYPE: product_definition_shape -- EXPLICIT (DYNAMIC)
      -- possibly overriden by
          ENTITY: component_feature,	TYPE: assembly_component
          ENTITY: constituent_shape_aspect,	TYPE: product_definition_shape	(as DERIVED)
          ENTITY: mated_part_relationship,	TYPE: mated_part_relationship	(as DERIVED)

    ATTR:  product_definitional,	TYPE: LOGICAL -- EXPLICIT (DYNAMIC)
      -- possibly overriden by
          ENTITY: default_model_geometric_view,	TYPE: LOGICAL	(as DERIVED)

    ATTR:  id,	TYPE: identifier -- DERIVED
      := get_id_value( SELF )


  SUB- ENTITY(2)	taper
    (no local attributes)

  SUB- ENTITY(3)	physical_component_terminal
    (no local attributes)

  SUB- ENTITY(4)	component_terminal
    (no local attributes)

  SUB- ENTITY(5)	physical_component_interface_terminal
    (no local attributes)

  SUB- ENTITY(6)	physical_component_feature
    (no local attributes)

  SUB- ENTITY(7)	component_feature
    REDCR: of_shape,	TYPE: assembly_component -- EXPLICIT
      -- OVERRIDING ENTITY: shape_aspect


  SUB- ENTITY(8)	boss_top
    (no local attributes)

  SUB- ENTITY(9)	path_feature_component
    (no local attributes)

  SUB- ENTITY(10)	circular_closed_profile
    (no local attributes)

  SUB- ENTITY(11)	datum_reference_compartment
    ATTR:  owner,	TYPE: datum_system -- INVERSE	(AMBIGUOUS/MASKED)
      FOR constituents;


  SUB- ENTITY(12)	datum_reference_element
    ATTR:  owner,	TYPE: general_datum_reference -- DERIVED	(AMBIGUOUS/MASKED)
      := sts_get_general_datum_reference( SELF )


  SUB- ENTITY(13)	general_datum_reference
    ATTR:  base,	TYPE: datum_or_common_datum -- EXPLICIT

    ATTR:  modifiers,	TYPE: OPTIONAL SET [1 : ?] OF datum_reference_modifier -- EXPLICIT

    ATTR:  base_common_datum_list,	TYPE: common_datum_list -- DERIVED
      := base


  SUB- ENTITY(14)	constituent_shape_aspect
    ATTR:  parent,	TYPE: shape_aspect -- EXPLICIT

    REDCR: of_shape,	TYPE: product_definition_shape -- DERIVED (DYNAMIC)
      := get_root_shape_aspect( SELF )
      -- OVERRIDING ENTITY: shape_aspect


  SUB- ENTITY(15)	transport_feature
    (no local attributes)

  SUB- ENTITY(16)	instanced_feature
    (no local attributes)

  SUB- ENTITY(17)	connection_zone_based_assembly_joint
    (no local attributes)

  SUB- ENTITY(18)	assembly_joint
    (no local attributes)

  SUB- ENTITY(19)	component_feature_joint
    REDCR: relating_shape_aspect,	TYPE: component_feature -- EXPLICIT
      -- OVERRIDING ENTITY: shape_aspect_relationship

    REDCR: related_shape_aspect,	TYPE: component_feature -- EXPLICIT
      -- OVERRIDING ENTITY: shape_aspect_relationship


  SUB- ENTITY(20)	square_u_profile
    (no local attributes)

  SUB- ENTITY(21)	component_path_shape_aspect
    ATTR:  location,	TYPE: multi_or_next_assembly_usage_occurrence -- EXPLICIT

    ATTR:  component_shape_aspect,	TYPE: internal_or_reflected_shape_aspect -- EXPLICIT


  SUB- ENTITY(22)	rectangular_closed_profile
    (no local attributes)

  SUB- ENTITY(23)	closed_path_profile
    (no local attributes)

  SUB- ENTITY(24)	geometric_contact
    (no local attributes)

  SUB- ENTITY(25)	apex
    (no local attributes)

  SUB- ENTITY(26)	geometric_alignment
    (no local attributes)

  SUB- ENTITY(27)	centre_of_symmetry
    (no local attributes)

  SUB- ENTITY(28)	geometric_intersection
    (no local attributes)

  SUB- ENTITY(29)	parallel_offset
    ATTR:  offset,	TYPE: measure_with_unit -- EXPLICIT


  SUB- ENTITY(30)	perpendicular_to
    (no local attributes)

  SUB- ENTITY(31)	extension
    (no local attributes)

  SUB- ENTITY(32)	tangent
    (no local attributes)

  SUB- ENTITY(33)	derived_shape_aspect
    ATTR:  deriving_relationships,	TYPE: SET [1 : ?] OF shape_aspect_deriving_relationship -- INVERSE
      FOR relating_shape_aspect;


  SUB- ENTITY(34)	default_model_geometric_view
    REDCR: product_definitional,	TYPE: LOGICAL -- DERIVED (DYNAMIC)
      := FALSE
      -- OVERRIDING ENTITY: shape_aspect


  SUB- ENTITY(35)	chamfer
    (no local attributes)

  SUB- ENTITY(36)	edge_round
    (no local attributes)

  SUB- ENTITY(37)	fillet
    (no local attributes)

  SUB- ENTITY(38)	transition_feature
    (no local attributes)

  SUB- ENTITY(39)	datum_system
    ATTR:  constituents,	TYPE: LIST [1 : 3] OF UNIQUE datum_reference_compartment -- EXPLICIT
      -- observed by
        ENTITY(1): datum_reference_compartment,	ATTR: owner,	TYPE: datum_system


  SUB- ENTITY(40)	hole_bottom
    (no local attributes)

  SUB- ENTITY(41)	harness_segment
    (no local attributes)

  SUB- ENTITY(42)	ngon_closed_profile
    (no local attributes)

  SUB- ENTITY(43)	joggle_termination
    (no local attributes)

  SUB- ENTITY(44)	mated_part_relationship
    ATTR:  items,	TYPE: SET [0 : ?] OF product_definition -- EXPLICIT	(AMBIGUOUS/MASKED)

    REDCR: assigned_group,	TYPE: mated_part_relationship -- DERIVED (DYNAMIC)
      := SELF
      -- OVERRIDING ENTITY: group_assignment

    REDCR: definition,	TYPE: mated_part_relationship -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := SELF
      -- OVERRIDING ENTITY: property_definition

    REDCR: of_shape,	TYPE: mated_part_relationship -- DERIVED (DYNAMIC)
      := SELF
      -- OVERRIDING ENTITY: shape_aspect


  SUB- ENTITY(45)	thread_runout
    (no local attributes)

  SUB- ENTITY(46)	open_path_profile
    (no local attributes)

  SUB- ENTITY(47)	tee_profile
    (no local attributes)

  SUB- ENTITY(48)	vee_profile
    (no local attributes)

  SUB- ENTITY(49)	assembly_shape_joint
    (no local attributes)

  SUB- ENTITY(50)	symmetric_shape_aspect
    ATTR:  basis_relationships,	TYPE: SET [1 : ?] OF shape_aspect_deriving_relationship -- INVERSE
      FOR related_shape_aspect;


  SUB- ENTITY(51)	linear_profile
    (no local attributes)

  SUB- ENTITY(52)	assembly_shape_constraint
    (no local attributes)

  SUB- ENTITY(53)	connectivity_definition
    (no local attributes)

  SUB- ENTITY(54)	placed_datum_target_feature
    ATTR:  representation_associations,	TYPE: SET [0 : ?] OF property_definition_representation -- DERIVED
      := get_shape_aspect_property_definition_representations( SELF )


  SUB- ENTITY(55)	datum_target
    ATTR:  target_id,	TYPE: identifier -- EXPLICIT

    ATTR:  target_basis_relationship,	TYPE: SET [1 : ?] OF shape_aspect_relationship -- INVERSE
      FOR relating_shape_aspect;


  SUB- ENTITY(56)	rounded_u_profile
    (no local attributes)

  SUB- ENTITY(57)	pocket_bottom
    (no local attributes)

  SUB- ENTITY(58)	bead_end
    (no local attributes)

  SUB- ENTITY(59)	slot_end
    (no local attributes)

  SUB- ENTITY(60)	directed_angle
    (no local attributes)

  SUB- ENTITY(61)	chamfer_offset
    (no local attributes)

  SUB- ENTITY(62)	directed_tolerance_zone
    ATTR:  direction,	TYPE: directed_tolerance_zone_type -- EXPLICIT


  SUB- ENTITY(63)	oriented_tolerance_zone
    ATTR:  orientation,	TYPE: oriented_tolerance_zone_type -- EXPLICIT

    ATTR:  angle,	TYPE: OPTIONAL plane_angle_measure_with_unit -- EXPLICIT


  SUB- ENTITY(64)	tolerance_zone_with_datum
    ATTR:  datum_reference,	TYPE: datum_system -- EXPLICIT


  SUB- ENTITY(65)	tolerance_zone
    ATTR:  defining_tolerance,	TYPE: SET [1 : ?] OF tolerance_zone_target -- EXPLICIT

    ATTR:  form,	TYPE: tolerance_zone_form -- EXPLICIT


  SUB- ENTITY(66)	cross_sectional_alternative_shape_element
    ATTR:  items,	TYPE: SET [2 : ?] OF shape_aspect_relationship -- INVERSE	(AMBIGUOUS/MASKED)
      FOR relating_shape_aspect;


  SUB- ENTITY(67)	cross_sectional_group_shape_element_with_tubular_cover
    (no local attributes)

  SUB- ENTITY(68)	cross_sectional_group_shape_element_with_lacing
    (no local attributes)

  SUB- ENTITY(69)	twisted_cross_sectional_group_shape_element
    (no local attributes)

  SUB- ENTITY(70)	cross_sectional_group_shape_element
    ATTR:  items,	TYPE: SET [1 : ?] OF shape_aspect_relationship -- INVERSE	(AMBIGUOUS/MASKED)
      FOR relating_shape_aspect;


  SUB- ENTITY(71)	cross_sectional_part_shape_element
    (no local attributes)

  SUB- ENTITY(72)	partial_circular_profile
    (no local attributes)

  SUB- ENTITY(73)	connection_zone_interface_plane_relationship
    (no local attributes)

  SUB- ENTITY(74)	common_datum
    (no local attributes)

  SUB- ENTITY(75)	datum
    ATTR:  identification,	TYPE: identifier -- EXPLICIT

    ATTR:  established_by_relationships,	TYPE: SET [1 : ?] OF shape_aspect_relationship -- INVERSE
      FOR related_shape_aspect;


  SUB- ENTITY(76)	counterdrill_hole_occurrence_in_assembly
    ATTR:  modified_components,	TYPE: LIST [1 : ?] OF UNIQUE multi_level_reference_designator -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(77)	counterdrill_hole_occurrence
    REDCR: definition,	TYPE: counterdrill_hole_definition -- EXPLICIT	(AMBIGUOUS/MASKED)
      -- OVERRIDING ENTITY: shape_aspect_occurrence


  SUB- ENTITY(78)	countersink_hole_occurrence_in_assembly
    ATTR:  modified_components,	TYPE: LIST [1 : ?] OF UNIQUE multi_level_reference_designator -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(79)	countersink_hole_occurrence
    REDCR: definition,	TYPE: countersink_hole_definition -- EXPLICIT	(AMBIGUOUS/MASKED)
      -- OVERRIDING ENTITY: shape_aspect_occurrence


  SUB- ENTITY(80)	spotface_occurrence_in_assembly
    REDCR: definition,	TYPE: spotface_hole_definition -- EXPLICIT	(AMBIGUOUS/MASKED)
      -- OVERRIDING ENTITY: counterbore_hole_occurrence


  SUB- ENTITY(81)	counterbore_hole_occurrence_in_assembly
    ATTR:  modified_components,	TYPE: LIST [1 : ?] OF UNIQUE multi_level_reference_designator -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(82)	spotface_occurrence
    REDCR: definition,	TYPE: spotface_hole_definition -- EXPLICIT	(AMBIGUOUS/MASKED)
      -- OVERRIDING ENTITY: counterbore_hole_occurrence


  SUB- ENTITY(83)	counterbore_hole_occurrence
    REDCR: definition,	TYPE: counterbore_hole_definition -- EXPLICIT	(AMBIGUOUS/MASKED)
      -- OVERRIDING ENTITY: shape_aspect_occurrence
      -- possibly overriden by
          ENTITY: spotface_occurrence_in_assembly,	TYPE: spotface_hole_definition
          ENTITY: spotface_occurrence,	TYPE: spotface_hole_definition


  SUB- ENTITY(84)	shape_aspect_occurrence
    ATTR:  definition,	TYPE: shape_aspect_or_characterized_object -- EXPLICIT	(AMBIGUOUS/MASKED)
      -- possibly overriden by
          ENTITY: counterdrill_hole_occurrence,	TYPE: counterdrill_hole_definition
          ENTITY: countersink_hole_occurrence,	TYPE: countersink_hole_definition
          ENTITY: counterbore_hole_occurrence,	TYPE: counterbore_hole_definition


  SUB- ENTITY(85)	composite_unit_shape_aspect
    (no local attributes)

  SUB- ENTITY(86)	all_around_shape_aspect
    (no local attributes)

  SUB- ENTITY(87)	between_shape_aspect
    (no local attributes)

  SUB- ENTITY(88)	continuous_shape_aspect
    (no local attributes)

  SUB- ENTITY(89)	composite_group_shape_aspect
    (no local attributes)

  SUB- ENTITY(90)	composite_shape_aspect
    ATTR:  component_relationships,	TYPE: SET [2 : ?] OF shape_aspect_relationship -- INVERSE
      FOR relating_shape_aspect;


  SUB- ENTITY(91)	harness_node
    (no local attributes)

  SUB- ENTITY(92)	contacting_feature
    (no local attributes)

  SUB- ENTITY(93)	dimensional_location_with_datum_feature
    (no local attributes)

  SUB- ENTITY(94)	dimensional_size_with_datum_feature
    (no local attributes)

  SUB- ENTITY(95)	datum_feature
    ATTR:  feature_basis_relationship,	TYPE: SET [1 : ?] OF shape_aspect_relationship -- INVERSE
      FOR relating_shape_aspect;


  SUB- ENTITY(96)	terminal_location_group
    (no local attributes)

  SUB- ENTITY(97)	terminal_feature
    (no local attributes)

  SUB- ENTITY(98)	contact_feature
    (no local attributes)

  SUB- ENTITY(99)	profile_floor
    (no local attributes)

  SUB- ENTITY(100)	assembly_bond_definition
    (no local attributes)

  SUB- ENTITY(101)	cross_sectional_occurrence_shape_element
    (no local attributes)

  SUB- ENTITY(102)	placed_feature
    (no local attributes)

  SUB- ENTITY(103)	rib_top_floor
    (no local attributes)

  SUB- ENTITY(104)	applied_area
    (no local attributes)

  SUB- ENTITY(105)	component_mating_constraint_condition
    (no local attributes)

  SUB- ENTITY(106)	modified_pattern
    (no local attributes)

*/


//MARK: - Partial Entity
  public final class _shape_aspect : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eSHAPE_ASPECT.self
    }

    //ATTRIBUTES
    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _name: tLABEL // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _description: tTEXT?  // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    /// - see the corresponding attribute accesser in the entity reference definition for the attribute value dynamic lookup logic
    public internal(set) var _of_shape: ePRODUCT_DEFINITION_SHAPE?  // PLAIN EXPLICIT ATTRIBUTE

    internal static func _of_shape__provider(complex: SDAI.ComplexEntity) -> eSHAPE_ASPECT__OF_SHAPE__provider? {
      let resolved = complex.resolvePartialEntityInstance(from: [_constituent_shape_aspect.typeIdentity, 
        _mated_part_relationship.typeIdentity])
      return resolved as? eSHAPE_ASPECT__OF_SHAPE__provider
    }

    /// EXPLICIT ATTRIBUTE 
    /// - see the corresponding attribute accesser in the entity reference definition for the attribute value dynamic lookup logic
    public internal(set) var _product_definitional: SDAI.LOGICAL // PLAIN EXPLICIT ATTRIBUTE

    internal static func _product_definitional__provider(complex: SDAI.ComplexEntity) -> eSHAPE_ASPECT__PRODUCT_DEFINITIONAL__provider? {
      let resolved = complex.resolvePartialEntityInstance(from: [_default_model_geometric_view.typeIdentity
        ])
      return resolved as? eSHAPE_ASPECT__PRODUCT_DEFINITIONAL__provider
    }

    /// DERIVE ATTRIBUTE
    internal func _id__getter(SELF: eSHAPE_ASPECT) -> tIDENTIFIER?  {

      let _TEMP1 = GET_ID_VALUE(sID_ATTRIBUTE_SELECT(/*eSHAPE_ASPECT*/SELF))
      return _TEMP1
    }

    //PARTIAL COMPLEX ENTITY SUPPORT
    final public override class func fixupPartialComplexEntityAttributes(partialComplex: SDAI.ComplexEntity, baseComplex: SDAI.ComplexEntity) {
      guard let pe = partialComplex.partialEntityInstance(_shape_aspect.self) else { return }

      if pe._of_shape == nil, self._of_shape__provider(complex: partialComplex) == nil, 
        let base__of_shape__provider = self._of_shape__provider(complex: baseComplex) {
        pe._of_shape = base__of_shape__provider._of_shape__getter(complex: baseComplex)
      }

      if pe._product_definitional == nil, 
        self._product_definitional__provider(complex: partialComplex) == nil, 
        let base__product_definitional__provider = self._product_definitional__provider(complex: baseComplex) {
        pe._product_definitional = base__product_definitional__provider._product_definitional__getter(complex: baseComplex)
      }
    }
    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      //SELECT data types (indirectly) referencing the current type as a member of the select list
      members.insert(SDAI.STRING(sCLASSIFICATION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sACTION_ITEMS.typeName)) // -> sCLASSIFICATION_ITEM
      members.insert(SDAI.STRING(sCHANGE_MANAGEMENT_OBJECT.typeName)) // -> sACTION_ITEMS
      members.insert(SDAI.STRING(sIR_USAGE_ITEM.typeName)) // -> sCLASSIFICATION_ITEM
      members.insert(SDAI.STRING(sMULTI_LANGUAGE_ATTRIBUTE_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sID_ATTRIBUTE_SELECT.typeName)) // -> Self
      members.insert(SDAI.STRING(sGEOMETRIC_TOLERANCE_TARGET.typeName)) // -> Self
      members.insert(SDAI.STRING(sIDENTIFICATION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sREQUIREMENT_SOURCE_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sACTION_REQUEST_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sDRAUGHTING_MODEL_ITEM_DEFINITION.typeName)) // -> Self
      members.insert(SDAI.STRING(sSHAPE_DEFINITION.typeName)) // -> Self
      members.insert(SDAI.STRING(sPROPERTY_OR_SHAPE_SELECT.typeName)) // -> sSHAPE_DEFINITION
      members.insert(SDAI.STRING(sCHARACTERIZED_DEFINITION.typeName)) // -> sSHAPE_DEFINITION
      members.insert(SDAI.STRING(sGEOMETRIC_ITEM_SPECIFIC_USAGE_SELECT.typeName)) // -> Self
      members.insert(SDAI.STRING(sREQUIREMENT_ASSIGNED_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sREQUIREMENT_SATISFACTION_ITEM.typeName)) // -> sREQUIREMENT_ASSIGNED_ITEM
      members.insert(SDAI.STRING(sSHAPE_ASPECT_OR_CHARACTERIZED_OBJECT.typeName)) // -> Self
      members.insert(SDAI.STRING(sCC_SPECIFIED_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sINTERNAL_OR_REFLECTED_SHAPE_ASPECT.typeName)) // -> Self
      members.insert(SDAI.STRING(sREPRESENTED_DEFINITION.typeName)) // -> Self
      members.insert(SDAI.STRING(sITEM_IDENTIFIED_REPRESENTATION_USAGE_DEFINITION.typeName)) // -> sREPRESENTED_DEFINITION
      members.insert(SDAI.STRING(sDESCRIPTION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sATTRIBUTE_LANGUAGE_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sDOCUMENT_REFERENCE_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sGROUPABLE_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sEFFECTIVITY_ITEM.typeName)) // -> Self
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._name.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._description?.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._of_shape?.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._product_definitional.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._name.value.isValueEqualOptionally(to: rhs._name.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._description?.value.isValueEqualOptionally(to: rhs._description?.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._of_shape?.value.isValueEqualOptionally(to: rhs._of_shape?.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._product_definitional.value.isValueEqualOptionally(to: rhs._product_definitional.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._name.value.isValueEqualOptionally(to: rhs._name.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._description?.value.isValueEqualOptionally(to: rhs._description?.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._of_shape?.value.isValueEqualOptionally(to: rhs._of_shape?.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._product_definitional.value.isValueEqualOptionally(to: rhs._product_definitional.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: eSHAPE_ASPECT?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.USEDIN(T: SELF, ROLE: \AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eID_ATTRIBUTE
        .IDENTIFIED_ITEM)
      let _TEMP2 = SDAI.SIZEOF(_TEMP1)
      let _TEMP3 = _TEMP2 <= SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
      return _TEMP3
    }

    //UNIQUENESS RULES
    public static func UNIQUE_ur1(SELF: SDAI.EntityReference) -> AnyHashable? {
      guard let SELF = SELF as? eSHAPE_ASPECT else { return nil }
      //JOINT UNIQUE RULE

      var attributes: Array<AnyHashable> = []

      guard let attr1 = SELF.ID else { return nil }
      attributes.append( AnyHashable(attr1) )
      let attr2 = SELF.OF_SHAPE
      attributes.append( AnyHashable(attr2) )

      return AnyHashable( attributes )
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(NAME: tLABEL, DESCRIPTION: tTEXT? , OF_SHAPE: ePRODUCT_DEFINITION_SHAPE? , 
                PRODUCT_DEFINITIONAL: SDAI.LOGICAL) {
      self._name = NAME
      self._description = DESCRIPTION
      self._of_shape = OF_SHAPE
      self._product_definitional = PRODUCT_DEFINITIONAL
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 4
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverRequiredParameter(as: tLABEL.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p1) = exchangeStructure.recoverOptionalParameter(as: tTEXT.self, from: parameters[1])
      else { exchangeStructure.add(errorContext: "while recovering parameter #1 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p2) = exchangeStructure.recoverOmittableParameter(as: ePRODUCT_DEFINITION_SHAPE.self, from: parameters[2])
      else { exchangeStructure.add(errorContext: "while recovering parameter #2 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p3) = exchangeStructure.recoverOmittableParameter(as: SDAI.LOGICAL.self, from: parameters[3])
      else { exchangeStructure.add(errorContext: "while recovering parameter #3 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( NAME: p0, DESCRIPTION: p1, OF_SHAPE: p2, PRODUCT_DEFINITIONAL: SDAI.LOGICAL(p3) )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY shape_aspect
    SUPERTYPE OF ( 
        ONEOF ( 
            shape_aspect_occurrence, 
            component_path_shape_aspect ) 
        ANDOR
        constituent_shape_aspect 
        ANDOR
        ONEOF ( 
            harness_node, 
            harness_segment ) 
        ANDOR
        ONEOF ( 
            contacting_feature, 
            datum, 
            datum_feature, 
            datum_target, 
            datum_system, 
            general_datum_reference ) 
        ANDOR
        ONEOF ( 
            assembly_shape_constraint, 
            assembly_shape_joint, 
            connectivity_definition, 
            contact_feature, 
            transport_feature ) );
      name                  : label;
      description           : OPTIONAL text;
      of_shape              : product_definition_shape;
      product_definitional  : LOGICAL;
    DERIVE
      id  : identifier := get_id_value( SELF );
    UNIQUE
      ur1 : id, of_shape;
    WHERE
      wr1: ( SIZEOF( USEDIN( SELF, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ID_ATTRIBUTE.'
               + 'IDENTIFIED_ITEM'  ) ) <= 1 );
  END_ENTITY; -- shape_aspect (line:28632 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eSHAPE_ASPECT : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _shape_aspect.self
    }
    public let partialEntity: _shape_aspect

    //MARK: SUPERTYPES
    public var super_eSHAPE_ASPECT: eSHAPE_ASPECT { return self } 	// [1]

    //MARK: SUBTYPES
    public var sub_eTAPER: eTAPER? {	// [2]
      return self.complexEntity.entityReference(eTAPER.self)
    }

    public var sub_ePHYSICAL_COMPONENT_TERMINAL: ePHYSICAL_COMPONENT_TERMINAL? {	// [3]
      return self.complexEntity.entityReference(ePHYSICAL_COMPONENT_TERMINAL.self)
    }

    public var sub_eCOMPONENT_TERMINAL: eCOMPONENT_TERMINAL? {	// [4]
      return self.complexEntity.entityReference(eCOMPONENT_TERMINAL.self)
    }

    public var sub_ePHYSICAL_COMPONENT_INTERFACE_TERMINAL: ePHYSICAL_COMPONENT_INTERFACE_TERMINAL? {	// [5]
      return self.complexEntity.entityReference(ePHYSICAL_COMPONENT_INTERFACE_TERMINAL.self)
    }

    public var sub_ePHYSICAL_COMPONENT_FEATURE: ePHYSICAL_COMPONENT_FEATURE? {	// [6]
      return self.complexEntity.entityReference(ePHYSICAL_COMPONENT_FEATURE.self)
    }

    public var sub_eCOMPONENT_FEATURE: eCOMPONENT_FEATURE? {	// [7]
      return self.complexEntity.entityReference(eCOMPONENT_FEATURE.self)
    }

    public var sub_eBOSS_TOP: eBOSS_TOP? {	// [8]
      return self.complexEntity.entityReference(eBOSS_TOP.self)
    }

    public var sub_ePATH_FEATURE_COMPONENT: ePATH_FEATURE_COMPONENT? {	// [9]
      return self.complexEntity.entityReference(ePATH_FEATURE_COMPONENT.self)
    }

    public var sub_eCIRCULAR_CLOSED_PROFILE: eCIRCULAR_CLOSED_PROFILE? {	// [10]
      return self.complexEntity.entityReference(eCIRCULAR_CLOSED_PROFILE.self)
    }

    public var sub_eDATUM_REFERENCE_COMPARTMENT: eDATUM_REFERENCE_COMPARTMENT? {	// [11]
      return self.complexEntity.entityReference(eDATUM_REFERENCE_COMPARTMENT.self)
    }

    public var sub_eDATUM_REFERENCE_ELEMENT: eDATUM_REFERENCE_ELEMENT? {	// [12]
      return self.complexEntity.entityReference(eDATUM_REFERENCE_ELEMENT.self)
    }

    public var sub_eGENERAL_DATUM_REFERENCE: eGENERAL_DATUM_REFERENCE? {	// [13]
      return self.complexEntity.entityReference(eGENERAL_DATUM_REFERENCE.self)
    }

    public var sub_eCONSTITUENT_SHAPE_ASPECT: eCONSTITUENT_SHAPE_ASPECT? {	// [14]
      return self.complexEntity.entityReference(eCONSTITUENT_SHAPE_ASPECT.self)
    }

    public var sub_eTRANSPORT_FEATURE: eTRANSPORT_FEATURE? {	// [15]
      return self.complexEntity.entityReference(eTRANSPORT_FEATURE.self)
    }

    public var sub_eINSTANCED_FEATURE: eINSTANCED_FEATURE? {	// [16]
      return self.complexEntity.entityReference(eINSTANCED_FEATURE.self)
    }

    public var sub_eCONNECTION_ZONE_BASED_ASSEMBLY_JOINT: eCONNECTION_ZONE_BASED_ASSEMBLY_JOINT? {	// [17]
      return self.complexEntity.entityReference(eCONNECTION_ZONE_BASED_ASSEMBLY_JOINT.self)
    }

    public var sub_eASSEMBLY_JOINT: eASSEMBLY_JOINT? {	// [18]
      return self.complexEntity.entityReference(eASSEMBLY_JOINT.self)
    }

    public var sub_eCOMPONENT_FEATURE_JOINT: eCOMPONENT_FEATURE_JOINT? {	// [19]
      return self.complexEntity.entityReference(eCOMPONENT_FEATURE_JOINT.self)
    }

    public var sub_eSQUARE_U_PROFILE: eSQUARE_U_PROFILE? {	// [20]
      return self.complexEntity.entityReference(eSQUARE_U_PROFILE.self)
    }

    public var sub_eCOMPONENT_PATH_SHAPE_ASPECT: eCOMPONENT_PATH_SHAPE_ASPECT? {	// [21]
      return self.complexEntity.entityReference(eCOMPONENT_PATH_SHAPE_ASPECT.self)
    }

    public var sub_eRECTANGULAR_CLOSED_PROFILE: eRECTANGULAR_CLOSED_PROFILE? {	// [22]
      return self.complexEntity.entityReference(eRECTANGULAR_CLOSED_PROFILE.self)
    }

    public var sub_eCLOSED_PATH_PROFILE: eCLOSED_PATH_PROFILE? {	// [23]
      return self.complexEntity.entityReference(eCLOSED_PATH_PROFILE.self)
    }

    public var sub_eGEOMETRIC_CONTACT: eGEOMETRIC_CONTACT? {	// [24]
      return self.complexEntity.entityReference(eGEOMETRIC_CONTACT.self)
    }

    public var sub_eAPEX: eAPEX? {	// [25]
      return self.complexEntity.entityReference(eAPEX.self)
    }

    public var sub_eGEOMETRIC_ALIGNMENT: eGEOMETRIC_ALIGNMENT? {	// [26]
      return self.complexEntity.entityReference(eGEOMETRIC_ALIGNMENT.self)
    }

    public var sub_eCENTRE_OF_SYMMETRY: eCENTRE_OF_SYMMETRY? {	// [27]
      return self.complexEntity.entityReference(eCENTRE_OF_SYMMETRY.self)
    }

    public var sub_eGEOMETRIC_INTERSECTION: eGEOMETRIC_INTERSECTION? {	// [28]
      return self.complexEntity.entityReference(eGEOMETRIC_INTERSECTION.self)
    }

    public var sub_ePARALLEL_OFFSET: ePARALLEL_OFFSET? {	// [29]
      return self.complexEntity.entityReference(ePARALLEL_OFFSET.self)
    }

    public var sub_ePERPENDICULAR_TO: ePERPENDICULAR_TO? {	// [30]
      return self.complexEntity.entityReference(ePERPENDICULAR_TO.self)
    }

    public var sub_eEXTENSION: eEXTENSION? {	// [31]
      return self.complexEntity.entityReference(eEXTENSION.self)
    }

    public var sub_eTANGENT: eTANGENT? {	// [32]
      return self.complexEntity.entityReference(eTANGENT.self)
    }

    public var sub_eDERIVED_SHAPE_ASPECT: eDERIVED_SHAPE_ASPECT? {	// [33]
      return self.complexEntity.entityReference(eDERIVED_SHAPE_ASPECT.self)
    }

    public var sub_eDEFAULT_MODEL_GEOMETRIC_VIEW: eDEFAULT_MODEL_GEOMETRIC_VIEW? {	// [34]
      return self.complexEntity.entityReference(eDEFAULT_MODEL_GEOMETRIC_VIEW.self)
    }

    public var sub_eCHAMFER: eCHAMFER? {	// [35]
      return self.complexEntity.entityReference(eCHAMFER.self)
    }

    public var sub_eEDGE_ROUND: eEDGE_ROUND? {	// [36]
      return self.complexEntity.entityReference(eEDGE_ROUND.self)
    }

    public var sub_eFILLET: eFILLET? {	// [37]
      return self.complexEntity.entityReference(eFILLET.self)
    }

    public var sub_eTRANSITION_FEATURE: eTRANSITION_FEATURE? {	// [38]
      return self.complexEntity.entityReference(eTRANSITION_FEATURE.self)
    }

    public var sub_eDATUM_SYSTEM: eDATUM_SYSTEM? {	// [39]
      return self.complexEntity.entityReference(eDATUM_SYSTEM.self)
    }

    public var sub_eHOLE_BOTTOM: eHOLE_BOTTOM? {	// [40]
      return self.complexEntity.entityReference(eHOLE_BOTTOM.self)
    }

    public var sub_eHARNESS_SEGMENT: eHARNESS_SEGMENT? {	// [41]
      return self.complexEntity.entityReference(eHARNESS_SEGMENT.self)
    }

    public var sub_eNGON_CLOSED_PROFILE: eNGON_CLOSED_PROFILE? {	// [42]
      return self.complexEntity.entityReference(eNGON_CLOSED_PROFILE.self)
    }

    public var sub_eJOGGLE_TERMINATION: eJOGGLE_TERMINATION? {	// [43]
      return self.complexEntity.entityReference(eJOGGLE_TERMINATION.self)
    }

    public var sub_eMATED_PART_RELATIONSHIP: eMATED_PART_RELATIONSHIP? {	// [44]
      return self.complexEntity.entityReference(eMATED_PART_RELATIONSHIP.self)
    }

    public var sub_eTHREAD_RUNOUT: eTHREAD_RUNOUT? {	// [45]
      return self.complexEntity.entityReference(eTHREAD_RUNOUT.self)
    }

    public var sub_eOPEN_PATH_PROFILE: eOPEN_PATH_PROFILE? {	// [46]
      return self.complexEntity.entityReference(eOPEN_PATH_PROFILE.self)
    }

    public var sub_eTEE_PROFILE: eTEE_PROFILE? {	// [47]
      return self.complexEntity.entityReference(eTEE_PROFILE.self)
    }

    public var sub_eVEE_PROFILE: eVEE_PROFILE? {	// [48]
      return self.complexEntity.entityReference(eVEE_PROFILE.self)
    }

    public var sub_eASSEMBLY_SHAPE_JOINT: eASSEMBLY_SHAPE_JOINT? {	// [49]
      return self.complexEntity.entityReference(eASSEMBLY_SHAPE_JOINT.self)
    }

    public var sub_eSYMMETRIC_SHAPE_ASPECT: eSYMMETRIC_SHAPE_ASPECT? {	// [50]
      return self.complexEntity.entityReference(eSYMMETRIC_SHAPE_ASPECT.self)
    }

    public var sub_eLINEAR_PROFILE: eLINEAR_PROFILE? {	// [51]
      return self.complexEntity.entityReference(eLINEAR_PROFILE.self)
    }

    public var sub_eASSEMBLY_SHAPE_CONSTRAINT: eASSEMBLY_SHAPE_CONSTRAINT? {	// [52]
      return self.complexEntity.entityReference(eASSEMBLY_SHAPE_CONSTRAINT.self)
    }

    public var sub_eCONNECTIVITY_DEFINITION: eCONNECTIVITY_DEFINITION? {	// [53]
      return self.complexEntity.entityReference(eCONNECTIVITY_DEFINITION.self)
    }

    public var sub_ePLACED_DATUM_TARGET_FEATURE: ePLACED_DATUM_TARGET_FEATURE? {	// [54]
      return self.complexEntity.entityReference(ePLACED_DATUM_TARGET_FEATURE.self)
    }

    public var sub_eDATUM_TARGET: eDATUM_TARGET? {	// [55]
      return self.complexEntity.entityReference(eDATUM_TARGET.self)
    }

    public var sub_eROUNDED_U_PROFILE: eROUNDED_U_PROFILE? {	// [56]
      return self.complexEntity.entityReference(eROUNDED_U_PROFILE.self)
    }

    public var sub_ePOCKET_BOTTOM: ePOCKET_BOTTOM? {	// [57]
      return self.complexEntity.entityReference(ePOCKET_BOTTOM.self)
    }

    public var sub_eBEAD_END: eBEAD_END? {	// [58]
      return self.complexEntity.entityReference(eBEAD_END.self)
    }

    public var sub_eSLOT_END: eSLOT_END? {	// [59]
      return self.complexEntity.entityReference(eSLOT_END.self)
    }

    public var sub_eDIRECTED_ANGLE: eDIRECTED_ANGLE? {	// [60]
      return self.complexEntity.entityReference(eDIRECTED_ANGLE.self)
    }

    public var sub_eCHAMFER_OFFSET: eCHAMFER_OFFSET? {	// [61]
      return self.complexEntity.entityReference(eCHAMFER_OFFSET.self)
    }

    public var sub_eDIRECTED_TOLERANCE_ZONE: eDIRECTED_TOLERANCE_ZONE? {	// [62]
      return self.complexEntity.entityReference(eDIRECTED_TOLERANCE_ZONE.self)
    }

    public var sub_eORIENTED_TOLERANCE_ZONE: eORIENTED_TOLERANCE_ZONE? {	// [63]
      return self.complexEntity.entityReference(eORIENTED_TOLERANCE_ZONE.self)
    }

    public var sub_eTOLERANCE_ZONE_WITH_DATUM: eTOLERANCE_ZONE_WITH_DATUM? {	// [64]
      return self.complexEntity.entityReference(eTOLERANCE_ZONE_WITH_DATUM.self)
    }

    public var sub_eTOLERANCE_ZONE: eTOLERANCE_ZONE? {	// [65]
      return self.complexEntity.entityReference(eTOLERANCE_ZONE.self)
    }

    public var sub_eCROSS_SECTIONAL_ALTERNATIVE_SHAPE_ELEMENT: eCROSS_SECTIONAL_ALTERNATIVE_SHAPE_ELEMENT? {	// [66]
      return self.complexEntity.entityReference(eCROSS_SECTIONAL_ALTERNATIVE_SHAPE_ELEMENT.self)
    }

    public var sub_eCROSS_SECTIONAL_GROUP_SHAPE_ELEMENT_WITH_TUBULAR_COVER: eCROSS_SECTIONAL_GROUP_SHAPE_ELEMENT_WITH_TUBULAR_COVER? {	// [67]
      return self.complexEntity.entityReference(eCROSS_SECTIONAL_GROUP_SHAPE_ELEMENT_WITH_TUBULAR_COVER.self)
    }

    public var sub_eCROSS_SECTIONAL_GROUP_SHAPE_ELEMENT_WITH_LACING: eCROSS_SECTIONAL_GROUP_SHAPE_ELEMENT_WITH_LACING? {	// [68]
      return self.complexEntity.entityReference(eCROSS_SECTIONAL_GROUP_SHAPE_ELEMENT_WITH_LACING.self)
    }

    public var sub_eTWISTED_CROSS_SECTIONAL_GROUP_SHAPE_ELEMENT: eTWISTED_CROSS_SECTIONAL_GROUP_SHAPE_ELEMENT? {	// [69]
      return self.complexEntity.entityReference(eTWISTED_CROSS_SECTIONAL_GROUP_SHAPE_ELEMENT.self)
    }

    public var sub_eCROSS_SECTIONAL_GROUP_SHAPE_ELEMENT: eCROSS_SECTIONAL_GROUP_SHAPE_ELEMENT? {	// [70]
      return self.complexEntity.entityReference(eCROSS_SECTIONAL_GROUP_SHAPE_ELEMENT.self)
    }

    public var sub_eCROSS_SECTIONAL_PART_SHAPE_ELEMENT: eCROSS_SECTIONAL_PART_SHAPE_ELEMENT? {	// [71]
      return self.complexEntity.entityReference(eCROSS_SECTIONAL_PART_SHAPE_ELEMENT.self)
    }

    public var sub_ePARTIAL_CIRCULAR_PROFILE: ePARTIAL_CIRCULAR_PROFILE? {	// [72]
      return self.complexEntity.entityReference(ePARTIAL_CIRCULAR_PROFILE.self)
    }

    public var sub_eCONNECTION_ZONE_INTERFACE_PLANE_RELATIONSHIP: eCONNECTION_ZONE_INTERFACE_PLANE_RELATIONSHIP? {	// [73]
      return self.complexEntity.entityReference(eCONNECTION_ZONE_INTERFACE_PLANE_RELATIONSHIP.self)
    }

    public var sub_eCOMMON_DATUM: eCOMMON_DATUM? {	// [74]
      return self.complexEntity.entityReference(eCOMMON_DATUM.self)
    }

    public var sub_eDATUM: eDATUM? {	// [75]
      return self.complexEntity.entityReference(eDATUM.self)
    }

    public var sub_eCOUNTERDRILL_HOLE_OCCURRENCE_IN_ASSEMBLY: eCOUNTERDRILL_HOLE_OCCURRENCE_IN_ASSEMBLY? {	// [76]
      return self.complexEntity.entityReference(eCOUNTERDRILL_HOLE_OCCURRENCE_IN_ASSEMBLY.self)
    }

    public var sub_eCOUNTERDRILL_HOLE_OCCURRENCE: eCOUNTERDRILL_HOLE_OCCURRENCE? {	// [77]
      return self.complexEntity.entityReference(eCOUNTERDRILL_HOLE_OCCURRENCE.self)
    }

    public var sub_eCOUNTERSINK_HOLE_OCCURRENCE_IN_ASSEMBLY: eCOUNTERSINK_HOLE_OCCURRENCE_IN_ASSEMBLY? {	// [78]
      return self.complexEntity.entityReference(eCOUNTERSINK_HOLE_OCCURRENCE_IN_ASSEMBLY.self)
    }

    public var sub_eCOUNTERSINK_HOLE_OCCURRENCE: eCOUNTERSINK_HOLE_OCCURRENCE? {	// [79]
      return self.complexEntity.entityReference(eCOUNTERSINK_HOLE_OCCURRENCE.self)
    }

    public var sub_eSPOTFACE_OCCURRENCE_IN_ASSEMBLY: eSPOTFACE_OCCURRENCE_IN_ASSEMBLY? {	// [80]
      return self.complexEntity.entityReference(eSPOTFACE_OCCURRENCE_IN_ASSEMBLY.self)
    }

    public var sub_eCOUNTERBORE_HOLE_OCCURRENCE_IN_ASSEMBLY: eCOUNTERBORE_HOLE_OCCURRENCE_IN_ASSEMBLY? {	// [81]
      return self.complexEntity.entityReference(eCOUNTERBORE_HOLE_OCCURRENCE_IN_ASSEMBLY.self)
    }

    public var sub_eSPOTFACE_OCCURRENCE: eSPOTFACE_OCCURRENCE? {	// [82]
      return self.complexEntity.entityReference(eSPOTFACE_OCCURRENCE.self)
    }

    public var sub_eCOUNTERBORE_HOLE_OCCURRENCE: eCOUNTERBORE_HOLE_OCCURRENCE? {	// [83]
      return self.complexEntity.entityReference(eCOUNTERBORE_HOLE_OCCURRENCE.self)
    }

    public var sub_eSHAPE_ASPECT_OCCURRENCE: eSHAPE_ASPECT_OCCURRENCE? {	// [84]
      return self.complexEntity.entityReference(eSHAPE_ASPECT_OCCURRENCE.self)
    }

    public var sub_eCOMPOSITE_UNIT_SHAPE_ASPECT: eCOMPOSITE_UNIT_SHAPE_ASPECT? {	// [85]
      return self.complexEntity.entityReference(eCOMPOSITE_UNIT_SHAPE_ASPECT.self)
    }

    public var sub_eALL_AROUND_SHAPE_ASPECT: eALL_AROUND_SHAPE_ASPECT? {	// [86]
      return self.complexEntity.entityReference(eALL_AROUND_SHAPE_ASPECT.self)
    }

    public var sub_eBETWEEN_SHAPE_ASPECT: eBETWEEN_SHAPE_ASPECT? {	// [87]
      return self.complexEntity.entityReference(eBETWEEN_SHAPE_ASPECT.self)
    }

    public var sub_eCONTINUOUS_SHAPE_ASPECT: eCONTINUOUS_SHAPE_ASPECT? {	// [88]
      return self.complexEntity.entityReference(eCONTINUOUS_SHAPE_ASPECT.self)
    }

    public var sub_eCOMPOSITE_GROUP_SHAPE_ASPECT: eCOMPOSITE_GROUP_SHAPE_ASPECT? {	// [89]
      return self.complexEntity.entityReference(eCOMPOSITE_GROUP_SHAPE_ASPECT.self)
    }

    public var sub_eCOMPOSITE_SHAPE_ASPECT: eCOMPOSITE_SHAPE_ASPECT? {	// [90]
      return self.complexEntity.entityReference(eCOMPOSITE_SHAPE_ASPECT.self)
    }

    public var sub_eHARNESS_NODE: eHARNESS_NODE? {	// [91]
      return self.complexEntity.entityReference(eHARNESS_NODE.self)
    }

    public var sub_eCONTACTING_FEATURE: eCONTACTING_FEATURE? {	// [92]
      return self.complexEntity.entityReference(eCONTACTING_FEATURE.self)
    }

    public var sub_eDIMENSIONAL_LOCATION_WITH_DATUM_FEATURE: eDIMENSIONAL_LOCATION_WITH_DATUM_FEATURE? {	// [93]
      return self.complexEntity.entityReference(eDIMENSIONAL_LOCATION_WITH_DATUM_FEATURE.self)
    }

    public var sub_eDIMENSIONAL_SIZE_WITH_DATUM_FEATURE: eDIMENSIONAL_SIZE_WITH_DATUM_FEATURE? {	// [94]
      return self.complexEntity.entityReference(eDIMENSIONAL_SIZE_WITH_DATUM_FEATURE.self)
    }

    public var sub_eDATUM_FEATURE: eDATUM_FEATURE? {	// [95]
      return self.complexEntity.entityReference(eDATUM_FEATURE.self)
    }

    public var sub_eTERMINAL_LOCATION_GROUP: eTERMINAL_LOCATION_GROUP? {	// [96]
      return self.complexEntity.entityReference(eTERMINAL_LOCATION_GROUP.self)
    }

    public var sub_eTERMINAL_FEATURE: eTERMINAL_FEATURE? {	// [97]
      return self.complexEntity.entityReference(eTERMINAL_FEATURE.self)
    }

    public var sub_eCONTACT_FEATURE: eCONTACT_FEATURE? {	// [98]
      return self.complexEntity.entityReference(eCONTACT_FEATURE.self)
    }

    public var sub_ePROFILE_FLOOR: ePROFILE_FLOOR? {	// [99]
      return self.complexEntity.entityReference(ePROFILE_FLOOR.self)
    }

    public var sub_eASSEMBLY_BOND_DEFINITION: eASSEMBLY_BOND_DEFINITION? {	// [100]
      return self.complexEntity.entityReference(eASSEMBLY_BOND_DEFINITION.self)
    }

    public var sub_eCROSS_SECTIONAL_OCCURRENCE_SHAPE_ELEMENT: eCROSS_SECTIONAL_OCCURRENCE_SHAPE_ELEMENT? {	// [101]
      return self.complexEntity.entityReference(eCROSS_SECTIONAL_OCCURRENCE_SHAPE_ELEMENT.self)
    }

    public var sub_ePLACED_FEATURE: ePLACED_FEATURE? {	// [102]
      return self.complexEntity.entityReference(ePLACED_FEATURE.self)
    }

    public var sub_eRIB_TOP_FLOOR: eRIB_TOP_FLOOR? {	// [103]
      return self.complexEntity.entityReference(eRIB_TOP_FLOOR.self)
    }

    public var sub_eAPPLIED_AREA: eAPPLIED_AREA? {	// [104]
      return self.complexEntity.entityReference(eAPPLIED_AREA.self)
    }

    public var sub_eCOMPONENT_MATING_CONSTRAINT_CONDITION: eCOMPONENT_MATING_CONSTRAINT_CONDITION? {	// [105]
      return self.complexEntity.entityReference(eCOMPONENT_MATING_CONSTRAINT_CONDITION.self)
    }

    public var sub_eMODIFIED_PATTERN: eMODIFIED_PATTERN? {	// [106]
      return self.complexEntity.entityReference(eMODIFIED_PATTERN.self)
    }


    //MARK: ATTRIBUTES
    // OWNER: (2 AMBIGUOUS REFs)

    // ITEMS: (3 AMBIGUOUS REFs)

    // MODIFIED_COMPONENTS: (3 AMBIGUOUS REFs)

    // DEFINITION: (7 AMBIGUOUS REFs)

    /// __INVERSE__ attribute
    /// observing eSHAPE_ASPECT_DERIVING_RELATIONSHIP .RELATING_SHAPE_ASPECT
    /// - origin: SUB( ``eDERIVED_SHAPE_ASPECT`` )
    public var DERIVING_RELATIONSHIPS: (SDAI.SET<eSHAPE_ASPECT_DERIVING_RELATIONSHIP>/*[1:nil]*/ )?  {
      get {
        return sub_eDERIVED_SHAPE_ASPECT?.partialEntity._deriving_relationships
      }
    }

    /// __EXPLICIT(DYNAMIC)__ attribute
    /// - origin: SELF( ``eSHAPE_ASPECT`` )
    public var PRODUCT_DEFINITIONAL: SDAI.LOGICAL {
      get {
        if let resolved = _shape_aspect._product_definitional__provider(complex: self.complexEntity) {
          let value = resolved._product_definitional__getter(complex: self.complexEntity)
          return value
        }
        else {
          return SDAI.UNWRAP( self.partialEntity._product_definitional )
        }
      }
      set(newValue) {
        if let _ = _shape_aspect._product_definitional__provider(complex: self.complexEntity) { return }

        let partial = self.partialEntity
        partial._product_definitional = SDAI.LOGICAL(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eSHAPE_ASPECT`` )
    public var DESCRIPTION: tTEXT?  {
      get {
        return self.partialEntity._description
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._description = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eTOLERANCE_ZONE`` )
    public var FORM: eTOLERANCE_ZONE_FORM?  {
      get {
        return sub_eTOLERANCE_ZONE?.partialEntity._form
      }
      set(newValue) {
        guard let partial = sub_eTOLERANCE_ZONE?.super_eTOLERANCE_ZONE.partialEntity else { return }
        partial._form = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eDATUM_TARGET`` )
    public var TARGET_ID: tIDENTIFIER?  {
      get {
        return sub_eDATUM_TARGET?.partialEntity._target_id
      }
      set(newValue) {
        guard let partial = sub_eDATUM_TARGET?.super_eDATUM_TARGET.partialEntity else { return }
        partial._target_id = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCOMPONENT_PATH_SHAPE_ASPECT`` )
    public var COMPONENT_SHAPE_ASPECT: sINTERNAL_OR_REFLECTED_SHAPE_ASPECT?  {
      get {
        return sub_eCOMPONENT_PATH_SHAPE_ASPECT?.partialEntity._component_shape_aspect
      }
      set(newValue) {
        guard let partial = sub_eCOMPONENT_PATH_SHAPE_ASPECT?.super_eCOMPONENT_PATH_SHAPE_ASPECT
          .partialEntity else { return }
        partial._component_shape_aspect = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCONSTITUENT_SHAPE_ASPECT`` )
    public var PARENT: eSHAPE_ASPECT?  {
      get {
        return sub_eCONSTITUENT_SHAPE_ASPECT?.partialEntity._parent
      }
      set(newValue) {
        guard let partial = sub_eCONSTITUENT_SHAPE_ASPECT?.super_eCONSTITUENT_SHAPE_ASPECT.partialEntity
          else { return }
        partial._parent = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eORIENTED_TOLERANCE_ZONE`` )
    public var ORIENTATION: nORIENTED_TOLERANCE_ZONE_TYPE?  {
      get {
        return sub_eORIENTED_TOLERANCE_ZONE?.partialEntity._orientation
      }
      set(newValue) {
        guard let partial = sub_eORIENTED_TOLERANCE_ZONE?.super_eORIENTED_TOLERANCE_ZONE.partialEntity
          else { return }
        partial._orientation = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT(DYNAMIC)__ attribute
    /// - origin: SELF( ``eSHAPE_ASPECT`` )
    public var OF_SHAPE: ePRODUCT_DEFINITION_SHAPE {
      get {
        if let resolved = _shape_aspect._of_shape__provider(complex: self.complexEntity) {
          let value = resolved._of_shape__getter(complex: self.complexEntity)
          return value
        }
        else {
          return SDAI.UNWRAP( self.partialEntity._of_shape )
        }
      }
      set(newValue) {
        if let _ = _shape_aspect._of_shape__provider(complex: self.complexEntity) { return }

        let partial = self.partialEntity
        partial._of_shape = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eTOLERANCE_ZONE_WITH_DATUM`` )
    public var DATUM_REFERENCE: eDATUM_SYSTEM?  {
      get {
        return sub_eTOLERANCE_ZONE_WITH_DATUM?.partialEntity._datum_reference
      }
      set(newValue) {
        guard let partial = sub_eTOLERANCE_ZONE_WITH_DATUM?.super_eTOLERANCE_ZONE_WITH_DATUM.partialEntity
          else { return }
        partial._datum_reference = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eDATUM`` )
    public var IDENTIFICATION: tIDENTIFIER?  {
      get {
        return sub_eDATUM?.partialEntity._identification
      }
      set(newValue) {
        guard let partial = sub_eDATUM?.super_eDATUM.partialEntity else { return }
        partial._identification = SDAI.UNWRAP(newValue)
      }
    }

    /// __INVERSE__ attribute
    /// observing eSHAPE_ASPECT_RELATIONSHIP .RELATED_SHAPE_ASPECT
    /// - origin: SUB( ``eDATUM`` )
    public var ESTABLISHED_BY_RELATIONSHIPS: (SDAI.SET<eSHAPE_ASPECT_RELATIONSHIP>/*[1:nil]*/ )?  {
      get {
        return sub_eDATUM?.partialEntity._established_by_relationships
      }
    }

    /// __EXPLICIT(OBSERVED)__ attribute
    /// - origin: SUB( ``eDATUM_SYSTEM`` )
    public var CONSTITUENTS: (SDAI.LIST_UNIQUE<eDATUM_REFERENCE_COMPARTMENT>/*[1:3]*/ )?  {
      get {
        return sub_eDATUM_SYSTEM?.partialEntity._constituents
      }
      set(newValue) {
        guard let partial = sub_eDATUM_SYSTEM?.super_eDATUM_SYSTEM.partialEntity else { return }
        partial._constituents = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``ePLACED_DATUM_TARGET_FEATURE`` )
    public var REPRESENTATION_ASSOCIATIONS: (SDAI.SET<ePROPERTY_DEFINITION_REPRESENTATION>/*[0:nil]*/ )?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"REPRESENTATION_ASSOCIATIONS") {
          return cached.value as! (SDAI.SET<ePROPERTY_DEFINITION_REPRESENTATION>/*[0:nil]*/ )? 
        }
        guard let origin = sub_ePLACED_DATUM_TARGET_FEATURE else { return nil }
        let value = SDAI.SET<ePROPERTY_DEFINITION_REPRESENTATION>(
          origin.partialEntity._representation_associations__getter(SELF: origin))
        updateCache(derivedAttributeName:"REPRESENTATION_ASSOCIATIONS", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eORIENTED_TOLERANCE_ZONE`` )
    public var ANGLE: ePLANE_ANGLE_MEASURE_WITH_UNIT?  {
      get {
        return sub_eORIENTED_TOLERANCE_ZONE?.partialEntity._angle
      }
      set(newValue) {
        guard let partial = sub_eORIENTED_TOLERANCE_ZONE?.super_eORIENTED_TOLERANCE_ZONE.partialEntity
          else { return }
        partial._angle = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eGENERAL_DATUM_REFERENCE`` )
    public var MODIFIERS: (SDAI.SET<sDATUM_REFERENCE_MODIFIER>/*[1:nil]*/ )?  {
      get {
        return sub_eGENERAL_DATUM_REFERENCE?.partialEntity._modifiers
      }
      set(newValue) {
        guard let partial = sub_eGENERAL_DATUM_REFERENCE?.super_eGENERAL_DATUM_REFERENCE.partialEntity
          else { return }
        partial._modifiers = newValue
      }
    }

    /// __INVERSE__ attribute
    /// observing eSHAPE_ASPECT_RELATIONSHIP .RELATING_SHAPE_ASPECT
    /// - origin: SUB( ``eCOMPOSITE_SHAPE_ASPECT`` )
    public var COMPONENT_RELATIONSHIPS: (SDAI.SET<eSHAPE_ASPECT_RELATIONSHIP>/*[2:nil]*/ )?  {
      get {
        return sub_eCOMPOSITE_SHAPE_ASPECT?.partialEntity._component_relationships
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eGENERAL_DATUM_REFERENCE`` )
    public var BASE: sDATUM_OR_COMMON_DATUM?  {
      get {
        return sub_eGENERAL_DATUM_REFERENCE?.partialEntity._base
      }
      set(newValue) {
        guard let partial = sub_eGENERAL_DATUM_REFERENCE?.super_eGENERAL_DATUM_REFERENCE.partialEntity
          else { return }
        partial._base = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eGENERAL_DATUM_REFERENCE`` )
    public var BASE_COMMON_DATUM_LIST: tCOMMON_DATUM_LIST?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"BASE_COMMON_DATUM_LIST") {
          return cached.value as! tCOMMON_DATUM_LIST? 
        }
        guard let origin = sub_eGENERAL_DATUM_REFERENCE else { return nil }
        let value = tCOMMON_DATUM_LIST(origin.partialEntity._base_common_datum_list__getter(SELF: origin))
        updateCache(derivedAttributeName:"BASE_COMMON_DATUM_LIST", value:value)
        return value
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SELF( ``eSHAPE_ASPECT`` )
    public var ID: tIDENTIFIER?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"ID") {
          return cached.value as! tIDENTIFIER? 
        }
        let origin = self
        let value = origin.partialEntity._id__getter(SELF: origin)
        updateCache(derivedAttributeName:"ID", value:value)
        return value
      }
    }

    /// __INVERSE__ attribute
    /// observing eSHAPE_ASPECT_RELATIONSHIP .RELATING_SHAPE_ASPECT
    /// - origin: SUB( ``eDATUM_FEATURE`` )
    public var FEATURE_BASIS_RELATIONSHIP: (SDAI.SET<eSHAPE_ASPECT_RELATIONSHIP>/*[1:nil]*/ )?  {
      get {
        return sub_eDATUM_FEATURE?.partialEntity._feature_basis_relationship
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eDIRECTED_TOLERANCE_ZONE`` )
    public var DIRECTION: nDIRECTED_TOLERANCE_ZONE_TYPE?  {
      get {
        return sub_eDIRECTED_TOLERANCE_ZONE?.partialEntity._direction
      }
      set(newValue) {
        guard let partial = sub_eDIRECTED_TOLERANCE_ZONE?.super_eDIRECTED_TOLERANCE_ZONE.partialEntity
          else { return }
        partial._direction = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT REDEF__ attribute
    /// - origin: SUB( ``eCOMPONENT_FEATURE_JOINT`` )
    public var RELATED_SHAPE_ASPECT: eCOMPONENT_FEATURE?  {
      get {
        return eCOMPONENT_FEATURE( sub_eCOMPONENT_FEATURE_JOINT?.super_eSHAPE_ASPECT_RELATIONSHIP
          .partialEntity._related_shape_aspect )
      }
      set(newValue) {
        guard let partial = sub_eCOMPONENT_FEATURE_JOINT?.super_eSHAPE_ASPECT_RELATIONSHIP.partialEntity
          else { return }
        partial._related_shape_aspect = SDAI.UNWRAP(
          eSHAPE_ASPECT(newValue))
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eTOLERANCE_ZONE`` )
    public var DEFINING_TOLERANCE: (SDAI.SET<sTOLERANCE_ZONE_TARGET>/*[1:nil]*/ )?  {
      get {
        return sub_eTOLERANCE_ZONE?.partialEntity._defining_tolerance
      }
      set(newValue) {
        guard let partial = sub_eTOLERANCE_ZONE?.super_eTOLERANCE_ZONE.partialEntity else { return }
        partial._defining_tolerance = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT REDEF(DERIVE)__ attribute
    /// - origin: SUB( ``eMATED_PART_RELATIONSHIP`` )
    public var ASSIGNED_GROUP: eMATED_PART_RELATIONSHIP?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"ASSIGNED_GROUP") {
          return cached.value as! eMATED_PART_RELATIONSHIP? 
        }
        guard let origin = sub_eMATED_PART_RELATIONSHIP else { return nil }
        let value = eMATED_PART_RELATIONSHIP(origin.partialEntity._assigned_group__getter(SELF: origin))
        updateCache(derivedAttributeName:"ASSIGNED_GROUP", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCOMPONENT_PATH_SHAPE_ASPECT`` )
    public var LOCATION: sMULTI_OR_NEXT_ASSEMBLY_USAGE_OCCURRENCE?  {
      get {
        return sub_eCOMPONENT_PATH_SHAPE_ASPECT?.partialEntity._location
      }
      set(newValue) {
        guard let partial = sub_eCOMPONENT_PATH_SHAPE_ASPECT?.super_eCOMPONENT_PATH_SHAPE_ASPECT
          .partialEntity else { return }
        partial._location = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eSHAPE_ASPECT`` )
    public var NAME: tLABEL {
      get {
        return SDAI.UNWRAP( self.partialEntity._name )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._name = SDAI.UNWRAP(newValue)
      }
    }

    /// __INVERSE__ attribute
    /// observing eSHAPE_ASPECT_RELATIONSHIP .RELATED_SHAPE_ASPECT
    /// - origin: SUB( ``eSYMMETRIC_SHAPE_ASPECT`` )
    public var BASIS_RELATIONSHIPS: (SDAI.SET<eSHAPE_ASPECT_DERIVING_RELATIONSHIP>/*[1:nil]*/ )?  {
      get {
        return sub_eSYMMETRIC_SHAPE_ASPECT?.partialEntity._basis_relationships
      }
    }

    /// __EXPLICIT REDEF__ attribute
    /// - origin: SUB( ``eCOMPONENT_FEATURE_JOINT`` )
    public var RELATING_SHAPE_ASPECT: eCOMPONENT_FEATURE?  {
      get {
        return eCOMPONENT_FEATURE( sub_eCOMPONENT_FEATURE_JOINT?.super_eSHAPE_ASPECT_RELATIONSHIP
          .partialEntity._relating_shape_aspect )
      }
      set(newValue) {
        guard let partial = sub_eCOMPONENT_FEATURE_JOINT?.super_eSHAPE_ASPECT_RELATIONSHIP.partialEntity
          else { return }
        partial._relating_shape_aspect = SDAI.UNWRAP(
          eSHAPE_ASPECT(newValue))
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePARALLEL_OFFSET`` )
    public var OFFSET: eMEASURE_WITH_UNIT?  {
      get {
        return sub_ePARALLEL_OFFSET?.partialEntity._offset
      }
      set(newValue) {
        guard let partial = sub_ePARALLEL_OFFSET?.super_ePARALLEL_OFFSET.partialEntity else { return }
        partial._offset = SDAI.UNWRAP(newValue)
      }
    }

    /// __INVERSE__ attribute
    /// observing eSHAPE_ASPECT_RELATIONSHIP .RELATING_SHAPE_ASPECT
    /// - origin: SUB( ``eDATUM_TARGET`` )
    public var TARGET_BASIS_RELATIONSHIP: (SDAI.SET<eSHAPE_ASPECT_RELATIONSHIP>/*[1:nil]*/ )?  {
      get {
        return sub_eDATUM_TARGET?.partialEntity._target_basis_relationship
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_shape_aspect.self) else { return nil }
      self.partialEntity = partial

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }

    //SIMPLE ENTITY REFERENCE
    public convenience init?(_ partial:_shape_aspect) {
      let complex = SDAI.ComplexEntity(entities:[partial])
      self.init(complex: complex)
    }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _shape_aspect.WHERE_wr1(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "SHAPE_ASPECT", type: self, explicitAttributeCount: 4)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eSHAPE_ASPECT.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "DERIVING_RELATIONSHIPS", keyPath: \eSHAPE_ASPECT.DERIVING_RELATIONSHIPS, 
        kind: .inverse, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "PRODUCT_DEFINITIONAL", keyPath: \eSHAPE_ASPECT.PRODUCT_DEFINITIONAL, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "DESCRIPTION", keyPath: \eSHAPE_ASPECT.DESCRIPTION, 
        kind: .explicitOptional, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "FORM", keyPath: \eSHAPE_ASPECT.FORM, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "TARGET_ID", keyPath: \eSHAPE_ASPECT.TARGET_ID, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "COMPONENT_SHAPE_ASPECT", keyPath: \eSHAPE_ASPECT.COMPONENT_SHAPE_ASPECT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "PARENT", keyPath: \eSHAPE_ASPECT.PARENT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "ORIENTATION", keyPath: \eSHAPE_ASPECT.ORIENTATION, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "OF_SHAPE", keyPath: \eSHAPE_ASPECT.OF_SHAPE, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "DATUM_REFERENCE", keyPath: \eSHAPE_ASPECT.DATUM_REFERENCE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "IDENTIFICATION", keyPath: \eSHAPE_ASPECT.IDENTIFICATION, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "ESTABLISHED_BY_RELATIONSHIPS", keyPath: \eSHAPE_ASPECT.ESTABLISHED_BY_RELATIONSHIPS, 
        kind: .inverse, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "CONSTITUENTS", keyPath: \eSHAPE_ASPECT.CONSTITUENTS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "REPRESENTATION_ASSOCIATIONS", keyPath: \eSHAPE_ASPECT.REPRESENTATION_ASSOCIATIONS, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "ANGLE", keyPath: \eSHAPE_ASPECT.ANGLE, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "MODIFIERS", keyPath: \eSHAPE_ASPECT.MODIFIERS, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "COMPONENT_RELATIONSHIPS", keyPath: \eSHAPE_ASPECT.COMPONENT_RELATIONSHIPS, 
        kind: .inverse, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "BASE", keyPath: \eSHAPE_ASPECT.BASE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "BASE_COMMON_DATUM_LIST", keyPath: \eSHAPE_ASPECT.BASE_COMMON_DATUM_LIST, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "ID", keyPath: \eSHAPE_ASPECT.ID, 
        kind: .derived, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "FEATURE_BASIS_RELATIONSHIP", keyPath: \eSHAPE_ASPECT.FEATURE_BASIS_RELATIONSHIP, 
        kind: .inverse, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "DIRECTION", keyPath: \eSHAPE_ASPECT.DIRECTION, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "RELATED_SHAPE_ASPECT", keyPath: \eSHAPE_ASPECT.RELATED_SHAPE_ASPECT, 
        kind: .explicitRedeclaring, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "DEFINING_TOLERANCE", keyPath: \eSHAPE_ASPECT.DEFINING_TOLERANCE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "ASSIGNED_GROUP", keyPath: \eSHAPE_ASPECT.ASSIGNED_GROUP, 
        kind: .derivedRedeclaring, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "LOCATION", keyPath: \eSHAPE_ASPECT.LOCATION, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "NAME", keyPath: \eSHAPE_ASPECT.NAME, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "BASIS_RELATIONSHIPS", keyPath: \eSHAPE_ASPECT.BASIS_RELATIONSHIPS, 
        kind: .inverse, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "RELATING_SHAPE_ASPECT", keyPath: \eSHAPE_ASPECT.RELATING_SHAPE_ASPECT, 
        kind: .explicitRedeclaring, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "OFFSET", keyPath: \eSHAPE_ASPECT.OFFSET, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "TARGET_BASIS_RELATIONSHIP", keyPath: \eSHAPE_ASPECT.TARGET_BASIS_RELATIONSHIP, 
        kind: .inverse, source: .subEntity, mayYieldEntityReference: true)

      //MARK: UNIQUENESS RULE REGISTRATIONS
      entityDef.addUniqunessRule(label:"UNIQUE_ur1", rule: _shape_aspect.UNIQUE_ur1)

      return entityDef
    }

  }
}

//MARK: - Entity Dynamic Attribute Protocols
internal protocol eSHAPE_ASPECT__OF_SHAPE__provider {
  func _of_shape__getter(complex: SDAI.ComplexEntity) -> 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ePRODUCT_DEFINITION_SHAPE
}
internal protocol eSHAPE_ASPECT__PRODUCT_DEFINITIONAL__provider {
  func _product_definitional__getter(complex: SDAI.ComplexEntity) -> SDAI.LOGICAL
}
