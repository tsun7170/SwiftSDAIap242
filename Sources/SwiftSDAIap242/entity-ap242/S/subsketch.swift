/* file: subsketch.swift 	 generated: Tue Nov 16 05:35:44 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY subsketch
    SUBTYPE OF ( geometric_representation_item );
      subsketch_elements  : SET [1 : ?] OF sketch_element_select;
      owning_sketch       : sketch_type_select;
    WHERE
      wr1: ( ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.NEUTRAL_SKETCH_REPRESENTATION' IN TYPEOF( 
               owning_sketch ) ) AND ( SIZEOF( QUERY ( q <* subsketch_elements | ( NOT ( owning_sketch IN 
               using_representations( q ) ) ) ) ) = 0 ) ) XOR ( ( SIZEOF( TYPEOF( owning_sketch ) * [
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.POSITIONED_SKETCH' , 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SUBSKETCH' ] ) = 1 ) AND ( SIZEOF( 
               QUERY ( q <* subsketch_elements | ( NOT ( owning_sketch IN using_items( q, [] ) ) ) ) ) = 0 ) ) );
  END_ENTITY; -- subsketch (line:31047 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	representation_item
    ATTR:  name,	TYPE: label -- EXPLICIT


  SUPER- ENTITY(2)	geometric_representation_item
    ATTR:  dim,	TYPE: dimension_count -- DERIVED
      := dimension_of( SELF )


  ENTITY(SELF)	subsketch
    ATTR:  subsketch_elements,	TYPE: SET [1 : ?] OF sketch_element_select -- EXPLICIT

    ATTR:  owning_sketch,	TYPE: sketch_type_select -- EXPLICIT


  SUB- ENTITY(4)	rigid_subsketch
    (no local attributes)

*/


//MARK: - Partial Entity
  public final class _subsketch : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eSUBSKETCH.self
    }

    //ATTRIBUTES
    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _subsketch_elements: SDAI.SET<sSKETCH_ELEMENT_SELECT>/*[1:nil]*/  // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _owning_sketch: sSKETCH_TYPE_SELECT // PLAIN EXPLICIT ATTRIBUTE

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      //SELECT data types (indirectly) referencing the current type as a member of the select list
      members.insert(SDAI.STRING(sSKETCH_TYPE_SELECT.typeName)) // -> Self
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._subsketch_elements.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._owning_sketch.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._subsketch_elements.value.isValueEqualOptionally(to: rhs._subsketch_elements.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._owning_sketch.value.isValueEqualOptionally(to: rhs._owning_sketch.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._subsketch_elements.value.isValueEqualOptionally(to: rhs._subsketch_elements.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._owning_sketch.value.isValueEqualOptionally(to: rhs._owning_sketch.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: eSUBSKETCH?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.TYPEOF(SELF.OWNING_SKETCH, IS: eNEUTRAL_SKETCH_REPRESENTATION.self)
      let _TEMP2 = SELF.SUBSKETCH_ELEMENTS
        .QUERY{ Q in 

          let _TEMP1 = USING_REPRESENTATIONS(sFOUNDED_ITEM_SELECT(/*sSKETCH_ELEMENT_SELECT*/Q))
          let _TEMP2 = SDAI.aggregate(_TEMP1, contains: eREPRESENTATION(/*sSKETCH_TYPE_SELECT*/SELF.OWNING_SKETCH))
          let _TEMP3 =  !_TEMP2
          return _TEMP3 }
      let _TEMP3 = SDAI.SIZEOF(_TEMP2)
      let _TEMP4 = _TEMP3 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      let _TEMP5 = _TEMP1 && _TEMP4
      let _TEMP6 = SDAI.TYPEOF(SELF.OWNING_SKETCH)
      let _TEMP7 = ([SDAI.AIE(SDAI.STRING("AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.POSITIONED_SKETCH")), 
        SDAI.AIE(SDAI.STRING("AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SUBSKETCH"))] 
        as [SDAI.AggregationInitializerElement<SDAI.STRING>])
      let _TEMP8 = SDAI.FORCE_OPTIONAL(_TEMP6) * SDAI.FORCE_OPTIONAL(_TEMP7)
      let _TEMP9 = SDAI.SIZEOF(_TEMP8)
      let _TEMP10 = _TEMP9 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
      let _TEMP11 = SELF.SUBSKETCH_ELEMENTS
        .QUERY{ Q in 

          let _TEMP1 = SDAI.SET<sFOUNDED_ITEM_SELECT>(SDAI.EMPLY_AGGREGATE)
          let _TEMP2 = USING_ITEMS(ITEM: sFOUNDED_ITEM_SELECT(/*sSKETCH_ELEMENT_SELECT*/Q), 
                                   CHECKED_ITEMS: _TEMP1)
          let _TEMP3 = SDAI.aggregate(_TEMP2, contains: sFOUNDED_ITEM_SELECT(/*sSKETCH_TYPE_SELECT*/SELF.OWNING_SKETCH))
          let _TEMP4 =  !_TEMP3
          return _TEMP4 }
      let _TEMP12 = SDAI.SIZEOF(_TEMP11)
      let _TEMP13 = _TEMP12 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      let _TEMP14 = _TEMP10 && _TEMP13
      let _TEMP15 = _TEMP5 .!=. _TEMP14
      return _TEMP15
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(SUBSKETCH_ELEMENTS: SDAI.SET<sSKETCH_ELEMENT_SELECT>/*[1:nil]*/ , 
                OWNING_SKETCH: sSKETCH_TYPE_SELECT) {
      self._subsketch_elements = SUBSKETCH_ELEMENTS
      self._owning_sketch = OWNING_SKETCH
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 2
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverRequiredParameter(as: SDAI.SET<
        sSKETCH_ELEMENT_SELECT>.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p1) = exchangeStructure.recoverRequiredParameter(as: sSKETCH_TYPE_SELECT.self, from: parameters[1])
      else { exchangeStructure.add(errorContext: "while recovering parameter #1 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( SUBSKETCH_ELEMENTS: p0, OWNING_SKETCH: p1 )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY subsketch
    SUBTYPE OF ( geometric_representation_item );
      subsketch_elements  : SET [1 : ?] OF sketch_element_select;
      owning_sketch       : sketch_type_select;
    WHERE
      wr1: ( ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.NEUTRAL_SKETCH_REPRESENTATION' IN TYPEOF( 
               owning_sketch ) ) AND ( SIZEOF( QUERY ( q <* subsketch_elements | ( NOT ( owning_sketch IN 
               using_representations( q ) ) ) ) ) = 0 ) ) XOR ( ( SIZEOF( TYPEOF( owning_sketch ) * [
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.POSITIONED_SKETCH' , 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SUBSKETCH' ] ) = 1 ) AND ( SIZEOF( 
               QUERY ( q <* subsketch_elements | ( NOT ( owning_sketch IN using_items( q, [] ) ) ) ) ) = 0 ) ) );
  END_ENTITY; -- subsketch (line:31047 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eSUBSKETCH : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _subsketch.self
    }
    public let partialEntity: _subsketch

    //MARK: SUPERTYPES
    public let super_eREPRESENTATION_ITEM: eREPRESENTATION_ITEM 	// [1]
    public let super_eGEOMETRIC_REPRESENTATION_ITEM: eGEOMETRIC_REPRESENTATION_ITEM 	// [2]
    public var super_eSUBSKETCH: eSUBSKETCH { return self } 	// [3]

    //MARK: SUBTYPES
    public var sub_eRIGID_SUBSKETCH: eRIGID_SUBSKETCH? {	// [4]
      return self.complexEntity.entityReference(eRIGID_SUBSKETCH.self)
    }


    //MARK: ATTRIBUTES
    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eSUBSKETCH`` )
    public var SUBSKETCH_ELEMENTS: SDAI.SET<sSKETCH_ELEMENT_SELECT>/*[1:nil]*/  {
      get {
        return SDAI.UNWRAP( self.partialEntity._subsketch_elements )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._subsketch_elements = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eSUBSKETCH`` )
    public var OWNING_SKETCH: sSKETCH_TYPE_SELECT {
      get {
        return SDAI.UNWRAP( self.partialEntity._owning_sketch )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._owning_sketch = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eREPRESENTATION_ITEM`` )
    public var NAME: tLABEL {
      get {
        return SDAI.UNWRAP( super_eREPRESENTATION_ITEM.partialEntity._name )
      }
      set(newValue) {
        let partial = super_eREPRESENTATION_ITEM.partialEntity
        partial._name = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUPER( ``eGEOMETRIC_REPRESENTATION_ITEM`` )
    public var DIM: tDIMENSION_COUNT?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"DIM") {
          return cached.value as! tDIMENSION_COUNT? 
        }
        let origin = super_eGEOMETRIC_REPRESENTATION_ITEM
        let value = tDIMENSION_COUNT(origin.partialEntity._dim__getter(SELF: origin))
        updateCache(derivedAttributeName:"DIM", value:value)
        return value
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_subsketch.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eREPRESENTATION_ITEM.self) else { return nil }
      self.super_eREPRESENTATION_ITEM = super1

      guard let super2 = complexEntity?.entityReference(eGEOMETRIC_REPRESENTATION_ITEM.self) else { return nil }
      self.super_eGEOMETRIC_REPRESENTATION_ITEM = super2

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _subsketch.WHERE_wr1(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "SUBSKETCH", type: self, explicitAttributeCount: 2)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eREPRESENTATION_ITEM.self)
      entityDef.add(supertype: eGEOMETRIC_REPRESENTATION_ITEM.self)
      entityDef.add(supertype: eSUBSKETCH.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "SUBSKETCH_ELEMENTS", keyPath: \eSUBSKETCH.SUBSKETCH_ELEMENTS, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "OWNING_SKETCH", keyPath: \eSUBSKETCH.OWNING_SKETCH, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "NAME", keyPath: \eSUBSKETCH.NAME, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "DIM", keyPath: \eSUBSKETCH.DIM, 
        kind: .derived, source: .superEntity, mayYieldEntityReference: false)

      return entityDef
    }

  }
}
