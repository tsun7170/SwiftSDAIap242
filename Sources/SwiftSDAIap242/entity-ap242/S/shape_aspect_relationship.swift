/* file: shape_aspect_relationship.swift 	 generated: Sat Aug 14 13:46:02 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY shape_aspect_relationship
    SUPERTYPE OF ( 
        ONEOF ( 
            assembly_shape_joint_item_relationship, 
            assembly_shape_constraint_item_relationship, 
            connectivity_definition_item_relationship, 
            shape_feature_fit_relationship ) );
      name                   : label;
      description            : OPTIONAL text;
      relating_shape_aspect  : shape_aspect; (* observed by
          cross_sectional_alternative_shape_element.items
          datum_target.target_basis_relationship
          cross_sectional_group_shape_element.items
          composite_shape_aspect.component_relationships
          datum_feature.feature_basis_relationship
          *)
      related_shape_aspect   : shape_aspect; (* observed by
          symmetric_shape_aspect.basis_relationships
          datum.established_by_relationships
          *)
    DERIVE
      id  : identifier := get_id_value( SELF );
    WHERE
      wr1: ( SIZEOF( USEDIN( SELF, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ID_ATTRIBUTE.'
               + 'IDENTIFIED_ITEM'  ) ) <= 1 );
  END_ENTITY; -- shape_aspect_relationship (line:28670 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  ENTITY(SELF)	shape_aspect_relationship
    ATTR:  name,	TYPE: label -- EXPLICIT

    ATTR:  description,	TYPE: OPTIONAL text -- EXPLICIT

    ATTR:  relating_shape_aspect,	TYPE: shape_aspect -- EXPLICIT
      -- observed by
        ENTITY(1): cross_sectional_alternative_shape_element,	ATTR: items,	TYPE: SET [2 : ?] OF
          shape_aspect_relationship
        ENTITY(2): datum_target,	ATTR: target_basis_relationship,	TYPE: SET [1 : ?] OF
          shape_aspect_relationship
        ENTITY(3): cross_sectional_group_shape_element,	ATTR: items,	TYPE: SET [1 : ?] OF
          shape_aspect_relationship
        ENTITY(4): composite_shape_aspect,	ATTR: component_relationships,	TYPE: SET [2 : ?] OF
          shape_aspect_relationship
        ENTITY(5): datum_feature,	ATTR: feature_basis_relationship,	TYPE: SET [1 : ?] OF
          shape_aspect_relationship
      -- possibly overriden by
          ENTITY: connectivity_definition_item_relationship,	TYPE: connectivity_definition
          ENTITY: assembly_shape_joint_item_relationship,	TYPE: assembly_shape_joint
          ENTITY: component_feature_joint,	TYPE: component_feature
          ENTITY: assembly_shape_constraint_item_relationship,	TYPE: assembly_shape_constraint
          ENTITY: contact_feature_fit_relationship,	TYPE: contact_feature
          ENTITY: component_feature_relationship,	TYPE: component_feature
          ENTITY: shape_aspect_deriving_relationship,	TYPE: derived_shape_aspect	(OBSERVED)

    ATTR:  related_shape_aspect,	TYPE: shape_aspect -- EXPLICIT
      -- observed by
        ENTITY(1): symmetric_shape_aspect,	ATTR: basis_relationships,	TYPE: SET [1 : ?] OF
          shape_aspect_deriving_relationship
        ENTITY(2): datum,	ATTR: established_by_relationships,	TYPE: SET [1 : ?] OF shape_aspect_relationship
      -- possibly overriden by
          ENTITY: component_feature_joint,	TYPE: component_feature
          ENTITY: contact_feature_fit_relationship,	TYPE: contact_feature
          ENTITY: component_feature_relationship,	TYPE: component_feature
          ENTITY: feature_for_datum_target_relationship,	TYPE: datum_target

    ATTR:  id,	TYPE: identifier -- DERIVED
      := get_id_value( SELF )


  SUB- ENTITY(2)	connectivity_definition_item_relationship
    REDCR: relating_shape_aspect,	TYPE: connectivity_definition -- EXPLICIT
      -- OVERRIDING ENTITY: shape_aspect_relationship


  SUB- ENTITY(3)	assembly_shape_joint_item_relationship
    REDCR: relating_shape_aspect,	TYPE: assembly_shape_joint -- EXPLICIT
      -- OVERRIDING ENTITY: shape_aspect_relationship


  SUB- ENTITY(4)	assembly_shape_constraint_item_relationship
    REDCR: relating_shape_aspect,	TYPE: assembly_shape_constraint -- EXPLICIT
      -- OVERRIDING ENTITY: shape_aspect_relationship


  SUB- ENTITY(5)	contact_feature_fit_relationship
    REDCR: relating_shape_aspect,	TYPE: contact_feature -- EXPLICIT
      -- OVERRIDING ENTITY: shape_aspect_relationship

    REDCR: related_shape_aspect,	TYPE: contact_feature -- EXPLICIT
      -- OVERRIDING ENTITY: shape_aspect_relationship


  SUB- ENTITY(6)	shape_feature_fit_relationship
    REDCR: name,	TYPE: label -- DERIVED (DYNAMIC)
      := SELF\shape_aspect_relationship.name
      -- OVERRIDING ENTITY: characterized_object

    REDCR: description,	TYPE: text -- DERIVED (DYNAMIC)
      := SELF\shape_aspect_relationship.description
      -- OVERRIDING ENTITY: characterized_object


  SUB- ENTITY(7)	connection_zone_based_assembly_joint
    (no local attributes)

  SUB- ENTITY(8)	assembly_joint
    (no local attributes)

  SUB- ENTITY(9)	component_feature_joint
    REDCR: relating_shape_aspect,	TYPE: component_feature -- EXPLICIT
      -- OVERRIDING ENTITY: shape_aspect_relationship

    REDCR: related_shape_aspect,	TYPE: component_feature -- EXPLICIT
      -- OVERRIDING ENTITY: shape_aspect_relationship


  SUB- ENTITY(10)	shape_feature_definition_element_relationship
    REDCR: name,	TYPE: label -- DERIVED (DYNAMIC)
      := SELF\shape_aspect_relationship.name
      -- OVERRIDING ENTITY: characterized_object

    REDCR: description,	TYPE: text -- DERIVED (DYNAMIC)
      := SELF\shape_aspect_relationship.description
      -- OVERRIDING ENTITY: characterized_object


  SUB- ENTITY(11)	pattern_offset_membership
    (no local attributes)

  SUB- ENTITY(12)	pattern_omit_membership
    (no local attributes)

  SUB- ENTITY(13)	feature_component_relationship
    (no local attributes)

  SUB- ENTITY(14)	shape_defining_relationship
    (no local attributes)

  SUB- ENTITY(15)	dimensional_location_with_datum_feature
    (no local attributes)

  SUB- ENTITY(16)	angular_location
    ATTR:  angle_selection,	TYPE: angle_relator -- EXPLICIT


  SUB- ENTITY(17)	dimensional_location_with_path
    ATTR:  path,	TYPE: shape_aspect -- EXPLICIT


  SUB- ENTITY(18)	directed_dimensional_location
    (no local attributes)

  SUB- ENTITY(19)	dimensional_location
    (no local attributes)

  SUB- ENTITY(20)	make_from_feature_relationship
    (no local attributes)

  SUB- ENTITY(21)	component_feature_relationship
    REDCR: relating_shape_aspect,	TYPE: component_feature -- EXPLICIT
      -- OVERRIDING ENTITY: shape_aspect_relationship

    REDCR: related_shape_aspect,	TYPE: component_feature -- EXPLICIT
      -- OVERRIDING ENTITY: shape_aspect_relationship


  SUB- ENTITY(22)	connection_zone_interface_plane_relationship
    (no local attributes)

  SUB- ENTITY(23)	feature_for_datum_target_relationship
    REDCR: related_shape_aspect,	TYPE: datum_target -- EXPLICIT
      -- OVERRIDING ENTITY: shape_aspect_relationship


  SUB- ENTITY(24)	shape_aspect_associativity
    (no local attributes)

  SUB- ENTITY(25)	shape_aspect_deriving_relationship
    REDCR: relating_shape_aspect,	TYPE: derived_shape_aspect -- EXPLICIT
      -- observed by
        ENTITY(1): derived_shape_aspect,	ATTR: deriving_relationships,	TYPE: SET [1 : ?] OF
          shape_aspect_deriving_relationship
      -- OVERRIDING ENTITY: shape_aspect_relationship


*/


//MARK: - Partial Entity
  public final class _shape_aspect_relationship : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eSHAPE_ASPECT_RELATIONSHIP.self
    }

    //ATTRIBUTES
    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _name: tLABEL // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _description: tTEXT?  // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE (OBSERVED)
    public internal(set) var _relating_shape_aspect: eSHAPE_ASPECT{ // OBSERVED EXPLICIT ATTRIBUTE
      get {
        return __relating_shape_aspect.copy()
      } // getter
      set {
        let newValue = newValue
        let observer = SDAI.EntityReferenceObserver(referencer: self, observerCode: _relating_shape_aspect__observer.self)
        newValue.configure(with: observer)
        observer.observe(removing: SDAI.UNWRAP(seq:__relating_shape_aspect.entityReferences),
          adding: SDAI.UNWRAP(seq: newValue.entityReferences) )
      } // setter
    }

    /// backing storage for observed attribute
    private var __relating_shape_aspect: eSHAPE_ASPECT

    /// attribute observer code
    internal class _relating_shape_aspect__observer: SDAI.EntityReferenceObserver.ObserverCode {
      final override class func observe<RemovingEntities: Sequence, AddingEntities: Sequence>(
        referencer: SDAI.PartialEntity, removing: RemovingEntities, adding: AddingEntities )
        where RemovingEntities.Element: SDAI.EntityReference, AddingEntities.Element: SDAI.EntityReference
      {
        for referencedComplex in removing.map({ $0.complexEntity }) {
          for referencerOwner in referencer.owners {
            //OBSERVING ENTITY: eCROSS_SECTIONAL_ALTERNATIVE_SHAPE_ELEMENT
            referencedComplex.partialEntityInstance(_cross_sectional_alternative_shape_element.self)?
              ._items__observeRemovedReference(in: referencerOwner)
            //OBSERVING ENTITY: eDATUM_TARGET
            referencedComplex.partialEntityInstance(_datum_target.self)?
              ._target_basis_relationship__observeRemovedReference(in: referencerOwner)
            //OBSERVING ENTITY: eCROSS_SECTIONAL_GROUP_SHAPE_ELEMENT
            referencedComplex.partialEntityInstance(_cross_sectional_group_shape_element.self)?
              ._items__observeRemovedReference(in: referencerOwner)
            //OBSERVING ENTITY: eCOMPOSITE_SHAPE_ASPECT
            referencedComplex.partialEntityInstance(_composite_shape_aspect.self)?
              ._component_relationships__observeRemovedReference(in: referencerOwner)
            //OBSERVING ENTITY: eDATUM_FEATURE
            referencedComplex.partialEntityInstance(_datum_feature.self)?
              ._feature_basis_relationship__observeRemovedReference(in: referencerOwner)
            //OBSERVING ENTITY: eDERIVED_SHAPE_ASPECT
            referencedComplex.partialEntityInstance(_derived_shape_aspect.self)?
              ._deriving_relationships__observeRemovedReference(in: referencerOwner)
          }
        }

        for referencedComplex in adding.map({ $0.complexEntity }) {
          for referencerOwner in referencer.owners {
            //OBSERVING ENTITY: eCROSS_SECTIONAL_ALTERNATIVE_SHAPE_ELEMENT
            referencedComplex.partialEntityInstance(_cross_sectional_alternative_shape_element.self)?
              ._items__observeAddedReference(in: referencerOwner)
            //OBSERVING ENTITY: eDATUM_TARGET
            referencedComplex.partialEntityInstance(_datum_target.self)?
              ._target_basis_relationship__observeAddedReference(in: referencerOwner)
            //OBSERVING ENTITY: eCROSS_SECTIONAL_GROUP_SHAPE_ELEMENT
            referencedComplex.partialEntityInstance(_cross_sectional_group_shape_element.self)?
              ._items__observeAddedReference(in: referencerOwner)
            //OBSERVING ENTITY: eCOMPOSITE_SHAPE_ASPECT
            referencedComplex.partialEntityInstance(_composite_shape_aspect.self)?
              ._component_relationships__observeAddedReference(in: referencerOwner)
            //OBSERVING ENTITY: eDATUM_FEATURE
            referencedComplex.partialEntityInstance(_datum_feature.self)?
              ._feature_basis_relationship__observeAddedReference(in: referencerOwner)
            //OBSERVING ENTITY: eDERIVED_SHAPE_ASPECT
            referencedComplex.partialEntityInstance(_derived_shape_aspect.self)?
              ._deriving_relationships__observeAddedReference(in: referencerOwner)
          }
        }
      }

      final override class func observe(newReferencerOwner referencerOwner: SDAI.ComplexEntity) {
        guard let attrValue = referencerOwner.partialEntityInstance(_shape_aspect_relationship.self)?._relating_shape_aspect else { return }
        for referencedComplex in attrValue.entityReferences.map({ $0.complexEntity }) {
        //OBSERVING ENTITY: eCROSS_SECTIONAL_ALTERNATIVE_SHAPE_ELEMENT
        referencedComplex.partialEntityInstance(_cross_sectional_alternative_shape_element.self)?
          ._items__observeAddedReference(in: referencerOwner)
        //OBSERVING ENTITY: eDATUM_TARGET
        referencedComplex.partialEntityInstance(_datum_target.self)?
          ._target_basis_relationship__observeAddedReference(in: referencerOwner)
        //OBSERVING ENTITY: eCROSS_SECTIONAL_GROUP_SHAPE_ELEMENT
        referencedComplex.partialEntityInstance(_cross_sectional_group_shape_element.self)?
          ._items__observeAddedReference(in: referencerOwner)
        //OBSERVING ENTITY: eCOMPOSITE_SHAPE_ASPECT
        referencedComplex.partialEntityInstance(_composite_shape_aspect.self)?
          ._component_relationships__observeAddedReference(in: referencerOwner)
        //OBSERVING ENTITY: eDATUM_FEATURE
        referencedComplex.partialEntityInstance(_datum_feature.self)?
          ._feature_basis_relationship__observeAddedReference(in: referencerOwner)
        //OBSERVING ENTITY: eDERIVED_SHAPE_ASPECT
        referencedComplex.partialEntityInstance(_derived_shape_aspect.self)?
          ._deriving_relationships__observeAddedReference(in: referencerOwner)
        }
      }

      final override class func observe(leavingReferencerOwner referencerOwner: SDAI.ComplexEntity) {
        guard let attrValue = referencerOwner.partialEntityInstance(_shape_aspect_relationship.self)?._relating_shape_aspect else { return }
        for referencedComplex in attrValue.entityReferences.map({ $0.complexEntity }) {
        //OBSERVING ENTITY: eCROSS_SECTIONAL_ALTERNATIVE_SHAPE_ELEMENT
        referencedComplex.partialEntityInstance(_cross_sectional_alternative_shape_element.self)?
          ._items__observe(leavingReferencerOwner: referencerOwner)
        //OBSERVING ENTITY: eDATUM_TARGET
        referencedComplex.partialEntityInstance(_datum_target.self)?
          ._target_basis_relationship__observe(leavingReferencerOwner: referencerOwner)
        //OBSERVING ENTITY: eCROSS_SECTIONAL_GROUP_SHAPE_ELEMENT
        referencedComplex.partialEntityInstance(_cross_sectional_group_shape_element.self)?
          ._items__observe(leavingReferencerOwner: referencerOwner)
        //OBSERVING ENTITY: eCOMPOSITE_SHAPE_ASPECT
        referencedComplex.partialEntityInstance(_composite_shape_aspect.self)?
          ._component_relationships__observe(leavingReferencerOwner: referencerOwner)
        //OBSERVING ENTITY: eDATUM_FEATURE
        referencedComplex.partialEntityInstance(_datum_feature.self)?
          ._feature_basis_relationship__observe(leavingReferencerOwner: referencerOwner)
        //OBSERVING ENTITY: eDERIVED_SHAPE_ASPECT
        referencedComplex.partialEntityInstance(_derived_shape_aspect.self)?
          ._deriving_relationships__observe(leavingReferencerOwner: referencerOwner)
        }
      }

    }

    /// EXPLICIT ATTRIBUTE (OBSERVED)
    public internal(set) var _related_shape_aspect: eSHAPE_ASPECT{ // OBSERVED EXPLICIT ATTRIBUTE
      get {
        return __related_shape_aspect.copy()
      } // getter
      set {
        let newValue = newValue
        let observer = SDAI.EntityReferenceObserver(referencer: self, observerCode: _related_shape_aspect__observer.self)
        newValue.configure(with: observer)
        observer.observe(removing: SDAI.UNWRAP(seq:__related_shape_aspect.entityReferences),
          adding: SDAI.UNWRAP(seq: newValue.entityReferences) )
      } // setter
    }

    /// backing storage for observed attribute
    private var __related_shape_aspect: eSHAPE_ASPECT

    /// attribute observer code
    internal class _related_shape_aspect__observer: SDAI.EntityReferenceObserver.ObserverCode {
      final override class func observe<RemovingEntities: Sequence, AddingEntities: Sequence>(
        referencer: SDAI.PartialEntity, removing: RemovingEntities, adding: AddingEntities )
        where RemovingEntities.Element: SDAI.EntityReference, AddingEntities.Element: SDAI.EntityReference
      {
        for referencedComplex in removing.map({ $0.complexEntity }) {
          for referencerOwner in referencer.owners {
            //OBSERVING ENTITY: eSYMMETRIC_SHAPE_ASPECT
            referencedComplex.partialEntityInstance(_symmetric_shape_aspect.self)?
              ._basis_relationships__observeRemovedReference(in: referencerOwner)
            //OBSERVING ENTITY: eDATUM
            referencedComplex.partialEntityInstance(_datum.self)?
              ._established_by_relationships__observeRemovedReference(in: referencerOwner)
          }
        }

        for referencedComplex in adding.map({ $0.complexEntity }) {
          for referencerOwner in referencer.owners {
            //OBSERVING ENTITY: eSYMMETRIC_SHAPE_ASPECT
            referencedComplex.partialEntityInstance(_symmetric_shape_aspect.self)?
              ._basis_relationships__observeAddedReference(in: referencerOwner)
            //OBSERVING ENTITY: eDATUM
            referencedComplex.partialEntityInstance(_datum.self)?
              ._established_by_relationships__observeAddedReference(in: referencerOwner)
          }
        }
      }

      final override class func observe(newReferencerOwner referencerOwner: SDAI.ComplexEntity) {
        guard let attrValue = referencerOwner.partialEntityInstance(_shape_aspect_relationship.self)?._related_shape_aspect else { return }
        for referencedComplex in attrValue.entityReferences.map({ $0.complexEntity }) {
        //OBSERVING ENTITY: eSYMMETRIC_SHAPE_ASPECT
        referencedComplex.partialEntityInstance(_symmetric_shape_aspect.self)?
          ._basis_relationships__observeAddedReference(in: referencerOwner)
        //OBSERVING ENTITY: eDATUM
        referencedComplex.partialEntityInstance(_datum.self)?
          ._established_by_relationships__observeAddedReference(in: referencerOwner)
        }
      }

      final override class func observe(leavingReferencerOwner referencerOwner: SDAI.ComplexEntity) {
        guard let attrValue = referencerOwner.partialEntityInstance(_shape_aspect_relationship.self)?._related_shape_aspect else { return }
        for referencedComplex in attrValue.entityReferences.map({ $0.complexEntity }) {
        //OBSERVING ENTITY: eSYMMETRIC_SHAPE_ASPECT
        referencedComplex.partialEntityInstance(_symmetric_shape_aspect.self)?
          ._basis_relationships__observe(leavingReferencerOwner: referencerOwner)
        //OBSERVING ENTITY: eDATUM
        referencedComplex.partialEntityInstance(_datum.self)?
          ._established_by_relationships__observe(leavingReferencerOwner: referencerOwner)
        }
      }

    }

    /// DERIVE ATTRIBUTE
    internal func _id__getter(SELF: eSHAPE_ASPECT_RELATIONSHIP) -> tIDENTIFIER?  {

      let _TEMP1 = GET_ID_VALUE(sID_ATTRIBUTE_SELECT(/*eSHAPE_ASPECT_RELATIONSHIP*/SELF))
      return _TEMP1
    }

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      //SELECT data types (indirectly) referencing the current type as a member of the select list
      members.insert(SDAI.STRING(sCLASSIFICATION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sACTION_ITEMS.typeName)) // -> sCLASSIFICATION_ITEM
      members.insert(SDAI.STRING(sCHANGE_MANAGEMENT_OBJECT.typeName)) // -> sACTION_ITEMS
      members.insert(SDAI.STRING(sIR_USAGE_ITEM.typeName)) // -> sCLASSIFICATION_ITEM
      members.insert(SDAI.STRING(sMULTI_LANGUAGE_ATTRIBUTE_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sID_ATTRIBUTE_SELECT.typeName)) // -> Self
      members.insert(SDAI.STRING(sCHANGE_RELATIONSHIP_SELECT.typeName)) // -> Self
      members.insert(SDAI.STRING(sIDENTIFICATION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sDRAUGHTING_MODEL_ITEM_DEFINITION.typeName)) // -> Self
      members.insert(SDAI.STRING(sSHAPE_DEFINITION.typeName)) // -> Self
      members.insert(SDAI.STRING(sPROPERTY_OR_SHAPE_SELECT.typeName)) // -> sSHAPE_DEFINITION
      members.insert(SDAI.STRING(sCHARACTERIZED_DEFINITION.typeName)) // -> sSHAPE_DEFINITION
      members.insert(SDAI.STRING(sGEOMETRIC_ITEM_SPECIFIC_USAGE_SELECT.typeName)) // -> Self
      members.insert(SDAI.STRING(sAPPROVAL_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sREPRESENTED_DEFINITION.typeName)) // -> Self
      members.insert(SDAI.STRING(sITEM_IDENTIFIED_REPRESENTATION_USAGE_DEFINITION.typeName)) // -> sREPRESENTED_DEFINITION
      members.insert(SDAI.STRING(sDESCRIPTION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sATTRIBUTE_LANGUAGE_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sDOCUMENT_REFERENCE_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sGROUPABLE_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sEFFECTIVITY_ITEM.typeName)) // -> Self
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._name.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._description?.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._relating_shape_aspect.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._related_shape_aspect.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._name.value.isValueEqualOptionally(to: rhs._name.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._description?.value.isValueEqualOptionally(to: rhs._description?.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._relating_shape_aspect.value.isValueEqualOptionally(to: rhs._relating_shape_aspect.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._related_shape_aspect.value.isValueEqualOptionally(to: rhs._related_shape_aspect.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._name.value.isValueEqualOptionally(to: rhs._name.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._description?.value.isValueEqualOptionally(to: rhs._description?.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._relating_shape_aspect.value.isValueEqualOptionally(to: rhs._relating_shape_aspect.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._related_shape_aspect.value.isValueEqualOptionally(to: rhs._related_shape_aspect.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: eSHAPE_ASPECT_RELATIONSHIP?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.USEDIN(T: SELF, ROLE: \AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eID_ATTRIBUTE
        .IDENTIFIED_ITEM)
      let _TEMP2 = SDAI.SIZEOF(_TEMP1)
      let _TEMP3 = _TEMP2 <= SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
      return _TEMP3
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(NAME: tLABEL, DESCRIPTION: tTEXT? , RELATING_SHAPE_ASPECT: eSHAPE_ASPECT, 
                RELATED_SHAPE_ASPECT: eSHAPE_ASPECT) {
      self._name = NAME
      self._description = DESCRIPTION
      self.__relating_shape_aspect = RELATING_SHAPE_ASPECT
      self.__related_shape_aspect = RELATED_SHAPE_ASPECT
      super.init(asAbstructSuperclass:())

      self._relating_shape_aspect.configure(with: SDAI.EntityReferenceObserver(referencer: self, observerCode: _relating_shape_aspect__observer.self))
      self._related_shape_aspect.configure(with: SDAI.EntityReferenceObserver(referencer: self, observerCode: _related_shape_aspect__observer.self))
    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 4
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverRequiredParameter(as: tLABEL.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p1) = exchangeStructure.recoverOptionalParameter(as: tTEXT.self, from: parameters[1])
      else { exchangeStructure.add(errorContext: "while recovering parameter #1 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p2) = exchangeStructure.recoverRequiredParameter(as: eSHAPE_ASPECT.self, from: parameters[2])
      else { exchangeStructure.add(errorContext: "while recovering parameter #2 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p3) = exchangeStructure.recoverRequiredParameter(as: eSHAPE_ASPECT.self, from: parameters[3])
      else { exchangeStructure.add(errorContext: "while recovering parameter #3 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( NAME: p0, DESCRIPTION: p1, RELATING_SHAPE_ASPECT: p2, RELATED_SHAPE_ASPECT: p3 )
    }

    /// broadcasting a new complex entity becoming an owner of the partial entity
    final public override func broadcast(addedToComplex complex: SDAI.ComplexEntity) {
      _relating_shape_aspect__observer.observe(newReferencerOwner: complex)
      _related_shape_aspect__observer.observe(newReferencerOwner: complex)
    }

    /// broadcasting a complex entity withdrawing an owner of the partial entity
    final public override func broadcast(removedFromComplex complex: SDAI.ComplexEntity) {
      _relating_shape_aspect__observer.observe(leavingReferencerOwner: complex)
      _related_shape_aspect__observer.observe(leavingReferencerOwner: complex)
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY shape_aspect_relationship
    SUPERTYPE OF ( 
        ONEOF ( 
            assembly_shape_joint_item_relationship, 
            assembly_shape_constraint_item_relationship, 
            connectivity_definition_item_relationship, 
            shape_feature_fit_relationship ) );
      name                   : label;
      description            : OPTIONAL text;
      relating_shape_aspect  : shape_aspect; (* observed by
          cross_sectional_alternative_shape_element.items
          datum_target.target_basis_relationship
          cross_sectional_group_shape_element.items
          composite_shape_aspect.component_relationships
          datum_feature.feature_basis_relationship
          *)
      related_shape_aspect   : shape_aspect; (* observed by
          symmetric_shape_aspect.basis_relationships
          datum.established_by_relationships
          *)
    DERIVE
      id  : identifier := get_id_value( SELF );
    WHERE
      wr1: ( SIZEOF( USEDIN( SELF, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ID_ATTRIBUTE.'
               + 'IDENTIFIED_ITEM'  ) ) <= 1 );
  END_ENTITY; -- shape_aspect_relationship (line:28670 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eSHAPE_ASPECT_RELATIONSHIP : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _shape_aspect_relationship.self
    }
    public let partialEntity: _shape_aspect_relationship

    //MARK: SUPERTYPES
    public var super_eSHAPE_ASPECT_RELATIONSHIP: eSHAPE_ASPECT_RELATIONSHIP { return self } 	// [1]

    //MARK: SUBTYPES
    public var sub_eCONNECTIVITY_DEFINITION_ITEM_RELATIONSHIP: eCONNECTIVITY_DEFINITION_ITEM_RELATIONSHIP? {	// [2]
      return self.complexEntity.entityReference(eCONNECTIVITY_DEFINITION_ITEM_RELATIONSHIP.self)
    }

    public var sub_eASSEMBLY_SHAPE_JOINT_ITEM_RELATIONSHIP: eASSEMBLY_SHAPE_JOINT_ITEM_RELATIONSHIP? {	// [3]
      return self.complexEntity.entityReference(eASSEMBLY_SHAPE_JOINT_ITEM_RELATIONSHIP.self)
    }

    public var sub_eASSEMBLY_SHAPE_CONSTRAINT_ITEM_RELATIONSHIP: eASSEMBLY_SHAPE_CONSTRAINT_ITEM_RELATIONSHIP? {	// [4]
      return self.complexEntity.entityReference(eASSEMBLY_SHAPE_CONSTRAINT_ITEM_RELATIONSHIP.self)
    }

    public var sub_eCONTACT_FEATURE_FIT_RELATIONSHIP: eCONTACT_FEATURE_FIT_RELATIONSHIP? {	// [5]
      return self.complexEntity.entityReference(eCONTACT_FEATURE_FIT_RELATIONSHIP.self)
    }

    public var sub_eSHAPE_FEATURE_FIT_RELATIONSHIP: eSHAPE_FEATURE_FIT_RELATIONSHIP? {	// [6]
      return self.complexEntity.entityReference(eSHAPE_FEATURE_FIT_RELATIONSHIP.self)
    }

    public var sub_eCONNECTION_ZONE_BASED_ASSEMBLY_JOINT: eCONNECTION_ZONE_BASED_ASSEMBLY_JOINT? {	// [7]
      return self.complexEntity.entityReference(eCONNECTION_ZONE_BASED_ASSEMBLY_JOINT.self)
    }

    public var sub_eASSEMBLY_JOINT: eASSEMBLY_JOINT? {	// [8]
      return self.complexEntity.entityReference(eASSEMBLY_JOINT.self)
    }

    public var sub_eCOMPONENT_FEATURE_JOINT: eCOMPONENT_FEATURE_JOINT? {	// [9]
      return self.complexEntity.entityReference(eCOMPONENT_FEATURE_JOINT.self)
    }

    public var sub_eSHAPE_FEATURE_DEFINITION_ELEMENT_RELATIONSHIP: eSHAPE_FEATURE_DEFINITION_ELEMENT_RELATIONSHIP? {	// [10]
      return self.complexEntity.entityReference(eSHAPE_FEATURE_DEFINITION_ELEMENT_RELATIONSHIP.self)
    }

    public var sub_ePATTERN_OFFSET_MEMBERSHIP: ePATTERN_OFFSET_MEMBERSHIP? {	// [11]
      return self.complexEntity.entityReference(ePATTERN_OFFSET_MEMBERSHIP.self)
    }

    public var sub_ePATTERN_OMIT_MEMBERSHIP: ePATTERN_OMIT_MEMBERSHIP? {	// [12]
      return self.complexEntity.entityReference(ePATTERN_OMIT_MEMBERSHIP.self)
    }

    public var sub_eFEATURE_COMPONENT_RELATIONSHIP: eFEATURE_COMPONENT_RELATIONSHIP? {	// [13]
      return self.complexEntity.entityReference(eFEATURE_COMPONENT_RELATIONSHIP.self)
    }

    public var sub_eSHAPE_DEFINING_RELATIONSHIP: eSHAPE_DEFINING_RELATIONSHIP? {	// [14]
      return self.complexEntity.entityReference(eSHAPE_DEFINING_RELATIONSHIP.self)
    }

    public var sub_eDIMENSIONAL_LOCATION_WITH_DATUM_FEATURE: eDIMENSIONAL_LOCATION_WITH_DATUM_FEATURE? {	// [15]
      return self.complexEntity.entityReference(eDIMENSIONAL_LOCATION_WITH_DATUM_FEATURE.self)
    }

    public var sub_eANGULAR_LOCATION: eANGULAR_LOCATION? {	// [16]
      return self.complexEntity.entityReference(eANGULAR_LOCATION.self)
    }

    public var sub_eDIMENSIONAL_LOCATION_WITH_PATH: eDIMENSIONAL_LOCATION_WITH_PATH? {	// [17]
      return self.complexEntity.entityReference(eDIMENSIONAL_LOCATION_WITH_PATH.self)
    }

    public var sub_eDIRECTED_DIMENSIONAL_LOCATION: eDIRECTED_DIMENSIONAL_LOCATION? {	// [18]
      return self.complexEntity.entityReference(eDIRECTED_DIMENSIONAL_LOCATION.self)
    }

    public var sub_eDIMENSIONAL_LOCATION: eDIMENSIONAL_LOCATION? {	// [19]
      return self.complexEntity.entityReference(eDIMENSIONAL_LOCATION.self)
    }

    public var sub_eMAKE_FROM_FEATURE_RELATIONSHIP: eMAKE_FROM_FEATURE_RELATIONSHIP? {	// [20]
      return self.complexEntity.entityReference(eMAKE_FROM_FEATURE_RELATIONSHIP.self)
    }

    public var sub_eCOMPONENT_FEATURE_RELATIONSHIP: eCOMPONENT_FEATURE_RELATIONSHIP? {	// [21]
      return self.complexEntity.entityReference(eCOMPONENT_FEATURE_RELATIONSHIP.self)
    }

    public var sub_eCONNECTION_ZONE_INTERFACE_PLANE_RELATIONSHIP: eCONNECTION_ZONE_INTERFACE_PLANE_RELATIONSHIP? {	// [22]
      return self.complexEntity.entityReference(eCONNECTION_ZONE_INTERFACE_PLANE_RELATIONSHIP.self)
    }

    public var sub_eFEATURE_FOR_DATUM_TARGET_RELATIONSHIP: eFEATURE_FOR_DATUM_TARGET_RELATIONSHIP? {	// [23]
      return self.complexEntity.entityReference(eFEATURE_FOR_DATUM_TARGET_RELATIONSHIP.self)
    }

    public var sub_eSHAPE_ASPECT_ASSOCIATIVITY: eSHAPE_ASPECT_ASSOCIATIVITY? {	// [24]
      return self.complexEntity.entityReference(eSHAPE_ASPECT_ASSOCIATIVITY.self)
    }

    public var sub_eSHAPE_ASPECT_DERIVING_RELATIONSHIP: eSHAPE_ASPECT_DERIVING_RELATIONSHIP? {	// [25]
      return self.complexEntity.entityReference(eSHAPE_ASPECT_DERIVING_RELATIONSHIP.self)
    }


    //MARK: ATTRIBUTES
    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eSHAPE_ASPECT_RELATIONSHIP`` )
    public var DESCRIPTION: tTEXT?  {
      get {
        return self.partialEntity._description
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._description = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eDIMENSIONAL_LOCATION_WITH_PATH`` )
    public var PATH: eSHAPE_ASPECT?  {
      get {
        return sub_eDIMENSIONAL_LOCATION_WITH_PATH?.partialEntity._path
      }
      set(newValue) {
        guard let partial = sub_eDIMENSIONAL_LOCATION_WITH_PATH?.super_eDIMENSIONAL_LOCATION_WITH_PATH
          .partialEntity else { return }
        partial._path = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SELF( ``eSHAPE_ASPECT_RELATIONSHIP`` )
    public var ID: tIDENTIFIER?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"ID") {
          return cached.value as! tIDENTIFIER? 
        }
        let origin = self
        let value = origin.partialEntity._id__getter(SELF: origin)
        updateCache(derivedAttributeName:"ID", value:value)
        return value
      }
    }

    /// __EXPLICIT(OBSERVED)__ attribute
    /// - origin: SELF( ``eSHAPE_ASPECT_RELATIONSHIP`` )
    public var RELATED_SHAPE_ASPECT: eSHAPE_ASPECT {
      get {
        return SDAI.UNWRAP( self.partialEntity._related_shape_aspect )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._related_shape_aspect = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eANGULAR_LOCATION`` )
    public var ANGLE_SELECTION: nANGLE_RELATOR?  {
      get {
        return sub_eANGULAR_LOCATION?.partialEntity._angle_selection
      }
      set(newValue) {
        guard let partial = sub_eANGULAR_LOCATION?.super_eANGULAR_LOCATION.partialEntity else { return }
        partial._angle_selection = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eSHAPE_ASPECT_RELATIONSHIP`` )
    public var NAME: tLABEL {
      get {
        return SDAI.UNWRAP( self.partialEntity._name )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._name = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT(OBSERVED)__ attribute
    /// - origin: SELF( ``eSHAPE_ASPECT_RELATIONSHIP`` )
    public var RELATING_SHAPE_ASPECT: eSHAPE_ASPECT {
      get {
        return SDAI.UNWRAP( self.partialEntity._relating_shape_aspect )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._relating_shape_aspect = SDAI.UNWRAP(newValue)
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_shape_aspect_relationship.self) else { return nil }
      self.partialEntity = partial

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }

    //SIMPLE ENTITY REFERENCE
    public convenience init?(_ partial:_shape_aspect_relationship) {
      let complex = SDAI.ComplexEntity(entities:[partial])
      self.init(complex: complex)
    }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _shape_aspect_relationship.WHERE_wr1(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "SHAPE_ASPECT_RELATIONSHIP", type: self, explicitAttributeCount: 4)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eSHAPE_ASPECT_RELATIONSHIP.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "DESCRIPTION", keyPath: \eSHAPE_ASPECT_RELATIONSHIP.DESCRIPTION, 
        kind: .explicitOptional, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "PATH", keyPath: \eSHAPE_ASPECT_RELATIONSHIP.PATH, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "ID", keyPath: \eSHAPE_ASPECT_RELATIONSHIP.ID, 
        kind: .derived, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "RELATED_SHAPE_ASPECT", keyPath: \eSHAPE_ASPECT_RELATIONSHIP.RELATED_SHAPE_ASPECT, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "ANGLE_SELECTION", keyPath: \eSHAPE_ASPECT_RELATIONSHIP.ANGLE_SELECTION, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "NAME", keyPath: \eSHAPE_ASPECT_RELATIONSHIP.NAME, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "RELATING_SHAPE_ASPECT", keyPath: \eSHAPE_ASPECT_RELATIONSHIP.RELATING_SHAPE_ASPECT, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)

      return entityDef
    }

  }
}
