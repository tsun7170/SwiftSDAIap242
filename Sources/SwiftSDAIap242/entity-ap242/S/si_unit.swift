/* file: si_unit.swift 	 generated: Mon Jan  3 16:32:52 2022 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.1, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY si_unit
    SUBTYPE OF ( named_unit );
      prefix  : OPTIONAL si_prefix;
      name    : si_unit_name;
    DERIVE
      SELF\named_unit.dimensions  : dimensional_exponents := dimensions_for_si_unit( name );
    WHERE
      wr1: ( ( NOT ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.MASS_UNIT' IN TYPEOF( SELF ) ) AND ( 
               SIZEOF( USEDIN( SELF, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.DERIVED_UNIT_ELEMENT.'
               + 'UNIT'  ) ) > 0 ) ) ) OR ( prefix = si_prefix.kilo ) );
  END_ENTITY; -- si_unit (line:29368 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	named_unit
    ATTR:  dimensions,	TYPE: dimensional_exponents -- EXPLICIT (DYNAMIC)
      -- possibly overriden by
      *** ENTITY: si_unit,	TYPE: dimensional_exponents	(as DERIVED)


  ENTITY(SELF)	si_unit
    ATTR:  prefix,	TYPE: OPTIONAL si_prefix -- EXPLICIT

    ATTR:  name,	TYPE: si_unit_name -- EXPLICIT

    REDCR: dimensions,	TYPE: dimensional_exponents -- DERIVED (DYNAMIC)
      := dimensions_for_si_unit( name )
      -- OVERRIDING ENTITY: named_unit


  SUB- ENTITY(3)	si_resistance_unit
    (no local attributes)

  SUB- ENTITY(4)	si_energy_unit
    (no local attributes)

  SUB- ENTITY(5)	si_illuminance_unit
    (no local attributes)

  SUB- ENTITY(6)	si_absorbed_dose_unit
    (no local attributes)

  SUB- ENTITY(7)	si_frequency_unit
    (no local attributes)

  SUB- ENTITY(8)	si_radioactivity_unit
    (no local attributes)

  SUB- ENTITY(9)	si_inductance_unit
    (no local attributes)

  SUB- ENTITY(10)	si_magnetic_flux_density_unit
    (no local attributes)

  SUB- ENTITY(11)	si_power_unit
    (no local attributes)

  SUB- ENTITY(12)	si_pressure_unit
    (no local attributes)

  SUB- ENTITY(13)	si_magnetic_flux_unit
    (no local attributes)

  SUB- ENTITY(14)	si_electric_potential_unit
    (no local attributes)

  SUB- ENTITY(15)	si_dose_equivalent_unit
    (no local attributes)

  SUB- ENTITY(16)	si_electric_charge_unit
    (no local attributes)

  SUB- ENTITY(17)	si_conductance_unit
    (no local attributes)

  SUB- ENTITY(18)	si_force_unit
    (no local attributes)

  SUB- ENTITY(19)	si_capacitance_unit
    (no local attributes)

*/


//MARK: - Partial Entity
  public final class _si_unit : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eSI_UNIT.self
    }

    //ATTRIBUTES
    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _prefix: nSI_PREFIX?  // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _name: nSI_UNIT_NAME // PLAIN EXPLICIT ATTRIBUTE

    /// DERIVE ATTRIBUTE REDEFINITION(origin: eNAMED_UNIT)
    /// - attribute value provider protocol conformance wrapper
    internal func _dimensions__getter(complex: SDAI.ComplexEntity) -> eDIMENSIONAL_EXPONENTS {
      let SELF = complex.entityReference( eSI_UNIT.self )!
      return SDAI.UNWRAP( eDIMENSIONAL_EXPONENTS(SELF.DIMENSIONS) )
    }
    /// DERIVE ATTRIBUTE REDEFINITION(origin: eNAMED_UNIT)
    /// - gut of derived attribute logic
    internal func _dimensions__getter(SELF: eSI_UNIT) -> eDIMENSIONAL_EXPONENTS {

      let _TEMP1 = DIMENSIONS_FOR_SI_UNIT(SELF.NAME)
      let value = _TEMP1
      return SDAI.UNWRAP( value )
    }

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._prefix?.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._name.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._prefix?.value.isValueEqualOptionally(to: rhs._prefix?.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._name.value.isValueEqualOptionally(to: rhs._name.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._prefix?.value.isValueEqualOptionally(to: rhs._prefix?.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._name.value.isValueEqualOptionally(to: rhs._name.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: eSI_UNIT?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.TYPEOF(SELF, IS: eMASS_UNIT.self)
      let _TEMP2 = SDAI.USEDIN(T: SELF, ROLE: \AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF
        .eDERIVED_UNIT_ELEMENT.UNIT)
      let _TEMP3 = SDAI.SIZEOF(_TEMP2)
      let _TEMP4 = _TEMP3 > SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      let _TEMP5 = _TEMP1 && _TEMP4
      let _TEMP6 =  !_TEMP5
      let _TEMP7 = nSI_PREFIX.KILO
      let _TEMP8 = SELF.PREFIX .==. SDAI.FORCE_OPTIONAL(_TEMP7)
      let _TEMP9 = _TEMP6 || _TEMP8
      return _TEMP9
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(PREFIX: nSI_PREFIX? , NAME: nSI_UNIT_NAME) {
      self._prefix = PREFIX
      self._name = NAME
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 2
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverOptionalParameter(as: nSI_PREFIX.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p1) = exchangeStructure.recoverRequiredParameter(as: nSI_UNIT_NAME.self, from: parameters[1])
      else { exchangeStructure.add(errorContext: "while recovering parameter #1 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( PREFIX: p0, NAME: p1 )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY si_unit
    SUBTYPE OF ( named_unit );
      prefix  : OPTIONAL si_prefix;
      name    : si_unit_name;
    DERIVE
      SELF\named_unit.dimensions  : dimensional_exponents := dimensions_for_si_unit( name );
    WHERE
      wr1: ( ( NOT ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.MASS_UNIT' IN TYPEOF( SELF ) ) AND ( 
               SIZEOF( USEDIN( SELF, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.DERIVED_UNIT_ELEMENT.'
               + 'UNIT'  ) ) > 0 ) ) ) OR ( prefix = si_prefix.kilo ) );
  END_ENTITY; -- si_unit (line:29368 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eSI_UNIT : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _si_unit.self
    }
    public let partialEntity: _si_unit

    //MARK: SUPERTYPES
    public let super_eNAMED_UNIT: eNAMED_UNIT 	// [1]
    public var super_eSI_UNIT: eSI_UNIT { return self } 	// [2]

    //MARK: SUBTYPES
    public var sub_eSI_RESISTANCE_UNIT: eSI_RESISTANCE_UNIT? {	// [3]
      return self.complexEntity.entityReference(eSI_RESISTANCE_UNIT.self)
    }

    public var sub_eSI_ENERGY_UNIT: eSI_ENERGY_UNIT? {	// [4]
      return self.complexEntity.entityReference(eSI_ENERGY_UNIT.self)
    }

    public var sub_eSI_ILLUMINANCE_UNIT: eSI_ILLUMINANCE_UNIT? {	// [5]
      return self.complexEntity.entityReference(eSI_ILLUMINANCE_UNIT.self)
    }

    public var sub_eSI_ABSORBED_DOSE_UNIT: eSI_ABSORBED_DOSE_UNIT? {	// [6]
      return self.complexEntity.entityReference(eSI_ABSORBED_DOSE_UNIT.self)
    }

    public var sub_eSI_FREQUENCY_UNIT: eSI_FREQUENCY_UNIT? {	// [7]
      return self.complexEntity.entityReference(eSI_FREQUENCY_UNIT.self)
    }

    public var sub_eSI_RADIOACTIVITY_UNIT: eSI_RADIOACTIVITY_UNIT? {	// [8]
      return self.complexEntity.entityReference(eSI_RADIOACTIVITY_UNIT.self)
    }

    public var sub_eSI_INDUCTANCE_UNIT: eSI_INDUCTANCE_UNIT? {	// [9]
      return self.complexEntity.entityReference(eSI_INDUCTANCE_UNIT.self)
    }

    public var sub_eSI_MAGNETIC_FLUX_DENSITY_UNIT: eSI_MAGNETIC_FLUX_DENSITY_UNIT? {	// [10]
      return self.complexEntity.entityReference(eSI_MAGNETIC_FLUX_DENSITY_UNIT.self)
    }

    public var sub_eSI_POWER_UNIT: eSI_POWER_UNIT? {	// [11]
      return self.complexEntity.entityReference(eSI_POWER_UNIT.self)
    }

    public var sub_eSI_PRESSURE_UNIT: eSI_PRESSURE_UNIT? {	// [12]
      return self.complexEntity.entityReference(eSI_PRESSURE_UNIT.self)
    }

    public var sub_eSI_MAGNETIC_FLUX_UNIT: eSI_MAGNETIC_FLUX_UNIT? {	// [13]
      return self.complexEntity.entityReference(eSI_MAGNETIC_FLUX_UNIT.self)
    }

    public var sub_eSI_ELECTRIC_POTENTIAL_UNIT: eSI_ELECTRIC_POTENTIAL_UNIT? {	// [14]
      return self.complexEntity.entityReference(eSI_ELECTRIC_POTENTIAL_UNIT.self)
    }

    public var sub_eSI_DOSE_EQUIVALENT_UNIT: eSI_DOSE_EQUIVALENT_UNIT? {	// [15]
      return self.complexEntity.entityReference(eSI_DOSE_EQUIVALENT_UNIT.self)
    }

    public var sub_eSI_ELECTRIC_CHARGE_UNIT: eSI_ELECTRIC_CHARGE_UNIT? {	// [16]
      return self.complexEntity.entityReference(eSI_ELECTRIC_CHARGE_UNIT.self)
    }

    public var sub_eSI_CONDUCTANCE_UNIT: eSI_CONDUCTANCE_UNIT? {	// [17]
      return self.complexEntity.entityReference(eSI_CONDUCTANCE_UNIT.self)
    }

    public var sub_eSI_FORCE_UNIT: eSI_FORCE_UNIT? {	// [18]
      return self.complexEntity.entityReference(eSI_FORCE_UNIT.self)
    }

    public var sub_eSI_CAPACITANCE_UNIT: eSI_CAPACITANCE_UNIT? {	// [19]
      return self.complexEntity.entityReference(eSI_CAPACITANCE_UNIT.self)
    }


    //MARK: ATTRIBUTES
    /// __EXPLICIT REDEF(DERIVE)__ attribute
    /// - origin: SELF( ``eSI_UNIT`` )
    public var DIMENSIONS: eDIMENSIONAL_EXPONENTS {
      get {
        if let cached = cachedValue(derivedAttributeName:"DIMENSIONS") {
          return cached.value as! eDIMENSIONAL_EXPONENTS
        }
        let origin = self
        let value = SDAI.UNWRAP( origin.partialEntity._dimensions__getter(SELF: origin) )
        updateCache(derivedAttributeName:"DIMENSIONS", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eSI_UNIT`` )
    public var PREFIX: nSI_PREFIX?  {
      get {
        return self.partialEntity._prefix
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._prefix = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eSI_UNIT`` )
    public var NAME: nSI_UNIT_NAME {
      get {
        return SDAI.UNWRAP( self.partialEntity._name )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._name = SDAI.UNWRAP(newValue)
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_si_unit.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eNAMED_UNIT.self) else { return nil }
      self.super_eNAMED_UNIT = super1

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _si_unit.WHERE_wr1(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "SI_UNIT", type: self, explicitAttributeCount: 2)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eNAMED_UNIT.self)
      entityDef.add(supertype: eSI_UNIT.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "DIMENSIONS", keyPath: \eSI_UNIT.DIMENSIONS, 
        kind: .derivedRedeclaring, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "PREFIX", keyPath: \eSI_UNIT.PREFIX, 
        kind: .explicitOptional, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "NAME", keyPath: \eSI_UNIT.NAME, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: false)

      return entityDef
    }

  }
}

//MARK: - partial Entity Dynamic Attribute Protocol Conformances
extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF._si_unit :eNAMED_UNIT__DIMENSIONS__provider {}
