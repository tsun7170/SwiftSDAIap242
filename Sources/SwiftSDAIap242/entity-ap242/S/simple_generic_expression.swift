/* file: simple_generic_expression.swift 	 generated: Mon Jan  3 16:32:52 2022 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.1, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY simple_generic_expression
    ABSTRACT SUPERTYPE OF ( 
        ONEOF ( 
            generic_literal, 
            generic_variable ) )
    SUBTYPE OF ( generic_expression );
  END_ENTITY; -- simple_generic_expression (line:29389 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	generic_expression
    (no local attributes)

  ENTITY(SELF)	simple_generic_expression
    (no local attributes)

  SUB- ENTITY(3)	maths_enum_literal
    ATTR:  lit_value,	TYPE: maths_enum_atom -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(4)	boolean_representation_item
    (no local attributes)

  SUB- ENTITY(5)	boolean_literal
    ATTR:  the_value,	TYPE: BOOLEAN -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(6)	imported_curve_function
    ATTR:  geometry,	TYPE: curve -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  parametric_domain,	TYPE: tuple_space -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(7)	cartesian_complex_number_region
    ATTR:  real_constraint,	TYPE: real_interval -- EXPLICIT

    ATTR:  imag_constraint,	TYPE: real_interval -- EXPLICIT


  SUB- ENTITY(8)	integer_representation_item
    (no local attributes)

  SUB- ENTITY(9)	int_literal
    REDCR: the_value,	TYPE: INTEGER -- EXPLICIT	(AMBIGUOUS/MASKED)
      -- OVERRIDING ENTITY: literal_number


  SUB- ENTITY(10)	real_representation_item
    (no local attributes)

  SUB- ENTITY(11)	real_literal
    REDCR: the_value,	TYPE: REAL -- EXPLICIT	(AMBIGUOUS/MASKED)
      -- OVERRIDING ENTITY: literal_number


  SUB- ENTITY(12)	literal_number
    ATTR:  the_value,	TYPE: NUMBER -- EXPLICIT	(AMBIGUOUS/MASKED)
      -- possibly overriden by
          ENTITY: real_literal,	TYPE: REAL
          ENTITY: int_literal,	TYPE: INTEGER


  SUB- ENTITY(13)	b_spline_basis
    ATTR:  degree,	TYPE: nonnegative_integer -- EXPLICIT

    ATTR:  repeated_knots,	TYPE: LIST [2 : ?] OF REAL -- EXPLICIT

    ATTR:  order,	TYPE: positive_integer -- DERIVED
      := degree + 1

    ATTR:  num_basis,	TYPE: positive_integer -- DERIVED
      := SIZEOF( repeated_knots ) - order


  SUB- ENTITY(14)	finite_integer_interval
    ATTR:  min,	TYPE: INTEGER -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  max,	TYPE: INTEGER -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  size,	TYPE: positive_integer -- DERIVED
      := ( max - min ) + 1


  SUB- ENTITY(15)	listed_integer_data
    ATTR:  values,	TYPE: LIST [1 : ?] OF INTEGER -- EXPLICIT	(AMBIGUOUS/MASKED)

    REDCR: shape,	TYPE: LIST [1 : ?] OF positive_integer -- DERIVED (DYNAMIC)
      := [SIZEOF( values )]
      -- OVERRIDING ENTITY: explicit_table_function


  SUB- ENTITY(16)	integer_tuple_literal
    ATTR:  lit_value,	TYPE: LIST [1 : ?] OF INTEGER -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(17)	selector_function
    ATTR:  selector,	TYPE: input_selector -- EXPLICIT

    ATTR:  source_of_domain,	TYPE: maths_space_or_function -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(18)	maths_tuple_literal
    ATTR:  lit_value,	TYPE: LIST OF maths_value -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(19)	listed_data
    ATTR:  values,	TYPE: LIST [1 : ?] OF maths_value -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  value_range,	TYPE: maths_space -- EXPLICIT	(AMBIGUOUS/MASKED)

    REDCR: shape,	TYPE: LIST [1 : ?] OF positive_integer -- DERIVED (DYNAMIC)
      := [SIZEOF( values )]
      -- OVERRIDING ENTITY: explicit_table_function


  SUB- ENTITY(20)	finite_function
    ATTR:  pairs,	TYPE: SET [1 : ?] OF LIST [2 : 2] OF maths_value -- EXPLICIT


  SUB- ENTITY(21)	listed_string_data
    ATTR:  values,	TYPE: LIST [1 : ?] OF STRING -- EXPLICIT	(AMBIGUOUS/MASKED)

    REDCR: shape,	TYPE: LIST [1 : ?] OF positive_integer -- DERIVED (DYNAMIC)
      := [SIZEOF( values )]
      -- OVERRIDING ENTITY: explicit_table_function


  SUB- ENTITY(22)	real_interval_from_min
    ATTR:  min,	TYPE: REAL -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  min_closure,	TYPE: open_closed -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(23)	listed_product_space
    ATTR:  factors,	TYPE: LIST OF maths_space -- EXPLICIT


  SUB- ENTITY(24)	function_space
    ATTR:  domain_constraint,	TYPE: space_constraint_type -- EXPLICIT

    ATTR:  domain_argument,	TYPE: maths_space -- EXPLICIT

    ATTR:  range_constraint,	TYPE: space_constraint_type -- EXPLICIT

    ATTR:  range_argument,	TYPE: maths_space -- EXPLICIT


  SUB- ENTITY(25)	imported_point_function
    ATTR:  geometry,	TYPE: point -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(26)	complex_number_literal_polar
    ATTR:  modulus,	TYPE: REAL -- EXPLICIT

    ATTR:  argument,	TYPE: REAL -- EXPLICIT

    REDCR: real_part,	TYPE: REAL -- DERIVED (DYNAMIC)
      := modulus * COS( argument )
      -- OVERRIDING ENTITY: complex_number_literal

    REDCR: imag_part,	TYPE: REAL -- DERIVED (DYNAMIC)
      := modulus * SIN( argument )
      -- OVERRIDING ENTITY: complex_number_literal


  SUB- ENTITY(27)	complex_number_literal
    ATTR:  real_part,	TYPE: REAL -- EXPLICIT (DYNAMIC)
      -- possibly overriden by
          ENTITY: complex_number_literal_polar,	TYPE: REAL	(as DERIVED)

    ATTR:  imag_part,	TYPE: REAL -- EXPLICIT (DYNAMIC)
      -- possibly overriden by
          ENTITY: complex_number_literal_polar,	TYPE: REAL	(as DERIVED)


  SUB- ENTITY(28)	integer_interval_to_max
    ATTR:  max,	TYPE: INTEGER -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(29)	elementary_function
    ATTR:  func_id,	TYPE: elementary_function_enumerators -- EXPLICIT


  SUB- ENTITY(30)	binary_literal
    ATTR:  lit_value,	TYPE: BINARY -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(31)	imported_surface_function
    ATTR:  geometry,	TYPE: surface -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  parametric_domain,	TYPE: tuple_space -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(32)	real_tuple_literal
    ATTR:  lit_value,	TYPE: LIST [1 : ?] OF REAL -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(33)	integer_interval_from_min
    ATTR:  min,	TYPE: INTEGER -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(34)	atom_based_literal
    ATTR:  lit_value,	TYPE: atom_based_value -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(35)	externally_listed_data
    ATTR:  value_range,	TYPE: maths_space -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(36)	real_interval_to_max
    ATTR:  max,	TYPE: REAL -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  max_closure,	TYPE: open_closed -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(37)	imported_volume_function
    ATTR:  geometry,	TYPE: volume -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  parametric_domain,	TYPE: tuple_space -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(38)	constant_function
    ATTR:  sole_output,	TYPE: maths_value -- EXPLICIT

    ATTR:  source_of_domain,	TYPE: maths_space_or_function -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(39)	logical_representation_item
    (no local attributes)

  SUB- ENTITY(40)	logical_literal
    ATTR:  lit_value,	TYPE: LOGICAL -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(41)	listed_logical_data
    ATTR:  values,	TYPE: LIST [1 : ?] OF LOGICAL -- EXPLICIT	(AMBIGUOUS/MASKED)

    REDCR: shape,	TYPE: LIST [1 : ?] OF positive_integer -- DERIVED (DYNAMIC)
      := [SIZEOF( values )]
      -- OVERRIDING ENTITY: explicit_table_function


  SUB- ENTITY(42)	listed_complex_number_data
    ATTR:  values,	TYPE: LIST [2 : ?] OF REAL -- EXPLICIT	(AMBIGUOUS/MASKED)

    REDCR: shape,	TYPE: LIST [1 : ?] OF positive_integer -- DERIVED (DYNAMIC)
      := [SIZEOF( values ) DIV 2]
      -- OVERRIDING ENTITY: explicit_table_function


  SUB- ENTITY(43)	extended_tuple_space
    ATTR:  base,	TYPE: tuple_space -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  extender,	TYPE: maths_space -- EXPLICIT


  SUB- ENTITY(44)	string_literal
    ATTR:  the_value,	TYPE: STRING -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(45)	uniform_product_space
    ATTR:  base,	TYPE: maths_space -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  exponent,	TYPE: positive_integer -- EXPLICIT


  SUB- ENTITY(46)	generated_finite_numeric_space
    ATTR:  start_value,	TYPE: maths_number -- EXPLICIT

    ATTR:  increment_value,	TYPE: maths_number -- EXPLICIT

    ATTR:  increment_number,	TYPE: positive_integer -- EXPLICIT

    REDCR: members,	TYPE: SET [2 : ?] OF maths_number -- DERIVED (DYNAMIC)
      := make_numeric_set( start_value, increment_value, increment_number )
      -- OVERRIDING ENTITY: finite_space


  SUB- ENTITY(47)	finite_space
    ATTR:  members,	TYPE: SET OF maths_value -- EXPLICIT (DYNAMIC)
      -- possibly overriden by
          ENTITY: generated_finite_numeric_space,	TYPE: SET [2 : ?] OF maths_number	(as DERIVED)


  SUB- ENTITY(48)	finite_real_interval
    ATTR:  min,	TYPE: REAL -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  min_closure,	TYPE: open_closed -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  max,	TYPE: REAL -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  max_closure,	TYPE: open_closed -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(49)	polar_complex_number_region
    ATTR:  centre,	TYPE: complex_number_literal -- EXPLICIT

    ATTR:  distance_constraint,	TYPE: real_interval -- EXPLICIT

    ATTR:  direction_constraint,	TYPE: finite_real_interval -- EXPLICIT


  SUB- ENTITY(50)	elementary_space
    ATTR:  space_id,	TYPE: elementary_space_enumerators -- EXPLICIT


  SUB- ENTITY(51)	listed_real_data
    ATTR:  values,	TYPE: LIST [1 : ?] OF REAL -- EXPLICIT	(AMBIGUOUS/MASKED)

    REDCR: shape,	TYPE: LIST [1 : ?] OF positive_integer -- DERIVED (DYNAMIC)
      := [SIZEOF( values )]
      -- OVERRIDING ENTITY: explicit_table_function


  SUB- ENTITY(52)	generic_literal
    (no local attributes)

  SUB- ENTITY(53)	maths_real_variable
    (no local attributes)

  SUB- ENTITY(54)	real_numeric_variable
    (no local attributes)

  SUB- ENTITY(55)	maths_integer_variable
    (no local attributes)

  SUB- ENTITY(56)	int_numeric_variable
    (no local attributes)

  SUB- ENTITY(57)	numeric_variable
    (no local attributes)

  SUB- ENTITY(58)	maths_boolean_variable
    (no local attributes)

  SUB- ENTITY(59)	boolean_variable
    (no local attributes)

  SUB- ENTITY(60)	maths_string_variable
    (no local attributes)

  SUB- ENTITY(61)	string_variable
    (no local attributes)

  SUB- ENTITY(62)	variable
    (no local attributes)

  SUB- ENTITY(63)	bound_variational_parameter
    REDCR: parameter_current_value,	TYPE: maths_value -- DERIVED (DYNAMIC)
      := ?
      -- OVERRIDING ENTITY: variational_parameter


  SUB- ENTITY(64)	unbound_variational_parameter
    (no local attributes)

  SUB- ENTITY(65)	variational_parameter
    ATTR:  parameter_description,	TYPE: OPTIONAL text -- EXPLICIT

    ATTR:  parameter_current_value,	TYPE: maths_value -- EXPLICIT (DYNAMIC)
      -- possibly overriden by
          ENTITY: bound_variational_parameter,	TYPE: maths_value	(as DERIVED)


  SUB- ENTITY(66)	maths_variable
    ATTR:  values_space,	TYPE: maths_space -- EXPLICIT

    ATTR:  name,	TYPE: label -- EXPLICIT


  SUB- ENTITY(67)	generic_variable
    ATTR:  interpretation,	TYPE: environment -- INVERSE
      FOR syntactic_representation;


  SUB- ENTITY(68)	simple_numeric_expression
    (no local attributes)

  SUB- ENTITY(69)	simple_boolean_expression
    (no local attributes)

  SUB- ENTITY(70)	simple_string_expression
    (no local attributes)

*/


//MARK: - Partial Entity
  public final class _simple_generic_expression : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eSIMPLE_GENERIC_EXPRESSION.self
    }

    //ATTRIBUTES
    // (no local attributes)

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init() {
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 0
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      self.init( )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY simple_generic_expression
    ABSTRACT SUPERTYPE OF ( 
        ONEOF ( 
            generic_literal, 
            generic_variable ) )
    SUBTYPE OF ( generic_expression );
  END_ENTITY; -- simple_generic_expression (line:29389 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eSIMPLE_GENERIC_EXPRESSION : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _simple_generic_expression.self
    }
    public let partialEntity: _simple_generic_expression

    //MARK: SUPERTYPES
    public let super_eGENERIC_EXPRESSION: eGENERIC_EXPRESSION 	// [1]
    public var super_eSIMPLE_GENERIC_EXPRESSION: eSIMPLE_GENERIC_EXPRESSION { return self } 	// [2]

    //MARK: SUBTYPES
    public var sub_eMATHS_ENUM_LITERAL: eMATHS_ENUM_LITERAL? {	// [3]
      return self.complexEntity.entityReference(eMATHS_ENUM_LITERAL.self)
    }

    public var sub_eBOOLEAN_REPRESENTATION_ITEM: eBOOLEAN_REPRESENTATION_ITEM? {	// [4]
      return self.complexEntity.entityReference(eBOOLEAN_REPRESENTATION_ITEM.self)
    }

    public var sub_eBOOLEAN_LITERAL: eBOOLEAN_LITERAL? {	// [5]
      return self.complexEntity.entityReference(eBOOLEAN_LITERAL.self)
    }

    public var sub_eIMPORTED_CURVE_FUNCTION: eIMPORTED_CURVE_FUNCTION? {	// [6]
      return self.complexEntity.entityReference(eIMPORTED_CURVE_FUNCTION.self)
    }

    public var sub_eCARTESIAN_COMPLEX_NUMBER_REGION: eCARTESIAN_COMPLEX_NUMBER_REGION? {	// [7]
      return self.complexEntity.entityReference(eCARTESIAN_COMPLEX_NUMBER_REGION.self)
    }

    public var sub_eINTEGER_REPRESENTATION_ITEM: eINTEGER_REPRESENTATION_ITEM? {	// [8]
      return self.complexEntity.entityReference(eINTEGER_REPRESENTATION_ITEM.self)
    }

    public var sub_eINT_LITERAL: eINT_LITERAL? {	// [9]
      return self.complexEntity.entityReference(eINT_LITERAL.self)
    }

    public var sub_eREAL_REPRESENTATION_ITEM: eREAL_REPRESENTATION_ITEM? {	// [10]
      return self.complexEntity.entityReference(eREAL_REPRESENTATION_ITEM.self)
    }

    public var sub_eREAL_LITERAL: eREAL_LITERAL? {	// [11]
      return self.complexEntity.entityReference(eREAL_LITERAL.self)
    }

    public var sub_eLITERAL_NUMBER: eLITERAL_NUMBER? {	// [12]
      return self.complexEntity.entityReference(eLITERAL_NUMBER.self)
    }

    public var sub_eB_SPLINE_BASIS: eB_SPLINE_BASIS? {	// [13]
      return self.complexEntity.entityReference(eB_SPLINE_BASIS.self)
    }

    public var sub_eFINITE_INTEGER_INTERVAL: eFINITE_INTEGER_INTERVAL? {	// [14]
      return self.complexEntity.entityReference(eFINITE_INTEGER_INTERVAL.self)
    }

    public var sub_eLISTED_INTEGER_DATA: eLISTED_INTEGER_DATA? {	// [15]
      return self.complexEntity.entityReference(eLISTED_INTEGER_DATA.self)
    }

    public var sub_eINTEGER_TUPLE_LITERAL: eINTEGER_TUPLE_LITERAL? {	// [16]
      return self.complexEntity.entityReference(eINTEGER_TUPLE_LITERAL.self)
    }

    public var sub_eSELECTOR_FUNCTION: eSELECTOR_FUNCTION? {	// [17]
      return self.complexEntity.entityReference(eSELECTOR_FUNCTION.self)
    }

    public var sub_eMATHS_TUPLE_LITERAL: eMATHS_TUPLE_LITERAL? {	// [18]
      return self.complexEntity.entityReference(eMATHS_TUPLE_LITERAL.self)
    }

    public var sub_eLISTED_DATA: eLISTED_DATA? {	// [19]
      return self.complexEntity.entityReference(eLISTED_DATA.self)
    }

    public var sub_eFINITE_FUNCTION: eFINITE_FUNCTION? {	// [20]
      return self.complexEntity.entityReference(eFINITE_FUNCTION.self)
    }

    public var sub_eLISTED_STRING_DATA: eLISTED_STRING_DATA? {	// [21]
      return self.complexEntity.entityReference(eLISTED_STRING_DATA.self)
    }

    public var sub_eREAL_INTERVAL_FROM_MIN: eREAL_INTERVAL_FROM_MIN? {	// [22]
      return self.complexEntity.entityReference(eREAL_INTERVAL_FROM_MIN.self)
    }

    public var sub_eLISTED_PRODUCT_SPACE: eLISTED_PRODUCT_SPACE? {	// [23]
      return self.complexEntity.entityReference(eLISTED_PRODUCT_SPACE.self)
    }

    public var sub_eFUNCTION_SPACE: eFUNCTION_SPACE? {	// [24]
      return self.complexEntity.entityReference(eFUNCTION_SPACE.self)
    }

    public var sub_eIMPORTED_POINT_FUNCTION: eIMPORTED_POINT_FUNCTION? {	// [25]
      return self.complexEntity.entityReference(eIMPORTED_POINT_FUNCTION.self)
    }

    public var sub_eCOMPLEX_NUMBER_LITERAL_POLAR: eCOMPLEX_NUMBER_LITERAL_POLAR? {	// [26]
      return self.complexEntity.entityReference(eCOMPLEX_NUMBER_LITERAL_POLAR.self)
    }

    public var sub_eCOMPLEX_NUMBER_LITERAL: eCOMPLEX_NUMBER_LITERAL? {	// [27]
      return self.complexEntity.entityReference(eCOMPLEX_NUMBER_LITERAL.self)
    }

    public var sub_eINTEGER_INTERVAL_TO_MAX: eINTEGER_INTERVAL_TO_MAX? {	// [28]
      return self.complexEntity.entityReference(eINTEGER_INTERVAL_TO_MAX.self)
    }

    public var sub_eELEMENTARY_FUNCTION: eELEMENTARY_FUNCTION? {	// [29]
      return self.complexEntity.entityReference(eELEMENTARY_FUNCTION.self)
    }

    public var sub_eBINARY_LITERAL: eBINARY_LITERAL? {	// [30]
      return self.complexEntity.entityReference(eBINARY_LITERAL.self)
    }

    public var sub_eIMPORTED_SURFACE_FUNCTION: eIMPORTED_SURFACE_FUNCTION? {	// [31]
      return self.complexEntity.entityReference(eIMPORTED_SURFACE_FUNCTION.self)
    }

    public var sub_eREAL_TUPLE_LITERAL: eREAL_TUPLE_LITERAL? {	// [32]
      return self.complexEntity.entityReference(eREAL_TUPLE_LITERAL.self)
    }

    public var sub_eINTEGER_INTERVAL_FROM_MIN: eINTEGER_INTERVAL_FROM_MIN? {	// [33]
      return self.complexEntity.entityReference(eINTEGER_INTERVAL_FROM_MIN.self)
    }

    public var sub_eATOM_BASED_LITERAL: eATOM_BASED_LITERAL? {	// [34]
      return self.complexEntity.entityReference(eATOM_BASED_LITERAL.self)
    }

    public var sub_eEXTERNALLY_LISTED_DATA: eEXTERNALLY_LISTED_DATA? {	// [35]
      return self.complexEntity.entityReference(eEXTERNALLY_LISTED_DATA.self)
    }

    public var sub_eREAL_INTERVAL_TO_MAX: eREAL_INTERVAL_TO_MAX? {	// [36]
      return self.complexEntity.entityReference(eREAL_INTERVAL_TO_MAX.self)
    }

    public var sub_eIMPORTED_VOLUME_FUNCTION: eIMPORTED_VOLUME_FUNCTION? {	// [37]
      return self.complexEntity.entityReference(eIMPORTED_VOLUME_FUNCTION.self)
    }

    public var sub_eCONSTANT_FUNCTION: eCONSTANT_FUNCTION? {	// [38]
      return self.complexEntity.entityReference(eCONSTANT_FUNCTION.self)
    }

    public var sub_eLOGICAL_REPRESENTATION_ITEM: eLOGICAL_REPRESENTATION_ITEM? {	// [39]
      return self.complexEntity.entityReference(eLOGICAL_REPRESENTATION_ITEM.self)
    }

    public var sub_eLOGICAL_LITERAL: eLOGICAL_LITERAL? {	// [40]
      return self.complexEntity.entityReference(eLOGICAL_LITERAL.self)
    }

    public var sub_eLISTED_LOGICAL_DATA: eLISTED_LOGICAL_DATA? {	// [41]
      return self.complexEntity.entityReference(eLISTED_LOGICAL_DATA.self)
    }

    public var sub_eLISTED_COMPLEX_NUMBER_DATA: eLISTED_COMPLEX_NUMBER_DATA? {	// [42]
      return self.complexEntity.entityReference(eLISTED_COMPLEX_NUMBER_DATA.self)
    }

    public var sub_eEXTENDED_TUPLE_SPACE: eEXTENDED_TUPLE_SPACE? {	// [43]
      return self.complexEntity.entityReference(eEXTENDED_TUPLE_SPACE.self)
    }

    public var sub_eSTRING_LITERAL: eSTRING_LITERAL? {	// [44]
      return self.complexEntity.entityReference(eSTRING_LITERAL.self)
    }

    public var sub_eUNIFORM_PRODUCT_SPACE: eUNIFORM_PRODUCT_SPACE? {	// [45]
      return self.complexEntity.entityReference(eUNIFORM_PRODUCT_SPACE.self)
    }

    public var sub_eGENERATED_FINITE_NUMERIC_SPACE: eGENERATED_FINITE_NUMERIC_SPACE? {	// [46]
      return self.complexEntity.entityReference(eGENERATED_FINITE_NUMERIC_SPACE.self)
    }

    public var sub_eFINITE_SPACE: eFINITE_SPACE? {	// [47]
      return self.complexEntity.entityReference(eFINITE_SPACE.self)
    }

    public var sub_eFINITE_REAL_INTERVAL: eFINITE_REAL_INTERVAL? {	// [48]
      return self.complexEntity.entityReference(eFINITE_REAL_INTERVAL.self)
    }

    public var sub_ePOLAR_COMPLEX_NUMBER_REGION: ePOLAR_COMPLEX_NUMBER_REGION? {	// [49]
      return self.complexEntity.entityReference(ePOLAR_COMPLEX_NUMBER_REGION.self)
    }

    public var sub_eELEMENTARY_SPACE: eELEMENTARY_SPACE? {	// [50]
      return self.complexEntity.entityReference(eELEMENTARY_SPACE.self)
    }

    public var sub_eLISTED_REAL_DATA: eLISTED_REAL_DATA? {	// [51]
      return self.complexEntity.entityReference(eLISTED_REAL_DATA.self)
    }

    public var sub_eGENERIC_LITERAL: eGENERIC_LITERAL? {	// [52]
      return self.complexEntity.entityReference(eGENERIC_LITERAL.self)
    }

    public var sub_eMATHS_REAL_VARIABLE: eMATHS_REAL_VARIABLE? {	// [53]
      return self.complexEntity.entityReference(eMATHS_REAL_VARIABLE.self)
    }

    public var sub_eREAL_NUMERIC_VARIABLE: eREAL_NUMERIC_VARIABLE? {	// [54]
      return self.complexEntity.entityReference(eREAL_NUMERIC_VARIABLE.self)
    }

    public var sub_eMATHS_INTEGER_VARIABLE: eMATHS_INTEGER_VARIABLE? {	// [55]
      return self.complexEntity.entityReference(eMATHS_INTEGER_VARIABLE.self)
    }

    public var sub_eINT_NUMERIC_VARIABLE: eINT_NUMERIC_VARIABLE? {	// [56]
      return self.complexEntity.entityReference(eINT_NUMERIC_VARIABLE.self)
    }

    public var sub_eNUMERIC_VARIABLE: eNUMERIC_VARIABLE? {	// [57]
      return self.complexEntity.entityReference(eNUMERIC_VARIABLE.self)
    }

    public var sub_eMATHS_BOOLEAN_VARIABLE: eMATHS_BOOLEAN_VARIABLE? {	// [58]
      return self.complexEntity.entityReference(eMATHS_BOOLEAN_VARIABLE.self)
    }

    public var sub_eBOOLEAN_VARIABLE: eBOOLEAN_VARIABLE? {	// [59]
      return self.complexEntity.entityReference(eBOOLEAN_VARIABLE.self)
    }

    public var sub_eMATHS_STRING_VARIABLE: eMATHS_STRING_VARIABLE? {	// [60]
      return self.complexEntity.entityReference(eMATHS_STRING_VARIABLE.self)
    }

    public var sub_eSTRING_VARIABLE: eSTRING_VARIABLE? {	// [61]
      return self.complexEntity.entityReference(eSTRING_VARIABLE.self)
    }

    public var sub_eVARIABLE: eVARIABLE? {	// [62]
      return self.complexEntity.entityReference(eVARIABLE.self)
    }

    public var sub_eBOUND_VARIATIONAL_PARAMETER: eBOUND_VARIATIONAL_PARAMETER? {	// [63]
      return self.complexEntity.entityReference(eBOUND_VARIATIONAL_PARAMETER.self)
    }

    public var sub_eUNBOUND_VARIATIONAL_PARAMETER: eUNBOUND_VARIATIONAL_PARAMETER? {	// [64]
      return self.complexEntity.entityReference(eUNBOUND_VARIATIONAL_PARAMETER.self)
    }

    public var sub_eVARIATIONAL_PARAMETER: eVARIATIONAL_PARAMETER? {	// [65]
      return self.complexEntity.entityReference(eVARIATIONAL_PARAMETER.self)
    }

    public var sub_eMATHS_VARIABLE: eMATHS_VARIABLE? {	// [66]
      return self.complexEntity.entityReference(eMATHS_VARIABLE.self)
    }

    public var sub_eGENERIC_VARIABLE: eGENERIC_VARIABLE? {	// [67]
      return self.complexEntity.entityReference(eGENERIC_VARIABLE.self)
    }

    public var sub_eSIMPLE_NUMERIC_EXPRESSION: eSIMPLE_NUMERIC_EXPRESSION? {	// [68]
      return self.complexEntity.entityReference(eSIMPLE_NUMERIC_EXPRESSION.self)
    }

    public var sub_eSIMPLE_BOOLEAN_EXPRESSION: eSIMPLE_BOOLEAN_EXPRESSION? {	// [69]
      return self.complexEntity.entityReference(eSIMPLE_BOOLEAN_EXPRESSION.self)
    }

    public var sub_eSIMPLE_STRING_EXPRESSION: eSIMPLE_STRING_EXPRESSION? {	// [70]
      return self.complexEntity.entityReference(eSIMPLE_STRING_EXPRESSION.self)
    }


    //MARK: ATTRIBUTES
    // VALUE_RANGE: (2 AMBIGUOUS REFs)

    // MIN: (4 AMBIGUOUS REFs)

    // GEOMETRY: (4 AMBIGUOUS REFs)

    // THE_VALUE: (5 AMBIGUOUS REFs)

    // SOURCE_OF_DOMAIN: (2 AMBIGUOUS REFs)

    // VALUES: (6 AMBIGUOUS REFs)

    // PARAMETRIC_DOMAIN: (3 AMBIGUOUS REFs)

    // MIN_CLOSURE: (2 AMBIGUOUS REFs)

    // LIT_VALUE: (7 AMBIGUOUS REFs)

    // MAX: (4 AMBIGUOUS REFs)

    // BASE: (2 AMBIGUOUS REFs)

    // MAX_CLOSURE: (2 AMBIGUOUS REFs)

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eFUNCTION_SPACE`` )
    public var RANGE_ARGUMENT: eMATHS_SPACE?  {
      get {
        return sub_eFUNCTION_SPACE?.partialEntity._range_argument
      }
      set(newValue) {
        guard let partial = sub_eFUNCTION_SPACE?.super_eFUNCTION_SPACE.partialEntity else { return }
        partial._range_argument = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eEXTENDED_TUPLE_SPACE`` )
    public var EXTENDER: eMATHS_SPACE?  {
      get {
        return sub_eEXTENDED_TUPLE_SPACE?.partialEntity._extender
      }
      set(newValue) {
        guard let partial = sub_eEXTENDED_TUPLE_SPACE?.super_eEXTENDED_TUPLE_SPACE.partialEntity
          else { return }
        partial._extender = SDAI.UNWRAP(newValue)
      }
    }

    /// __INVERSE__ attribute
    /// observing eENVIRONMENT .SYNTACTIC_REPRESENTATION
    /// - origin: SUB( ``eGENERIC_VARIABLE`` )
    public var INTERPRETATION: eENVIRONMENT?  {
      get {
        return sub_eGENERIC_VARIABLE?.partialEntity._interpretation
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePOLAR_COMPLEX_NUMBER_REGION`` )
    public var DIRECTION_CONSTRAINT: eFINITE_REAL_INTERVAL?  {
      get {
        return sub_ePOLAR_COMPLEX_NUMBER_REGION?.partialEntity._direction_constraint
      }
      set(newValue) {
        guard let partial = sub_ePOLAR_COMPLEX_NUMBER_REGION?.super_ePOLAR_COMPLEX_NUMBER_REGION
          .partialEntity else { return }
        partial._direction_constraint = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eUNIFORM_PRODUCT_SPACE`` )
    public var EXPONENT: tPOSITIVE_INTEGER?  {
      get {
        return sub_eUNIFORM_PRODUCT_SPACE?.partialEntity._exponent
      }
      set(newValue) {
        guard let partial = sub_eUNIFORM_PRODUCT_SPACE?.super_eUNIFORM_PRODUCT_SPACE.partialEntity
          else { return }
        partial._exponent = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eFUNCTION_SPACE`` )
    public var DOMAIN_CONSTRAINT: nSPACE_CONSTRAINT_TYPE?  {
      get {
        return sub_eFUNCTION_SPACE?.partialEntity._domain_constraint
      }
      set(newValue) {
        guard let partial = sub_eFUNCTION_SPACE?.super_eFUNCTION_SPACE.partialEntity else { return }
        partial._domain_constraint = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eLISTED_PRODUCT_SPACE`` )
    public var FACTORS: SDAI.LIST<eMATHS_SPACE>?  {
      get {
        return sub_eLISTED_PRODUCT_SPACE?.partialEntity._factors
      }
      set(newValue) {
        guard let partial = sub_eLISTED_PRODUCT_SPACE?.super_eLISTED_PRODUCT_SPACE.partialEntity
          else { return }
        partial._factors = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePOLAR_COMPLEX_NUMBER_REGION`` )
    public var CENTRE: eCOMPLEX_NUMBER_LITERAL?  {
      get {
        return sub_ePOLAR_COMPLEX_NUMBER_REGION?.partialEntity._centre
      }
      set(newValue) {
        guard let partial = sub_ePOLAR_COMPLEX_NUMBER_REGION?.super_ePOLAR_COMPLEX_NUMBER_REGION
          .partialEntity else { return }
        partial._centre = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT REDEF(DERIVE)__ attribute
    /// - origin: SUB( ``eLISTED_INTEGER_DATA`` )
    public var SHAPE: (SDAI.LIST<tPOSITIVE_INTEGER>/*[1:nil]*/ )?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"SHAPE") {
          return cached.value as! (SDAI.LIST<tPOSITIVE_INTEGER>/*[1:nil]*/ )? 
        }
        guard let origin = sub_eLISTED_INTEGER_DATA else { return nil }
        let value = SDAI.LIST<tPOSITIVE_INTEGER>(origin.partialEntity._shape__getter(SELF: origin))
        updateCache(derivedAttributeName:"SHAPE", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eFINITE_FUNCTION`` )
    public var PAIRS: (SDAI.SET<SDAI.LIST<sMATHS_VALUE>/*[2:2]*/ >/*[1:nil]*/ )?  {
      get {
        return sub_eFINITE_FUNCTION?.partialEntity._pairs
      }
      set(newValue) {
        guard let partial = sub_eFINITE_FUNCTION?.super_eFINITE_FUNCTION.partialEntity else { return }
        partial._pairs = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCOMPLEX_NUMBER_LITERAL_POLAR`` )
    public var MODULUS: SDAI.REAL?  {
      get {
        return sub_eCOMPLEX_NUMBER_LITERAL_POLAR?.partialEntity._modulus
      }
      set(newValue) {
        guard let partial = sub_eCOMPLEX_NUMBER_LITERAL_POLAR?.super_eCOMPLEX_NUMBER_LITERAL_POLAR
          .partialEntity else { return }
        partial._modulus = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCOMPLEX_NUMBER_LITERAL_POLAR`` )
    public var ARGUMENT: SDAI.REAL?  {
      get {
        return sub_eCOMPLEX_NUMBER_LITERAL_POLAR?.partialEntity._argument
      }
      set(newValue) {
        guard let partial = sub_eCOMPLEX_NUMBER_LITERAL_POLAR?.super_eCOMPLEX_NUMBER_LITERAL_POLAR
          .partialEntity else { return }
        partial._argument = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eVARIATIONAL_PARAMETER`` )
    public var PARAMETER_DESCRIPTION: tTEXT?  {
      get {
        return sub_eVARIATIONAL_PARAMETER?.partialEntity._parameter_description
      }
      set(newValue) {
        guard let partial = sub_eVARIATIONAL_PARAMETER?.super_eVARIATIONAL_PARAMETER.partialEntity
          else { return }
        partial._parameter_description = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eB_SPLINE_BASIS`` )
    public var REPEATED_KNOTS: (SDAI.LIST<SDAI.REAL>/*[2:nil]*/ )?  {
      get {
        return sub_eB_SPLINE_BASIS?.partialEntity._repeated_knots
      }
      set(newValue) {
        guard let partial = sub_eB_SPLINE_BASIS?.super_eB_SPLINE_BASIS.partialEntity else { return }
        partial._repeated_knots = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eB_SPLINE_BASIS`` )
    public var DEGREE: tNONNEGATIVE_INTEGER?  {
      get {
        return sub_eB_SPLINE_BASIS?.partialEntity._degree
      }
      set(newValue) {
        guard let partial = sub_eB_SPLINE_BASIS?.super_eB_SPLINE_BASIS.partialEntity else { return }
        partial._degree = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eMATHS_VARIABLE`` )
    public var VALUES_SPACE: eMATHS_SPACE?  {
      get {
        return sub_eMATHS_VARIABLE?.partialEntity._values_space
      }
      set(newValue) {
        guard let partial = sub_eMATHS_VARIABLE?.super_eMATHS_VARIABLE.partialEntity else { return }
        partial._values_space = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCONSTANT_FUNCTION`` )
    public var SOLE_OUTPUT: sMATHS_VALUE?  {
      get {
        return sub_eCONSTANT_FUNCTION?.partialEntity._sole_output
      }
      set(newValue) {
        guard let partial = sub_eCONSTANT_FUNCTION?.super_eCONSTANT_FUNCTION.partialEntity else { return }
        partial._sole_output = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eFUNCTION_SPACE`` )
    public var RANGE_CONSTRAINT: nSPACE_CONSTRAINT_TYPE?  {
      get {
        return sub_eFUNCTION_SPACE?.partialEntity._range_constraint
      }
      set(newValue) {
        guard let partial = sub_eFUNCTION_SPACE?.super_eFUNCTION_SPACE.partialEntity else { return }
        partial._range_constraint = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCARTESIAN_COMPLEX_NUMBER_REGION`` )
    public var IMAG_CONSTRAINT: sREAL_INTERVAL?  {
      get {
        return sub_eCARTESIAN_COMPLEX_NUMBER_REGION?.partialEntity._imag_constraint
      }
      set(newValue) {
        guard let partial = sub_eCARTESIAN_COMPLEX_NUMBER_REGION?.super_eCARTESIAN_COMPLEX_NUMBER_REGION
          .partialEntity else { return }
        partial._imag_constraint = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT(DYNAMIC)__ attribute
    /// - origin: SUB( ``eCOMPLEX_NUMBER_LITERAL`` )
    public var IMAG_PART: SDAI.REAL?  {
      get {
        if let resolved = _complex_number_literal._imag_part__provider(complex: self.complexEntity) {
          let value = resolved._imag_part__getter(complex: self.complexEntity)
          return value
        }
        else {
          return sub_eCOMPLEX_NUMBER_LITERAL?.partialEntity._imag_part
        }
      }
      set(newValue) {
        if let _ = _complex_number_literal._imag_part__provider(complex: self.complexEntity) { return }

        guard let partial = sub_eCOMPLEX_NUMBER_LITERAL?.super_eCOMPLEX_NUMBER_LITERAL.partialEntity
          else { return }
        partial._imag_part = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eGENERATED_FINITE_NUMERIC_SPACE`` )
    public var START_VALUE: tMATHS_NUMBER?  {
      get {
        return sub_eGENERATED_FINITE_NUMERIC_SPACE?.partialEntity._start_value
      }
      set(newValue) {
        guard let partial = sub_eGENERATED_FINITE_NUMERIC_SPACE?.super_eGENERATED_FINITE_NUMERIC_SPACE
          .partialEntity else { return }
        partial._start_value = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePOLAR_COMPLEX_NUMBER_REGION`` )
    public var DISTANCE_CONSTRAINT: sREAL_INTERVAL?  {
      get {
        return sub_ePOLAR_COMPLEX_NUMBER_REGION?.partialEntity._distance_constraint
      }
      set(newValue) {
        guard let partial = sub_ePOLAR_COMPLEX_NUMBER_REGION?.super_ePOLAR_COMPLEX_NUMBER_REGION
          .partialEntity else { return }
        partial._distance_constraint = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eB_SPLINE_BASIS`` )
    public var ORDER: tPOSITIVE_INTEGER?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"ORDER") {
          return cached.value as! tPOSITIVE_INTEGER? 
        }
        guard let origin = sub_eB_SPLINE_BASIS else { return nil }
        let value = tPOSITIVE_INTEGER(origin.partialEntity._order__getter(SELF: origin))
        updateCache(derivedAttributeName:"ORDER", value:value)
        return value
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eFINITE_INTEGER_INTERVAL`` )
    public var SIZE: tPOSITIVE_INTEGER?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"SIZE") {
          return cached.value as! tPOSITIVE_INTEGER? 
        }
        guard let origin = sub_eFINITE_INTEGER_INTERVAL else { return nil }
        let value = tPOSITIVE_INTEGER(origin.partialEntity._size__getter(SELF: origin))
        updateCache(derivedAttributeName:"SIZE", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eFUNCTION_SPACE`` )
    public var DOMAIN_ARGUMENT: eMATHS_SPACE?  {
      get {
        return sub_eFUNCTION_SPACE?.partialEntity._domain_argument
      }
      set(newValue) {
        guard let partial = sub_eFUNCTION_SPACE?.super_eFUNCTION_SPACE.partialEntity else { return }
        partial._domain_argument = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCARTESIAN_COMPLEX_NUMBER_REGION`` )
    public var REAL_CONSTRAINT: sREAL_INTERVAL?  {
      get {
        return sub_eCARTESIAN_COMPLEX_NUMBER_REGION?.partialEntity._real_constraint
      }
      set(newValue) {
        guard let partial = sub_eCARTESIAN_COMPLEX_NUMBER_REGION?.super_eCARTESIAN_COMPLEX_NUMBER_REGION
          .partialEntity else { return }
        partial._real_constraint = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eELEMENTARY_FUNCTION`` )
    public var FUNC_ID: nELEMENTARY_FUNCTION_ENUMERATORS?  {
      get {
        return sub_eELEMENTARY_FUNCTION?.partialEntity._func_id
      }
      set(newValue) {
        guard let partial = sub_eELEMENTARY_FUNCTION?.super_eELEMENTARY_FUNCTION.partialEntity
          else { return }
        partial._func_id = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eELEMENTARY_SPACE`` )
    public var SPACE_ID: nELEMENTARY_SPACE_ENUMERATORS?  {
      get {
        return sub_eELEMENTARY_SPACE?.partialEntity._space_id
      }
      set(newValue) {
        guard let partial = sub_eELEMENTARY_SPACE?.super_eELEMENTARY_SPACE.partialEntity else { return }
        partial._space_id = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT(DYNAMIC)__ attribute
    /// - origin: SUB( ``eVARIATIONAL_PARAMETER`` )
    public var PARAMETER_CURRENT_VALUE: sMATHS_VALUE?  {
      get {
        if let resolved = _variational_parameter._parameter_current_value__provider(complex: self.complexEntity) {
          let value = resolved._parameter_current_value__getter(complex: self.complexEntity)
          return value
        }
        else {
          return sub_eVARIATIONAL_PARAMETER?.partialEntity._parameter_current_value
        }
      }
      set(newValue) {
        if let _ = _variational_parameter._parameter_current_value__provider(complex: self.complexEntity) { return }

        guard let partial = sub_eVARIATIONAL_PARAMETER?.super_eVARIATIONAL_PARAMETER.partialEntity
          else { return }
        partial._parameter_current_value = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSELECTOR_FUNCTION`` )
    public var SELECTOR: tINPUT_SELECTOR?  {
      get {
        return sub_eSELECTOR_FUNCTION?.partialEntity._selector
      }
      set(newValue) {
        guard let partial = sub_eSELECTOR_FUNCTION?.super_eSELECTOR_FUNCTION.partialEntity else { return }
        partial._selector = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT(DYNAMIC)__ attribute
    /// - origin: SUB( ``eFINITE_SPACE`` )
    public var MEMBERS: SDAI.SET<sMATHS_VALUE>?  {
      get {
        if let resolved = _finite_space._members__provider(complex: self.complexEntity) {
          let value = resolved._members__getter(complex: self.complexEntity)
          return value
        }
        else {
          return sub_eFINITE_SPACE?.partialEntity._members
        }
      }
      set(newValue) {
        if let _ = _finite_space._members__provider(complex: self.complexEntity) { return }

        guard let partial = sub_eFINITE_SPACE?.super_eFINITE_SPACE.partialEntity else { return }
        partial._members = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eGENERATED_FINITE_NUMERIC_SPACE`` )
    public var INCREMENT_NUMBER: tPOSITIVE_INTEGER?  {
      get {
        return sub_eGENERATED_FINITE_NUMERIC_SPACE?.partialEntity._increment_number
      }
      set(newValue) {
        guard let partial = sub_eGENERATED_FINITE_NUMERIC_SPACE?.super_eGENERATED_FINITE_NUMERIC_SPACE
          .partialEntity else { return }
        partial._increment_number = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eB_SPLINE_BASIS`` )
    public var NUM_BASIS: tPOSITIVE_INTEGER?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"NUM_BASIS") {
          return cached.value as! tPOSITIVE_INTEGER? 
        }
        guard let origin = sub_eB_SPLINE_BASIS else { return nil }
        let value = tPOSITIVE_INTEGER(origin.partialEntity._num_basis__getter(SELF: origin))
        updateCache(derivedAttributeName:"NUM_BASIS", value:value)
        return value
      }
    }

    /// __EXPLICIT(DYNAMIC)__ attribute
    /// - origin: SUB( ``eCOMPLEX_NUMBER_LITERAL`` )
    public var REAL_PART: SDAI.REAL?  {
      get {
        if let resolved = _complex_number_literal._real_part__provider(complex: self.complexEntity) {
          let value = resolved._real_part__getter(complex: self.complexEntity)
          return value
        }
        else {
          return sub_eCOMPLEX_NUMBER_LITERAL?.partialEntity._real_part
        }
      }
      set(newValue) {
        if let _ = _complex_number_literal._real_part__provider(complex: self.complexEntity) { return }

        guard let partial = sub_eCOMPLEX_NUMBER_LITERAL?.super_eCOMPLEX_NUMBER_LITERAL.partialEntity
          else { return }
        partial._real_part = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eGENERATED_FINITE_NUMERIC_SPACE`` )
    public var INCREMENT_VALUE: tMATHS_NUMBER?  {
      get {
        return sub_eGENERATED_FINITE_NUMERIC_SPACE?.partialEntity._increment_value
      }
      set(newValue) {
        guard let partial = sub_eGENERATED_FINITE_NUMERIC_SPACE?.super_eGENERATED_FINITE_NUMERIC_SPACE
          .partialEntity else { return }
        partial._increment_value = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eMATHS_VARIABLE`` )
    public var NAME: tLABEL?  {
      get {
        return sub_eMATHS_VARIABLE?.partialEntity._name
      }
      set(newValue) {
        guard let partial = sub_eMATHS_VARIABLE?.super_eMATHS_VARIABLE.partialEntity else { return }
        partial._name = SDAI.UNWRAP(newValue)
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_simple_generic_expression.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eGENERIC_EXPRESSION.self) else { return nil }
      self.super_eGENERIC_EXPRESSION = super1

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "SIMPLE_GENERIC_EXPRESSION", type: self, explicitAttributeCount: 0)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eGENERIC_EXPRESSION.self)
      entityDef.add(supertype: eSIMPLE_GENERIC_EXPRESSION.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "RANGE_ARGUMENT", keyPath: \eSIMPLE_GENERIC_EXPRESSION.RANGE_ARGUMENT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "EXTENDER", keyPath: \eSIMPLE_GENERIC_EXPRESSION.EXTENDER, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "INTERPRETATION", keyPath: \eSIMPLE_GENERIC_EXPRESSION.INTERPRETATION, 
        kind: .inverse, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "DIRECTION_CONSTRAINT", keyPath: \eSIMPLE_GENERIC_EXPRESSION.DIRECTION_CONSTRAINT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "EXPONENT", keyPath: \eSIMPLE_GENERIC_EXPRESSION.EXPONENT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "DOMAIN_CONSTRAINT", keyPath: \eSIMPLE_GENERIC_EXPRESSION.DOMAIN_CONSTRAINT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "FACTORS", keyPath: \eSIMPLE_GENERIC_EXPRESSION.FACTORS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "CENTRE", keyPath: \eSIMPLE_GENERIC_EXPRESSION.CENTRE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "SHAPE", keyPath: \eSIMPLE_GENERIC_EXPRESSION.SHAPE, 
        kind: .derivedRedeclaring, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "PAIRS", keyPath: \eSIMPLE_GENERIC_EXPRESSION.PAIRS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "MODULUS", keyPath: \eSIMPLE_GENERIC_EXPRESSION.MODULUS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "ARGUMENT", keyPath: \eSIMPLE_GENERIC_EXPRESSION.ARGUMENT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "PARAMETER_DESCRIPTION", keyPath: \eSIMPLE_GENERIC_EXPRESSION.PARAMETER_DESCRIPTION, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "REPEATED_KNOTS", keyPath: \eSIMPLE_GENERIC_EXPRESSION.REPEATED_KNOTS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "DEGREE", keyPath: \eSIMPLE_GENERIC_EXPRESSION.DEGREE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "VALUES_SPACE", keyPath: \eSIMPLE_GENERIC_EXPRESSION.VALUES_SPACE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "SOLE_OUTPUT", keyPath: \eSIMPLE_GENERIC_EXPRESSION.SOLE_OUTPUT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "RANGE_CONSTRAINT", keyPath: \eSIMPLE_GENERIC_EXPRESSION.RANGE_CONSTRAINT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "IMAG_CONSTRAINT", keyPath: \eSIMPLE_GENERIC_EXPRESSION.IMAG_CONSTRAINT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "IMAG_PART", keyPath: \eSIMPLE_GENERIC_EXPRESSION.IMAG_PART, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "START_VALUE", keyPath: \eSIMPLE_GENERIC_EXPRESSION.START_VALUE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "DISTANCE_CONSTRAINT", keyPath: \eSIMPLE_GENERIC_EXPRESSION.DISTANCE_CONSTRAINT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "ORDER", keyPath: \eSIMPLE_GENERIC_EXPRESSION.ORDER, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "SIZE", keyPath: \eSIMPLE_GENERIC_EXPRESSION.SIZE, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "DOMAIN_ARGUMENT", keyPath: \eSIMPLE_GENERIC_EXPRESSION.DOMAIN_ARGUMENT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "REAL_CONSTRAINT", keyPath: \eSIMPLE_GENERIC_EXPRESSION.REAL_CONSTRAINT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "FUNC_ID", keyPath: \eSIMPLE_GENERIC_EXPRESSION.FUNC_ID, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "SPACE_ID", keyPath: \eSIMPLE_GENERIC_EXPRESSION.SPACE_ID, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "PARAMETER_CURRENT_VALUE", keyPath: \eSIMPLE_GENERIC_EXPRESSION.PARAMETER_CURRENT_VALUE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "SELECTOR", keyPath: \eSIMPLE_GENERIC_EXPRESSION.SELECTOR, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "MEMBERS", keyPath: \eSIMPLE_GENERIC_EXPRESSION.MEMBERS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "INCREMENT_NUMBER", keyPath: \eSIMPLE_GENERIC_EXPRESSION.INCREMENT_NUMBER, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "NUM_BASIS", keyPath: \eSIMPLE_GENERIC_EXPRESSION.NUM_BASIS, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "REAL_PART", keyPath: \eSIMPLE_GENERIC_EXPRESSION.REAL_PART, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "INCREMENT_VALUE", keyPath: \eSIMPLE_GENERIC_EXPRESSION.INCREMENT_VALUE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "NAME", keyPath: \eSIMPLE_GENERIC_EXPRESSION.NAME, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)

      return entityDef
    }

  }
}
