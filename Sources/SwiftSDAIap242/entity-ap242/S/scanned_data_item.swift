/* file: scanned_data_item.swift 	 generated: Sun Oct 31 15:32:10 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY scanned_data_item
    SUPERTYPE OF ( 
        ONEOF ( 
            point_cloud_dataset, 
            point_cloud_superdataset, 
            triangulated_point_cloud_dataset, 
            scan_3d_model ) )
    SUBTYPE OF ( geometric_representation_item );
    WHERE
      wr1: ( SIZEOF( QUERY ( using_rep <* using_representations( SELF ) | ( NOT ( 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SCAN_DATA_SHAPE_REPRESENTATION'  IN TYPEOF( 
               using_rep ) ) ) ) ) = 0 );
  END_ENTITY; -- scanned_data_item (line:28446 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	representation_item
    ATTR:  name,	TYPE: label -- EXPLICIT


  SUPER- ENTITY(2)	geometric_representation_item
    ATTR:  dim,	TYPE: dimension_count -- DERIVED
      := dimension_of( SELF )


  ENTITY(SELF)	scanned_data_item
    (no local attributes)

  SUB- ENTITY(4)	point_cloud_dataset_with_normals
    ATTR:  normals,	TYPE: LIST [1 : ?] OF LIST [3 : 3] OF REAL -- EXPLICIT


  SUB- ENTITY(5)	point_cloud_dataset_with_colours
    ATTR:  colour_indices,	TYPE: LIST [1 : ?] OF LIST [3 : 3] OF INTEGER -- EXPLICIT


  SUB- ENTITY(6)	point_cloud_dataset_with_intensities
    ATTR:  intensities,	TYPE: LIST [1 : ?] OF REAL -- EXPLICIT


  SUB- ENTITY(7)	point_cloud_dataset
    ATTR:  point_coordinates,	TYPE: LIST [1 : ?] OF LIST [3 : 3] OF REAL -- EXPLICIT


  SUB- ENTITY(8)	point_cloud_superdataset
    ATTR:  pts_per_sublist,	TYPE: INTEGER -- EXPLICIT

    ATTR:  sublists,	TYPE: LIST [2 : ?] OF point_cloud_dataset -- EXPLICIT


  SUB- ENTITY(9)	triangulated_point_cloud_dataset
    ATTR:  points,	TYPE: point_cloud_set_or_superset -- EXPLICIT

    ATTR:  triangles,	TYPE: LIST [1 : ?] OF LIST [3 : 3] OF INTEGER -- EXPLICIT


  SUB- ENTITY(10)	scan_3d_model
    ATTR:  scanner_info,	TYPE: SET [1 : ?] OF scanner_property -- EXPLICIT

    ATTR:  scanned_points,	TYPE: SET [1 : ?] OF scanned_data_item -- EXPLICIT


*/


//MARK: - Partial Entity
  public final class _scanned_data_item : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eSCANNED_DATA_ITEM.self
    }

    //ATTRIBUTES
    // (no local attributes)

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: eSCANNED_DATA_ITEM?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = USING_REPRESENTATIONS(sFOUNDED_ITEM_SELECT(/*eSCANNED_DATA_ITEM*/SELF))
      let _TEMP2 = _TEMP1?.QUERY{ USING_REP in 

          let _TEMP1 = SDAI.TYPEOF(USING_REP, IS: eSCAN_DATA_SHAPE_REPRESENTATION.self)
          let _TEMP2 =  !_TEMP1
          return _TEMP2 }
      let _TEMP3 = SDAI.SIZEOF(_TEMP2)
      let _TEMP4 = _TEMP3 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      return _TEMP4
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init() {
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 0
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      self.init( )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY scanned_data_item
    SUPERTYPE OF ( 
        ONEOF ( 
            point_cloud_dataset, 
            point_cloud_superdataset, 
            triangulated_point_cloud_dataset, 
            scan_3d_model ) )
    SUBTYPE OF ( geometric_representation_item );
    WHERE
      wr1: ( SIZEOF( QUERY ( using_rep <* using_representations( SELF ) | ( NOT ( 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SCAN_DATA_SHAPE_REPRESENTATION'  IN TYPEOF( 
               using_rep ) ) ) ) ) = 0 );
  END_ENTITY; -- scanned_data_item (line:28446 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eSCANNED_DATA_ITEM : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _scanned_data_item.self
    }
    public let partialEntity: _scanned_data_item

    //MARK: SUPERTYPES
    public let super_eREPRESENTATION_ITEM: eREPRESENTATION_ITEM 	// [1]
    public let super_eGEOMETRIC_REPRESENTATION_ITEM: eGEOMETRIC_REPRESENTATION_ITEM 	// [2]
    public var super_eSCANNED_DATA_ITEM: eSCANNED_DATA_ITEM { return self } 	// [3]

    //MARK: SUBTYPES
    public var sub_ePOINT_CLOUD_DATASET_WITH_NORMALS: ePOINT_CLOUD_DATASET_WITH_NORMALS? {	// [4]
      return self.complexEntity.entityReference(ePOINT_CLOUD_DATASET_WITH_NORMALS.self)
    }

    public var sub_ePOINT_CLOUD_DATASET_WITH_COLOURS: ePOINT_CLOUD_DATASET_WITH_COLOURS? {	// [5]
      return self.complexEntity.entityReference(ePOINT_CLOUD_DATASET_WITH_COLOURS.self)
    }

    public var sub_ePOINT_CLOUD_DATASET_WITH_INTENSITIES: ePOINT_CLOUD_DATASET_WITH_INTENSITIES? {	// [6]
      return self.complexEntity.entityReference(ePOINT_CLOUD_DATASET_WITH_INTENSITIES.self)
    }

    public var sub_ePOINT_CLOUD_DATASET: ePOINT_CLOUD_DATASET? {	// [7]
      return self.complexEntity.entityReference(ePOINT_CLOUD_DATASET.self)
    }

    public var sub_ePOINT_CLOUD_SUPERDATASET: ePOINT_CLOUD_SUPERDATASET? {	// [8]
      return self.complexEntity.entityReference(ePOINT_CLOUD_SUPERDATASET.self)
    }

    public var sub_eTRIANGULATED_POINT_CLOUD_DATASET: eTRIANGULATED_POINT_CLOUD_DATASET? {	// [9]
      return self.complexEntity.entityReference(eTRIANGULATED_POINT_CLOUD_DATASET.self)
    }

    public var sub_eSCAN_3D_MODEL: eSCAN_3D_MODEL? {	// [10]
      return self.complexEntity.entityReference(eSCAN_3D_MODEL.self)
    }


    //MARK: ATTRIBUTES
    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSCAN_3D_MODEL`` )
    public var SCANNED_POINTS: (SDAI.SET<eSCANNED_DATA_ITEM>/*[1:nil]*/ )?  {
      get {
        return sub_eSCAN_3D_MODEL?.partialEntity._scanned_points
      }
      set(newValue) {
        guard let partial = sub_eSCAN_3D_MODEL?.super_eSCAN_3D_MODEL.partialEntity else { return }
        partial._scanned_points = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePOINT_CLOUD_DATASET_WITH_NORMALS`` )
    public var NORMALS: (SDAI.LIST<SDAI.LIST<SDAI.REAL>/*[3:3]*/ >/*[1:nil]*/ )?  {
      get {
        return sub_ePOINT_CLOUD_DATASET_WITH_NORMALS?.partialEntity._normals
      }
      set(newValue) {
        guard let partial = sub_ePOINT_CLOUD_DATASET_WITH_NORMALS?.super_ePOINT_CLOUD_DATASET_WITH_NORMALS
          .partialEntity else { return }
        partial._normals = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSCAN_3D_MODEL`` )
    public var SCANNER_INFO: (SDAI.SET<eSCANNER_PROPERTY>/*[1:nil]*/ )?  {
      get {
        return sub_eSCAN_3D_MODEL?.partialEntity._scanner_info
      }
      set(newValue) {
        guard let partial = sub_eSCAN_3D_MODEL?.super_eSCAN_3D_MODEL.partialEntity else { return }
        partial._scanner_info = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePOINT_CLOUD_SUPERDATASET`` )
    public var PTS_PER_SUBLIST: SDAI.INTEGER?  {
      get {
        return sub_ePOINT_CLOUD_SUPERDATASET?.partialEntity._pts_per_sublist
      }
      set(newValue) {
        guard let partial = sub_ePOINT_CLOUD_SUPERDATASET?.super_ePOINT_CLOUD_SUPERDATASET.partialEntity
          else { return }
        partial._pts_per_sublist = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePOINT_CLOUD_DATASET`` )
    public var POINT_COORDINATES: (SDAI.LIST<SDAI.LIST<SDAI.REAL>/*[3:3]*/ >/*[1:nil]*/ )?  {
      get {
        return sub_ePOINT_CLOUD_DATASET?.partialEntity._point_coordinates
      }
      set(newValue) {
        guard let partial = sub_ePOINT_CLOUD_DATASET?.super_ePOINT_CLOUD_DATASET.partialEntity
          else { return }
        partial._point_coordinates = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePOINT_CLOUD_DATASET_WITH_INTENSITIES`` )
    public var INTENSITIES: (SDAI.LIST<SDAI.REAL>/*[1:nil]*/ )?  {
      get {
        return sub_ePOINT_CLOUD_DATASET_WITH_INTENSITIES?.partialEntity._intensities
      }
      set(newValue) {
        guard let partial = sub_ePOINT_CLOUD_DATASET_WITH_INTENSITIES?.super_ePOINT_CLOUD_DATASET_WITH_INTENSITIES
          .partialEntity else { return }
        partial._intensities = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePOINT_CLOUD_DATASET_WITH_COLOURS`` )
    public var COLOUR_INDICES: (SDAI.LIST<SDAI.LIST<SDAI.INTEGER>/*[3:3]*/ >/*[1:nil]*/ )?  {
      get {
        return sub_ePOINT_CLOUD_DATASET_WITH_COLOURS?.partialEntity._colour_indices
      }
      set(newValue) {
        guard let partial = sub_ePOINT_CLOUD_DATASET_WITH_COLOURS?.super_ePOINT_CLOUD_DATASET_WITH_COLOURS
          .partialEntity else { return }
        partial._colour_indices = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eTRIANGULATED_POINT_CLOUD_DATASET`` )
    public var POINTS: sPOINT_CLOUD_SET_OR_SUPERSET?  {
      get {
        return sub_eTRIANGULATED_POINT_CLOUD_DATASET?.partialEntity._points
      }
      set(newValue) {
        guard let partial = sub_eTRIANGULATED_POINT_CLOUD_DATASET?.super_eTRIANGULATED_POINT_CLOUD_DATASET
          .partialEntity else { return }
        partial._points = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePOINT_CLOUD_SUPERDATASET`` )
    public var SUBLISTS: (SDAI.LIST<ePOINT_CLOUD_DATASET>/*[2:nil]*/ )?  {
      get {
        return sub_ePOINT_CLOUD_SUPERDATASET?.partialEntity._sublists
      }
      set(newValue) {
        guard let partial = sub_ePOINT_CLOUD_SUPERDATASET?.super_ePOINT_CLOUD_SUPERDATASET.partialEntity
          else { return }
        partial._sublists = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eTRIANGULATED_POINT_CLOUD_DATASET`` )
    public var TRIANGLES: (SDAI.LIST<SDAI.LIST<SDAI.INTEGER>/*[3:3]*/ >/*[1:nil]*/ )?  {
      get {
        return sub_eTRIANGULATED_POINT_CLOUD_DATASET?.partialEntity._triangles
      }
      set(newValue) {
        guard let partial = sub_eTRIANGULATED_POINT_CLOUD_DATASET?.super_eTRIANGULATED_POINT_CLOUD_DATASET
          .partialEntity else { return }
        partial._triangles = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eREPRESENTATION_ITEM`` )
    public var NAME: tLABEL {
      get {
        return SDAI.UNWRAP( super_eREPRESENTATION_ITEM.partialEntity._name )
      }
      set(newValue) {
        let partial = super_eREPRESENTATION_ITEM.partialEntity
        partial._name = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUPER( ``eGEOMETRIC_REPRESENTATION_ITEM`` )
    public var DIM: tDIMENSION_COUNT?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"DIM") {
          return cached.value as! tDIMENSION_COUNT? 
        }
        let origin = super_eGEOMETRIC_REPRESENTATION_ITEM
        let value = tDIMENSION_COUNT(origin.partialEntity._dim__getter(SELF: origin))
        updateCache(derivedAttributeName:"DIM", value:value)
        return value
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_scanned_data_item.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eREPRESENTATION_ITEM.self) else { return nil }
      self.super_eREPRESENTATION_ITEM = super1

      guard let super2 = complexEntity?.entityReference(eGEOMETRIC_REPRESENTATION_ITEM.self) else { return nil }
      self.super_eGEOMETRIC_REPRESENTATION_ITEM = super2

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _scanned_data_item.WHERE_wr1(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "SCANNED_DATA_ITEM", type: self, explicitAttributeCount: 0)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eREPRESENTATION_ITEM.self)
      entityDef.add(supertype: eGEOMETRIC_REPRESENTATION_ITEM.self)
      entityDef.add(supertype: eSCANNED_DATA_ITEM.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "SCANNED_POINTS", keyPath: \eSCANNED_DATA_ITEM.SCANNED_POINTS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "NORMALS", keyPath: \eSCANNED_DATA_ITEM.NORMALS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "SCANNER_INFO", keyPath: \eSCANNED_DATA_ITEM.SCANNER_INFO, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "PTS_PER_SUBLIST", keyPath: \eSCANNED_DATA_ITEM.PTS_PER_SUBLIST, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "POINT_COORDINATES", keyPath: \eSCANNED_DATA_ITEM.POINT_COORDINATES, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "INTENSITIES", keyPath: \eSCANNED_DATA_ITEM.INTENSITIES, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "COLOUR_INDICES", keyPath: \eSCANNED_DATA_ITEM.COLOUR_INDICES, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "POINTS", keyPath: \eSCANNED_DATA_ITEM.POINTS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "SUBLISTS", keyPath: \eSCANNED_DATA_ITEM.SUBLISTS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "TRIANGLES", keyPath: \eSCANNED_DATA_ITEM.TRIANGLES, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "NAME", keyPath: \eSCANNED_DATA_ITEM.NAME, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "DIM", keyPath: \eSCANNED_DATA_ITEM.DIM, 
        kind: .derived, source: .superEntity, mayYieldEntityReference: false)

      return entityDef
    }

  }
}
