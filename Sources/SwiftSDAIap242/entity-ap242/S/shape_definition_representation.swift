/* file: shape_definition_representation.swift 	 generated: Tue Nov 16 05:35:44 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY shape_definition_representation
    SUBTYPE OF ( property_definition_representation );
      SELF\property_definition_representation.definition : property_definition;
      SELF\property_definition_representation.used_representation : shape_representation;
    WHERE
      wr1: ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PRODUCT_DEFINITION_SHAPE' IN TYPEOF( 
               definition ) ) OR ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SHAPE_DEFINITION' IN 
               TYPEOF( definition\property_definition.definition ) ) );
  END_ENTITY; -- shape_definition_representation (line:28882 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	property_definition_representation
    ATTR:  definition,	TYPE: represented_definition -- EXPLICIT
      -- possibly overriden by
      *** ENTITY: shape_definition_representation,	TYPE: property_definition
          ENTITY: kinematic_property_definition_representation,	TYPE: product_definition_kinematics	(OBSERVED)

    ATTR:  used_representation,	TYPE: representation -- EXPLICIT
      -- possibly overriden by
      *** ENTITY: shape_definition_representation,	TYPE: shape_representation
          ENTITY: kinematic_property_topology_representation,	TYPE: kinematic_topology_representation_select
          ENTITY: kinematic_property_mechanism_representation,	TYPE: mechanism_representation

    ATTR:  description,	TYPE: text -- DERIVED
      := get_description_value( SELF )

    ATTR:  name,	TYPE: label -- DERIVED
      := get_name_value( SELF )


  ENTITY(SELF)	shape_definition_representation
    REDCR: definition,	TYPE: property_definition -- EXPLICIT
      -- OVERRIDING ENTITY: property_definition_representation

    REDCR: used_representation,	TYPE: shape_representation -- EXPLICIT
      -- OVERRIDING ENTITY: property_definition_representation


*/


//MARK: - Partial Entity
  public final class _shape_definition_representation : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eSHAPE_DEFINITION_REPRESENTATION.self
    }

    //ATTRIBUTES
    /* override var _definition: ePROPERTY_DEFINITION	//EXPLICIT REDEFINITION(ePROPERTY_DEFINITION_REPRESENTATION) */

    /* override var _used_representation: eSHAPE_REPRESENTATION	//EXPLICIT REDEFINITION(ePROPERTY_DEFINITION_REPRESENTATION) */

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: eSHAPE_DEFINITION_REPRESENTATION?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.TYPEOF(SELF.DEFINITION, IS: ePRODUCT_DEFINITION_SHAPE.self)
      let _TEMP2 = SDAI.TYPEOF(SELF.DEFINITION.GROUP_REF(ePROPERTY_DEFINITION.self)?.DEFINITION, 
        IS: sSHAPE_DEFINITION.self)
      let _TEMP3 = _TEMP1 || _TEMP2
      return _TEMP3
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init() {
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 0
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      self.init( )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY shape_definition_representation
    SUBTYPE OF ( property_definition_representation );
      SELF\property_definition_representation.definition : property_definition;
      SELF\property_definition_representation.used_representation : shape_representation;
    WHERE
      wr1: ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PRODUCT_DEFINITION_SHAPE' IN TYPEOF( 
               definition ) ) OR ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SHAPE_DEFINITION' IN 
               TYPEOF( definition\property_definition.definition ) ) );
  END_ENTITY; -- shape_definition_representation (line:28882 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eSHAPE_DEFINITION_REPRESENTATION : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _shape_definition_representation.self
    }
    public let partialEntity: _shape_definition_representation

    //MARK: SUPERTYPES
    public let super_ePROPERTY_DEFINITION_REPRESENTATION: ePROPERTY_DEFINITION_REPRESENTATION 	// [1]
    public var super_eSHAPE_DEFINITION_REPRESENTATION: eSHAPE_DEFINITION_REPRESENTATION { return self } 	// [2]

    //MARK: SUBTYPES

    //MARK: ATTRIBUTES
    /// __DERIVE__ attribute
    /// - origin: SUPER( ``ePROPERTY_DEFINITION_REPRESENTATION`` )
    public var DESCRIPTION: tTEXT?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"DESCRIPTION") {
          return cached.value as! tTEXT? 
        }
        let origin = super_ePROPERTY_DEFINITION_REPRESENTATION
        let value = tTEXT(origin.partialEntity._description__getter(SELF: origin))
        updateCache(derivedAttributeName:"DESCRIPTION", value:value)
        return value
      }
    }

    /// __EXPLICIT REDEF__ attribute
    /// - origin: SELF( ``eSHAPE_DEFINITION_REPRESENTATION`` )
    public var USED_REPRESENTATION: eSHAPE_REPRESENTATION {
      get {
        return SDAI.UNWRAP( eSHAPE_REPRESENTATION( super_ePROPERTY_DEFINITION_REPRESENTATION.partialEntity
          ._used_representation ) )
      }
      set(newValue) {
        let partial = super_ePROPERTY_DEFINITION_REPRESENTATION.partialEntity
        partial._used_representation = SDAI.UNWRAP(
          eREPRESENTATION(newValue))
      }
    }

    /// __EXPLICIT REDEF__ attribute
    /// - origin: SELF( ``eSHAPE_DEFINITION_REPRESENTATION`` )
    public var DEFINITION: ePROPERTY_DEFINITION {
      get {
        return SDAI.UNWRAP( ePROPERTY_DEFINITION( super_ePROPERTY_DEFINITION_REPRESENTATION.partialEntity
          ._definition ) )
      }
      set(newValue) {
        let partial = super_ePROPERTY_DEFINITION_REPRESENTATION.partialEntity
        partial._definition = SDAI.UNWRAP(
          sREPRESENTED_DEFINITION(newValue))
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUPER( ``ePROPERTY_DEFINITION_REPRESENTATION`` )
    public var NAME: tLABEL?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"NAME") {
          return cached.value as! tLABEL? 
        }
        let origin = super_ePROPERTY_DEFINITION_REPRESENTATION
        let value = tLABEL(origin.partialEntity._name__getter(SELF: origin))
        updateCache(derivedAttributeName:"NAME", value:value)
        return value
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_shape_definition_representation.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(ePROPERTY_DEFINITION_REPRESENTATION.self) else { return nil }
      self.super_ePROPERTY_DEFINITION_REPRESENTATION = super1

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _shape_definition_representation.WHERE_wr1(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "SHAPE_DEFINITION_REPRESENTATION", type: self, explicitAttributeCount: 0)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: ePROPERTY_DEFINITION_REPRESENTATION.self)
      entityDef.add(supertype: eSHAPE_DEFINITION_REPRESENTATION.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "DESCRIPTION", keyPath: \eSHAPE_DEFINITION_REPRESENTATION.DESCRIPTION, 
        kind: .derived, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "USED_REPRESENTATION", keyPath: \eSHAPE_DEFINITION_REPRESENTATION.USED_REPRESENTATION, 
        kind: .explicitRedeclaring, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "DEFINITION", keyPath: \eSHAPE_DEFINITION_REPRESENTATION.DEFINITION, 
        kind: .explicitRedeclaring, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "NAME", keyPath: \eSHAPE_DEFINITION_REPRESENTATION.NAME, 
        kind: .derived, source: .superEntity, mayYieldEntityReference: false)

      return entityDef
    }

  }
}
