/* file: shape_inspection_result_accuracy_association.swift 	 generated: Mon Jan  3 16:32:52 2022 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.1, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY shape_inspection_result_accuracy_association;
      applied_specific_accuracy  : shape_measurement_accuracy;
      shape_data_quality_result  : shape_data_quality_inspection_result;
  END_ENTITY; -- shape_inspection_result_accuracy_association (line:28929 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  ENTITY(SELF)	shape_inspection_result_accuracy_association
    ATTR:  applied_specific_accuracy,	TYPE: shape_measurement_accuracy -- EXPLICIT

    ATTR:  shape_data_quality_result,	TYPE: shape_data_quality_inspection_result -- EXPLICIT


*/


//MARK: - Partial Entity
  public final class _shape_inspection_result_accuracy_association : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eSHAPE_INSPECTION_RESULT_ACCURACY_ASSOCIATION.self
    }

    //ATTRIBUTES
    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _applied_specific_accuracy: eSHAPE_MEASUREMENT_ACCURACY // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _shape_data_quality_result: eSHAPE_DATA_QUALITY_INSPECTION_RESULT // PLAIN EXPLICIT ATTRIBUTE

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._applied_specific_accuracy.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._shape_data_quality_result.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._applied_specific_accuracy.value.isValueEqualOptionally(to: rhs._applied_specific_accuracy.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._shape_data_quality_result.value.isValueEqualOptionally(to: rhs._shape_data_quality_result.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._applied_specific_accuracy.value.isValueEqualOptionally(to: rhs._applied_specific_accuracy.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._shape_data_quality_result.value.isValueEqualOptionally(to: rhs._shape_data_quality_result.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(APPLIED_SPECIFIC_ACCURACY: eSHAPE_MEASUREMENT_ACCURACY, SHAPE_DATA_QUALITY_RESULT: 
                eSHAPE_DATA_QUALITY_INSPECTION_RESULT) {
      self._applied_specific_accuracy = APPLIED_SPECIFIC_ACCURACY
      self._shape_data_quality_result = SHAPE_DATA_QUALITY_RESULT
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 2
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverRequiredParameter(as: 
        eSHAPE_MEASUREMENT_ACCURACY.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p1) = exchangeStructure.recoverRequiredParameter(as: 
        eSHAPE_DATA_QUALITY_INSPECTION_RESULT.self, from: parameters[1])
      else { exchangeStructure.add(errorContext: "while recovering parameter #1 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( APPLIED_SPECIFIC_ACCURACY: p0, SHAPE_DATA_QUALITY_RESULT: p1 )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY shape_inspection_result_accuracy_association;
      applied_specific_accuracy  : shape_measurement_accuracy;
      shape_data_quality_result  : shape_data_quality_inspection_result;
  END_ENTITY; -- shape_inspection_result_accuracy_association (line:28929 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eSHAPE_INSPECTION_RESULT_ACCURACY_ASSOCIATION : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _shape_inspection_result_accuracy_association.self
    }
    public let partialEntity: _shape_inspection_result_accuracy_association

    //MARK: SUPERTYPES
    public var super_eSHAPE_INSPECTION_RESULT_ACCURACY_ASSOCIATION: eSHAPE_INSPECTION_RESULT_ACCURACY_ASSOCIATION { return self } 	// [1]

    //MARK: SUBTYPES

    //MARK: ATTRIBUTES
    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eSHAPE_INSPECTION_RESULT_ACCURACY_ASSOCIATION`` )
    public var SHAPE_DATA_QUALITY_RESULT: eSHAPE_DATA_QUALITY_INSPECTION_RESULT {
      get {
        return SDAI.UNWRAP( self.partialEntity._shape_data_quality_result )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._shape_data_quality_result = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eSHAPE_INSPECTION_RESULT_ACCURACY_ASSOCIATION`` )
    public var APPLIED_SPECIFIC_ACCURACY: eSHAPE_MEASUREMENT_ACCURACY {
      get {
        return SDAI.UNWRAP( self.partialEntity._applied_specific_accuracy )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._applied_specific_accuracy = SDAI.UNWRAP(newValue)
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_shape_inspection_result_accuracy_association.self) else { return nil }
      self.partialEntity = partial

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }

    //SIMPLE ENTITY REFERENCE
    public convenience init?(_ partial:_shape_inspection_result_accuracy_association) {
      let complex = SDAI.ComplexEntity(entities:[partial])
      self.init(complex: complex)
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "SHAPE_INSPECTION_RESULT_ACCURACY_ASSOCIATION", type: self, explicitAttributeCount: 2)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eSHAPE_INSPECTION_RESULT_ACCURACY_ASSOCIATION.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "SHAPE_DATA_QUALITY_RESULT", keyPath: \eSHAPE_INSPECTION_RESULT_ACCURACY_ASSOCIATION.SHAPE_DATA_QUALITY_RESULT, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "APPLIED_SPECIFIC_ACCURACY", keyPath: \eSHAPE_INSPECTION_RESULT_ACCURACY_ASSOCIATION.APPLIED_SPECIFIC_ACCURACY, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)

      return entityDef
    }

  }
}
