/* file: string_expression.swift 	 generated: Sat Aug 14 13:46:02 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY string_expression
    ABSTRACT SUPERTYPE OF ( 
        ONEOF ( 
            simple_string_expression, 
            index_expression, 
            substring_expression, 
            concat_expression, 
            format_function, 
            string_defined_function ) )
    SUBTYPE OF ( expression );
  END_ENTITY; -- string_expression (line:30877 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	generic_expression
    (no local attributes)

  SUPER- ENTITY(2)	expression
    (no local attributes)

  ENTITY(SELF)	string_expression
    (no local attributes)

  SUB- ENTITY(4)	concat_expression
    REDCR: operands,	TYPE: LIST [2 : ?] OF string_expression -- EXPLICIT
      -- OVERRIDING ENTITY: multiple_arity_generic_expression


  SUB- ENTITY(5)	string_literal
    ATTR:  the_value,	TYPE: STRING -- EXPLICIT


  SUB- ENTITY(6)	maths_string_variable
    (no local attributes)

  SUB- ENTITY(7)	string_variable
    (no local attributes)

  SUB- ENTITY(8)	simple_string_expression
    (no local attributes)

  SUB- ENTITY(9)	index_expression
    ATTR:  operand,	TYPE: generic_expression -- DERIVED	(AMBIGUOUS/MASKED)
      := SELF\binary_generic_expression.operands[1]

    ATTR:  index,	TYPE: generic_expression -- DERIVED
      := SELF\binary_generic_expression.operands[2]


  SUB- ENTITY(10)	substring_expression
    ATTR:  operand,	TYPE: generic_expression -- DERIVED	(AMBIGUOUS/MASKED)
      := SELF\multiple_arity_generic_expression.operands[1]

    ATTR:  index1,	TYPE: generic_expression -- DERIVED
      := SELF\multiple_arity_generic_expression.operands[2]

    ATTR:  index2,	TYPE: generic_expression -- DERIVED
      := SELF\multiple_arity_generic_expression.operands[3]


  SUB- ENTITY(11)	format_function
    ATTR:  value_to_format,	TYPE: generic_expression -- DERIVED
      := SELF\binary_generic_expression.operands[1]

    ATTR:  format_string,	TYPE: generic_expression -- DERIVED
      := SELF\binary_generic_expression.operands[2]


  SUB- ENTITY(12)	string_defined_function
    (no local attributes)

  SUB- ENTITY(13)	expression_extension_string
    (no local attributes)

*/


//MARK: - Partial Entity
  public final class _string_expression : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eSTRING_EXPRESSION.self
    }

    //ATTRIBUTES
    // (no local attributes)

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init() {
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 0
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      self.init( )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY string_expression
    ABSTRACT SUPERTYPE OF ( 
        ONEOF ( 
            simple_string_expression, 
            index_expression, 
            substring_expression, 
            concat_expression, 
            format_function, 
            string_defined_function ) )
    SUBTYPE OF ( expression );
  END_ENTITY; -- string_expression (line:30877 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eSTRING_EXPRESSION : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _string_expression.self
    }
    public let partialEntity: _string_expression

    //MARK: SUPERTYPES
    public let super_eGENERIC_EXPRESSION: eGENERIC_EXPRESSION 	// [1]
    public let super_eEXPRESSION: eEXPRESSION 	// [2]
    public var super_eSTRING_EXPRESSION: eSTRING_EXPRESSION { return self } 	// [3]

    //MARK: SUBTYPES
    public var sub_eCONCAT_EXPRESSION: eCONCAT_EXPRESSION? {	// [4]
      return self.complexEntity.entityReference(eCONCAT_EXPRESSION.self)
    }

    public var sub_eSTRING_LITERAL: eSTRING_LITERAL? {	// [5]
      return self.complexEntity.entityReference(eSTRING_LITERAL.self)
    }

    public var sub_eMATHS_STRING_VARIABLE: eMATHS_STRING_VARIABLE? {	// [6]
      return self.complexEntity.entityReference(eMATHS_STRING_VARIABLE.self)
    }

    public var sub_eSTRING_VARIABLE: eSTRING_VARIABLE? {	// [7]
      return self.complexEntity.entityReference(eSTRING_VARIABLE.self)
    }

    public var sub_eSIMPLE_STRING_EXPRESSION: eSIMPLE_STRING_EXPRESSION? {	// [8]
      return self.complexEntity.entityReference(eSIMPLE_STRING_EXPRESSION.self)
    }

    public var sub_eINDEX_EXPRESSION: eINDEX_EXPRESSION? {	// [9]
      return self.complexEntity.entityReference(eINDEX_EXPRESSION.self)
    }

    public var sub_eSUBSTRING_EXPRESSION: eSUBSTRING_EXPRESSION? {	// [10]
      return self.complexEntity.entityReference(eSUBSTRING_EXPRESSION.self)
    }

    public var sub_eFORMAT_FUNCTION: eFORMAT_FUNCTION? {	// [11]
      return self.complexEntity.entityReference(eFORMAT_FUNCTION.self)
    }

    public var sub_eSTRING_DEFINED_FUNCTION: eSTRING_DEFINED_FUNCTION? {	// [12]
      return self.complexEntity.entityReference(eSTRING_DEFINED_FUNCTION.self)
    }

    public var sub_eEXPRESSION_EXTENSION_STRING: eEXPRESSION_EXTENSION_STRING? {	// [13]
      return self.complexEntity.entityReference(eEXPRESSION_EXTENSION_STRING.self)
    }


    //MARK: ATTRIBUTES
    // OPERAND: (2 AMBIGUOUS REFs)

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eFORMAT_FUNCTION`` )
    public var FORMAT_STRING: eGENERIC_EXPRESSION?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"FORMAT_STRING") {
          return cached.value as! eGENERIC_EXPRESSION? 
        }
        guard let origin = sub_eFORMAT_FUNCTION else { return nil }
        let value = eGENERIC_EXPRESSION(origin.partialEntity._format_string__getter(SELF: origin))
        updateCache(derivedAttributeName:"FORMAT_STRING", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSTRING_LITERAL`` )
    public var THE_VALUE: SDAI.STRING?  {
      get {
        return sub_eSTRING_LITERAL?.partialEntity._the_value
      }
      set(newValue) {
        guard let partial = sub_eSTRING_LITERAL?.super_eSTRING_LITERAL.partialEntity else { return }
        partial._the_value = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eSUBSTRING_EXPRESSION`` )
    public var INDEX2: eGENERIC_EXPRESSION?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"INDEX2") {
          return cached.value as! eGENERIC_EXPRESSION? 
        }
        guard let origin = sub_eSUBSTRING_EXPRESSION else { return nil }
        let value = eGENERIC_EXPRESSION(origin.partialEntity._index2__getter(SELF: origin))
        updateCache(derivedAttributeName:"INDEX2", value:value)
        return value
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eSUBSTRING_EXPRESSION`` )
    public var INDEX1: eGENERIC_EXPRESSION?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"INDEX1") {
          return cached.value as! eGENERIC_EXPRESSION? 
        }
        guard let origin = sub_eSUBSTRING_EXPRESSION else { return nil }
        let value = eGENERIC_EXPRESSION(origin.partialEntity._index1__getter(SELF: origin))
        updateCache(derivedAttributeName:"INDEX1", value:value)
        return value
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eFORMAT_FUNCTION`` )
    public var VALUE_TO_FORMAT: eGENERIC_EXPRESSION?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"VALUE_TO_FORMAT") {
          return cached.value as! eGENERIC_EXPRESSION? 
        }
        guard let origin = sub_eFORMAT_FUNCTION else { return nil }
        let value = eGENERIC_EXPRESSION(origin.partialEntity._value_to_format__getter(SELF: origin))
        updateCache(derivedAttributeName:"VALUE_TO_FORMAT", value:value)
        return value
      }
    }

    /// __EXPLICIT REDEF(DYNAMIC)__ attribute
    /// - origin: SUB( ``eCONCAT_EXPRESSION`` )
    public var OPERANDS: (SDAI.LIST<eSTRING_EXPRESSION>/*[2:nil]*/ )?  {
      get {
        if let resolved = _multiple_arity_generic_expression._operands__provider(complex: self.complexEntity) {
          let value = SDAI.LIST<eSTRING_EXPRESSION>(resolved._operands__getter(complex: self.complexEntity))
          return value
        }
        else {
          return SDAI.LIST<eSTRING_EXPRESSION>(sub_eCONCAT_EXPRESSION?.super_eMULTIPLE_ARITY_GENERIC_EXPRESSION
            .partialEntity._operands)
        }
      }
      set(newValue) {
        if let _ = _multiple_arity_generic_expression._operands__provider(complex: self.complexEntity) { return }

        guard let partial = sub_eCONCAT_EXPRESSION?.super_eMULTIPLE_ARITY_GENERIC_EXPRESSION.partialEntity
          else { return }
        partial._operands = SDAI.UNWRAP(
          SDAI.LIST<eGENERIC_EXPRESSION>(newValue))
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eINDEX_EXPRESSION`` )
    public var INDEX: eGENERIC_EXPRESSION?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"INDEX") {
          return cached.value as! eGENERIC_EXPRESSION? 
        }
        guard let origin = sub_eINDEX_EXPRESSION else { return nil }
        let value = eGENERIC_EXPRESSION(origin.partialEntity._index__getter(SELF: origin))
        updateCache(derivedAttributeName:"INDEX", value:value)
        return value
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_string_expression.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eGENERIC_EXPRESSION.self) else { return nil }
      self.super_eGENERIC_EXPRESSION = super1

      guard let super2 = complexEntity?.entityReference(eEXPRESSION.self) else { return nil }
      self.super_eEXPRESSION = super2

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "STRING_EXPRESSION", type: self, explicitAttributeCount: 0)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eGENERIC_EXPRESSION.self)
      entityDef.add(supertype: eEXPRESSION.self)
      entityDef.add(supertype: eSTRING_EXPRESSION.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "FORMAT_STRING", keyPath: \eSTRING_EXPRESSION.FORMAT_STRING, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "THE_VALUE", keyPath: \eSTRING_EXPRESSION.THE_VALUE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "INDEX2", keyPath: \eSTRING_EXPRESSION.INDEX2, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "INDEX1", keyPath: \eSTRING_EXPRESSION.INDEX1, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "VALUE_TO_FORMAT", keyPath: \eSTRING_EXPRESSION.VALUE_TO_FORMAT, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "OPERANDS", keyPath: \eSTRING_EXPRESSION.OPERANDS, 
        kind: .explicitRedeclaring, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "INDEX", keyPath: \eSTRING_EXPRESSION.INDEX, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: true)

      return entityDef
    }

  }
}
