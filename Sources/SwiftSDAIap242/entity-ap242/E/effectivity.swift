/* file: effectivity.swift 	 generated: Sun Oct 31 15:32:10 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY effectivity
    SUPERTYPE OF ( 
        ONEOF ( 
            serial_numbered_effectivity, 
            dated_effectivity, 
            lot_effectivity, 
            time_interval_based_effectivity ) );
      id  : identifier;
    DERIVE
      name         : label := get_name_value( SELF );
      description  : text := get_description_value( SELF );
    WHERE
      wr1: ( SIZEOF( USEDIN( SELF, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.NAME_ATTRIBUTE.NAMED_ITEM' ) ) 
               <= 1 );
      wr2: ( SIZEOF( USEDIN( SELF, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.DESCRIPTION_ATTRIBUTE.'
               + 'DESCRIBED_ITEM'  ) ) <= 1 );
  END_ENTITY; -- effectivity (line:13549 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  ENTITY(SELF)	effectivity
    ATTR:  id,	TYPE: identifier -- EXPLICIT

    ATTR:  name,	TYPE: label -- DERIVED
      := get_name_value( SELF )

    ATTR:  description,	TYPE: text -- DERIVED
      := get_description_value( SELF )


  SUB- ENTITY(2)	lot_effectivity
    ATTR:  effectivity_lot_id,	TYPE: identifier -- EXPLICIT

    ATTR:  effectivity_lot_size,	TYPE: measure_with_unit -- EXPLICIT


  SUB- ENTITY(3)	conditional_effectivity
    (no local attributes)

  SUB- ENTITY(4)	time_interval_based_effectivity
    ATTR:  effectivity_period,	TYPE: time_interval -- EXPLICIT


  SUB- ENTITY(5)	serial_numbered_effectivity
    ATTR:  effectivity_start_id,	TYPE: identifier -- EXPLICIT

    ATTR:  effectivity_end_id,	TYPE: OPTIONAL identifier -- EXPLICIT


  SUB- ENTITY(6)	dated_effectivity
    ATTR:  effectivity_end_date,	TYPE: OPTIONAL date_time_or_event_occurrence -- EXPLICIT

    ATTR:  effectivity_start_date,	TYPE: OPTIONAL date_time_or_event_occurrence -- EXPLICIT


  SUB- ENTITY(7)	configuration_effectivity
    ATTR:  configuration,	TYPE: configuration_design -- EXPLICIT


  SUB- ENTITY(8)	product_definition_effectivity
    ATTR:  usage,	TYPE: product_definition_relationship -- EXPLICIT


*/


//MARK: - Partial Entity
  public final class _effectivity : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eEFFECTIVITY.self
    }

    //ATTRIBUTES
    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _id: tIDENTIFIER // PLAIN EXPLICIT ATTRIBUTE

    /// DERIVE ATTRIBUTE
    internal func _name__getter(SELF: eEFFECTIVITY) -> tLABEL?  {

      let _TEMP1 = GET_NAME_VALUE(sNAME_ATTRIBUTE_SELECT(/*eEFFECTIVITY*/SELF))
      return _TEMP1
    }

    /// DERIVE ATTRIBUTE
    internal func _description__getter(SELF: eEFFECTIVITY) -> tTEXT?  {

      let _TEMP1 = GET_DESCRIPTION_VALUE(sDESCRIPTION_ATTRIBUTE_SELECT(/*eEFFECTIVITY*/SELF))
      return _TEMP1
    }

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      //SELECT data types (indirectly) referencing the current type as a member of the select list
      members.insert(SDAI.STRING(sDATE_AND_TIME_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sCLASSIFICATION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sACTION_ITEMS.typeName)) // -> sCLASSIFICATION_ITEM
      members.insert(SDAI.STRING(sCHANGE_MANAGEMENT_OBJECT.typeName)) // -> sACTION_ITEMS
      members.insert(SDAI.STRING(sIR_USAGE_ITEM.typeName)) // -> sCLASSIFICATION_ITEM
      members.insert(SDAI.STRING(sMULTI_LANGUAGE_ATTRIBUTE_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sEXTERNAL_IDENTIFICATION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sIDENTIFICATION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sATTRIBUTE_CLASSIFICATION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sDESCRIPTION_ATTRIBUTE_SELECT.typeName)) // -> Self
      members.insert(SDAI.STRING(sDATE_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sAPPROVAL_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sACTION_METHOD_ITEMS.typeName)) // -> Self
      members.insert(SDAI.STRING(sNAME_ATTRIBUTE_SELECT.typeName)) // -> Self
      members.insert(SDAI.STRING(sPERSON_AND_ORGANIZATION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sGENERAL_ORGANIZATIONAL_DATA_SELECT.typeName)) // -> Self
      members.insert(SDAI.STRING(sEVENT_OCCURRENCE_ITEM.typeName)) // -> sGENERAL_ORGANIZATIONAL_DATA_SELECT
      members.insert(SDAI.STRING(sORGANIZATION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sDESCRIPTION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sATTRIBUTE_LANGUAGE_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sDOCUMENT_REFERENCE_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sGROUPABLE_ITEM.typeName)) // -> Self
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._id.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._id.value.isValueEqualOptionally(to: rhs._id.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._id.value.isValueEqualOptionally(to: rhs._id.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: eEFFECTIVITY?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.USEDIN(T: SELF, ROLE: \AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF
        .eNAME_ATTRIBUTE.NAMED_ITEM)
      let _TEMP2 = SDAI.SIZEOF(_TEMP1)
      let _TEMP3 = _TEMP2 <= SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
      return _TEMP3
    }
    public static func WHERE_wr2(SELF: eEFFECTIVITY?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.USEDIN(T: SELF, ROLE: \AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF
        .eDESCRIPTION_ATTRIBUTE.DESCRIBED_ITEM)
      let _TEMP2 = SDAI.SIZEOF(_TEMP1)
      let _TEMP3 = _TEMP2 <= SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
      return _TEMP3
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(ID: tIDENTIFIER) {
      self._id = ID
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 1
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverRequiredParameter(as: tIDENTIFIER.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( ID: p0 )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY effectivity
    SUPERTYPE OF ( 
        ONEOF ( 
            serial_numbered_effectivity, 
            dated_effectivity, 
            lot_effectivity, 
            time_interval_based_effectivity ) );
      id  : identifier;
    DERIVE
      name         : label := get_name_value( SELF );
      description  : text := get_description_value( SELF );
    WHERE
      wr1: ( SIZEOF( USEDIN( SELF, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.NAME_ATTRIBUTE.NAMED_ITEM' ) ) 
               <= 1 );
      wr2: ( SIZEOF( USEDIN( SELF, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.DESCRIPTION_ATTRIBUTE.'
               + 'DESCRIBED_ITEM'  ) ) <= 1 );
  END_ENTITY; -- effectivity (line:13549 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eEFFECTIVITY : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _effectivity.self
    }
    public let partialEntity: _effectivity

    //MARK: SUPERTYPES
    public var super_eEFFECTIVITY: eEFFECTIVITY { return self } 	// [1]

    //MARK: SUBTYPES
    public var sub_eLOT_EFFECTIVITY: eLOT_EFFECTIVITY? {	// [2]
      return self.complexEntity.entityReference(eLOT_EFFECTIVITY.self)
    }

    public var sub_eCONDITIONAL_EFFECTIVITY: eCONDITIONAL_EFFECTIVITY? {	// [3]
      return self.complexEntity.entityReference(eCONDITIONAL_EFFECTIVITY.self)
    }

    public var sub_eTIME_INTERVAL_BASED_EFFECTIVITY: eTIME_INTERVAL_BASED_EFFECTIVITY? {	// [4]
      return self.complexEntity.entityReference(eTIME_INTERVAL_BASED_EFFECTIVITY.self)
    }

    public var sub_eSERIAL_NUMBERED_EFFECTIVITY: eSERIAL_NUMBERED_EFFECTIVITY? {	// [5]
      return self.complexEntity.entityReference(eSERIAL_NUMBERED_EFFECTIVITY.self)
    }

    public var sub_eDATED_EFFECTIVITY: eDATED_EFFECTIVITY? {	// [6]
      return self.complexEntity.entityReference(eDATED_EFFECTIVITY.self)
    }

    public var sub_eCONFIGURATION_EFFECTIVITY: eCONFIGURATION_EFFECTIVITY? {	// [7]
      return self.complexEntity.entityReference(eCONFIGURATION_EFFECTIVITY.self)
    }

    public var sub_ePRODUCT_DEFINITION_EFFECTIVITY: ePRODUCT_DEFINITION_EFFECTIVITY? {	// [8]
      return self.complexEntity.entityReference(ePRODUCT_DEFINITION_EFFECTIVITY.self)
    }


    //MARK: ATTRIBUTES
    /// __DERIVE__ attribute
    /// - origin: SELF( ``eEFFECTIVITY`` )
    public var DESCRIPTION: tTEXT?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"DESCRIPTION") {
          return cached.value as! tTEXT? 
        }
        let origin = self
        let value = origin.partialEntity._description__getter(SELF: origin)
        updateCache(derivedAttributeName:"DESCRIPTION", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eLOT_EFFECTIVITY`` )
    public var EFFECTIVITY_LOT_ID: tIDENTIFIER?  {
      get {
        return sub_eLOT_EFFECTIVITY?.partialEntity._effectivity_lot_id
      }
      set(newValue) {
        guard let partial = sub_eLOT_EFFECTIVITY?.super_eLOT_EFFECTIVITY.partialEntity else { return }
        partial._effectivity_lot_id = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eDATED_EFFECTIVITY`` )
    public var EFFECTIVITY_END_DATE: sDATE_TIME_OR_EVENT_OCCURRENCE?  {
      get {
        return sub_eDATED_EFFECTIVITY?.partialEntity._effectivity_end_date
      }
      set(newValue) {
        guard let partial = sub_eDATED_EFFECTIVITY?.super_eDATED_EFFECTIVITY.partialEntity else { return }
        partial._effectivity_end_date = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eLOT_EFFECTIVITY`` )
    public var EFFECTIVITY_LOT_SIZE: eMEASURE_WITH_UNIT?  {
      get {
        return sub_eLOT_EFFECTIVITY?.partialEntity._effectivity_lot_size
      }
      set(newValue) {
        guard let partial = sub_eLOT_EFFECTIVITY?.super_eLOT_EFFECTIVITY.partialEntity else { return }
        partial._effectivity_lot_size = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eTIME_INTERVAL_BASED_EFFECTIVITY`` )
    public var EFFECTIVITY_PERIOD: eTIME_INTERVAL?  {
      get {
        return sub_eTIME_INTERVAL_BASED_EFFECTIVITY?.partialEntity._effectivity_period
      }
      set(newValue) {
        guard let partial = sub_eTIME_INTERVAL_BASED_EFFECTIVITY?.super_eTIME_INTERVAL_BASED_EFFECTIVITY
          .partialEntity else { return }
        partial._effectivity_period = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eDATED_EFFECTIVITY`` )
    public var EFFECTIVITY_START_DATE: sDATE_TIME_OR_EVENT_OCCURRENCE?  {
      get {
        return sub_eDATED_EFFECTIVITY?.partialEntity._effectivity_start_date
      }
      set(newValue) {
        guard let partial = sub_eDATED_EFFECTIVITY?.super_eDATED_EFFECTIVITY.partialEntity else { return }
        partial._effectivity_start_date = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSERIAL_NUMBERED_EFFECTIVITY`` )
    public var EFFECTIVITY_END_ID: tIDENTIFIER?  {
      get {
        return sub_eSERIAL_NUMBERED_EFFECTIVITY?.partialEntity._effectivity_end_id
      }
      set(newValue) {
        guard let partial = sub_eSERIAL_NUMBERED_EFFECTIVITY?.super_eSERIAL_NUMBERED_EFFECTIVITY
          .partialEntity else { return }
        partial._effectivity_end_id = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eEFFECTIVITY`` )
    public var ID: tIDENTIFIER {
      get {
        return SDAI.UNWRAP( self.partialEntity._id )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._id = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSERIAL_NUMBERED_EFFECTIVITY`` )
    public var EFFECTIVITY_START_ID: tIDENTIFIER?  {
      get {
        return sub_eSERIAL_NUMBERED_EFFECTIVITY?.partialEntity._effectivity_start_id
      }
      set(newValue) {
        guard let partial = sub_eSERIAL_NUMBERED_EFFECTIVITY?.super_eSERIAL_NUMBERED_EFFECTIVITY
          .partialEntity else { return }
        partial._effectivity_start_id = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCONFIGURATION_EFFECTIVITY`` )
    public var CONFIGURATION: eCONFIGURATION_DESIGN?  {
      get {
        return sub_eCONFIGURATION_EFFECTIVITY?.partialEntity._configuration
      }
      set(newValue) {
        guard let partial = sub_eCONFIGURATION_EFFECTIVITY?.super_eCONFIGURATION_EFFECTIVITY.partialEntity
          else { return }
        partial._configuration = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SELF( ``eEFFECTIVITY`` )
    public var NAME: tLABEL?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"NAME") {
          return cached.value as! tLABEL? 
        }
        let origin = self
        let value = origin.partialEntity._name__getter(SELF: origin)
        updateCache(derivedAttributeName:"NAME", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePRODUCT_DEFINITION_EFFECTIVITY`` )
    public var USAGE: ePRODUCT_DEFINITION_RELATIONSHIP?  {
      get {
        return sub_ePRODUCT_DEFINITION_EFFECTIVITY?.partialEntity._usage
      }
      set(newValue) {
        guard let partial = sub_ePRODUCT_DEFINITION_EFFECTIVITY?.super_ePRODUCT_DEFINITION_EFFECTIVITY
          .partialEntity else { return }
        partial._usage = SDAI.UNWRAP(newValue)
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_effectivity.self) else { return nil }
      self.partialEntity = partial

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }

    //SIMPLE ENTITY REFERENCE
    public convenience init?(_ partial:_effectivity) {
      let complex = SDAI.ComplexEntity(entities:[partial])
      self.init(complex: complex)
    }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _effectivity.WHERE_wr1(SELF: instance)
      result[prefix2 + " .WHERE_wr2"] = _effectivity.WHERE_wr2(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "EFFECTIVITY", type: self, explicitAttributeCount: 1)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eEFFECTIVITY.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "DESCRIPTION", keyPath: \eEFFECTIVITY.DESCRIPTION, 
        kind: .derived, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "EFFECTIVITY_LOT_ID", keyPath: \eEFFECTIVITY.EFFECTIVITY_LOT_ID, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "EFFECTIVITY_END_DATE", keyPath: \eEFFECTIVITY.EFFECTIVITY_END_DATE, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "EFFECTIVITY_LOT_SIZE", keyPath: \eEFFECTIVITY.EFFECTIVITY_LOT_SIZE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "EFFECTIVITY_PERIOD", keyPath: \eEFFECTIVITY.EFFECTIVITY_PERIOD, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "EFFECTIVITY_START_DATE", keyPath: \eEFFECTIVITY.EFFECTIVITY_START_DATE, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "EFFECTIVITY_END_ID", keyPath: \eEFFECTIVITY.EFFECTIVITY_END_ID, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "ID", keyPath: \eEFFECTIVITY.ID, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "EFFECTIVITY_START_ID", keyPath: \eEFFECTIVITY.EFFECTIVITY_START_ID, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "CONFIGURATION", keyPath: \eEFFECTIVITY.CONFIGURATION, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "NAME", keyPath: \eEFFECTIVITY.NAME, 
        kind: .derived, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "USAGE", keyPath: \eEFFECTIVITY.USAGE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)

      return entityDef
    }

  }
}
