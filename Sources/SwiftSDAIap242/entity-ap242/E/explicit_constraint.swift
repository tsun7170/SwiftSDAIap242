/* file: explicit_constraint.swift 	 generated: Tue Nov 16 05:35:44 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY explicit_constraint
    ABSTRACT SUPERTYPE OF ( 
        ONEOF ( 
            defined_constraint, 
            free_form_constraint ) )
    SUBTYPE OF ( variational_representation_item );
      description           : OPTIONAL text;
      constrained_elements  : SET [1 : ?] OF representation_item;
      reference_elements    : SET [0 : ?] OF representation_item;
    WHERE
      wr1: ( SIZEOF( constrained_elements * reference_elements ) = 0 );
  END_ENTITY; -- explicit_constraint (line:14145 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	representation_item
    ATTR:  name,	TYPE: label -- EXPLICIT


  SUPER- ENTITY(2)	variational_representation_item
    (no local attributes)

  ENTITY(SELF)	explicit_constraint
    ATTR:  description,	TYPE: OPTIONAL text -- EXPLICIT

    ATTR:  constrained_elements,	TYPE: SET [1 : ?] OF representation_item -- EXPLICIT
      -- possibly overriden by
          ENTITY: symmetry_geometric_constraint,	TYPE: SET [2 : 2] OF geometric_representation_item
          ENTITY: swept_point_curve_geometric_constraint,	TYPE: SET [1 : ?] OF curve
          ENTITY: coaxial_geometric_constraint,	TYPE: SET [1 : ?] OF axial_geometry_constraint_element
          ENTITY: curve_smoothness_geometric_constraint,	TYPE: SET [1 : 1] OF curve_segment_set
          ENTITY: incidence_geometric_constraint,	TYPE: SET [1 : ?] OF geometric_constraint_element
          ENTITY: curve_length_geometric_constraint,	TYPE: SET [1 : ?] OF bounded_curve
          ENTITY: equal_parameter_constraint,	TYPE: SET [1 : ?] OF variational_parameter
          ENTITY: free_form_constraint,	TYPE: SET [1 : ?] OF variational_parameter
          ENTITY: surface_smoothness_geometric_constraint,	TYPE: SET [1 : 1] OF surface_patch_set
          ENTITY: fixed_element_geometric_constraint,	TYPE: SET [1 : ?] OF geometric_constraint_element
          ENTITY: angle_geometric_constraint,	TYPE: SET [1 : ?] OF linear_geometry_constraint_element
          ENTITY: perpendicular_geometric_constraint,	TYPE: SET [1 : ?] OF linear_geometry_constraint_element
          ENTITY: parallel_offset_geometric_constraint,	TYPE: SET [1 : ?] OF curve_or_surface_constraint_element
          ENTITY: surface_distance_geometric_constraint,	TYPE: SET [1 : 2] OF surface
          ENTITY: parallel_geometric_constraint,	TYPE: SET [1 : ?] OF linear_geometry_constraint_element
          ENTITY: point_distance_geometric_constraint,	TYPE: SET [1 : ?] OF point
          ENTITY: radius_geometric_constraint,	TYPE: SET [1 : ?] OF radial_geometry_constraint_element
          ENTITY: skew_line_distance_geometric_constraint,	TYPE: SET [1 : 2] OF line
          ENTITY: explicit_geometric_constraint,	TYPE: SET [1 : ?] OF geometric_representation_item
          ENTITY: curve_distance_geometric_constraint,	TYPE: SET [1 : 2] OF curve
          ENTITY: swept_curve_surface_geometric_constraint,	TYPE: SET [1 : ?] OF surface
          ENTITY: tangent_geometric_constraint,	TYPE: SET [1 : ?] OF curve_or_surface_constraint_element

    ATTR:  reference_elements,	TYPE: SET [0 : ?] OF representation_item -- EXPLICIT
      -- possibly overriden by
          ENTITY: swept_point_curve_geometric_constraint,	TYPE: SET [1 : 1] OF swept_face_solid
          ENTITY: coaxial_geometric_constraint,	TYPE: SET [0 : 1] OF axial_geometry_constraint_element
          ENTITY: incidence_geometric_constraint,	TYPE: SET [0 : ?] OF geometric_constraint_element
          ENTITY: equal_parameter_constraint,	TYPE: SET [0 : 1] OF variational_parameter
          ENTITY: free_form_constraint,	TYPE: SET [0 : ?] OF variational_parameter
          ENTITY: angle_geometric_constraint,	TYPE: SET [0 : 1] OF linear_geometry_constraint_element
          ENTITY: perpendicular_geometric_constraint,	TYPE: SET [0 : 2] OF linear_geometry_constraint_element
          ENTITY: parallel_offset_geometric_constraint,	TYPE: SET [0 : 1] OF curve_or_surface_constraint_element
          ENTITY: surface_distance_geometric_constraint,	TYPE: SET [0 : 4] OF point_curve_or_surface_constraint_element
          ENTITY: parallel_geometric_constraint,	TYPE: SET [0 : 1] OF linear_geometry_constraint_element
          ENTITY: point_distance_geometric_constraint,	TYPE: SET [0 : 4] OF point_curve_or_surface_constraint_element
          ENTITY: skew_line_distance_geometric_constraint,	TYPE: SET [0 : 1] OF line
          ENTITY: explicit_geometric_constraint,	TYPE: SET [0 : ?] OF geometric_representation_item
          ENTITY: curve_distance_geometric_constraint,	TYPE: SET [0 : 4] OF point_curve_or_surface_constraint_element
          ENTITY: swept_curve_surface_geometric_constraint,	TYPE: SET [1 : 1] OF swept_surface_or_solid
          ENTITY: tangent_geometric_constraint,	TYPE: SET [0 : ?] OF curve_or_surface_constraint_element


  SUB- ENTITY(4)	surface_distance_assembly_constraint_with_dimension
    (no local attributes)

  SUB- ENTITY(5)	perpendicular_assembly_constraint
    (no local attributes)

  SUB- ENTITY(6)	parallel_assembly_constraint_with_dimension
    (no local attributes)

  SUB- ENTITY(7)	parallel_assembly_constraint
    (no local attributes)

  SUB- ENTITY(8)	angle_assembly_constraint_with_dimension
    (no local attributes)

  SUB- ENTITY(9)	incidence_assembly_constraint
    (no local attributes)

  SUB- ENTITY(10)	coaxial_assembly_constraint
    (no local attributes)

  SUB- ENTITY(11)	tangent_assembly_constraint
    (no local attributes)

  SUB- ENTITY(12)	binary_assembly_constraint
    REDCR: rep_1,	TYPE: representative_shape_representation -- EXPLICIT
      -- OVERRIDING ENTITY: representation_relationship

    REDCR: rep_2,	TYPE: representative_shape_representation -- EXPLICIT
      -- OVERRIDING ENTITY: representation_relationship


  SUB- ENTITY(13)	fixed_constituent_assembly_constraint
    ATTR:  fixed_constituent,	TYPE: representative_shape_representation -- EXPLICIT


  SUB- ENTITY(14)	assembly_geometric_constraint
    (no local attributes)

  SUB- ENTITY(15)	free_form_relation
    (no local attributes)

  SUB- ENTITY(16)	free_form_assignment
    (no local attributes)

  SUB- ENTITY(17)	free_form_constraint
    REDCR: constrained_elements,	TYPE: SET [1 : ?] OF variational_parameter -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint

    REDCR: reference_elements,	TYPE: SET [0 : ?] OF variational_parameter -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint

    ATTR:  constraining_expression,	TYPE: expression -- EXPLICIT


  SUB- ENTITY(18)	equal_parameter_constraint
    REDCR: constrained_elements,	TYPE: SET [1 : ?] OF variational_parameter -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint

    REDCR: reference_elements,	TYPE: SET [0 : 1] OF variational_parameter -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint


  SUB- ENTITY(19)	symmetry_geometric_constraint
    REDCR: constrained_elements,	TYPE: SET [2 : 2] OF geometric_representation_item -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint

    ATTR:  mirror_element,	TYPE: linear_geometry_constraint_element -- EXPLICIT


  SUB- ENTITY(20)	swept_point_curve_geometric_constraint
    REDCR: constrained_elements,	TYPE: SET [1 : ?] OF curve -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint

    REDCR: reference_elements,	TYPE: SET [1 : 1] OF swept_face_solid -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint


  SUB- ENTITY(21)	coaxial_geometric_constraint
    REDCR: constrained_elements,	TYPE: SET [1 : ?] OF axial_geometry_constraint_element -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint

    REDCR: reference_elements,	TYPE: SET [0 : 1] OF axial_geometry_constraint_element -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint


  SUB- ENTITY(22)	curve_smoothness_geometric_constraint
    REDCR: constrained_elements,	TYPE: SET [1 : 1] OF curve_segment_set -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint

    ATTR:  smoothness,	TYPE: transition_code -- EXPLICIT


  SUB- ENTITY(23)	incidence_geometric_constraint
    REDCR: constrained_elements,	TYPE: SET [1 : ?] OF geometric_constraint_element -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint

    REDCR: reference_elements,	TYPE: SET [0 : ?] OF geometric_constraint_element -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint

    ATTR:  near_points,	TYPE: SET [0 : ?] OF near_point_relationship -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(24)	clgc_with_dimension
    ATTR:  length_value,	TYPE: positive_length_measure -- EXPLICIT


  SUB- ENTITY(25)	curve_length_geometric_constraint
    REDCR: constrained_elements,	TYPE: SET [1 : ?] OF bounded_curve -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint


  SUB- ENTITY(26)	surface_smoothness_geometric_constraint
    REDCR: constrained_elements,	TYPE: SET [1 : 1] OF surface_patch_set -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint

    ATTR:  u_smoothness,	TYPE: transition_code -- EXPLICIT

    ATTR:  v_smoothness,	TYPE: transition_code -- EXPLICIT


  SUB- ENTITY(27)	fixed_element_geometric_constraint
    REDCR: constrained_elements,	TYPE: SET [1 : ?] OF geometric_constraint_element -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint


  SUB- ENTITY(28)	agc_with_dimension
    ATTR:  angle_value,	TYPE: plane_angle_measure -- EXPLICIT


  SUB- ENTITY(29)	angle_geometric_constraint
    REDCR: constrained_elements,	TYPE: SET [1 : ?] OF linear_geometry_constraint_element -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint

    REDCR: reference_elements,	TYPE: SET [0 : 1] OF linear_geometry_constraint_element -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint


  SUB- ENTITY(30)	perpendicular_geometric_constraint
    REDCR: constrained_elements,	TYPE: SET [1 : ?] OF linear_geometry_constraint_element -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint

    REDCR: reference_elements,	TYPE: SET [0 : 2] OF linear_geometry_constraint_element -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint


  SUB- ENTITY(31)	pogc_with_dimension
    ATTR:  offset_value,	TYPE: positive_length_measure -- EXPLICIT

    ATTR:  offset_direction_constrained,	TYPE: BOOLEAN -- EXPLICIT


  SUB- ENTITY(32)	parallel_offset_geometric_constraint
    REDCR: constrained_elements,	TYPE: SET [1 : ?] OF curve_or_surface_constraint_element -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint

    REDCR: reference_elements,	TYPE: SET [0 : 1] OF curve_or_surface_constraint_element -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint

    ATTR:  offset_type,	TYPE: parallel_offset_type -- EXPLICIT


  SUB- ENTITY(33)	sdgc_with_dimension
    ATTR:  distance_value,	TYPE: non_negative_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(34)	surface_distance_geometric_constraint
    REDCR: constrained_elements,	TYPE: SET [1 : 2] OF surface -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint

    REDCR: reference_elements,	TYPE: SET [0 : 4] OF point_curve_or_surface_constraint_element -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint

    ATTR:  near_points,	TYPE: SET [0 : 4] OF near_point_relationship -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(35)	pgc_with_dimension
    ATTR:  distance_value,	TYPE: non_negative_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  negative_direction,	TYPE: BOOLEAN -- EXPLICIT


  SUB- ENTITY(36)	parallel_geometric_constraint
    REDCR: constrained_elements,	TYPE: SET [1 : ?] OF linear_geometry_constraint_element -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint

    REDCR: reference_elements,	TYPE: SET [0 : 1] OF linear_geometry_constraint_element -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint


  SUB- ENTITY(37)	pdgc_with_dimension
    ATTR:  distance_value,	TYPE: non_negative_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(38)	point_distance_geometric_constraint
    REDCR: constrained_elements,	TYPE: SET [1 : ?] OF point -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint

    REDCR: reference_elements,	TYPE: SET [0 : 4] OF point_curve_or_surface_constraint_element -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint


  SUB- ENTITY(39)	rgc_with_dimension
    ATTR:  radius_value,	TYPE: positive_length_measure -- EXPLICIT


  SUB- ENTITY(40)	radius_geometric_constraint
    REDCR: constrained_elements,	TYPE: SET [1 : ?] OF radial_geometry_constraint_element -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint


  SUB- ENTITY(41)	skew_line_distance_geometric_constraint
    REDCR: constrained_elements,	TYPE: SET [1 : 2] OF line -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint

    REDCR: reference_elements,	TYPE: SET [0 : 1] OF line -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint

    ATTR:  distance_value,	TYPE: non_negative_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(42)	cdgc_with_dimension
    ATTR:  distance_value,	TYPE: non_negative_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(43)	curve_distance_geometric_constraint
    REDCR: constrained_elements,	TYPE: SET [1 : 2] OF curve -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint

    REDCR: reference_elements,	TYPE: SET [0 : 4] OF point_curve_or_surface_constraint_element -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint

    ATTR:  near_points,	TYPE: SET [0 : 4] OF near_point_relationship -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(44)	tangent_geometric_constraint
    REDCR: constrained_elements,	TYPE: SET [1 : ?] OF curve_or_surface_constraint_element -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint

    REDCR: reference_elements,	TYPE: SET [0 : ?] OF curve_or_surface_constraint_element -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint

    ATTR:  near_points,	TYPE: SET [0 : ?] OF near_point_relationship -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  tangent_contact,	TYPE: tangent_contact_type -- EXPLICIT


  SUB- ENTITY(45)	swept_curve_surface_geometric_constraint
    REDCR: constrained_elements,	TYPE: SET [1 : ?] OF surface -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint

    REDCR: reference_elements,	TYPE: SET [1 : 1] OF swept_surface_or_solid -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint


  SUB- ENTITY(46)	explicit_geometric_constraint
    REDCR: constrained_elements,	TYPE: SET [1 : ?] OF geometric_representation_item -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint

    REDCR: reference_elements,	TYPE: SET [0 : ?] OF geometric_representation_item -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint


  SUB- ENTITY(47)	defined_constraint
    (no local attributes)

*/


//MARK: - Partial Entity
  public final class _explicit_constraint : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eEXPLICIT_CONSTRAINT.self
    }

    //ATTRIBUTES
    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _description: tTEXT?  // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _constrained_elements: SDAI.SET<eREPRESENTATION_ITEM>/*[1:nil]*/  // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _reference_elements: SDAI.SET<eREPRESENTATION_ITEM>/*[0:nil]*/  // PLAIN EXPLICIT ATTRIBUTE

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      //SELECT data types (indirectly) referencing the current type as a member of the select list
      members.insert(SDAI.STRING(sCONSTRAINT_GROUP_MEMBER.typeName)) // -> Self
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._description?.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._constrained_elements.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._reference_elements.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._description?.value.isValueEqualOptionally(to: rhs._description?.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._constrained_elements.value.isValueEqualOptionally(to: rhs._constrained_elements.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._reference_elements.value.isValueEqualOptionally(to: rhs._reference_elements.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._description?.value.isValueEqualOptionally(to: rhs._description?.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._constrained_elements.value.isValueEqualOptionally(to: rhs._constrained_elements.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._reference_elements.value.isValueEqualOptionally(to: rhs._reference_elements.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: eEXPLICIT_CONSTRAINT?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.FORCE_OPTIONAL(SELF.CONSTRAINED_ELEMENTS) * SDAI.FORCE_OPTIONAL(SELF.REFERENCE_ELEMENTS)
      let _TEMP2 = SDAI.SIZEOF(_TEMP1)
      let _TEMP3 = _TEMP2 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      return _TEMP3
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(DESCRIPTION: tTEXT? , CONSTRAINED_ELEMENTS: SDAI.SET<eREPRESENTATION_ITEM>/*[1:nil]*/ , 
                REFERENCE_ELEMENTS: SDAI.SET<eREPRESENTATION_ITEM>/*[0:nil]*/ ) {
      self._description = DESCRIPTION
      self._constrained_elements = CONSTRAINED_ELEMENTS
      self._reference_elements = REFERENCE_ELEMENTS
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 3
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverOptionalParameter(as: tTEXT.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p1) = exchangeStructure.recoverRequiredParameter(as: SDAI.SET<
        eREPRESENTATION_ITEM>.self, from: parameters[1])
      else { exchangeStructure.add(errorContext: "while recovering parameter #1 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p2) = exchangeStructure.recoverRequiredParameter(as: SDAI.SET<
        eREPRESENTATION_ITEM>.self, from: parameters[2])
      else { exchangeStructure.add(errorContext: "while recovering parameter #2 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( DESCRIPTION: p0, CONSTRAINED_ELEMENTS: p1, REFERENCE_ELEMENTS: p2 )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY explicit_constraint
    ABSTRACT SUPERTYPE OF ( 
        ONEOF ( 
            defined_constraint, 
            free_form_constraint ) )
    SUBTYPE OF ( variational_representation_item );
      description           : OPTIONAL text;
      constrained_elements  : SET [1 : ?] OF representation_item;
      reference_elements    : SET [0 : ?] OF representation_item;
    WHERE
      wr1: ( SIZEOF( constrained_elements * reference_elements ) = 0 );
  END_ENTITY; -- explicit_constraint (line:14145 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eEXPLICIT_CONSTRAINT : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _explicit_constraint.self
    }
    public let partialEntity: _explicit_constraint

    //MARK: SUPERTYPES
    public let super_eREPRESENTATION_ITEM: eREPRESENTATION_ITEM 	// [1]
    public let super_eVARIATIONAL_REPRESENTATION_ITEM: eVARIATIONAL_REPRESENTATION_ITEM 	// [2]
    public var super_eEXPLICIT_CONSTRAINT: eEXPLICIT_CONSTRAINT { return self } 	// [3]

    //MARK: SUBTYPES
    public var sub_eSURFACE_DISTANCE_ASSEMBLY_CONSTRAINT_WITH_DIMENSION: eSURFACE_DISTANCE_ASSEMBLY_CONSTRAINT_WITH_DIMENSION? {	// [4]
      return self.complexEntity.entityReference(eSURFACE_DISTANCE_ASSEMBLY_CONSTRAINT_WITH_DIMENSION.self)
    }

    public var sub_ePERPENDICULAR_ASSEMBLY_CONSTRAINT: ePERPENDICULAR_ASSEMBLY_CONSTRAINT? {	// [5]
      return self.complexEntity.entityReference(ePERPENDICULAR_ASSEMBLY_CONSTRAINT.self)
    }

    public var sub_ePARALLEL_ASSEMBLY_CONSTRAINT_WITH_DIMENSION: ePARALLEL_ASSEMBLY_CONSTRAINT_WITH_DIMENSION? {	// [6]
      return self.complexEntity.entityReference(ePARALLEL_ASSEMBLY_CONSTRAINT_WITH_DIMENSION.self)
    }

    public var sub_ePARALLEL_ASSEMBLY_CONSTRAINT: ePARALLEL_ASSEMBLY_CONSTRAINT? {	// [7]
      return self.complexEntity.entityReference(ePARALLEL_ASSEMBLY_CONSTRAINT.self)
    }

    public var sub_eANGLE_ASSEMBLY_CONSTRAINT_WITH_DIMENSION: eANGLE_ASSEMBLY_CONSTRAINT_WITH_DIMENSION? {	// [8]
      return self.complexEntity.entityReference(eANGLE_ASSEMBLY_CONSTRAINT_WITH_DIMENSION.self)
    }

    public var sub_eINCIDENCE_ASSEMBLY_CONSTRAINT: eINCIDENCE_ASSEMBLY_CONSTRAINT? {	// [9]
      return self.complexEntity.entityReference(eINCIDENCE_ASSEMBLY_CONSTRAINT.self)
    }

    public var sub_eCOAXIAL_ASSEMBLY_CONSTRAINT: eCOAXIAL_ASSEMBLY_CONSTRAINT? {	// [10]
      return self.complexEntity.entityReference(eCOAXIAL_ASSEMBLY_CONSTRAINT.self)
    }

    public var sub_eTANGENT_ASSEMBLY_CONSTRAINT: eTANGENT_ASSEMBLY_CONSTRAINT? {	// [11]
      return self.complexEntity.entityReference(eTANGENT_ASSEMBLY_CONSTRAINT.self)
    }

    public var sub_eBINARY_ASSEMBLY_CONSTRAINT: eBINARY_ASSEMBLY_CONSTRAINT? {	// [12]
      return self.complexEntity.entityReference(eBINARY_ASSEMBLY_CONSTRAINT.self)
    }

    public var sub_eFIXED_CONSTITUENT_ASSEMBLY_CONSTRAINT: eFIXED_CONSTITUENT_ASSEMBLY_CONSTRAINT? {	// [13]
      return self.complexEntity.entityReference(eFIXED_CONSTITUENT_ASSEMBLY_CONSTRAINT.self)
    }

    public var sub_eASSEMBLY_GEOMETRIC_CONSTRAINT: eASSEMBLY_GEOMETRIC_CONSTRAINT? {	// [14]
      return self.complexEntity.entityReference(eASSEMBLY_GEOMETRIC_CONSTRAINT.self)
    }

    public var sub_eFREE_FORM_RELATION: eFREE_FORM_RELATION? {	// [15]
      return self.complexEntity.entityReference(eFREE_FORM_RELATION.self)
    }

    public var sub_eFREE_FORM_ASSIGNMENT: eFREE_FORM_ASSIGNMENT? {	// [16]
      return self.complexEntity.entityReference(eFREE_FORM_ASSIGNMENT.self)
    }

    public var sub_eFREE_FORM_CONSTRAINT: eFREE_FORM_CONSTRAINT? {	// [17]
      return self.complexEntity.entityReference(eFREE_FORM_CONSTRAINT.self)
    }

    public var sub_eEQUAL_PARAMETER_CONSTRAINT: eEQUAL_PARAMETER_CONSTRAINT? {	// [18]
      return self.complexEntity.entityReference(eEQUAL_PARAMETER_CONSTRAINT.self)
    }

    public var sub_eSYMMETRY_GEOMETRIC_CONSTRAINT: eSYMMETRY_GEOMETRIC_CONSTRAINT? {	// [19]
      return self.complexEntity.entityReference(eSYMMETRY_GEOMETRIC_CONSTRAINT.self)
    }

    public var sub_eSWEPT_POINT_CURVE_GEOMETRIC_CONSTRAINT: eSWEPT_POINT_CURVE_GEOMETRIC_CONSTRAINT? {	// [20]
      return self.complexEntity.entityReference(eSWEPT_POINT_CURVE_GEOMETRIC_CONSTRAINT.self)
    }

    public var sub_eCOAXIAL_GEOMETRIC_CONSTRAINT: eCOAXIAL_GEOMETRIC_CONSTRAINT? {	// [21]
      return self.complexEntity.entityReference(eCOAXIAL_GEOMETRIC_CONSTRAINT.self)
    }

    public var sub_eCURVE_SMOOTHNESS_GEOMETRIC_CONSTRAINT: eCURVE_SMOOTHNESS_GEOMETRIC_CONSTRAINT? {	// [22]
      return self.complexEntity.entityReference(eCURVE_SMOOTHNESS_GEOMETRIC_CONSTRAINT.self)
    }

    public var sub_eINCIDENCE_GEOMETRIC_CONSTRAINT: eINCIDENCE_GEOMETRIC_CONSTRAINT? {	// [23]
      return self.complexEntity.entityReference(eINCIDENCE_GEOMETRIC_CONSTRAINT.self)
    }

    public var sub_eCLGC_WITH_DIMENSION: eCLGC_WITH_DIMENSION? {	// [24]
      return self.complexEntity.entityReference(eCLGC_WITH_DIMENSION.self)
    }

    public var sub_eCURVE_LENGTH_GEOMETRIC_CONSTRAINT: eCURVE_LENGTH_GEOMETRIC_CONSTRAINT? {	// [25]
      return self.complexEntity.entityReference(eCURVE_LENGTH_GEOMETRIC_CONSTRAINT.self)
    }

    public var sub_eSURFACE_SMOOTHNESS_GEOMETRIC_CONSTRAINT: eSURFACE_SMOOTHNESS_GEOMETRIC_CONSTRAINT? {	// [26]
      return self.complexEntity.entityReference(eSURFACE_SMOOTHNESS_GEOMETRIC_CONSTRAINT.self)
    }

    public var sub_eFIXED_ELEMENT_GEOMETRIC_CONSTRAINT: eFIXED_ELEMENT_GEOMETRIC_CONSTRAINT? {	// [27]
      return self.complexEntity.entityReference(eFIXED_ELEMENT_GEOMETRIC_CONSTRAINT.self)
    }

    public var sub_eAGC_WITH_DIMENSION: eAGC_WITH_DIMENSION? {	// [28]
      return self.complexEntity.entityReference(eAGC_WITH_DIMENSION.self)
    }

    public var sub_eANGLE_GEOMETRIC_CONSTRAINT: eANGLE_GEOMETRIC_CONSTRAINT? {	// [29]
      return self.complexEntity.entityReference(eANGLE_GEOMETRIC_CONSTRAINT.self)
    }

    public var sub_ePERPENDICULAR_GEOMETRIC_CONSTRAINT: ePERPENDICULAR_GEOMETRIC_CONSTRAINT? {	// [30]
      return self.complexEntity.entityReference(ePERPENDICULAR_GEOMETRIC_CONSTRAINT.self)
    }

    public var sub_ePOGC_WITH_DIMENSION: ePOGC_WITH_DIMENSION? {	// [31]
      return self.complexEntity.entityReference(ePOGC_WITH_DIMENSION.self)
    }

    public var sub_ePARALLEL_OFFSET_GEOMETRIC_CONSTRAINT: ePARALLEL_OFFSET_GEOMETRIC_CONSTRAINT? {	// [32]
      return self.complexEntity.entityReference(ePARALLEL_OFFSET_GEOMETRIC_CONSTRAINT.self)
    }

    public var sub_eSDGC_WITH_DIMENSION: eSDGC_WITH_DIMENSION? {	// [33]
      return self.complexEntity.entityReference(eSDGC_WITH_DIMENSION.self)
    }

    public var sub_eSURFACE_DISTANCE_GEOMETRIC_CONSTRAINT: eSURFACE_DISTANCE_GEOMETRIC_CONSTRAINT? {	// [34]
      return self.complexEntity.entityReference(eSURFACE_DISTANCE_GEOMETRIC_CONSTRAINT.self)
    }

    public var sub_ePGC_WITH_DIMENSION: ePGC_WITH_DIMENSION? {	// [35]
      return self.complexEntity.entityReference(ePGC_WITH_DIMENSION.self)
    }

    public var sub_ePARALLEL_GEOMETRIC_CONSTRAINT: ePARALLEL_GEOMETRIC_CONSTRAINT? {	// [36]
      return self.complexEntity.entityReference(ePARALLEL_GEOMETRIC_CONSTRAINT.self)
    }

    public var sub_ePDGC_WITH_DIMENSION: ePDGC_WITH_DIMENSION? {	// [37]
      return self.complexEntity.entityReference(ePDGC_WITH_DIMENSION.self)
    }

    public var sub_ePOINT_DISTANCE_GEOMETRIC_CONSTRAINT: ePOINT_DISTANCE_GEOMETRIC_CONSTRAINT? {	// [38]
      return self.complexEntity.entityReference(ePOINT_DISTANCE_GEOMETRIC_CONSTRAINT.self)
    }

    public var sub_eRGC_WITH_DIMENSION: eRGC_WITH_DIMENSION? {	// [39]
      return self.complexEntity.entityReference(eRGC_WITH_DIMENSION.self)
    }

    public var sub_eRADIUS_GEOMETRIC_CONSTRAINT: eRADIUS_GEOMETRIC_CONSTRAINT? {	// [40]
      return self.complexEntity.entityReference(eRADIUS_GEOMETRIC_CONSTRAINT.self)
    }

    public var sub_eSKEW_LINE_DISTANCE_GEOMETRIC_CONSTRAINT: eSKEW_LINE_DISTANCE_GEOMETRIC_CONSTRAINT? {	// [41]
      return self.complexEntity.entityReference(eSKEW_LINE_DISTANCE_GEOMETRIC_CONSTRAINT.self)
    }

    public var sub_eCDGC_WITH_DIMENSION: eCDGC_WITH_DIMENSION? {	// [42]
      return self.complexEntity.entityReference(eCDGC_WITH_DIMENSION.self)
    }

    public var sub_eCURVE_DISTANCE_GEOMETRIC_CONSTRAINT: eCURVE_DISTANCE_GEOMETRIC_CONSTRAINT? {	// [43]
      return self.complexEntity.entityReference(eCURVE_DISTANCE_GEOMETRIC_CONSTRAINT.self)
    }

    public var sub_eTANGENT_GEOMETRIC_CONSTRAINT: eTANGENT_GEOMETRIC_CONSTRAINT? {	// [44]
      return self.complexEntity.entityReference(eTANGENT_GEOMETRIC_CONSTRAINT.self)
    }

    public var sub_eSWEPT_CURVE_SURFACE_GEOMETRIC_CONSTRAINT: eSWEPT_CURVE_SURFACE_GEOMETRIC_CONSTRAINT? {	// [45]
      return self.complexEntity.entityReference(eSWEPT_CURVE_SURFACE_GEOMETRIC_CONSTRAINT.self)
    }

    public var sub_eEXPLICIT_GEOMETRIC_CONSTRAINT: eEXPLICIT_GEOMETRIC_CONSTRAINT? {	// [46]
      return self.complexEntity.entityReference(eEXPLICIT_GEOMETRIC_CONSTRAINT.self)
    }

    public var sub_eDEFINED_CONSTRAINT: eDEFINED_CONSTRAINT? {	// [47]
      return self.complexEntity.entityReference(eDEFINED_CONSTRAINT.self)
    }


    //MARK: ATTRIBUTES
    // DISTANCE_VALUE: (5 AMBIGUOUS REFs)

    // NEAR_POINTS: (4 AMBIGUOUS REFs)

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eEXPLICIT_CONSTRAINT`` )
    public var DESCRIPTION: tTEXT?  {
      get {
        return self.partialEntity._description
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._description = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eEXPLICIT_CONSTRAINT`` )
    public var CONSTRAINED_ELEMENTS: SDAI.SET<eREPRESENTATION_ITEM>/*[1:nil]*/  {
      get {
        return SDAI.UNWRAP( self.partialEntity._constrained_elements )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._constrained_elements = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eTANGENT_GEOMETRIC_CONSTRAINT`` )
    public var TANGENT_CONTACT: nTANGENT_CONTACT_TYPE?  {
      get {
        return sub_eTANGENT_GEOMETRIC_CONSTRAINT?.partialEntity._tangent_contact
      }
      set(newValue) {
        guard let partial = sub_eTANGENT_GEOMETRIC_CONSTRAINT?.super_eTANGENT_GEOMETRIC_CONSTRAINT
          .partialEntity else { return }
        partial._tangent_contact = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePOGC_WITH_DIMENSION`` )
    public var OFFSET_DIRECTION_CONSTRAINED: SDAI.BOOLEAN?  {
      get {
        return sub_ePOGC_WITH_DIMENSION?.partialEntity._offset_direction_constrained
      }
      set(newValue) {
        guard let partial = sub_ePOGC_WITH_DIMENSION?.super_ePOGC_WITH_DIMENSION.partialEntity
          else { return }
        partial._offset_direction_constrained = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSURFACE_SMOOTHNESS_GEOMETRIC_CONSTRAINT`` )
    public var V_SMOOTHNESS: nTRANSITION_CODE?  {
      get {
        return sub_eSURFACE_SMOOTHNESS_GEOMETRIC_CONSTRAINT?.partialEntity._v_smoothness
      }
      set(newValue) {
        guard let partial = sub_eSURFACE_SMOOTHNESS_GEOMETRIC_CONSTRAINT?.super_eSURFACE_SMOOTHNESS_GEOMETRIC_CONSTRAINT
          .partialEntity else { return }
        partial._v_smoothness = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eEXPLICIT_CONSTRAINT`` )
    public var REFERENCE_ELEMENTS: SDAI.SET<eREPRESENTATION_ITEM>/*[0:nil]*/  {
      get {
        return SDAI.UNWRAP( self.partialEntity._reference_elements )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._reference_elements = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eFREE_FORM_CONSTRAINT`` )
    public var CONSTRAINING_EXPRESSION: eEXPRESSION?  {
      get {
        return sub_eFREE_FORM_CONSTRAINT?.partialEntity._constraining_expression
      }
      set(newValue) {
        guard let partial = sub_eFREE_FORM_CONSTRAINT?.super_eFREE_FORM_CONSTRAINT.partialEntity
          else { return }
        partial._constraining_expression = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eFIXED_CONSTITUENT_ASSEMBLY_CONSTRAINT`` )
    public var FIXED_CONSTITUENT: eREPRESENTATIVE_SHAPE_REPRESENTATION?  {
      get {
        return sub_eFIXED_CONSTITUENT_ASSEMBLY_CONSTRAINT?.partialEntity._fixed_constituent
      }
      set(newValue) {
        guard let partial = sub_eFIXED_CONSTITUENT_ASSEMBLY_CONSTRAINT?.super_eFIXED_CONSTITUENT_ASSEMBLY_CONSTRAINT
          .partialEntity else { return }
        partial._fixed_constituent = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eRGC_WITH_DIMENSION`` )
    public var RADIUS_VALUE: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eRGC_WITH_DIMENSION?.partialEntity._radius_value
      }
      set(newValue) {
        guard let partial = sub_eRGC_WITH_DIMENSION?.super_eRGC_WITH_DIMENSION.partialEntity else { return }
        partial._radius_value = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eAGC_WITH_DIMENSION`` )
    public var ANGLE_VALUE: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eAGC_WITH_DIMENSION?.partialEntity._angle_value
      }
      set(newValue) {
        guard let partial = sub_eAGC_WITH_DIMENSION?.super_eAGC_WITH_DIMENSION.partialEntity else { return }
        partial._angle_value = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePARALLEL_OFFSET_GEOMETRIC_CONSTRAINT`` )
    public var OFFSET_TYPE: nPARALLEL_OFFSET_TYPE?  {
      get {
        return sub_ePARALLEL_OFFSET_GEOMETRIC_CONSTRAINT?.partialEntity._offset_type
      }
      set(newValue) {
        guard let partial = sub_ePARALLEL_OFFSET_GEOMETRIC_CONSTRAINT?.super_ePARALLEL_OFFSET_GEOMETRIC_CONSTRAINT
          .partialEntity else { return }
        partial._offset_type = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSYMMETRY_GEOMETRIC_CONSTRAINT`` )
    public var MIRROR_ELEMENT: sLINEAR_GEOMETRY_CONSTRAINT_ELEMENT?  {
      get {
        return sub_eSYMMETRY_GEOMETRIC_CONSTRAINT?.partialEntity._mirror_element
      }
      set(newValue) {
        guard let partial = sub_eSYMMETRY_GEOMETRIC_CONSTRAINT?.super_eSYMMETRY_GEOMETRIC_CONSTRAINT
          .partialEntity else { return }
        partial._mirror_element = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCLGC_WITH_DIMENSION`` )
    public var LENGTH_VALUE: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eCLGC_WITH_DIMENSION?.partialEntity._length_value
      }
      set(newValue) {
        guard let partial = sub_eCLGC_WITH_DIMENSION?.super_eCLGC_WITH_DIMENSION.partialEntity
          else { return }
        partial._length_value = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT REDEF__ attribute
    /// - origin: SUB( ``eBINARY_ASSEMBLY_CONSTRAINT`` )
    public var REP_1: eREPRESENTATIVE_SHAPE_REPRESENTATION?  {
      get {
        return eREPRESENTATIVE_SHAPE_REPRESENTATION( sub_eBINARY_ASSEMBLY_CONSTRAINT?.super_eREPRESENTATION_RELATIONSHIP
          .partialEntity._rep_1 )
      }
      set(newValue) {
        guard let partial = sub_eBINARY_ASSEMBLY_CONSTRAINT?.super_eREPRESENTATION_RELATIONSHIP.partialEntity
          else { return }
        partial._rep_1 = SDAI.UNWRAP(
          sREPRESENTATION_OR_REPRESENTATION_REFERENCE(newValue))
      }
    }

    /// __EXPLICIT REDEF__ attribute
    /// - origin: SUB( ``eBINARY_ASSEMBLY_CONSTRAINT`` )
    public var REP_2: eREPRESENTATIVE_SHAPE_REPRESENTATION?  {
      get {
        return eREPRESENTATIVE_SHAPE_REPRESENTATION( sub_eBINARY_ASSEMBLY_CONSTRAINT?.super_eREPRESENTATION_RELATIONSHIP
          .partialEntity._rep_2 )
      }
      set(newValue) {
        guard let partial = sub_eBINARY_ASSEMBLY_CONSTRAINT?.super_eREPRESENTATION_RELATIONSHIP.partialEntity
          else { return }
        partial._rep_2 = SDAI.UNWRAP(
          sREPRESENTATION_OR_REPRESENTATION_REFERENCE(newValue))
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCURVE_SMOOTHNESS_GEOMETRIC_CONSTRAINT`` )
    public var SMOOTHNESS: nTRANSITION_CODE?  {
      get {
        return sub_eCURVE_SMOOTHNESS_GEOMETRIC_CONSTRAINT?.partialEntity._smoothness
      }
      set(newValue) {
        guard let partial = sub_eCURVE_SMOOTHNESS_GEOMETRIC_CONSTRAINT?.super_eCURVE_SMOOTHNESS_GEOMETRIC_CONSTRAINT
          .partialEntity else { return }
        partial._smoothness = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePOGC_WITH_DIMENSION`` )
    public var OFFSET_VALUE: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_ePOGC_WITH_DIMENSION?.partialEntity._offset_value
      }
      set(newValue) {
        guard let partial = sub_ePOGC_WITH_DIMENSION?.super_ePOGC_WITH_DIMENSION.partialEntity
          else { return }
        partial._offset_value = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eREPRESENTATION_ITEM`` )
    public var NAME: tLABEL {
      get {
        return SDAI.UNWRAP( super_eREPRESENTATION_ITEM.partialEntity._name )
      }
      set(newValue) {
        let partial = super_eREPRESENTATION_ITEM.partialEntity
        partial._name = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePGC_WITH_DIMENSION`` )
    public var NEGATIVE_DIRECTION: SDAI.BOOLEAN?  {
      get {
        return sub_ePGC_WITH_DIMENSION?.partialEntity._negative_direction
      }
      set(newValue) {
        guard let partial = sub_ePGC_WITH_DIMENSION?.super_ePGC_WITH_DIMENSION.partialEntity else { return }
        partial._negative_direction = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSURFACE_SMOOTHNESS_GEOMETRIC_CONSTRAINT`` )
    public var U_SMOOTHNESS: nTRANSITION_CODE?  {
      get {
        return sub_eSURFACE_SMOOTHNESS_GEOMETRIC_CONSTRAINT?.partialEntity._u_smoothness
      }
      set(newValue) {
        guard let partial = sub_eSURFACE_SMOOTHNESS_GEOMETRIC_CONSTRAINT?.super_eSURFACE_SMOOTHNESS_GEOMETRIC_CONSTRAINT
          .partialEntity else { return }
        partial._u_smoothness = SDAI.UNWRAP(newValue)
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_explicit_constraint.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eREPRESENTATION_ITEM.self) else { return nil }
      self.super_eREPRESENTATION_ITEM = super1

      guard let super2 = complexEntity?.entityReference(eVARIATIONAL_REPRESENTATION_ITEM.self) else { return nil }
      self.super_eVARIATIONAL_REPRESENTATION_ITEM = super2

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _explicit_constraint.WHERE_wr1(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "EXPLICIT_CONSTRAINT", type: self, explicitAttributeCount: 3)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eREPRESENTATION_ITEM.self)
      entityDef.add(supertype: eVARIATIONAL_REPRESENTATION_ITEM.self)
      entityDef.add(supertype: eEXPLICIT_CONSTRAINT.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "DESCRIPTION", keyPath: \eEXPLICIT_CONSTRAINT.DESCRIPTION, 
        kind: .explicitOptional, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "CONSTRAINED_ELEMENTS", keyPath: \eEXPLICIT_CONSTRAINT.CONSTRAINED_ELEMENTS, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "TANGENT_CONTACT", keyPath: \eEXPLICIT_CONSTRAINT.TANGENT_CONTACT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "OFFSET_DIRECTION_CONSTRAINED", keyPath: \eEXPLICIT_CONSTRAINT.OFFSET_DIRECTION_CONSTRAINED, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "V_SMOOTHNESS", keyPath: \eEXPLICIT_CONSTRAINT.V_SMOOTHNESS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "REFERENCE_ELEMENTS", keyPath: \eEXPLICIT_CONSTRAINT.REFERENCE_ELEMENTS, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "CONSTRAINING_EXPRESSION", keyPath: \eEXPLICIT_CONSTRAINT.CONSTRAINING_EXPRESSION, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "FIXED_CONSTITUENT", keyPath: \eEXPLICIT_CONSTRAINT.FIXED_CONSTITUENT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "RADIUS_VALUE", keyPath: \eEXPLICIT_CONSTRAINT.RADIUS_VALUE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "ANGLE_VALUE", keyPath: \eEXPLICIT_CONSTRAINT.ANGLE_VALUE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "OFFSET_TYPE", keyPath: \eEXPLICIT_CONSTRAINT.OFFSET_TYPE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "MIRROR_ELEMENT", keyPath: \eEXPLICIT_CONSTRAINT.MIRROR_ELEMENT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "LENGTH_VALUE", keyPath: \eEXPLICIT_CONSTRAINT.LENGTH_VALUE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "REP_1", keyPath: \eEXPLICIT_CONSTRAINT.REP_1, 
        kind: .explicitRedeclaring, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "REP_2", keyPath: \eEXPLICIT_CONSTRAINT.REP_2, 
        kind: .explicitRedeclaring, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "SMOOTHNESS", keyPath: \eEXPLICIT_CONSTRAINT.SMOOTHNESS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "OFFSET_VALUE", keyPath: \eEXPLICIT_CONSTRAINT.OFFSET_VALUE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "NAME", keyPath: \eEXPLICIT_CONSTRAINT.NAME, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "NEGATIVE_DIRECTION", keyPath: \eEXPLICIT_CONSTRAINT.NEGATIVE_DIRECTION, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "U_SMOOTHNESS", keyPath: \eEXPLICIT_CONSTRAINT.U_SMOOTHNESS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)

      return entityDef
    }

  }
}
