/* file: environment.swift 	 generated: Tue Nov 16 05:35:44 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY environment;
      syntactic_representation  : generic_variable; (* observed by
          generic_variable.interpretation
          *)
      semantics                 : variable_semantics; (* observed by
          expression_conversion_based_unit.associated_variable_environment
          *)
  END_ENTITY; -- environment (line:13937 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  ENTITY(SELF)	environment
    ATTR:  syntactic_representation,	TYPE: generic_variable -- EXPLICIT
      -- observed by
        ENTITY(1): generic_variable,	ATTR: interpretation,	TYPE: environment

    ATTR:  semantics,	TYPE: variable_semantics -- EXPLICIT
      -- observed by
        ENTITY(1): expression_conversion_based_unit,	ATTR: associated_variable_environment,	TYPE: environment


  SUB- ENTITY(2)	unbound_parameter_environment
    (no local attributes)

  SUB- ENTITY(3)	bound_parameter_environment
    (no local attributes)

*/


//MARK: - Partial Entity
  public final class _environment : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eENVIRONMENT.self
    }

    //ATTRIBUTES
    /// EXPLICIT ATTRIBUTE (OBSERVED)
    public internal(set) var _syntactic_representation: eGENERIC_VARIABLE{ // OBSERVED EXPLICIT ATTRIBUTE
      get {
        return __syntactic_representation.copy()
      } // getter
      set {
        let newValue = newValue
        let observer = SDAI.EntityReferenceObserver(referencer: self, observerCode: _syntactic_representation__observer.self)
        newValue.configure(with: observer)
        observer.observe(removing: SDAI.UNWRAP(seq:__syntactic_representation.entityReferences),
          adding: SDAI.UNWRAP(seq: newValue.entityReferences) )
      } // setter
    }

    /// backing storage for observed attribute
    private var __syntactic_representation: eGENERIC_VARIABLE

    /// attribute observer code
    internal class _syntactic_representation__observer: SDAI.EntityReferenceObserver.ObserverCode {
      final override class func observe<RemovingEntities: Sequence, AddingEntities: Sequence>(
        referencer: SDAI.PartialEntity, removing: RemovingEntities, adding: AddingEntities )
        where RemovingEntities.Element: SDAI.EntityReference, AddingEntities.Element: SDAI.EntityReference
      {
        for referencedComplex in removing.map({ $0.complexEntity }) {
          for referencerOwner in referencer.owners {
            //OBSERVING ENTITY: eGENERIC_VARIABLE
            referencedComplex.partialEntityInstance(_generic_variable.self)?
              ._interpretation__observeRemovedReference(in: referencerOwner)
          }
        }

        for referencedComplex in adding.map({ $0.complexEntity }) {
          for referencerOwner in referencer.owners {
            //OBSERVING ENTITY: eGENERIC_VARIABLE
            referencedComplex.partialEntityInstance(_generic_variable.self)?
              ._interpretation__observeAddedReference(in: referencerOwner)
          }
        }
      }

      final override class func observe(newReferencerOwner referencerOwner: SDAI.ComplexEntity) {
        guard let attrValue = referencerOwner.partialEntityInstance(_environment.self)?._syntactic_representation else { return }
        for referencedComplex in attrValue.entityReferences.map({ $0.complexEntity }) {
        //OBSERVING ENTITY: eGENERIC_VARIABLE
        referencedComplex.partialEntityInstance(_generic_variable.self)?
          ._interpretation__observeAddedReference(in: referencerOwner)
        }
      }

      final override class func observe(leavingReferencerOwner referencerOwner: SDAI.ComplexEntity) {
        guard let attrValue = referencerOwner.partialEntityInstance(_environment.self)?._syntactic_representation else { return }
        for referencedComplex in attrValue.entityReferences.map({ $0.complexEntity }) {
        //OBSERVING ENTITY: eGENERIC_VARIABLE
        referencedComplex.partialEntityInstance(_generic_variable.self)?
          ._interpretation__observe(leavingReferencerOwner: referencerOwner)
        }
      }

    }

    /// EXPLICIT ATTRIBUTE (OBSERVED)
    public internal(set) var _semantics: eVARIABLE_SEMANTICS{ // OBSERVED EXPLICIT ATTRIBUTE
      get {
        return __semantics.copy()
      } // getter
      set {
        let newValue = newValue
        let observer = SDAI.EntityReferenceObserver(referencer: self, observerCode: _semantics__observer.self)
        newValue.configure(with: observer)
        observer.observe(removing: SDAI.UNWRAP(seq:__semantics.entityReferences),
          adding: SDAI.UNWRAP(seq: newValue.entityReferences) )
      } // setter
    }

    /// backing storage for observed attribute
    private var __semantics: eVARIABLE_SEMANTICS

    /// attribute observer code
    internal class _semantics__observer: SDAI.EntityReferenceObserver.ObserverCode {
      final override class func observe<RemovingEntities: Sequence, AddingEntities: Sequence>(
        referencer: SDAI.PartialEntity, removing: RemovingEntities, adding: AddingEntities )
        where RemovingEntities.Element: SDAI.EntityReference, AddingEntities.Element: SDAI.EntityReference
      {
        for referencedComplex in removing.map({ $0.complexEntity }) {
          for referencerOwner in referencer.owners {
            //OBSERVING ENTITY: eEXPRESSION_CONVERSION_BASED_UNIT
            referencedComplex.partialEntityInstance(_expression_conversion_based_unit.self)?
              ._associated_variable_environment__observeRemovedReference(in: referencerOwner)
          }
        }

        for referencedComplex in adding.map({ $0.complexEntity }) {
          for referencerOwner in referencer.owners {
            //OBSERVING ENTITY: eEXPRESSION_CONVERSION_BASED_UNIT
            referencedComplex.partialEntityInstance(_expression_conversion_based_unit.self)?
              ._associated_variable_environment__observeAddedReference(in: referencerOwner)
          }
        }
      }

      final override class func observe(newReferencerOwner referencerOwner: SDAI.ComplexEntity) {
        guard let attrValue = referencerOwner.partialEntityInstance(_environment.self)?._semantics else { return }
        for referencedComplex in attrValue.entityReferences.map({ $0.complexEntity }) {
        //OBSERVING ENTITY: eEXPRESSION_CONVERSION_BASED_UNIT
        referencedComplex.partialEntityInstance(_expression_conversion_based_unit.self)?
          ._associated_variable_environment__observeAddedReference(in: referencerOwner)
        }
      }

      final override class func observe(leavingReferencerOwner referencerOwner: SDAI.ComplexEntity) {
        guard let attrValue = referencerOwner.partialEntityInstance(_environment.self)?._semantics else { return }
        for referencedComplex in attrValue.entityReferences.map({ $0.complexEntity }) {
        //OBSERVING ENTITY: eEXPRESSION_CONVERSION_BASED_UNIT
        referencedComplex.partialEntityInstance(_expression_conversion_based_unit.self)?
          ._associated_variable_environment__observe(leavingReferencerOwner: referencerOwner)
        }
      }

    }

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._syntactic_representation.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._semantics.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._syntactic_representation.value.isValueEqualOptionally(to: rhs._syntactic_representation.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._semantics.value.isValueEqualOptionally(to: rhs._semantics.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._syntactic_representation.value.isValueEqualOptionally(to: rhs._syntactic_representation.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._semantics.value.isValueEqualOptionally(to: rhs._semantics.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(SYNTACTIC_REPRESENTATION: eGENERIC_VARIABLE, SEMANTICS: eVARIABLE_SEMANTICS) {
      self.__syntactic_representation = SYNTACTIC_REPRESENTATION
      self.__semantics = SEMANTICS
      super.init(asAbstructSuperclass:())

      self._syntactic_representation.configure(with: SDAI.EntityReferenceObserver(referencer: self, observerCode: _syntactic_representation__observer.self))
      self._semantics.configure(with: SDAI.EntityReferenceObserver(referencer: self, observerCode: _semantics__observer.self))
    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 2
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverRequiredParameter(as: eGENERIC_VARIABLE.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p1) = exchangeStructure.recoverRequiredParameter(as: eVARIABLE_SEMANTICS.self, from: parameters[1])
      else { exchangeStructure.add(errorContext: "while recovering parameter #1 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( SYNTACTIC_REPRESENTATION: p0, SEMANTICS: p1 )
    }

    /// broadcasting a new complex entity becoming an owner of the partial entity
    final public override func broadcast(addedToComplex complex: SDAI.ComplexEntity) {
      _syntactic_representation__observer.observe(newReferencerOwner: complex)
      _semantics__observer.observe(newReferencerOwner: complex)
    }

    /// broadcasting a complex entity withdrawing an owner of the partial entity
    final public override func broadcast(removedFromComplex complex: SDAI.ComplexEntity) {
      _syntactic_representation__observer.observe(leavingReferencerOwner: complex)
      _semantics__observer.observe(leavingReferencerOwner: complex)
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY environment;
      syntactic_representation  : generic_variable; (* observed by
          generic_variable.interpretation
          *)
      semantics                 : variable_semantics; (* observed by
          expression_conversion_based_unit.associated_variable_environment
          *)
  END_ENTITY; -- environment (line:13937 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eENVIRONMENT : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _environment.self
    }
    public let partialEntity: _environment

    //MARK: SUPERTYPES
    public var super_eENVIRONMENT: eENVIRONMENT { return self } 	// [1]

    //MARK: SUBTYPES
    public var sub_eUNBOUND_PARAMETER_ENVIRONMENT: eUNBOUND_PARAMETER_ENVIRONMENT? {	// [2]
      return self.complexEntity.entityReference(eUNBOUND_PARAMETER_ENVIRONMENT.self)
    }

    public var sub_eBOUND_PARAMETER_ENVIRONMENT: eBOUND_PARAMETER_ENVIRONMENT? {	// [3]
      return self.complexEntity.entityReference(eBOUND_PARAMETER_ENVIRONMENT.self)
    }


    //MARK: ATTRIBUTES
    /// __EXPLICIT(OBSERVED)__ attribute
    /// - origin: SELF( ``eENVIRONMENT`` )
    public var SEMANTICS: eVARIABLE_SEMANTICS {
      get {
        return SDAI.UNWRAP( self.partialEntity._semantics )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._semantics = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT(OBSERVED)__ attribute
    /// - origin: SELF( ``eENVIRONMENT`` )
    public var SYNTACTIC_REPRESENTATION: eGENERIC_VARIABLE {
      get {
        return SDAI.UNWRAP( self.partialEntity._syntactic_representation )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._syntactic_representation = SDAI.UNWRAP(newValue)
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_environment.self) else { return nil }
      self.partialEntity = partial

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }

    //SIMPLE ENTITY REFERENCE
    public convenience init?(_ partial:_environment) {
      let complex = SDAI.ComplexEntity(entities:[partial])
      self.init(complex: complex)
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "ENVIRONMENT", type: self, explicitAttributeCount: 2)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eENVIRONMENT.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "SEMANTICS", keyPath: \eENVIRONMENT.SEMANTICS, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "SYNTACTIC_REPRESENTATION", keyPath: \eENVIRONMENT.SYNTACTIC_REPRESENTATION, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)

      return entityDef
    }

  }
}
