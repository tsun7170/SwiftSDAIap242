/* file: equivalence_notable_instance.swift 	 generated: Sat Aug 14 13:46:02 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY equivalence_notable_instance;
      comparing_elements  : LIST [0 : ?] OF equivalence_detected_difference_select;
      compared_elements   : LIST [0 : ?] OF equivalence_detected_difference_select;
      measured_value      : equivalence_measured_value_select;
    WHERE
      wr1: ( ( SIZEOF( comparing_elements ) <> 0 ) OR ( SIZEOF( compared_elements ) <> 0 ) );
  END_ENTITY; -- equivalence_notable_instance (line:13945 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  ENTITY(SELF)	equivalence_notable_instance
    ATTR:  comparing_elements,	TYPE: LIST [0 : ?] OF equivalence_detected_difference_select -- EXPLICIT

    ATTR:  compared_elements,	TYPE: LIST [0 : ?] OF equivalence_detected_difference_select -- EXPLICIT

    ATTR:  measured_value,	TYPE: equivalence_measured_value_select -- EXPLICIT


*/


//MARK: - Partial Entity
  public final class _equivalence_notable_instance : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eEQUIVALENCE_NOTABLE_INSTANCE.self
    }

    //ATTRIBUTES
    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _comparing_elements: SDAI.LIST<sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT>/*[0:nil]*/  // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _compared_elements: SDAI.LIST<sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT>/*[0:nil]*/  // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _measured_value: sEQUIVALENCE_MEASURED_VALUE_SELECT // PLAIN EXPLICIT ATTRIBUTE

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._comparing_elements.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._compared_elements.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._measured_value.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._comparing_elements.value.isValueEqualOptionally(to: rhs._comparing_elements.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._compared_elements.value.isValueEqualOptionally(to: rhs._compared_elements.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._measured_value.value.isValueEqualOptionally(to: rhs._measured_value.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._comparing_elements.value.isValueEqualOptionally(to: rhs._comparing_elements.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._compared_elements.value.isValueEqualOptionally(to: rhs._compared_elements.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._measured_value.value.isValueEqualOptionally(to: rhs._measured_value.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: eEQUIVALENCE_NOTABLE_INSTANCE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.SIZEOF(SELF.COMPARING_ELEMENTS)
      let _TEMP2 = _TEMP1 .!=. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      let _TEMP3 = SDAI.SIZEOF(SELF.COMPARED_ELEMENTS)
      let _TEMP4 = _TEMP3 .!=. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      let _TEMP5 = _TEMP2 || _TEMP4
      return _TEMP5
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(COMPARING_ELEMENTS: SDAI.LIST<sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT>/*[0:nil]*/ , 
                COMPARED_ELEMENTS: SDAI.LIST<sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT>/*[0:nil]*/ , 
                MEASURED_VALUE: sEQUIVALENCE_MEASURED_VALUE_SELECT) {
      self._comparing_elements = COMPARING_ELEMENTS
      self._compared_elements = COMPARED_ELEMENTS
      self._measured_value = MEASURED_VALUE
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 3
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverRequiredParameter(as: SDAI.LIST<
        sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT>.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p1) = exchangeStructure.recoverRequiredParameter(as: SDAI.LIST<
        sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT>.self, from: parameters[1])
      else { exchangeStructure.add(errorContext: "while recovering parameter #1 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p2) = exchangeStructure.recoverRequiredParameter(as: 
        sEQUIVALENCE_MEASURED_VALUE_SELECT.self, from: parameters[2])
      else { exchangeStructure.add(errorContext: "while recovering parameter #2 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( COMPARING_ELEMENTS: p0, COMPARED_ELEMENTS: p1, MEASURED_VALUE: p2 )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY equivalence_notable_instance;
      comparing_elements  : LIST [0 : ?] OF equivalence_detected_difference_select;
      compared_elements   : LIST [0 : ?] OF equivalence_detected_difference_select;
      measured_value      : equivalence_measured_value_select;
    WHERE
      wr1: ( ( SIZEOF( comparing_elements ) <> 0 ) OR ( SIZEOF( compared_elements ) <> 0 ) );
  END_ENTITY; -- equivalence_notable_instance (line:13945 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eEQUIVALENCE_NOTABLE_INSTANCE : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _equivalence_notable_instance.self
    }
    public let partialEntity: _equivalence_notable_instance

    //MARK: SUPERTYPES
    public var super_eEQUIVALENCE_NOTABLE_INSTANCE: eEQUIVALENCE_NOTABLE_INSTANCE { return self } 	// [1]

    //MARK: SUBTYPES

    //MARK: ATTRIBUTES
    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eEQUIVALENCE_NOTABLE_INSTANCE`` )
    public var MEASURED_VALUE: sEQUIVALENCE_MEASURED_VALUE_SELECT {
      get {
        return SDAI.UNWRAP( self.partialEntity._measured_value )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._measured_value = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eEQUIVALENCE_NOTABLE_INSTANCE`` )
    public var COMPARING_ELEMENTS: SDAI.LIST<sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT>/*[0:nil]*/  {
      get {
        return SDAI.UNWRAP( self.partialEntity._comparing_elements )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._comparing_elements = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eEQUIVALENCE_NOTABLE_INSTANCE`` )
    public var COMPARED_ELEMENTS: SDAI.LIST<sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT>/*[0:nil]*/  {
      get {
        return SDAI.UNWRAP( self.partialEntity._compared_elements )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._compared_elements = SDAI.UNWRAP(newValue)
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_equivalence_notable_instance.self) else { return nil }
      self.partialEntity = partial

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }

    //SIMPLE ENTITY REFERENCE
    public convenience init?(_ partial:_equivalence_notable_instance) {
      let complex = SDAI.ComplexEntity(entities:[partial])
      self.init(complex: complex)
    }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _equivalence_notable_instance.WHERE_wr1(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "EQUIVALENCE_NOTABLE_INSTANCE", type: self, explicitAttributeCount: 3)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eEQUIVALENCE_NOTABLE_INSTANCE.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "MEASURED_VALUE", keyPath: \eEQUIVALENCE_NOTABLE_INSTANCE.MEASURED_VALUE, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "COMPARING_ELEMENTS", keyPath: \eEQUIVALENCE_NOTABLE_INSTANCE.COMPARING_ELEMENTS, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "COMPARED_ELEMENTS", keyPath: \eEQUIVALENCE_NOTABLE_INSTANCE.COMPARED_ELEMENTS, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)

      return entityDef
    }

  }
}
