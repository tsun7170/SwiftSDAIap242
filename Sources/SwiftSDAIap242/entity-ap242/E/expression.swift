/* file: expression.swift 	 generated: Sat Aug 14 13:46:02 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY expression
    ABSTRACT SUPERTYPE OF ( 
        ONEOF ( 
            numeric_expression, 
            boolean_expression, 
            string_expression ) )
    SUBTYPE OF ( generic_expression );
  END_ENTITY; -- expression (line:14230 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	generic_expression
    (no local attributes)

  ENTITY(SELF)	expression
    (no local attributes)

  SUB- ENTITY(3)	concat_expression
    REDCR: operands,	TYPE: LIST [2 : ?] OF string_expression -- EXPLICIT	(AMBIGUOUS/MASKED)
      -- OVERRIDING ENTITY: multiple_arity_generic_expression


  SUB- ENTITY(4)	string_literal
    ATTR:  the_value,	TYPE: STRING -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(5)	maths_string_variable
    (no local attributes)

  SUB- ENTITY(6)	string_variable
    (no local attributes)

  SUB- ENTITY(7)	simple_string_expression
    (no local attributes)

  SUB- ENTITY(8)	index_expression
    ATTR:  operand,	TYPE: generic_expression -- DERIVED	(AMBIGUOUS/MASKED)
      := SELF\binary_generic_expression.operands[1]

    ATTR:  index,	TYPE: generic_expression -- DERIVED
      := SELF\binary_generic_expression.operands[2]


  SUB- ENTITY(9)	substring_expression
    ATTR:  operand,	TYPE: generic_expression -- DERIVED	(AMBIGUOUS/MASKED)
      := SELF\multiple_arity_generic_expression.operands[1]

    ATTR:  index1,	TYPE: generic_expression -- DERIVED
      := SELF\multiple_arity_generic_expression.operands[2]

    ATTR:  index2,	TYPE: generic_expression -- DERIVED
      := SELF\multiple_arity_generic_expression.operands[3]


  SUB- ENTITY(10)	format_function
    ATTR:  value_to_format,	TYPE: generic_expression -- DERIVED
      := SELF\binary_generic_expression.operands[1]

    ATTR:  format_string,	TYPE: generic_expression -- DERIVED
      := SELF\binary_generic_expression.operands[2]


  SUB- ENTITY(11)	string_defined_function
    (no local attributes)

  SUB- ENTITY(12)	expression_extension_string
    (no local attributes)

  SUB- ENTITY(13)	string_expression
    (no local attributes)

  SUB- ENTITY(14)	interval_expression
    ATTR:  interval_low,	TYPE: generic_expression -- DERIVED
      := SELF\multiple_arity_generic_expression.operands[1]

    ATTR:  interval_item,	TYPE: generic_expression -- DERIVED
      := SELF\multiple_arity_generic_expression.operands[2]

    ATTR:  interval_high,	TYPE: generic_expression -- DERIVED
      := SELF\multiple_arity_generic_expression.operands[3]


  SUB- ENTITY(15)	not_expression
    REDCR: operand,	TYPE: boolean_expression -- EXPLICIT	(AMBIGUOUS/MASKED)
      -- OVERRIDING ENTITY: unary_generic_expression


  SUB- ENTITY(16)	odd_function
    REDCR: operand,	TYPE: numeric_expression -- EXPLICIT	(AMBIGUOUS/MASKED)
      -- OVERRIDING ENTITY: unary_generic_expression


  SUB- ENTITY(17)	unary_boolean_expression
    (no local attributes)

  SUB- ENTITY(18)	boolean_defined_function
    (no local attributes)

  SUB- ENTITY(19)	boolean_representation_item
    (no local attributes)

  SUB- ENTITY(20)	boolean_literal
    ATTR:  the_value,	TYPE: BOOLEAN -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(21)	maths_boolean_variable
    (no local attributes)

  SUB- ENTITY(22)	boolean_variable
    (no local attributes)

  SUB- ENTITY(23)	simple_boolean_expression
    (no local attributes)

  SUB- ENTITY(24)	equals_expression
    (no local attributes)

  SUB- ENTITY(25)	xor_expression
    REDCR: operands,	TYPE: LIST [2 : 2] OF boolean_expression -- EXPLICIT	(AMBIGUOUS/MASKED)
      -- OVERRIDING ENTITY: binary_generic_expression


  SUB- ENTITY(26)	binary_boolean_expression
    (no local attributes)

  SUB- ENTITY(27)	or_expression
    (no local attributes)

  SUB- ENTITY(28)	and_expression
    (no local attributes)

  SUB- ENTITY(29)	multiple_arity_boolean_expression
    REDCR: operands,	TYPE: LIST [2 : ?] OF boolean_expression -- EXPLICIT	(AMBIGUOUS/MASKED)
      -- OVERRIDING ENTITY: multiple_arity_generic_expression


  SUB- ENTITY(30)	comparison_not_equal
    (no local attributes)

  SUB- ENTITY(31)	comparison_greater
    (no local attributes)

  SUB- ENTITY(32)	comparison_greater_equal
    (no local attributes)

  SUB- ENTITY(33)	comparison_less_equal
    (no local attributes)

  SUB- ENTITY(34)	like_expression
    (no local attributes)

  SUB- ENTITY(35)	comparison_equal
    (no local attributes)

  SUB- ENTITY(36)	comparison_less
    (no local attributes)

  SUB- ENTITY(37)	comparison_expression
    REDCR: operands,	TYPE: LIST [2 : 2] OF expression -- EXPLICIT	(AMBIGUOUS/MASKED)
      -- OVERRIDING ENTITY: binary_generic_expression


  SUB- ENTITY(38)	boolean_expression
    (no local attributes)

  SUB- ENTITY(39)	minus_expression
    (no local attributes)

  SUB- ENTITY(40)	div_expression
    (no local attributes)

  SUB- ENTITY(41)	mod_expression
    (no local attributes)

  SUB- ENTITY(42)	rational_representation_item
    (no local attributes)

  SUB- ENTITY(43)	slash_expression
    (no local attributes)

  SUB- ENTITY(44)	power_expression
    (no local attributes)

  SUB- ENTITY(45)	atan_function
    (no local attributes)

  SUB- ENTITY(46)	binary_function_call
    (no local attributes)

  SUB- ENTITY(47)	binary_numeric_expression
    REDCR: operands,	TYPE: LIST [2 : 2] OF numeric_expression -- EXPLICIT	(AMBIGUOUS/MASKED)
      -- OVERRIDING ENTITY: binary_generic_expression


  SUB- ENTITY(48)	int_value_function
    (no local attributes)

  SUB- ENTITY(49)	value_function
    REDCR: operand,	TYPE: string_expression -- EXPLICIT	(AMBIGUOUS/MASKED)
      -- OVERRIDING ENTITY: unary_generic_expression


  SUB- ENTITY(50)	integer_defined_function
    (no local attributes)

  SUB- ENTITY(51)	real_defined_function
    (no local attributes)

  SUB- ENTITY(52)	numeric_defined_function
    (no local attributes)

  SUB- ENTITY(53)	mult_expression
    (no local attributes)

  SUB- ENTITY(54)	plus_expression
    (no local attributes)

  SUB- ENTITY(55)	minimum_function
    (no local attributes)

  SUB- ENTITY(56)	maximum_function
    (no local attributes)

  SUB- ENTITY(57)	multiple_arity_function_call
    (no local attributes)

  SUB- ENTITY(58)	multiple_arity_numeric_expression
    REDCR: operands,	TYPE: LIST [2 : ?] OF numeric_expression -- EXPLICIT	(AMBIGUOUS/MASKED)
      -- OVERRIDING ENTITY: multiple_arity_generic_expression


  SUB- ENTITY(59)	length_function
    REDCR: operand,	TYPE: string_expression -- EXPLICIT	(AMBIGUOUS/MASKED)
      -- OVERRIDING ENTITY: unary_generic_expression


  SUB- ENTITY(60)	integer_representation_item
    (no local attributes)

  SUB- ENTITY(61)	int_literal
    REDCR: the_value,	TYPE: INTEGER -- EXPLICIT	(AMBIGUOUS/MASKED)
      -- OVERRIDING ENTITY: literal_number


  SUB- ENTITY(62)	real_representation_item
    (no local attributes)

  SUB- ENTITY(63)	real_literal
    REDCR: the_value,	TYPE: REAL -- EXPLICIT	(AMBIGUOUS/MASKED)
      -- OVERRIDING ENTITY: literal_number


  SUB- ENTITY(64)	literal_number
    ATTR:  the_value,	TYPE: NUMBER -- EXPLICIT	(AMBIGUOUS/MASKED)
      -- possibly overriden by
          ENTITY: real_literal,	TYPE: REAL
          ENTITY: int_literal,	TYPE: INTEGER


  SUB- ENTITY(65)	maths_real_variable
    (no local attributes)

  SUB- ENTITY(66)	real_numeric_variable
    (no local attributes)

  SUB- ENTITY(67)	maths_integer_variable
    (no local attributes)

  SUB- ENTITY(68)	int_numeric_variable
    (no local attributes)

  SUB- ENTITY(69)	numeric_variable
    (no local attributes)

  SUB- ENTITY(70)	simple_numeric_expression
    (no local attributes)

  SUB- ENTITY(71)	square_root_function
    (no local attributes)

  SUB- ENTITY(72)	log2_function
    (no local attributes)

  SUB- ENTITY(73)	sin_function
    (no local attributes)

  SUB- ENTITY(74)	abs_function
    (no local attributes)

  SUB- ENTITY(75)	minus_function
    (no local attributes)

  SUB- ENTITY(76)	log_function
    (no local attributes)

  SUB- ENTITY(77)	asin_function
    (no local attributes)

  SUB- ENTITY(78)	cos_function
    (no local attributes)

  SUB- ENTITY(79)	tan_function
    (no local attributes)

  SUB- ENTITY(80)	log10_function
    (no local attributes)

  SUB- ENTITY(81)	exp_function
    (no local attributes)

  SUB- ENTITY(82)	acos_function
    (no local attributes)

  SUB- ENTITY(83)	unary_function_call
    (no local attributes)

  SUB- ENTITY(84)	unary_numeric_expression
    REDCR: operand,	TYPE: numeric_expression -- EXPLICIT	(AMBIGUOUS/MASKED)
      -- OVERRIDING ENTITY: unary_generic_expression


  SUB- ENTITY(85)	expression_extension_numeric
    (no local attributes)

  SUB- ENTITY(86)	numeric_expression
    ATTR:  is_int,	TYPE: BOOLEAN -- DERIVED
      := is_int_expr( SELF )

    ATTR:  sql_mappable,	TYPE: BOOLEAN -- DERIVED
      := is_sql_mappable( SELF )


*/


//MARK: - Partial Entity
  public final class _expression : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eEXPRESSION.self
    }

    //ATTRIBUTES
    // (no local attributes)

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init() {
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 0
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      self.init( )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY expression
    ABSTRACT SUPERTYPE OF ( 
        ONEOF ( 
            numeric_expression, 
            boolean_expression, 
            string_expression ) )
    SUBTYPE OF ( generic_expression );
  END_ENTITY; -- expression (line:14230 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eEXPRESSION : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _expression.self
    }
    public let partialEntity: _expression

    //MARK: SUPERTYPES
    public let super_eGENERIC_EXPRESSION: eGENERIC_EXPRESSION 	// [1]
    public var super_eEXPRESSION: eEXPRESSION { return self } 	// [2]

    //MARK: SUBTYPES
    public var sub_eCONCAT_EXPRESSION: eCONCAT_EXPRESSION? {	// [3]
      return self.complexEntity.entityReference(eCONCAT_EXPRESSION.self)
    }

    public var sub_eSTRING_LITERAL: eSTRING_LITERAL? {	// [4]
      return self.complexEntity.entityReference(eSTRING_LITERAL.self)
    }

    public var sub_eMATHS_STRING_VARIABLE: eMATHS_STRING_VARIABLE? {	// [5]
      return self.complexEntity.entityReference(eMATHS_STRING_VARIABLE.self)
    }

    public var sub_eSTRING_VARIABLE: eSTRING_VARIABLE? {	// [6]
      return self.complexEntity.entityReference(eSTRING_VARIABLE.self)
    }

    public var sub_eSIMPLE_STRING_EXPRESSION: eSIMPLE_STRING_EXPRESSION? {	// [7]
      return self.complexEntity.entityReference(eSIMPLE_STRING_EXPRESSION.self)
    }

    public var sub_eINDEX_EXPRESSION: eINDEX_EXPRESSION? {	// [8]
      return self.complexEntity.entityReference(eINDEX_EXPRESSION.self)
    }

    public var sub_eSUBSTRING_EXPRESSION: eSUBSTRING_EXPRESSION? {	// [9]
      return self.complexEntity.entityReference(eSUBSTRING_EXPRESSION.self)
    }

    public var sub_eFORMAT_FUNCTION: eFORMAT_FUNCTION? {	// [10]
      return self.complexEntity.entityReference(eFORMAT_FUNCTION.self)
    }

    public var sub_eSTRING_DEFINED_FUNCTION: eSTRING_DEFINED_FUNCTION? {	// [11]
      return self.complexEntity.entityReference(eSTRING_DEFINED_FUNCTION.self)
    }

    public var sub_eEXPRESSION_EXTENSION_STRING: eEXPRESSION_EXTENSION_STRING? {	// [12]
      return self.complexEntity.entityReference(eEXPRESSION_EXTENSION_STRING.self)
    }

    public var sub_eSTRING_EXPRESSION: eSTRING_EXPRESSION? {	// [13]
      return self.complexEntity.entityReference(eSTRING_EXPRESSION.self)
    }

    public var sub_eINTERVAL_EXPRESSION: eINTERVAL_EXPRESSION? {	// [14]
      return self.complexEntity.entityReference(eINTERVAL_EXPRESSION.self)
    }

    public var sub_eNOT_EXPRESSION: eNOT_EXPRESSION? {	// [15]
      return self.complexEntity.entityReference(eNOT_EXPRESSION.self)
    }

    public var sub_eODD_FUNCTION: eODD_FUNCTION? {	// [16]
      return self.complexEntity.entityReference(eODD_FUNCTION.self)
    }

    public var sub_eUNARY_BOOLEAN_EXPRESSION: eUNARY_BOOLEAN_EXPRESSION? {	// [17]
      return self.complexEntity.entityReference(eUNARY_BOOLEAN_EXPRESSION.self)
    }

    public var sub_eBOOLEAN_DEFINED_FUNCTION: eBOOLEAN_DEFINED_FUNCTION? {	// [18]
      return self.complexEntity.entityReference(eBOOLEAN_DEFINED_FUNCTION.self)
    }

    public var sub_eBOOLEAN_REPRESENTATION_ITEM: eBOOLEAN_REPRESENTATION_ITEM? {	// [19]
      return self.complexEntity.entityReference(eBOOLEAN_REPRESENTATION_ITEM.self)
    }

    public var sub_eBOOLEAN_LITERAL: eBOOLEAN_LITERAL? {	// [20]
      return self.complexEntity.entityReference(eBOOLEAN_LITERAL.self)
    }

    public var sub_eMATHS_BOOLEAN_VARIABLE: eMATHS_BOOLEAN_VARIABLE? {	// [21]
      return self.complexEntity.entityReference(eMATHS_BOOLEAN_VARIABLE.self)
    }

    public var sub_eBOOLEAN_VARIABLE: eBOOLEAN_VARIABLE? {	// [22]
      return self.complexEntity.entityReference(eBOOLEAN_VARIABLE.self)
    }

    public var sub_eSIMPLE_BOOLEAN_EXPRESSION: eSIMPLE_BOOLEAN_EXPRESSION? {	// [23]
      return self.complexEntity.entityReference(eSIMPLE_BOOLEAN_EXPRESSION.self)
    }

    public var sub_eEQUALS_EXPRESSION: eEQUALS_EXPRESSION? {	// [24]
      return self.complexEntity.entityReference(eEQUALS_EXPRESSION.self)
    }

    public var sub_eXOR_EXPRESSION: eXOR_EXPRESSION? {	// [25]
      return self.complexEntity.entityReference(eXOR_EXPRESSION.self)
    }

    public var sub_eBINARY_BOOLEAN_EXPRESSION: eBINARY_BOOLEAN_EXPRESSION? {	// [26]
      return self.complexEntity.entityReference(eBINARY_BOOLEAN_EXPRESSION.self)
    }

    public var sub_eOR_EXPRESSION: eOR_EXPRESSION? {	// [27]
      return self.complexEntity.entityReference(eOR_EXPRESSION.self)
    }

    public var sub_eAND_EXPRESSION: eAND_EXPRESSION? {	// [28]
      return self.complexEntity.entityReference(eAND_EXPRESSION.self)
    }

    public var sub_eMULTIPLE_ARITY_BOOLEAN_EXPRESSION: eMULTIPLE_ARITY_BOOLEAN_EXPRESSION? {	// [29]
      return self.complexEntity.entityReference(eMULTIPLE_ARITY_BOOLEAN_EXPRESSION.self)
    }

    public var sub_eCOMPARISON_NOT_EQUAL: eCOMPARISON_NOT_EQUAL? {	// [30]
      return self.complexEntity.entityReference(eCOMPARISON_NOT_EQUAL.self)
    }

    public var sub_eCOMPARISON_GREATER: eCOMPARISON_GREATER? {	// [31]
      return self.complexEntity.entityReference(eCOMPARISON_GREATER.self)
    }

    public var sub_eCOMPARISON_GREATER_EQUAL: eCOMPARISON_GREATER_EQUAL? {	// [32]
      return self.complexEntity.entityReference(eCOMPARISON_GREATER_EQUAL.self)
    }

    public var sub_eCOMPARISON_LESS_EQUAL: eCOMPARISON_LESS_EQUAL? {	// [33]
      return self.complexEntity.entityReference(eCOMPARISON_LESS_EQUAL.self)
    }

    public var sub_eLIKE_EXPRESSION: eLIKE_EXPRESSION? {	// [34]
      return self.complexEntity.entityReference(eLIKE_EXPRESSION.self)
    }

    public var sub_eCOMPARISON_EQUAL: eCOMPARISON_EQUAL? {	// [35]
      return self.complexEntity.entityReference(eCOMPARISON_EQUAL.self)
    }

    public var sub_eCOMPARISON_LESS: eCOMPARISON_LESS? {	// [36]
      return self.complexEntity.entityReference(eCOMPARISON_LESS.self)
    }

    public var sub_eCOMPARISON_EXPRESSION: eCOMPARISON_EXPRESSION? {	// [37]
      return self.complexEntity.entityReference(eCOMPARISON_EXPRESSION.self)
    }

    public var sub_eBOOLEAN_EXPRESSION: eBOOLEAN_EXPRESSION? {	// [38]
      return self.complexEntity.entityReference(eBOOLEAN_EXPRESSION.self)
    }

    public var sub_eMINUS_EXPRESSION: eMINUS_EXPRESSION? {	// [39]
      return self.complexEntity.entityReference(eMINUS_EXPRESSION.self)
    }

    public var sub_eDIV_EXPRESSION: eDIV_EXPRESSION? {	// [40]
      return self.complexEntity.entityReference(eDIV_EXPRESSION.self)
    }

    public var sub_eMOD_EXPRESSION: eMOD_EXPRESSION? {	// [41]
      return self.complexEntity.entityReference(eMOD_EXPRESSION.self)
    }

    public var sub_eRATIONAL_REPRESENTATION_ITEM: eRATIONAL_REPRESENTATION_ITEM? {	// [42]
      return self.complexEntity.entityReference(eRATIONAL_REPRESENTATION_ITEM.self)
    }

    public var sub_eSLASH_EXPRESSION: eSLASH_EXPRESSION? {	// [43]
      return self.complexEntity.entityReference(eSLASH_EXPRESSION.self)
    }

    public var sub_ePOWER_EXPRESSION: ePOWER_EXPRESSION? {	// [44]
      return self.complexEntity.entityReference(ePOWER_EXPRESSION.self)
    }

    public var sub_eATAN_FUNCTION: eATAN_FUNCTION? {	// [45]
      return self.complexEntity.entityReference(eATAN_FUNCTION.self)
    }

    public var sub_eBINARY_FUNCTION_CALL: eBINARY_FUNCTION_CALL? {	// [46]
      return self.complexEntity.entityReference(eBINARY_FUNCTION_CALL.self)
    }

    public var sub_eBINARY_NUMERIC_EXPRESSION: eBINARY_NUMERIC_EXPRESSION? {	// [47]
      return self.complexEntity.entityReference(eBINARY_NUMERIC_EXPRESSION.self)
    }

    public var sub_eINT_VALUE_FUNCTION: eINT_VALUE_FUNCTION? {	// [48]
      return self.complexEntity.entityReference(eINT_VALUE_FUNCTION.self)
    }

    public var sub_eVALUE_FUNCTION: eVALUE_FUNCTION? {	// [49]
      return self.complexEntity.entityReference(eVALUE_FUNCTION.self)
    }

    public var sub_eINTEGER_DEFINED_FUNCTION: eINTEGER_DEFINED_FUNCTION? {	// [50]
      return self.complexEntity.entityReference(eINTEGER_DEFINED_FUNCTION.self)
    }

    public var sub_eREAL_DEFINED_FUNCTION: eREAL_DEFINED_FUNCTION? {	// [51]
      return self.complexEntity.entityReference(eREAL_DEFINED_FUNCTION.self)
    }

    public var sub_eNUMERIC_DEFINED_FUNCTION: eNUMERIC_DEFINED_FUNCTION? {	// [52]
      return self.complexEntity.entityReference(eNUMERIC_DEFINED_FUNCTION.self)
    }

    public var sub_eMULT_EXPRESSION: eMULT_EXPRESSION? {	// [53]
      return self.complexEntity.entityReference(eMULT_EXPRESSION.self)
    }

    public var sub_ePLUS_EXPRESSION: ePLUS_EXPRESSION? {	// [54]
      return self.complexEntity.entityReference(ePLUS_EXPRESSION.self)
    }

    public var sub_eMINIMUM_FUNCTION: eMINIMUM_FUNCTION? {	// [55]
      return self.complexEntity.entityReference(eMINIMUM_FUNCTION.self)
    }

    public var sub_eMAXIMUM_FUNCTION: eMAXIMUM_FUNCTION? {	// [56]
      return self.complexEntity.entityReference(eMAXIMUM_FUNCTION.self)
    }

    public var sub_eMULTIPLE_ARITY_FUNCTION_CALL: eMULTIPLE_ARITY_FUNCTION_CALL? {	// [57]
      return self.complexEntity.entityReference(eMULTIPLE_ARITY_FUNCTION_CALL.self)
    }

    public var sub_eMULTIPLE_ARITY_NUMERIC_EXPRESSION: eMULTIPLE_ARITY_NUMERIC_EXPRESSION? {	// [58]
      return self.complexEntity.entityReference(eMULTIPLE_ARITY_NUMERIC_EXPRESSION.self)
    }

    public var sub_eLENGTH_FUNCTION: eLENGTH_FUNCTION? {	// [59]
      return self.complexEntity.entityReference(eLENGTH_FUNCTION.self)
    }

    public var sub_eINTEGER_REPRESENTATION_ITEM: eINTEGER_REPRESENTATION_ITEM? {	// [60]
      return self.complexEntity.entityReference(eINTEGER_REPRESENTATION_ITEM.self)
    }

    public var sub_eINT_LITERAL: eINT_LITERAL? {	// [61]
      return self.complexEntity.entityReference(eINT_LITERAL.self)
    }

    public var sub_eREAL_REPRESENTATION_ITEM: eREAL_REPRESENTATION_ITEM? {	// [62]
      return self.complexEntity.entityReference(eREAL_REPRESENTATION_ITEM.self)
    }

    public var sub_eREAL_LITERAL: eREAL_LITERAL? {	// [63]
      return self.complexEntity.entityReference(eREAL_LITERAL.self)
    }

    public var sub_eLITERAL_NUMBER: eLITERAL_NUMBER? {	// [64]
      return self.complexEntity.entityReference(eLITERAL_NUMBER.self)
    }

    public var sub_eMATHS_REAL_VARIABLE: eMATHS_REAL_VARIABLE? {	// [65]
      return self.complexEntity.entityReference(eMATHS_REAL_VARIABLE.self)
    }

    public var sub_eREAL_NUMERIC_VARIABLE: eREAL_NUMERIC_VARIABLE? {	// [66]
      return self.complexEntity.entityReference(eREAL_NUMERIC_VARIABLE.self)
    }

    public var sub_eMATHS_INTEGER_VARIABLE: eMATHS_INTEGER_VARIABLE? {	// [67]
      return self.complexEntity.entityReference(eMATHS_INTEGER_VARIABLE.self)
    }

    public var sub_eINT_NUMERIC_VARIABLE: eINT_NUMERIC_VARIABLE? {	// [68]
      return self.complexEntity.entityReference(eINT_NUMERIC_VARIABLE.self)
    }

    public var sub_eNUMERIC_VARIABLE: eNUMERIC_VARIABLE? {	// [69]
      return self.complexEntity.entityReference(eNUMERIC_VARIABLE.self)
    }

    public var sub_eSIMPLE_NUMERIC_EXPRESSION: eSIMPLE_NUMERIC_EXPRESSION? {	// [70]
      return self.complexEntity.entityReference(eSIMPLE_NUMERIC_EXPRESSION.self)
    }

    public var sub_eSQUARE_ROOT_FUNCTION: eSQUARE_ROOT_FUNCTION? {	// [71]
      return self.complexEntity.entityReference(eSQUARE_ROOT_FUNCTION.self)
    }

    public var sub_eLOG2_FUNCTION: eLOG2_FUNCTION? {	// [72]
      return self.complexEntity.entityReference(eLOG2_FUNCTION.self)
    }

    public var sub_eSIN_FUNCTION: eSIN_FUNCTION? {	// [73]
      return self.complexEntity.entityReference(eSIN_FUNCTION.self)
    }

    public var sub_eABS_FUNCTION: eABS_FUNCTION? {	// [74]
      return self.complexEntity.entityReference(eABS_FUNCTION.self)
    }

    public var sub_eMINUS_FUNCTION: eMINUS_FUNCTION? {	// [75]
      return self.complexEntity.entityReference(eMINUS_FUNCTION.self)
    }

    public var sub_eLOG_FUNCTION: eLOG_FUNCTION? {	// [76]
      return self.complexEntity.entityReference(eLOG_FUNCTION.self)
    }

    public var sub_eASIN_FUNCTION: eASIN_FUNCTION? {	// [77]
      return self.complexEntity.entityReference(eASIN_FUNCTION.self)
    }

    public var sub_eCOS_FUNCTION: eCOS_FUNCTION? {	// [78]
      return self.complexEntity.entityReference(eCOS_FUNCTION.self)
    }

    public var sub_eTAN_FUNCTION: eTAN_FUNCTION? {	// [79]
      return self.complexEntity.entityReference(eTAN_FUNCTION.self)
    }

    public var sub_eLOG10_FUNCTION: eLOG10_FUNCTION? {	// [80]
      return self.complexEntity.entityReference(eLOG10_FUNCTION.self)
    }

    public var sub_eEXP_FUNCTION: eEXP_FUNCTION? {	// [81]
      return self.complexEntity.entityReference(eEXP_FUNCTION.self)
    }

    public var sub_eACOS_FUNCTION: eACOS_FUNCTION? {	// [82]
      return self.complexEntity.entityReference(eACOS_FUNCTION.self)
    }

    public var sub_eUNARY_FUNCTION_CALL: eUNARY_FUNCTION_CALL? {	// [83]
      return self.complexEntity.entityReference(eUNARY_FUNCTION_CALL.self)
    }

    public var sub_eUNARY_NUMERIC_EXPRESSION: eUNARY_NUMERIC_EXPRESSION? {	// [84]
      return self.complexEntity.entityReference(eUNARY_NUMERIC_EXPRESSION.self)
    }

    public var sub_eEXPRESSION_EXTENSION_NUMERIC: eEXPRESSION_EXTENSION_NUMERIC? {	// [85]
      return self.complexEntity.entityReference(eEXPRESSION_EXTENSION_NUMERIC.self)
    }

    public var sub_eNUMERIC_EXPRESSION: eNUMERIC_EXPRESSION? {	// [86]
      return self.complexEntity.entityReference(eNUMERIC_EXPRESSION.self)
    }


    //MARK: ATTRIBUTES
    // THE_VALUE: (5 AMBIGUOUS REFs)

    // OPERANDS: (6 AMBIGUOUS REFs)

    // OPERAND: (7 AMBIGUOUS REFs)

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eINTERVAL_EXPRESSION`` )
    public var INTERVAL_HIGH: eGENERIC_EXPRESSION?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"INTERVAL_HIGH") {
          return cached.value as! eGENERIC_EXPRESSION? 
        }
        guard let origin = sub_eINTERVAL_EXPRESSION else { return nil }
        let value = eGENERIC_EXPRESSION(origin.partialEntity._interval_high__getter(SELF: origin))
        updateCache(derivedAttributeName:"INTERVAL_HIGH", value:value)
        return value
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eFORMAT_FUNCTION`` )
    public var FORMAT_STRING: eGENERIC_EXPRESSION?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"FORMAT_STRING") {
          return cached.value as! eGENERIC_EXPRESSION? 
        }
        guard let origin = sub_eFORMAT_FUNCTION else { return nil }
        let value = eGENERIC_EXPRESSION(origin.partialEntity._format_string__getter(SELF: origin))
        updateCache(derivedAttributeName:"FORMAT_STRING", value:value)
        return value
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eINTERVAL_EXPRESSION`` )
    public var INTERVAL_LOW: eGENERIC_EXPRESSION?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"INTERVAL_LOW") {
          return cached.value as! eGENERIC_EXPRESSION? 
        }
        guard let origin = sub_eINTERVAL_EXPRESSION else { return nil }
        let value = eGENERIC_EXPRESSION(origin.partialEntity._interval_low__getter(SELF: origin))
        updateCache(derivedAttributeName:"INTERVAL_LOW", value:value)
        return value
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eNUMERIC_EXPRESSION`` )
    public var IS_INT: SDAI.BOOLEAN?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"IS_INT") {
          return cached.value as! SDAI.BOOLEAN? 
        }
        guard let origin = sub_eNUMERIC_EXPRESSION else { return nil }
        let value = SDAI.BOOLEAN(origin.partialEntity._is_int__getter(SELF: origin))
        updateCache(derivedAttributeName:"IS_INT", value:value)
        return value
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eSUBSTRING_EXPRESSION`` )
    public var INDEX2: eGENERIC_EXPRESSION?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"INDEX2") {
          return cached.value as! eGENERIC_EXPRESSION? 
        }
        guard let origin = sub_eSUBSTRING_EXPRESSION else { return nil }
        let value = eGENERIC_EXPRESSION(origin.partialEntity._index2__getter(SELF: origin))
        updateCache(derivedAttributeName:"INDEX2", value:value)
        return value
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eSUBSTRING_EXPRESSION`` )
    public var INDEX1: eGENERIC_EXPRESSION?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"INDEX1") {
          return cached.value as! eGENERIC_EXPRESSION? 
        }
        guard let origin = sub_eSUBSTRING_EXPRESSION else { return nil }
        let value = eGENERIC_EXPRESSION(origin.partialEntity._index1__getter(SELF: origin))
        updateCache(derivedAttributeName:"INDEX1", value:value)
        return value
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eFORMAT_FUNCTION`` )
    public var VALUE_TO_FORMAT: eGENERIC_EXPRESSION?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"VALUE_TO_FORMAT") {
          return cached.value as! eGENERIC_EXPRESSION? 
        }
        guard let origin = sub_eFORMAT_FUNCTION else { return nil }
        let value = eGENERIC_EXPRESSION(origin.partialEntity._value_to_format__getter(SELF: origin))
        updateCache(derivedAttributeName:"VALUE_TO_FORMAT", value:value)
        return value
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eNUMERIC_EXPRESSION`` )
    public var SQL_MAPPABLE: SDAI.BOOLEAN?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"SQL_MAPPABLE") {
          return cached.value as! SDAI.BOOLEAN? 
        }
        guard let origin = sub_eNUMERIC_EXPRESSION else { return nil }
        let value = SDAI.BOOLEAN(origin.partialEntity._sql_mappable__getter(SELF: origin))
        updateCache(derivedAttributeName:"SQL_MAPPABLE", value:value)
        return value
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eINDEX_EXPRESSION`` )
    public var INDEX: eGENERIC_EXPRESSION?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"INDEX") {
          return cached.value as! eGENERIC_EXPRESSION? 
        }
        guard let origin = sub_eINDEX_EXPRESSION else { return nil }
        let value = eGENERIC_EXPRESSION(origin.partialEntity._index__getter(SELF: origin))
        updateCache(derivedAttributeName:"INDEX", value:value)
        return value
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eINTERVAL_EXPRESSION`` )
    public var INTERVAL_ITEM: eGENERIC_EXPRESSION?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"INTERVAL_ITEM") {
          return cached.value as! eGENERIC_EXPRESSION? 
        }
        guard let origin = sub_eINTERVAL_EXPRESSION else { return nil }
        let value = eGENERIC_EXPRESSION(origin.partialEntity._interval_item__getter(SELF: origin))
        updateCache(derivedAttributeName:"INTERVAL_ITEM", value:value)
        return value
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_expression.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eGENERIC_EXPRESSION.self) else { return nil }
      self.super_eGENERIC_EXPRESSION = super1

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "EXPRESSION", type: self, explicitAttributeCount: 0)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eGENERIC_EXPRESSION.self)
      entityDef.add(supertype: eEXPRESSION.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "INTERVAL_HIGH", keyPath: \eEXPRESSION.INTERVAL_HIGH, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "FORMAT_STRING", keyPath: \eEXPRESSION.FORMAT_STRING, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "INTERVAL_LOW", keyPath: \eEXPRESSION.INTERVAL_LOW, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "IS_INT", keyPath: \eEXPRESSION.IS_INT, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "INDEX2", keyPath: \eEXPRESSION.INDEX2, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "INDEX1", keyPath: \eEXPRESSION.INDEX1, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "VALUE_TO_FORMAT", keyPath: \eEXPRESSION.VALUE_TO_FORMAT, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "SQL_MAPPABLE", keyPath: \eEXPRESSION.SQL_MAPPABLE, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "INDEX", keyPath: \eEXPRESSION.INDEX, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "INTERVAL_ITEM", keyPath: \eEXPRESSION.INTERVAL_ITEM, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: true)

      return entityDef
    }

  }
}
