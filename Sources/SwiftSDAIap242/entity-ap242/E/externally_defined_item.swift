/* file: externally_defined_item.swift 	 generated: Tue Nov 16 05:35:44 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY externally_defined_item;
      item_id  : source_item;
      source   : external_source;
  END_ENTITY; -- externally_defined_item (line:14926 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  ENTITY(SELF)	externally_defined_item
    ATTR:  item_id,	TYPE: source_item -- EXPLICIT

    ATTR:  source,	TYPE: external_source -- EXPLICIT


  SUB- ENTITY(2)	externally_defined_conversion_based_unit
    (no local attributes)

  SUB- ENTITY(3)	externally_defined_colour
    (no local attributes)

  SUB- ENTITY(4)	externally_defined_representation
    REDCR: items,	TYPE: SET [1 : ?] OF externally_defined_representation_item -- EXPLICIT
      -- OVERRIDING ENTITY: representation


  SUB- ENTITY(5)	externally_defined_curve_font
    (no local attributes)

  SUB- ENTITY(6)	externally_defined_string
    (no local attributes)

  SUB- ENTITY(7)	externally_defined_representation_item
    (no local attributes)

  SUB- ENTITY(8)	externally_defined_tile_style
    (no local attributes)

  SUB- ENTITY(9)	externally_defined_marker
    (no local attributes)

  SUB- ENTITY(10)	externally_defined_terminator_symbol
    (no local attributes)

  SUB- ENTITY(11)	externally_defined_symbol
    (no local attributes)

  SUB- ENTITY(12)	externally_defined_item_with_multiple_references
    ATTR:  references,	TYPE: LIST [1 : ?] OF UNIQUE source_item -- EXPLICIT


  SUB- ENTITY(13)	externally_defined_style
    (no local attributes)

  SUB- ENTITY(14)	externally_defined_currency
    (no local attributes)

  SUB- ENTITY(15)	externally_defined_context_dependent_unit
    (no local attributes)

  SUB- ENTITY(16)	externally_defined_text_font
    (no local attributes)

  SUB- ENTITY(17)	externally_defined_general_property
    (no local attributes)

  SUB- ENTITY(18)	externally_defined_hatch_style
    (no local attributes)

  SUB- ENTITY(19)	externally_listed_data
    ATTR:  value_range,	TYPE: maths_space -- EXPLICIT


  SUB- ENTITY(20)	externally_defined_dimension_definition
    (no local attributes)

  SUB- ENTITY(21)	externally_defined_tile
    (no local attributes)

  SUB- ENTITY(22)	externally_defined_class
    (no local attributes)

  SUB- ENTITY(23)	externally_defined_feature_definition
    (no local attributes)

  SUB- ENTITY(24)	externally_defined_character_glyph
    (no local attributes)

*/


//MARK: - Partial Entity
  public final class _externally_defined_item : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eEXTERNALLY_DEFINED_ITEM.self
    }

    //ATTRIBUTES
    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _item_id: sSOURCE_ITEM // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _source: eEXTERNAL_SOURCE // PLAIN EXPLICIT ATTRIBUTE

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      //SELECT data types (indirectly) referencing the current type as a member of the select list
      members.insert(SDAI.STRING(sDOCUMENT_REFERENCE_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sACTION_ITEMS.typeName)) // -> sDOCUMENT_REFERENCE_ITEM
      members.insert(SDAI.STRING(sCHANGE_MANAGEMENT_OBJECT.typeName)) // -> sACTION_ITEMS
      members.insert(SDAI.STRING(sIR_USAGE_ITEM.typeName)) // -> sDOCUMENT_REFERENCE_ITEM
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._item_id.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._source.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._item_id.value.isValueEqualOptionally(to: rhs._item_id.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._source.value.isValueEqualOptionally(to: rhs._source.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._item_id.value.isValueEqualOptionally(to: rhs._item_id.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._source.value.isValueEqualOptionally(to: rhs._source.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(ITEM_ID: sSOURCE_ITEM, SOURCE: eEXTERNAL_SOURCE) {
      self._item_id = ITEM_ID
      self._source = SOURCE
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 2
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverRequiredParameter(as: sSOURCE_ITEM.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p1) = exchangeStructure.recoverRequiredParameter(as: eEXTERNAL_SOURCE.self, from: parameters[1])
      else { exchangeStructure.add(errorContext: "while recovering parameter #1 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( ITEM_ID: p0, SOURCE: p1 )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY externally_defined_item;
      item_id  : source_item;
      source   : external_source;
  END_ENTITY; -- externally_defined_item (line:14926 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eEXTERNALLY_DEFINED_ITEM : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _externally_defined_item.self
    }
    public let partialEntity: _externally_defined_item

    //MARK: SUPERTYPES
    public var super_eEXTERNALLY_DEFINED_ITEM: eEXTERNALLY_DEFINED_ITEM { return self } 	// [1]

    //MARK: SUBTYPES
    public var sub_eEXTERNALLY_DEFINED_CONVERSION_BASED_UNIT: eEXTERNALLY_DEFINED_CONVERSION_BASED_UNIT? {	// [2]
      return self.complexEntity.entityReference(eEXTERNALLY_DEFINED_CONVERSION_BASED_UNIT.self)
    }

    public var sub_eEXTERNALLY_DEFINED_COLOUR: eEXTERNALLY_DEFINED_COLOUR? {	// [3]
      return self.complexEntity.entityReference(eEXTERNALLY_DEFINED_COLOUR.self)
    }

    public var sub_eEXTERNALLY_DEFINED_REPRESENTATION: eEXTERNALLY_DEFINED_REPRESENTATION? {	// [4]
      return self.complexEntity.entityReference(eEXTERNALLY_DEFINED_REPRESENTATION.self)
    }

    public var sub_eEXTERNALLY_DEFINED_CURVE_FONT: eEXTERNALLY_DEFINED_CURVE_FONT? {	// [5]
      return self.complexEntity.entityReference(eEXTERNALLY_DEFINED_CURVE_FONT.self)
    }

    public var sub_eEXTERNALLY_DEFINED_STRING: eEXTERNALLY_DEFINED_STRING? {	// [6]
      return self.complexEntity.entityReference(eEXTERNALLY_DEFINED_STRING.self)
    }

    public var sub_eEXTERNALLY_DEFINED_REPRESENTATION_ITEM: eEXTERNALLY_DEFINED_REPRESENTATION_ITEM? {	// [7]
      return self.complexEntity.entityReference(eEXTERNALLY_DEFINED_REPRESENTATION_ITEM.self)
    }

    public var sub_eEXTERNALLY_DEFINED_TILE_STYLE: eEXTERNALLY_DEFINED_TILE_STYLE? {	// [8]
      return self.complexEntity.entityReference(eEXTERNALLY_DEFINED_TILE_STYLE.self)
    }

    public var sub_eEXTERNALLY_DEFINED_MARKER: eEXTERNALLY_DEFINED_MARKER? {	// [9]
      return self.complexEntity.entityReference(eEXTERNALLY_DEFINED_MARKER.self)
    }

    public var sub_eEXTERNALLY_DEFINED_TERMINATOR_SYMBOL: eEXTERNALLY_DEFINED_TERMINATOR_SYMBOL? {	// [10]
      return self.complexEntity.entityReference(eEXTERNALLY_DEFINED_TERMINATOR_SYMBOL.self)
    }

    public var sub_eEXTERNALLY_DEFINED_SYMBOL: eEXTERNALLY_DEFINED_SYMBOL? {	// [11]
      return self.complexEntity.entityReference(eEXTERNALLY_DEFINED_SYMBOL.self)
    }

    public var sub_eEXTERNALLY_DEFINED_ITEM_WITH_MULTIPLE_REFERENCES: eEXTERNALLY_DEFINED_ITEM_WITH_MULTIPLE_REFERENCES? {	// [12]
      return self.complexEntity.entityReference(eEXTERNALLY_DEFINED_ITEM_WITH_MULTIPLE_REFERENCES.self)
    }

    public var sub_eEXTERNALLY_DEFINED_STYLE: eEXTERNALLY_DEFINED_STYLE? {	// [13]
      return self.complexEntity.entityReference(eEXTERNALLY_DEFINED_STYLE.self)
    }

    public var sub_eEXTERNALLY_DEFINED_CURRENCY: eEXTERNALLY_DEFINED_CURRENCY? {	// [14]
      return self.complexEntity.entityReference(eEXTERNALLY_DEFINED_CURRENCY.self)
    }

    public var sub_eEXTERNALLY_DEFINED_CONTEXT_DEPENDENT_UNIT: eEXTERNALLY_DEFINED_CONTEXT_DEPENDENT_UNIT? {	// [15]
      return self.complexEntity.entityReference(eEXTERNALLY_DEFINED_CONTEXT_DEPENDENT_UNIT.self)
    }

    public var sub_eEXTERNALLY_DEFINED_TEXT_FONT: eEXTERNALLY_DEFINED_TEXT_FONT? {	// [16]
      return self.complexEntity.entityReference(eEXTERNALLY_DEFINED_TEXT_FONT.self)
    }

    public var sub_eEXTERNALLY_DEFINED_GENERAL_PROPERTY: eEXTERNALLY_DEFINED_GENERAL_PROPERTY? {	// [17]
      return self.complexEntity.entityReference(eEXTERNALLY_DEFINED_GENERAL_PROPERTY.self)
    }

    public var sub_eEXTERNALLY_DEFINED_HATCH_STYLE: eEXTERNALLY_DEFINED_HATCH_STYLE? {	// [18]
      return self.complexEntity.entityReference(eEXTERNALLY_DEFINED_HATCH_STYLE.self)
    }

    public var sub_eEXTERNALLY_LISTED_DATA: eEXTERNALLY_LISTED_DATA? {	// [19]
      return self.complexEntity.entityReference(eEXTERNALLY_LISTED_DATA.self)
    }

    public var sub_eEXTERNALLY_DEFINED_DIMENSION_DEFINITION: eEXTERNALLY_DEFINED_DIMENSION_DEFINITION? {	// [20]
      return self.complexEntity.entityReference(eEXTERNALLY_DEFINED_DIMENSION_DEFINITION.self)
    }

    public var sub_eEXTERNALLY_DEFINED_TILE: eEXTERNALLY_DEFINED_TILE? {	// [21]
      return self.complexEntity.entityReference(eEXTERNALLY_DEFINED_TILE.self)
    }

    public var sub_eEXTERNALLY_DEFINED_CLASS: eEXTERNALLY_DEFINED_CLASS? {	// [22]
      return self.complexEntity.entityReference(eEXTERNALLY_DEFINED_CLASS.self)
    }

    public var sub_eEXTERNALLY_DEFINED_FEATURE_DEFINITION: eEXTERNALLY_DEFINED_FEATURE_DEFINITION? {	// [23]
      return self.complexEntity.entityReference(eEXTERNALLY_DEFINED_FEATURE_DEFINITION.self)
    }

    public var sub_eEXTERNALLY_DEFINED_CHARACTER_GLYPH: eEXTERNALLY_DEFINED_CHARACTER_GLYPH? {	// [24]
      return self.complexEntity.entityReference(eEXTERNALLY_DEFINED_CHARACTER_GLYPH.self)
    }


    //MARK: ATTRIBUTES
    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eEXTERNALLY_DEFINED_ITEM`` )
    public var ITEM_ID: sSOURCE_ITEM {
      get {
        return SDAI.UNWRAP( self.partialEntity._item_id )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._item_id = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eEXTERNALLY_LISTED_DATA`` )
    public var VALUE_RANGE: eMATHS_SPACE?  {
      get {
        return sub_eEXTERNALLY_LISTED_DATA?.partialEntity._value_range
      }
      set(newValue) {
        guard let partial = sub_eEXTERNALLY_LISTED_DATA?.super_eEXTERNALLY_LISTED_DATA.partialEntity
          else { return }
        partial._value_range = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT REDEF__ attribute
    /// - origin: SUB( ``eEXTERNALLY_DEFINED_REPRESENTATION`` )
    public var ITEMS: (SDAI.SET<eEXTERNALLY_DEFINED_REPRESENTATION_ITEM>/*[1:nil]*/ )?  {
      get {
        return SDAI.SET<eEXTERNALLY_DEFINED_REPRESENTATION_ITEM>( sub_eEXTERNALLY_DEFINED_REPRESENTATION?.super_eREPRESENTATION
          .partialEntity._items )
      }
      set(newValue) {
        guard let partial = sub_eEXTERNALLY_DEFINED_REPRESENTATION?.super_eREPRESENTATION.partialEntity
          else { return }
        partial._items = SDAI.UNWRAP(
          SDAI.SET<eREPRESENTATION_ITEM>(newValue))
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eEXTERNALLY_DEFINED_ITEM`` )
    public var SOURCE: eEXTERNAL_SOURCE {
      get {
        return SDAI.UNWRAP( self.partialEntity._source )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._source = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eEXTERNALLY_DEFINED_ITEM_WITH_MULTIPLE_REFERENCES`` )
    public var REFERENCES: (SDAI.LIST_UNIQUE<sSOURCE_ITEM>/*[1:nil]*/ )?  {
      get {
        return sub_eEXTERNALLY_DEFINED_ITEM_WITH_MULTIPLE_REFERENCES?.partialEntity._references
      }
      set(newValue) {
        guard let partial = sub_eEXTERNALLY_DEFINED_ITEM_WITH_MULTIPLE_REFERENCES?.super_eEXTERNALLY_DEFINED_ITEM_WITH_MULTIPLE_REFERENCES
          .partialEntity else { return }
        partial._references = SDAI.UNWRAP(newValue)
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_externally_defined_item.self) else { return nil }
      self.partialEntity = partial

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }

    //SIMPLE ENTITY REFERENCE
    public convenience init?(_ partial:_externally_defined_item) {
      let complex = SDAI.ComplexEntity(entities:[partial])
      self.init(complex: complex)
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "EXTERNALLY_DEFINED_ITEM", type: self, explicitAttributeCount: 2)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eEXTERNALLY_DEFINED_ITEM.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "ITEM_ID", keyPath: \eEXTERNALLY_DEFINED_ITEM.ITEM_ID, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "VALUE_RANGE", keyPath: \eEXTERNALLY_DEFINED_ITEM.VALUE_RANGE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "ITEMS", keyPath: \eEXTERNALLY_DEFINED_ITEM.ITEMS, 
        kind: .explicitRedeclaring, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "SOURCE", keyPath: \eEXTERNALLY_DEFINED_ITEM.SOURCE, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "REFERENCES", keyPath: \eEXTERNALLY_DEFINED_ITEM.REFERENCES, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)

      return entityDef
    }

  }
}
