/* file: explicit_composite_hole.swift 	 generated: Sat Aug 14 13:46:02 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY explicit_composite_hole
    SUBTYPE OF ( composite_hole );
      placement  : shape_representation;
    INVERSE
      explicit_shape : SET [0 : ?] OF item_identified_representation_usage FOR definition -- defined in ENTITY: item_identified_representation_usage;
    WHERE
      wr1: ( SIZEOF( QUERY ( ri <* placement\representation.items | ( 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.AXIS2_PLACEMENT_3D'  IN TYPEOF( ri ) ) ) ) = 
               1 );
      wr2: ( ( SIZEOF( explicit_shape ) = 0 ) OR ( SIZEOF( QUERY ( es <* explicit_shape | ( NOT ( placement =
               es\item_identified_representation_usage.used_representation ) ) ) ) = 0 ) );
  END_ENTITY; -- explicit_composite_hole (line:14114 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	characterized_object
    ATTR:  name,	TYPE: label -- EXPLICIT (DYNAMIC)
      -- possibly overriden by
          ENTITY: shape_feature_definition_element_relationship,	TYPE: label	(as DERIVED)
          ENTITY: shape_feature_fit_relationship,	TYPE: label	(as DERIVED)
          ENTITY: characterized_representation,	TYPE: label	(as DERIVED)
          ENTITY: shape_feature_definition_relationship,	TYPE: label	(as DERIVED)

    ATTR:  description,	TYPE: OPTIONAL text -- EXPLICIT (DYNAMIC)
      -- possibly overriden by
          ENTITY: shape_feature_definition_element_relationship,	TYPE: text	(as DERIVED)
          ENTITY: shape_feature_fit_relationship,	TYPE: text	(as DERIVED)
          ENTITY: characterized_representation,	TYPE: text	(as DERIVED)
          ENTITY: shape_feature_definition_relationship,	TYPE: text	(as DERIVED)


  SUPER- ENTITY(2)	feature_definition
    (no local attributes)

  SUPER- ENTITY(3)	compound_feature
    (no local attributes)

  SUPER- ENTITY(4)	composite_hole
    (no local attributes)

  ENTITY(SELF)	explicit_composite_hole
    ATTR:  placement,	TYPE: shape_representation -- EXPLICIT

    ATTR:  explicit_shape,	TYPE: SET [0 : ?] OF item_identified_representation_usage -- INVERSE
      FOR definition;


  SUB- ENTITY(6)	simplified_counterdrill_hole_definition
    (no local attributes)

  SUB- ENTITY(7)	counterdrill_hole_definition
    ATTR:  counterbore,	TYPE: explicit_round_hole -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  counterdrill_angle,	TYPE: positive_plane_angle_measure_with_unit -- EXPLICIT

    ATTR:  counterdrill_angle_tolerance,	TYPE: tolerance_value -- EXPLICIT

    ATTR:  drilled_hole_depth,	TYPE: OPTIONAL positive_length_measure_with_unit -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  drilled_hole_depth_tolerance,	TYPE: OPTIONAL tolerance_value -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  drilled_hole_diameter,	TYPE: positive_length_measure_with_unit -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  drilled_hole_diameter_tolerance,	TYPE: OPTIONAL tolerance_value_or_limits_and_fits -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  through_hole,	TYPE: BOOLEAN -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(8)	simplified_countersink_hole_definition
    (no local attributes)

  SUB- ENTITY(9)	countersink_hole_definition
    ATTR:  countersink_angle,	TYPE: positive_plane_angle_measure_with_unit -- EXPLICIT

    ATTR:  countersink_angle_tolerance,	TYPE: tolerance_value -- EXPLICIT

    ATTR:  countersink_diameter,	TYPE: positive_length_measure_with_unit -- EXPLICIT

    ATTR:  countersink_diameter_tolerance,	TYPE: OPTIONAL tolerance_value_or_limits_and_fits -- EXPLICIT

    ATTR:  drilled_hole_depth,	TYPE: OPTIONAL positive_length_measure_with_unit -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  drilled_hole_depth_tolerance,	TYPE: OPTIONAL tolerance_value -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  drilled_hole_diameter,	TYPE: positive_length_measure_with_unit -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  drilled_hole_diameter_tolerance,	TYPE: OPTIONAL tolerance_value_or_limits_and_fits -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  through_hole,	TYPE: BOOLEAN -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(10)	simplified_spotface_hole_definition
    (no local attributes)

  SUB- ENTITY(11)	spotface_hole_definition
    REDCR: counterbore,	TYPE: LIST [1 : ?] OF UNIQUE spotface_definition -- EXPLICIT	(AMBIGUOUS/MASKED)
      -- OVERRIDING ENTITY: counterbore_hole_definition

    ATTR:  spotface,	TYPE: LIST [1 : ?] OF UNIQUE spotface_definition -- DERIVED
      := SELF\counterbore_hole_definition.counterbore


  SUB- ENTITY(12)	simplified_counterbore_hole_definition
    (no local attributes)

  SUB- ENTITY(13)	counterbore_hole_definition
    ATTR:  counterbore,	TYPE: LIST [1 : ?] OF UNIQUE explicit_round_hole -- EXPLICIT	(AMBIGUOUS/MASKED)
      -- possibly overriden by
          ENTITY: spotface_hole_definition,	TYPE: LIST [1 : ?] OF UNIQUE spotface_definition

    ATTR:  drilled_hole_depth,	TYPE: OPTIONAL positive_length_measure_with_unit -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  drilled_hole_depth_tolerance,	TYPE: OPTIONAL tolerance_value -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  drilled_hole_diameter,	TYPE: positive_length_measure_with_unit -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  drilled_hole_diameter_tolerance,	TYPE: OPTIONAL tolerance_value_or_limits_and_fits -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  through_hole,	TYPE: BOOLEAN -- EXPLICIT	(AMBIGUOUS/MASKED)


*/


//MARK: - Partial Entity
  public final class _explicit_composite_hole : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eEXPLICIT_COMPOSITE_HOLE.self
    }

    //ATTRIBUTES
    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _placement: eSHAPE_REPRESENTATION // PLAIN EXPLICIT ATTRIBUTE

    /// INVERSE AGGREGATE ATTRIBUTE
    /// observing _item_identified_representation_usage ._definition
    internal var _explicit_shape: SDAI.SET<eITEM_IDENTIFIED_REPRESENTATION_USAGE> {
      return __explicit_shape.map{ $0.reference }
    }
    private var __explicit_shape = SDAI.SET<SDAI.UnownedWrap<eITEM_IDENTIFIED_REPRESENTATION_USAGE>>(
      bound1: SDAI.UNWRAP(SDAI.INTEGER(0)), bound2: (nil as SDAI.INTEGER?), 
      SDAI.EMPLY_AGGREGATE) // unowned backing store
    /// INVERSE AGGREGATE ATTR SUPPORT(ADDER)
    internal func _explicit_shape__observeAddedReference(in complex: SDAI.ComplexEntity) {
      guard let newSource = complex.entityReference(eITEM_IDENTIFIED_REPRESENTATION_USAGE.self) else { return }
      self.__explicit_shape.add(member: SDAI.UnownedWrap(newSource) )
    }
    /// INVERSE AGGREGATE ATTR SUPPORT(REMOVER)
    internal func _explicit_shape__observeRemovedReference(in complex: SDAI.ComplexEntity) {
      guard let oldSource = complex.entityReference(eITEM_IDENTIFIED_REPRESENTATION_USAGE.self) else { return }
      let success = self.__explicit_shape.remove(member: SDAI.UnownedWrap(oldSource) )
      assert(success, "failed to remove inverse attribute element")
    }
    /// INVERSE AGGREGATE ATTR SUPPORT(LEAVING REFERENCE OWNER)
    internal func _explicit_shape__observe(leavingReferencerOwner complex: SDAI.ComplexEntity) {
      guard let oldSource = complex.entityReference(eITEM_IDENTIFIED_REPRESENTATION_USAGE.self) else { return }
      let success = self.__explicit_shape.removeAll(member: SDAI.UnownedWrap(oldSource) )
      assert(success, "failed to remove inverse attribute elements")
    }

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._placement.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._placement.value.isValueEqualOptionally(to: rhs._placement.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._placement.value.isValueEqualOptionally(to: rhs._placement.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: eEXPLICIT_COMPOSITE_HOLE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.PLACEMENT.GROUP_REF(eREPRESENTATION.self)
      let _TEMP2 = _TEMP1?.ITEMS
      let _TEMP3 = _TEMP2?.QUERY{ RI in 

          let _TEMP1 = SDAI.TYPEOF(RI, IS: eAXIS2_PLACEMENT_3D.self)
          return _TEMP1 }
      let _TEMP4 = SDAI.SIZEOF(_TEMP3)
      let _TEMP5 = _TEMP4 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
      return _TEMP5
    }
    public static func WHERE_wr2(SELF: eEXPLICIT_COMPOSITE_HOLE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.SIZEOF(SELF.EXPLICIT_SHAPE)
      let _TEMP2 = _TEMP1 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      let _TEMP3 = SELF.EXPLICIT_SHAPE
        .QUERY{ ES in 

          let _TEMP1 = ES.GROUP_REF(eITEM_IDENTIFIED_REPRESENTATION_USAGE.self)
          let _TEMP2 = _TEMP1?.USED_REPRESENTATION
          let _TEMP3 = SDAI.FORCE_OPTIONAL(SELF.PLACEMENT) .==. _TEMP2
          let _TEMP4 =  !_TEMP3
          return _TEMP4 }
      let _TEMP4 = SDAI.SIZEOF(_TEMP3)
      let _TEMP5 = _TEMP4 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      let _TEMP6 = _TEMP2 || _TEMP5
      return _TEMP6
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(PLACEMENT: eSHAPE_REPRESENTATION) {
      self._placement = PLACEMENT
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 1
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverRequiredParameter(as: eSHAPE_REPRESENTATION.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( PLACEMENT: p0 )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY explicit_composite_hole
    SUBTYPE OF ( composite_hole );
      placement  : shape_representation;
    INVERSE
      explicit_shape : SET [0 : ?] OF item_identified_representation_usage FOR definition -- defined in ENTITY: item_identified_representation_usage;
    WHERE
      wr1: ( SIZEOF( QUERY ( ri <* placement\representation.items | ( 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.AXIS2_PLACEMENT_3D'  IN TYPEOF( ri ) ) ) ) = 
               1 );
      wr2: ( ( SIZEOF( explicit_shape ) = 0 ) OR ( SIZEOF( QUERY ( es <* explicit_shape | ( NOT ( placement =
               es\item_identified_representation_usage.used_representation ) ) ) ) = 0 ) );
  END_ENTITY; -- explicit_composite_hole (line:14114 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eEXPLICIT_COMPOSITE_HOLE : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _explicit_composite_hole.self
    }
    public let partialEntity: _explicit_composite_hole

    //MARK: SUPERTYPES
    public let super_eCHARACTERIZED_OBJECT: eCHARACTERIZED_OBJECT 	// [1]
    public let super_eFEATURE_DEFINITION: eFEATURE_DEFINITION 	// [2]
    public let super_eCOMPOUND_FEATURE: eCOMPOUND_FEATURE 	// [3]
    public let super_eCOMPOSITE_HOLE: eCOMPOSITE_HOLE 	// [4]
    public var super_eEXPLICIT_COMPOSITE_HOLE: eEXPLICIT_COMPOSITE_HOLE { return self } 	// [5]

    //MARK: SUBTYPES
    public var sub_eSIMPLIFIED_COUNTERDRILL_HOLE_DEFINITION: eSIMPLIFIED_COUNTERDRILL_HOLE_DEFINITION? {	// [6]
      return self.complexEntity.entityReference(eSIMPLIFIED_COUNTERDRILL_HOLE_DEFINITION.self)
    }

    public var sub_eCOUNTERDRILL_HOLE_DEFINITION: eCOUNTERDRILL_HOLE_DEFINITION? {	// [7]
      return self.complexEntity.entityReference(eCOUNTERDRILL_HOLE_DEFINITION.self)
    }

    public var sub_eSIMPLIFIED_COUNTERSINK_HOLE_DEFINITION: eSIMPLIFIED_COUNTERSINK_HOLE_DEFINITION? {	// [8]
      return self.complexEntity.entityReference(eSIMPLIFIED_COUNTERSINK_HOLE_DEFINITION.self)
    }

    public var sub_eCOUNTERSINK_HOLE_DEFINITION: eCOUNTERSINK_HOLE_DEFINITION? {	// [9]
      return self.complexEntity.entityReference(eCOUNTERSINK_HOLE_DEFINITION.self)
    }

    public var sub_eSIMPLIFIED_SPOTFACE_HOLE_DEFINITION: eSIMPLIFIED_SPOTFACE_HOLE_DEFINITION? {	// [10]
      return self.complexEntity.entityReference(eSIMPLIFIED_SPOTFACE_HOLE_DEFINITION.self)
    }

    public var sub_eSPOTFACE_HOLE_DEFINITION: eSPOTFACE_HOLE_DEFINITION? {	// [11]
      return self.complexEntity.entityReference(eSPOTFACE_HOLE_DEFINITION.self)
    }

    public var sub_eSIMPLIFIED_COUNTERBORE_HOLE_DEFINITION: eSIMPLIFIED_COUNTERBORE_HOLE_DEFINITION? {	// [12]
      return self.complexEntity.entityReference(eSIMPLIFIED_COUNTERBORE_HOLE_DEFINITION.self)
    }

    public var sub_eCOUNTERBORE_HOLE_DEFINITION: eCOUNTERBORE_HOLE_DEFINITION? {	// [13]
      return self.complexEntity.entityReference(eCOUNTERBORE_HOLE_DEFINITION.self)
    }


    //MARK: ATTRIBUTES
    // DRILLED_HOLE_DEPTH: (3 AMBIGUOUS REFs)

    // DRILLED_HOLE_DIAMETER_TOLERANCE: (3 AMBIGUOUS REFs)

    // THROUGH_HOLE: (3 AMBIGUOUS REFs)

    // COUNTERBORE: (3 AMBIGUOUS REFs)

    // DRILLED_HOLE_DIAMETER: (3 AMBIGUOUS REFs)

    // DRILLED_HOLE_DEPTH_TOLERANCE: (3 AMBIGUOUS REFs)

    /// __EXPLICIT(DYNAMIC)__ attribute
    /// - origin: SUPER( ``eCHARACTERIZED_OBJECT`` )
    public var DESCRIPTION: tTEXT?  {
      get {
        if let resolved = _characterized_object._description__provider(complex: self.complexEntity) {
          let value = resolved._description__getter(complex: self.complexEntity)
          return value
        }
        else {
          return super_eCHARACTERIZED_OBJECT.partialEntity._description
        }
      }
      set(newValue) {
        if let _ = _characterized_object._description__provider(complex: self.complexEntity) { return }

        let partial = super_eCHARACTERIZED_OBJECT.partialEntity
        partial._description = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCOUNTERDRILL_HOLE_DEFINITION`` )
    public var COUNTERDRILL_ANGLE_TOLERANCE: eTOLERANCE_VALUE?  {
      get {
        return sub_eCOUNTERDRILL_HOLE_DEFINITION?.partialEntity._counterdrill_angle_tolerance
      }
      set(newValue) {
        guard let partial = sub_eCOUNTERDRILL_HOLE_DEFINITION?.super_eCOUNTERDRILL_HOLE_DEFINITION
          .partialEntity else { return }
        partial._counterdrill_angle_tolerance = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCOUNTERSINK_HOLE_DEFINITION`` )
    public var COUNTERSINK_DIAMETER: ePOSITIVE_LENGTH_MEASURE_WITH_UNIT?  {
      get {
        return sub_eCOUNTERSINK_HOLE_DEFINITION?.partialEntity._countersink_diameter
      }
      set(newValue) {
        guard let partial = sub_eCOUNTERSINK_HOLE_DEFINITION?.super_eCOUNTERSINK_HOLE_DEFINITION
          .partialEntity else { return }
        partial._countersink_diameter = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCOUNTERSINK_HOLE_DEFINITION`` )
    public var COUNTERSINK_ANGLE: ePOSITIVE_PLANE_ANGLE_MEASURE_WITH_UNIT?  {
      get {
        return sub_eCOUNTERSINK_HOLE_DEFINITION?.partialEntity._countersink_angle
      }
      set(newValue) {
        guard let partial = sub_eCOUNTERSINK_HOLE_DEFINITION?.super_eCOUNTERSINK_HOLE_DEFINITION
          .partialEntity else { return }
        partial._countersink_angle = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eEXPLICIT_COMPOSITE_HOLE`` )
    public var PLACEMENT: eSHAPE_REPRESENTATION {
      get {
        return SDAI.UNWRAP( self.partialEntity._placement )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._placement = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eSPOTFACE_HOLE_DEFINITION`` )
    public var SPOTFACE: (SDAI.LIST_UNIQUE<eSPOTFACE_DEFINITION>/*[1:nil]*/ )?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"SPOTFACE") {
          return cached.value as! (SDAI.LIST_UNIQUE<eSPOTFACE_DEFINITION>/*[1:nil]*/ )? 
        }
        guard let origin = sub_eSPOTFACE_HOLE_DEFINITION else { return nil }
        let value = SDAI.LIST_UNIQUE<eSPOTFACE_DEFINITION>(
          origin.partialEntity._spotface__getter(SELF: origin))
        updateCache(derivedAttributeName:"SPOTFACE", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCOUNTERDRILL_HOLE_DEFINITION`` )
    public var COUNTERDRILL_ANGLE: ePOSITIVE_PLANE_ANGLE_MEASURE_WITH_UNIT?  {
      get {
        return sub_eCOUNTERDRILL_HOLE_DEFINITION?.partialEntity._counterdrill_angle
      }
      set(newValue) {
        guard let partial = sub_eCOUNTERDRILL_HOLE_DEFINITION?.super_eCOUNTERDRILL_HOLE_DEFINITION
          .partialEntity else { return }
        partial._counterdrill_angle = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCOUNTERSINK_HOLE_DEFINITION`` )
    public var COUNTERSINK_ANGLE_TOLERANCE: eTOLERANCE_VALUE?  {
      get {
        return sub_eCOUNTERSINK_HOLE_DEFINITION?.partialEntity._countersink_angle_tolerance
      }
      set(newValue) {
        guard let partial = sub_eCOUNTERSINK_HOLE_DEFINITION?.super_eCOUNTERSINK_HOLE_DEFINITION
          .partialEntity else { return }
        partial._countersink_angle_tolerance = SDAI.UNWRAP(newValue)
      }
    }

    /// __INVERSE__ attribute
    /// observing eITEM_IDENTIFIED_REPRESENTATION_USAGE .DEFINITION
    /// - origin: SELF( ``eEXPLICIT_COMPOSITE_HOLE`` )
    public var EXPLICIT_SHAPE: SDAI.SET<eITEM_IDENTIFIED_REPRESENTATION_USAGE>/*[0:nil]*/  {
      get {
        return SDAI.UNWRAP( self.partialEntity._explicit_shape )
      }
    }

    /// __EXPLICIT(DYNAMIC)__ attribute
    /// - origin: SUPER( ``eCHARACTERIZED_OBJECT`` )
    public var NAME: tLABEL {
      get {
        if let resolved = _characterized_object._name__provider(complex: self.complexEntity) {
          let value = resolved._name__getter(complex: self.complexEntity)
          return value
        }
        else {
          return SDAI.UNWRAP( super_eCHARACTERIZED_OBJECT.partialEntity._name )
        }
      }
      set(newValue) {
        if let _ = _characterized_object._name__provider(complex: self.complexEntity) { return }

        let partial = super_eCHARACTERIZED_OBJECT.partialEntity
        partial._name = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCOUNTERSINK_HOLE_DEFINITION`` )
    public var COUNTERSINK_DIAMETER_TOLERANCE: sTOLERANCE_VALUE_OR_LIMITS_AND_FITS?  {
      get {
        return sub_eCOUNTERSINK_HOLE_DEFINITION?.partialEntity._countersink_diameter_tolerance
      }
      set(newValue) {
        guard let partial = sub_eCOUNTERSINK_HOLE_DEFINITION?.super_eCOUNTERSINK_HOLE_DEFINITION
          .partialEntity else { return }
        partial._countersink_diameter_tolerance = newValue
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_explicit_composite_hole.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eCHARACTERIZED_OBJECT.self) else { return nil }
      self.super_eCHARACTERIZED_OBJECT = super1

      guard let super2 = complexEntity?.entityReference(eFEATURE_DEFINITION.self) else { return nil }
      self.super_eFEATURE_DEFINITION = super2

      guard let super3 = complexEntity?.entityReference(eCOMPOUND_FEATURE.self) else { return nil }
      self.super_eCOMPOUND_FEATURE = super3

      guard let super4 = complexEntity?.entityReference(eCOMPOSITE_HOLE.self) else { return nil }
      self.super_eCOMPOSITE_HOLE = super4

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _explicit_composite_hole.WHERE_wr1(SELF: instance)
      result[prefix2 + " .WHERE_wr2"] = _explicit_composite_hole.WHERE_wr2(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "EXPLICIT_COMPOSITE_HOLE", type: self, explicitAttributeCount: 1)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eCHARACTERIZED_OBJECT.self)
      entityDef.add(supertype: eFEATURE_DEFINITION.self)
      entityDef.add(supertype: eCOMPOUND_FEATURE.self)
      entityDef.add(supertype: eCOMPOSITE_HOLE.self)
      entityDef.add(supertype: eEXPLICIT_COMPOSITE_HOLE.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "DESCRIPTION", keyPath: \eEXPLICIT_COMPOSITE_HOLE.DESCRIPTION, 
        kind: .explicitOptional, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "COUNTERDRILL_ANGLE_TOLERANCE", keyPath: \eEXPLICIT_COMPOSITE_HOLE.COUNTERDRILL_ANGLE_TOLERANCE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "COUNTERSINK_DIAMETER", keyPath: \eEXPLICIT_COMPOSITE_HOLE.COUNTERSINK_DIAMETER, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "COUNTERSINK_ANGLE", keyPath: \eEXPLICIT_COMPOSITE_HOLE.COUNTERSINK_ANGLE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "PLACEMENT", keyPath: \eEXPLICIT_COMPOSITE_HOLE.PLACEMENT, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "SPOTFACE", keyPath: \eEXPLICIT_COMPOSITE_HOLE.SPOTFACE, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "COUNTERDRILL_ANGLE", keyPath: \eEXPLICIT_COMPOSITE_HOLE.COUNTERDRILL_ANGLE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "COUNTERSINK_ANGLE_TOLERANCE", keyPath: \eEXPLICIT_COMPOSITE_HOLE.COUNTERSINK_ANGLE_TOLERANCE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "EXPLICIT_SHAPE", keyPath: \eEXPLICIT_COMPOSITE_HOLE.EXPLICIT_SHAPE, 
        kind: .inverse, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "NAME", keyPath: \eEXPLICIT_COMPOSITE_HOLE.NAME, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "COUNTERSINK_DIAMETER_TOLERANCE", keyPath: \eEXPLICIT_COMPOSITE_HOLE.COUNTERSINK_DIAMETER_TOLERANCE, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: true)

      return entityDef
    }

  }
}
