/* file: equivalence_instance_report_item_with_notable_instances.swift 	 generated: Sun Oct 31 15:32:10 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY equivalence_instance_report_item_with_notable_instances
    SUBTYPE OF ( a3m_equivalence_inspection_instance_report_item );
      notable_instances  : LIST [1 : ?] OF equivalence_notable_instance;
  END_ENTITY; -- equivalence_instance_report_item_with_notable_instances (line:13940 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	representation_item
    ATTR:  name,	TYPE: label -- EXPLICIT


  SUPER- ENTITY(2)	data_equivalence_inspection_instance_report_item
    ATTR:  inspected_element,	TYPE: data_equivalence_inspected_element_pair -- EXPLICIT


  SUPER- ENTITY(3)	a3m_equivalence_inspection_instance_report_item
    ATTR:  measured_value_for_inspected_element,	TYPE: equivalence_measured_value_select -- EXPLICIT


  ENTITY(SELF)	equivalence_instance_report_item_with_notable_instances
    ATTR:  notable_instances,	TYPE: LIST [1 : ?] OF equivalence_notable_instance -- EXPLICIT


*/


//MARK: - Partial Entity
  public final class _equivalence_instance_report_item_with_notable_instances : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eEQUIVALENCE_INSTANCE_REPORT_ITEM_WITH_NOTABLE_INSTANCES.self
    }

    //ATTRIBUTES
    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _notable_instances: SDAI.LIST<eEQUIVALENCE_NOTABLE_INSTANCE>/*[1:nil]*/  // PLAIN EXPLICIT ATTRIBUTE

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._notable_instances.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._notable_instances.value.isValueEqualOptionally(to: rhs._notable_instances.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._notable_instances.value.isValueEqualOptionally(to: rhs._notable_instances.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(NOTABLE_INSTANCES: SDAI.LIST<eEQUIVALENCE_NOTABLE_INSTANCE>/*[1:nil]*/ ) {
      self._notable_instances = NOTABLE_INSTANCES
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 1
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverRequiredParameter(as: SDAI.LIST<
        eEQUIVALENCE_NOTABLE_INSTANCE>.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( NOTABLE_INSTANCES: p0 )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY equivalence_instance_report_item_with_notable_instances
    SUBTYPE OF ( a3m_equivalence_inspection_instance_report_item );
      notable_instances  : LIST [1 : ?] OF equivalence_notable_instance;
  END_ENTITY; -- equivalence_instance_report_item_with_notable_instances (line:13940 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eEQUIVALENCE_INSTANCE_REPORT_ITEM_WITH_NOTABLE_INSTANCES : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _equivalence_instance_report_item_with_notable_instances.self
    }
    public let partialEntity: _equivalence_instance_report_item_with_notable_instances

    //MARK: SUPERTYPES
    public let super_eREPRESENTATION_ITEM: eREPRESENTATION_ITEM 	// [1]
    public let super_eDATA_EQUIVALENCE_INSPECTION_INSTANCE_REPORT_ITEM: eDATA_EQUIVALENCE_INSPECTION_INSTANCE_REPORT_ITEM 	// [2]
    public let super_eA3M_EQUIVALENCE_INSPECTION_INSTANCE_REPORT_ITEM: eA3M_EQUIVALENCE_INSPECTION_INSTANCE_REPORT_ITEM 	// [3]
    public var super_eEQUIVALENCE_INSTANCE_REPORT_ITEM_WITH_NOTABLE_INSTANCES: eEQUIVALENCE_INSTANCE_REPORT_ITEM_WITH_NOTABLE_INSTANCES { return self } 	// [4]

    //MARK: SUBTYPES

    //MARK: ATTRIBUTES
    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eA3M_EQUIVALENCE_INSPECTION_INSTANCE_REPORT_ITEM`` )
    public var MEASURED_VALUE_FOR_INSPECTED_ELEMENT: sEQUIVALENCE_MEASURED_VALUE_SELECT {
      get {
        return SDAI.UNWRAP( super_eA3M_EQUIVALENCE_INSPECTION_INSTANCE_REPORT_ITEM.partialEntity
          ._measured_value_for_inspected_element )
      }
      set(newValue) {
        let partial = super_eA3M_EQUIVALENCE_INSPECTION_INSTANCE_REPORT_ITEM.partialEntity
        partial._measured_value_for_inspected_element = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eEQUIVALENCE_INSTANCE_REPORT_ITEM_WITH_NOTABLE_INSTANCES`` )
    public var NOTABLE_INSTANCES: SDAI.LIST<eEQUIVALENCE_NOTABLE_INSTANCE>/*[1:nil]*/  {
      get {
        return SDAI.UNWRAP( self.partialEntity._notable_instances )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._notable_instances = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eDATA_EQUIVALENCE_INSPECTION_INSTANCE_REPORT_ITEM`` )
    public var INSPECTED_ELEMENT: eDATA_EQUIVALENCE_INSPECTED_ELEMENT_PAIR {
      get {
        return SDAI.UNWRAP( super_eDATA_EQUIVALENCE_INSPECTION_INSTANCE_REPORT_ITEM.partialEntity
          ._inspected_element )
      }
      set(newValue) {
        let partial = super_eDATA_EQUIVALENCE_INSPECTION_INSTANCE_REPORT_ITEM.partialEntity
        partial._inspected_element = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eREPRESENTATION_ITEM`` )
    public var NAME: tLABEL {
      get {
        return SDAI.UNWRAP( super_eREPRESENTATION_ITEM.partialEntity._name )
      }
      set(newValue) {
        let partial = super_eREPRESENTATION_ITEM.partialEntity
        partial._name = SDAI.UNWRAP(newValue)
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_equivalence_instance_report_item_with_notable_instances.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eREPRESENTATION_ITEM.self) else { return nil }
      self.super_eREPRESENTATION_ITEM = super1

      guard let super2 = complexEntity?.entityReference(eDATA_EQUIVALENCE_INSPECTION_INSTANCE_REPORT_ITEM.self) else { return nil }
      self.super_eDATA_EQUIVALENCE_INSPECTION_INSTANCE_REPORT_ITEM = super2

      guard let super3 = complexEntity?.entityReference(eA3M_EQUIVALENCE_INSPECTION_INSTANCE_REPORT_ITEM.self) else { return nil }
      self.super_eA3M_EQUIVALENCE_INSPECTION_INSTANCE_REPORT_ITEM = super3

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "EQUIVALENCE_INSTANCE_REPORT_ITEM_WITH_NOTABLE_INSTANCES", type: self, explicitAttributeCount: 1)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eREPRESENTATION_ITEM.self)
      entityDef.add(supertype: eDATA_EQUIVALENCE_INSPECTION_INSTANCE_REPORT_ITEM.self)
      entityDef.add(supertype: eA3M_EQUIVALENCE_INSPECTION_INSTANCE_REPORT_ITEM.self)
      entityDef.add(supertype: eEQUIVALENCE_INSTANCE_REPORT_ITEM_WITH_NOTABLE_INSTANCES.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "MEASURED_VALUE_FOR_INSPECTED_ELEMENT", keyPath: \eEQUIVALENCE_INSTANCE_REPORT_ITEM_WITH_NOTABLE_INSTANCES.MEASURED_VALUE_FOR_INSPECTED_ELEMENT, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "NOTABLE_INSTANCES", keyPath: \eEQUIVALENCE_INSTANCE_REPORT_ITEM_WITH_NOTABLE_INSTANCES.NOTABLE_INSTANCES, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "INSPECTED_ELEMENT", keyPath: \eEQUIVALENCE_INSTANCE_REPORT_ITEM_WITH_NOTABLE_INSTANCES.INSPECTED_ELEMENT, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "NAME", keyPath: \eEQUIVALENCE_INSTANCE_REPORT_ITEM_WITH_NOTABLE_INSTANCES.NAME, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)

      return entityDef
    }

  }
}
