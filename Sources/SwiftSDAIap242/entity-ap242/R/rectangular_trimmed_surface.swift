/* file: rectangular_trimmed_surface.swift 	 generated: Sat Aug 14 13:46:02 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY rectangular_trimmed_surface
    SUBTYPE OF ( bounded_surface );
      basis_surface  : surface;
      u1             : parameter_value;
      u2             : parameter_value;
      v1             : parameter_value;
      v2             : parameter_value;
      usense         : BOOLEAN;
      vsense         : BOOLEAN;
    WHERE
      wr1: ( u1 <> u2 );
      wr2: ( v1 <> v2 );
      wr3: ( ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ELEMENTARY_SURFACE' IN TYPEOF( 
               basis_surface ) ) AND ( NOT ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PLANE' IN 
               TYPEOF( basis_surface ) ) ) ) OR ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
               + 'SURFACE_OF_REVOLUTION'  IN TYPEOF( basis_surface ) ) OR ( usense = ( u2 > u1 ) ) );
      wr4: ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SPHERICAL_SURFACE' IN TYPEOF( basis_surface ) ) 
               OR ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.TOROIDAL_SURFACE' IN TYPEOF( 
               basis_surface ) ) OR ( vsense = ( v2 > v1 ) ) );
  END_ENTITY; -- rectangular_trimmed_surface (line:27236 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	representation_item
    ATTR:  name,	TYPE: label -- EXPLICIT


  SUPER- ENTITY(2)	geometric_representation_item
    ATTR:  dim,	TYPE: dimension_count -- DERIVED
      := dimension_of( SELF )


  SUPER- ENTITY(3)	surface
    (no local attributes)

  SUPER- ENTITY(4)	bounded_surface
    (no local attributes)

  ENTITY(SELF)	rectangular_trimmed_surface
    ATTR:  basis_surface,	TYPE: surface -- EXPLICIT

    ATTR:  u1,	TYPE: parameter_value -- EXPLICIT

    ATTR:  u2,	TYPE: parameter_value -- EXPLICIT

    ATTR:  v1,	TYPE: parameter_value -- EXPLICIT

    ATTR:  v2,	TYPE: parameter_value -- EXPLICIT

    ATTR:  usense,	TYPE: BOOLEAN -- EXPLICIT

    ATTR:  vsense,	TYPE: BOOLEAN -- EXPLICIT


*/


//MARK: - Partial Entity
  public final class _rectangular_trimmed_surface : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eRECTANGULAR_TRIMMED_SURFACE.self
    }

    //ATTRIBUTES
    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _basis_surface: eSURFACE // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _u1: tPARAMETER_VALUE // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _u2: tPARAMETER_VALUE // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _v1: tPARAMETER_VALUE // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _v2: tPARAMETER_VALUE // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _usense: SDAI.BOOLEAN // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _vsense: SDAI.BOOLEAN // PLAIN EXPLICIT ATTRIBUTE

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._basis_surface.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._u1.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._u2.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._v1.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._v2.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._usense.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._vsense.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._basis_surface.value.isValueEqualOptionally(to: rhs._basis_surface.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._u1.value.isValueEqualOptionally(to: rhs._u1.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._u2.value.isValueEqualOptionally(to: rhs._u2.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._v1.value.isValueEqualOptionally(to: rhs._v1.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._v2.value.isValueEqualOptionally(to: rhs._v2.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._usense.value.isValueEqualOptionally(to: rhs._usense.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._vsense.value.isValueEqualOptionally(to: rhs._vsense.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._basis_surface.value.isValueEqualOptionally(to: rhs._basis_surface.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._u1.value.isValueEqualOptionally(to: rhs._u1.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._u2.value.isValueEqualOptionally(to: rhs._u2.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._v1.value.isValueEqualOptionally(to: rhs._v1.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._v2.value.isValueEqualOptionally(to: rhs._v2.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._usense.value.isValueEqualOptionally(to: rhs._usense.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._vsense.value.isValueEqualOptionally(to: rhs._vsense.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: eRECTANGULAR_TRIMMED_SURFACE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.FORCE_OPTIONAL(SELF.U1) .!=. SDAI.FORCE_OPTIONAL(SELF.U2)
      return _TEMP1
    }
    public static func WHERE_wr2(SELF: eRECTANGULAR_TRIMMED_SURFACE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.FORCE_OPTIONAL(SELF.V1) .!=. SDAI.FORCE_OPTIONAL(SELF.V2)
      return _TEMP1
    }
    public static func WHERE_wr3(SELF: eRECTANGULAR_TRIMMED_SURFACE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.TYPEOF(SELF.BASIS_SURFACE, IS: eELEMENTARY_SURFACE.self)
      let _TEMP2 = SDAI.TYPEOF(SELF.BASIS_SURFACE, IS: ePLANE.self)
      let _TEMP3 =  !_TEMP2
      let _TEMP4 = _TEMP1 && _TEMP3
      let _TEMP5 = SDAI.TYPEOF(SELF.BASIS_SURFACE, IS: eSURFACE_OF_REVOLUTION.self)
      let _TEMP6 = _TEMP4 || _TEMP5
      let _TEMP7 = SDAI.FORCE_OPTIONAL(SELF.U2) > SDAI.FORCE_OPTIONAL(SELF.U1)
      let _TEMP8 = SDAI.FORCE_OPTIONAL(SELF.USENSE) .==. SDAI.FORCE_OPTIONAL(_TEMP7)
      let _TEMP9 = _TEMP6 || _TEMP8
      return _TEMP9
    }
    public static func WHERE_wr4(SELF: eRECTANGULAR_TRIMMED_SURFACE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.TYPEOF(SELF.BASIS_SURFACE, IS: eSPHERICAL_SURFACE.self)
      let _TEMP2 = SDAI.TYPEOF(SELF.BASIS_SURFACE, IS: eTOROIDAL_SURFACE.self)
      let _TEMP3 = _TEMP1 || _TEMP2
      let _TEMP4 = SDAI.FORCE_OPTIONAL(SELF.V2) > SDAI.FORCE_OPTIONAL(SELF.V1)
      let _TEMP5 = SDAI.FORCE_OPTIONAL(SELF.VSENSE) .==. SDAI.FORCE_OPTIONAL(_TEMP4)
      let _TEMP6 = _TEMP3 || _TEMP5
      return _TEMP6
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(BASIS_SURFACE: eSURFACE, U1: tPARAMETER_VALUE, U2: tPARAMETER_VALUE, 
                V1: tPARAMETER_VALUE, V2: tPARAMETER_VALUE, USENSE: SDAI.BOOLEAN, 
                VSENSE: SDAI.BOOLEAN) {
      self._basis_surface = BASIS_SURFACE
      self._u1 = U1
      self._u2 = U2
      self._v1 = V1
      self._v2 = V2
      self._usense = USENSE
      self._vsense = VSENSE
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 7
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverRequiredParameter(as: eSURFACE.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p1) = exchangeStructure.recoverRequiredParameter(as: tPARAMETER_VALUE.self, from: parameters[1])
      else { exchangeStructure.add(errorContext: "while recovering parameter #1 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p2) = exchangeStructure.recoverRequiredParameter(as: tPARAMETER_VALUE.self, from: parameters[2])
      else { exchangeStructure.add(errorContext: "while recovering parameter #2 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p3) = exchangeStructure.recoverRequiredParameter(as: tPARAMETER_VALUE.self, from: parameters[3])
      else { exchangeStructure.add(errorContext: "while recovering parameter #3 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p4) = exchangeStructure.recoverRequiredParameter(as: tPARAMETER_VALUE.self, from: parameters[4])
      else { exchangeStructure.add(errorContext: "while recovering parameter #4 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p5) = exchangeStructure.recoverRequiredParameter(as: SDAI.BOOLEAN.self, from: parameters[5])
      else { exchangeStructure.add(errorContext: "while recovering parameter #5 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p6) = exchangeStructure.recoverRequiredParameter(as: SDAI.BOOLEAN.self, from: parameters[6])
      else { exchangeStructure.add(errorContext: "while recovering parameter #6 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( BASIS_SURFACE: p0, U1: p1, U2: p2, V1: p3, V2: p4, USENSE: p5, VSENSE: p6 )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY rectangular_trimmed_surface
    SUBTYPE OF ( bounded_surface );
      basis_surface  : surface;
      u1             : parameter_value;
      u2             : parameter_value;
      v1             : parameter_value;
      v2             : parameter_value;
      usense         : BOOLEAN;
      vsense         : BOOLEAN;
    WHERE
      wr1: ( u1 <> u2 );
      wr2: ( v1 <> v2 );
      wr3: ( ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ELEMENTARY_SURFACE' IN TYPEOF( 
               basis_surface ) ) AND ( NOT ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PLANE' IN 
               TYPEOF( basis_surface ) ) ) ) OR ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
               + 'SURFACE_OF_REVOLUTION'  IN TYPEOF( basis_surface ) ) OR ( usense = ( u2 > u1 ) ) );
      wr4: ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SPHERICAL_SURFACE' IN TYPEOF( basis_surface ) ) 
               OR ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.TOROIDAL_SURFACE' IN TYPEOF( 
               basis_surface ) ) OR ( vsense = ( v2 > v1 ) ) );
  END_ENTITY; -- rectangular_trimmed_surface (line:27236 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eRECTANGULAR_TRIMMED_SURFACE : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _rectangular_trimmed_surface.self
    }
    public let partialEntity: _rectangular_trimmed_surface

    //MARK: SUPERTYPES
    public let super_eREPRESENTATION_ITEM: eREPRESENTATION_ITEM 	// [1]
    public let super_eGEOMETRIC_REPRESENTATION_ITEM: eGEOMETRIC_REPRESENTATION_ITEM 	// [2]
    public let super_eSURFACE: eSURFACE 	// [3]
    public let super_eBOUNDED_SURFACE: eBOUNDED_SURFACE 	// [4]
    public var super_eRECTANGULAR_TRIMMED_SURFACE: eRECTANGULAR_TRIMMED_SURFACE { return self } 	// [5]

    //MARK: SUBTYPES

    //MARK: ATTRIBUTES
    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eRECTANGULAR_TRIMMED_SURFACE`` )
    public var VSENSE: SDAI.BOOLEAN {
      get {
        return SDAI.UNWRAP( self.partialEntity._vsense )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._vsense = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eRECTANGULAR_TRIMMED_SURFACE`` )
    public var U1: tPARAMETER_VALUE {
      get {
        return SDAI.UNWRAP( self.partialEntity._u1 )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._u1 = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eRECTANGULAR_TRIMMED_SURFACE`` )
    public var U2: tPARAMETER_VALUE {
      get {
        return SDAI.UNWRAP( self.partialEntity._u2 )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._u2 = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eRECTANGULAR_TRIMMED_SURFACE`` )
    public var USENSE: SDAI.BOOLEAN {
      get {
        return SDAI.UNWRAP( self.partialEntity._usense )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._usense = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eRECTANGULAR_TRIMMED_SURFACE`` )
    public var V2: tPARAMETER_VALUE {
      get {
        return SDAI.UNWRAP( self.partialEntity._v2 )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._v2 = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eRECTANGULAR_TRIMMED_SURFACE`` )
    public var V1: tPARAMETER_VALUE {
      get {
        return SDAI.UNWRAP( self.partialEntity._v1 )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._v1 = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eRECTANGULAR_TRIMMED_SURFACE`` )
    public var BASIS_SURFACE: eSURFACE {
      get {
        return SDAI.UNWRAP( self.partialEntity._basis_surface )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._basis_surface = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eREPRESENTATION_ITEM`` )
    public var NAME: tLABEL {
      get {
        return SDAI.UNWRAP( super_eREPRESENTATION_ITEM.partialEntity._name )
      }
      set(newValue) {
        let partial = super_eREPRESENTATION_ITEM.partialEntity
        partial._name = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUPER( ``eGEOMETRIC_REPRESENTATION_ITEM`` )
    public var DIM: tDIMENSION_COUNT?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"DIM") {
          return cached.value as! tDIMENSION_COUNT? 
        }
        let origin = super_eGEOMETRIC_REPRESENTATION_ITEM
        let value = tDIMENSION_COUNT(origin.partialEntity._dim__getter(SELF: origin))
        updateCache(derivedAttributeName:"DIM", value:value)
        return value
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_rectangular_trimmed_surface.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eREPRESENTATION_ITEM.self) else { return nil }
      self.super_eREPRESENTATION_ITEM = super1

      guard let super2 = complexEntity?.entityReference(eGEOMETRIC_REPRESENTATION_ITEM.self) else { return nil }
      self.super_eGEOMETRIC_REPRESENTATION_ITEM = super2

      guard let super3 = complexEntity?.entityReference(eSURFACE.self) else { return nil }
      self.super_eSURFACE = super3

      guard let super4 = complexEntity?.entityReference(eBOUNDED_SURFACE.self) else { return nil }
      self.super_eBOUNDED_SURFACE = super4

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _rectangular_trimmed_surface.WHERE_wr1(SELF: instance)
      result[prefix2 + " .WHERE_wr2"] = _rectangular_trimmed_surface.WHERE_wr2(SELF: instance)
      result[prefix2 + " .WHERE_wr3"] = _rectangular_trimmed_surface.WHERE_wr3(SELF: instance)
      result[prefix2 + " .WHERE_wr4"] = _rectangular_trimmed_surface.WHERE_wr4(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "RECTANGULAR_TRIMMED_SURFACE", type: self, explicitAttributeCount: 7)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eREPRESENTATION_ITEM.self)
      entityDef.add(supertype: eGEOMETRIC_REPRESENTATION_ITEM.self)
      entityDef.add(supertype: eSURFACE.self)
      entityDef.add(supertype: eBOUNDED_SURFACE.self)
      entityDef.add(supertype: eRECTANGULAR_TRIMMED_SURFACE.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "VSENSE", keyPath: \eRECTANGULAR_TRIMMED_SURFACE.VSENSE, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "U1", keyPath: \eRECTANGULAR_TRIMMED_SURFACE.U1, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "U2", keyPath: \eRECTANGULAR_TRIMMED_SURFACE.U2, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "USENSE", keyPath: \eRECTANGULAR_TRIMMED_SURFACE.USENSE, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "V2", keyPath: \eRECTANGULAR_TRIMMED_SURFACE.V2, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "V1", keyPath: \eRECTANGULAR_TRIMMED_SURFACE.V1, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "BASIS_SURFACE", keyPath: \eRECTANGULAR_TRIMMED_SURFACE.BASIS_SURFACE, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "NAME", keyPath: \eRECTANGULAR_TRIMMED_SURFACE.NAME, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "DIM", keyPath: \eRECTANGULAR_TRIMMED_SURFACE.DIM, 
        kind: .derived, source: .superEntity, mayYieldEntityReference: false)

      return entityDef
    }

  }
}
