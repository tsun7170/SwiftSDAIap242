/* file: revolved_face_solid_with_trim_conditions.swift 	 generated: Tue Nov 16 05:35:44 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY revolved_face_solid_with_trim_conditions
    SUBTYPE OF ( revolved_face_solid );
      first_trim_condition   : trim_condition_select;
      second_trim_condition  : trim_condition_select;
    WHERE
      wr1: ( NOT ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.LENGTH_MEASURE' IN TYPEOF( 
               first_trim_condition ) ) OR ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.LENGTH_MEASURE' 
               IN TYPEOF( second_trim_condition ) ) ) );
      wr2: ( NOT ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PLANE_ANGLE_MEASURE' IN TYPEOF( 
               first_trim_condition ) ) AND ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
               + 'PLANE_ANGLE_MEASURE'  IN TYPEOF( second_trim_condition ) ) AND ( first_trim_condition = 
               second_trim_condition ) ) );
  END_ENTITY; -- revolved_face_solid_with_trim_conditions (line:27701 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	representation_item
    ATTR:  name,	TYPE: label -- EXPLICIT


  SUPER- ENTITY(2)	geometric_representation_item
    ATTR:  dim,	TYPE: dimension_count -- DERIVED
      := dimension_of( SELF )


  SUPER- ENTITY(3)	solid_model
    (no local attributes)

  SUPER- ENTITY(4)	swept_face_solid
    ATTR:  swept_face,	TYPE: face_surface -- EXPLICIT


  SUPER- ENTITY(5)	revolved_face_solid
    ATTR:  axis,	TYPE: axis1_placement -- EXPLICIT

    ATTR:  angle,	TYPE: plane_angle_measure -- EXPLICIT

    ATTR:  axis_line,	TYPE: line -- DERIVED
      := representation_item( '' ) || geometric_representation_item(  ) || curve(  ) || line( axis.location, 
        representation_item( '' ) || geometric_representation_item(  ) || vector( axis.z, 1 ) )


  ENTITY(SELF)	revolved_face_solid_with_trim_conditions
    ATTR:  first_trim_condition,	TYPE: trim_condition_select -- EXPLICIT

    ATTR:  second_trim_condition,	TYPE: trim_condition_select -- EXPLICIT


*/


//MARK: - Partial Entity
  public final class _revolved_face_solid_with_trim_conditions : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eREVOLVED_FACE_SOLID_WITH_TRIM_CONDITIONS.self
    }

    //ATTRIBUTES
    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _first_trim_condition: sTRIM_CONDITION_SELECT // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _second_trim_condition: sTRIM_CONDITION_SELECT // PLAIN EXPLICIT ATTRIBUTE

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._first_trim_condition.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._second_trim_condition.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._first_trim_condition.value.isValueEqualOptionally(to: rhs._first_trim_condition.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._second_trim_condition.value.isValueEqualOptionally(to: rhs._second_trim_condition.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._first_trim_condition.value.isValueEqualOptionally(to: rhs._first_trim_condition.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._second_trim_condition.value.isValueEqualOptionally(to: rhs._second_trim_condition.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: eREVOLVED_FACE_SOLID_WITH_TRIM_CONDITIONS?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.TYPEOF(SELF.FIRST_TRIM_CONDITION, IS: tLENGTH_MEASURE.self)
      let _TEMP2 = SDAI.TYPEOF(SELF.SECOND_TRIM_CONDITION, IS: tLENGTH_MEASURE.self)
      let _TEMP3 = _TEMP1 || _TEMP2
      let _TEMP4 =  !_TEMP3
      return _TEMP4
    }
    public static func WHERE_wr2(SELF: eREVOLVED_FACE_SOLID_WITH_TRIM_CONDITIONS?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.TYPEOF(SELF.FIRST_TRIM_CONDITION, IS: tPLANE_ANGLE_MEASURE.self)
      let _TEMP2 = SDAI.TYPEOF(SELF.SECOND_TRIM_CONDITION, IS: tPLANE_ANGLE_MEASURE.self)
      let _TEMP3 = _TEMP1 && _TEMP2
      let _TEMP4 = SDAI.FORCE_OPTIONAL(SELF.FIRST_TRIM_CONDITION) .==. SDAI.FORCE_OPTIONAL(SELF.SECOND_TRIM_CONDITION)
      let _TEMP5 = _TEMP3 && _TEMP4
      let _TEMP6 =  !_TEMP5
      return _TEMP6
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(FIRST_TRIM_CONDITION: sTRIM_CONDITION_SELECT, SECOND_TRIM_CONDITION: sTRIM_CONDITION_SELECT) {
      self._first_trim_condition = FIRST_TRIM_CONDITION
      self._second_trim_condition = SECOND_TRIM_CONDITION
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 2
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverRequiredParameter(as: sTRIM_CONDITION_SELECT.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p1) = exchangeStructure.recoverRequiredParameter(as: sTRIM_CONDITION_SELECT.self, from: parameters[1])
      else { exchangeStructure.add(errorContext: "while recovering parameter #1 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( FIRST_TRIM_CONDITION: p0, SECOND_TRIM_CONDITION: p1 )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY revolved_face_solid_with_trim_conditions
    SUBTYPE OF ( revolved_face_solid );
      first_trim_condition   : trim_condition_select;
      second_trim_condition  : trim_condition_select;
    WHERE
      wr1: ( NOT ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.LENGTH_MEASURE' IN TYPEOF( 
               first_trim_condition ) ) OR ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.LENGTH_MEASURE' 
               IN TYPEOF( second_trim_condition ) ) ) );
      wr2: ( NOT ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PLANE_ANGLE_MEASURE' IN TYPEOF( 
               first_trim_condition ) ) AND ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
               + 'PLANE_ANGLE_MEASURE'  IN TYPEOF( second_trim_condition ) ) AND ( first_trim_condition = 
               second_trim_condition ) ) );
  END_ENTITY; -- revolved_face_solid_with_trim_conditions (line:27701 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eREVOLVED_FACE_SOLID_WITH_TRIM_CONDITIONS : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _revolved_face_solid_with_trim_conditions.self
    }
    public let partialEntity: _revolved_face_solid_with_trim_conditions

    //MARK: SUPERTYPES
    public let super_eREPRESENTATION_ITEM: eREPRESENTATION_ITEM 	// [1]
    public let super_eGEOMETRIC_REPRESENTATION_ITEM: eGEOMETRIC_REPRESENTATION_ITEM 	// [2]
    public let super_eSOLID_MODEL: eSOLID_MODEL 	// [3]
    public let super_eSWEPT_FACE_SOLID: eSWEPT_FACE_SOLID 	// [4]
    public let super_eREVOLVED_FACE_SOLID: eREVOLVED_FACE_SOLID 	// [5]
    public var super_eREVOLVED_FACE_SOLID_WITH_TRIM_CONDITIONS: eREVOLVED_FACE_SOLID_WITH_TRIM_CONDITIONS { return self } 	// [6]

    //MARK: SUBTYPES

    //MARK: ATTRIBUTES
    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eREVOLVED_FACE_SOLID_WITH_TRIM_CONDITIONS`` )
    public var SECOND_TRIM_CONDITION: sTRIM_CONDITION_SELECT {
      get {
        return SDAI.UNWRAP( self.partialEntity._second_trim_condition )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._second_trim_condition = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eSWEPT_FACE_SOLID`` )
    public var SWEPT_FACE: eFACE_SURFACE {
      get {
        return SDAI.UNWRAP( super_eSWEPT_FACE_SOLID.partialEntity._swept_face )
      }
      set(newValue) {
        let partial = super_eSWEPT_FACE_SOLID.partialEntity
        partial._swept_face = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eREVOLVED_FACE_SOLID_WITH_TRIM_CONDITIONS`` )
    public var FIRST_TRIM_CONDITION: sTRIM_CONDITION_SELECT {
      get {
        return SDAI.UNWRAP( self.partialEntity._first_trim_condition )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._first_trim_condition = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUPER( ``eREVOLVED_FACE_SOLID`` )
    public var AXIS_LINE: eLINE?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"AXIS_LINE") {
          return cached.value as! eLINE? 
        }
        let origin = super_eREVOLVED_FACE_SOLID
        let value = eLINE(origin.partialEntity._axis_line__getter(SELF: origin))
        updateCache(derivedAttributeName:"AXIS_LINE", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eREVOLVED_FACE_SOLID`` )
    public var ANGLE: tPLANE_ANGLE_MEASURE {
      get {
        return SDAI.UNWRAP( super_eREVOLVED_FACE_SOLID.partialEntity._angle )
      }
      set(newValue) {
        let partial = super_eREVOLVED_FACE_SOLID.partialEntity
        partial._angle = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eREVOLVED_FACE_SOLID`` )
    public var AXIS: eAXIS1_PLACEMENT {
      get {
        return SDAI.UNWRAP( super_eREVOLVED_FACE_SOLID.partialEntity._axis )
      }
      set(newValue) {
        let partial = super_eREVOLVED_FACE_SOLID.partialEntity
        partial._axis = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eREPRESENTATION_ITEM`` )
    public var NAME: tLABEL {
      get {
        return SDAI.UNWRAP( super_eREPRESENTATION_ITEM.partialEntity._name )
      }
      set(newValue) {
        let partial = super_eREPRESENTATION_ITEM.partialEntity
        partial._name = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUPER( ``eGEOMETRIC_REPRESENTATION_ITEM`` )
    public var DIM: tDIMENSION_COUNT?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"DIM") {
          return cached.value as! tDIMENSION_COUNT? 
        }
        let origin = super_eGEOMETRIC_REPRESENTATION_ITEM
        let value = tDIMENSION_COUNT(origin.partialEntity._dim__getter(SELF: origin))
        updateCache(derivedAttributeName:"DIM", value:value)
        return value
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_revolved_face_solid_with_trim_conditions.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eREPRESENTATION_ITEM.self) else { return nil }
      self.super_eREPRESENTATION_ITEM = super1

      guard let super2 = complexEntity?.entityReference(eGEOMETRIC_REPRESENTATION_ITEM.self) else { return nil }
      self.super_eGEOMETRIC_REPRESENTATION_ITEM = super2

      guard let super3 = complexEntity?.entityReference(eSOLID_MODEL.self) else { return nil }
      self.super_eSOLID_MODEL = super3

      guard let super4 = complexEntity?.entityReference(eSWEPT_FACE_SOLID.self) else { return nil }
      self.super_eSWEPT_FACE_SOLID = super4

      guard let super5 = complexEntity?.entityReference(eREVOLVED_FACE_SOLID.self) else { return nil }
      self.super_eREVOLVED_FACE_SOLID = super5

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _revolved_face_solid_with_trim_conditions.WHERE_wr1(SELF: instance)
      result[prefix2 + " .WHERE_wr2"] = _revolved_face_solid_with_trim_conditions.WHERE_wr2(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "REVOLVED_FACE_SOLID_WITH_TRIM_CONDITIONS", type: self, explicitAttributeCount: 2)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eREPRESENTATION_ITEM.self)
      entityDef.add(supertype: eGEOMETRIC_REPRESENTATION_ITEM.self)
      entityDef.add(supertype: eSOLID_MODEL.self)
      entityDef.add(supertype: eSWEPT_FACE_SOLID.self)
      entityDef.add(supertype: eREVOLVED_FACE_SOLID.self)
      entityDef.add(supertype: eREVOLVED_FACE_SOLID_WITH_TRIM_CONDITIONS.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "SECOND_TRIM_CONDITION", keyPath: \eREVOLVED_FACE_SOLID_WITH_TRIM_CONDITIONS.SECOND_TRIM_CONDITION, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "SWEPT_FACE", keyPath: \eREVOLVED_FACE_SOLID_WITH_TRIM_CONDITIONS.SWEPT_FACE, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "FIRST_TRIM_CONDITION", keyPath: \eREVOLVED_FACE_SOLID_WITH_TRIM_CONDITIONS.FIRST_TRIM_CONDITION, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "AXIS_LINE", keyPath: \eREVOLVED_FACE_SOLID_WITH_TRIM_CONDITIONS.AXIS_LINE, 
        kind: .derived, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "ANGLE", keyPath: \eREVOLVED_FACE_SOLID_WITH_TRIM_CONDITIONS.ANGLE, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "AXIS", keyPath: \eREVOLVED_FACE_SOLID_WITH_TRIM_CONDITIONS.AXIS, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "NAME", keyPath: \eREVOLVED_FACE_SOLID_WITH_TRIM_CONDITIONS.NAME, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "DIM", keyPath: \eREVOLVED_FACE_SOLID_WITH_TRIM_CONDITIONS.DIM, 
        kind: .derived, source: .superEntity, mayYieldEntityReference: false)

      return entityDef
    }

  }
}
