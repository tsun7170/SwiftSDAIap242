/* file: representation_map.swift 	 generated: Sat Aug 14 13:46:02 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY representation_map;
      mapping_origin         : representation_item;
      mapped_representation  : representation;
    INVERSE
      map_usage : SET [1 : ?] OF mapped_item FOR mapping_source -- defined in ENTITY: mapped_item;
    WHERE
      wr1: item_in_context( mapping_origin, mapped_representation\representation.context_of_items );
  END_ENTITY; -- representation_map (line:27487 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  ENTITY(SELF)	representation_map
    ATTR:  mapping_origin,	TYPE: representation_item -- EXPLICIT
      -- possibly overriden by
          ENTITY: symbol_representation_map,	TYPE: axis2_placement
          ENTITY: camera_usage,	TYPE: camera_model

    ATTR:  mapped_representation,	TYPE: representation -- EXPLICIT
      -- possibly overriden by
          ENTITY: symbol_representation_map,	TYPE: symbol_representation

    ATTR:  map_usage,	TYPE: SET [1 : ?] OF mapped_item -- INVERSE
      FOR mapping_source;


  SUB- ENTITY(2)	symbol_representation_map
    REDCR: mapped_representation,	TYPE: symbol_representation -- EXPLICIT
      -- OVERRIDING ENTITY: representation_map

    REDCR: mapping_origin,	TYPE: axis2_placement -- EXPLICIT
      -- OVERRIDING ENTITY: representation_map


  SUB- ENTITY(3)	camera_usage
    REDCR: mapping_origin,	TYPE: camera_model -- EXPLICIT
      -- OVERRIDING ENTITY: representation_map


*/


//MARK: - Partial Entity
  public final class _representation_map : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eREPRESENTATION_MAP.self
    }

    //ATTRIBUTES
    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _mapping_origin: eREPRESENTATION_ITEM // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _mapped_representation: eREPRESENTATION // PLAIN EXPLICIT ATTRIBUTE

    /// INVERSE AGGREGATE ATTRIBUTE
    /// observing _mapped_item ._mapping_source
    internal var _map_usage: SDAI.SET<eMAPPED_ITEM> {
      return __map_usage.map{ $0.reference }
    }
    private var __map_usage = SDAI.SET<SDAI.UnownedWrap<eMAPPED_ITEM>>(bound1: SDAI.UNWRAP(SDAI.INTEGER(1)), 
      bound2: (nil as SDAI.INTEGER?), 
      SDAI.EMPLY_AGGREGATE) // unowned backing store
    /// INVERSE AGGREGATE ATTR SUPPORT(ADDER)
    internal func _map_usage__observeAddedReference(in complex: SDAI.ComplexEntity) {
      guard let newSource = complex.entityReference(eMAPPED_ITEM.self) else { return }
      self.__map_usage.add(member: SDAI.UnownedWrap(newSource) )
    }
    /// INVERSE AGGREGATE ATTR SUPPORT(REMOVER)
    internal func _map_usage__observeRemovedReference(in complex: SDAI.ComplexEntity) {
      guard let oldSource = complex.entityReference(eMAPPED_ITEM.self) else { return }
      let success = self.__map_usage.remove(member: SDAI.UnownedWrap(oldSource) )
      assert(success, "failed to remove inverse attribute element")
    }
    /// INVERSE AGGREGATE ATTR SUPPORT(LEAVING REFERENCE OWNER)
    internal func _map_usage__observe(leavingReferencerOwner complex: SDAI.ComplexEntity) {
      guard let oldSource = complex.entityReference(eMAPPED_ITEM.self) else { return }
      let success = self.__map_usage.removeAll(member: SDAI.UnownedWrap(oldSource) )
      assert(success, "failed to remove inverse attribute elements")
    }

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._mapping_origin.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._mapped_representation.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._mapping_origin.value.isValueEqualOptionally(to: rhs._mapping_origin.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._mapped_representation.value.isValueEqualOptionally(to: rhs._mapped_representation.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._mapping_origin.value.isValueEqualOptionally(to: rhs._mapping_origin.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._mapped_representation.value.isValueEqualOptionally(to: rhs._mapped_representation.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: eREPRESENTATION_MAP?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.MAPPED_REPRESENTATION.GROUP_REF(eREPRESENTATION.self)
      let _TEMP2 = _TEMP1?.CONTEXT_OF_ITEMS
      let _TEMP3 = ITEM_IN_CONTEXT(ITEM: SELF.MAPPING_ORIGIN, 
                                   CNTXT: _TEMP2)
      return SDAI.LOGICAL(/*SDAI.BOOLEAN*/_TEMP3)
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(MAPPING_ORIGIN: eREPRESENTATION_ITEM, MAPPED_REPRESENTATION: eREPRESENTATION) {
      self._mapping_origin = MAPPING_ORIGIN
      self._mapped_representation = MAPPED_REPRESENTATION
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 2
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverRequiredParameter(as: eREPRESENTATION_ITEM.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p1) = exchangeStructure.recoverRequiredParameter(as: eREPRESENTATION.self, from: parameters[1])
      else { exchangeStructure.add(errorContext: "while recovering parameter #1 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( MAPPING_ORIGIN: p0, MAPPED_REPRESENTATION: p1 )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY representation_map;
      mapping_origin         : representation_item;
      mapped_representation  : representation;
    INVERSE
      map_usage : SET [1 : ?] OF mapped_item FOR mapping_source -- defined in ENTITY: mapped_item;
    WHERE
      wr1: item_in_context( mapping_origin, mapped_representation\representation.context_of_items );
  END_ENTITY; -- representation_map (line:27487 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eREPRESENTATION_MAP : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _representation_map.self
    }
    public let partialEntity: _representation_map

    //MARK: SUPERTYPES
    public var super_eREPRESENTATION_MAP: eREPRESENTATION_MAP { return self } 	// [1]

    //MARK: SUBTYPES
    public var sub_eSYMBOL_REPRESENTATION_MAP: eSYMBOL_REPRESENTATION_MAP? {	// [2]
      return self.complexEntity.entityReference(eSYMBOL_REPRESENTATION_MAP.self)
    }

    public var sub_eCAMERA_USAGE: eCAMERA_USAGE? {	// [3]
      return self.complexEntity.entityReference(eCAMERA_USAGE.self)
    }


    //MARK: ATTRIBUTES
    /// __INVERSE__ attribute
    /// observing eMAPPED_ITEM .MAPPING_SOURCE
    /// - origin: SELF( ``eREPRESENTATION_MAP`` )
    public var MAP_USAGE: SDAI.SET<eMAPPED_ITEM>/*[1:nil]*/  {
      get {
        return SDAI.UNWRAP( self.partialEntity._map_usage )
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eREPRESENTATION_MAP`` )
    public var MAPPED_REPRESENTATION: eREPRESENTATION {
      get {
        return SDAI.UNWRAP( self.partialEntity._mapped_representation )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._mapped_representation = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eREPRESENTATION_MAP`` )
    public var MAPPING_ORIGIN: eREPRESENTATION_ITEM {
      get {
        return SDAI.UNWRAP( self.partialEntity._mapping_origin )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._mapping_origin = SDAI.UNWRAP(newValue)
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_representation_map.self) else { return nil }
      self.partialEntity = partial

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }

    //SIMPLE ENTITY REFERENCE
    public convenience init?(_ partial:_representation_map) {
      let complex = SDAI.ComplexEntity(entities:[partial])
      self.init(complex: complex)
    }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _representation_map.WHERE_wr1(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "REPRESENTATION_MAP", type: self, explicitAttributeCount: 2)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eREPRESENTATION_MAP.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "MAP_USAGE", keyPath: \eREPRESENTATION_MAP.MAP_USAGE, 
        kind: .inverse, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "MAPPED_REPRESENTATION", keyPath: \eREPRESENTATION_MAP.MAPPED_REPRESENTATION, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "MAPPING_ORIGIN", keyPath: \eREPRESENTATION_MAP.MAPPING_ORIGIN, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)

      return entityDef
    }

  }
}
