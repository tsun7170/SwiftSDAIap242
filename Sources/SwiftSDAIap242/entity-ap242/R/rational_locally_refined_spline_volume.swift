/* file: rational_locally_refined_spline_volume.swift 	 generated: Sun Oct 31 15:32:10 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY rational_locally_refined_spline_volume
    SUBTYPE OF ( locally_refined_spline_volume );
      weights_data  : LIST [8 : ?] OF REAL;
    WHERE
      wr1: ( SIZEOF( weights_data ) = SIZEOF( SELF\locally_refined_spline_volume.control_points_list ) );
      wr2: weights_positive( SELF.weights_data );
  END_ENTITY; -- rational_locally_refined_spline_volume (line:26868 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	representation_item
    ATTR:  name,	TYPE: label -- EXPLICIT


  SUPER- ENTITY(2)	geometric_representation_item
    ATTR:  dim,	TYPE: dimension_count -- DERIVED
      := dimension_of( SELF )


  SUPER- ENTITY(3)	volume
    (no local attributes)

  SUPER- ENTITY(4)	locally_refined_spline_volume
    ATTR:  u_b_splines,	TYPE: LIST [8 : ?] OF local_b_spline -- EXPLICIT

    ATTR:  v_b_splines,	TYPE: LIST [8 : ?] OF local_b_spline -- EXPLICIT

    ATTR:  w_b_splines,	TYPE: LIST [8 : ?] OF local_b_spline -- EXPLICIT

    ATTR:  u_knots,	TYPE: spline_knot_values -- EXPLICIT

    ATTR:  v_knots,	TYPE: spline_knot_values -- EXPLICIT

    ATTR:  w_knots,	TYPE: spline_knot_values -- EXPLICIT

    ATTR:  control_points_list,	TYPE: LIST [8 : ?] OF cartesian_point -- EXPLICIT

    ATTR:  scaling_factors,	TYPE: LIST [8 : ?] OF REAL -- EXPLICIT

    ATTR:  linearly_independent,	TYPE: linearly_independent_enum -- EXPLICIT

    ATTR:  locally_refined_spline_type,	TYPE: locally_refined_spline_type_enum -- EXPLICIT

    ATTR:  domain,	TYPE: LIST [3 : 3] OF LIST [2 : 2] OF REAL -- EXPLICIT


  ENTITY(SELF)	rational_locally_refined_spline_volume
    ATTR:  weights_data,	TYPE: LIST [8 : ?] OF REAL -- EXPLICIT


*/


//MARK: - Partial Entity
  public final class _rational_locally_refined_spline_volume : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eRATIONAL_LOCALLY_REFINED_SPLINE_VOLUME.self
    }

    //ATTRIBUTES
    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _weights_data: SDAI.LIST<SDAI.REAL>/*[8:nil]*/  // PLAIN EXPLICIT ATTRIBUTE

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._weights_data.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._weights_data.value.isValueEqualOptionally(to: rhs._weights_data.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._weights_data.value.isValueEqualOptionally(to: rhs._weights_data.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: eRATIONAL_LOCALLY_REFINED_SPLINE_VOLUME?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.SIZEOF(SELF.WEIGHTS_DATA)
      let _TEMP2 = SELF.GROUP_REF(eLOCALLY_REFINED_SPLINE_VOLUME.self)
      let _TEMP3 = _TEMP2?.CONTROL_POINTS_LIST
      let _TEMP4 = SDAI.SIZEOF(_TEMP3)
      let _TEMP5 = _TEMP1 .==. _TEMP4
      return _TEMP5
    }
    public static func WHERE_wr2(SELF: eRATIONAL_LOCALLY_REFINED_SPLINE_VOLUME?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.WEIGHTS_DATA
      let _TEMP2 = WEIGHTS_POSITIVE(SDAI.LIST<SDAI.REAL>(/*SDAI.LIST<SDAI.REAL>[8:nil] */_TEMP1))
      return SDAI.LOGICAL(_TEMP2)
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(WEIGHTS_DATA: SDAI.LIST<SDAI.REAL>/*[8:nil]*/ ) {
      self._weights_data = WEIGHTS_DATA
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 1
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverRequiredParameter(as: SDAI.LIST<SDAI.REAL>.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( WEIGHTS_DATA: p0 )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY rational_locally_refined_spline_volume
    SUBTYPE OF ( locally_refined_spline_volume );
      weights_data  : LIST [8 : ?] OF REAL;
    WHERE
      wr1: ( SIZEOF( weights_data ) = SIZEOF( SELF\locally_refined_spline_volume.control_points_list ) );
      wr2: weights_positive( SELF.weights_data );
  END_ENTITY; -- rational_locally_refined_spline_volume (line:26868 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eRATIONAL_LOCALLY_REFINED_SPLINE_VOLUME : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _rational_locally_refined_spline_volume.self
    }
    public let partialEntity: _rational_locally_refined_spline_volume

    //MARK: SUPERTYPES
    public let super_eREPRESENTATION_ITEM: eREPRESENTATION_ITEM 	// [1]
    public let super_eGEOMETRIC_REPRESENTATION_ITEM: eGEOMETRIC_REPRESENTATION_ITEM 	// [2]
    public let super_eVOLUME: eVOLUME 	// [3]
    public let super_eLOCALLY_REFINED_SPLINE_VOLUME: eLOCALLY_REFINED_SPLINE_VOLUME 	// [4]
    public var super_eRATIONAL_LOCALLY_REFINED_SPLINE_VOLUME: eRATIONAL_LOCALLY_REFINED_SPLINE_VOLUME { return self } 	// [5]

    //MARK: SUBTYPES

    //MARK: ATTRIBUTES
    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eLOCALLY_REFINED_SPLINE_VOLUME`` )
    public var U_B_SPLINES: SDAI.LIST<eLOCAL_B_SPLINE>/*[8:nil]*/  {
      get {
        return SDAI.UNWRAP( super_eLOCALLY_REFINED_SPLINE_VOLUME.partialEntity._u_b_splines )
      }
      set(newValue) {
        let partial = super_eLOCALLY_REFINED_SPLINE_VOLUME.partialEntity
        partial._u_b_splines = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eRATIONAL_LOCALLY_REFINED_SPLINE_VOLUME`` )
    public var WEIGHTS_DATA: SDAI.LIST<SDAI.REAL>/*[8:nil]*/  {
      get {
        return SDAI.UNWRAP( self.partialEntity._weights_data )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._weights_data = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eLOCALLY_REFINED_SPLINE_VOLUME`` )
    public var CONTROL_POINTS_LIST: SDAI.LIST<eCARTESIAN_POINT>/*[8:nil]*/  {
      get {
        return SDAI.UNWRAP( super_eLOCALLY_REFINED_SPLINE_VOLUME.partialEntity._control_points_list )
      }
      set(newValue) {
        let partial = super_eLOCALLY_REFINED_SPLINE_VOLUME.partialEntity
        partial._control_points_list = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eLOCALLY_REFINED_SPLINE_VOLUME`` )
    public var LINEARLY_INDEPENDENT: nLINEARLY_INDEPENDENT_ENUM {
      get {
        return SDAI.UNWRAP( super_eLOCALLY_REFINED_SPLINE_VOLUME.partialEntity._linearly_independent )
      }
      set(newValue) {
        let partial = super_eLOCALLY_REFINED_SPLINE_VOLUME.partialEntity
        partial._linearly_independent = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eLOCALLY_REFINED_SPLINE_VOLUME`` )
    public var LOCALLY_REFINED_SPLINE_TYPE: nLOCALLY_REFINED_SPLINE_TYPE_ENUM {
      get {
        return SDAI.UNWRAP( super_eLOCALLY_REFINED_SPLINE_VOLUME.partialEntity._locally_refined_spline_type )
      }
      set(newValue) {
        let partial = super_eLOCALLY_REFINED_SPLINE_VOLUME.partialEntity
        partial._locally_refined_spline_type = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eLOCALLY_REFINED_SPLINE_VOLUME`` )
    public var W_KNOTS: tSPLINE_KNOT_VALUES {
      get {
        return SDAI.UNWRAP( super_eLOCALLY_REFINED_SPLINE_VOLUME.partialEntity._w_knots )
      }
      set(newValue) {
        let partial = super_eLOCALLY_REFINED_SPLINE_VOLUME.partialEntity
        partial._w_knots = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eLOCALLY_REFINED_SPLINE_VOLUME`` )
    public var SCALING_FACTORS: SDAI.LIST<SDAI.REAL>/*[8:nil]*/  {
      get {
        return SDAI.UNWRAP( super_eLOCALLY_REFINED_SPLINE_VOLUME.partialEntity._scaling_factors )
      }
      set(newValue) {
        let partial = super_eLOCALLY_REFINED_SPLINE_VOLUME.partialEntity
        partial._scaling_factors = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eLOCALLY_REFINED_SPLINE_VOLUME`` )
    public var U_KNOTS: tSPLINE_KNOT_VALUES {
      get {
        return SDAI.UNWRAP( super_eLOCALLY_REFINED_SPLINE_VOLUME.partialEntity._u_knots )
      }
      set(newValue) {
        let partial = super_eLOCALLY_REFINED_SPLINE_VOLUME.partialEntity
        partial._u_knots = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eLOCALLY_REFINED_SPLINE_VOLUME`` )
    public var V_KNOTS: tSPLINE_KNOT_VALUES {
      get {
        return SDAI.UNWRAP( super_eLOCALLY_REFINED_SPLINE_VOLUME.partialEntity._v_knots )
      }
      set(newValue) {
        let partial = super_eLOCALLY_REFINED_SPLINE_VOLUME.partialEntity
        partial._v_knots = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eLOCALLY_REFINED_SPLINE_VOLUME`` )
    public var W_B_SPLINES: SDAI.LIST<eLOCAL_B_SPLINE>/*[8:nil]*/  {
      get {
        return SDAI.UNWRAP( super_eLOCALLY_REFINED_SPLINE_VOLUME.partialEntity._w_b_splines )
      }
      set(newValue) {
        let partial = super_eLOCALLY_REFINED_SPLINE_VOLUME.partialEntity
        partial._w_b_splines = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eLOCALLY_REFINED_SPLINE_VOLUME`` )
    public var V_B_SPLINES: SDAI.LIST<eLOCAL_B_SPLINE>/*[8:nil]*/  {
      get {
        return SDAI.UNWRAP( super_eLOCALLY_REFINED_SPLINE_VOLUME.partialEntity._v_b_splines )
      }
      set(newValue) {
        let partial = super_eLOCALLY_REFINED_SPLINE_VOLUME.partialEntity
        partial._v_b_splines = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eLOCALLY_REFINED_SPLINE_VOLUME`` )
    public var DOMAIN: SDAI.LIST<SDAI.LIST<SDAI.REAL>/*[2:2]*/ >/*[3:3]*/  {
      get {
        return SDAI.UNWRAP( super_eLOCALLY_REFINED_SPLINE_VOLUME.partialEntity._domain )
      }
      set(newValue) {
        let partial = super_eLOCALLY_REFINED_SPLINE_VOLUME.partialEntity
        partial._domain = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eREPRESENTATION_ITEM`` )
    public var NAME: tLABEL {
      get {
        return SDAI.UNWRAP( super_eREPRESENTATION_ITEM.partialEntity._name )
      }
      set(newValue) {
        let partial = super_eREPRESENTATION_ITEM.partialEntity
        partial._name = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUPER( ``eGEOMETRIC_REPRESENTATION_ITEM`` )
    public var DIM: tDIMENSION_COUNT?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"DIM") {
          return cached.value as! tDIMENSION_COUNT? 
        }
        let origin = super_eGEOMETRIC_REPRESENTATION_ITEM
        let value = tDIMENSION_COUNT(origin.partialEntity._dim__getter(SELF: origin))
        updateCache(derivedAttributeName:"DIM", value:value)
        return value
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_rational_locally_refined_spline_volume.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eREPRESENTATION_ITEM.self) else { return nil }
      self.super_eREPRESENTATION_ITEM = super1

      guard let super2 = complexEntity?.entityReference(eGEOMETRIC_REPRESENTATION_ITEM.self) else { return nil }
      self.super_eGEOMETRIC_REPRESENTATION_ITEM = super2

      guard let super3 = complexEntity?.entityReference(eVOLUME.self) else { return nil }
      self.super_eVOLUME = super3

      guard let super4 = complexEntity?.entityReference(eLOCALLY_REFINED_SPLINE_VOLUME.self) else { return nil }
      self.super_eLOCALLY_REFINED_SPLINE_VOLUME = super4

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _rational_locally_refined_spline_volume.WHERE_wr1(SELF: instance)
      result[prefix2 + " .WHERE_wr2"] = _rational_locally_refined_spline_volume.WHERE_wr2(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "RATIONAL_LOCALLY_REFINED_SPLINE_VOLUME", type: self, explicitAttributeCount: 1)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eREPRESENTATION_ITEM.self)
      entityDef.add(supertype: eGEOMETRIC_REPRESENTATION_ITEM.self)
      entityDef.add(supertype: eVOLUME.self)
      entityDef.add(supertype: eLOCALLY_REFINED_SPLINE_VOLUME.self)
      entityDef.add(supertype: eRATIONAL_LOCALLY_REFINED_SPLINE_VOLUME.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "U_B_SPLINES", keyPath: \eRATIONAL_LOCALLY_REFINED_SPLINE_VOLUME.U_B_SPLINES, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "WEIGHTS_DATA", keyPath: \eRATIONAL_LOCALLY_REFINED_SPLINE_VOLUME.WEIGHTS_DATA, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "CONTROL_POINTS_LIST", keyPath: \eRATIONAL_LOCALLY_REFINED_SPLINE_VOLUME.CONTROL_POINTS_LIST, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "LINEARLY_INDEPENDENT", keyPath: \eRATIONAL_LOCALLY_REFINED_SPLINE_VOLUME.LINEARLY_INDEPENDENT, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "LOCALLY_REFINED_SPLINE_TYPE", keyPath: \eRATIONAL_LOCALLY_REFINED_SPLINE_VOLUME.LOCALLY_REFINED_SPLINE_TYPE, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "W_KNOTS", keyPath: \eRATIONAL_LOCALLY_REFINED_SPLINE_VOLUME.W_KNOTS, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "SCALING_FACTORS", keyPath: \eRATIONAL_LOCALLY_REFINED_SPLINE_VOLUME.SCALING_FACTORS, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "U_KNOTS", keyPath: \eRATIONAL_LOCALLY_REFINED_SPLINE_VOLUME.U_KNOTS, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "V_KNOTS", keyPath: \eRATIONAL_LOCALLY_REFINED_SPLINE_VOLUME.V_KNOTS, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "W_B_SPLINES", keyPath: \eRATIONAL_LOCALLY_REFINED_SPLINE_VOLUME.W_B_SPLINES, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "V_B_SPLINES", keyPath: \eRATIONAL_LOCALLY_REFINED_SPLINE_VOLUME.V_B_SPLINES, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "DOMAIN", keyPath: \eRATIONAL_LOCALLY_REFINED_SPLINE_VOLUME.DOMAIN, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "NAME", keyPath: \eRATIONAL_LOCALLY_REFINED_SPLINE_VOLUME.NAME, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "DIM", keyPath: \eRATIONAL_LOCALLY_REFINED_SPLINE_VOLUME.DIM, 
        kind: .derived, source: .superEntity, mayYieldEntityReference: false)

      return entityDef
    }

  }
}
