/* file: retention.swift 	 generated: Tue Nov 16 05:35:44 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY retention
    SUBTYPE OF ( action );
    WHERE
      wr1: ( SIZEOF( QUERY ( aa <* USEDIN( SELF, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
               + 'ACTION_ASSIGNMENT.ASSIGNED_ACTION'  ) | ( ( 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.APPLIED_ACTION_ASSIGNMENT'  IN TYPEOF( aa ) ) 
               AND ( aa.role.name = 'retention' ) ) ) ) >= 1 );
      wr2: ( ( SIZEOF( QUERY ( atia <* USEDIN( SELF, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
               + 'APPLIED_TIME_INTERVAL_ASSIGNMENT.ITEMS'  ) | ( atia.role.name = 'minimum retention period' ) ) ) 
               = 1 ) AND ( SIZEOF( QUERY ( atia <* USEDIN( SELF, 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.APPLIED_TIME_INTERVAL_ASSIGNMENT.ITEMS'  ) | 
               ( atia.role.name = 'maximum retention period' ) ) ) = 1 ) AND ( SIZEOF( QUERY ( atia1 <* 
               USEDIN( SELF, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
               + 'APPLIED_TIME_INTERVAL_ASSIGNMENT.ITEMS'  ) | ( ( atia1.role.name = 'minimum retention period'  ) 
               AND ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.TIME_INTERVAL_WITH_BOUNDS' IN TYPEOF( 
               atia1.assigned_time_interval ) ) AND ( EXISTS( atia1.assigned_time_interval\
               time_interval_with_bounds.secondary_bound ) OR EXISTS( atia1.assigned_time_interval\
               time_interval_with_bounds.duration ) ) AND ( SIZEOF( QUERY ( atia2 <* USEDIN( SELF, 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.APPLIED_TIME_INTERVAL_ASSIGNMENT.ITEMS'  ) | 
               ( ( atia2.role.name = 'maximum retention period' ) AND ( 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.TIME_INTERVAL_WITH_BOUNDS'  IN TYPEOF( atia2.
               assigned_time_interval ) ) AND ( EXISTS( atia2.assigned_time_interval\
               time_interval_with_bounds.secondary_bound ) OR EXISTS( atia2.assigned_time_interval\
               time_interval_with_bounds.duration ) ) AND ( atia1.assigned_time_interval\
               time_interval_with_bounds.primary_bound :=: atia2.assigned_time_interval\
               time_interval_with_bounds.primary_bound ) ) ) ) = 1 ) ) ) ) = 1 ) );
      wr3: ( ( SIZEOF( USEDIN( SELF, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ACTION_RELATIONSHIP.'
               + 'RELATING_ACTION'  ) ) + SIZEOF( USEDIN( SELF, 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ACTION_RELATIONSHIP.RELATED_ACTION'  ) ) ) = 
               0 );
  END_ENTITY; -- retention (line:27611 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	action
    ATTR:  name,	TYPE: label -- EXPLICIT

    ATTR:  description,	TYPE: OPTIONAL text -- EXPLICIT

    ATTR:  chosen_method,	TYPE: action_method -- EXPLICIT

    ATTR:  id,	TYPE: identifier -- DERIVED
      := get_id_value( SELF )


  ENTITY(SELF)	retention
    (no local attributes)

*/


//MARK: - Partial Entity
  public final class _retention : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eRETENTION.self
    }

    //ATTRIBUTES
    // (no local attributes)

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      //SELECT data types (indirectly) referencing the current type as a member of the select list
      members.insert(SDAI.STRING(sCLASSIFICATION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sACTION_ITEMS.typeName)) // -> sCLASSIFICATION_ITEM
      members.insert(SDAI.STRING(sCHANGE_MANAGEMENT_OBJECT.typeName)) // -> sACTION_ITEMS
      members.insert(SDAI.STRING(sIR_USAGE_ITEM.typeName)) // -> sCLASSIFICATION_ITEM
      members.insert(SDAI.STRING(sMULTI_LANGUAGE_ATTRIBUTE_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sIDENTIFICATION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sDESCRIPTION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sDOCUMENT_REFERENCE_ITEM.typeName)) // -> Self
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: eRETENTION?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.USEDIN(T: SELF, ROLE: \AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF
        .eACTION_ASSIGNMENT.ASSIGNED_ACTION)
      let _TEMP2 = _TEMP1.QUERY{ AA in 

          let _TEMP1 = SDAI.TYPEOF(AA, IS: eAPPLIED_ACTION_ASSIGNMENT.self)
          let _TEMP2 = /*runtime*/AA.ROLE
          let _TEMP3 = /*runtime*/SDAI.FORCE_OPTIONAL(_TEMP2)?.NAME
          let _TEMP4 = SDAI.FORCE_OPTIONAL(/*runtime*/_TEMP3) .==. SDAI.FORCE_OPTIONAL(SDAI.STRING("retention"))
          let _TEMP5 = _TEMP1 && _TEMP4
          return _TEMP5 }
      let _TEMP3 = SDAI.SIZEOF(_TEMP2)
      let _TEMP4 = _TEMP3 >= SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
      return _TEMP4
    }
    public static func WHERE_wr2(SELF: eRETENTION?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.USEDIN(T: SELF, ROLE: \AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF
        .eAPPLIED_TIME_INTERVAL_ASSIGNMENT.ITEMS)
      let _TEMP2 = _TEMP1.QUERY{ ATIA in 

          let _TEMP1 = /*runtime*/ATIA.ROLE
          let _TEMP2 = /*runtime*/SDAI.FORCE_OPTIONAL(_TEMP1)?.NAME
          let _TEMP3 = SDAI.FORCE_OPTIONAL(/*runtime*/_TEMP2) .==. SDAI.FORCE_OPTIONAL(SDAI.STRING(
            "minimum retention period"))
          return _TEMP3 }
      let _TEMP3 = SDAI.SIZEOF(_TEMP2)
      let _TEMP4 = _TEMP3 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
      let _TEMP5 = SDAI.USEDIN(T: SELF, ROLE: \AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF
        .eAPPLIED_TIME_INTERVAL_ASSIGNMENT.ITEMS)
      let _TEMP6 = _TEMP5.QUERY{ ATIA in 

          let _TEMP1 = /*runtime*/ATIA.ROLE
          let _TEMP2 = /*runtime*/SDAI.FORCE_OPTIONAL(_TEMP1)?.NAME
          let _TEMP3 = SDAI.FORCE_OPTIONAL(/*runtime*/_TEMP2) .==. SDAI.FORCE_OPTIONAL(SDAI.STRING(
            "maximum retention period"))
          return _TEMP3 }
      let _TEMP7 = SDAI.SIZEOF(_TEMP6)
      let _TEMP8 = _TEMP7 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
      let _TEMP9 = _TEMP4 && _TEMP8
      let _TEMP10 = SDAI.USEDIN(T: SELF, ROLE: \AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF
        .eAPPLIED_TIME_INTERVAL_ASSIGNMENT.ITEMS)
      let _TEMP11 = _TEMP10.QUERY{ ATIA1 in 

          let _TEMP1 = /*runtime*/ATIA1.ROLE
          let _TEMP2 = /*runtime*/SDAI.FORCE_OPTIONAL(_TEMP1)?.NAME
          let _TEMP3 = SDAI.FORCE_OPTIONAL(/*runtime*/_TEMP2) .==. SDAI.FORCE_OPTIONAL(SDAI.STRING(
            "minimum retention period"))
          let _TEMP4 = SDAI.TYPEOF(ATIA1.ASSIGNED_TIME_INTERVAL, IS: eTIME_INTERVAL_WITH_BOUNDS.self)
          let _TEMP5 = _TEMP3 && _TEMP4
          let _TEMP6 = /*runtime*/ATIA1.ASSIGNED_TIME_INTERVAL
          let _TEMP7 = /*runtime*/SDAI.FORCE_OPTIONAL(_TEMP6)?.GROUP_REF(eTIME_INTERVAL_WITH_BOUNDS.self)
          let _TEMP8 = /*runtime*/_TEMP7?.SECONDARY_BOUND
          let _TEMP9 = SDAI.EXISTS(_TEMP8)
          let _TEMP10 = /*runtime*/ATIA1.ASSIGNED_TIME_INTERVAL
          let _TEMP11 = /*runtime*/SDAI.FORCE_OPTIONAL(_TEMP10)?.GROUP_REF(eTIME_INTERVAL_WITH_BOUNDS.self)
          let _TEMP12 = /*runtime*/_TEMP11?.DURATION
          let _TEMP13 = SDAI.EXISTS(_TEMP12)
          let _TEMP14 = _TEMP9 || _TEMP13
          let _TEMP15 = _TEMP5 && _TEMP14
          let _TEMP16 = SDAI.USEDIN(T: SELF, ROLE: \AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF
            .eAPPLIED_TIME_INTERVAL_ASSIGNMENT.ITEMS)
          let _TEMP17 = _TEMP16.QUERY{ ATIA2 in 

              let _TEMP1 = /*runtime*/ATIA2.ROLE
              let _TEMP2 = /*runtime*/SDAI.FORCE_OPTIONAL(_TEMP1)?.NAME
              let _TEMP3 = SDAI.FORCE_OPTIONAL(/*runtime*/_TEMP2) .==. SDAI.FORCE_OPTIONAL(SDAI.STRING(
                "maximum retention period"))
              let _TEMP4 = SDAI.TYPEOF(ATIA2.ASSIGNED_TIME_INTERVAL, IS: eTIME_INTERVAL_WITH_BOUNDS.self)
              let _TEMP5 = _TEMP3 && _TEMP4
              let _TEMP6 = /*runtime*/ATIA2.ASSIGNED_TIME_INTERVAL
              let _TEMP7 = /*runtime*/SDAI.FORCE_OPTIONAL(_TEMP6)?.GROUP_REF(eTIME_INTERVAL_WITH_BOUNDS.self)
              let _TEMP8 = /*runtime*/_TEMP7?.SECONDARY_BOUND
              let _TEMP9 = SDAI.EXISTS(_TEMP8)
              let _TEMP10 = /*runtime*/ATIA2.ASSIGNED_TIME_INTERVAL
              let _TEMP11 = /*runtime*/SDAI.FORCE_OPTIONAL(_TEMP10)?.GROUP_REF(eTIME_INTERVAL_WITH_BOUNDS.self)
              let _TEMP12 = /*runtime*/_TEMP11?.DURATION
              let _TEMP13 = SDAI.EXISTS(_TEMP12)
              let _TEMP14 = _TEMP9 || _TEMP13
              let _TEMP15 = _TEMP5 && _TEMP14
              let _TEMP16 = /*runtime*/ATIA1.ASSIGNED_TIME_INTERVAL
              let _TEMP17 = /*runtime*/SDAI.FORCE_OPTIONAL(_TEMP16)?.GROUP_REF(eTIME_INTERVAL_WITH_BOUNDS.self)
              let _TEMP18 = /*runtime*/_TEMP17?.PRIMARY_BOUND
              let _TEMP19 = /*runtime*/ATIA2.ASSIGNED_TIME_INTERVAL
              let _TEMP20 = /*runtime*/SDAI.FORCE_OPTIONAL(_TEMP19)?.GROUP_REF(eTIME_INTERVAL_WITH_BOUNDS.self)
              let _TEMP21 = /*runtime*/_TEMP20?.PRIMARY_BOUND
              let _TEMP22 = /*runtime*/_TEMP18 .===. /*runtime*/_TEMP21
              let _TEMP23 = _TEMP15 && _TEMP22
              return _TEMP23 }
          let _TEMP18 = SDAI.SIZEOF(_TEMP17)
          let _TEMP19 = _TEMP18 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
          let _TEMP20 = _TEMP15 && _TEMP19
          return _TEMP20 }
      let _TEMP12 = SDAI.SIZEOF(_TEMP11)
      let _TEMP13 = _TEMP12 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
      let _TEMP14 = _TEMP9 && _TEMP13
      return _TEMP14
    }
    public static func WHERE_wr3(SELF: eRETENTION?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.USEDIN(T: SELF, ROLE: \AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF
        .eACTION_RELATIONSHIP.RELATING_ACTION)
      let _TEMP2 = SDAI.SIZEOF(_TEMP1)
      let _TEMP3 = SDAI.USEDIN(T: SELF, ROLE: \AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF
        .eACTION_RELATIONSHIP.RELATED_ACTION)
      let _TEMP4 = SDAI.SIZEOF(_TEMP3)
      let _TEMP5 = _TEMP2 + _TEMP4
      let _TEMP6 = _TEMP5 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      return _TEMP6
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init() {
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 0
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      self.init( )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY retention
    SUBTYPE OF ( action );
    WHERE
      wr1: ( SIZEOF( QUERY ( aa <* USEDIN( SELF, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
               + 'ACTION_ASSIGNMENT.ASSIGNED_ACTION'  ) | ( ( 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.APPLIED_ACTION_ASSIGNMENT'  IN TYPEOF( aa ) ) 
               AND ( aa.role.name = 'retention' ) ) ) ) >= 1 );
      wr2: ( ( SIZEOF( QUERY ( atia <* USEDIN( SELF, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
               + 'APPLIED_TIME_INTERVAL_ASSIGNMENT.ITEMS'  ) | ( atia.role.name = 'minimum retention period' ) ) ) 
               = 1 ) AND ( SIZEOF( QUERY ( atia <* USEDIN( SELF, 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.APPLIED_TIME_INTERVAL_ASSIGNMENT.ITEMS'  ) | 
               ( atia.role.name = 'maximum retention period' ) ) ) = 1 ) AND ( SIZEOF( QUERY ( atia1 <* 
               USEDIN( SELF, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
               + 'APPLIED_TIME_INTERVAL_ASSIGNMENT.ITEMS'  ) | ( ( atia1.role.name = 'minimum retention period'  ) 
               AND ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.TIME_INTERVAL_WITH_BOUNDS' IN TYPEOF( 
               atia1.assigned_time_interval ) ) AND ( EXISTS( atia1.assigned_time_interval\
               time_interval_with_bounds.secondary_bound ) OR EXISTS( atia1.assigned_time_interval\
               time_interval_with_bounds.duration ) ) AND ( SIZEOF( QUERY ( atia2 <* USEDIN( SELF, 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.APPLIED_TIME_INTERVAL_ASSIGNMENT.ITEMS'  ) | 
               ( ( atia2.role.name = 'maximum retention period' ) AND ( 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.TIME_INTERVAL_WITH_BOUNDS'  IN TYPEOF( atia2.
               assigned_time_interval ) ) AND ( EXISTS( atia2.assigned_time_interval\
               time_interval_with_bounds.secondary_bound ) OR EXISTS( atia2.assigned_time_interval\
               time_interval_with_bounds.duration ) ) AND ( atia1.assigned_time_interval\
               time_interval_with_bounds.primary_bound :=: atia2.assigned_time_interval\
               time_interval_with_bounds.primary_bound ) ) ) ) = 1 ) ) ) ) = 1 ) );
      wr3: ( ( SIZEOF( USEDIN( SELF, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ACTION_RELATIONSHIP.'
               + 'RELATING_ACTION'  ) ) + SIZEOF( USEDIN( SELF, 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ACTION_RELATIONSHIP.RELATED_ACTION'  ) ) ) = 
               0 );
  END_ENTITY; -- retention (line:27611 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eRETENTION : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _retention.self
    }
    public let partialEntity: _retention

    //MARK: SUPERTYPES
    public let super_eACTION: eACTION 	// [1]
    public var super_eRETENTION: eRETENTION { return self } 	// [2]

    //MARK: SUBTYPES

    //MARK: ATTRIBUTES
    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eACTION`` )
    public var DESCRIPTION: tTEXT?  {
      get {
        return super_eACTION.partialEntity._description
      }
      set(newValue) {
        let partial = super_eACTION.partialEntity
        partial._description = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eACTION`` )
    public var CHOSEN_METHOD: eACTION_METHOD {
      get {
        return SDAI.UNWRAP( super_eACTION.partialEntity._chosen_method )
      }
      set(newValue) {
        let partial = super_eACTION.partialEntity
        partial._chosen_method = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUPER( ``eACTION`` )
    public var ID: tIDENTIFIER?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"ID") {
          return cached.value as! tIDENTIFIER? 
        }
        let origin = super_eACTION
        let value = tIDENTIFIER(origin.partialEntity._id__getter(SELF: origin))
        updateCache(derivedAttributeName:"ID", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eACTION`` )
    public var NAME: tLABEL {
      get {
        return SDAI.UNWRAP( super_eACTION.partialEntity._name )
      }
      set(newValue) {
        let partial = super_eACTION.partialEntity
        partial._name = SDAI.UNWRAP(newValue)
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_retention.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eACTION.self) else { return nil }
      self.super_eACTION = super1

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _retention.WHERE_wr1(SELF: instance)
      result[prefix2 + " .WHERE_wr2"] = _retention.WHERE_wr2(SELF: instance)
      result[prefix2 + " .WHERE_wr3"] = _retention.WHERE_wr3(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "RETENTION", type: self, explicitAttributeCount: 0)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eACTION.self)
      entityDef.add(supertype: eRETENTION.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "DESCRIPTION", keyPath: \eRETENTION.DESCRIPTION, 
        kind: .explicitOptional, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "CHOSEN_METHOD", keyPath: \eRETENTION.CHOSEN_METHOD, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "ID", keyPath: \eRETENTION.ID, 
        kind: .derived, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "NAME", keyPath: \eRETENTION.NAME, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)

      return entityDef
    }

  }
}
