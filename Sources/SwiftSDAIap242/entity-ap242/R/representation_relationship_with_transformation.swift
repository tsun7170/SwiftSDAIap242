/* file: representation_relationship_with_transformation.swift 	 generated: Tue Nov 16 05:35:44 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY representation_relationship_with_transformation
    SUBTYPE OF ( representation_relationship );
      transformation_operator  : transformation;
    WHERE
      wr1: ( SELF\representation_relationship.rep_1.context_of_items :<>: SELF\representation_relationship.
               rep_2.context_of_items );
      wr2: ( ( NOT ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ITEM_DEFINED_TRANSFORMATION' IN 
               TYPEOF( transformation_operator ) ) ) OR ( item_in_context( transformation_operator\
               item_defined_transformation.transform_item_1, SELF\representation_relationship.rep_1.
               context_of_items ) AND item_in_context( transformation_operator\item_defined_transformation.
               transform_item_2, SELF\representation_relationship.rep_2.context_of_items ) ) );
  END_ENTITY; -- representation_relationship_with_transformation (line:27527 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	representation_relationship
    ATTR:  name,	TYPE: label -- EXPLICIT

    ATTR:  description,	TYPE: OPTIONAL text -- EXPLICIT

    ATTR:  rep_1,	TYPE: representation_or_representation_reference -- EXPLICIT
      -- possibly overriden by
          ENTITY: mechanical_design_and_draughting_relationship,	TYPE: mechanical_design_and_draughting_relationship_select
          ENTITY: constructive_geometry_representation_relationship,	TYPE: constructive_geometry_representation_or_shape_representation
          ENTITY: kinematic_link_representation_association,	TYPE: kinematic_link_representation	(OBSERVED)
          ENTITY: binary_assembly_constraint,	TYPE: representative_shape_representation
          ENTITY: shape_data_quality_inspected_shape_and_result_relationship,	TYPE: shape_representation
          ENTITY: item_link_motion_relationship,	TYPE: shape_representation
          ENTITY: explicit_procedural_representation_relationship,	TYPE: procedural_representation
          ENTITY: link_motion_relationship,	TYPE: link_or_shape_representation
          ENTITY: pair_representation_relationship,	TYPE: kinematic_link_representation
          ENTITY: variational_current_representation_relationship,	TYPE: variational_representation	(OBSERVED)
          ENTITY: ply_orientation_angle,	TYPE: reinforcement_orientation_basis
          ENTITY: constrained_kinematic_motion_representation,	TYPE: representative_shape_representation
          ENTITY: free_kinematic_motion_representation,	TYPE: representative_shape_representation
          ENTITY: explicit_procedural_shape_representation_relationship,	TYPE: procedural_shape_representation

    ATTR:  rep_2,	TYPE: representation_or_representation_reference -- EXPLICIT
      -- possibly overriden by
          ENTITY: mechanical_design_and_draughting_relationship,	TYPE: mechanical_design_and_draughting_relationship_select
          ENTITY: constructive_geometry_representation_relationship,	TYPE: constructive_geometry_representation
          ENTITY: kinematic_link_representation_association,	TYPE: shape_representation
          ENTITY: binary_assembly_constraint,	TYPE: representative_shape_representation
          ENTITY: shape_data_quality_inspected_shape_and_result_relationship,	TYPE: shape_data_quality_inspection_result_representation
          ENTITY: link_motion_relationship,	TYPE: link_motion_representation_along_path
          ENTITY: pair_representation_relationship,	TYPE: kinematic_link_representation
          ENTITY: ply_orientation_angle,	TYPE: ply_angle_representation
          ENTITY: constrained_kinematic_motion_representation,	TYPE: representative_shape_representation
          ENTITY: free_kinematic_motion_representation,	TYPE: representative_shape_representation
          ENTITY: explicit_procedural_shape_representation_relationship,	TYPE: shape_representation


  ENTITY(SELF)	representation_relationship_with_transformation
    ATTR:  transformation_operator,	TYPE: transformation -- EXPLICIT
      -- possibly overriden by
          ENTITY: link_motion_relationship,	TYPE: link_motion_transformation
          ENTITY: pair_representation_relationship,	TYPE: kinematic_pair	(OBSERVED)


  SUB- ENTITY(3)	surface_distance_assembly_constraint_with_dimension
    (no local attributes)

  SUB- ENTITY(4)	perpendicular_assembly_constraint
    (no local attributes)

  SUB- ENTITY(5)	parallel_assembly_constraint_with_dimension
    (no local attributes)

  SUB- ENTITY(6)	parallel_assembly_constraint
    (no local attributes)

  SUB- ENTITY(7)	angle_assembly_constraint_with_dimension
    (no local attributes)

  SUB- ENTITY(8)	incidence_assembly_constraint
    (no local attributes)

  SUB- ENTITY(9)	coaxial_assembly_constraint
    (no local attributes)

  SUB- ENTITY(10)	tangent_assembly_constraint
    (no local attributes)

  SUB- ENTITY(11)	binary_assembly_constraint
    REDCR: rep_1,	TYPE: representative_shape_representation -- EXPLICIT
      -- OVERRIDING ENTITY: representation_relationship

    REDCR: rep_2,	TYPE: representative_shape_representation -- EXPLICIT
      -- OVERRIDING ENTITY: representation_relationship


  SUB- ENTITY(12)	item_link_motion_relationship
    REDCR: rep_1,	TYPE: shape_representation -- EXPLICIT
      -- OVERRIDING ENTITY: representation_relationship

    ATTR:  item,	TYPE: geometric_representation_item -- EXPLICIT


  SUB- ENTITY(13)	link_motion_relationship
    REDCR: rep_1,	TYPE: link_or_shape_representation -- EXPLICIT
      -- OVERRIDING ENTITY: representation_relationship

    REDCR: rep_2,	TYPE: link_motion_representation_along_path -- EXPLICIT
      -- OVERRIDING ENTITY: representation_relationship

    REDCR: transformation_operator,	TYPE: link_motion_transformation -- EXPLICIT
      -- OVERRIDING ENTITY: representation_relationship_with_transformation


  SUB- ENTITY(14)	pair_representation_relationship
    REDCR: rep_1,	TYPE: kinematic_link_representation -- EXPLICIT
      -- OVERRIDING ENTITY: representation_relationship

    REDCR: rep_2,	TYPE: kinematic_link_representation -- EXPLICIT
      -- OVERRIDING ENTITY: representation_relationship

    REDCR: transformation_operator,	TYPE: kinematic_pair -- EXPLICIT
      -- observed by
        ENTITY(1): kinematic_pair,	ATTR: link_representation_associations,	TYPE: SET [1 : ?] OF
          pair_representation_relationship
      -- OVERRIDING ENTITY: representation_relationship_with_transformation


  SUB- ENTITY(15)	constrained_kinematic_motion_representation
    REDCR: rep_1,	TYPE: representative_shape_representation -- EXPLICIT
      -- OVERRIDING ENTITY: representation_relationship

    REDCR: rep_2,	TYPE: representative_shape_representation -- EXPLICIT
      -- OVERRIDING ENTITY: representation_relationship


  SUB- ENTITY(16)	free_kinematic_motion_representation
    REDCR: rep_1,	TYPE: representative_shape_representation -- EXPLICIT
      -- OVERRIDING ENTITY: representation_relationship

    REDCR: rep_2,	TYPE: representative_shape_representation -- EXPLICIT
      -- OVERRIDING ENTITY: representation_relationship

    ATTR:  motion,	TYPE: kinematic_path -- EXPLICIT


*/


//MARK: - Partial Entity
  public final class _representation_relationship_with_transformation : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eREPRESENTATION_RELATIONSHIP_WITH_TRANSFORMATION.self
    }

    //ATTRIBUTES
    /// EXPLICIT ATTRIBUTE (SUBTYPE ATTR OBSERVED)
    public internal(set) var _transformation_operator: sTRANSFORMATION{ // OBSERVED EXPLICIT ATTRIBUTE
      get {
        return __transformation_operator.copy()
      } // getter
      set {
        var newValue = newValue
        let observer = SDAI.EntityReferenceObserver(referencer: self, observerCode: _transformation_operator__observer.self)
        newValue.configure(with: observer)
        observer.observe(removing: SDAI.UNWRAP(seq:__transformation_operator.entityReferences),
          adding: SDAI.UNWRAP(seq: newValue.entityReferences) )
      } // setter
    }

    /// backing storage for observed attribute
    private var __transformation_operator: sTRANSFORMATION

    /// attribute observer code
    internal class _transformation_operator__observer: SDAI.EntityReferenceObserver.ObserverCode {
      final override class func observe<RemovingEntities: Sequence, AddingEntities: Sequence>(
        referencer: SDAI.PartialEntity, removing: RemovingEntities, adding: AddingEntities )
        where RemovingEntities.Element: SDAI.EntityReference, AddingEntities.Element: SDAI.EntityReference
      {
        for referencedComplex in removing.map({ $0.complexEntity }) {
          for referencerOwner in referencer.owners {
            //OBSERVING ENTITY: eKINEMATIC_PAIR
            referencedComplex.partialEntityInstance(_kinematic_pair.self)?
              ._link_representation_associations__observeRemovedReference(in: referencerOwner)
          }
        }

        for referencedComplex in adding.map({ $0.complexEntity }) {
          for referencerOwner in referencer.owners {
            //OBSERVING ENTITY: eKINEMATIC_PAIR
            referencedComplex.partialEntityInstance(_kinematic_pair.self)?
              ._link_representation_associations__observeAddedReference(in: referencerOwner)
          }
        }
      }

      final override class func observe(newReferencerOwner referencerOwner: SDAI.ComplexEntity) {
        guard let attrValue = referencerOwner.partialEntityInstance(_representation_relationship_with_transformation.self)?._transformation_operator else { return }
        for referencedComplex in attrValue.entityReferences.map({ $0.complexEntity }) {
        //OBSERVING ENTITY: eKINEMATIC_PAIR
        referencedComplex.partialEntityInstance(_kinematic_pair.self)?
          ._link_representation_associations__observeAddedReference(in: referencerOwner)
        }
      }

      final override class func observe(leavingReferencerOwner referencerOwner: SDAI.ComplexEntity) {
        guard let attrValue = referencerOwner.partialEntityInstance(_representation_relationship_with_transformation.self)?._transformation_operator else { return }
        for referencedComplex in attrValue.entityReferences.map({ $0.complexEntity }) {
        //OBSERVING ENTITY: eKINEMATIC_PAIR
        referencedComplex.partialEntityInstance(_kinematic_pair.self)?
          ._link_representation_associations__observe(leavingReferencerOwner: referencerOwner)
        }
      }

    }

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      //SELECT data types (indirectly) referencing the current type as a member of the select list
      members.insert(SDAI.STRING(sMULTI_LANGUAGE_ATTRIBUTE_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sGROUPABLE_ITEM.typeName)) // -> Self
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._transformation_operator.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._transformation_operator.value.isValueEqualOptionally(to: rhs._transformation_operator.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._transformation_operator.value.isValueEqualOptionally(to: rhs._transformation_operator.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: eREPRESENTATION_RELATIONSHIP_WITH_TRANSFORMATION?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.GROUP_REF(eREPRESENTATION_RELATIONSHIP.self)
      let _TEMP2 = _TEMP1?.REP_1
      let _TEMP3 = /*runtime*/_TEMP2?.CONTEXT_OF_ITEMS
      let _TEMP4 = SELF.GROUP_REF(eREPRESENTATION_RELATIONSHIP.self)
      let _TEMP5 = _TEMP4?.REP_2
      let _TEMP6 = /*runtime*/_TEMP5?.CONTEXT_OF_ITEMS
      let _TEMP7 = /*runtime*/_TEMP3 .!==. /*runtime*/_TEMP6
      return _TEMP7
    }
    public static func WHERE_wr2(SELF: eREPRESENTATION_RELATIONSHIP_WITH_TRANSFORMATION?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.TYPEOF(SELF.TRANSFORMATION_OPERATOR, IS: eITEM_DEFINED_TRANSFORMATION.self)
      let _TEMP2 =  !_TEMP1
      let _TEMP3 = SELF.TRANSFORMATION_OPERATOR.GROUP_REF(eITEM_DEFINED_TRANSFORMATION.self)
      let _TEMP4 = _TEMP3?.TRANSFORM_ITEM_1
      let _TEMP5 = SELF.GROUP_REF(eREPRESENTATION_RELATIONSHIP.self)
      let _TEMP6 = _TEMP5?.REP_1
      let _TEMP7 = /*runtime*/_TEMP6?.CONTEXT_OF_ITEMS
      let _TEMP8 = ITEM_IN_CONTEXT(ITEM: _TEMP4, 
                                   CNTXT: eREPRESENTATION_CONTEXT(fromGeneric: /*/*runtime*/SDAI.GENERIC*/
                                   _TEMP7))
      let _TEMP9 = SELF.TRANSFORMATION_OPERATOR.GROUP_REF(eITEM_DEFINED_TRANSFORMATION.self)
      let _TEMP10 = _TEMP9?.TRANSFORM_ITEM_2
      let _TEMP11 = SELF.GROUP_REF(eREPRESENTATION_RELATIONSHIP.self)
      let _TEMP12 = _TEMP11?.REP_2
      let _TEMP13 = /*runtime*/_TEMP12?.CONTEXT_OF_ITEMS
      let _TEMP14 = ITEM_IN_CONTEXT(
        ITEM: _TEMP10, CNTXT: eREPRESENTATION_CONTEXT(fromGeneric: /*/*runtime*/SDAI.GENERIC*/_TEMP13))
      let _TEMP15 = _TEMP8 && _TEMP14
      let _TEMP16 = _TEMP2 || _TEMP15
      return _TEMP16
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(TRANSFORMATION_OPERATOR: sTRANSFORMATION) {
      self.__transformation_operator = TRANSFORMATION_OPERATOR
      super.init(asAbstructSuperclass:())

      self._transformation_operator.configure(with: SDAI.EntityReferenceObserver(referencer: self, observerCode: _transformation_operator__observer.self))
    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 1
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverRequiredParameter(as: sTRANSFORMATION.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( TRANSFORMATION_OPERATOR: p0 )
    }

    /// broadcasting a new complex entity becoming an owner of the partial entity
    final public override func broadcast(addedToComplex complex: SDAI.ComplexEntity) {
      _transformation_operator__observer.observe(newReferencerOwner: complex)
    }

    /// broadcasting a complex entity withdrawing an owner of the partial entity
    final public override func broadcast(removedFromComplex complex: SDAI.ComplexEntity) {
      _transformation_operator__observer.observe(leavingReferencerOwner: complex)
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY representation_relationship_with_transformation
    SUBTYPE OF ( representation_relationship );
      transformation_operator  : transformation;
    WHERE
      wr1: ( SELF\representation_relationship.rep_1.context_of_items :<>: SELF\representation_relationship.
               rep_2.context_of_items );
      wr2: ( ( NOT ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ITEM_DEFINED_TRANSFORMATION' IN 
               TYPEOF( transformation_operator ) ) ) OR ( item_in_context( transformation_operator\
               item_defined_transformation.transform_item_1, SELF\representation_relationship.rep_1.
               context_of_items ) AND item_in_context( transformation_operator\item_defined_transformation.
               transform_item_2, SELF\representation_relationship.rep_2.context_of_items ) ) );
  END_ENTITY; -- representation_relationship_with_transformation (line:27527 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eREPRESENTATION_RELATIONSHIP_WITH_TRANSFORMATION : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _representation_relationship_with_transformation.self
    }
    public let partialEntity: _representation_relationship_with_transformation

    //MARK: SUPERTYPES
    public let super_eREPRESENTATION_RELATIONSHIP: eREPRESENTATION_RELATIONSHIP 	// [1]
    public var super_eREPRESENTATION_RELATIONSHIP_WITH_TRANSFORMATION: eREPRESENTATION_RELATIONSHIP_WITH_TRANSFORMATION { return self } 	// [2]

    //MARK: SUBTYPES
    public var sub_eSURFACE_DISTANCE_ASSEMBLY_CONSTRAINT_WITH_DIMENSION: eSURFACE_DISTANCE_ASSEMBLY_CONSTRAINT_WITH_DIMENSION? {	// [3]
      return self.complexEntity.entityReference(eSURFACE_DISTANCE_ASSEMBLY_CONSTRAINT_WITH_DIMENSION.self)
    }

    public var sub_ePERPENDICULAR_ASSEMBLY_CONSTRAINT: ePERPENDICULAR_ASSEMBLY_CONSTRAINT? {	// [4]
      return self.complexEntity.entityReference(ePERPENDICULAR_ASSEMBLY_CONSTRAINT.self)
    }

    public var sub_ePARALLEL_ASSEMBLY_CONSTRAINT_WITH_DIMENSION: ePARALLEL_ASSEMBLY_CONSTRAINT_WITH_DIMENSION? {	// [5]
      return self.complexEntity.entityReference(ePARALLEL_ASSEMBLY_CONSTRAINT_WITH_DIMENSION.self)
    }

    public var sub_ePARALLEL_ASSEMBLY_CONSTRAINT: ePARALLEL_ASSEMBLY_CONSTRAINT? {	// [6]
      return self.complexEntity.entityReference(ePARALLEL_ASSEMBLY_CONSTRAINT.self)
    }

    public var sub_eANGLE_ASSEMBLY_CONSTRAINT_WITH_DIMENSION: eANGLE_ASSEMBLY_CONSTRAINT_WITH_DIMENSION? {	// [7]
      return self.complexEntity.entityReference(eANGLE_ASSEMBLY_CONSTRAINT_WITH_DIMENSION.self)
    }

    public var sub_eINCIDENCE_ASSEMBLY_CONSTRAINT: eINCIDENCE_ASSEMBLY_CONSTRAINT? {	// [8]
      return self.complexEntity.entityReference(eINCIDENCE_ASSEMBLY_CONSTRAINT.self)
    }

    public var sub_eCOAXIAL_ASSEMBLY_CONSTRAINT: eCOAXIAL_ASSEMBLY_CONSTRAINT? {	// [9]
      return self.complexEntity.entityReference(eCOAXIAL_ASSEMBLY_CONSTRAINT.self)
    }

    public var sub_eTANGENT_ASSEMBLY_CONSTRAINT: eTANGENT_ASSEMBLY_CONSTRAINT? {	// [10]
      return self.complexEntity.entityReference(eTANGENT_ASSEMBLY_CONSTRAINT.self)
    }

    public var sub_eBINARY_ASSEMBLY_CONSTRAINT: eBINARY_ASSEMBLY_CONSTRAINT? {	// [11]
      return self.complexEntity.entityReference(eBINARY_ASSEMBLY_CONSTRAINT.self)
    }

    public var sub_eITEM_LINK_MOTION_RELATIONSHIP: eITEM_LINK_MOTION_RELATIONSHIP? {	// [12]
      return self.complexEntity.entityReference(eITEM_LINK_MOTION_RELATIONSHIP.self)
    }

    public var sub_eLINK_MOTION_RELATIONSHIP: eLINK_MOTION_RELATIONSHIP? {	// [13]
      return self.complexEntity.entityReference(eLINK_MOTION_RELATIONSHIP.self)
    }

    public var sub_ePAIR_REPRESENTATION_RELATIONSHIP: ePAIR_REPRESENTATION_RELATIONSHIP? {	// [14]
      return self.complexEntity.entityReference(ePAIR_REPRESENTATION_RELATIONSHIP.self)
    }

    public var sub_eCONSTRAINED_KINEMATIC_MOTION_REPRESENTATION: eCONSTRAINED_KINEMATIC_MOTION_REPRESENTATION? {	// [15]
      return self.complexEntity.entityReference(eCONSTRAINED_KINEMATIC_MOTION_REPRESENTATION.self)
    }

    public var sub_eFREE_KINEMATIC_MOTION_REPRESENTATION: eFREE_KINEMATIC_MOTION_REPRESENTATION? {	// [16]
      return self.complexEntity.entityReference(eFREE_KINEMATIC_MOTION_REPRESENTATION.self)
    }


    //MARK: ATTRIBUTES
    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eREPRESENTATION_RELATIONSHIP`` )
    public var DESCRIPTION: tTEXT?  {
      get {
        return super_eREPRESENTATION_RELATIONSHIP.partialEntity._description
      }
      set(newValue) {
        let partial = super_eREPRESENTATION_RELATIONSHIP.partialEntity
        partial._description = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eREPRESENTATION_RELATIONSHIP_WITH_TRANSFORMATION`` )
    public var TRANSFORMATION_OPERATOR: sTRANSFORMATION {
      get {
        return SDAI.UNWRAP( self.partialEntity._transformation_operator )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._transformation_operator = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eITEM_LINK_MOTION_RELATIONSHIP`` )
    public var ITEM: eGEOMETRIC_REPRESENTATION_ITEM?  {
      get {
        return sub_eITEM_LINK_MOTION_RELATIONSHIP?.partialEntity._item
      }
      set(newValue) {
        guard let partial = sub_eITEM_LINK_MOTION_RELATIONSHIP?.super_eITEM_LINK_MOTION_RELATIONSHIP
          .partialEntity else { return }
        partial._item = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eREPRESENTATION_RELATIONSHIP`` )
    public var REP_1: sREPRESENTATION_OR_REPRESENTATION_REFERENCE {
      get {
        return SDAI.UNWRAP( super_eREPRESENTATION_RELATIONSHIP.partialEntity._rep_1 )
      }
      set(newValue) {
        let partial = super_eREPRESENTATION_RELATIONSHIP.partialEntity
        partial._rep_1 = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eREPRESENTATION_RELATIONSHIP`` )
    public var REP_2: sREPRESENTATION_OR_REPRESENTATION_REFERENCE {
      get {
        return SDAI.UNWRAP( super_eREPRESENTATION_RELATIONSHIP.partialEntity._rep_2 )
      }
      set(newValue) {
        let partial = super_eREPRESENTATION_RELATIONSHIP.partialEntity
        partial._rep_2 = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eREPRESENTATION_RELATIONSHIP`` )
    public var NAME: tLABEL {
      get {
        return SDAI.UNWRAP( super_eREPRESENTATION_RELATIONSHIP.partialEntity._name )
      }
      set(newValue) {
        let partial = super_eREPRESENTATION_RELATIONSHIP.partialEntity
        partial._name = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eFREE_KINEMATIC_MOTION_REPRESENTATION`` )
    public var MOTION: eKINEMATIC_PATH?  {
      get {
        return sub_eFREE_KINEMATIC_MOTION_REPRESENTATION?.partialEntity._motion
      }
      set(newValue) {
        guard let partial = sub_eFREE_KINEMATIC_MOTION_REPRESENTATION?.super_eFREE_KINEMATIC_MOTION_REPRESENTATION
          .partialEntity else { return }
        partial._motion = SDAI.UNWRAP(newValue)
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_representation_relationship_with_transformation.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eREPRESENTATION_RELATIONSHIP.self) else { return nil }
      self.super_eREPRESENTATION_RELATIONSHIP = super1

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _representation_relationship_with_transformation.WHERE_wr1(SELF: instance)
      result[prefix2 + " .WHERE_wr2"] = _representation_relationship_with_transformation.WHERE_wr2(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "REPRESENTATION_RELATIONSHIP_WITH_TRANSFORMATION", type: self, explicitAttributeCount: 1)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eREPRESENTATION_RELATIONSHIP.self)
      entityDef.add(supertype: eREPRESENTATION_RELATIONSHIP_WITH_TRANSFORMATION.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "DESCRIPTION", keyPath: \eREPRESENTATION_RELATIONSHIP_WITH_TRANSFORMATION.DESCRIPTION, 
        kind: .explicitOptional, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "TRANSFORMATION_OPERATOR", keyPath: \eREPRESENTATION_RELATIONSHIP_WITH_TRANSFORMATION.TRANSFORMATION_OPERATOR, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "ITEM", keyPath: \eREPRESENTATION_RELATIONSHIP_WITH_TRANSFORMATION.ITEM, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "REP_1", keyPath: \eREPRESENTATION_RELATIONSHIP_WITH_TRANSFORMATION.REP_1, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "REP_2", keyPath: \eREPRESENTATION_RELATIONSHIP_WITH_TRANSFORMATION.REP_2, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "NAME", keyPath: \eREPRESENTATION_RELATIONSHIP_WITH_TRANSFORMATION.NAME, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "MOTION", keyPath: \eREPRESENTATION_RELATIONSHIP_WITH_TRANSFORMATION.MOTION, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)

      return entityDef
    }

  }
}
