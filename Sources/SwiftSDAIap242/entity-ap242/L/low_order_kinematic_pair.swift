/* file: low_order_kinematic_pair.swift 	 generated: Sun Oct 31 15:32:10 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY low_order_kinematic_pair
    SUPERTYPE OF ( 
        ONEOF ( 
            revolute_pair, 
            cylindrical_pair, 
            spherical_pair, 
            spherical_pair_with_pin, 
            planar_pair, 
            unconstrained_pair, 
            fully_constrained_pair, 
            prismatic_pair, 
            universal_pair, 
            low_order_kinematic_pair_with_range ) )
    SUBTYPE OF ( kinematic_pair );
      t_x  : BOOLEAN;
      t_y  : BOOLEAN;
      t_z  : BOOLEAN;
      r_x  : BOOLEAN;
      r_y  : BOOLEAN;
      r_z  : BOOLEAN;
    WHERE
      wr1: ( SIZEOF( QUERY ( lr <* SELF\kinematic_pair.associated_link_representations_1 | ( NOT ( 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.RIGID_LINK_REPRESENTATION'  IN TYPEOF( lr ) ) ) ) ) 
               = 0 );
      wr2: ( SIZEOF( QUERY ( lr <* SELF\kinematic_pair.associated_link_representations_2 | ( NOT ( 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.RIGID_LINK_REPRESENTATION'  IN TYPEOF( lr ) ) ) ) ) 
               = 0 );
  END_ENTITY; -- low_order_kinematic_pair (line:19451 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	representation_item
    ATTR:  name,	TYPE: label -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUPER- ENTITY(2)	geometric_representation_item
    ATTR:  dim,	TYPE: dimension_count -- DERIVED
      := dimension_of( SELF )


  SUPER- ENTITY(3)	item_defined_transformation
    ATTR:  name,	TYPE: label -- EXPLICIT (DYNAMIC)	(AMBIGUOUS/MASKED)
      -- possibly overriden by
          ENTITY: kinematic_pair,	TYPE: label	(as DERIVED)

    ATTR:  description,	TYPE: OPTIONAL text -- EXPLICIT

    ATTR:  transform_item_1,	TYPE: representation_item -- EXPLICIT
      -- possibly overriden by
      *** ENTITY: kinematic_pair,	TYPE: rigid_placement
          ENTITY: link_motion_transformation,	TYPE: rigid_placement
          ENTITY: transformation_with_derived_angle,	TYPE: angle_direction_reference_with_a2p3d_select

    ATTR:  transform_item_2,	TYPE: representation_item -- EXPLICIT
      -- possibly overriden by
      *** ENTITY: kinematic_pair,	TYPE: rigid_placement
          ENTITY: link_motion_transformation,	TYPE: kinematic_path
          ENTITY: transformation_with_derived_angle,	TYPE: axis2_placement_3d


  SUPER- ENTITY(4)	kinematic_pair
    ATTR:  joint,	TYPE: kinematic_joint -- EXPLICIT

    REDCR: transform_item_1,	TYPE: rigid_placement -- EXPLICIT
      -- OVERRIDING ENTITY: item_defined_transformation

    REDCR: transform_item_2,	TYPE: rigid_placement -- EXPLICIT
      -- OVERRIDING ENTITY: item_defined_transformation

    ATTR:  associated_link_representations_1,	TYPE: SET [1 : ?] OF kinematic_link_representation -- DERIVED
      := sort_link_associations( link_representation_associations, TRUE )

    ATTR:  associated_link_representations_2,	TYPE: SET [1 : ?] OF kinematic_link_representation -- DERIVED
      := sort_link_associations( link_representation_associations, FALSE )

    REDCR: name,	TYPE: label -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := SELF\representation_item.name
      -- OVERRIDING ENTITY: item_defined_transformation

    ATTR:  link_representation_associations,	TYPE: SET [1 : ?] OF pair_representation_relationship -- INVERSE
      FOR transformation_operator;


  ENTITY(SELF)	low_order_kinematic_pair
    ATTR:  t_x,	TYPE: BOOLEAN -- EXPLICIT (DYNAMIC)
      -- possibly overriden by
          ENTITY: planar_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: revolute_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: cylindrical_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: spherical_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: fully_constrained_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: universal_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: unconstrained_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: prismatic_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: spherical_pair_with_pin,	TYPE: BOOLEAN	(as DERIVED)

    ATTR:  t_y,	TYPE: BOOLEAN -- EXPLICIT (DYNAMIC)
      -- possibly overriden by
          ENTITY: planar_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: revolute_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: cylindrical_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: spherical_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: fully_constrained_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: universal_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: unconstrained_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: prismatic_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: spherical_pair_with_pin,	TYPE: BOOLEAN	(as DERIVED)

    ATTR:  t_z,	TYPE: BOOLEAN -- EXPLICIT (DYNAMIC)
      -- possibly overriden by
          ENTITY: planar_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: revolute_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: cylindrical_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: spherical_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: fully_constrained_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: universal_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: unconstrained_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: prismatic_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: spherical_pair_with_pin,	TYPE: BOOLEAN	(as DERIVED)

    ATTR:  r_x,	TYPE: BOOLEAN -- EXPLICIT (DYNAMIC)
      -- possibly overriden by
          ENTITY: planar_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: revolute_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: cylindrical_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: spherical_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: fully_constrained_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: universal_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: unconstrained_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: prismatic_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: spherical_pair_with_pin,	TYPE: BOOLEAN	(as DERIVED)

    ATTR:  r_y,	TYPE: BOOLEAN -- EXPLICIT (DYNAMIC)
      -- possibly overriden by
          ENTITY: planar_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: revolute_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: cylindrical_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: spherical_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: fully_constrained_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: universal_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: unconstrained_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: prismatic_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: spherical_pair_with_pin,	TYPE: BOOLEAN	(as DERIVED)

    ATTR:  r_z,	TYPE: BOOLEAN -- EXPLICIT (DYNAMIC)
      -- possibly overriden by
          ENTITY: planar_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: revolute_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: cylindrical_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: spherical_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: fully_constrained_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: universal_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: unconstrained_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: prismatic_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: spherical_pair_with_pin,	TYPE: BOOLEAN	(as DERIVED)


  SUB- ENTITY(6)	planar_pair_with_range
    ATTR:  lower_limit_actual_rotation,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  upper_limit_actual_rotation,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  lower_limit_actual_translation_x,	TYPE: OPTIONAL length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  upper_limit_actual_translation_x,	TYPE: OPTIONAL length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  lower_limit_actual_translation_y,	TYPE: OPTIONAL length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  upper_limit_actual_translation_y,	TYPE: OPTIONAL length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(7)	planar_pair
    REDCR: t_x,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)
      := TRUE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: t_y,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)
      := TRUE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: t_z,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_x,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_y,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_z,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)
      := TRUE
      -- OVERRIDING ENTITY: low_order_kinematic_pair


  SUB- ENTITY(8)	revolute_pair_with_range
    ATTR:  lower_limit_actual_rotation,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  upper_limit_actual_rotation,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(9)	revolute_pair
    REDCR: t_x,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: t_y,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: t_z,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_x,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_y,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_z,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)
      := TRUE
      -- OVERRIDING ENTITY: low_order_kinematic_pair


  SUB- ENTITY(10)	cylindrical_pair_with_range
    ATTR:  lower_limit_actual_translation,	TYPE: OPTIONAL length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  upper_limit_actual_translation,	TYPE: OPTIONAL length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  lower_limit_actual_rotation,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  upper_limit_actual_rotation,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(11)	cylindrical_pair
    REDCR: t_x,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: t_y,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: t_z,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)
      := TRUE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_x,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_y,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_z,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)
      := TRUE
      -- OVERRIDING ENTITY: low_order_kinematic_pair


  SUB- ENTITY(12)	spherical_pair_with_range
    ATTR:  lower_limit_yaw,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  upper_limit_yaw,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  lower_limit_pitch,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT

    ATTR:  upper_limit_pitch,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT

    ATTR:  lower_limit_roll,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  upper_limit_roll,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(13)	spherical_pair
    REDCR: t_x,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: t_y,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: t_z,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_x,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)
      := TRUE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_y,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)
      := TRUE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_z,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)
      := TRUE
      -- OVERRIDING ENTITY: low_order_kinematic_pair


  SUB- ENTITY(14)	fully_constrained_pair
    REDCR: t_x,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: t_y,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: t_z,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_x,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_y,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_z,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair


  SUB- ENTITY(15)	low_order_kinematic_pair_with_range
    ATTR:  lower_limit_actual_rotation_x,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT

    ATTR:  upper_limit_actual_rotation_x,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT

    ATTR:  lower_limit_actual_rotation_y,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT

    ATTR:  upper_limit_actual_rotation_y,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT

    ATTR:  lower_limit_actual_rotation_z,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT

    ATTR:  upper_limit_actual_rotation_z,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT

    ATTR:  lower_limit_actual_translation_x,	TYPE: OPTIONAL length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  upper_limit_actual_translation_x,	TYPE: OPTIONAL length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  lower_limit_actual_translation_y,	TYPE: OPTIONAL length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  upper_limit_actual_translation_y,	TYPE: OPTIONAL length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  lower_limit_actual_translation_z,	TYPE: OPTIONAL length_measure -- EXPLICIT

    ATTR:  upper_limit_actual_translation_z,	TYPE: OPTIONAL length_measure -- EXPLICIT


  SUB- ENTITY(16)	homokinetic_pair
    (no local attributes)

  SUB- ENTITY(17)	universal_pair_with_range
    ATTR:  lower_limit_first_rotation,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT

    ATTR:  upper_limit_first_rotation,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT

    ATTR:  lower_limit_second_rotation,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT

    ATTR:  upper_limit_second_rotation,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT


  SUB- ENTITY(18)	universal_pair
    ATTR:  input_skew_angle,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT

    REDCR: t_x,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: t_y,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: t_z,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_x,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)
      := TRUE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_y,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_z,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)
      := TRUE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    ATTR:  skew_angle,	TYPE: plane_angle_measure -- DERIVED
      := NVL( input_skew_angle, 0 )


  SUB- ENTITY(19)	spherical_pair_with_pin_and_range
    ATTR:  lower_limit_yaw,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  upper_limit_yaw,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  lower_limit_roll,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  upper_limit_roll,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(20)	spherical_pair_with_pin
    REDCR: t_x,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: t_y,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: t_z,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_x,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_y,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)
      := TRUE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_z,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)
      := TRUE
      -- OVERRIDING ENTITY: low_order_kinematic_pair


  SUB- ENTITY(21)	unconstrained_pair
    REDCR: t_x,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)
      := TRUE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: t_y,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)
      := TRUE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: t_z,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)
      := TRUE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_x,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)
      := TRUE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_y,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)
      := TRUE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_z,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)
      := TRUE
      -- OVERRIDING ENTITY: low_order_kinematic_pair


  SUB- ENTITY(22)	prismatic_pair_with_range
    ATTR:  lower_limit_actual_translation,	TYPE: OPTIONAL length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  upper_limit_actual_translation,	TYPE: OPTIONAL length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(23)	prismatic_pair
    REDCR: t_x,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)
      := TRUE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: t_y,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: t_z,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_x,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_y,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_z,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair


*/


//MARK: - Partial Entity
  public final class _low_order_kinematic_pair : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eLOW_ORDER_KINEMATIC_PAIR.self
    }

    //ATTRIBUTES
    /// EXPLICIT ATTRIBUTE 
    /// - see the corresponding attribute accesser in the entity reference definition for the attribute value dynamic lookup logic
    public internal(set) var _t_x: SDAI.BOOLEAN?  // PLAIN EXPLICIT ATTRIBUTE

    internal static func _t_x__provider(complex: SDAI.ComplexEntity) -> eLOW_ORDER_KINEMATIC_PAIR__T_X__provider? {
      let resolved = complex.resolvePartialEntityInstance(from: [_planar_pair.typeIdentity, 
        _revolute_pair.typeIdentity, _cylindrical_pair.typeIdentity, _spherical_pair.typeIdentity, 
        _fully_constrained_pair.typeIdentity, _universal_pair.typeIdentity, _unconstrained_pair.typeIdentity, 
        _prismatic_pair.typeIdentity, _spherical_pair_with_pin.typeIdentity])
      return resolved as? eLOW_ORDER_KINEMATIC_PAIR__T_X__provider
    }

    /// EXPLICIT ATTRIBUTE 
    /// - see the corresponding attribute accesser in the entity reference definition for the attribute value dynamic lookup logic
    public internal(set) var _t_y: SDAI.BOOLEAN?  // PLAIN EXPLICIT ATTRIBUTE

    internal static func _t_y__provider(complex: SDAI.ComplexEntity) -> eLOW_ORDER_KINEMATIC_PAIR__T_Y__provider? {
      let resolved = complex.resolvePartialEntityInstance(from: [_planar_pair.typeIdentity, 
        _revolute_pair.typeIdentity, _cylindrical_pair.typeIdentity, _spherical_pair.typeIdentity, 
        _fully_constrained_pair.typeIdentity, _universal_pair.typeIdentity, _unconstrained_pair.typeIdentity, 
        _prismatic_pair.typeIdentity, _spherical_pair_with_pin.typeIdentity])
      return resolved as? eLOW_ORDER_KINEMATIC_PAIR__T_Y__provider
    }

    /// EXPLICIT ATTRIBUTE 
    /// - see the corresponding attribute accesser in the entity reference definition for the attribute value dynamic lookup logic
    public internal(set) var _t_z: SDAI.BOOLEAN?  // PLAIN EXPLICIT ATTRIBUTE

    internal static func _t_z__provider(complex: SDAI.ComplexEntity) -> eLOW_ORDER_KINEMATIC_PAIR__T_Z__provider? {
      let resolved = complex.resolvePartialEntityInstance(from: [_planar_pair.typeIdentity, 
        _revolute_pair.typeIdentity, _cylindrical_pair.typeIdentity, _spherical_pair.typeIdentity, 
        _fully_constrained_pair.typeIdentity, _universal_pair.typeIdentity, _unconstrained_pair.typeIdentity, 
        _prismatic_pair.typeIdentity, _spherical_pair_with_pin.typeIdentity])
      return resolved as? eLOW_ORDER_KINEMATIC_PAIR__T_Z__provider
    }

    /// EXPLICIT ATTRIBUTE 
    /// - see the corresponding attribute accesser in the entity reference definition for the attribute value dynamic lookup logic
    public internal(set) var _r_x: SDAI.BOOLEAN?  // PLAIN EXPLICIT ATTRIBUTE

    internal static func _r_x__provider(complex: SDAI.ComplexEntity) -> eLOW_ORDER_KINEMATIC_PAIR__R_X__provider? {
      let resolved = complex.resolvePartialEntityInstance(from: [_planar_pair.typeIdentity, 
        _revolute_pair.typeIdentity, _cylindrical_pair.typeIdentity, _spherical_pair.typeIdentity, 
        _fully_constrained_pair.typeIdentity, _universal_pair.typeIdentity, _unconstrained_pair.typeIdentity, 
        _prismatic_pair.typeIdentity, _spherical_pair_with_pin.typeIdentity])
      return resolved as? eLOW_ORDER_KINEMATIC_PAIR__R_X__provider
    }

    /// EXPLICIT ATTRIBUTE 
    /// - see the corresponding attribute accesser in the entity reference definition for the attribute value dynamic lookup logic
    public internal(set) var _r_y: SDAI.BOOLEAN?  // PLAIN EXPLICIT ATTRIBUTE

    internal static func _r_y__provider(complex: SDAI.ComplexEntity) -> eLOW_ORDER_KINEMATIC_PAIR__R_Y__provider? {
      let resolved = complex.resolvePartialEntityInstance(from: [_planar_pair.typeIdentity, 
        _revolute_pair.typeIdentity, _cylindrical_pair.typeIdentity, _spherical_pair.typeIdentity, 
        _fully_constrained_pair.typeIdentity, _universal_pair.typeIdentity, _unconstrained_pair.typeIdentity, 
        _prismatic_pair.typeIdentity, _spherical_pair_with_pin.typeIdentity])
      return resolved as? eLOW_ORDER_KINEMATIC_PAIR__R_Y__provider
    }

    /// EXPLICIT ATTRIBUTE 
    /// - see the corresponding attribute accesser in the entity reference definition for the attribute value dynamic lookup logic
    public internal(set) var _r_z: SDAI.BOOLEAN?  // PLAIN EXPLICIT ATTRIBUTE

    internal static func _r_z__provider(complex: SDAI.ComplexEntity) -> eLOW_ORDER_KINEMATIC_PAIR__R_Z__provider? {
      let resolved = complex.resolvePartialEntityInstance(from: [_planar_pair.typeIdentity, 
        _revolute_pair.typeIdentity, _cylindrical_pair.typeIdentity, _spherical_pair.typeIdentity, 
        _fully_constrained_pair.typeIdentity, _universal_pair.typeIdentity, _unconstrained_pair.typeIdentity, 
        _prismatic_pair.typeIdentity, _spherical_pair_with_pin.typeIdentity])
      return resolved as? eLOW_ORDER_KINEMATIC_PAIR__R_Z__provider
    }

    //PARTIAL COMPLEX ENTITY SUPPORT
    final public override class func fixupPartialComplexEntityAttributes(partialComplex: SDAI.ComplexEntity, baseComplex: SDAI.ComplexEntity) {
      guard let pe = partialComplex.partialEntityInstance(_low_order_kinematic_pair.self) else { return }

      if pe._t_x == nil, self._t_x__provider(complex: partialComplex) == nil, 
        let base__t_x__provider = self._t_x__provider(complex: baseComplex) {
        pe._t_x = base__t_x__provider._t_x__getter(complex: baseComplex)
      }

      if pe._t_y == nil, self._t_y__provider(complex: partialComplex) == nil, 
        let base__t_y__provider = self._t_y__provider(complex: baseComplex) {
        pe._t_y = base__t_y__provider._t_y__getter(complex: baseComplex)
      }

      if pe._t_z == nil, self._t_z__provider(complex: partialComplex) == nil, 
        let base__t_z__provider = self._t_z__provider(complex: baseComplex) {
        pe._t_z = base__t_z__provider._t_z__getter(complex: baseComplex)
      }

      if pe._r_x == nil, self._r_x__provider(complex: partialComplex) == nil, 
        let base__r_x__provider = self._r_x__provider(complex: baseComplex) {
        pe._r_x = base__r_x__provider._r_x__getter(complex: baseComplex)
      }

      if pe._r_y == nil, self._r_y__provider(complex: partialComplex) == nil, 
        let base__r_y__provider = self._r_y__provider(complex: baseComplex) {
        pe._r_y = base__r_y__provider._r_y__getter(complex: baseComplex)
      }

      if pe._r_z == nil, self._r_z__provider(complex: partialComplex) == nil, 
        let base__r_z__provider = self._r_z__provider(complex: baseComplex) {
        pe._r_z = base__r_z__provider._r_z__getter(complex: baseComplex)
      }
    }
    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._t_x?.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._t_y?.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._t_z?.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._r_x?.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._r_y?.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._r_z?.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._t_x?.value.isValueEqualOptionally(to: rhs._t_x?.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._t_y?.value.isValueEqualOptionally(to: rhs._t_y?.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._t_z?.value.isValueEqualOptionally(to: rhs._t_z?.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._r_x?.value.isValueEqualOptionally(to: rhs._r_x?.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._r_y?.value.isValueEqualOptionally(to: rhs._r_y?.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._r_z?.value.isValueEqualOptionally(to: rhs._r_z?.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._t_x?.value.isValueEqualOptionally(to: rhs._t_x?.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._t_y?.value.isValueEqualOptionally(to: rhs._t_y?.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._t_z?.value.isValueEqualOptionally(to: rhs._t_z?.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._r_x?.value.isValueEqualOptionally(to: rhs._r_x?.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._r_y?.value.isValueEqualOptionally(to: rhs._r_y?.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._r_z?.value.isValueEqualOptionally(to: rhs._r_z?.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: eLOW_ORDER_KINEMATIC_PAIR?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.GROUP_REF(eKINEMATIC_PAIR.self)
      let _TEMP2 = _TEMP1?.ASSOCIATED_LINK_REPRESENTATIONS_1
      let _TEMP3 = _TEMP2?.QUERY{ LR in 

          let _TEMP1 = SDAI.TYPEOF(LR, IS: eRIGID_LINK_REPRESENTATION.self)
          let _TEMP2 =  !_TEMP1
          return _TEMP2 }
      let _TEMP4 = SDAI.SIZEOF(_TEMP3)
      let _TEMP5 = _TEMP4 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      return _TEMP5
    }
    public static func WHERE_wr2(SELF: eLOW_ORDER_KINEMATIC_PAIR?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.GROUP_REF(eKINEMATIC_PAIR.self)
      let _TEMP2 = _TEMP1?.ASSOCIATED_LINK_REPRESENTATIONS_2
      let _TEMP3 = _TEMP2?.QUERY{ LR in 

          let _TEMP1 = SDAI.TYPEOF(LR, IS: eRIGID_LINK_REPRESENTATION.self)
          let _TEMP2 =  !_TEMP1
          return _TEMP2 }
      let _TEMP4 = SDAI.SIZEOF(_TEMP3)
      let _TEMP5 = _TEMP4 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      return _TEMP5
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(T_X: SDAI.BOOLEAN? , T_Y: SDAI.BOOLEAN? , T_Z: SDAI.BOOLEAN? , 
                R_X: SDAI.BOOLEAN? , R_Y: SDAI.BOOLEAN? , R_Z: SDAI.BOOLEAN? ) {
      self._t_x = T_X
      self._t_y = T_Y
      self._t_z = T_Z
      self._r_x = R_X
      self._r_y = R_Y
      self._r_z = R_Z
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 6
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverOmittableParameter(as: SDAI.BOOLEAN.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p1) = exchangeStructure.recoverOmittableParameter(as: SDAI.BOOLEAN.self, from: parameters[1])
      else { exchangeStructure.add(errorContext: "while recovering parameter #1 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p2) = exchangeStructure.recoverOmittableParameter(as: SDAI.BOOLEAN.self, from: parameters[2])
      else { exchangeStructure.add(errorContext: "while recovering parameter #2 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p3) = exchangeStructure.recoverOmittableParameter(as: SDAI.BOOLEAN.self, from: parameters[3])
      else { exchangeStructure.add(errorContext: "while recovering parameter #3 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p4) = exchangeStructure.recoverOmittableParameter(as: SDAI.BOOLEAN.self, from: parameters[4])
      else { exchangeStructure.add(errorContext: "while recovering parameter #4 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p5) = exchangeStructure.recoverOmittableParameter(as: SDAI.BOOLEAN.self, from: parameters[5])
      else { exchangeStructure.add(errorContext: "while recovering parameter #5 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( T_X: p0, T_Y: p1, T_Z: p2, R_X: p3, R_Y: p4, R_Z: p5 )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY low_order_kinematic_pair
    SUPERTYPE OF ( 
        ONEOF ( 
            revolute_pair, 
            cylindrical_pair, 
            spherical_pair, 
            spherical_pair_with_pin, 
            planar_pair, 
            unconstrained_pair, 
            fully_constrained_pair, 
            prismatic_pair, 
            universal_pair, 
            low_order_kinematic_pair_with_range ) )
    SUBTYPE OF ( kinematic_pair );
      t_x  : BOOLEAN;
      t_y  : BOOLEAN;
      t_z  : BOOLEAN;
      r_x  : BOOLEAN;
      r_y  : BOOLEAN;
      r_z  : BOOLEAN;
    WHERE
      wr1: ( SIZEOF( QUERY ( lr <* SELF\kinematic_pair.associated_link_representations_1 | ( NOT ( 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.RIGID_LINK_REPRESENTATION'  IN TYPEOF( lr ) ) ) ) ) 
               = 0 );
      wr2: ( SIZEOF( QUERY ( lr <* SELF\kinematic_pair.associated_link_representations_2 | ( NOT ( 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.RIGID_LINK_REPRESENTATION'  IN TYPEOF( lr ) ) ) ) ) 
               = 0 );
  END_ENTITY; -- low_order_kinematic_pair (line:19451 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eLOW_ORDER_KINEMATIC_PAIR : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _low_order_kinematic_pair.self
    }
    public let partialEntity: _low_order_kinematic_pair

    //MARK: SUPERTYPES
    public let super_eREPRESENTATION_ITEM: eREPRESENTATION_ITEM 	// [1]
    public let super_eGEOMETRIC_REPRESENTATION_ITEM: eGEOMETRIC_REPRESENTATION_ITEM 	// [2]
    public let super_eITEM_DEFINED_TRANSFORMATION: eITEM_DEFINED_TRANSFORMATION 	// [3]
    public let super_eKINEMATIC_PAIR: eKINEMATIC_PAIR 	// [4]
    public var super_eLOW_ORDER_KINEMATIC_PAIR: eLOW_ORDER_KINEMATIC_PAIR { return self } 	// [5]

    //MARK: SUBTYPES
    public var sub_ePLANAR_PAIR_WITH_RANGE: ePLANAR_PAIR_WITH_RANGE? {	// [6]
      return self.complexEntity.entityReference(ePLANAR_PAIR_WITH_RANGE.self)
    }

    public var sub_ePLANAR_PAIR: ePLANAR_PAIR? {	// [7]
      return self.complexEntity.entityReference(ePLANAR_PAIR.self)
    }

    public var sub_eREVOLUTE_PAIR_WITH_RANGE: eREVOLUTE_PAIR_WITH_RANGE? {	// [8]
      return self.complexEntity.entityReference(eREVOLUTE_PAIR_WITH_RANGE.self)
    }

    public var sub_eREVOLUTE_PAIR: eREVOLUTE_PAIR? {	// [9]
      return self.complexEntity.entityReference(eREVOLUTE_PAIR.self)
    }

    public var sub_eCYLINDRICAL_PAIR_WITH_RANGE: eCYLINDRICAL_PAIR_WITH_RANGE? {	// [10]
      return self.complexEntity.entityReference(eCYLINDRICAL_PAIR_WITH_RANGE.self)
    }

    public var sub_eCYLINDRICAL_PAIR: eCYLINDRICAL_PAIR? {	// [11]
      return self.complexEntity.entityReference(eCYLINDRICAL_PAIR.self)
    }

    public var sub_eSPHERICAL_PAIR_WITH_RANGE: eSPHERICAL_PAIR_WITH_RANGE? {	// [12]
      return self.complexEntity.entityReference(eSPHERICAL_PAIR_WITH_RANGE.self)
    }

    public var sub_eSPHERICAL_PAIR: eSPHERICAL_PAIR? {	// [13]
      return self.complexEntity.entityReference(eSPHERICAL_PAIR.self)
    }

    public var sub_eFULLY_CONSTRAINED_PAIR: eFULLY_CONSTRAINED_PAIR? {	// [14]
      return self.complexEntity.entityReference(eFULLY_CONSTRAINED_PAIR.self)
    }

    public var sub_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE: eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE? {	// [15]
      return self.complexEntity.entityReference(eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE.self)
    }

    public var sub_eHOMOKINETIC_PAIR: eHOMOKINETIC_PAIR? {	// [16]
      return self.complexEntity.entityReference(eHOMOKINETIC_PAIR.self)
    }

    public var sub_eUNIVERSAL_PAIR_WITH_RANGE: eUNIVERSAL_PAIR_WITH_RANGE? {	// [17]
      return self.complexEntity.entityReference(eUNIVERSAL_PAIR_WITH_RANGE.self)
    }

    public var sub_eUNIVERSAL_PAIR: eUNIVERSAL_PAIR? {	// [18]
      return self.complexEntity.entityReference(eUNIVERSAL_PAIR.self)
    }

    public var sub_eSPHERICAL_PAIR_WITH_PIN_AND_RANGE: eSPHERICAL_PAIR_WITH_PIN_AND_RANGE? {	// [19]
      return self.complexEntity.entityReference(eSPHERICAL_PAIR_WITH_PIN_AND_RANGE.self)
    }

    public var sub_eSPHERICAL_PAIR_WITH_PIN: eSPHERICAL_PAIR_WITH_PIN? {	// [20]
      return self.complexEntity.entityReference(eSPHERICAL_PAIR_WITH_PIN.self)
    }

    public var sub_eUNCONSTRAINED_PAIR: eUNCONSTRAINED_PAIR? {	// [21]
      return self.complexEntity.entityReference(eUNCONSTRAINED_PAIR.self)
    }

    public var sub_ePRISMATIC_PAIR_WITH_RANGE: ePRISMATIC_PAIR_WITH_RANGE? {	// [22]
      return self.complexEntity.entityReference(ePRISMATIC_PAIR_WITH_RANGE.self)
    }

    public var sub_ePRISMATIC_PAIR: ePRISMATIC_PAIR? {	// [23]
      return self.complexEntity.entityReference(ePRISMATIC_PAIR.self)
    }


    //MARK: ATTRIBUTES
    // UPPER_LIMIT_ACTUAL_TRANSLATION_X: (2 AMBIGUOUS REFs)

    // UPPER_LIMIT_ACTUAL_TRANSLATION_Y: (2 AMBIGUOUS REFs)

    // LOWER_LIMIT_ACTUAL_TRANSLATION_Y: (2 AMBIGUOUS REFs)

    // LOWER_LIMIT_ACTUAL_TRANSLATION_X: (2 AMBIGUOUS REFs)

    // UPPER_LIMIT_ROLL: (2 AMBIGUOUS REFs)

    // LOWER_LIMIT_YAW: (2 AMBIGUOUS REFs)

    // LOWER_LIMIT_ACTUAL_ROTATION: (3 AMBIGUOUS REFs)

    // UPPER_LIMIT_YAW: (2 AMBIGUOUS REFs)

    // UPPER_LIMIT_ACTUAL_ROTATION: (3 AMBIGUOUS REFs)

    // LOWER_LIMIT_ROLL: (2 AMBIGUOUS REFs)

    // UPPER_LIMIT_ACTUAL_TRANSLATION: (2 AMBIGUOUS REFs)

    // NAME: (3 AMBIGUOUS REFs)

    // LOWER_LIMIT_ACTUAL_TRANSLATION: (2 AMBIGUOUS REFs)

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSPHERICAL_PAIR_WITH_RANGE`` )
    public var LOWER_LIMIT_PITCH: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eSPHERICAL_PAIR_WITH_RANGE?.partialEntity._lower_limit_pitch
      }
      set(newValue) {
        guard let partial = sub_eSPHERICAL_PAIR_WITH_RANGE?.super_eSPHERICAL_PAIR_WITH_RANGE.partialEntity
          else { return }
        partial._lower_limit_pitch = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eITEM_DEFINED_TRANSFORMATION`` )
    public var DESCRIPTION: tTEXT?  {
      get {
        return super_eITEM_DEFINED_TRANSFORMATION.partialEntity._description
      }
      set(newValue) {
        let partial = super_eITEM_DEFINED_TRANSFORMATION.partialEntity
        partial._description = newValue
      }
    }

    /// __EXPLICIT(DYNAMIC)__ attribute
    /// - origin: SELF( ``eLOW_ORDER_KINEMATIC_PAIR`` )
    public var R_Y: SDAI.BOOLEAN {
      get {
        if let resolved = _low_order_kinematic_pair._r_y__provider(complex: self.complexEntity) {
          let value = resolved._r_y__getter(complex: self.complexEntity)
          return value
        }
        else {
          return SDAI.UNWRAP( self.partialEntity._r_y )
        }
      }
      set(newValue) {
        if let _ = _low_order_kinematic_pair._r_y__provider(complex: self.complexEntity) { return }

        let partial = self.partialEntity
        partial._r_y = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT(DYNAMIC)__ attribute
    /// - origin: SELF( ``eLOW_ORDER_KINEMATIC_PAIR`` )
    public var R_X: SDAI.BOOLEAN {
      get {
        if let resolved = _low_order_kinematic_pair._r_x__provider(complex: self.complexEntity) {
          let value = resolved._r_x__getter(complex: self.complexEntity)
          return value
        }
        else {
          return SDAI.UNWRAP( self.partialEntity._r_x )
        }
      }
      set(newValue) {
        if let _ = _low_order_kinematic_pair._r_x__provider(complex: self.complexEntity) { return }

        let partial = self.partialEntity
        partial._r_x = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT(DYNAMIC)__ attribute
    /// - origin: SELF( ``eLOW_ORDER_KINEMATIC_PAIR`` )
    public var R_Z: SDAI.BOOLEAN {
      get {
        if let resolved = _low_order_kinematic_pair._r_z__provider(complex: self.complexEntity) {
          let value = resolved._r_z__getter(complex: self.complexEntity)
          return value
        }
        else {
          return SDAI.UNWRAP( self.partialEntity._r_z )
        }
      }
      set(newValue) {
        if let _ = _low_order_kinematic_pair._r_z__provider(complex: self.complexEntity) { return }

        let partial = self.partialEntity
        partial._r_z = SDAI.UNWRAP(newValue)
      }
    }

    /// __INVERSE__ attribute
    /// observing ePAIR_REPRESENTATION_RELATIONSHIP .TRANSFORMATION_OPERATOR
    /// - origin: SUPER( ``eKINEMATIC_PAIR`` )
    public var LINK_REPRESENTATION_ASSOCIATIONS: SDAI.SET<ePAIR_REPRESENTATION_RELATIONSHIP>/*[1:nil]*/  {
      get {
        return SDAI.UNWRAP( super_eKINEMATIC_PAIR.partialEntity._link_representation_associations )
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE`` )
    public var UPPER_LIMIT_ACTUAL_TRANSLATION_Z: tLENGTH_MEASURE?  {
      get {
        return sub_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE?.partialEntity._upper_limit_actual_translation_z
      }
      set(newValue) {
        guard let partial = sub_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE?.super_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE
          .partialEntity else { return }
        partial._upper_limit_actual_translation_z = newValue
      }
    }

    /// __EXPLICIT REDEF__ attribute
    /// - origin: SUPER( ``eKINEMATIC_PAIR`` )
    public var TRANSFORM_ITEM_1: sRIGID_PLACEMENT {
      get {
        return SDAI.UNWRAP( sRIGID_PLACEMENT( super_eITEM_DEFINED_TRANSFORMATION.partialEntity
          ._transform_item_1 ) )
      }
      set(newValue) {
        let partial = super_eITEM_DEFINED_TRANSFORMATION.partialEntity
        partial._transform_item_1 = SDAI.UNWRAP(
          eREPRESENTATION_ITEM(newValue))
      }
    }

    /// __EXPLICIT REDEF__ attribute
    /// - origin: SUPER( ``eKINEMATIC_PAIR`` )
    public var TRANSFORM_ITEM_2: sRIGID_PLACEMENT {
      get {
        return SDAI.UNWRAP( sRIGID_PLACEMENT( super_eITEM_DEFINED_TRANSFORMATION.partialEntity
          ._transform_item_2 ) )
      }
      set(newValue) {
        let partial = super_eITEM_DEFINED_TRANSFORMATION.partialEntity
        partial._transform_item_2 = SDAI.UNWRAP(
          eREPRESENTATION_ITEM(newValue))
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eUNIVERSAL_PAIR_WITH_RANGE`` )
    public var LOWER_LIMIT_SECOND_ROTATION: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eUNIVERSAL_PAIR_WITH_RANGE?.partialEntity._lower_limit_second_rotation
      }
      set(newValue) {
        guard let partial = sub_eUNIVERSAL_PAIR_WITH_RANGE?.super_eUNIVERSAL_PAIR_WITH_RANGE.partialEntity
          else { return }
        partial._lower_limit_second_rotation = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eUNIVERSAL_PAIR_WITH_RANGE`` )
    public var UPPER_LIMIT_FIRST_ROTATION: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eUNIVERSAL_PAIR_WITH_RANGE?.partialEntity._upper_limit_first_rotation
      }
      set(newValue) {
        guard let partial = sub_eUNIVERSAL_PAIR_WITH_RANGE?.super_eUNIVERSAL_PAIR_WITH_RANGE.partialEntity
          else { return }
        partial._upper_limit_first_rotation = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE`` )
    public var LOWER_LIMIT_ACTUAL_TRANSLATION_Z: tLENGTH_MEASURE?  {
      get {
        return sub_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE?.partialEntity._lower_limit_actual_translation_z
      }
      set(newValue) {
        guard let partial = sub_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE?.super_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE
          .partialEntity else { return }
        partial._lower_limit_actual_translation_z = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eUNIVERSAL_PAIR`` )
    public var INPUT_SKEW_ANGLE: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eUNIVERSAL_PAIR?.partialEntity._input_skew_angle
      }
      set(newValue) {
        guard let partial = sub_eUNIVERSAL_PAIR?.super_eUNIVERSAL_PAIR.partialEntity else { return }
        partial._input_skew_angle = newValue
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eUNIVERSAL_PAIR`` )
    public var SKEW_ANGLE: tPLANE_ANGLE_MEASURE?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"SKEW_ANGLE") {
          return cached.value as! tPLANE_ANGLE_MEASURE? 
        }
        guard let origin = sub_eUNIVERSAL_PAIR else { return nil }
        let value = tPLANE_ANGLE_MEASURE(origin.partialEntity._skew_angle__getter(SELF: origin))
        updateCache(derivedAttributeName:"SKEW_ANGLE", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE`` )
    public var UPPER_LIMIT_ACTUAL_ROTATION_Y: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE?.partialEntity._upper_limit_actual_rotation_y
      }
      set(newValue) {
        guard let partial = sub_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE?.super_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE
          .partialEntity else { return }
        partial._upper_limit_actual_rotation_y = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE`` )
    public var UPPER_LIMIT_ACTUAL_ROTATION_X: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE?.partialEntity._upper_limit_actual_rotation_x
      }
      set(newValue) {
        guard let partial = sub_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE?.super_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE
          .partialEntity else { return }
        partial._upper_limit_actual_rotation_x = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE`` )
    public var UPPER_LIMIT_ACTUAL_ROTATION_Z: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE?.partialEntity._upper_limit_actual_rotation_z
      }
      set(newValue) {
        guard let partial = sub_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE?.super_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE
          .partialEntity else { return }
        partial._upper_limit_actual_rotation_z = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eKINEMATIC_PAIR`` )
    public var JOINT: eKINEMATIC_JOINT {
      get {
        return SDAI.UNWRAP( super_eKINEMATIC_PAIR.partialEntity._joint )
      }
      set(newValue) {
        let partial = super_eKINEMATIC_PAIR.partialEntity
        partial._joint = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE`` )
    public var LOWER_LIMIT_ACTUAL_ROTATION_X: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE?.partialEntity._lower_limit_actual_rotation_x
      }
      set(newValue) {
        guard let partial = sub_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE?.super_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE
          .partialEntity else { return }
        partial._lower_limit_actual_rotation_x = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE`` )
    public var LOWER_LIMIT_ACTUAL_ROTATION_Y: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE?.partialEntity._lower_limit_actual_rotation_y
      }
      set(newValue) {
        guard let partial = sub_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE?.super_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE
          .partialEntity else { return }
        partial._lower_limit_actual_rotation_y = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE`` )
    public var LOWER_LIMIT_ACTUAL_ROTATION_Z: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE?.partialEntity._lower_limit_actual_rotation_z
      }
      set(newValue) {
        guard let partial = sub_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE?.super_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE
          .partialEntity else { return }
        partial._lower_limit_actual_rotation_z = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eUNIVERSAL_PAIR_WITH_RANGE`` )
    public var LOWER_LIMIT_FIRST_ROTATION: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eUNIVERSAL_PAIR_WITH_RANGE?.partialEntity._lower_limit_first_rotation
      }
      set(newValue) {
        guard let partial = sub_eUNIVERSAL_PAIR_WITH_RANGE?.super_eUNIVERSAL_PAIR_WITH_RANGE.partialEntity
          else { return }
        partial._lower_limit_first_rotation = newValue
      }
    }

    /// __EXPLICIT(DYNAMIC)__ attribute
    /// - origin: SELF( ``eLOW_ORDER_KINEMATIC_PAIR`` )
    public var T_Z: SDAI.BOOLEAN {
      get {
        if let resolved = _low_order_kinematic_pair._t_z__provider(complex: self.complexEntity) {
          let value = resolved._t_z__getter(complex: self.complexEntity)
          return value
        }
        else {
          return SDAI.UNWRAP( self.partialEntity._t_z )
        }
      }
      set(newValue) {
        if let _ = _low_order_kinematic_pair._t_z__provider(complex: self.complexEntity) { return }

        let partial = self.partialEntity
        partial._t_z = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT(DYNAMIC)__ attribute
    /// - origin: SELF( ``eLOW_ORDER_KINEMATIC_PAIR`` )
    public var T_Y: SDAI.BOOLEAN {
      get {
        if let resolved = _low_order_kinematic_pair._t_y__provider(complex: self.complexEntity) {
          let value = resolved._t_y__getter(complex: self.complexEntity)
          return value
        }
        else {
          return SDAI.UNWRAP( self.partialEntity._t_y )
        }
      }
      set(newValue) {
        if let _ = _low_order_kinematic_pair._t_y__provider(complex: self.complexEntity) { return }

        let partial = self.partialEntity
        partial._t_y = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT(DYNAMIC)__ attribute
    /// - origin: SELF( ``eLOW_ORDER_KINEMATIC_PAIR`` )
    public var T_X: SDAI.BOOLEAN {
      get {
        if let resolved = _low_order_kinematic_pair._t_x__provider(complex: self.complexEntity) {
          let value = resolved._t_x__getter(complex: self.complexEntity)
          return value
        }
        else {
          return SDAI.UNWRAP( self.partialEntity._t_x )
        }
      }
      set(newValue) {
        if let _ = _low_order_kinematic_pair._t_x__provider(complex: self.complexEntity) { return }

        let partial = self.partialEntity
        partial._t_x = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSPHERICAL_PAIR_WITH_RANGE`` )
    public var UPPER_LIMIT_PITCH: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eSPHERICAL_PAIR_WITH_RANGE?.partialEntity._upper_limit_pitch
      }
      set(newValue) {
        guard let partial = sub_eSPHERICAL_PAIR_WITH_RANGE?.super_eSPHERICAL_PAIR_WITH_RANGE.partialEntity
          else { return }
        partial._upper_limit_pitch = newValue
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUPER( ``eKINEMATIC_PAIR`` )
    public var ASSOCIATED_LINK_REPRESENTATIONS_1: (SDAI.SET<eKINEMATIC_LINK_REPRESENTATION>/*[1:nil]*/ )?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"ASSOCIATED_LINK_REPRESENTATIONS_1") {
          return cached.value as! (SDAI.SET<eKINEMATIC_LINK_REPRESENTATION>/*[1:nil]*/ )? 
        }
        let origin = super_eKINEMATIC_PAIR
        let value = SDAI.SET<eKINEMATIC_LINK_REPRESENTATION>(
          origin.partialEntity._associated_link_representations_1__getter(SELF: origin))
        updateCache(derivedAttributeName:"ASSOCIATED_LINK_REPRESENTATIONS_1", value:value)
        return value
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUPER( ``eKINEMATIC_PAIR`` )
    public var ASSOCIATED_LINK_REPRESENTATIONS_2: (SDAI.SET<eKINEMATIC_LINK_REPRESENTATION>/*[1:nil]*/ )?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"ASSOCIATED_LINK_REPRESENTATIONS_2") {
          return cached.value as! (SDAI.SET<eKINEMATIC_LINK_REPRESENTATION>/*[1:nil]*/ )? 
        }
        let origin = super_eKINEMATIC_PAIR
        let value = SDAI.SET<eKINEMATIC_LINK_REPRESENTATION>(
          origin.partialEntity._associated_link_representations_2__getter(SELF: origin))
        updateCache(derivedAttributeName:"ASSOCIATED_LINK_REPRESENTATIONS_2", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eUNIVERSAL_PAIR_WITH_RANGE`` )
    public var UPPER_LIMIT_SECOND_ROTATION: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eUNIVERSAL_PAIR_WITH_RANGE?.partialEntity._upper_limit_second_rotation
      }
      set(newValue) {
        guard let partial = sub_eUNIVERSAL_PAIR_WITH_RANGE?.super_eUNIVERSAL_PAIR_WITH_RANGE.partialEntity
          else { return }
        partial._upper_limit_second_rotation = newValue
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUPER( ``eGEOMETRIC_REPRESENTATION_ITEM`` )
    public var DIM: tDIMENSION_COUNT?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"DIM") {
          return cached.value as! tDIMENSION_COUNT? 
        }
        let origin = super_eGEOMETRIC_REPRESENTATION_ITEM
        let value = tDIMENSION_COUNT(origin.partialEntity._dim__getter(SELF: origin))
        updateCache(derivedAttributeName:"DIM", value:value)
        return value
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_low_order_kinematic_pair.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eREPRESENTATION_ITEM.self) else { return nil }
      self.super_eREPRESENTATION_ITEM = super1

      guard let super2 = complexEntity?.entityReference(eGEOMETRIC_REPRESENTATION_ITEM.self) else { return nil }
      self.super_eGEOMETRIC_REPRESENTATION_ITEM = super2

      guard let super3 = complexEntity?.entityReference(eITEM_DEFINED_TRANSFORMATION.self) else { return nil }
      self.super_eITEM_DEFINED_TRANSFORMATION = super3

      guard let super4 = complexEntity?.entityReference(eKINEMATIC_PAIR.self) else { return nil }
      self.super_eKINEMATIC_PAIR = super4

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _low_order_kinematic_pair.WHERE_wr1(SELF: instance)
      result[prefix2 + " .WHERE_wr2"] = _low_order_kinematic_pair.WHERE_wr2(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "LOW_ORDER_KINEMATIC_PAIR", type: self, explicitAttributeCount: 6)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eREPRESENTATION_ITEM.self)
      entityDef.add(supertype: eGEOMETRIC_REPRESENTATION_ITEM.self)
      entityDef.add(supertype: eITEM_DEFINED_TRANSFORMATION.self)
      entityDef.add(supertype: eKINEMATIC_PAIR.self)
      entityDef.add(supertype: eLOW_ORDER_KINEMATIC_PAIR.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "LOWER_LIMIT_PITCH", keyPath: \eLOW_ORDER_KINEMATIC_PAIR.LOWER_LIMIT_PITCH, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "DESCRIPTION", keyPath: \eLOW_ORDER_KINEMATIC_PAIR.DESCRIPTION, 
        kind: .explicitOptional, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "R_Y", keyPath: \eLOW_ORDER_KINEMATIC_PAIR.R_Y, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "R_X", keyPath: \eLOW_ORDER_KINEMATIC_PAIR.R_X, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "R_Z", keyPath: \eLOW_ORDER_KINEMATIC_PAIR.R_Z, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "LINK_REPRESENTATION_ASSOCIATIONS", keyPath: \eLOW_ORDER_KINEMATIC_PAIR.LINK_REPRESENTATION_ASSOCIATIONS, 
        kind: .inverse, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "UPPER_LIMIT_ACTUAL_TRANSLATION_Z", keyPath: \eLOW_ORDER_KINEMATIC_PAIR.UPPER_LIMIT_ACTUAL_TRANSLATION_Z, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "TRANSFORM_ITEM_1", keyPath: \eLOW_ORDER_KINEMATIC_PAIR.TRANSFORM_ITEM_1, 
        kind: .explicitRedeclaring, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "TRANSFORM_ITEM_2", keyPath: \eLOW_ORDER_KINEMATIC_PAIR.TRANSFORM_ITEM_2, 
        kind: .explicitRedeclaring, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "LOWER_LIMIT_SECOND_ROTATION", keyPath: \eLOW_ORDER_KINEMATIC_PAIR.LOWER_LIMIT_SECOND_ROTATION, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "UPPER_LIMIT_FIRST_ROTATION", keyPath: \eLOW_ORDER_KINEMATIC_PAIR.UPPER_LIMIT_FIRST_ROTATION, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "LOWER_LIMIT_ACTUAL_TRANSLATION_Z", keyPath: \eLOW_ORDER_KINEMATIC_PAIR.LOWER_LIMIT_ACTUAL_TRANSLATION_Z, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "INPUT_SKEW_ANGLE", keyPath: \eLOW_ORDER_KINEMATIC_PAIR.INPUT_SKEW_ANGLE, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "SKEW_ANGLE", keyPath: \eLOW_ORDER_KINEMATIC_PAIR.SKEW_ANGLE, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "UPPER_LIMIT_ACTUAL_ROTATION_Y", keyPath: \eLOW_ORDER_KINEMATIC_PAIR.UPPER_LIMIT_ACTUAL_ROTATION_Y, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "UPPER_LIMIT_ACTUAL_ROTATION_X", keyPath: \eLOW_ORDER_KINEMATIC_PAIR.UPPER_LIMIT_ACTUAL_ROTATION_X, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "UPPER_LIMIT_ACTUAL_ROTATION_Z", keyPath: \eLOW_ORDER_KINEMATIC_PAIR.UPPER_LIMIT_ACTUAL_ROTATION_Z, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "JOINT", keyPath: \eLOW_ORDER_KINEMATIC_PAIR.JOINT, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "LOWER_LIMIT_ACTUAL_ROTATION_X", keyPath: \eLOW_ORDER_KINEMATIC_PAIR.LOWER_LIMIT_ACTUAL_ROTATION_X, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "LOWER_LIMIT_ACTUAL_ROTATION_Y", keyPath: \eLOW_ORDER_KINEMATIC_PAIR.LOWER_LIMIT_ACTUAL_ROTATION_Y, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "LOWER_LIMIT_ACTUAL_ROTATION_Z", keyPath: \eLOW_ORDER_KINEMATIC_PAIR.LOWER_LIMIT_ACTUAL_ROTATION_Z, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "LOWER_LIMIT_FIRST_ROTATION", keyPath: \eLOW_ORDER_KINEMATIC_PAIR.LOWER_LIMIT_FIRST_ROTATION, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "T_Z", keyPath: \eLOW_ORDER_KINEMATIC_PAIR.T_Z, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "T_Y", keyPath: \eLOW_ORDER_KINEMATIC_PAIR.T_Y, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "T_X", keyPath: \eLOW_ORDER_KINEMATIC_PAIR.T_X, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "UPPER_LIMIT_PITCH", keyPath: \eLOW_ORDER_KINEMATIC_PAIR.UPPER_LIMIT_PITCH, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "ASSOCIATED_LINK_REPRESENTATIONS_1", keyPath: \eLOW_ORDER_KINEMATIC_PAIR.ASSOCIATED_LINK_REPRESENTATIONS_1, 
        kind: .derived, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "ASSOCIATED_LINK_REPRESENTATIONS_2", keyPath: \eLOW_ORDER_KINEMATIC_PAIR.ASSOCIATED_LINK_REPRESENTATIONS_2, 
        kind: .derived, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "UPPER_LIMIT_SECOND_ROTATION", keyPath: \eLOW_ORDER_KINEMATIC_PAIR.UPPER_LIMIT_SECOND_ROTATION, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "DIM", keyPath: \eLOW_ORDER_KINEMATIC_PAIR.DIM, 
        kind: .derived, source: .superEntity, mayYieldEntityReference: false)

      return entityDef
    }

  }
}

//MARK: - Entity Dynamic Attribute Protocols
internal protocol eLOW_ORDER_KINEMATIC_PAIR__T_X__provider {
  func _t_x__getter(complex: SDAI.ComplexEntity) -> SDAI.BOOLEAN
}
internal protocol eLOW_ORDER_KINEMATIC_PAIR__T_Y__provider {
  func _t_y__getter(complex: SDAI.ComplexEntity) -> SDAI.BOOLEAN
}
internal protocol eLOW_ORDER_KINEMATIC_PAIR__T_Z__provider {
  func _t_z__getter(complex: SDAI.ComplexEntity) -> SDAI.BOOLEAN
}
internal protocol eLOW_ORDER_KINEMATIC_PAIR__R_X__provider {
  func _r_x__getter(complex: SDAI.ComplexEntity) -> SDAI.BOOLEAN
}
internal protocol eLOW_ORDER_KINEMATIC_PAIR__R_Y__provider {
  func _r_y__getter(complex: SDAI.ComplexEntity) -> SDAI.BOOLEAN
}
internal protocol eLOW_ORDER_KINEMATIC_PAIR__R_Z__provider {
  func _r_z__getter(complex: SDAI.ComplexEntity) -> SDAI.BOOLEAN
}
