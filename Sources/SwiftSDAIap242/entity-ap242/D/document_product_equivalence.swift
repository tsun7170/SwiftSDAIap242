/* file: document_product_equivalence.swift 	 generated: Sat Aug 14 13:46:02 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY document_product_equivalence
    SUBTYPE OF ( document_product_association );
    WHERE
      wr1: ( SELF\document_product_association.name = 'equivalence' );
      wr2: ( ( NOT ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PRODUCT' IN TYPEOF( SELF\
               document_product_association.related_product ) ) ) OR ( ( SELF\document_product_association.
               relating_document.kind.product_data_type = 'configuration controlled document' ) AND ( 
               SIZEOF( QUERY ( prpc <* USEDIN( SELF\document_product_association.related_product, 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PRODUCT_RELATED_PRODUCT_CATEGORY.PRODUCTS'  )
               | ( prpc.name = 'document' ) ) ) = 1 ) ) );
      wr3: ( ( NOT ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PRODUCT_DEFINITION_FORMATION' IN 
               TYPEOF( SELF.related_product ) ) ) OR ( ( SELF\document_product_association.relating_document.
               kind.product_data_type = 'configuration controlled document version' ) AND ( SIZEOF( 
               QUERY ( prpc <* USEDIN( SELF.related_product\product_definition_formation.of_product, 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PRODUCT_RELATED_PRODUCT_CATEGORY.PRODUCTS'  )
               | ( prpc.name = 'document' ) ) ) = 1 ) ) );
      wr4: ( ( NOT ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PRODUCT_DEFINITION' IN TYPEOF( SELF.
               related_product ) ) ) OR ( ( SELF\document_product_association.relating_document.kind.
               product_data_type = 'configuration controlled document definition' ) AND ( SIZEOF( 
               QUERY ( prpc <* USEDIN( SELF\document_product_association.related_product\product_definition.
               formation.of_product, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
               + 'PRODUCT_RELATED_PRODUCT_CATEGORY.PRODUCTS'  ) | ( prpc.name = 'document' ) ) ) = 1 ) ) );
  END_ENTITY; -- document_product_equivalence (line:12686 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	document_product_association
    ATTR:  name,	TYPE: label -- EXPLICIT

    ATTR:  description,	TYPE: OPTIONAL text -- EXPLICIT

    ATTR:  relating_document,	TYPE: document -- EXPLICIT

    ATTR:  related_product,	TYPE: product_or_formation_or_definition -- EXPLICIT


  ENTITY(SELF)	document_product_equivalence
    (no local attributes)

*/


//MARK: - Partial Entity
  public final class _document_product_equivalence : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eDOCUMENT_PRODUCT_EQUIVALENCE.self
    }

    //ATTRIBUTES
    // (no local attributes)

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: eDOCUMENT_PRODUCT_EQUIVALENCE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.GROUP_REF(eDOCUMENT_PRODUCT_ASSOCIATION.self)
      let _TEMP2 = _TEMP1?.NAME
      let _TEMP3 = _TEMP2 .==. SDAI.FORCE_OPTIONAL(SDAI.STRING("equivalence"))
      return _TEMP3
    }
    public static func WHERE_wr2(SELF: eDOCUMENT_PRODUCT_EQUIVALENCE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.TYPEOF(SELF.GROUP_REF(eDOCUMENT_PRODUCT_ASSOCIATION.self)?.RELATED_PRODUCT, 
        IS: ePRODUCT.self)
      let _TEMP2 =  !_TEMP1
      let _TEMP3 = SELF.GROUP_REF(eDOCUMENT_PRODUCT_ASSOCIATION.self)
      let _TEMP4 = _TEMP3?.RELATING_DOCUMENT
      let _TEMP5 = _TEMP4?.KIND
      let _TEMP6 = _TEMP5?.PRODUCT_DATA_TYPE
      let _TEMP7 = _TEMP6 .==. SDAI.FORCE_OPTIONAL(SDAI.STRING("configuration controlled document"))
      let _TEMP8 = SELF.GROUP_REF(eDOCUMENT_PRODUCT_ASSOCIATION.self)
      let _TEMP9 = _TEMP8?.RELATED_PRODUCT
      let _TEMP10 = SDAI.USEDIN(T: _TEMP9, ROLE: \AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF
        .ePRODUCT_RELATED_PRODUCT_CATEGORY.PRODUCTS)
      let _TEMP11 = _TEMP10?.QUERY{ PRPC in 

          let _TEMP1 = /*runtime*/PRPC.NAME
          let _TEMP2 = SDAI.FORCE_OPTIONAL(/*runtime*/_TEMP1) .==. SDAI.FORCE_OPTIONAL(SDAI.STRING("document"))
          return _TEMP2 }
      let _TEMP12 = SDAI.SIZEOF(_TEMP11)
      let _TEMP13 = _TEMP12 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
      let _TEMP14 = _TEMP7 && _TEMP13
      let _TEMP15 = _TEMP2 || _TEMP14
      return _TEMP15
    }
    public static func WHERE_wr3(SELF: eDOCUMENT_PRODUCT_EQUIVALENCE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.TYPEOF(SELF.RELATED_PRODUCT, IS: ePRODUCT_DEFINITION_FORMATION.self)
      let _TEMP2 =  !_TEMP1
      let _TEMP3 = SELF.GROUP_REF(eDOCUMENT_PRODUCT_ASSOCIATION.self)
      let _TEMP4 = _TEMP3?.RELATING_DOCUMENT
      let _TEMP5 = _TEMP4?.KIND
      let _TEMP6 = _TEMP5?.PRODUCT_DATA_TYPE
      let _TEMP7 = _TEMP6 .==. SDAI.FORCE_OPTIONAL(SDAI.STRING("configuration controlled document version"))
      let _TEMP8 = SELF.RELATED_PRODUCT
      let _TEMP9 = _TEMP8.GROUP_REF(ePRODUCT_DEFINITION_FORMATION.self)
      let _TEMP10 = _TEMP9?.OF_PRODUCT
      let _TEMP11 = SDAI.USEDIN(T: _TEMP10, ROLE: \AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF
        .ePRODUCT_RELATED_PRODUCT_CATEGORY.PRODUCTS)
      let _TEMP12 = _TEMP11?.QUERY{ PRPC in 

          let _TEMP1 = /*runtime*/PRPC.NAME
          let _TEMP2 = SDAI.FORCE_OPTIONAL(/*runtime*/_TEMP1) .==. SDAI.FORCE_OPTIONAL(SDAI.STRING("document"))
          return _TEMP2 }
      let _TEMP13 = SDAI.SIZEOF(_TEMP12)
      let _TEMP14 = _TEMP13 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
      let _TEMP15 = _TEMP7 && _TEMP14
      let _TEMP16 = _TEMP2 || _TEMP15
      return _TEMP16
    }
    public static func WHERE_wr4(SELF: eDOCUMENT_PRODUCT_EQUIVALENCE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.TYPEOF(SELF.RELATED_PRODUCT, IS: ePRODUCT_DEFINITION.self)
      let _TEMP2 =  !_TEMP1
      let _TEMP3 = SELF.GROUP_REF(eDOCUMENT_PRODUCT_ASSOCIATION.self)
      let _TEMP4 = _TEMP3?.RELATING_DOCUMENT
      let _TEMP5 = _TEMP4?.KIND
      let _TEMP6 = _TEMP5?.PRODUCT_DATA_TYPE
      let _TEMP7 = _TEMP6 .==. SDAI.FORCE_OPTIONAL(SDAI.STRING("configuration controlled document definition"))
      let _TEMP8 = SELF.GROUP_REF(eDOCUMENT_PRODUCT_ASSOCIATION.self)
      let _TEMP9 = _TEMP8?.RELATED_PRODUCT
      let _TEMP10 = _TEMP9?.GROUP_REF(ePRODUCT_DEFINITION.self)
      let _TEMP11 = _TEMP10?.FORMATION
      let _TEMP12 = _TEMP11?.OF_PRODUCT
      let _TEMP13 = SDAI.USEDIN(T: _TEMP12, ROLE: \AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF
        .ePRODUCT_RELATED_PRODUCT_CATEGORY.PRODUCTS)
      let _TEMP14 = _TEMP13?.QUERY{ PRPC in 

          let _TEMP1 = /*runtime*/PRPC.NAME
          let _TEMP2 = SDAI.FORCE_OPTIONAL(/*runtime*/_TEMP1) .==. SDAI.FORCE_OPTIONAL(SDAI.STRING("document"))
          return _TEMP2 }
      let _TEMP15 = SDAI.SIZEOF(_TEMP14)
      let _TEMP16 = _TEMP15 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
      let _TEMP17 = _TEMP7 && _TEMP16
      let _TEMP18 = _TEMP2 || _TEMP17
      return _TEMP18
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init() {
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 0
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      self.init( )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY document_product_equivalence
    SUBTYPE OF ( document_product_association );
    WHERE
      wr1: ( SELF\document_product_association.name = 'equivalence' );
      wr2: ( ( NOT ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PRODUCT' IN TYPEOF( SELF\
               document_product_association.related_product ) ) ) OR ( ( SELF\document_product_association.
               relating_document.kind.product_data_type = 'configuration controlled document' ) AND ( 
               SIZEOF( QUERY ( prpc <* USEDIN( SELF\document_product_association.related_product, 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PRODUCT_RELATED_PRODUCT_CATEGORY.PRODUCTS'  )
               | ( prpc.name = 'document' ) ) ) = 1 ) ) );
      wr3: ( ( NOT ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PRODUCT_DEFINITION_FORMATION' IN 
               TYPEOF( SELF.related_product ) ) ) OR ( ( SELF\document_product_association.relating_document.
               kind.product_data_type = 'configuration controlled document version' ) AND ( SIZEOF( 
               QUERY ( prpc <* USEDIN( SELF.related_product\product_definition_formation.of_product, 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PRODUCT_RELATED_PRODUCT_CATEGORY.PRODUCTS'  )
               | ( prpc.name = 'document' ) ) ) = 1 ) ) );
      wr4: ( ( NOT ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PRODUCT_DEFINITION' IN TYPEOF( SELF.
               related_product ) ) ) OR ( ( SELF\document_product_association.relating_document.kind.
               product_data_type = 'configuration controlled document definition' ) AND ( SIZEOF( 
               QUERY ( prpc <* USEDIN( SELF\document_product_association.related_product\product_definition.
               formation.of_product, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
               + 'PRODUCT_RELATED_PRODUCT_CATEGORY.PRODUCTS'  ) | ( prpc.name = 'document' ) ) ) = 1 ) ) );
  END_ENTITY; -- document_product_equivalence (line:12686 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eDOCUMENT_PRODUCT_EQUIVALENCE : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _document_product_equivalence.self
    }
    public let partialEntity: _document_product_equivalence

    //MARK: SUPERTYPES
    public let super_eDOCUMENT_PRODUCT_ASSOCIATION: eDOCUMENT_PRODUCT_ASSOCIATION 	// [1]
    public var super_eDOCUMENT_PRODUCT_EQUIVALENCE: eDOCUMENT_PRODUCT_EQUIVALENCE { return self } 	// [2]

    //MARK: SUBTYPES

    //MARK: ATTRIBUTES
    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eDOCUMENT_PRODUCT_ASSOCIATION`` )
    public var DESCRIPTION: tTEXT?  {
      get {
        return super_eDOCUMENT_PRODUCT_ASSOCIATION.partialEntity._description
      }
      set(newValue) {
        let partial = super_eDOCUMENT_PRODUCT_ASSOCIATION.partialEntity
        partial._description = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eDOCUMENT_PRODUCT_ASSOCIATION`` )
    public var RELATED_PRODUCT: sPRODUCT_OR_FORMATION_OR_DEFINITION {
      get {
        return SDAI.UNWRAP( super_eDOCUMENT_PRODUCT_ASSOCIATION.partialEntity._related_product )
      }
      set(newValue) {
        let partial = super_eDOCUMENT_PRODUCT_ASSOCIATION.partialEntity
        partial._related_product = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eDOCUMENT_PRODUCT_ASSOCIATION`` )
    public var RELATING_DOCUMENT: eDOCUMENT {
      get {
        return SDAI.UNWRAP( super_eDOCUMENT_PRODUCT_ASSOCIATION.partialEntity._relating_document )
      }
      set(newValue) {
        let partial = super_eDOCUMENT_PRODUCT_ASSOCIATION.partialEntity
        partial._relating_document = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eDOCUMENT_PRODUCT_ASSOCIATION`` )
    public var NAME: tLABEL {
      get {
        return SDAI.UNWRAP( super_eDOCUMENT_PRODUCT_ASSOCIATION.partialEntity._name )
      }
      set(newValue) {
        let partial = super_eDOCUMENT_PRODUCT_ASSOCIATION.partialEntity
        partial._name = SDAI.UNWRAP(newValue)
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_document_product_equivalence.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eDOCUMENT_PRODUCT_ASSOCIATION.self) else { return nil }
      self.super_eDOCUMENT_PRODUCT_ASSOCIATION = super1

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _document_product_equivalence.WHERE_wr1(SELF: instance)
      result[prefix2 + " .WHERE_wr2"] = _document_product_equivalence.WHERE_wr2(SELF: instance)
      result[prefix2 + " .WHERE_wr3"] = _document_product_equivalence.WHERE_wr3(SELF: instance)
      result[prefix2 + " .WHERE_wr4"] = _document_product_equivalence.WHERE_wr4(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "DOCUMENT_PRODUCT_EQUIVALENCE", type: self, explicitAttributeCount: 0)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eDOCUMENT_PRODUCT_ASSOCIATION.self)
      entityDef.add(supertype: eDOCUMENT_PRODUCT_EQUIVALENCE.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "DESCRIPTION", keyPath: \eDOCUMENT_PRODUCT_EQUIVALENCE.DESCRIPTION, 
        kind: .explicitOptional, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "RELATED_PRODUCT", keyPath: \eDOCUMENT_PRODUCT_EQUIVALENCE.RELATED_PRODUCT, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "RELATING_DOCUMENT", keyPath: \eDOCUMENT_PRODUCT_EQUIVALENCE.RELATING_DOCUMENT, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "NAME", keyPath: \eDOCUMENT_PRODUCT_EQUIVALENCE.NAME, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)

      return entityDef
    }

  }
}
