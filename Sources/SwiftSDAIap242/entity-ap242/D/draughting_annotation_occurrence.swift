/* file: draughting_annotation_occurrence.swift 	 generated: Sun Oct 31 15:32:10 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY draughting_annotation_occurrence
    SUBTYPE OF ( annotation_occurrence );
    WHERE
      wr1 : ( ( NOT ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ANNOTATION_CURVE_OCCURRENCE' IN 
                TYPEOF( SELF ) ) ) OR ( SIZEOF( QUERY ( sty <* SELF.styles | ( NOT ( ( SIZEOF( sty.styles ) =
                1 ) AND ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CURVE_STYLE' IN TYPEOF( sty.styles
                [1] ) ) ) ) ) ) = 0 ) );
      wr2 : ( ( NOT ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ANNOTATION_FILL_AREA_OCCURRENCE' IN 
                TYPEOF( SELF ) ) ) OR ( SIZEOF( QUERY ( sty <* SELF.styles | ( NOT ( ( SIZEOF( sty.styles ) =
                1 ) AND ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.FILL_AREA_STYLE' IN TYPEOF( sty.
                styles[1] ) ) ) ) ) ) = 0 ) );
      wr3 : ( ( NOT ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ANNOTATION_FILL_AREA_OCCURRENCE' IN 
                TYPEOF( SELF ) ) ) OR ( SIZEOF( QUERY ( bound <* SELF.item\annotation_fill_area.boundaries | 
                ( NOT ( SIZEOF( QUERY ( si <* USEDIN( bound, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
                + 'STYLED_ITEM.ITEM'  ) | ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
                + 'ANNOTATION_CURVE_OCCURRENCE'  IN TYPEOF( si ) ) ) ) > 0 ) ) ) ) = 0 ) );
      wr4 : ( ( NOT ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ANNOTATION_SYMBOL_OCCURRENCE' IN 
                TYPEOF( SELF ) ) ) OR ( SIZEOF( QUERY ( sty <* SELF.styles | ( NOT ( ( SIZEOF( sty.styles ) =
                1 ) AND ( SIZEOF( TYPEOF( sty.styles[1] ) * [ 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
                + 'SYMBOL_STYLE' , 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.NULL_STYLE'] ) = 1 ) ) ) ) ) 
                = 0 ) );
      wr5 : ( ( NOT ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ANNOTATION_SYMBOL_OCCURRENCE' IN 
                TYPEOF( SELF ) ) AND ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ANNOTATION_SYMBOL' IN
                TYPEOF( SELF.item ) ) ) ) OR ( SIZEOF( [ 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
                + 'DRAUGHTING_SYMBOL_REPRESENTATION' , 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
                + 'DRAUGHTING_SUBFIGURE_REPRESENTATION' ] * TYPEOF( SELF.item\mapped_item.mapping_source.
                mapped_representation ) ) = 1 ) );
      wr6 : ( ( NOT ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ANNOTATION_TEXT_OCCURRENCE' IN 
                TYPEOF( SELF ) ) ) OR ( SIZEOF( QUERY ( sty <* SELF.styles | ( NOT ( ( SIZEOF( sty.styles ) =
                1 ) AND ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.TEXT_STYLE' IN TYPEOF( sty.styles[
                1] ) ) ) ) ) ) = 0 ) );
      wr7 : ( ( NOT ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ANNOTATION_TEXT_OCCURRENCE' IN 
                TYPEOF( SELF ) ) ) OR ( SIZEOF( TYPEOF( SELF.item ) * [
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.COMPOSITE_TEXT' , 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.TEXT_LITERAL' ] ) = 1 ) );
      wr8 : ( ( NOT ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ANNOTATION_TEXT_OCCURRENCE' IN 
                TYPEOF( SELF ) ) AND ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.COMPOSITE_TEXT' IN 
                TYPEOF( SELF.item ) ) ) ) OR ( SIZEOF( QUERY ( tl <* SELF.item\composite_text.collected_text
                | ( NOT ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.TEXT_LITERAL' IN TYPEOF( tl ) ) ) ) ) 
                = 0 ) );
      wr9 : ( ( NOT ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ANNOTATION_TEXT_OCCURRENCE' IN 
                TYPEOF( SELF ) ) AND ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.TEXT_LITERAL' IN 
                TYPEOF( SELF.item ) ) ) ) OR ( SELF.item\text_literal.alignment IN [ 'baseline left', 
                'baseline centre' , 'baseline right'] ) );
      wr10: ( ( NOT ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ANNOTATION_TEXT_OCCURRENCE' IN 
                TYPEOF( SELF ) ) AND ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.COMPOSITE_TEXT' IN 
                TYPEOF( SELF.item ) ) ) ) OR ( SIZEOF( QUERY ( tl <* QUERY ( text <* SELF.item\composite_text
                .collected_text | ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.TEXT_LITERAL' IN 
                TYPEOF( text ) ) ) | ( NOT ( tl\text_literal.alignment IN [ 'baseline left', 'baseline centre', 
                'baseline right' ] ) ) ) ) = 0 ) );
      wr11: ( ( NOT ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ANNOTATION_TEXT_OCCURRENCE' IN 
                TYPEOF( SELF ) ) AND ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.COMPOSITE_TEXT' IN 
                TYPEOF( SELF.item ) ) ) ) OR check_text_alignment( SELF.item ) );
      wr12: ( ( NOT ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ANNOTATION_TEXT_OCCURRENCE' IN 
                TYPEOF( SELF ) ) AND ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.COMPOSITE_TEXT' IN 
                TYPEOF( SELF.item ) ) ) ) OR check_text_font( SELF.item ) );
      wr13: ( ( NOT ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ANNOTATION_TEXT_OCCURRENCE' IN 
                TYPEOF( SELF ) ) AND ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.COMPOSITE_TEXT' IN 
                TYPEOF( SELF.item ) ) ) ) OR ( SIZEOF( QUERY ( tl <* QUERY ( text <* SELF.item\composite_text
                .collected_text | ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.TEXT_LITERAL' IN 
                TYPEOF( text ) ) ) | ( NOT ( SIZEOF( TYPEOF( tl ) * [
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.TEXT_LITERAL_WITH_BLANKING_BOX' , 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.TEXT_LITERAL_WITH_ASSOCIATED_CURVES' ] ) = 0 ) ) ) ) 
                = 0 ) );
      wr14: ( ( NOT ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ANNOTATION_TEXT_OCCURRENCE' IN 
                TYPEOF( SELF ) ) AND ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
                + 'TEXT_LITERAL_WITH_ASSOCIATED_CURVES'  IN TYPEOF( SELF.item ) ) ) ) OR ( SIZEOF( 
                QUERY ( crv <* SELF.item\text_literal_with_associated_curves.associated_curves | ( NOT ( 
                SIZEOF( QUERY ( si <* USEDIN( crv, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
                + 'STYLED_ITEM.ITEM'  ) | ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
                + 'ANNOTATION_CURVE_OCCURRENCE'  IN TYPEOF( si ) ) ) ) > 0 ) ) ) ) = 0 ) );
      wr15: ( ( NOT ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ANNOTATION_TEXT_OCCURRENCE' IN 
                TYPEOF( SELF ) ) AND ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
                + 'COMPOSITE_TEXT_WITH_ASSOCIATED_CURVES'  IN TYPEOF( SELF.item ) ) ) ) OR ( SIZEOF( 
                QUERY ( crv <* SELF.item\composite_text_with_associated_curves.associated_curves | ( NOT ( 
                SIZEOF( QUERY ( si <* USEDIN( crv, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
                + 'STYLED_ITEM.ITEM'  ) | ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
                + 'ANNOTATION_CURVE_OCCURRENCE'  IN TYPEOF( si ) ) ) ) > 0 ) ) ) ) = 0 ) );
      wr16: ( SIZEOF( QUERY ( cs <* QUERY ( sty <* SELF.styles | ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CURVE_STYLE'  IN TYPEOF( sty.styles[1] ) ) )
                | ( NOT ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.LENGTH_MEASURE_WITH_UNIT' IN 
                TYPEOF( cs.styles[1]\curve_style.curve_width ) ) AND ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.POSITIVE_LENGTH_MEASURE'  IN TYPEOF( cs.
                styles[1]\curve_style.curve_width\measure_with_unit.value_component ) ) ) ) ) ) = 0 );
      wr17: ( SIZEOF( QUERY ( fas <* QUERY ( sty <* SELF.styles | ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.FILL_AREA_STYLE'  IN TYPEOF( sty.styles[1] ) ) )
                | ( NOT ( ( SIZEOF( QUERY ( fs <* fas.styles[1]\fill_area_style.fill_styles | ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.FILL_AREA_STYLE_TILES'  IN TYPEOF( fs ) ) ) ) 
                <= 1 ) AND ( SIZEOF( QUERY ( fst <* QUERY ( fs <* fas.styles[1]\fill_area_style.fill_styles
                | ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.FILL_AREA_STYLE_TILES' IN TYPEOF( fs ) ) )
                | ( NOT ( SIZEOF( fst\fill_area_style_tiles.tiles ) = 1 ) ) ) ) = 0 ) ) ) ) ) = 0 );
      wr18: ( SIZEOF( QUERY ( fas <* QUERY ( sty <* SELF.styles | ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.FILL_AREA_STYLE'  IN TYPEOF( sty.styles[1] ) ) )
                | ( NOT ( SIZEOF( QUERY ( fsh <* QUERY ( fs <* fas.styles[1]\fill_area_style.fill_styles | ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.FILL_AREA_STYLE_HATCHING'  IN TYPEOF( fs ) ) )
                | ( NOT ( fsh\fill_area_style_hatching.point_of_reference_hatch_line :=: fsh\
                fill_area_style_hatching.pattern_start ) ) ) ) = 0 ) ) ) ) = 0 );
      wr19: ( SIZEOF( QUERY ( ts <* QUERY ( sty <* SELF.styles | ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.TEXT_STYLE'  IN TYPEOF( sty.styles[1] ) ) )
                | ( NOT ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
                + 'TEXT_STYLE_WITH_BOX_CHARACTERISTICS'  IN TYPEOF( ts.styles[1] ) ) ) ) ) = 0 );
      wr20: ( SIZEOF( QUERY ( ts <* QUERY ( sty <* SELF.styles | ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.TEXT_STYLE_WITH_BOX_CHARACTERISTICS'  IN 
                TYPEOF( sty.styles[1] ) ) ) | ( NOT ( SIZEOF( ts.styles[1]\
                text_style_with_box_characteristics.characteristics ) = 4 ) ) ) ) = 0 );
  END_ENTITY; -- draughting_annotation_occurrence (line:12790 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	representation_item
    ATTR:  name,	TYPE: label -- EXPLICIT


  SUPER- ENTITY(2)	styled_item
    ATTR:  styles,	TYPE: SET [0 : ?] OF presentation_style_assignment -- EXPLICIT

    ATTR:  item,	TYPE: styled_item_target -- EXPLICIT
      -- possibly overriden by
          ENTITY: tessellated_annotation_occurrence,	TYPE: tessellated_geometric_set
          ENTITY: annotation_placeholder_occurrence,	TYPE: geometric_set
          ENTITY: annotation_symbol_occurrence,	TYPE: annotation_symbol_occurrence_item
          ENTITY: annotation_curve_occurrence,	TYPE: curve_or_curve_set
          ENTITY: styled_tessellated_item_with_colours,	TYPE: tessellated_surface_item
          ENTITY: annotation_text_occurrence,	TYPE: annotation_text_occurrence_item
          ENTITY: hidden_element_over_riding_styled_item,	TYPE: camera_image
          ENTITY: annotation_fill_area_occurrence,	TYPE: annotation_fill_area
          ENTITY: annotation_point_occurrence,	TYPE: point
          ENTITY: annotation_plane,	TYPE: plane_or_planar_box


  SUPER- ENTITY(3)	annotation_occurrence
    (no local attributes)

  ENTITY(SELF)	draughting_annotation_occurrence
    (no local attributes)

*/


//MARK: - Partial Entity
  public final class _draughting_annotation_occurrence : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eDRAUGHTING_ANNOTATION_OCCURRENCE.self
    }

    //ATTRIBUTES
    // (no local attributes)

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: eDRAUGHTING_ANNOTATION_OCCURRENCE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.TYPEOF(SELF, IS: eANNOTATION_CURVE_OCCURRENCE.self)
      let _TEMP2 =  !_TEMP1
      let _TEMP3 = SELF.STYLES
      let _TEMP4 = _TEMP3.QUERY{ STY in 

          let _TEMP1 = STY.STYLES
          let _TEMP2 = SDAI.SIZEOF(_TEMP1)
          let _TEMP3 = _TEMP2 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
          let _TEMP4 = SDAI.TYPEOF(STY.STYLES[1], IS: eCURVE_STYLE.self)
          let _TEMP5 = _TEMP3 && _TEMP4
          let _TEMP6 =  !_TEMP5
          return _TEMP6 }
      let _TEMP5 = SDAI.SIZEOF(_TEMP4)
      let _TEMP6 = _TEMP5 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      let _TEMP7 = _TEMP2 || _TEMP6
      return _TEMP7
    }
    public static func WHERE_wr2(SELF: eDRAUGHTING_ANNOTATION_OCCURRENCE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.TYPEOF(SELF, IS: eANNOTATION_FILL_AREA_OCCURRENCE.self)
      let _TEMP2 =  !_TEMP1
      let _TEMP3 = SELF.STYLES
      let _TEMP4 = _TEMP3.QUERY{ STY in 

          let _TEMP1 = STY.STYLES
          let _TEMP2 = SDAI.SIZEOF(_TEMP1)
          let _TEMP3 = _TEMP2 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
          let _TEMP4 = SDAI.TYPEOF(STY.STYLES[1], IS: eFILL_AREA_STYLE.self)
          let _TEMP5 = _TEMP3 && _TEMP4
          let _TEMP6 =  !_TEMP5
          return _TEMP6 }
      let _TEMP5 = SDAI.SIZEOF(_TEMP4)
      let _TEMP6 = _TEMP5 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      let _TEMP7 = _TEMP2 || _TEMP6
      return _TEMP7
    }
    public static func WHERE_wr3(SELF: eDRAUGHTING_ANNOTATION_OCCURRENCE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.TYPEOF(SELF, IS: eANNOTATION_FILL_AREA_OCCURRENCE.self)
      let _TEMP2 =  !_TEMP1
      let _TEMP3 = SELF.ITEM
      let _TEMP4 = _TEMP3.GROUP_REF(eANNOTATION_FILL_AREA.self)
      let _TEMP5 = _TEMP4?.BOUNDARIES
      let _TEMP6 = _TEMP5?.QUERY{ BOUND in 

          let _TEMP1 = SDAI.USEDIN(T: BOUND, ROLE: \AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF
            .eSTYLED_ITEM.ITEM)
          let _TEMP2 = _TEMP1.QUERY{ SI in 

              let _TEMP1 = SDAI.TYPEOF(SI, IS: eANNOTATION_CURVE_OCCURRENCE.self)
              return _TEMP1 }
          let _TEMP3 = SDAI.SIZEOF(_TEMP2)
          let _TEMP4 = _TEMP3 > SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
          let _TEMP5 =  !_TEMP4
          return _TEMP5 }
      let _TEMP7 = SDAI.SIZEOF(_TEMP6)
      let _TEMP8 = _TEMP7 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      let _TEMP9 = _TEMP2 || _TEMP8
      return _TEMP9
    }
    public static func WHERE_wr4(SELF: eDRAUGHTING_ANNOTATION_OCCURRENCE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.TYPEOF(SELF, IS: eANNOTATION_SYMBOL_OCCURRENCE.self)
      let _TEMP2 =  !_TEMP1
      let _TEMP3 = SELF.STYLES
      let _TEMP4 = _TEMP3.QUERY{ STY in 

          let _TEMP1 = STY.STYLES
          let _TEMP2 = SDAI.SIZEOF(_TEMP1)
          let _TEMP3 = _TEMP2 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
          let _TEMP4 = STY.STYLES
          let _TEMP5 = _TEMP4[1]
          let _TEMP6 = SDAI.TYPEOF(_TEMP5)
          let _TEMP7 = ([SDAI.AIE(SDAI.STRING("AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SYMBOL_STYLE")), 
            SDAI.AIE(SDAI.STRING("AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.NULL_STYLE"))] 
            as [SDAI.AggregationInitializerElement<SDAI.STRING>])
          let _TEMP8 = SDAI.FORCE_OPTIONAL(_TEMP6) * SDAI.FORCE_OPTIONAL(_TEMP7)
          let _TEMP9 = SDAI.SIZEOF(_TEMP8)
          let _TEMP10 = _TEMP9 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
          let _TEMP11 = _TEMP3 && _TEMP10
          let _TEMP12 =  !_TEMP11
          return _TEMP12 }
      let _TEMP5 = SDAI.SIZEOF(_TEMP4)
      let _TEMP6 = _TEMP5 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      let _TEMP7 = _TEMP2 || _TEMP6
      return _TEMP7
    }
    public static func WHERE_wr5(SELF: eDRAUGHTING_ANNOTATION_OCCURRENCE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.TYPEOF(SELF, IS: eANNOTATION_SYMBOL_OCCURRENCE.self)
      let _TEMP2 = SDAI.TYPEOF(SELF.ITEM, IS: eANNOTATION_SYMBOL.self)
      let _TEMP3 = _TEMP1 && _TEMP2
      let _TEMP4 =  !_TEMP3
      let _TEMP5 = ([SDAI.AIE(SDAI.STRING(
        "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.DRAUGHTING_SYMBOL_REPRESENTATION")), 
        SDAI.AIE(SDAI.STRING(
        "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.DRAUGHTING_SUBFIGURE_REPRESENTATION"))] 
        as [SDAI.AggregationInitializerElement<SDAI.STRING>])
      let _TEMP6 = SELF.ITEM
      let _TEMP7 = _TEMP6.GROUP_REF(eMAPPED_ITEM.self)
      let _TEMP8 = _TEMP7?.MAPPING_SOURCE
      let _TEMP9 = _TEMP8?.MAPPED_REPRESENTATION
      let _TEMP10 = SDAI.TYPEOF(_TEMP9)
      let _TEMP11 = SDAI.FORCE_OPTIONAL(_TEMP5) * SDAI.FORCE_OPTIONAL(_TEMP10)
      let _TEMP12 = SDAI.SIZEOF(_TEMP11)
      let _TEMP13 = _TEMP12 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
      let _TEMP14 = _TEMP4 || _TEMP13
      return _TEMP14
    }
    public static func WHERE_wr6(SELF: eDRAUGHTING_ANNOTATION_OCCURRENCE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.TYPEOF(SELF, IS: eANNOTATION_TEXT_OCCURRENCE.self)
      let _TEMP2 =  !_TEMP1
      let _TEMP3 = SELF.STYLES
      let _TEMP4 = _TEMP3.QUERY{ STY in 

          let _TEMP1 = STY.STYLES
          let _TEMP2 = SDAI.SIZEOF(_TEMP1)
          let _TEMP3 = _TEMP2 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
          let _TEMP4 = SDAI.TYPEOF(STY.STYLES[1], IS: eTEXT_STYLE.self)
          let _TEMP5 = _TEMP3 && _TEMP4
          let _TEMP6 =  !_TEMP5
          return _TEMP6 }
      let _TEMP5 = SDAI.SIZEOF(_TEMP4)
      let _TEMP6 = _TEMP5 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      let _TEMP7 = _TEMP2 || _TEMP6
      return _TEMP7
    }
    public static func WHERE_wr7(SELF: eDRAUGHTING_ANNOTATION_OCCURRENCE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.TYPEOF(SELF, IS: eANNOTATION_TEXT_OCCURRENCE.self)
      let _TEMP2 =  !_TEMP1
      let _TEMP3 = SELF.ITEM
      let _TEMP4 = SDAI.TYPEOF(_TEMP3)
      let _TEMP5 = ([SDAI.AIE(SDAI.STRING("AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.COMPOSITE_TEXT")), 
        SDAI.AIE(SDAI.STRING("AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.TEXT_LITERAL"))] 
        as [SDAI.AggregationInitializerElement<SDAI.STRING>])
      let _TEMP6 = SDAI.FORCE_OPTIONAL(_TEMP4) * SDAI.FORCE_OPTIONAL(_TEMP5)
      let _TEMP7 = SDAI.SIZEOF(_TEMP6)
      let _TEMP8 = _TEMP7 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
      let _TEMP9 = _TEMP2 || _TEMP8
      return _TEMP9
    }
    public static func WHERE_wr8(SELF: eDRAUGHTING_ANNOTATION_OCCURRENCE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.TYPEOF(SELF, IS: eANNOTATION_TEXT_OCCURRENCE.self)
      let _TEMP2 = SDAI.TYPEOF(SELF.ITEM, IS: eCOMPOSITE_TEXT.self)
      let _TEMP3 = _TEMP1 && _TEMP2
      let _TEMP4 =  !_TEMP3
      let _TEMP5 = SELF.ITEM
      let _TEMP6 = _TEMP5.GROUP_REF(eCOMPOSITE_TEXT.self)
      let _TEMP7 = _TEMP6?.COLLECTED_TEXT
      let _TEMP8 = _TEMP7?.QUERY{ TL in 

          let _TEMP1 = SDAI.TYPEOF(TL, IS: eTEXT_LITERAL.self)
          let _TEMP2 =  !_TEMP1
          return _TEMP2 }
      let _TEMP9 = SDAI.SIZEOF(_TEMP8)
      let _TEMP10 = _TEMP9 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      let _TEMP11 = _TEMP4 || _TEMP10
      return _TEMP11
    }
    public static func WHERE_wr9(SELF: eDRAUGHTING_ANNOTATION_OCCURRENCE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.TYPEOF(SELF, IS: eANNOTATION_TEXT_OCCURRENCE.self)
      let _TEMP2 = SDAI.TYPEOF(SELF.ITEM, IS: eTEXT_LITERAL.self)
      let _TEMP3 = _TEMP1 && _TEMP2
      let _TEMP4 =  !_TEMP3
      let _TEMP5 = SELF.ITEM
      let _TEMP6 = _TEMP5.GROUP_REF(eTEXT_LITERAL.self)
      let _TEMP7 = _TEMP6?.ALIGNMENT
      let _TEMP8 = ([SDAI.AIE(SDAI.STRING("baseline left")), 
        SDAI.AIE(SDAI.STRING("baseline centre")), 
        SDAI.AIE(SDAI.STRING("baseline right"))] as [SDAI.AggregationInitializerElement<SDAI.STRING>])
      let _TEMP9 = SDAI.aggregate(_TEMP8, contains: SDAI.STRING(/*tTEXT_ALIGNMENT*/_TEMP7))
      let _TEMP10 = _TEMP4 || _TEMP9
      return _TEMP10
    }
    public static func WHERE_wr10(SELF: eDRAUGHTING_ANNOTATION_OCCURRENCE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.TYPEOF(SELF, IS: eANNOTATION_TEXT_OCCURRENCE.self)
      let _TEMP2 = SDAI.TYPEOF(SELF.ITEM, IS: eCOMPOSITE_TEXT.self)
      let _TEMP3 = _TEMP1 && _TEMP2
      let _TEMP4 =  !_TEMP3
      let _TEMP5 = SELF.ITEM
      let _TEMP6 = _TEMP5.GROUP_REF(eCOMPOSITE_TEXT.self)
      let _TEMP7 = _TEMP6?.COLLECTED_TEXT
      let _TEMP8 = _TEMP7?.QUERY{ TEXT in 

          let _TEMP1 = SDAI.TYPEOF(TEXT, IS: eTEXT_LITERAL.self)
          return _TEMP1 }
      let _TEMP9 = _TEMP8?.QUERY{ TL in 

          let _TEMP1 = TL.GROUP_REF(eTEXT_LITERAL.self)
          let _TEMP2 = _TEMP1?.ALIGNMENT
          let _TEMP3 = ([SDAI.AIE(SDAI.STRING("baseline left")), 
            SDAI.AIE(SDAI.STRING("baseline centre")), 
            SDAI.AIE(SDAI.STRING("baseline right"))] as [SDAI.AggregationInitializerElement<SDAI.STRING>])
          let _TEMP4 = SDAI.aggregate(_TEMP3, contains: SDAI.STRING(/*tTEXT_ALIGNMENT*/_TEMP2))
          let _TEMP5 =  !_TEMP4
          return _TEMP5 }
      let _TEMP10 = SDAI.SIZEOF(_TEMP9)
      let _TEMP11 = _TEMP10 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      let _TEMP12 = _TEMP4 || _TEMP11
      return _TEMP12
    }
    public static func WHERE_wr11(SELF: eDRAUGHTING_ANNOTATION_OCCURRENCE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.TYPEOF(SELF, IS: eANNOTATION_TEXT_OCCURRENCE.self)
      let _TEMP2 = SDAI.TYPEOF(SELF.ITEM, IS: eCOMPOSITE_TEXT.self)
      let _TEMP3 = _TEMP1 && _TEMP2
      let _TEMP4 =  !_TEMP3
      let _TEMP5 = SELF.ITEM
      let _TEMP6 = CHECK_TEXT_ALIGNMENT(eCOMPOSITE_TEXT(/*sSTYLED_ITEM_TARGET*/_TEMP5))
      let _TEMP7 = _TEMP4 || _TEMP6
      return _TEMP7
    }
    public static func WHERE_wr12(SELF: eDRAUGHTING_ANNOTATION_OCCURRENCE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.TYPEOF(SELF, IS: eANNOTATION_TEXT_OCCURRENCE.self)
      let _TEMP2 = SDAI.TYPEOF(SELF.ITEM, IS: eCOMPOSITE_TEXT.self)
      let _TEMP3 = _TEMP1 && _TEMP2
      let _TEMP4 =  !_TEMP3
      let _TEMP5 = SELF.ITEM
      let _TEMP6 = CHECK_TEXT_FONT(eCOMPOSITE_TEXT(/*sSTYLED_ITEM_TARGET*/_TEMP5))
      let _TEMP7 = _TEMP4 || _TEMP6
      return _TEMP7
    }
    public static func WHERE_wr13(SELF: eDRAUGHTING_ANNOTATION_OCCURRENCE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.TYPEOF(SELF, IS: eANNOTATION_TEXT_OCCURRENCE.self)
      let _TEMP2 = SDAI.TYPEOF(SELF.ITEM, IS: eCOMPOSITE_TEXT.self)
      let _TEMP3 = _TEMP1 && _TEMP2
      let _TEMP4 =  !_TEMP3
      let _TEMP5 = SELF.ITEM
      let _TEMP6 = _TEMP5.GROUP_REF(eCOMPOSITE_TEXT.self)
      let _TEMP7 = _TEMP6?.COLLECTED_TEXT
      let _TEMP8 = _TEMP7?.QUERY{ TEXT in 

          let _TEMP1 = SDAI.TYPEOF(TEXT, IS: eTEXT_LITERAL.self)
          return _TEMP1 }
      let _TEMP9 = _TEMP8?.QUERY{ TL in 

          let _TEMP1 = SDAI.TYPEOF(TL)
          let _TEMP2 = ([SDAI.AIE(SDAI.STRING(
            "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.TEXT_LITERAL_WITH_BLANKING_BOX")), 
            SDAI.AIE(SDAI.STRING(
            "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.TEXT_LITERAL_WITH_ASSOCIATED_CURVES"))] 
            as [SDAI.AggregationInitializerElement<SDAI.STRING>])
          let _TEMP3 = SDAI.FORCE_OPTIONAL(_TEMP1) * SDAI.FORCE_OPTIONAL(_TEMP2)
          let _TEMP4 = SDAI.SIZEOF(_TEMP3)
          let _TEMP5 = _TEMP4 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
          let _TEMP6 =  !_TEMP5
          return _TEMP6 }
      let _TEMP10 = SDAI.SIZEOF(_TEMP9)
      let _TEMP11 = _TEMP10 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      let _TEMP12 = _TEMP4 || _TEMP11
      return _TEMP12
    }
    public static func WHERE_wr14(SELF: eDRAUGHTING_ANNOTATION_OCCURRENCE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.TYPEOF(SELF, IS: eANNOTATION_TEXT_OCCURRENCE.self)
      let _TEMP2 = SDAI.TYPEOF(SELF.ITEM, IS: eTEXT_LITERAL_WITH_ASSOCIATED_CURVES.self)
      let _TEMP3 = _TEMP1 && _TEMP2
      let _TEMP4 =  !_TEMP3
      let _TEMP5 = SELF.ITEM
      let _TEMP6 = _TEMP5.GROUP_REF(eTEXT_LITERAL_WITH_ASSOCIATED_CURVES.self)
      let _TEMP7 = _TEMP6?.ASSOCIATED_CURVES
      let _TEMP8 = _TEMP7?.QUERY{ CRV in 

          let _TEMP1 = SDAI.USEDIN(T: CRV, ROLE: \AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF
            .eSTYLED_ITEM.ITEM)
          let _TEMP2 = _TEMP1.QUERY{ SI in 

              let _TEMP1 = SDAI.TYPEOF(SI, IS: eANNOTATION_CURVE_OCCURRENCE.self)
              return _TEMP1 }
          let _TEMP3 = SDAI.SIZEOF(_TEMP2)
          let _TEMP4 = _TEMP3 > SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
          let _TEMP5 =  !_TEMP4
          return _TEMP5 }
      let _TEMP9 = SDAI.SIZEOF(_TEMP8)
      let _TEMP10 = _TEMP9 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      let _TEMP11 = _TEMP4 || _TEMP10
      return _TEMP11
    }
    public static func WHERE_wr15(SELF: eDRAUGHTING_ANNOTATION_OCCURRENCE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.TYPEOF(SELF, IS: eANNOTATION_TEXT_OCCURRENCE.self)
      let _TEMP2 = SDAI.TYPEOF(SELF.ITEM, IS: eCOMPOSITE_TEXT_WITH_ASSOCIATED_CURVES.self)
      let _TEMP3 = _TEMP1 && _TEMP2
      let _TEMP4 =  !_TEMP3
      let _TEMP5 = SELF.ITEM
      let _TEMP6 = _TEMP5.GROUP_REF(eCOMPOSITE_TEXT_WITH_ASSOCIATED_CURVES.self)
      let _TEMP7 = _TEMP6?.ASSOCIATED_CURVES
      let _TEMP8 = _TEMP7?.QUERY{ CRV in 

          let _TEMP1 = SDAI.USEDIN(T: CRV, ROLE: \AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF
            .eSTYLED_ITEM.ITEM)
          let _TEMP2 = _TEMP1.QUERY{ SI in 

              let _TEMP1 = SDAI.TYPEOF(SI, IS: eANNOTATION_CURVE_OCCURRENCE.self)
              return _TEMP1 }
          let _TEMP3 = SDAI.SIZEOF(_TEMP2)
          let _TEMP4 = _TEMP3 > SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
          let _TEMP5 =  !_TEMP4
          return _TEMP5 }
      let _TEMP9 = SDAI.SIZEOF(_TEMP8)
      let _TEMP10 = _TEMP9 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      let _TEMP11 = _TEMP4 || _TEMP10
      return _TEMP11
    }
    public static func WHERE_wr16(SELF: eDRAUGHTING_ANNOTATION_OCCURRENCE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.STYLES
      let _TEMP2 = _TEMP1.QUERY{ STY in 

          let _TEMP1 = SDAI.TYPEOF(STY.STYLES[1], IS: eCURVE_STYLE.self)
          return _TEMP1 }
      let _TEMP3 = _TEMP2.QUERY{ CS in 

          let _TEMP1 = SDAI.TYPEOF(CS.STYLES[1]?.GROUP_REF(eCURVE_STYLE.self)?.CURVE_WIDTH, 
            IS: eLENGTH_MEASURE_WITH_UNIT.self)
          let _TEMP2 = SDAI.TYPEOF(CS.STYLES[1]?.GROUP_REF(eCURVE_STYLE.self)?.CURVE_WIDTH?.GROUP_REF(
            eMEASURE_WITH_UNIT.self)?.VALUE_COMPONENT, IS: tPOSITIVE_LENGTH_MEASURE.self)
          let _TEMP3 = _TEMP1 && _TEMP2
          let _TEMP4 =  !_TEMP3
          return _TEMP4 }
      let _TEMP4 = SDAI.SIZEOF(_TEMP3)
      let _TEMP5 = _TEMP4 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      return _TEMP5
    }
    public static func WHERE_wr17(SELF: eDRAUGHTING_ANNOTATION_OCCURRENCE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.STYLES
      let _TEMP2 = _TEMP1.QUERY{ STY in 

          let _TEMP1 = SDAI.TYPEOF(STY.STYLES[1], IS: eFILL_AREA_STYLE.self)
          return _TEMP1 }
      let _TEMP3 = _TEMP2.QUERY{ FAS in 

          let _TEMP1 = FAS.STYLES
          let _TEMP2 = _TEMP1[1]
          let _TEMP3 = _TEMP2?.GROUP_REF(eFILL_AREA_STYLE.self)
          let _TEMP4 = _TEMP3?.FILL_STYLES
          let _TEMP5 = _TEMP4?.QUERY{ FS in 

              let _TEMP1 = SDAI.TYPEOF(FS, IS: eFILL_AREA_STYLE_TILES.self)
              return _TEMP1 }
          let _TEMP6 = SDAI.SIZEOF(_TEMP5)
          let _TEMP7 = _TEMP6 <= SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
          let _TEMP8 = FAS.STYLES
          let _TEMP9 = _TEMP8[1]
          let _TEMP10 = _TEMP9?.GROUP_REF(eFILL_AREA_STYLE.self)
          let _TEMP11 = _TEMP10?.FILL_STYLES
          let _TEMP12 = _TEMP11?.QUERY{ FS in 

              let _TEMP1 = SDAI.TYPEOF(FS, IS: eFILL_AREA_STYLE_TILES.self)
              return _TEMP1 }
          let _TEMP13 = _TEMP12?.QUERY{ FST in 

              let _TEMP1 = FST.GROUP_REF(eFILL_AREA_STYLE_TILES.self)
              let _TEMP2 = _TEMP1?.TILES
              let _TEMP3 = SDAI.SIZEOF(_TEMP2)
              let _TEMP4 = _TEMP3 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
              let _TEMP5 =  !_TEMP4
              return _TEMP5 }
          let _TEMP14 = SDAI.SIZEOF(_TEMP13)
          let _TEMP15 = _TEMP14 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
          let _TEMP16 = _TEMP7 && _TEMP15
          let _TEMP17 =  !_TEMP16
          return _TEMP17 }
      let _TEMP4 = SDAI.SIZEOF(_TEMP3)
      let _TEMP5 = _TEMP4 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      return _TEMP5
    }
    public static func WHERE_wr18(SELF: eDRAUGHTING_ANNOTATION_OCCURRENCE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.STYLES
      let _TEMP2 = _TEMP1.QUERY{ STY in 

          let _TEMP1 = SDAI.TYPEOF(STY.STYLES[1], IS: eFILL_AREA_STYLE.self)
          return _TEMP1 }
      let _TEMP3 = _TEMP2.QUERY{ FAS in 

          let _TEMP1 = FAS.STYLES
          let _TEMP2 = _TEMP1[1]
          let _TEMP3 = _TEMP2?.GROUP_REF(eFILL_AREA_STYLE.self)
          let _TEMP4 = _TEMP3?.FILL_STYLES
          let _TEMP5 = _TEMP4?.QUERY{ FS in 

              let _TEMP1 = SDAI.TYPEOF(FS, IS: eFILL_AREA_STYLE_HATCHING.self)
              return _TEMP1 }
          let _TEMP6 = _TEMP5?.QUERY{ FSH in 

              let _TEMP1 = FSH.GROUP_REF(eFILL_AREA_STYLE_HATCHING.self)
              let _TEMP2 = _TEMP1?.POINT_OF_REFERENCE_HATCH_LINE
              let _TEMP3 = FSH.GROUP_REF(eFILL_AREA_STYLE_HATCHING.self)
              let _TEMP4 = _TEMP3?.PATTERN_START
              let _TEMP5 = _TEMP2 .===. _TEMP4
              let _TEMP6 =  !_TEMP5
              return _TEMP6 }
          let _TEMP7 = SDAI.SIZEOF(_TEMP6)
          let _TEMP8 = _TEMP7 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
          let _TEMP9 =  !_TEMP8
          return _TEMP9 }
      let _TEMP4 = SDAI.SIZEOF(_TEMP3)
      let _TEMP5 = _TEMP4 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      return _TEMP5
    }
    public static func WHERE_wr19(SELF: eDRAUGHTING_ANNOTATION_OCCURRENCE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.STYLES
      let _TEMP2 = _TEMP1.QUERY{ STY in 

          let _TEMP1 = SDAI.TYPEOF(STY.STYLES[1], IS: eTEXT_STYLE.self)
          return _TEMP1 }
      let _TEMP3 = _TEMP2.QUERY{ TS in 

          let _TEMP1 = SDAI.TYPEOF(TS.STYLES[1], IS: eTEXT_STYLE_WITH_BOX_CHARACTERISTICS.self)
          let _TEMP2 =  !_TEMP1
          return _TEMP2 }
      let _TEMP4 = SDAI.SIZEOF(_TEMP3)
      let _TEMP5 = _TEMP4 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      return _TEMP5
    }
    public static func WHERE_wr20(SELF: eDRAUGHTING_ANNOTATION_OCCURRENCE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.STYLES
      let _TEMP2 = _TEMP1.QUERY{ STY in 

          let _TEMP1 = SDAI.TYPEOF(STY.STYLES[1], IS: eTEXT_STYLE_WITH_BOX_CHARACTERISTICS.self)
          return _TEMP1 }
      let _TEMP3 = _TEMP2.QUERY{ TS in 

          let _TEMP1 = TS.STYLES
          let _TEMP2 = _TEMP1[1]
          let _TEMP3 = _TEMP2?.GROUP_REF(eTEXT_STYLE_WITH_BOX_CHARACTERISTICS.self)
          let _TEMP4 = _TEMP3?.CHARACTERISTICS
          let _TEMP5 = SDAI.SIZEOF(_TEMP4)
          let _TEMP6 = _TEMP5 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(4))
          let _TEMP7 =  !_TEMP6
          return _TEMP7 }
      let _TEMP4 = SDAI.SIZEOF(_TEMP3)
      let _TEMP5 = _TEMP4 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      return _TEMP5
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init() {
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 0
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      self.init( )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY draughting_annotation_occurrence
    SUBTYPE OF ( annotation_occurrence );
    WHERE
      wr1 : ( ( NOT ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ANNOTATION_CURVE_OCCURRENCE' IN 
                TYPEOF( SELF ) ) ) OR ( SIZEOF( QUERY ( sty <* SELF.styles | ( NOT ( ( SIZEOF( sty.styles ) =
                1 ) AND ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CURVE_STYLE' IN TYPEOF( sty.styles
                [1] ) ) ) ) ) ) = 0 ) );
      wr2 : ( ( NOT ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ANNOTATION_FILL_AREA_OCCURRENCE' IN 
                TYPEOF( SELF ) ) ) OR ( SIZEOF( QUERY ( sty <* SELF.styles | ( NOT ( ( SIZEOF( sty.styles ) =
                1 ) AND ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.FILL_AREA_STYLE' IN TYPEOF( sty.
                styles[1] ) ) ) ) ) ) = 0 ) );
      wr3 : ( ( NOT ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ANNOTATION_FILL_AREA_OCCURRENCE' IN 
                TYPEOF( SELF ) ) ) OR ( SIZEOF( QUERY ( bound <* SELF.item\annotation_fill_area.boundaries | 
                ( NOT ( SIZEOF( QUERY ( si <* USEDIN( bound, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
                + 'STYLED_ITEM.ITEM'  ) | ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
                + 'ANNOTATION_CURVE_OCCURRENCE'  IN TYPEOF( si ) ) ) ) > 0 ) ) ) ) = 0 ) );
      wr4 : ( ( NOT ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ANNOTATION_SYMBOL_OCCURRENCE' IN 
                TYPEOF( SELF ) ) ) OR ( SIZEOF( QUERY ( sty <* SELF.styles | ( NOT ( ( SIZEOF( sty.styles ) =
                1 ) AND ( SIZEOF( TYPEOF( sty.styles[1] ) * [ 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
                + 'SYMBOL_STYLE' , 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.NULL_STYLE'] ) = 1 ) ) ) ) ) 
                = 0 ) );
      wr5 : ( ( NOT ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ANNOTATION_SYMBOL_OCCURRENCE' IN 
                TYPEOF( SELF ) ) AND ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ANNOTATION_SYMBOL' IN
                TYPEOF( SELF.item ) ) ) ) OR ( SIZEOF( [ 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
                + 'DRAUGHTING_SYMBOL_REPRESENTATION' , 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
                + 'DRAUGHTING_SUBFIGURE_REPRESENTATION' ] * TYPEOF( SELF.item\mapped_item.mapping_source.
                mapped_representation ) ) = 1 ) );
      wr6 : ( ( NOT ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ANNOTATION_TEXT_OCCURRENCE' IN 
                TYPEOF( SELF ) ) ) OR ( SIZEOF( QUERY ( sty <* SELF.styles | ( NOT ( ( SIZEOF( sty.styles ) =
                1 ) AND ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.TEXT_STYLE' IN TYPEOF( sty.styles[
                1] ) ) ) ) ) ) = 0 ) );
      wr7 : ( ( NOT ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ANNOTATION_TEXT_OCCURRENCE' IN 
                TYPEOF( SELF ) ) ) OR ( SIZEOF( TYPEOF( SELF.item ) * [
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.COMPOSITE_TEXT' , 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.TEXT_LITERAL' ] ) = 1 ) );
      wr8 : ( ( NOT ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ANNOTATION_TEXT_OCCURRENCE' IN 
                TYPEOF( SELF ) ) AND ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.COMPOSITE_TEXT' IN 
                TYPEOF( SELF.item ) ) ) ) OR ( SIZEOF( QUERY ( tl <* SELF.item\composite_text.collected_text
                | ( NOT ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.TEXT_LITERAL' IN TYPEOF( tl ) ) ) ) ) 
                = 0 ) );
      wr9 : ( ( NOT ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ANNOTATION_TEXT_OCCURRENCE' IN 
                TYPEOF( SELF ) ) AND ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.TEXT_LITERAL' IN 
                TYPEOF( SELF.item ) ) ) ) OR ( SELF.item\text_literal.alignment IN [ 'baseline left', 
                'baseline centre' , 'baseline right'] ) );
      wr10: ( ( NOT ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ANNOTATION_TEXT_OCCURRENCE' IN 
                TYPEOF( SELF ) ) AND ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.COMPOSITE_TEXT' IN 
                TYPEOF( SELF.item ) ) ) ) OR ( SIZEOF( QUERY ( tl <* QUERY ( text <* SELF.item\composite_text
                .collected_text | ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.TEXT_LITERAL' IN 
                TYPEOF( text ) ) ) | ( NOT ( tl\text_literal.alignment IN [ 'baseline left', 'baseline centre', 
                'baseline right' ] ) ) ) ) = 0 ) );
      wr11: ( ( NOT ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ANNOTATION_TEXT_OCCURRENCE' IN 
                TYPEOF( SELF ) ) AND ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.COMPOSITE_TEXT' IN 
                TYPEOF( SELF.item ) ) ) ) OR check_text_alignment( SELF.item ) );
      wr12: ( ( NOT ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ANNOTATION_TEXT_OCCURRENCE' IN 
                TYPEOF( SELF ) ) AND ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.COMPOSITE_TEXT' IN 
                TYPEOF( SELF.item ) ) ) ) OR check_text_font( SELF.item ) );
      wr13: ( ( NOT ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ANNOTATION_TEXT_OCCURRENCE' IN 
                TYPEOF( SELF ) ) AND ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.COMPOSITE_TEXT' IN 
                TYPEOF( SELF.item ) ) ) ) OR ( SIZEOF( QUERY ( tl <* QUERY ( text <* SELF.item\composite_text
                .collected_text | ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.TEXT_LITERAL' IN 
                TYPEOF( text ) ) ) | ( NOT ( SIZEOF( TYPEOF( tl ) * [
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.TEXT_LITERAL_WITH_BLANKING_BOX' , 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.TEXT_LITERAL_WITH_ASSOCIATED_CURVES' ] ) = 0 ) ) ) ) 
                = 0 ) );
      wr14: ( ( NOT ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ANNOTATION_TEXT_OCCURRENCE' IN 
                TYPEOF( SELF ) ) AND ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
                + 'TEXT_LITERAL_WITH_ASSOCIATED_CURVES'  IN TYPEOF( SELF.item ) ) ) ) OR ( SIZEOF( 
                QUERY ( crv <* SELF.item\text_literal_with_associated_curves.associated_curves | ( NOT ( 
                SIZEOF( QUERY ( si <* USEDIN( crv, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
                + 'STYLED_ITEM.ITEM'  ) | ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
                + 'ANNOTATION_CURVE_OCCURRENCE'  IN TYPEOF( si ) ) ) ) > 0 ) ) ) ) = 0 ) );
      wr15: ( ( NOT ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ANNOTATION_TEXT_OCCURRENCE' IN 
                TYPEOF( SELF ) ) AND ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
                + 'COMPOSITE_TEXT_WITH_ASSOCIATED_CURVES'  IN TYPEOF( SELF.item ) ) ) ) OR ( SIZEOF( 
                QUERY ( crv <* SELF.item\composite_text_with_associated_curves.associated_curves | ( NOT ( 
                SIZEOF( QUERY ( si <* USEDIN( crv, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
                + 'STYLED_ITEM.ITEM'  ) | ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
                + 'ANNOTATION_CURVE_OCCURRENCE'  IN TYPEOF( si ) ) ) ) > 0 ) ) ) ) = 0 ) );
      wr16: ( SIZEOF( QUERY ( cs <* QUERY ( sty <* SELF.styles | ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CURVE_STYLE'  IN TYPEOF( sty.styles[1] ) ) )
                | ( NOT ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.LENGTH_MEASURE_WITH_UNIT' IN 
                TYPEOF( cs.styles[1]\curve_style.curve_width ) ) AND ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.POSITIVE_LENGTH_MEASURE'  IN TYPEOF( cs.
                styles[1]\curve_style.curve_width\measure_with_unit.value_component ) ) ) ) ) ) = 0 );
      wr17: ( SIZEOF( QUERY ( fas <* QUERY ( sty <* SELF.styles | ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.FILL_AREA_STYLE'  IN TYPEOF( sty.styles[1] ) ) )
                | ( NOT ( ( SIZEOF( QUERY ( fs <* fas.styles[1]\fill_area_style.fill_styles | ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.FILL_AREA_STYLE_TILES'  IN TYPEOF( fs ) ) ) ) 
                <= 1 ) AND ( SIZEOF( QUERY ( fst <* QUERY ( fs <* fas.styles[1]\fill_area_style.fill_styles
                | ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.FILL_AREA_STYLE_TILES' IN TYPEOF( fs ) ) )
                | ( NOT ( SIZEOF( fst\fill_area_style_tiles.tiles ) = 1 ) ) ) ) = 0 ) ) ) ) ) = 0 );
      wr18: ( SIZEOF( QUERY ( fas <* QUERY ( sty <* SELF.styles | ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.FILL_AREA_STYLE'  IN TYPEOF( sty.styles[1] ) ) )
                | ( NOT ( SIZEOF( QUERY ( fsh <* QUERY ( fs <* fas.styles[1]\fill_area_style.fill_styles | ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.FILL_AREA_STYLE_HATCHING'  IN TYPEOF( fs ) ) )
                | ( NOT ( fsh\fill_area_style_hatching.point_of_reference_hatch_line :=: fsh\
                fill_area_style_hatching.pattern_start ) ) ) ) = 0 ) ) ) ) = 0 );
      wr19: ( SIZEOF( QUERY ( ts <* QUERY ( sty <* SELF.styles | ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.TEXT_STYLE'  IN TYPEOF( sty.styles[1] ) ) )
                | ( NOT ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
                + 'TEXT_STYLE_WITH_BOX_CHARACTERISTICS'  IN TYPEOF( ts.styles[1] ) ) ) ) ) = 0 );
      wr20: ( SIZEOF( QUERY ( ts <* QUERY ( sty <* SELF.styles | ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.TEXT_STYLE_WITH_BOX_CHARACTERISTICS'  IN 
                TYPEOF( sty.styles[1] ) ) ) | ( NOT ( SIZEOF( ts.styles[1]\
                text_style_with_box_characteristics.characteristics ) = 4 ) ) ) ) = 0 );
  END_ENTITY; -- draughting_annotation_occurrence (line:12790 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eDRAUGHTING_ANNOTATION_OCCURRENCE : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _draughting_annotation_occurrence.self
    }
    public let partialEntity: _draughting_annotation_occurrence

    //MARK: SUPERTYPES
    public let super_eREPRESENTATION_ITEM: eREPRESENTATION_ITEM 	// [1]
    public let super_eSTYLED_ITEM: eSTYLED_ITEM 	// [2]
    public let super_eANNOTATION_OCCURRENCE: eANNOTATION_OCCURRENCE 	// [3]
    public var super_eDRAUGHTING_ANNOTATION_OCCURRENCE: eDRAUGHTING_ANNOTATION_OCCURRENCE { return self } 	// [4]

    //MARK: SUBTYPES

    //MARK: ATTRIBUTES
    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eSTYLED_ITEM`` )
    public var ITEM: sSTYLED_ITEM_TARGET {
      get {
        return SDAI.UNWRAP( super_eSTYLED_ITEM.partialEntity._item )
      }
      set(newValue) {
        let partial = super_eSTYLED_ITEM.partialEntity
        partial._item = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eSTYLED_ITEM`` )
    public var STYLES: SDAI.SET<ePRESENTATION_STYLE_ASSIGNMENT>/*[0:nil]*/  {
      get {
        return SDAI.UNWRAP( super_eSTYLED_ITEM.partialEntity._styles )
      }
      set(newValue) {
        let partial = super_eSTYLED_ITEM.partialEntity
        partial._styles = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eREPRESENTATION_ITEM`` )
    public var NAME: tLABEL {
      get {
        return SDAI.UNWRAP( super_eREPRESENTATION_ITEM.partialEntity._name )
      }
      set(newValue) {
        let partial = super_eREPRESENTATION_ITEM.partialEntity
        partial._name = SDAI.UNWRAP(newValue)
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_draughting_annotation_occurrence.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eREPRESENTATION_ITEM.self) else { return nil }
      self.super_eREPRESENTATION_ITEM = super1

      guard let super2 = complexEntity?.entityReference(eSTYLED_ITEM.self) else { return nil }
      self.super_eSTYLED_ITEM = super2

      guard let super3 = complexEntity?.entityReference(eANNOTATION_OCCURRENCE.self) else { return nil }
      self.super_eANNOTATION_OCCURRENCE = super3

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _draughting_annotation_occurrence.WHERE_wr1(SELF: instance)
      result[prefix2 + " .WHERE_wr2"] = _draughting_annotation_occurrence.WHERE_wr2(SELF: instance)
      result[prefix2 + " .WHERE_wr3"] = _draughting_annotation_occurrence.WHERE_wr3(SELF: instance)
      result[prefix2 + " .WHERE_wr4"] = _draughting_annotation_occurrence.WHERE_wr4(SELF: instance)
      result[prefix2 + " .WHERE_wr5"] = _draughting_annotation_occurrence.WHERE_wr5(SELF: instance)
      result[prefix2 + " .WHERE_wr6"] = _draughting_annotation_occurrence.WHERE_wr6(SELF: instance)
      result[prefix2 + " .WHERE_wr7"] = _draughting_annotation_occurrence.WHERE_wr7(SELF: instance)
      result[prefix2 + " .WHERE_wr8"] = _draughting_annotation_occurrence.WHERE_wr8(SELF: instance)
      result[prefix2 + " .WHERE_wr9"] = _draughting_annotation_occurrence.WHERE_wr9(SELF: instance)
      result[prefix2 + " .WHERE_wr10"] = _draughting_annotation_occurrence.WHERE_wr10(SELF: instance)
      result[prefix2 + " .WHERE_wr11"] = _draughting_annotation_occurrence.WHERE_wr11(SELF: instance)
      result[prefix2 + " .WHERE_wr12"] = _draughting_annotation_occurrence.WHERE_wr12(SELF: instance)
      result[prefix2 + " .WHERE_wr13"] = _draughting_annotation_occurrence.WHERE_wr13(SELF: instance)
      result[prefix2 + " .WHERE_wr14"] = _draughting_annotation_occurrence.WHERE_wr14(SELF: instance)
      result[prefix2 + " .WHERE_wr15"] = _draughting_annotation_occurrence.WHERE_wr15(SELF: instance)
      result[prefix2 + " .WHERE_wr16"] = _draughting_annotation_occurrence.WHERE_wr16(SELF: instance)
      result[prefix2 + " .WHERE_wr17"] = _draughting_annotation_occurrence.WHERE_wr17(SELF: instance)
      result[prefix2 + " .WHERE_wr18"] = _draughting_annotation_occurrence.WHERE_wr18(SELF: instance)
      result[prefix2 + " .WHERE_wr19"] = _draughting_annotation_occurrence.WHERE_wr19(SELF: instance)
      result[prefix2 + " .WHERE_wr20"] = _draughting_annotation_occurrence.WHERE_wr20(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "DRAUGHTING_ANNOTATION_OCCURRENCE", type: self, explicitAttributeCount: 0)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eREPRESENTATION_ITEM.self)
      entityDef.add(supertype: eSTYLED_ITEM.self)
      entityDef.add(supertype: eANNOTATION_OCCURRENCE.self)
      entityDef.add(supertype: eDRAUGHTING_ANNOTATION_OCCURRENCE.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "ITEM", keyPath: \eDRAUGHTING_ANNOTATION_OCCURRENCE.ITEM, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "STYLES", keyPath: \eDRAUGHTING_ANNOTATION_OCCURRENCE.STYLES, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "NAME", keyPath: \eDRAUGHTING_ANNOTATION_OCCURRENCE.NAME, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)

      return entityDef
    }

  }
}
