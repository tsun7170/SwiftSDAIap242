/* file: data_quality_assessment_specification.swift 	 generated: Sun Oct 31 15:32:10 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY data_quality_assessment_specification;
      description  : text;
  END_ENTITY; -- data_quality_assessment_specification (line:11451 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  ENTITY(SELF)	data_quality_assessment_specification
    ATTR:  description,	TYPE: text -- EXPLICIT


  SUB- ENTITY(2)	shape_data_quality_assessment_by_numerical_test
    ATTR:  threshold,	TYPE: shape_data_quality_value_limit_type_select -- EXPLICIT


  SUB- ENTITY(3)	shape_data_quality_assessment_by_logical_test
    (no local attributes)

*/


//MARK: - Partial Entity
  public final class _data_quality_assessment_specification : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eDATA_QUALITY_ASSESSMENT_SPECIFICATION.self
    }

    //ATTRIBUTES
    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _description: tTEXT // PLAIN EXPLICIT ATTRIBUTE

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._description.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._description.value.isValueEqualOptionally(to: rhs._description.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._description.value.isValueEqualOptionally(to: rhs._description.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(DESCRIPTION: tTEXT) {
      self._description = DESCRIPTION
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 1
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverRequiredParameter(as: tTEXT.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( DESCRIPTION: p0 )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY data_quality_assessment_specification;
      description  : text;
  END_ENTITY; -- data_quality_assessment_specification (line:11451 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eDATA_QUALITY_ASSESSMENT_SPECIFICATION : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _data_quality_assessment_specification.self
    }
    public let partialEntity: _data_quality_assessment_specification

    //MARK: SUPERTYPES
    public var super_eDATA_QUALITY_ASSESSMENT_SPECIFICATION: eDATA_QUALITY_ASSESSMENT_SPECIFICATION { return self } 	// [1]

    //MARK: SUBTYPES
    public var sub_eSHAPE_DATA_QUALITY_ASSESSMENT_BY_NUMERICAL_TEST: eSHAPE_DATA_QUALITY_ASSESSMENT_BY_NUMERICAL_TEST? {	// [2]
      return self.complexEntity.entityReference(eSHAPE_DATA_QUALITY_ASSESSMENT_BY_NUMERICAL_TEST.self)
    }

    public var sub_eSHAPE_DATA_QUALITY_ASSESSMENT_BY_LOGICAL_TEST: eSHAPE_DATA_QUALITY_ASSESSMENT_BY_LOGICAL_TEST? {	// [3]
      return self.complexEntity.entityReference(eSHAPE_DATA_QUALITY_ASSESSMENT_BY_LOGICAL_TEST.self)
    }


    //MARK: ATTRIBUTES
    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eDATA_QUALITY_ASSESSMENT_SPECIFICATION`` )
    public var DESCRIPTION: tTEXT {
      get {
        return SDAI.UNWRAP( self.partialEntity._description )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._description = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSHAPE_DATA_QUALITY_ASSESSMENT_BY_NUMERICAL_TEST`` )
    public var THRESHOLD: sSHAPE_DATA_QUALITY_VALUE_LIMIT_TYPE_SELECT?  {
      get {
        return sub_eSHAPE_DATA_QUALITY_ASSESSMENT_BY_NUMERICAL_TEST?.partialEntity._threshold
      }
      set(newValue) {
        guard let partial = sub_eSHAPE_DATA_QUALITY_ASSESSMENT_BY_NUMERICAL_TEST?.super_eSHAPE_DATA_QUALITY_ASSESSMENT_BY_NUMERICAL_TEST
          .partialEntity else { return }
        partial._threshold = SDAI.UNWRAP(newValue)
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_data_quality_assessment_specification.self) else { return nil }
      self.partialEntity = partial

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }

    //SIMPLE ENTITY REFERENCE
    public convenience init?(_ partial:_data_quality_assessment_specification) {
      let complex = SDAI.ComplexEntity(entities:[partial])
      self.init(complex: complex)
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "DATA_QUALITY_ASSESSMENT_SPECIFICATION", type: self, explicitAttributeCount: 1)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eDATA_QUALITY_ASSESSMENT_SPECIFICATION.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "DESCRIPTION", keyPath: \eDATA_QUALITY_ASSESSMENT_SPECIFICATION.DESCRIPTION, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "THRESHOLD", keyPath: \eDATA_QUALITY_ASSESSMENT_SPECIFICATION.THRESHOLD, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)

      return entityDef
    }

  }
}
