/* file: dimensional_exponents.swift 	 generated: Sat Aug 14 13:46:02 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY dimensional_exponents;
      length_exponent                 : REAL;
      mass_exponent                   : REAL;
      time_exponent                   : REAL;
      electric_current_exponent       : REAL;
      thermodynamic_temperature_exponent : REAL;
      amount_of_substance_exponent    : REAL;
      luminous_intensity_exponent     : REAL;
  END_ENTITY; -- dimensional_exponents (line:12499 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  ENTITY(SELF)	dimensional_exponents
    ATTR:  length_exponent,	TYPE: REAL -- EXPLICIT

    ATTR:  mass_exponent,	TYPE: REAL -- EXPLICIT

    ATTR:  time_exponent,	TYPE: REAL -- EXPLICIT

    ATTR:  electric_current_exponent,	TYPE: REAL -- EXPLICIT

    ATTR:  thermodynamic_temperature_exponent,	TYPE: REAL -- EXPLICIT

    ATTR:  amount_of_substance_exponent,	TYPE: REAL -- EXPLICIT

    ATTR:  luminous_intensity_exponent,	TYPE: REAL -- EXPLICIT


*/


//MARK: - Partial Entity
  public final class _dimensional_exponents : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eDIMENSIONAL_EXPONENTS.self
    }

    //ATTRIBUTES
    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _length_exponent: SDAI.REAL // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _mass_exponent: SDAI.REAL // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _time_exponent: SDAI.REAL // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _electric_current_exponent: SDAI.REAL // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _thermodynamic_temperature_exponent: SDAI.REAL // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _amount_of_substance_exponent: SDAI.REAL // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _luminous_intensity_exponent: SDAI.REAL // PLAIN EXPLICIT ATTRIBUTE

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._length_exponent.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._mass_exponent.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._time_exponent.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._electric_current_exponent.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._thermodynamic_temperature_exponent.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._amount_of_substance_exponent.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._luminous_intensity_exponent.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._length_exponent.value.isValueEqualOptionally(to: rhs._length_exponent.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._mass_exponent.value.isValueEqualOptionally(to: rhs._mass_exponent.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._time_exponent.value.isValueEqualOptionally(to: rhs._time_exponent.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._electric_current_exponent.value.isValueEqualOptionally(to: rhs._electric_current_exponent.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._thermodynamic_temperature_exponent.value.isValueEqualOptionally(to: rhs._thermodynamic_temperature_exponent.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._amount_of_substance_exponent.value.isValueEqualOptionally(to: rhs._amount_of_substance_exponent.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._luminous_intensity_exponent.value.isValueEqualOptionally(to: rhs._luminous_intensity_exponent.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._length_exponent.value.isValueEqualOptionally(to: rhs._length_exponent.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._mass_exponent.value.isValueEqualOptionally(to: rhs._mass_exponent.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._time_exponent.value.isValueEqualOptionally(to: rhs._time_exponent.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._electric_current_exponent.value.isValueEqualOptionally(to: rhs._electric_current_exponent.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._thermodynamic_temperature_exponent.value.isValueEqualOptionally(to: rhs._thermodynamic_temperature_exponent.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._amount_of_substance_exponent.value.isValueEqualOptionally(to: rhs._amount_of_substance_exponent.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._luminous_intensity_exponent.value.isValueEqualOptionally(to: rhs._luminous_intensity_exponent.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(LENGTH_EXPONENT: SDAI.REAL, MASS_EXPONENT: SDAI.REAL, TIME_EXPONENT: SDAI.REAL, 
                ELECTRIC_CURRENT_EXPONENT: SDAI.REAL, THERMODYNAMIC_TEMPERATURE_EXPONENT: SDAI.REAL, 
                AMOUNT_OF_SUBSTANCE_EXPONENT: SDAI.REAL, LUMINOUS_INTENSITY_EXPONENT: SDAI.REAL) {
      self._length_exponent = LENGTH_EXPONENT
      self._mass_exponent = MASS_EXPONENT
      self._time_exponent = TIME_EXPONENT
      self._electric_current_exponent = ELECTRIC_CURRENT_EXPONENT
      self._thermodynamic_temperature_exponent = THERMODYNAMIC_TEMPERATURE_EXPONENT
      self._amount_of_substance_exponent = AMOUNT_OF_SUBSTANCE_EXPONENT
      self._luminous_intensity_exponent = LUMINOUS_INTENSITY_EXPONENT
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 7
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverRequiredParameter(as: SDAI.REAL.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p1) = exchangeStructure.recoverRequiredParameter(as: SDAI.REAL.self, from: parameters[1])
      else { exchangeStructure.add(errorContext: "while recovering parameter #1 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p2) = exchangeStructure.recoverRequiredParameter(as: SDAI.REAL.self, from: parameters[2])
      else { exchangeStructure.add(errorContext: "while recovering parameter #2 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p3) = exchangeStructure.recoverRequiredParameter(as: SDAI.REAL.self, from: parameters[3])
      else { exchangeStructure.add(errorContext: "while recovering parameter #3 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p4) = exchangeStructure.recoverRequiredParameter(as: SDAI.REAL.self, from: parameters[4])
      else { exchangeStructure.add(errorContext: "while recovering parameter #4 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p5) = exchangeStructure.recoverRequiredParameter(as: SDAI.REAL.self, from: parameters[5])
      else { exchangeStructure.add(errorContext: "while recovering parameter #5 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p6) = exchangeStructure.recoverRequiredParameter(as: SDAI.REAL.self, from: parameters[6])
      else { exchangeStructure.add(errorContext: "while recovering parameter #6 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( LENGTH_EXPONENT: p0, MASS_EXPONENT: p1, TIME_EXPONENT: p2, ELECTRIC_CURRENT_EXPONENT: p3, THERMODYNAMIC_TEMPERATURE_EXPONENT: p4, AMOUNT_OF_SUBSTANCE_EXPONENT: p5, LUMINOUS_INTENSITY_EXPONENT: p6 )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY dimensional_exponents;
      length_exponent                 : REAL;
      mass_exponent                   : REAL;
      time_exponent                   : REAL;
      electric_current_exponent       : REAL;
      thermodynamic_temperature_exponent : REAL;
      amount_of_substance_exponent    : REAL;
      luminous_intensity_exponent     : REAL;
  END_ENTITY; -- dimensional_exponents (line:12499 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eDIMENSIONAL_EXPONENTS : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _dimensional_exponents.self
    }
    public let partialEntity: _dimensional_exponents

    //MARK: SUPERTYPES
    public var super_eDIMENSIONAL_EXPONENTS: eDIMENSIONAL_EXPONENTS { return self } 	// [1]

    //MARK: SUBTYPES

    //MARK: ATTRIBUTES
    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eDIMENSIONAL_EXPONENTS`` )
    public var LENGTH_EXPONENT: SDAI.REAL {
      get {
        return SDAI.UNWRAP( self.partialEntity._length_exponent )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._length_exponent = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eDIMENSIONAL_EXPONENTS`` )
    public var MASS_EXPONENT: SDAI.REAL {
      get {
        return SDAI.UNWRAP( self.partialEntity._mass_exponent )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._mass_exponent = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eDIMENSIONAL_EXPONENTS`` )
    public var ELECTRIC_CURRENT_EXPONENT: SDAI.REAL {
      get {
        return SDAI.UNWRAP( self.partialEntity._electric_current_exponent )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._electric_current_exponent = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eDIMENSIONAL_EXPONENTS`` )
    public var TIME_EXPONENT: SDAI.REAL {
      get {
        return SDAI.UNWRAP( self.partialEntity._time_exponent )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._time_exponent = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eDIMENSIONAL_EXPONENTS`` )
    public var THERMODYNAMIC_TEMPERATURE_EXPONENT: SDAI.REAL {
      get {
        return SDAI.UNWRAP( self.partialEntity._thermodynamic_temperature_exponent )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._thermodynamic_temperature_exponent = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eDIMENSIONAL_EXPONENTS`` )
    public var LUMINOUS_INTENSITY_EXPONENT: SDAI.REAL {
      get {
        return SDAI.UNWRAP( self.partialEntity._luminous_intensity_exponent )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._luminous_intensity_exponent = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eDIMENSIONAL_EXPONENTS`` )
    public var AMOUNT_OF_SUBSTANCE_EXPONENT: SDAI.REAL {
      get {
        return SDAI.UNWRAP( self.partialEntity._amount_of_substance_exponent )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._amount_of_substance_exponent = SDAI.UNWRAP(newValue)
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_dimensional_exponents.self) else { return nil }
      self.partialEntity = partial

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }

    //SIMPLE ENTITY REFERENCE
    public convenience init?(_ partial:_dimensional_exponents) {
      let complex = SDAI.ComplexEntity(entities:[partial])
      self.init(complex: complex)
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "DIMENSIONAL_EXPONENTS", type: self, explicitAttributeCount: 7)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eDIMENSIONAL_EXPONENTS.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "LENGTH_EXPONENT", keyPath: \eDIMENSIONAL_EXPONENTS.LENGTH_EXPONENT, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "MASS_EXPONENT", keyPath: \eDIMENSIONAL_EXPONENTS.MASS_EXPONENT, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "ELECTRIC_CURRENT_EXPONENT", keyPath: \eDIMENSIONAL_EXPONENTS.ELECTRIC_CURRENT_EXPONENT, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "TIME_EXPONENT", keyPath: \eDIMENSIONAL_EXPONENTS.TIME_EXPONENT, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "THERMODYNAMIC_TEMPERATURE_EXPONENT", keyPath: \eDIMENSIONAL_EXPONENTS.THERMODYNAMIC_TEMPERATURE_EXPONENT, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "LUMINOUS_INTENSITY_EXPONENT", keyPath: \eDIMENSIONAL_EXPONENTS.LUMINOUS_INTENSITY_EXPONENT, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "AMOUNT_OF_SUBSTANCE_EXPONENT", keyPath: \eDIMENSIONAL_EXPONENTS.AMOUNT_OF_SUBSTANCE_EXPONENT, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: false)

      return entityDef
    }

  }
}
