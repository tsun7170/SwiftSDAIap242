/* file: derived_shape_aspect.swift 	 generated: Tue Nov 16 05:35:44 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY derived_shape_aspect
    SUPERTYPE OF ( 
        ONEOF ( 
            apex, 
            centre_of_symmetry, 
            geometric_alignment, 
            geometric_contact, 
            geometric_intersection, 
            parallel_offset, 
            perpendicular_to, 
            extension, 
            tangent ) )
    SUBTYPE OF ( shape_aspect );
    INVERSE
      deriving_relationships : SET [1 : ?] OF shape_aspect_deriving_relationship FOR relating_shape_aspect -- defined in ENTITY: shape_aspect_deriving_relationship;
  END_ENTITY; -- derived_shape_aspect (line:11930 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	shape_aspect
    ATTR:  name,	TYPE: label -- EXPLICIT

    ATTR:  description,	TYPE: OPTIONAL text -- EXPLICIT

    ATTR:  of_shape,	TYPE: product_definition_shape -- EXPLICIT (DYNAMIC)
      -- possibly overriden by
          ENTITY: component_feature,	TYPE: assembly_component
          ENTITY: constituent_shape_aspect,	TYPE: product_definition_shape	(as DERIVED)
          ENTITY: mated_part_relationship,	TYPE: mated_part_relationship	(as DERIVED)

    ATTR:  product_definitional,	TYPE: LOGICAL -- EXPLICIT (DYNAMIC)
      -- possibly overriden by
          ENTITY: default_model_geometric_view,	TYPE: LOGICAL	(as DERIVED)

    ATTR:  id,	TYPE: identifier -- DERIVED
      := get_id_value( SELF )


  ENTITY(SELF)	derived_shape_aspect
    ATTR:  deriving_relationships,	TYPE: SET [1 : ?] OF shape_aspect_deriving_relationship -- INVERSE
      FOR relating_shape_aspect;


  SUB- ENTITY(3)	geometric_contact
    (no local attributes)

  SUB- ENTITY(4)	apex
    (no local attributes)

  SUB- ENTITY(5)	geometric_alignment
    (no local attributes)

  SUB- ENTITY(6)	centre_of_symmetry
    (no local attributes)

  SUB- ENTITY(7)	geometric_intersection
    (no local attributes)

  SUB- ENTITY(8)	parallel_offset
    ATTR:  offset,	TYPE: measure_with_unit -- EXPLICIT


  SUB- ENTITY(9)	perpendicular_to
    (no local attributes)

  SUB- ENTITY(10)	extension
    (no local attributes)

  SUB- ENTITY(11)	tangent
    (no local attributes)

*/


//MARK: - Partial Entity
  public final class _derived_shape_aspect : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eDERIVED_SHAPE_ASPECT.self
    }

    //ATTRIBUTES
    /// INVERSE AGGREGATE ATTRIBUTE
    /// observing _shape_aspect_deriving_relationship ._relating_shape_aspect
    internal var _deriving_relationships: SDAI.SET<eSHAPE_ASPECT_DERIVING_RELATIONSHIP> {
      return __deriving_relationships.map{ $0.reference }
    }
    private var __deriving_relationships = SDAI.SET<SDAI.UnownedWrap<eSHAPE_ASPECT_DERIVING_RELATIONSHIP>>(
      bound1: SDAI.UNWRAP(SDAI.INTEGER(1)), bound2: (nil as SDAI.INTEGER?), 
      SDAI.EMPLY_AGGREGATE) // unowned backing store
    /// INVERSE AGGREGATE ATTR SUPPORT(ADDER)
    internal func _deriving_relationships__observeAddedReference(in complex: SDAI.ComplexEntity) {
      guard let newSource = complex.entityReference(eSHAPE_ASPECT_DERIVING_RELATIONSHIP.self) else { return }
      self.__deriving_relationships.add(member: SDAI.UnownedWrap(newSource) )
    }
    /// INVERSE AGGREGATE ATTR SUPPORT(REMOVER)
    internal func _deriving_relationships__observeRemovedReference(in complex: SDAI.ComplexEntity) {
      guard let oldSource = complex.entityReference(eSHAPE_ASPECT_DERIVING_RELATIONSHIP.self) else { return }
      let success = self.__deriving_relationships.remove(member: SDAI.UnownedWrap(oldSource) )
      assert(success, "failed to remove inverse attribute element")
    }
    /// INVERSE AGGREGATE ATTR SUPPORT(LEAVING REFERENCE OWNER)
    internal func _deriving_relationships__observe(leavingReferencerOwner complex: SDAI.ComplexEntity) {
      guard let oldSource = complex.entityReference(eSHAPE_ASPECT_DERIVING_RELATIONSHIP.self) else { return }
      let success = self.__deriving_relationships.removeAll(member: SDAI.UnownedWrap(oldSource) )
      assert(success, "failed to remove inverse attribute elements")
    }

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init() {
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 0
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      self.init( )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY derived_shape_aspect
    SUPERTYPE OF ( 
        ONEOF ( 
            apex, 
            centre_of_symmetry, 
            geometric_alignment, 
            geometric_contact, 
            geometric_intersection, 
            parallel_offset, 
            perpendicular_to, 
            extension, 
            tangent ) )
    SUBTYPE OF ( shape_aspect );
    INVERSE
      deriving_relationships : SET [1 : ?] OF shape_aspect_deriving_relationship FOR relating_shape_aspect -- defined in ENTITY: shape_aspect_deriving_relationship;
  END_ENTITY; -- derived_shape_aspect (line:11930 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eDERIVED_SHAPE_ASPECT : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _derived_shape_aspect.self
    }
    public let partialEntity: _derived_shape_aspect

    //MARK: SUPERTYPES
    public let super_eSHAPE_ASPECT: eSHAPE_ASPECT 	// [1]
    public var super_eDERIVED_SHAPE_ASPECT: eDERIVED_SHAPE_ASPECT { return self } 	// [2]

    //MARK: SUBTYPES
    public var sub_eGEOMETRIC_CONTACT: eGEOMETRIC_CONTACT? {	// [3]
      return self.complexEntity.entityReference(eGEOMETRIC_CONTACT.self)
    }

    public var sub_eAPEX: eAPEX? {	// [4]
      return self.complexEntity.entityReference(eAPEX.self)
    }

    public var sub_eGEOMETRIC_ALIGNMENT: eGEOMETRIC_ALIGNMENT? {	// [5]
      return self.complexEntity.entityReference(eGEOMETRIC_ALIGNMENT.self)
    }

    public var sub_eCENTRE_OF_SYMMETRY: eCENTRE_OF_SYMMETRY? {	// [6]
      return self.complexEntity.entityReference(eCENTRE_OF_SYMMETRY.self)
    }

    public var sub_eGEOMETRIC_INTERSECTION: eGEOMETRIC_INTERSECTION? {	// [7]
      return self.complexEntity.entityReference(eGEOMETRIC_INTERSECTION.self)
    }

    public var sub_ePARALLEL_OFFSET: ePARALLEL_OFFSET? {	// [8]
      return self.complexEntity.entityReference(ePARALLEL_OFFSET.self)
    }

    public var sub_ePERPENDICULAR_TO: ePERPENDICULAR_TO? {	// [9]
      return self.complexEntity.entityReference(ePERPENDICULAR_TO.self)
    }

    public var sub_eEXTENSION: eEXTENSION? {	// [10]
      return self.complexEntity.entityReference(eEXTENSION.self)
    }

    public var sub_eTANGENT: eTANGENT? {	// [11]
      return self.complexEntity.entityReference(eTANGENT.self)
    }


    //MARK: ATTRIBUTES
    /// __INVERSE__ attribute
    /// observing eSHAPE_ASPECT_DERIVING_RELATIONSHIP .RELATING_SHAPE_ASPECT
    /// - origin: SELF( ``eDERIVED_SHAPE_ASPECT`` )
    public var DERIVING_RELATIONSHIPS: SDAI.SET<eSHAPE_ASPECT_DERIVING_RELATIONSHIP>/*[1:nil]*/  {
      get {
        return SDAI.UNWRAP( self.partialEntity._deriving_relationships )
      }
    }

    /// __EXPLICIT(DYNAMIC)__ attribute
    /// - origin: SUPER( ``eSHAPE_ASPECT`` )
    public var PRODUCT_DEFINITIONAL: SDAI.LOGICAL {
      get {
        if let resolved = _shape_aspect._product_definitional__provider(complex: self.complexEntity) {
          let value = resolved._product_definitional__getter(complex: self.complexEntity)
          return value
        }
        else {
          return SDAI.UNWRAP( super_eSHAPE_ASPECT.partialEntity._product_definitional )
        }
      }
      set(newValue) {
        if let _ = _shape_aspect._product_definitional__provider(complex: self.complexEntity) { return }

        let partial = super_eSHAPE_ASPECT.partialEntity
        partial._product_definitional = SDAI.LOGICAL(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eSHAPE_ASPECT`` )
    public var DESCRIPTION: tTEXT?  {
      get {
        return super_eSHAPE_ASPECT.partialEntity._description
      }
      set(newValue) {
        let partial = super_eSHAPE_ASPECT.partialEntity
        partial._description = newValue
      }
    }

    /// __EXPLICIT(DYNAMIC)__ attribute
    /// - origin: SUPER( ``eSHAPE_ASPECT`` )
    public var OF_SHAPE: ePRODUCT_DEFINITION_SHAPE {
      get {
        if let resolved = _shape_aspect._of_shape__provider(complex: self.complexEntity) {
          let value = resolved._of_shape__getter(complex: self.complexEntity)
          return value
        }
        else {
          return SDAI.UNWRAP( super_eSHAPE_ASPECT.partialEntity._of_shape )
        }
      }
      set(newValue) {
        if let _ = _shape_aspect._of_shape__provider(complex: self.complexEntity) { return }

        let partial = super_eSHAPE_ASPECT.partialEntity
        partial._of_shape = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUPER( ``eSHAPE_ASPECT`` )
    public var ID: tIDENTIFIER?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"ID") {
          return cached.value as! tIDENTIFIER? 
        }
        let origin = super_eSHAPE_ASPECT
        let value = tIDENTIFIER(origin.partialEntity._id__getter(SELF: origin))
        updateCache(derivedAttributeName:"ID", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eSHAPE_ASPECT`` )
    public var NAME: tLABEL {
      get {
        return SDAI.UNWRAP( super_eSHAPE_ASPECT.partialEntity._name )
      }
      set(newValue) {
        let partial = super_eSHAPE_ASPECT.partialEntity
        partial._name = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePARALLEL_OFFSET`` )
    public var OFFSET: eMEASURE_WITH_UNIT?  {
      get {
        return sub_ePARALLEL_OFFSET?.partialEntity._offset
      }
      set(newValue) {
        guard let partial = sub_ePARALLEL_OFFSET?.super_ePARALLEL_OFFSET.partialEntity else { return }
        partial._offset = SDAI.UNWRAP(newValue)
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_derived_shape_aspect.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eSHAPE_ASPECT.self) else { return nil }
      self.super_eSHAPE_ASPECT = super1

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "DERIVED_SHAPE_ASPECT", type: self, explicitAttributeCount: 0)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eSHAPE_ASPECT.self)
      entityDef.add(supertype: eDERIVED_SHAPE_ASPECT.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "DERIVING_RELATIONSHIPS", keyPath: \eDERIVED_SHAPE_ASPECT.DERIVING_RELATIONSHIPS, 
        kind: .inverse, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "PRODUCT_DEFINITIONAL", keyPath: \eDERIVED_SHAPE_ASPECT.PRODUCT_DEFINITIONAL, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "DESCRIPTION", keyPath: \eDERIVED_SHAPE_ASPECT.DESCRIPTION, 
        kind: .explicitOptional, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "OF_SHAPE", keyPath: \eDERIVED_SHAPE_ASPECT.OF_SHAPE, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "ID", keyPath: \eDERIVED_SHAPE_ASPECT.ID, 
        kind: .derived, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "NAME", keyPath: \eDERIVED_SHAPE_ASPECT.NAME, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "OFFSET", keyPath: \eDERIVED_SHAPE_ASPECT.OFFSET, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)

      return entityDef
    }

  }
}
