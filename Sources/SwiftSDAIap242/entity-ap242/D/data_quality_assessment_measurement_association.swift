/* file: data_quality_assessment_measurement_association.swift 	 generated: Sun Oct 31 15:32:10 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY data_quality_assessment_measurement_association;
      assessment_specification  : data_quality_criterion_assessment_association;
      measurement_requirement   : data_quality_criterion_measurement_association;
    WHERE
      wr1: ( SELF.measurement_requirement\representation_item_relationship.relating_representation_item :=: 
               SELF.assessment_specification.criterion );
  END_ENTITY; -- data_quality_assessment_measurement_association (line:11443 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  ENTITY(SELF)	data_quality_assessment_measurement_association
    ATTR:  assessment_specification,	TYPE: data_quality_criterion_assessment_association -- EXPLICIT

    ATTR:  measurement_requirement,	TYPE: data_quality_criterion_measurement_association -- EXPLICIT


*/


//MARK: - Partial Entity
  public final class _data_quality_assessment_measurement_association : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eDATA_QUALITY_ASSESSMENT_MEASUREMENT_ASSOCIATION.self
    }

    //ATTRIBUTES
    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _assessment_specification: eDATA_QUALITY_CRITERION_ASSESSMENT_ASSOCIATION // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _measurement_requirement: eDATA_QUALITY_CRITERION_MEASUREMENT_ASSOCIATION // PLAIN EXPLICIT ATTRIBUTE

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._assessment_specification.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._measurement_requirement.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._assessment_specification.value.isValueEqualOptionally(to: rhs._assessment_specification.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._measurement_requirement.value.isValueEqualOptionally(to: rhs._measurement_requirement.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._assessment_specification.value.isValueEqualOptionally(to: rhs._assessment_specification.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._measurement_requirement.value.isValueEqualOptionally(to: rhs._measurement_requirement.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: eDATA_QUALITY_ASSESSMENT_MEASUREMENT_ASSOCIATION?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.MEASUREMENT_REQUIREMENT
      let _TEMP2 = _TEMP1.GROUP_REF(eREPRESENTATION_ITEM_RELATIONSHIP.self)
      let _TEMP3 = _TEMP2?.RELATING_REPRESENTATION_ITEM
      let _TEMP4 = SELF.ASSESSMENT_SPECIFICATION
      let _TEMP5 = _TEMP4.CRITERION
      let _TEMP6 = _TEMP3 .===. SDAI.FORCE_OPTIONAL(_TEMP5)
      return _TEMP6
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(ASSESSMENT_SPECIFICATION: eDATA_QUALITY_CRITERION_ASSESSMENT_ASSOCIATION, 
                MEASUREMENT_REQUIREMENT: eDATA_QUALITY_CRITERION_MEASUREMENT_ASSOCIATION) {
      self._assessment_specification = ASSESSMENT_SPECIFICATION
      self._measurement_requirement = MEASUREMENT_REQUIREMENT
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 2
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverRequiredParameter(as: 
        eDATA_QUALITY_CRITERION_ASSESSMENT_ASSOCIATION.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p1) = exchangeStructure.recoverRequiredParameter(as: 
        eDATA_QUALITY_CRITERION_MEASUREMENT_ASSOCIATION.self, from: parameters[1])
      else { exchangeStructure.add(errorContext: "while recovering parameter #1 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( ASSESSMENT_SPECIFICATION: p0, MEASUREMENT_REQUIREMENT: p1 )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY data_quality_assessment_measurement_association;
      assessment_specification  : data_quality_criterion_assessment_association;
      measurement_requirement   : data_quality_criterion_measurement_association;
    WHERE
      wr1: ( SELF.measurement_requirement\representation_item_relationship.relating_representation_item :=: 
               SELF.assessment_specification.criterion );
  END_ENTITY; -- data_quality_assessment_measurement_association (line:11443 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eDATA_QUALITY_ASSESSMENT_MEASUREMENT_ASSOCIATION : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _data_quality_assessment_measurement_association.self
    }
    public let partialEntity: _data_quality_assessment_measurement_association

    //MARK: SUPERTYPES
    public var super_eDATA_QUALITY_ASSESSMENT_MEASUREMENT_ASSOCIATION: eDATA_QUALITY_ASSESSMENT_MEASUREMENT_ASSOCIATION { return self } 	// [1]

    //MARK: SUBTYPES

    //MARK: ATTRIBUTES
    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eDATA_QUALITY_ASSESSMENT_MEASUREMENT_ASSOCIATION`` )
    public var ASSESSMENT_SPECIFICATION: eDATA_QUALITY_CRITERION_ASSESSMENT_ASSOCIATION {
      get {
        return SDAI.UNWRAP( self.partialEntity._assessment_specification )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._assessment_specification = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eDATA_QUALITY_ASSESSMENT_MEASUREMENT_ASSOCIATION`` )
    public var MEASUREMENT_REQUIREMENT: eDATA_QUALITY_CRITERION_MEASUREMENT_ASSOCIATION {
      get {
        return SDAI.UNWRAP( self.partialEntity._measurement_requirement )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._measurement_requirement = SDAI.UNWRAP(newValue)
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_data_quality_assessment_measurement_association.self) else { return nil }
      self.partialEntity = partial

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }

    //SIMPLE ENTITY REFERENCE
    public convenience init?(_ partial:_data_quality_assessment_measurement_association) {
      let complex = SDAI.ComplexEntity(entities:[partial])
      self.init(complex: complex)
    }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _data_quality_assessment_measurement_association.WHERE_wr1(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "DATA_QUALITY_ASSESSMENT_MEASUREMENT_ASSOCIATION", type: self, explicitAttributeCount: 2)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eDATA_QUALITY_ASSESSMENT_MEASUREMENT_ASSOCIATION.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "ASSESSMENT_SPECIFICATION", keyPath: \eDATA_QUALITY_ASSESSMENT_MEASUREMENT_ASSOCIATION.ASSESSMENT_SPECIFICATION, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "MEASUREMENT_REQUIREMENT", keyPath: \eDATA_QUALITY_ASSESSMENT_MEASUREMENT_ASSOCIATION.MEASUREMENT_REQUIREMENT, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)

      return entityDef
    }

  }
}
