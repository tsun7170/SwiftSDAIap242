/* file: draughting_model_item_association_with_placeholder.swift 	 generated: Tue Nov 16 05:35:44 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY draughting_model_item_association_with_placeholder
    SUBTYPE OF ( draughting_model_item_association );
      SELF\draughting_model_item_association.definition : draughting_model_item_definition;
      SELF\draughting_model_item_association.used_representation : draughting_model;
      SELF\item_identified_representation_usage.identified_item : draughting_callout;
      annotation_placeholder          : annotation_placeholder_occurrence; (* observed by
          annotation_placeholder_occurrence.the_draughting_model_item_association_with_placeholders
          *)
  END_ENTITY; -- draughting_model_item_association_with_placeholder (line:13095 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	item_identified_representation_usage
    ATTR:  name,	TYPE: label -- EXPLICIT

    ATTR:  description,	TYPE: OPTIONAL text -- EXPLICIT

    ATTR:  definition,	TYPE: item_identified_representation_usage_definition -- EXPLICIT	(AMBIGUOUS/MASKED)
      -- observed by
        ENTITY(1): explicit_composite_hole,	ATTR: explicit_shape,	TYPE: SET [0 : ?] OF
          item_identified_representation_usage
      -- possibly overriden by
          ENTITY: draughting_model_item_association,	TYPE: draughting_model_item_definition
          ENTITY: geometric_item_specific_usage,	TYPE: geometric_item_specific_usage_select

    ATTR:  used_representation,	TYPE: representation -- EXPLICIT	(AMBIGUOUS/MASKED)
      -- possibly overriden by
          ENTITY: draughting_model_item_association,	TYPE: annotation_representation_select
          ENTITY: geometric_item_specific_usage,	TYPE: shape_model

    ATTR:  identified_item,	TYPE: item_identified_representation_usage_select -- EXPLICIT
      -- possibly overriden by
          ENTITY: draughting_model_item_association,	TYPE: draughting_model_item_association_select
      *** ENTITY: draughting_model_item_association_with_placeholder,	TYPE: draughting_callout
          ENTITY: geometric_item_specific_usage,	TYPE: geometric_model_item


  SUPER- ENTITY(2)	draughting_model_item_association
    REDCR: definition,	TYPE: draughting_model_item_definition -- EXPLICIT	(AMBIGUOUS/MASKED)
      -- OVERRIDING ENTITY: item_identified_representation_usage
      -- possibly overriden by
          ENTITY: draughting_model_item_association_with_placeholder,	TYPE: draughting_model_item_definition

    REDCR: used_representation,	TYPE: annotation_representation_select -- EXPLICIT	(AMBIGUOUS/MASKED)
      -- OVERRIDING ENTITY: item_identified_representation_usage
      -- possibly overriden by
          ENTITY: draughting_model_item_association_with_placeholder,	TYPE: draughting_model

    REDCR: identified_item,	TYPE: draughting_model_item_association_select -- EXPLICIT
      -- OVERRIDING ENTITY: item_identified_representation_usage


  ENTITY(SELF)	draughting_model_item_association_with_placeholder
    REDCR: definition,	TYPE: draughting_model_item_definition -- EXPLICIT	(MASKING)
      -- OVERRIDING ENTITY: draughting_model_item_association

    REDCR: used_representation,	TYPE: draughting_model -- EXPLICIT	(MASKING)
      -- OVERRIDING ENTITY: draughting_model_item_association

    REDCR: identified_item,	TYPE: draughting_callout -- EXPLICIT
      -- OVERRIDING ENTITY: item_identified_representation_usage

    ATTR:  annotation_placeholder,	TYPE: annotation_placeholder_occurrence -- EXPLICIT
      -- observed by
        ENTITY(1): annotation_placeholder_occurrence,	ATTR: 
          the_draughting_model_item_association_with_placeholders,	TYPE: SET [0 : 1] OF
          draughting_model_item_association_with_placeholder


*/


//MARK: - Partial Entity
  public final class _draughting_model_item_association_with_placeholder : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eDRAUGHTING_MODEL_ITEM_ASSOCIATION_WITH_PLACEHOLDER.self
    }

    //ATTRIBUTES
    /* override var _definition: sDRAUGHTING_MODEL_ITEM_DEFINITION	//EXPLICIT REDEFINITION(eDRAUGHTING_MODEL_ITEM_ASSOCIATION) */

    /* override var _used_representation: eDRAUGHTING_MODEL	//EXPLICIT REDEFINITION(eDRAUGHTING_MODEL_ITEM_ASSOCIATION) */

    /* override var _identified_item: eDRAUGHTING_CALLOUT	//EXPLICIT REDEFINITION(eITEM_IDENTIFIED_REPRESENTATION_USAGE) */

    /// EXPLICIT ATTRIBUTE (OBSERVED)
    public internal(set) var _annotation_placeholder: eANNOTATION_PLACEHOLDER_OCCURRENCE{ // OBSERVED EXPLICIT ATTRIBUTE
      get {
        return __annotation_placeholder.copy()
      } // getter
      set {
        let newValue = newValue
        let observer = SDAI.EntityReferenceObserver(referencer: self, observerCode: _annotation_placeholder__observer.self)
        newValue.configure(with: observer)
        observer.observe(removing: SDAI.UNWRAP(seq:__annotation_placeholder.entityReferences),
          adding: SDAI.UNWRAP(seq: newValue.entityReferences) )
      } // setter
    }

    /// backing storage for observed attribute
    private var __annotation_placeholder: eANNOTATION_PLACEHOLDER_OCCURRENCE

    /// attribute observer code
    internal class _annotation_placeholder__observer: SDAI.EntityReferenceObserver.ObserverCode {
      final override class func observe<RemovingEntities: Sequence, AddingEntities: Sequence>(
        referencer: SDAI.PartialEntity, removing: RemovingEntities, adding: AddingEntities )
        where RemovingEntities.Element: SDAI.EntityReference, AddingEntities.Element: SDAI.EntityReference
      {
        for referencedComplex in removing.map({ $0.complexEntity }) {
          for referencerOwner in referencer.owners {
            //OBSERVING ENTITY: eANNOTATION_PLACEHOLDER_OCCURRENCE
            referencedComplex.partialEntityInstance(_annotation_placeholder_occurrence.self)?._the_draughting_model_item_association_with_placeholders__observeRemovedReference(in: referencerOwner)
          }
        }

        for referencedComplex in adding.map({ $0.complexEntity }) {
          for referencerOwner in referencer.owners {
            //OBSERVING ENTITY: eANNOTATION_PLACEHOLDER_OCCURRENCE
            referencedComplex.partialEntityInstance(_annotation_placeholder_occurrence.self)?._the_draughting_model_item_association_with_placeholders__observeAddedReference(in: referencerOwner)
          }
        }
      }

      final override class func observe(newReferencerOwner referencerOwner: SDAI.ComplexEntity) {
        guard let attrValue = referencerOwner.partialEntityInstance(_draughting_model_item_association_with_placeholder.self)?._annotation_placeholder else { return }
        for referencedComplex in attrValue.entityReferences.map({ $0.complexEntity }) {
        //OBSERVING ENTITY: eANNOTATION_PLACEHOLDER_OCCURRENCE
        referencedComplex.partialEntityInstance(_annotation_placeholder_occurrence.self)?._the_draughting_model_item_association_with_placeholders__observeAddedReference(in: referencerOwner)
        }
      }

      final override class func observe(leavingReferencerOwner referencerOwner: SDAI.ComplexEntity) {
        guard let attrValue = referencerOwner.partialEntityInstance(_draughting_model_item_association_with_placeholder.self)?._annotation_placeholder else { return }
        for referencedComplex in attrValue.entityReferences.map({ $0.complexEntity }) {
        //OBSERVING ENTITY: eANNOTATION_PLACEHOLDER_OCCURRENCE
        referencedComplex.partialEntityInstance(_annotation_placeholder_occurrence.self)?._the_draughting_model_item_association_with_placeholders__observe(leavingReferencerOwner: referencerOwner)
        }
      }

    }

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._annotation_placeholder.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._annotation_placeholder.value.isValueEqualOptionally(to: rhs._annotation_placeholder.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._annotation_placeholder.value.isValueEqualOptionally(to: rhs._annotation_placeholder.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(ANNOTATION_PLACEHOLDER: eANNOTATION_PLACEHOLDER_OCCURRENCE) {
      self.__annotation_placeholder = ANNOTATION_PLACEHOLDER
      super.init(asAbstructSuperclass:())

      self._annotation_placeholder.configure(with: SDAI.EntityReferenceObserver(referencer: self, observerCode: _annotation_placeholder__observer.self))
    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 1
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverRequiredParameter(as: 
        eANNOTATION_PLACEHOLDER_OCCURRENCE.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( ANNOTATION_PLACEHOLDER: p0 )
    }

    /// broadcasting a new complex entity becoming an owner of the partial entity
    final public override func broadcast(addedToComplex complex: SDAI.ComplexEntity) {
      _annotation_placeholder__observer.observe(newReferencerOwner: complex)
    }

    /// broadcasting a complex entity withdrawing an owner of the partial entity
    final public override func broadcast(removedFromComplex complex: SDAI.ComplexEntity) {
      _annotation_placeholder__observer.observe(leavingReferencerOwner: complex)
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY draughting_model_item_association_with_placeholder
    SUBTYPE OF ( draughting_model_item_association );
      SELF\draughting_model_item_association.definition : draughting_model_item_definition;
      SELF\draughting_model_item_association.used_representation : draughting_model;
      SELF\item_identified_representation_usage.identified_item : draughting_callout;
      annotation_placeholder          : annotation_placeholder_occurrence; (* observed by
          annotation_placeholder_occurrence.the_draughting_model_item_association_with_placeholders
          *)
  END_ENTITY; -- draughting_model_item_association_with_placeholder (line:13095 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eDRAUGHTING_MODEL_ITEM_ASSOCIATION_WITH_PLACEHOLDER : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _draughting_model_item_association_with_placeholder.self
    }
    public let partialEntity: _draughting_model_item_association_with_placeholder

    //MARK: SUPERTYPES
    public let super_eITEM_IDENTIFIED_REPRESENTATION_USAGE: eITEM_IDENTIFIED_REPRESENTATION_USAGE 	// [1]
    public let super_eDRAUGHTING_MODEL_ITEM_ASSOCIATION: eDRAUGHTING_MODEL_ITEM_ASSOCIATION 	// [2]
    public var super_eDRAUGHTING_MODEL_ITEM_ASSOCIATION_WITH_PLACEHOLDER: eDRAUGHTING_MODEL_ITEM_ASSOCIATION_WITH_PLACEHOLDER { return self } 	// [3]

    //MARK: SUBTYPES

    //MARK: ATTRIBUTES
    /// __EXPLICIT REDEF__ attribute
    /// - origin: SELF( ``eDRAUGHTING_MODEL_ITEM_ASSOCIATION_WITH_PLACEHOLDER`` )
    public var IDENTIFIED_ITEM: eDRAUGHTING_CALLOUT {
      get {
        return SDAI.UNWRAP( eDRAUGHTING_CALLOUT( super_eITEM_IDENTIFIED_REPRESENTATION_USAGE.partialEntity
          ._identified_item ) )
      }
      set(newValue) {
        let partial = super_eITEM_IDENTIFIED_REPRESENTATION_USAGE.partialEntity
        partial._identified_item = SDAI.UNWRAP(
          sITEM_IDENTIFIED_REPRESENTATION_USAGE_SELECT(newValue))
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eITEM_IDENTIFIED_REPRESENTATION_USAGE`` )
    public var DESCRIPTION: tTEXT?  {
      get {
        return super_eITEM_IDENTIFIED_REPRESENTATION_USAGE.partialEntity._description
      }
      set(newValue) {
        let partial = super_eITEM_IDENTIFIED_REPRESENTATION_USAGE.partialEntity
        partial._description = newValue
      }
    }

    /// __EXPLICIT REDEF__ attribute
    /// - origin: SELF( ``eDRAUGHTING_MODEL_ITEM_ASSOCIATION_WITH_PLACEHOLDER`` )
    public var USED_REPRESENTATION: eDRAUGHTING_MODEL {
      get {
        return SDAI.UNWRAP( eDRAUGHTING_MODEL( super_eITEM_IDENTIFIED_REPRESENTATION_USAGE.partialEntity
          ._used_representation ) )
      }
      set(newValue) {
        let partial = super_eITEM_IDENTIFIED_REPRESENTATION_USAGE.partialEntity
        partial._used_representation = SDAI.UNWRAP(
          eREPRESENTATION(newValue))
      }
    }

    /// __EXPLICIT(OBSERVED)__ attribute
    /// - origin: SELF( ``eDRAUGHTING_MODEL_ITEM_ASSOCIATION_WITH_PLACEHOLDER`` )
    public var ANNOTATION_PLACEHOLDER: eANNOTATION_PLACEHOLDER_OCCURRENCE {
      get {
        return SDAI.UNWRAP( self.partialEntity._annotation_placeholder )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._annotation_placeholder = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT REDEF__ attribute
    /// - origin: SELF( ``eDRAUGHTING_MODEL_ITEM_ASSOCIATION_WITH_PLACEHOLDER`` )
    public var DEFINITION: sDRAUGHTING_MODEL_ITEM_DEFINITION {
      get {
        return SDAI.UNWRAP( sDRAUGHTING_MODEL_ITEM_DEFINITION( super_eITEM_IDENTIFIED_REPRESENTATION_USAGE
          .partialEntity._definition ) )
      }
      set(newValue) {
        let partial = super_eITEM_IDENTIFIED_REPRESENTATION_USAGE.partialEntity
        partial._definition = SDAI.UNWRAP(
          sITEM_IDENTIFIED_REPRESENTATION_USAGE_DEFINITION(newValue))
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eITEM_IDENTIFIED_REPRESENTATION_USAGE`` )
    public var NAME: tLABEL {
      get {
        return SDAI.UNWRAP( super_eITEM_IDENTIFIED_REPRESENTATION_USAGE.partialEntity._name )
      }
      set(newValue) {
        let partial = super_eITEM_IDENTIFIED_REPRESENTATION_USAGE.partialEntity
        partial._name = SDAI.UNWRAP(newValue)
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_draughting_model_item_association_with_placeholder.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eITEM_IDENTIFIED_REPRESENTATION_USAGE.self) else { return nil }
      self.super_eITEM_IDENTIFIED_REPRESENTATION_USAGE = super1

      guard let super2 = complexEntity?.entityReference(eDRAUGHTING_MODEL_ITEM_ASSOCIATION.self) else { return nil }
      self.super_eDRAUGHTING_MODEL_ITEM_ASSOCIATION = super2

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "DRAUGHTING_MODEL_ITEM_ASSOCIATION_WITH_PLACEHOLDER", type: self, explicitAttributeCount: 1)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eITEM_IDENTIFIED_REPRESENTATION_USAGE.self)
      entityDef.add(supertype: eDRAUGHTING_MODEL_ITEM_ASSOCIATION.self)
      entityDef.add(supertype: eDRAUGHTING_MODEL_ITEM_ASSOCIATION_WITH_PLACEHOLDER.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "IDENTIFIED_ITEM", keyPath: \eDRAUGHTING_MODEL_ITEM_ASSOCIATION_WITH_PLACEHOLDER.IDENTIFIED_ITEM, 
        kind: .explicitRedeclaring, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "DESCRIPTION", keyPath: \eDRAUGHTING_MODEL_ITEM_ASSOCIATION_WITH_PLACEHOLDER.DESCRIPTION, 
        kind: .explicitOptional, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "USED_REPRESENTATION", keyPath: \eDRAUGHTING_MODEL_ITEM_ASSOCIATION_WITH_PLACEHOLDER.USED_REPRESENTATION, 
        kind: .explicitRedeclaring, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "ANNOTATION_PLACEHOLDER", keyPath: \eDRAUGHTING_MODEL_ITEM_ASSOCIATION_WITH_PLACEHOLDER.ANNOTATION_PLACEHOLDER, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "DEFINITION", keyPath: \eDRAUGHTING_MODEL_ITEM_ASSOCIATION_WITH_PLACEHOLDER.DEFINITION, 
        kind: .explicitRedeclaring, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "NAME", keyPath: \eDRAUGHTING_MODEL_ITEM_ASSOCIATION_WITH_PLACEHOLDER.NAME, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)

      return entityDef
    }

  }
}
