/* file: detailed_equivalence_report_request.swift 	 generated: Tue Nov 16 05:35:44 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY detailed_equivalence_report_request
    SUBTYPE OF ( data_equivalence_report_request );
      report_request_type  : detailed_report_style_type;
      report_sequence      : preferred_report_ordering;
  END_ENTITY; -- detailed_equivalence_report_request (line:11998 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	data_equivalence_report_request
    ATTR:  id,	TYPE: identifier -- EXPLICIT

    ATTR:  name,	TYPE: label -- EXPLICIT

    ATTR:  description,	TYPE: OPTIONAL text -- EXPLICIT

    ATTR:  criterion_of_report_request,	TYPE: data_equivalence_criterion -- EXPLICIT


  ENTITY(SELF)	detailed_equivalence_report_request
    ATTR:  report_request_type,	TYPE: detailed_report_style_type -- EXPLICIT (DYNAMIC)
      -- possibly overriden by
          ENTITY: detailed_equivalence_report_request_with_number_of_instances,	TYPE: detailed_report_style_type	(as DERIVED)

    ATTR:  report_sequence,	TYPE: preferred_report_ordering -- EXPLICIT


  SUB- ENTITY(3)	detailed_equivalence_report_request_with_number_of_instances
    ATTR:  number_of_instances,	TYPE: INTEGER -- EXPLICIT

    REDCR: report_request_type,	TYPE: detailed_report_style_type -- DERIVED (DYNAMIC)
      := inspected_element
      -- OVERRIDING ENTITY: detailed_equivalence_report_request


*/


//MARK: - Partial Entity
  public final class _detailed_equivalence_report_request : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eDETAILED_EQUIVALENCE_REPORT_REQUEST.self
    }

    //ATTRIBUTES
    /// EXPLICIT ATTRIBUTE 
    /// - see the corresponding attribute accesser in the entity reference definition for the attribute value dynamic lookup logic
    public internal(set) var _report_request_type: nDETAILED_REPORT_STYLE_TYPE?  // PLAIN EXPLICIT ATTRIBUTE

    internal static func _report_request_type__provider(complex: SDAI.ComplexEntity) -> eDETAILED_EQUIVALENCE_REPORT_REQUEST__REPORT_REQUEST_TYPE__provider? {
      let resolved = complex.resolvePartialEntityInstance(from: [
        _detailed_equivalence_report_request_with_number_of_instances.typeIdentity])
      return resolved as? eDETAILED_EQUIVALENCE_REPORT_REQUEST__REPORT_REQUEST_TYPE__provider
    }

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _report_sequence: nPREFERRED_REPORT_ORDERING // PLAIN EXPLICIT ATTRIBUTE

    //PARTIAL COMPLEX ENTITY SUPPORT
    final public override class func fixupPartialComplexEntityAttributes(partialComplex: SDAI.ComplexEntity, baseComplex: SDAI.ComplexEntity) {
      guard let pe = partialComplex.partialEntityInstance(_detailed_equivalence_report_request.self) else { return }

      if pe._report_request_type == nil, 
        self._report_request_type__provider(complex: partialComplex) == nil, 
        let base__report_request_type__provider = self._report_request_type__provider(complex: baseComplex) {
        pe._report_request_type = base__report_request_type__provider._report_request_type__getter(complex: baseComplex)
      }
    }
    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._report_request_type?.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._report_sequence.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._report_request_type?.value.isValueEqualOptionally(to: rhs._report_request_type?.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._report_sequence.value.isValueEqualOptionally(to: rhs._report_sequence.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._report_request_type?.value.isValueEqualOptionally(to: rhs._report_request_type?.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._report_sequence.value.isValueEqualOptionally(to: rhs._report_sequence.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(REPORT_REQUEST_TYPE: nDETAILED_REPORT_STYLE_TYPE? , REPORT_SEQUENCE: 
                nPREFERRED_REPORT_ORDERING) {
      self._report_request_type = REPORT_REQUEST_TYPE
      self._report_sequence = REPORT_SEQUENCE
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 2
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverOmittableParameter(as: 
        nDETAILED_REPORT_STYLE_TYPE.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p1) = exchangeStructure.recoverRequiredParameter(as: nPREFERRED_REPORT_ORDERING.self, from: parameters[1])
      else { exchangeStructure.add(errorContext: "while recovering parameter #1 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( REPORT_REQUEST_TYPE: p0, REPORT_SEQUENCE: p1 )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY detailed_equivalence_report_request
    SUBTYPE OF ( data_equivalence_report_request );
      report_request_type  : detailed_report_style_type;
      report_sequence      : preferred_report_ordering;
  END_ENTITY; -- detailed_equivalence_report_request (line:11998 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eDETAILED_EQUIVALENCE_REPORT_REQUEST : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _detailed_equivalence_report_request.self
    }
    public let partialEntity: _detailed_equivalence_report_request

    //MARK: SUPERTYPES
    public let super_eDATA_EQUIVALENCE_REPORT_REQUEST: eDATA_EQUIVALENCE_REPORT_REQUEST 	// [1]
    public var super_eDETAILED_EQUIVALENCE_REPORT_REQUEST: eDETAILED_EQUIVALENCE_REPORT_REQUEST { return self } 	// [2]

    //MARK: SUBTYPES
    public var sub_eDETAILED_EQUIVALENCE_REPORT_REQUEST_WITH_NUMBER_OF_INSTANCES: eDETAILED_EQUIVALENCE_REPORT_REQUEST_WITH_NUMBER_OF_INSTANCES? {	// [3]
      return self.complexEntity.entityReference(eDETAILED_EQUIVALENCE_REPORT_REQUEST_WITH_NUMBER_OF_INSTANCES.self)
    }


    //MARK: ATTRIBUTES
    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eDATA_EQUIVALENCE_REPORT_REQUEST`` )
    public var DESCRIPTION: tTEXT?  {
      get {
        return super_eDATA_EQUIVALENCE_REPORT_REQUEST.partialEntity._description
      }
      set(newValue) {
        let partial = super_eDATA_EQUIVALENCE_REPORT_REQUEST.partialEntity
        partial._description = newValue
      }
    }

    /// __EXPLICIT(DYNAMIC)__ attribute
    /// - origin: SELF( ``eDETAILED_EQUIVALENCE_REPORT_REQUEST`` )
    public var REPORT_REQUEST_TYPE: nDETAILED_REPORT_STYLE_TYPE {
      get {
        if let resolved = _detailed_equivalence_report_request._report_request_type__provider(complex: self.complexEntity) {
          let value = resolved._report_request_type__getter(complex: self.complexEntity)
          return value
        }
        else {
          return SDAI.UNWRAP( self.partialEntity._report_request_type )
        }
      }
      set(newValue) {
        if let _ = _detailed_equivalence_report_request._report_request_type__provider(complex: self.complexEntity) { return }

        let partial = self.partialEntity
        partial._report_request_type = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eDETAILED_EQUIVALENCE_REPORT_REQUEST`` )
    public var REPORT_SEQUENCE: nPREFERRED_REPORT_ORDERING {
      get {
        return SDAI.UNWRAP( self.partialEntity._report_sequence )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._report_sequence = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eDATA_EQUIVALENCE_REPORT_REQUEST`` )
    public var ID: tIDENTIFIER {
      get {
        return SDAI.UNWRAP( super_eDATA_EQUIVALENCE_REPORT_REQUEST.partialEntity._id )
      }
      set(newValue) {
        let partial = super_eDATA_EQUIVALENCE_REPORT_REQUEST.partialEntity
        partial._id = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eDATA_EQUIVALENCE_REPORT_REQUEST`` )
    public var CRITERION_OF_REPORT_REQUEST: eDATA_EQUIVALENCE_CRITERION {
      get {
        return SDAI.UNWRAP( super_eDATA_EQUIVALENCE_REPORT_REQUEST.partialEntity._criterion_of_report_request )
      }
      set(newValue) {
        let partial = super_eDATA_EQUIVALENCE_REPORT_REQUEST.partialEntity
        partial._criterion_of_report_request = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eDATA_EQUIVALENCE_REPORT_REQUEST`` )
    public var NAME: tLABEL {
      get {
        return SDAI.UNWRAP( super_eDATA_EQUIVALENCE_REPORT_REQUEST.partialEntity._name )
      }
      set(newValue) {
        let partial = super_eDATA_EQUIVALENCE_REPORT_REQUEST.partialEntity
        partial._name = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eDETAILED_EQUIVALENCE_REPORT_REQUEST_WITH_NUMBER_OF_INSTANCES`` )
    public var NUMBER_OF_INSTANCES: SDAI.INTEGER?  {
      get {
        return sub_eDETAILED_EQUIVALENCE_REPORT_REQUEST_WITH_NUMBER_OF_INSTANCES?.partialEntity
          ._number_of_instances
      }
      set(newValue) {
        guard let partial = sub_eDETAILED_EQUIVALENCE_REPORT_REQUEST_WITH_NUMBER_OF_INSTANCES?.super_eDETAILED_EQUIVALENCE_REPORT_REQUEST_WITH_NUMBER_OF_INSTANCES
          .partialEntity else { return }
        partial._number_of_instances = SDAI.UNWRAP(newValue)
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_detailed_equivalence_report_request.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eDATA_EQUIVALENCE_REPORT_REQUEST.self) else { return nil }
      self.super_eDATA_EQUIVALENCE_REPORT_REQUEST = super1

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "DETAILED_EQUIVALENCE_REPORT_REQUEST", type: self, explicitAttributeCount: 2)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eDATA_EQUIVALENCE_REPORT_REQUEST.self)
      entityDef.add(supertype: eDETAILED_EQUIVALENCE_REPORT_REQUEST.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "DESCRIPTION", keyPath: \eDETAILED_EQUIVALENCE_REPORT_REQUEST.DESCRIPTION, 
        kind: .explicitOptional, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "REPORT_REQUEST_TYPE", keyPath: \eDETAILED_EQUIVALENCE_REPORT_REQUEST.REPORT_REQUEST_TYPE, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "REPORT_SEQUENCE", keyPath: \eDETAILED_EQUIVALENCE_REPORT_REQUEST.REPORT_SEQUENCE, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "ID", keyPath: \eDETAILED_EQUIVALENCE_REPORT_REQUEST.ID, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "CRITERION_OF_REPORT_REQUEST", keyPath: \eDETAILED_EQUIVALENCE_REPORT_REQUEST.CRITERION_OF_REPORT_REQUEST, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "NAME", keyPath: \eDETAILED_EQUIVALENCE_REPORT_REQUEST.NAME, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "NUMBER_OF_INSTANCES", keyPath: \eDETAILED_EQUIVALENCE_REPORT_REQUEST.NUMBER_OF_INSTANCES, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)

      return entityDef
    }

  }
}

//MARK: - Entity Dynamic Attribute Protocols
internal protocol eDETAILED_EQUIVALENCE_REPORT_REQUEST__REPORT_REQUEST_TYPE__provider {
  func _report_request_type__getter(complex: SDAI.ComplexEntity) -> 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.nDETAILED_REPORT_STYLE_TYPE
}
