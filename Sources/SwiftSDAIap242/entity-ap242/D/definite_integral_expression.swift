/* file: definite_integral_expression.swift 	 generated: Tue Nov 16 05:35:44 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY definite_integral_expression
    SUBTYPE OF ( quantifier_expression );
      lower_limit_neg_infinity  : BOOLEAN;
      upper_limit_pos_infinity  : BOOLEAN;
    DERIVE
      integrand                       : generic_expression := SELF\multiple_arity_generic_expression.operands
                                          [1];
      variable_of_integration         : maths_variable := SELF\multiple_arity_generic_expression.operands[2];
      SELF\quantifier_expression.variables : LIST [1 : 1] OF UNIQUE generic_variable := [
                                          variable_of_integration];
    WHERE
      wr1: has_values_space( integrand );
      wr2: space_is_continuum( values_space_of( integrand ) );
      wr3: definite_integral_expr_check( SELF\multiple_arity_generic_expression.operands, 
               lower_limit_neg_infinity, upper_limit_pos_infinity );
  END_ENTITY; -- definite_integral_expression (line:11847 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	generic_expression
    (no local attributes)

  SUPER- ENTITY(2)	multiple_arity_generic_expression
    ATTR:  operands,	TYPE: LIST [2 : ?] OF generic_expression -- EXPLICIT (DYNAMIC)
      -- possibly overriden by
          ENTITY: series_composed_function,	TYPE: LIST [2 : ?] OF maths_function
          ENTITY: concat_expression,	TYPE: LIST [2 : ?] OF string_expression
          ENTITY: multiple_arity_numeric_expression,	TYPE: LIST [2 : ?] OF numeric_expression
          ENTITY: multiple_arity_boolean_expression,	TYPE: LIST [2 : ?] OF boolean_expression
          ENTITY: basic_sparse_matrix,	TYPE: LIST [3 : 3] OF maths_function
          ENTITY: parallel_composed_function,	TYPE: LIST [2 : ?] OF generic_expression	(as DERIVED)
          ENTITY: function_application,	TYPE: LIST [2 : ?] OF generic_expression	(as DERIVED)


  SUPER- ENTITY(3)	quantifier_expression
    ATTR:  variables,	TYPE: LIST [1 : ?] OF UNIQUE generic_variable -- EXPLICIT (DYNAMIC)
      -- possibly overriden by
          ENTITY: abstracted_expression_function,	TYPE: LIST [1 : ?] OF UNIQUE generic_variable	(as DERIVED)
      *** ENTITY: definite_integral_expression,	TYPE: LIST [1 : 1] OF UNIQUE generic_variable	(as DERIVED)


  ENTITY(SELF)	definite_integral_expression
    ATTR:  lower_limit_neg_infinity,	TYPE: BOOLEAN -- EXPLICIT

    ATTR:  upper_limit_pos_infinity,	TYPE: BOOLEAN -- EXPLICIT

    ATTR:  integrand,	TYPE: generic_expression -- DERIVED
      := SELF\multiple_arity_generic_expression.operands[1]

    ATTR:  variable_of_integration,	TYPE: maths_variable -- DERIVED
      := SELF\multiple_arity_generic_expression.operands[2]

    REDCR: variables,	TYPE: LIST [1 : 1] OF UNIQUE generic_variable -- DERIVED (DYNAMIC)
      := [variable_of_integration]
      -- OVERRIDING ENTITY: quantifier_expression


*/


//MARK: - Partial Entity
  public final class _definite_integral_expression : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eDEFINITE_INTEGRAL_EXPRESSION.self
    }

    //ATTRIBUTES
    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _lower_limit_neg_infinity: SDAI.BOOLEAN // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _upper_limit_pos_infinity: SDAI.BOOLEAN // PLAIN EXPLICIT ATTRIBUTE

    /// DERIVE ATTRIBUTE
    internal func _integrand__getter(SELF: eDEFINITE_INTEGRAL_EXPRESSION) -> eGENERIC_EXPRESSION?  {

      let _TEMP1 = SELF.GROUP_REF(eMULTIPLE_ARITY_GENERIC_EXPRESSION.self)
      let _TEMP2 = _TEMP1?.OPERANDS
      let _TEMP3 = _TEMP2?[1]
      return _TEMP3
    }

    /// DERIVE ATTRIBUTE
    internal func _variable_of_integration__getter(SELF: eDEFINITE_INTEGRAL_EXPRESSION) -> eMATHS_VARIABLE?  {

      let _TEMP1 = SELF.GROUP_REF(eMULTIPLE_ARITY_GENERIC_EXPRESSION.self)
      let _TEMP2 = _TEMP1?.OPERANDS
      let _TEMP3 = _TEMP2?[2]
      return eMATHS_VARIABLE(/*eGENERIC_EXPRESSION*/_TEMP3)
    }

    /// DERIVE ATTRIBUTE REDEFINITION(origin: eQUANTIFIER_EXPRESSION)
    /// - attribute value provider protocol conformance wrapper
    internal func _variables__getter(complex: SDAI.ComplexEntity) -> SDAI.LIST_UNIQUE<eGENERIC_VARIABLE>/*[1:
      nil]*/  {
      let SELF = complex.entityReference( eDEFINITE_INTEGRAL_EXPRESSION.self )!
      return SDAI.UNWRAP( SDAI.LIST_UNIQUE<eGENERIC_VARIABLE>(SELF.VARIABLES) )
    }
    /// DERIVE ATTRIBUTE REDEFINITION(origin: eQUANTIFIER_EXPRESSION)
    /// - gut of derived attribute logic
    internal func _variables__getter(SELF: eDEFINITE_INTEGRAL_EXPRESSION) -> SDAI.LIST_UNIQUE<
      eGENERIC_VARIABLE>/*[1:1]*/  {

      let _TEMP1 = SDAI.LIST_UNIQUE<eGENERIC_VARIABLE>(bound1: SDAI.UNWRAP(SDAI.INTEGER(1)), bound2: SDAI.INTEGER(
        1), ([SDAI.AIE(eGENERIC_VARIABLE(/*eMATHS_VARIABLE*/SELF.VARIABLE_OF_INTEGRATION))] 
        as [SDAI.AggregationInitializerElement<eGENERIC_VARIABLE>]))
      let value = _TEMP1
      return SDAI.UNWRAP( value )
    }

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._lower_limit_neg_infinity.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._upper_limit_pos_infinity.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._lower_limit_neg_infinity.value.isValueEqualOptionally(to: rhs._lower_limit_neg_infinity.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._upper_limit_pos_infinity.value.isValueEqualOptionally(to: rhs._upper_limit_pos_infinity.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._lower_limit_neg_infinity.value.isValueEqualOptionally(to: rhs._lower_limit_neg_infinity.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._upper_limit_pos_infinity.value.isValueEqualOptionally(to: rhs._upper_limit_pos_infinity.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: eDEFINITE_INTEGRAL_EXPRESSION?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = HAS_VALUES_SPACE(SELF.INTEGRAND)
      return SDAI.LOGICAL(_TEMP1)
    }
    public static func WHERE_wr2(SELF: eDEFINITE_INTEGRAL_EXPRESSION?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = VALUES_SPACE_OF(SELF.INTEGRAND)
      let _TEMP2 = SPACE_IS_CONTINUUM(_TEMP1)
      return SDAI.LOGICAL(_TEMP2)
    }
    public static func WHERE_wr3(SELF: eDEFINITE_INTEGRAL_EXPRESSION?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.GROUP_REF(eMULTIPLE_ARITY_GENERIC_EXPRESSION.self)
      let _TEMP2 = _TEMP1?.OPERANDS
      let _TEMP3 = DEFINITE_INTEGRAL_EXPR_CHECK(
        OPERANDS: _TEMP2, LOWERINF: SELF.LOWER_LIMIT_NEG_INFINITY, 
        UPPERINF: SELF.UPPER_LIMIT_POS_INFINITY)
      return SDAI.LOGICAL(_TEMP3)
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(LOWER_LIMIT_NEG_INFINITY: SDAI.BOOLEAN, UPPER_LIMIT_POS_INFINITY: SDAI.BOOLEAN) {
      self._lower_limit_neg_infinity = LOWER_LIMIT_NEG_INFINITY
      self._upper_limit_pos_infinity = UPPER_LIMIT_POS_INFINITY
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 2
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverRequiredParameter(as: SDAI.BOOLEAN.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p1) = exchangeStructure.recoverRequiredParameter(as: SDAI.BOOLEAN.self, from: parameters[1])
      else { exchangeStructure.add(errorContext: "while recovering parameter #1 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( LOWER_LIMIT_NEG_INFINITY: p0, UPPER_LIMIT_POS_INFINITY: p1 )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY definite_integral_expression
    SUBTYPE OF ( quantifier_expression );
      lower_limit_neg_infinity  : BOOLEAN;
      upper_limit_pos_infinity  : BOOLEAN;
    DERIVE
      integrand                       : generic_expression := SELF\multiple_arity_generic_expression.operands
                                          [1];
      variable_of_integration         : maths_variable := SELF\multiple_arity_generic_expression.operands[2];
      SELF\quantifier_expression.variables : LIST [1 : 1] OF UNIQUE generic_variable := [
                                          variable_of_integration];
    WHERE
      wr1: has_values_space( integrand );
      wr2: space_is_continuum( values_space_of( integrand ) );
      wr3: definite_integral_expr_check( SELF\multiple_arity_generic_expression.operands, 
               lower_limit_neg_infinity, upper_limit_pos_infinity );
  END_ENTITY; -- definite_integral_expression (line:11847 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eDEFINITE_INTEGRAL_EXPRESSION : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _definite_integral_expression.self
    }
    public let partialEntity: _definite_integral_expression

    //MARK: SUPERTYPES
    public let super_eGENERIC_EXPRESSION: eGENERIC_EXPRESSION 	// [1]
    public let super_eMULTIPLE_ARITY_GENERIC_EXPRESSION: eMULTIPLE_ARITY_GENERIC_EXPRESSION 	// [2]
    public let super_eQUANTIFIER_EXPRESSION: eQUANTIFIER_EXPRESSION 	// [3]
    public var super_eDEFINITE_INTEGRAL_EXPRESSION: eDEFINITE_INTEGRAL_EXPRESSION { return self } 	// [4]

    //MARK: SUBTYPES

    //MARK: ATTRIBUTES
    /// __DERIVE__ attribute
    /// - origin: SELF( ``eDEFINITE_INTEGRAL_EXPRESSION`` )
    public var VARIABLE_OF_INTEGRATION: eMATHS_VARIABLE?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"VARIABLE_OF_INTEGRATION") {
          return cached.value as! eMATHS_VARIABLE? 
        }
        let origin = self
        let value = origin.partialEntity._variable_of_integration__getter(SELF: origin)
        updateCache(derivedAttributeName:"VARIABLE_OF_INTEGRATION", value:value)
        return value
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SELF( ``eDEFINITE_INTEGRAL_EXPRESSION`` )
    public var INTEGRAND: eGENERIC_EXPRESSION?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"INTEGRAND") {
          return cached.value as! eGENERIC_EXPRESSION? 
        }
        let origin = self
        let value = origin.partialEntity._integrand__getter(SELF: origin)
        updateCache(derivedAttributeName:"INTEGRAND", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eDEFINITE_INTEGRAL_EXPRESSION`` )
    public var UPPER_LIMIT_POS_INFINITY: SDAI.BOOLEAN {
      get {
        return SDAI.UNWRAP( self.partialEntity._upper_limit_pos_infinity )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._upper_limit_pos_infinity = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT(DYNAMIC)__ attribute
    /// - origin: SUPER( ``eMULTIPLE_ARITY_GENERIC_EXPRESSION`` )
    public var OPERANDS: SDAI.LIST<eGENERIC_EXPRESSION>/*[2:nil]*/  {
      get {
        if let resolved = _multiple_arity_generic_expression._operands__provider(complex: self.complexEntity) {
          let value = resolved._operands__getter(complex: self.complexEntity)
          return value
        }
        else {
          return SDAI.UNWRAP( super_eMULTIPLE_ARITY_GENERIC_EXPRESSION.partialEntity._operands )
        }
      }
      set(newValue) {
        if let _ = _multiple_arity_generic_expression._operands__provider(complex: self.complexEntity) { return }

        let partial = super_eMULTIPLE_ARITY_GENERIC_EXPRESSION.partialEntity
        partial._operands = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT REDEF(DERIVE)__ attribute
    /// - origin: SELF( ``eDEFINITE_INTEGRAL_EXPRESSION`` )
    public var VARIABLES: SDAI.LIST_UNIQUE<eGENERIC_VARIABLE>/*[1:1]*/  {
      get {
        if let cached = cachedValue(derivedAttributeName:"VARIABLES") {
          return cached.value as! SDAI.LIST_UNIQUE<eGENERIC_VARIABLE>/*[1:1]*/ 
        }
        let origin = self
        let value = SDAI.UNWRAP( origin.partialEntity._variables__getter(SELF: origin) )
        updateCache(derivedAttributeName:"VARIABLES", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eDEFINITE_INTEGRAL_EXPRESSION`` )
    public var LOWER_LIMIT_NEG_INFINITY: SDAI.BOOLEAN {
      get {
        return SDAI.UNWRAP( self.partialEntity._lower_limit_neg_infinity )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._lower_limit_neg_infinity = SDAI.UNWRAP(newValue)
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_definite_integral_expression.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eGENERIC_EXPRESSION.self) else { return nil }
      self.super_eGENERIC_EXPRESSION = super1

      guard let super2 = complexEntity?.entityReference(eMULTIPLE_ARITY_GENERIC_EXPRESSION.self) else { return nil }
      self.super_eMULTIPLE_ARITY_GENERIC_EXPRESSION = super2

      guard let super3 = complexEntity?.entityReference(eQUANTIFIER_EXPRESSION.self) else { return nil }
      self.super_eQUANTIFIER_EXPRESSION = super3

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _definite_integral_expression.WHERE_wr1(SELF: instance)
      result[prefix2 + " .WHERE_wr2"] = _definite_integral_expression.WHERE_wr2(SELF: instance)
      result[prefix2 + " .WHERE_wr3"] = _definite_integral_expression.WHERE_wr3(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "DEFINITE_INTEGRAL_EXPRESSION", type: self, explicitAttributeCount: 2)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eGENERIC_EXPRESSION.self)
      entityDef.add(supertype: eMULTIPLE_ARITY_GENERIC_EXPRESSION.self)
      entityDef.add(supertype: eQUANTIFIER_EXPRESSION.self)
      entityDef.add(supertype: eDEFINITE_INTEGRAL_EXPRESSION.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "VARIABLE_OF_INTEGRATION", keyPath: \eDEFINITE_INTEGRAL_EXPRESSION.VARIABLE_OF_INTEGRATION, 
        kind: .derived, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "INTEGRAND", keyPath: \eDEFINITE_INTEGRAL_EXPRESSION.INTEGRAND, 
        kind: .derived, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "UPPER_LIMIT_POS_INFINITY", keyPath: \eDEFINITE_INTEGRAL_EXPRESSION.UPPER_LIMIT_POS_INFINITY, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "OPERANDS", keyPath: \eDEFINITE_INTEGRAL_EXPRESSION.OPERANDS, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "VARIABLES", keyPath: \eDEFINITE_INTEGRAL_EXPRESSION.VARIABLES, 
        kind: .derivedRedeclaring, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "LOWER_LIMIT_NEG_INFINITY", keyPath: \eDEFINITE_INTEGRAL_EXPRESSION.LOWER_LIMIT_NEG_INFINITY, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: false)

      return entityDef
    }

  }
}

//MARK: - partial Entity Dynamic Attribute Protocol Conformances
extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF._definite_integral_expression :
  eQUANTIFIER_EXPRESSION__VARIABLES__provider {}
