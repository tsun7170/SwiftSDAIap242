/* file: track_blended_solid_with_end_conditions.swift 	 generated: Sun Oct 31 15:32:10 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY track_blended_solid_with_end_conditions
    SUBTYPE OF ( track_blended_solid );
      end_conditions  : LIST [2 : 2] OF blend_end_condition_select;
    WHERE
      wr1: ( SIZEOF( TYPEOF( SELF ) * [ 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
               + 'SOLID_WITH_CONSTANT_RADIUS_EDGE_BLEND' , 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
               + 'SOLID_WITH_VARIABLE_RADIUS_EDGE_BLEND' , 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
               + 'SOLID_WITH_CHAMFERED_EDGES' ] ) = 1 );
      wr2: ( NOT ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.VERTEX' IN TYPEOF( end_conditions[1] ) ) 
               AND ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.VERTEX' IN TYPEOF( end_conditions[2] ) ) ) );
      wr3: ( NOT ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.VERTEX' IN TYPEOF( end_conditions[1] ) ) 
               AND ( NOT ( ( end_conditions[1] :=: SELF\edge_blended_solid.blended_edges[1].edge_start ) XOR 
               ( end_conditions[1] :=: SELF\edge_blended_solid.blended_edges[1].edge_end ) ) ) ) );
      wr4: ( NOT ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.VERTEX' IN TYPEOF( end_conditions[2] ) ) 
               AND ( NOT ( ( end_conditions[2] :=: SELF\edge_blended_solid.blended_edges[HIINDEX( SELF\
               edge_blended_solid.blended_edges )].edge_start ) XOR ( end_conditions[2] :=: SELF\
               edge_blended_solid.blended_edges[HIINDEX( SELF\edge_blended_solid.blended_edges )].edge_end ) ) ) ) );
  END_ENTITY; -- track_blended_solid_with_end_conditions (line:32847 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	representation_item
    ATTR:  name,	TYPE: label -- EXPLICIT


  SUPER- ENTITY(2)	geometric_representation_item
    ATTR:  dim,	TYPE: dimension_count -- DERIVED
      := dimension_of( SELF )


  SUPER- ENTITY(3)	solid_model
    (no local attributes)

  SUPER- ENTITY(4)	modified_solid
    ATTR:  rationale,	TYPE: text -- EXPLICIT

    ATTR:  base_solid,	TYPE: base_solid_select -- EXPLICIT


  SUPER- ENTITY(5)	edge_blended_solid
    ATTR:  blended_edges,	TYPE: LIST [1 : ?] OF UNIQUE edge_curve -- EXPLICIT


  SUPER- ENTITY(6)	track_blended_solid
    (no local attributes)

  ENTITY(SELF)	track_blended_solid_with_end_conditions
    ATTR:  end_conditions,	TYPE: LIST [2 : 2] OF blend_end_condition_select -- EXPLICIT


*/


//MARK: - Partial Entity
  public final class _track_blended_solid_with_end_conditions : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eTRACK_BLENDED_SOLID_WITH_END_CONDITIONS.self
    }

    //ATTRIBUTES
    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _end_conditions: SDAI.LIST<sBLEND_END_CONDITION_SELECT>/*[2:2]*/  // PLAIN EXPLICIT ATTRIBUTE

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._end_conditions.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._end_conditions.value.isValueEqualOptionally(to: rhs._end_conditions.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._end_conditions.value.isValueEqualOptionally(to: rhs._end_conditions.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: eTRACK_BLENDED_SOLID_WITH_END_CONDITIONS?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.TYPEOF(SELF)
      let _TEMP2 = ([SDAI.AIE(SDAI.STRING(
        "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SOLID_WITH_CONSTANT_RADIUS_EDGE_BLEND")), 
        SDAI.AIE(SDAI.STRING(
        "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SOLID_WITH_VARIABLE_RADIUS_EDGE_BLEND")), 
        SDAI.AIE(SDAI.STRING("AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SOLID_WITH_CHAMFERED_EDGES"))] 
        as [SDAI.AggregationInitializerElement<SDAI.STRING>])
      let _TEMP3 = SDAI.FORCE_OPTIONAL(_TEMP1) * SDAI.FORCE_OPTIONAL(_TEMP2)
      let _TEMP4 = SDAI.SIZEOF(_TEMP3)
      let _TEMP5 = _TEMP4 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
      return _TEMP5
    }
    public static func WHERE_wr2(SELF: eTRACK_BLENDED_SOLID_WITH_END_CONDITIONS?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.TYPEOF(SELF.END_CONDITIONS[1], IS: eVERTEX.self)
      let _TEMP2 = SDAI.TYPEOF(SELF.END_CONDITIONS[2], IS: eVERTEX.self)
      let _TEMP3 = _TEMP1 && _TEMP2
      let _TEMP4 =  !_TEMP3
      return _TEMP4
    }
    public static func WHERE_wr3(SELF: eTRACK_BLENDED_SOLID_WITH_END_CONDITIONS?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.TYPEOF(SELF.END_CONDITIONS[1], IS: eVERTEX.self)
      let _TEMP2 = SELF.END_CONDITIONS[1]
      let _TEMP3 = SELF.GROUP_REF(eEDGE_BLENDED_SOLID.self)
      let _TEMP4 = _TEMP3?.BLENDED_EDGES
      let _TEMP5 = _TEMP4?[1]
      let _TEMP6 = _TEMP5?.EDGE_START
      let _TEMP7 = _TEMP2 .===. _TEMP6
      let _TEMP8 = SELF.END_CONDITIONS[1]
      let _TEMP9 = SELF.GROUP_REF(eEDGE_BLENDED_SOLID.self)
      let _TEMP10 = _TEMP9?.BLENDED_EDGES
      let _TEMP11 = _TEMP10?[1]
      let _TEMP12 = _TEMP11?.EDGE_END
      let _TEMP13 = _TEMP8 .===. _TEMP12
      let _TEMP14 = _TEMP7 .!=. _TEMP13
      let _TEMP15 =  !_TEMP14
      let _TEMP16 = _TEMP1 && _TEMP15
      let _TEMP17 =  !_TEMP16
      return _TEMP17
    }
    public static func WHERE_wr4(SELF: eTRACK_BLENDED_SOLID_WITH_END_CONDITIONS?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.TYPEOF(SELF.END_CONDITIONS[2], IS: eVERTEX.self)
      let _TEMP2 = SELF.END_CONDITIONS[2]
      let _TEMP3 = SELF.GROUP_REF(eEDGE_BLENDED_SOLID.self)
      let _TEMP4 = _TEMP3?.BLENDED_EDGES
      let _TEMP5 = SELF.GROUP_REF(eEDGE_BLENDED_SOLID.self)
      let _TEMP6 = _TEMP5?.BLENDED_EDGES
      let _TEMP7 = SDAI.HIINDEX(_TEMP6)
      let _TEMP8 = _TEMP4?[_TEMP7]
      let _TEMP9 = _TEMP8?.EDGE_START
      let _TEMP10 = _TEMP2 .===. _TEMP9
      let _TEMP11 = SELF.END_CONDITIONS[2]
      let _TEMP12 = SELF.GROUP_REF(eEDGE_BLENDED_SOLID.self)
      let _TEMP13 = _TEMP12?.BLENDED_EDGES
      let _TEMP14 = SELF.GROUP_REF(eEDGE_BLENDED_SOLID.self)
      let _TEMP15 = _TEMP14?.BLENDED_EDGES
      let _TEMP16 = SDAI.HIINDEX(_TEMP15)
      let _TEMP17 = _TEMP13?[_TEMP16]
      let _TEMP18 = _TEMP17?.EDGE_END
      let _TEMP19 = _TEMP11 .===. _TEMP18
      let _TEMP20 = _TEMP10 .!=. _TEMP19
      let _TEMP21 =  !_TEMP20
      let _TEMP22 = _TEMP1 && _TEMP21
      let _TEMP23 =  !_TEMP22
      return _TEMP23
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(END_CONDITIONS: SDAI.LIST<sBLEND_END_CONDITION_SELECT>/*[2:2]*/ ) {
      self._end_conditions = END_CONDITIONS
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 1
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverRequiredParameter(as: SDAI.LIST<
        sBLEND_END_CONDITION_SELECT>.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( END_CONDITIONS: p0 )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY track_blended_solid_with_end_conditions
    SUBTYPE OF ( track_blended_solid );
      end_conditions  : LIST [2 : 2] OF blend_end_condition_select;
    WHERE
      wr1: ( SIZEOF( TYPEOF( SELF ) * [ 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
               + 'SOLID_WITH_CONSTANT_RADIUS_EDGE_BLEND' , 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
               + 'SOLID_WITH_VARIABLE_RADIUS_EDGE_BLEND' , 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
               + 'SOLID_WITH_CHAMFERED_EDGES' ] ) = 1 );
      wr2: ( NOT ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.VERTEX' IN TYPEOF( end_conditions[1] ) ) 
               AND ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.VERTEX' IN TYPEOF( end_conditions[2] ) ) ) );
      wr3: ( NOT ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.VERTEX' IN TYPEOF( end_conditions[1] ) ) 
               AND ( NOT ( ( end_conditions[1] :=: SELF\edge_blended_solid.blended_edges[1].edge_start ) XOR 
               ( end_conditions[1] :=: SELF\edge_blended_solid.blended_edges[1].edge_end ) ) ) ) );
      wr4: ( NOT ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.VERTEX' IN TYPEOF( end_conditions[2] ) ) 
               AND ( NOT ( ( end_conditions[2] :=: SELF\edge_blended_solid.blended_edges[HIINDEX( SELF\
               edge_blended_solid.blended_edges )].edge_start ) XOR ( end_conditions[2] :=: SELF\
               edge_blended_solid.blended_edges[HIINDEX( SELF\edge_blended_solid.blended_edges )].edge_end ) ) ) ) );
  END_ENTITY; -- track_blended_solid_with_end_conditions (line:32847 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eTRACK_BLENDED_SOLID_WITH_END_CONDITIONS : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _track_blended_solid_with_end_conditions.self
    }
    public let partialEntity: _track_blended_solid_with_end_conditions

    //MARK: SUPERTYPES
    public let super_eREPRESENTATION_ITEM: eREPRESENTATION_ITEM 	// [1]
    public let super_eGEOMETRIC_REPRESENTATION_ITEM: eGEOMETRIC_REPRESENTATION_ITEM 	// [2]
    public let super_eSOLID_MODEL: eSOLID_MODEL 	// [3]
    public let super_eMODIFIED_SOLID: eMODIFIED_SOLID 	// [4]
    public let super_eEDGE_BLENDED_SOLID: eEDGE_BLENDED_SOLID 	// [5]
    public let super_eTRACK_BLENDED_SOLID: eTRACK_BLENDED_SOLID 	// [6]
    public var super_eTRACK_BLENDED_SOLID_WITH_END_CONDITIONS: eTRACK_BLENDED_SOLID_WITH_END_CONDITIONS { return self } 	// [7]

    //MARK: SUBTYPES

    //MARK: ATTRIBUTES
    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eTRACK_BLENDED_SOLID_WITH_END_CONDITIONS`` )
    public var END_CONDITIONS: SDAI.LIST<sBLEND_END_CONDITION_SELECT>/*[2:2]*/  {
      get {
        return SDAI.UNWRAP( self.partialEntity._end_conditions )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._end_conditions = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eMODIFIED_SOLID`` )
    public var RATIONALE: tTEXT {
      get {
        return SDAI.UNWRAP( super_eMODIFIED_SOLID.partialEntity._rationale )
      }
      set(newValue) {
        let partial = super_eMODIFIED_SOLID.partialEntity
        partial._rationale = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eMODIFIED_SOLID`` )
    public var BASE_SOLID: sBASE_SOLID_SELECT {
      get {
        return SDAI.UNWRAP( super_eMODIFIED_SOLID.partialEntity._base_solid )
      }
      set(newValue) {
        let partial = super_eMODIFIED_SOLID.partialEntity
        partial._base_solid = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eEDGE_BLENDED_SOLID`` )
    public var BLENDED_EDGES: SDAI.LIST_UNIQUE<eEDGE_CURVE>/*[1:nil]*/  {
      get {
        return SDAI.UNWRAP( super_eEDGE_BLENDED_SOLID.partialEntity._blended_edges )
      }
      set(newValue) {
        let partial = super_eEDGE_BLENDED_SOLID.partialEntity
        partial._blended_edges = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eREPRESENTATION_ITEM`` )
    public var NAME: tLABEL {
      get {
        return SDAI.UNWRAP( super_eREPRESENTATION_ITEM.partialEntity._name )
      }
      set(newValue) {
        let partial = super_eREPRESENTATION_ITEM.partialEntity
        partial._name = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUPER( ``eGEOMETRIC_REPRESENTATION_ITEM`` )
    public var DIM: tDIMENSION_COUNT?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"DIM") {
          return cached.value as! tDIMENSION_COUNT? 
        }
        let origin = super_eGEOMETRIC_REPRESENTATION_ITEM
        let value = tDIMENSION_COUNT(origin.partialEntity._dim__getter(SELF: origin))
        updateCache(derivedAttributeName:"DIM", value:value)
        return value
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_track_blended_solid_with_end_conditions.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eREPRESENTATION_ITEM.self) else { return nil }
      self.super_eREPRESENTATION_ITEM = super1

      guard let super2 = complexEntity?.entityReference(eGEOMETRIC_REPRESENTATION_ITEM.self) else { return nil }
      self.super_eGEOMETRIC_REPRESENTATION_ITEM = super2

      guard let super3 = complexEntity?.entityReference(eSOLID_MODEL.self) else { return nil }
      self.super_eSOLID_MODEL = super3

      guard let super4 = complexEntity?.entityReference(eMODIFIED_SOLID.self) else { return nil }
      self.super_eMODIFIED_SOLID = super4

      guard let super5 = complexEntity?.entityReference(eEDGE_BLENDED_SOLID.self) else { return nil }
      self.super_eEDGE_BLENDED_SOLID = super5

      guard let super6 = complexEntity?.entityReference(eTRACK_BLENDED_SOLID.self) else { return nil }
      self.super_eTRACK_BLENDED_SOLID = super6

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _track_blended_solid_with_end_conditions.WHERE_wr1(SELF: instance)
      result[prefix2 + " .WHERE_wr2"] = _track_blended_solid_with_end_conditions.WHERE_wr2(SELF: instance)
      result[prefix2 + " .WHERE_wr3"] = _track_blended_solid_with_end_conditions.WHERE_wr3(SELF: instance)
      result[prefix2 + " .WHERE_wr4"] = _track_blended_solid_with_end_conditions.WHERE_wr4(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "TRACK_BLENDED_SOLID_WITH_END_CONDITIONS", type: self, explicitAttributeCount: 1)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eREPRESENTATION_ITEM.self)
      entityDef.add(supertype: eGEOMETRIC_REPRESENTATION_ITEM.self)
      entityDef.add(supertype: eSOLID_MODEL.self)
      entityDef.add(supertype: eMODIFIED_SOLID.self)
      entityDef.add(supertype: eEDGE_BLENDED_SOLID.self)
      entityDef.add(supertype: eTRACK_BLENDED_SOLID.self)
      entityDef.add(supertype: eTRACK_BLENDED_SOLID_WITH_END_CONDITIONS.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "END_CONDITIONS", keyPath: \eTRACK_BLENDED_SOLID_WITH_END_CONDITIONS.END_CONDITIONS, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "RATIONALE", keyPath: \eTRACK_BLENDED_SOLID_WITH_END_CONDITIONS.RATIONALE, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "BASE_SOLID", keyPath: \eTRACK_BLENDED_SOLID_WITH_END_CONDITIONS.BASE_SOLID, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "BLENDED_EDGES", keyPath: \eTRACK_BLENDED_SOLID_WITH_END_CONDITIONS.BLENDED_EDGES, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "NAME", keyPath: \eTRACK_BLENDED_SOLID_WITH_END_CONDITIONS.NAME, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "DIM", keyPath: \eTRACK_BLENDED_SOLID_WITH_END_CONDITIONS.DIM, 
        kind: .derived, source: .superEntity, mayYieldEntityReference: false)

      return entityDef
    }

  }
}
