/* file: topological_representation_item.swift 	 generated: Sun Oct 31 15:32:10 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY topological_representation_item
    SUPERTYPE OF ( 
        ONEOF ( 
            vertex, 
            edge, 
            face_bound, 
            face, 
            vertex_shell, 
            wire_shell, 
            connected_edge_set, 
            connected_face_set, 
            connected_volume_set, 
            volume_with_faces, 
            ( 
            loop 
            ANDOR
            path ) ) )
    SUBTYPE OF ( representation_item );
    DERIVE
      permanent_id            : identifier := get_id_value( SELF );
      permanent_aggregate_id  : identifier := get_aggregate_id_value( SELF );
    WHERE
      wr1: ( SIZEOF( USEDIN( SELF, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ID_ATTRIBUTE.'
               + 'IDENTIFIED_ITEM'  ) ) <= 1 );
      wr2: ( SIZEOF( USEDIN( SELF, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.AGGREGATE_ID_ATTRIBUTE.'
               + 'IDENTIFIED_ITEM'  ) ) <= 1 );
  END_ENTITY; -- topological_representation_item (line:32778 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	representation_item
    ATTR:  name,	TYPE: label -- EXPLICIT


  ENTITY(SELF)	topological_representation_item
    ATTR:  permanent_id,	TYPE: identifier -- DERIVED
      := get_id_value( SELF )

    ATTR:  permanent_aggregate_id,	TYPE: identifier -- DERIVED
      := get_aggregate_id_value( SELF )


  SUB- ENTITY(3)	open_path
    ATTR:  ne,	TYPE: INTEGER -- DERIVED	(AMBIGUOUS/MASKED)
      := SIZEOF( SELF\path.edge_list )


  SUB- ENTITY(4)	kinematic_loop
    REDCR: edge_list,	TYPE: LIST [1 : ?] OF UNIQUE oriented_joint -- EXPLICIT
      -- OVERRIDING ENTITY: path


  SUB- ENTITY(5)	edge_loop
    ATTR:  ne,	TYPE: INTEGER -- DERIVED	(AMBIGUOUS/MASKED)
      := SIZEOF( SELF\path.edge_list )


  SUB- ENTITY(6)	oriented_path
    ATTR:  path_element,	TYPE: path -- EXPLICIT

    ATTR:  orientation,	TYPE: BOOLEAN -- EXPLICIT	(AMBIGUOUS/MASKED)

    REDCR: edge_list,	TYPE: LIST [1 : ?] OF UNIQUE oriented_edge -- DERIVED (DYNAMIC)
      := conditional_reverse( SELF.orientation, SELF.path_element.edge_list )
      -- OVERRIDING ENTITY: path


  SUB- ENTITY(7)	path
    ATTR:  edge_list,	TYPE: LIST [1 : ?] OF UNIQUE oriented_edge -- EXPLICIT (DYNAMIC)
      -- possibly overriden by
          ENTITY: kinematic_loop,	TYPE: LIST [1 : ?] OF UNIQUE oriented_joint
          ENTITY: oriented_path,	TYPE: LIST [1 : ?] OF UNIQUE oriented_edge	(as DERIVED)


  SUB- ENTITY(8)	kinematic_link
    (no local attributes)

  SUB- ENTITY(9)	vertex_point
    ATTR:  vertex_geometry,	TYPE: point -- EXPLICIT


  SUB- ENTITY(10)	vertex_on_edge
    ATTR:  parent_edge,	TYPE: edge_with_length -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  distance_from_start,	TYPE: positive_length_measure -- EXPLICIT


  SUB- ENTITY(11)	vertex
    (no local attributes)

  SUB- ENTITY(12)	subedge
    ATTR:  parent_edge,	TYPE: edge -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(13)	seam_edge
    ATTR:  pcurve_reference,	TYPE: pcurve -- EXPLICIT


  SUB- ENTITY(14)	oriented_joint
    REDCR: edge_element,	TYPE: kinematic_joint -- EXPLICIT
      -- OVERRIDING ENTITY: oriented_edge


  SUB- ENTITY(15)	oriented_edge
    ATTR:  edge_element,	TYPE: edge -- EXPLICIT
      -- possibly overriden by
          ENTITY: oriented_joint,	TYPE: kinematic_joint

    ATTR:  orientation,	TYPE: BOOLEAN -- EXPLICIT	(AMBIGUOUS/MASKED)

    REDCR: edge_start,	TYPE: vertex -- DERIVED (DYNAMIC)
      := boolean_choose( SELF.orientation, SELF.edge_element.edge_start, SELF.edge_element.edge_end )
      -- OVERRIDING ENTITY: edge

    REDCR: edge_end,	TYPE: vertex -- DERIVED (DYNAMIC)
      := boolean_choose( SELF.orientation, SELF.edge_element.edge_end, SELF.edge_element.edge_start )
      -- OVERRIDING ENTITY: edge


  SUB- ENTITY(16)	edge_curve
    ATTR:  edge_geometry,	TYPE: curve -- EXPLICIT

    ATTR:  same_sense,	TYPE: BOOLEAN -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(17)	edge_with_length
    ATTR:  edge_length,	TYPE: positive_length_measure -- EXPLICIT


  SUB- ENTITY(18)	kinematic_joint
    REDCR: edge_start,	TYPE: kinematic_link -- EXPLICIT
      -- OVERRIDING ENTITY: edge

    REDCR: edge_end,	TYPE: kinematic_link -- EXPLICIT
      -- OVERRIDING ENTITY: edge


  SUB- ENTITY(19)	edge
    ATTR:  edge_start,	TYPE: vertex -- EXPLICIT (DYNAMIC)
      -- possibly overriden by
          ENTITY: oriented_edge,	TYPE: vertex	(as DERIVED)
          ENTITY: kinematic_joint,	TYPE: kinematic_link

    ATTR:  edge_end,	TYPE: vertex -- EXPLICIT (DYNAMIC)
      -- possibly overriden by
          ENTITY: oriented_edge,	TYPE: vertex	(as DERIVED)
          ENTITY: kinematic_joint,	TYPE: kinematic_link


  SUB- ENTITY(20)	face_outer_bound
    (no local attributes)

  SUB- ENTITY(21)	face_bound
    ATTR:  bound,	TYPE: loop -- EXPLICIT

    ATTR:  orientation,	TYPE: BOOLEAN -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(22)	advanced_face
    (no local attributes)

  SUB- ENTITY(23)	face_surface
    ATTR:  face_geometry,	TYPE: surface -- EXPLICIT

    ATTR:  same_sense,	TYPE: BOOLEAN -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(24)	subface
    ATTR:  parent_face,	TYPE: face -- EXPLICIT


  SUB- ENTITY(25)	oriented_face
    ATTR:  face_element,	TYPE: face -- EXPLICIT

    ATTR:  orientation,	TYPE: BOOLEAN -- EXPLICIT	(AMBIGUOUS/MASKED)

    REDCR: bounds,	TYPE: SET [1 : ?] OF face_bound -- DERIVED (DYNAMIC)
      := conditional_reverse( SELF.orientation, SELF.face_element.bounds )
      -- OVERRIDING ENTITY: face


  SUB- ENTITY(26)	face
    ATTR:  bounds,	TYPE: SET [1 : ?] OF face_bound -- EXPLICIT (DYNAMIC)
      -- possibly overriden by
          ENTITY: oriented_face,	TYPE: SET [1 : ?] OF face_bound	(as DERIVED)


  SUB- ENTITY(27)	vertex_shell
    ATTR:  vertex_shell_extent,	TYPE: vertex_loop -- EXPLICIT


  SUB- ENTITY(28)	wire_shell
    ATTR:  wire_shell_extent,	TYPE: SET [1 : ?] OF loop -- EXPLICIT


  SUB- ENTITY(29)	connected_edge_set
    ATTR:  ces_edges,	TYPE: SET [1 : ?] OF edge -- EXPLICIT


  SUB- ENTITY(30)	oriented_closed_shell
    ATTR:  closed_shell_element,	TYPE: closed_shell -- EXPLICIT

    ATTR:  orientation,	TYPE: BOOLEAN -- EXPLICIT	(AMBIGUOUS/MASKED)

    REDCR: cfs_faces,	TYPE: SET [1 : ?] OF face -- DERIVED (DYNAMIC)
      := conditional_reverse( SELF.orientation, SELF.closed_shell_element.cfs_faces )
      -- OVERRIDING ENTITY: connected_face_set


  SUB- ENTITY(31)	closed_shell
    (no local attributes)

  SUB- ENTITY(32)	connected_face_sub_set
    ATTR:  parent_face_set,	TYPE: connected_face_set -- EXPLICIT


  SUB- ENTITY(33)	surfaced_open_shell
    (no local attributes)

  SUB- ENTITY(34)	oriented_open_shell
    ATTR:  open_shell_element,	TYPE: open_shell -- EXPLICIT

    ATTR:  orientation,	TYPE: BOOLEAN -- EXPLICIT	(AMBIGUOUS/MASKED)

    REDCR: cfs_faces,	TYPE: SET [1 : ?] OF face -- DERIVED (DYNAMIC)
      := conditional_reverse( SELF.orientation, SELF.open_shell_element.cfs_faces )
      -- OVERRIDING ENTITY: connected_face_set


  SUB- ENTITY(35)	open_shell
    (no local attributes)

  SUB- ENTITY(36)	connected_face_set
    ATTR:  cfs_faces,	TYPE: SET [1 : ?] OF face -- EXPLICIT (DYNAMIC)
      -- possibly overriden by
          ENTITY: oriented_closed_shell,	TYPE: SET [1 : ?] OF face	(as DERIVED)
          ENTITY: oriented_open_shell,	TYPE: SET [1 : ?] OF face	(as DERIVED)


  SUB- ENTITY(37)	connected_volume_sub_set
    ATTR:  parent_volume_set,	TYPE: connected_volume_set -- EXPLICIT


  SUB- ENTITY(38)	connected_volume_set
    ATTR:  cvs_volumes,	TYPE: SET [1 : ?] OF volume_with_faces -- EXPLICIT


  SUB- ENTITY(39)	volume_with_parametric_boundary
    ATTR:  outer_bound,	TYPE: LIST [6 : 6] OF face -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(40)	volume_with_shell
    ATTR:  outer_bound,	TYPE: closed_shell -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(41)	volume_with_faces
    ATTR:  volume_geometry,	TYPE: volume -- EXPLICIT


  SUB- ENTITY(42)	poly_loop
    ATTR:  polygon,	TYPE: LIST [3 : ?] OF UNIQUE cartesian_point -- EXPLICIT


  SUB- ENTITY(43)	vertex_loop
    ATTR:  loop_vertex,	TYPE: vertex -- EXPLICIT


  SUB- ENTITY(44)	loop
    (no local attributes)

*/


//MARK: - Partial Entity
  public final class _topological_representation_item : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eTOPOLOGICAL_REPRESENTATION_ITEM.self
    }

    //ATTRIBUTES
    /// DERIVE ATTRIBUTE
    internal func _permanent_id__getter(SELF: eTOPOLOGICAL_REPRESENTATION_ITEM) -> tIDENTIFIER?  {

      let _TEMP1 = GET_ID_VALUE(sID_ATTRIBUTE_SELECT(/*eTOPOLOGICAL_REPRESENTATION_ITEM*/SELF))
      return _TEMP1
    }

    /// DERIVE ATTRIBUTE
    internal func _permanent_aggregate_id__getter(SELF: eTOPOLOGICAL_REPRESENTATION_ITEM) -> tIDENTIFIER?  {

      let _TEMP1 = GET_AGGREGATE_ID_VALUE(sID_ATTRIBUTE_SELECT(/*eTOPOLOGICAL_REPRESENTATION_ITEM*/SELF))
      return _TEMP1
    }

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      //SELECT data types (indirectly) referencing the current type as a member of the select list
      members.insert(SDAI.STRING(sMULTI_LANGUAGE_ATTRIBUTE_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sID_ATTRIBUTE_SELECT.typeName)) // -> Self
      members.insert(SDAI.STRING(sSTYLED_ITEM_TARGET.typeName)) // -> Self
      members.insert(SDAI.STRING(sATTRIBUTE_LANGUAGE_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sSHAPE_REPRESENTATION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sGROUPABLE_ITEM.typeName)) // -> Self
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: eTOPOLOGICAL_REPRESENTATION_ITEM?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.USEDIN(T: SELF, ROLE: \AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eID_ATTRIBUTE
        .IDENTIFIED_ITEM)
      let _TEMP2 = SDAI.SIZEOF(_TEMP1)
      let _TEMP3 = _TEMP2 <= SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
      return _TEMP3
    }
    public static func WHERE_wr2(SELF: eTOPOLOGICAL_REPRESENTATION_ITEM?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.USEDIN(T: SELF, ROLE: \AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF
        .eAGGREGATE_ID_ATTRIBUTE.IDENTIFIED_ITEM)
      let _TEMP2 = SDAI.SIZEOF(_TEMP1)
      let _TEMP3 = _TEMP2 <= SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
      return _TEMP3
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init() {
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 0
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      self.init( )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY topological_representation_item
    SUPERTYPE OF ( 
        ONEOF ( 
            vertex, 
            edge, 
            face_bound, 
            face, 
            vertex_shell, 
            wire_shell, 
            connected_edge_set, 
            connected_face_set, 
            connected_volume_set, 
            volume_with_faces, 
            ( 
            loop 
            ANDOR
            path ) ) )
    SUBTYPE OF ( representation_item );
    DERIVE
      permanent_id            : identifier := get_id_value( SELF );
      permanent_aggregate_id  : identifier := get_aggregate_id_value( SELF );
    WHERE
      wr1: ( SIZEOF( USEDIN( SELF, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ID_ATTRIBUTE.'
               + 'IDENTIFIED_ITEM'  ) ) <= 1 );
      wr2: ( SIZEOF( USEDIN( SELF, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.AGGREGATE_ID_ATTRIBUTE.'
               + 'IDENTIFIED_ITEM'  ) ) <= 1 );
  END_ENTITY; -- topological_representation_item (line:32778 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eTOPOLOGICAL_REPRESENTATION_ITEM : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _topological_representation_item.self
    }
    public let partialEntity: _topological_representation_item

    //MARK: SUPERTYPES
    public let super_eREPRESENTATION_ITEM: eREPRESENTATION_ITEM 	// [1]
    public var super_eTOPOLOGICAL_REPRESENTATION_ITEM: eTOPOLOGICAL_REPRESENTATION_ITEM { return self } 	// [2]

    //MARK: SUBTYPES
    public var sub_eOPEN_PATH: eOPEN_PATH? {	// [3]
      return self.complexEntity.entityReference(eOPEN_PATH.self)
    }

    public var sub_eKINEMATIC_LOOP: eKINEMATIC_LOOP? {	// [4]
      return self.complexEntity.entityReference(eKINEMATIC_LOOP.self)
    }

    public var sub_eEDGE_LOOP: eEDGE_LOOP? {	// [5]
      return self.complexEntity.entityReference(eEDGE_LOOP.self)
    }

    public var sub_eORIENTED_PATH: eORIENTED_PATH? {	// [6]
      return self.complexEntity.entityReference(eORIENTED_PATH.self)
    }

    public var sub_ePATH: ePATH? {	// [7]
      return self.complexEntity.entityReference(ePATH.self)
    }

    public var sub_eKINEMATIC_LINK: eKINEMATIC_LINK? {	// [8]
      return self.complexEntity.entityReference(eKINEMATIC_LINK.self)
    }

    public var sub_eVERTEX_POINT: eVERTEX_POINT? {	// [9]
      return self.complexEntity.entityReference(eVERTEX_POINT.self)
    }

    public var sub_eVERTEX_ON_EDGE: eVERTEX_ON_EDGE? {	// [10]
      return self.complexEntity.entityReference(eVERTEX_ON_EDGE.self)
    }

    public var sub_eVERTEX: eVERTEX? {	// [11]
      return self.complexEntity.entityReference(eVERTEX.self)
    }

    public var sub_eSUBEDGE: eSUBEDGE? {	// [12]
      return self.complexEntity.entityReference(eSUBEDGE.self)
    }

    public var sub_eSEAM_EDGE: eSEAM_EDGE? {	// [13]
      return self.complexEntity.entityReference(eSEAM_EDGE.self)
    }

    public var sub_eORIENTED_JOINT: eORIENTED_JOINT? {	// [14]
      return self.complexEntity.entityReference(eORIENTED_JOINT.self)
    }

    public var sub_eORIENTED_EDGE: eORIENTED_EDGE? {	// [15]
      return self.complexEntity.entityReference(eORIENTED_EDGE.self)
    }

    public var sub_eEDGE_CURVE: eEDGE_CURVE? {	// [16]
      return self.complexEntity.entityReference(eEDGE_CURVE.self)
    }

    public var sub_eEDGE_WITH_LENGTH: eEDGE_WITH_LENGTH? {	// [17]
      return self.complexEntity.entityReference(eEDGE_WITH_LENGTH.self)
    }

    public var sub_eKINEMATIC_JOINT: eKINEMATIC_JOINT? {	// [18]
      return self.complexEntity.entityReference(eKINEMATIC_JOINT.self)
    }

    public var sub_eEDGE: eEDGE? {	// [19]
      return self.complexEntity.entityReference(eEDGE.self)
    }

    public var sub_eFACE_OUTER_BOUND: eFACE_OUTER_BOUND? {	// [20]
      return self.complexEntity.entityReference(eFACE_OUTER_BOUND.self)
    }

    public var sub_eFACE_BOUND: eFACE_BOUND? {	// [21]
      return self.complexEntity.entityReference(eFACE_BOUND.self)
    }

    public var sub_eADVANCED_FACE: eADVANCED_FACE? {	// [22]
      return self.complexEntity.entityReference(eADVANCED_FACE.self)
    }

    public var sub_eFACE_SURFACE: eFACE_SURFACE? {	// [23]
      return self.complexEntity.entityReference(eFACE_SURFACE.self)
    }

    public var sub_eSUBFACE: eSUBFACE? {	// [24]
      return self.complexEntity.entityReference(eSUBFACE.self)
    }

    public var sub_eORIENTED_FACE: eORIENTED_FACE? {	// [25]
      return self.complexEntity.entityReference(eORIENTED_FACE.self)
    }

    public var sub_eFACE: eFACE? {	// [26]
      return self.complexEntity.entityReference(eFACE.self)
    }

    public var sub_eVERTEX_SHELL: eVERTEX_SHELL? {	// [27]
      return self.complexEntity.entityReference(eVERTEX_SHELL.self)
    }

    public var sub_eWIRE_SHELL: eWIRE_SHELL? {	// [28]
      return self.complexEntity.entityReference(eWIRE_SHELL.self)
    }

    public var sub_eCONNECTED_EDGE_SET: eCONNECTED_EDGE_SET? {	// [29]
      return self.complexEntity.entityReference(eCONNECTED_EDGE_SET.self)
    }

    public var sub_eORIENTED_CLOSED_SHELL: eORIENTED_CLOSED_SHELL? {	// [30]
      return self.complexEntity.entityReference(eORIENTED_CLOSED_SHELL.self)
    }

    public var sub_eCLOSED_SHELL: eCLOSED_SHELL? {	// [31]
      return self.complexEntity.entityReference(eCLOSED_SHELL.self)
    }

    public var sub_eCONNECTED_FACE_SUB_SET: eCONNECTED_FACE_SUB_SET? {	// [32]
      return self.complexEntity.entityReference(eCONNECTED_FACE_SUB_SET.self)
    }

    public var sub_eSURFACED_OPEN_SHELL: eSURFACED_OPEN_SHELL? {	// [33]
      return self.complexEntity.entityReference(eSURFACED_OPEN_SHELL.self)
    }

    public var sub_eORIENTED_OPEN_SHELL: eORIENTED_OPEN_SHELL? {	// [34]
      return self.complexEntity.entityReference(eORIENTED_OPEN_SHELL.self)
    }

    public var sub_eOPEN_SHELL: eOPEN_SHELL? {	// [35]
      return self.complexEntity.entityReference(eOPEN_SHELL.self)
    }

    public var sub_eCONNECTED_FACE_SET: eCONNECTED_FACE_SET? {	// [36]
      return self.complexEntity.entityReference(eCONNECTED_FACE_SET.self)
    }

    public var sub_eCONNECTED_VOLUME_SUB_SET: eCONNECTED_VOLUME_SUB_SET? {	// [37]
      return self.complexEntity.entityReference(eCONNECTED_VOLUME_SUB_SET.self)
    }

    public var sub_eCONNECTED_VOLUME_SET: eCONNECTED_VOLUME_SET? {	// [38]
      return self.complexEntity.entityReference(eCONNECTED_VOLUME_SET.self)
    }

    public var sub_eVOLUME_WITH_PARAMETRIC_BOUNDARY: eVOLUME_WITH_PARAMETRIC_BOUNDARY? {	// [39]
      return self.complexEntity.entityReference(eVOLUME_WITH_PARAMETRIC_BOUNDARY.self)
    }

    public var sub_eVOLUME_WITH_SHELL: eVOLUME_WITH_SHELL? {	// [40]
      return self.complexEntity.entityReference(eVOLUME_WITH_SHELL.self)
    }

    public var sub_eVOLUME_WITH_FACES: eVOLUME_WITH_FACES? {	// [41]
      return self.complexEntity.entityReference(eVOLUME_WITH_FACES.self)
    }

    public var sub_ePOLY_LOOP: ePOLY_LOOP? {	// [42]
      return self.complexEntity.entityReference(ePOLY_LOOP.self)
    }

    public var sub_eVERTEX_LOOP: eVERTEX_LOOP? {	// [43]
      return self.complexEntity.entityReference(eVERTEX_LOOP.self)
    }

    public var sub_eLOOP: eLOOP? {	// [44]
      return self.complexEntity.entityReference(eLOOP.self)
    }


    //MARK: ATTRIBUTES
    // NE: (2 AMBIGUOUS REFs)

    // OUTER_BOUND: (2 AMBIGUOUS REFs)

    // ORIENTATION: (6 AMBIGUOUS REFs)

    // SAME_SENSE: (2 AMBIGUOUS REFs)

    // PARENT_EDGE: (2 AMBIGUOUS REFs)

    /// __EXPLICIT(DYNAMIC)__ attribute
    /// - origin: SUB( ``eCONNECTED_FACE_SET`` )
    public var CFS_FACES: (SDAI.SET<eFACE>/*[1:nil]*/ )?  {
      get {
        if let resolved = _connected_face_set._cfs_faces__provider(complex: self.complexEntity) {
          let value = resolved._cfs_faces__getter(complex: self.complexEntity)
          return value
        }
        else {
          return sub_eCONNECTED_FACE_SET?.partialEntity._cfs_faces
        }
      }
      set(newValue) {
        if let _ = _connected_face_set._cfs_faces__provider(complex: self.complexEntity) { return }

        guard let partial = sub_eCONNECTED_FACE_SET?.super_eCONNECTED_FACE_SET.partialEntity else { return }
        partial._cfs_faces = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT(DYNAMIC)__ attribute
    /// - origin: SUB( ``eFACE`` )
    public var BOUNDS: (SDAI.SET<eFACE_BOUND>/*[1:nil]*/ )?  {
      get {
        if let resolved = _face._bounds__provider(complex: self.complexEntity) {
          let value = resolved._bounds__getter(complex: self.complexEntity)
          return value
        }
        else {
          return sub_eFACE?.partialEntity._bounds
        }
      }
      set(newValue) {
        if let _ = _face._bounds__provider(complex: self.complexEntity) { return }

        guard let partial = sub_eFACE?.super_eFACE.partialEntity else { return }
        partial._bounds = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCONNECTED_VOLUME_SUB_SET`` )
    public var PARENT_VOLUME_SET: eCONNECTED_VOLUME_SET?  {
      get {
        return sub_eCONNECTED_VOLUME_SUB_SET?.partialEntity._parent_volume_set
      }
      set(newValue) {
        guard let partial = sub_eCONNECTED_VOLUME_SUB_SET?.super_eCONNECTED_VOLUME_SUB_SET.partialEntity
          else { return }
        partial._parent_volume_set = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eORIENTED_EDGE`` )
    public var EDGE_ELEMENT: eEDGE?  {
      get {
        return sub_eORIENTED_EDGE?.partialEntity._edge_element
      }
      set(newValue) {
        guard let partial = sub_eORIENTED_EDGE?.super_eORIENTED_EDGE.partialEntity else { return }
        partial._edge_element = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eVERTEX_LOOP`` )
    public var LOOP_VERTEX: eVERTEX?  {
      get {
        return sub_eVERTEX_LOOP?.partialEntity._loop_vertex
      }
      set(newValue) {
        guard let partial = sub_eVERTEX_LOOP?.super_eVERTEX_LOOP.partialEntity else { return }
        partial._loop_vertex = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SELF( ``eTOPOLOGICAL_REPRESENTATION_ITEM`` )
    public var PERMANENT_AGGREGATE_ID: tIDENTIFIER?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"PERMANENT_AGGREGATE_ID") {
          return cached.value as! tIDENTIFIER? 
        }
        let origin = self
        let value = origin.partialEntity._permanent_aggregate_id__getter(SELF: origin)
        updateCache(derivedAttributeName:"PERMANENT_AGGREGATE_ID", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSEAM_EDGE`` )
    public var PCURVE_REFERENCE: ePCURVE?  {
      get {
        return sub_eSEAM_EDGE?.partialEntity._pcurve_reference
      }
      set(newValue) {
        guard let partial = sub_eSEAM_EDGE?.super_eSEAM_EDGE.partialEntity else { return }
        partial._pcurve_reference = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eVOLUME_WITH_FACES`` )
    public var VOLUME_GEOMETRY: eVOLUME?  {
      get {
        return sub_eVOLUME_WITH_FACES?.partialEntity._volume_geometry
      }
      set(newValue) {
        guard let partial = sub_eVOLUME_WITH_FACES?.super_eVOLUME_WITH_FACES.partialEntity else { return }
        partial._volume_geometry = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eORIENTED_PATH`` )
    public var PATH_ELEMENT: ePATH?  {
      get {
        return sub_eORIENTED_PATH?.partialEntity._path_element
      }
      set(newValue) {
        guard let partial = sub_eORIENTED_PATH?.super_eORIENTED_PATH.partialEntity else { return }
        partial._path_element = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT(DYNAMIC)__ attribute
    /// - origin: SUB( ``ePATH`` )
    public var EDGE_LIST: (SDAI.LIST_UNIQUE<eORIENTED_EDGE>/*[1:nil]*/ )?  {
      get {
        if let resolved = _path._edge_list__provider(complex: self.complexEntity) {
          let value = resolved._edge_list__getter(complex: self.complexEntity)
          return value
        }
        else {
          return sub_ePATH?.partialEntity._edge_list
        }
      }
      set(newValue) {
        if let _ = _path._edge_list__provider(complex: self.complexEntity) { return }

        guard let partial = sub_ePATH?.super_ePATH.partialEntity else { return }
        partial._edge_list = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eVERTEX_ON_EDGE`` )
    public var DISTANCE_FROM_START: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eVERTEX_ON_EDGE?.partialEntity._distance_from_start
      }
      set(newValue) {
        guard let partial = sub_eVERTEX_ON_EDGE?.super_eVERTEX_ON_EDGE.partialEntity else { return }
        partial._distance_from_start = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSUBFACE`` )
    public var PARENT_FACE: eFACE?  {
      get {
        return sub_eSUBFACE?.partialEntity._parent_face
      }
      set(newValue) {
        guard let partial = sub_eSUBFACE?.super_eSUBFACE.partialEntity else { return }
        partial._parent_face = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCONNECTED_FACE_SUB_SET`` )
    public var PARENT_FACE_SET: eCONNECTED_FACE_SET?  {
      get {
        return sub_eCONNECTED_FACE_SUB_SET?.partialEntity._parent_face_set
      }
      set(newValue) {
        guard let partial = sub_eCONNECTED_FACE_SUB_SET?.super_eCONNECTED_FACE_SUB_SET.partialEntity
          else { return }
        partial._parent_face_set = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eORIENTED_OPEN_SHELL`` )
    public var OPEN_SHELL_ELEMENT: eOPEN_SHELL?  {
      get {
        return sub_eORIENTED_OPEN_SHELL?.partialEntity._open_shell_element
      }
      set(newValue) {
        guard let partial = sub_eORIENTED_OPEN_SHELL?.super_eORIENTED_OPEN_SHELL.partialEntity
          else { return }
        partial._open_shell_element = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eVERTEX_SHELL`` )
    public var VERTEX_SHELL_EXTENT: eVERTEX_LOOP?  {
      get {
        return sub_eVERTEX_SHELL?.partialEntity._vertex_shell_extent
      }
      set(newValue) {
        guard let partial = sub_eVERTEX_SHELL?.super_eVERTEX_SHELL.partialEntity else { return }
        partial._vertex_shell_extent = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eORIENTED_CLOSED_SHELL`` )
    public var CLOSED_SHELL_ELEMENT: eCLOSED_SHELL?  {
      get {
        return sub_eORIENTED_CLOSED_SHELL?.partialEntity._closed_shell_element
      }
      set(newValue) {
        guard let partial = sub_eORIENTED_CLOSED_SHELL?.super_eORIENTED_CLOSED_SHELL.partialEntity
          else { return }
        partial._closed_shell_element = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eFACE_BOUND`` )
    public var BOUND: eLOOP?  {
      get {
        return sub_eFACE_BOUND?.partialEntity._bound
      }
      set(newValue) {
        guard let partial = sub_eFACE_BOUND?.super_eFACE_BOUND.partialEntity else { return }
        partial._bound = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT(DYNAMIC)__ attribute
    /// - origin: SUB( ``eEDGE`` )
    public var EDGE_END: eVERTEX?  {
      get {
        if let resolved = _edge._edge_end__provider(complex: self.complexEntity) {
          let value = resolved._edge_end__getter(complex: self.complexEntity)
          return value
        }
        else {
          return sub_eEDGE?.partialEntity._edge_end
        }
      }
      set(newValue) {
        if let _ = _edge._edge_end__provider(complex: self.complexEntity) { return }

        guard let partial = sub_eEDGE?.super_eEDGE.partialEntity else { return }
        partial._edge_end = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCONNECTED_VOLUME_SET`` )
    public var CVS_VOLUMES: (SDAI.SET<eVOLUME_WITH_FACES>/*[1:nil]*/ )?  {
      get {
        return sub_eCONNECTED_VOLUME_SET?.partialEntity._cvs_volumes
      }
      set(newValue) {
        guard let partial = sub_eCONNECTED_VOLUME_SET?.super_eCONNECTED_VOLUME_SET.partialEntity
          else { return }
        partial._cvs_volumes = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eFACE_SURFACE`` )
    public var FACE_GEOMETRY: eSURFACE?  {
      get {
        return sub_eFACE_SURFACE?.partialEntity._face_geometry
      }
      set(newValue) {
        guard let partial = sub_eFACE_SURFACE?.super_eFACE_SURFACE.partialEntity else { return }
        partial._face_geometry = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eORIENTED_FACE`` )
    public var FACE_ELEMENT: eFACE?  {
      get {
        return sub_eORIENTED_FACE?.partialEntity._face_element
      }
      set(newValue) {
        guard let partial = sub_eORIENTED_FACE?.super_eORIENTED_FACE.partialEntity else { return }
        partial._face_element = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eVERTEX_POINT`` )
    public var VERTEX_GEOMETRY: ePOINT?  {
      get {
        return sub_eVERTEX_POINT?.partialEntity._vertex_geometry
      }
      set(newValue) {
        guard let partial = sub_eVERTEX_POINT?.super_eVERTEX_POINT.partialEntity else { return }
        partial._vertex_geometry = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eEDGE_WITH_LENGTH`` )
    public var EDGE_LENGTH: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eEDGE_WITH_LENGTH?.partialEntity._edge_length
      }
      set(newValue) {
        guard let partial = sub_eEDGE_WITH_LENGTH?.super_eEDGE_WITH_LENGTH.partialEntity else { return }
        partial._edge_length = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eWIRE_SHELL`` )
    public var WIRE_SHELL_EXTENT: (SDAI.SET<eLOOP>/*[1:nil]*/ )?  {
      get {
        return sub_eWIRE_SHELL?.partialEntity._wire_shell_extent
      }
      set(newValue) {
        guard let partial = sub_eWIRE_SHELL?.super_eWIRE_SHELL.partialEntity else { return }
        partial._wire_shell_extent = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT(DYNAMIC)__ attribute
    /// - origin: SUB( ``eEDGE`` )
    public var EDGE_START: eVERTEX?  {
      get {
        if let resolved = _edge._edge_start__provider(complex: self.complexEntity) {
          let value = resolved._edge_start__getter(complex: self.complexEntity)
          return value
        }
        else {
          return sub_eEDGE?.partialEntity._edge_start
        }
      }
      set(newValue) {
        if let _ = _edge._edge_start__provider(complex: self.complexEntity) { return }

        guard let partial = sub_eEDGE?.super_eEDGE.partialEntity else { return }
        partial._edge_start = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eEDGE_CURVE`` )
    public var EDGE_GEOMETRY: eCURVE?  {
      get {
        return sub_eEDGE_CURVE?.partialEntity._edge_geometry
      }
      set(newValue) {
        guard let partial = sub_eEDGE_CURVE?.super_eEDGE_CURVE.partialEntity else { return }
        partial._edge_geometry = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCONNECTED_EDGE_SET`` )
    public var CES_EDGES: (SDAI.SET<eEDGE>/*[1:nil]*/ )?  {
      get {
        return sub_eCONNECTED_EDGE_SET?.partialEntity._ces_edges
      }
      set(newValue) {
        guard let partial = sub_eCONNECTED_EDGE_SET?.super_eCONNECTED_EDGE_SET.partialEntity else { return }
        partial._ces_edges = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SELF( ``eTOPOLOGICAL_REPRESENTATION_ITEM`` )
    public var PERMANENT_ID: tIDENTIFIER?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"PERMANENT_ID") {
          return cached.value as! tIDENTIFIER? 
        }
        let origin = self
        let value = origin.partialEntity._permanent_id__getter(SELF: origin)
        updateCache(derivedAttributeName:"PERMANENT_ID", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eREPRESENTATION_ITEM`` )
    public var NAME: tLABEL {
      get {
        return SDAI.UNWRAP( super_eREPRESENTATION_ITEM.partialEntity._name )
      }
      set(newValue) {
        let partial = super_eREPRESENTATION_ITEM.partialEntity
        partial._name = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePOLY_LOOP`` )
    public var POLYGON: (SDAI.LIST_UNIQUE<eCARTESIAN_POINT>/*[3:nil]*/ )?  {
      get {
        return sub_ePOLY_LOOP?.partialEntity._polygon
      }
      set(newValue) {
        guard let partial = sub_ePOLY_LOOP?.super_ePOLY_LOOP.partialEntity else { return }
        partial._polygon = SDAI.UNWRAP(newValue)
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_topological_representation_item.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eREPRESENTATION_ITEM.self) else { return nil }
      self.super_eREPRESENTATION_ITEM = super1

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _topological_representation_item.WHERE_wr1(SELF: instance)
      result[prefix2 + " .WHERE_wr2"] = _topological_representation_item.WHERE_wr2(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "TOPOLOGICAL_REPRESENTATION_ITEM", type: self, explicitAttributeCount: 0)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eREPRESENTATION_ITEM.self)
      entityDef.add(supertype: eTOPOLOGICAL_REPRESENTATION_ITEM.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "CFS_FACES", keyPath: \eTOPOLOGICAL_REPRESENTATION_ITEM.CFS_FACES, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "BOUNDS", keyPath: \eTOPOLOGICAL_REPRESENTATION_ITEM.BOUNDS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "PARENT_VOLUME_SET", keyPath: \eTOPOLOGICAL_REPRESENTATION_ITEM.PARENT_VOLUME_SET, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "EDGE_ELEMENT", keyPath: \eTOPOLOGICAL_REPRESENTATION_ITEM.EDGE_ELEMENT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "LOOP_VERTEX", keyPath: \eTOPOLOGICAL_REPRESENTATION_ITEM.LOOP_VERTEX, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "PERMANENT_AGGREGATE_ID", keyPath: \eTOPOLOGICAL_REPRESENTATION_ITEM.PERMANENT_AGGREGATE_ID, 
        kind: .derived, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "PCURVE_REFERENCE", keyPath: \eTOPOLOGICAL_REPRESENTATION_ITEM.PCURVE_REFERENCE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "VOLUME_GEOMETRY", keyPath: \eTOPOLOGICAL_REPRESENTATION_ITEM.VOLUME_GEOMETRY, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "PATH_ELEMENT", keyPath: \eTOPOLOGICAL_REPRESENTATION_ITEM.PATH_ELEMENT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "EDGE_LIST", keyPath: \eTOPOLOGICAL_REPRESENTATION_ITEM.EDGE_LIST, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "DISTANCE_FROM_START", keyPath: \eTOPOLOGICAL_REPRESENTATION_ITEM.DISTANCE_FROM_START, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "PARENT_FACE", keyPath: \eTOPOLOGICAL_REPRESENTATION_ITEM.PARENT_FACE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "PARENT_FACE_SET", keyPath: \eTOPOLOGICAL_REPRESENTATION_ITEM.PARENT_FACE_SET, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "OPEN_SHELL_ELEMENT", keyPath: \eTOPOLOGICAL_REPRESENTATION_ITEM.OPEN_SHELL_ELEMENT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "VERTEX_SHELL_EXTENT", keyPath: \eTOPOLOGICAL_REPRESENTATION_ITEM.VERTEX_SHELL_EXTENT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "CLOSED_SHELL_ELEMENT", keyPath: \eTOPOLOGICAL_REPRESENTATION_ITEM.CLOSED_SHELL_ELEMENT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "BOUND", keyPath: \eTOPOLOGICAL_REPRESENTATION_ITEM.BOUND, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "EDGE_END", keyPath: \eTOPOLOGICAL_REPRESENTATION_ITEM.EDGE_END, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "CVS_VOLUMES", keyPath: \eTOPOLOGICAL_REPRESENTATION_ITEM.CVS_VOLUMES, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "FACE_GEOMETRY", keyPath: \eTOPOLOGICAL_REPRESENTATION_ITEM.FACE_GEOMETRY, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "FACE_ELEMENT", keyPath: \eTOPOLOGICAL_REPRESENTATION_ITEM.FACE_ELEMENT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "VERTEX_GEOMETRY", keyPath: \eTOPOLOGICAL_REPRESENTATION_ITEM.VERTEX_GEOMETRY, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "EDGE_LENGTH", keyPath: \eTOPOLOGICAL_REPRESENTATION_ITEM.EDGE_LENGTH, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "WIRE_SHELL_EXTENT", keyPath: \eTOPOLOGICAL_REPRESENTATION_ITEM.WIRE_SHELL_EXTENT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "EDGE_START", keyPath: \eTOPOLOGICAL_REPRESENTATION_ITEM.EDGE_START, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "EDGE_GEOMETRY", keyPath: \eTOPOLOGICAL_REPRESENTATION_ITEM.EDGE_GEOMETRY, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "CES_EDGES", keyPath: \eTOPOLOGICAL_REPRESENTATION_ITEM.CES_EDGES, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "PERMANENT_ID", keyPath: \eTOPOLOGICAL_REPRESENTATION_ITEM.PERMANENT_ID, 
        kind: .derived, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "NAME", keyPath: \eTOPOLOGICAL_REPRESENTATION_ITEM.NAME, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "POLYGON", keyPath: \eTOPOLOGICAL_REPRESENTATION_ITEM.POLYGON, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)

      return entityDef
    }

  }
}
