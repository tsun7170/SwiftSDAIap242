/* file: tolerance_value.swift 	 generated: Sat Aug 14 13:46:02 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY tolerance_value;
      lower_bound  : measure_with_unit;
      upper_bound  : measure_with_unit;
    DERIVE
      ubvc  : REAL := upper_bound\measure_with_unit.value_component;
      lbvc  : REAL := lower_bound\measure_with_unit.value_component;
    WHERE
      wr1: ( ubvc > lbvc );
      wr2: ( upper_bound\measure_with_unit.unit_component = lower_bound\measure_with_unit.unit_component );
  END_ENTITY; -- tolerance_value (line:32745 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  ENTITY(SELF)	tolerance_value
    ATTR:  lower_bound,	TYPE: measure_with_unit -- EXPLICIT

    ATTR:  upper_bound,	TYPE: measure_with_unit -- EXPLICIT

    ATTR:  ubvc,	TYPE: REAL -- DERIVED
      := upper_bound\measure_with_unit.value_component

    ATTR:  lbvc,	TYPE: REAL -- DERIVED
      := lower_bound\measure_with_unit.value_component


*/


//MARK: - Partial Entity
  public final class _tolerance_value : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eTOLERANCE_VALUE.self
    }

    //ATTRIBUTES
    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _lower_bound: eMEASURE_WITH_UNIT // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _upper_bound: eMEASURE_WITH_UNIT // PLAIN EXPLICIT ATTRIBUTE

    /// DERIVE ATTRIBUTE
    internal func _ubvc__getter(SELF: eTOLERANCE_VALUE) -> SDAI.REAL?  {

      let _TEMP1 = SELF.UPPER_BOUND.GROUP_REF(eMEASURE_WITH_UNIT.self)
      let _TEMP2 = _TEMP1?.VALUE_COMPONENT
      return SDAI.REAL(/*sMEASURE_VALUE*/_TEMP2)
    }

    /// DERIVE ATTRIBUTE
    internal func _lbvc__getter(SELF: eTOLERANCE_VALUE) -> SDAI.REAL?  {

      let _TEMP1 = SELF.LOWER_BOUND.GROUP_REF(eMEASURE_WITH_UNIT.self)
      let _TEMP2 = _TEMP1?.VALUE_COMPONENT
      return SDAI.REAL(/*sMEASURE_VALUE*/_TEMP2)
    }

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      //SELECT data types (indirectly) referencing the current type as a member of the select list
      members.insert(SDAI.STRING(sTOLERANCE_VALUE_OR_LIMITS_AND_FITS.typeName)) // -> Self
      members.insert(SDAI.STRING(sTOLERANCE_METHOD_DEFINITION.typeName)) // -> Self
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._lower_bound.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._upper_bound.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._lower_bound.value.isValueEqualOptionally(to: rhs._lower_bound.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._upper_bound.value.isValueEqualOptionally(to: rhs._upper_bound.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._lower_bound.value.isValueEqualOptionally(to: rhs._lower_bound.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._upper_bound.value.isValueEqualOptionally(to: rhs._upper_bound.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: eTOLERANCE_VALUE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.UBVC > SELF.LBVC
      return _TEMP1
    }
    public static func WHERE_wr2(SELF: eTOLERANCE_VALUE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.UPPER_BOUND.GROUP_REF(eMEASURE_WITH_UNIT.self)
      let _TEMP2 = _TEMP1?.UNIT_COMPONENT
      let _TEMP3 = SELF.LOWER_BOUND.GROUP_REF(eMEASURE_WITH_UNIT.self)
      let _TEMP4 = _TEMP3?.UNIT_COMPONENT
      let _TEMP5 = _TEMP2 .==. _TEMP4
      return _TEMP5
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(LOWER_BOUND: eMEASURE_WITH_UNIT, UPPER_BOUND: eMEASURE_WITH_UNIT) {
      self._lower_bound = LOWER_BOUND
      self._upper_bound = UPPER_BOUND
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 2
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverRequiredParameter(as: eMEASURE_WITH_UNIT.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p1) = exchangeStructure.recoverRequiredParameter(as: eMEASURE_WITH_UNIT.self, from: parameters[1])
      else { exchangeStructure.add(errorContext: "while recovering parameter #1 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( LOWER_BOUND: p0, UPPER_BOUND: p1 )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY tolerance_value;
      lower_bound  : measure_with_unit;
      upper_bound  : measure_with_unit;
    DERIVE
      ubvc  : REAL := upper_bound\measure_with_unit.value_component;
      lbvc  : REAL := lower_bound\measure_with_unit.value_component;
    WHERE
      wr1: ( ubvc > lbvc );
      wr2: ( upper_bound\measure_with_unit.unit_component = lower_bound\measure_with_unit.unit_component );
  END_ENTITY; -- tolerance_value (line:32745 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eTOLERANCE_VALUE : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _tolerance_value.self
    }
    public let partialEntity: _tolerance_value

    //MARK: SUPERTYPES
    public var super_eTOLERANCE_VALUE: eTOLERANCE_VALUE { return self } 	// [1]

    //MARK: SUBTYPES

    //MARK: ATTRIBUTES
    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eTOLERANCE_VALUE`` )
    public var UPPER_BOUND: eMEASURE_WITH_UNIT {
      get {
        return SDAI.UNWRAP( self.partialEntity._upper_bound )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._upper_bound = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eTOLERANCE_VALUE`` )
    public var LOWER_BOUND: eMEASURE_WITH_UNIT {
      get {
        return SDAI.UNWRAP( self.partialEntity._lower_bound )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._lower_bound = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SELF( ``eTOLERANCE_VALUE`` )
    public var UBVC: SDAI.REAL?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"UBVC") {
          return cached.value as! SDAI.REAL? 
        }
        let origin = self
        let value = origin.partialEntity._ubvc__getter(SELF: origin)
        updateCache(derivedAttributeName:"UBVC", value:value)
        return value
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SELF( ``eTOLERANCE_VALUE`` )
    public var LBVC: SDAI.REAL?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"LBVC") {
          return cached.value as! SDAI.REAL? 
        }
        let origin = self
        let value = origin.partialEntity._lbvc__getter(SELF: origin)
        updateCache(derivedAttributeName:"LBVC", value:value)
        return value
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_tolerance_value.self) else { return nil }
      self.partialEntity = partial

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }

    //SIMPLE ENTITY REFERENCE
    public convenience init?(_ partial:_tolerance_value) {
      let complex = SDAI.ComplexEntity(entities:[partial])
      self.init(complex: complex)
    }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _tolerance_value.WHERE_wr1(SELF: instance)
      result[prefix2 + " .WHERE_wr2"] = _tolerance_value.WHERE_wr2(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "TOLERANCE_VALUE", type: self, explicitAttributeCount: 2)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eTOLERANCE_VALUE.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "UPPER_BOUND", keyPath: \eTOLERANCE_VALUE.UPPER_BOUND, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "LOWER_BOUND", keyPath: \eTOLERANCE_VALUE.LOWER_BOUND, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "UBVC", keyPath: \eTOLERANCE_VALUE.UBVC, 
        kind: .derived, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "LBVC", keyPath: \eTOLERANCE_VALUE.LBVC, 
        kind: .derived, source: .thisEntity, mayYieldEntityReference: false)

      return entityDef
    }

  }
}
