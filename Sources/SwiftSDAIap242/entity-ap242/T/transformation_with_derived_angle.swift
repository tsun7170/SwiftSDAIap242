/* file: transformation_with_derived_angle.swift 	 generated: Tue Nov 16 05:35:44 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY transformation_with_derived_angle
    SUPERTYPE OF ( 
        ONEOF ( 
            draped_defined_transformation, 
            laid_defined_transformation ) )
    SUBTYPE OF ( item_defined_transformation );
      SELF\item_defined_transformation.transform_item_1 : angle_direction_reference_with_a2p3d_select;
      SELF\item_defined_transformation.transform_item_2 : axis2_placement_3d;
    DERIVE
      orientation_angle  : plane_angle_measure := derive_angle( SELF\item_defined_transformation.
                             transform_item_1, SELF\item_defined_transformation.transform_item_2 );
    WHERE
      wr1: ( ( SELF\item_defined_transformation.transform_item_1\axis2_placement_3d.p[3].direction_ratios[1] 
               = SELF\item_defined_transformation.transform_item_2\axis2_placement_3d.p[3].direction_ratios[1] ) 
               AND ( SELF\item_defined_transformation.transform_item_1\axis2_placement_3d.p[3].
               direction_ratios[2] = SELF\item_defined_transformation.transform_item_2\axis2_placement_3d.p[3]
               .direction_ratios[2] ) AND ( SELF\item_defined_transformation.transform_item_1\
               axis2_placement_3d.p[3].direction_ratios[3] = SELF\item_defined_transformation.
               transform_item_2\axis2_placement_3d.p[3].direction_ratios[3] ) );
  END_ENTITY; -- transformation_with_derived_angle (line:32882 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	item_defined_transformation
    ATTR:  name,	TYPE: label -- EXPLICIT (DYNAMIC)
      -- possibly overriden by
          ENTITY: kinematic_pair,	TYPE: label	(as DERIVED)

    ATTR:  description,	TYPE: OPTIONAL text -- EXPLICIT

    ATTR:  transform_item_1,	TYPE: representation_item -- EXPLICIT
      -- possibly overriden by
          ENTITY: kinematic_pair,	TYPE: rigid_placement
          ENTITY: link_motion_transformation,	TYPE: rigid_placement
      *** ENTITY: transformation_with_derived_angle,	TYPE: angle_direction_reference_with_a2p3d_select

    ATTR:  transform_item_2,	TYPE: representation_item -- EXPLICIT
      -- possibly overriden by
          ENTITY: kinematic_pair,	TYPE: rigid_placement
          ENTITY: link_motion_transformation,	TYPE: kinematic_path
      *** ENTITY: transformation_with_derived_angle,	TYPE: axis2_placement_3d


  ENTITY(SELF)	transformation_with_derived_angle
    REDCR: transform_item_1,	TYPE: angle_direction_reference_with_a2p3d_select -- EXPLICIT
      -- OVERRIDING ENTITY: item_defined_transformation

    REDCR: transform_item_2,	TYPE: axis2_placement_3d -- EXPLICIT
      -- OVERRIDING ENTITY: item_defined_transformation

    ATTR:  orientation_angle,	TYPE: plane_angle_measure -- DERIVED
      := derive_angle( SELF\item_defined_transformation.transform_item_1, SELF\item_defined_transformation.
        transform_item_2 )


  SUB- ENTITY(3)	laid_defined_transformation
    (no local attributes)

  SUB- ENTITY(4)	draped_defined_transformation
    (no local attributes)

*/


//MARK: - Partial Entity
  public final class _transformation_with_derived_angle : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eTRANSFORMATION_WITH_DERIVED_ANGLE.self
    }

    //ATTRIBUTES
    /* override var _transform_item_1: sANGLE_DIRECTION_REFERENCE_WITH_A2P3D_SELECT	//EXPLICIT REDEFINITION(eITEM_DEFINED_TRANSFORMATION) */

    /* override var _transform_item_2: eAXIS2_PLACEMENT_3D	//EXPLICIT REDEFINITION(eITEM_DEFINED_TRANSFORMATION) */

    /// DERIVE ATTRIBUTE
    internal func _orientation_angle__getter(SELF: eTRANSFORMATION_WITH_DERIVED_ANGLE) -> 
      tPLANE_ANGLE_MEASURE?  {

      let _TEMP1 = SELF.GROUP_REF(eITEM_DEFINED_TRANSFORMATION.self)
      let _TEMP2 = _TEMP1?.TRANSFORM_ITEM_1
      let _TEMP3 = SELF.GROUP_REF(eITEM_DEFINED_TRANSFORMATION.self)
      let _TEMP4 = _TEMP3?.TRANSFORM_ITEM_2
      let _TEMP5 = DERIVE_ANGLE(PLACEMENT_1: eAXIS2_PLACEMENT_3D(/*eREPRESENTATION_ITEM*/_TEMP2), 
                                PLACEMENT_2: eAXIS2_PLACEMENT_3D(/*eREPRESENTATION_ITEM*/_TEMP4))
      return _TEMP5
    }

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: eTRANSFORMATION_WITH_DERIVED_ANGLE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.GROUP_REF(eITEM_DEFINED_TRANSFORMATION.self)
      let _TEMP2 = _TEMP1?.TRANSFORM_ITEM_1
      let _TEMP3 = _TEMP2?.GROUP_REF(eAXIS2_PLACEMENT_3D.self)
      let _TEMP4 = _TEMP3?.P
      let _TEMP5 = _TEMP4?[3]
      let _TEMP6 = _TEMP5?.DIRECTION_RATIOS
      let _TEMP7 = _TEMP6?[1]
      let _TEMP8 = SELF.GROUP_REF(eITEM_DEFINED_TRANSFORMATION.self)
      let _TEMP9 = _TEMP8?.TRANSFORM_ITEM_2
      let _TEMP10 = _TEMP9?.GROUP_REF(eAXIS2_PLACEMENT_3D.self)
      let _TEMP11 = _TEMP10?.P
      let _TEMP12 = _TEMP11?[3]
      let _TEMP13 = _TEMP12?.DIRECTION_RATIOS
      let _TEMP14 = _TEMP13?[1]
      let _TEMP15 = _TEMP7 .==. _TEMP14
      let _TEMP16 = SELF.GROUP_REF(eITEM_DEFINED_TRANSFORMATION.self)
      let _TEMP17 = _TEMP16?.TRANSFORM_ITEM_1
      let _TEMP18 = _TEMP17?.GROUP_REF(eAXIS2_PLACEMENT_3D.self)
      let _TEMP19 = _TEMP18?.P
      let _TEMP20 = _TEMP19?[3]
      let _TEMP21 = _TEMP20?.DIRECTION_RATIOS
      let _TEMP22 = _TEMP21?[2]
      let _TEMP23 = SELF.GROUP_REF(eITEM_DEFINED_TRANSFORMATION.self)
      let _TEMP24 = _TEMP23?.TRANSFORM_ITEM_2
      let _TEMP25 = _TEMP24?.GROUP_REF(eAXIS2_PLACEMENT_3D.self)
      let _TEMP26 = _TEMP25?.P
      let _TEMP27 = _TEMP26?[3]
      let _TEMP28 = _TEMP27?.DIRECTION_RATIOS
      let _TEMP29 = _TEMP28?[2]
      let _TEMP30 = _TEMP22 .==. _TEMP29
      let _TEMP31 = _TEMP15 && _TEMP30
      let _TEMP32 = SELF.GROUP_REF(eITEM_DEFINED_TRANSFORMATION.self)
      let _TEMP33 = _TEMP32?.TRANSFORM_ITEM_1
      let _TEMP34 = _TEMP33?.GROUP_REF(eAXIS2_PLACEMENT_3D.self)
      let _TEMP35 = _TEMP34?.P
      let _TEMP36 = _TEMP35?[3]
      let _TEMP37 = _TEMP36?.DIRECTION_RATIOS
      let _TEMP38 = _TEMP37?[3]
      let _TEMP39 = SELF.GROUP_REF(eITEM_DEFINED_TRANSFORMATION.self)
      let _TEMP40 = _TEMP39?.TRANSFORM_ITEM_2
      let _TEMP41 = _TEMP40?.GROUP_REF(eAXIS2_PLACEMENT_3D.self)
      let _TEMP42 = _TEMP41?.P
      let _TEMP43 = _TEMP42?[3]
      let _TEMP44 = _TEMP43?.DIRECTION_RATIOS
      let _TEMP45 = _TEMP44?[3]
      let _TEMP46 = _TEMP38 .==. _TEMP45
      let _TEMP47 = _TEMP31 && _TEMP46
      return _TEMP47
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init() {
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 0
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      self.init( )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY transformation_with_derived_angle
    SUPERTYPE OF ( 
        ONEOF ( 
            draped_defined_transformation, 
            laid_defined_transformation ) )
    SUBTYPE OF ( item_defined_transformation );
      SELF\item_defined_transformation.transform_item_1 : angle_direction_reference_with_a2p3d_select;
      SELF\item_defined_transformation.transform_item_2 : axis2_placement_3d;
    DERIVE
      orientation_angle  : plane_angle_measure := derive_angle( SELF\item_defined_transformation.
                             transform_item_1, SELF\item_defined_transformation.transform_item_2 );
    WHERE
      wr1: ( ( SELF\item_defined_transformation.transform_item_1\axis2_placement_3d.p[3].direction_ratios[1] 
               = SELF\item_defined_transformation.transform_item_2\axis2_placement_3d.p[3].direction_ratios[1] ) 
               AND ( SELF\item_defined_transformation.transform_item_1\axis2_placement_3d.p[3].
               direction_ratios[2] = SELF\item_defined_transformation.transform_item_2\axis2_placement_3d.p[3]
               .direction_ratios[2] ) AND ( SELF\item_defined_transformation.transform_item_1\
               axis2_placement_3d.p[3].direction_ratios[3] = SELF\item_defined_transformation.
               transform_item_2\axis2_placement_3d.p[3].direction_ratios[3] ) );
  END_ENTITY; -- transformation_with_derived_angle (line:32882 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eTRANSFORMATION_WITH_DERIVED_ANGLE : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _transformation_with_derived_angle.self
    }
    public let partialEntity: _transformation_with_derived_angle

    //MARK: SUPERTYPES
    public let super_eITEM_DEFINED_TRANSFORMATION: eITEM_DEFINED_TRANSFORMATION 	// [1]
    public var super_eTRANSFORMATION_WITH_DERIVED_ANGLE: eTRANSFORMATION_WITH_DERIVED_ANGLE { return self } 	// [2]

    //MARK: SUBTYPES
    public var sub_eLAID_DEFINED_TRANSFORMATION: eLAID_DEFINED_TRANSFORMATION? {	// [3]
      return self.complexEntity.entityReference(eLAID_DEFINED_TRANSFORMATION.self)
    }

    public var sub_eDRAPED_DEFINED_TRANSFORMATION: eDRAPED_DEFINED_TRANSFORMATION? {	// [4]
      return self.complexEntity.entityReference(eDRAPED_DEFINED_TRANSFORMATION.self)
    }


    //MARK: ATTRIBUTES
    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eITEM_DEFINED_TRANSFORMATION`` )
    public var DESCRIPTION: tTEXT?  {
      get {
        return super_eITEM_DEFINED_TRANSFORMATION.partialEntity._description
      }
      set(newValue) {
        let partial = super_eITEM_DEFINED_TRANSFORMATION.partialEntity
        partial._description = newValue
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SELF( ``eTRANSFORMATION_WITH_DERIVED_ANGLE`` )
    public var ORIENTATION_ANGLE: tPLANE_ANGLE_MEASURE?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"ORIENTATION_ANGLE") {
          return cached.value as! tPLANE_ANGLE_MEASURE? 
        }
        let origin = self
        let value = origin.partialEntity._orientation_angle__getter(SELF: origin)
        updateCache(derivedAttributeName:"ORIENTATION_ANGLE", value:value)
        return value
      }
    }

    /// __EXPLICIT REDEF__ attribute
    /// - origin: SELF( ``eTRANSFORMATION_WITH_DERIVED_ANGLE`` )
    public var TRANSFORM_ITEM_1: sANGLE_DIRECTION_REFERENCE_WITH_A2P3D_SELECT {
      get {
        return SDAI.UNWRAP( sANGLE_DIRECTION_REFERENCE_WITH_A2P3D_SELECT( super_eITEM_DEFINED_TRANSFORMATION
          .partialEntity._transform_item_1 ) )
      }
      set(newValue) {
        let partial = super_eITEM_DEFINED_TRANSFORMATION.partialEntity
        partial._transform_item_1 = SDAI.UNWRAP(
          eREPRESENTATION_ITEM(newValue))
      }
    }

    /// __EXPLICIT REDEF__ attribute
    /// - origin: SELF( ``eTRANSFORMATION_WITH_DERIVED_ANGLE`` )
    public var TRANSFORM_ITEM_2: eAXIS2_PLACEMENT_3D {
      get {
        return SDAI.UNWRAP( eAXIS2_PLACEMENT_3D( super_eITEM_DEFINED_TRANSFORMATION.partialEntity
          ._transform_item_2 ) )
      }
      set(newValue) {
        let partial = super_eITEM_DEFINED_TRANSFORMATION.partialEntity
        partial._transform_item_2 = SDAI.UNWRAP(
          eREPRESENTATION_ITEM(newValue))
      }
    }

    /// __EXPLICIT(DYNAMIC)__ attribute
    /// - origin: SUPER( ``eITEM_DEFINED_TRANSFORMATION`` )
    public var NAME: tLABEL {
      get {
        if let resolved = _item_defined_transformation._name__provider(complex: self.complexEntity) {
          let value = resolved._name__getter(complex: self.complexEntity)
          return value
        }
        else {
          return SDAI.UNWRAP( super_eITEM_DEFINED_TRANSFORMATION.partialEntity._name )
        }
      }
      set(newValue) {
        if let _ = _item_defined_transformation._name__provider(complex: self.complexEntity) { return }

        let partial = super_eITEM_DEFINED_TRANSFORMATION.partialEntity
        partial._name = SDAI.UNWRAP(newValue)
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_transformation_with_derived_angle.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eITEM_DEFINED_TRANSFORMATION.self) else { return nil }
      self.super_eITEM_DEFINED_TRANSFORMATION = super1

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _transformation_with_derived_angle.WHERE_wr1(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "TRANSFORMATION_WITH_DERIVED_ANGLE", type: self, explicitAttributeCount: 0)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eITEM_DEFINED_TRANSFORMATION.self)
      entityDef.add(supertype: eTRANSFORMATION_WITH_DERIVED_ANGLE.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "DESCRIPTION", keyPath: \eTRANSFORMATION_WITH_DERIVED_ANGLE.DESCRIPTION, 
        kind: .explicitOptional, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "ORIENTATION_ANGLE", keyPath: \eTRANSFORMATION_WITH_DERIVED_ANGLE.ORIENTATION_ANGLE, 
        kind: .derived, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "TRANSFORM_ITEM_1", keyPath: \eTRANSFORMATION_WITH_DERIVED_ANGLE.TRANSFORM_ITEM_1, 
        kind: .explicitRedeclaring, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "TRANSFORM_ITEM_2", keyPath: \eTRANSFORMATION_WITH_DERIVED_ANGLE.TRANSFORM_ITEM_2, 
        kind: .explicitRedeclaring, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "NAME", keyPath: \eTRANSFORMATION_WITH_DERIVED_ANGLE.NAME, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)

      return entityDef
    }

  }
}
