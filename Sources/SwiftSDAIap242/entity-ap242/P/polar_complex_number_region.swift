/* file: polar_complex_number_region.swift 	 generated: Mon Jan  3 16:32:52 2022 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.1, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY polar_complex_number_region
    SUBTYPE OF ( maths_space, generic_literal );
      centre                : complex_number_literal;
      distance_constraint   : real_interval;
      direction_constraint  : finite_real_interval;
    WHERE
      wr1: ( min_exists( distance_constraint ) AND ( real_min( distance_constraint ) >= 0 ) );
      wr2: ( ( ( -PI ) <= direction_constraint.min ) AND ( direction_constraint.min < PI ) );
      wr3: ( ( direction_constraint.max - direction_constraint.min ) <= ( 2 * PI ) );
      wr4: ( ( ( direction_constraint.max - direction_constraint.min ) < ( 2 * PI ) ) OR ( 
               direction_constraint.min_closure = open ) );
      wr5: ( ( ( direction_constraint.max - direction_constraint.min ) < ( 2 * PI ) ) OR ( 
               direction_constraint.max_closure = open ) OR ( direction_constraint.min = ( -PI ) ) );
      wr6: ( ( real_min( distance_constraint ) > 0 ) OR max_exists( distance_constraint ) OR ( ( 
               direction_constraint.max - direction_constraint.min ) < ( 2 * PI ) ) OR ( direction_constraint
               .max_closure = open ) );
  END_ENTITY; -- polar_complex_number_region (line:25388 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	generic_expression
    (no local attributes)

  SUPER- ENTITY(2)	maths_space
    (no local attributes)

  SUPER- ENTITY(3)	simple_generic_expression
    (no local attributes)

  SUPER- ENTITY(4)	generic_literal
    (no local attributes)

  ENTITY(SELF)	polar_complex_number_region
    ATTR:  centre,	TYPE: complex_number_literal -- EXPLICIT

    ATTR:  distance_constraint,	TYPE: real_interval -- EXPLICIT

    ATTR:  direction_constraint,	TYPE: finite_real_interval -- EXPLICIT


*/


//MARK: - Partial Entity
  public final class _polar_complex_number_region : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      ePOLAR_COMPLEX_NUMBER_REGION.self
    }

    //ATTRIBUTES
    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _centre: eCOMPLEX_NUMBER_LITERAL // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _distance_constraint: sREAL_INTERVAL // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _direction_constraint: eFINITE_REAL_INTERVAL // PLAIN EXPLICIT ATTRIBUTE

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._centre.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._distance_constraint.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._direction_constraint.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._centre.value.isValueEqualOptionally(to: rhs._centre.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._distance_constraint.value.isValueEqualOptionally(to: rhs._distance_constraint.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._direction_constraint.value.isValueEqualOptionally(to: rhs._direction_constraint.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._centre.value.isValueEqualOptionally(to: rhs._centre.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._distance_constraint.value.isValueEqualOptionally(to: rhs._distance_constraint.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._direction_constraint.value.isValueEqualOptionally(to: rhs._direction_constraint.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: ePOLAR_COMPLEX_NUMBER_REGION?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = MIN_EXISTS(eMATHS_SPACE(/*sREAL_INTERVAL*/SELF.DISTANCE_CONSTRAINT))
      let _TEMP2 = REAL_MIN(eMATHS_SPACE(/*sREAL_INTERVAL*/SELF.DISTANCE_CONSTRAINT))
      let _TEMP3 = _TEMP2 >= SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      let _TEMP4 = _TEMP1 && _TEMP3
      return _TEMP4
    }
    public static func WHERE_wr2(SELF: ePOLAR_COMPLEX_NUMBER_REGION?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.DIRECTION_CONSTRAINT.MIN
      let _TEMP2 = SDAI.FORCE_OPTIONAL(SDAI.REAL( -SDAI.PI)) <= SDAI.FORCE_OPTIONAL(_TEMP1)
      let _TEMP3 = SELF.DIRECTION_CONSTRAINT.MIN
      let _TEMP4 = SDAI.FORCE_OPTIONAL(_TEMP3) < SDAI.FORCE_OPTIONAL(SDAI.REAL(SDAI.PI))
      let _TEMP5 = _TEMP2 && _TEMP4
      return _TEMP5
    }
    public static func WHERE_wr3(SELF: ePOLAR_COMPLEX_NUMBER_REGION?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.DIRECTION_CONSTRAINT.MAX
      let _TEMP2 = SELF.DIRECTION_CONSTRAINT.MIN
      let _TEMP3 = SDAI.FORCE_OPTIONAL(_TEMP1) - SDAI.FORCE_OPTIONAL(_TEMP2)
      let _TEMP4 = SDAI.REAL(2.0000000000e+00) * SDAI.REAL(SDAI.PI)
      let _TEMP5 = _TEMP3 <= SDAI.FORCE_OPTIONAL(_TEMP4)
      return _TEMP5
    }
    public static func WHERE_wr4(SELF: ePOLAR_COMPLEX_NUMBER_REGION?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.DIRECTION_CONSTRAINT.MAX
      let _TEMP2 = SELF.DIRECTION_CONSTRAINT.MIN
      let _TEMP3 = SDAI.FORCE_OPTIONAL(_TEMP1) - SDAI.FORCE_OPTIONAL(_TEMP2)
      let _TEMP4 = SDAI.REAL(2.0000000000e+00) * SDAI.REAL(SDAI.PI)
      let _TEMP5 = _TEMP3 < SDAI.FORCE_OPTIONAL(_TEMP4)
      let _TEMP6 = SELF.DIRECTION_CONSTRAINT.MIN_CLOSURE
      let _TEMP7 = SDAI.FORCE_OPTIONAL(_TEMP6) .==. SDAI.FORCE_OPTIONAL(OPEN)
      let _TEMP8 = _TEMP5 || _TEMP7
      return _TEMP8
    }
    public static func WHERE_wr5(SELF: ePOLAR_COMPLEX_NUMBER_REGION?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.DIRECTION_CONSTRAINT.MAX
      let _TEMP2 = SELF.DIRECTION_CONSTRAINT.MIN
      let _TEMP3 = SDAI.FORCE_OPTIONAL(_TEMP1) - SDAI.FORCE_OPTIONAL(_TEMP2)
      let _TEMP4 = SDAI.REAL(2.0000000000e+00) * SDAI.REAL(SDAI.PI)
      let _TEMP5 = _TEMP3 < SDAI.FORCE_OPTIONAL(_TEMP4)
      let _TEMP6 = SELF.DIRECTION_CONSTRAINT.MAX_CLOSURE
      let _TEMP7 = SDAI.FORCE_OPTIONAL(_TEMP6) .==. SDAI.FORCE_OPTIONAL(OPEN)
      let _TEMP8 = _TEMP5 || _TEMP7
      let _TEMP9 = SELF.DIRECTION_CONSTRAINT.MIN
      let _TEMP10 = SDAI.FORCE_OPTIONAL(_TEMP9) .==. SDAI.FORCE_OPTIONAL(SDAI.REAL( -SDAI.PI))
      let _TEMP11 = _TEMP8 || _TEMP10
      return _TEMP11
    }
    public static func WHERE_wr6(SELF: ePOLAR_COMPLEX_NUMBER_REGION?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = REAL_MIN(eMATHS_SPACE(/*sREAL_INTERVAL*/SELF.DISTANCE_CONSTRAINT))
      let _TEMP2 = _TEMP1 > SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      let _TEMP3 = MAX_EXISTS(eMATHS_SPACE(/*sREAL_INTERVAL*/SELF.DISTANCE_CONSTRAINT))
      let _TEMP4 = _TEMP2 || _TEMP3
      let _TEMP5 = SELF.DIRECTION_CONSTRAINT.MAX
      let _TEMP6 = SELF.DIRECTION_CONSTRAINT.MIN
      let _TEMP7 = SDAI.FORCE_OPTIONAL(_TEMP5) - SDAI.FORCE_OPTIONAL(_TEMP6)
      let _TEMP8 = SDAI.REAL(2.0000000000e+00) * SDAI.REAL(SDAI.PI)
      let _TEMP9 = _TEMP7 < SDAI.FORCE_OPTIONAL(_TEMP8)
      let _TEMP10 = _TEMP4 || _TEMP9
      let _TEMP11 = SELF.DIRECTION_CONSTRAINT.MAX_CLOSURE
      let _TEMP12 = SDAI.FORCE_OPTIONAL(_TEMP11) .==. SDAI.FORCE_OPTIONAL(OPEN)
      let _TEMP13 = _TEMP10 || _TEMP12
      return _TEMP13
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(CENTRE: eCOMPLEX_NUMBER_LITERAL, DISTANCE_CONSTRAINT: sREAL_INTERVAL, 
                DIRECTION_CONSTRAINT: eFINITE_REAL_INTERVAL) {
      self._centre = CENTRE
      self._distance_constraint = DISTANCE_CONSTRAINT
      self._direction_constraint = DIRECTION_CONSTRAINT
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 3
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverRequiredParameter(as: eCOMPLEX_NUMBER_LITERAL.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p1) = exchangeStructure.recoverRequiredParameter(as: sREAL_INTERVAL.self, from: parameters[1])
      else { exchangeStructure.add(errorContext: "while recovering parameter #1 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p2) = exchangeStructure.recoverRequiredParameter(as: eFINITE_REAL_INTERVAL.self, from: parameters[2])
      else { exchangeStructure.add(errorContext: "while recovering parameter #2 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( CENTRE: p0, DISTANCE_CONSTRAINT: p1, DIRECTION_CONSTRAINT: p2 )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY polar_complex_number_region
    SUBTYPE OF ( maths_space, generic_literal );
      centre                : complex_number_literal;
      distance_constraint   : real_interval;
      direction_constraint  : finite_real_interval;
    WHERE
      wr1: ( min_exists( distance_constraint ) AND ( real_min( distance_constraint ) >= 0 ) );
      wr2: ( ( ( -PI ) <= direction_constraint.min ) AND ( direction_constraint.min < PI ) );
      wr3: ( ( direction_constraint.max - direction_constraint.min ) <= ( 2 * PI ) );
      wr4: ( ( ( direction_constraint.max - direction_constraint.min ) < ( 2 * PI ) ) OR ( 
               direction_constraint.min_closure = open ) );
      wr5: ( ( ( direction_constraint.max - direction_constraint.min ) < ( 2 * PI ) ) OR ( 
               direction_constraint.max_closure = open ) OR ( direction_constraint.min = ( -PI ) ) );
      wr6: ( ( real_min( distance_constraint ) > 0 ) OR max_exists( distance_constraint ) OR ( ( 
               direction_constraint.max - direction_constraint.min ) < ( 2 * PI ) ) OR ( direction_constraint
               .max_closure = open ) );
  END_ENTITY; -- polar_complex_number_region (line:25388 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class ePOLAR_COMPLEX_NUMBER_REGION : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _polar_complex_number_region.self
    }
    public let partialEntity: _polar_complex_number_region

    //MARK: SUPERTYPES
    public let super_eGENERIC_EXPRESSION: eGENERIC_EXPRESSION 	// [1]
    public let super_eMATHS_SPACE: eMATHS_SPACE 	// [2]
    public let super_eSIMPLE_GENERIC_EXPRESSION: eSIMPLE_GENERIC_EXPRESSION 	// [3]
    public let super_eGENERIC_LITERAL: eGENERIC_LITERAL 	// [4]
    public var super_ePOLAR_COMPLEX_NUMBER_REGION: ePOLAR_COMPLEX_NUMBER_REGION { return self } 	// [5]

    //MARK: SUBTYPES

    //MARK: ATTRIBUTES
    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``ePOLAR_COMPLEX_NUMBER_REGION`` )
    public var DIRECTION_CONSTRAINT: eFINITE_REAL_INTERVAL {
      get {
        return SDAI.UNWRAP( self.partialEntity._direction_constraint )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._direction_constraint = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``ePOLAR_COMPLEX_NUMBER_REGION`` )
    public var CENTRE: eCOMPLEX_NUMBER_LITERAL {
      get {
        return SDAI.UNWRAP( self.partialEntity._centre )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._centre = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``ePOLAR_COMPLEX_NUMBER_REGION`` )
    public var DISTANCE_CONSTRAINT: sREAL_INTERVAL {
      get {
        return SDAI.UNWRAP( self.partialEntity._distance_constraint )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._distance_constraint = SDAI.UNWRAP(newValue)
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_polar_complex_number_region.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eGENERIC_EXPRESSION.self) else { return nil }
      self.super_eGENERIC_EXPRESSION = super1

      guard let super2 = complexEntity?.entityReference(eMATHS_SPACE.self) else { return nil }
      self.super_eMATHS_SPACE = super2

      guard let super3 = complexEntity?.entityReference(eSIMPLE_GENERIC_EXPRESSION.self) else { return nil }
      self.super_eSIMPLE_GENERIC_EXPRESSION = super3

      guard let super4 = complexEntity?.entityReference(eGENERIC_LITERAL.self) else { return nil }
      self.super_eGENERIC_LITERAL = super4

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _polar_complex_number_region.WHERE_wr1(SELF: instance)
      result[prefix2 + " .WHERE_wr2"] = _polar_complex_number_region.WHERE_wr2(SELF: instance)
      result[prefix2 + " .WHERE_wr3"] = _polar_complex_number_region.WHERE_wr3(SELF: instance)
      result[prefix2 + " .WHERE_wr4"] = _polar_complex_number_region.WHERE_wr4(SELF: instance)
      result[prefix2 + " .WHERE_wr5"] = _polar_complex_number_region.WHERE_wr5(SELF: instance)
      result[prefix2 + " .WHERE_wr6"] = _polar_complex_number_region.WHERE_wr6(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "POLAR_COMPLEX_NUMBER_REGION", type: self, explicitAttributeCount: 3)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eGENERIC_EXPRESSION.self)
      entityDef.add(supertype: eMATHS_SPACE.self)
      entityDef.add(supertype: eSIMPLE_GENERIC_EXPRESSION.self)
      entityDef.add(supertype: eGENERIC_LITERAL.self)
      entityDef.add(supertype: ePOLAR_COMPLEX_NUMBER_REGION.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "DIRECTION_CONSTRAINT", keyPath: \ePOLAR_COMPLEX_NUMBER_REGION.DIRECTION_CONSTRAINT, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "CENTRE", keyPath: \ePOLAR_COMPLEX_NUMBER_REGION.CENTRE, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "DISTANCE_CONSTRAINT", keyPath: \ePOLAR_COMPLEX_NUMBER_REGION.DISTANCE_CONSTRAINT, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)

      return entityDef
    }

  }
}
