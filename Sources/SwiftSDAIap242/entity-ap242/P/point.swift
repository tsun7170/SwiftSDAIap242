/* file: point.swift 	 generated: Sat Aug 14 13:46:02 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY point
    SUPERTYPE OF ( 
        ONEOF ( 
            cartesian_point, 
            point_on_curve, 
            point_on_surface, 
            point_in_volume, 
            point_replica, 
            degenerate_pcurve ) )
    SUBTYPE OF ( geometric_representation_item );
  END_ENTITY; -- point (line:25135 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	representation_item
    ATTR:  name,	TYPE: label -- EXPLICIT


  SUPER- ENTITY(2)	geometric_representation_item
    ATTR:  dim,	TYPE: dimension_count -- DERIVED
      := dimension_of( SELF )


  ENTITY(SELF)	point
    (no local attributes)

  SUB- ENTITY(4)	evaluated_degenerate_pcurve
    ATTR:  equivalent_point,	TYPE: cartesian_point -- EXPLICIT


  SUB- ENTITY(5)	degenerate_pcurve
    ATTR:  basis_surface,	TYPE: surface -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  reference_to_curve,	TYPE: definitional_representation -- EXPLICIT


  SUB- ENTITY(6)	point_on_face_surface
    ATTR:  basis_face_surface,	TYPE: face_surface -- EXPLICIT

    REDCR: basis_surface,	TYPE: surface -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := SELF.basis_face_surface.face_geometry
      -- OVERRIDING ENTITY: point_on_surface


  SUB- ENTITY(7)	point_on_surface
    ATTR:  basis_surface,	TYPE: surface -- EXPLICIT (DYNAMIC)	(AMBIGUOUS/MASKED)
      -- possibly overriden by
          ENTITY: point_on_face_surface,	TYPE: surface	(as DERIVED)

    ATTR:  point_parameter_u,	TYPE: parameter_value -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  point_parameter_v,	TYPE: parameter_value -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(8)	spherical_point
    ATTR:  r,	TYPE: length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  theta,	TYPE: plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  phi,	TYPE: plane_angle_measure -- EXPLICIT

    REDCR: coordinates,	TYPE: LIST [3 : 3] OF length_measure -- DERIVED (DYNAMIC)
      := [r * SIN( theta ) * COS( phi ), r * SIN( theta ) * SIN( phi ), r * COS( theta )]
      -- OVERRIDING ENTITY: cartesian_point


  SUB- ENTITY(9)	cylindrical_point
    ATTR:  r,	TYPE: length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  theta,	TYPE: plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  z,	TYPE: length_measure -- EXPLICIT

    REDCR: coordinates,	TYPE: LIST [3 : 3] OF length_measure -- DERIVED (DYNAMIC)
      := [r * COS( theta ), r * SIN( theta ), z]
      -- OVERRIDING ENTITY: cartesian_point


  SUB- ENTITY(10)	polar_point
    ATTR:  r,	TYPE: length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  theta,	TYPE: plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    REDCR: coordinates,	TYPE: LIST [2 : 2] OF length_measure -- DERIVED (DYNAMIC)
      := [r * COS( theta ), r * SIN( theta )]
      -- OVERRIDING ENTITY: cartesian_point


  SUB- ENTITY(11)	cartesian_point
    ATTR:  coordinates,	TYPE: LIST [1 : 3] OF length_measure -- EXPLICIT (DYNAMIC)
      -- possibly overriden by
          ENTITY: spherical_point,	TYPE: LIST [3 : 3] OF length_measure	(as DERIVED)
          ENTITY: cylindrical_point,	TYPE: LIST [3 : 3] OF length_measure	(as DERIVED)
          ENTITY: polar_point,	TYPE: LIST [2 : 2] OF length_measure	(as DERIVED)


  SUB- ENTITY(12)	point_in_volume
    ATTR:  basis_volume,	TYPE: volume -- EXPLICIT

    ATTR:  point_parameter_u,	TYPE: parameter_value -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  point_parameter_v,	TYPE: parameter_value -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  point_parameter_w,	TYPE: parameter_value -- EXPLICIT


  SUB- ENTITY(13)	implicit_planar_projection_point
    ATTR:  external_point,	TYPE: point -- EXPLICIT

    ATTR:  projection_direction,	TYPE: direction -- EXPLICIT


  SUB- ENTITY(14)	implicit_planar_intersection_point
    ATTR:  external_curve,	TYPE: curve -- EXPLICIT


  SUB- ENTITY(15)	implicit_point_on_plane
    ATTR:  using_sketch,	TYPE: positioned_sketch -- EXPLICIT

    ATTR:  computed_representation,	TYPE: cartesian_point -- EXPLICIT

    ATTR:  plane_of_point,	TYPE: plane -- DERIVED
      := get_plane_of_implicit_geometry( using_sketch )


  SUB- ENTITY(16)	point_on_edge_curve
    ATTR:  basis_edge_curve,	TYPE: edge_curve -- EXPLICIT

    REDCR: basis_curve,	TYPE: curve -- DERIVED (DYNAMIC)
      := SELF.basis_edge_curve.edge_geometry
      -- OVERRIDING ENTITY: point_on_curve


  SUB- ENTITY(17)	point_on_curve
    ATTR:  basis_curve,	TYPE: curve -- EXPLICIT (DYNAMIC)
      -- possibly overriden by
          ENTITY: point_on_edge_curve,	TYPE: curve	(as DERIVED)

    ATTR:  point_parameter,	TYPE: parameter_value -- EXPLICIT


  SUB- ENTITY(18)	point_replica
    ATTR:  parent_pt,	TYPE: point -- EXPLICIT

    ATTR:  transformation,	TYPE: cartesian_transformation_operator -- EXPLICIT


*/


//MARK: - Partial Entity
  public final class _point : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      ePOINT.self
    }

    //ATTRIBUTES
    // (no local attributes)

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      //SELECT data types (indirectly) referencing the current type as a member of the select list
      members.insert(SDAI.STRING(sSKETCH_ELEMENT_SELECT.typeName)) // -> Self
      members.insert(SDAI.STRING(sINSPECTED_ECDQ_ELEMENT_SELECT.typeName)) // -> Self
      members.insert(SDAI.STRING(sLOCATION_OF_EXTREME_VALUE_SELECT.typeName)) // -> sINSPECTED_ECDQ_ELEMENT_SELECT
      members.insert(SDAI.STRING(sPOINT_AND_VECTOR_MEMBER.typeName)) // -> Self
      members.insert(SDAI.STRING(sGEOMETRIC_SET_SELECT.typeName)) // -> Self
      members.insert(SDAI.STRING(sKINEMATIC_LINK_REPRESENTATION_ITEMS.typeName)) // -> Self
      members.insert(SDAI.STRING(sAXIAL_GEOMETRY_CONSTRAINT_ELEMENT.typeName)) // -> Self
      members.insert(SDAI.STRING(sGEOMETRIC_CONSTRAINT_ELEMENT.typeName)) // -> Self
      members.insert(SDAI.STRING(sINSPECTED_SHAPE_ELEMENT_SELECT.typeName)) // -> Self
      members.insert(SDAI.STRING(sINSPECTED_ELEMENT_SELECT.typeName)) // -> Self
      members.insert(SDAI.STRING(sPOINT_CURVE_OR_SURFACE_CONSTRAINT_ELEMENT.typeName)) // -> Self
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init() {
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 0
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      self.init( )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY point
    SUPERTYPE OF ( 
        ONEOF ( 
            cartesian_point, 
            point_on_curve, 
            point_on_surface, 
            point_in_volume, 
            point_replica, 
            degenerate_pcurve ) )
    SUBTYPE OF ( geometric_representation_item );
  END_ENTITY; -- point (line:25135 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class ePOINT : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _point.self
    }
    public let partialEntity: _point

    //MARK: SUPERTYPES
    public let super_eREPRESENTATION_ITEM: eREPRESENTATION_ITEM 	// [1]
    public let super_eGEOMETRIC_REPRESENTATION_ITEM: eGEOMETRIC_REPRESENTATION_ITEM 	// [2]
    public var super_ePOINT: ePOINT { return self } 	// [3]

    //MARK: SUBTYPES
    public var sub_eEVALUATED_DEGENERATE_PCURVE: eEVALUATED_DEGENERATE_PCURVE? {	// [4]
      return self.complexEntity.entityReference(eEVALUATED_DEGENERATE_PCURVE.self)
    }

    public var sub_eDEGENERATE_PCURVE: eDEGENERATE_PCURVE? {	// [5]
      return self.complexEntity.entityReference(eDEGENERATE_PCURVE.self)
    }

    public var sub_ePOINT_ON_FACE_SURFACE: ePOINT_ON_FACE_SURFACE? {	// [6]
      return self.complexEntity.entityReference(ePOINT_ON_FACE_SURFACE.self)
    }

    public var sub_ePOINT_ON_SURFACE: ePOINT_ON_SURFACE? {	// [7]
      return self.complexEntity.entityReference(ePOINT_ON_SURFACE.self)
    }

    public var sub_eSPHERICAL_POINT: eSPHERICAL_POINT? {	// [8]
      return self.complexEntity.entityReference(eSPHERICAL_POINT.self)
    }

    public var sub_eCYLINDRICAL_POINT: eCYLINDRICAL_POINT? {	// [9]
      return self.complexEntity.entityReference(eCYLINDRICAL_POINT.self)
    }

    public var sub_ePOLAR_POINT: ePOLAR_POINT? {	// [10]
      return self.complexEntity.entityReference(ePOLAR_POINT.self)
    }

    public var sub_eCARTESIAN_POINT: eCARTESIAN_POINT? {	// [11]
      return self.complexEntity.entityReference(eCARTESIAN_POINT.self)
    }

    public var sub_ePOINT_IN_VOLUME: ePOINT_IN_VOLUME? {	// [12]
      return self.complexEntity.entityReference(ePOINT_IN_VOLUME.self)
    }

    public var sub_eIMPLICIT_PLANAR_PROJECTION_POINT: eIMPLICIT_PLANAR_PROJECTION_POINT? {	// [13]
      return self.complexEntity.entityReference(eIMPLICIT_PLANAR_PROJECTION_POINT.self)
    }

    public var sub_eIMPLICIT_PLANAR_INTERSECTION_POINT: eIMPLICIT_PLANAR_INTERSECTION_POINT? {	// [14]
      return self.complexEntity.entityReference(eIMPLICIT_PLANAR_INTERSECTION_POINT.self)
    }

    public var sub_eIMPLICIT_POINT_ON_PLANE: eIMPLICIT_POINT_ON_PLANE? {	// [15]
      return self.complexEntity.entityReference(eIMPLICIT_POINT_ON_PLANE.self)
    }

    public var sub_ePOINT_ON_EDGE_CURVE: ePOINT_ON_EDGE_CURVE? {	// [16]
      return self.complexEntity.entityReference(ePOINT_ON_EDGE_CURVE.self)
    }

    public var sub_ePOINT_ON_CURVE: ePOINT_ON_CURVE? {	// [17]
      return self.complexEntity.entityReference(ePOINT_ON_CURVE.self)
    }

    public var sub_ePOINT_REPLICA: ePOINT_REPLICA? {	// [18]
      return self.complexEntity.entityReference(ePOINT_REPLICA.self)
    }


    //MARK: ATTRIBUTES
    // R: (3 AMBIGUOUS REFs)

    // BASIS_SURFACE: (3 AMBIGUOUS REFs)

    // POINT_PARAMETER_U: (2 AMBIGUOUS REFs)

    // POINT_PARAMETER_V: (2 AMBIGUOUS REFs)

    // THETA: (3 AMBIGUOUS REFs)

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eDEGENERATE_PCURVE`` )
    public var REFERENCE_TO_CURVE: eDEFINITIONAL_REPRESENTATION?  {
      get {
        return sub_eDEGENERATE_PCURVE?.partialEntity._reference_to_curve
      }
      set(newValue) {
        guard let partial = sub_eDEGENERATE_PCURVE?.super_eDEGENERATE_PCURVE.partialEntity else { return }
        partial._reference_to_curve = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePOINT_REPLICA`` )
    public var PARENT_PT: ePOINT?  {
      get {
        return sub_ePOINT_REPLICA?.partialEntity._parent_pt
      }
      set(newValue) {
        guard let partial = sub_ePOINT_REPLICA?.super_ePOINT_REPLICA.partialEntity else { return }
        partial._parent_pt = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT(DYNAMIC)__ attribute
    /// - origin: SUB( ``ePOINT_ON_CURVE`` )
    public var BASIS_CURVE: eCURVE?  {
      get {
        if let resolved = _point_on_curve._basis_curve__provider(complex: self.complexEntity) {
          let value = resolved._basis_curve__getter(complex: self.complexEntity)
          return value
        }
        else {
          return sub_ePOINT_ON_CURVE?.partialEntity._basis_curve
        }
      }
      set(newValue) {
        if let _ = _point_on_curve._basis_curve__provider(complex: self.complexEntity) { return }

        guard let partial = sub_ePOINT_ON_CURVE?.super_ePOINT_ON_CURVE.partialEntity else { return }
        partial._basis_curve = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eIMPLICIT_PLANAR_PROJECTION_POINT`` )
    public var EXTERNAL_POINT: ePOINT?  {
      get {
        return sub_eIMPLICIT_PLANAR_PROJECTION_POINT?.partialEntity._external_point
      }
      set(newValue) {
        guard let partial = sub_eIMPLICIT_PLANAR_PROJECTION_POINT?.super_eIMPLICIT_PLANAR_PROJECTION_POINT
          .partialEntity else { return }
        partial._external_point = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePOINT_IN_VOLUME`` )
    public var BASIS_VOLUME: eVOLUME?  {
      get {
        return sub_ePOINT_IN_VOLUME?.partialEntity._basis_volume
      }
      set(newValue) {
        guard let partial = sub_ePOINT_IN_VOLUME?.super_ePOINT_IN_VOLUME.partialEntity else { return }
        partial._basis_volume = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT(DYNAMIC)__ attribute
    /// - origin: SUB( ``eCARTESIAN_POINT`` )
    public var COORDINATES: (SDAI.LIST<tLENGTH_MEASURE>/*[1:3]*/ )?  {
      get {
        if let resolved = _cartesian_point._coordinates__provider(complex: self.complexEntity) {
          let value = resolved._coordinates__getter(complex: self.complexEntity)
          return value
        }
        else {
          return sub_eCARTESIAN_POINT?.partialEntity._coordinates
        }
      }
      set(newValue) {
        if let _ = _cartesian_point._coordinates__provider(complex: self.complexEntity) { return }

        guard let partial = sub_eCARTESIAN_POINT?.super_eCARTESIAN_POINT.partialEntity else { return }
        partial._coordinates = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCYLINDRICAL_POINT`` )
    public var Z: tLENGTH_MEASURE?  {
      get {
        return sub_eCYLINDRICAL_POINT?.partialEntity._z
      }
      set(newValue) {
        guard let partial = sub_eCYLINDRICAL_POINT?.super_eCYLINDRICAL_POINT.partialEntity else { return }
        partial._z = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eIMPLICIT_POINT_ON_PLANE`` )
    public var USING_SKETCH: ePOSITIONED_SKETCH?  {
      get {
        return sub_eIMPLICIT_POINT_ON_PLANE?.partialEntity._using_sketch
      }
      set(newValue) {
        guard let partial = sub_eIMPLICIT_POINT_ON_PLANE?.super_eIMPLICIT_POINT_ON_PLANE.partialEntity
          else { return }
        partial._using_sketch = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eIMPLICIT_POINT_ON_PLANE`` )
    public var PLANE_OF_POINT: ePLANE?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"PLANE_OF_POINT") {
          return cached.value as! ePLANE? 
        }
        guard let origin = sub_eIMPLICIT_POINT_ON_PLANE else { return nil }
        let value = ePLANE(origin.partialEntity._plane_of_point__getter(SELF: origin))
        updateCache(derivedAttributeName:"PLANE_OF_POINT", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eEVALUATED_DEGENERATE_PCURVE`` )
    public var EQUIVALENT_POINT: eCARTESIAN_POINT?  {
      get {
        return sub_eEVALUATED_DEGENERATE_PCURVE?.partialEntity._equivalent_point
      }
      set(newValue) {
        guard let partial = sub_eEVALUATED_DEGENERATE_PCURVE?.super_eEVALUATED_DEGENERATE_PCURVE
          .partialEntity else { return }
        partial._equivalent_point = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSPHERICAL_POINT`` )
    public var PHI: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eSPHERICAL_POINT?.partialEntity._phi
      }
      set(newValue) {
        guard let partial = sub_eSPHERICAL_POINT?.super_eSPHERICAL_POINT.partialEntity else { return }
        partial._phi = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePOINT_REPLICA`` )
    public var TRANSFORMATION: eCARTESIAN_TRANSFORMATION_OPERATOR?  {
      get {
        return sub_ePOINT_REPLICA?.partialEntity._transformation
      }
      set(newValue) {
        guard let partial = sub_ePOINT_REPLICA?.super_ePOINT_REPLICA.partialEntity else { return }
        partial._transformation = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePOINT_ON_CURVE`` )
    public var POINT_PARAMETER: tPARAMETER_VALUE?  {
      get {
        return sub_ePOINT_ON_CURVE?.partialEntity._point_parameter
      }
      set(newValue) {
        guard let partial = sub_ePOINT_ON_CURVE?.super_ePOINT_ON_CURVE.partialEntity else { return }
        partial._point_parameter = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePOINT_ON_EDGE_CURVE`` )
    public var BASIS_EDGE_CURVE: eEDGE_CURVE?  {
      get {
        return sub_ePOINT_ON_EDGE_CURVE?.partialEntity._basis_edge_curve
      }
      set(newValue) {
        guard let partial = sub_ePOINT_ON_EDGE_CURVE?.super_ePOINT_ON_EDGE_CURVE.partialEntity
          else { return }
        partial._basis_edge_curve = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eIMPLICIT_POINT_ON_PLANE`` )
    public var COMPUTED_REPRESENTATION: eCARTESIAN_POINT?  {
      get {
        return sub_eIMPLICIT_POINT_ON_PLANE?.partialEntity._computed_representation
      }
      set(newValue) {
        guard let partial = sub_eIMPLICIT_POINT_ON_PLANE?.super_eIMPLICIT_POINT_ON_PLANE.partialEntity
          else { return }
        partial._computed_representation = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePOINT_IN_VOLUME`` )
    public var POINT_PARAMETER_W: tPARAMETER_VALUE?  {
      get {
        return sub_ePOINT_IN_VOLUME?.partialEntity._point_parameter_w
      }
      set(newValue) {
        guard let partial = sub_ePOINT_IN_VOLUME?.super_ePOINT_IN_VOLUME.partialEntity else { return }
        partial._point_parameter_w = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eIMPLICIT_PLANAR_INTERSECTION_POINT`` )
    public var EXTERNAL_CURVE: eCURVE?  {
      get {
        return sub_eIMPLICIT_PLANAR_INTERSECTION_POINT?.partialEntity._external_curve
      }
      set(newValue) {
        guard let partial = sub_eIMPLICIT_PLANAR_INTERSECTION_POINT?.super_eIMPLICIT_PLANAR_INTERSECTION_POINT
          .partialEntity else { return }
        partial._external_curve = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eIMPLICIT_PLANAR_PROJECTION_POINT`` )
    public var PROJECTION_DIRECTION: eDIRECTION?  {
      get {
        return sub_eIMPLICIT_PLANAR_PROJECTION_POINT?.partialEntity._projection_direction
      }
      set(newValue) {
        guard let partial = sub_eIMPLICIT_PLANAR_PROJECTION_POINT?.super_eIMPLICIT_PLANAR_PROJECTION_POINT
          .partialEntity else { return }
        partial._projection_direction = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePOINT_ON_FACE_SURFACE`` )
    public var BASIS_FACE_SURFACE: eFACE_SURFACE?  {
      get {
        return sub_ePOINT_ON_FACE_SURFACE?.partialEntity._basis_face_surface
      }
      set(newValue) {
        guard let partial = sub_ePOINT_ON_FACE_SURFACE?.super_ePOINT_ON_FACE_SURFACE.partialEntity
          else { return }
        partial._basis_face_surface = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eREPRESENTATION_ITEM`` )
    public var NAME: tLABEL {
      get {
        return SDAI.UNWRAP( super_eREPRESENTATION_ITEM.partialEntity._name )
      }
      set(newValue) {
        let partial = super_eREPRESENTATION_ITEM.partialEntity
        partial._name = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUPER( ``eGEOMETRIC_REPRESENTATION_ITEM`` )
    public var DIM: tDIMENSION_COUNT?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"DIM") {
          return cached.value as! tDIMENSION_COUNT? 
        }
        let origin = super_eGEOMETRIC_REPRESENTATION_ITEM
        let value = tDIMENSION_COUNT(origin.partialEntity._dim__getter(SELF: origin))
        updateCache(derivedAttributeName:"DIM", value:value)
        return value
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_point.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eREPRESENTATION_ITEM.self) else { return nil }
      self.super_eREPRESENTATION_ITEM = super1

      guard let super2 = complexEntity?.entityReference(eGEOMETRIC_REPRESENTATION_ITEM.self) else { return nil }
      self.super_eGEOMETRIC_REPRESENTATION_ITEM = super2

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "POINT", type: self, explicitAttributeCount: 0)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eREPRESENTATION_ITEM.self)
      entityDef.add(supertype: eGEOMETRIC_REPRESENTATION_ITEM.self)
      entityDef.add(supertype: ePOINT.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "REFERENCE_TO_CURVE", keyPath: \ePOINT.REFERENCE_TO_CURVE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "PARENT_PT", keyPath: \ePOINT.PARENT_PT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "BASIS_CURVE", keyPath: \ePOINT.BASIS_CURVE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "EXTERNAL_POINT", keyPath: \ePOINT.EXTERNAL_POINT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "BASIS_VOLUME", keyPath: \ePOINT.BASIS_VOLUME, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "COORDINATES", keyPath: \ePOINT.COORDINATES, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "Z", keyPath: \ePOINT.Z, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "USING_SKETCH", keyPath: \ePOINT.USING_SKETCH, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "PLANE_OF_POINT", keyPath: \ePOINT.PLANE_OF_POINT, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "EQUIVALENT_POINT", keyPath: \ePOINT.EQUIVALENT_POINT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "PHI", keyPath: \ePOINT.PHI, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "TRANSFORMATION", keyPath: \ePOINT.TRANSFORMATION, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "POINT_PARAMETER", keyPath: \ePOINT.POINT_PARAMETER, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "BASIS_EDGE_CURVE", keyPath: \ePOINT.BASIS_EDGE_CURVE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "COMPUTED_REPRESENTATION", keyPath: \ePOINT.COMPUTED_REPRESENTATION, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "POINT_PARAMETER_W", keyPath: \ePOINT.POINT_PARAMETER_W, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "EXTERNAL_CURVE", keyPath: \ePOINT.EXTERNAL_CURVE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "PROJECTION_DIRECTION", keyPath: \ePOINT.PROJECTION_DIRECTION, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "BASIS_FACE_SURFACE", keyPath: \ePOINT.BASIS_FACE_SURFACE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "NAME", keyPath: \ePOINT.NAME, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "DIM", keyPath: \ePOINT.DIM, 
        kind: .derived, source: .superEntity, mayYieldEntityReference: false)

      return entityDef
    }

  }
}
