/* file: product_definition_specified_occurrence.swift 	 generated: Sat Aug 14 13:46:02 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY product_definition_specified_occurrence
    SUBTYPE OF ( product_definition_occurrence );
      SELF\product_definition_occurrence.definition : product_definition_occurrence_or_reference;
      occurrence_usage                : product_definition_occurrence_or_reference; (* observed by
          product_definition_occurrence.child_occurrences
          *)
    UNIQUE
      ur1 : occurrence_usage, id;
    WHERE
      wr1: ( SIZEOF( assembly_usages ) = 0 );
      wr2: acyclic_product_definition_specified_occurrence( SELF, SELF\product_definition_occurrence.
               definition );
  END_ENTITY; -- product_definition_specified_occurrence (line:26219 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	product_definition_occurrence
    ATTR:  id,	TYPE: identifier -- EXPLICIT

    ATTR:  name,	TYPE: OPTIONAL label -- EXPLICIT

    ATTR:  description,	TYPE: OPTIONAL text -- EXPLICIT

    ATTR:  definition,	TYPE: OPTIONAL product_definition_or_reference_or_occurrence -- EXPLICIT
      -- possibly overriden by
      *** ENTITY: product_definition_specified_occurrence,	TYPE: product_definition_occurrence_or_reference

    ATTR:  quantity,	TYPE: OPTIONAL measure_with_unit -- EXPLICIT

    ATTR:  descendant_occurrences,	TYPE: SET [0 : ?] OF product_definition_specified_occurrence -- DERIVED
      := get_descendant_occurrences( SELF )

    ATTR:  assembly_usages,	TYPE: SET [0 : ?] OF assembly_component_usage -- INVERSE
      FOR related_product_definition;

    ATTR:  child_occurrences,	TYPE: SET [0 : ?] OF product_definition_specified_occurrence -- INVERSE
      FOR occurrence_usage;


  ENTITY(SELF)	product_definition_specified_occurrence
    REDCR: definition,	TYPE: product_definition_occurrence_or_reference -- EXPLICIT
      -- OVERRIDING ENTITY: product_definition_occurrence

    ATTR:  occurrence_usage,	TYPE: product_definition_occurrence_or_reference -- EXPLICIT
      -- observed by
        ENTITY(1): product_definition_occurrence,	ATTR: child_occurrences,	TYPE: SET [0 : ?] OF
          product_definition_specified_occurrence


*/


//MARK: - Partial Entity
  public final class _product_definition_specified_occurrence : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      ePRODUCT_DEFINITION_SPECIFIED_OCCURRENCE.self
    }

    //ATTRIBUTES
    /* override var _definition: sPRODUCT_DEFINITION_OCCURRENCE_OR_REFERENCE	//EXPLICIT REDEFINITION(ePRODUCT_DEFINITION_OCCURRENCE) */

    /// EXPLICIT ATTRIBUTE (OBSERVED)
    public internal(set) var _occurrence_usage: sPRODUCT_DEFINITION_OCCURRENCE_OR_REFERENCE{ // OBSERVED EXPLICIT ATTRIBUTE
      get {
        return __occurrence_usage.copy()
      } // getter
      set {
        var newValue = newValue
        let observer = SDAI.EntityReferenceObserver(referencer: self, observerCode: _occurrence_usage__observer.self)
        newValue.configure(with: observer)
        observer.observe(removing: SDAI.UNWRAP(seq:__occurrence_usage.entityReferences),
          adding: SDAI.UNWRAP(seq: newValue.entityReferences) )
      } // setter
    }

    /// backing storage for observed attribute
    private var __occurrence_usage: sPRODUCT_DEFINITION_OCCURRENCE_OR_REFERENCE

    /// attribute observer code
    internal class _occurrence_usage__observer: SDAI.EntityReferenceObserver.ObserverCode {
      final override class func observe<RemovingEntities: Sequence, AddingEntities: Sequence>(
        referencer: SDAI.PartialEntity, removing: RemovingEntities, adding: AddingEntities )
        where RemovingEntities.Element: SDAI.EntityReference, AddingEntities.Element: SDAI.EntityReference
      {
        for referencedComplex in removing.map({ $0.complexEntity }) {
          for referencerOwner in referencer.owners {
            //OBSERVING ENTITY: ePRODUCT_DEFINITION_OCCURRENCE
            referencedComplex.partialEntityInstance(_product_definition_occurrence.self)?
              ._child_occurrences__observeRemovedReference(in: referencerOwner)
          }
        }

        for referencedComplex in adding.map({ $0.complexEntity }) {
          for referencerOwner in referencer.owners {
            //OBSERVING ENTITY: ePRODUCT_DEFINITION_OCCURRENCE
            referencedComplex.partialEntityInstance(_product_definition_occurrence.self)?
              ._child_occurrences__observeAddedReference(in: referencerOwner)
          }
        }
      }

      final override class func observe(newReferencerOwner referencerOwner: SDAI.ComplexEntity) {
        guard let attrValue = referencerOwner.partialEntityInstance(_product_definition_specified_occurrence.self)?._occurrence_usage else { return }
        for referencedComplex in attrValue.entityReferences.map({ $0.complexEntity }) {
        //OBSERVING ENTITY: ePRODUCT_DEFINITION_OCCURRENCE
        referencedComplex.partialEntityInstance(_product_definition_occurrence.self)?
          ._child_occurrences__observeAddedReference(in: referencerOwner)
        }
      }

      final override class func observe(leavingReferencerOwner referencerOwner: SDAI.ComplexEntity) {
        guard let attrValue = referencerOwner.partialEntityInstance(_product_definition_specified_occurrence.self)?._occurrence_usage else { return }
        for referencedComplex in attrValue.entityReferences.map({ $0.complexEntity }) {
        //OBSERVING ENTITY: ePRODUCT_DEFINITION_OCCURRENCE
        referencedComplex.partialEntityInstance(_product_definition_occurrence.self)?
          ._child_occurrences__observe(leavingReferencerOwner: referencerOwner)
        }
      }

    }

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._occurrence_usage.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._occurrence_usage.value.isValueEqualOptionally(to: rhs._occurrence_usage.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._occurrence_usage.value.isValueEqualOptionally(to: rhs._occurrence_usage.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: ePRODUCT_DEFINITION_SPECIFIED_OCCURRENCE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.SIZEOF(SELF.ASSEMBLY_USAGES)
      let _TEMP2 = _TEMP1 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      return _TEMP2
    }
    public static func WHERE_wr2(SELF: ePRODUCT_DEFINITION_SPECIFIED_OCCURRENCE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.GROUP_REF(ePRODUCT_DEFINITION_OCCURRENCE.self)
      let _TEMP2 = _TEMP1?.DEFINITION
      let _TEMP3 = ACYCLIC_PRODUCT_DEFINITION_SPECIFIED_OCCURRENCE(
        PDSO: SELF, DEFINITION: ePRODUCT_DEFINITION_OCCURRENCE(/*
        sPRODUCT_DEFINITION_OR_REFERENCE_OR_OCCURRENCE*/_TEMP2))
      return SDAI.LOGICAL(/*SDAI.BOOLEAN*/_TEMP3)
    }

    //UNIQUENESS RULES
    public static func UNIQUE_ur1(SELF: SDAI.EntityReference) -> AnyHashable? {
      guard let SELF = SELF as? ePRODUCT_DEFINITION_SPECIFIED_OCCURRENCE else { return nil }
      //JOINT UNIQUE RULE

      var attributes: Array<AnyHashable> = []

      let attr1 = SELF.OCCURRENCE_USAGE
      attributes.append( AnyHashable(attr1) )
      let attr2 = SELF.ID
      attributes.append( AnyHashable(attr2) )

      return AnyHashable( attributes )
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(OCCURRENCE_USAGE: sPRODUCT_DEFINITION_OCCURRENCE_OR_REFERENCE) {
      self.__occurrence_usage = OCCURRENCE_USAGE
      super.init(asAbstructSuperclass:())

      self._occurrence_usage.configure(with: SDAI.EntityReferenceObserver(referencer: self, observerCode: _occurrence_usage__observer.self))
    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 1
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverRequiredParameter(as: 
        sPRODUCT_DEFINITION_OCCURRENCE_OR_REFERENCE.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( OCCURRENCE_USAGE: p0 )
    }

    /// broadcasting a new complex entity becoming an owner of the partial entity
    final public override func broadcast(addedToComplex complex: SDAI.ComplexEntity) {
      _occurrence_usage__observer.observe(newReferencerOwner: complex)
    }

    /// broadcasting a complex entity withdrawing an owner of the partial entity
    final public override func broadcast(removedFromComplex complex: SDAI.ComplexEntity) {
      _occurrence_usage__observer.observe(leavingReferencerOwner: complex)
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY product_definition_specified_occurrence
    SUBTYPE OF ( product_definition_occurrence );
      SELF\product_definition_occurrence.definition : product_definition_occurrence_or_reference;
      occurrence_usage                : product_definition_occurrence_or_reference; (* observed by
          product_definition_occurrence.child_occurrences
          *)
    UNIQUE
      ur1 : occurrence_usage, id;
    WHERE
      wr1: ( SIZEOF( assembly_usages ) = 0 );
      wr2: acyclic_product_definition_specified_occurrence( SELF, SELF\product_definition_occurrence.
               definition );
  END_ENTITY; -- product_definition_specified_occurrence (line:26219 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class ePRODUCT_DEFINITION_SPECIFIED_OCCURRENCE : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _product_definition_specified_occurrence.self
    }
    public let partialEntity: _product_definition_specified_occurrence

    //MARK: SUPERTYPES
    public let super_ePRODUCT_DEFINITION_OCCURRENCE: ePRODUCT_DEFINITION_OCCURRENCE 	// [1]
    public var super_ePRODUCT_DEFINITION_SPECIFIED_OCCURRENCE: ePRODUCT_DEFINITION_SPECIFIED_OCCURRENCE { return self } 	// [2]

    //MARK: SUBTYPES

    //MARK: ATTRIBUTES
    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``ePRODUCT_DEFINITION_OCCURRENCE`` )
    public var DESCRIPTION: tTEXT?  {
      get {
        return super_ePRODUCT_DEFINITION_OCCURRENCE.partialEntity._description
      }
      set(newValue) {
        let partial = super_ePRODUCT_DEFINITION_OCCURRENCE.partialEntity
        partial._description = newValue
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUPER( ``ePRODUCT_DEFINITION_OCCURRENCE`` )
    public var DESCENDANT_OCCURRENCES: (SDAI.SET<ePRODUCT_DEFINITION_SPECIFIED_OCCURRENCE>/*[0:nil]*/ )?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"DESCENDANT_OCCURRENCES") {
          return cached.value as! (SDAI.SET<ePRODUCT_DEFINITION_SPECIFIED_OCCURRENCE>/*[0:nil]*/ )? 
        }
        let origin = super_ePRODUCT_DEFINITION_OCCURRENCE
        let value = SDAI.SET<ePRODUCT_DEFINITION_SPECIFIED_OCCURRENCE>(
          origin.partialEntity._descendant_occurrences__getter(SELF: origin))
        updateCache(derivedAttributeName:"DESCENDANT_OCCURRENCES", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``ePRODUCT_DEFINITION_OCCURRENCE`` )
    public var QUANTITY: eMEASURE_WITH_UNIT?  {
      get {
        return super_ePRODUCT_DEFINITION_OCCURRENCE.partialEntity._quantity
      }
      set(newValue) {
        let partial = super_ePRODUCT_DEFINITION_OCCURRENCE.partialEntity
        partial._quantity = newValue
      }
    }

    /// __EXPLICIT(OBSERVED)__ attribute
    /// - origin: SELF( ``ePRODUCT_DEFINITION_SPECIFIED_OCCURRENCE`` )
    public var OCCURRENCE_USAGE: sPRODUCT_DEFINITION_OCCURRENCE_OR_REFERENCE {
      get {
        return SDAI.UNWRAP( self.partialEntity._occurrence_usage )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._occurrence_usage = SDAI.UNWRAP(newValue)
      }
    }

    /// __INVERSE__ attribute
    /// observing ePRODUCT_DEFINITION_SPECIFIED_OCCURRENCE .OCCURRENCE_USAGE
    /// - origin: SUPER( ``ePRODUCT_DEFINITION_OCCURRENCE`` )
    public var CHILD_OCCURRENCES: SDAI.SET<ePRODUCT_DEFINITION_SPECIFIED_OCCURRENCE>/*[0:nil]*/  {
      get {
        return SDAI.UNWRAP( super_ePRODUCT_DEFINITION_OCCURRENCE.partialEntity._child_occurrences )
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``ePRODUCT_DEFINITION_OCCURRENCE`` )
    public var ID: tIDENTIFIER {
      get {
        return SDAI.UNWRAP( super_ePRODUCT_DEFINITION_OCCURRENCE.partialEntity._id )
      }
      set(newValue) {
        let partial = super_ePRODUCT_DEFINITION_OCCURRENCE.partialEntity
        partial._id = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT REDEF__ attribute
    /// - origin: SELF( ``ePRODUCT_DEFINITION_SPECIFIED_OCCURRENCE`` )
    public var DEFINITION: sPRODUCT_DEFINITION_OCCURRENCE_OR_REFERENCE {
      get {
        return SDAI.UNWRAP( sPRODUCT_DEFINITION_OCCURRENCE_OR_REFERENCE( super_ePRODUCT_DEFINITION_OCCURRENCE
          .partialEntity._definition ) )
      }
      set(newValue) {
        let partial = super_ePRODUCT_DEFINITION_OCCURRENCE.partialEntity
        partial._definition = SDAI.UNWRAP(
          sPRODUCT_DEFINITION_OR_REFERENCE_OR_OCCURRENCE(newValue))
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``ePRODUCT_DEFINITION_OCCURRENCE`` )
    public var NAME: tLABEL?  {
      get {
        return super_ePRODUCT_DEFINITION_OCCURRENCE.partialEntity._name
      }
      set(newValue) {
        let partial = super_ePRODUCT_DEFINITION_OCCURRENCE.partialEntity
        partial._name = newValue
      }
    }

    /// __INVERSE__ attribute
    /// observing ePRODUCT_DEFINITION_RELATIONSHIP .RELATED_PRODUCT_DEFINITION
    /// - origin: SUPER( ``ePRODUCT_DEFINITION_OCCURRENCE`` )
    public var ASSEMBLY_USAGES: SDAI.SET<eASSEMBLY_COMPONENT_USAGE>/*[0:nil]*/  {
      get {
        return SDAI.UNWRAP( super_ePRODUCT_DEFINITION_OCCURRENCE.partialEntity._assembly_usages )
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_product_definition_specified_occurrence.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(ePRODUCT_DEFINITION_OCCURRENCE.self) else { return nil }
      self.super_ePRODUCT_DEFINITION_OCCURRENCE = super1

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _product_definition_specified_occurrence.WHERE_wr1(SELF: instance)
      result[prefix2 + " .WHERE_wr2"] = _product_definition_specified_occurrence.WHERE_wr2(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "PRODUCT_DEFINITION_SPECIFIED_OCCURRENCE", type: self, explicitAttributeCount: 1)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: ePRODUCT_DEFINITION_OCCURRENCE.self)
      entityDef.add(supertype: ePRODUCT_DEFINITION_SPECIFIED_OCCURRENCE.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "DESCRIPTION", keyPath: \ePRODUCT_DEFINITION_SPECIFIED_OCCURRENCE.DESCRIPTION, 
        kind: .explicitOptional, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "DESCENDANT_OCCURRENCES", keyPath: \ePRODUCT_DEFINITION_SPECIFIED_OCCURRENCE.DESCENDANT_OCCURRENCES, 
        kind: .derived, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "QUANTITY", keyPath: \ePRODUCT_DEFINITION_SPECIFIED_OCCURRENCE.QUANTITY, 
        kind: .explicitOptional, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "OCCURRENCE_USAGE", keyPath: \ePRODUCT_DEFINITION_SPECIFIED_OCCURRENCE.OCCURRENCE_USAGE, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "CHILD_OCCURRENCES", keyPath: \ePRODUCT_DEFINITION_SPECIFIED_OCCURRENCE.CHILD_OCCURRENCES, 
        kind: .inverse, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "ID", keyPath: \ePRODUCT_DEFINITION_SPECIFIED_OCCURRENCE.ID, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "DEFINITION", keyPath: \ePRODUCT_DEFINITION_SPECIFIED_OCCURRENCE.DEFINITION, 
        kind: .explicitRedeclaring, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "NAME", keyPath: \ePRODUCT_DEFINITION_SPECIFIED_OCCURRENCE.NAME, 
        kind: .explicitOptional, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "ASSEMBLY_USAGES", keyPath: \ePRODUCT_DEFINITION_SPECIFIED_OCCURRENCE.ASSEMBLY_USAGES, 
        kind: .inverse, source: .superEntity, mayYieldEntityReference: true)

      //MARK: UNIQUENESS RULE REGISTRATIONS
      entityDef.addUniqunessRule(label:"UNIQUE_ur1", rule: _product_definition_specified_occurrence.UNIQUE_ur1)

      return entityDef
    }

  }
}
