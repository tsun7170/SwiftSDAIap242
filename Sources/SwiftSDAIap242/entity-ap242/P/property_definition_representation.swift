/* file: property_definition_representation.swift 	 generated: Sun Oct 31 15:32:10 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY property_definition_representation;
      definition           : represented_definition;
      used_representation  : representation;
    DERIVE
      description  : text := get_description_value( SELF );
      name         : label := get_name_value( SELF );
    WHERE
      wr1: ( SIZEOF( USEDIN( SELF, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.DESCRIPTION_ATTRIBUTE.'
               + 'DESCRIBED_ITEM'  ) ) <= 1 );
      wr2: ( SIZEOF( USEDIN( SELF, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.NAME_ATTRIBUTE.NAMED_ITEM' ) ) 
               <= 1 );
  END_ENTITY; -- property_definition_representation (line:26605 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  ENTITY(SELF)	property_definition_representation
    ATTR:  definition,	TYPE: represented_definition -- EXPLICIT
      -- possibly overriden by
          ENTITY: shape_definition_representation,	TYPE: property_definition
          ENTITY: kinematic_property_definition_representation,	TYPE: product_definition_kinematics	(OBSERVED)

    ATTR:  used_representation,	TYPE: representation -- EXPLICIT
      -- possibly overriden by
          ENTITY: shape_definition_representation,	TYPE: shape_representation
          ENTITY: kinematic_property_topology_representation,	TYPE: kinematic_topology_representation_select
          ENTITY: kinematic_property_mechanism_representation,	TYPE: mechanism_representation

    ATTR:  description,	TYPE: text -- DERIVED
      := get_description_value( SELF )

    ATTR:  name,	TYPE: label -- DERIVED
      := get_name_value( SELF )


  SUB- ENTITY(2)	material_property_representation
    ATTR:  dependent_environment,	TYPE: data_environment -- EXPLICIT


  SUB- ENTITY(3)	shape_definition_representation
    REDCR: definition,	TYPE: property_definition -- EXPLICIT
      -- OVERRIDING ENTITY: property_definition_representation

    REDCR: used_representation,	TYPE: shape_representation -- EXPLICIT
      -- OVERRIDING ENTITY: property_definition_representation


  SUB- ENTITY(4)	back_chaining_rule_body
    (no local attributes)

  SUB- ENTITY(5)	forward_chaining_rule_premise
    (no local attributes)

  SUB- ENTITY(6)	kinematic_property_topology_representation
    REDCR: used_representation,	TYPE: kinematic_topology_representation_select -- EXPLICIT
      -- OVERRIDING ENTITY: property_definition_representation

    ATTR:  base,	TYPE: kinematic_link -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(7)	kinematic_property_mechanism_representation
    REDCR: used_representation,	TYPE: mechanism_representation -- EXPLICIT
      -- OVERRIDING ENTITY: property_definition_representation

    ATTR:  base,	TYPE: kinematic_link_representation -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(8)	kinematic_property_definition_representation
    REDCR: definition,	TYPE: product_definition_kinematics -- EXPLICIT
      -- observed by
        ENTITY(1): product_definition_kinematics,	ATTR: representation_relation,	TYPE: 
          kinematic_property_definition_representation
      -- OVERRIDING ENTITY: property_definition_representation


  SUB- ENTITY(9)	attribute_assertion
    (no local attributes)

  SUB- ENTITY(10)	row_variable
    (no local attributes)

  SUB- ENTITY(11)	scalar_variable
    (no local attributes)

  SUB- ENTITY(12)	abstract_variable
    (no local attributes)

*/


//MARK: - Partial Entity
  public final class _property_definition_representation : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      ePROPERTY_DEFINITION_REPRESENTATION.self
    }

    //ATTRIBUTES
    /// EXPLICIT ATTRIBUTE (SUBTYPE ATTR OBSERVED)
    public internal(set) var _definition: sREPRESENTED_DEFINITION{ // OBSERVED EXPLICIT ATTRIBUTE
      get {
        return __definition.copy()
      } // getter
      set {
        var newValue = newValue
        let observer = SDAI.EntityReferenceObserver(referencer: self, observerCode: _definition__observer.self)
        newValue.configure(with: observer)
        observer.observe(removing: SDAI.UNWRAP(seq:__definition.entityReferences),
          adding: SDAI.UNWRAP(seq: newValue.entityReferences) )
      } // setter
    }

    /// backing storage for observed attribute
    private var __definition: sREPRESENTED_DEFINITION

    /// attribute observer code
    internal class _definition__observer: SDAI.EntityReferenceObserver.ObserverCode {
      final override class func observe<RemovingEntities: Sequence, AddingEntities: Sequence>(
        referencer: SDAI.PartialEntity, removing: RemovingEntities, adding: AddingEntities )
        where RemovingEntities.Element: SDAI.EntityReference, AddingEntities.Element: SDAI.EntityReference
      {
        for referencedComplex in removing.map({ $0.complexEntity }) {
          for referencerOwner in referencer.owners {
            //OBSERVING ENTITY: ePRODUCT_DEFINITION_KINEMATICS
            referencedComplex.partialEntityInstance(_product_definition_kinematics.self)?
              ._representation_relation__observeRemovedReference(in: referencerOwner)
          }
        }

        for referencedComplex in adding.map({ $0.complexEntity }) {
          for referencerOwner in referencer.owners {
            //OBSERVING ENTITY: ePRODUCT_DEFINITION_KINEMATICS
            referencedComplex.partialEntityInstance(_product_definition_kinematics.self)?
              ._representation_relation__observeAddedReference(in: referencerOwner)
          }
        }
      }

      final override class func observe(newReferencerOwner referencerOwner: SDAI.ComplexEntity) {
        guard let attrValue = referencerOwner.partialEntityInstance(_property_definition_representation.self)?._definition else { return }
        for referencedComplex in attrValue.entityReferences.map({ $0.complexEntity }) {
        //OBSERVING ENTITY: ePRODUCT_DEFINITION_KINEMATICS
        referencedComplex.partialEntityInstance(_product_definition_kinematics.self)?
          ._representation_relation__observeAddedReference(in: referencerOwner)
        }
      }

      final override class func observe(leavingReferencerOwner referencerOwner: SDAI.ComplexEntity) {
        guard let attrValue = referencerOwner.partialEntityInstance(_property_definition_representation.self)?._definition else { return }
        for referencedComplex in attrValue.entityReferences.map({ $0.complexEntity }) {
        //OBSERVING ENTITY: ePRODUCT_DEFINITION_KINEMATICS
        referencedComplex.partialEntityInstance(_product_definition_kinematics.self)?
          ._representation_relation__observe(leavingReferencerOwner: referencerOwner)
        }
      }

    }

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _used_representation: eREPRESENTATION // PLAIN EXPLICIT ATTRIBUTE

    /// DERIVE ATTRIBUTE
    internal func _description__getter(SELF: ePROPERTY_DEFINITION_REPRESENTATION) -> tTEXT?  {

      let _TEMP1 = GET_DESCRIPTION_VALUE(sDESCRIPTION_ATTRIBUTE_SELECT(/*ePROPERTY_DEFINITION_REPRESENTATION*/
        SELF))
      return _TEMP1
    }

    /// DERIVE ATTRIBUTE
    internal func _name__getter(SELF: ePROPERTY_DEFINITION_REPRESENTATION) -> tLABEL?  {

      let _TEMP1 = GET_NAME_VALUE(sNAME_ATTRIBUTE_SELECT(/*ePROPERTY_DEFINITION_REPRESENTATION*/SELF))
      return _TEMP1
    }

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      //SELECT data types (indirectly) referencing the current type as a member of the select list
      members.insert(SDAI.STRING(sDATE_AND_TIME_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sCLASSIFICATION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sACTION_ITEMS.typeName)) // -> sCLASSIFICATION_ITEM
      members.insert(SDAI.STRING(sCHANGE_MANAGEMENT_OBJECT.typeName)) // -> sACTION_ITEMS
      members.insert(SDAI.STRING(sIR_USAGE_ITEM.typeName)) // -> sCLASSIFICATION_ITEM
      members.insert(SDAI.STRING(sMULTI_LANGUAGE_ATTRIBUTE_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sIDENTIFICATION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sATTRIBUTE_CLASSIFICATION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sEVIDENCE_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sSECURITY_CLASSIFICATION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sCHARACTERIZED_PROPERTY_REPRESENTATION.typeName)) // -> Self
      members.insert(SDAI.STRING(sDESCRIPTION_ATTRIBUTE_SELECT.typeName)) // -> Self
      members.insert(SDAI.STRING(sDATE_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sANALYSED_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sAPPROVAL_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sACTION_METHOD_ITEMS.typeName)) // -> Self
      members.insert(SDAI.STRING(sNAME_ATTRIBUTE_SELECT.typeName)) // -> Self
      members.insert(SDAI.STRING(sAP242_ASSIGNMENT_OBJECT_SELECT.typeName)) // -> Self
      members.insert(SDAI.STRING(sPERSON_AND_ORGANIZATION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sGENERAL_ORGANIZATIONAL_DATA_SELECT.typeName)) // -> Self
      members.insert(SDAI.STRING(sEVENT_OCCURRENCE_ITEM.typeName)) // -> sGENERAL_ORGANIZATIONAL_DATA_SELECT
      members.insert(SDAI.STRING(sORGANIZATION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sDESCRIPTION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sPROJECT_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sDOCUMENT_REFERENCE_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sGROUPABLE_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sEFFECTIVITY_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sASSIGNMENT_OBJECT_SELECT.typeName)) // -> Self
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._definition.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._used_representation.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._definition.value.isValueEqualOptionally(to: rhs._definition.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._used_representation.value.isValueEqualOptionally(to: rhs._used_representation.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._definition.value.isValueEqualOptionally(to: rhs._definition.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._used_representation.value.isValueEqualOptionally(to: rhs._used_representation.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: ePROPERTY_DEFINITION_REPRESENTATION?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.USEDIN(T: SELF, ROLE: \AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF
        .eDESCRIPTION_ATTRIBUTE.DESCRIBED_ITEM)
      let _TEMP2 = SDAI.SIZEOF(_TEMP1)
      let _TEMP3 = _TEMP2 <= SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
      return _TEMP3
    }
    public static func WHERE_wr2(SELF: ePROPERTY_DEFINITION_REPRESENTATION?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.USEDIN(T: SELF, ROLE: \AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF
        .eNAME_ATTRIBUTE.NAMED_ITEM)
      let _TEMP2 = SDAI.SIZEOF(_TEMP1)
      let _TEMP3 = _TEMP2 <= SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
      return _TEMP3
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(DEFINITION: sREPRESENTED_DEFINITION, USED_REPRESENTATION: eREPRESENTATION) {
      self.__definition = DEFINITION
      self._used_representation = USED_REPRESENTATION
      super.init(asAbstructSuperclass:())

      self._definition.configure(with: SDAI.EntityReferenceObserver(referencer: self, observerCode: _definition__observer.self))
    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 2
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverRequiredParameter(as: sREPRESENTED_DEFINITION.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p1) = exchangeStructure.recoverRequiredParameter(as: eREPRESENTATION.self, from: parameters[1])
      else { exchangeStructure.add(errorContext: "while recovering parameter #1 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( DEFINITION: p0, USED_REPRESENTATION: p1 )
    }

    /// broadcasting a new complex entity becoming an owner of the partial entity
    final public override func broadcast(addedToComplex complex: SDAI.ComplexEntity) {
      _definition__observer.observe(newReferencerOwner: complex)
    }

    /// broadcasting a complex entity withdrawing an owner of the partial entity
    final public override func broadcast(removedFromComplex complex: SDAI.ComplexEntity) {
      _definition__observer.observe(leavingReferencerOwner: complex)
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY property_definition_representation;
      definition           : represented_definition;
      used_representation  : representation;
    DERIVE
      description  : text := get_description_value( SELF );
      name         : label := get_name_value( SELF );
    WHERE
      wr1: ( SIZEOF( USEDIN( SELF, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.DESCRIPTION_ATTRIBUTE.'
               + 'DESCRIBED_ITEM'  ) ) <= 1 );
      wr2: ( SIZEOF( USEDIN( SELF, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.NAME_ATTRIBUTE.NAMED_ITEM' ) ) 
               <= 1 );
  END_ENTITY; -- property_definition_representation (line:26605 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class ePROPERTY_DEFINITION_REPRESENTATION : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _property_definition_representation.self
    }
    public let partialEntity: _property_definition_representation

    //MARK: SUPERTYPES
    public var super_ePROPERTY_DEFINITION_REPRESENTATION: ePROPERTY_DEFINITION_REPRESENTATION { return self } 	// [1]

    //MARK: SUBTYPES
    public var sub_eMATERIAL_PROPERTY_REPRESENTATION: eMATERIAL_PROPERTY_REPRESENTATION? {	// [2]
      return self.complexEntity.entityReference(eMATERIAL_PROPERTY_REPRESENTATION.self)
    }

    public var sub_eSHAPE_DEFINITION_REPRESENTATION: eSHAPE_DEFINITION_REPRESENTATION? {	// [3]
      return self.complexEntity.entityReference(eSHAPE_DEFINITION_REPRESENTATION.self)
    }

    public var sub_eBACK_CHAINING_RULE_BODY: eBACK_CHAINING_RULE_BODY? {	// [4]
      return self.complexEntity.entityReference(eBACK_CHAINING_RULE_BODY.self)
    }

    public var sub_eFORWARD_CHAINING_RULE_PREMISE: eFORWARD_CHAINING_RULE_PREMISE? {	// [5]
      return self.complexEntity.entityReference(eFORWARD_CHAINING_RULE_PREMISE.self)
    }

    public var sub_eKINEMATIC_PROPERTY_TOPOLOGY_REPRESENTATION: eKINEMATIC_PROPERTY_TOPOLOGY_REPRESENTATION? {	// [6]
      return self.complexEntity.entityReference(eKINEMATIC_PROPERTY_TOPOLOGY_REPRESENTATION.self)
    }

    public var sub_eKINEMATIC_PROPERTY_MECHANISM_REPRESENTATION: eKINEMATIC_PROPERTY_MECHANISM_REPRESENTATION? {	// [7]
      return self.complexEntity.entityReference(eKINEMATIC_PROPERTY_MECHANISM_REPRESENTATION.self)
    }

    public var sub_eKINEMATIC_PROPERTY_DEFINITION_REPRESENTATION: eKINEMATIC_PROPERTY_DEFINITION_REPRESENTATION? {	// [8]
      return self.complexEntity.entityReference(eKINEMATIC_PROPERTY_DEFINITION_REPRESENTATION.self)
    }

    public var sub_eATTRIBUTE_ASSERTION: eATTRIBUTE_ASSERTION? {	// [9]
      return self.complexEntity.entityReference(eATTRIBUTE_ASSERTION.self)
    }

    public var sub_eROW_VARIABLE: eROW_VARIABLE? {	// [10]
      return self.complexEntity.entityReference(eROW_VARIABLE.self)
    }

    public var sub_eSCALAR_VARIABLE: eSCALAR_VARIABLE? {	// [11]
      return self.complexEntity.entityReference(eSCALAR_VARIABLE.self)
    }

    public var sub_eABSTRACT_VARIABLE: eABSTRACT_VARIABLE? {	// [12]
      return self.complexEntity.entityReference(eABSTRACT_VARIABLE.self)
    }


    //MARK: ATTRIBUTES
    // BASE: (2 AMBIGUOUS REFs)

    /// __DERIVE__ attribute
    /// - origin: SELF( ``ePROPERTY_DEFINITION_REPRESENTATION`` )
    public var DESCRIPTION: tTEXT?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"DESCRIPTION") {
          return cached.value as! tTEXT? 
        }
        let origin = self
        let value = origin.partialEntity._description__getter(SELF: origin)
        updateCache(derivedAttributeName:"DESCRIPTION", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eMATERIAL_PROPERTY_REPRESENTATION`` )
    public var DEPENDENT_ENVIRONMENT: eDATA_ENVIRONMENT?  {
      get {
        return sub_eMATERIAL_PROPERTY_REPRESENTATION?.partialEntity._dependent_environment
      }
      set(newValue) {
        guard let partial = sub_eMATERIAL_PROPERTY_REPRESENTATION?.super_eMATERIAL_PROPERTY_REPRESENTATION
          .partialEntity else { return }
        partial._dependent_environment = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``ePROPERTY_DEFINITION_REPRESENTATION`` )
    public var USED_REPRESENTATION: eREPRESENTATION {
      get {
        return SDAI.UNWRAP( self.partialEntity._used_representation )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._used_representation = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``ePROPERTY_DEFINITION_REPRESENTATION`` )
    public var DEFINITION: sREPRESENTED_DEFINITION {
      get {
        return SDAI.UNWRAP( self.partialEntity._definition )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._definition = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SELF( ``ePROPERTY_DEFINITION_REPRESENTATION`` )
    public var NAME: tLABEL?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"NAME") {
          return cached.value as! tLABEL? 
        }
        let origin = self
        let value = origin.partialEntity._name__getter(SELF: origin)
        updateCache(derivedAttributeName:"NAME", value:value)
        return value
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_property_definition_representation.self) else { return nil }
      self.partialEntity = partial

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }

    //SIMPLE ENTITY REFERENCE
    public convenience init?(_ partial:_property_definition_representation) {
      let complex = SDAI.ComplexEntity(entities:[partial])
      self.init(complex: complex)
    }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _property_definition_representation.WHERE_wr1(SELF: instance)
      result[prefix2 + " .WHERE_wr2"] = _property_definition_representation.WHERE_wr2(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "PROPERTY_DEFINITION_REPRESENTATION", type: self, explicitAttributeCount: 2)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: ePROPERTY_DEFINITION_REPRESENTATION.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "DESCRIPTION", keyPath: \ePROPERTY_DEFINITION_REPRESENTATION.DESCRIPTION, 
        kind: .derived, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "DEPENDENT_ENVIRONMENT", keyPath: \ePROPERTY_DEFINITION_REPRESENTATION.DEPENDENT_ENVIRONMENT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "USED_REPRESENTATION", keyPath: \ePROPERTY_DEFINITION_REPRESENTATION.USED_REPRESENTATION, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "DEFINITION", keyPath: \ePROPERTY_DEFINITION_REPRESENTATION.DEFINITION, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "NAME", keyPath: \ePROPERTY_DEFINITION_REPRESENTATION.NAME, 
        kind: .derived, source: .thisEntity, mayYieldEntityReference: false)

      return entityDef
    }

  }
}
