/* file: product_definition_formation.swift 	 generated: Tue Nov 16 05:35:44 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY product_definition_formation;
      id           : identifier;
      description  : OPTIONAL text;
      of_product   : product;
    UNIQUE
      ur1 : id, of_product;
  END_ENTITY; -- product_definition_formation (line:26074 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  ENTITY(SELF)	product_definition_formation
    ATTR:  id,	TYPE: identifier -- EXPLICIT

    ATTR:  description,	TYPE: OPTIONAL text -- EXPLICIT

    ATTR:  of_product,	TYPE: product -- EXPLICIT
      -- possibly overriden by
          ENTITY: collection_version,	TYPE: collection


  SUB- ENTITY(2)	product_definition_formation_with_specified_source
    ATTR:  make_or_buy,	TYPE: source -- EXPLICIT


  SUB- ENTITY(3)	interface_connector_as_planned
    (no local attributes)

  SUB- ENTITY(4)	interface_connector_design
    (no local attributes)

  SUB- ENTITY(5)	attachment_slot_as_planned
    (no local attributes)

  SUB- ENTITY(6)	interface_connector_as_realized
    (no local attributes)

  SUB- ENTITY(7)	interface_connector_version
    (no local attributes)

  SUB- ENTITY(8)	product_as_planned
    (no local attributes)

  SUB- ENTITY(9)	attachment_slot_as_realized
    (no local attributes)

  SUB- ENTITY(10)	attachment_slot_design
    (no local attributes)

  SUB- ENTITY(11)	interface_specification_version
    (no local attributes)

  SUB- ENTITY(12)	product_definition_formation_resource
    (no local attributes)

  SUB- ENTITY(13)	final_solution
    ATTR:  status,	TYPE: STRING -- EXPLICIT

    ATTR:  specification,	TYPE: SET [1 : ?] OF product_definition -- INVERSE
      FOR formation;


  SUB- ENTITY(14)	collection_version
    REDCR: of_product,	TYPE: collection -- EXPLICIT
      -- OVERRIDING ENTITY: product_definition_formation

    ATTR:  of_collection,	TYPE: collection -- DERIVED
      := SELF\product_definition_formation.of_product


*/


//MARK: - Partial Entity
  public final class _product_definition_formation : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      ePRODUCT_DEFINITION_FORMATION.self
    }

    //ATTRIBUTES
    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _id: tIDENTIFIER // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _description: tTEXT?  // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _of_product: ePRODUCT // PLAIN EXPLICIT ATTRIBUTE

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      //SELECT data types (indirectly) referencing the current type as a member of the select list
      members.insert(SDAI.STRING(sDATE_AND_TIME_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sCLASSIFICATION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sACTION_ITEMS.typeName)) // -> sCLASSIFICATION_ITEM
      members.insert(SDAI.STRING(sCHANGE_MANAGEMENT_OBJECT.typeName)) // -> sACTION_ITEMS
      members.insert(SDAI.STRING(sIR_USAGE_ITEM.typeName)) // -> sCLASSIFICATION_ITEM
      members.insert(SDAI.STRING(sMULTI_LANGUAGE_ATTRIBUTE_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sSTATE_OBSERVED_OF_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sEXTERNAL_IDENTIFICATION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sPRESENTED_ITEM_SELECT.typeName)) // -> Self
      members.insert(SDAI.STRING(sPRODUCT_DEFINITION_OR_BREAKDOWN_ELEMENT_USAGE.typeName)) // -> Self
      members.insert(SDAI.STRING(sIDENTIFICATION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sCONTRACTED_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sTIME_INTERVAL_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sWORK_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sATTRIBUTE_CLASSIFICATION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sREQUIREMENT_SOURCE_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sEVIDENCE_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sLOCATION_REPRESENTATION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sSECURITY_CLASSIFICATION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sACTION_REQUEST_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sCONTRACT_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sDATE_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sSTATE_TYPE_OF_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sCC_PERSON_ORGANIZATION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sAPPROVAL_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sACTION_METHOD_ITEMS.typeName)) // -> Self
      members.insert(SDAI.STRING(sPRODUCT_SELECT.typeName)) // -> Self
      members.insert(SDAI.STRING(sCLASSIFIED_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sLOCATION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sREQUIREMENT_ASSIGNED_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sREQUIREMENT_SATISFACTION_ITEM.typeName)) // -> sREQUIREMENT_ASSIGNED_ITEM
      members.insert(SDAI.STRING(sCC_CLASSIFIED_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sCHANGE_REQUEST_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sPERSON_AND_ORGANIZATION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sGENERAL_ORGANIZATIONAL_DATA_SELECT.typeName)) // -> Self
      members.insert(SDAI.STRING(sEVENT_OCCURRENCE_ITEM.typeName)) // -> sGENERAL_ORGANIZATIONAL_DATA_SELECT
      members.insert(SDAI.STRING(sORGANIZATION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sSTART_REQUEST_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sRULE_SUPERSEDED_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sDESCRIPTION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sPROJECT_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sATTRIBUTE_LANGUAGE_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sPRODUCT_OR_FORMATION_OR_DEFINITION.typeName)) // -> Self
      members.insert(SDAI.STRING(sREPRESENTATION_PROXY_SELECT.typeName)) // -> Self
      members.insert(SDAI.STRING(sCONFIGURATION_DESIGN_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sDOCUMENT_REFERENCE_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sGROUPABLE_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sCERTIFICATION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sEFFECTIVITY_ITEM.typeName)) // -> Self
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._id.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._description?.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._of_product.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._id.value.isValueEqualOptionally(to: rhs._id.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._description?.value.isValueEqualOptionally(to: rhs._description?.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._of_product.value.isValueEqualOptionally(to: rhs._of_product.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._id.value.isValueEqualOptionally(to: rhs._id.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._description?.value.isValueEqualOptionally(to: rhs._description?.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._of_product.value.isValueEqualOptionally(to: rhs._of_product.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //UNIQUENESS RULES
    public static func UNIQUE_ur1(SELF: SDAI.EntityReference) -> AnyHashable? {
      guard let SELF = SELF as? ePRODUCT_DEFINITION_FORMATION else { return nil }
      //JOINT UNIQUE RULE

      var attributes: Array<AnyHashable> = []

      let attr1 = SELF.ID
      attributes.append( AnyHashable(attr1) )
      let attr2 = SELF.OF_PRODUCT
      attributes.append( AnyHashable(attr2) )

      return AnyHashable( attributes )
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(ID: tIDENTIFIER, DESCRIPTION: tTEXT? , OF_PRODUCT: ePRODUCT) {
      self._id = ID
      self._description = DESCRIPTION
      self._of_product = OF_PRODUCT
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 3
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverRequiredParameter(as: tIDENTIFIER.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p1) = exchangeStructure.recoverOptionalParameter(as: tTEXT.self, from: parameters[1])
      else { exchangeStructure.add(errorContext: "while recovering parameter #1 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p2) = exchangeStructure.recoverRequiredParameter(as: ePRODUCT.self, from: parameters[2])
      else { exchangeStructure.add(errorContext: "while recovering parameter #2 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( ID: p0, DESCRIPTION: p1, OF_PRODUCT: p2 )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY product_definition_formation;
      id           : identifier;
      description  : OPTIONAL text;
      of_product   : product;
    UNIQUE
      ur1 : id, of_product;
  END_ENTITY; -- product_definition_formation (line:26074 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class ePRODUCT_DEFINITION_FORMATION : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _product_definition_formation.self
    }
    public let partialEntity: _product_definition_formation

    //MARK: SUPERTYPES
    public var super_ePRODUCT_DEFINITION_FORMATION: ePRODUCT_DEFINITION_FORMATION { return self } 	// [1]

    //MARK: SUBTYPES
    public var sub_ePRODUCT_DEFINITION_FORMATION_WITH_SPECIFIED_SOURCE: ePRODUCT_DEFINITION_FORMATION_WITH_SPECIFIED_SOURCE? {	// [2]
      return self.complexEntity.entityReference(ePRODUCT_DEFINITION_FORMATION_WITH_SPECIFIED_SOURCE.self)
    }

    public var sub_eINTERFACE_CONNECTOR_AS_PLANNED: eINTERFACE_CONNECTOR_AS_PLANNED? {	// [3]
      return self.complexEntity.entityReference(eINTERFACE_CONNECTOR_AS_PLANNED.self)
    }

    public var sub_eINTERFACE_CONNECTOR_DESIGN: eINTERFACE_CONNECTOR_DESIGN? {	// [4]
      return self.complexEntity.entityReference(eINTERFACE_CONNECTOR_DESIGN.self)
    }

    public var sub_eATTACHMENT_SLOT_AS_PLANNED: eATTACHMENT_SLOT_AS_PLANNED? {	// [5]
      return self.complexEntity.entityReference(eATTACHMENT_SLOT_AS_PLANNED.self)
    }

    public var sub_eINTERFACE_CONNECTOR_AS_REALIZED: eINTERFACE_CONNECTOR_AS_REALIZED? {	// [6]
      return self.complexEntity.entityReference(eINTERFACE_CONNECTOR_AS_REALIZED.self)
    }

    public var sub_eINTERFACE_CONNECTOR_VERSION: eINTERFACE_CONNECTOR_VERSION? {	// [7]
      return self.complexEntity.entityReference(eINTERFACE_CONNECTOR_VERSION.self)
    }

    public var sub_ePRODUCT_AS_PLANNED: ePRODUCT_AS_PLANNED? {	// [8]
      return self.complexEntity.entityReference(ePRODUCT_AS_PLANNED.self)
    }

    public var sub_eATTACHMENT_SLOT_AS_REALIZED: eATTACHMENT_SLOT_AS_REALIZED? {	// [9]
      return self.complexEntity.entityReference(eATTACHMENT_SLOT_AS_REALIZED.self)
    }

    public var sub_eATTACHMENT_SLOT_DESIGN: eATTACHMENT_SLOT_DESIGN? {	// [10]
      return self.complexEntity.entityReference(eATTACHMENT_SLOT_DESIGN.self)
    }

    public var sub_eINTERFACE_SPECIFICATION_VERSION: eINTERFACE_SPECIFICATION_VERSION? {	// [11]
      return self.complexEntity.entityReference(eINTERFACE_SPECIFICATION_VERSION.self)
    }

    public var sub_ePRODUCT_DEFINITION_FORMATION_RESOURCE: ePRODUCT_DEFINITION_FORMATION_RESOURCE? {	// [12]
      return self.complexEntity.entityReference(ePRODUCT_DEFINITION_FORMATION_RESOURCE.self)
    }

    public var sub_eFINAL_SOLUTION: eFINAL_SOLUTION? {	// [13]
      return self.complexEntity.entityReference(eFINAL_SOLUTION.self)
    }

    public var sub_eCOLLECTION_VERSION: eCOLLECTION_VERSION? {	// [14]
      return self.complexEntity.entityReference(eCOLLECTION_VERSION.self)
    }


    //MARK: ATTRIBUTES
    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``ePRODUCT_DEFINITION_FORMATION`` )
    public var DESCRIPTION: tTEXT?  {
      get {
        return self.partialEntity._description
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._description = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eFINAL_SOLUTION`` )
    public var STATUS: SDAI.STRING?  {
      get {
        return sub_eFINAL_SOLUTION?.partialEntity._status
      }
      set(newValue) {
        guard let partial = sub_eFINAL_SOLUTION?.super_eFINAL_SOLUTION.partialEntity else { return }
        partial._status = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eCOLLECTION_VERSION`` )
    public var OF_COLLECTION: eCOLLECTION?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"OF_COLLECTION") {
          return cached.value as! eCOLLECTION? 
        }
        guard let origin = sub_eCOLLECTION_VERSION else { return nil }
        let value = eCOLLECTION(origin.partialEntity._of_collection__getter(SELF: origin))
        updateCache(derivedAttributeName:"OF_COLLECTION", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePRODUCT_DEFINITION_FORMATION_WITH_SPECIFIED_SOURCE`` )
    public var MAKE_OR_BUY: nSOURCE?  {
      get {
        return sub_ePRODUCT_DEFINITION_FORMATION_WITH_SPECIFIED_SOURCE?.partialEntity._make_or_buy
      }
      set(newValue) {
        guard let partial = sub_ePRODUCT_DEFINITION_FORMATION_WITH_SPECIFIED_SOURCE?.super_ePRODUCT_DEFINITION_FORMATION_WITH_SPECIFIED_SOURCE
          .partialEntity else { return }
        partial._make_or_buy = SDAI.UNWRAP(newValue)
      }
    }

    /// __INVERSE__ attribute
    /// observing ePRODUCT_DEFINITION .FORMATION
    /// - origin: SUB( ``eFINAL_SOLUTION`` )
    public var SPECIFICATION: (SDAI.SET<ePRODUCT_DEFINITION>/*[1:nil]*/ )?  {
      get {
        return sub_eFINAL_SOLUTION?.partialEntity._specification
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``ePRODUCT_DEFINITION_FORMATION`` )
    public var ID: tIDENTIFIER {
      get {
        return SDAI.UNWRAP( self.partialEntity._id )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._id = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``ePRODUCT_DEFINITION_FORMATION`` )
    public var OF_PRODUCT: ePRODUCT {
      get {
        return SDAI.UNWRAP( self.partialEntity._of_product )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._of_product = SDAI.UNWRAP(newValue)
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_product_definition_formation.self) else { return nil }
      self.partialEntity = partial

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }

    //SIMPLE ENTITY REFERENCE
    public convenience init?(_ partial:_product_definition_formation) {
      let complex = SDAI.ComplexEntity(entities:[partial])
      self.init(complex: complex)
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "PRODUCT_DEFINITION_FORMATION", type: self, explicitAttributeCount: 3)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: ePRODUCT_DEFINITION_FORMATION.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "DESCRIPTION", keyPath: \ePRODUCT_DEFINITION_FORMATION.DESCRIPTION, 
        kind: .explicitOptional, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "STATUS", keyPath: \ePRODUCT_DEFINITION_FORMATION.STATUS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "OF_COLLECTION", keyPath: \ePRODUCT_DEFINITION_FORMATION.OF_COLLECTION, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "MAKE_OR_BUY", keyPath: \ePRODUCT_DEFINITION_FORMATION.MAKE_OR_BUY, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "SPECIFICATION", keyPath: \ePRODUCT_DEFINITION_FORMATION.SPECIFICATION, 
        kind: .inverse, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "ID", keyPath: \ePRODUCT_DEFINITION_FORMATION.ID, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "OF_PRODUCT", keyPath: \ePRODUCT_DEFINITION_FORMATION.OF_PRODUCT, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)

      //MARK: UNIQUENESS RULE REGISTRATIONS
      entityDef.addUniqunessRule(label:"UNIQUE_ur1", rule: _product_definition_formation.UNIQUE_ur1)

      return entityDef
    }

  }
}
