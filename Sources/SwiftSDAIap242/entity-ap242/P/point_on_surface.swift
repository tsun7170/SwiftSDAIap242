/* file: point_on_surface.swift 	 generated: Mon Jan  3 16:32:52 2022 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.1, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY point_on_surface
    SUBTYPE OF ( point );
      basis_surface      : surface;
      point_parameter_u  : parameter_value;
      point_parameter_v  : parameter_value;
  END_ENTITY; -- point_on_surface (line:25289 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	representation_item
    ATTR:  name,	TYPE: label -- EXPLICIT


  SUPER- ENTITY(2)	geometric_representation_item
    ATTR:  dim,	TYPE: dimension_count -- DERIVED
      := dimension_of( SELF )


  SUPER- ENTITY(3)	point
    (no local attributes)

  ENTITY(SELF)	point_on_surface
    ATTR:  basis_surface,	TYPE: surface -- EXPLICIT (DYNAMIC)
      -- possibly overriden by
          ENTITY: point_on_face_surface,	TYPE: surface	(as DERIVED)

    ATTR:  point_parameter_u,	TYPE: parameter_value -- EXPLICIT

    ATTR:  point_parameter_v,	TYPE: parameter_value -- EXPLICIT


  SUB- ENTITY(5)	point_on_face_surface
    ATTR:  basis_face_surface,	TYPE: face_surface -- EXPLICIT

    REDCR: basis_surface,	TYPE: surface -- DERIVED (DYNAMIC)
      := SELF.basis_face_surface.face_geometry
      -- OVERRIDING ENTITY: point_on_surface


*/


//MARK: - Partial Entity
  public final class _point_on_surface : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      ePOINT_ON_SURFACE.self
    }

    //ATTRIBUTES
    /// EXPLICIT ATTRIBUTE 
    /// - see the corresponding attribute accesser in the entity reference definition for the attribute value dynamic lookup logic
    public internal(set) var _basis_surface: eSURFACE?  // PLAIN EXPLICIT ATTRIBUTE

    internal static func _basis_surface__provider(complex: SDAI.ComplexEntity) -> ePOINT_ON_SURFACE__BASIS_SURFACE__provider? {
      let resolved = complex.resolvePartialEntityInstance(from: [_point_on_face_surface.typeIdentity])
      return resolved as? ePOINT_ON_SURFACE__BASIS_SURFACE__provider
    }

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _point_parameter_u: tPARAMETER_VALUE // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _point_parameter_v: tPARAMETER_VALUE // PLAIN EXPLICIT ATTRIBUTE

    //PARTIAL COMPLEX ENTITY SUPPORT
    final public override class func fixupPartialComplexEntityAttributes(partialComplex: SDAI.ComplexEntity, baseComplex: SDAI.ComplexEntity) {
      guard let pe = partialComplex.partialEntityInstance(_point_on_surface.self) else { return }

      if pe._basis_surface == nil, self._basis_surface__provider(complex: partialComplex) == nil, 
        let base__basis_surface__provider = self._basis_surface__provider(complex: baseComplex) {
        pe._basis_surface = base__basis_surface__provider._basis_surface__getter(complex: baseComplex)
      }
    }
    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      //SELECT data types (indirectly) referencing the current type as a member of the select list
      members.insert(SDAI.STRING(sIDENTIFICATION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sACTION_ITEMS.typeName)) // -> sIDENTIFICATION_ITEM
      members.insert(SDAI.STRING(sCHANGE_MANAGEMENT_OBJECT.typeName)) // -> sACTION_ITEMS
      members.insert(SDAI.STRING(sIR_USAGE_ITEM.typeName)) // -> sIDENTIFICATION_ITEM
      members.insert(SDAI.STRING(sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT.typeName)) // -> Self
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._basis_surface?.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._point_parameter_u.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._point_parameter_v.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._basis_surface?.value.isValueEqualOptionally(to: rhs._basis_surface?.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._point_parameter_u.value.isValueEqualOptionally(to: rhs._point_parameter_u.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._point_parameter_v.value.isValueEqualOptionally(to: rhs._point_parameter_v.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._basis_surface?.value.isValueEqualOptionally(to: rhs._basis_surface?.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._point_parameter_u.value.isValueEqualOptionally(to: rhs._point_parameter_u.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._point_parameter_v.value.isValueEqualOptionally(to: rhs._point_parameter_v.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(BASIS_SURFACE: eSURFACE? , POINT_PARAMETER_U: tPARAMETER_VALUE, 
                POINT_PARAMETER_V: tPARAMETER_VALUE) {
      self._basis_surface = BASIS_SURFACE
      self._point_parameter_u = POINT_PARAMETER_U
      self._point_parameter_v = POINT_PARAMETER_V
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 3
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverOmittableParameter(as: eSURFACE.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p1) = exchangeStructure.recoverRequiredParameter(as: tPARAMETER_VALUE.self, from: parameters[1])
      else { exchangeStructure.add(errorContext: "while recovering parameter #1 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p2) = exchangeStructure.recoverRequiredParameter(as: tPARAMETER_VALUE.self, from: parameters[2])
      else { exchangeStructure.add(errorContext: "while recovering parameter #2 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( BASIS_SURFACE: p0, POINT_PARAMETER_U: p1, POINT_PARAMETER_V: p2 )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY point_on_surface
    SUBTYPE OF ( point );
      basis_surface      : surface;
      point_parameter_u  : parameter_value;
      point_parameter_v  : parameter_value;
  END_ENTITY; -- point_on_surface (line:25289 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class ePOINT_ON_SURFACE : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _point_on_surface.self
    }
    public let partialEntity: _point_on_surface

    //MARK: SUPERTYPES
    public let super_eREPRESENTATION_ITEM: eREPRESENTATION_ITEM 	// [1]
    public let super_eGEOMETRIC_REPRESENTATION_ITEM: eGEOMETRIC_REPRESENTATION_ITEM 	// [2]
    public let super_ePOINT: ePOINT 	// [3]
    public var super_ePOINT_ON_SURFACE: ePOINT_ON_SURFACE { return self } 	// [4]

    //MARK: SUBTYPES
    public var sub_ePOINT_ON_FACE_SURFACE: ePOINT_ON_FACE_SURFACE? {	// [5]
      return self.complexEntity.entityReference(ePOINT_ON_FACE_SURFACE.self)
    }


    //MARK: ATTRIBUTES
    /// __EXPLICIT(DYNAMIC)__ attribute
    /// - origin: SELF( ``ePOINT_ON_SURFACE`` )
    public var BASIS_SURFACE: eSURFACE {
      get {
        if let resolved = _point_on_surface._basis_surface__provider(complex: self.complexEntity) {
          let value = resolved._basis_surface__getter(complex: self.complexEntity)
          return value
        }
        else {
          return SDAI.UNWRAP( self.partialEntity._basis_surface )
        }
      }
      set(newValue) {
        if let _ = _point_on_surface._basis_surface__provider(complex: self.complexEntity) { return }

        let partial = self.partialEntity
        partial._basis_surface = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``ePOINT_ON_SURFACE`` )
    public var POINT_PARAMETER_U: tPARAMETER_VALUE {
      get {
        return SDAI.UNWRAP( self.partialEntity._point_parameter_u )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._point_parameter_u = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``ePOINT_ON_SURFACE`` )
    public var POINT_PARAMETER_V: tPARAMETER_VALUE {
      get {
        return SDAI.UNWRAP( self.partialEntity._point_parameter_v )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._point_parameter_v = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePOINT_ON_FACE_SURFACE`` )
    public var BASIS_FACE_SURFACE: eFACE_SURFACE?  {
      get {
        return sub_ePOINT_ON_FACE_SURFACE?.partialEntity._basis_face_surface
      }
      set(newValue) {
        guard let partial = sub_ePOINT_ON_FACE_SURFACE?.super_ePOINT_ON_FACE_SURFACE.partialEntity
          else { return }
        partial._basis_face_surface = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eREPRESENTATION_ITEM`` )
    public var NAME: tLABEL {
      get {
        return SDAI.UNWRAP( super_eREPRESENTATION_ITEM.partialEntity._name )
      }
      set(newValue) {
        let partial = super_eREPRESENTATION_ITEM.partialEntity
        partial._name = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUPER( ``eGEOMETRIC_REPRESENTATION_ITEM`` )
    public var DIM: tDIMENSION_COUNT?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"DIM") {
          return cached.value as! tDIMENSION_COUNT? 
        }
        let origin = super_eGEOMETRIC_REPRESENTATION_ITEM
        let value = tDIMENSION_COUNT(origin.partialEntity._dim__getter(SELF: origin))
        updateCache(derivedAttributeName:"DIM", value:value)
        return value
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_point_on_surface.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eREPRESENTATION_ITEM.self) else { return nil }
      self.super_eREPRESENTATION_ITEM = super1

      guard let super2 = complexEntity?.entityReference(eGEOMETRIC_REPRESENTATION_ITEM.self) else { return nil }
      self.super_eGEOMETRIC_REPRESENTATION_ITEM = super2

      guard let super3 = complexEntity?.entityReference(ePOINT.self) else { return nil }
      self.super_ePOINT = super3

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "POINT_ON_SURFACE", type: self, explicitAttributeCount: 3)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eREPRESENTATION_ITEM.self)
      entityDef.add(supertype: eGEOMETRIC_REPRESENTATION_ITEM.self)
      entityDef.add(supertype: ePOINT.self)
      entityDef.add(supertype: ePOINT_ON_SURFACE.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "BASIS_SURFACE", keyPath: \ePOINT_ON_SURFACE.BASIS_SURFACE, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "POINT_PARAMETER_U", keyPath: \ePOINT_ON_SURFACE.POINT_PARAMETER_U, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "POINT_PARAMETER_V", keyPath: \ePOINT_ON_SURFACE.POINT_PARAMETER_V, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "BASIS_FACE_SURFACE", keyPath: \ePOINT_ON_SURFACE.BASIS_FACE_SURFACE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "NAME", keyPath: \ePOINT_ON_SURFACE.NAME, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "DIM", keyPath: \ePOINT_ON_SURFACE.DIM, 
        kind: .derived, source: .superEntity, mayYieldEntityReference: false)

      return entityDef
    }

  }
}

//MARK: - Entity Dynamic Attribute Protocols
internal protocol ePOINT_ON_SURFACE__BASIS_SURFACE__provider {
  func _basis_surface__getter(complex: SDAI.ComplexEntity) -> 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSURFACE
}
