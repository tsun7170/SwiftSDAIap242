/* file: person_and_organization_assignment.swift 	 generated: Sun Oct 31 15:32:10 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY person_and_organization_assignment
    ABSTRACT SUPERTYPE;
      assigned_person_and_organization : person_and_organization;
      role                            : person_and_organization_role;
  END_ENTITY; -- person_and_organization_assignment (line:24397 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  ENTITY(SELF)	person_and_organization_assignment
    ATTR:  assigned_person_and_organization,	TYPE: person_and_organization -- EXPLICIT

    ATTR:  role,	TYPE: person_and_organization_role -- EXPLICIT


  SUB- ENTITY(2)	cc_design_person_and_organization_assignment
    ATTR:  items,	TYPE: SET [1 : ?] OF cc_person_organization_item -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(3)	applied_person_and_organization_assignment
    ATTR:  items,	TYPE: SET [1 : ?] OF person_and_organization_item -- EXPLICIT	(AMBIGUOUS/MASKED)


*/


//MARK: - Partial Entity
  public final class _person_and_organization_assignment : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      ePERSON_AND_ORGANIZATION_ASSIGNMENT.self
    }

    //ATTRIBUTES
    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _assigned_person_and_organization: ePERSON_AND_ORGANIZATION // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _role: ePERSON_AND_ORGANIZATION_ROLE // PLAIN EXPLICIT ATTRIBUTE

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._assigned_person_and_organization.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._role.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._assigned_person_and_organization.value.isValueEqualOptionally(to: rhs._assigned_person_and_organization.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._role.value.isValueEqualOptionally(to: rhs._role.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._assigned_person_and_organization.value.isValueEqualOptionally(to: rhs._assigned_person_and_organization.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._role.value.isValueEqualOptionally(to: rhs._role.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(ASSIGNED_PERSON_AND_ORGANIZATION: ePERSON_AND_ORGANIZATION, 
                ROLE: ePERSON_AND_ORGANIZATION_ROLE) {
      self._assigned_person_and_organization = ASSIGNED_PERSON_AND_ORGANIZATION
      self._role = ROLE
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 2
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverRequiredParameter(as: ePERSON_AND_ORGANIZATION.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p1) = exchangeStructure.recoverRequiredParameter(as: 
        ePERSON_AND_ORGANIZATION_ROLE.self, from: parameters[1])
      else { exchangeStructure.add(errorContext: "while recovering parameter #1 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( ASSIGNED_PERSON_AND_ORGANIZATION: p0, ROLE: p1 )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY person_and_organization_assignment
    ABSTRACT SUPERTYPE;
      assigned_person_and_organization : person_and_organization;
      role                            : person_and_organization_role;
  END_ENTITY; -- person_and_organization_assignment (line:24397 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class ePERSON_AND_ORGANIZATION_ASSIGNMENT : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _person_and_organization_assignment.self
    }
    public let partialEntity: _person_and_organization_assignment

    //MARK: SUPERTYPES
    public var super_ePERSON_AND_ORGANIZATION_ASSIGNMENT: ePERSON_AND_ORGANIZATION_ASSIGNMENT { return self } 	// [1]

    //MARK: SUBTYPES
    public var sub_eCC_DESIGN_PERSON_AND_ORGANIZATION_ASSIGNMENT: eCC_DESIGN_PERSON_AND_ORGANIZATION_ASSIGNMENT? {	// [2]
      return self.complexEntity.entityReference(eCC_DESIGN_PERSON_AND_ORGANIZATION_ASSIGNMENT.self)
    }

    public var sub_eAPPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT: eAPPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT? {	// [3]
      return self.complexEntity.entityReference(eAPPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT.self)
    }


    //MARK: ATTRIBUTES
    // ITEMS: (2 AMBIGUOUS REFs)

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``ePERSON_AND_ORGANIZATION_ASSIGNMENT`` )
    public var ROLE: ePERSON_AND_ORGANIZATION_ROLE {
      get {
        return SDAI.UNWRAP( self.partialEntity._role )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._role = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``ePERSON_AND_ORGANIZATION_ASSIGNMENT`` )
    public var ASSIGNED_PERSON_AND_ORGANIZATION: ePERSON_AND_ORGANIZATION {
      get {
        return SDAI.UNWRAP( self.partialEntity._assigned_person_and_organization )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._assigned_person_and_organization = SDAI.UNWRAP(newValue)
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_person_and_organization_assignment.self) else { return nil }
      self.partialEntity = partial

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }

    //SIMPLE ENTITY REFERENCE
    public convenience init?(_ partial:_person_and_organization_assignment) {
      let complex = SDAI.ComplexEntity(entities:[partial])
      self.init(complex: complex)
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "PERSON_AND_ORGANIZATION_ASSIGNMENT", type: self, explicitAttributeCount: 2)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: ePERSON_AND_ORGANIZATION_ASSIGNMENT.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "ROLE", keyPath: \ePERSON_AND_ORGANIZATION_ASSIGNMENT.ROLE, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "ASSIGNED_PERSON_AND_ORGANIZATION", keyPath: \ePERSON_AND_ORGANIZATION_ASSIGNMENT.ASSIGNED_PERSON_AND_ORGANIZATION, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)

      return entityDef
    }

  }
}
