/* file: product_concept_feature_category.swift 	 generated: Mon Jan  3 16:32:52 2022 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.1, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY product_concept_feature_category
    SUBTYPE OF ( group );
    WHERE
      wr1: ( SIZEOF( QUERY ( aga <* USEDIN( SELF, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
               + 'GROUP_ASSIGNMENT.ASSIGNED_GROUP'  ) | ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
               + 'APPLIED_GROUP_ASSIGNMENT'  IN TYPEOF( aga ) ) AND ( ( aga\group_assignment.role\object_role
               .name <> 'specification category member' ) OR ( SIZEOF( QUERY ( i <* aga\
               applied_group_assignment.items | ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
               + 'PRODUCT_CONCEPT_FEATURE'  IN TYPEOF( i ) ) AND ( NOT ( 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CONDITIONAL_CONCEPT_FEATURE'  IN TYPEOF( i ) ) ) ) ) ) 
               <> SIZEOF( aga\applied_group_assignment.items ) ) ) ) ) ) = 0 );
  END_ENTITY; -- product_concept_feature_category (line:25983 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	group
    ATTR:  name,	TYPE: label -- EXPLICIT

    ATTR:  description,	TYPE: OPTIONAL text -- EXPLICIT

    ATTR:  id,	TYPE: identifier -- DERIVED
      := get_id_value( SELF )


  ENTITY(SELF)	product_concept_feature_category
    (no local attributes)

  SUB- ENTITY(3)	exclusive_product_concept_feature_category
    (no local attributes)

  SUB- ENTITY(4)	characterized_product_concept_feature_category
    (no local attributes)

*/


//MARK: - Partial Entity
  public final class _product_concept_feature_category : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      ePRODUCT_CONCEPT_FEATURE_CATEGORY.self
    }

    //ATTRIBUTES
    // (no local attributes)

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      //SELECT data types (indirectly) referencing the current type as a member of the select list
      members.insert(SDAI.STRING(sDATE_AND_TIME_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sCLASSIFICATION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sACTION_ITEMS.typeName)) // -> sCLASSIFICATION_ITEM
      members.insert(SDAI.STRING(sCHANGE_MANAGEMENT_OBJECT.typeName)) // -> sACTION_ITEMS
      members.insert(SDAI.STRING(sIR_USAGE_ITEM.typeName)) // -> sCLASSIFICATION_ITEM
      members.insert(SDAI.STRING(sMULTI_LANGUAGE_ATTRIBUTE_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sEXTERNAL_IDENTIFICATION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sPRESENTED_ITEM_SELECT.typeName)) // -> Self
      members.insert(SDAI.STRING(sIDENTIFICATION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sTIME_INTERVAL_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sSECURITY_CLASSIFICATION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sACTION_REQUEST_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sDATE_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sAPPROVAL_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sPERSON_AND_ORGANIZATION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sGENERAL_ORGANIZATIONAL_DATA_SELECT.typeName)) // -> Self
      members.insert(SDAI.STRING(sEVENT_OCCURRENCE_ITEM.typeName)) // -> sGENERAL_ORGANIZATIONAL_DATA_SELECT
      members.insert(SDAI.STRING(sORGANIZATION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sDESCRIPTION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sDOCUMENT_REFERENCE_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sEFFECTIVITY_ITEM.typeName)) // -> Self
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: ePRODUCT_CONCEPT_FEATURE_CATEGORY?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.USEDIN(T: SELF, ROLE: \AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF
        .eGROUP_ASSIGNMENT.ASSIGNED_GROUP)
      let _TEMP2 = _TEMP1.QUERY{ AGA in 

          let _TEMP1 = SDAI.TYPEOF(AGA, IS: eAPPLIED_GROUP_ASSIGNMENT.self)
          let _TEMP2 = /*runtime*/AGA.GROUP_REF(eGROUP_ASSIGNMENT.self)
          let _TEMP3 = /*runtime*/_TEMP2?.ROLE
          let _TEMP4 = /*runtime*/_TEMP3?.GROUP_REF(eOBJECT_ROLE.self)
          let _TEMP5 = /*runtime*/_TEMP4?.NAME
          let _TEMP6 = /*runtime*/_TEMP5 .!=. SDAI.FORCE_OPTIONAL(SDAI.STRING("specification category member"))
          let _TEMP7 = /*runtime*/AGA.GROUP_REF(eAPPLIED_GROUP_ASSIGNMENT.self)
          let _TEMP8 = /*runtime*/_TEMP7?.ITEMS
          let _TEMP9 = /*runtime*/_TEMP8?
            .QUERY{ I in 

              let _TEMP1 = SDAI.TYPEOF(I, IS: ePRODUCT_CONCEPT_FEATURE.self)
              let _TEMP2 = SDAI.TYPEOF(I, IS: eCONDITIONAL_CONCEPT_FEATURE.self)
              let _TEMP3 =  !_TEMP2
              let _TEMP4 = _TEMP1 && _TEMP3
              return _TEMP4 }
          let _TEMP10 = SDAI.SIZEOF(SDAI.AGGREGATE<SDAI.GENERIC>(/*runtime*/_TEMP9))
          let _TEMP11 = /*runtime*/AGA.GROUP_REF(eAPPLIED_GROUP_ASSIGNMENT.self)
          let _TEMP12 = /*runtime*/_TEMP11?.ITEMS
          let _TEMP13 = SDAI.SIZEOF(SDAI.AGGREGATE<SDAI.GENERIC>(/*runtime*/_TEMP12))
          let _TEMP14 = _TEMP10 .!=. _TEMP13
          let _TEMP15 = _TEMP6 || _TEMP14
          let _TEMP16 = _TEMP1 && _TEMP15
          return _TEMP16 }
      let _TEMP3 = SDAI.SIZEOF(_TEMP2)
      let _TEMP4 = _TEMP3 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      return _TEMP4
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init() {
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 0
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      self.init( )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY product_concept_feature_category
    SUBTYPE OF ( group );
    WHERE
      wr1: ( SIZEOF( QUERY ( aga <* USEDIN( SELF, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
               + 'GROUP_ASSIGNMENT.ASSIGNED_GROUP'  ) | ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
               + 'APPLIED_GROUP_ASSIGNMENT'  IN TYPEOF( aga ) ) AND ( ( aga\group_assignment.role\object_role
               .name <> 'specification category member' ) OR ( SIZEOF( QUERY ( i <* aga\
               applied_group_assignment.items | ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
               + 'PRODUCT_CONCEPT_FEATURE'  IN TYPEOF( i ) ) AND ( NOT ( 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CONDITIONAL_CONCEPT_FEATURE'  IN TYPEOF( i ) ) ) ) ) ) 
               <> SIZEOF( aga\applied_group_assignment.items ) ) ) ) ) ) = 0 );
  END_ENTITY; -- product_concept_feature_category (line:25983 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class ePRODUCT_CONCEPT_FEATURE_CATEGORY : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _product_concept_feature_category.self
    }
    public let partialEntity: _product_concept_feature_category

    //MARK: SUPERTYPES
    public let super_eGROUP: eGROUP 	// [1]
    public var super_ePRODUCT_CONCEPT_FEATURE_CATEGORY: ePRODUCT_CONCEPT_FEATURE_CATEGORY { return self } 	// [2]

    //MARK: SUBTYPES
    public var sub_eEXCLUSIVE_PRODUCT_CONCEPT_FEATURE_CATEGORY: eEXCLUSIVE_PRODUCT_CONCEPT_FEATURE_CATEGORY? {	// [3]
      return self.complexEntity.entityReference(eEXCLUSIVE_PRODUCT_CONCEPT_FEATURE_CATEGORY.self)
    }

    public var sub_eCHARACTERIZED_PRODUCT_CONCEPT_FEATURE_CATEGORY: eCHARACTERIZED_PRODUCT_CONCEPT_FEATURE_CATEGORY? {	// [4]
      return self.complexEntity.entityReference(eCHARACTERIZED_PRODUCT_CONCEPT_FEATURE_CATEGORY.self)
    }


    //MARK: ATTRIBUTES
    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eGROUP`` )
    public var DESCRIPTION: tTEXT?  {
      get {
        return super_eGROUP.partialEntity._description
      }
      set(newValue) {
        let partial = super_eGROUP.partialEntity
        partial._description = newValue
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUPER( ``eGROUP`` )
    public var ID: tIDENTIFIER?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"ID") {
          return cached.value as! tIDENTIFIER? 
        }
        let origin = super_eGROUP
        let value = tIDENTIFIER(origin.partialEntity._id__getter(SELF: origin))
        updateCache(derivedAttributeName:"ID", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eGROUP`` )
    public var NAME: tLABEL {
      get {
        return SDAI.UNWRAP( super_eGROUP.partialEntity._name )
      }
      set(newValue) {
        let partial = super_eGROUP.partialEntity
        partial._name = SDAI.UNWRAP(newValue)
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_product_concept_feature_category.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eGROUP.self) else { return nil }
      self.super_eGROUP = super1

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _product_concept_feature_category.WHERE_wr1(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "PRODUCT_CONCEPT_FEATURE_CATEGORY", type: self, explicitAttributeCount: 0)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eGROUP.self)
      entityDef.add(supertype: ePRODUCT_CONCEPT_FEATURE_CATEGORY.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "DESCRIPTION", keyPath: \ePRODUCT_CONCEPT_FEATURE_CATEGORY.DESCRIPTION, 
        kind: .explicitOptional, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "ID", keyPath: \ePRODUCT_CONCEPT_FEATURE_CATEGORY.ID, 
        kind: .derived, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "NAME", keyPath: \ePRODUCT_CONCEPT_FEATURE_CATEGORY.NAME, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)

      return entityDef
    }

  }
}
