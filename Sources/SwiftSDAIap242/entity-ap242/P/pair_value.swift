/* file: pair_value.swift 	 generated: Sun Oct 31 15:32:10 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY pair_value
    ABSTRACT SUPERTYPE OF ( 
        ONEOF ( 
            sliding_surface_pair_value, 
            rolling_surface_pair_value, 
            revolute_pair_value, 
            prismatic_pair_value, 
            screw_pair_value, 
            cylindrical_pair_value, 
            spherical_pair_value, 
            sliding_curve_pair_value, 
            rolling_curve_pair_value, 
            gear_pair_value, 
            rack_and_pinion_pair_value, 
            universal_pair_value, 
            planar_pair_value, 
            unconstrained_pair_value, 
            point_on_surface_pair_value, 
            point_on_planar_curve_pair_value, 
            low_order_kinematic_pair_value ) )
    SUBTYPE OF ( geometric_representation_item );
      applies_to_pair  : kinematic_pair;
  END_ENTITY; -- pair_value (line:23406 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	representation_item
    ATTR:  name,	TYPE: label -- EXPLICIT


  SUPER- ENTITY(2)	geometric_representation_item
    ATTR:  dim,	TYPE: dimension_count -- DERIVED
      := dimension_of( SELF )


  ENTITY(SELF)	pair_value
    ATTR:  applies_to_pair,	TYPE: kinematic_pair -- EXPLICIT
      -- possibly overriden by
          ENTITY: spherical_pair_value,	TYPE: spherical_pair_select
          ENTITY: revolute_pair_value,	TYPE: revolute_pair
          ENTITY: cylindrical_pair_value,	TYPE: cylindrical_pair
          ENTITY: sliding_surface_pair_value,	TYPE: sliding_surface_pair
          ENTITY: rolling_surface_pair_value,	TYPE: rolling_surface_pair
          ENTITY: universal_pair_value,	TYPE: universal_pair
          ENTITY: low_order_kinematic_pair_value,	TYPE: low_order_kinematic_pair
          ENTITY: prismatic_pair_value,	TYPE: prismatic_pair
          ENTITY: gear_pair_value,	TYPE: gear_pair
          ENTITY: rolling_curve_pair_value,	TYPE: rolling_curve_pair
          ENTITY: sliding_curve_pair_value,	TYPE: sliding_curve_pair
          ENTITY: screw_pair_value,	TYPE: screw_pair
          ENTITY: unconstrained_pair_value,	TYPE: unconstrained_pair
          ENTITY: planar_pair_value,	TYPE: planar_pair
          ENTITY: point_on_planar_curve_pair_value,	TYPE: point_on_planar_curve_pair
          ENTITY: point_on_surface_pair_value,	TYPE: point_on_surface_pair
          ENTITY: rack_and_pinion_pair_value,	TYPE: rack_and_pinion_pair


  SUB- ENTITY(4)	spherical_pair_value
    REDCR: applies_to_pair,	TYPE: spherical_pair_select -- EXPLICIT
      -- OVERRIDING ENTITY: pair_value

    ATTR:  input_orientation,	TYPE: spatial_rotation -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  actual_orientation,	TYPE: ypr_rotation -- DERIVED	(AMBIGUOUS/MASKED)
      := convert_spatial_to_ypr_rotation( SELF\pair_value.applies_to_pair, input_orientation )


  SUB- ENTITY(5)	revolute_pair_value
    REDCR: applies_to_pair,	TYPE: revolute_pair -- EXPLICIT
      -- OVERRIDING ENTITY: pair_value

    ATTR:  actual_rotation,	TYPE: plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(6)	cylindrical_pair_value
    REDCR: applies_to_pair,	TYPE: cylindrical_pair -- EXPLICIT
      -- OVERRIDING ENTITY: pair_value

    ATTR:  actual_translation,	TYPE: length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  actual_rotation,	TYPE: plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(7)	sliding_surface_pair_value
    REDCR: applies_to_pair,	TYPE: sliding_surface_pair -- EXPLICIT
      -- OVERRIDING ENTITY: pair_value

    ATTR:  actual_point_on_surface_1,	TYPE: point_on_surface -- EXPLICIT

    ATTR:  actual_point_on_surface_2,	TYPE: point_on_surface -- EXPLICIT

    ATTR:  actual_rotation,	TYPE: plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(8)	rolling_surface_pair_value
    REDCR: applies_to_pair,	TYPE: rolling_surface_pair -- EXPLICIT
      -- OVERRIDING ENTITY: pair_value

    ATTR:  actual_point_on_surface,	TYPE: point_on_surface -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  actual_rotation,	TYPE: plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(9)	universal_pair_value
    REDCR: applies_to_pair,	TYPE: universal_pair -- EXPLICIT
      -- OVERRIDING ENTITY: pair_value

    ATTR:  first_rotation_angle,	TYPE: plane_angle_measure -- EXPLICIT

    ATTR:  second_rotation_angle,	TYPE: plane_angle_measure -- EXPLICIT


  SUB- ENTITY(10)	low_order_kinematic_pair_value
    REDCR: applies_to_pair,	TYPE: low_order_kinematic_pair -- EXPLICIT
      -- OVERRIDING ENTITY: pair_value

    ATTR:  actual_translation_x,	TYPE: length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  actual_translation_y,	TYPE: length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  actual_translation_z,	TYPE: length_measure -- EXPLICIT

    ATTR:  actual_rotation_x,	TYPE: plane_angle_measure -- EXPLICIT

    ATTR:  actual_rotation_y,	TYPE: plane_angle_measure -- EXPLICIT

    ATTR:  actual_rotation_z,	TYPE: plane_angle_measure -- EXPLICIT


  SUB- ENTITY(11)	prismatic_pair_value
    REDCR: applies_to_pair,	TYPE: prismatic_pair -- EXPLICIT
      -- OVERRIDING ENTITY: pair_value

    ATTR:  actual_translation,	TYPE: length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(12)	gear_pair_value
    REDCR: applies_to_pair,	TYPE: gear_pair -- EXPLICIT
      -- OVERRIDING ENTITY: pair_value

    ATTR:  actual_rotation_1,	TYPE: plane_angle_measure -- EXPLICIT

    ATTR:  actual_rotation_2,	TYPE: plane_angle_measure -- DERIVED
      := ( -actual_rotation_1 ) * SELF\pair_value.applies_to_pair\gear_pair.gear_ratio


  SUB- ENTITY(13)	rolling_curve_pair_value
    REDCR: applies_to_pair,	TYPE: rolling_curve_pair -- EXPLICIT
      -- OVERRIDING ENTITY: pair_value

    ATTR:  actual_point_on_curve_1,	TYPE: point_on_curve -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(14)	sliding_curve_pair_value
    REDCR: applies_to_pair,	TYPE: sliding_curve_pair -- EXPLICIT
      -- OVERRIDING ENTITY: pair_value

    ATTR:  actual_point_on_curve_1,	TYPE: point_on_curve -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  actual_point_on_curve_2,	TYPE: point_on_curve -- EXPLICIT


  SUB- ENTITY(15)	screw_pair_value
    REDCR: applies_to_pair,	TYPE: screw_pair -- EXPLICIT
      -- OVERRIDING ENTITY: pair_value

    ATTR:  actual_rotation,	TYPE: plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  actual_translation,	TYPE: length_measure -- DERIVED	(AMBIGUOUS/MASKED)
      := ( SELF\pair_value.applies_to_pair\screw_pair.pitch * plane_angle_for_pair_in_radian( SELF\pair_value
        .applies_to_pair, actual_rotation ) ) / ( 2 * PI )


  SUB- ENTITY(16)	unconstrained_pair_value
    REDCR: applies_to_pair,	TYPE: unconstrained_pair -- EXPLICIT
      -- OVERRIDING ENTITY: pair_value

    ATTR:  actual_placement,	TYPE: axis2_placement_3d -- EXPLICIT


  SUB- ENTITY(17)	planar_pair_value
    REDCR: applies_to_pair,	TYPE: planar_pair -- EXPLICIT
      -- OVERRIDING ENTITY: pair_value

    ATTR:  actual_rotation,	TYPE: plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  actual_translation_x,	TYPE: length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  actual_translation_y,	TYPE: length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(18)	rack_and_pinion_pair_value
    REDCR: applies_to_pair,	TYPE: rack_and_pinion_pair -- EXPLICIT
      -- OVERRIDING ENTITY: pair_value

    ATTR:  actual_displacement,	TYPE: length_measure -- EXPLICIT

    ATTR:  actual_rotation,	TYPE: plane_angle_measure -- DERIVED	(AMBIGUOUS/MASKED)
      := 0


  SUB- ENTITY(19)	point_on_surface_pair_value
    REDCR: applies_to_pair,	TYPE: point_on_surface_pair -- EXPLICIT
      -- OVERRIDING ENTITY: pair_value

    ATTR:  actual_point_on_surface,	TYPE: point_on_surface -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  input_orientation,	TYPE: spatial_rotation -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  actual_orientation,	TYPE: ypr_rotation -- DERIVED	(AMBIGUOUS/MASKED)
      := convert_spatial_to_ypr_rotation( SELF\pair_value.applies_to_pair, input_orientation )


  SUB- ENTITY(20)	point_on_planar_curve_pair_value
    REDCR: applies_to_pair,	TYPE: point_on_planar_curve_pair -- EXPLICIT
      -- OVERRIDING ENTITY: pair_value

    ATTR:  actual_point_on_curve,	TYPE: point_on_curve -- EXPLICIT

    ATTR:  input_orientation,	TYPE: spatial_rotation -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  actual_orientation,	TYPE: ypr_rotation -- DERIVED	(AMBIGUOUS/MASKED)
      := convert_spatial_to_ypr_rotation( SELF\pair_value.applies_to_pair, input_orientation )


*/


//MARK: - Partial Entity
  public final class _pair_value : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      ePAIR_VALUE.self
    }

    //ATTRIBUTES
    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _applies_to_pair: eKINEMATIC_PAIR // PLAIN EXPLICIT ATTRIBUTE

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._applies_to_pair.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._applies_to_pair.value.isValueEqualOptionally(to: rhs._applies_to_pair.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._applies_to_pair.value.isValueEqualOptionally(to: rhs._applies_to_pair.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(APPLIES_TO_PAIR: eKINEMATIC_PAIR) {
      self._applies_to_pair = APPLIES_TO_PAIR
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 1
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverRequiredParameter(as: eKINEMATIC_PAIR.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( APPLIES_TO_PAIR: p0 )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY pair_value
    ABSTRACT SUPERTYPE OF ( 
        ONEOF ( 
            sliding_surface_pair_value, 
            rolling_surface_pair_value, 
            revolute_pair_value, 
            prismatic_pair_value, 
            screw_pair_value, 
            cylindrical_pair_value, 
            spherical_pair_value, 
            sliding_curve_pair_value, 
            rolling_curve_pair_value, 
            gear_pair_value, 
            rack_and_pinion_pair_value, 
            universal_pair_value, 
            planar_pair_value, 
            unconstrained_pair_value, 
            point_on_surface_pair_value, 
            point_on_planar_curve_pair_value, 
            low_order_kinematic_pair_value ) )
    SUBTYPE OF ( geometric_representation_item );
      applies_to_pair  : kinematic_pair;
  END_ENTITY; -- pair_value (line:23406 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class ePAIR_VALUE : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _pair_value.self
    }
    public let partialEntity: _pair_value

    //MARK: SUPERTYPES
    public let super_eREPRESENTATION_ITEM: eREPRESENTATION_ITEM 	// [1]
    public let super_eGEOMETRIC_REPRESENTATION_ITEM: eGEOMETRIC_REPRESENTATION_ITEM 	// [2]
    public var super_ePAIR_VALUE: ePAIR_VALUE { return self } 	// [3]

    //MARK: SUBTYPES
    public var sub_eSPHERICAL_PAIR_VALUE: eSPHERICAL_PAIR_VALUE? {	// [4]
      return self.complexEntity.entityReference(eSPHERICAL_PAIR_VALUE.self)
    }

    public var sub_eREVOLUTE_PAIR_VALUE: eREVOLUTE_PAIR_VALUE? {	// [5]
      return self.complexEntity.entityReference(eREVOLUTE_PAIR_VALUE.self)
    }

    public var sub_eCYLINDRICAL_PAIR_VALUE: eCYLINDRICAL_PAIR_VALUE? {	// [6]
      return self.complexEntity.entityReference(eCYLINDRICAL_PAIR_VALUE.self)
    }

    public var sub_eSLIDING_SURFACE_PAIR_VALUE: eSLIDING_SURFACE_PAIR_VALUE? {	// [7]
      return self.complexEntity.entityReference(eSLIDING_SURFACE_PAIR_VALUE.self)
    }

    public var sub_eROLLING_SURFACE_PAIR_VALUE: eROLLING_SURFACE_PAIR_VALUE? {	// [8]
      return self.complexEntity.entityReference(eROLLING_SURFACE_PAIR_VALUE.self)
    }

    public var sub_eUNIVERSAL_PAIR_VALUE: eUNIVERSAL_PAIR_VALUE? {	// [9]
      return self.complexEntity.entityReference(eUNIVERSAL_PAIR_VALUE.self)
    }

    public var sub_eLOW_ORDER_KINEMATIC_PAIR_VALUE: eLOW_ORDER_KINEMATIC_PAIR_VALUE? {	// [10]
      return self.complexEntity.entityReference(eLOW_ORDER_KINEMATIC_PAIR_VALUE.self)
    }

    public var sub_ePRISMATIC_PAIR_VALUE: ePRISMATIC_PAIR_VALUE? {	// [11]
      return self.complexEntity.entityReference(ePRISMATIC_PAIR_VALUE.self)
    }

    public var sub_eGEAR_PAIR_VALUE: eGEAR_PAIR_VALUE? {	// [12]
      return self.complexEntity.entityReference(eGEAR_PAIR_VALUE.self)
    }

    public var sub_eROLLING_CURVE_PAIR_VALUE: eROLLING_CURVE_PAIR_VALUE? {	// [13]
      return self.complexEntity.entityReference(eROLLING_CURVE_PAIR_VALUE.self)
    }

    public var sub_eSLIDING_CURVE_PAIR_VALUE: eSLIDING_CURVE_PAIR_VALUE? {	// [14]
      return self.complexEntity.entityReference(eSLIDING_CURVE_PAIR_VALUE.self)
    }

    public var sub_eSCREW_PAIR_VALUE: eSCREW_PAIR_VALUE? {	// [15]
      return self.complexEntity.entityReference(eSCREW_PAIR_VALUE.self)
    }

    public var sub_eUNCONSTRAINED_PAIR_VALUE: eUNCONSTRAINED_PAIR_VALUE? {	// [16]
      return self.complexEntity.entityReference(eUNCONSTRAINED_PAIR_VALUE.self)
    }

    public var sub_ePLANAR_PAIR_VALUE: ePLANAR_PAIR_VALUE? {	// [17]
      return self.complexEntity.entityReference(ePLANAR_PAIR_VALUE.self)
    }

    public var sub_eRACK_AND_PINION_PAIR_VALUE: eRACK_AND_PINION_PAIR_VALUE? {	// [18]
      return self.complexEntity.entityReference(eRACK_AND_PINION_PAIR_VALUE.self)
    }

    public var sub_ePOINT_ON_SURFACE_PAIR_VALUE: ePOINT_ON_SURFACE_PAIR_VALUE? {	// [19]
      return self.complexEntity.entityReference(ePOINT_ON_SURFACE_PAIR_VALUE.self)
    }

    public var sub_ePOINT_ON_PLANAR_CURVE_PAIR_VALUE: ePOINT_ON_PLANAR_CURVE_PAIR_VALUE? {	// [20]
      return self.complexEntity.entityReference(ePOINT_ON_PLANAR_CURVE_PAIR_VALUE.self)
    }


    //MARK: ATTRIBUTES
    // ACTUAL_POINT_ON_CURVE_1: (2 AMBIGUOUS REFs)

    // ACTUAL_ORIENTATION: (3 AMBIGUOUS REFs)

    // ACTUAL_TRANSLATION_Y: (2 AMBIGUOUS REFs)

    // ACTUAL_TRANSLATION_X: (2 AMBIGUOUS REFs)

    // ACTUAL_TRANSLATION: (3 AMBIGUOUS REFs)

    // ACTUAL_POINT_ON_SURFACE: (2 AMBIGUOUS REFs)

    // INPUT_ORIENTATION: (3 AMBIGUOUS REFs)

    // ACTUAL_ROTATION: (7 AMBIGUOUS REFs)

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSLIDING_CURVE_PAIR_VALUE`` )
    public var ACTUAL_POINT_ON_CURVE_2: ePOINT_ON_CURVE?  {
      get {
        return sub_eSLIDING_CURVE_PAIR_VALUE?.partialEntity._actual_point_on_curve_2
      }
      set(newValue) {
        guard let partial = sub_eSLIDING_CURVE_PAIR_VALUE?.super_eSLIDING_CURVE_PAIR_VALUE.partialEntity
          else { return }
        partial._actual_point_on_curve_2 = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eLOW_ORDER_KINEMATIC_PAIR_VALUE`` )
    public var ACTUAL_TRANSLATION_Z: tLENGTH_MEASURE?  {
      get {
        return sub_eLOW_ORDER_KINEMATIC_PAIR_VALUE?.partialEntity._actual_translation_z
      }
      set(newValue) {
        guard let partial = sub_eLOW_ORDER_KINEMATIC_PAIR_VALUE?.super_eLOW_ORDER_KINEMATIC_PAIR_VALUE
          .partialEntity else { return }
        partial._actual_translation_z = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``ePAIR_VALUE`` )
    public var APPLIES_TO_PAIR: eKINEMATIC_PAIR {
      get {
        return SDAI.UNWRAP( self.partialEntity._applies_to_pair )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._applies_to_pair = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eUNIVERSAL_PAIR_VALUE`` )
    public var SECOND_ROTATION_ANGLE: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eUNIVERSAL_PAIR_VALUE?.partialEntity._second_rotation_angle
      }
      set(newValue) {
        guard let partial = sub_eUNIVERSAL_PAIR_VALUE?.super_eUNIVERSAL_PAIR_VALUE.partialEntity
          else { return }
        partial._second_rotation_angle = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePOINT_ON_PLANAR_CURVE_PAIR_VALUE`` )
    public var ACTUAL_POINT_ON_CURVE: ePOINT_ON_CURVE?  {
      get {
        return sub_ePOINT_ON_PLANAR_CURVE_PAIR_VALUE?.partialEntity._actual_point_on_curve
      }
      set(newValue) {
        guard let partial = sub_ePOINT_ON_PLANAR_CURVE_PAIR_VALUE?.super_ePOINT_ON_PLANAR_CURVE_PAIR_VALUE
          .partialEntity else { return }
        partial._actual_point_on_curve = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eUNCONSTRAINED_PAIR_VALUE`` )
    public var ACTUAL_PLACEMENT: eAXIS2_PLACEMENT_3D?  {
      get {
        return sub_eUNCONSTRAINED_PAIR_VALUE?.partialEntity._actual_placement
      }
      set(newValue) {
        guard let partial = sub_eUNCONSTRAINED_PAIR_VALUE?.super_eUNCONSTRAINED_PAIR_VALUE.partialEntity
          else { return }
        partial._actual_placement = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eUNIVERSAL_PAIR_VALUE`` )
    public var FIRST_ROTATION_ANGLE: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eUNIVERSAL_PAIR_VALUE?.partialEntity._first_rotation_angle
      }
      set(newValue) {
        guard let partial = sub_eUNIVERSAL_PAIR_VALUE?.super_eUNIVERSAL_PAIR_VALUE.partialEntity
          else { return }
        partial._first_rotation_angle = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eGEAR_PAIR_VALUE`` )
    public var ACTUAL_ROTATION_2: tPLANE_ANGLE_MEASURE?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"ACTUAL_ROTATION_2") {
          return cached.value as! tPLANE_ANGLE_MEASURE? 
        }
        guard let origin = sub_eGEAR_PAIR_VALUE else { return nil }
        let value = tPLANE_ANGLE_MEASURE(origin.partialEntity._actual_rotation_2__getter(SELF: origin))
        updateCache(derivedAttributeName:"ACTUAL_ROTATION_2", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eGEAR_PAIR_VALUE`` )
    public var ACTUAL_ROTATION_1: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eGEAR_PAIR_VALUE?.partialEntity._actual_rotation_1
      }
      set(newValue) {
        guard let partial = sub_eGEAR_PAIR_VALUE?.super_eGEAR_PAIR_VALUE.partialEntity else { return }
        partial._actual_rotation_1 = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eLOW_ORDER_KINEMATIC_PAIR_VALUE`` )
    public var ACTUAL_ROTATION_Z: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eLOW_ORDER_KINEMATIC_PAIR_VALUE?.partialEntity._actual_rotation_z
      }
      set(newValue) {
        guard let partial = sub_eLOW_ORDER_KINEMATIC_PAIR_VALUE?.super_eLOW_ORDER_KINEMATIC_PAIR_VALUE
          .partialEntity else { return }
        partial._actual_rotation_z = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eLOW_ORDER_KINEMATIC_PAIR_VALUE`` )
    public var ACTUAL_ROTATION_X: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eLOW_ORDER_KINEMATIC_PAIR_VALUE?.partialEntity._actual_rotation_x
      }
      set(newValue) {
        guard let partial = sub_eLOW_ORDER_KINEMATIC_PAIR_VALUE?.super_eLOW_ORDER_KINEMATIC_PAIR_VALUE
          .partialEntity else { return }
        partial._actual_rotation_x = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eLOW_ORDER_KINEMATIC_PAIR_VALUE`` )
    public var ACTUAL_ROTATION_Y: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eLOW_ORDER_KINEMATIC_PAIR_VALUE?.partialEntity._actual_rotation_y
      }
      set(newValue) {
        guard let partial = sub_eLOW_ORDER_KINEMATIC_PAIR_VALUE?.super_eLOW_ORDER_KINEMATIC_PAIR_VALUE
          .partialEntity else { return }
        partial._actual_rotation_y = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eRACK_AND_PINION_PAIR_VALUE`` )
    public var ACTUAL_DISPLACEMENT: tLENGTH_MEASURE?  {
      get {
        return sub_eRACK_AND_PINION_PAIR_VALUE?.partialEntity._actual_displacement
      }
      set(newValue) {
        guard let partial = sub_eRACK_AND_PINION_PAIR_VALUE?.super_eRACK_AND_PINION_PAIR_VALUE.partialEntity
          else { return }
        partial._actual_displacement = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eREPRESENTATION_ITEM`` )
    public var NAME: tLABEL {
      get {
        return SDAI.UNWRAP( super_eREPRESENTATION_ITEM.partialEntity._name )
      }
      set(newValue) {
        let partial = super_eREPRESENTATION_ITEM.partialEntity
        partial._name = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSLIDING_SURFACE_PAIR_VALUE`` )
    public var ACTUAL_POINT_ON_SURFACE_2: ePOINT_ON_SURFACE?  {
      get {
        return sub_eSLIDING_SURFACE_PAIR_VALUE?.partialEntity._actual_point_on_surface_2
      }
      set(newValue) {
        guard let partial = sub_eSLIDING_SURFACE_PAIR_VALUE?.super_eSLIDING_SURFACE_PAIR_VALUE.partialEntity
          else { return }
        partial._actual_point_on_surface_2 = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSLIDING_SURFACE_PAIR_VALUE`` )
    public var ACTUAL_POINT_ON_SURFACE_1: ePOINT_ON_SURFACE?  {
      get {
        return sub_eSLIDING_SURFACE_PAIR_VALUE?.partialEntity._actual_point_on_surface_1
      }
      set(newValue) {
        guard let partial = sub_eSLIDING_SURFACE_PAIR_VALUE?.super_eSLIDING_SURFACE_PAIR_VALUE.partialEntity
          else { return }
        partial._actual_point_on_surface_1 = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUPER( ``eGEOMETRIC_REPRESENTATION_ITEM`` )
    public var DIM: tDIMENSION_COUNT?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"DIM") {
          return cached.value as! tDIMENSION_COUNT? 
        }
        let origin = super_eGEOMETRIC_REPRESENTATION_ITEM
        let value = tDIMENSION_COUNT(origin.partialEntity._dim__getter(SELF: origin))
        updateCache(derivedAttributeName:"DIM", value:value)
        return value
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_pair_value.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eREPRESENTATION_ITEM.self) else { return nil }
      self.super_eREPRESENTATION_ITEM = super1

      guard let super2 = complexEntity?.entityReference(eGEOMETRIC_REPRESENTATION_ITEM.self) else { return nil }
      self.super_eGEOMETRIC_REPRESENTATION_ITEM = super2

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "PAIR_VALUE", type: self, explicitAttributeCount: 1)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eREPRESENTATION_ITEM.self)
      entityDef.add(supertype: eGEOMETRIC_REPRESENTATION_ITEM.self)
      entityDef.add(supertype: ePAIR_VALUE.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "ACTUAL_POINT_ON_CURVE_2", keyPath: \ePAIR_VALUE.ACTUAL_POINT_ON_CURVE_2, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "ACTUAL_TRANSLATION_Z", keyPath: \ePAIR_VALUE.ACTUAL_TRANSLATION_Z, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "APPLIES_TO_PAIR", keyPath: \ePAIR_VALUE.APPLIES_TO_PAIR, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "SECOND_ROTATION_ANGLE", keyPath: \ePAIR_VALUE.SECOND_ROTATION_ANGLE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "ACTUAL_POINT_ON_CURVE", keyPath: \ePAIR_VALUE.ACTUAL_POINT_ON_CURVE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "ACTUAL_PLACEMENT", keyPath: \ePAIR_VALUE.ACTUAL_PLACEMENT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "FIRST_ROTATION_ANGLE", keyPath: \ePAIR_VALUE.FIRST_ROTATION_ANGLE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "ACTUAL_ROTATION_2", keyPath: \ePAIR_VALUE.ACTUAL_ROTATION_2, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "ACTUAL_ROTATION_1", keyPath: \ePAIR_VALUE.ACTUAL_ROTATION_1, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "ACTUAL_ROTATION_Z", keyPath: \ePAIR_VALUE.ACTUAL_ROTATION_Z, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "ACTUAL_ROTATION_X", keyPath: \ePAIR_VALUE.ACTUAL_ROTATION_X, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "ACTUAL_ROTATION_Y", keyPath: \ePAIR_VALUE.ACTUAL_ROTATION_Y, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "ACTUAL_DISPLACEMENT", keyPath: \ePAIR_VALUE.ACTUAL_DISPLACEMENT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "NAME", keyPath: \ePAIR_VALUE.NAME, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "ACTUAL_POINT_ON_SURFACE_2", keyPath: \ePAIR_VALUE.ACTUAL_POINT_ON_SURFACE_2, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "ACTUAL_POINT_ON_SURFACE_1", keyPath: \ePAIR_VALUE.ACTUAL_POINT_ON_SURFACE_1, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "DIM", keyPath: \ePAIR_VALUE.DIM, 
        kind: .derived, source: .superEntity, mayYieldEntityReference: false)

      return entityDef
    }

  }
}
