/* file: product_definition_occurrence.swift 	 generated: Mon Jan  3 16:32:52 2022 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.1, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY product_definition_occurrence
    SUPERTYPE OF ( 
        product_definition_specified_occurrence 
        ANDOR
        product_definition_occurrence_reference_with_local_representation );
      id           : identifier;
      name         : OPTIONAL label;
      description  : OPTIONAL text;
      definition   : OPTIONAL product_definition_or_reference_or_occurrence;
      quantity     : OPTIONAL measure_with_unit;
    DERIVE
      descendant_occurrences  : SET [0 : ?] OF product_definition_specified_occurrence := 
                                  get_descendant_occurrences( SELF );
    INVERSE
      assembly_usages : SET [0 : ?] OF assembly_component_usage FOR related_product_definition -- defined in ENTITY: product_definition_relationship;
      child_occurrences : SET [0 : ?] OF product_definition_specified_occurrence FOR occurrence_usage -- defined in ENTITY: product_definition_specified_occurrence;
    WHERE
      wr1: ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PRODUCT_DEFINITION_SPECIFIED_OCCURRENCE' IN 
               TYPEOF( SELF ) ) XOR ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
               + 'PRODUCT_DEFINITION_OCCURRENCE'  IN TYPEOF( definition ) ) OR ( 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PRODUCT_DEFINITION_OCCURRENCE_REFERENCE'  IN 
               TYPEOF( definition ) ) ) );
      wr2: ( EXISTS( definition ) OR ( SIZEOF( USEDIN( SELF, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
               + 'CONFIGURATION_DESIGN.DESIGN'  ) ) > 0 ) );
      wr3: ( ( NOT ( 'NUMBER' IN TYPEOF( quantity.value_component ) ) ) OR ( quantity.value_component > 0 ) );
  END_ENTITY; -- product_definition_occurrence (line:26126 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  ENTITY(SELF)	product_definition_occurrence
    ATTR:  id,	TYPE: identifier -- EXPLICIT

    ATTR:  name,	TYPE: OPTIONAL label -- EXPLICIT

    ATTR:  description,	TYPE: OPTIONAL text -- EXPLICIT

    ATTR:  definition,	TYPE: OPTIONAL product_definition_or_reference_or_occurrence -- EXPLICIT
      -- possibly overriden by
          ENTITY: product_definition_specified_occurrence,	TYPE: product_definition_occurrence_or_reference

    ATTR:  quantity,	TYPE: OPTIONAL measure_with_unit -- EXPLICIT

    ATTR:  descendant_occurrences,	TYPE: SET [0 : ?] OF product_definition_specified_occurrence -- DERIVED
      := get_descendant_occurrences( SELF )

    ATTR:  assembly_usages,	TYPE: SET [0 : ?] OF assembly_component_usage -- INVERSE
      FOR related_product_definition;

    ATTR:  child_occurrences,	TYPE: SET [0 : ?] OF product_definition_specified_occurrence -- INVERSE
      FOR occurrence_usage;


  SUB- ENTITY(2)	product_definition_specified_occurrence
    REDCR: definition,	TYPE: product_definition_occurrence_or_reference -- EXPLICIT
      -- OVERRIDING ENTITY: product_definition_occurrence

    ATTR:  occurrence_usage,	TYPE: product_definition_occurrence_or_reference -- EXPLICIT
      -- observed by
        ENTITY(1): product_definition_occurrence,	ATTR: child_occurrences,	TYPE: SET [0 : ?] OF
          product_definition_specified_occurrence


  SUB- ENTITY(3)	product_definition_occurrence_reference_with_local_representation
    (no local attributes)

*/


//MARK: - Partial Entity
  public final class _product_definition_occurrence : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      ePRODUCT_DEFINITION_OCCURRENCE.self
    }

    //ATTRIBUTES
    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _id: tIDENTIFIER // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _name: tLABEL?  // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _description: tTEXT?  // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _definition: sPRODUCT_DEFINITION_OR_REFERENCE_OR_OCCURRENCE?  // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _quantity: eMEASURE_WITH_UNIT?  // PLAIN EXPLICIT ATTRIBUTE

    /// DERIVE ATTRIBUTE
    internal func _descendant_occurrences__getter(SELF: ePRODUCT_DEFINITION_OCCURRENCE) -> (SDAI.SET<
      ePRODUCT_DEFINITION_SPECIFIED_OCCURRENCE>/*[0:nil]*/ )?  {

      let _TEMP1 = GET_DESCENDANT_OCCURRENCES(SELF)
      return _TEMP1
    }

    /// INVERSE AGGREGATE ATTRIBUTE
    /// observing _product_definition_relationship ._related_product_definition
    internal var _assembly_usages: SDAI.SET<eASSEMBLY_COMPONENT_USAGE> {
      return __assembly_usages.map{ $0.reference }
    }
    private var __assembly_usages = SDAI.SET<SDAI.UnownedWrap<eASSEMBLY_COMPONENT_USAGE>>(
      bound1: SDAI.UNWRAP(SDAI.INTEGER(0)), bound2: (nil as SDAI.INTEGER?), 
      SDAI.EMPLY_AGGREGATE) // unowned backing store
    /// INVERSE AGGREGATE ATTR SUPPORT(ADDER)
    internal func _assembly_usages__observeAddedReference(in complex: SDAI.ComplexEntity) {
      guard let newSource = complex.entityReference(eASSEMBLY_COMPONENT_USAGE.self) else { return }
      self.__assembly_usages.add(member: SDAI.UnownedWrap(newSource) )
    }
    /// INVERSE AGGREGATE ATTR SUPPORT(REMOVER)
    internal func _assembly_usages__observeRemovedReference(in complex: SDAI.ComplexEntity) {
      guard let oldSource = complex.entityReference(eASSEMBLY_COMPONENT_USAGE.self) else { return }
      let success = self.__assembly_usages.remove(member: SDAI.UnownedWrap(oldSource) )
      assert(success, "failed to remove inverse attribute element")
    }
    /// INVERSE AGGREGATE ATTR SUPPORT(LEAVING REFERENCE OWNER)
    internal func _assembly_usages__observe(leavingReferencerOwner complex: SDAI.ComplexEntity) {
      guard let oldSource = complex.entityReference(eASSEMBLY_COMPONENT_USAGE.self) else { return }
      let success = self.__assembly_usages.removeAll(member: SDAI.UnownedWrap(oldSource) )
      assert(success, "failed to remove inverse attribute elements")
    }

    /// INVERSE AGGREGATE ATTRIBUTE
    /// observing _product_definition_specified_occurrence ._occurrence_usage
    internal var _child_occurrences: SDAI.SET<ePRODUCT_DEFINITION_SPECIFIED_OCCURRENCE> {
      return __child_occurrences.map{ $0.reference }
    }
    private var __child_occurrences = SDAI.SET<SDAI.UnownedWrap<ePRODUCT_DEFINITION_SPECIFIED_OCCURRENCE>>(
      bound1: SDAI.UNWRAP(SDAI.INTEGER(0)), bound2: (nil as SDAI.INTEGER?), 
      SDAI.EMPLY_AGGREGATE) // unowned backing store
    /// INVERSE AGGREGATE ATTR SUPPORT(ADDER)
    internal func _child_occurrences__observeAddedReference(in complex: SDAI.ComplexEntity) {
      guard let newSource = complex.entityReference(ePRODUCT_DEFINITION_SPECIFIED_OCCURRENCE.self) else { return }
      self.__child_occurrences.add(member: SDAI.UnownedWrap(newSource) )
    }
    /// INVERSE AGGREGATE ATTR SUPPORT(REMOVER)
    internal func _child_occurrences__observeRemovedReference(in complex: SDAI.ComplexEntity) {
      guard let oldSource = complex.entityReference(ePRODUCT_DEFINITION_SPECIFIED_OCCURRENCE.self) else { return }
      let success = self.__child_occurrences.remove(member: SDAI.UnownedWrap(oldSource) )
      assert(success, "failed to remove inverse attribute element")
    }
    /// INVERSE AGGREGATE ATTR SUPPORT(LEAVING REFERENCE OWNER)
    internal func _child_occurrences__observe(leavingReferencerOwner complex: SDAI.ComplexEntity) {
      guard let oldSource = complex.entityReference(ePRODUCT_DEFINITION_SPECIFIED_OCCURRENCE.self) else { return }
      let success = self.__child_occurrences.removeAll(member: SDAI.UnownedWrap(oldSource) )
      assert(success, "failed to remove inverse attribute elements")
    }

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      //SELECT data types (indirectly) referencing the current type as a member of the select list
      members.insert(SDAI.STRING(sEXTERNAL_IDENTIFICATION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sIDENTIFICATION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sACTION_ITEMS.typeName)) // -> sIDENTIFICATION_ITEM
      members.insert(SDAI.STRING(sCHANGE_MANAGEMENT_OBJECT.typeName)) // -> sACTION_ITEMS
      members.insert(SDAI.STRING(sIR_USAGE_ITEM.typeName)) // -> sIDENTIFICATION_ITEM
      members.insert(SDAI.STRING(sPRODUCT_DEFINITION_OCCURRENCE_OR_REFERENCE.typeName)) // -> Self
      members.insert(SDAI.STRING(sPRODUCT_DEFINITION_OR_REFERENCE_OR_OCCURRENCE.typeName)) // -> Self
      members.insert(SDAI.STRING(sA3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT.typeName)) // -> sPRODUCT_DEFINITION_OR_REFERENCE_OR_OCCURRENCE
      members.insert(SDAI.STRING(sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT.typeName)) // -> sA3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT
      members.insert(SDAI.STRING(sEQUIVALENCE_PRODUCT_DATA_SELECT.typeName)) // -> sPRODUCT_DEFINITION_OR_REFERENCE_OR_OCCURRENCE
      members.insert(SDAI.STRING(sINSPECTED_EQUIVALENCE_ELEMENT_SELECT.typeName)) // -> sPRODUCT_DEFINITION_OR_REFERENCE_OR_OCCURRENCE
      members.insert(SDAI.STRING(sCHARACTERIZED_PRODUCT_DEFINITION.typeName)) // -> Self
      members.insert(SDAI.STRING(sCHARACTERIZED_DEFINITION.typeName)) // -> sCHARACTERIZED_PRODUCT_DEFINITION
      members.insert(SDAI.STRING(sGENERAL_ORGANIZATIONAL_DATA_SELECT.typeName)) // -> Self
      members.insert(SDAI.STRING(sEVENT_OCCURRENCE_ITEM.typeName)) // -> sGENERAL_ORGANIZATIONAL_DATA_SELECT
      members.insert(SDAI.STRING(sPRODUCT_DEFINITION_OR_REFERENCE.typeName)) // -> Self
      members.insert(SDAI.STRING(sPROJECT_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sCONFIGURATION_DESIGN_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sCERTIFICATION_ITEM.typeName)) // -> Self
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._id.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._name?.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._description?.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._definition?.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._quantity?.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._id.value.isValueEqualOptionally(to: rhs._id.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._name?.value.isValueEqualOptionally(to: rhs._name?.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._description?.value.isValueEqualOptionally(to: rhs._description?.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._definition?.value.isValueEqualOptionally(to: rhs._definition?.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._quantity?.value.isValueEqualOptionally(to: rhs._quantity?.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._id.value.isValueEqualOptionally(to: rhs._id.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._name?.value.isValueEqualOptionally(to: rhs._name?.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._description?.value.isValueEqualOptionally(to: rhs._description?.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._definition?.value.isValueEqualOptionally(to: rhs._definition?.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._quantity?.value.isValueEqualOptionally(to: rhs._quantity?.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: ePRODUCT_DEFINITION_OCCURRENCE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.TYPEOF(SELF, IS: ePRODUCT_DEFINITION_SPECIFIED_OCCURRENCE.self)
      let _TEMP2 = SDAI.TYPEOF(SELF.DEFINITION, IS: ePRODUCT_DEFINITION_OCCURRENCE.self)
      let _TEMP3 = SDAI.TYPEOF(SELF.DEFINITION, IS: ePRODUCT_DEFINITION_OCCURRENCE_REFERENCE.self)
      let _TEMP4 = _TEMP2 || _TEMP3
      let _TEMP5 = _TEMP1 .!=. _TEMP4
      return _TEMP5
    }
    public static func WHERE_wr2(SELF: ePRODUCT_DEFINITION_OCCURRENCE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.EXISTS(SELF.DEFINITION)
      let _TEMP2 = SDAI.USEDIN(T: SELF, ROLE: \AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF
        .eCONFIGURATION_DESIGN.DESIGN)
      let _TEMP3 = SDAI.SIZEOF(_TEMP2)
      let _TEMP4 = _TEMP3 > SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      let _TEMP5 = _TEMP1 || _TEMP4
      return _TEMP5
    }
    public static func WHERE_wr3(SELF: ePRODUCT_DEFINITION_OCCURRENCE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.TYPEOF(SELF.QUANTITY?.VALUE_COMPONENT, IS: SDAI.NUMBER.self)
      let _TEMP2 =  !_TEMP1
      let _TEMP3 = SELF.QUANTITY?.VALUE_COMPONENT
      let _TEMP4 = _TEMP3 > SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      let _TEMP5 = _TEMP2 || _TEMP4
      return _TEMP5
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(ID: tIDENTIFIER, NAME: tLABEL? , DESCRIPTION: tTEXT? , DEFINITION: 
                sPRODUCT_DEFINITION_OR_REFERENCE_OR_OCCURRENCE? , QUANTITY: eMEASURE_WITH_UNIT? ) {
      self._id = ID
      self._name = NAME
      self._description = DESCRIPTION
      self._definition = DEFINITION
      self._quantity = QUANTITY
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 5
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverRequiredParameter(as: tIDENTIFIER.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p1) = exchangeStructure.recoverOptionalParameter(as: tLABEL.self, from: parameters[1])
      else { exchangeStructure.add(errorContext: "while recovering parameter #1 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p2) = exchangeStructure.recoverOptionalParameter(as: tTEXT.self, from: parameters[2])
      else { exchangeStructure.add(errorContext: "while recovering parameter #2 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p3) = exchangeStructure.recoverOptionalParameter(as: 
        sPRODUCT_DEFINITION_OR_REFERENCE_OR_OCCURRENCE.self, from: parameters[3])
      else { exchangeStructure.add(errorContext: "while recovering parameter #3 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p4) = exchangeStructure.recoverOptionalParameter(as: eMEASURE_WITH_UNIT.self, from: parameters[4])
      else { exchangeStructure.add(errorContext: "while recovering parameter #4 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( ID: p0, NAME: p1, DESCRIPTION: p2, DEFINITION: p3, QUANTITY: p4 )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY product_definition_occurrence
    SUPERTYPE OF ( 
        product_definition_specified_occurrence 
        ANDOR
        product_definition_occurrence_reference_with_local_representation );
      id           : identifier;
      name         : OPTIONAL label;
      description  : OPTIONAL text;
      definition   : OPTIONAL product_definition_or_reference_or_occurrence;
      quantity     : OPTIONAL measure_with_unit;
    DERIVE
      descendant_occurrences  : SET [0 : ?] OF product_definition_specified_occurrence := 
                                  get_descendant_occurrences( SELF );
    INVERSE
      assembly_usages : SET [0 : ?] OF assembly_component_usage FOR related_product_definition -- defined in ENTITY: product_definition_relationship;
      child_occurrences : SET [0 : ?] OF product_definition_specified_occurrence FOR occurrence_usage -- defined in ENTITY: product_definition_specified_occurrence;
    WHERE
      wr1: ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PRODUCT_DEFINITION_SPECIFIED_OCCURRENCE' IN 
               TYPEOF( SELF ) ) XOR ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
               + 'PRODUCT_DEFINITION_OCCURRENCE'  IN TYPEOF( definition ) ) OR ( 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PRODUCT_DEFINITION_OCCURRENCE_REFERENCE'  IN 
               TYPEOF( definition ) ) ) );
      wr2: ( EXISTS( definition ) OR ( SIZEOF( USEDIN( SELF, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
               + 'CONFIGURATION_DESIGN.DESIGN'  ) ) > 0 ) );
      wr3: ( ( NOT ( 'NUMBER' IN TYPEOF( quantity.value_component ) ) ) OR ( quantity.value_component > 0 ) );
  END_ENTITY; -- product_definition_occurrence (line:26126 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class ePRODUCT_DEFINITION_OCCURRENCE : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _product_definition_occurrence.self
    }
    public let partialEntity: _product_definition_occurrence

    //MARK: SUPERTYPES
    public var super_ePRODUCT_DEFINITION_OCCURRENCE: ePRODUCT_DEFINITION_OCCURRENCE { return self } 	// [1]

    //MARK: SUBTYPES
    public var sub_ePRODUCT_DEFINITION_SPECIFIED_OCCURRENCE: ePRODUCT_DEFINITION_SPECIFIED_OCCURRENCE? {	// [2]
      return self.complexEntity.entityReference(ePRODUCT_DEFINITION_SPECIFIED_OCCURRENCE.self)
    }

    public var sub_ePRODUCT_DEFINITION_OCCURRENCE_REFERENCE_WITH_LOCAL_REPRESENTATION: ePRODUCT_DEFINITION_OCCURRENCE_REFERENCE_WITH_LOCAL_REPRESENTATION? {	// [3]
      return self.complexEntity.entityReference(ePRODUCT_DEFINITION_OCCURRENCE_REFERENCE_WITH_LOCAL_REPRESENTATION.self)
    }


    //MARK: ATTRIBUTES
    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``ePRODUCT_DEFINITION_OCCURRENCE`` )
    public var DESCRIPTION: tTEXT?  {
      get {
        return self.partialEntity._description
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._description = newValue
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SELF( ``ePRODUCT_DEFINITION_OCCURRENCE`` )
    public var DESCENDANT_OCCURRENCES: (SDAI.SET<ePRODUCT_DEFINITION_SPECIFIED_OCCURRENCE>/*[0:nil]*/ )?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"DESCENDANT_OCCURRENCES") {
          return cached.value as! (SDAI.SET<ePRODUCT_DEFINITION_SPECIFIED_OCCURRENCE>/*[0:nil]*/ )? 
        }
        let origin = self
        let value = origin.partialEntity._descendant_occurrences__getter(SELF: origin)
        updateCache(derivedAttributeName:"DESCENDANT_OCCURRENCES", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``ePRODUCT_DEFINITION_OCCURRENCE`` )
    public var QUANTITY: eMEASURE_WITH_UNIT?  {
      get {
        return self.partialEntity._quantity
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._quantity = newValue
      }
    }

    /// __EXPLICIT(OBSERVED)__ attribute
    /// - origin: SUB( ``ePRODUCT_DEFINITION_SPECIFIED_OCCURRENCE`` )
    public var OCCURRENCE_USAGE: sPRODUCT_DEFINITION_OCCURRENCE_OR_REFERENCE?  {
      get {
        return sub_ePRODUCT_DEFINITION_SPECIFIED_OCCURRENCE?.partialEntity._occurrence_usage
      }
      set(newValue) {
        guard let partial = sub_ePRODUCT_DEFINITION_SPECIFIED_OCCURRENCE?.super_ePRODUCT_DEFINITION_SPECIFIED_OCCURRENCE
          .partialEntity else { return }
        partial._occurrence_usage = SDAI.UNWRAP(newValue)
      }
    }

    /// __INVERSE__ attribute
    /// observing ePRODUCT_DEFINITION_SPECIFIED_OCCURRENCE .OCCURRENCE_USAGE
    /// - origin: SELF( ``ePRODUCT_DEFINITION_OCCURRENCE`` )
    public var CHILD_OCCURRENCES: SDAI.SET<ePRODUCT_DEFINITION_SPECIFIED_OCCURRENCE>/*[0:nil]*/  {
      get {
        return SDAI.UNWRAP( self.partialEntity._child_occurrences )
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``ePRODUCT_DEFINITION_OCCURRENCE`` )
    public var ID: tIDENTIFIER {
      get {
        return SDAI.UNWRAP( self.partialEntity._id )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._id = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``ePRODUCT_DEFINITION_OCCURRENCE`` )
    public var DEFINITION: sPRODUCT_DEFINITION_OR_REFERENCE_OR_OCCURRENCE?  {
      get {
        return self.partialEntity._definition
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._definition = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``ePRODUCT_DEFINITION_OCCURRENCE`` )
    public var NAME: tLABEL?  {
      get {
        return self.partialEntity._name
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._name = newValue
      }
    }

    /// __INVERSE__ attribute
    /// observing ePRODUCT_DEFINITION_RELATIONSHIP .RELATED_PRODUCT_DEFINITION
    /// - origin: SELF( ``ePRODUCT_DEFINITION_OCCURRENCE`` )
    public var ASSEMBLY_USAGES: SDAI.SET<eASSEMBLY_COMPONENT_USAGE>/*[0:nil]*/  {
      get {
        return SDAI.UNWRAP( self.partialEntity._assembly_usages )
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_product_definition_occurrence.self) else { return nil }
      self.partialEntity = partial

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }

    //SIMPLE ENTITY REFERENCE
    public convenience init?(_ partial:_product_definition_occurrence) {
      let complex = SDAI.ComplexEntity(entities:[partial])
      self.init(complex: complex)
    }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _product_definition_occurrence.WHERE_wr1(SELF: instance)
      result[prefix2 + " .WHERE_wr2"] = _product_definition_occurrence.WHERE_wr2(SELF: instance)
      result[prefix2 + " .WHERE_wr3"] = _product_definition_occurrence.WHERE_wr3(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "PRODUCT_DEFINITION_OCCURRENCE", type: self, explicitAttributeCount: 5)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: ePRODUCT_DEFINITION_OCCURRENCE.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "DESCRIPTION", keyPath: \ePRODUCT_DEFINITION_OCCURRENCE.DESCRIPTION, 
        kind: .explicitOptional, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "DESCENDANT_OCCURRENCES", keyPath: \ePRODUCT_DEFINITION_OCCURRENCE.DESCENDANT_OCCURRENCES, 
        kind: .derived, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "QUANTITY", keyPath: \ePRODUCT_DEFINITION_OCCURRENCE.QUANTITY, 
        kind: .explicitOptional, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "OCCURRENCE_USAGE", keyPath: \ePRODUCT_DEFINITION_OCCURRENCE.OCCURRENCE_USAGE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "CHILD_OCCURRENCES", keyPath: \ePRODUCT_DEFINITION_OCCURRENCE.CHILD_OCCURRENCES, 
        kind: .inverse, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "ID", keyPath: \ePRODUCT_DEFINITION_OCCURRENCE.ID, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "DEFINITION", keyPath: \ePRODUCT_DEFINITION_OCCURRENCE.DEFINITION, 
        kind: .explicitOptional, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "NAME", keyPath: \ePRODUCT_DEFINITION_OCCURRENCE.NAME, 
        kind: .explicitOptional, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "ASSEMBLY_USAGES", keyPath: \ePRODUCT_DEFINITION_OCCURRENCE.ASSEMBLY_USAGES, 
        kind: .inverse, source: .thisEntity, mayYieldEntityReference: true)

      return entityDef
    }

  }
}
