/* file: positioned_sketch.swift 	 generated: Sun Oct 31 15:32:10 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY positioned_sketch
    SUBTYPE OF ( geometric_representation_item );
      sketch_basis        : sketch_basis_select;
      auxiliary_elements  : SET [0 : ?] OF auxiliary_geometric_representation_item;
    WHERE
      wr1: ( NOT ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CURVE_BOUNDED_SURFACE' IN TYPEOF( 
               sketch_basis ) ) AND ( NOT ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PLANE' IN 
               TYPEOF( sketch_basis\curve_bounded_surface.basis_surface ) ) ) ) );
      wr2: ( NOT ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.FACE_SURFACE' IN TYPEOF( sketch_basis ) ) 
               AND ( NOT ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PLANE' IN TYPEOF( sketch_basis\
               face_surface.face_geometry ) ) ) ) );
      wr3: ( SIZEOF( QUERY ( q <* auxiliary_elements | ( SIZEOF( TYPEOF( q ) * [
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.POINT' , 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CURVE' ] ) = 0 ) ) ) = 0 );
      wr4: ( SIZEOF( QUERY ( q <* auxiliary_elements | ( q\geometric_representation_item.dim <> 3 ) ) ) = 0 );
  END_ENTITY; -- positioned_sketch (line:25418 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	representation_item
    ATTR:  name,	TYPE: label -- EXPLICIT


  SUPER- ENTITY(2)	geometric_representation_item
    ATTR:  dim,	TYPE: dimension_count -- DERIVED
      := dimension_of( SELF )


  ENTITY(SELF)	positioned_sketch
    ATTR:  sketch_basis,	TYPE: sketch_basis_select -- EXPLICIT

    ATTR:  auxiliary_elements,	TYPE: SET [0 : ?] OF auxiliary_geometric_representation_item -- EXPLICIT


*/


//MARK: - Partial Entity
  public final class _positioned_sketch : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      ePOSITIONED_SKETCH.self
    }

    //ATTRIBUTES
    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _sketch_basis: sSKETCH_BASIS_SELECT // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _auxiliary_elements: SDAI.SET<eAUXILIARY_GEOMETRIC_REPRESENTATION_ITEM>/*[0:nil]*/  // PLAIN EXPLICIT ATTRIBUTE

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      //SELECT data types (indirectly) referencing the current type as a member of the select list
      members.insert(SDAI.STRING(sSKETCH_TYPE_SELECT.typeName)) // -> Self
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._sketch_basis.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._auxiliary_elements.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._sketch_basis.value.isValueEqualOptionally(to: rhs._sketch_basis.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._auxiliary_elements.value.isValueEqualOptionally(to: rhs._auxiliary_elements.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._sketch_basis.value.isValueEqualOptionally(to: rhs._sketch_basis.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._auxiliary_elements.value.isValueEqualOptionally(to: rhs._auxiliary_elements.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: ePOSITIONED_SKETCH?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.TYPEOF(SELF.SKETCH_BASIS, IS: eCURVE_BOUNDED_SURFACE.self)
      let _TEMP2 = SDAI.TYPEOF(SELF.SKETCH_BASIS.GROUP_REF(eCURVE_BOUNDED_SURFACE.self)?.BASIS_SURFACE, 
        IS: ePLANE.self)
      let _TEMP3 =  !_TEMP2
      let _TEMP4 = _TEMP1 && _TEMP3
      let _TEMP5 =  !_TEMP4
      return _TEMP5
    }
    public static func WHERE_wr2(SELF: ePOSITIONED_SKETCH?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.TYPEOF(SELF.SKETCH_BASIS, IS: eFACE_SURFACE.self)
      let _TEMP2 = SDAI.TYPEOF(SELF.SKETCH_BASIS.GROUP_REF(eFACE_SURFACE.self)?.FACE_GEOMETRY, 
        IS: ePLANE.self)
      let _TEMP3 =  !_TEMP2
      let _TEMP4 = _TEMP1 && _TEMP3
      let _TEMP5 =  !_TEMP4
      return _TEMP5
    }
    public static func WHERE_wr3(SELF: ePOSITIONED_SKETCH?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.AUXILIARY_ELEMENTS
        .QUERY{ Q in 

          let _TEMP1 = SDAI.TYPEOF(Q)
          let _TEMP2 = ([SDAI.AIE(SDAI.STRING("AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.POINT")), 
            SDAI.AIE(SDAI.STRING("AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CURVE"))] 
            as [SDAI.AggregationInitializerElement<SDAI.STRING>])
          let _TEMP3 = SDAI.FORCE_OPTIONAL(_TEMP1) * SDAI.FORCE_OPTIONAL(_TEMP2)
          let _TEMP4 = SDAI.SIZEOF(_TEMP3)
          let _TEMP5 = _TEMP4 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
          return _TEMP5 }
      let _TEMP2 = SDAI.SIZEOF(_TEMP1)
      let _TEMP3 = _TEMP2 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      return _TEMP3
    }
    public static func WHERE_wr4(SELF: ePOSITIONED_SKETCH?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.AUXILIARY_ELEMENTS
        .QUERY{ Q in 

          let _TEMP1 = Q.GROUP_REF(eGEOMETRIC_REPRESENTATION_ITEM.self)
          let _TEMP2 = _TEMP1?.DIM
          let _TEMP3 = _TEMP2 .!=. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(3))
          return _TEMP3 }
      let _TEMP2 = SDAI.SIZEOF(_TEMP1)
      let _TEMP3 = _TEMP2 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      return _TEMP3
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(SKETCH_BASIS: sSKETCH_BASIS_SELECT, AUXILIARY_ELEMENTS: SDAI.SET<
                eAUXILIARY_GEOMETRIC_REPRESENTATION_ITEM>/*[0:nil]*/ ) {
      self._sketch_basis = SKETCH_BASIS
      self._auxiliary_elements = AUXILIARY_ELEMENTS
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 2
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverRequiredParameter(as: sSKETCH_BASIS_SELECT.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p1) = exchangeStructure.recoverRequiredParameter(as: SDAI.SET<
        eAUXILIARY_GEOMETRIC_REPRESENTATION_ITEM>.self, from: parameters[1])
      else { exchangeStructure.add(errorContext: "while recovering parameter #1 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( SKETCH_BASIS: p0, AUXILIARY_ELEMENTS: p1 )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY positioned_sketch
    SUBTYPE OF ( geometric_representation_item );
      sketch_basis        : sketch_basis_select;
      auxiliary_elements  : SET [0 : ?] OF auxiliary_geometric_representation_item;
    WHERE
      wr1: ( NOT ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CURVE_BOUNDED_SURFACE' IN TYPEOF( 
               sketch_basis ) ) AND ( NOT ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PLANE' IN 
               TYPEOF( sketch_basis\curve_bounded_surface.basis_surface ) ) ) ) );
      wr2: ( NOT ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.FACE_SURFACE' IN TYPEOF( sketch_basis ) ) 
               AND ( NOT ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PLANE' IN TYPEOF( sketch_basis\
               face_surface.face_geometry ) ) ) ) );
      wr3: ( SIZEOF( QUERY ( q <* auxiliary_elements | ( SIZEOF( TYPEOF( q ) * [
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.POINT' , 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CURVE' ] ) = 0 ) ) ) = 0 );
      wr4: ( SIZEOF( QUERY ( q <* auxiliary_elements | ( q\geometric_representation_item.dim <> 3 ) ) ) = 0 );
  END_ENTITY; -- positioned_sketch (line:25418 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class ePOSITIONED_SKETCH : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _positioned_sketch.self
    }
    public let partialEntity: _positioned_sketch

    //MARK: SUPERTYPES
    public let super_eREPRESENTATION_ITEM: eREPRESENTATION_ITEM 	// [1]
    public let super_eGEOMETRIC_REPRESENTATION_ITEM: eGEOMETRIC_REPRESENTATION_ITEM 	// [2]
    public var super_ePOSITIONED_SKETCH: ePOSITIONED_SKETCH { return self } 	// [3]

    //MARK: SUBTYPES

    //MARK: ATTRIBUTES
    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``ePOSITIONED_SKETCH`` )
    public var AUXILIARY_ELEMENTS: SDAI.SET<eAUXILIARY_GEOMETRIC_REPRESENTATION_ITEM>/*[0:nil]*/  {
      get {
        return SDAI.UNWRAP( self.partialEntity._auxiliary_elements )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._auxiliary_elements = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``ePOSITIONED_SKETCH`` )
    public var SKETCH_BASIS: sSKETCH_BASIS_SELECT {
      get {
        return SDAI.UNWRAP( self.partialEntity._sketch_basis )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._sketch_basis = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eREPRESENTATION_ITEM`` )
    public var NAME: tLABEL {
      get {
        return SDAI.UNWRAP( super_eREPRESENTATION_ITEM.partialEntity._name )
      }
      set(newValue) {
        let partial = super_eREPRESENTATION_ITEM.partialEntity
        partial._name = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUPER( ``eGEOMETRIC_REPRESENTATION_ITEM`` )
    public var DIM: tDIMENSION_COUNT?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"DIM") {
          return cached.value as! tDIMENSION_COUNT? 
        }
        let origin = super_eGEOMETRIC_REPRESENTATION_ITEM
        let value = tDIMENSION_COUNT(origin.partialEntity._dim__getter(SELF: origin))
        updateCache(derivedAttributeName:"DIM", value:value)
        return value
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_positioned_sketch.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eREPRESENTATION_ITEM.self) else { return nil }
      self.super_eREPRESENTATION_ITEM = super1

      guard let super2 = complexEntity?.entityReference(eGEOMETRIC_REPRESENTATION_ITEM.self) else { return nil }
      self.super_eGEOMETRIC_REPRESENTATION_ITEM = super2

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _positioned_sketch.WHERE_wr1(SELF: instance)
      result[prefix2 + " .WHERE_wr2"] = _positioned_sketch.WHERE_wr2(SELF: instance)
      result[prefix2 + " .WHERE_wr3"] = _positioned_sketch.WHERE_wr3(SELF: instance)
      result[prefix2 + " .WHERE_wr4"] = _positioned_sketch.WHERE_wr4(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "POSITIONED_SKETCH", type: self, explicitAttributeCount: 2)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eREPRESENTATION_ITEM.self)
      entityDef.add(supertype: eGEOMETRIC_REPRESENTATION_ITEM.self)
      entityDef.add(supertype: ePOSITIONED_SKETCH.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "AUXILIARY_ELEMENTS", keyPath: \ePOSITIONED_SKETCH.AUXILIARY_ELEMENTS, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "SKETCH_BASIS", keyPath: \ePOSITIONED_SKETCH.SKETCH_BASIS, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "NAME", keyPath: \ePOSITIONED_SKETCH.NAME, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "DIM", keyPath: \ePOSITIONED_SKETCH.DIM, 
        kind: .derived, source: .superEntity, mayYieldEntityReference: false)

      return entityDef
    }

  }
}
