/* file: person.swift 	 generated: Tue Nov 16 05:35:44 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY person;
      id             : identifier;
      last_name      : OPTIONAL label;
      first_name     : OPTIONAL label;
      middle_names   : OPTIONAL LIST [1 : ?] OF label;
      prefix_titles  : OPTIONAL LIST [1 : ?] OF label;
      suffix_titles  : OPTIONAL LIST [1 : ?] OF label;
    WHERE
      wr1: ( EXISTS( last_name ) OR EXISTS( first_name ) );
  END_ENTITY; -- person (line:24376 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  ENTITY(SELF)	person
    ATTR:  id,	TYPE: identifier -- EXPLICIT

    ATTR:  last_name,	TYPE: OPTIONAL label -- EXPLICIT

    ATTR:  first_name,	TYPE: OPTIONAL label -- EXPLICIT

    ATTR:  middle_names,	TYPE: OPTIONAL LIST [1 : ?] OF label -- EXPLICIT

    ATTR:  prefix_titles,	TYPE: OPTIONAL LIST [1 : ?] OF label -- EXPLICIT

    ATTR:  suffix_titles,	TYPE: OPTIONAL LIST [1 : ?] OF label -- EXPLICIT


*/


//MARK: - Partial Entity
  public final class _person : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      ePERSON.self
    }

    //ATTRIBUTES
    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _id: tIDENTIFIER // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _last_name: tLABEL?  // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _first_name: tLABEL?  // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _middle_names: (SDAI.LIST<tLABEL>/*[1:nil]*/ )?  // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _prefix_titles: (SDAI.LIST<tLABEL>/*[1:nil]*/ )?  // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _suffix_titles: (SDAI.LIST<tLABEL>/*[1:nil]*/ )?  // PLAIN EXPLICIT ATTRIBUTE

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      //SELECT data types (indirectly) referencing the current type as a member of the select list
      members.insert(SDAI.STRING(sDATE_AND_TIME_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sCLASSIFICATION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sACTION_ITEMS.typeName)) // -> sCLASSIFICATION_ITEM
      members.insert(SDAI.STRING(sCHANGE_MANAGEMENT_OBJECT.typeName)) // -> sACTION_ITEMS
      members.insert(SDAI.STRING(sIR_USAGE_ITEM.typeName)) // -> sCLASSIFICATION_ITEM
      members.insert(SDAI.STRING(sMULTI_LANGUAGE_ATTRIBUTE_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sEXTERNAL_IDENTIFICATION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sIDENTIFICATION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sEVIDENCE_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sACTION_REQUEST_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sPERSON_ORGANIZATION_SELECT.typeName)) // -> Self
      members.insert(SDAI.STRING(sSAME_AS_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sDATE_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sACTION_METHOD_ITEMS.typeName)) // -> Self
      members.insert(SDAI.STRING(sLOCATION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sGENERAL_ORGANIZATIONAL_DATA_SELECT.typeName)) // -> Self
      members.insert(SDAI.STRING(sEVENT_OCCURRENCE_ITEM.typeName)) // -> sGENERAL_ORGANIZATIONAL_DATA_SELECT
      members.insert(SDAI.STRING(sDESCRIPTION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sDOCUMENT_REFERENCE_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sGROUPABLE_ITEM.typeName)) // -> Self
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._id.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._last_name?.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._first_name?.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._middle_names?.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._prefix_titles?.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._suffix_titles?.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._id.value.isValueEqualOptionally(to: rhs._id.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._last_name?.value.isValueEqualOptionally(to: rhs._last_name?.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._first_name?.value.isValueEqualOptionally(to: rhs._first_name?.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._middle_names?.value.isValueEqualOptionally(to: rhs._middle_names?.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._prefix_titles?.value.isValueEqualOptionally(to: rhs._prefix_titles?.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._suffix_titles?.value.isValueEqualOptionally(to: rhs._suffix_titles?.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._id.value.isValueEqualOptionally(to: rhs._id.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._last_name?.value.isValueEqualOptionally(to: rhs._last_name?.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._first_name?.value.isValueEqualOptionally(to: rhs._first_name?.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._middle_names?.value.isValueEqualOptionally(to: rhs._middle_names?.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._prefix_titles?.value.isValueEqualOptionally(to: rhs._prefix_titles?.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._suffix_titles?.value.isValueEqualOptionally(to: rhs._suffix_titles?.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: ePERSON?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.EXISTS(SELF.LAST_NAME)
      let _TEMP2 = SDAI.EXISTS(SELF.FIRST_NAME)
      let _TEMP3 = _TEMP1 || _TEMP2
      return _TEMP3
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(ID: tIDENTIFIER, LAST_NAME: tLABEL? , FIRST_NAME: tLABEL? , 
                MIDDLE_NAMES: (SDAI.LIST<tLABEL>/*[1:nil]*/ )? , PREFIX_TITLES: (SDAI.LIST<tLABEL>/*[1:nil]*/ )? , 
                SUFFIX_TITLES: (SDAI.LIST<tLABEL>/*[1:nil]*/ )? ) {
      self._id = ID
      self._last_name = LAST_NAME
      self._first_name = FIRST_NAME
      self._middle_names = MIDDLE_NAMES
      self._prefix_titles = PREFIX_TITLES
      self._suffix_titles = SUFFIX_TITLES
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 6
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverRequiredParameter(as: tIDENTIFIER.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p1) = exchangeStructure.recoverOptionalParameter(as: tLABEL.self, from: parameters[1])
      else { exchangeStructure.add(errorContext: "while recovering parameter #1 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p2) = exchangeStructure.recoverOptionalParameter(as: tLABEL.self, from: parameters[2])
      else { exchangeStructure.add(errorContext: "while recovering parameter #2 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p3) = exchangeStructure.recoverOptionalParameter(as: SDAI.LIST<tLABEL>.self, from: parameters[3])
      else { exchangeStructure.add(errorContext: "while recovering parameter #3 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p4) = exchangeStructure.recoverOptionalParameter(as: SDAI.LIST<tLABEL>.self, from: parameters[4])
      else { exchangeStructure.add(errorContext: "while recovering parameter #4 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p5) = exchangeStructure.recoverOptionalParameter(as: SDAI.LIST<tLABEL>.self, from: parameters[5])
      else { exchangeStructure.add(errorContext: "while recovering parameter #5 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( ID: p0, LAST_NAME: p1, FIRST_NAME: p2, MIDDLE_NAMES: p3, PREFIX_TITLES: p4, SUFFIX_TITLES: p5 )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY person;
      id             : identifier;
      last_name      : OPTIONAL label;
      first_name     : OPTIONAL label;
      middle_names   : OPTIONAL LIST [1 : ?] OF label;
      prefix_titles  : OPTIONAL LIST [1 : ?] OF label;
      suffix_titles  : OPTIONAL LIST [1 : ?] OF label;
    WHERE
      wr1: ( EXISTS( last_name ) OR EXISTS( first_name ) );
  END_ENTITY; -- person (line:24376 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class ePERSON : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _person.self
    }
    public let partialEntity: _person

    //MARK: SUPERTYPES
    public var super_ePERSON: ePERSON { return self } 	// [1]

    //MARK: SUBTYPES

    //MARK: ATTRIBUTES
    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``ePERSON`` )
    public var MIDDLE_NAMES: (SDAI.LIST<tLABEL>/*[1:nil]*/ )?  {
      get {
        return self.partialEntity._middle_names
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._middle_names = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``ePERSON`` )
    public var SUFFIX_TITLES: (SDAI.LIST<tLABEL>/*[1:nil]*/ )?  {
      get {
        return self.partialEntity._suffix_titles
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._suffix_titles = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``ePERSON`` )
    public var LAST_NAME: tLABEL?  {
      get {
        return self.partialEntity._last_name
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._last_name = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``ePERSON`` )
    public var FIRST_NAME: tLABEL?  {
      get {
        return self.partialEntity._first_name
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._first_name = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``ePERSON`` )
    public var ID: tIDENTIFIER {
      get {
        return SDAI.UNWRAP( self.partialEntity._id )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._id = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``ePERSON`` )
    public var PREFIX_TITLES: (SDAI.LIST<tLABEL>/*[1:nil]*/ )?  {
      get {
        return self.partialEntity._prefix_titles
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._prefix_titles = newValue
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_person.self) else { return nil }
      self.partialEntity = partial

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }

    //SIMPLE ENTITY REFERENCE
    public convenience init?(_ partial:_person) {
      let complex = SDAI.ComplexEntity(entities:[partial])
      self.init(complex: complex)
    }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _person.WHERE_wr1(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "PERSON", type: self, explicitAttributeCount: 6)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: ePERSON.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "MIDDLE_NAMES", keyPath: \ePERSON.MIDDLE_NAMES, 
        kind: .explicitOptional, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "SUFFIX_TITLES", keyPath: \ePERSON.SUFFIX_TITLES, 
        kind: .explicitOptional, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "LAST_NAME", keyPath: \ePERSON.LAST_NAME, 
        kind: .explicitOptional, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "FIRST_NAME", keyPath: \ePERSON.FIRST_NAME, 
        kind: .explicitOptional, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "ID", keyPath: \ePERSON.ID, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "PREFIX_TITLES", keyPath: \ePERSON.PREFIX_TITLES, 
        kind: .explicitOptional, source: .thisEntity, mayYieldEntityReference: false)

      return entityDef
    }

  }
}
