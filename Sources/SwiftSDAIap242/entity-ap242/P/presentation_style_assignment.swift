/* file: presentation_style_assignment.swift 	 generated: Tue Nov 16 05:35:44 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY presentation_style_assignment
    SUBTYPE OF ( founded_item );
      styles  : SET [1 : ?] OF presentation_style_select;
    WHERE
      wr1: ( SIZEOF( QUERY ( style1 <* styles | ( NOT ( SIZEOF( QUERY ( style2 <* ( styles - style1 ) | ( 
               NOT ( ( TYPEOF( style1 ) <> TYPEOF( style2 ) ) OR ( SIZEOF( [
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SURFACE_STYLE_USAGE' , 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.EXTERNALLY_DEFINED_STYLE' ] * TYPEOF( style1 ) ) 
               = 1 ) ) ) ) ) = 0 ) ) ) ) = 0 );
      wr2: ( SIZEOF( QUERY ( style1 <* styles | ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
               + 'SURFACE_STYLE_USAGE'  IN TYPEOF( style1 ) ) ) ) <= 2 );
      wr3: ( SIZEOF( QUERY ( style1 <* styles | ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
               + 'SURFACE_STYLE_USAGE'  IN TYPEOF( style1 ) ) AND ( SIZEOF( QUERY ( style2 <* ( styles - 
               style1 ) | ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SURFACE_STYLE_USAGE' IN 
               TYPEOF( style2 ) ) AND ( ( style1\surface_style_usage.side = both ) OR ( style2\
               surface_style_usage.side = both ) OR ( style1\surface_style_usage.side = style2\
               surface_style_usage.side ) ) ) ) ) > 0 ) ) ) ) = 0 );
  END_ENTITY; -- presentation_style_assignment (line:25726 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	founded_item
    ATTR:  users,	TYPE: SET [0 : ?] OF founded_item_select -- DERIVED
      := using_items( SELF, [] )


  ENTITY(SELF)	presentation_style_assignment
    ATTR:  styles,	TYPE: SET [1 : ?] OF presentation_style_select -- EXPLICIT


  SUB- ENTITY(3)	presentation_style_by_context
    ATTR:  style_context,	TYPE: style_context_select -- EXPLICIT


*/


//MARK: - Partial Entity
  public final class _presentation_style_assignment : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      ePRESENTATION_STYLE_ASSIGNMENT.self
    }

    //ATTRIBUTES
    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _styles: SDAI.SET<sPRESENTATION_STYLE_SELECT>/*[1:nil]*/  // PLAIN EXPLICIT ATTRIBUTE

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._styles.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._styles.value.isValueEqualOptionally(to: rhs._styles.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._styles.value.isValueEqualOptionally(to: rhs._styles.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: ePRESENTATION_STYLE_ASSIGNMENT?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.STYLES.QUERY{ STYLE1 in 

          let _TEMP1 = SDAI.FORCE_OPTIONAL(SELF.STYLES) - SDAI.FORCE_OPTIONAL(STYLE1)
          let _TEMP2 = _TEMP1?.QUERY{ STYLE2 in 

              let _TEMP1 = SDAI.TYPEOF(STYLE1)
              let _TEMP2 = SDAI.TYPEOF(STYLE2)
              let _TEMP3 = SDAI.FORCE_OPTIONAL(_TEMP1) .!=. SDAI.FORCE_OPTIONAL(_TEMP2)
              let _TEMP4 = ([SDAI.AIE(SDAI.STRING(
                "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SURFACE_STYLE_USAGE")), 
                SDAI.AIE(SDAI.STRING("AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.EXTERNALLY_DEFINED_STYLE"))] 
                as [SDAI.AggregationInitializerElement<SDAI.STRING>])
              let _TEMP5 = SDAI.TYPEOF(STYLE1)
              let _TEMP6 = SDAI.FORCE_OPTIONAL(_TEMP4) * SDAI.FORCE_OPTIONAL(_TEMP5)
              let _TEMP7 = SDAI.SIZEOF(_TEMP6)
              let _TEMP8 = _TEMP7 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
              let _TEMP9 = _TEMP3 || _TEMP8
              let _TEMP10 =  !_TEMP9
              return _TEMP10 }
          let _TEMP3 = SDAI.SIZEOF(_TEMP2)
          let _TEMP4 = _TEMP3 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
          let _TEMP5 =  !_TEMP4
          return _TEMP5 }
      let _TEMP2 = SDAI.SIZEOF(_TEMP1)
      let _TEMP3 = _TEMP2 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      return _TEMP3
    }
    public static func WHERE_wr2(SELF: ePRESENTATION_STYLE_ASSIGNMENT?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.STYLES.QUERY{ STYLE1 in 

          let _TEMP1 = SDAI.TYPEOF(STYLE1, IS: eSURFACE_STYLE_USAGE.self)
          return _TEMP1 }
      let _TEMP2 = SDAI.SIZEOF(_TEMP1)
      let _TEMP3 = _TEMP2 <= SDAI.FORCE_OPTIONAL(SDAI.INTEGER(2))
      return _TEMP3
    }
    public static func WHERE_wr3(SELF: ePRESENTATION_STYLE_ASSIGNMENT?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.STYLES.QUERY{ STYLE1 in 

          let _TEMP1 = SDAI.TYPEOF(STYLE1, IS: eSURFACE_STYLE_USAGE.self)
          let _TEMP2 = SDAI.FORCE_OPTIONAL(SELF.STYLES) - SDAI.FORCE_OPTIONAL(STYLE1)
          let _TEMP3 = _TEMP2?.QUERY{ STYLE2 in 

              let _TEMP1 = SDAI.TYPEOF(STYLE2, IS: eSURFACE_STYLE_USAGE.self)
              let _TEMP2 = STYLE1.GROUP_REF(eSURFACE_STYLE_USAGE.self)
              let _TEMP3 = _TEMP2?.SIDE
              let _TEMP4 = _TEMP3 .==. SDAI.FORCE_OPTIONAL(BOTH)
              let _TEMP5 = STYLE2.GROUP_REF(eSURFACE_STYLE_USAGE.self)
              let _TEMP6 = _TEMP5?.SIDE
              let _TEMP7 = _TEMP6 .==. SDAI.FORCE_OPTIONAL(BOTH)
              let _TEMP8 = _TEMP4 || _TEMP7
              let _TEMP9 = STYLE1.GROUP_REF(eSURFACE_STYLE_USAGE.self)
              let _TEMP10 = _TEMP9?.SIDE
              let _TEMP11 = STYLE2.GROUP_REF(eSURFACE_STYLE_USAGE.self)
              let _TEMP12 = _TEMP11?.SIDE
              let _TEMP13 = _TEMP10 .==. _TEMP12
              let _TEMP14 = _TEMP8 || _TEMP13
              let _TEMP15 = _TEMP1 && _TEMP14
              return _TEMP15 }
          let _TEMP4 = SDAI.SIZEOF(_TEMP3)
          let _TEMP5 = _TEMP4 > SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
          let _TEMP6 = _TEMP1 && _TEMP5
          return _TEMP6 }
      let _TEMP2 = SDAI.SIZEOF(_TEMP1)
      let _TEMP3 = _TEMP2 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      return _TEMP3
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(STYLES: SDAI.SET<sPRESENTATION_STYLE_SELECT>/*[1:nil]*/ ) {
      self._styles = STYLES
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 1
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverRequiredParameter(as: SDAI.SET<
        sPRESENTATION_STYLE_SELECT>.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( STYLES: p0 )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY presentation_style_assignment
    SUBTYPE OF ( founded_item );
      styles  : SET [1 : ?] OF presentation_style_select;
    WHERE
      wr1: ( SIZEOF( QUERY ( style1 <* styles | ( NOT ( SIZEOF( QUERY ( style2 <* ( styles - style1 ) | ( 
               NOT ( ( TYPEOF( style1 ) <> TYPEOF( style2 ) ) OR ( SIZEOF( [
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SURFACE_STYLE_USAGE' , 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.EXTERNALLY_DEFINED_STYLE' ] * TYPEOF( style1 ) ) 
               = 1 ) ) ) ) ) = 0 ) ) ) ) = 0 );
      wr2: ( SIZEOF( QUERY ( style1 <* styles | ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
               + 'SURFACE_STYLE_USAGE'  IN TYPEOF( style1 ) ) ) ) <= 2 );
      wr3: ( SIZEOF( QUERY ( style1 <* styles | ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
               + 'SURFACE_STYLE_USAGE'  IN TYPEOF( style1 ) ) AND ( SIZEOF( QUERY ( style2 <* ( styles - 
               style1 ) | ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SURFACE_STYLE_USAGE' IN 
               TYPEOF( style2 ) ) AND ( ( style1\surface_style_usage.side = both ) OR ( style2\
               surface_style_usage.side = both ) OR ( style1\surface_style_usage.side = style2\
               surface_style_usage.side ) ) ) ) ) > 0 ) ) ) ) = 0 );
  END_ENTITY; -- presentation_style_assignment (line:25726 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class ePRESENTATION_STYLE_ASSIGNMENT : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _presentation_style_assignment.self
    }
    public let partialEntity: _presentation_style_assignment

    //MARK: SUPERTYPES
    public let super_eFOUNDED_ITEM: eFOUNDED_ITEM 	// [1]
    public var super_ePRESENTATION_STYLE_ASSIGNMENT: ePRESENTATION_STYLE_ASSIGNMENT { return self } 	// [2]

    //MARK: SUBTYPES
    public var sub_ePRESENTATION_STYLE_BY_CONTEXT: ePRESENTATION_STYLE_BY_CONTEXT? {	// [3]
      return self.complexEntity.entityReference(ePRESENTATION_STYLE_BY_CONTEXT.self)
    }


    //MARK: ATTRIBUTES
    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePRESENTATION_STYLE_BY_CONTEXT`` )
    public var STYLE_CONTEXT: sSTYLE_CONTEXT_SELECT?  {
      get {
        return sub_ePRESENTATION_STYLE_BY_CONTEXT?.partialEntity._style_context
      }
      set(newValue) {
        guard let partial = sub_ePRESENTATION_STYLE_BY_CONTEXT?.super_ePRESENTATION_STYLE_BY_CONTEXT
          .partialEntity else { return }
        partial._style_context = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUPER( ``eFOUNDED_ITEM`` )
    public var USERS: (SDAI.SET<sFOUNDED_ITEM_SELECT>/*[0:nil]*/ )?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"USERS") {
          return cached.value as! (SDAI.SET<sFOUNDED_ITEM_SELECT>/*[0:nil]*/ )? 
        }
        let origin = super_eFOUNDED_ITEM
        let value = SDAI.SET<sFOUNDED_ITEM_SELECT>(origin.partialEntity._users__getter(SELF: origin))
        updateCache(derivedAttributeName:"USERS", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``ePRESENTATION_STYLE_ASSIGNMENT`` )
    public var STYLES: SDAI.SET<sPRESENTATION_STYLE_SELECT>/*[1:nil]*/  {
      get {
        return SDAI.UNWRAP( self.partialEntity._styles )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._styles = SDAI.UNWRAP(newValue)
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_presentation_style_assignment.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eFOUNDED_ITEM.self) else { return nil }
      self.super_eFOUNDED_ITEM = super1

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _presentation_style_assignment.WHERE_wr1(SELF: instance)
      result[prefix2 + " .WHERE_wr2"] = _presentation_style_assignment.WHERE_wr2(SELF: instance)
      result[prefix2 + " .WHERE_wr3"] = _presentation_style_assignment.WHERE_wr3(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "PRESENTATION_STYLE_ASSIGNMENT", type: self, explicitAttributeCount: 1)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eFOUNDED_ITEM.self)
      entityDef.add(supertype: ePRESENTATION_STYLE_ASSIGNMENT.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "STYLE_CONTEXT", keyPath: \ePRESENTATION_STYLE_ASSIGNMENT.STYLE_CONTEXT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "USERS", keyPath: \ePRESENTATION_STYLE_ASSIGNMENT.USERS, 
        kind: .derived, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "STYLES", keyPath: \ePRESENTATION_STYLE_ASSIGNMENT.STYLES, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)

      return entityDef
    }

  }
}
