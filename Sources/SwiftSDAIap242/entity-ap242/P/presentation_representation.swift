/* file: presentation_representation.swift 	 generated: Tue Nov 16 05:35:44 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY presentation_representation
    SUPERTYPE OF ( 
        ONEOF ( 
            presentation_area, 
            presentation_view ) )
    SUBTYPE OF ( representation );
      SELF\representation.context_of_items : geometric_representation_context;
    WHERE
      wr1: ( SELF\representation.context_of_items\geometric_representation_context.coordinate_space_dimension 
               = 2 );
      wr2: ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PRESENTATION_AREA' IN TYPEOF( SELF ) ) OR ( 
               SIZEOF( QUERY ( prr <* USEDIN( SELF, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
               + 'REPRESENTATION_RELATIONSHIP.REP_2'  ) | ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
               + 'PRESENTATION_REPRESENTATION'  IN TYPEOF( prr\representation_relationship.rep_1 ) ) ) ) > 0 ) 
               OR ( SIZEOF( QUERY ( rm <* USEDIN( SELF, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
               + 'REPRESENTATION_MAP.MAPPED_REPRESENTATION'  ) | ( SIZEOF( QUERY ( mi <* USEDIN( rm, 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.MAPPED_ITEM.MAPPING_SOURCE'  ) | ( SIZEOF( 
               QUERY ( rep <* using_representations( mi ) | ( 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PRESENTATION_REPRESENTATION'  IN TYPEOF( rep ) ) ) ) 
               > 0 ) ) ) > 0 ) ) ) > 0 ) );
  END_ENTITY; -- presentation_representation (line:25678 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	representation
    ATTR:  name,	TYPE: label -- EXPLICIT

    ATTR:  items,	TYPE: SET [1 : ?] OF representation_item -- EXPLICIT
      -- observed by
        ENTITY(1): hidden_element_over_riding_styled_item,	ATTR: container,	TYPE: SET [1 : ?] OF
          presentation_view
      -- possibly overriden by
          ENTITY: shape_representation_with_parameters,	TYPE: SET [1 : ?] OF shape_representation_with_parameters_items
          ENTITY: mechanical_design_shaded_presentation_area,	TYPE: SET [1 : ?] OF mechanical_design_shaded_presentation_area_items
          ENTITY: mechanical_design_shaded_presentation_representation,	TYPE: SET [1 : ?] OF mechanical_design_shaded_presentation_representation_items
          ENTITY: connected_edge_with_length_set_representation,	TYPE: SET [1 : ?] OF connected_edge_with_length_set_items
          ENTITY: mechanism_state_representation,	TYPE: SET [1 : ?] OF pair_value
          ENTITY: reinforcement_orientation_basis,	TYPE: SET [1 : 1] OF basis_11_direction_member
          ENTITY: externally_defined_representation,	TYPE: SET [1 : ?] OF externally_defined_representation_item
          ENTITY: kinematic_topology_network_structure,	TYPE: SET [1 : ?] OF kinematic_loop
          ENTITY: kinematic_topology_structure,	TYPE: SET [1 : ?] OF kinematic_joint
          ENTITY: single_area_csg_2d_shape_representation,	TYPE: SET [1 : ?] OF csg_2d_area_select
          ENTITY: draughting_model,	TYPE: SET [1 : ?] OF draughting_model_item_select
          ENTITY: shape_dimension_representation,	TYPE: SET [1 : ?] OF shape_dimension_representation_item
          ENTITY: point_placement_shape_representation,	TYPE: SET [1 : ?] OF point_placement_shape_representation_item
          ENTITY: link_motion_representation_along_path,	TYPE: SET [1 : ?] OF kinematic_path
          ENTITY: kinematic_topology_directed_structure,	TYPE: SET [1 : ?] OF oriented_joint
          ENTITY: scan_data_shape_representation,	TYPE: SET [1 : ?] OF scanned_data_item
          ENTITY: mechanical_design_geometric_presentation_area,	TYPE: SET [1 : ?] OF mechanical_design_geometric_presentation_area_items
          ENTITY: procedural_shape_representation,	TYPE: SET [1 : ?] OF procedural_shape_representation_sequence
          ENTITY: path_parameter_representation,	TYPE: SET [1 : ?] OF bounded_curve
          ENTITY: csg_2d_shape_representation,	TYPE: SET [1 : ?] OF csg_2d_shape_select
          ENTITY: ply_angle_representation,	TYPE: SET [1 : 1] OF measure_representation_item
          ENTITY: text_string_representation,	TYPE: SET [1 : ?] OF text_string_representation_item
          ENTITY: procedural_representation,	TYPE: SET [1 : ?] OF procedural_representation_sequence
          ENTITY: draughting_subfigure_representation,	TYPE: SET [1 : ?] OF draughting_subfigure_representation_item
          ENTITY: picture_representation,	TYPE: SET [2 : ?] OF picture_representation_item_select
          ENTITY: structured_text_representation,	TYPE: SET [1 : ?] OF string_representation_item_select
          ENTITY: interpolated_configuration_representation,	TYPE: SET [1 : ?] OF interpolated_configuration_sequence
          ENTITY: mechanical_design_presentation_representation_with_draughting,	TYPE: SET [1 : ?] OF camera_model_d3
          ENTITY: mechanism_representation,	TYPE: SET [1 : ?] OF pair_representation_relationship
          ENTITY: mechanical_design_geometric_presentation_representation,	TYPE: SET [1 : ?] OF mechanical_design_geometric_presentation_representation_items
          ENTITY: kinematic_link_representation,	TYPE: SET [1 : ?] OF kinematic_link_representation_items
          ENTITY: neutral_sketch_representation,	TYPE: SET [1 : ?] OF sketch_element_select
          ENTITY: draughting_symbol_representation,	TYPE: SET [1 : ?] OF draughting_symbol_representation_item

    ATTR:  context_of_items,	TYPE: representation_context -- EXPLICIT (DYNAMIC)
      -- observed by
        ENTITY(1): representation_context,	ATTR: representations_in_context,	TYPE: SET [1 : ?] OF
          representation
      -- possibly overriden by
          ENTITY: mechanism_state_representation,	TYPE: geometric_representation_context	(as DERIVED)
      *** ENTITY: presentation_representation,	TYPE: geometric_representation_context
          ENTITY: link_motion_representation_along_path,	TYPE: geometric_representation_context_with_parameter
          ENTITY: path_parameter_representation,	TYPE: path_parameter_representation_context
          ENTITY: analysis_model,	TYPE: analysis_representation_context
          ENTITY: interpolated_configuration_representation,	TYPE: geometric_representation_context_with_parameter
          ENTITY: mechanism_representation,	TYPE: geometric_representation_context
          ENTITY: kinematic_link_representation,	TYPE: geometric_representation_context

    ATTR:  id,	TYPE: identifier -- DERIVED
      := get_id_value( SELF )

    ATTR:  description,	TYPE: text -- DERIVED
      := get_description_value( SELF )


  ENTITY(SELF)	presentation_representation
    REDCR: context_of_items,	TYPE: geometric_representation_context -- EXPLICIT
      -- OVERRIDING ENTITY: representation


  SUB- ENTITY(3)	mechanical_design_shaded_presentation_area
    REDCR: items,	TYPE: SET [1 : ?] OF mechanical_design_shaded_presentation_area_items -- EXPLICIT
      -- OVERRIDING ENTITY: representation


  SUB- ENTITY(4)	mechanical_design_geometric_presentation_area
    REDCR: items,	TYPE: SET [1 : ?] OF mechanical_design_geometric_presentation_area_items -- EXPLICIT
      -- OVERRIDING ENTITY: representation


  SUB- ENTITY(5)	drawing_sheet_revision
    ATTR:  revision_identifier,	TYPE: identifier -- EXPLICIT


  SUB- ENTITY(6)	presentation_area
    (no local attributes)

  SUB- ENTITY(7)	picture_representation
    REDCR: items,	TYPE: SET [2 : ?] OF picture_representation_item_select -- EXPLICIT
      -- OVERRIDING ENTITY: representation

    ATTR:  size,	TYPE: presentation_size -- INVERSE
      FOR unit;


  SUB- ENTITY(8)	presentation_view
    (no local attributes)

*/


//MARK: - Partial Entity
  public final class _presentation_representation : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      ePRESENTATION_REPRESENTATION.self
    }

    //ATTRIBUTES
    /* override var _context_of_items: eGEOMETRIC_REPRESENTATION_CONTEXT	//EXPLICIT REDEFINITION(eREPRESENTATION) */

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      //SELECT data types (indirectly) referencing the current type as a member of the select list
      members.insert(SDAI.STRING(sLAYERED_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sPRESENTATION_REPRESENTATION_SELECT.typeName)) // -> Self
      members.insert(SDAI.STRING(sINVISIBILITY_CONTEXT.typeName)) // -> Self
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: ePRESENTATION_REPRESENTATION?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.GROUP_REF(eREPRESENTATION.self)
      let _TEMP2 = _TEMP1?.CONTEXT_OF_ITEMS
      let _TEMP3 = _TEMP2?.GROUP_REF(eGEOMETRIC_REPRESENTATION_CONTEXT.self)
      let _TEMP4 = _TEMP3?.COORDINATE_SPACE_DIMENSION
      let _TEMP5 = _TEMP4 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(2))
      return _TEMP5
    }
    public static func WHERE_wr2(SELF: ePRESENTATION_REPRESENTATION?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.TYPEOF(SELF, IS: ePRESENTATION_AREA.self)
      let _TEMP2 = SDAI.USEDIN(T: SELF, ROLE: \AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF
        .eREPRESENTATION_RELATIONSHIP.REP_2)
      let _TEMP3 = _TEMP2.QUERY{ PRR in 

          let _TEMP1 = SDAI.TYPEOF(PRR.GROUP_REF(eREPRESENTATION_RELATIONSHIP.self)?.REP_1, 
            IS: ePRESENTATION_REPRESENTATION.self)
          return _TEMP1 }
      let _TEMP4 = SDAI.SIZEOF(_TEMP3)
      let _TEMP5 = _TEMP4 > SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      let _TEMP6 = _TEMP1 || _TEMP5
      let _TEMP7 = SDAI.USEDIN(T: SELF, ROLE: \AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF
        .eREPRESENTATION_MAP.MAPPED_REPRESENTATION)
      let _TEMP8 = _TEMP7.QUERY{ RM in 

          let _TEMP1 = SDAI.USEDIN(T: RM, ROLE: \AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eMAPPED_ITEM
            .MAPPING_SOURCE)
          let _TEMP2 = _TEMP1.QUERY{ MI in 

              let _TEMP1 = USING_REPRESENTATIONS(sFOUNDED_ITEM_SELECT(/*SDAI.GENERIC_ENTITY*/MI))
              let _TEMP2 = _TEMP1?.QUERY{ REP in 

                  let _TEMP1 = SDAI.TYPEOF(REP, IS: ePRESENTATION_REPRESENTATION.self)
                  return _TEMP1 }
              let _TEMP3 = SDAI.SIZEOF(_TEMP2)
              let _TEMP4 = _TEMP3 > SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
              return _TEMP4 }
          let _TEMP3 = SDAI.SIZEOF(_TEMP2)
          let _TEMP4 = _TEMP3 > SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
          return _TEMP4 }
      let _TEMP9 = SDAI.SIZEOF(_TEMP8)
      let _TEMP10 = _TEMP9 > SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      let _TEMP11 = _TEMP6 || _TEMP10
      return _TEMP11
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init() {
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 0
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      self.init( )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY presentation_representation
    SUPERTYPE OF ( 
        ONEOF ( 
            presentation_area, 
            presentation_view ) )
    SUBTYPE OF ( representation );
      SELF\representation.context_of_items : geometric_representation_context;
    WHERE
      wr1: ( SELF\representation.context_of_items\geometric_representation_context.coordinate_space_dimension 
               = 2 );
      wr2: ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PRESENTATION_AREA' IN TYPEOF( SELF ) ) OR ( 
               SIZEOF( QUERY ( prr <* USEDIN( SELF, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
               + 'REPRESENTATION_RELATIONSHIP.REP_2'  ) | ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
               + 'PRESENTATION_REPRESENTATION'  IN TYPEOF( prr\representation_relationship.rep_1 ) ) ) ) > 0 ) 
               OR ( SIZEOF( QUERY ( rm <* USEDIN( SELF, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
               + 'REPRESENTATION_MAP.MAPPED_REPRESENTATION'  ) | ( SIZEOF( QUERY ( mi <* USEDIN( rm, 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.MAPPED_ITEM.MAPPING_SOURCE'  ) | ( SIZEOF( 
               QUERY ( rep <* using_representations( mi ) | ( 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PRESENTATION_REPRESENTATION'  IN TYPEOF( rep ) ) ) ) 
               > 0 ) ) ) > 0 ) ) ) > 0 ) );
  END_ENTITY; -- presentation_representation (line:25678 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class ePRESENTATION_REPRESENTATION : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _presentation_representation.self
    }
    public let partialEntity: _presentation_representation

    //MARK: SUPERTYPES
    public let super_eREPRESENTATION: eREPRESENTATION 	// [1]
    public var super_ePRESENTATION_REPRESENTATION: ePRESENTATION_REPRESENTATION { return self } 	// [2]

    //MARK: SUBTYPES
    public var sub_eMECHANICAL_DESIGN_SHADED_PRESENTATION_AREA: eMECHANICAL_DESIGN_SHADED_PRESENTATION_AREA? {	// [3]
      return self.complexEntity.entityReference(eMECHANICAL_DESIGN_SHADED_PRESENTATION_AREA.self)
    }

    public var sub_eMECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_AREA: eMECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_AREA? {	// [4]
      return self.complexEntity.entityReference(eMECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_AREA.self)
    }

    public var sub_eDRAWING_SHEET_REVISION: eDRAWING_SHEET_REVISION? {	// [5]
      return self.complexEntity.entityReference(eDRAWING_SHEET_REVISION.self)
    }

    public var sub_ePRESENTATION_AREA: ePRESENTATION_AREA? {	// [6]
      return self.complexEntity.entityReference(ePRESENTATION_AREA.self)
    }

    public var sub_ePICTURE_REPRESENTATION: ePICTURE_REPRESENTATION? {	// [7]
      return self.complexEntity.entityReference(ePICTURE_REPRESENTATION.self)
    }

    public var sub_ePRESENTATION_VIEW: ePRESENTATION_VIEW? {	// [8]
      return self.complexEntity.entityReference(ePRESENTATION_VIEW.self)
    }


    //MARK: ATTRIBUTES
    /// __DERIVE__ attribute
    /// - origin: SUPER( ``eREPRESENTATION`` )
    public var DESCRIPTION: tTEXT?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"DESCRIPTION") {
          return cached.value as! tTEXT? 
        }
        let origin = super_eREPRESENTATION
        let value = tTEXT(origin.partialEntity._description__getter(SELF: origin))
        updateCache(derivedAttributeName:"DESCRIPTION", value:value)
        return value
      }
    }

    /// __EXPLICIT(OBSERVED)__ attribute
    /// - origin: SUPER( ``eREPRESENTATION`` )
    public var ITEMS: SDAI.SET<eREPRESENTATION_ITEM>/*[1:nil]*/  {
      get {
        return SDAI.UNWRAP( super_eREPRESENTATION.partialEntity._items )
      }
      set(newValue) {
        let partial = super_eREPRESENTATION.partialEntity
        partial._items = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eDRAWING_SHEET_REVISION`` )
    public var REVISION_IDENTIFIER: tIDENTIFIER?  {
      get {
        return sub_eDRAWING_SHEET_REVISION?.partialEntity._revision_identifier
      }
      set(newValue) {
        guard let partial = sub_eDRAWING_SHEET_REVISION?.super_eDRAWING_SHEET_REVISION.partialEntity
          else { return }
        partial._revision_identifier = SDAI.UNWRAP(newValue)
      }
    }

    /// __INVERSE__ attribute
    /// observing ePRESENTATION_SIZE .UNIT
    /// - origin: SUB( ``ePICTURE_REPRESENTATION`` )
    public var SIZE: ePRESENTATION_SIZE?  {
      get {
        return sub_ePICTURE_REPRESENTATION?.partialEntity._size
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUPER( ``eREPRESENTATION`` )
    public var ID: tIDENTIFIER?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"ID") {
          return cached.value as! tIDENTIFIER? 
        }
        let origin = super_eREPRESENTATION
        let value = tIDENTIFIER(origin.partialEntity._id__getter(SELF: origin))
        updateCache(derivedAttributeName:"ID", value:value)
        return value
      }
    }

    /// __EXPLICIT REDEF(DYNAMIC)__ attribute
    /// - origin: SELF( ``ePRESENTATION_REPRESENTATION`` )
    public var CONTEXT_OF_ITEMS: eGEOMETRIC_REPRESENTATION_CONTEXT {
      get {
        if let resolved = _representation._context_of_items__provider(complex: self.complexEntity) {
          let value = SDAI.UNWRAP( eGEOMETRIC_REPRESENTATION_CONTEXT(resolved._context_of_items__getter(
            complex: self.complexEntity)) )
          return value
        }
        else {
          return SDAI.UNWRAP( eGEOMETRIC_REPRESENTATION_CONTEXT(super_eREPRESENTATION.partialEntity
            ._context_of_items) )
        }
      }
      set(newValue) {
        if let _ = _representation._context_of_items__provider(complex: self.complexEntity) { return }

        let partial = super_eREPRESENTATION.partialEntity
        partial._context_of_items = SDAI.UNWRAP(
          eREPRESENTATION_CONTEXT(newValue))
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eREPRESENTATION`` )
    public var NAME: tLABEL {
      get {
        return SDAI.UNWRAP( super_eREPRESENTATION.partialEntity._name )
      }
      set(newValue) {
        let partial = super_eREPRESENTATION.partialEntity
        partial._name = SDAI.UNWRAP(newValue)
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_presentation_representation.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eREPRESENTATION.self) else { return nil }
      self.super_eREPRESENTATION = super1

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _presentation_representation.WHERE_wr1(SELF: instance)
      result[prefix2 + " .WHERE_wr2"] = _presentation_representation.WHERE_wr2(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "PRESENTATION_REPRESENTATION", type: self, explicitAttributeCount: 0)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eREPRESENTATION.self)
      entityDef.add(supertype: ePRESENTATION_REPRESENTATION.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "DESCRIPTION", keyPath: \ePRESENTATION_REPRESENTATION.DESCRIPTION, 
        kind: .derived, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "ITEMS", keyPath: \ePRESENTATION_REPRESENTATION.ITEMS, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "REVISION_IDENTIFIER", keyPath: \ePRESENTATION_REPRESENTATION.REVISION_IDENTIFIER, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "SIZE", keyPath: \ePRESENTATION_REPRESENTATION.SIZE, 
        kind: .inverse, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "ID", keyPath: \ePRESENTATION_REPRESENTATION.ID, 
        kind: .derived, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "CONTEXT_OF_ITEMS", keyPath: \ePRESENTATION_REPRESENTATION.CONTEXT_OF_ITEMS, 
        kind: .explicitRedeclaring, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "NAME", keyPath: \ePRESENTATION_REPRESENTATION.NAME, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)

      return entityDef
    }

  }
}
