/* file: annotation_placeholder_occurrence.swift 	 generated: Sat Aug 14 13:46:02 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY annotation_placeholder_occurrence
    SUBTYPE OF ( annotation_occurrence, geometric_representation_item );
      SELF\styled_item.item  : geometric_set;
      role                   : annotation_placeholder_occurrence_role;
      line_spacing           : positive_length_measure;
    INVERSE
      the_callout                                      : draughting_callout FOR contents -- defined in ENTITY: draughting_callout;
      the_draughting_model_item_association_with_placeholders : SET [0 : 1] OF
                                 draughting_model_item_association_with_placeholder FOR 
                                                                   annotation_placeholder -- defined in ENTITY: draughting_model_item_association_with_placeholder;
    WHERE
      wr1: md_valid_content_in_geometric_set_for_placeholder( item );
      wr2: ( ( NOT ( role = annotation_placeholder_occurrence_role.gps_data ) ) OR ( ( SIZEOF( 
               the_draughting_model_item_association_with_placeholders ) = 1 ) AND 
               md_pmi_name_and_type_correlation( SELF ) ) );
  END_ENTITY; -- annotation_placeholder_occurrence (line:6922 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	representation_item
    ATTR:  name,	TYPE: label -- EXPLICIT


  SUPER- ENTITY(2)	styled_item
    ATTR:  styles,	TYPE: SET [0 : ?] OF presentation_style_assignment -- EXPLICIT

    ATTR:  item,	TYPE: styled_item_target -- EXPLICIT
      -- possibly overriden by
          ENTITY: tessellated_annotation_occurrence,	TYPE: tessellated_geometric_set
      *** ENTITY: annotation_placeholder_occurrence,	TYPE: geometric_set
          ENTITY: annotation_symbol_occurrence,	TYPE: annotation_symbol_occurrence_item
          ENTITY: annotation_curve_occurrence,	TYPE: curve_or_curve_set
          ENTITY: styled_tessellated_item_with_colours,	TYPE: tessellated_surface_item
          ENTITY: annotation_text_occurrence,	TYPE: annotation_text_occurrence_item
          ENTITY: hidden_element_over_riding_styled_item,	TYPE: camera_image
          ENTITY: annotation_fill_area_occurrence,	TYPE: annotation_fill_area
          ENTITY: annotation_point_occurrence,	TYPE: point
          ENTITY: annotation_plane,	TYPE: plane_or_planar_box


  SUPER- ENTITY(3)	annotation_occurrence
    (no local attributes)

  SUPER- ENTITY(4)	geometric_representation_item
    ATTR:  dim,	TYPE: dimension_count -- DERIVED
      := dimension_of( SELF )


  ENTITY(SELF)	annotation_placeholder_occurrence
    REDCR: item,	TYPE: geometric_set -- EXPLICIT
      -- OVERRIDING ENTITY: styled_item

    ATTR:  role,	TYPE: annotation_placeholder_occurrence_role -- EXPLICIT

    ATTR:  line_spacing,	TYPE: positive_length_measure -- EXPLICIT

    ATTR:  the_callout,	TYPE: draughting_callout -- INVERSE
      FOR contents;

    ATTR:  the_draughting_model_item_association_with_placeholders,	TYPE: SET [0 : 1] OF draughting_model_item_association_with_placeholder -- INVERSE
      FOR annotation_placeholder;


*/


//MARK: - Partial Entity
  public final class _annotation_placeholder_occurrence : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eANNOTATION_PLACEHOLDER_OCCURRENCE.self
    }

    //ATTRIBUTES
    /* override var _item: eGEOMETRIC_SET	//EXPLICIT REDEFINITION(eSTYLED_ITEM) */

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _role: nANNOTATION_PLACEHOLDER_OCCURRENCE_ROLE // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _line_spacing: tPOSITIVE_LENGTH_MEASURE // PLAIN EXPLICIT ATTRIBUTE

    /// INVERSE SIMPLE ATTRIBUTE
    /// observing _draughting_callout ._contents
    internal private(set) weak var _the_callout: eDRAUGHTING_CALLOUT?
    /// INVERSE SIMPLE ATTR SUPPORT(ADDER)
    internal func _the_callout__observeAddedReference(in complex: SDAI.ComplexEntity) {
      guard let newSource = complex.entityReference(eDRAUGHTING_CALLOUT.self) else { return }
      self._the_callout = newSource
    }
    /// INVERSE SIMPLE ATTR SUPPORT(REMOVER)
    internal func _the_callout__observeRemovedReference(in complex: SDAI.ComplexEntity) {
      guard let _ = complex.entityReference(eDRAUGHTING_CALLOUT.self) else { return }
      self._the_callout = nil
    }
    /// INVERSE SIMPLE ATTR SUPPORT(LEAVING REFERENCE OWNER)
    internal func _the_callout__observe(leavingReferencerOwner complex: SDAI.ComplexEntity) {
      guard let _ = complex.entityReference(eDRAUGHTING_CALLOUT.self) else { return }
      self._the_callout = nil
    }

    /// INVERSE AGGREGATE ATTRIBUTE
    /// observing _draughting_model_item_association_with_placeholder ._annotation_placeholder
    internal var _the_draughting_model_item_association_with_placeholders: SDAI.SET<
      eDRAUGHTING_MODEL_ITEM_ASSOCIATION_WITH_PLACEHOLDER> {
      return __the_draughting_model_item_association_with_placeholders.map{ $0.reference }
    }
    private var __the_draughting_model_item_association_with_placeholders = SDAI.SET<
      SDAI.UnownedWrap<eDRAUGHTING_MODEL_ITEM_ASSOCIATION_WITH_PLACEHOLDER>>(
      bound1: SDAI.UNWRAP(SDAI.INTEGER(0)), bound2: SDAI.INTEGER(1), 
      SDAI.EMPLY_AGGREGATE) // unowned backing store
    /// INVERSE AGGREGATE ATTR SUPPORT(ADDER)
    internal func _the_draughting_model_item_association_with_placeholders__observeAddedReference(in complex: SDAI.ComplexEntity) {
      guard let newSource = complex.entityReference(eDRAUGHTING_MODEL_ITEM_ASSOCIATION_WITH_PLACEHOLDER.self) else { return }
      self.__the_draughting_model_item_association_with_placeholders.add(member: SDAI.UnownedWrap(newSource) )
    }
    /// INVERSE AGGREGATE ATTR SUPPORT(REMOVER)
    internal func _the_draughting_model_item_association_with_placeholders__observeRemovedReference(in complex: SDAI.ComplexEntity) {
      guard let oldSource = complex.entityReference(eDRAUGHTING_MODEL_ITEM_ASSOCIATION_WITH_PLACEHOLDER.self) else { return }
      let success = self.__the_draughting_model_item_association_with_placeholders.remove(member: SDAI.UnownedWrap(oldSource) )
      assert(success, "failed to remove inverse attribute element")
    }
    /// INVERSE AGGREGATE ATTR SUPPORT(LEAVING REFERENCE OWNER)
    internal func _the_draughting_model_item_association_with_placeholders__observe(leavingReferencerOwner complex: SDAI.ComplexEntity) {
      guard let oldSource = complex.entityReference(eDRAUGHTING_MODEL_ITEM_ASSOCIATION_WITH_PLACEHOLDER.self) else { return }
      let success = self.__the_draughting_model_item_association_with_placeholders.removeAll(member: SDAI.UnownedWrap(oldSource) )
      assert(success, "failed to remove inverse attribute elements")
    }

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      //SELECT data types (indirectly) referencing the current type as a member of the select list
      members.insert(SDAI.STRING(sDRAUGHTING_CALLOUT_ELEMENT.typeName)) // -> Self
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._role.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._line_spacing.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._role.value.isValueEqualOptionally(to: rhs._role.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._line_spacing.value.isValueEqualOptionally(to: rhs._line_spacing.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._role.value.isValueEqualOptionally(to: rhs._role.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._line_spacing.value.isValueEqualOptionally(to: rhs._line_spacing.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: eANNOTATION_PLACEHOLDER_OCCURRENCE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = MD_VALID_CONTENT_IN_GEOMETRIC_SET_FOR_PLACEHOLDER(SELF.ITEM)
      return SDAI.LOGICAL(/*SDAI.BOOLEAN*/_TEMP1)
    }
    public static func WHERE_wr2(SELF: eANNOTATION_PLACEHOLDER_OCCURRENCE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = nANNOTATION_PLACEHOLDER_OCCURRENCE_ROLE.GPS_DATA
      let _TEMP2 = SDAI.FORCE_OPTIONAL(SELF.ROLE) .==. SDAI.FORCE_OPTIONAL(_TEMP1)
      let _TEMP3 =  !_TEMP2
      let _TEMP4 = SDAI.SIZEOF(SELF.THE_DRAUGHTING_MODEL_ITEM_ASSOCIATION_WITH_PLACEHOLDERS)
      let _TEMP5 = _TEMP4 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
      let _TEMP6 = MD_PMI_NAME_AND_TYPE_CORRELATION(SELF)
      let _TEMP7 = _TEMP5 && _TEMP6
      let _TEMP8 = _TEMP3 || _TEMP7
      return _TEMP8
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(ROLE: nANNOTATION_PLACEHOLDER_OCCURRENCE_ROLE, LINE_SPACING: tPOSITIVE_LENGTH_MEASURE) {
      self._role = ROLE
      self._line_spacing = LINE_SPACING
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 2
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverRequiredParameter(as: 
        nANNOTATION_PLACEHOLDER_OCCURRENCE_ROLE.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p1) = exchangeStructure.recoverRequiredParameter(as: tPOSITIVE_LENGTH_MEASURE.self, from: parameters[1])
      else { exchangeStructure.add(errorContext: "while recovering parameter #1 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( ROLE: p0, LINE_SPACING: p1 )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY annotation_placeholder_occurrence
    SUBTYPE OF ( annotation_occurrence, geometric_representation_item );
      SELF\styled_item.item  : geometric_set;
      role                   : annotation_placeholder_occurrence_role;
      line_spacing           : positive_length_measure;
    INVERSE
      the_callout                                      : draughting_callout FOR contents -- defined in ENTITY: draughting_callout;
      the_draughting_model_item_association_with_placeholders : SET [0 : 1] OF
                                 draughting_model_item_association_with_placeholder FOR 
                                                                   annotation_placeholder -- defined in ENTITY: draughting_model_item_association_with_placeholder;
    WHERE
      wr1: md_valid_content_in_geometric_set_for_placeholder( item );
      wr2: ( ( NOT ( role = annotation_placeholder_occurrence_role.gps_data ) ) OR ( ( SIZEOF( 
               the_draughting_model_item_association_with_placeholders ) = 1 ) AND 
               md_pmi_name_and_type_correlation( SELF ) ) );
  END_ENTITY; -- annotation_placeholder_occurrence (line:6922 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eANNOTATION_PLACEHOLDER_OCCURRENCE : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _annotation_placeholder_occurrence.self
    }
    public let partialEntity: _annotation_placeholder_occurrence

    //MARK: SUPERTYPES
    public let super_eREPRESENTATION_ITEM: eREPRESENTATION_ITEM 	// [1]
    public let super_eSTYLED_ITEM: eSTYLED_ITEM 	// [2]
    public let super_eANNOTATION_OCCURRENCE: eANNOTATION_OCCURRENCE 	// [3]
    public let super_eGEOMETRIC_REPRESENTATION_ITEM: eGEOMETRIC_REPRESENTATION_ITEM 	// [4]
    public var super_eANNOTATION_PLACEHOLDER_OCCURRENCE: eANNOTATION_PLACEHOLDER_OCCURRENCE { return self } 	// [5]

    //MARK: SUBTYPES

    //MARK: ATTRIBUTES
    /// __EXPLICIT REDEF__ attribute
    /// - origin: SELF( ``eANNOTATION_PLACEHOLDER_OCCURRENCE`` )
    public var ITEM: eGEOMETRIC_SET {
      get {
        return SDAI.UNWRAP( eGEOMETRIC_SET( super_eSTYLED_ITEM.partialEntity._item ) )
      }
      set(newValue) {
        let partial = super_eSTYLED_ITEM.partialEntity
        partial._item = SDAI.UNWRAP(
          sSTYLED_ITEM_TARGET(newValue))
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eANNOTATION_PLACEHOLDER_OCCURRENCE`` )
    public var ROLE: nANNOTATION_PLACEHOLDER_OCCURRENCE_ROLE {
      get {
        return SDAI.UNWRAP( self.partialEntity._role )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._role = SDAI.UNWRAP(newValue)
      }
    }

    /// __INVERSE__ attribute
    /// observing eDRAUGHTING_CALLOUT .CONTENTS
    /// - origin: SELF( ``eANNOTATION_PLACEHOLDER_OCCURRENCE`` )
    public var THE_CALLOUT: eDRAUGHTING_CALLOUT?  {
      get {
        return self.partialEntity._the_callout
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eANNOTATION_PLACEHOLDER_OCCURRENCE`` )
    public var LINE_SPACING: tPOSITIVE_LENGTH_MEASURE {
      get {
        return SDAI.UNWRAP( self.partialEntity._line_spacing )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._line_spacing = SDAI.UNWRAP(newValue)
      }
    }

    /// __INVERSE__ attribute
    /// observing eDRAUGHTING_MODEL_ITEM_ASSOCIATION_WITH_PLACEHOLDER .ANNOTATION_PLACEHOLDER
    /// - origin: SELF( ``eANNOTATION_PLACEHOLDER_OCCURRENCE`` )
    public var THE_DRAUGHTING_MODEL_ITEM_ASSOCIATION_WITH_PLACEHOLDERS: SDAI.SET<
      eDRAUGHTING_MODEL_ITEM_ASSOCIATION_WITH_PLACEHOLDER>/*[0:1]*/  {
      get {
        return SDAI.UNWRAP( self.partialEntity._the_draughting_model_item_association_with_placeholders )
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eSTYLED_ITEM`` )
    public var STYLES: SDAI.SET<ePRESENTATION_STYLE_ASSIGNMENT>/*[0:nil]*/  {
      get {
        return SDAI.UNWRAP( super_eSTYLED_ITEM.partialEntity._styles )
      }
      set(newValue) {
        let partial = super_eSTYLED_ITEM.partialEntity
        partial._styles = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eREPRESENTATION_ITEM`` )
    public var NAME: tLABEL {
      get {
        return SDAI.UNWRAP( super_eREPRESENTATION_ITEM.partialEntity._name )
      }
      set(newValue) {
        let partial = super_eREPRESENTATION_ITEM.partialEntity
        partial._name = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUPER( ``eGEOMETRIC_REPRESENTATION_ITEM`` )
    public var DIM: tDIMENSION_COUNT?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"DIM") {
          return cached.value as! tDIMENSION_COUNT? 
        }
        let origin = super_eGEOMETRIC_REPRESENTATION_ITEM
        let value = tDIMENSION_COUNT(origin.partialEntity._dim__getter(SELF: origin))
        updateCache(derivedAttributeName:"DIM", value:value)
        return value
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_annotation_placeholder_occurrence.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eREPRESENTATION_ITEM.self) else { return nil }
      self.super_eREPRESENTATION_ITEM = super1

      guard let super2 = complexEntity?.entityReference(eSTYLED_ITEM.self) else { return nil }
      self.super_eSTYLED_ITEM = super2

      guard let super3 = complexEntity?.entityReference(eANNOTATION_OCCURRENCE.self) else { return nil }
      self.super_eANNOTATION_OCCURRENCE = super3

      guard let super4 = complexEntity?.entityReference(eGEOMETRIC_REPRESENTATION_ITEM.self) else { return nil }
      self.super_eGEOMETRIC_REPRESENTATION_ITEM = super4

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _annotation_placeholder_occurrence.WHERE_wr1(SELF: instance)
      result[prefix2 + " .WHERE_wr2"] = _annotation_placeholder_occurrence.WHERE_wr2(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "ANNOTATION_PLACEHOLDER_OCCURRENCE", type: self, explicitAttributeCount: 2)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eREPRESENTATION_ITEM.self)
      entityDef.add(supertype: eSTYLED_ITEM.self)
      entityDef.add(supertype: eANNOTATION_OCCURRENCE.self)
      entityDef.add(supertype: eGEOMETRIC_REPRESENTATION_ITEM.self)
      entityDef.add(supertype: eANNOTATION_PLACEHOLDER_OCCURRENCE.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "ITEM", keyPath: \eANNOTATION_PLACEHOLDER_OCCURRENCE.ITEM, 
        kind: .explicitRedeclaring, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "ROLE", keyPath: \eANNOTATION_PLACEHOLDER_OCCURRENCE.ROLE, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "THE_CALLOUT", keyPath: \eANNOTATION_PLACEHOLDER_OCCURRENCE.THE_CALLOUT, 
        kind: .inverse, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "LINE_SPACING", keyPath: \eANNOTATION_PLACEHOLDER_OCCURRENCE.LINE_SPACING, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "THE_DRAUGHTING_MODEL_ITEM_ASSOCIATION_WITH_PLACEHOLDERS", keyPath: \eANNOTATION_PLACEHOLDER_OCCURRENCE.THE_DRAUGHTING_MODEL_ITEM_ASSOCIATION_WITH_PLACEHOLDERS, 
        kind: .inverse, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "STYLES", keyPath: \eANNOTATION_PLACEHOLDER_OCCURRENCE.STYLES, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "NAME", keyPath: \eANNOTATION_PLACEHOLDER_OCCURRENCE.NAME, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "DIM", keyPath: \eANNOTATION_PLACEHOLDER_OCCURRENCE.DIM, 
        kind: .derived, source: .superEntity, mayYieldEntityReference: false)

      return entityDef
    }

  }
}
