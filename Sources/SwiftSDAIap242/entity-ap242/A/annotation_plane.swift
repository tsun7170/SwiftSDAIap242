/* file: annotation_plane.swift 	 generated: Tue Nov 16 05:35:44 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY annotation_plane
    SUBTYPE OF ( annotation_occurrence, geometric_representation_item );
      elements               : OPTIONAL SET [1 : ?] OF annotation_plane_element;
      SELF\styled_item.item  : plane_or_planar_box;
    WHERE
      wr1: ( SELF\geometric_representation_item.dim = 3 );
      wr2: ( ( NOT ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PLANAR_BOX' IN TYPEOF( SELF\styled_item
               .item ) ) ) OR ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.AXIS2_PLACEMENT_3D' IN 
               TYPEOF( SELF\styled_item.item\planar_box.placement ) ) );
      wr3: ( ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PLANAR_BOX' IN TYPEOF( SELF\styled_item.
               item ) ) AND ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CURVE_STYLE' IN TYPEOF( SELF\
               styled_item.styles[1]\presentation_style_assignment.styles[1] ) ) ) OR ( ( 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PLANE'  IN TYPEOF( SELF\styled_item.item ) ) 
               AND ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.FILL_AREA_STYLE' IN TYPEOF( SELF\
               styled_item.styles[1]\presentation_style_assignment.styles[1] ) ) ) );
      wr4: ( ( SIZEOF( SELF\styled_item.styles ) = 1 ) AND ( SIZEOF( SELF\styled_item.styles[1]\
               presentation_style_assignment.styles ) = 1 ) );
  END_ENTITY; -- annotation_plane (line:6951 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	representation_item
    ATTR:  name,	TYPE: label -- EXPLICIT


  SUPER- ENTITY(2)	styled_item
    ATTR:  styles,	TYPE: SET [0 : ?] OF presentation_style_assignment -- EXPLICIT

    ATTR:  item,	TYPE: styled_item_target -- EXPLICIT
      -- possibly overriden by
          ENTITY: tessellated_annotation_occurrence,	TYPE: tessellated_geometric_set
          ENTITY: annotation_placeholder_occurrence,	TYPE: geometric_set
          ENTITY: annotation_symbol_occurrence,	TYPE: annotation_symbol_occurrence_item
          ENTITY: annotation_curve_occurrence,	TYPE: curve_or_curve_set
          ENTITY: styled_tessellated_item_with_colours,	TYPE: tessellated_surface_item
          ENTITY: annotation_text_occurrence,	TYPE: annotation_text_occurrence_item
          ENTITY: hidden_element_over_riding_styled_item,	TYPE: camera_image
          ENTITY: annotation_fill_area_occurrence,	TYPE: annotation_fill_area
          ENTITY: annotation_point_occurrence,	TYPE: point
      *** ENTITY: annotation_plane,	TYPE: plane_or_planar_box


  SUPER- ENTITY(3)	annotation_occurrence
    (no local attributes)

  SUPER- ENTITY(4)	geometric_representation_item
    ATTR:  dim,	TYPE: dimension_count -- DERIVED
      := dimension_of( SELF )


  ENTITY(SELF)	annotation_plane
    ATTR:  elements,	TYPE: OPTIONAL SET [1 : ?] OF annotation_plane_element -- EXPLICIT

    REDCR: item,	TYPE: plane_or_planar_box -- EXPLICIT
      -- OVERRIDING ENTITY: styled_item


*/


//MARK: - Partial Entity
  public final class _annotation_plane : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eANNOTATION_PLANE.self
    }

    //ATTRIBUTES
    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _elements: (SDAI.SET<sANNOTATION_PLANE_ELEMENT>/*[1:nil]*/ )?  // PLAIN EXPLICIT ATTRIBUTE

    /* override var _item: sPLANE_OR_PLANAR_BOX	//EXPLICIT REDEFINITION(eSTYLED_ITEM) */

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._elements?.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._elements?.value.isValueEqualOptionally(to: rhs._elements?.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._elements?.value.isValueEqualOptionally(to: rhs._elements?.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: eANNOTATION_PLANE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.GROUP_REF(eGEOMETRIC_REPRESENTATION_ITEM.self)
      let _TEMP2 = _TEMP1?.DIM
      let _TEMP3 = _TEMP2 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(3))
      return _TEMP3
    }
    public static func WHERE_wr2(SELF: eANNOTATION_PLANE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.TYPEOF(SELF.GROUP_REF(eSTYLED_ITEM.self)?.ITEM, IS: ePLANAR_BOX.self)
      let _TEMP2 =  !_TEMP1
      let _TEMP3 = SDAI.TYPEOF(SELF.GROUP_REF(eSTYLED_ITEM.self)?.ITEM.GROUP_REF(ePLANAR_BOX.self)?.PLACEMENT, 
        IS: eAXIS2_PLACEMENT_3D.self)
      let _TEMP4 = _TEMP2 || _TEMP3
      return _TEMP4
    }
    public static func WHERE_wr3(SELF: eANNOTATION_PLANE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.TYPEOF(SELF.GROUP_REF(eSTYLED_ITEM.self)?.ITEM, IS: ePLANAR_BOX.self)
      let _TEMP2 = SDAI.TYPEOF(SELF.GROUP_REF(eSTYLED_ITEM.self)?.STYLES[1]?.GROUP_REF(
        ePRESENTATION_STYLE_ASSIGNMENT.self)?.STYLES[1], IS: eCURVE_STYLE.self)
      let _TEMP3 = _TEMP1 && _TEMP2
      let _TEMP4 = SDAI.TYPEOF(SELF.GROUP_REF(eSTYLED_ITEM.self)?.ITEM, IS: ePLANE.self)
      let _TEMP5 = SDAI.TYPEOF(SELF.GROUP_REF(eSTYLED_ITEM.self)?.STYLES[1]?.GROUP_REF(
        ePRESENTATION_STYLE_ASSIGNMENT.self)?.STYLES[1], IS: eFILL_AREA_STYLE.self)
      let _TEMP6 = _TEMP4 && _TEMP5
      let _TEMP7 = _TEMP3 || _TEMP6
      return _TEMP7
    }
    public static func WHERE_wr4(SELF: eANNOTATION_PLANE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.GROUP_REF(eSTYLED_ITEM.self)
      let _TEMP2 = _TEMP1?.STYLES
      let _TEMP3 = SDAI.SIZEOF(_TEMP2)
      let _TEMP4 = _TEMP3 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
      let _TEMP5 = SELF.GROUP_REF(eSTYLED_ITEM.self)
      let _TEMP6 = _TEMP5?.STYLES
      let _TEMP7 = _TEMP6?[1]
      let _TEMP8 = _TEMP7?.GROUP_REF(ePRESENTATION_STYLE_ASSIGNMENT.self)
      let _TEMP9 = _TEMP8?.STYLES
      let _TEMP10 = SDAI.SIZEOF(_TEMP9)
      let _TEMP11 = _TEMP10 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
      let _TEMP12 = _TEMP4 && _TEMP11
      return _TEMP12
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(ELEMENTS: (SDAI.SET<sANNOTATION_PLANE_ELEMENT>/*[1:nil]*/ )? ) {
      self._elements = ELEMENTS
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 1
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverOptionalParameter(as: SDAI.SET<
        sANNOTATION_PLANE_ELEMENT>.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( ELEMENTS: p0 )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY annotation_plane
    SUBTYPE OF ( annotation_occurrence, geometric_representation_item );
      elements               : OPTIONAL SET [1 : ?] OF annotation_plane_element;
      SELF\styled_item.item  : plane_or_planar_box;
    WHERE
      wr1: ( SELF\geometric_representation_item.dim = 3 );
      wr2: ( ( NOT ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PLANAR_BOX' IN TYPEOF( SELF\styled_item
               .item ) ) ) OR ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.AXIS2_PLACEMENT_3D' IN 
               TYPEOF( SELF\styled_item.item\planar_box.placement ) ) );
      wr3: ( ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PLANAR_BOX' IN TYPEOF( SELF\styled_item.
               item ) ) AND ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CURVE_STYLE' IN TYPEOF( SELF\
               styled_item.styles[1]\presentation_style_assignment.styles[1] ) ) ) OR ( ( 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PLANE'  IN TYPEOF( SELF\styled_item.item ) ) 
               AND ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.FILL_AREA_STYLE' IN TYPEOF( SELF\
               styled_item.styles[1]\presentation_style_assignment.styles[1] ) ) ) );
      wr4: ( ( SIZEOF( SELF\styled_item.styles ) = 1 ) AND ( SIZEOF( SELF\styled_item.styles[1]\
               presentation_style_assignment.styles ) = 1 ) );
  END_ENTITY; -- annotation_plane (line:6951 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eANNOTATION_PLANE : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _annotation_plane.self
    }
    public let partialEntity: _annotation_plane

    //MARK: SUPERTYPES
    public let super_eREPRESENTATION_ITEM: eREPRESENTATION_ITEM 	// [1]
    public let super_eSTYLED_ITEM: eSTYLED_ITEM 	// [2]
    public let super_eANNOTATION_OCCURRENCE: eANNOTATION_OCCURRENCE 	// [3]
    public let super_eGEOMETRIC_REPRESENTATION_ITEM: eGEOMETRIC_REPRESENTATION_ITEM 	// [4]
    public var super_eANNOTATION_PLANE: eANNOTATION_PLANE { return self } 	// [5]

    //MARK: SUBTYPES

    //MARK: ATTRIBUTES
    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eANNOTATION_PLANE`` )
    public var ELEMENTS: (SDAI.SET<sANNOTATION_PLANE_ELEMENT>/*[1:nil]*/ )?  {
      get {
        return self.partialEntity._elements
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._elements = newValue
      }
    }

    /// __EXPLICIT REDEF__ attribute
    /// - origin: SELF( ``eANNOTATION_PLANE`` )
    public var ITEM: sPLANE_OR_PLANAR_BOX {
      get {
        return SDAI.UNWRAP( sPLANE_OR_PLANAR_BOX( super_eSTYLED_ITEM.partialEntity._item ) )
      }
      set(newValue) {
        let partial = super_eSTYLED_ITEM.partialEntity
        partial._item = SDAI.UNWRAP(
          sSTYLED_ITEM_TARGET(newValue))
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eSTYLED_ITEM`` )
    public var STYLES: SDAI.SET<ePRESENTATION_STYLE_ASSIGNMENT>/*[0:nil]*/  {
      get {
        return SDAI.UNWRAP( super_eSTYLED_ITEM.partialEntity._styles )
      }
      set(newValue) {
        let partial = super_eSTYLED_ITEM.partialEntity
        partial._styles = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eREPRESENTATION_ITEM`` )
    public var NAME: tLABEL {
      get {
        return SDAI.UNWRAP( super_eREPRESENTATION_ITEM.partialEntity._name )
      }
      set(newValue) {
        let partial = super_eREPRESENTATION_ITEM.partialEntity
        partial._name = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUPER( ``eGEOMETRIC_REPRESENTATION_ITEM`` )
    public var DIM: tDIMENSION_COUNT?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"DIM") {
          return cached.value as! tDIMENSION_COUNT? 
        }
        let origin = super_eGEOMETRIC_REPRESENTATION_ITEM
        let value = tDIMENSION_COUNT(origin.partialEntity._dim__getter(SELF: origin))
        updateCache(derivedAttributeName:"DIM", value:value)
        return value
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_annotation_plane.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eREPRESENTATION_ITEM.self) else { return nil }
      self.super_eREPRESENTATION_ITEM = super1

      guard let super2 = complexEntity?.entityReference(eSTYLED_ITEM.self) else { return nil }
      self.super_eSTYLED_ITEM = super2

      guard let super3 = complexEntity?.entityReference(eANNOTATION_OCCURRENCE.self) else { return nil }
      self.super_eANNOTATION_OCCURRENCE = super3

      guard let super4 = complexEntity?.entityReference(eGEOMETRIC_REPRESENTATION_ITEM.self) else { return nil }
      self.super_eGEOMETRIC_REPRESENTATION_ITEM = super4

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _annotation_plane.WHERE_wr1(SELF: instance)
      result[prefix2 + " .WHERE_wr2"] = _annotation_plane.WHERE_wr2(SELF: instance)
      result[prefix2 + " .WHERE_wr3"] = _annotation_plane.WHERE_wr3(SELF: instance)
      result[prefix2 + " .WHERE_wr4"] = _annotation_plane.WHERE_wr4(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "ANNOTATION_PLANE", type: self, explicitAttributeCount: 1)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eREPRESENTATION_ITEM.self)
      entityDef.add(supertype: eSTYLED_ITEM.self)
      entityDef.add(supertype: eANNOTATION_OCCURRENCE.self)
      entityDef.add(supertype: eGEOMETRIC_REPRESENTATION_ITEM.self)
      entityDef.add(supertype: eANNOTATION_PLANE.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "ELEMENTS", keyPath: \eANNOTATION_PLANE.ELEMENTS, 
        kind: .explicitOptional, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "ITEM", keyPath: \eANNOTATION_PLANE.ITEM, 
        kind: .explicitRedeclaring, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "STYLES", keyPath: \eANNOTATION_PLANE.STYLES, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "NAME", keyPath: \eANNOTATION_PLANE.NAME, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "DIM", keyPath: \eANNOTATION_PLANE.DIM, 
        kind: .derived, source: .superEntity, mayYieldEntityReference: false)

      return entityDef
    }

  }
}
