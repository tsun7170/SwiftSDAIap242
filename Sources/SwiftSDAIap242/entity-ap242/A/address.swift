/* file: address.swift 	 generated: Sat Aug 14 13:46:02 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY address;
      internal_location        : OPTIONAL label;
      street_number            : OPTIONAL label;
      street                   : OPTIONAL label;
      postal_box               : OPTIONAL label;
      town                     : OPTIONAL label;
      region                   : OPTIONAL label;
      postal_code              : OPTIONAL label;
      country                  : OPTIONAL label;
      facsimile_number         : OPTIONAL label;
      telephone_number         : OPTIONAL label;
      electronic_mail_address  : OPTIONAL label;
      telex_number             : OPTIONAL label;
    DERIVE
      name  : label := get_name_value( SELF );
      url   : identifier := get_id_value( SELF );
    WHERE
      wr1: ( EXISTS( internal_location ) OR EXISTS( street_number ) OR EXISTS( street ) OR EXISTS( postal_box ) 
               OR EXISTS( town ) OR EXISTS( region ) OR EXISTS( postal_code ) OR EXISTS( country ) OR 
               EXISTS( facsimile_number ) OR EXISTS( telephone_number ) OR EXISTS( electronic_mail_address ) 
               OR EXISTS( telex_number ) );
  END_ENTITY; -- address (line:6550 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  ENTITY(SELF)	address
    ATTR:  internal_location,	TYPE: OPTIONAL label -- EXPLICIT

    ATTR:  street_number,	TYPE: OPTIONAL label -- EXPLICIT

    ATTR:  street,	TYPE: OPTIONAL label -- EXPLICIT

    ATTR:  postal_box,	TYPE: OPTIONAL label -- EXPLICIT

    ATTR:  town,	TYPE: OPTIONAL label -- EXPLICIT

    ATTR:  region,	TYPE: OPTIONAL label -- EXPLICIT

    ATTR:  postal_code,	TYPE: OPTIONAL label -- EXPLICIT

    ATTR:  country,	TYPE: OPTIONAL label -- EXPLICIT

    ATTR:  facsimile_number,	TYPE: OPTIONAL label -- EXPLICIT

    ATTR:  telephone_number,	TYPE: OPTIONAL label -- EXPLICIT

    ATTR:  electronic_mail_address,	TYPE: OPTIONAL label -- EXPLICIT

    ATTR:  telex_number,	TYPE: OPTIONAL label -- EXPLICIT

    ATTR:  name,	TYPE: label -- DERIVED
      := get_name_value( SELF )

    ATTR:  url,	TYPE: identifier -- DERIVED
      := get_id_value( SELF )


  SUB- ENTITY(2)	person_and_organization_address
    REDCR: organizations,	TYPE: SET [1 : 1] OF organization -- EXPLICIT
      -- OVERRIDING ENTITY: organizational_address

    REDCR: people,	TYPE: SET [1 : 1] OF person -- EXPLICIT
      -- OVERRIDING ENTITY: personal_address


  SUB- ENTITY(3)	organizational_address
    ATTR:  organizations,	TYPE: SET [1 : ?] OF organization -- EXPLICIT
      -- possibly overriden by
          ENTITY: person_and_organization_address,	TYPE: SET [1 : 1] OF organization

    ATTR:  description,	TYPE: OPTIONAL text -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(4)	personal_address
    ATTR:  people,	TYPE: SET [1 : ?] OF person -- EXPLICIT
      -- possibly overriden by
          ENTITY: person_and_organization_address,	TYPE: SET [1 : 1] OF person

    ATTR:  description,	TYPE: OPTIONAL text -- EXPLICIT	(AMBIGUOUS/MASKED)


*/


//MARK: - Partial Entity
  public final class _address : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eADDRESS.self
    }

    //ATTRIBUTES
    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _internal_location: tLABEL?  // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _street_number: tLABEL?  // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _street: tLABEL?  // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _postal_box: tLABEL?  // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _town: tLABEL?  // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _region: tLABEL?  // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _postal_code: tLABEL?  // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _country: tLABEL?  // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _facsimile_number: tLABEL?  // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _telephone_number: tLABEL?  // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _electronic_mail_address: tLABEL?  // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _telex_number: tLABEL?  // PLAIN EXPLICIT ATTRIBUTE

    /// DERIVE ATTRIBUTE
    internal func _name__getter(SELF: eADDRESS) -> tLABEL?  {

      let _TEMP1 = GET_NAME_VALUE(sNAME_ATTRIBUTE_SELECT(/*eADDRESS*/SELF))
      return _TEMP1
    }

    /// DERIVE ATTRIBUTE
    internal func _url__getter(SELF: eADDRESS) -> tIDENTIFIER?  {

      let _TEMP1 = GET_ID_VALUE(sID_ATTRIBUTE_SELECT(/*eADDRESS*/SELF))
      return _TEMP1
    }

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      //SELECT data types (indirectly) referencing the current type as a member of the select list
      members.insert(SDAI.STRING(sCLASSIFICATION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sACTION_ITEMS.typeName)) // -> sCLASSIFICATION_ITEM
      members.insert(SDAI.STRING(sCHANGE_MANAGEMENT_OBJECT.typeName)) // -> sACTION_ITEMS
      members.insert(SDAI.STRING(sIR_USAGE_ITEM.typeName)) // -> sCLASSIFICATION_ITEM
      members.insert(SDAI.STRING(sID_ATTRIBUTE_SELECT.typeName)) // -> Self
      members.insert(SDAI.STRING(sEXTERNAL_IDENTIFICATION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sIDENTIFICATION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sSAME_AS_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sNAME_ATTRIBUTE_SELECT.typeName)) // -> Self
      members.insert(SDAI.STRING(sDESCRIPTION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sGROUPABLE_ITEM.typeName)) // -> Self
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._internal_location?.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._street_number?.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._street?.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._postal_box?.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._town?.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._region?.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._postal_code?.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._country?.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._facsimile_number?.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._telephone_number?.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._electronic_mail_address?.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._telex_number?.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._internal_location?.value.isValueEqualOptionally(to: rhs._internal_location?.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._street_number?.value.isValueEqualOptionally(to: rhs._street_number?.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._street?.value.isValueEqualOptionally(to: rhs._street?.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._postal_box?.value.isValueEqualOptionally(to: rhs._postal_box?.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._town?.value.isValueEqualOptionally(to: rhs._town?.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._region?.value.isValueEqualOptionally(to: rhs._region?.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._postal_code?.value.isValueEqualOptionally(to: rhs._postal_code?.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._country?.value.isValueEqualOptionally(to: rhs._country?.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._facsimile_number?.value.isValueEqualOptionally(to: rhs._facsimile_number?.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._telephone_number?.value.isValueEqualOptionally(to: rhs._telephone_number?.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._electronic_mail_address?.value.isValueEqualOptionally(to: rhs._electronic_mail_address?.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._telex_number?.value.isValueEqualOptionally(to: rhs._telex_number?.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._internal_location?.value.isValueEqualOptionally(to: rhs._internal_location?.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._street_number?.value.isValueEqualOptionally(to: rhs._street_number?.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._street?.value.isValueEqualOptionally(to: rhs._street?.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._postal_box?.value.isValueEqualOptionally(to: rhs._postal_box?.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._town?.value.isValueEqualOptionally(to: rhs._town?.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._region?.value.isValueEqualOptionally(to: rhs._region?.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._postal_code?.value.isValueEqualOptionally(to: rhs._postal_code?.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._country?.value.isValueEqualOptionally(to: rhs._country?.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._facsimile_number?.value.isValueEqualOptionally(to: rhs._facsimile_number?.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._telephone_number?.value.isValueEqualOptionally(to: rhs._telephone_number?.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._electronic_mail_address?.value.isValueEqualOptionally(to: rhs._electronic_mail_address?.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._telex_number?.value.isValueEqualOptionally(to: rhs._telex_number?.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: eADDRESS?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.EXISTS(SELF.INTERNAL_LOCATION)
      let _TEMP2 = SDAI.EXISTS(SELF.STREET_NUMBER)
      let _TEMP3 = _TEMP1 || _TEMP2
      let _TEMP4 = SDAI.EXISTS(SELF.STREET)
      let _TEMP5 = _TEMP3 || _TEMP4
      let _TEMP6 = SDAI.EXISTS(SELF.POSTAL_BOX)
      let _TEMP7 = _TEMP5 || _TEMP6
      let _TEMP8 = SDAI.EXISTS(SELF.TOWN)
      let _TEMP9 = _TEMP7 || _TEMP8
      let _TEMP10 = SDAI.EXISTS(SELF.REGION)
      let _TEMP11 = _TEMP9 || _TEMP10
      let _TEMP12 = SDAI.EXISTS(SELF.POSTAL_CODE)
      let _TEMP13 = _TEMP11 || _TEMP12
      let _TEMP14 = SDAI.EXISTS(SELF.COUNTRY)
      let _TEMP15 = _TEMP13 || _TEMP14
      let _TEMP16 = SDAI.EXISTS(SELF.FACSIMILE_NUMBER)
      let _TEMP17 = _TEMP15 || _TEMP16
      let _TEMP18 = SDAI.EXISTS(SELF.TELEPHONE_NUMBER)
      let _TEMP19 = _TEMP17 || _TEMP18
      let _TEMP20 = SDAI.EXISTS(SELF.ELECTRONIC_MAIL_ADDRESS)
      let _TEMP21 = _TEMP19 || _TEMP20
      let _TEMP22 = SDAI.EXISTS(SELF.TELEX_NUMBER)
      let _TEMP23 = _TEMP21 || _TEMP22
      return _TEMP23
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(INTERNAL_LOCATION: tLABEL? , STREET_NUMBER: tLABEL? , STREET: tLABEL? , 
                POSTAL_BOX: tLABEL? , TOWN: tLABEL? , REGION: tLABEL? , POSTAL_CODE: tLABEL? , 
                COUNTRY: tLABEL? , FACSIMILE_NUMBER: tLABEL? , TELEPHONE_NUMBER: tLABEL? , 
                ELECTRONIC_MAIL_ADDRESS: tLABEL? , TELEX_NUMBER: tLABEL? ) {
      self._internal_location = INTERNAL_LOCATION
      self._street_number = STREET_NUMBER
      self._street = STREET
      self._postal_box = POSTAL_BOX
      self._town = TOWN
      self._region = REGION
      self._postal_code = POSTAL_CODE
      self._country = COUNTRY
      self._facsimile_number = FACSIMILE_NUMBER
      self._telephone_number = TELEPHONE_NUMBER
      self._electronic_mail_address = ELECTRONIC_MAIL_ADDRESS
      self._telex_number = TELEX_NUMBER
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 12
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverOptionalParameter(as: tLABEL.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p1) = exchangeStructure.recoverOptionalParameter(as: tLABEL.self, from: parameters[1])
      else { exchangeStructure.add(errorContext: "while recovering parameter #1 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p2) = exchangeStructure.recoverOptionalParameter(as: tLABEL.self, from: parameters[2])
      else { exchangeStructure.add(errorContext: "while recovering parameter #2 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p3) = exchangeStructure.recoverOptionalParameter(as: tLABEL.self, from: parameters[3])
      else { exchangeStructure.add(errorContext: "while recovering parameter #3 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p4) = exchangeStructure.recoverOptionalParameter(as: tLABEL.self, from: parameters[4])
      else { exchangeStructure.add(errorContext: "while recovering parameter #4 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p5) = exchangeStructure.recoverOptionalParameter(as: tLABEL.self, from: parameters[5])
      else { exchangeStructure.add(errorContext: "while recovering parameter #5 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p6) = exchangeStructure.recoverOptionalParameter(as: tLABEL.self, from: parameters[6])
      else { exchangeStructure.add(errorContext: "while recovering parameter #6 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p7) = exchangeStructure.recoverOptionalParameter(as: tLABEL.self, from: parameters[7])
      else { exchangeStructure.add(errorContext: "while recovering parameter #7 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p8) = exchangeStructure.recoverOptionalParameter(as: tLABEL.self, from: parameters[8])
      else { exchangeStructure.add(errorContext: "while recovering parameter #8 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p9) = exchangeStructure.recoverOptionalParameter(as: tLABEL.self, from: parameters[9])
      else { exchangeStructure.add(errorContext: "while recovering parameter #9 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p10) = exchangeStructure.recoverOptionalParameter(as: tLABEL.self, from: parameters[10])
      else { exchangeStructure.add(errorContext: "while recovering parameter #10 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p11) = exchangeStructure.recoverOptionalParameter(as: tLABEL.self, from: parameters[11])
      else { exchangeStructure.add(errorContext: "while recovering parameter #11 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( INTERNAL_LOCATION: p0, STREET_NUMBER: p1, STREET: p2, POSTAL_BOX: p3, TOWN: p4, REGION: p5, POSTAL_CODE: p6, COUNTRY: p7, FACSIMILE_NUMBER: p8, TELEPHONE_NUMBER: p9, ELECTRONIC_MAIL_ADDRESS: p10, TELEX_NUMBER: p11 )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY address;
      internal_location        : OPTIONAL label;
      street_number            : OPTIONAL label;
      street                   : OPTIONAL label;
      postal_box               : OPTIONAL label;
      town                     : OPTIONAL label;
      region                   : OPTIONAL label;
      postal_code              : OPTIONAL label;
      country                  : OPTIONAL label;
      facsimile_number         : OPTIONAL label;
      telephone_number         : OPTIONAL label;
      electronic_mail_address  : OPTIONAL label;
      telex_number             : OPTIONAL label;
    DERIVE
      name  : label := get_name_value( SELF );
      url   : identifier := get_id_value( SELF );
    WHERE
      wr1: ( EXISTS( internal_location ) OR EXISTS( street_number ) OR EXISTS( street ) OR EXISTS( postal_box ) 
               OR EXISTS( town ) OR EXISTS( region ) OR EXISTS( postal_code ) OR EXISTS( country ) OR 
               EXISTS( facsimile_number ) OR EXISTS( telephone_number ) OR EXISTS( electronic_mail_address ) 
               OR EXISTS( telex_number ) );
  END_ENTITY; -- address (line:6550 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eADDRESS : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _address.self
    }
    public let partialEntity: _address

    //MARK: SUPERTYPES
    public var super_eADDRESS: eADDRESS { return self } 	// [1]

    //MARK: SUBTYPES
    public var sub_ePERSON_AND_ORGANIZATION_ADDRESS: ePERSON_AND_ORGANIZATION_ADDRESS? {	// [2]
      return self.complexEntity.entityReference(ePERSON_AND_ORGANIZATION_ADDRESS.self)
    }

    public var sub_eORGANIZATIONAL_ADDRESS: eORGANIZATIONAL_ADDRESS? {	// [3]
      return self.complexEntity.entityReference(eORGANIZATIONAL_ADDRESS.self)
    }

    public var sub_ePERSONAL_ADDRESS: ePERSONAL_ADDRESS? {	// [4]
      return self.complexEntity.entityReference(ePERSONAL_ADDRESS.self)
    }


    //MARK: ATTRIBUTES
    // DESCRIPTION: (2 AMBIGUOUS REFs)

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePERSONAL_ADDRESS`` )
    public var PEOPLE: (SDAI.SET<ePERSON>/*[1:nil]*/ )?  {
      get {
        return sub_ePERSONAL_ADDRESS?.partialEntity._people
      }
      set(newValue) {
        guard let partial = sub_ePERSONAL_ADDRESS?.super_ePERSONAL_ADDRESS.partialEntity else { return }
        partial._people = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eADDRESS`` )
    public var STREET: tLABEL?  {
      get {
        return self.partialEntity._street
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._street = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eORGANIZATIONAL_ADDRESS`` )
    public var ORGANIZATIONS: (SDAI.SET<eORGANIZATION>/*[1:nil]*/ )?  {
      get {
        return sub_eORGANIZATIONAL_ADDRESS?.partialEntity._organizations
      }
      set(newValue) {
        guard let partial = sub_eORGANIZATIONAL_ADDRESS?.super_eORGANIZATIONAL_ADDRESS.partialEntity
          else { return }
        partial._organizations = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eADDRESS`` )
    public var TELEX_NUMBER: tLABEL?  {
      get {
        return self.partialEntity._telex_number
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._telex_number = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eADDRESS`` )
    public var FACSIMILE_NUMBER: tLABEL?  {
      get {
        return self.partialEntity._facsimile_number
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._facsimile_number = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eADDRESS`` )
    public var REGION: tLABEL?  {
      get {
        return self.partialEntity._region
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._region = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eADDRESS`` )
    public var ELECTRONIC_MAIL_ADDRESS: tLABEL?  {
      get {
        return self.partialEntity._electronic_mail_address
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._electronic_mail_address = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eADDRESS`` )
    public var STREET_NUMBER: tLABEL?  {
      get {
        return self.partialEntity._street_number
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._street_number = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eADDRESS`` )
    public var INTERNAL_LOCATION: tLABEL?  {
      get {
        return self.partialEntity._internal_location
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._internal_location = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eADDRESS`` )
    public var POSTAL_CODE: tLABEL?  {
      get {
        return self.partialEntity._postal_code
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._postal_code = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eADDRESS`` )
    public var POSTAL_BOX: tLABEL?  {
      get {
        return self.partialEntity._postal_box
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._postal_box = newValue
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SELF( ``eADDRESS`` )
    public var URL: tIDENTIFIER?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"URL") {
          return cached.value as! tIDENTIFIER? 
        }
        let origin = self
        let value = origin.partialEntity._url__getter(SELF: origin)
        updateCache(derivedAttributeName:"URL", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eADDRESS`` )
    public var TOWN: tLABEL?  {
      get {
        return self.partialEntity._town
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._town = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eADDRESS`` )
    public var COUNTRY: tLABEL?  {
      get {
        return self.partialEntity._country
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._country = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eADDRESS`` )
    public var TELEPHONE_NUMBER: tLABEL?  {
      get {
        return self.partialEntity._telephone_number
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._telephone_number = newValue
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SELF( ``eADDRESS`` )
    public var NAME: tLABEL?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"NAME") {
          return cached.value as! tLABEL? 
        }
        let origin = self
        let value = origin.partialEntity._name__getter(SELF: origin)
        updateCache(derivedAttributeName:"NAME", value:value)
        return value
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_address.self) else { return nil }
      self.partialEntity = partial

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }

    //SIMPLE ENTITY REFERENCE
    public convenience init?(_ partial:_address) {
      let complex = SDAI.ComplexEntity(entities:[partial])
      self.init(complex: complex)
    }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _address.WHERE_wr1(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "ADDRESS", type: self, explicitAttributeCount: 12)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eADDRESS.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "PEOPLE", keyPath: \eADDRESS.PEOPLE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "STREET", keyPath: \eADDRESS.STREET, 
        kind: .explicitOptional, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "ORGANIZATIONS", keyPath: \eADDRESS.ORGANIZATIONS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "TELEX_NUMBER", keyPath: \eADDRESS.TELEX_NUMBER, 
        kind: .explicitOptional, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "FACSIMILE_NUMBER", keyPath: \eADDRESS.FACSIMILE_NUMBER, 
        kind: .explicitOptional, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "REGION", keyPath: \eADDRESS.REGION, 
        kind: .explicitOptional, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "ELECTRONIC_MAIL_ADDRESS", keyPath: \eADDRESS.ELECTRONIC_MAIL_ADDRESS, 
        kind: .explicitOptional, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "STREET_NUMBER", keyPath: \eADDRESS.STREET_NUMBER, 
        kind: .explicitOptional, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "INTERNAL_LOCATION", keyPath: \eADDRESS.INTERNAL_LOCATION, 
        kind: .explicitOptional, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "POSTAL_CODE", keyPath: \eADDRESS.POSTAL_CODE, 
        kind: .explicitOptional, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "POSTAL_BOX", keyPath: \eADDRESS.POSTAL_BOX, 
        kind: .explicitOptional, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "URL", keyPath: \eADDRESS.URL, 
        kind: .derived, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "TOWN", keyPath: \eADDRESS.TOWN, 
        kind: .explicitOptional, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "COUNTRY", keyPath: \eADDRESS.COUNTRY, 
        kind: .explicitOptional, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "TELEPHONE_NUMBER", keyPath: \eADDRESS.TELEPHONE_NUMBER, 
        kind: .explicitOptional, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "NAME", keyPath: \eADDRESS.NAME, 
        kind: .derived, source: .thisEntity, mayYieldEntityReference: false)

      return entityDef
    }

  }
}
