/* file: a3m_inspected_model_and_inspection_result_relationship.swift 	 generated: Tue Nov 16 05:35:44 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY a3m_inspected_model_and_inspection_result_relationship;
      inspected_model     : target_annotated_3d_model_select;
      equivalence_result  : a3m_equivalence_inspection_result_representation;
  END_ENTITY; -- a3m_inspected_model_and_inspection_result_relationship (line:6217 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  ENTITY(SELF)	a3m_inspected_model_and_inspection_result_relationship
    ATTR:  inspected_model,	TYPE: target_annotated_3d_model_select -- EXPLICIT

    ATTR:  equivalence_result,	TYPE: a3m_equivalence_inspection_result_representation -- EXPLICIT


*/


//MARK: - Partial Entity
  public final class _a3m_inspected_model_and_inspection_result_relationship : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eA3M_INSPECTED_MODEL_AND_INSPECTION_RESULT_RELATIONSHIP.self
    }

    //ATTRIBUTES
    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _inspected_model: sTARGET_ANNOTATED_3D_MODEL_SELECT // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _equivalence_result: eA3M_EQUIVALENCE_INSPECTION_RESULT_REPRESENTATION // PLAIN EXPLICIT ATTRIBUTE

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._inspected_model.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._equivalence_result.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._inspected_model.value.isValueEqualOptionally(to: rhs._inspected_model.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._equivalence_result.value.isValueEqualOptionally(to: rhs._equivalence_result.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._inspected_model.value.isValueEqualOptionally(to: rhs._inspected_model.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._equivalence_result.value.isValueEqualOptionally(to: rhs._equivalence_result.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(INSPECTED_MODEL: sTARGET_ANNOTATED_3D_MODEL_SELECT, EQUIVALENCE_RESULT: 
                eA3M_EQUIVALENCE_INSPECTION_RESULT_REPRESENTATION) {
      self._inspected_model = INSPECTED_MODEL
      self._equivalence_result = EQUIVALENCE_RESULT
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 2
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverRequiredParameter(as: 
        sTARGET_ANNOTATED_3D_MODEL_SELECT.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p1) = exchangeStructure.recoverRequiredParameter(as: 
        eA3M_EQUIVALENCE_INSPECTION_RESULT_REPRESENTATION.self, from: parameters[1])
      else { exchangeStructure.add(errorContext: "while recovering parameter #1 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( INSPECTED_MODEL: p0, EQUIVALENCE_RESULT: p1 )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY a3m_inspected_model_and_inspection_result_relationship;
      inspected_model     : target_annotated_3d_model_select;
      equivalence_result  : a3m_equivalence_inspection_result_representation;
  END_ENTITY; -- a3m_inspected_model_and_inspection_result_relationship (line:6217 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eA3M_INSPECTED_MODEL_AND_INSPECTION_RESULT_RELATIONSHIP : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _a3m_inspected_model_and_inspection_result_relationship.self
    }
    public let partialEntity: _a3m_inspected_model_and_inspection_result_relationship

    //MARK: SUPERTYPES
    public var super_eA3M_INSPECTED_MODEL_AND_INSPECTION_RESULT_RELATIONSHIP: eA3M_INSPECTED_MODEL_AND_INSPECTION_RESULT_RELATIONSHIP { return self } 	// [1]

    //MARK: SUBTYPES

    //MARK: ATTRIBUTES
    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eA3M_INSPECTED_MODEL_AND_INSPECTION_RESULT_RELATIONSHIP`` )
    public var EQUIVALENCE_RESULT: eA3M_EQUIVALENCE_INSPECTION_RESULT_REPRESENTATION {
      get {
        return SDAI.UNWRAP( self.partialEntity._equivalence_result )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._equivalence_result = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eA3M_INSPECTED_MODEL_AND_INSPECTION_RESULT_RELATIONSHIP`` )
    public var INSPECTED_MODEL: sTARGET_ANNOTATED_3D_MODEL_SELECT {
      get {
        return SDAI.UNWRAP( self.partialEntity._inspected_model )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._inspected_model = SDAI.UNWRAP(newValue)
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_a3m_inspected_model_and_inspection_result_relationship.self) else { return nil }
      self.partialEntity = partial

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }

    //SIMPLE ENTITY REFERENCE
    public convenience init?(_ partial:_a3m_inspected_model_and_inspection_result_relationship) {
      let complex = SDAI.ComplexEntity(entities:[partial])
      self.init(complex: complex)
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "A3M_INSPECTED_MODEL_AND_INSPECTION_RESULT_RELATIONSHIP", type: self, explicitAttributeCount: 2)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eA3M_INSPECTED_MODEL_AND_INSPECTION_RESULT_RELATIONSHIP.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "EQUIVALENCE_RESULT", keyPath: \eA3M_INSPECTED_MODEL_AND_INSPECTION_RESULT_RELATIONSHIP.EQUIVALENCE_RESULT, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "INSPECTED_MODEL", keyPath: \eA3M_INSPECTED_MODEL_AND_INSPECTION_RESULT_RELATIONSHIP.INSPECTED_MODEL, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)

      return entityDef
    }

  }
}
