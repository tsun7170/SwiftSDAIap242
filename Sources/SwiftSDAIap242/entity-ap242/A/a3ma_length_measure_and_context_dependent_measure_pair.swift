/* file: a3ma_length_measure_and_context_dependent_measure_pair.swift 	 generated: Mon Jan  3 16:32:52 2022 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.1, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY a3ma_length_measure_and_context_dependent_measure_pair
    SUBTYPE OF ( compound_representation_item );
    WHERE
      wr1: ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.LIST_REPRESENTATION_ITEM' IN TYPEOF( SELF\
               compound_representation_item.item_element ) );
      wr2: ( SIZEOF( SELF\compound_representation_item.item_element ) = 2 );
      wr3: ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.VALUE_REPRESENTATION_ITEM' IN TYPEOF( SELF\
               compound_representation_item.item_element[1] ) );
      wr4: ( SIZEOF( QUERY ( vri <* [SELF\compound_representation_item.item_element[1]] | ( 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.LENGTH_MEASURE'  IN TYPEOF( vri.
               value_component ) ) ) ) = 1 );
      wr5: ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.VALUE_REPRESENTATION_ITEM' IN TYPEOF( SELF\
               compound_representation_item.item_element[2] ) );
      wr6: ( SIZEOF( QUERY ( vri <* [SELF\compound_representation_item.item_element[2]] | ( 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CONTEXT_DEPENDENT_MEASURE'  IN TYPEOF( vri.
               value_component ) ) ) ) = 1 );
  END_ENTITY; -- a3ma_length_measure_and_context_dependent_measure_pair (line:6260 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	representation_item
    ATTR:  name,	TYPE: label -- EXPLICIT


  SUPER- ENTITY(2)	compound_representation_item
    ATTR:  item_element,	TYPE: compound_item_definition -- EXPLICIT
      -- possibly overriden by
          ENTITY: primitive_2d_with_inner_boundary,	TYPE: compound_inner_area_boundary
          ENTITY: row_representation_item,	TYPE: list_representation_item
          ENTITY: point_and_vector,	TYPE: point_and_vector_members
          ENTITY: point_path,	TYPE: point_path_members
          ENTITY: point_array,	TYPE: point_array_members
          ENTITY: location_in_aggregate_representation_item,	TYPE: location_in_aggregate_item


  ENTITY(SELF)	a3ma_length_measure_and_context_dependent_measure_pair
    (no local attributes)

*/


//MARK: - Partial Entity
  public final class _a3ma_length_measure_and_context_dependent_measure_pair : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eA3MA_LENGTH_MEASURE_AND_CONTEXT_DEPENDENT_MEASURE_PAIR.self
    }

    //ATTRIBUTES
    // (no local attributes)

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      //SELECT data types (indirectly) referencing the current type as a member of the select list
      members.insert(SDAI.STRING(sEQUIVALENCE_MEASURED_VALUE_SELECT.typeName)) // -> Self
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: eA3MA_LENGTH_MEASURE_AND_CONTEXT_DEPENDENT_MEASURE_PAIR?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.TYPEOF(SELF.GROUP_REF(eCOMPOUND_REPRESENTATION_ITEM.self)?.ITEM_ELEMENT, 
        IS: tLIST_REPRESENTATION_ITEM.self)
      return _TEMP1
    }
    public static func WHERE_wr2(SELF: eA3MA_LENGTH_MEASURE_AND_CONTEXT_DEPENDENT_MEASURE_PAIR?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.GROUP_REF(eCOMPOUND_REPRESENTATION_ITEM.self)
      let _TEMP2 = _TEMP1?.ITEM_ELEMENT
      let _TEMP3 = SDAI.SIZEOF(SDAI.AGGREGATE<SDAI.GENERIC>(/*sCOMPOUND_ITEM_DEFINITION*/_TEMP2))
      let _TEMP4 = _TEMP3 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(2))
      return _TEMP4
    }
    public static func WHERE_wr3(SELF: eA3MA_LENGTH_MEASURE_AND_CONTEXT_DEPENDENT_MEASURE_PAIR?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.TYPEOF(SELF.GROUP_REF(eCOMPOUND_REPRESENTATION_ITEM.self)?.ITEM_ELEMENT[1], 
        IS: eVALUE_REPRESENTATION_ITEM.self)
      return _TEMP1
    }
    public static func WHERE_wr4(SELF: eA3MA_LENGTH_MEASURE_AND_CONTEXT_DEPENDENT_MEASURE_PAIR?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.GROUP_REF(eCOMPOUND_REPRESENTATION_ITEM.self)
      let _TEMP2 = _TEMP1?.ITEM_ELEMENT
      let _TEMP3 = _TEMP2?[1]
      let _TEMP4 = ([SDAI.AIE(_TEMP3)] as [SDAI.AggregationInitializerElement<eREPRESENTATION_ITEM>])
      let _TEMP5 = _TEMP4.QUERY{ VRI in 

          let _TEMP1 = SDAI.TYPEOF(VRI.VALUE_COMPONENT, IS: tLENGTH_MEASURE.self)
          return _TEMP1 }
      let _TEMP6 = SDAI.SIZEOF(_TEMP5)
      let _TEMP7 = _TEMP6 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
      return _TEMP7
    }
    public static func WHERE_wr5(SELF: eA3MA_LENGTH_MEASURE_AND_CONTEXT_DEPENDENT_MEASURE_PAIR?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.TYPEOF(SELF.GROUP_REF(eCOMPOUND_REPRESENTATION_ITEM.self)?.ITEM_ELEMENT[2], 
        IS: eVALUE_REPRESENTATION_ITEM.self)
      return _TEMP1
    }
    public static func WHERE_wr6(SELF: eA3MA_LENGTH_MEASURE_AND_CONTEXT_DEPENDENT_MEASURE_PAIR?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.GROUP_REF(eCOMPOUND_REPRESENTATION_ITEM.self)
      let _TEMP2 = _TEMP1?.ITEM_ELEMENT
      let _TEMP3 = _TEMP2?[2]
      let _TEMP4 = ([SDAI.AIE(_TEMP3)] as [SDAI.AggregationInitializerElement<eREPRESENTATION_ITEM>])
      let _TEMP5 = _TEMP4.QUERY{ VRI in 

          let _TEMP1 = SDAI.TYPEOF(VRI.VALUE_COMPONENT, IS: tCONTEXT_DEPENDENT_MEASURE.self)
          return _TEMP1 }
      let _TEMP6 = SDAI.SIZEOF(_TEMP5)
      let _TEMP7 = _TEMP6 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
      return _TEMP7
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init() {
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 0
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      self.init( )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY a3ma_length_measure_and_context_dependent_measure_pair
    SUBTYPE OF ( compound_representation_item );
    WHERE
      wr1: ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.LIST_REPRESENTATION_ITEM' IN TYPEOF( SELF\
               compound_representation_item.item_element ) );
      wr2: ( SIZEOF( SELF\compound_representation_item.item_element ) = 2 );
      wr3: ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.VALUE_REPRESENTATION_ITEM' IN TYPEOF( SELF\
               compound_representation_item.item_element[1] ) );
      wr4: ( SIZEOF( QUERY ( vri <* [SELF\compound_representation_item.item_element[1]] | ( 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.LENGTH_MEASURE'  IN TYPEOF( vri.
               value_component ) ) ) ) = 1 );
      wr5: ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.VALUE_REPRESENTATION_ITEM' IN TYPEOF( SELF\
               compound_representation_item.item_element[2] ) );
      wr6: ( SIZEOF( QUERY ( vri <* [SELF\compound_representation_item.item_element[2]] | ( 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CONTEXT_DEPENDENT_MEASURE'  IN TYPEOF( vri.
               value_component ) ) ) ) = 1 );
  END_ENTITY; -- a3ma_length_measure_and_context_dependent_measure_pair (line:6260 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eA3MA_LENGTH_MEASURE_AND_CONTEXT_DEPENDENT_MEASURE_PAIR : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _a3ma_length_measure_and_context_dependent_measure_pair.self
    }
    public let partialEntity: _a3ma_length_measure_and_context_dependent_measure_pair

    //MARK: SUPERTYPES
    public let super_eREPRESENTATION_ITEM: eREPRESENTATION_ITEM 	// [1]
    public let super_eCOMPOUND_REPRESENTATION_ITEM: eCOMPOUND_REPRESENTATION_ITEM 	// [2]
    public var super_eA3MA_LENGTH_MEASURE_AND_CONTEXT_DEPENDENT_MEASURE_PAIR: eA3MA_LENGTH_MEASURE_AND_CONTEXT_DEPENDENT_MEASURE_PAIR { return self } 	// [3]

    //MARK: SUBTYPES

    //MARK: ATTRIBUTES
    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eCOMPOUND_REPRESENTATION_ITEM`` )
    public var ITEM_ELEMENT: sCOMPOUND_ITEM_DEFINITION {
      get {
        return SDAI.UNWRAP( super_eCOMPOUND_REPRESENTATION_ITEM.partialEntity._item_element )
      }
      set(newValue) {
        let partial = super_eCOMPOUND_REPRESENTATION_ITEM.partialEntity
        partial._item_element = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eREPRESENTATION_ITEM`` )
    public var NAME: tLABEL {
      get {
        return SDAI.UNWRAP( super_eREPRESENTATION_ITEM.partialEntity._name )
      }
      set(newValue) {
        let partial = super_eREPRESENTATION_ITEM.partialEntity
        partial._name = SDAI.UNWRAP(newValue)
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_a3ma_length_measure_and_context_dependent_measure_pair.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eREPRESENTATION_ITEM.self) else { return nil }
      self.super_eREPRESENTATION_ITEM = super1

      guard let super2 = complexEntity?.entityReference(eCOMPOUND_REPRESENTATION_ITEM.self) else { return nil }
      self.super_eCOMPOUND_REPRESENTATION_ITEM = super2

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _a3ma_length_measure_and_context_dependent_measure_pair.WHERE_wr1(SELF: instance)
      result[prefix2 + " .WHERE_wr2"] = _a3ma_length_measure_and_context_dependent_measure_pair.WHERE_wr2(SELF: instance)
      result[prefix2 + " .WHERE_wr3"] = _a3ma_length_measure_and_context_dependent_measure_pair.WHERE_wr3(SELF: instance)
      result[prefix2 + " .WHERE_wr4"] = _a3ma_length_measure_and_context_dependent_measure_pair.WHERE_wr4(SELF: instance)
      result[prefix2 + " .WHERE_wr5"] = _a3ma_length_measure_and_context_dependent_measure_pair.WHERE_wr5(SELF: instance)
      result[prefix2 + " .WHERE_wr6"] = _a3ma_length_measure_and_context_dependent_measure_pair.WHERE_wr6(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "A3MA_LENGTH_MEASURE_AND_CONTEXT_DEPENDENT_MEASURE_PAIR", type: self, explicitAttributeCount: 0)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eREPRESENTATION_ITEM.self)
      entityDef.add(supertype: eCOMPOUND_REPRESENTATION_ITEM.self)
      entityDef.add(supertype: eA3MA_LENGTH_MEASURE_AND_CONTEXT_DEPENDENT_MEASURE_PAIR.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "ITEM_ELEMENT", keyPath: \eA3MA_LENGTH_MEASURE_AND_CONTEXT_DEPENDENT_MEASURE_PAIR.ITEM_ELEMENT, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "NAME", keyPath: \eA3MA_LENGTH_MEASURE_AND_CONTEXT_DEPENDENT_MEASURE_PAIR.NAME, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)

      return entityDef
    }

  }
}
