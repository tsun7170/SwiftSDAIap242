/* file: advanced_face.swift 	 generated: Sat Aug 14 13:46:02 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY advanced_face
    SUBTYPE OF ( face_surface );
    WHERE
      wr1 : ( SIZEOF( [ 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ELEMENTARY_SURFACE', 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.B_SPLINE_SURFACE' , 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SWEPT_SURFACE' ] * TYPEOF( face_geometry ) ) 
                = 1 );
      wr2 : ( SIZEOF( QUERY ( elp_fbnds <* QUERY ( bnds <* bounds | ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.EDGE_LOOP'  IN TYPEOF( bnds.bound ) ) ) | ( 
                NOT ( SIZEOF( QUERY ( oe <* elp_fbnds.bound\path.edge_list | ( NOT ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.EDGE_CURVE'  IN TYPEOF( oe\oriented_edge.
                edge_element ) ) ) ) ) = 0 ) ) ) ) = 0 );
      wr3 : ( SIZEOF( QUERY ( elp_fbnds <* QUERY ( bnds <* bounds | ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.EDGE_LOOP'  IN TYPEOF( bnds.bound ) ) ) | ( 
                NOT ( SIZEOF( QUERY ( oe <* elp_fbnds.bound\path.edge_list | ( NOT ( SIZEOF( [
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.LINE' , 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CONIC' , 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.POLYLINE' , 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SURFACE_CURVE' , 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.B_SPLINE_CURVE' ] * TYPEOF( oe.edge_element\
                edge_curve.edge_geometry ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 );
      wr4 : ( SIZEOF( QUERY ( elp_fbnds <* QUERY ( bnds <* bounds | ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.EDGE_LOOP'  IN TYPEOF( bnds.bound ) ) ) | ( 
                NOT ( SIZEOF( QUERY ( oe <* elp_fbnds.bound\path.edge_list | ( NOT ( ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.VERTEX_POINT'  IN TYPEOF( oe\edge.edge_start ) ) 
                AND ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CARTESIAN_POINT' IN TYPEOF( oe\edge.
                edge_start\vertex_point.vertex_geometry ) ) AND ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.VERTEX_POINT'  IN TYPEOF( oe\edge.edge_end ) ) 
                AND ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CARTESIAN_POINT' IN TYPEOF( oe\edge.
                edge_end\vertex_point.vertex_geometry ) ) ) ) ) ) = 0 ) ) ) ) = 0 );
      wr5 : ( SIZEOF( QUERY ( elp_fbnds <* QUERY ( bnds <* bounds | ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.EDGE_LOOP'  IN TYPEOF( bnds.bound ) ) ) | ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ORIENTED_PATH'  IN TYPEOF( elp_fbnds.bound ) ) ) ) 
                = 0 );
      wr6 : ( ( NOT ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SWEPT_SURFACE' IN TYPEOF( 
                face_geometry ) ) ) OR ( SIZEOF( [ 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.LINE', 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CONIC' , 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.POLYLINE' , 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.B_SPLINE_CURVE' ] * TYPEOF( face_geometry\
                swept_surface.swept_curve ) ) = 1 ) );
      wr7 : ( SIZEOF( QUERY ( vlp_fbnds <* QUERY ( bnds <* bounds | ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.VERTEX_LOOP'  IN TYPEOF( bnds.bound ) ) ) | 
                ( NOT ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.VERTEX_POINT' IN TYPEOF( vlp_fbnds
                \face_bound.bound\vertex_loop.loop_vertex ) ) AND ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CARTESIAN_POINT'  IN TYPEOF( vlp_fbnds\
                face_bound.bound\vertex_loop.loop_vertex\vertex_point.vertex_geometry ) ) ) ) ) ) = 0 );
      wr8 : ( SIZEOF( QUERY ( bnd <* bounds | ( NOT ( SIZEOF( [
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.EDGE_LOOP' , 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.VERTEX_LOOP' ] * TYPEOF( bnd.bound ) ) = 1 ) ) ) ) 
                = 0 );
      wr9 : ( SIZEOF( QUERY ( elp_fbnds <* QUERY ( bnds <* bounds | ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.EDGE_LOOP'  IN TYPEOF( bnds.bound ) ) ) | ( 
                NOT ( SIZEOF( QUERY ( oe <* elp_fbnds.bound\path.edge_list | ( ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SURFACE_CURVE'  IN TYPEOF( oe\oriented_edge.
                edge_element\edge_curve.edge_geometry ) ) AND ( NOT ( SIZEOF( QUERY ( sc_ag <* oe.
                edge_element\edge_curve.edge_geometry\surface_curve.associated_geometry | ( NOT ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PCURVE'  IN TYPEOF( sc_ag ) ) ) ) ) = 0 ) ) ) ) ) 
                = 0 ) ) ) ) = 0 );
      wr10: ( ( ( NOT ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SWEPT_SURFACE' IN TYPEOF( 
                face_geometry ) ) ) OR ( NOT ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.POLYLINE' IN 
                TYPEOF( face_geometry\swept_surface.swept_curve ) ) ) OR ( SIZEOF( face_geometry\
                swept_surface.swept_curve\polyline.points ) >= 3 ) ) AND ( SIZEOF( QUERY ( elp_fbnds <* 
                QUERY ( bnds <* bounds | ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.EDGE_LOOP' IN 
                TYPEOF( bnds.bound ) ) ) | ( NOT ( SIZEOF( QUERY ( oe <* elp_fbnds.bound\path.edge_list | ( 
                ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.POLYLINE' IN TYPEOF( oe\oriented_edge.
                edge_element\edge_curve.edge_geometry ) ) AND ( NOT ( SIZEOF( oe\oriented_edge.edge_element\
                edge_curve.edge_geometry\polyline.points ) >= 3 ) ) ) ) ) = 0 ) ) ) ) = 0 ) );
  END_ENTITY; -- advanced_face (line:6627 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	representation_item
    ATTR:  name,	TYPE: label -- EXPLICIT


  SUPER- ENTITY(2)	topological_representation_item
    ATTR:  permanent_id,	TYPE: identifier -- DERIVED
      := get_id_value( SELF )

    ATTR:  permanent_aggregate_id,	TYPE: identifier -- DERIVED
      := get_aggregate_id_value( SELF )


  SUPER- ENTITY(3)	face
    ATTR:  bounds,	TYPE: SET [1 : ?] OF face_bound -- EXPLICIT (DYNAMIC)
      -- possibly overriden by
          ENTITY: oriented_face,	TYPE: SET [1 : ?] OF face_bound	(as DERIVED)


  SUPER- ENTITY(4)	geometric_representation_item
    ATTR:  dim,	TYPE: dimension_count -- DERIVED
      := dimension_of( SELF )


  SUPER- ENTITY(5)	face_surface
    ATTR:  face_geometry,	TYPE: surface -- EXPLICIT

    ATTR:  same_sense,	TYPE: BOOLEAN -- EXPLICIT


  ENTITY(SELF)	advanced_face
    (no local attributes)

*/


//MARK: - Partial Entity
  public final class _advanced_face : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eADVANCED_FACE.self
    }

    //ATTRIBUTES
    // (no local attributes)

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: eADVANCED_FACE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = ([SDAI.AIE(SDAI.STRING("AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ELEMENTARY_SURFACE")), 
        SDAI.AIE(SDAI.STRING("AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.B_SPLINE_SURFACE")), 
        SDAI.AIE(SDAI.STRING("AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SWEPT_SURFACE"))] 
        as [SDAI.AggregationInitializerElement<SDAI.STRING>])
      let _TEMP2 = SDAI.TYPEOF(SELF.FACE_GEOMETRY)
      let _TEMP3 = SDAI.FORCE_OPTIONAL(_TEMP1) * _TEMP2
      let _TEMP4 = SDAI.SIZEOF(_TEMP3)
      let _TEMP5 = _TEMP4 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
      return _TEMP5
    }
    public static func WHERE_wr2(SELF: eADVANCED_FACE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.BOUNDS.QUERY{ BNDS in 

          let _TEMP1 = SDAI.TYPEOF(BNDS.BOUND, IS: eEDGE_LOOP.self)
          return _TEMP1 }
      let _TEMP2 = _TEMP1.QUERY{ ELP_FBNDS in 

          let _TEMP1 = ELP_FBNDS.BOUND
          let _TEMP2 = _TEMP1.GROUP_REF(ePATH.self)
          let _TEMP3 = _TEMP2?.EDGE_LIST
          let _TEMP4 = _TEMP3?.QUERY{ OE in 

              let _TEMP1 = SDAI.TYPEOF(OE.GROUP_REF(eORIENTED_EDGE.self)?.EDGE_ELEMENT, IS: eEDGE_CURVE.self)
              let _TEMP2 =  !_TEMP1
              return _TEMP2 }
          let _TEMP5 = SDAI.SIZEOF(_TEMP4)
          let _TEMP6 = _TEMP5 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
          let _TEMP7 =  !_TEMP6
          return _TEMP7 }
      let _TEMP3 = SDAI.SIZEOF(_TEMP2)
      let _TEMP4 = _TEMP3 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      return _TEMP4
    }
    public static func WHERE_wr3(SELF: eADVANCED_FACE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.BOUNDS.QUERY{ BNDS in 

          let _TEMP1 = SDAI.TYPEOF(BNDS.BOUND, IS: eEDGE_LOOP.self)
          return _TEMP1 }
      let _TEMP2 = _TEMP1.QUERY{ ELP_FBNDS in 

          let _TEMP1 = ELP_FBNDS.BOUND
          let _TEMP2 = _TEMP1.GROUP_REF(ePATH.self)
          let _TEMP3 = _TEMP2?.EDGE_LIST
          let _TEMP4 = _TEMP3?.QUERY{ OE in 

              let _TEMP1 = ([SDAI.AIE(SDAI.STRING("AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.LINE")), 
                SDAI.AIE(SDAI.STRING("AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CONIC")), 
                SDAI.AIE(SDAI.STRING("AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.POLYLINE")), 
                SDAI.AIE(SDAI.STRING("AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SURFACE_CURVE")), 
                SDAI.AIE(SDAI.STRING("AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.B_SPLINE_CURVE"))] 
                as [SDAI.AggregationInitializerElement<SDAI.STRING>])
              let _TEMP2 = OE.EDGE_ELEMENT
              let _TEMP3 = _TEMP2.GROUP_REF(eEDGE_CURVE.self)
              let _TEMP4 = _TEMP3?.EDGE_GEOMETRY
              let _TEMP5 = SDAI.TYPEOF(_TEMP4)
              let _TEMP6 = SDAI.FORCE_OPTIONAL(_TEMP1) * _TEMP5
              let _TEMP7 = SDAI.SIZEOF(_TEMP6)
              let _TEMP8 = _TEMP7 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
              let _TEMP9 =  !_TEMP8
              return _TEMP9 }
          let _TEMP5 = SDAI.SIZEOF(_TEMP4)
          let _TEMP6 = _TEMP5 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
          let _TEMP7 =  !_TEMP6
          return _TEMP7 }
      let _TEMP3 = SDAI.SIZEOF(_TEMP2)
      let _TEMP4 = _TEMP3 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      return _TEMP4
    }
    public static func WHERE_wr4(SELF: eADVANCED_FACE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.BOUNDS.QUERY{ BNDS in 

          let _TEMP1 = SDAI.TYPEOF(BNDS.BOUND, IS: eEDGE_LOOP.self)
          return _TEMP1 }
      let _TEMP2 = _TEMP1.QUERY{ ELP_FBNDS in 

          let _TEMP1 = ELP_FBNDS.BOUND
          let _TEMP2 = _TEMP1.GROUP_REF(ePATH.self)
          let _TEMP3 = _TEMP2?.EDGE_LIST
          let _TEMP4 = _TEMP3?.QUERY{ OE in 

              let _TEMP1 = SDAI.TYPEOF(OE.GROUP_REF(eEDGE.self)?.EDGE_START, IS: eVERTEX_POINT.self)
              let _TEMP2 = SDAI.TYPEOF(OE.GROUP_REF(eEDGE.self)?.EDGE_START.GROUP_REF(eVERTEX_POINT.self)?.VERTEX_GEOMETRY, 
                IS: eCARTESIAN_POINT.self)
              let _TEMP3 = _TEMP1 && _TEMP2
              let _TEMP4 = SDAI.TYPEOF(OE.GROUP_REF(eEDGE.self)?.EDGE_END, IS: eVERTEX_POINT.self)
              let _TEMP5 = SDAI.TYPEOF(OE.GROUP_REF(eEDGE.self)?.EDGE_END.GROUP_REF(eVERTEX_POINT.self)?.VERTEX_GEOMETRY, 
                IS: eCARTESIAN_POINT.self)
              let _TEMP6 = _TEMP4 && _TEMP5
              let _TEMP7 = _TEMP3 && _TEMP6
              let _TEMP8 =  !_TEMP7
              return _TEMP8 }
          let _TEMP5 = SDAI.SIZEOF(_TEMP4)
          let _TEMP6 = _TEMP5 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
          let _TEMP7 =  !_TEMP6
          return _TEMP7 }
      let _TEMP3 = SDAI.SIZEOF(_TEMP2)
      let _TEMP4 = _TEMP3 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      return _TEMP4
    }
    public static func WHERE_wr5(SELF: eADVANCED_FACE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.BOUNDS.QUERY{ BNDS in 

          let _TEMP1 = SDAI.TYPEOF(BNDS.BOUND, IS: eEDGE_LOOP.self)
          return _TEMP1 }
      let _TEMP2 = _TEMP1.QUERY{ ELP_FBNDS in 

          let _TEMP1 = SDAI.TYPEOF(ELP_FBNDS.BOUND, IS: eORIENTED_PATH.self)
          return _TEMP1 }
      let _TEMP3 = SDAI.SIZEOF(_TEMP2)
      let _TEMP4 = _TEMP3 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      return _TEMP4
    }
    public static func WHERE_wr6(SELF: eADVANCED_FACE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.TYPEOF(SELF.FACE_GEOMETRY, IS: eSWEPT_SURFACE.self)
      let _TEMP2 =  !_TEMP1
      let _TEMP3 = ([SDAI.AIE(SDAI.STRING("AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.LINE")), 
        SDAI.AIE(SDAI.STRING("AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CONIC")), 
        SDAI.AIE(SDAI.STRING("AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.POLYLINE")), 
        SDAI.AIE(SDAI.STRING("AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.B_SPLINE_CURVE"))] 
        as [SDAI.AggregationInitializerElement<SDAI.STRING>])
      let _TEMP4 = SELF.FACE_GEOMETRY.GROUP_REF(eSWEPT_SURFACE.self)
      let _TEMP5 = _TEMP4?.SWEPT_CURVE
      let _TEMP6 = SDAI.TYPEOF(_TEMP5)
      let _TEMP7 = SDAI.FORCE_OPTIONAL(_TEMP3) * _TEMP6
      let _TEMP8 = SDAI.SIZEOF(_TEMP7)
      let _TEMP9 = _TEMP8 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
      let _TEMP10 = _TEMP2 || _TEMP9
      return _TEMP10
    }
    public static func WHERE_wr7(SELF: eADVANCED_FACE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.BOUNDS.QUERY{ BNDS in 

          let _TEMP1 = SDAI.TYPEOF(BNDS.BOUND, IS: eVERTEX_LOOP.self)
          return _TEMP1 }
      let _TEMP2 = _TEMP1.QUERY{ VLP_FBNDS in 

          let _TEMP1 = SDAI.TYPEOF(VLP_FBNDS.GROUP_REF(eFACE_BOUND.self)?.BOUND.GROUP_REF(eVERTEX_LOOP.self)?
            .LOOP_VERTEX, IS: eVERTEX_POINT.self)
          let _TEMP2 = SDAI.TYPEOF(VLP_FBNDS.GROUP_REF(eFACE_BOUND.self)?.BOUND.GROUP_REF(eVERTEX_LOOP.self)?
            .LOOP_VERTEX.GROUP_REF(eVERTEX_POINT.self)?.VERTEX_GEOMETRY, IS: eCARTESIAN_POINT.self)
          let _TEMP3 = _TEMP1 && _TEMP2
          let _TEMP4 =  !_TEMP3
          return _TEMP4 }
      let _TEMP3 = SDAI.SIZEOF(_TEMP2)
      let _TEMP4 = _TEMP3 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      return _TEMP4
    }
    public static func WHERE_wr8(SELF: eADVANCED_FACE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.BOUNDS.QUERY{ BND in 

          let _TEMP1 = ([SDAI.AIE(SDAI.STRING("AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.EDGE_LOOP")), 
            SDAI.AIE(SDAI.STRING("AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.VERTEX_LOOP"))] 
            as [SDAI.AggregationInitializerElement<SDAI.STRING>])
          let _TEMP2 = BND.BOUND
          let _TEMP3 = SDAI.TYPEOF(_TEMP2)
          let _TEMP4 = SDAI.FORCE_OPTIONAL(_TEMP1) * _TEMP3
          let _TEMP5 = SDAI.SIZEOF(_TEMP4)
          let _TEMP6 = _TEMP5 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
          let _TEMP7 =  !_TEMP6
          return _TEMP7 }
      let _TEMP2 = SDAI.SIZEOF(_TEMP1)
      let _TEMP3 = _TEMP2 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      return _TEMP3
    }
    public static func WHERE_wr9(SELF: eADVANCED_FACE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.BOUNDS.QUERY{ BNDS in 

          let _TEMP1 = SDAI.TYPEOF(BNDS.BOUND, IS: eEDGE_LOOP.self)
          return _TEMP1 }
      let _TEMP2 = _TEMP1.QUERY{ ELP_FBNDS in 

          let _TEMP1 = ELP_FBNDS.BOUND
          let _TEMP2 = _TEMP1.GROUP_REF(ePATH.self)
          let _TEMP3 = _TEMP2?.EDGE_LIST
          let _TEMP4 = _TEMP3?.QUERY{ OE in 

              let _TEMP1 = SDAI.TYPEOF(OE.GROUP_REF(eORIENTED_EDGE.self)?.EDGE_ELEMENT.GROUP_REF(eEDGE_CURVE.self)?
                .EDGE_GEOMETRY, IS: eSURFACE_CURVE.self)
              let _TEMP2 = OE.EDGE_ELEMENT
              let _TEMP3 = _TEMP2.GROUP_REF(eEDGE_CURVE.self)
              let _TEMP4 = _TEMP3?.EDGE_GEOMETRY
              let _TEMP5 = _TEMP4?.GROUP_REF(eSURFACE_CURVE.self)
              let _TEMP6 = _TEMP5?.ASSOCIATED_GEOMETRY
              let _TEMP7 = _TEMP6?.QUERY{ SC_AG in 

                  let _TEMP1 = SDAI.TYPEOF(SC_AG, IS: ePCURVE.self)
                  let _TEMP2 =  !_TEMP1
                  return _TEMP2 }
              let _TEMP8 = SDAI.SIZEOF(_TEMP7)
              let _TEMP9 = _TEMP8 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
              let _TEMP10 =  !_TEMP9
              let _TEMP11 = _TEMP1 && _TEMP10
              return _TEMP11 }
          let _TEMP5 = SDAI.SIZEOF(_TEMP4)
          let _TEMP6 = _TEMP5 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
          let _TEMP7 =  !_TEMP6
          return _TEMP7 }
      let _TEMP3 = SDAI.SIZEOF(_TEMP2)
      let _TEMP4 = _TEMP3 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      return _TEMP4
    }
    public static func WHERE_wr10(SELF: eADVANCED_FACE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.TYPEOF(SELF.FACE_GEOMETRY, IS: eSWEPT_SURFACE.self)
      let _TEMP2 =  !_TEMP1
      let _TEMP3 = SDAI.TYPEOF(SELF.FACE_GEOMETRY.GROUP_REF(eSWEPT_SURFACE.self)?.SWEPT_CURVE, 
        IS: ePOLYLINE.self)
      let _TEMP4 =  !_TEMP3
      let _TEMP5 = SELF.FACE_GEOMETRY.GROUP_REF(eSWEPT_SURFACE.self)
      let _TEMP6 = _TEMP5?.SWEPT_CURVE
      let _TEMP7 = _TEMP6?.GROUP_REF(ePOLYLINE.self)
      let _TEMP8 = _TEMP7?.POINTS
      let _TEMP9 = SDAI.SIZEOF(_TEMP8)
      let _TEMP10 = _TEMP9 >= SDAI.FORCE_OPTIONAL(SDAI.INTEGER(3))
      let _TEMP11 = _TEMP4 || _TEMP10
      let _TEMP12 = _TEMP2 || _TEMP11
      let _TEMP13 = SELF.BOUNDS.QUERY{ BNDS in 

          let _TEMP1 = SDAI.TYPEOF(BNDS.BOUND, IS: eEDGE_LOOP.self)
          return _TEMP1 }
      let _TEMP14 = _TEMP13.QUERY{ ELP_FBNDS in 

          let _TEMP1 = ELP_FBNDS.BOUND
          let _TEMP2 = _TEMP1.GROUP_REF(ePATH.self)
          let _TEMP3 = _TEMP2?.EDGE_LIST
          let _TEMP4 = _TEMP3?.QUERY{ OE in 

              let _TEMP1 = SDAI.TYPEOF(OE.GROUP_REF(eORIENTED_EDGE.self)?.EDGE_ELEMENT.GROUP_REF(eEDGE_CURVE.self)?
                .EDGE_GEOMETRY, IS: ePOLYLINE.self)
              let _TEMP2 = OE.GROUP_REF(eORIENTED_EDGE.self)
              let _TEMP3 = _TEMP2?.EDGE_ELEMENT
              let _TEMP4 = _TEMP3?.GROUP_REF(eEDGE_CURVE.self)
              let _TEMP5 = _TEMP4?.EDGE_GEOMETRY
              let _TEMP6 = _TEMP5?.GROUP_REF(ePOLYLINE.self)
              let _TEMP7 = _TEMP6?.POINTS
              let _TEMP8 = SDAI.SIZEOF(_TEMP7)
              let _TEMP9 = _TEMP8 >= SDAI.FORCE_OPTIONAL(SDAI.INTEGER(3))
              let _TEMP10 =  !_TEMP9
              let _TEMP11 = _TEMP1 && _TEMP10
              return _TEMP11 }
          let _TEMP5 = SDAI.SIZEOF(_TEMP4)
          let _TEMP6 = _TEMP5 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
          let _TEMP7 =  !_TEMP6
          return _TEMP7 }
      let _TEMP15 = SDAI.SIZEOF(_TEMP14)
      let _TEMP16 = _TEMP15 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      let _TEMP17 = _TEMP12 && _TEMP16
      return _TEMP17
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init() {
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 0
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      self.init( )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY advanced_face
    SUBTYPE OF ( face_surface );
    WHERE
      wr1 : ( SIZEOF( [ 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ELEMENTARY_SURFACE', 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.B_SPLINE_SURFACE' , 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SWEPT_SURFACE' ] * TYPEOF( face_geometry ) ) 
                = 1 );
      wr2 : ( SIZEOF( QUERY ( elp_fbnds <* QUERY ( bnds <* bounds | ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.EDGE_LOOP'  IN TYPEOF( bnds.bound ) ) ) | ( 
                NOT ( SIZEOF( QUERY ( oe <* elp_fbnds.bound\path.edge_list | ( NOT ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.EDGE_CURVE'  IN TYPEOF( oe\oriented_edge.
                edge_element ) ) ) ) ) = 0 ) ) ) ) = 0 );
      wr3 : ( SIZEOF( QUERY ( elp_fbnds <* QUERY ( bnds <* bounds | ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.EDGE_LOOP'  IN TYPEOF( bnds.bound ) ) ) | ( 
                NOT ( SIZEOF( QUERY ( oe <* elp_fbnds.bound\path.edge_list | ( NOT ( SIZEOF( [
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.LINE' , 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CONIC' , 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.POLYLINE' , 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SURFACE_CURVE' , 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.B_SPLINE_CURVE' ] * TYPEOF( oe.edge_element\
                edge_curve.edge_geometry ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 );
      wr4 : ( SIZEOF( QUERY ( elp_fbnds <* QUERY ( bnds <* bounds | ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.EDGE_LOOP'  IN TYPEOF( bnds.bound ) ) ) | ( 
                NOT ( SIZEOF( QUERY ( oe <* elp_fbnds.bound\path.edge_list | ( NOT ( ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.VERTEX_POINT'  IN TYPEOF( oe\edge.edge_start ) ) 
                AND ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CARTESIAN_POINT' IN TYPEOF( oe\edge.
                edge_start\vertex_point.vertex_geometry ) ) AND ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.VERTEX_POINT'  IN TYPEOF( oe\edge.edge_end ) ) 
                AND ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CARTESIAN_POINT' IN TYPEOF( oe\edge.
                edge_end\vertex_point.vertex_geometry ) ) ) ) ) ) = 0 ) ) ) ) = 0 );
      wr5 : ( SIZEOF( QUERY ( elp_fbnds <* QUERY ( bnds <* bounds | ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.EDGE_LOOP'  IN TYPEOF( bnds.bound ) ) ) | ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ORIENTED_PATH'  IN TYPEOF( elp_fbnds.bound ) ) ) ) 
                = 0 );
      wr6 : ( ( NOT ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SWEPT_SURFACE' IN TYPEOF( 
                face_geometry ) ) ) OR ( SIZEOF( [ 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.LINE', 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CONIC' , 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.POLYLINE' , 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.B_SPLINE_CURVE' ] * TYPEOF( face_geometry\
                swept_surface.swept_curve ) ) = 1 ) );
      wr7 : ( SIZEOF( QUERY ( vlp_fbnds <* QUERY ( bnds <* bounds | ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.VERTEX_LOOP'  IN TYPEOF( bnds.bound ) ) ) | 
                ( NOT ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.VERTEX_POINT' IN TYPEOF( vlp_fbnds
                \face_bound.bound\vertex_loop.loop_vertex ) ) AND ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CARTESIAN_POINT'  IN TYPEOF( vlp_fbnds\
                face_bound.bound\vertex_loop.loop_vertex\vertex_point.vertex_geometry ) ) ) ) ) ) = 0 );
      wr8 : ( SIZEOF( QUERY ( bnd <* bounds | ( NOT ( SIZEOF( [
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.EDGE_LOOP' , 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.VERTEX_LOOP' ] * TYPEOF( bnd.bound ) ) = 1 ) ) ) ) 
                = 0 );
      wr9 : ( SIZEOF( QUERY ( elp_fbnds <* QUERY ( bnds <* bounds | ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.EDGE_LOOP'  IN TYPEOF( bnds.bound ) ) ) | ( 
                NOT ( SIZEOF( QUERY ( oe <* elp_fbnds.bound\path.edge_list | ( ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SURFACE_CURVE'  IN TYPEOF( oe\oriented_edge.
                edge_element\edge_curve.edge_geometry ) ) AND ( NOT ( SIZEOF( QUERY ( sc_ag <* oe.
                edge_element\edge_curve.edge_geometry\surface_curve.associated_geometry | ( NOT ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PCURVE'  IN TYPEOF( sc_ag ) ) ) ) ) = 0 ) ) ) ) ) 
                = 0 ) ) ) ) = 0 );
      wr10: ( ( ( NOT ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SWEPT_SURFACE' IN TYPEOF( 
                face_geometry ) ) ) OR ( NOT ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.POLYLINE' IN 
                TYPEOF( face_geometry\swept_surface.swept_curve ) ) ) OR ( SIZEOF( face_geometry\
                swept_surface.swept_curve\polyline.points ) >= 3 ) ) AND ( SIZEOF( QUERY ( elp_fbnds <* 
                QUERY ( bnds <* bounds | ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.EDGE_LOOP' IN 
                TYPEOF( bnds.bound ) ) ) | ( NOT ( SIZEOF( QUERY ( oe <* elp_fbnds.bound\path.edge_list | ( 
                ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.POLYLINE' IN TYPEOF( oe\oriented_edge.
                edge_element\edge_curve.edge_geometry ) ) AND ( NOT ( SIZEOF( oe\oriented_edge.edge_element\
                edge_curve.edge_geometry\polyline.points ) >= 3 ) ) ) ) ) = 0 ) ) ) ) = 0 ) );
  END_ENTITY; -- advanced_face (line:6627 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eADVANCED_FACE : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _advanced_face.self
    }
    public let partialEntity: _advanced_face

    //MARK: SUPERTYPES
    public let super_eREPRESENTATION_ITEM: eREPRESENTATION_ITEM 	// [1]
    public let super_eTOPOLOGICAL_REPRESENTATION_ITEM: eTOPOLOGICAL_REPRESENTATION_ITEM 	// [2]
    public let super_eFACE: eFACE 	// [3]
    public let super_eGEOMETRIC_REPRESENTATION_ITEM: eGEOMETRIC_REPRESENTATION_ITEM 	// [4]
    public let super_eFACE_SURFACE: eFACE_SURFACE 	// [5]
    public var super_eADVANCED_FACE: eADVANCED_FACE { return self } 	// [6]

    //MARK: SUBTYPES

    //MARK: ATTRIBUTES
    /// __EXPLICIT(DYNAMIC)__ attribute
    /// - origin: SUPER( ``eFACE`` )
    public var BOUNDS: SDAI.SET<eFACE_BOUND>/*[1:nil]*/  {
      get {
        if let resolved = _face._bounds__provider(complex: self.complexEntity) {
          let value = resolved._bounds__getter(complex: self.complexEntity)
          return value
        }
        else {
          return SDAI.UNWRAP( super_eFACE.partialEntity._bounds )
        }
      }
      set(newValue) {
        if let _ = _face._bounds__provider(complex: self.complexEntity) { return }

        let partial = super_eFACE.partialEntity
        partial._bounds = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUPER( ``eTOPOLOGICAL_REPRESENTATION_ITEM`` )
    public var PERMANENT_AGGREGATE_ID: tIDENTIFIER?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"PERMANENT_AGGREGATE_ID") {
          return cached.value as! tIDENTIFIER? 
        }
        let origin = super_eTOPOLOGICAL_REPRESENTATION_ITEM
        let value = tIDENTIFIER(origin.partialEntity._permanent_aggregate_id__getter(SELF: origin))
        updateCache(derivedAttributeName:"PERMANENT_AGGREGATE_ID", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eFACE_SURFACE`` )
    public var FACE_GEOMETRY: eSURFACE {
      get {
        return SDAI.UNWRAP( super_eFACE_SURFACE.partialEntity._face_geometry )
      }
      set(newValue) {
        let partial = super_eFACE_SURFACE.partialEntity
        partial._face_geometry = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eFACE_SURFACE`` )
    public var SAME_SENSE: SDAI.BOOLEAN {
      get {
        return SDAI.UNWRAP( super_eFACE_SURFACE.partialEntity._same_sense )
      }
      set(newValue) {
        let partial = super_eFACE_SURFACE.partialEntity
        partial._same_sense = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUPER( ``eTOPOLOGICAL_REPRESENTATION_ITEM`` )
    public var PERMANENT_ID: tIDENTIFIER?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"PERMANENT_ID") {
          return cached.value as! tIDENTIFIER? 
        }
        let origin = super_eTOPOLOGICAL_REPRESENTATION_ITEM
        let value = tIDENTIFIER(origin.partialEntity._permanent_id__getter(SELF: origin))
        updateCache(derivedAttributeName:"PERMANENT_ID", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eREPRESENTATION_ITEM`` )
    public var NAME: tLABEL {
      get {
        return SDAI.UNWRAP( super_eREPRESENTATION_ITEM.partialEntity._name )
      }
      set(newValue) {
        let partial = super_eREPRESENTATION_ITEM.partialEntity
        partial._name = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUPER( ``eGEOMETRIC_REPRESENTATION_ITEM`` )
    public var DIM: tDIMENSION_COUNT?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"DIM") {
          return cached.value as! tDIMENSION_COUNT? 
        }
        let origin = super_eGEOMETRIC_REPRESENTATION_ITEM
        let value = tDIMENSION_COUNT(origin.partialEntity._dim__getter(SELF: origin))
        updateCache(derivedAttributeName:"DIM", value:value)
        return value
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_advanced_face.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eREPRESENTATION_ITEM.self) else { return nil }
      self.super_eREPRESENTATION_ITEM = super1

      guard let super2 = complexEntity?.entityReference(eTOPOLOGICAL_REPRESENTATION_ITEM.self) else { return nil }
      self.super_eTOPOLOGICAL_REPRESENTATION_ITEM = super2

      guard let super3 = complexEntity?.entityReference(eFACE.self) else { return nil }
      self.super_eFACE = super3

      guard let super4 = complexEntity?.entityReference(eGEOMETRIC_REPRESENTATION_ITEM.self) else { return nil }
      self.super_eGEOMETRIC_REPRESENTATION_ITEM = super4

      guard let super5 = complexEntity?.entityReference(eFACE_SURFACE.self) else { return nil }
      self.super_eFACE_SURFACE = super5

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _advanced_face.WHERE_wr1(SELF: instance)
      result[prefix2 + " .WHERE_wr2"] = _advanced_face.WHERE_wr2(SELF: instance)
      result[prefix2 + " .WHERE_wr3"] = _advanced_face.WHERE_wr3(SELF: instance)
      result[prefix2 + " .WHERE_wr4"] = _advanced_face.WHERE_wr4(SELF: instance)
      result[prefix2 + " .WHERE_wr5"] = _advanced_face.WHERE_wr5(SELF: instance)
      result[prefix2 + " .WHERE_wr6"] = _advanced_face.WHERE_wr6(SELF: instance)
      result[prefix2 + " .WHERE_wr7"] = _advanced_face.WHERE_wr7(SELF: instance)
      result[prefix2 + " .WHERE_wr8"] = _advanced_face.WHERE_wr8(SELF: instance)
      result[prefix2 + " .WHERE_wr9"] = _advanced_face.WHERE_wr9(SELF: instance)
      result[prefix2 + " .WHERE_wr10"] = _advanced_face.WHERE_wr10(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "ADVANCED_FACE", type: self, explicitAttributeCount: 0)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eREPRESENTATION_ITEM.self)
      entityDef.add(supertype: eTOPOLOGICAL_REPRESENTATION_ITEM.self)
      entityDef.add(supertype: eFACE.self)
      entityDef.add(supertype: eGEOMETRIC_REPRESENTATION_ITEM.self)
      entityDef.add(supertype: eFACE_SURFACE.self)
      entityDef.add(supertype: eADVANCED_FACE.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "BOUNDS", keyPath: \eADVANCED_FACE.BOUNDS, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "PERMANENT_AGGREGATE_ID", keyPath: \eADVANCED_FACE.PERMANENT_AGGREGATE_ID, 
        kind: .derived, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "FACE_GEOMETRY", keyPath: \eADVANCED_FACE.FACE_GEOMETRY, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "SAME_SENSE", keyPath: \eADVANCED_FACE.SAME_SENSE, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "PERMANENT_ID", keyPath: \eADVANCED_FACE.PERMANENT_ID, 
        kind: .derived, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "NAME", keyPath: \eADVANCED_FACE.NAME, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "DIM", keyPath: \eADVANCED_FACE.DIM, 
        kind: .derived, source: .superEntity, mayYieldEntityReference: false)

      return entityDef
    }

  }
}
