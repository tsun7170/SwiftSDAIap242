/* file: attribute_language_assignment.swift 	 generated: Sun Oct 31 15:32:10 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY attribute_language_assignment
    SUBTYPE OF ( attribute_classification_assignment );
      SELF\attribute_classification_assignment.assigned_class : language;
      items                           : SET [1 : ?] OF attribute_language_item; (* observed by
          multi_language_attribute_assignment.language_indication
          *)
    WHERE
      wr1: ( SELF\attribute_classification_assignment.role.name IN [ 'primary', 'translated'] );
      wr2: ( SELF\attribute_classification_assignment.attribute_name <> '' );
  END_ENTITY; -- attribute_language_assignment (line:7615 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	attribute_classification_assignment
    ATTR:  assigned_class,	TYPE: group -- EXPLICIT
      -- possibly overriden by
          ENTITY: applied_attribute_classification_assignment,	TYPE: class
      *** ENTITY: attribute_language_assignment,	TYPE: language

    ATTR:  attribute_name,	TYPE: label -- EXPLICIT

    ATTR:  role,	TYPE: classification_role -- EXPLICIT


  ENTITY(SELF)	attribute_language_assignment
    REDCR: assigned_class,	TYPE: language -- EXPLICIT
      -- OVERRIDING ENTITY: attribute_classification_assignment

    ATTR:  items,	TYPE: SET [1 : ?] OF attribute_language_item -- EXPLICIT
      -- observed by
        ENTITY(1): multi_language_attribute_assignment,	ATTR: language_indication,	TYPE: SET [1 : 1] OF
          attribute_language_assignment


*/


//MARK: - Partial Entity
  public final class _attribute_language_assignment : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eATTRIBUTE_LANGUAGE_ASSIGNMENT.self
    }

    //ATTRIBUTES
    /* override var _assigned_class: eLANGUAGE	//EXPLICIT REDEFINITION(eATTRIBUTE_CLASSIFICATION_ASSIGNMENT) */

    /// EXPLICIT ATTRIBUTE (OBSERVED)
    public internal(set) var _items: SDAI.SET<sATTRIBUTE_LANGUAGE_ITEM>/*[1:nil]*/ { // OBSERVED EXPLICIT ATTRIBUTE
      get {
        return __items.copy()
      } // getter
      set {
        var newValue = newValue
        let observer = SDAI.EntityReferenceObserver(referencer: self, observerCode: _items__observer.self)
        newValue.configure(with: observer)
        observer.observe(removing: SDAI.UNWRAP(seq:__items.entityReferences),
          adding: SDAI.UNWRAP(seq: newValue.entityReferences) )
      } // setter
    }

    /// backing storage for observed attribute
    private var __items: SDAI.SET<sATTRIBUTE_LANGUAGE_ITEM>/*[1:nil]*/ 

    /// attribute observer code
    internal class _items__observer: SDAI.EntityReferenceObserver.ObserverCode {
      final override class func observe<RemovingEntities: Sequence, AddingEntities: Sequence>(
        referencer: SDAI.PartialEntity, removing: RemovingEntities, adding: AddingEntities )
        where RemovingEntities.Element: SDAI.EntityReference, AddingEntities.Element: SDAI.EntityReference
      {
        for referencedComplex in removing.map({ $0.complexEntity }) {
          for referencerOwner in referencer.owners {
            //OBSERVING ENTITY: eMULTI_LANGUAGE_ATTRIBUTE_ASSIGNMENT
            referencedComplex.partialEntityInstance(_multi_language_attribute_assignment.self)?
              ._language_indication__observeRemovedReference(in: referencerOwner)
          }
        }

        for referencedComplex in adding.map({ $0.complexEntity }) {
          for referencerOwner in referencer.owners {
            //OBSERVING ENTITY: eMULTI_LANGUAGE_ATTRIBUTE_ASSIGNMENT
            referencedComplex.partialEntityInstance(_multi_language_attribute_assignment.self)?
              ._language_indication__observeAddedReference(in: referencerOwner)
          }
        }
      }

      final override class func observe(newReferencerOwner referencerOwner: SDAI.ComplexEntity) {
        guard let attrValue = referencerOwner.partialEntityInstance(_attribute_language_assignment.self)?._items else { return }
        for referencedComplex in attrValue.entityReferences.map({ $0.complexEntity }) {
        //OBSERVING ENTITY: eMULTI_LANGUAGE_ATTRIBUTE_ASSIGNMENT
        referencedComplex.partialEntityInstance(_multi_language_attribute_assignment.self)?
          ._language_indication__observeAddedReference(in: referencerOwner)
        }
      }

      final override class func observe(leavingReferencerOwner referencerOwner: SDAI.ComplexEntity) {
        guard let attrValue = referencerOwner.partialEntityInstance(_attribute_language_assignment.self)?._items else { return }
        for referencedComplex in attrValue.entityReferences.map({ $0.complexEntity }) {
        //OBSERVING ENTITY: eMULTI_LANGUAGE_ATTRIBUTE_ASSIGNMENT
        referencedComplex.partialEntityInstance(_multi_language_attribute_assignment.self)?
          ._language_indication__observe(leavingReferencerOwner: referencerOwner)
        }
      }

    }

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      //SELECT data types (indirectly) referencing the current type as a member of the select list
      members.insert(SDAI.STRING(sCLASSIFICATION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sACTION_ITEMS.typeName)) // -> sCLASSIFICATION_ITEM
      members.insert(SDAI.STRING(sCHANGE_MANAGEMENT_OBJECT.typeName)) // -> sACTION_ITEMS
      members.insert(SDAI.STRING(sIR_USAGE_ITEM.typeName)) // -> sCLASSIFICATION_ITEM
      members.insert(SDAI.STRING(sSAME_AS_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sGROUPABLE_ITEM.typeName)) // -> Self
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._items.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._items.value.isValueEqualOptionally(to: rhs._items.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._items.value.isValueEqualOptionally(to: rhs._items.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: eATTRIBUTE_LANGUAGE_ASSIGNMENT?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.GROUP_REF(eATTRIBUTE_CLASSIFICATION_ASSIGNMENT.self)
      let _TEMP2 = _TEMP1?.ROLE
      let _TEMP3 = _TEMP2?.NAME
      let _TEMP4 = ([SDAI.AIE(SDAI.STRING("primary")), 
        SDAI.AIE(SDAI.STRING("translated"))] as [SDAI.AggregationInitializerElement<SDAI.STRING>])
      let _TEMP5 = SDAI.aggregate(_TEMP4, contains: SDAI.STRING(/*tLABEL*/_TEMP3))
      return _TEMP5
    }
    public static func WHERE_wr2(SELF: eATTRIBUTE_LANGUAGE_ASSIGNMENT?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.GROUP_REF(eATTRIBUTE_CLASSIFICATION_ASSIGNMENT.self)
      let _TEMP2 = _TEMP1?.ATTRIBUTE_NAME
      let _TEMP3 = _TEMP2 .!=. SDAI.FORCE_OPTIONAL(SDAI.STRING(""))
      return _TEMP3
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(ITEMS: SDAI.SET<sATTRIBUTE_LANGUAGE_ITEM>/*[1:nil]*/ ) {
      self.__items = ITEMS
      super.init(asAbstructSuperclass:())

      self._items.configure(with: SDAI.EntityReferenceObserver(referencer: self, observerCode: _items__observer.self))
    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 1
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverRequiredParameter(as: SDAI.SET<
        sATTRIBUTE_LANGUAGE_ITEM>.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( ITEMS: p0 )
    }

    /// broadcasting a new complex entity becoming an owner of the partial entity
    final public override func broadcast(addedToComplex complex: SDAI.ComplexEntity) {
      _items__observer.observe(newReferencerOwner: complex)
    }

    /// broadcasting a complex entity withdrawing an owner of the partial entity
    final public override func broadcast(removedFromComplex complex: SDAI.ComplexEntity) {
      _items__observer.observe(leavingReferencerOwner: complex)
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY attribute_language_assignment
    SUBTYPE OF ( attribute_classification_assignment );
      SELF\attribute_classification_assignment.assigned_class : language;
      items                           : SET [1 : ?] OF attribute_language_item; (* observed by
          multi_language_attribute_assignment.language_indication
          *)
    WHERE
      wr1: ( SELF\attribute_classification_assignment.role.name IN [ 'primary', 'translated'] );
      wr2: ( SELF\attribute_classification_assignment.attribute_name <> '' );
  END_ENTITY; -- attribute_language_assignment (line:7615 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eATTRIBUTE_LANGUAGE_ASSIGNMENT : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _attribute_language_assignment.self
    }
    public let partialEntity: _attribute_language_assignment

    //MARK: SUPERTYPES
    public let super_eATTRIBUTE_CLASSIFICATION_ASSIGNMENT: eATTRIBUTE_CLASSIFICATION_ASSIGNMENT 	// [1]
    public var super_eATTRIBUTE_LANGUAGE_ASSIGNMENT: eATTRIBUTE_LANGUAGE_ASSIGNMENT { return self } 	// [2]

    //MARK: SUBTYPES

    //MARK: ATTRIBUTES
    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eATTRIBUTE_CLASSIFICATION_ASSIGNMENT`` )
    public var ROLE: eCLASSIFICATION_ROLE {
      get {
        return SDAI.UNWRAP( super_eATTRIBUTE_CLASSIFICATION_ASSIGNMENT.partialEntity._role )
      }
      set(newValue) {
        let partial = super_eATTRIBUTE_CLASSIFICATION_ASSIGNMENT.partialEntity
        partial._role = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT(OBSERVED)__ attribute
    /// - origin: SELF( ``eATTRIBUTE_LANGUAGE_ASSIGNMENT`` )
    public var ITEMS: SDAI.SET<sATTRIBUTE_LANGUAGE_ITEM>/*[1:nil]*/  {
      get {
        return SDAI.UNWRAP( self.partialEntity._items )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._items = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eATTRIBUTE_CLASSIFICATION_ASSIGNMENT`` )
    public var ATTRIBUTE_NAME: tLABEL {
      get {
        return SDAI.UNWRAP( super_eATTRIBUTE_CLASSIFICATION_ASSIGNMENT.partialEntity._attribute_name )
      }
      set(newValue) {
        let partial = super_eATTRIBUTE_CLASSIFICATION_ASSIGNMENT.partialEntity
        partial._attribute_name = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT REDEF__ attribute
    /// - origin: SELF( ``eATTRIBUTE_LANGUAGE_ASSIGNMENT`` )
    public var ASSIGNED_CLASS: eLANGUAGE {
      get {
        return SDAI.UNWRAP( eLANGUAGE( super_eATTRIBUTE_CLASSIFICATION_ASSIGNMENT.partialEntity
          ._assigned_class ) )
      }
      set(newValue) {
        let partial = super_eATTRIBUTE_CLASSIFICATION_ASSIGNMENT.partialEntity
        partial._assigned_class = SDAI.UNWRAP(
          eGROUP(newValue))
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_attribute_language_assignment.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eATTRIBUTE_CLASSIFICATION_ASSIGNMENT.self) else { return nil }
      self.super_eATTRIBUTE_CLASSIFICATION_ASSIGNMENT = super1

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _attribute_language_assignment.WHERE_wr1(SELF: instance)
      result[prefix2 + " .WHERE_wr2"] = _attribute_language_assignment.WHERE_wr2(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "ATTRIBUTE_LANGUAGE_ASSIGNMENT", type: self, explicitAttributeCount: 1)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eATTRIBUTE_CLASSIFICATION_ASSIGNMENT.self)
      entityDef.add(supertype: eATTRIBUTE_LANGUAGE_ASSIGNMENT.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "ROLE", keyPath: \eATTRIBUTE_LANGUAGE_ASSIGNMENT.ROLE, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "ITEMS", keyPath: \eATTRIBUTE_LANGUAGE_ASSIGNMENT.ITEMS, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "ATTRIBUTE_NAME", keyPath: \eATTRIBUTE_LANGUAGE_ASSIGNMENT.ATTRIBUTE_NAME, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "ASSIGNED_CLASS", keyPath: \eATTRIBUTE_LANGUAGE_ASSIGNMENT.ASSIGNED_CLASS, 
        kind: .explicitRedeclaring, source: .thisEntity, mayYieldEntityReference: true)

      return entityDef
    }

  }
}
