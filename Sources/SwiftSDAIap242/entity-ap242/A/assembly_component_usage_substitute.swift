/* file: assembly_component_usage_substitute.swift 	 generated: Tue Nov 16 05:35:44 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY assembly_component_usage_substitute;
      name        : label;
      definition  : OPTIONAL text;
      base        : assembly_component_usage;
      substitute  : assembly_component_usage;
    UNIQUE
      ur1 : base, substitute;
    WHERE
      wr1: ( base.relating_product_definition :=: substitute.relating_product_definition );
      wr2: ( base :<>: substitute );
  END_ENTITY; -- assembly_component_usage_substitute (line:7492 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  ENTITY(SELF)	assembly_component_usage_substitute
    ATTR:  name,	TYPE: label -- EXPLICIT

    ATTR:  definition,	TYPE: OPTIONAL text -- EXPLICIT

    ATTR:  base,	TYPE: assembly_component_usage -- EXPLICIT

    ATTR:  substitute,	TYPE: assembly_component_usage -- EXPLICIT


*/


//MARK: - Partial Entity
  public final class _assembly_component_usage_substitute : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eASSEMBLY_COMPONENT_USAGE_SUBSTITUTE.self
    }

    //ATTRIBUTES
    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _name: tLABEL // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _definition: tTEXT?  // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _base: eASSEMBLY_COMPONENT_USAGE // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _substitute: eASSEMBLY_COMPONENT_USAGE // PLAIN EXPLICIT ATTRIBUTE

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      //SELECT data types (indirectly) referencing the current type as a member of the select list
      members.insert(SDAI.STRING(sDATE_AND_TIME_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sCLASSIFICATION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sACTION_ITEMS.typeName)) // -> sCLASSIFICATION_ITEM
      members.insert(SDAI.STRING(sCHANGE_MANAGEMENT_OBJECT.typeName)) // -> sACTION_ITEMS
      members.insert(SDAI.STRING(sIR_USAGE_ITEM.typeName)) // -> sCLASSIFICATION_ITEM
      members.insert(SDAI.STRING(sMULTI_LANGUAGE_ATTRIBUTE_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sSTATE_OBSERVED_OF_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sIDENTIFICATION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sTIME_INTERVAL_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sSECURITY_CLASSIFICATION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sACTION_REQUEST_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sDATE_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sSTATE_TYPE_OF_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sANALYSED_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sAPPROVAL_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sREQUIREMENT_ASSIGNED_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sREQUIREMENT_SATISFACTION_ITEM.typeName)) // -> sREQUIREMENT_ASSIGNED_ITEM
      members.insert(SDAI.STRING(sPERSON_AND_ORGANIZATION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sGENERAL_ORGANIZATIONAL_DATA_SELECT.typeName)) // -> Self
      members.insert(SDAI.STRING(sEVENT_OCCURRENCE_ITEM.typeName)) // -> sGENERAL_ORGANIZATIONAL_DATA_SELECT
      members.insert(SDAI.STRING(sORGANIZATION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sDESCRIPTION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sATTRIBUTE_LANGUAGE_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sDOCUMENT_REFERENCE_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sGROUPABLE_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sEFFECTIVITY_ITEM.typeName)) // -> Self
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._name.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._definition?.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._base.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._substitute.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._name.value.isValueEqualOptionally(to: rhs._name.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._definition?.value.isValueEqualOptionally(to: rhs._definition?.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._base.value.isValueEqualOptionally(to: rhs._base.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._substitute.value.isValueEqualOptionally(to: rhs._substitute.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._name.value.isValueEqualOptionally(to: rhs._name.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._definition?.value.isValueEqualOptionally(to: rhs._definition?.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._base.value.isValueEqualOptionally(to: rhs._base.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._substitute.value.isValueEqualOptionally(to: rhs._substitute.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: eASSEMBLY_COMPONENT_USAGE_SUBSTITUTE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.BASE.RELATING_PRODUCT_DEFINITION
      let _TEMP2 = SELF.SUBSTITUTE.RELATING_PRODUCT_DEFINITION
      let _TEMP3 = SDAI.FORCE_OPTIONAL(_TEMP1) .===. SDAI.FORCE_OPTIONAL(_TEMP2)
      return _TEMP3
    }
    public static func WHERE_wr2(SELF: eASSEMBLY_COMPONENT_USAGE_SUBSTITUTE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.FORCE_OPTIONAL(SELF.BASE) .!==. SDAI.FORCE_OPTIONAL(SELF.SUBSTITUTE)
      return _TEMP1
    }

    //UNIQUENESS RULES
    public static func UNIQUE_ur1(SELF: SDAI.EntityReference) -> AnyHashable? {
      guard let SELF = SELF as? eASSEMBLY_COMPONENT_USAGE_SUBSTITUTE else { return nil }
      //JOINT UNIQUE RULE

      var attributes: Array<AnyHashable> = []

      let attr1 = SELF.BASE
      attributes.append( AnyHashable(attr1) )
      let attr2 = SELF.SUBSTITUTE
      attributes.append( AnyHashable(attr2) )

      return AnyHashable( attributes )
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(NAME: tLABEL, DEFINITION: tTEXT? , BASE: eASSEMBLY_COMPONENT_USAGE, 
                SUBSTITUTE: eASSEMBLY_COMPONENT_USAGE) {
      self._name = NAME
      self._definition = DEFINITION
      self._base = BASE
      self._substitute = SUBSTITUTE
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 4
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverRequiredParameter(as: tLABEL.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p1) = exchangeStructure.recoverOptionalParameter(as: tTEXT.self, from: parameters[1])
      else { exchangeStructure.add(errorContext: "while recovering parameter #1 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p2) = exchangeStructure.recoverRequiredParameter(as: eASSEMBLY_COMPONENT_USAGE.self, from: parameters[2])
      else { exchangeStructure.add(errorContext: "while recovering parameter #2 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p3) = exchangeStructure.recoverRequiredParameter(as: eASSEMBLY_COMPONENT_USAGE.self, from: parameters[3])
      else { exchangeStructure.add(errorContext: "while recovering parameter #3 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( NAME: p0, DEFINITION: p1, BASE: p2, SUBSTITUTE: p3 )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY assembly_component_usage_substitute;
      name        : label;
      definition  : OPTIONAL text;
      base        : assembly_component_usage;
      substitute  : assembly_component_usage;
    UNIQUE
      ur1 : base, substitute;
    WHERE
      wr1: ( base.relating_product_definition :=: substitute.relating_product_definition );
      wr2: ( base :<>: substitute );
  END_ENTITY; -- assembly_component_usage_substitute (line:7492 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eASSEMBLY_COMPONENT_USAGE_SUBSTITUTE : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _assembly_component_usage_substitute.self
    }
    public let partialEntity: _assembly_component_usage_substitute

    //MARK: SUPERTYPES
    public var super_eASSEMBLY_COMPONENT_USAGE_SUBSTITUTE: eASSEMBLY_COMPONENT_USAGE_SUBSTITUTE { return self } 	// [1]

    //MARK: SUBTYPES

    //MARK: ATTRIBUTES
    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eASSEMBLY_COMPONENT_USAGE_SUBSTITUTE`` )
    public var SUBSTITUTE: eASSEMBLY_COMPONENT_USAGE {
      get {
        return SDAI.UNWRAP( self.partialEntity._substitute )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._substitute = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eASSEMBLY_COMPONENT_USAGE_SUBSTITUTE`` )
    public var BASE: eASSEMBLY_COMPONENT_USAGE {
      get {
        return SDAI.UNWRAP( self.partialEntity._base )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._base = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eASSEMBLY_COMPONENT_USAGE_SUBSTITUTE`` )
    public var DEFINITION: tTEXT?  {
      get {
        return self.partialEntity._definition
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._definition = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eASSEMBLY_COMPONENT_USAGE_SUBSTITUTE`` )
    public var NAME: tLABEL {
      get {
        return SDAI.UNWRAP( self.partialEntity._name )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._name = SDAI.UNWRAP(newValue)
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_assembly_component_usage_substitute.self) else { return nil }
      self.partialEntity = partial

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }

    //SIMPLE ENTITY REFERENCE
    public convenience init?(_ partial:_assembly_component_usage_substitute) {
      let complex = SDAI.ComplexEntity(entities:[partial])
      self.init(complex: complex)
    }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _assembly_component_usage_substitute.WHERE_wr1(SELF: instance)
      result[prefix2 + " .WHERE_wr2"] = _assembly_component_usage_substitute.WHERE_wr2(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE", type: self, explicitAttributeCount: 4)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eASSEMBLY_COMPONENT_USAGE_SUBSTITUTE.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "SUBSTITUTE", keyPath: \eASSEMBLY_COMPONENT_USAGE_SUBSTITUTE.SUBSTITUTE, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "BASE", keyPath: \eASSEMBLY_COMPONENT_USAGE_SUBSTITUTE.BASE, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "DEFINITION", keyPath: \eASSEMBLY_COMPONENT_USAGE_SUBSTITUTE.DEFINITION, 
        kind: .explicitOptional, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "NAME", keyPath: \eASSEMBLY_COMPONENT_USAGE_SUBSTITUTE.NAME, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: false)

      //MARK: UNIQUENESS RULE REGISTRATIONS
      entityDef.addUniqunessRule(label:"UNIQUE_ur1", rule: _assembly_component_usage_substitute.UNIQUE_ur1)

      return entityDef
    }

  }
}
