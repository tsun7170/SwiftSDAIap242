/* file: auxiliary_geometric_representation_item.swift 	 generated: Mon Jan  3 16:32:52 2022 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.1, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY auxiliary_geometric_representation_item
    SUBTYPE OF ( geometric_representation_item, variational_representation_item );
  END_ENTITY; -- auxiliary_geometric_representation_item (line:7651 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	representation_item
    ATTR:  name,	TYPE: label -- EXPLICIT


  SUPER- ENTITY(2)	geometric_representation_item
    ATTR:  dim,	TYPE: dimension_count -- DERIVED
      := dimension_of( SELF )


  SUPER- ENTITY(3)	variational_representation_item
    (no local attributes)

  ENTITY(SELF)	auxiliary_geometric_representation_item
    (no local attributes)

  SUB- ENTITY(5)	implicit_intersection_curve
    ATTR:  external_surface,	TYPE: surface -- EXPLICIT


  SUB- ENTITY(6)	implicit_projected_curve
    ATTR:  external_curve,	TYPE: curve -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  projection_direction,	TYPE: direction -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(7)	implicit_model_intersection_curve
    ATTR:  intersected_model,	TYPE: surface_or_solid_model -- EXPLICIT


  SUB- ENTITY(8)	implicit_silhouette_curve
    ATTR:  silhouetted_model,	TYPE: surface_or_solid_model -- EXPLICIT

    ATTR:  view_direction,	TYPE: direction -- EXPLICIT


  SUB- ENTITY(9)	implicit_planar_curve
    ATTR:  using_sketch,	TYPE: positioned_sketch -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  computed_representation,	TYPE: curve -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  curve_plane,	TYPE: plane -- DERIVED
      := get_plane_of_implicit_geometry( using_sketch )


  SUB- ENTITY(10)	implicit_planar_projection_point
    ATTR:  external_point,	TYPE: point -- EXPLICIT

    ATTR:  projection_direction,	TYPE: direction -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(11)	implicit_planar_intersection_point
    ATTR:  external_curve,	TYPE: curve -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(12)	implicit_point_on_plane
    ATTR:  using_sketch,	TYPE: positioned_sketch -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  computed_representation,	TYPE: cartesian_point -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  plane_of_point,	TYPE: plane -- DERIVED
      := get_plane_of_implicit_geometry( using_sketch )


*/


//MARK: - Partial Entity
  public final class _auxiliary_geometric_representation_item : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eAUXILIARY_GEOMETRIC_REPRESENTATION_ITEM.self
    }

    //ATTRIBUTES
    // (no local attributes)

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init() {
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 0
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      self.init( )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY auxiliary_geometric_representation_item
    SUBTYPE OF ( geometric_representation_item, variational_representation_item );
  END_ENTITY; -- auxiliary_geometric_representation_item (line:7651 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eAUXILIARY_GEOMETRIC_REPRESENTATION_ITEM : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _auxiliary_geometric_representation_item.self
    }
    public let partialEntity: _auxiliary_geometric_representation_item

    //MARK: SUPERTYPES
    public let super_eREPRESENTATION_ITEM: eREPRESENTATION_ITEM 	// [1]
    public let super_eGEOMETRIC_REPRESENTATION_ITEM: eGEOMETRIC_REPRESENTATION_ITEM 	// [2]
    public let super_eVARIATIONAL_REPRESENTATION_ITEM: eVARIATIONAL_REPRESENTATION_ITEM 	// [3]
    public var super_eAUXILIARY_GEOMETRIC_REPRESENTATION_ITEM: eAUXILIARY_GEOMETRIC_REPRESENTATION_ITEM { return self } 	// [4]

    //MARK: SUBTYPES
    public var sub_eIMPLICIT_INTERSECTION_CURVE: eIMPLICIT_INTERSECTION_CURVE? {	// [5]
      return self.complexEntity.entityReference(eIMPLICIT_INTERSECTION_CURVE.self)
    }

    public var sub_eIMPLICIT_PROJECTED_CURVE: eIMPLICIT_PROJECTED_CURVE? {	// [6]
      return self.complexEntity.entityReference(eIMPLICIT_PROJECTED_CURVE.self)
    }

    public var sub_eIMPLICIT_MODEL_INTERSECTION_CURVE: eIMPLICIT_MODEL_INTERSECTION_CURVE? {	// [7]
      return self.complexEntity.entityReference(eIMPLICIT_MODEL_INTERSECTION_CURVE.self)
    }

    public var sub_eIMPLICIT_SILHOUETTE_CURVE: eIMPLICIT_SILHOUETTE_CURVE? {	// [8]
      return self.complexEntity.entityReference(eIMPLICIT_SILHOUETTE_CURVE.self)
    }

    public var sub_eIMPLICIT_PLANAR_CURVE: eIMPLICIT_PLANAR_CURVE? {	// [9]
      return self.complexEntity.entityReference(eIMPLICIT_PLANAR_CURVE.self)
    }

    public var sub_eIMPLICIT_PLANAR_PROJECTION_POINT: eIMPLICIT_PLANAR_PROJECTION_POINT? {	// [10]
      return self.complexEntity.entityReference(eIMPLICIT_PLANAR_PROJECTION_POINT.self)
    }

    public var sub_eIMPLICIT_PLANAR_INTERSECTION_POINT: eIMPLICIT_PLANAR_INTERSECTION_POINT? {	// [11]
      return self.complexEntity.entityReference(eIMPLICIT_PLANAR_INTERSECTION_POINT.self)
    }

    public var sub_eIMPLICIT_POINT_ON_PLANE: eIMPLICIT_POINT_ON_PLANE? {	// [12]
      return self.complexEntity.entityReference(eIMPLICIT_POINT_ON_PLANE.self)
    }


    //MARK: ATTRIBUTES
    // USING_SKETCH: (2 AMBIGUOUS REFs)

    // COMPUTED_REPRESENTATION: (2 AMBIGUOUS REFs)

    // EXTERNAL_CURVE: (2 AMBIGUOUS REFs)

    // PROJECTION_DIRECTION: (2 AMBIGUOUS REFs)

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eIMPLICIT_PLANAR_PROJECTION_POINT`` )
    public var EXTERNAL_POINT: ePOINT?  {
      get {
        return sub_eIMPLICIT_PLANAR_PROJECTION_POINT?.partialEntity._external_point
      }
      set(newValue) {
        guard let partial = sub_eIMPLICIT_PLANAR_PROJECTION_POINT?.super_eIMPLICIT_PLANAR_PROJECTION_POINT
          .partialEntity else { return }
        partial._external_point = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eIMPLICIT_SILHOUETTE_CURVE`` )
    public var SILHOUETTED_MODEL: sSURFACE_OR_SOLID_MODEL?  {
      get {
        return sub_eIMPLICIT_SILHOUETTE_CURVE?.partialEntity._silhouetted_model
      }
      set(newValue) {
        guard let partial = sub_eIMPLICIT_SILHOUETTE_CURVE?.super_eIMPLICIT_SILHOUETTE_CURVE.partialEntity
          else { return }
        partial._silhouetted_model = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eIMPLICIT_POINT_ON_PLANE`` )
    public var PLANE_OF_POINT: ePLANE?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"PLANE_OF_POINT") {
          return cached.value as! ePLANE? 
        }
        guard let origin = sub_eIMPLICIT_POINT_ON_PLANE else { return nil }
        let value = ePLANE(origin.partialEntity._plane_of_point__getter(SELF: origin))
        updateCache(derivedAttributeName:"PLANE_OF_POINT", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eIMPLICIT_INTERSECTION_CURVE`` )
    public var EXTERNAL_SURFACE: eSURFACE?  {
      get {
        return sub_eIMPLICIT_INTERSECTION_CURVE?.partialEntity._external_surface
      }
      set(newValue) {
        guard let partial = sub_eIMPLICIT_INTERSECTION_CURVE?.super_eIMPLICIT_INTERSECTION_CURVE
          .partialEntity else { return }
        partial._external_surface = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eIMPLICIT_PLANAR_CURVE`` )
    public var CURVE_PLANE: ePLANE?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"CURVE_PLANE") {
          return cached.value as! ePLANE? 
        }
        guard let origin = sub_eIMPLICIT_PLANAR_CURVE else { return nil }
        let value = ePLANE(origin.partialEntity._curve_plane__getter(SELF: origin))
        updateCache(derivedAttributeName:"CURVE_PLANE", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eIMPLICIT_MODEL_INTERSECTION_CURVE`` )
    public var INTERSECTED_MODEL: sSURFACE_OR_SOLID_MODEL?  {
      get {
        return sub_eIMPLICIT_MODEL_INTERSECTION_CURVE?.partialEntity._intersected_model
      }
      set(newValue) {
        guard let partial = sub_eIMPLICIT_MODEL_INTERSECTION_CURVE?.super_eIMPLICIT_MODEL_INTERSECTION_CURVE
          .partialEntity else { return }
        partial._intersected_model = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eREPRESENTATION_ITEM`` )
    public var NAME: tLABEL {
      get {
        return SDAI.UNWRAP( super_eREPRESENTATION_ITEM.partialEntity._name )
      }
      set(newValue) {
        let partial = super_eREPRESENTATION_ITEM.partialEntity
        partial._name = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eIMPLICIT_SILHOUETTE_CURVE`` )
    public var VIEW_DIRECTION: eDIRECTION?  {
      get {
        return sub_eIMPLICIT_SILHOUETTE_CURVE?.partialEntity._view_direction
      }
      set(newValue) {
        guard let partial = sub_eIMPLICIT_SILHOUETTE_CURVE?.super_eIMPLICIT_SILHOUETTE_CURVE.partialEntity
          else { return }
        partial._view_direction = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUPER( ``eGEOMETRIC_REPRESENTATION_ITEM`` )
    public var DIM: tDIMENSION_COUNT?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"DIM") {
          return cached.value as! tDIMENSION_COUNT? 
        }
        let origin = super_eGEOMETRIC_REPRESENTATION_ITEM
        let value = tDIMENSION_COUNT(origin.partialEntity._dim__getter(SELF: origin))
        updateCache(derivedAttributeName:"DIM", value:value)
        return value
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_auxiliary_geometric_representation_item.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eREPRESENTATION_ITEM.self) else { return nil }
      self.super_eREPRESENTATION_ITEM = super1

      guard let super2 = complexEntity?.entityReference(eGEOMETRIC_REPRESENTATION_ITEM.self) else { return nil }
      self.super_eGEOMETRIC_REPRESENTATION_ITEM = super2

      guard let super3 = complexEntity?.entityReference(eVARIATIONAL_REPRESENTATION_ITEM.self) else { return nil }
      self.super_eVARIATIONAL_REPRESENTATION_ITEM = super3

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "AUXILIARY_GEOMETRIC_REPRESENTATION_ITEM", type: self, explicitAttributeCount: 0)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eREPRESENTATION_ITEM.self)
      entityDef.add(supertype: eGEOMETRIC_REPRESENTATION_ITEM.self)
      entityDef.add(supertype: eVARIATIONAL_REPRESENTATION_ITEM.self)
      entityDef.add(supertype: eAUXILIARY_GEOMETRIC_REPRESENTATION_ITEM.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "EXTERNAL_POINT", keyPath: \eAUXILIARY_GEOMETRIC_REPRESENTATION_ITEM.EXTERNAL_POINT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "SILHOUETTED_MODEL", keyPath: \eAUXILIARY_GEOMETRIC_REPRESENTATION_ITEM.SILHOUETTED_MODEL, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "PLANE_OF_POINT", keyPath: \eAUXILIARY_GEOMETRIC_REPRESENTATION_ITEM.PLANE_OF_POINT, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "EXTERNAL_SURFACE", keyPath: \eAUXILIARY_GEOMETRIC_REPRESENTATION_ITEM.EXTERNAL_SURFACE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "CURVE_PLANE", keyPath: \eAUXILIARY_GEOMETRIC_REPRESENTATION_ITEM.CURVE_PLANE, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "INTERSECTED_MODEL", keyPath: \eAUXILIARY_GEOMETRIC_REPRESENTATION_ITEM.INTERSECTED_MODEL, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "NAME", keyPath: \eAUXILIARY_GEOMETRIC_REPRESENTATION_ITEM.NAME, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "VIEW_DIRECTION", keyPath: \eAUXILIARY_GEOMETRIC_REPRESENTATION_ITEM.VIEW_DIRECTION, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "DIM", keyPath: \eAUXILIARY_GEOMETRIC_REPRESENTATION_ITEM.DIM, 
        kind: .derived, source: .superEntity, mayYieldEntityReference: false)

      return entityDef
    }

  }
}
