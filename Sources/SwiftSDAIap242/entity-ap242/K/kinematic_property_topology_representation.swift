/* file: kinematic_property_topology_representation.swift 	 generated: Sun Oct 31 15:32:10 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY kinematic_property_topology_representation
    SUBTYPE OF ( kinematic_property_definition_representation );
      SELF\property_definition_representation.used_representation : kinematic_topology_representation_select;
      base                            : kinematic_link;
    WHERE
      wr1: ( used_representation IN using_representations( base ) );
  END_ENTITY; -- kinematic_property_topology_representation (line:18808 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	property_definition_representation
    ATTR:  definition,	TYPE: represented_definition -- EXPLICIT
      -- possibly overriden by
          ENTITY: shape_definition_representation,	TYPE: property_definition
      *** ENTITY: kinematic_property_definition_representation,	TYPE: product_definition_kinematics	(OBSERVED)

    ATTR:  used_representation,	TYPE: representation -- EXPLICIT
      -- possibly overriden by
          ENTITY: shape_definition_representation,	TYPE: shape_representation
      *** ENTITY: kinematic_property_topology_representation,	TYPE: kinematic_topology_representation_select
          ENTITY: kinematic_property_mechanism_representation,	TYPE: mechanism_representation

    ATTR:  description,	TYPE: text -- DERIVED
      := get_description_value( SELF )

    ATTR:  name,	TYPE: label -- DERIVED
      := get_name_value( SELF )


  SUPER- ENTITY(2)	kinematic_property_definition_representation
    REDCR: definition,	TYPE: product_definition_kinematics -- EXPLICIT
      -- observed by
        ENTITY(1): product_definition_kinematics,	ATTR: representation_relation,	TYPE: 
          kinematic_property_definition_representation
      -- OVERRIDING ENTITY: property_definition_representation


  ENTITY(SELF)	kinematic_property_topology_representation
    REDCR: used_representation,	TYPE: kinematic_topology_representation_select -- EXPLICIT
      -- OVERRIDING ENTITY: property_definition_representation

    ATTR:  base,	TYPE: kinematic_link -- EXPLICIT


*/


//MARK: - Partial Entity
  public final class _kinematic_property_topology_representation : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eKINEMATIC_PROPERTY_TOPOLOGY_REPRESENTATION.self
    }

    //ATTRIBUTES
    /* override var _used_representation: sKINEMATIC_TOPOLOGY_REPRESENTATION_SELECT	//EXPLICIT REDEFINITION(ePROPERTY_DEFINITION_REPRESENTATION) */

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _base: eKINEMATIC_LINK // PLAIN EXPLICIT ATTRIBUTE

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._base.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._base.value.isValueEqualOptionally(to: rhs._base.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._base.value.isValueEqualOptionally(to: rhs._base.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: eKINEMATIC_PROPERTY_TOPOLOGY_REPRESENTATION?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = USING_REPRESENTATIONS(sFOUNDED_ITEM_SELECT(/*eKINEMATIC_LINK*/SELF.BASE))
      let _TEMP2 = SDAI.aggregate(_TEMP1, contains: eREPRESENTATION(/*
        sKINEMATIC_TOPOLOGY_REPRESENTATION_SELECT*/SELF.USED_REPRESENTATION))
      return _TEMP2
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(BASE: eKINEMATIC_LINK) {
      self._base = BASE
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 1
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverRequiredParameter(as: eKINEMATIC_LINK.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( BASE: p0 )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY kinematic_property_topology_representation
    SUBTYPE OF ( kinematic_property_definition_representation );
      SELF\property_definition_representation.used_representation : kinematic_topology_representation_select;
      base                            : kinematic_link;
    WHERE
      wr1: ( used_representation IN using_representations( base ) );
  END_ENTITY; -- kinematic_property_topology_representation (line:18808 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eKINEMATIC_PROPERTY_TOPOLOGY_REPRESENTATION : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _kinematic_property_topology_representation.self
    }
    public let partialEntity: _kinematic_property_topology_representation

    //MARK: SUPERTYPES
    public let super_ePROPERTY_DEFINITION_REPRESENTATION: ePROPERTY_DEFINITION_REPRESENTATION 	// [1]
    public let super_eKINEMATIC_PROPERTY_DEFINITION_REPRESENTATION: eKINEMATIC_PROPERTY_DEFINITION_REPRESENTATION 	// [2]
    public var super_eKINEMATIC_PROPERTY_TOPOLOGY_REPRESENTATION: eKINEMATIC_PROPERTY_TOPOLOGY_REPRESENTATION { return self } 	// [3]

    //MARK: SUBTYPES

    //MARK: ATTRIBUTES
    /// __DERIVE__ attribute
    /// - origin: SUPER( ``ePROPERTY_DEFINITION_REPRESENTATION`` )
    public var DESCRIPTION: tTEXT?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"DESCRIPTION") {
          return cached.value as! tTEXT? 
        }
        let origin = super_ePROPERTY_DEFINITION_REPRESENTATION
        let value = tTEXT(origin.partialEntity._description__getter(SELF: origin))
        updateCache(derivedAttributeName:"DESCRIPTION", value:value)
        return value
      }
    }

    /// __EXPLICIT REDEF__ attribute
    /// - origin: SELF( ``eKINEMATIC_PROPERTY_TOPOLOGY_REPRESENTATION`` )
    public var USED_REPRESENTATION: sKINEMATIC_TOPOLOGY_REPRESENTATION_SELECT {
      get {
        return SDAI.UNWRAP( sKINEMATIC_TOPOLOGY_REPRESENTATION_SELECT( super_ePROPERTY_DEFINITION_REPRESENTATION
          .partialEntity._used_representation ) )
      }
      set(newValue) {
        let partial = super_ePROPERTY_DEFINITION_REPRESENTATION.partialEntity
        partial._used_representation = SDAI.UNWRAP(
          eREPRESENTATION(newValue))
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eKINEMATIC_PROPERTY_TOPOLOGY_REPRESENTATION`` )
    public var BASE: eKINEMATIC_LINK {
      get {
        return SDAI.UNWRAP( self.partialEntity._base )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._base = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT REDEF(OBSERVED)__ attribute
    /// - origin: SUPER( ``eKINEMATIC_PROPERTY_DEFINITION_REPRESENTATION`` )
    public var DEFINITION: ePRODUCT_DEFINITION_KINEMATICS {
      get {
        return SDAI.UNWRAP( ePRODUCT_DEFINITION_KINEMATICS( super_ePROPERTY_DEFINITION_REPRESENTATION
          .partialEntity._definition ) )
      }
      set(newValue) {
        let partial = super_ePROPERTY_DEFINITION_REPRESENTATION.partialEntity
        partial._definition = SDAI.UNWRAP(
          sREPRESENTED_DEFINITION(newValue))
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUPER( ``ePROPERTY_DEFINITION_REPRESENTATION`` )
    public var NAME: tLABEL?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"NAME") {
          return cached.value as! tLABEL? 
        }
        let origin = super_ePROPERTY_DEFINITION_REPRESENTATION
        let value = tLABEL(origin.partialEntity._name__getter(SELF: origin))
        updateCache(derivedAttributeName:"NAME", value:value)
        return value
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_kinematic_property_topology_representation.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(ePROPERTY_DEFINITION_REPRESENTATION.self) else { return nil }
      self.super_ePROPERTY_DEFINITION_REPRESENTATION = super1

      guard let super2 = complexEntity?.entityReference(eKINEMATIC_PROPERTY_DEFINITION_REPRESENTATION.self) else { return nil }
      self.super_eKINEMATIC_PROPERTY_DEFINITION_REPRESENTATION = super2

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _kinematic_property_topology_representation.WHERE_wr1(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "KINEMATIC_PROPERTY_TOPOLOGY_REPRESENTATION", type: self, explicitAttributeCount: 1)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: ePROPERTY_DEFINITION_REPRESENTATION.self)
      entityDef.add(supertype: eKINEMATIC_PROPERTY_DEFINITION_REPRESENTATION.self)
      entityDef.add(supertype: eKINEMATIC_PROPERTY_TOPOLOGY_REPRESENTATION.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "DESCRIPTION", keyPath: \eKINEMATIC_PROPERTY_TOPOLOGY_REPRESENTATION.DESCRIPTION, 
        kind: .derived, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "USED_REPRESENTATION", keyPath: \eKINEMATIC_PROPERTY_TOPOLOGY_REPRESENTATION.USED_REPRESENTATION, 
        kind: .explicitRedeclaring, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "BASE", keyPath: \eKINEMATIC_PROPERTY_TOPOLOGY_REPRESENTATION.BASE, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "DEFINITION", keyPath: \eKINEMATIC_PROPERTY_TOPOLOGY_REPRESENTATION.DEFINITION, 
        kind: .explicitRedeclaring, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "NAME", keyPath: \eKINEMATIC_PROPERTY_TOPOLOGY_REPRESENTATION.NAME, 
        kind: .derived, source: .superEntity, mayYieldEntityReference: false)

      return entityDef
    }

  }
}
