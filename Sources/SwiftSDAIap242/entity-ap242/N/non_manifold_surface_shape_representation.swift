/* file: non_manifold_surface_shape_representation.swift 	 generated: Mon Jan  3 16:32:52 2022 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.1, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY non_manifold_surface_shape_representation
    SUBTYPE OF ( shape_representation );
    WHERE
      wr1 : ( SIZEOF( QUERY ( it <* SELF.items | ( NOT ( SIZEOF( [
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.FACE_BASED_SURFACE_MODEL' , 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.MAPPED_ITEM' , 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.AXIS2_PLACEMENT_3D' ] * TYPEOF( it ) ) = 1 ) ) ) ) 
                = 0 );
      wr2 : ( SIZEOF( QUERY ( it <* SELF.items | ( SIZEOF( [ 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
                + 'FACE_BASED_SURFACE_MODEL' , 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.MAPPED_ITEM'] 
                * TYPEOF( it ) ) = 1 ) ) ) > 0 );
      wr3 : ( SIZEOF( QUERY ( mi <* QUERY ( it <* SELF.items | ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.MAPPED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( 
                ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.NON_MANIFOLD_SURFACE_SHAPE_REPRESENTATION' 
                IN TYPEOF( mi\mapped_item.mapping_source.mapped_representation ) ) AND ( SIZEOF( 
                QUERY ( mr_it <* mi\mapped_item.mapping_source.mapped_representation.items | ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.FACE_BASED_SURFACE_MODEL'  IN TYPEOF( mr_it ) ) ) ) 
                > 0 ) ) ) ) ) = 0 );
      wr4 : ( SIZEOF( QUERY ( fbsm <* QUERY ( it <* SELF.items | ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.FACE_BASED_SURFACE_MODEL'  IN TYPEOF( it ) ) )
                | ( NOT ( SIZEOF( QUERY ( cfs <* fbsm\face_based_surface_model.fbsm_faces | ( NOT ( SIZEOF( 
                QUERY ( fa <* cfs.cfs_faces | ( NOT ( SIZEOF( [
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.FACE_SURFACE' , 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ORIENTED_FACE' ] * TYPEOF( fa ) ) = 1 ) ) ) ) 
                = 0 ) ) ) ) = 0 ) ) ) ) = 0 );
      wr5 : ( SIZEOF( QUERY ( fbsm <* QUERY ( it <* SELF.items | ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.FACE_BASED_SURFACE_MODEL'  IN TYPEOF( it ) ) )
                | ( NOT ( SIZEOF( QUERY ( cfs <* fbsm\face_based_surface_model.fbsm_faces | ( NOT ( SIZEOF( 
                QUERY ( f_sf <* QUERY ( fa <* cfs.cfs_faces | ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.FACE_SURFACE'  IN TYPEOF( fa ) ) ) | ( NOT 
                ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ADVANCED_FACE' IN TYPEOF( f_sf ) ) OR 
                nmsf_surface_check( f_sf\face_surface.face_geometry ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 );
      wr6 : ( SIZEOF( QUERY ( fbsm <* QUERY ( it <* SELF.items | ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.FACE_BASED_SURFACE_MODEL'  IN TYPEOF( it ) ) )
                | ( NOT ( SIZEOF( QUERY ( cfs <* fbsm\face_based_surface_model.fbsm_faces | ( NOT ( SIZEOF( 
                QUERY ( o_fa <* QUERY ( fa <* cfs.cfs_faces | ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ORIENTED_FACE'  IN TYPEOF( fa ) ) ) | ( NOT 
                ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ADVANCED_FACE' IN TYPEOF( o_fa\
                oriented_face.face_element ) ) OR nmsf_surface_check( o_fa\oriented_face.face_element\
                face_surface.face_geometry ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 );
      wr7 : ( SIZEOF( QUERY ( fbsm <* QUERY ( it <* SELF.items | ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.FACE_BASED_SURFACE_MODEL'  IN TYPEOF( it ) ) )
                | ( NOT ( SIZEOF( QUERY ( cfs <* fbsm\face_based_surface_model.fbsm_faces | ( NOT ( SIZEOF( 
                QUERY ( fa <* cfs.cfs_faces | ( NOT ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
                + 'ADVANCED_FACE'  IN TYPEOF( fa ) ) OR ( SIZEOF( QUERY ( bnds <* fa.bounds | ( NOT ( 
                SIZEOF( [ 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.EDGE_LOOP', 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.VERTEX_LOOP' ] * TYPEOF( bnds.bound ) ) = 1 ) ) ) ) 
                = 0 ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 );
      wr8 : ( SIZEOF( QUERY ( fbsm <* QUERY ( it <* SELF.items | ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.FACE_BASED_SURFACE_MODEL'  IN TYPEOF( it ) ) )
                | ( NOT ( SIZEOF( QUERY ( cfs <* fbsm\face_based_surface_model.fbsm_faces | ( NOT ( SIZEOF( 
                QUERY ( fa <* cfs.cfs_faces | ( NOT ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
                + 'ADVANCED_FACE'  IN TYPEOF( fa ) ) OR ( SIZEOF( QUERY ( elp_fbnds <* QUERY ( bnds <* fa.
                bounds | ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.EDGE_LOOP' IN TYPEOF( bnds.bound ) ) )
                | ( NOT ( SIZEOF( QUERY ( oe <* elp_fbnds\path.edge_list | ( NOT ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.EDGE_CURVE'  IN TYPEOF( oe.edge_element ) ) ) ) ) 
                = 0 ) ) ) ) = 0 ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 );
      wr9 : ( SIZEOF( QUERY ( fbsm <* QUERY ( it <* SELF.items | ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.FACE_BASED_SURFACE_MODEL'  IN TYPEOF( it ) ) )
                | ( NOT ( SIZEOF( QUERY ( cfs <* fbsm\face_based_surface_model.fbsm_faces | ( NOT ( SIZEOF( 
                QUERY ( fa <* cfs.cfs_faces | ( NOT ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
                + 'ADVANCED_FACE'  IN TYPEOF( fa ) ) OR ( SIZEOF( QUERY ( elp_fbnds <* QUERY ( bnds <* fa.
                bounds | ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.EDGE_LOOP' IN TYPEOF( bnds.bound ) ) )
                | ( NOT ( SIZEOF( QUERY ( oe_cv <* QUERY ( oe <* elp_fbnds\path.edge_list | ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.EDGE_CURVE'  IN TYPEOF( oe.edge_element ) ) )
                | ( NOT ( SIZEOF( [ 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.B_SPLINE_CURVE', 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CONIC' , 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CURVE_REPLICA' , 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.LINE' , 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.OFFSET_CURVE_3D' , 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PCURVE' , 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.POLYLINE' , 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SURFACE_CURVE' ] * TYPEOF( oe_cv.
                edge_element\edge_curve.edge_geometry ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) ) = 0 ) ) ) ) =
                0 ) ) ) ) = 0 );
      wr10: ( SIZEOF( QUERY ( fbsm <* QUERY ( it <* SELF.items | ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.FACE_BASED_SURFACE_MODEL'  IN TYPEOF( it ) ) )
                | ( NOT ( SIZEOF( QUERY ( cfs <* fbsm\face_based_surface_model.fbsm_faces | ( NOT ( SIZEOF( 
                QUERY ( fa <* cfs.cfs_faces | ( NOT ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
                + 'ADVANCED_FACE'  IN TYPEOF( fa ) ) OR ( SIZEOF( QUERY ( elp_fbnds <* QUERY ( bnds <* fa.
                bounds | ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.EDGE_LOOP' IN TYPEOF( bnds.bound ) ) )
                | ( NOT ( SIZEOF( QUERY ( oe <* elp_fbnds\path.edge_list | ( NOT nmsf_curve_check( oe.
                edge_element\edge_curve.edge_geometry ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) 
                = 0 );
      wr11: ( SIZEOF( QUERY ( fbsm <* QUERY ( it <* SELF.items | ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.FACE_BASED_SURFACE_MODEL'  IN TYPEOF( it ) ) )
                | ( NOT ( SIZEOF( QUERY ( cfs <* fbsm\face_based_surface_model.fbsm_faces | ( NOT ( SIZEOF( 
                QUERY ( fa <* cfs.cfs_faces | ( NOT ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
                + 'ADVANCED_FACE'  IN TYPEOF( fa ) ) OR ( SIZEOF( QUERY ( elp_fbnds <* QUERY ( bnds <* fa.
                bounds | ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.EDGE_LOOP' IN TYPEOF( bnds.bound ) ) )
                | ( NOT ( SIZEOF( QUERY ( oe <* elp_fbnds\path.edge_list | ( NOT ( ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.VERTEX_POINT'  IN TYPEOF( oe.edge_element.
                edge_start ) ) AND ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.VERTEX_POINT' IN 
                TYPEOF( oe.edge_element.edge_end ) ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) 
                = 0 );
      wr12: ( SIZEOF( QUERY ( fbsm <* QUERY ( it <* SELF.items | ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.FACE_BASED_SURFACE_MODEL'  IN TYPEOF( it ) ) )
                | ( NOT ( SIZEOF( QUERY ( cfs <* fbsm\face_based_surface_model.fbsm_faces | ( NOT ( SIZEOF( 
                QUERY ( fa <* cfs.cfs_faces | ( NOT ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
                + 'ADVANCED_FACE'  IN TYPEOF( fa ) ) OR ( SIZEOF( QUERY ( elp_fbnds <* QUERY ( bnds <* fa.
                bounds | ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.EDGE_LOOP' IN TYPEOF( bnds.bound ) ) )
                | ( NOT ( SIZEOF( QUERY ( oe <* elp_fbnds\path.edge_list | ( NOT ( ( SIZEOF( [
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CARTESIAN_POINT' , 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.DEGENERATE_PCURVE' , 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.POINT_ON_CURVE' , 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.POINT_ON_SURFACE' ] * TYPEOF( oe.
                edge_element.edge_start\vertex_point.vertex_geometry ) ) = 1 ) AND ( SIZEOF( [
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CARTESIAN_POINT' , 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.DEGENERATE_PCURVE' , 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.POINT_ON_CURVE' , 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.POINT_ON_SURFACE' ] * TYPEOF( oe.
                edge_element.edge_end\vertex_point.vertex_geometry ) ) = 1 ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) ) 
                = 0 ) ) ) ) = 0 ) ) ) ) = 0 );
      wr13: ( SIZEOF( QUERY ( fbsm <* QUERY ( it <* SELF.items | ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.FACE_BASED_SURFACE_MODEL'  IN TYPEOF( it ) ) )
                | ( NOT ( SIZEOF( QUERY ( cfs <* fbsm\face_based_surface_model.fbsm_faces | ( NOT ( SIZEOF( 
                QUERY ( fa <* cfs.cfs_faces | ( NOT ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
                + 'ADVANCED_FACE'  IN TYPEOF( fa ) ) OR ( SIZEOF( QUERY ( vlp_fbnds <* QUERY ( bnds <* fa.
                bounds | ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.VERTEX_LOOP' IN TYPEOF( bnds.
                bound ) ) ) | ( NOT ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.VERTEX_POINT' IN 
                TYPEOF( vlp_fbnds\vertex_loop.loop_vertex ) ) ) ) ) = 0 ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 );
      wr14: ( SIZEOF( QUERY ( fbsm <* QUERY ( it <* SELF.items | ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.FACE_BASED_SURFACE_MODEL'  IN TYPEOF( it ) ) )
                | ( NOT ( SIZEOF( QUERY ( cfs <* fbsm\face_based_surface_model.fbsm_faces | ( NOT ( SIZEOF( 
                QUERY ( fa <* cfs.cfs_faces | ( NOT ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
                + 'ADVANCED_FACE'  IN TYPEOF( fa ) ) OR ( SIZEOF( QUERY ( vlp_fbnds <* QUERY ( bnds <* fa.
                bounds | ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.VERTEX_LOOP' IN TYPEOF( bnds.
                bound ) ) ) | ( NOT ( SIZEOF( [ 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
                + 'CARTESIAN_POINT' , 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.DEGENERATE_PCURVE', 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.POINT_ON_CURVE' , 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.POINT_ON_SURFACE' ] * TYPEOF( vlp_fbnds\
                vertex_loop.loop_vertex\vertex_point.vertex_geometry ) ) = 1 ) ) ) ) = 0 ) ) ) ) ) = 0 ) ) ) ) 
                = 0 ) ) ) ) = 0 );
  END_ENTITY; -- non_manifold_surface_shape_representation (line:22164 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	representation
    ATTR:  name,	TYPE: label -- EXPLICIT

    ATTR:  items,	TYPE: SET [1 : ?] OF representation_item -- EXPLICIT
      -- observed by
        ENTITY(1): hidden_element_over_riding_styled_item,	ATTR: container,	TYPE: SET [1 : ?] OF
          presentation_view
      -- possibly overriden by
          ENTITY: shape_representation_with_parameters,	TYPE: SET [1 : ?] OF shape_representation_with_parameters_items
          ENTITY: mechanical_design_shaded_presentation_area,	TYPE: SET [1 : ?] OF mechanical_design_shaded_presentation_area_items
          ENTITY: mechanical_design_shaded_presentation_representation,	TYPE: SET [1 : ?] OF mechanical_design_shaded_presentation_representation_items
          ENTITY: connected_edge_with_length_set_representation,	TYPE: SET [1 : ?] OF connected_edge_with_length_set_items
          ENTITY: mechanism_state_representation,	TYPE: SET [1 : ?] OF pair_value
          ENTITY: reinforcement_orientation_basis,	TYPE: SET [1 : 1] OF basis_11_direction_member
          ENTITY: externally_defined_representation,	TYPE: SET [1 : ?] OF externally_defined_representation_item
          ENTITY: kinematic_topology_network_structure,	TYPE: SET [1 : ?] OF kinematic_loop
          ENTITY: kinematic_topology_structure,	TYPE: SET [1 : ?] OF kinematic_joint
          ENTITY: single_area_csg_2d_shape_representation,	TYPE: SET [1 : ?] OF csg_2d_area_select
          ENTITY: draughting_model,	TYPE: SET [1 : ?] OF draughting_model_item_select
          ENTITY: shape_dimension_representation,	TYPE: SET [1 : ?] OF shape_dimension_representation_item
          ENTITY: point_placement_shape_representation,	TYPE: SET [1 : ?] OF point_placement_shape_representation_item
          ENTITY: link_motion_representation_along_path,	TYPE: SET [1 : ?] OF kinematic_path
          ENTITY: kinematic_topology_directed_structure,	TYPE: SET [1 : ?] OF oriented_joint
          ENTITY: scan_data_shape_representation,	TYPE: SET [1 : ?] OF scanned_data_item
          ENTITY: mechanical_design_geometric_presentation_area,	TYPE: SET [1 : ?] OF mechanical_design_geometric_presentation_area_items
          ENTITY: procedural_shape_representation,	TYPE: SET [1 : ?] OF procedural_shape_representation_sequence
          ENTITY: path_parameter_representation,	TYPE: SET [1 : ?] OF bounded_curve
          ENTITY: csg_2d_shape_representation,	TYPE: SET [1 : ?] OF csg_2d_shape_select
          ENTITY: ply_angle_representation,	TYPE: SET [1 : 1] OF measure_representation_item
          ENTITY: text_string_representation,	TYPE: SET [1 : ?] OF text_string_representation_item
          ENTITY: procedural_representation,	TYPE: SET [1 : ?] OF procedural_representation_sequence
          ENTITY: draughting_subfigure_representation,	TYPE: SET [1 : ?] OF draughting_subfigure_representation_item
          ENTITY: picture_representation,	TYPE: SET [2 : ?] OF picture_representation_item_select
          ENTITY: structured_text_representation,	TYPE: SET [1 : ?] OF string_representation_item_select
          ENTITY: interpolated_configuration_representation,	TYPE: SET [1 : ?] OF interpolated_configuration_sequence
          ENTITY: mechanical_design_presentation_representation_with_draughting,	TYPE: SET [1 : ?] OF camera_model_d3
          ENTITY: mechanism_representation,	TYPE: SET [1 : ?] OF pair_representation_relationship
          ENTITY: mechanical_design_geometric_presentation_representation,	TYPE: SET [1 : ?] OF mechanical_design_geometric_presentation_representation_items
          ENTITY: kinematic_link_representation,	TYPE: SET [1 : ?] OF kinematic_link_representation_items
          ENTITY: neutral_sketch_representation,	TYPE: SET [1 : ?] OF sketch_element_select
          ENTITY: draughting_symbol_representation,	TYPE: SET [1 : ?] OF draughting_symbol_representation_item

    ATTR:  context_of_items,	TYPE: representation_context -- EXPLICIT (DYNAMIC)
      -- observed by
        ENTITY(1): representation_context,	ATTR: representations_in_context,	TYPE: SET [1 : ?] OF
          representation
      -- possibly overriden by
          ENTITY: mechanism_state_representation,	TYPE: geometric_representation_context	(as DERIVED)
          ENTITY: presentation_representation,	TYPE: geometric_representation_context
          ENTITY: link_motion_representation_along_path,	TYPE: geometric_representation_context_with_parameter
          ENTITY: path_parameter_representation,	TYPE: path_parameter_representation_context
          ENTITY: analysis_model,	TYPE: analysis_representation_context
          ENTITY: interpolated_configuration_representation,	TYPE: geometric_representation_context_with_parameter
          ENTITY: mechanism_representation,	TYPE: geometric_representation_context
          ENTITY: kinematic_link_representation,	TYPE: geometric_representation_context

    ATTR:  id,	TYPE: identifier -- DERIVED
      := get_id_value( SELF )

    ATTR:  description,	TYPE: text -- DERIVED
      := get_description_value( SELF )


  SUPER- ENTITY(2)	shape_representation
    (no local attributes)

  ENTITY(SELF)	non_manifold_surface_shape_representation
    (no local attributes)

*/


//MARK: - Partial Entity
  public final class _non_manifold_surface_shape_representation : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eNON_MANIFOLD_SURFACE_SHAPE_REPRESENTATION.self
    }

    //ATTRIBUTES
    // (no local attributes)

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: eNON_MANIFOLD_SURFACE_SHAPE_REPRESENTATION?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.ITEMS
      let _TEMP2 = _TEMP1.QUERY{ IT in 

          let _TEMP1 = ([SDAI.AIE(SDAI.STRING(
            "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.FACE_BASED_SURFACE_MODEL")), 
            SDAI.AIE(SDAI.STRING("AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.MAPPED_ITEM")), 
            SDAI.AIE(SDAI.STRING("AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.AXIS2_PLACEMENT_3D"))] 
            as [SDAI.AggregationInitializerElement<SDAI.STRING>])
          let _TEMP2 = SDAI.TYPEOF(IT)
          let _TEMP3 = SDAI.FORCE_OPTIONAL(_TEMP1) * SDAI.FORCE_OPTIONAL(_TEMP2)
          let _TEMP4 = SDAI.SIZEOF(_TEMP3)
          let _TEMP5 = _TEMP4 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
          let _TEMP6 =  !_TEMP5
          return _TEMP6 }
      let _TEMP3 = SDAI.SIZEOF(_TEMP2)
      let _TEMP4 = _TEMP3 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      return _TEMP4
    }
    public static func WHERE_wr2(SELF: eNON_MANIFOLD_SURFACE_SHAPE_REPRESENTATION?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.ITEMS
      let _TEMP2 = _TEMP1.QUERY{ IT in 

          let _TEMP1 = ([SDAI.AIE(SDAI.STRING(
            "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.FACE_BASED_SURFACE_MODEL")), 
            SDAI.AIE(SDAI.STRING("AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.MAPPED_ITEM"))] 
            as [SDAI.AggregationInitializerElement<SDAI.STRING>])
          let _TEMP2 = SDAI.TYPEOF(IT)
          let _TEMP3 = SDAI.FORCE_OPTIONAL(_TEMP1) * SDAI.FORCE_OPTIONAL(_TEMP2)
          let _TEMP4 = SDAI.SIZEOF(_TEMP3)
          let _TEMP5 = _TEMP4 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
          return _TEMP5 }
      let _TEMP3 = SDAI.SIZEOF(_TEMP2)
      let _TEMP4 = _TEMP3 > SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      return _TEMP4
    }
    public static func WHERE_wr3(SELF: eNON_MANIFOLD_SURFACE_SHAPE_REPRESENTATION?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.ITEMS
      let _TEMP2 = _TEMP1.QUERY{ IT in 

          let _TEMP1 = SDAI.TYPEOF(IT, IS: eMAPPED_ITEM.self)
          return _TEMP1 }
      let _TEMP3 = _TEMP2.QUERY{ MI in 

          let _TEMP1 = SDAI.TYPEOF(MI.GROUP_REF(eMAPPED_ITEM.self)?.MAPPING_SOURCE.MAPPED_REPRESENTATION, 
            IS: eNON_MANIFOLD_SURFACE_SHAPE_REPRESENTATION.self)
          let _TEMP2 = MI.GROUP_REF(eMAPPED_ITEM.self)
          let _TEMP3 = _TEMP2?.MAPPING_SOURCE
          let _TEMP4 = _TEMP3?.MAPPED_REPRESENTATION
          let _TEMP5 = _TEMP4?.ITEMS
          let _TEMP6 = _TEMP5?.QUERY{ MR_IT in 

              let _TEMP1 = SDAI.TYPEOF(MR_IT, IS: eFACE_BASED_SURFACE_MODEL.self)
              return _TEMP1 }
          let _TEMP7 = SDAI.SIZEOF(_TEMP6)
          let _TEMP8 = _TEMP7 > SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
          let _TEMP9 = _TEMP1 && _TEMP8
          let _TEMP10 =  !_TEMP9
          return _TEMP10 }
      let _TEMP4 = SDAI.SIZEOF(_TEMP3)
      let _TEMP5 = _TEMP4 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      return _TEMP5
    }
    public static func WHERE_wr4(SELF: eNON_MANIFOLD_SURFACE_SHAPE_REPRESENTATION?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.ITEMS
      let _TEMP2 = _TEMP1.QUERY{ IT in 

          let _TEMP1 = SDAI.TYPEOF(IT, IS: eFACE_BASED_SURFACE_MODEL.self)
          return _TEMP1 }
      let _TEMP3 = _TEMP2.QUERY{ FBSM in 

          let _TEMP1 = FBSM.GROUP_REF(eFACE_BASED_SURFACE_MODEL.self)
          let _TEMP2 = _TEMP1?.FBSM_FACES
          let _TEMP3 = _TEMP2?.QUERY{ CFS in 

              let _TEMP1 = CFS.CFS_FACES
              let _TEMP2 = _TEMP1.QUERY{ FA in 

                  let _TEMP1 = ([SDAI.AIE(SDAI.STRING(
                    "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.FACE_SURFACE")), 
                    SDAI.AIE(SDAI.STRING("AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ORIENTED_FACE"))] 
                    as [SDAI.AggregationInitializerElement<SDAI.STRING>])
                  let _TEMP2 = SDAI.TYPEOF(FA)
                  let _TEMP3 = SDAI.FORCE_OPTIONAL(_TEMP1) * SDAI.FORCE_OPTIONAL(_TEMP2)
                  let _TEMP4 = SDAI.SIZEOF(_TEMP3)
                  let _TEMP5 = _TEMP4 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
                  let _TEMP6 =  !_TEMP5
                  return _TEMP6 }
              let _TEMP3 = SDAI.SIZEOF(_TEMP2)
              let _TEMP4 = _TEMP3 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
              let _TEMP5 =  !_TEMP4
              return _TEMP5 }
          let _TEMP4 = SDAI.SIZEOF(_TEMP3)
          let _TEMP5 = _TEMP4 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
          let _TEMP6 =  !_TEMP5
          return _TEMP6 }
      let _TEMP4 = SDAI.SIZEOF(_TEMP3)
      let _TEMP5 = _TEMP4 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      return _TEMP5
    }
    public static func WHERE_wr5(SELF: eNON_MANIFOLD_SURFACE_SHAPE_REPRESENTATION?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.ITEMS
      let _TEMP2 = _TEMP1.QUERY{ IT in 

          let _TEMP1 = SDAI.TYPEOF(IT, IS: eFACE_BASED_SURFACE_MODEL.self)
          return _TEMP1 }
      let _TEMP3 = _TEMP2.QUERY{ FBSM in 

          let _TEMP1 = FBSM.GROUP_REF(eFACE_BASED_SURFACE_MODEL.self)
          let _TEMP2 = _TEMP1?.FBSM_FACES
          let _TEMP3 = _TEMP2?.QUERY{ CFS in 

              let _TEMP1 = CFS.CFS_FACES
              let _TEMP2 = _TEMP1.QUERY{ FA in 

                  let _TEMP1 = SDAI.TYPEOF(FA, IS: eFACE_SURFACE.self)
                  return _TEMP1 }
              let _TEMP3 = _TEMP2.QUERY{ F_SF in 

                  let _TEMP1 = SDAI.TYPEOF(F_SF, IS: eADVANCED_FACE.self)
                  let _TEMP2 = F_SF.GROUP_REF(eFACE_SURFACE.self)
                  let _TEMP3 = _TEMP2?.FACE_GEOMETRY
                  let _TEMP4 = NMSF_SURFACE_CHECK(_TEMP3)
                  let _TEMP5 = _TEMP1 || _TEMP4
                  let _TEMP6 =  !_TEMP5
                  return _TEMP6 }
              let _TEMP4 = SDAI.SIZEOF(_TEMP3)
              let _TEMP5 = _TEMP4 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
              let _TEMP6 =  !_TEMP5
              return _TEMP6 }
          let _TEMP4 = SDAI.SIZEOF(_TEMP3)
          let _TEMP5 = _TEMP4 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
          let _TEMP6 =  !_TEMP5
          return _TEMP6 }
      let _TEMP4 = SDAI.SIZEOF(_TEMP3)
      let _TEMP5 = _TEMP4 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      return _TEMP5
    }
    public static func WHERE_wr6(SELF: eNON_MANIFOLD_SURFACE_SHAPE_REPRESENTATION?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.ITEMS
      let _TEMP2 = _TEMP1.QUERY{ IT in 

          let _TEMP1 = SDAI.TYPEOF(IT, IS: eFACE_BASED_SURFACE_MODEL.self)
          return _TEMP1 }
      let _TEMP3 = _TEMP2.QUERY{ FBSM in 

          let _TEMP1 = FBSM.GROUP_REF(eFACE_BASED_SURFACE_MODEL.self)
          let _TEMP2 = _TEMP1?.FBSM_FACES
          let _TEMP3 = _TEMP2?.QUERY{ CFS in 

              let _TEMP1 = CFS.CFS_FACES
              let _TEMP2 = _TEMP1.QUERY{ FA in 

                  let _TEMP1 = SDAI.TYPEOF(FA, IS: eORIENTED_FACE.self)
                  return _TEMP1 }
              let _TEMP3 = _TEMP2.QUERY{ O_FA in 

                  let _TEMP1 = SDAI.TYPEOF(O_FA.GROUP_REF(eORIENTED_FACE.self)?.FACE_ELEMENT, 
                    IS: eADVANCED_FACE.self)
                  let _TEMP2 = O_FA.GROUP_REF(eORIENTED_FACE.self)
                  let _TEMP3 = _TEMP2?.FACE_ELEMENT
                  let _TEMP4 = _TEMP3?.GROUP_REF(eFACE_SURFACE.self)
                  let _TEMP5 = _TEMP4?.FACE_GEOMETRY
                  let _TEMP6 = NMSF_SURFACE_CHECK(_TEMP5)
                  let _TEMP7 = _TEMP1 || _TEMP6
                  let _TEMP8 =  !_TEMP7
                  return _TEMP8 }
              let _TEMP4 = SDAI.SIZEOF(_TEMP3)
              let _TEMP5 = _TEMP4 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
              let _TEMP6 =  !_TEMP5
              return _TEMP6 }
          let _TEMP4 = SDAI.SIZEOF(_TEMP3)
          let _TEMP5 = _TEMP4 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
          let _TEMP6 =  !_TEMP5
          return _TEMP6 }
      let _TEMP4 = SDAI.SIZEOF(_TEMP3)
      let _TEMP5 = _TEMP4 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      return _TEMP5
    }
    public static func WHERE_wr7(SELF: eNON_MANIFOLD_SURFACE_SHAPE_REPRESENTATION?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.ITEMS
      let _TEMP2 = _TEMP1.QUERY{ IT in 

          let _TEMP1 = SDAI.TYPEOF(IT, IS: eFACE_BASED_SURFACE_MODEL.self)
          return _TEMP1 }
      let _TEMP3 = _TEMP2.QUERY{ FBSM in 

          let _TEMP1 = FBSM.GROUP_REF(eFACE_BASED_SURFACE_MODEL.self)
          let _TEMP2 = _TEMP1?.FBSM_FACES
          let _TEMP3 = _TEMP2?.QUERY{ CFS in 

              let _TEMP1 = CFS.CFS_FACES
              let _TEMP2 = _TEMP1.QUERY{ FA in 

                  let _TEMP1 = SDAI.TYPEOF(FA, IS: eADVANCED_FACE.self)
                  let _TEMP2 = FA.BOUNDS
                  let _TEMP3 = _TEMP2
                    .QUERY{ BNDS in 

                      let _TEMP1 = ([
                        SDAI.AIE(SDAI.STRING("AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.EDGE_LOOP")), 
                        SDAI.AIE(SDAI.STRING("AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.VERTEX_LOOP"))] 
                        as [SDAI.AggregationInitializerElement<SDAI.STRING>])
                      let _TEMP2 = BNDS.BOUND
                      let _TEMP3 = SDAI.TYPEOF(_TEMP2)
                      let _TEMP4 = SDAI.FORCE_OPTIONAL(_TEMP1) * SDAI.FORCE_OPTIONAL(_TEMP3)
                      let _TEMP5 = SDAI.SIZEOF(_TEMP4)
                      let _TEMP6 = _TEMP5 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
                      let _TEMP7 =  !_TEMP6
                      return _TEMP7 }
                  let _TEMP4 = SDAI.SIZEOF(_TEMP3)
                  let _TEMP5 = _TEMP4 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
                  let _TEMP6 = _TEMP1 || _TEMP5
                  let _TEMP7 =  !_TEMP6
                  return _TEMP7 }
              let _TEMP3 = SDAI.SIZEOF(_TEMP2)
              let _TEMP4 = _TEMP3 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
              let _TEMP5 =  !_TEMP4
              return _TEMP5 }
          let _TEMP4 = SDAI.SIZEOF(_TEMP3)
          let _TEMP5 = _TEMP4 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
          let _TEMP6 =  !_TEMP5
          return _TEMP6 }
      let _TEMP4 = SDAI.SIZEOF(_TEMP3)
      let _TEMP5 = _TEMP4 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      return _TEMP5
    }
    public static func WHERE_wr8(SELF: eNON_MANIFOLD_SURFACE_SHAPE_REPRESENTATION?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.ITEMS
      let _TEMP2 = _TEMP1.QUERY{ IT in 

          let _TEMP1 = SDAI.TYPEOF(IT, IS: eFACE_BASED_SURFACE_MODEL.self)
          return _TEMP1 }
      let _TEMP3 = _TEMP2.QUERY{ FBSM in 

          let _TEMP1 = FBSM.GROUP_REF(eFACE_BASED_SURFACE_MODEL.self)
          let _TEMP2 = _TEMP1?.FBSM_FACES
          let _TEMP3 = _TEMP2?.QUERY{ CFS in 

              let _TEMP1 = CFS.CFS_FACES
              let _TEMP2 = _TEMP1.QUERY{ FA in 

                  let _TEMP1 = SDAI.TYPEOF(FA, IS: eADVANCED_FACE.self)
                  let _TEMP2 = FA.BOUNDS
                  let _TEMP3 = _TEMP2
                    .QUERY{ BNDS in 

                      let _TEMP1 = SDAI.TYPEOF(BNDS.BOUND, IS: eEDGE_LOOP.self)
                      return _TEMP1 }
                  let _TEMP4 = _TEMP3
                    .QUERY{ ELP_FBNDS in 

                      let _TEMP1 = ELP_FBNDS.GROUP_REF(ePATH.self)
                      let _TEMP2 = _TEMP1?.EDGE_LIST
                      let _TEMP3 = _TEMP2?
                        .QUERY{ OE in 

                          let _TEMP1 = SDAI.TYPEOF(OE.EDGE_ELEMENT, IS: eEDGE_CURVE.self)
                          let _TEMP2 =  !_TEMP1
                          return _TEMP2 }
                      let _TEMP4 = SDAI.SIZEOF(_TEMP3)
                      let _TEMP5 = _TEMP4 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
                      let _TEMP6 =  !_TEMP5
                      return _TEMP6 }
                  let _TEMP5 = SDAI.SIZEOF(_TEMP4)
                  let _TEMP6 = _TEMP5 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
                  let _TEMP7 = _TEMP1 || _TEMP6
                  let _TEMP8 =  !_TEMP7
                  return _TEMP8 }
              let _TEMP3 = SDAI.SIZEOF(_TEMP2)
              let _TEMP4 = _TEMP3 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
              let _TEMP5 =  !_TEMP4
              return _TEMP5 }
          let _TEMP4 = SDAI.SIZEOF(_TEMP3)
          let _TEMP5 = _TEMP4 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
          let _TEMP6 =  !_TEMP5
          return _TEMP6 }
      let _TEMP4 = SDAI.SIZEOF(_TEMP3)
      let _TEMP5 = _TEMP4 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      return _TEMP5
    }
    public static func WHERE_wr9(SELF: eNON_MANIFOLD_SURFACE_SHAPE_REPRESENTATION?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.ITEMS
      let _TEMP2 = _TEMP1.QUERY{ IT in 

          let _TEMP1 = SDAI.TYPEOF(IT, IS: eFACE_BASED_SURFACE_MODEL.self)
          return _TEMP1 }
      let _TEMP3 = _TEMP2.QUERY{ FBSM in 

          let _TEMP1 = FBSM.GROUP_REF(eFACE_BASED_SURFACE_MODEL.self)
          let _TEMP2 = _TEMP1?.FBSM_FACES
          let _TEMP3 = _TEMP2?.QUERY{ CFS in 

              let _TEMP1 = CFS.CFS_FACES
              let _TEMP2 = _TEMP1.QUERY{ FA in 

                  let _TEMP1 = SDAI.TYPEOF(FA, IS: eADVANCED_FACE.self)
                  let _TEMP2 = FA.BOUNDS
                  let _TEMP3 = _TEMP2
                    .QUERY{ BNDS in 

                      let _TEMP1 = SDAI.TYPEOF(BNDS.BOUND, IS: eEDGE_LOOP.self)
                      return _TEMP1 }
                  let _TEMP4 = _TEMP3
                    .QUERY{ ELP_FBNDS in 

                      let _TEMP1 = ELP_FBNDS.GROUP_REF(ePATH.self)
                      let _TEMP2 = _TEMP1?.EDGE_LIST
                      let _TEMP3 = _TEMP2?
                        .QUERY{ OE in 

                          let _TEMP1 = SDAI.TYPEOF(OE.EDGE_ELEMENT, IS: eEDGE_CURVE.self)
                          return _TEMP1 }
                      let _TEMP4 = _TEMP3?
                        .QUERY{ OE_CV in 

                          let _TEMP1 = ([
                            SDAI.AIE(SDAI.STRING(
                            "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.B_SPLINE_CURVE")), 
                            SDAI.AIE(SDAI.STRING("AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CONIC")), 
                            SDAI.AIE(SDAI.STRING(
                            "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CURVE_REPLICA")), 
                            SDAI.AIE(SDAI.STRING("AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.LINE")), 
                            SDAI.AIE(SDAI.STRING(
                            "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.OFFSET_CURVE_3D")), 
                            SDAI.AIE(SDAI.STRING("AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PCURVE")), 
                            SDAI.AIE(SDAI.STRING("AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.POLYLINE")), 
                            SDAI.AIE(SDAI.STRING(
                            "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SURFACE_CURVE"))] 
                            as [SDAI.AggregationInitializerElement<SDAI.STRING>])
                          let _TEMP2 = OE_CV.EDGE_ELEMENT
                          let _TEMP3 = _TEMP2.GROUP_REF(eEDGE_CURVE.self)
                          let _TEMP4 = _TEMP3?.EDGE_GEOMETRY
                          let _TEMP5 = SDAI.TYPEOF(_TEMP4)
                          let _TEMP6 = SDAI.FORCE_OPTIONAL(_TEMP1) * SDAI.FORCE_OPTIONAL(_TEMP5)
                          let _TEMP7 = SDAI.SIZEOF(_TEMP6)
                          let _TEMP8 = _TEMP7 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
                          let _TEMP9 =  !_TEMP8
                          return _TEMP9 }
                      let _TEMP5 = SDAI.SIZEOF(_TEMP4)
                      let _TEMP6 = _TEMP5 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
                      let _TEMP7 =  !_TEMP6
                      return _TEMP7 }
                  let _TEMP5 = SDAI.SIZEOF(_TEMP4)
                  let _TEMP6 = _TEMP5 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
                  let _TEMP7 = _TEMP1 || _TEMP6
                  let _TEMP8 =  !_TEMP7
                  return _TEMP8 }
              let _TEMP3 = SDAI.SIZEOF(_TEMP2)
              let _TEMP4 = _TEMP3 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
              let _TEMP5 =  !_TEMP4
              return _TEMP5 }
          let _TEMP4 = SDAI.SIZEOF(_TEMP3)
          let _TEMP5 = _TEMP4 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
          let _TEMP6 =  !_TEMP5
          return _TEMP6 }
      let _TEMP4 = SDAI.SIZEOF(_TEMP3)
      let _TEMP5 = _TEMP4 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      return _TEMP5
    }
    public static func WHERE_wr10(SELF: eNON_MANIFOLD_SURFACE_SHAPE_REPRESENTATION?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.ITEMS
      let _TEMP2 = _TEMP1.QUERY{ IT in 

          let _TEMP1 = SDAI.TYPEOF(IT, IS: eFACE_BASED_SURFACE_MODEL.self)
          return _TEMP1 }
      let _TEMP3 = _TEMP2.QUERY{ FBSM in 

          let _TEMP1 = FBSM.GROUP_REF(eFACE_BASED_SURFACE_MODEL.self)
          let _TEMP2 = _TEMP1?.FBSM_FACES
          let _TEMP3 = _TEMP2?.QUERY{ CFS in 

              let _TEMP1 = CFS.CFS_FACES
              let _TEMP2 = _TEMP1.QUERY{ FA in 

                  let _TEMP1 = SDAI.TYPEOF(FA, IS: eADVANCED_FACE.self)
                  let _TEMP2 = FA.BOUNDS
                  let _TEMP3 = _TEMP2
                    .QUERY{ BNDS in 

                      let _TEMP1 = SDAI.TYPEOF(BNDS.BOUND, IS: eEDGE_LOOP.self)
                      return _TEMP1 }
                  let _TEMP4 = _TEMP3
                    .QUERY{ ELP_FBNDS in 

                      let _TEMP1 = ELP_FBNDS.GROUP_REF(ePATH.self)
                      let _TEMP2 = _TEMP1?.EDGE_LIST
                      let _TEMP3 = _TEMP2?
                        .QUERY{ OE in 

                          let _TEMP1 = OE.EDGE_ELEMENT
                          let _TEMP2 = _TEMP1.GROUP_REF(eEDGE_CURVE.self)
                          let _TEMP3 = _TEMP2?.EDGE_GEOMETRY
                          let _TEMP4 = NMSF_CURVE_CHECK(eREPRESENTATION_ITEM(/*eCURVE*/_TEMP3))
                          let _TEMP5 =  !_TEMP4
                          return _TEMP5 }
                      let _TEMP4 = SDAI.SIZEOF(_TEMP3)
                      let _TEMP5 = _TEMP4 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
                      let _TEMP6 =  !_TEMP5
                      return _TEMP6 }
                  let _TEMP5 = SDAI.SIZEOF(_TEMP4)
                  let _TEMP6 = _TEMP5 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
                  let _TEMP7 = _TEMP1 || _TEMP6
                  let _TEMP8 =  !_TEMP7
                  return _TEMP8 }
              let _TEMP3 = SDAI.SIZEOF(_TEMP2)
              let _TEMP4 = _TEMP3 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
              let _TEMP5 =  !_TEMP4
              return _TEMP5 }
          let _TEMP4 = SDAI.SIZEOF(_TEMP3)
          let _TEMP5 = _TEMP4 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
          let _TEMP6 =  !_TEMP5
          return _TEMP6 }
      let _TEMP4 = SDAI.SIZEOF(_TEMP3)
      let _TEMP5 = _TEMP4 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      return _TEMP5
    }
    public static func WHERE_wr11(SELF: eNON_MANIFOLD_SURFACE_SHAPE_REPRESENTATION?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.ITEMS
      let _TEMP2 = _TEMP1.QUERY{ IT in 

          let _TEMP1 = SDAI.TYPEOF(IT, IS: eFACE_BASED_SURFACE_MODEL.self)
          return _TEMP1 }
      let _TEMP3 = _TEMP2.QUERY{ FBSM in 

          let _TEMP1 = FBSM.GROUP_REF(eFACE_BASED_SURFACE_MODEL.self)
          let _TEMP2 = _TEMP1?.FBSM_FACES
          let _TEMP3 = _TEMP2?.QUERY{ CFS in 

              let _TEMP1 = CFS.CFS_FACES
              let _TEMP2 = _TEMP1.QUERY{ FA in 

                  let _TEMP1 = SDAI.TYPEOF(FA, IS: eADVANCED_FACE.self)
                  let _TEMP2 = FA.BOUNDS
                  let _TEMP3 = _TEMP2
                    .QUERY{ BNDS in 

                      let _TEMP1 = SDAI.TYPEOF(BNDS.BOUND, IS: eEDGE_LOOP.self)
                      return _TEMP1 }
                  let _TEMP4 = _TEMP3
                    .QUERY{ ELP_FBNDS in 

                      let _TEMP1 = ELP_FBNDS.GROUP_REF(ePATH.self)
                      let _TEMP2 = _TEMP1?.EDGE_LIST
                      let _TEMP3 = _TEMP2?
                        .QUERY{ OE in 

                          let _TEMP1 = SDAI.TYPEOF(OE.EDGE_ELEMENT.EDGE_START, IS: eVERTEX_POINT.self)
                          let _TEMP2 = SDAI.TYPEOF(OE.EDGE_ELEMENT.EDGE_END, IS: eVERTEX_POINT.self)
                          let _TEMP3 = _TEMP1 && _TEMP2
                          let _TEMP4 =  !_TEMP3
                          return _TEMP4 }
                      let _TEMP4 = SDAI.SIZEOF(_TEMP3)
                      let _TEMP5 = _TEMP4 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
                      let _TEMP6 =  !_TEMP5
                      return _TEMP6 }
                  let _TEMP5 = SDAI.SIZEOF(_TEMP4)
                  let _TEMP6 = _TEMP5 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
                  let _TEMP7 = _TEMP1 || _TEMP6
                  let _TEMP8 =  !_TEMP7
                  return _TEMP8 }
              let _TEMP3 = SDAI.SIZEOF(_TEMP2)
              let _TEMP4 = _TEMP3 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
              let _TEMP5 =  !_TEMP4
              return _TEMP5 }
          let _TEMP4 = SDAI.SIZEOF(_TEMP3)
          let _TEMP5 = _TEMP4 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
          let _TEMP6 =  !_TEMP5
          return _TEMP6 }
      let _TEMP4 = SDAI.SIZEOF(_TEMP3)
      let _TEMP5 = _TEMP4 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      return _TEMP5
    }
    public static func WHERE_wr12(SELF: eNON_MANIFOLD_SURFACE_SHAPE_REPRESENTATION?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.ITEMS
      let _TEMP2 = _TEMP1.QUERY{ IT in 

          let _TEMP1 = SDAI.TYPEOF(IT, IS: eFACE_BASED_SURFACE_MODEL.self)
          return _TEMP1 }
      let _TEMP3 = _TEMP2.QUERY{ FBSM in 

          let _TEMP1 = FBSM.GROUP_REF(eFACE_BASED_SURFACE_MODEL.self)
          let _TEMP2 = _TEMP1?.FBSM_FACES
          let _TEMP3 = _TEMP2?.QUERY{ CFS in 

              let _TEMP1 = CFS.CFS_FACES
              let _TEMP2 = _TEMP1.QUERY{ FA in 

                  let _TEMP1 = SDAI.TYPEOF(FA, IS: eADVANCED_FACE.self)
                  let _TEMP2 = FA.BOUNDS
                  let _TEMP3 = _TEMP2
                    .QUERY{ BNDS in 

                      let _TEMP1 = SDAI.TYPEOF(BNDS.BOUND, IS: eEDGE_LOOP.self)
                      return _TEMP1 }
                  let _TEMP4 = _TEMP3
                    .QUERY{ ELP_FBNDS in 

                      let _TEMP1 = ELP_FBNDS.GROUP_REF(ePATH.self)
                      let _TEMP2 = _TEMP1?.EDGE_LIST
                      let _TEMP3 = _TEMP2?
                        .QUERY{ OE in 

                          let _TEMP1 = ([
                            SDAI.AIE(SDAI.STRING(
                            "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CARTESIAN_POINT")), 
                            SDAI.AIE(SDAI.STRING(
                            "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.DEGENERATE_PCURVE")), 
                            SDAI.AIE(SDAI.STRING(
                            "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.POINT_ON_CURVE")), 
                            SDAI.AIE(SDAI.STRING(
                            "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.POINT_ON_SURFACE"))] 
                            as [SDAI.AggregationInitializerElement<SDAI.STRING>])
                          let _TEMP2 = OE.EDGE_ELEMENT
                          let _TEMP3 = _TEMP2.EDGE_START
                          let _TEMP4 = _TEMP3.GROUP_REF(eVERTEX_POINT.self)
                          let _TEMP5 = _TEMP4?.VERTEX_GEOMETRY
                          let _TEMP6 = SDAI.TYPEOF(_TEMP5)
                          let _TEMP7 = SDAI.FORCE_OPTIONAL(_TEMP1) * SDAI.FORCE_OPTIONAL(_TEMP6)
                          let _TEMP8 = SDAI.SIZEOF(_TEMP7)
                          let _TEMP9 = _TEMP8 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
                          let _TEMP10 = ([
                            SDAI.AIE(SDAI.STRING(
                            "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CARTESIAN_POINT")), 
                            SDAI.AIE(SDAI.STRING(
                            "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.DEGENERATE_PCURVE")), 
                            SDAI.AIE(SDAI.STRING(
                            "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.POINT_ON_CURVE")), 
                            SDAI.AIE(SDAI.STRING(
                            "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.POINT_ON_SURFACE"))] 
                            as [SDAI.AggregationInitializerElement<SDAI.STRING>])
                          let _TEMP11 = OE.EDGE_ELEMENT
                          let _TEMP12 = _TEMP11.EDGE_END
                          let _TEMP13 = _TEMP12.GROUP_REF(eVERTEX_POINT.self)
                          let _TEMP14 = _TEMP13?.VERTEX_GEOMETRY
                          let _TEMP15 = SDAI.TYPEOF(_TEMP14)
                          let _TEMP16 = SDAI.FORCE_OPTIONAL(_TEMP10) * SDAI.FORCE_OPTIONAL(_TEMP15)
                          let _TEMP17 = SDAI.SIZEOF(_TEMP16)
                          let _TEMP18 = _TEMP17 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
                          let _TEMP19 = _TEMP9 && _TEMP18
                          let _TEMP20 =  !_TEMP19
                          return _TEMP20 }
                      let _TEMP4 = SDAI.SIZEOF(_TEMP3)
                      let _TEMP5 = _TEMP4 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
                      let _TEMP6 =  !_TEMP5
                      return _TEMP6 }
                  let _TEMP5 = SDAI.SIZEOF(_TEMP4)
                  let _TEMP6 = _TEMP5 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
                  let _TEMP7 = _TEMP1 || _TEMP6
                  let _TEMP8 =  !_TEMP7
                  return _TEMP8 }
              let _TEMP3 = SDAI.SIZEOF(_TEMP2)
              let _TEMP4 = _TEMP3 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
              let _TEMP5 =  !_TEMP4
              return _TEMP5 }
          let _TEMP4 = SDAI.SIZEOF(_TEMP3)
          let _TEMP5 = _TEMP4 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
          let _TEMP6 =  !_TEMP5
          return _TEMP6 }
      let _TEMP4 = SDAI.SIZEOF(_TEMP3)
      let _TEMP5 = _TEMP4 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      return _TEMP5
    }
    public static func WHERE_wr13(SELF: eNON_MANIFOLD_SURFACE_SHAPE_REPRESENTATION?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.ITEMS
      let _TEMP2 = _TEMP1.QUERY{ IT in 

          let _TEMP1 = SDAI.TYPEOF(IT, IS: eFACE_BASED_SURFACE_MODEL.self)
          return _TEMP1 }
      let _TEMP3 = _TEMP2.QUERY{ FBSM in 

          let _TEMP1 = FBSM.GROUP_REF(eFACE_BASED_SURFACE_MODEL.self)
          let _TEMP2 = _TEMP1?.FBSM_FACES
          let _TEMP3 = _TEMP2?.QUERY{ CFS in 

              let _TEMP1 = CFS.CFS_FACES
              let _TEMP2 = _TEMP1.QUERY{ FA in 

                  let _TEMP1 = SDAI.TYPEOF(FA, IS: eADVANCED_FACE.self)
                  let _TEMP2 = FA.BOUNDS
                  let _TEMP3 = _TEMP2
                    .QUERY{ BNDS in 

                      let _TEMP1 = SDAI.TYPEOF(BNDS.BOUND, IS: eVERTEX_LOOP.self)
                      return _TEMP1 }
                  let _TEMP4 = _TEMP3
                    .QUERY{ VLP_FBNDS in 

                      let _TEMP1 = SDAI.TYPEOF(VLP_FBNDS.GROUP_REF(eVERTEX_LOOP.self)?.LOOP_VERTEX, 
                        IS: eVERTEX_POINT.self)
                      let _TEMP2 =  !_TEMP1
                      return _TEMP2 }
                  let _TEMP5 = SDAI.SIZEOF(_TEMP4)
                  let _TEMP6 = _TEMP5 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
                  let _TEMP7 = _TEMP1 || _TEMP6
                  let _TEMP8 =  !_TEMP7
                  return _TEMP8 }
              let _TEMP3 = SDAI.SIZEOF(_TEMP2)
              let _TEMP4 = _TEMP3 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
              let _TEMP5 =  !_TEMP4
              return _TEMP5 }
          let _TEMP4 = SDAI.SIZEOF(_TEMP3)
          let _TEMP5 = _TEMP4 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
          let _TEMP6 =  !_TEMP5
          return _TEMP6 }
      let _TEMP4 = SDAI.SIZEOF(_TEMP3)
      let _TEMP5 = _TEMP4 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      return _TEMP5
    }
    public static func WHERE_wr14(SELF: eNON_MANIFOLD_SURFACE_SHAPE_REPRESENTATION?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.ITEMS
      let _TEMP2 = _TEMP1.QUERY{ IT in 

          let _TEMP1 = SDAI.TYPEOF(IT, IS: eFACE_BASED_SURFACE_MODEL.self)
          return _TEMP1 }
      let _TEMP3 = _TEMP2.QUERY{ FBSM in 

          let _TEMP1 = FBSM.GROUP_REF(eFACE_BASED_SURFACE_MODEL.self)
          let _TEMP2 = _TEMP1?.FBSM_FACES
          let _TEMP3 = _TEMP2?.QUERY{ CFS in 

              let _TEMP1 = CFS.CFS_FACES
              let _TEMP2 = _TEMP1.QUERY{ FA in 

                  let _TEMP1 = SDAI.TYPEOF(FA, IS: eADVANCED_FACE.self)
                  let _TEMP2 = FA.BOUNDS
                  let _TEMP3 = _TEMP2
                    .QUERY{ BNDS in 

                      let _TEMP1 = SDAI.TYPEOF(BNDS.BOUND, IS: eVERTEX_LOOP.self)
                      return _TEMP1 }
                  let _TEMP4 = _TEMP3
                    .QUERY{ VLP_FBNDS in 

                      let _TEMP1 = ([
                        SDAI.AIE(SDAI.STRING("AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CARTESIAN_POINT")), 
                        SDAI.AIE(SDAI.STRING(
                        "AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.DEGENERATE_PCURVE")), 
                        SDAI.AIE(SDAI.STRING("AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.POINT_ON_CURVE")), 
                        SDAI.AIE(SDAI.STRING("AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.POINT_ON_SURFACE"))] 
                        as [SDAI.AggregationInitializerElement<SDAI.STRING>])
                      let _TEMP2 = VLP_FBNDS.GROUP_REF(eVERTEX_LOOP.self)
                      let _TEMP3 = _TEMP2?.LOOP_VERTEX
                      let _TEMP4 = _TEMP3?.GROUP_REF(eVERTEX_POINT.self)
                      let _TEMP5 = _TEMP4?.VERTEX_GEOMETRY
                      let _TEMP6 = SDAI.TYPEOF(_TEMP5)
                      let _TEMP7 = SDAI.FORCE_OPTIONAL(_TEMP1) * SDAI.FORCE_OPTIONAL(_TEMP6)
                      let _TEMP8 = SDAI.SIZEOF(_TEMP7)
                      let _TEMP9 = _TEMP8 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
                      let _TEMP10 =  !_TEMP9
                      return _TEMP10 }
                  let _TEMP5 = SDAI.SIZEOF(_TEMP4)
                  let _TEMP6 = _TEMP5 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
                  let _TEMP7 = _TEMP1 || _TEMP6
                  let _TEMP8 =  !_TEMP7
                  return _TEMP8 }
              let _TEMP3 = SDAI.SIZEOF(_TEMP2)
              let _TEMP4 = _TEMP3 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
              let _TEMP5 =  !_TEMP4
              return _TEMP5 }
          let _TEMP4 = SDAI.SIZEOF(_TEMP3)
          let _TEMP5 = _TEMP4 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
          let _TEMP6 =  !_TEMP5
          return _TEMP6 }
      let _TEMP4 = SDAI.SIZEOF(_TEMP3)
      let _TEMP5 = _TEMP4 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      return _TEMP5
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init() {
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 0
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      self.init( )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY non_manifold_surface_shape_representation
    SUBTYPE OF ( shape_representation );
    WHERE
      wr1 : ( SIZEOF( QUERY ( it <* SELF.items | ( NOT ( SIZEOF( [
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.FACE_BASED_SURFACE_MODEL' , 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.MAPPED_ITEM' , 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.AXIS2_PLACEMENT_3D' ] * TYPEOF( it ) ) = 1 ) ) ) ) 
                = 0 );
      wr2 : ( SIZEOF( QUERY ( it <* SELF.items | ( SIZEOF( [ 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
                + 'FACE_BASED_SURFACE_MODEL' , 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.MAPPED_ITEM'] 
                * TYPEOF( it ) ) = 1 ) ) ) > 0 );
      wr3 : ( SIZEOF( QUERY ( mi <* QUERY ( it <* SELF.items | ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.MAPPED_ITEM'  IN TYPEOF( it ) ) ) | ( NOT ( 
                ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.NON_MANIFOLD_SURFACE_SHAPE_REPRESENTATION' 
                IN TYPEOF( mi\mapped_item.mapping_source.mapped_representation ) ) AND ( SIZEOF( 
                QUERY ( mr_it <* mi\mapped_item.mapping_source.mapped_representation.items | ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.FACE_BASED_SURFACE_MODEL'  IN TYPEOF( mr_it ) ) ) ) 
                > 0 ) ) ) ) ) = 0 );
      wr4 : ( SIZEOF( QUERY ( fbsm <* QUERY ( it <* SELF.items | ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.FACE_BASED_SURFACE_MODEL'  IN TYPEOF( it ) ) )
                | ( NOT ( SIZEOF( QUERY ( cfs <* fbsm\face_based_surface_model.fbsm_faces | ( NOT ( SIZEOF( 
                QUERY ( fa <* cfs.cfs_faces | ( NOT ( SIZEOF( [
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.FACE_SURFACE' , 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ORIENTED_FACE' ] * TYPEOF( fa ) ) = 1 ) ) ) ) 
                = 0 ) ) ) ) = 0 ) ) ) ) = 0 );
      wr5 : ( SIZEOF( QUERY ( fbsm <* QUERY ( it <* SELF.items | ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.FACE_BASED_SURFACE_MODEL'  IN TYPEOF( it ) ) )
                | ( NOT ( SIZEOF( QUERY ( cfs <* fbsm\face_based_surface_model.fbsm_faces | ( NOT ( SIZEOF( 
                QUERY ( f_sf <* QUERY ( fa <* cfs.cfs_faces | ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.FACE_SURFACE'  IN TYPEOF( fa ) ) ) | ( NOT 
                ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ADVANCED_FACE' IN TYPEOF( f_sf ) ) OR 
                nmsf_surface_check( f_sf\face_surface.face_geometry ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 );
      wr6 : ( SIZEOF( QUERY ( fbsm <* QUERY ( it <* SELF.items | ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.FACE_BASED_SURFACE_MODEL'  IN TYPEOF( it ) ) )
                | ( NOT ( SIZEOF( QUERY ( cfs <* fbsm\face_based_surface_model.fbsm_faces | ( NOT ( SIZEOF( 
                QUERY ( o_fa <* QUERY ( fa <* cfs.cfs_faces | ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ORIENTED_FACE'  IN TYPEOF( fa ) ) ) | ( NOT 
                ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ADVANCED_FACE' IN TYPEOF( o_fa\
                oriented_face.face_element ) ) OR nmsf_surface_check( o_fa\oriented_face.face_element\
                face_surface.face_geometry ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 );
      wr7 : ( SIZEOF( QUERY ( fbsm <* QUERY ( it <* SELF.items | ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.FACE_BASED_SURFACE_MODEL'  IN TYPEOF( it ) ) )
                | ( NOT ( SIZEOF( QUERY ( cfs <* fbsm\face_based_surface_model.fbsm_faces | ( NOT ( SIZEOF( 
                QUERY ( fa <* cfs.cfs_faces | ( NOT ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
                + 'ADVANCED_FACE'  IN TYPEOF( fa ) ) OR ( SIZEOF( QUERY ( bnds <* fa.bounds | ( NOT ( 
                SIZEOF( [ 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.EDGE_LOOP', 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.VERTEX_LOOP' ] * TYPEOF( bnds.bound ) ) = 1 ) ) ) ) 
                = 0 ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 );
      wr8 : ( SIZEOF( QUERY ( fbsm <* QUERY ( it <* SELF.items | ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.FACE_BASED_SURFACE_MODEL'  IN TYPEOF( it ) ) )
                | ( NOT ( SIZEOF( QUERY ( cfs <* fbsm\face_based_surface_model.fbsm_faces | ( NOT ( SIZEOF( 
                QUERY ( fa <* cfs.cfs_faces | ( NOT ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
                + 'ADVANCED_FACE'  IN TYPEOF( fa ) ) OR ( SIZEOF( QUERY ( elp_fbnds <* QUERY ( bnds <* fa.
                bounds | ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.EDGE_LOOP' IN TYPEOF( bnds.bound ) ) )
                | ( NOT ( SIZEOF( QUERY ( oe <* elp_fbnds\path.edge_list | ( NOT ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.EDGE_CURVE'  IN TYPEOF( oe.edge_element ) ) ) ) ) 
                = 0 ) ) ) ) = 0 ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 );
      wr9 : ( SIZEOF( QUERY ( fbsm <* QUERY ( it <* SELF.items | ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.FACE_BASED_SURFACE_MODEL'  IN TYPEOF( it ) ) )
                | ( NOT ( SIZEOF( QUERY ( cfs <* fbsm\face_based_surface_model.fbsm_faces | ( NOT ( SIZEOF( 
                QUERY ( fa <* cfs.cfs_faces | ( NOT ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
                + 'ADVANCED_FACE'  IN TYPEOF( fa ) ) OR ( SIZEOF( QUERY ( elp_fbnds <* QUERY ( bnds <* fa.
                bounds | ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.EDGE_LOOP' IN TYPEOF( bnds.bound ) ) )
                | ( NOT ( SIZEOF( QUERY ( oe_cv <* QUERY ( oe <* elp_fbnds\path.edge_list | ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.EDGE_CURVE'  IN TYPEOF( oe.edge_element ) ) )
                | ( NOT ( SIZEOF( [ 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.B_SPLINE_CURVE', 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CONIC' , 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CURVE_REPLICA' , 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.LINE' , 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.OFFSET_CURVE_3D' , 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PCURVE' , 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.POLYLINE' , 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SURFACE_CURVE' ] * TYPEOF( oe_cv.
                edge_element\edge_curve.edge_geometry ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) ) = 0 ) ) ) ) =
                0 ) ) ) ) = 0 );
      wr10: ( SIZEOF( QUERY ( fbsm <* QUERY ( it <* SELF.items | ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.FACE_BASED_SURFACE_MODEL'  IN TYPEOF( it ) ) )
                | ( NOT ( SIZEOF( QUERY ( cfs <* fbsm\face_based_surface_model.fbsm_faces | ( NOT ( SIZEOF( 
                QUERY ( fa <* cfs.cfs_faces | ( NOT ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
                + 'ADVANCED_FACE'  IN TYPEOF( fa ) ) OR ( SIZEOF( QUERY ( elp_fbnds <* QUERY ( bnds <* fa.
                bounds | ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.EDGE_LOOP' IN TYPEOF( bnds.bound ) ) )
                | ( NOT ( SIZEOF( QUERY ( oe <* elp_fbnds\path.edge_list | ( NOT nmsf_curve_check( oe.
                edge_element\edge_curve.edge_geometry ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) 
                = 0 );
      wr11: ( SIZEOF( QUERY ( fbsm <* QUERY ( it <* SELF.items | ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.FACE_BASED_SURFACE_MODEL'  IN TYPEOF( it ) ) )
                | ( NOT ( SIZEOF( QUERY ( cfs <* fbsm\face_based_surface_model.fbsm_faces | ( NOT ( SIZEOF( 
                QUERY ( fa <* cfs.cfs_faces | ( NOT ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
                + 'ADVANCED_FACE'  IN TYPEOF( fa ) ) OR ( SIZEOF( QUERY ( elp_fbnds <* QUERY ( bnds <* fa.
                bounds | ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.EDGE_LOOP' IN TYPEOF( bnds.bound ) ) )
                | ( NOT ( SIZEOF( QUERY ( oe <* elp_fbnds\path.edge_list | ( NOT ( ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.VERTEX_POINT'  IN TYPEOF( oe.edge_element.
                edge_start ) ) AND ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.VERTEX_POINT' IN 
                TYPEOF( oe.edge_element.edge_end ) ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) 
                = 0 );
      wr12: ( SIZEOF( QUERY ( fbsm <* QUERY ( it <* SELF.items | ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.FACE_BASED_SURFACE_MODEL'  IN TYPEOF( it ) ) )
                | ( NOT ( SIZEOF( QUERY ( cfs <* fbsm\face_based_surface_model.fbsm_faces | ( NOT ( SIZEOF( 
                QUERY ( fa <* cfs.cfs_faces | ( NOT ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
                + 'ADVANCED_FACE'  IN TYPEOF( fa ) ) OR ( SIZEOF( QUERY ( elp_fbnds <* QUERY ( bnds <* fa.
                bounds | ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.EDGE_LOOP' IN TYPEOF( bnds.bound ) ) )
                | ( NOT ( SIZEOF( QUERY ( oe <* elp_fbnds\path.edge_list | ( NOT ( ( SIZEOF( [
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CARTESIAN_POINT' , 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.DEGENERATE_PCURVE' , 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.POINT_ON_CURVE' , 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.POINT_ON_SURFACE' ] * TYPEOF( oe.
                edge_element.edge_start\vertex_point.vertex_geometry ) ) = 1 ) AND ( SIZEOF( [
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CARTESIAN_POINT' , 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.DEGENERATE_PCURVE' , 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.POINT_ON_CURVE' , 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.POINT_ON_SURFACE' ] * TYPEOF( oe.
                edge_element.edge_end\vertex_point.vertex_geometry ) ) = 1 ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) ) 
                = 0 ) ) ) ) = 0 ) ) ) ) = 0 );
      wr13: ( SIZEOF( QUERY ( fbsm <* QUERY ( it <* SELF.items | ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.FACE_BASED_SURFACE_MODEL'  IN TYPEOF( it ) ) )
                | ( NOT ( SIZEOF( QUERY ( cfs <* fbsm\face_based_surface_model.fbsm_faces | ( NOT ( SIZEOF( 
                QUERY ( fa <* cfs.cfs_faces | ( NOT ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
                + 'ADVANCED_FACE'  IN TYPEOF( fa ) ) OR ( SIZEOF( QUERY ( vlp_fbnds <* QUERY ( bnds <* fa.
                bounds | ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.VERTEX_LOOP' IN TYPEOF( bnds.
                bound ) ) ) | ( NOT ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.VERTEX_POINT' IN 
                TYPEOF( vlp_fbnds\vertex_loop.loop_vertex ) ) ) ) ) = 0 ) ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) = 0 );
      wr14: ( SIZEOF( QUERY ( fbsm <* QUERY ( it <* SELF.items | ( 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.FACE_BASED_SURFACE_MODEL'  IN TYPEOF( it ) ) )
                | ( NOT ( SIZEOF( QUERY ( cfs <* fbsm\face_based_surface_model.fbsm_faces | ( NOT ( SIZEOF( 
                QUERY ( fa <* cfs.cfs_faces | ( NOT ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
                + 'ADVANCED_FACE'  IN TYPEOF( fa ) ) OR ( SIZEOF( QUERY ( vlp_fbnds <* QUERY ( bnds <* fa.
                bounds | ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.VERTEX_LOOP' IN TYPEOF( bnds.
                bound ) ) ) | ( NOT ( SIZEOF( [ 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
                + 'CARTESIAN_POINT' , 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.DEGENERATE_PCURVE', 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.POINT_ON_CURVE' , 
                'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.POINT_ON_SURFACE' ] * TYPEOF( vlp_fbnds\
                vertex_loop.loop_vertex\vertex_point.vertex_geometry ) ) = 1 ) ) ) ) = 0 ) ) ) ) ) = 0 ) ) ) ) 
                = 0 ) ) ) ) = 0 );
  END_ENTITY; -- non_manifold_surface_shape_representation (line:22164 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eNON_MANIFOLD_SURFACE_SHAPE_REPRESENTATION : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _non_manifold_surface_shape_representation.self
    }
    public let partialEntity: _non_manifold_surface_shape_representation

    //MARK: SUPERTYPES
    public let super_eREPRESENTATION: eREPRESENTATION 	// [1]
    public let super_eSHAPE_REPRESENTATION: eSHAPE_REPRESENTATION 	// [2]
    public var super_eNON_MANIFOLD_SURFACE_SHAPE_REPRESENTATION: eNON_MANIFOLD_SURFACE_SHAPE_REPRESENTATION { return self } 	// [3]

    //MARK: SUBTYPES

    //MARK: ATTRIBUTES
    /// __DERIVE__ attribute
    /// - origin: SUPER( ``eREPRESENTATION`` )
    public var DESCRIPTION: tTEXT?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"DESCRIPTION") {
          return cached.value as! tTEXT? 
        }
        let origin = super_eREPRESENTATION
        let value = tTEXT(origin.partialEntity._description__getter(SELF: origin))
        updateCache(derivedAttributeName:"DESCRIPTION", value:value)
        return value
      }
    }

    /// __EXPLICIT(OBSERVED)__ attribute
    /// - origin: SUPER( ``eREPRESENTATION`` )
    public var ITEMS: SDAI.SET<eREPRESENTATION_ITEM>/*[1:nil]*/  {
      get {
        return SDAI.UNWRAP( super_eREPRESENTATION.partialEntity._items )
      }
      set(newValue) {
        let partial = super_eREPRESENTATION.partialEntity
        partial._items = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUPER( ``eREPRESENTATION`` )
    public var ID: tIDENTIFIER?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"ID") {
          return cached.value as! tIDENTIFIER? 
        }
        let origin = super_eREPRESENTATION
        let value = tIDENTIFIER(origin.partialEntity._id__getter(SELF: origin))
        updateCache(derivedAttributeName:"ID", value:value)
        return value
      }
    }

    /// __EXPLICIT(DYNAMIC)(OBSERVED)__ attribute
    /// - origin: SUPER( ``eREPRESENTATION`` )
    public var CONTEXT_OF_ITEMS: eREPRESENTATION_CONTEXT {
      get {
        if let resolved = _representation._context_of_items__provider(complex: self.complexEntity) {
          let value = resolved._context_of_items__getter(complex: self.complexEntity)
          return value
        }
        else {
          return SDAI.UNWRAP( super_eREPRESENTATION.partialEntity._context_of_items )
        }
      }
      set(newValue) {
        if let _ = _representation._context_of_items__provider(complex: self.complexEntity) { return }

        let partial = super_eREPRESENTATION.partialEntity
        partial._context_of_items = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eREPRESENTATION`` )
    public var NAME: tLABEL {
      get {
        return SDAI.UNWRAP( super_eREPRESENTATION.partialEntity._name )
      }
      set(newValue) {
        let partial = super_eREPRESENTATION.partialEntity
        partial._name = SDAI.UNWRAP(newValue)
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_non_manifold_surface_shape_representation.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eREPRESENTATION.self) else { return nil }
      self.super_eREPRESENTATION = super1

      guard let super2 = complexEntity?.entityReference(eSHAPE_REPRESENTATION.self) else { return nil }
      self.super_eSHAPE_REPRESENTATION = super2

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _non_manifold_surface_shape_representation.WHERE_wr1(SELF: instance)
      result[prefix2 + " .WHERE_wr2"] = _non_manifold_surface_shape_representation.WHERE_wr2(SELF: instance)
      result[prefix2 + " .WHERE_wr3"] = _non_manifold_surface_shape_representation.WHERE_wr3(SELF: instance)
      result[prefix2 + " .WHERE_wr4"] = _non_manifold_surface_shape_representation.WHERE_wr4(SELF: instance)
      result[prefix2 + " .WHERE_wr5"] = _non_manifold_surface_shape_representation.WHERE_wr5(SELF: instance)
      result[prefix2 + " .WHERE_wr6"] = _non_manifold_surface_shape_representation.WHERE_wr6(SELF: instance)
      result[prefix2 + " .WHERE_wr7"] = _non_manifold_surface_shape_representation.WHERE_wr7(SELF: instance)
      result[prefix2 + " .WHERE_wr8"] = _non_manifold_surface_shape_representation.WHERE_wr8(SELF: instance)
      result[prefix2 + " .WHERE_wr9"] = _non_manifold_surface_shape_representation.WHERE_wr9(SELF: instance)
      result[prefix2 + " .WHERE_wr10"] = _non_manifold_surface_shape_representation.WHERE_wr10(SELF: instance)
      result[prefix2 + " .WHERE_wr11"] = _non_manifold_surface_shape_representation.WHERE_wr11(SELF: instance)
      result[prefix2 + " .WHERE_wr12"] = _non_manifold_surface_shape_representation.WHERE_wr12(SELF: instance)
      result[prefix2 + " .WHERE_wr13"] = _non_manifold_surface_shape_representation.WHERE_wr13(SELF: instance)
      result[prefix2 + " .WHERE_wr14"] = _non_manifold_surface_shape_representation.WHERE_wr14(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "NON_MANIFOLD_SURFACE_SHAPE_REPRESENTATION", type: self, explicitAttributeCount: 0)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eREPRESENTATION.self)
      entityDef.add(supertype: eSHAPE_REPRESENTATION.self)
      entityDef.add(supertype: eNON_MANIFOLD_SURFACE_SHAPE_REPRESENTATION.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "DESCRIPTION", keyPath: \eNON_MANIFOLD_SURFACE_SHAPE_REPRESENTATION.DESCRIPTION, 
        kind: .derived, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "ITEMS", keyPath: \eNON_MANIFOLD_SURFACE_SHAPE_REPRESENTATION.ITEMS, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "ID", keyPath: \eNON_MANIFOLD_SURFACE_SHAPE_REPRESENTATION.ID, 
        kind: .derived, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "CONTEXT_OF_ITEMS", keyPath: \eNON_MANIFOLD_SURFACE_SHAPE_REPRESENTATION.CONTEXT_OF_ITEMS, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "NAME", keyPath: \eNON_MANIFOLD_SURFACE_SHAPE_REPRESENTATION.NAME, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)

      return entityDef
    }

  }
}
