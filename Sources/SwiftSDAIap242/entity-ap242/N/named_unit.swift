/* file: named_unit.swift 	 generated: Sun Oct 31 15:32:10 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY named_unit
    SUPERTYPE OF ( 
        ONEOF ( 
            si_unit, 
            conversion_based_unit, 
            context_dependent_unit ) 
        ANDOR
        ONEOF ( 
            length_unit, 
            mass_unit, 
            time_unit, 
            electric_current_unit, 
            thermodynamic_temperature_unit, 
            amount_of_substance_unit, 
            luminous_flux_unit, 
            luminous_intensity_unit, 
            plane_angle_unit, 
            solid_angle_unit, 
            ratio_unit ) );
      dimensions  : dimensional_exponents;
  END_ENTITY; -- named_unit (line:21907 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  ENTITY(SELF)	named_unit
    ATTR:  dimensions,	TYPE: dimensional_exponents -- EXPLICIT (DYNAMIC)
      -- possibly overriden by
          ENTITY: si_unit,	TYPE: dimensional_exponents	(as DERIVED)


  SUB- ENTITY(2)	mass_unit
    (no local attributes)

  SUB- ENTITY(3)	amount_of_substance_unit
    (no local attributes)

  SUB- ENTITY(4)	electric_current_unit
    (no local attributes)

  SUB- ENTITY(5)	solid_angle_unit
    (no local attributes)

  SUB- ENTITY(6)	externally_defined_currency
    (no local attributes)

  SUB- ENTITY(7)	iso4217_currency
    (no local attributes)

  SUB- ENTITY(8)	currency
    (no local attributes)

  SUB- ENTITY(9)	expression_conversion_based_unit
    ATTR:  associated_variable_environment,	TYPE: environment -- INVERSE
      FOR semantics;


  SUB- ENTITY(10)	externally_defined_context_dependent_unit
    (no local attributes)

  SUB- ENTITY(11)	context_dependent_unit
    ATTR:  name,	TYPE: label -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(12)	ratio_unit
    (no local attributes)

  SUB- ENTITY(13)	plane_angle_unit
    (no local attributes)

  SUB- ENTITY(14)	luminous_intensity_unit
    (no local attributes)

  SUB- ENTITY(15)	luminous_flux_unit
    (no local attributes)

  SUB- ENTITY(16)	thermodynamic_temperature_unit
    (no local attributes)

  SUB- ENTITY(17)	length_unit
    (no local attributes)

  SUB- ENTITY(18)	time_unit
    (no local attributes)

  SUB- ENTITY(19)	externally_defined_conversion_based_unit
    (no local attributes)

  SUB- ENTITY(20)	conversion_based_unit
    ATTR:  name,	TYPE: label -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  conversion_factor,	TYPE: measure_with_unit -- EXPLICIT


  SUB- ENTITY(21)	si_resistance_unit
    (no local attributes)

  SUB- ENTITY(22)	si_energy_unit
    (no local attributes)

  SUB- ENTITY(23)	si_illuminance_unit
    (no local attributes)

  SUB- ENTITY(24)	si_absorbed_dose_unit
    (no local attributes)

  SUB- ENTITY(25)	si_frequency_unit
    (no local attributes)

  SUB- ENTITY(26)	si_radioactivity_unit
    (no local attributes)

  SUB- ENTITY(27)	si_inductance_unit
    (no local attributes)

  SUB- ENTITY(28)	si_magnetic_flux_density_unit
    (no local attributes)

  SUB- ENTITY(29)	si_power_unit
    (no local attributes)

  SUB- ENTITY(30)	si_pressure_unit
    (no local attributes)

  SUB- ENTITY(31)	si_magnetic_flux_unit
    (no local attributes)

  SUB- ENTITY(32)	si_electric_potential_unit
    (no local attributes)

  SUB- ENTITY(33)	si_dose_equivalent_unit
    (no local attributes)

  SUB- ENTITY(34)	si_electric_charge_unit
    (no local attributes)

  SUB- ENTITY(35)	si_conductance_unit
    (no local attributes)

  SUB- ENTITY(36)	si_force_unit
    (no local attributes)

  SUB- ENTITY(37)	si_capacitance_unit
    (no local attributes)

  SUB- ENTITY(38)	si_unit
    ATTR:  prefix,	TYPE: OPTIONAL si_prefix -- EXPLICIT

    ATTR:  name,	TYPE: si_unit_name -- EXPLICIT	(AMBIGUOUS/MASKED)

    REDCR: dimensions,	TYPE: dimensional_exponents -- DERIVED (DYNAMIC)
      := dimensions_for_si_unit( name )
      -- OVERRIDING ENTITY: named_unit


*/


//MARK: - Partial Entity
  public final class _named_unit : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eNAMED_UNIT.self
    }

    //ATTRIBUTES
    /// EXPLICIT ATTRIBUTE 
    /// - see the corresponding attribute accesser in the entity reference definition for the attribute value dynamic lookup logic
    public internal(set) var _dimensions: eDIMENSIONAL_EXPONENTS?  // PLAIN EXPLICIT ATTRIBUTE

    internal static func _dimensions__provider(complex: SDAI.ComplexEntity) -> eNAMED_UNIT__DIMENSIONS__provider? {
      let resolved = complex.resolvePartialEntityInstance(from: [_si_unit.typeIdentity])
      return resolved as? eNAMED_UNIT__DIMENSIONS__provider
    }

    //PARTIAL COMPLEX ENTITY SUPPORT
    final public override class func fixupPartialComplexEntityAttributes(partialComplex: SDAI.ComplexEntity, baseComplex: SDAI.ComplexEntity) {
      guard let pe = partialComplex.partialEntityInstance(_named_unit.self) else { return }

      if pe._dimensions == nil, self._dimensions__provider(complex: partialComplex) == nil, 
        let base__dimensions__provider = self._dimensions__provider(complex: baseComplex) {
        pe._dimensions = base__dimensions__provider._dimensions__getter(complex: baseComplex)
      }
    }
    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      //SELECT data types (indirectly) referencing the current type as a member of the select list
      members.insert(SDAI.STRING(sCLASSIFICATION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sACTION_ITEMS.typeName)) // -> sCLASSIFICATION_ITEM
      members.insert(SDAI.STRING(sCHANGE_MANAGEMENT_OBJECT.typeName)) // -> sACTION_ITEMS
      members.insert(SDAI.STRING(sIR_USAGE_ITEM.typeName)) // -> sCLASSIFICATION_ITEM
      members.insert(SDAI.STRING(sEXTERNAL_IDENTIFICATION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sATTRIBUTE_CLASSIFICATION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sSAME_AS_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sUNIT.typeName)) // -> Self
      members.insert(SDAI.STRING(sGROUPABLE_ITEM.typeName)) // -> Self
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._dimensions?.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._dimensions?.value.isValueEqualOptionally(to: rhs._dimensions?.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._dimensions?.value.isValueEqualOptionally(to: rhs._dimensions?.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(DIMENSIONS: eDIMENSIONAL_EXPONENTS? ) {
      self._dimensions = DIMENSIONS
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 1
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverOmittableParameter(as: eDIMENSIONAL_EXPONENTS.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( DIMENSIONS: p0 )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY named_unit
    SUPERTYPE OF ( 
        ONEOF ( 
            si_unit, 
            conversion_based_unit, 
            context_dependent_unit ) 
        ANDOR
        ONEOF ( 
            length_unit, 
            mass_unit, 
            time_unit, 
            electric_current_unit, 
            thermodynamic_temperature_unit, 
            amount_of_substance_unit, 
            luminous_flux_unit, 
            luminous_intensity_unit, 
            plane_angle_unit, 
            solid_angle_unit, 
            ratio_unit ) );
      dimensions  : dimensional_exponents;
  END_ENTITY; -- named_unit (line:21907 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eNAMED_UNIT : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _named_unit.self
    }
    public let partialEntity: _named_unit

    //MARK: SUPERTYPES
    public var super_eNAMED_UNIT: eNAMED_UNIT { return self } 	// [1]

    //MARK: SUBTYPES
    public var sub_eMASS_UNIT: eMASS_UNIT? {	// [2]
      return self.complexEntity.entityReference(eMASS_UNIT.self)
    }

    public var sub_eAMOUNT_OF_SUBSTANCE_UNIT: eAMOUNT_OF_SUBSTANCE_UNIT? {	// [3]
      return self.complexEntity.entityReference(eAMOUNT_OF_SUBSTANCE_UNIT.self)
    }

    public var sub_eELECTRIC_CURRENT_UNIT: eELECTRIC_CURRENT_UNIT? {	// [4]
      return self.complexEntity.entityReference(eELECTRIC_CURRENT_UNIT.self)
    }

    public var sub_eSOLID_ANGLE_UNIT: eSOLID_ANGLE_UNIT? {	// [5]
      return self.complexEntity.entityReference(eSOLID_ANGLE_UNIT.self)
    }

    public var sub_eEXTERNALLY_DEFINED_CURRENCY: eEXTERNALLY_DEFINED_CURRENCY? {	// [6]
      return self.complexEntity.entityReference(eEXTERNALLY_DEFINED_CURRENCY.self)
    }

    public var sub_eISO4217_CURRENCY: eISO4217_CURRENCY? {	// [7]
      return self.complexEntity.entityReference(eISO4217_CURRENCY.self)
    }

    public var sub_eCURRENCY: eCURRENCY? {	// [8]
      return self.complexEntity.entityReference(eCURRENCY.self)
    }

    public var sub_eEXPRESSION_CONVERSION_BASED_UNIT: eEXPRESSION_CONVERSION_BASED_UNIT? {	// [9]
      return self.complexEntity.entityReference(eEXPRESSION_CONVERSION_BASED_UNIT.self)
    }

    public var sub_eEXTERNALLY_DEFINED_CONTEXT_DEPENDENT_UNIT: eEXTERNALLY_DEFINED_CONTEXT_DEPENDENT_UNIT? {	// [10]
      return self.complexEntity.entityReference(eEXTERNALLY_DEFINED_CONTEXT_DEPENDENT_UNIT.self)
    }

    public var sub_eCONTEXT_DEPENDENT_UNIT: eCONTEXT_DEPENDENT_UNIT? {	// [11]
      return self.complexEntity.entityReference(eCONTEXT_DEPENDENT_UNIT.self)
    }

    public var sub_eRATIO_UNIT: eRATIO_UNIT? {	// [12]
      return self.complexEntity.entityReference(eRATIO_UNIT.self)
    }

    public var sub_ePLANE_ANGLE_UNIT: ePLANE_ANGLE_UNIT? {	// [13]
      return self.complexEntity.entityReference(ePLANE_ANGLE_UNIT.self)
    }

    public var sub_eLUMINOUS_INTENSITY_UNIT: eLUMINOUS_INTENSITY_UNIT? {	// [14]
      return self.complexEntity.entityReference(eLUMINOUS_INTENSITY_UNIT.self)
    }

    public var sub_eLUMINOUS_FLUX_UNIT: eLUMINOUS_FLUX_UNIT? {	// [15]
      return self.complexEntity.entityReference(eLUMINOUS_FLUX_UNIT.self)
    }

    public var sub_eTHERMODYNAMIC_TEMPERATURE_UNIT: eTHERMODYNAMIC_TEMPERATURE_UNIT? {	// [16]
      return self.complexEntity.entityReference(eTHERMODYNAMIC_TEMPERATURE_UNIT.self)
    }

    public var sub_eLENGTH_UNIT: eLENGTH_UNIT? {	// [17]
      return self.complexEntity.entityReference(eLENGTH_UNIT.self)
    }

    public var sub_eTIME_UNIT: eTIME_UNIT? {	// [18]
      return self.complexEntity.entityReference(eTIME_UNIT.self)
    }

    public var sub_eEXTERNALLY_DEFINED_CONVERSION_BASED_UNIT: eEXTERNALLY_DEFINED_CONVERSION_BASED_UNIT? {	// [19]
      return self.complexEntity.entityReference(eEXTERNALLY_DEFINED_CONVERSION_BASED_UNIT.self)
    }

    public var sub_eCONVERSION_BASED_UNIT: eCONVERSION_BASED_UNIT? {	// [20]
      return self.complexEntity.entityReference(eCONVERSION_BASED_UNIT.self)
    }

    public var sub_eSI_RESISTANCE_UNIT: eSI_RESISTANCE_UNIT? {	// [21]
      return self.complexEntity.entityReference(eSI_RESISTANCE_UNIT.self)
    }

    public var sub_eSI_ENERGY_UNIT: eSI_ENERGY_UNIT? {	// [22]
      return self.complexEntity.entityReference(eSI_ENERGY_UNIT.self)
    }

    public var sub_eSI_ILLUMINANCE_UNIT: eSI_ILLUMINANCE_UNIT? {	// [23]
      return self.complexEntity.entityReference(eSI_ILLUMINANCE_UNIT.self)
    }

    public var sub_eSI_ABSORBED_DOSE_UNIT: eSI_ABSORBED_DOSE_UNIT? {	// [24]
      return self.complexEntity.entityReference(eSI_ABSORBED_DOSE_UNIT.self)
    }

    public var sub_eSI_FREQUENCY_UNIT: eSI_FREQUENCY_UNIT? {	// [25]
      return self.complexEntity.entityReference(eSI_FREQUENCY_UNIT.self)
    }

    public var sub_eSI_RADIOACTIVITY_UNIT: eSI_RADIOACTIVITY_UNIT? {	// [26]
      return self.complexEntity.entityReference(eSI_RADIOACTIVITY_UNIT.self)
    }

    public var sub_eSI_INDUCTANCE_UNIT: eSI_INDUCTANCE_UNIT? {	// [27]
      return self.complexEntity.entityReference(eSI_INDUCTANCE_UNIT.self)
    }

    public var sub_eSI_MAGNETIC_FLUX_DENSITY_UNIT: eSI_MAGNETIC_FLUX_DENSITY_UNIT? {	// [28]
      return self.complexEntity.entityReference(eSI_MAGNETIC_FLUX_DENSITY_UNIT.self)
    }

    public var sub_eSI_POWER_UNIT: eSI_POWER_UNIT? {	// [29]
      return self.complexEntity.entityReference(eSI_POWER_UNIT.self)
    }

    public var sub_eSI_PRESSURE_UNIT: eSI_PRESSURE_UNIT? {	// [30]
      return self.complexEntity.entityReference(eSI_PRESSURE_UNIT.self)
    }

    public var sub_eSI_MAGNETIC_FLUX_UNIT: eSI_MAGNETIC_FLUX_UNIT? {	// [31]
      return self.complexEntity.entityReference(eSI_MAGNETIC_FLUX_UNIT.self)
    }

    public var sub_eSI_ELECTRIC_POTENTIAL_UNIT: eSI_ELECTRIC_POTENTIAL_UNIT? {	// [32]
      return self.complexEntity.entityReference(eSI_ELECTRIC_POTENTIAL_UNIT.self)
    }

    public var sub_eSI_DOSE_EQUIVALENT_UNIT: eSI_DOSE_EQUIVALENT_UNIT? {	// [33]
      return self.complexEntity.entityReference(eSI_DOSE_EQUIVALENT_UNIT.self)
    }

    public var sub_eSI_ELECTRIC_CHARGE_UNIT: eSI_ELECTRIC_CHARGE_UNIT? {	// [34]
      return self.complexEntity.entityReference(eSI_ELECTRIC_CHARGE_UNIT.self)
    }

    public var sub_eSI_CONDUCTANCE_UNIT: eSI_CONDUCTANCE_UNIT? {	// [35]
      return self.complexEntity.entityReference(eSI_CONDUCTANCE_UNIT.self)
    }

    public var sub_eSI_FORCE_UNIT: eSI_FORCE_UNIT? {	// [36]
      return self.complexEntity.entityReference(eSI_FORCE_UNIT.self)
    }

    public var sub_eSI_CAPACITANCE_UNIT: eSI_CAPACITANCE_UNIT? {	// [37]
      return self.complexEntity.entityReference(eSI_CAPACITANCE_UNIT.self)
    }

    public var sub_eSI_UNIT: eSI_UNIT? {	// [38]
      return self.complexEntity.entityReference(eSI_UNIT.self)
    }


    //MARK: ATTRIBUTES
    // NAME: (3 AMBIGUOUS REFs)

    /// __EXPLICIT(DYNAMIC)__ attribute
    /// - origin: SELF( ``eNAMED_UNIT`` )
    public var DIMENSIONS: eDIMENSIONAL_EXPONENTS {
      get {
        if let resolved = _named_unit._dimensions__provider(complex: self.complexEntity) {
          let value = resolved._dimensions__getter(complex: self.complexEntity)
          return value
        }
        else {
          return SDAI.UNWRAP( self.partialEntity._dimensions )
        }
      }
      set(newValue) {
        if let _ = _named_unit._dimensions__provider(complex: self.complexEntity) { return }

        let partial = self.partialEntity
        partial._dimensions = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCONVERSION_BASED_UNIT`` )
    public var CONVERSION_FACTOR: eMEASURE_WITH_UNIT?  {
      get {
        return sub_eCONVERSION_BASED_UNIT?.partialEntity._conversion_factor
      }
      set(newValue) {
        guard let partial = sub_eCONVERSION_BASED_UNIT?.super_eCONVERSION_BASED_UNIT.partialEntity
          else { return }
        partial._conversion_factor = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSI_UNIT`` )
    public var PREFIX: nSI_PREFIX?  {
      get {
        return sub_eSI_UNIT?.partialEntity._prefix
      }
      set(newValue) {
        guard let partial = sub_eSI_UNIT?.super_eSI_UNIT.partialEntity else { return }
        partial._prefix = newValue
      }
    }

    /// __INVERSE__ attribute
    /// observing eENVIRONMENT .SEMANTICS
    /// - origin: SUB( ``eEXPRESSION_CONVERSION_BASED_UNIT`` )
    public var ASSOCIATED_VARIABLE_ENVIRONMENT: eENVIRONMENT?  {
      get {
        return sub_eEXPRESSION_CONVERSION_BASED_UNIT?.partialEntity._associated_variable_environment
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_named_unit.self) else { return nil }
      self.partialEntity = partial

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }

    //SIMPLE ENTITY REFERENCE
    public convenience init?(_ partial:_named_unit) {
      let complex = SDAI.ComplexEntity(entities:[partial])
      self.init(complex: complex)
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "NAMED_UNIT", type: self, explicitAttributeCount: 1)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eNAMED_UNIT.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "DIMENSIONS", keyPath: \eNAMED_UNIT.DIMENSIONS, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "CONVERSION_FACTOR", keyPath: \eNAMED_UNIT.CONVERSION_FACTOR, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "PREFIX", keyPath: \eNAMED_UNIT.PREFIX, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "ASSOCIATED_VARIABLE_ENVIRONMENT", keyPath: \eNAMED_UNIT.ASSOCIATED_VARIABLE_ENVIRONMENT, 
        kind: .inverse, source: .subEntity, mayYieldEntityReference: true)

      return entityDef
    }

  }
}

//MARK: - Entity Dynamic Attribute Protocols
internal protocol eNAMED_UNIT__DIMENSIONS__provider {
  func _dimensions__getter(complex: SDAI.ComplexEntity) -> 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eDIMENSIONAL_EXPONENTS
}
