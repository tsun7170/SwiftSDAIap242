/* file: numeric_expression.swift 	 generated: Mon Jan  3 16:32:52 2022 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.1, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY numeric_expression
    ABSTRACT SUPERTYPE OF ( 
        ONEOF ( 
            simple_numeric_expression, 
            unary_numeric_expression, 
            binary_numeric_expression, 
            multiple_arity_numeric_expression, 
            length_function, 
            value_function, 
            numeric_defined_function ) )
    SUBTYPE OF ( expression );
    DERIVE
      is_int        : BOOLEAN := is_int_expr( SELF );
      sql_mappable  : BOOLEAN := is_sql_mappable( SELF );
  END_ENTITY; -- numeric_expression (line:22494 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	generic_expression
    (no local attributes)

  SUPER- ENTITY(2)	expression
    (no local attributes)

  ENTITY(SELF)	numeric_expression
    ATTR:  is_int,	TYPE: BOOLEAN -- DERIVED
      := is_int_expr( SELF )

    ATTR:  sql_mappable,	TYPE: BOOLEAN -- DERIVED
      := is_sql_mappable( SELF )


  SUB- ENTITY(4)	minus_expression
    (no local attributes)

  SUB- ENTITY(5)	div_expression
    (no local attributes)

  SUB- ENTITY(6)	mod_expression
    (no local attributes)

  SUB- ENTITY(7)	rational_representation_item
    (no local attributes)

  SUB- ENTITY(8)	slash_expression
    (no local attributes)

  SUB- ENTITY(9)	power_expression
    (no local attributes)

  SUB- ENTITY(10)	atan_function
    (no local attributes)

  SUB- ENTITY(11)	binary_function_call
    (no local attributes)

  SUB- ENTITY(12)	binary_numeric_expression
    REDCR: operands,	TYPE: LIST [2 : 2] OF numeric_expression -- EXPLICIT	(AMBIGUOUS/MASKED)
      -- OVERRIDING ENTITY: binary_generic_expression


  SUB- ENTITY(13)	int_value_function
    (no local attributes)

  SUB- ENTITY(14)	value_function
    REDCR: operand,	TYPE: string_expression -- EXPLICIT
      -- OVERRIDING ENTITY: unary_generic_expression


  SUB- ENTITY(15)	integer_defined_function
    (no local attributes)

  SUB- ENTITY(16)	real_defined_function
    (no local attributes)

  SUB- ENTITY(17)	numeric_defined_function
    (no local attributes)

  SUB- ENTITY(18)	mult_expression
    (no local attributes)

  SUB- ENTITY(19)	plus_expression
    (no local attributes)

  SUB- ENTITY(20)	minimum_function
    (no local attributes)

  SUB- ENTITY(21)	maximum_function
    (no local attributes)

  SUB- ENTITY(22)	multiple_arity_function_call
    (no local attributes)

  SUB- ENTITY(23)	multiple_arity_numeric_expression
    REDCR: operands,	TYPE: LIST [2 : ?] OF numeric_expression -- EXPLICIT	(AMBIGUOUS/MASKED)
      -- OVERRIDING ENTITY: multiple_arity_generic_expression


  SUB- ENTITY(24)	length_function
    REDCR: operand,	TYPE: string_expression -- EXPLICIT
      -- OVERRIDING ENTITY: unary_generic_expression


  SUB- ENTITY(25)	integer_representation_item
    (no local attributes)

  SUB- ENTITY(26)	int_literal
    REDCR: the_value,	TYPE: INTEGER -- EXPLICIT
      -- OVERRIDING ENTITY: literal_number


  SUB- ENTITY(27)	real_representation_item
    (no local attributes)

  SUB- ENTITY(28)	real_literal
    REDCR: the_value,	TYPE: REAL -- EXPLICIT
      -- OVERRIDING ENTITY: literal_number


  SUB- ENTITY(29)	literal_number
    ATTR:  the_value,	TYPE: NUMBER -- EXPLICIT
      -- possibly overriden by
          ENTITY: real_literal,	TYPE: REAL
          ENTITY: int_literal,	TYPE: INTEGER


  SUB- ENTITY(30)	maths_real_variable
    (no local attributes)

  SUB- ENTITY(31)	real_numeric_variable
    (no local attributes)

  SUB- ENTITY(32)	maths_integer_variable
    (no local attributes)

  SUB- ENTITY(33)	int_numeric_variable
    (no local attributes)

  SUB- ENTITY(34)	numeric_variable
    (no local attributes)

  SUB- ENTITY(35)	simple_numeric_expression
    (no local attributes)

  SUB- ENTITY(36)	square_root_function
    (no local attributes)

  SUB- ENTITY(37)	log2_function
    (no local attributes)

  SUB- ENTITY(38)	sin_function
    (no local attributes)

  SUB- ENTITY(39)	abs_function
    (no local attributes)

  SUB- ENTITY(40)	minus_function
    (no local attributes)

  SUB- ENTITY(41)	log_function
    (no local attributes)

  SUB- ENTITY(42)	asin_function
    (no local attributes)

  SUB- ENTITY(43)	cos_function
    (no local attributes)

  SUB- ENTITY(44)	tan_function
    (no local attributes)

  SUB- ENTITY(45)	log10_function
    (no local attributes)

  SUB- ENTITY(46)	exp_function
    (no local attributes)

  SUB- ENTITY(47)	acos_function
    (no local attributes)

  SUB- ENTITY(48)	unary_function_call
    (no local attributes)

  SUB- ENTITY(49)	unary_numeric_expression
    REDCR: operand,	TYPE: numeric_expression -- EXPLICIT
      -- OVERRIDING ENTITY: unary_generic_expression


  SUB- ENTITY(50)	expression_extension_numeric
    (no local attributes)

*/


//MARK: - Partial Entity
  public final class _numeric_expression : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eNUMERIC_EXPRESSION.self
    }

    //ATTRIBUTES
    /// DERIVE ATTRIBUTE
    internal func _is_int__getter(SELF: eNUMERIC_EXPRESSION) -> SDAI.BOOLEAN?  {

      let _TEMP1 = IS_INT_EXPR(SELF)
      return _TEMP1
    }

    /// DERIVE ATTRIBUTE
    internal func _sql_mappable__getter(SELF: eNUMERIC_EXPRESSION) -> SDAI.BOOLEAN?  {

      let _TEMP1 = IS_SQL_MAPPABLE(eEXPRESSION(/*eNUMERIC_EXPRESSION*/SELF))
      return _TEMP1
    }

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init() {
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 0
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      self.init( )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY numeric_expression
    ABSTRACT SUPERTYPE OF ( 
        ONEOF ( 
            simple_numeric_expression, 
            unary_numeric_expression, 
            binary_numeric_expression, 
            multiple_arity_numeric_expression, 
            length_function, 
            value_function, 
            numeric_defined_function ) )
    SUBTYPE OF ( expression );
    DERIVE
      is_int        : BOOLEAN := is_int_expr( SELF );
      sql_mappable  : BOOLEAN := is_sql_mappable( SELF );
  END_ENTITY; -- numeric_expression (line:22494 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eNUMERIC_EXPRESSION : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _numeric_expression.self
    }
    public let partialEntity: _numeric_expression

    //MARK: SUPERTYPES
    public let super_eGENERIC_EXPRESSION: eGENERIC_EXPRESSION 	// [1]
    public let super_eEXPRESSION: eEXPRESSION 	// [2]
    public var super_eNUMERIC_EXPRESSION: eNUMERIC_EXPRESSION { return self } 	// [3]

    //MARK: SUBTYPES
    public var sub_eMINUS_EXPRESSION: eMINUS_EXPRESSION? {	// [4]
      return self.complexEntity.entityReference(eMINUS_EXPRESSION.self)
    }

    public var sub_eDIV_EXPRESSION: eDIV_EXPRESSION? {	// [5]
      return self.complexEntity.entityReference(eDIV_EXPRESSION.self)
    }

    public var sub_eMOD_EXPRESSION: eMOD_EXPRESSION? {	// [6]
      return self.complexEntity.entityReference(eMOD_EXPRESSION.self)
    }

    public var sub_eRATIONAL_REPRESENTATION_ITEM: eRATIONAL_REPRESENTATION_ITEM? {	// [7]
      return self.complexEntity.entityReference(eRATIONAL_REPRESENTATION_ITEM.self)
    }

    public var sub_eSLASH_EXPRESSION: eSLASH_EXPRESSION? {	// [8]
      return self.complexEntity.entityReference(eSLASH_EXPRESSION.self)
    }

    public var sub_ePOWER_EXPRESSION: ePOWER_EXPRESSION? {	// [9]
      return self.complexEntity.entityReference(ePOWER_EXPRESSION.self)
    }

    public var sub_eATAN_FUNCTION: eATAN_FUNCTION? {	// [10]
      return self.complexEntity.entityReference(eATAN_FUNCTION.self)
    }

    public var sub_eBINARY_FUNCTION_CALL: eBINARY_FUNCTION_CALL? {	// [11]
      return self.complexEntity.entityReference(eBINARY_FUNCTION_CALL.self)
    }

    public var sub_eBINARY_NUMERIC_EXPRESSION: eBINARY_NUMERIC_EXPRESSION? {	// [12]
      return self.complexEntity.entityReference(eBINARY_NUMERIC_EXPRESSION.self)
    }

    public var sub_eINT_VALUE_FUNCTION: eINT_VALUE_FUNCTION? {	// [13]
      return self.complexEntity.entityReference(eINT_VALUE_FUNCTION.self)
    }

    public var sub_eVALUE_FUNCTION: eVALUE_FUNCTION? {	// [14]
      return self.complexEntity.entityReference(eVALUE_FUNCTION.self)
    }

    public var sub_eINTEGER_DEFINED_FUNCTION: eINTEGER_DEFINED_FUNCTION? {	// [15]
      return self.complexEntity.entityReference(eINTEGER_DEFINED_FUNCTION.self)
    }

    public var sub_eREAL_DEFINED_FUNCTION: eREAL_DEFINED_FUNCTION? {	// [16]
      return self.complexEntity.entityReference(eREAL_DEFINED_FUNCTION.self)
    }

    public var sub_eNUMERIC_DEFINED_FUNCTION: eNUMERIC_DEFINED_FUNCTION? {	// [17]
      return self.complexEntity.entityReference(eNUMERIC_DEFINED_FUNCTION.self)
    }

    public var sub_eMULT_EXPRESSION: eMULT_EXPRESSION? {	// [18]
      return self.complexEntity.entityReference(eMULT_EXPRESSION.self)
    }

    public var sub_ePLUS_EXPRESSION: ePLUS_EXPRESSION? {	// [19]
      return self.complexEntity.entityReference(ePLUS_EXPRESSION.self)
    }

    public var sub_eMINIMUM_FUNCTION: eMINIMUM_FUNCTION? {	// [20]
      return self.complexEntity.entityReference(eMINIMUM_FUNCTION.self)
    }

    public var sub_eMAXIMUM_FUNCTION: eMAXIMUM_FUNCTION? {	// [21]
      return self.complexEntity.entityReference(eMAXIMUM_FUNCTION.self)
    }

    public var sub_eMULTIPLE_ARITY_FUNCTION_CALL: eMULTIPLE_ARITY_FUNCTION_CALL? {	// [22]
      return self.complexEntity.entityReference(eMULTIPLE_ARITY_FUNCTION_CALL.self)
    }

    public var sub_eMULTIPLE_ARITY_NUMERIC_EXPRESSION: eMULTIPLE_ARITY_NUMERIC_EXPRESSION? {	// [23]
      return self.complexEntity.entityReference(eMULTIPLE_ARITY_NUMERIC_EXPRESSION.self)
    }

    public var sub_eLENGTH_FUNCTION: eLENGTH_FUNCTION? {	// [24]
      return self.complexEntity.entityReference(eLENGTH_FUNCTION.self)
    }

    public var sub_eINTEGER_REPRESENTATION_ITEM: eINTEGER_REPRESENTATION_ITEM? {	// [25]
      return self.complexEntity.entityReference(eINTEGER_REPRESENTATION_ITEM.self)
    }

    public var sub_eINT_LITERAL: eINT_LITERAL? {	// [26]
      return self.complexEntity.entityReference(eINT_LITERAL.self)
    }

    public var sub_eREAL_REPRESENTATION_ITEM: eREAL_REPRESENTATION_ITEM? {	// [27]
      return self.complexEntity.entityReference(eREAL_REPRESENTATION_ITEM.self)
    }

    public var sub_eREAL_LITERAL: eREAL_LITERAL? {	// [28]
      return self.complexEntity.entityReference(eREAL_LITERAL.self)
    }

    public var sub_eLITERAL_NUMBER: eLITERAL_NUMBER? {	// [29]
      return self.complexEntity.entityReference(eLITERAL_NUMBER.self)
    }

    public var sub_eMATHS_REAL_VARIABLE: eMATHS_REAL_VARIABLE? {	// [30]
      return self.complexEntity.entityReference(eMATHS_REAL_VARIABLE.self)
    }

    public var sub_eREAL_NUMERIC_VARIABLE: eREAL_NUMERIC_VARIABLE? {	// [31]
      return self.complexEntity.entityReference(eREAL_NUMERIC_VARIABLE.self)
    }

    public var sub_eMATHS_INTEGER_VARIABLE: eMATHS_INTEGER_VARIABLE? {	// [32]
      return self.complexEntity.entityReference(eMATHS_INTEGER_VARIABLE.self)
    }

    public var sub_eINT_NUMERIC_VARIABLE: eINT_NUMERIC_VARIABLE? {	// [33]
      return self.complexEntity.entityReference(eINT_NUMERIC_VARIABLE.self)
    }

    public var sub_eNUMERIC_VARIABLE: eNUMERIC_VARIABLE? {	// [34]
      return self.complexEntity.entityReference(eNUMERIC_VARIABLE.self)
    }

    public var sub_eSIMPLE_NUMERIC_EXPRESSION: eSIMPLE_NUMERIC_EXPRESSION? {	// [35]
      return self.complexEntity.entityReference(eSIMPLE_NUMERIC_EXPRESSION.self)
    }

    public var sub_eSQUARE_ROOT_FUNCTION: eSQUARE_ROOT_FUNCTION? {	// [36]
      return self.complexEntity.entityReference(eSQUARE_ROOT_FUNCTION.self)
    }

    public var sub_eLOG2_FUNCTION: eLOG2_FUNCTION? {	// [37]
      return self.complexEntity.entityReference(eLOG2_FUNCTION.self)
    }

    public var sub_eSIN_FUNCTION: eSIN_FUNCTION? {	// [38]
      return self.complexEntity.entityReference(eSIN_FUNCTION.self)
    }

    public var sub_eABS_FUNCTION: eABS_FUNCTION? {	// [39]
      return self.complexEntity.entityReference(eABS_FUNCTION.self)
    }

    public var sub_eMINUS_FUNCTION: eMINUS_FUNCTION? {	// [40]
      return self.complexEntity.entityReference(eMINUS_FUNCTION.self)
    }

    public var sub_eLOG_FUNCTION: eLOG_FUNCTION? {	// [41]
      return self.complexEntity.entityReference(eLOG_FUNCTION.self)
    }

    public var sub_eASIN_FUNCTION: eASIN_FUNCTION? {	// [42]
      return self.complexEntity.entityReference(eASIN_FUNCTION.self)
    }

    public var sub_eCOS_FUNCTION: eCOS_FUNCTION? {	// [43]
      return self.complexEntity.entityReference(eCOS_FUNCTION.self)
    }

    public var sub_eTAN_FUNCTION: eTAN_FUNCTION? {	// [44]
      return self.complexEntity.entityReference(eTAN_FUNCTION.self)
    }

    public var sub_eLOG10_FUNCTION: eLOG10_FUNCTION? {	// [45]
      return self.complexEntity.entityReference(eLOG10_FUNCTION.self)
    }

    public var sub_eEXP_FUNCTION: eEXP_FUNCTION? {	// [46]
      return self.complexEntity.entityReference(eEXP_FUNCTION.self)
    }

    public var sub_eACOS_FUNCTION: eACOS_FUNCTION? {	// [47]
      return self.complexEntity.entityReference(eACOS_FUNCTION.self)
    }

    public var sub_eUNARY_FUNCTION_CALL: eUNARY_FUNCTION_CALL? {	// [48]
      return self.complexEntity.entityReference(eUNARY_FUNCTION_CALL.self)
    }

    public var sub_eUNARY_NUMERIC_EXPRESSION: eUNARY_NUMERIC_EXPRESSION? {	// [49]
      return self.complexEntity.entityReference(eUNARY_NUMERIC_EXPRESSION.self)
    }

    public var sub_eEXPRESSION_EXTENSION_NUMERIC: eEXPRESSION_EXTENSION_NUMERIC? {	// [50]
      return self.complexEntity.entityReference(eEXPRESSION_EXTENSION_NUMERIC.self)
    }


    //MARK: ATTRIBUTES
    // OPERANDS: (2 AMBIGUOUS REFs)

    /// __DERIVE__ attribute
    /// - origin: SELF( ``eNUMERIC_EXPRESSION`` )
    public var IS_INT: SDAI.BOOLEAN?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"IS_INT") {
          return cached.value as! SDAI.BOOLEAN? 
        }
        let origin = self
        let value = origin.partialEntity._is_int__getter(SELF: origin)
        updateCache(derivedAttributeName:"IS_INT", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eLITERAL_NUMBER`` )
    public var THE_VALUE: SDAI.NUMBER?  {
      get {
        return sub_eLITERAL_NUMBER?.partialEntity._the_value
      }
      set(newValue) {
        guard let partial = sub_eLITERAL_NUMBER?.super_eLITERAL_NUMBER.partialEntity else { return }
        partial._the_value = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SELF( ``eNUMERIC_EXPRESSION`` )
    public var SQL_MAPPABLE: SDAI.BOOLEAN?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"SQL_MAPPABLE") {
          return cached.value as! SDAI.BOOLEAN? 
        }
        let origin = self
        let value = origin.partialEntity._sql_mappable__getter(SELF: origin)
        updateCache(derivedAttributeName:"SQL_MAPPABLE", value:value)
        return value
      }
    }

    /// __EXPLICIT REDEF__ attribute
    /// - origin: SUB( ``eVALUE_FUNCTION`` )
    public var OPERAND: eSTRING_EXPRESSION?  {
      get {
        return eSTRING_EXPRESSION( sub_eVALUE_FUNCTION?.super_eUNARY_GENERIC_EXPRESSION.partialEntity
          ._operand )
      }
      set(newValue) {
        guard let partial = sub_eVALUE_FUNCTION?.super_eUNARY_GENERIC_EXPRESSION.partialEntity
          else { return }
        partial._operand = SDAI.UNWRAP(
          eGENERIC_EXPRESSION(newValue))
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_numeric_expression.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eGENERIC_EXPRESSION.self) else { return nil }
      self.super_eGENERIC_EXPRESSION = super1

      guard let super2 = complexEntity?.entityReference(eEXPRESSION.self) else { return nil }
      self.super_eEXPRESSION = super2

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "NUMERIC_EXPRESSION", type: self, explicitAttributeCount: 0)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eGENERIC_EXPRESSION.self)
      entityDef.add(supertype: eEXPRESSION.self)
      entityDef.add(supertype: eNUMERIC_EXPRESSION.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "IS_INT", keyPath: \eNUMERIC_EXPRESSION.IS_INT, 
        kind: .derived, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "THE_VALUE", keyPath: \eNUMERIC_EXPRESSION.THE_VALUE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "SQL_MAPPABLE", keyPath: \eNUMERIC_EXPRESSION.SQL_MAPPABLE, 
        kind: .derived, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "OPERAND", keyPath: \eNUMERIC_EXPRESSION.OPERAND, 
        kind: .explicitRedeclaring, source: .subEntity, mayYieldEntityReference: true)

      return entityDef
    }

  }
}
