/* file: connected_face_set.swift 	 generated: Sat Aug 14 13:46:02 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY connected_face_set
    SUPERTYPE OF ( 
        ONEOF ( 
            closed_shell, 
            open_shell ) )
    SUBTYPE OF ( topological_representation_item );
      cfs_faces  : SET [1 : ?] OF face;
  END_ENTITY; -- connected_face_set (line:10384 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	representation_item
    ATTR:  name,	TYPE: label -- EXPLICIT


  SUPER- ENTITY(2)	topological_representation_item
    ATTR:  permanent_id,	TYPE: identifier -- DERIVED
      := get_id_value( SELF )

    ATTR:  permanent_aggregate_id,	TYPE: identifier -- DERIVED
      := get_aggregate_id_value( SELF )


  ENTITY(SELF)	connected_face_set
    ATTR:  cfs_faces,	TYPE: SET [1 : ?] OF face -- EXPLICIT (DYNAMIC)
      -- possibly overriden by
          ENTITY: oriented_closed_shell,	TYPE: SET [1 : ?] OF face	(as DERIVED)
          ENTITY: oriented_open_shell,	TYPE: SET [1 : ?] OF face	(as DERIVED)


  SUB- ENTITY(4)	oriented_closed_shell
    ATTR:  closed_shell_element,	TYPE: closed_shell -- EXPLICIT

    ATTR:  orientation,	TYPE: BOOLEAN -- EXPLICIT	(AMBIGUOUS/MASKED)

    REDCR: cfs_faces,	TYPE: SET [1 : ?] OF face -- DERIVED (DYNAMIC)
      := conditional_reverse( SELF.orientation, SELF.closed_shell_element.cfs_faces )
      -- OVERRIDING ENTITY: connected_face_set


  SUB- ENTITY(5)	closed_shell
    (no local attributes)

  SUB- ENTITY(6)	connected_face_sub_set
    ATTR:  parent_face_set,	TYPE: connected_face_set -- EXPLICIT


  SUB- ENTITY(7)	surfaced_open_shell
    (no local attributes)

  SUB- ENTITY(8)	oriented_open_shell
    ATTR:  open_shell_element,	TYPE: open_shell -- EXPLICIT

    ATTR:  orientation,	TYPE: BOOLEAN -- EXPLICIT	(AMBIGUOUS/MASKED)

    REDCR: cfs_faces,	TYPE: SET [1 : ?] OF face -- DERIVED (DYNAMIC)
      := conditional_reverse( SELF.orientation, SELF.open_shell_element.cfs_faces )
      -- OVERRIDING ENTITY: connected_face_set


  SUB- ENTITY(9)	open_shell
    (no local attributes)

*/


//MARK: - Partial Entity
  public final class _connected_face_set : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eCONNECTED_FACE_SET.self
    }

    //ATTRIBUTES
    /// EXPLICIT ATTRIBUTE 
    /// - see the corresponding attribute accesser in the entity reference definition for the attribute value dynamic lookup logic
    public internal(set) var _cfs_faces: (SDAI.SET<eFACE>/*[1:nil]*/ )?  // PLAIN EXPLICIT ATTRIBUTE

    internal static func _cfs_faces__provider(complex: SDAI.ComplexEntity) -> eCONNECTED_FACE_SET__CFS_FACES__provider? {
      let resolved = complex.resolvePartialEntityInstance(from: [_oriented_closed_shell.typeIdentity, 
        _oriented_open_shell.typeIdentity])
      return resolved as? eCONNECTED_FACE_SET__CFS_FACES__provider
    }

    //PARTIAL COMPLEX ENTITY SUPPORT
    final public override class func fixupPartialComplexEntityAttributes(partialComplex: SDAI.ComplexEntity, baseComplex: SDAI.ComplexEntity) {
      guard let pe = partialComplex.partialEntityInstance(_connected_face_set.self) else { return }

      if pe._cfs_faces == nil, self._cfs_faces__provider(complex: partialComplex) == nil, 
        let base__cfs_faces__provider = self._cfs_faces__provider(complex: baseComplex) {
        pe._cfs_faces = base__cfs_faces__provider._cfs_faces__getter(complex: baseComplex)
      }
    }
    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      //SELECT data types (indirectly) referencing the current type as a member of the select list
      members.insert(SDAI.STRING(sINSPECTED_ECDQ_ELEMENT_SELECT.typeName)) // -> Self
      members.insert(SDAI.STRING(sLOCATION_OF_EXTREME_VALUE_SELECT.typeName)) // -> sINSPECTED_ECDQ_ELEMENT_SELECT
      members.insert(SDAI.STRING(sA3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT.typeName)) // -> Self
      members.insert(SDAI.STRING(sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT.typeName)) // -> sA3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT
      members.insert(SDAI.STRING(sINSPECTED_SHAPE_ELEMENT_SELECT.typeName)) // -> Self
      members.insert(SDAI.STRING(sINSPECTED_EQUIVALENCE_ELEMENT_SELECT.typeName)) // -> Self
      members.insert(SDAI.STRING(sINSPECTED_ELEMENT_SELECT.typeName)) // -> Self
      members.insert(SDAI.STRING(sGEOMETRIC_MODEL_ITEM.typeName)) // -> Self
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._cfs_faces?.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._cfs_faces?.value.isValueEqualOptionally(to: rhs._cfs_faces?.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._cfs_faces?.value.isValueEqualOptionally(to: rhs._cfs_faces?.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(CFS_FACES: (SDAI.SET<eFACE>/*[1:nil]*/ )? ) {
      self._cfs_faces = CFS_FACES
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 1
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverOmittableParameter(as: SDAI.SET<eFACE>.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( CFS_FACES: p0 )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY connected_face_set
    SUPERTYPE OF ( 
        ONEOF ( 
            closed_shell, 
            open_shell ) )
    SUBTYPE OF ( topological_representation_item );
      cfs_faces  : SET [1 : ?] OF face;
  END_ENTITY; -- connected_face_set (line:10384 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eCONNECTED_FACE_SET : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _connected_face_set.self
    }
    public let partialEntity: _connected_face_set

    //MARK: SUPERTYPES
    public let super_eREPRESENTATION_ITEM: eREPRESENTATION_ITEM 	// [1]
    public let super_eTOPOLOGICAL_REPRESENTATION_ITEM: eTOPOLOGICAL_REPRESENTATION_ITEM 	// [2]
    public var super_eCONNECTED_FACE_SET: eCONNECTED_FACE_SET { return self } 	// [3]

    //MARK: SUBTYPES
    public var sub_eORIENTED_CLOSED_SHELL: eORIENTED_CLOSED_SHELL? {	// [4]
      return self.complexEntity.entityReference(eORIENTED_CLOSED_SHELL.self)
    }

    public var sub_eCLOSED_SHELL: eCLOSED_SHELL? {	// [5]
      return self.complexEntity.entityReference(eCLOSED_SHELL.self)
    }

    public var sub_eCONNECTED_FACE_SUB_SET: eCONNECTED_FACE_SUB_SET? {	// [6]
      return self.complexEntity.entityReference(eCONNECTED_FACE_SUB_SET.self)
    }

    public var sub_eSURFACED_OPEN_SHELL: eSURFACED_OPEN_SHELL? {	// [7]
      return self.complexEntity.entityReference(eSURFACED_OPEN_SHELL.self)
    }

    public var sub_eORIENTED_OPEN_SHELL: eORIENTED_OPEN_SHELL? {	// [8]
      return self.complexEntity.entityReference(eORIENTED_OPEN_SHELL.self)
    }

    public var sub_eOPEN_SHELL: eOPEN_SHELL? {	// [9]
      return self.complexEntity.entityReference(eOPEN_SHELL.self)
    }


    //MARK: ATTRIBUTES
    // ORIENTATION: (2 AMBIGUOUS REFs)

    /// __EXPLICIT(DYNAMIC)__ attribute
    /// - origin: SELF( ``eCONNECTED_FACE_SET`` )
    public var CFS_FACES: SDAI.SET<eFACE>/*[1:nil]*/  {
      get {
        if let resolved = _connected_face_set._cfs_faces__provider(complex: self.complexEntity) {
          let value = resolved._cfs_faces__getter(complex: self.complexEntity)
          return value
        }
        else {
          return SDAI.UNWRAP( self.partialEntity._cfs_faces )
        }
      }
      set(newValue) {
        if let _ = _connected_face_set._cfs_faces__provider(complex: self.complexEntity) { return }

        let partial = self.partialEntity
        partial._cfs_faces = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUPER( ``eTOPOLOGICAL_REPRESENTATION_ITEM`` )
    public var PERMANENT_AGGREGATE_ID: tIDENTIFIER?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"PERMANENT_AGGREGATE_ID") {
          return cached.value as! tIDENTIFIER? 
        }
        let origin = super_eTOPOLOGICAL_REPRESENTATION_ITEM
        let value = tIDENTIFIER(origin.partialEntity._permanent_aggregate_id__getter(SELF: origin))
        updateCache(derivedAttributeName:"PERMANENT_AGGREGATE_ID", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCONNECTED_FACE_SUB_SET`` )
    public var PARENT_FACE_SET: eCONNECTED_FACE_SET?  {
      get {
        return sub_eCONNECTED_FACE_SUB_SET?.partialEntity._parent_face_set
      }
      set(newValue) {
        guard let partial = sub_eCONNECTED_FACE_SUB_SET?.super_eCONNECTED_FACE_SUB_SET.partialEntity
          else { return }
        partial._parent_face_set = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eORIENTED_OPEN_SHELL`` )
    public var OPEN_SHELL_ELEMENT: eOPEN_SHELL?  {
      get {
        return sub_eORIENTED_OPEN_SHELL?.partialEntity._open_shell_element
      }
      set(newValue) {
        guard let partial = sub_eORIENTED_OPEN_SHELL?.super_eORIENTED_OPEN_SHELL.partialEntity
          else { return }
        partial._open_shell_element = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eORIENTED_CLOSED_SHELL`` )
    public var CLOSED_SHELL_ELEMENT: eCLOSED_SHELL?  {
      get {
        return sub_eORIENTED_CLOSED_SHELL?.partialEntity._closed_shell_element
      }
      set(newValue) {
        guard let partial = sub_eORIENTED_CLOSED_SHELL?.super_eORIENTED_CLOSED_SHELL.partialEntity
          else { return }
        partial._closed_shell_element = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUPER( ``eTOPOLOGICAL_REPRESENTATION_ITEM`` )
    public var PERMANENT_ID: tIDENTIFIER?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"PERMANENT_ID") {
          return cached.value as! tIDENTIFIER? 
        }
        let origin = super_eTOPOLOGICAL_REPRESENTATION_ITEM
        let value = tIDENTIFIER(origin.partialEntity._permanent_id__getter(SELF: origin))
        updateCache(derivedAttributeName:"PERMANENT_ID", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eREPRESENTATION_ITEM`` )
    public var NAME: tLABEL {
      get {
        return SDAI.UNWRAP( super_eREPRESENTATION_ITEM.partialEntity._name )
      }
      set(newValue) {
        let partial = super_eREPRESENTATION_ITEM.partialEntity
        partial._name = SDAI.UNWRAP(newValue)
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_connected_face_set.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eREPRESENTATION_ITEM.self) else { return nil }
      self.super_eREPRESENTATION_ITEM = super1

      guard let super2 = complexEntity?.entityReference(eTOPOLOGICAL_REPRESENTATION_ITEM.self) else { return nil }
      self.super_eTOPOLOGICAL_REPRESENTATION_ITEM = super2

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "CONNECTED_FACE_SET", type: self, explicitAttributeCount: 1)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eREPRESENTATION_ITEM.self)
      entityDef.add(supertype: eTOPOLOGICAL_REPRESENTATION_ITEM.self)
      entityDef.add(supertype: eCONNECTED_FACE_SET.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "CFS_FACES", keyPath: \eCONNECTED_FACE_SET.CFS_FACES, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "PERMANENT_AGGREGATE_ID", keyPath: \eCONNECTED_FACE_SET.PERMANENT_AGGREGATE_ID, 
        kind: .derived, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "PARENT_FACE_SET", keyPath: \eCONNECTED_FACE_SET.PARENT_FACE_SET, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "OPEN_SHELL_ELEMENT", keyPath: \eCONNECTED_FACE_SET.OPEN_SHELL_ELEMENT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "CLOSED_SHELL_ELEMENT", keyPath: \eCONNECTED_FACE_SET.CLOSED_SHELL_ELEMENT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "PERMANENT_ID", keyPath: \eCONNECTED_FACE_SET.PERMANENT_ID, 
        kind: .derived, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "NAME", keyPath: \eCONNECTED_FACE_SET.NAME, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)

      return entityDef
    }

  }
}

//MARK: - Entity Dynamic Attribute Protocols
internal protocol eCONNECTED_FACE_SET__CFS_FACES__provider {
  func _cfs_faces__getter(complex: SDAI.ComplexEntity) -> SDAI.SET<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eFACE>/*[1:nil]*/ 
}
