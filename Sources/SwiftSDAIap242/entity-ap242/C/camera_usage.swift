/* file: camera_usage.swift 	 generated: Mon Jan  3 16:32:52 2022 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.1, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY camera_usage
    SUBTYPE OF ( representation_map );
      SELF\representation_map.mapping_origin : camera_model;
    WHERE
      wr1: ( NOT ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PRESENTATION_REPRESENTATION' IN TYPEOF( 
               SELF\representation_map.mapped_representation ) ) );
  END_ENTITY; -- camera_usage (line:8828 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	representation_map
    ATTR:  mapping_origin,	TYPE: representation_item -- EXPLICIT
      -- possibly overriden by
          ENTITY: symbol_representation_map,	TYPE: axis2_placement
      *** ENTITY: camera_usage,	TYPE: camera_model

    ATTR:  mapped_representation,	TYPE: representation -- EXPLICIT
      -- possibly overriden by
          ENTITY: symbol_representation_map,	TYPE: symbol_representation

    ATTR:  map_usage,	TYPE: SET [1 : ?] OF mapped_item -- INVERSE
      FOR mapping_source;


  ENTITY(SELF)	camera_usage
    REDCR: mapping_origin,	TYPE: camera_model -- EXPLICIT
      -- OVERRIDING ENTITY: representation_map


*/


//MARK: - Partial Entity
  public final class _camera_usage : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eCAMERA_USAGE.self
    }

    //ATTRIBUTES
    /* override var _mapping_origin: eCAMERA_MODEL	//EXPLICIT REDEFINITION(eREPRESENTATION_MAP) */

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: eCAMERA_USAGE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.TYPEOF(SELF.GROUP_REF(eREPRESENTATION_MAP.self)?.MAPPED_REPRESENTATION, 
        IS: ePRESENTATION_REPRESENTATION.self)
      let _TEMP2 =  !_TEMP1
      return _TEMP2
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init() {
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 0
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      self.init( )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY camera_usage
    SUBTYPE OF ( representation_map );
      SELF\representation_map.mapping_origin : camera_model;
    WHERE
      wr1: ( NOT ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PRESENTATION_REPRESENTATION' IN TYPEOF( 
               SELF\representation_map.mapped_representation ) ) );
  END_ENTITY; -- camera_usage (line:8828 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eCAMERA_USAGE : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _camera_usage.self
    }
    public let partialEntity: _camera_usage

    //MARK: SUPERTYPES
    public let super_eREPRESENTATION_MAP: eREPRESENTATION_MAP 	// [1]
    public var super_eCAMERA_USAGE: eCAMERA_USAGE { return self } 	// [2]

    //MARK: SUBTYPES

    //MARK: ATTRIBUTES
    /// __INVERSE__ attribute
    /// observing eMAPPED_ITEM .MAPPING_SOURCE
    /// - origin: SUPER( ``eREPRESENTATION_MAP`` )
    public var MAP_USAGE: SDAI.SET<eMAPPED_ITEM>/*[1:nil]*/  {
      get {
        return SDAI.UNWRAP( super_eREPRESENTATION_MAP.partialEntity._map_usage )
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eREPRESENTATION_MAP`` )
    public var MAPPED_REPRESENTATION: eREPRESENTATION {
      get {
        return SDAI.UNWRAP( super_eREPRESENTATION_MAP.partialEntity._mapped_representation )
      }
      set(newValue) {
        let partial = super_eREPRESENTATION_MAP.partialEntity
        partial._mapped_representation = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT REDEF__ attribute
    /// - origin: SELF( ``eCAMERA_USAGE`` )
    public var MAPPING_ORIGIN: eCAMERA_MODEL {
      get {
        return SDAI.UNWRAP( eCAMERA_MODEL( super_eREPRESENTATION_MAP.partialEntity._mapping_origin ) )
      }
      set(newValue) {
        let partial = super_eREPRESENTATION_MAP.partialEntity
        partial._mapping_origin = SDAI.UNWRAP(
          eREPRESENTATION_ITEM(newValue))
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_camera_usage.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eREPRESENTATION_MAP.self) else { return nil }
      self.super_eREPRESENTATION_MAP = super1

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _camera_usage.WHERE_wr1(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "CAMERA_USAGE", type: self, explicitAttributeCount: 0)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eREPRESENTATION_MAP.self)
      entityDef.add(supertype: eCAMERA_USAGE.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "MAP_USAGE", keyPath: \eCAMERA_USAGE.MAP_USAGE, 
        kind: .inverse, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "MAPPED_REPRESENTATION", keyPath: \eCAMERA_USAGE.MAPPED_REPRESENTATION, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "MAPPING_ORIGIN", keyPath: \eCAMERA_USAGE.MAPPING_ORIGIN, 
        kind: .explicitRedeclaring, source: .thisEntity, mayYieldEntityReference: true)

      return entityDef
    }

  }
}
