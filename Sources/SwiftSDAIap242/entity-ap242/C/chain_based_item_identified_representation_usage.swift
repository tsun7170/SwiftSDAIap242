/* file: chain_based_item_identified_representation_usage.swift 	 generated: Sat Aug 14 13:46:02 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY chain_based_item_identified_representation_usage
    SUBTYPE OF ( item_identified_representation_usage );
      nodes            : LIST [2 : ?] OF UNIQUE representation;
      undirected_link  : LIST [1 : ?] OF chained_representation_link;
    DERIVE
      root           : representation := nodes[1];
      directed_link  : LIST [1 : ?] OF representation_relationship := get_directed_link( nodes, 
                         undirected_link );
      leaf           : representation := SELF\item_identified_representation_usage.used_representation;
    WHERE
      wr1: EXISTS( directed_link );
  END_ENTITY; -- chain_based_item_identified_representation_usage (line:8963 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	item_identified_representation_usage
    ATTR:  name,	TYPE: label -- EXPLICIT

    ATTR:  description,	TYPE: OPTIONAL text -- EXPLICIT

    ATTR:  definition,	TYPE: item_identified_representation_usage_definition -- EXPLICIT
      -- observed by
        ENTITY(1): explicit_composite_hole,	ATTR: explicit_shape,	TYPE: SET [0 : ?] OF
          item_identified_representation_usage
      -- possibly overriden by
          ENTITY: draughting_model_item_association,	TYPE: draughting_model_item_definition
          ENTITY: geometric_item_specific_usage,	TYPE: geometric_item_specific_usage_select

    ATTR:  used_representation,	TYPE: representation -- EXPLICIT
      -- possibly overriden by
          ENTITY: draughting_model_item_association,	TYPE: annotation_representation_select
          ENTITY: geometric_item_specific_usage,	TYPE: shape_model

    ATTR:  identified_item,	TYPE: item_identified_representation_usage_select -- EXPLICIT
      -- possibly overriden by
          ENTITY: draughting_model_item_association,	TYPE: draughting_model_item_association_select
          ENTITY: draughting_model_item_association_with_placeholder,	TYPE: draughting_callout
          ENTITY: geometric_item_specific_usage,	TYPE: geometric_model_item


  ENTITY(SELF)	chain_based_item_identified_representation_usage
    ATTR:  nodes,	TYPE: LIST [2 : ?] OF UNIQUE representation -- EXPLICIT

    ATTR:  undirected_link,	TYPE: LIST [1 : ?] OF chained_representation_link -- EXPLICIT

    ATTR:  root,	TYPE: representation -- DERIVED
      := nodes[1]

    ATTR:  directed_link,	TYPE: LIST [1 : ?] OF representation_relationship -- DERIVED
      := get_directed_link( nodes, undirected_link )

    ATTR:  leaf,	TYPE: representation -- DERIVED
      := SELF\item_identified_representation_usage.used_representation


  SUB- ENTITY(3)	chain_based_geometric_item_specific_usage
    (no local attributes)

*/


//MARK: - Partial Entity
  public final class _chain_based_item_identified_representation_usage : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eCHAIN_BASED_ITEM_IDENTIFIED_REPRESENTATION_USAGE.self
    }

    //ATTRIBUTES
    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _nodes: SDAI.LIST_UNIQUE<eREPRESENTATION>/*[2:nil]*/  // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _undirected_link: SDAI.LIST<sCHAINED_REPRESENTATION_LINK>/*[1:nil]*/  // PLAIN EXPLICIT ATTRIBUTE

    /// DERIVE ATTRIBUTE
    internal func _root__getter(SELF: eCHAIN_BASED_ITEM_IDENTIFIED_REPRESENTATION_USAGE) -> eREPRESENTATION?  {

      let _TEMP1 = SELF.NODES[1]
      return _TEMP1
    }

    /// DERIVE ATTRIBUTE
    internal func _directed_link__getter(SELF: eCHAIN_BASED_ITEM_IDENTIFIED_REPRESENTATION_USAGE) -> (SDAI.LIST<
      eREPRESENTATION_RELATIONSHIP>/*[1:nil]*/ )?  {

      let _TEMP1 = GET_DIRECTED_LINK(
        NODES: SDAI.LIST<eREPRESENTATION>(/*SDAI.LIST_UNIQUE<eREPRESENTATION>[2:nil] */SELF.NODES), 
        UNDIRECTED_LINK: SDAI.LIST<sCHAINED_REPRESENTATION_LINK>(/*SDAI.LIST<sCHAINED_REPRESENTATION_LINK>[1:
        nil] */SELF.UNDIRECTED_LINK))
      return SDAI.LIST<eREPRESENTATION_RELATIONSHIP>(bound1: SDAI.UNWRAP(SDAI.INTEGER(1)), bound2: (nil as 
        SDAI.INTEGER?), /*SDAI.LIST<eREPRESENTATION_RELATIONSHIP>*/_TEMP1)
    }

    /// DERIVE ATTRIBUTE
    internal func _leaf__getter(SELF: eCHAIN_BASED_ITEM_IDENTIFIED_REPRESENTATION_USAGE) -> eREPRESENTATION?  {

      let _TEMP1 = SELF.GROUP_REF(eITEM_IDENTIFIED_REPRESENTATION_USAGE.self)
      let _TEMP2 = _TEMP1?.USED_REPRESENTATION
      return _TEMP2
    }

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._nodes.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._undirected_link.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._nodes.value.isValueEqualOptionally(to: rhs._nodes.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._undirected_link.value.isValueEqualOptionally(to: rhs._undirected_link.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._nodes.value.isValueEqualOptionally(to: rhs._nodes.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._undirected_link.value.isValueEqualOptionally(to: rhs._undirected_link.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: eCHAIN_BASED_ITEM_IDENTIFIED_REPRESENTATION_USAGE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.EXISTS(SELF.DIRECTED_LINK)
      return SDAI.LOGICAL(/*SDAI.BOOLEAN*/_TEMP1)
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(NODES: SDAI.LIST_UNIQUE<eREPRESENTATION>/*[2:nil]*/ , UNDIRECTED_LINK: SDAI.LIST<
                sCHAINED_REPRESENTATION_LINK>/*[1:nil]*/ ) {
      self._nodes = NODES
      self._undirected_link = UNDIRECTED_LINK
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 2
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverRequiredParameter(as: SDAI.LIST_UNIQUE<
        eREPRESENTATION>.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p1) = exchangeStructure.recoverRequiredParameter(as: SDAI.LIST<
        sCHAINED_REPRESENTATION_LINK>.self, from: parameters[1])
      else { exchangeStructure.add(errorContext: "while recovering parameter #1 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( NODES: p0, UNDIRECTED_LINK: p1 )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY chain_based_item_identified_representation_usage
    SUBTYPE OF ( item_identified_representation_usage );
      nodes            : LIST [2 : ?] OF UNIQUE representation;
      undirected_link  : LIST [1 : ?] OF chained_representation_link;
    DERIVE
      root           : representation := nodes[1];
      directed_link  : LIST [1 : ?] OF representation_relationship := get_directed_link( nodes, 
                         undirected_link );
      leaf           : representation := SELF\item_identified_representation_usage.used_representation;
    WHERE
      wr1: EXISTS( directed_link );
  END_ENTITY; -- chain_based_item_identified_representation_usage (line:8963 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eCHAIN_BASED_ITEM_IDENTIFIED_REPRESENTATION_USAGE : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _chain_based_item_identified_representation_usage.self
    }
    public let partialEntity: _chain_based_item_identified_representation_usage

    //MARK: SUPERTYPES
    public let super_eITEM_IDENTIFIED_REPRESENTATION_USAGE: eITEM_IDENTIFIED_REPRESENTATION_USAGE 	// [1]
    public var super_eCHAIN_BASED_ITEM_IDENTIFIED_REPRESENTATION_USAGE: eCHAIN_BASED_ITEM_IDENTIFIED_REPRESENTATION_USAGE { return self } 	// [2]

    //MARK: SUBTYPES
    public var sub_eCHAIN_BASED_GEOMETRIC_ITEM_SPECIFIC_USAGE: eCHAIN_BASED_GEOMETRIC_ITEM_SPECIFIC_USAGE? {	// [3]
      return self.complexEntity.entityReference(eCHAIN_BASED_GEOMETRIC_ITEM_SPECIFIC_USAGE.self)
    }


    //MARK: ATTRIBUTES
    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eCHAIN_BASED_ITEM_IDENTIFIED_REPRESENTATION_USAGE`` )
    public var UNDIRECTED_LINK: SDAI.LIST<sCHAINED_REPRESENTATION_LINK>/*[1:nil]*/  {
      get {
        return SDAI.UNWRAP( self.partialEntity._undirected_link )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._undirected_link = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eITEM_IDENTIFIED_REPRESENTATION_USAGE`` )
    public var IDENTIFIED_ITEM: sITEM_IDENTIFIED_REPRESENTATION_USAGE_SELECT {
      get {
        return SDAI.UNWRAP( super_eITEM_IDENTIFIED_REPRESENTATION_USAGE.partialEntity._identified_item )
      }
      set(newValue) {
        let partial = super_eITEM_IDENTIFIED_REPRESENTATION_USAGE.partialEntity
        partial._identified_item = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eITEM_IDENTIFIED_REPRESENTATION_USAGE`` )
    public var DESCRIPTION: tTEXT?  {
      get {
        return super_eITEM_IDENTIFIED_REPRESENTATION_USAGE.partialEntity._description
      }
      set(newValue) {
        let partial = super_eITEM_IDENTIFIED_REPRESENTATION_USAGE.partialEntity
        partial._description = newValue
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SELF( ``eCHAIN_BASED_ITEM_IDENTIFIED_REPRESENTATION_USAGE`` )
    public var LEAF: eREPRESENTATION?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"LEAF") {
          return cached.value as! eREPRESENTATION? 
        }
        let origin = self
        let value = origin.partialEntity._leaf__getter(SELF: origin)
        updateCache(derivedAttributeName:"LEAF", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eITEM_IDENTIFIED_REPRESENTATION_USAGE`` )
    public var USED_REPRESENTATION: eREPRESENTATION {
      get {
        return SDAI.UNWRAP( super_eITEM_IDENTIFIED_REPRESENTATION_USAGE.partialEntity._used_representation )
      }
      set(newValue) {
        let partial = super_eITEM_IDENTIFIED_REPRESENTATION_USAGE.partialEntity
        partial._used_representation = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SELF( ``eCHAIN_BASED_ITEM_IDENTIFIED_REPRESENTATION_USAGE`` )
    public var ROOT: eREPRESENTATION?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"ROOT") {
          return cached.value as! eREPRESENTATION? 
        }
        let origin = self
        let value = origin.partialEntity._root__getter(SELF: origin)
        updateCache(derivedAttributeName:"ROOT", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eCHAIN_BASED_ITEM_IDENTIFIED_REPRESENTATION_USAGE`` )
    public var NODES: SDAI.LIST_UNIQUE<eREPRESENTATION>/*[2:nil]*/  {
      get {
        return SDAI.UNWRAP( self.partialEntity._nodes )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._nodes = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SELF( ``eCHAIN_BASED_ITEM_IDENTIFIED_REPRESENTATION_USAGE`` )
    public var DIRECTED_LINK: (SDAI.LIST<eREPRESENTATION_RELATIONSHIP>/*[1:nil]*/ )?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"DIRECTED_LINK") {
          return cached.value as! (SDAI.LIST<eREPRESENTATION_RELATIONSHIP>/*[1:nil]*/ )? 
        }
        let origin = self
        let value = origin.partialEntity._directed_link__getter(SELF: origin)
        updateCache(derivedAttributeName:"DIRECTED_LINK", value:value)
        return value
      }
    }

    /// __EXPLICIT(OBSERVED)__ attribute
    /// - origin: SUPER( ``eITEM_IDENTIFIED_REPRESENTATION_USAGE`` )
    public var DEFINITION: sITEM_IDENTIFIED_REPRESENTATION_USAGE_DEFINITION {
      get {
        return SDAI.UNWRAP( super_eITEM_IDENTIFIED_REPRESENTATION_USAGE.partialEntity._definition )
      }
      set(newValue) {
        let partial = super_eITEM_IDENTIFIED_REPRESENTATION_USAGE.partialEntity
        partial._definition = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eITEM_IDENTIFIED_REPRESENTATION_USAGE`` )
    public var NAME: tLABEL {
      get {
        return SDAI.UNWRAP( super_eITEM_IDENTIFIED_REPRESENTATION_USAGE.partialEntity._name )
      }
      set(newValue) {
        let partial = super_eITEM_IDENTIFIED_REPRESENTATION_USAGE.partialEntity
        partial._name = SDAI.UNWRAP(newValue)
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_chain_based_item_identified_representation_usage.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eITEM_IDENTIFIED_REPRESENTATION_USAGE.self) else { return nil }
      self.super_eITEM_IDENTIFIED_REPRESENTATION_USAGE = super1

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _chain_based_item_identified_representation_usage.WHERE_wr1(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "CHAIN_BASED_ITEM_IDENTIFIED_REPRESENTATION_USAGE", type: self, explicitAttributeCount: 2)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eITEM_IDENTIFIED_REPRESENTATION_USAGE.self)
      entityDef.add(supertype: eCHAIN_BASED_ITEM_IDENTIFIED_REPRESENTATION_USAGE.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "UNDIRECTED_LINK", keyPath: \eCHAIN_BASED_ITEM_IDENTIFIED_REPRESENTATION_USAGE.UNDIRECTED_LINK, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "IDENTIFIED_ITEM", keyPath: \eCHAIN_BASED_ITEM_IDENTIFIED_REPRESENTATION_USAGE.IDENTIFIED_ITEM, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "DESCRIPTION", keyPath: \eCHAIN_BASED_ITEM_IDENTIFIED_REPRESENTATION_USAGE.DESCRIPTION, 
        kind: .explicitOptional, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "LEAF", keyPath: \eCHAIN_BASED_ITEM_IDENTIFIED_REPRESENTATION_USAGE.LEAF, 
        kind: .derived, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "USED_REPRESENTATION", keyPath: \eCHAIN_BASED_ITEM_IDENTIFIED_REPRESENTATION_USAGE.USED_REPRESENTATION, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "ROOT", keyPath: \eCHAIN_BASED_ITEM_IDENTIFIED_REPRESENTATION_USAGE.ROOT, 
        kind: .derived, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "NODES", keyPath: \eCHAIN_BASED_ITEM_IDENTIFIED_REPRESENTATION_USAGE.NODES, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "DIRECTED_LINK", keyPath: \eCHAIN_BASED_ITEM_IDENTIFIED_REPRESENTATION_USAGE.DIRECTED_LINK, 
        kind: .derived, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "DEFINITION", keyPath: \eCHAIN_BASED_ITEM_IDENTIFIED_REPRESENTATION_USAGE.DEFINITION, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "NAME", keyPath: \eCHAIN_BASED_ITEM_IDENTIFIED_REPRESENTATION_USAGE.NAME, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)

      return entityDef
    }

  }
}
