/* file: cartesian_transformation_operator.swift 	 generated: Sun Oct 31 15:32:10 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY cartesian_transformation_operator
    SUPERTYPE OF ( 
        ONEOF ( 
            cartesian_transformation_operator_2d, 
            cartesian_transformation_operator_3d ) )
    SUBTYPE OF ( geometric_representation_item, functionally_defined_transformation );
      axis1         : OPTIONAL direction;
      axis2         : OPTIONAL direction;
      local_origin  : cartesian_point;
      scale         : OPTIONAL REAL;
    DERIVE
      scl  : REAL := NVL( scale, 1 );
    WHERE
      wr1: ( scl > 0 );
  END_ENTITY; -- cartesian_transformation_operator (line:8855 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	representation_item
    ATTR:  name,	TYPE: label -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUPER- ENTITY(2)	geometric_representation_item
    ATTR:  dim,	TYPE: dimension_count -- DERIVED
      := dimension_of( SELF )


  SUPER- ENTITY(3)	functionally_defined_transformation
    ATTR:  name,	TYPE: label -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  description,	TYPE: OPTIONAL text -- EXPLICIT


  ENTITY(SELF)	cartesian_transformation_operator
    ATTR:  axis1,	TYPE: OPTIONAL direction -- EXPLICIT

    ATTR:  axis2,	TYPE: OPTIONAL direction -- EXPLICIT

    ATTR:  local_origin,	TYPE: cartesian_point -- EXPLICIT

    ATTR:  scale,	TYPE: OPTIONAL REAL -- EXPLICIT

    ATTR:  scl,	TYPE: REAL -- DERIVED
      := NVL( scale, 1 )


  SUB- ENTITY(5)	cartesian_transformation_operator_3d
    ATTR:  axis3,	TYPE: OPTIONAL direction -- EXPLICIT

    ATTR:  u,	TYPE: LIST [3 : 3] OF direction -- DERIVED	(AMBIGUOUS/MASKED)
      := base_axis( 3, SELF\cartesian_transformation_operator.axis1, SELF\cartesian_transformation_operator.
        axis2, axis3 )


  SUB- ENTITY(6)	cartesian_transformation_operator_2d
    ATTR:  u,	TYPE: LIST [2 : 2] OF direction -- DERIVED	(AMBIGUOUS/MASKED)
      := base_axis( 2, SELF\cartesian_transformation_operator.axis1, SELF\cartesian_transformation_operator.
        axis2, ? )


*/


//MARK: - Partial Entity
  public final class _cartesian_transformation_operator : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eCARTESIAN_TRANSFORMATION_OPERATOR.self
    }

    //ATTRIBUTES
    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _axis1: eDIRECTION?  // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _axis2: eDIRECTION?  // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _local_origin: eCARTESIAN_POINT // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _scale: SDAI.REAL?  // PLAIN EXPLICIT ATTRIBUTE

    /// DERIVE ATTRIBUTE
    internal func _scl__getter(SELF: eCARTESIAN_TRANSFORMATION_OPERATOR) -> SDAI.REAL?  {

      let _TEMP1 = SDAI.NVL(V: SELF.SCALE, 
                            SUBSTITUTE: 1.0000000000e+00)
      return _TEMP1
    }

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._axis1?.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._axis2?.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._local_origin.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._scale?.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._axis1?.value.isValueEqualOptionally(to: rhs._axis1?.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._axis2?.value.isValueEqualOptionally(to: rhs._axis2?.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._local_origin.value.isValueEqualOptionally(to: rhs._local_origin.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._scale?.value.isValueEqualOptionally(to: rhs._scale?.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._axis1?.value.isValueEqualOptionally(to: rhs._axis1?.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._axis2?.value.isValueEqualOptionally(to: rhs._axis2?.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._local_origin.value.isValueEqualOptionally(to: rhs._local_origin.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._scale?.value.isValueEqualOptionally(to: rhs._scale?.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: eCARTESIAN_TRANSFORMATION_OPERATOR?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.SCL > SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      return _TEMP1
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(AXIS1: eDIRECTION? , AXIS2: eDIRECTION? , LOCAL_ORIGIN: eCARTESIAN_POINT, 
                SCALE: SDAI.REAL? ) {
      self._axis1 = AXIS1
      self._axis2 = AXIS2
      self._local_origin = LOCAL_ORIGIN
      self._scale = SCALE
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 4
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverOptionalParameter(as: eDIRECTION.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p1) = exchangeStructure.recoverOptionalParameter(as: eDIRECTION.self, from: parameters[1])
      else { exchangeStructure.add(errorContext: "while recovering parameter #1 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p2) = exchangeStructure.recoverRequiredParameter(as: eCARTESIAN_POINT.self, from: parameters[2])
      else { exchangeStructure.add(errorContext: "while recovering parameter #2 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p3) = exchangeStructure.recoverOptionalParameter(as: SDAI.REAL.self, from: parameters[3])
      else { exchangeStructure.add(errorContext: "while recovering parameter #3 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( AXIS1: p0, AXIS2: p1, LOCAL_ORIGIN: p2, SCALE: p3 )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY cartesian_transformation_operator
    SUPERTYPE OF ( 
        ONEOF ( 
            cartesian_transformation_operator_2d, 
            cartesian_transformation_operator_3d ) )
    SUBTYPE OF ( geometric_representation_item, functionally_defined_transformation );
      axis1         : OPTIONAL direction;
      axis2         : OPTIONAL direction;
      local_origin  : cartesian_point;
      scale         : OPTIONAL REAL;
    DERIVE
      scl  : REAL := NVL( scale, 1 );
    WHERE
      wr1: ( scl > 0 );
  END_ENTITY; -- cartesian_transformation_operator (line:8855 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eCARTESIAN_TRANSFORMATION_OPERATOR : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _cartesian_transformation_operator.self
    }
    public let partialEntity: _cartesian_transformation_operator

    //MARK: SUPERTYPES
    public let super_eREPRESENTATION_ITEM: eREPRESENTATION_ITEM 	// [1]
    public let super_eGEOMETRIC_REPRESENTATION_ITEM: eGEOMETRIC_REPRESENTATION_ITEM 	// [2]
    public let super_eFUNCTIONALLY_DEFINED_TRANSFORMATION: eFUNCTIONALLY_DEFINED_TRANSFORMATION 	// [3]
    public var super_eCARTESIAN_TRANSFORMATION_OPERATOR: eCARTESIAN_TRANSFORMATION_OPERATOR { return self } 	// [4]

    //MARK: SUBTYPES
    public var sub_eCARTESIAN_TRANSFORMATION_OPERATOR_3D: eCARTESIAN_TRANSFORMATION_OPERATOR_3D? {	// [5]
      return self.complexEntity.entityReference(eCARTESIAN_TRANSFORMATION_OPERATOR_3D.self)
    }

    public var sub_eCARTESIAN_TRANSFORMATION_OPERATOR_2D: eCARTESIAN_TRANSFORMATION_OPERATOR_2D? {	// [6]
      return self.complexEntity.entityReference(eCARTESIAN_TRANSFORMATION_OPERATOR_2D.self)
    }


    //MARK: ATTRIBUTES
    // U: (2 AMBIGUOUS REFs)

    // NAME: (2 AMBIGUOUS REFs)

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eFUNCTIONALLY_DEFINED_TRANSFORMATION`` )
    public var DESCRIPTION: tTEXT?  {
      get {
        return super_eFUNCTIONALLY_DEFINED_TRANSFORMATION.partialEntity._description
      }
      set(newValue) {
        let partial = super_eFUNCTIONALLY_DEFINED_TRANSFORMATION.partialEntity
        partial._description = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eCARTESIAN_TRANSFORMATION_OPERATOR`` )
    public var SCALE: SDAI.REAL?  {
      get {
        return self.partialEntity._scale
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._scale = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eCARTESIAN_TRANSFORMATION_OPERATOR`` )
    public var LOCAL_ORIGIN: eCARTESIAN_POINT {
      get {
        return SDAI.UNWRAP( self.partialEntity._local_origin )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._local_origin = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SELF( ``eCARTESIAN_TRANSFORMATION_OPERATOR`` )
    public var SCL: SDAI.REAL?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"SCL") {
          return cached.value as! SDAI.REAL? 
        }
        let origin = self
        let value = origin.partialEntity._scl__getter(SELF: origin)
        updateCache(derivedAttributeName:"SCL", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCARTESIAN_TRANSFORMATION_OPERATOR_3D`` )
    public var AXIS3: eDIRECTION?  {
      get {
        return sub_eCARTESIAN_TRANSFORMATION_OPERATOR_3D?.partialEntity._axis3
      }
      set(newValue) {
        guard let partial = sub_eCARTESIAN_TRANSFORMATION_OPERATOR_3D?.super_eCARTESIAN_TRANSFORMATION_OPERATOR_3D
          .partialEntity else { return }
        partial._axis3 = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eCARTESIAN_TRANSFORMATION_OPERATOR`` )
    public var AXIS2: eDIRECTION?  {
      get {
        return self.partialEntity._axis2
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._axis2 = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eCARTESIAN_TRANSFORMATION_OPERATOR`` )
    public var AXIS1: eDIRECTION?  {
      get {
        return self.partialEntity._axis1
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._axis1 = newValue
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUPER( ``eGEOMETRIC_REPRESENTATION_ITEM`` )
    public var DIM: tDIMENSION_COUNT?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"DIM") {
          return cached.value as! tDIMENSION_COUNT? 
        }
        let origin = super_eGEOMETRIC_REPRESENTATION_ITEM
        let value = tDIMENSION_COUNT(origin.partialEntity._dim__getter(SELF: origin))
        updateCache(derivedAttributeName:"DIM", value:value)
        return value
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_cartesian_transformation_operator.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eREPRESENTATION_ITEM.self) else { return nil }
      self.super_eREPRESENTATION_ITEM = super1

      guard let super2 = complexEntity?.entityReference(eGEOMETRIC_REPRESENTATION_ITEM.self) else { return nil }
      self.super_eGEOMETRIC_REPRESENTATION_ITEM = super2

      guard let super3 = complexEntity?.entityReference(eFUNCTIONALLY_DEFINED_TRANSFORMATION.self) else { return nil }
      self.super_eFUNCTIONALLY_DEFINED_TRANSFORMATION = super3

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _cartesian_transformation_operator.WHERE_wr1(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "CARTESIAN_TRANSFORMATION_OPERATOR", type: self, explicitAttributeCount: 4)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eREPRESENTATION_ITEM.self)
      entityDef.add(supertype: eGEOMETRIC_REPRESENTATION_ITEM.self)
      entityDef.add(supertype: eFUNCTIONALLY_DEFINED_TRANSFORMATION.self)
      entityDef.add(supertype: eCARTESIAN_TRANSFORMATION_OPERATOR.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "DESCRIPTION", keyPath: \eCARTESIAN_TRANSFORMATION_OPERATOR.DESCRIPTION, 
        kind: .explicitOptional, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "SCALE", keyPath: \eCARTESIAN_TRANSFORMATION_OPERATOR.SCALE, 
        kind: .explicitOptional, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "LOCAL_ORIGIN", keyPath: \eCARTESIAN_TRANSFORMATION_OPERATOR.LOCAL_ORIGIN, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "SCL", keyPath: \eCARTESIAN_TRANSFORMATION_OPERATOR.SCL, 
        kind: .derived, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "AXIS3", keyPath: \eCARTESIAN_TRANSFORMATION_OPERATOR.AXIS3, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "AXIS2", keyPath: \eCARTESIAN_TRANSFORMATION_OPERATOR.AXIS2, 
        kind: .explicitOptional, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "AXIS1", keyPath: \eCARTESIAN_TRANSFORMATION_OPERATOR.AXIS1, 
        kind: .explicitOptional, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "DIM", keyPath: \eCARTESIAN_TRANSFORMATION_OPERATOR.DIM, 
        kind: .derived, source: .superEntity, mayYieldEntityReference: false)

      return entityDef
    }

  }
}
