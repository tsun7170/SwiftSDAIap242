/* file: composite_hole.swift 	 generated: Mon Jan  3 16:32:52 2022 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.1, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY composite_hole
    SUBTYPE OF ( compound_feature );
    WHERE
      wr1: ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.EXPLICIT_COMPOSITE_HOLE' IN TYPEOF( SELF ) ) 
               XOR ( SELF\characterized_object.description IN [ 'counterbore', 'countersunk'] ) );
      wr2: ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.EXPLICIT_COMPOSITE_HOLE' IN TYPEOF( SELF ) ) 
               XOR ( SIZEOF( QUERY ( pds <* USEDIN( SELF, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
               + 'PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pds ) ) AND ( SIZEOF( QUERY ( csa <* USEDIN( pds, 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( ( 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.COMPOSITE_SHAPE_ASPECT'  IN TYPEOF( csa ) ) 
               AND ( SIZEOF( QUERY ( sar <* csa.component_relationships | ( ( 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.FEATURE_COMPONENT_RELATIONSHIP'  IN TYPEOF( 
               sar ) ) AND ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ROUND_HOLE' IN TYPEOF( sar.
               related_shape_aspect ) ) ) ) ) = 2 ) ) ) ) = 1 ) ) ) ) = 1 ) );
      wr3: ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.EXPLICIT_COMPOSITE_HOLE' IN TYPEOF( SELF ) ) 
               XOR ( ( NOT ( SELF\characterized_object.description = 'countersunk' ) ) OR ( SIZEOF( 
               QUERY ( pds <* USEDIN( SELF, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
               + 'PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pds ) ) AND ( SIZEOF( QUERY ( csa <* USEDIN( pds, 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( ( 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.COMPOSITE_SHAPE_ASPECT'  IN TYPEOF( csa ) ) 
               AND ( SIZEOF( QUERY ( sar <* csa.component_relationships | ( ( 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ROUND_HOLE'  IN TYPEOF( sar.
               related_shape_aspect ) ) AND ( NOT ( SIZEOF( QUERY ( pds <* QUERY ( pd <* USEDIN( sar.
               related_shape_aspect, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PROPERTY_DEFINITION.'
               + 'DEFINITION'  ) | ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
               + 'PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) ) | ( NOT ( SIZEOF( QUERY ( sa_occ <* USEDIN( 
               pds, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SHAPE_ASPECT.OF_SHAPE' ) | ( ( sa_occ.
               description = 'change in diameter occurrence' ) AND ( SIZEOF( QUERY ( fcr2 <* QUERY ( sar2 <* 
               USEDIN( sa_occ, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.'
               + 'RELATING_SHAPE_ASPECT'  ) | ( ( sar2.description = 'taper usage' ) AND ( 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.FEATURE_COMPONENT_RELATIONSHIP'  IN TYPEOF( 
               sar2 ) ) ) ) | ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.TAPER' IN TYPEOF( fcr2.
               related_shape_aspect ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) ) = 1 ) ) ) ) = 1 ) ) ) ) = 1 ) ) );
  END_ENTITY; -- composite_hole (line:9964 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	characterized_object
    ATTR:  name,	TYPE: label -- EXPLICIT (DYNAMIC)
      -- possibly overriden by
          ENTITY: shape_feature_definition_element_relationship,	TYPE: label	(as DERIVED)
          ENTITY: shape_feature_fit_relationship,	TYPE: label	(as DERIVED)
          ENTITY: characterized_representation,	TYPE: label	(as DERIVED)
          ENTITY: shape_feature_definition_relationship,	TYPE: label	(as DERIVED)

    ATTR:  description,	TYPE: OPTIONAL text -- EXPLICIT (DYNAMIC)
      -- possibly overriden by
          ENTITY: shape_feature_definition_element_relationship,	TYPE: text	(as DERIVED)
          ENTITY: shape_feature_fit_relationship,	TYPE: text	(as DERIVED)
          ENTITY: characterized_representation,	TYPE: text	(as DERIVED)
          ENTITY: shape_feature_definition_relationship,	TYPE: text	(as DERIVED)


  SUPER- ENTITY(2)	feature_definition
    (no local attributes)

  SUPER- ENTITY(3)	compound_feature
    (no local attributes)

  ENTITY(SELF)	composite_hole
    (no local attributes)

  SUB- ENTITY(5)	simplified_counterdrill_hole_definition
    (no local attributes)

  SUB- ENTITY(6)	counterdrill_hole_definition
    ATTR:  counterbore,	TYPE: explicit_round_hole -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  counterdrill_angle,	TYPE: positive_plane_angle_measure_with_unit -- EXPLICIT

    ATTR:  counterdrill_angle_tolerance,	TYPE: tolerance_value -- EXPLICIT

    ATTR:  drilled_hole_depth,	TYPE: OPTIONAL positive_length_measure_with_unit -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  drilled_hole_depth_tolerance,	TYPE: OPTIONAL tolerance_value -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  drilled_hole_diameter,	TYPE: positive_length_measure_with_unit -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  drilled_hole_diameter_tolerance,	TYPE: OPTIONAL tolerance_value_or_limits_and_fits -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  through_hole,	TYPE: BOOLEAN -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(7)	simplified_countersink_hole_definition
    (no local attributes)

  SUB- ENTITY(8)	countersink_hole_definition
    ATTR:  countersink_angle,	TYPE: positive_plane_angle_measure_with_unit -- EXPLICIT

    ATTR:  countersink_angle_tolerance,	TYPE: tolerance_value -- EXPLICIT

    ATTR:  countersink_diameter,	TYPE: positive_length_measure_with_unit -- EXPLICIT

    ATTR:  countersink_diameter_tolerance,	TYPE: OPTIONAL tolerance_value_or_limits_and_fits -- EXPLICIT

    ATTR:  drilled_hole_depth,	TYPE: OPTIONAL positive_length_measure_with_unit -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  drilled_hole_depth_tolerance,	TYPE: OPTIONAL tolerance_value -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  drilled_hole_diameter,	TYPE: positive_length_measure_with_unit -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  drilled_hole_diameter_tolerance,	TYPE: OPTIONAL tolerance_value_or_limits_and_fits -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  through_hole,	TYPE: BOOLEAN -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(9)	simplified_spotface_hole_definition
    (no local attributes)

  SUB- ENTITY(10)	spotface_hole_definition
    REDCR: counterbore,	TYPE: LIST [1 : ?] OF UNIQUE spotface_definition -- EXPLICIT	(AMBIGUOUS/MASKED)
      -- OVERRIDING ENTITY: counterbore_hole_definition

    ATTR:  spotface,	TYPE: LIST [1 : ?] OF UNIQUE spotface_definition -- DERIVED
      := SELF\counterbore_hole_definition.counterbore


  SUB- ENTITY(11)	simplified_counterbore_hole_definition
    (no local attributes)

  SUB- ENTITY(12)	counterbore_hole_definition
    ATTR:  counterbore,	TYPE: LIST [1 : ?] OF UNIQUE explicit_round_hole -- EXPLICIT	(AMBIGUOUS/MASKED)
      -- possibly overriden by
          ENTITY: spotface_hole_definition,	TYPE: LIST [1 : ?] OF UNIQUE spotface_definition

    ATTR:  drilled_hole_depth,	TYPE: OPTIONAL positive_length_measure_with_unit -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  drilled_hole_depth_tolerance,	TYPE: OPTIONAL tolerance_value -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  drilled_hole_diameter,	TYPE: positive_length_measure_with_unit -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  drilled_hole_diameter_tolerance,	TYPE: OPTIONAL tolerance_value_or_limits_and_fits -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  through_hole,	TYPE: BOOLEAN -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(13)	explicit_composite_hole
    ATTR:  placement,	TYPE: shape_representation -- EXPLICIT

    ATTR:  explicit_shape,	TYPE: SET [0 : ?] OF item_identified_representation_usage -- INVERSE
      FOR definition;


*/


//MARK: - Partial Entity
  public final class _composite_hole : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eCOMPOSITE_HOLE.self
    }

    //ATTRIBUTES
    // (no local attributes)

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: eCOMPOSITE_HOLE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.TYPEOF(SELF, IS: eEXPLICIT_COMPOSITE_HOLE.self)
      let _TEMP2 = SELF.GROUP_REF(eCHARACTERIZED_OBJECT.self)
      let _TEMP3 = _TEMP2?.DESCRIPTION
      let _TEMP4 = ([SDAI.AIE(SDAI.STRING("counterbore")), 
        SDAI.AIE(SDAI.STRING("countersunk"))] as [SDAI.AggregationInitializerElement<SDAI.STRING>])
      let _TEMP5 = SDAI.aggregate(_TEMP4, contains: SDAI.STRING(/*tTEXT*/_TEMP3))
      let _TEMP6 = _TEMP1 .!=. _TEMP5
      return _TEMP6
    }
    public static func WHERE_wr2(SELF: eCOMPOSITE_HOLE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.TYPEOF(SELF, IS: eEXPLICIT_COMPOSITE_HOLE.self)
      let _TEMP2 = SDAI.USEDIN(T: SELF, ROLE: \AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF
        .ePROPERTY_DEFINITION.DEFINITION)
      let _TEMP3 = _TEMP2.QUERY{ PDS in 

          let _TEMP1 = SDAI.TYPEOF(PDS, IS: ePRODUCT_DEFINITION_SHAPE.self)
          let _TEMP2 = SDAI.USEDIN(T: PDS, ROLE: \AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF
            .eSHAPE_ASPECT.OF_SHAPE)
          let _TEMP3 = _TEMP2.QUERY{ CSA in 

              let _TEMP1 = SDAI.TYPEOF(CSA, IS: eCOMPOSITE_SHAPE_ASPECT.self)
              let _TEMP2 = /*runtime*/CSA.COMPONENT_RELATIONSHIPS
              let _TEMP3 = /*runtime*/SDAI.FORCE_OPTIONAL(_TEMP2)?
                .QUERY{ SAR in 

                  let _TEMP1 = SDAI.TYPEOF(SAR, IS: eFEATURE_COMPONENT_RELATIONSHIP.self)
                  let _TEMP2 = SDAI.TYPEOF(SAR.RELATED_SHAPE_ASPECT, IS: eROUND_HOLE.self)
                  let _TEMP3 = _TEMP1 && _TEMP2
                  return _TEMP3 }
              let _TEMP4 = SDAI.SIZEOF(SDAI.AGGREGATE<SDAI.GENERIC>(/*runtime*/_TEMP3))
              let _TEMP5 = _TEMP4 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(2))
              let _TEMP6 = _TEMP1 && _TEMP5
              return _TEMP6 }
          let _TEMP4 = SDAI.SIZEOF(_TEMP3)
          let _TEMP5 = _TEMP4 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
          let _TEMP6 = _TEMP1 && _TEMP5
          return _TEMP6 }
      let _TEMP4 = SDAI.SIZEOF(_TEMP3)
      let _TEMP5 = _TEMP4 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
      let _TEMP6 = _TEMP1 .!=. _TEMP5
      return _TEMP6
    }
    public static func WHERE_wr3(SELF: eCOMPOSITE_HOLE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.TYPEOF(SELF, IS: eEXPLICIT_COMPOSITE_HOLE.self)
      let _TEMP2 = SELF.GROUP_REF(eCHARACTERIZED_OBJECT.self)
      let _TEMP3 = _TEMP2?.DESCRIPTION
      let _TEMP4 = _TEMP3 .==. SDAI.FORCE_OPTIONAL(SDAI.STRING("countersunk"))
      let _TEMP5 =  !_TEMP4
      let _TEMP6 = SDAI.USEDIN(T: SELF, ROLE: \AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF
        .ePROPERTY_DEFINITION.DEFINITION)
      let _TEMP7 = _TEMP6.QUERY{ PDS in 

          let _TEMP1 = SDAI.TYPEOF(PDS, IS: ePRODUCT_DEFINITION_SHAPE.self)
          let _TEMP2 = SDAI.USEDIN(T: PDS, ROLE: \AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF
            .eSHAPE_ASPECT.OF_SHAPE)
          let _TEMP3 = _TEMP2.QUERY{ CSA in 

              let _TEMP1 = SDAI.TYPEOF(CSA, IS: eCOMPOSITE_SHAPE_ASPECT.self)
              let _TEMP2 = /*runtime*/CSA.COMPONENT_RELATIONSHIPS
              let _TEMP3 = /*runtime*/SDAI.FORCE_OPTIONAL(_TEMP2)?
                .QUERY{ SAR in 

                  let _TEMP1 = SDAI.TYPEOF(SAR.RELATED_SHAPE_ASPECT, IS: eROUND_HOLE.self)
                  let _TEMP2 = /*runtime*/SAR.RELATED_SHAPE_ASPECT
                  let _TEMP3 = SDAI.USEDIN(T: _TEMP2, ROLE: \AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF
                    .ePROPERTY_DEFINITION.DEFINITION)
                  let _TEMP4 = _TEMP3
                    .QUERY{ PD in 

                      let _TEMP1 = SDAI.TYPEOF(PD, IS: ePRODUCT_DEFINITION_SHAPE.self)
                      return _TEMP1 }
                  let _TEMP5 = _TEMP4
                    .QUERY{ PDS in 

                      let _TEMP1 = SDAI.USEDIN(T: PDS, ROLE: \AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF
                        .eSHAPE_ASPECT.OF_SHAPE)
                      let _TEMP2 = _TEMP1
                        .QUERY{ SA_OCC in 

                          let _TEMP1 = /*runtime*/SA_OCC.DESCRIPTION
                          let _TEMP2 = SDAI.FORCE_OPTIONAL(/*runtime*/_TEMP1) .==. SDAI.FORCE_OPTIONAL(SDAI.STRING(
                            "change in diameter occurrence"))
                          let _TEMP3 = SDAI.USEDIN(T: SA_OCC, 
                            ROLE: \AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eSHAPE_ASPECT_RELATIONSHIP
                            .RELATING_SHAPE_ASPECT)
                          let _TEMP4 = _TEMP3
                            .QUERY{ SAR2 in 

                              let _TEMP1 = /*runtime*/SAR2.DESCRIPTION
                              let _TEMP2 = SDAI.FORCE_OPTIONAL(/*runtime*/_TEMP1) .==. SDAI.FORCE_OPTIONAL(
                                SDAI.STRING("taper usage"))
                              let _TEMP3 = SDAI.TYPEOF(SAR2, IS: eFEATURE_COMPONENT_RELATIONSHIP.self)
                              let _TEMP4 = _TEMP2 && _TEMP3
                              return _TEMP4 }
                          let _TEMP5 = _TEMP4
                            .QUERY{ FCR2 in 

                              let _TEMP1 = SDAI.TYPEOF(FCR2.RELATED_SHAPE_ASPECT, IS: eTAPER.self)
                              return _TEMP1 }
                          let _TEMP6 = SDAI.SIZEOF(_TEMP5)
                          let _TEMP7 = _TEMP6 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
                          let _TEMP8 = _TEMP2 && _TEMP7
                          return _TEMP8 }
                      let _TEMP3 = SDAI.SIZEOF(_TEMP2)
                      let _TEMP4 = _TEMP3 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
                      let _TEMP5 =  !_TEMP4
                      return _TEMP5 }
                  let _TEMP6 = SDAI.SIZEOF(_TEMP5)
                  let _TEMP7 = _TEMP6 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
                  let _TEMP8 =  !_TEMP7
                  let _TEMP9 = _TEMP1 && _TEMP8
                  return _TEMP9 }
              let _TEMP4 = SDAI.SIZEOF(SDAI.AGGREGATE<SDAI.GENERIC>(/*runtime*/_TEMP3))
              let _TEMP5 = _TEMP4 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
              let _TEMP6 = _TEMP1 && _TEMP5
              return _TEMP6 }
          let _TEMP4 = SDAI.SIZEOF(_TEMP3)
          let _TEMP5 = _TEMP4 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
          let _TEMP6 = _TEMP1 && _TEMP5
          return _TEMP6 }
      let _TEMP8 = SDAI.SIZEOF(_TEMP7)
      let _TEMP9 = _TEMP8 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
      let _TEMP10 = _TEMP5 || _TEMP9
      let _TEMP11 = _TEMP1 .!=. _TEMP10
      return _TEMP11
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init() {
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 0
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      self.init( )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY composite_hole
    SUBTYPE OF ( compound_feature );
    WHERE
      wr1: ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.EXPLICIT_COMPOSITE_HOLE' IN TYPEOF( SELF ) ) 
               XOR ( SELF\characterized_object.description IN [ 'counterbore', 'countersunk'] ) );
      wr2: ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.EXPLICIT_COMPOSITE_HOLE' IN TYPEOF( SELF ) ) 
               XOR ( SIZEOF( QUERY ( pds <* USEDIN( SELF, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
               + 'PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pds ) ) AND ( SIZEOF( QUERY ( csa <* USEDIN( pds, 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( ( 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.COMPOSITE_SHAPE_ASPECT'  IN TYPEOF( csa ) ) 
               AND ( SIZEOF( QUERY ( sar <* csa.component_relationships | ( ( 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.FEATURE_COMPONENT_RELATIONSHIP'  IN TYPEOF( 
               sar ) ) AND ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ROUND_HOLE' IN TYPEOF( sar.
               related_shape_aspect ) ) ) ) ) = 2 ) ) ) ) = 1 ) ) ) ) = 1 ) );
      wr3: ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.EXPLICIT_COMPOSITE_HOLE' IN TYPEOF( SELF ) ) 
               XOR ( ( NOT ( SELF\characterized_object.description = 'countersunk' ) ) OR ( SIZEOF( 
               QUERY ( pds <* USEDIN( SELF, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
               + 'PROPERTY_DEFINITION.DEFINITION'  ) | ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
               + 'PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pds ) ) AND ( SIZEOF( QUERY ( csa <* USEDIN( pds, 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SHAPE_ASPECT.OF_SHAPE'  ) | ( ( 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.COMPOSITE_SHAPE_ASPECT'  IN TYPEOF( csa ) ) 
               AND ( SIZEOF( QUERY ( sar <* csa.component_relationships | ( ( 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ROUND_HOLE'  IN TYPEOF( sar.
               related_shape_aspect ) ) AND ( NOT ( SIZEOF( QUERY ( pds <* QUERY ( pd <* USEDIN( sar.
               related_shape_aspect, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PROPERTY_DEFINITION.'
               + 'DEFINITION'  ) | ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
               + 'PRODUCT_DEFINITION_SHAPE'  IN TYPEOF( pd ) ) ) | ( NOT ( SIZEOF( QUERY ( sa_occ <* USEDIN( 
               pds, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SHAPE_ASPECT.OF_SHAPE' ) | ( ( sa_occ.
               description = 'change in diameter occurrence' ) AND ( SIZEOF( QUERY ( fcr2 <* QUERY ( sar2 <* 
               USEDIN( sa_occ, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SHAPE_ASPECT_RELATIONSHIP.'
               + 'RELATING_SHAPE_ASPECT'  ) | ( ( sar2.description = 'taper usage' ) AND ( 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.FEATURE_COMPONENT_RELATIONSHIP'  IN TYPEOF( 
               sar2 ) ) ) ) | ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.TAPER' IN TYPEOF( fcr2.
               related_shape_aspect ) ) ) ) = 1 ) ) ) ) = 0 ) ) ) ) = 0 ) ) ) ) ) = 1 ) ) ) ) = 1 ) ) ) ) = 1 ) ) );
  END_ENTITY; -- composite_hole (line:9964 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eCOMPOSITE_HOLE : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _composite_hole.self
    }
    public let partialEntity: _composite_hole

    //MARK: SUPERTYPES
    public let super_eCHARACTERIZED_OBJECT: eCHARACTERIZED_OBJECT 	// [1]
    public let super_eFEATURE_DEFINITION: eFEATURE_DEFINITION 	// [2]
    public let super_eCOMPOUND_FEATURE: eCOMPOUND_FEATURE 	// [3]
    public var super_eCOMPOSITE_HOLE: eCOMPOSITE_HOLE { return self } 	// [4]

    //MARK: SUBTYPES
    public var sub_eSIMPLIFIED_COUNTERDRILL_HOLE_DEFINITION: eSIMPLIFIED_COUNTERDRILL_HOLE_DEFINITION? {	// [5]
      return self.complexEntity.entityReference(eSIMPLIFIED_COUNTERDRILL_HOLE_DEFINITION.self)
    }

    public var sub_eCOUNTERDRILL_HOLE_DEFINITION: eCOUNTERDRILL_HOLE_DEFINITION? {	// [6]
      return self.complexEntity.entityReference(eCOUNTERDRILL_HOLE_DEFINITION.self)
    }

    public var sub_eSIMPLIFIED_COUNTERSINK_HOLE_DEFINITION: eSIMPLIFIED_COUNTERSINK_HOLE_DEFINITION? {	// [7]
      return self.complexEntity.entityReference(eSIMPLIFIED_COUNTERSINK_HOLE_DEFINITION.self)
    }

    public var sub_eCOUNTERSINK_HOLE_DEFINITION: eCOUNTERSINK_HOLE_DEFINITION? {	// [8]
      return self.complexEntity.entityReference(eCOUNTERSINK_HOLE_DEFINITION.self)
    }

    public var sub_eSIMPLIFIED_SPOTFACE_HOLE_DEFINITION: eSIMPLIFIED_SPOTFACE_HOLE_DEFINITION? {	// [9]
      return self.complexEntity.entityReference(eSIMPLIFIED_SPOTFACE_HOLE_DEFINITION.self)
    }

    public var sub_eSPOTFACE_HOLE_DEFINITION: eSPOTFACE_HOLE_DEFINITION? {	// [10]
      return self.complexEntity.entityReference(eSPOTFACE_HOLE_DEFINITION.self)
    }

    public var sub_eSIMPLIFIED_COUNTERBORE_HOLE_DEFINITION: eSIMPLIFIED_COUNTERBORE_HOLE_DEFINITION? {	// [11]
      return self.complexEntity.entityReference(eSIMPLIFIED_COUNTERBORE_HOLE_DEFINITION.self)
    }

    public var sub_eCOUNTERBORE_HOLE_DEFINITION: eCOUNTERBORE_HOLE_DEFINITION? {	// [12]
      return self.complexEntity.entityReference(eCOUNTERBORE_HOLE_DEFINITION.self)
    }

    public var sub_eEXPLICIT_COMPOSITE_HOLE: eEXPLICIT_COMPOSITE_HOLE? {	// [13]
      return self.complexEntity.entityReference(eEXPLICIT_COMPOSITE_HOLE.self)
    }


    //MARK: ATTRIBUTES
    // DRILLED_HOLE_DEPTH: (3 AMBIGUOUS REFs)

    // DRILLED_HOLE_DIAMETER_TOLERANCE: (3 AMBIGUOUS REFs)

    // THROUGH_HOLE: (3 AMBIGUOUS REFs)

    // COUNTERBORE: (3 AMBIGUOUS REFs)

    // DRILLED_HOLE_DIAMETER: (3 AMBIGUOUS REFs)

    // DRILLED_HOLE_DEPTH_TOLERANCE: (3 AMBIGUOUS REFs)

    /// __EXPLICIT(DYNAMIC)__ attribute
    /// - origin: SUPER( ``eCHARACTERIZED_OBJECT`` )
    public var DESCRIPTION: tTEXT?  {
      get {
        if let resolved = _characterized_object._description__provider(complex: self.complexEntity) {
          let value = resolved._description__getter(complex: self.complexEntity)
          return value
        }
        else {
          return super_eCHARACTERIZED_OBJECT.partialEntity._description
        }
      }
      set(newValue) {
        if let _ = _characterized_object._description__provider(complex: self.complexEntity) { return }

        let partial = super_eCHARACTERIZED_OBJECT.partialEntity
        partial._description = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCOUNTERDRILL_HOLE_DEFINITION`` )
    public var COUNTERDRILL_ANGLE_TOLERANCE: eTOLERANCE_VALUE?  {
      get {
        return sub_eCOUNTERDRILL_HOLE_DEFINITION?.partialEntity._counterdrill_angle_tolerance
      }
      set(newValue) {
        guard let partial = sub_eCOUNTERDRILL_HOLE_DEFINITION?.super_eCOUNTERDRILL_HOLE_DEFINITION
          .partialEntity else { return }
        partial._counterdrill_angle_tolerance = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCOUNTERSINK_HOLE_DEFINITION`` )
    public var COUNTERSINK_DIAMETER: ePOSITIVE_LENGTH_MEASURE_WITH_UNIT?  {
      get {
        return sub_eCOUNTERSINK_HOLE_DEFINITION?.partialEntity._countersink_diameter
      }
      set(newValue) {
        guard let partial = sub_eCOUNTERSINK_HOLE_DEFINITION?.super_eCOUNTERSINK_HOLE_DEFINITION
          .partialEntity else { return }
        partial._countersink_diameter = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCOUNTERSINK_HOLE_DEFINITION`` )
    public var COUNTERSINK_ANGLE: ePOSITIVE_PLANE_ANGLE_MEASURE_WITH_UNIT?  {
      get {
        return sub_eCOUNTERSINK_HOLE_DEFINITION?.partialEntity._countersink_angle
      }
      set(newValue) {
        guard let partial = sub_eCOUNTERSINK_HOLE_DEFINITION?.super_eCOUNTERSINK_HOLE_DEFINITION
          .partialEntity else { return }
        partial._countersink_angle = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eEXPLICIT_COMPOSITE_HOLE`` )
    public var PLACEMENT: eSHAPE_REPRESENTATION?  {
      get {
        return sub_eEXPLICIT_COMPOSITE_HOLE?.partialEntity._placement
      }
      set(newValue) {
        guard let partial = sub_eEXPLICIT_COMPOSITE_HOLE?.super_eEXPLICIT_COMPOSITE_HOLE.partialEntity
          else { return }
        partial._placement = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eSPOTFACE_HOLE_DEFINITION`` )
    public var SPOTFACE: (SDAI.LIST_UNIQUE<eSPOTFACE_DEFINITION>/*[1:nil]*/ )?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"SPOTFACE") {
          return cached.value as! (SDAI.LIST_UNIQUE<eSPOTFACE_DEFINITION>/*[1:nil]*/ )? 
        }
        guard let origin = sub_eSPOTFACE_HOLE_DEFINITION else { return nil }
        let value = SDAI.LIST_UNIQUE<eSPOTFACE_DEFINITION>(
          origin.partialEntity._spotface__getter(SELF: origin))
        updateCache(derivedAttributeName:"SPOTFACE", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCOUNTERDRILL_HOLE_DEFINITION`` )
    public var COUNTERDRILL_ANGLE: ePOSITIVE_PLANE_ANGLE_MEASURE_WITH_UNIT?  {
      get {
        return sub_eCOUNTERDRILL_HOLE_DEFINITION?.partialEntity._counterdrill_angle
      }
      set(newValue) {
        guard let partial = sub_eCOUNTERDRILL_HOLE_DEFINITION?.super_eCOUNTERDRILL_HOLE_DEFINITION
          .partialEntity else { return }
        partial._counterdrill_angle = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCOUNTERSINK_HOLE_DEFINITION`` )
    public var COUNTERSINK_ANGLE_TOLERANCE: eTOLERANCE_VALUE?  {
      get {
        return sub_eCOUNTERSINK_HOLE_DEFINITION?.partialEntity._countersink_angle_tolerance
      }
      set(newValue) {
        guard let partial = sub_eCOUNTERSINK_HOLE_DEFINITION?.super_eCOUNTERSINK_HOLE_DEFINITION
          .partialEntity else { return }
        partial._countersink_angle_tolerance = SDAI.UNWRAP(newValue)
      }
    }

    /// __INVERSE__ attribute
    /// observing eITEM_IDENTIFIED_REPRESENTATION_USAGE .DEFINITION
    /// - origin: SUB( ``eEXPLICIT_COMPOSITE_HOLE`` )
    public var EXPLICIT_SHAPE: (SDAI.SET<eITEM_IDENTIFIED_REPRESENTATION_USAGE>/*[0:nil]*/ )?  {
      get {
        return sub_eEXPLICIT_COMPOSITE_HOLE?.partialEntity._explicit_shape
      }
    }

    /// __EXPLICIT(DYNAMIC)__ attribute
    /// - origin: SUPER( ``eCHARACTERIZED_OBJECT`` )
    public var NAME: tLABEL {
      get {
        if let resolved = _characterized_object._name__provider(complex: self.complexEntity) {
          let value = resolved._name__getter(complex: self.complexEntity)
          return value
        }
        else {
          return SDAI.UNWRAP( super_eCHARACTERIZED_OBJECT.partialEntity._name )
        }
      }
      set(newValue) {
        if let _ = _characterized_object._name__provider(complex: self.complexEntity) { return }

        let partial = super_eCHARACTERIZED_OBJECT.partialEntity
        partial._name = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCOUNTERSINK_HOLE_DEFINITION`` )
    public var COUNTERSINK_DIAMETER_TOLERANCE: sTOLERANCE_VALUE_OR_LIMITS_AND_FITS?  {
      get {
        return sub_eCOUNTERSINK_HOLE_DEFINITION?.partialEntity._countersink_diameter_tolerance
      }
      set(newValue) {
        guard let partial = sub_eCOUNTERSINK_HOLE_DEFINITION?.super_eCOUNTERSINK_HOLE_DEFINITION
          .partialEntity else { return }
        partial._countersink_diameter_tolerance = newValue
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_composite_hole.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eCHARACTERIZED_OBJECT.self) else { return nil }
      self.super_eCHARACTERIZED_OBJECT = super1

      guard let super2 = complexEntity?.entityReference(eFEATURE_DEFINITION.self) else { return nil }
      self.super_eFEATURE_DEFINITION = super2

      guard let super3 = complexEntity?.entityReference(eCOMPOUND_FEATURE.self) else { return nil }
      self.super_eCOMPOUND_FEATURE = super3

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _composite_hole.WHERE_wr1(SELF: instance)
      result[prefix2 + " .WHERE_wr2"] = _composite_hole.WHERE_wr2(SELF: instance)
      result[prefix2 + " .WHERE_wr3"] = _composite_hole.WHERE_wr3(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "COMPOSITE_HOLE", type: self, explicitAttributeCount: 0)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eCHARACTERIZED_OBJECT.self)
      entityDef.add(supertype: eFEATURE_DEFINITION.self)
      entityDef.add(supertype: eCOMPOUND_FEATURE.self)
      entityDef.add(supertype: eCOMPOSITE_HOLE.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "DESCRIPTION", keyPath: \eCOMPOSITE_HOLE.DESCRIPTION, 
        kind: .explicitOptional, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "COUNTERDRILL_ANGLE_TOLERANCE", keyPath: \eCOMPOSITE_HOLE.COUNTERDRILL_ANGLE_TOLERANCE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "COUNTERSINK_DIAMETER", keyPath: \eCOMPOSITE_HOLE.COUNTERSINK_DIAMETER, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "COUNTERSINK_ANGLE", keyPath: \eCOMPOSITE_HOLE.COUNTERSINK_ANGLE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "PLACEMENT", keyPath: \eCOMPOSITE_HOLE.PLACEMENT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "SPOTFACE", keyPath: \eCOMPOSITE_HOLE.SPOTFACE, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "COUNTERDRILL_ANGLE", keyPath: \eCOMPOSITE_HOLE.COUNTERDRILL_ANGLE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "COUNTERSINK_ANGLE_TOLERANCE", keyPath: \eCOMPOSITE_HOLE.COUNTERSINK_ANGLE_TOLERANCE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "EXPLICIT_SHAPE", keyPath: \eCOMPOSITE_HOLE.EXPLICIT_SHAPE, 
        kind: .inverse, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "NAME", keyPath: \eCOMPOSITE_HOLE.NAME, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "COUNTERSINK_DIAMETER_TOLERANCE", keyPath: \eCOMPOSITE_HOLE.COUNTERSINK_DIAMETER_TOLERANCE, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: true)

      return entityDef
    }

  }
}
