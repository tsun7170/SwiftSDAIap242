/* file: composite_curve_segment.swift 	 generated: Mon Jan  3 16:32:52 2022 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.1, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY composite_curve_segment
    SUBTYPE OF ( founded_item );
      transition    : transition_code;
      same_sense    : BOOLEAN;
      parent_curve  : curve;
    INVERSE
      using_curves : BAG [1 : ?] OF composite_curve FOR segments -- defined in ENTITY: composite_curve;
    WHERE
      wr1: ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.BOUNDED_CURVE' IN TYPEOF( parent_curve ) );
  END_ENTITY; -- composite_curve_segment (line:9941 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	founded_item
    ATTR:  users,	TYPE: SET [0 : ?] OF founded_item_select -- DERIVED
      := using_items( SELF, [] )


  ENTITY(SELF)	composite_curve_segment
    ATTR:  transition,	TYPE: transition_code -- EXPLICIT

    ATTR:  same_sense,	TYPE: BOOLEAN -- EXPLICIT

    ATTR:  parent_curve,	TYPE: curve -- EXPLICIT

    ATTR:  using_curves,	TYPE: BAG [1 : ?] OF composite_curve -- INVERSE
      FOR segments;


  SUB- ENTITY(3)	reparametrised_composite_curve_segment
    ATTR:  param_length,	TYPE: parameter_value -- EXPLICIT


*/


//MARK: - Partial Entity
  public final class _composite_curve_segment : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eCOMPOSITE_CURVE_SEGMENT.self
    }

    //ATTRIBUTES
    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _transition: nTRANSITION_CODE // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _same_sense: SDAI.BOOLEAN // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _parent_curve: eCURVE // PLAIN EXPLICIT ATTRIBUTE

    /// INVERSE AGGREGATE ATTRIBUTE
    /// observing _composite_curve ._segments
    internal var _using_curves: SDAI.BAG<eCOMPOSITE_CURVE> {
      return __using_curves.map{ $0.reference }
    }
    private var __using_curves = SDAI.BAG<SDAI.UnownedWrap<eCOMPOSITE_CURVE>>(
      bound1: SDAI.UNWRAP(SDAI.INTEGER(1)), bound2: (nil as SDAI.INTEGER?), 
      SDAI.EMPLY_AGGREGATE) // unowned backing store
    /// INVERSE AGGREGATE ATTR SUPPORT(ADDER)
    internal func _using_curves__observeAddedReference(in complex: SDAI.ComplexEntity) {
      guard let newSource = complex.entityReference(eCOMPOSITE_CURVE.self) else { return }
      self.__using_curves.add(member: SDAI.UnownedWrap(newSource) )
    }
    /// INVERSE AGGREGATE ATTR SUPPORT(REMOVER)
    internal func _using_curves__observeRemovedReference(in complex: SDAI.ComplexEntity) {
      guard let oldSource = complex.entityReference(eCOMPOSITE_CURVE.self) else { return }
      let success = self.__using_curves.remove(member: SDAI.UnownedWrap(oldSource) )
      assert(success, "failed to remove inverse attribute element")
    }
    /// INVERSE AGGREGATE ATTR SUPPORT(LEAVING REFERENCE OWNER)
    internal func _using_curves__observe(leavingReferencerOwner complex: SDAI.ComplexEntity) {
      guard let oldSource = complex.entityReference(eCOMPOSITE_CURVE.self) else { return }
      let success = self.__using_curves.removeAll(member: SDAI.UnownedWrap(oldSource) )
      assert(success, "failed to remove inverse attribute elements")
    }

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._transition.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._same_sense.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._parent_curve.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._transition.value.isValueEqualOptionally(to: rhs._transition.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._same_sense.value.isValueEqualOptionally(to: rhs._same_sense.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._parent_curve.value.isValueEqualOptionally(to: rhs._parent_curve.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._transition.value.isValueEqualOptionally(to: rhs._transition.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._same_sense.value.isValueEqualOptionally(to: rhs._same_sense.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._parent_curve.value.isValueEqualOptionally(to: rhs._parent_curve.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: eCOMPOSITE_CURVE_SEGMENT?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.TYPEOF(SELF.PARENT_CURVE, IS: eBOUNDED_CURVE.self)
      return _TEMP1
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(TRANSITION: nTRANSITION_CODE, SAME_SENSE: SDAI.BOOLEAN, PARENT_CURVE: eCURVE) {
      self._transition = TRANSITION
      self._same_sense = SAME_SENSE
      self._parent_curve = PARENT_CURVE
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 3
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverRequiredParameter(as: nTRANSITION_CODE.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p1) = exchangeStructure.recoverRequiredParameter(as: SDAI.BOOLEAN.self, from: parameters[1])
      else { exchangeStructure.add(errorContext: "while recovering parameter #1 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p2) = exchangeStructure.recoverRequiredParameter(as: eCURVE.self, from: parameters[2])
      else { exchangeStructure.add(errorContext: "while recovering parameter #2 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( TRANSITION: p0, SAME_SENSE: p1, PARENT_CURVE: p2 )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY composite_curve_segment
    SUBTYPE OF ( founded_item );
      transition    : transition_code;
      same_sense    : BOOLEAN;
      parent_curve  : curve;
    INVERSE
      using_curves : BAG [1 : ?] OF composite_curve FOR segments -- defined in ENTITY: composite_curve;
    WHERE
      wr1: ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.BOUNDED_CURVE' IN TYPEOF( parent_curve ) );
  END_ENTITY; -- composite_curve_segment (line:9941 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eCOMPOSITE_CURVE_SEGMENT : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _composite_curve_segment.self
    }
    public let partialEntity: _composite_curve_segment

    //MARK: SUPERTYPES
    public let super_eFOUNDED_ITEM: eFOUNDED_ITEM 	// [1]
    public var super_eCOMPOSITE_CURVE_SEGMENT: eCOMPOSITE_CURVE_SEGMENT { return self } 	// [2]

    //MARK: SUBTYPES
    public var sub_eREPARAMETRISED_COMPOSITE_CURVE_SEGMENT: eREPARAMETRISED_COMPOSITE_CURVE_SEGMENT? {	// [3]
      return self.complexEntity.entityReference(eREPARAMETRISED_COMPOSITE_CURVE_SEGMENT.self)
    }


    //MARK: ATTRIBUTES
    /// __DERIVE__ attribute
    /// - origin: SUPER( ``eFOUNDED_ITEM`` )
    public var USERS: (SDAI.SET<sFOUNDED_ITEM_SELECT>/*[0:nil]*/ )?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"USERS") {
          return cached.value as! (SDAI.SET<sFOUNDED_ITEM_SELECT>/*[0:nil]*/ )? 
        }
        let origin = super_eFOUNDED_ITEM
        let value = SDAI.SET<sFOUNDED_ITEM_SELECT>(origin.partialEntity._users__getter(SELF: origin))
        updateCache(derivedAttributeName:"USERS", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eCOMPOSITE_CURVE_SEGMENT`` )
    public var TRANSITION: nTRANSITION_CODE {
      get {
        return SDAI.UNWRAP( self.partialEntity._transition )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._transition = SDAI.UNWRAP(newValue)
      }
    }

    /// __INVERSE__ attribute
    /// observing eCOMPOSITE_CURVE .SEGMENTS
    /// - origin: SELF( ``eCOMPOSITE_CURVE_SEGMENT`` )
    public var USING_CURVES: SDAI.BAG<eCOMPOSITE_CURVE>/*[1:nil]*/  {
      get {
        return SDAI.UNWRAP( self.partialEntity._using_curves )
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eCOMPOSITE_CURVE_SEGMENT`` )
    public var PARENT_CURVE: eCURVE {
      get {
        return SDAI.UNWRAP( self.partialEntity._parent_curve )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._parent_curve = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eREPARAMETRISED_COMPOSITE_CURVE_SEGMENT`` )
    public var PARAM_LENGTH: tPARAMETER_VALUE?  {
      get {
        return sub_eREPARAMETRISED_COMPOSITE_CURVE_SEGMENT?.partialEntity._param_length
      }
      set(newValue) {
        guard let partial = sub_eREPARAMETRISED_COMPOSITE_CURVE_SEGMENT?.super_eREPARAMETRISED_COMPOSITE_CURVE_SEGMENT
          .partialEntity else { return }
        partial._param_length = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eCOMPOSITE_CURVE_SEGMENT`` )
    public var SAME_SENSE: SDAI.BOOLEAN {
      get {
        return SDAI.UNWRAP( self.partialEntity._same_sense )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._same_sense = SDAI.UNWRAP(newValue)
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_composite_curve_segment.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eFOUNDED_ITEM.self) else { return nil }
      self.super_eFOUNDED_ITEM = super1

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _composite_curve_segment.WHERE_wr1(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "COMPOSITE_CURVE_SEGMENT", type: self, explicitAttributeCount: 3)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eFOUNDED_ITEM.self)
      entityDef.add(supertype: eCOMPOSITE_CURVE_SEGMENT.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "USERS", keyPath: \eCOMPOSITE_CURVE_SEGMENT.USERS, 
        kind: .derived, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "TRANSITION", keyPath: \eCOMPOSITE_CURVE_SEGMENT.TRANSITION, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "USING_CURVES", keyPath: \eCOMPOSITE_CURVE_SEGMENT.USING_CURVES, 
        kind: .inverse, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "PARENT_CURVE", keyPath: \eCOMPOSITE_CURVE_SEGMENT.PARENT_CURVE, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "PARAM_LENGTH", keyPath: \eCOMPOSITE_CURVE_SEGMENT.PARAM_LENGTH, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "SAME_SENSE", keyPath: \eCOMPOSITE_CURVE_SEGMENT.SAME_SENSE, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: false)

      return entityDef
    }

  }
}
