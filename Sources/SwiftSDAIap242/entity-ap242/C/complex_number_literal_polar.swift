/* file: complex_number_literal_polar.swift 	 generated: Sat Aug 14 13:46:02 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY complex_number_literal_polar
    SUBTYPE OF ( complex_number_literal );
      modulus   : REAL;
      argument  : REAL;
    DERIVE
      SELF\complex_number_literal.real_part : REAL := modulus * COS( argument );
      SELF\complex_number_literal.imag_part : REAL := modulus * SIN( argument );
    WHERE
      wr1: ( modulus >= 0 );
      wr2: ( ( 0 <= argument ) AND ( argument <= ( 2 * PI ) ) );
  END_ENTITY; -- complex_number_literal_polar (line:9803 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	generic_expression
    (no local attributes)

  SUPER- ENTITY(2)	simple_generic_expression
    (no local attributes)

  SUPER- ENTITY(3)	generic_literal
    (no local attributes)

  SUPER- ENTITY(4)	complex_number_literal
    ATTR:  real_part,	TYPE: REAL -- EXPLICIT (DYNAMIC)
      -- possibly overriden by
      *** ENTITY: complex_number_literal_polar,	TYPE: REAL	(as DERIVED)

    ATTR:  imag_part,	TYPE: REAL -- EXPLICIT (DYNAMIC)
      -- possibly overriden by
      *** ENTITY: complex_number_literal_polar,	TYPE: REAL	(as DERIVED)


  ENTITY(SELF)	complex_number_literal_polar
    ATTR:  modulus,	TYPE: REAL -- EXPLICIT

    ATTR:  argument,	TYPE: REAL -- EXPLICIT

    REDCR: real_part,	TYPE: REAL -- DERIVED (DYNAMIC)
      := modulus * COS( argument )
      -- OVERRIDING ENTITY: complex_number_literal

    REDCR: imag_part,	TYPE: REAL -- DERIVED (DYNAMIC)
      := modulus * SIN( argument )
      -- OVERRIDING ENTITY: complex_number_literal


*/


//MARK: - Partial Entity
  public final class _complex_number_literal_polar : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eCOMPLEX_NUMBER_LITERAL_POLAR.self
    }

    //ATTRIBUTES
    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _modulus: SDAI.REAL // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _argument: SDAI.REAL // PLAIN EXPLICIT ATTRIBUTE

    /// DERIVE ATTRIBUTE REDEFINITION(origin: eCOMPLEX_NUMBER_LITERAL)
    /// - attribute value provider protocol conformance wrapper
    internal func _real_part__getter(complex: SDAI.ComplexEntity) -> SDAI.REAL {
      let SELF = complex.entityReference( eCOMPLEX_NUMBER_LITERAL_POLAR.self )!
      return SDAI.UNWRAP( SDAI.REAL(SELF.REAL_PART) )
    }
    /// DERIVE ATTRIBUTE REDEFINITION(origin: eCOMPLEX_NUMBER_LITERAL)
    /// - gut of derived attribute logic
    internal func _real_part__getter(SELF: eCOMPLEX_NUMBER_LITERAL_POLAR) -> SDAI.REAL {

      let _TEMP1 = SDAI.COS(SELF.ARGUMENT)
      let _TEMP2 = SDAI.FORCE_OPTIONAL(SELF.MODULUS) * _TEMP1
      let value = _TEMP2
      return SDAI.UNWRAP( value )
    }

    /// DERIVE ATTRIBUTE REDEFINITION(origin: eCOMPLEX_NUMBER_LITERAL)
    /// - attribute value provider protocol conformance wrapper
    internal func _imag_part__getter(complex: SDAI.ComplexEntity) -> SDAI.REAL {
      let SELF = complex.entityReference( eCOMPLEX_NUMBER_LITERAL_POLAR.self )!
      return SDAI.UNWRAP( SDAI.REAL(SELF.IMAG_PART) )
    }
    /// DERIVE ATTRIBUTE REDEFINITION(origin: eCOMPLEX_NUMBER_LITERAL)
    /// - gut of derived attribute logic
    internal func _imag_part__getter(SELF: eCOMPLEX_NUMBER_LITERAL_POLAR) -> SDAI.REAL {

      let _TEMP1 = SDAI.SIN(SELF.ARGUMENT)
      let _TEMP2 = SDAI.FORCE_OPTIONAL(SELF.MODULUS) * _TEMP1
      let value = _TEMP2
      return SDAI.UNWRAP( value )
    }

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._modulus.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._argument.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._modulus.value.isValueEqualOptionally(to: rhs._modulus.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._argument.value.isValueEqualOptionally(to: rhs._argument.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._modulus.value.isValueEqualOptionally(to: rhs._modulus.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._argument.value.isValueEqualOptionally(to: rhs._argument.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: eCOMPLEX_NUMBER_LITERAL_POLAR?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.FORCE_OPTIONAL(SELF.MODULUS) >= SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      return _TEMP1
    }
    public static func WHERE_wr2(SELF: eCOMPLEX_NUMBER_LITERAL_POLAR?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0)) <= SDAI.FORCE_OPTIONAL(SELF.ARGUMENT)
      let _TEMP2 = SDAI.INTEGER(2) * SDAI.REAL(SDAI.PI)
      let _TEMP3 = SDAI.FORCE_OPTIONAL(SELF.ARGUMENT) <= SDAI.FORCE_OPTIONAL(_TEMP2)
      let _TEMP4 = _TEMP1 && _TEMP3
      return _TEMP4
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(MODULUS: SDAI.REAL, ARGUMENT: SDAI.REAL) {
      self._modulus = MODULUS
      self._argument = ARGUMENT
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 2
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverRequiredParameter(as: SDAI.REAL.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p1) = exchangeStructure.recoverRequiredParameter(as: SDAI.REAL.self, from: parameters[1])
      else { exchangeStructure.add(errorContext: "while recovering parameter #1 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( MODULUS: p0, ARGUMENT: p1 )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY complex_number_literal_polar
    SUBTYPE OF ( complex_number_literal );
      modulus   : REAL;
      argument  : REAL;
    DERIVE
      SELF\complex_number_literal.real_part : REAL := modulus * COS( argument );
      SELF\complex_number_literal.imag_part : REAL := modulus * SIN( argument );
    WHERE
      wr1: ( modulus >= 0 );
      wr2: ( ( 0 <= argument ) AND ( argument <= ( 2 * PI ) ) );
  END_ENTITY; -- complex_number_literal_polar (line:9803 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eCOMPLEX_NUMBER_LITERAL_POLAR : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _complex_number_literal_polar.self
    }
    public let partialEntity: _complex_number_literal_polar

    //MARK: SUPERTYPES
    public let super_eGENERIC_EXPRESSION: eGENERIC_EXPRESSION 	// [1]
    public let super_eSIMPLE_GENERIC_EXPRESSION: eSIMPLE_GENERIC_EXPRESSION 	// [2]
    public let super_eGENERIC_LITERAL: eGENERIC_LITERAL 	// [3]
    public let super_eCOMPLEX_NUMBER_LITERAL: eCOMPLEX_NUMBER_LITERAL 	// [4]
    public var super_eCOMPLEX_NUMBER_LITERAL_POLAR: eCOMPLEX_NUMBER_LITERAL_POLAR { return self } 	// [5]

    //MARK: SUBTYPES

    //MARK: ATTRIBUTES
    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eCOMPLEX_NUMBER_LITERAL_POLAR`` )
    public var MODULUS: SDAI.REAL {
      get {
        return SDAI.UNWRAP( self.partialEntity._modulus )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._modulus = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eCOMPLEX_NUMBER_LITERAL_POLAR`` )
    public var ARGUMENT: SDAI.REAL {
      get {
        return SDAI.UNWRAP( self.partialEntity._argument )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._argument = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT REDEF(DERIVE)__ attribute
    /// - origin: SELF( ``eCOMPLEX_NUMBER_LITERAL_POLAR`` )
    public var IMAG_PART: SDAI.REAL {
      get {
        if let cached = cachedValue(derivedAttributeName:"IMAG_PART") {
          return cached.value as! SDAI.REAL
        }
        let origin = self
        let value = SDAI.UNWRAP( origin.partialEntity._imag_part__getter(SELF: origin) )
        updateCache(derivedAttributeName:"IMAG_PART", value:value)
        return value
      }
    }

    /// __EXPLICIT REDEF(DERIVE)__ attribute
    /// - origin: SELF( ``eCOMPLEX_NUMBER_LITERAL_POLAR`` )
    public var REAL_PART: SDAI.REAL {
      get {
        if let cached = cachedValue(derivedAttributeName:"REAL_PART") {
          return cached.value as! SDAI.REAL
        }
        let origin = self
        let value = SDAI.UNWRAP( origin.partialEntity._real_part__getter(SELF: origin) )
        updateCache(derivedAttributeName:"REAL_PART", value:value)
        return value
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_complex_number_literal_polar.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eGENERIC_EXPRESSION.self) else { return nil }
      self.super_eGENERIC_EXPRESSION = super1

      guard let super2 = complexEntity?.entityReference(eSIMPLE_GENERIC_EXPRESSION.self) else { return nil }
      self.super_eSIMPLE_GENERIC_EXPRESSION = super2

      guard let super3 = complexEntity?.entityReference(eGENERIC_LITERAL.self) else { return nil }
      self.super_eGENERIC_LITERAL = super3

      guard let super4 = complexEntity?.entityReference(eCOMPLEX_NUMBER_LITERAL.self) else { return nil }
      self.super_eCOMPLEX_NUMBER_LITERAL = super4

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _complex_number_literal_polar.WHERE_wr1(SELF: instance)
      result[prefix2 + " .WHERE_wr2"] = _complex_number_literal_polar.WHERE_wr2(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "COMPLEX_NUMBER_LITERAL_POLAR", type: self, explicitAttributeCount: 2)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eGENERIC_EXPRESSION.self)
      entityDef.add(supertype: eSIMPLE_GENERIC_EXPRESSION.self)
      entityDef.add(supertype: eGENERIC_LITERAL.self)
      entityDef.add(supertype: eCOMPLEX_NUMBER_LITERAL.self)
      entityDef.add(supertype: eCOMPLEX_NUMBER_LITERAL_POLAR.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "MODULUS", keyPath: \eCOMPLEX_NUMBER_LITERAL_POLAR.MODULUS, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "ARGUMENT", keyPath: \eCOMPLEX_NUMBER_LITERAL_POLAR.ARGUMENT, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "IMAG_PART", keyPath: \eCOMPLEX_NUMBER_LITERAL_POLAR.IMAG_PART, 
        kind: .derivedRedeclaring, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "REAL_PART", keyPath: \eCOMPLEX_NUMBER_LITERAL_POLAR.REAL_PART, 
        kind: .derivedRedeclaring, source: .thisEntity, mayYieldEntityReference: false)

      return entityDef
    }

  }
}

//MARK: - partial Entity Dynamic Attribute Protocol Conformances
extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF._complex_number_literal_polar :
  eCOMPLEX_NUMBER_LITERAL__REAL_PART__provider, eCOMPLEX_NUMBER_LITERAL__IMAG_PART__provider {}
