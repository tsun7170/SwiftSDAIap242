/* file: convex_hexahedron.swift 	 generated: Mon Jan  3 16:32:52 2022 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.1, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY convex_hexahedron
    SUBTYPE OF ( faceted_primitive );
    WHERE
      wr1 : ( SIZEOF( points ) = 8 );
      wr2 : ( above_plane( points[1], points[2], points[3], points[4] ) = 0 );
      wr3 : ( above_plane( points[5], points[8], points[7], points[6] ) = 0 );
      wr4 : ( above_plane( points[1], points[4], points[8], points[5] ) = 0 );
      wr5 : ( above_plane( points[4], points[3], points[7], points[8] ) = 0 );
      wr6 : ( above_plane( points[3], points[2], points[6], points[7] ) = 0 );
      wr7 : ( above_plane( points[1], points[5], points[6], points[2] ) = 0 );
      wr8 : same_side( [points[1], points[2], points[3]], [points[5], points[6], points[7], points[8]] );
      wr9 : same_side( [points[1], points[4], points[8]], [points[3], points[7], points[6], points[2]] );
      wr10: same_side( [points[1], points[2], points[5]], [points[3], points[7], points[8], points[4]] );
      wr11: same_side( [points[5], points[6], points[7]], [points[1], points[2], points[3], points[4]] );
      wr12: same_side( [points[3], points[7], points[6]], [points[1], points[4], points[8], points[5]] );
      wr13: same_side( [points[3], points[7], points[8]], [points[1], points[5], points[6], points[2]] );
  END_ENTITY; -- convex_hexahedron (line:10671 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	representation_item
    ATTR:  name,	TYPE: label -- EXPLICIT


  SUPER- ENTITY(2)	geometric_representation_item
    ATTR:  dim,	TYPE: dimension_count -- DERIVED
      := dimension_of( SELF )


  SUPER- ENTITY(3)	faceted_primitive
    ATTR:  points,	TYPE: LIST [4 : ?] OF UNIQUE cartesian_point -- EXPLICIT


  ENTITY(SELF)	convex_hexahedron
    (no local attributes)

*/


//MARK: - Partial Entity
  public final class _convex_hexahedron : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eCONVEX_HEXAHEDRON.self
    }

    //ATTRIBUTES
    // (no local attributes)

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: eCONVEX_HEXAHEDRON?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.SIZEOF(SELF.POINTS)
      let _TEMP2 = _TEMP1 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(8))
      return _TEMP2
    }
    public static func WHERE_wr2(SELF: eCONVEX_HEXAHEDRON?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.POINTS[1]
      let _TEMP2 = SELF.POINTS[2]
      let _TEMP3 = SELF.POINTS[3]
      let _TEMP4 = SELF.POINTS[4]
      let _TEMP5 = ABOVE_PLANE(P1: _TEMP1, 
                               P2: _TEMP2, 
                               P3: _TEMP3, 
                               P4: _TEMP4)
      let _TEMP6 = _TEMP5 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      return _TEMP6
    }
    public static func WHERE_wr3(SELF: eCONVEX_HEXAHEDRON?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.POINTS[5]
      let _TEMP2 = SELF.POINTS[8]
      let _TEMP3 = SELF.POINTS[7]
      let _TEMP4 = SELF.POINTS[6]
      let _TEMP5 = ABOVE_PLANE(P1: _TEMP1, 
                               P2: _TEMP2, 
                               P3: _TEMP3, 
                               P4: _TEMP4)
      let _TEMP6 = _TEMP5 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      return _TEMP6
    }
    public static func WHERE_wr4(SELF: eCONVEX_HEXAHEDRON?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.POINTS[1]
      let _TEMP2 = SELF.POINTS[4]
      let _TEMP3 = SELF.POINTS[8]
      let _TEMP4 = SELF.POINTS[5]
      let _TEMP5 = ABOVE_PLANE(P1: _TEMP1, 
                               P2: _TEMP2, 
                               P3: _TEMP3, 
                               P4: _TEMP4)
      let _TEMP6 = _TEMP5 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      return _TEMP6
    }
    public static func WHERE_wr5(SELF: eCONVEX_HEXAHEDRON?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.POINTS[4]
      let _TEMP2 = SELF.POINTS[3]
      let _TEMP3 = SELF.POINTS[7]
      let _TEMP4 = SELF.POINTS[8]
      let _TEMP5 = ABOVE_PLANE(P1: _TEMP1, 
                               P2: _TEMP2, 
                               P3: _TEMP3, 
                               P4: _TEMP4)
      let _TEMP6 = _TEMP5 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      return _TEMP6
    }
    public static func WHERE_wr6(SELF: eCONVEX_HEXAHEDRON?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.POINTS[3]
      let _TEMP2 = SELF.POINTS[2]
      let _TEMP3 = SELF.POINTS[6]
      let _TEMP4 = SELF.POINTS[7]
      let _TEMP5 = ABOVE_PLANE(P1: _TEMP1, 
                               P2: _TEMP2, 
                               P3: _TEMP3, 
                               P4: _TEMP4)
      let _TEMP6 = _TEMP5 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      return _TEMP6
    }
    public static func WHERE_wr7(SELF: eCONVEX_HEXAHEDRON?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.POINTS[1]
      let _TEMP2 = SELF.POINTS[5]
      let _TEMP3 = SELF.POINTS[6]
      let _TEMP4 = SELF.POINTS[2]
      let _TEMP5 = ABOVE_PLANE(P1: _TEMP1, 
                               P2: _TEMP2, 
                               P3: _TEMP3, 
                               P4: _TEMP4)
      let _TEMP6 = _TEMP5 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      return _TEMP6
    }
    public static func WHERE_wr8(SELF: eCONVEX_HEXAHEDRON?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.POINTS[1]
      let _TEMP2 = SELF.POINTS[2]
      let _TEMP3 = SELF.POINTS[3]
      let _TEMP4 = SDAI.LIST<eCARTESIAN_POINT>(bound1: SDAI.UNWRAP(SDAI.INTEGER(3)), bound2: SDAI.INTEGER(3), 
        ([SDAI.AIE(_TEMP1), SDAI.AIE(_TEMP2), 
        SDAI.AIE(_TEMP3)] as [SDAI.AggregationInitializerElement<eCARTESIAN_POINT>]))
      let _TEMP5 = SELF.POINTS[5]
      let _TEMP6 = SELF.POINTS[6]
      let _TEMP7 = SELF.POINTS[7]
      let _TEMP8 = SELF.POINTS[8]
      let _TEMP9 = SDAI.LIST<eCARTESIAN_POINT>(bound1: SDAI.UNWRAP(SDAI.INTEGER(2)), bound2: (nil as SDAI.INTEGER?), 
        ([SDAI.AIE(_TEMP5), SDAI.AIE(_TEMP6), 
        SDAI.AIE(_TEMP7), SDAI.AIE(_TEMP8)] as [SDAI.AggregationInitializerElement<eCARTESIAN_POINT>]))
      let _TEMP10 = SAME_SIDE(PLANE_PTS: _TEMP4, 
                              TEST_POINTS: _TEMP9)
      return SDAI.LOGICAL(_TEMP10)
    }
    public static func WHERE_wr9(SELF: eCONVEX_HEXAHEDRON?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.POINTS[1]
      let _TEMP2 = SELF.POINTS[4]
      let _TEMP3 = SELF.POINTS[8]
      let _TEMP4 = SDAI.LIST<eCARTESIAN_POINT>(bound1: SDAI.UNWRAP(SDAI.INTEGER(3)), bound2: SDAI.INTEGER(3), 
        ([SDAI.AIE(_TEMP1), SDAI.AIE(_TEMP2), 
        SDAI.AIE(_TEMP3)] as [SDAI.AggregationInitializerElement<eCARTESIAN_POINT>]))
      let _TEMP5 = SELF.POINTS[3]
      let _TEMP6 = SELF.POINTS[7]
      let _TEMP7 = SELF.POINTS[6]
      let _TEMP8 = SELF.POINTS[2]
      let _TEMP9 = SDAI.LIST<eCARTESIAN_POINT>(bound1: SDAI.UNWRAP(SDAI.INTEGER(2)), bound2: (nil as SDAI.INTEGER?), 
        ([SDAI.AIE(_TEMP5), SDAI.AIE(_TEMP6), 
        SDAI.AIE(_TEMP7), SDAI.AIE(_TEMP8)] as [SDAI.AggregationInitializerElement<eCARTESIAN_POINT>]))
      let _TEMP10 = SAME_SIDE(PLANE_PTS: _TEMP4, 
                              TEST_POINTS: _TEMP9)
      return SDAI.LOGICAL(_TEMP10)
    }
    public static func WHERE_wr10(SELF: eCONVEX_HEXAHEDRON?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.POINTS[1]
      let _TEMP2 = SELF.POINTS[2]
      let _TEMP3 = SELF.POINTS[5]
      let _TEMP4 = SDAI.LIST<eCARTESIAN_POINT>(bound1: SDAI.UNWRAP(SDAI.INTEGER(3)), bound2: SDAI.INTEGER(3), 
        ([SDAI.AIE(_TEMP1), SDAI.AIE(_TEMP2), 
        SDAI.AIE(_TEMP3)] as [SDAI.AggregationInitializerElement<eCARTESIAN_POINT>]))
      let _TEMP5 = SELF.POINTS[3]
      let _TEMP6 = SELF.POINTS[7]
      let _TEMP7 = SELF.POINTS[8]
      let _TEMP8 = SELF.POINTS[4]
      let _TEMP9 = SDAI.LIST<eCARTESIAN_POINT>(bound1: SDAI.UNWRAP(SDAI.INTEGER(2)), bound2: (nil as SDAI.INTEGER?), 
        ([SDAI.AIE(_TEMP5), SDAI.AIE(_TEMP6), 
        SDAI.AIE(_TEMP7), SDAI.AIE(_TEMP8)] as [SDAI.AggregationInitializerElement<eCARTESIAN_POINT>]))
      let _TEMP10 = SAME_SIDE(PLANE_PTS: _TEMP4, 
                              TEST_POINTS: _TEMP9)
      return SDAI.LOGICAL(_TEMP10)
    }
    public static func WHERE_wr11(SELF: eCONVEX_HEXAHEDRON?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.POINTS[5]
      let _TEMP2 = SELF.POINTS[6]
      let _TEMP3 = SELF.POINTS[7]
      let _TEMP4 = SDAI.LIST<eCARTESIAN_POINT>(bound1: SDAI.UNWRAP(SDAI.INTEGER(3)), bound2: SDAI.INTEGER(3), 
        ([SDAI.AIE(_TEMP1), SDAI.AIE(_TEMP2), 
        SDAI.AIE(_TEMP3)] as [SDAI.AggregationInitializerElement<eCARTESIAN_POINT>]))
      let _TEMP5 = SELF.POINTS[1]
      let _TEMP6 = SELF.POINTS[2]
      let _TEMP7 = SELF.POINTS[3]
      let _TEMP8 = SELF.POINTS[4]
      let _TEMP9 = SDAI.LIST<eCARTESIAN_POINT>(bound1: SDAI.UNWRAP(SDAI.INTEGER(2)), bound2: (nil as SDAI.INTEGER?), 
        ([SDAI.AIE(_TEMP5), SDAI.AIE(_TEMP6), 
        SDAI.AIE(_TEMP7), SDAI.AIE(_TEMP8)] as [SDAI.AggregationInitializerElement<eCARTESIAN_POINT>]))
      let _TEMP10 = SAME_SIDE(PLANE_PTS: _TEMP4, 
                              TEST_POINTS: _TEMP9)
      return SDAI.LOGICAL(_TEMP10)
    }
    public static func WHERE_wr12(SELF: eCONVEX_HEXAHEDRON?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.POINTS[3]
      let _TEMP2 = SELF.POINTS[7]
      let _TEMP3 = SELF.POINTS[6]
      let _TEMP4 = SDAI.LIST<eCARTESIAN_POINT>(bound1: SDAI.UNWRAP(SDAI.INTEGER(3)), bound2: SDAI.INTEGER(3), 
        ([SDAI.AIE(_TEMP1), SDAI.AIE(_TEMP2), 
        SDAI.AIE(_TEMP3)] as [SDAI.AggregationInitializerElement<eCARTESIAN_POINT>]))
      let _TEMP5 = SELF.POINTS[1]
      let _TEMP6 = SELF.POINTS[4]
      let _TEMP7 = SELF.POINTS[8]
      let _TEMP8 = SELF.POINTS[5]
      let _TEMP9 = SDAI.LIST<eCARTESIAN_POINT>(bound1: SDAI.UNWRAP(SDAI.INTEGER(2)), bound2: (nil as SDAI.INTEGER?), 
        ([SDAI.AIE(_TEMP5), SDAI.AIE(_TEMP6), 
        SDAI.AIE(_TEMP7), SDAI.AIE(_TEMP8)] as [SDAI.AggregationInitializerElement<eCARTESIAN_POINT>]))
      let _TEMP10 = SAME_SIDE(PLANE_PTS: _TEMP4, 
                              TEST_POINTS: _TEMP9)
      return SDAI.LOGICAL(_TEMP10)
    }
    public static func WHERE_wr13(SELF: eCONVEX_HEXAHEDRON?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.POINTS[3]
      let _TEMP2 = SELF.POINTS[7]
      let _TEMP3 = SELF.POINTS[8]
      let _TEMP4 = SDAI.LIST<eCARTESIAN_POINT>(bound1: SDAI.UNWRAP(SDAI.INTEGER(3)), bound2: SDAI.INTEGER(3), 
        ([SDAI.AIE(_TEMP1), SDAI.AIE(_TEMP2), 
        SDAI.AIE(_TEMP3)] as [SDAI.AggregationInitializerElement<eCARTESIAN_POINT>]))
      let _TEMP5 = SELF.POINTS[1]
      let _TEMP6 = SELF.POINTS[5]
      let _TEMP7 = SELF.POINTS[6]
      let _TEMP8 = SELF.POINTS[2]
      let _TEMP9 = SDAI.LIST<eCARTESIAN_POINT>(bound1: SDAI.UNWRAP(SDAI.INTEGER(2)), bound2: (nil as SDAI.INTEGER?), 
        ([SDAI.AIE(_TEMP5), SDAI.AIE(_TEMP6), 
        SDAI.AIE(_TEMP7), SDAI.AIE(_TEMP8)] as [SDAI.AggregationInitializerElement<eCARTESIAN_POINT>]))
      let _TEMP10 = SAME_SIDE(PLANE_PTS: _TEMP4, 
                              TEST_POINTS: _TEMP9)
      return SDAI.LOGICAL(_TEMP10)
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init() {
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 0
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      self.init( )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY convex_hexahedron
    SUBTYPE OF ( faceted_primitive );
    WHERE
      wr1 : ( SIZEOF( points ) = 8 );
      wr2 : ( above_plane( points[1], points[2], points[3], points[4] ) = 0 );
      wr3 : ( above_plane( points[5], points[8], points[7], points[6] ) = 0 );
      wr4 : ( above_plane( points[1], points[4], points[8], points[5] ) = 0 );
      wr5 : ( above_plane( points[4], points[3], points[7], points[8] ) = 0 );
      wr6 : ( above_plane( points[3], points[2], points[6], points[7] ) = 0 );
      wr7 : ( above_plane( points[1], points[5], points[6], points[2] ) = 0 );
      wr8 : same_side( [points[1], points[2], points[3]], [points[5], points[6], points[7], points[8]] );
      wr9 : same_side( [points[1], points[4], points[8]], [points[3], points[7], points[6], points[2]] );
      wr10: same_side( [points[1], points[2], points[5]], [points[3], points[7], points[8], points[4]] );
      wr11: same_side( [points[5], points[6], points[7]], [points[1], points[2], points[3], points[4]] );
      wr12: same_side( [points[3], points[7], points[6]], [points[1], points[4], points[8], points[5]] );
      wr13: same_side( [points[3], points[7], points[8]], [points[1], points[5], points[6], points[2]] );
  END_ENTITY; -- convex_hexahedron (line:10671 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eCONVEX_HEXAHEDRON : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _convex_hexahedron.self
    }
    public let partialEntity: _convex_hexahedron

    //MARK: SUPERTYPES
    public let super_eREPRESENTATION_ITEM: eREPRESENTATION_ITEM 	// [1]
    public let super_eGEOMETRIC_REPRESENTATION_ITEM: eGEOMETRIC_REPRESENTATION_ITEM 	// [2]
    public let super_eFACETED_PRIMITIVE: eFACETED_PRIMITIVE 	// [3]
    public var super_eCONVEX_HEXAHEDRON: eCONVEX_HEXAHEDRON { return self } 	// [4]

    //MARK: SUBTYPES

    //MARK: ATTRIBUTES
    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eFACETED_PRIMITIVE`` )
    public var POINTS: SDAI.LIST_UNIQUE<eCARTESIAN_POINT>/*[4:nil]*/  {
      get {
        return SDAI.UNWRAP( super_eFACETED_PRIMITIVE.partialEntity._points )
      }
      set(newValue) {
        let partial = super_eFACETED_PRIMITIVE.partialEntity
        partial._points = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eREPRESENTATION_ITEM`` )
    public var NAME: tLABEL {
      get {
        return SDAI.UNWRAP( super_eREPRESENTATION_ITEM.partialEntity._name )
      }
      set(newValue) {
        let partial = super_eREPRESENTATION_ITEM.partialEntity
        partial._name = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUPER( ``eGEOMETRIC_REPRESENTATION_ITEM`` )
    public var DIM: tDIMENSION_COUNT?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"DIM") {
          return cached.value as! tDIMENSION_COUNT? 
        }
        let origin = super_eGEOMETRIC_REPRESENTATION_ITEM
        let value = tDIMENSION_COUNT(origin.partialEntity._dim__getter(SELF: origin))
        updateCache(derivedAttributeName:"DIM", value:value)
        return value
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_convex_hexahedron.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eREPRESENTATION_ITEM.self) else { return nil }
      self.super_eREPRESENTATION_ITEM = super1

      guard let super2 = complexEntity?.entityReference(eGEOMETRIC_REPRESENTATION_ITEM.self) else { return nil }
      self.super_eGEOMETRIC_REPRESENTATION_ITEM = super2

      guard let super3 = complexEntity?.entityReference(eFACETED_PRIMITIVE.self) else { return nil }
      self.super_eFACETED_PRIMITIVE = super3

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _convex_hexahedron.WHERE_wr1(SELF: instance)
      result[prefix2 + " .WHERE_wr2"] = _convex_hexahedron.WHERE_wr2(SELF: instance)
      result[prefix2 + " .WHERE_wr3"] = _convex_hexahedron.WHERE_wr3(SELF: instance)
      result[prefix2 + " .WHERE_wr4"] = _convex_hexahedron.WHERE_wr4(SELF: instance)
      result[prefix2 + " .WHERE_wr5"] = _convex_hexahedron.WHERE_wr5(SELF: instance)
      result[prefix2 + " .WHERE_wr6"] = _convex_hexahedron.WHERE_wr6(SELF: instance)
      result[prefix2 + " .WHERE_wr7"] = _convex_hexahedron.WHERE_wr7(SELF: instance)
      result[prefix2 + " .WHERE_wr8"] = _convex_hexahedron.WHERE_wr8(SELF: instance)
      result[prefix2 + " .WHERE_wr9"] = _convex_hexahedron.WHERE_wr9(SELF: instance)
      result[prefix2 + " .WHERE_wr10"] = _convex_hexahedron.WHERE_wr10(SELF: instance)
      result[prefix2 + " .WHERE_wr11"] = _convex_hexahedron.WHERE_wr11(SELF: instance)
      result[prefix2 + " .WHERE_wr12"] = _convex_hexahedron.WHERE_wr12(SELF: instance)
      result[prefix2 + " .WHERE_wr13"] = _convex_hexahedron.WHERE_wr13(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "CONVEX_HEXAHEDRON", type: self, explicitAttributeCount: 0)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eREPRESENTATION_ITEM.self)
      entityDef.add(supertype: eGEOMETRIC_REPRESENTATION_ITEM.self)
      entityDef.add(supertype: eFACETED_PRIMITIVE.self)
      entityDef.add(supertype: eCONVEX_HEXAHEDRON.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "POINTS", keyPath: \eCONVEX_HEXAHEDRON.POINTS, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "NAME", keyPath: \eCONVEX_HEXAHEDRON.NAME, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "DIM", keyPath: \eCONVEX_HEXAHEDRON.DIM, 
        kind: .derived, source: .superEntity, mayYieldEntityReference: false)

      return entityDef
    }

  }
}
