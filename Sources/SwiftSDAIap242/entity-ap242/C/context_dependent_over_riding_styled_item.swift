/* file: context_dependent_over_riding_styled_item.swift 	 generated: Mon Jan  3 16:32:52 2022 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.1, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY context_dependent_over_riding_styled_item
    SUBTYPE OF ( over_riding_styled_item );
      style_context  : LIST [1 : ?] OF style_context_select;
    WHERE
      wr1: ( ( SIZEOF( QUERY ( sc <* style_context | ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
               + 'REPRESENTATION_ITEM'  IN TYPEOF( sc ) ) ) ) = 1 ) OR ( SIZEOF( QUERY ( sc <* style_context
               | ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.MAPPED_ITEM' IN TYPEOF( sc ) ) OR ( 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CONTEXT_DEPENDENT_SHAPE_REPRESENTATION'  IN 
               TYPEOF( sc ) ) OR ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
               + 'REPRESENTATION_RELATIONSHIP'  IN TYPEOF( sc ) ) ) ) ) = SIZEOF( style_context ) ) );
  END_ENTITY; -- context_dependent_over_riding_styled_item (line:10594 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	representation_item
    ATTR:  name,	TYPE: label -- EXPLICIT


  SUPER- ENTITY(2)	styled_item
    ATTR:  styles,	TYPE: SET [0 : ?] OF presentation_style_assignment -- EXPLICIT

    ATTR:  item,	TYPE: styled_item_target -- EXPLICIT
      -- possibly overriden by
          ENTITY: tessellated_annotation_occurrence,	TYPE: tessellated_geometric_set
          ENTITY: annotation_placeholder_occurrence,	TYPE: geometric_set
          ENTITY: annotation_symbol_occurrence,	TYPE: annotation_symbol_occurrence_item
          ENTITY: annotation_curve_occurrence,	TYPE: curve_or_curve_set
          ENTITY: styled_tessellated_item_with_colours,	TYPE: tessellated_surface_item
          ENTITY: annotation_text_occurrence,	TYPE: annotation_text_occurrence_item
          ENTITY: hidden_element_over_riding_styled_item,	TYPE: camera_image
          ENTITY: annotation_fill_area_occurrence,	TYPE: annotation_fill_area
          ENTITY: annotation_point_occurrence,	TYPE: point
          ENTITY: annotation_plane,	TYPE: plane_or_planar_box


  SUPER- ENTITY(3)	over_riding_styled_item
    ATTR:  over_ridden_style,	TYPE: styled_item -- EXPLICIT


  ENTITY(SELF)	context_dependent_over_riding_styled_item
    ATTR:  style_context,	TYPE: LIST [1 : ?] OF style_context_select -- EXPLICIT
      -- possibly overriden by
          ENTITY: hidden_element_over_riding_styled_item,	TYPE: LIST [1 : 1] OF presentation_view


  SUB- ENTITY(5)	hidden_element_over_riding_styled_item
    REDCR: style_context,	TYPE: LIST [1 : 1] OF presentation_view -- EXPLICIT
      -- OVERRIDING ENTITY: context_dependent_over_riding_styled_item

    REDCR: item,	TYPE: camera_image -- EXPLICIT
      -- OVERRIDING ENTITY: styled_item

    ATTR:  container,	TYPE: SET [1 : ?] OF presentation_view -- INVERSE
      FOR items;


*/


//MARK: - Partial Entity
  public final class _context_dependent_over_riding_styled_item : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eCONTEXT_DEPENDENT_OVER_RIDING_STYLED_ITEM.self
    }

    //ATTRIBUTES
    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _style_context: SDAI.LIST<sSTYLE_CONTEXT_SELECT>/*[1:nil]*/  // PLAIN EXPLICIT ATTRIBUTE

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._style_context.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._style_context.value.isValueEqualOptionally(to: rhs._style_context.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._style_context.value.isValueEqualOptionally(to: rhs._style_context.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: eCONTEXT_DEPENDENT_OVER_RIDING_STYLED_ITEM?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.STYLE_CONTEXT
        .QUERY{ SC in 

          let _TEMP1 = SDAI.TYPEOF(SC, IS: eREPRESENTATION_ITEM.self)
          return _TEMP1 }
      let _TEMP2 = SDAI.SIZEOF(_TEMP1)
      let _TEMP3 = _TEMP2 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
      let _TEMP4 = SELF.STYLE_CONTEXT
        .QUERY{ SC in 

          let _TEMP1 = SDAI.TYPEOF(SC, IS: eMAPPED_ITEM.self)
          let _TEMP2 = SDAI.TYPEOF(SC, IS: eCONTEXT_DEPENDENT_SHAPE_REPRESENTATION.self)
          let _TEMP3 = _TEMP1 || _TEMP2
          let _TEMP4 = SDAI.TYPEOF(SC, IS: eREPRESENTATION_RELATIONSHIP.self)
          let _TEMP5 = _TEMP3 || _TEMP4
          return _TEMP5 }
      let _TEMP5 = SDAI.SIZEOF(_TEMP4)
      let _TEMP6 = SDAI.SIZEOF(SELF.STYLE_CONTEXT)
      let _TEMP7 = _TEMP5 .==. _TEMP6
      let _TEMP8 = _TEMP3 || _TEMP7
      return _TEMP8
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(STYLE_CONTEXT: SDAI.LIST<sSTYLE_CONTEXT_SELECT>/*[1:nil]*/ ) {
      self._style_context = STYLE_CONTEXT
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 1
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverRequiredParameter(as: SDAI.LIST<
        sSTYLE_CONTEXT_SELECT>.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( STYLE_CONTEXT: p0 )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY context_dependent_over_riding_styled_item
    SUBTYPE OF ( over_riding_styled_item );
      style_context  : LIST [1 : ?] OF style_context_select;
    WHERE
      wr1: ( ( SIZEOF( QUERY ( sc <* style_context | ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
               + 'REPRESENTATION_ITEM'  IN TYPEOF( sc ) ) ) ) = 1 ) OR ( SIZEOF( QUERY ( sc <* style_context
               | ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.MAPPED_ITEM' IN TYPEOF( sc ) ) OR ( 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CONTEXT_DEPENDENT_SHAPE_REPRESENTATION'  IN 
               TYPEOF( sc ) ) OR ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
               + 'REPRESENTATION_RELATIONSHIP'  IN TYPEOF( sc ) ) ) ) ) = SIZEOF( style_context ) ) );
  END_ENTITY; -- context_dependent_over_riding_styled_item (line:10594 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eCONTEXT_DEPENDENT_OVER_RIDING_STYLED_ITEM : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _context_dependent_over_riding_styled_item.self
    }
    public let partialEntity: _context_dependent_over_riding_styled_item

    //MARK: SUPERTYPES
    public let super_eREPRESENTATION_ITEM: eREPRESENTATION_ITEM 	// [1]
    public let super_eSTYLED_ITEM: eSTYLED_ITEM 	// [2]
    public let super_eOVER_RIDING_STYLED_ITEM: eOVER_RIDING_STYLED_ITEM 	// [3]
    public var super_eCONTEXT_DEPENDENT_OVER_RIDING_STYLED_ITEM: eCONTEXT_DEPENDENT_OVER_RIDING_STYLED_ITEM { return self } 	// [4]

    //MARK: SUBTYPES
    public var sub_eHIDDEN_ELEMENT_OVER_RIDING_STYLED_ITEM: eHIDDEN_ELEMENT_OVER_RIDING_STYLED_ITEM? {	// [5]
      return self.complexEntity.entityReference(eHIDDEN_ELEMENT_OVER_RIDING_STYLED_ITEM.self)
    }


    //MARK: ATTRIBUTES
    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eCONTEXT_DEPENDENT_OVER_RIDING_STYLED_ITEM`` )
    public var STYLE_CONTEXT: SDAI.LIST<sSTYLE_CONTEXT_SELECT>/*[1:nil]*/  {
      get {
        return SDAI.UNWRAP( self.partialEntity._style_context )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._style_context = SDAI.UNWRAP(newValue)
      }
    }

    /// __INVERSE__ attribute
    /// observing eREPRESENTATION .ITEMS
    /// - origin: SUB( ``eHIDDEN_ELEMENT_OVER_RIDING_STYLED_ITEM`` )
    public var CONTAINER: (SDAI.SET<ePRESENTATION_VIEW>/*[1:nil]*/ )?  {
      get {
        return sub_eHIDDEN_ELEMENT_OVER_RIDING_STYLED_ITEM?.partialEntity._container
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eOVER_RIDING_STYLED_ITEM`` )
    public var OVER_RIDDEN_STYLE: eSTYLED_ITEM {
      get {
        return SDAI.UNWRAP( super_eOVER_RIDING_STYLED_ITEM.partialEntity._over_ridden_style )
      }
      set(newValue) {
        let partial = super_eOVER_RIDING_STYLED_ITEM.partialEntity
        partial._over_ridden_style = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eSTYLED_ITEM`` )
    public var ITEM: sSTYLED_ITEM_TARGET {
      get {
        return SDAI.UNWRAP( super_eSTYLED_ITEM.partialEntity._item )
      }
      set(newValue) {
        let partial = super_eSTYLED_ITEM.partialEntity
        partial._item = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eSTYLED_ITEM`` )
    public var STYLES: SDAI.SET<ePRESENTATION_STYLE_ASSIGNMENT>/*[0:nil]*/  {
      get {
        return SDAI.UNWRAP( super_eSTYLED_ITEM.partialEntity._styles )
      }
      set(newValue) {
        let partial = super_eSTYLED_ITEM.partialEntity
        partial._styles = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eREPRESENTATION_ITEM`` )
    public var NAME: tLABEL {
      get {
        return SDAI.UNWRAP( super_eREPRESENTATION_ITEM.partialEntity._name )
      }
      set(newValue) {
        let partial = super_eREPRESENTATION_ITEM.partialEntity
        partial._name = SDAI.UNWRAP(newValue)
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_context_dependent_over_riding_styled_item.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eREPRESENTATION_ITEM.self) else { return nil }
      self.super_eREPRESENTATION_ITEM = super1

      guard let super2 = complexEntity?.entityReference(eSTYLED_ITEM.self) else { return nil }
      self.super_eSTYLED_ITEM = super2

      guard let super3 = complexEntity?.entityReference(eOVER_RIDING_STYLED_ITEM.self) else { return nil }
      self.super_eOVER_RIDING_STYLED_ITEM = super3

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _context_dependent_over_riding_styled_item.WHERE_wr1(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "CONTEXT_DEPENDENT_OVER_RIDING_STYLED_ITEM", type: self, explicitAttributeCount: 1)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eREPRESENTATION_ITEM.self)
      entityDef.add(supertype: eSTYLED_ITEM.self)
      entityDef.add(supertype: eOVER_RIDING_STYLED_ITEM.self)
      entityDef.add(supertype: eCONTEXT_DEPENDENT_OVER_RIDING_STYLED_ITEM.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "STYLE_CONTEXT", keyPath: \eCONTEXT_DEPENDENT_OVER_RIDING_STYLED_ITEM.STYLE_CONTEXT, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "CONTAINER", keyPath: \eCONTEXT_DEPENDENT_OVER_RIDING_STYLED_ITEM.CONTAINER, 
        kind: .inverse, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "OVER_RIDDEN_STYLE", keyPath: \eCONTEXT_DEPENDENT_OVER_RIDING_STYLED_ITEM.OVER_RIDDEN_STYLE, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "ITEM", keyPath: \eCONTEXT_DEPENDENT_OVER_RIDING_STYLED_ITEM.ITEM, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "STYLES", keyPath: \eCONTEXT_DEPENDENT_OVER_RIDING_STYLED_ITEM.STYLES, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "NAME", keyPath: \eCONTEXT_DEPENDENT_OVER_RIDING_STYLED_ITEM.NAME, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)

      return entityDef
    }

  }
}
