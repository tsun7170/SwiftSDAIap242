/* file: curve.swift 	 generated: Sat Aug 14 13:46:02 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY curve
    SUPERTYPE OF ( 
        ONEOF ( 
            line, 
            conic, 
            clothoid, 
            circular_involute, 
            pcurve, 
            surface_curve, 
            offset_curve_2d, 
            offset_curve_3d, 
            curve_replica ) )
    SUBTYPE OF ( geometric_representation_item );
  END_ENTITY; -- curve (line:10998 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	representation_item
    ATTR:  name,	TYPE: label -- EXPLICIT


  SUPER- ENTITY(2)	geometric_representation_item
    ATTR:  dim,	TYPE: dimension_count -- DERIVED
      := dimension_of( SELF )


  ENTITY(SELF)	curve
    (no local attributes)

  SUB- ENTITY(4)	implicit_intersection_curve
    ATTR:  external_surface,	TYPE: surface -- EXPLICIT


  SUB- ENTITY(5)	implicit_projected_curve
    ATTR:  external_curve,	TYPE: curve -- EXPLICIT

    ATTR:  projection_direction,	TYPE: direction -- EXPLICIT


  SUB- ENTITY(6)	implicit_model_intersection_curve
    ATTR:  intersected_model,	TYPE: surface_or_solid_model -- EXPLICIT


  SUB- ENTITY(7)	implicit_silhouette_curve
    ATTR:  silhouetted_model,	TYPE: surface_or_solid_model -- EXPLICIT

    ATTR:  view_direction,	TYPE: direction -- EXPLICIT


  SUB- ENTITY(8)	implicit_planar_curve
    ATTR:  using_sketch,	TYPE: positioned_sketch -- EXPLICIT

    ATTR:  computed_representation,	TYPE: curve -- EXPLICIT

    ATTR:  curve_plane,	TYPE: plane -- DERIVED
      := get_plane_of_implicit_geometry( using_sketch )


  SUB- ENTITY(9)	clothoid
    ATTR:  position,	TYPE: axis2_placement -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  clothoid_constant,	TYPE: length_measure -- EXPLICIT


  SUB- ENTITY(10)	hyperbola
    ATTR:  semi_axis,	TYPE: positive_length_measure -- EXPLICIT

    ATTR:  semi_imag_axis,	TYPE: positive_length_measure -- EXPLICIT


  SUB- ENTITY(11)	ellipse
    ATTR:  semi_axis_1,	TYPE: positive_length_measure -- EXPLICIT

    ATTR:  semi_axis_2,	TYPE: positive_length_measure -- EXPLICIT


  SUB- ENTITY(12)	circle
    ATTR:  radius,	TYPE: positive_length_measure -- EXPLICIT


  SUB- ENTITY(13)	parabola
    ATTR:  focal_dist,	TYPE: length_measure -- EXPLICIT


  SUB- ENTITY(14)	conic
    ATTR:  position,	TYPE: axis2_placement -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(15)	curve_replica
    ATTR:  parent_curve,	TYPE: curve -- EXPLICIT

    ATTR:  transformation,	TYPE: cartesian_transformation_operator -- EXPLICIT


  SUB- ENTITY(16)	bounded_surface_curve
    (no local attributes)

  SUB- ENTITY(17)	seam_curve
    (no local attributes)

  SUB- ENTITY(18)	intersection_curve
    (no local attributes)

  SUB- ENTITY(19)	surface_curve
    ATTR:  curve_3d,	TYPE: curve -- EXPLICIT

    ATTR:  associated_geometry,	TYPE: LIST [1 : 2] OF pcurve_or_surface -- EXPLICIT

    ATTR:  master_representation,	TYPE: preferred_surface_curve_representation -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  basis_surface,	TYPE: SET [1 : 2] OF surface -- DERIVED	(AMBIGUOUS/MASKED)
      := get_basis_surface( SELF )


  SUB- ENTITY(20)	line
    ATTR:  pnt,	TYPE: cartesian_point -- EXPLICIT

    ATTR:  dir,	TYPE: vector -- EXPLICIT


  SUB- ENTITY(21)	circular_involute
    ATTR:  position,	TYPE: axis2_placement -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  base_radius,	TYPE: positive_length_measure -- EXPLICIT


  SUB- ENTITY(22)	bounded_pcurve
    (no local attributes)

  SUB- ENTITY(23)	pcurve
    ATTR:  basis_surface,	TYPE: surface -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  reference_to_curve,	TYPE: definitional_representation -- EXPLICIT


  SUB- ENTITY(24)	offset_curve_2d
    ATTR:  basis_curve,	TYPE: curve -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  distance,	TYPE: length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  self_intersect,	TYPE: LOGICAL -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(25)	offset_curve_3d
    ATTR:  basis_curve,	TYPE: curve -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  distance,	TYPE: length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  self_intersect,	TYPE: LOGICAL -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  ref_direction,	TYPE: direction -- EXPLICIT


  SUB- ENTITY(26)	outer_boundary_curve
    (no local attributes)

  SUB- ENTITY(27)	boundary_curve
    (no local attributes)

  SUB- ENTITY(28)	composite_curve_on_surface
    ATTR:  basis_surface,	TYPE: SET [0 : 2] OF surface -- DERIVED	(AMBIGUOUS/MASKED)
      := get_basis_surface( SELF )


  SUB- ENTITY(29)	composite_curve
    ATTR:  segments,	TYPE: LIST [1 : ?] OF composite_curve_segment -- EXPLICIT
      -- observed by
        ENTITY(1): composite_curve_segment,	ATTR: using_curves,	TYPE: BAG [1 : ?] OF composite_curve

    ATTR:  self_intersect,	TYPE: LOGICAL -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  n_segments,	TYPE: INTEGER -- DERIVED
      := SIZEOF( segments )

    ATTR:  closed_curve,	TYPE: LOGICAL -- DERIVED	(AMBIGUOUS/MASKED)
      := segments[n_segments].transition <> discontinuous


  SUB- ENTITY(30)	polyline
    ATTR:  points,	TYPE: LIST [2 : ?] OF cartesian_point -- EXPLICIT


  SUB- ENTITY(31)	trimmed_curve
    ATTR:  basis_curve,	TYPE: curve -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  trim_1,	TYPE: SET [1 : 2] OF trimming_select -- EXPLICIT

    ATTR:  trim_2,	TYPE: SET [1 : 2] OF trimming_select -- EXPLICIT

    ATTR:  sense_agreement,	TYPE: BOOLEAN -- EXPLICIT

    ATTR:  master_representation,	TYPE: trimming_preference -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(32)	bezier_curve
    (no local attributes)

  SUB- ENTITY(33)	b_spline_curve_with_knots
    ATTR:  knot_multiplicities,	TYPE: LIST [2 : ?] OF INTEGER -- EXPLICIT

    ATTR:  knots,	TYPE: LIST [2 : ?] OF parameter_value -- EXPLICIT

    ATTR:  knot_spec,	TYPE: knot_type -- EXPLICIT

    ATTR:  upper_index_on_knots,	TYPE: INTEGER -- DERIVED
      := SIZEOF( knots )


  SUB- ENTITY(34)	rational_b_spline_curve
    ATTR:  weights_data,	TYPE: LIST [2 : ?] OF REAL -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  weights,	TYPE: ARRAY [0 : upper_index_on_control_points] OF REAL -- DERIVED
      := list_to_array( weights_data, 0, upper_index_on_control_points )


  SUB- ENTITY(35)	uniform_curve
    (no local attributes)

  SUB- ENTITY(36)	quasi_uniform_curve
    (no local attributes)

  SUB- ENTITY(37)	b_spline_curve
    ATTR:  degree,	TYPE: INTEGER -- EXPLICIT

    ATTR:  control_points_list,	TYPE: LIST [2 : ?] OF cartesian_point -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  curve_form,	TYPE: b_spline_curve_form -- EXPLICIT

    ATTR:  closed_curve,	TYPE: LOGICAL -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  self_intersect,	TYPE: LOGICAL -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  upper_index_on_control_points,	TYPE: INTEGER -- DERIVED
      := SIZEOF( control_points_list ) - 1

    ATTR:  control_points,	TYPE: ARRAY [0 : upper_index_on_control_points] OF cartesian_point -- DERIVED
      := list_to_array( control_points_list, 0, upper_index_on_control_points )


  SUB- ENTITY(38)	rational_locally_refined_spline_curve
    ATTR:  weights_data,	TYPE: LIST [2 : ?] OF REAL -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(39)	locally_refined_spline_curve
    ATTR:  b_splines,	TYPE: LIST [2 : ?] OF local_b_spline -- EXPLICIT

    ATTR:  knot_values,	TYPE: spline_knot_values -- EXPLICIT

    ATTR:  control_points_list,	TYPE: LIST [2 : ?] OF cartesian_point -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  scaling_factors,	TYPE: LIST [2 : ?] OF REAL -- EXPLICIT

    ATTR:  closed_curve,	TYPE: LOGICAL -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  locally_refined_spline_type,	TYPE: locally_refined_spline_type_enum -- EXPLICIT

    ATTR:  self_intersect,	TYPE: LOGICAL -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  domain,	TYPE: LIST [2 : 2] OF REAL -- EXPLICIT


  SUB- ENTITY(40)	bounded_curve
    (no local attributes)

*/


//MARK: - Partial Entity
  public final class _curve : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eCURVE.self
    }

    //ATTRIBUTES
    // (no local attributes)

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      //SELECT data types (indirectly) referencing the current type as a member of the select list
      members.insert(SDAI.STRING(sSKETCH_ELEMENT_SELECT.typeName)) // -> Self
      members.insert(SDAI.STRING(sEDGE_OR_CURVE.typeName)) // -> Self
      members.insert(SDAI.STRING(sEXTERNAL_IDENTIFICATION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sINSPECTED_ECDQ_ELEMENT_SELECT.typeName)) // -> Self
      members.insert(SDAI.STRING(sLOCATION_OF_EXTREME_VALUE_SELECT.typeName)) // -> sINSPECTED_ECDQ_ELEMENT_SELECT
      members.insert(SDAI.STRING(sCURVE_OR_ANNOTATION_CURVE_OCCURRENCE.typeName)) // -> Self
      members.insert(SDAI.STRING(sGEOMETRIC_SET_SELECT.typeName)) // -> Self
      members.insert(SDAI.STRING(sKINEMATIC_LINK_REPRESENTATION_ITEMS.typeName)) // -> Self
      members.insert(SDAI.STRING(sCURVE_OR_CURVE_SET.typeName)) // -> Self
      members.insert(SDAI.STRING(sANGLE_DIRECTION_REFERENCE_SELECT.typeName)) // -> Self
      members.insert(SDAI.STRING(sANGLE_DIRECTION_REFERENCE_WITH_A2P3D_SELECT.typeName)) // -> sANGLE_DIRECTION_REFERENCE_SELECT
      members.insert(SDAI.STRING(sGEOMETRIC_CONSTRAINT_ELEMENT.typeName)) // -> Self
      members.insert(SDAI.STRING(sINSPECTED_SHAPE_ELEMENT_SELECT.typeName)) // -> Self
      members.insert(SDAI.STRING(sCURVE_OR_SURFACE_CONSTRAINT_ELEMENT.typeName)) // -> Self
      members.insert(SDAI.STRING(sINSPECTED_ELEMENT_SELECT.typeName)) // -> Self
      members.insert(SDAI.STRING(sPOINT_CURVE_OR_SURFACE_CONSTRAINT_ELEMENT.typeName)) // -> Self
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init() {
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 0
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      self.init( )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY curve
    SUPERTYPE OF ( 
        ONEOF ( 
            line, 
            conic, 
            clothoid, 
            circular_involute, 
            pcurve, 
            surface_curve, 
            offset_curve_2d, 
            offset_curve_3d, 
            curve_replica ) )
    SUBTYPE OF ( geometric_representation_item );
  END_ENTITY; -- curve (line:10998 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eCURVE : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _curve.self
    }
    public let partialEntity: _curve

    //MARK: SUPERTYPES
    public let super_eREPRESENTATION_ITEM: eREPRESENTATION_ITEM 	// [1]
    public let super_eGEOMETRIC_REPRESENTATION_ITEM: eGEOMETRIC_REPRESENTATION_ITEM 	// [2]
    public var super_eCURVE: eCURVE { return self } 	// [3]

    //MARK: SUBTYPES
    public var sub_eIMPLICIT_INTERSECTION_CURVE: eIMPLICIT_INTERSECTION_CURVE? {	// [4]
      return self.complexEntity.entityReference(eIMPLICIT_INTERSECTION_CURVE.self)
    }

    public var sub_eIMPLICIT_PROJECTED_CURVE: eIMPLICIT_PROJECTED_CURVE? {	// [5]
      return self.complexEntity.entityReference(eIMPLICIT_PROJECTED_CURVE.self)
    }

    public var sub_eIMPLICIT_MODEL_INTERSECTION_CURVE: eIMPLICIT_MODEL_INTERSECTION_CURVE? {	// [6]
      return self.complexEntity.entityReference(eIMPLICIT_MODEL_INTERSECTION_CURVE.self)
    }

    public var sub_eIMPLICIT_SILHOUETTE_CURVE: eIMPLICIT_SILHOUETTE_CURVE? {	// [7]
      return self.complexEntity.entityReference(eIMPLICIT_SILHOUETTE_CURVE.self)
    }

    public var sub_eIMPLICIT_PLANAR_CURVE: eIMPLICIT_PLANAR_CURVE? {	// [8]
      return self.complexEntity.entityReference(eIMPLICIT_PLANAR_CURVE.self)
    }

    public var sub_eCLOTHOID: eCLOTHOID? {	// [9]
      return self.complexEntity.entityReference(eCLOTHOID.self)
    }

    public var sub_eHYPERBOLA: eHYPERBOLA? {	// [10]
      return self.complexEntity.entityReference(eHYPERBOLA.self)
    }

    public var sub_eELLIPSE: eELLIPSE? {	// [11]
      return self.complexEntity.entityReference(eELLIPSE.self)
    }

    public var sub_eCIRCLE: eCIRCLE? {	// [12]
      return self.complexEntity.entityReference(eCIRCLE.self)
    }

    public var sub_ePARABOLA: ePARABOLA? {	// [13]
      return self.complexEntity.entityReference(ePARABOLA.self)
    }

    public var sub_eCONIC: eCONIC? {	// [14]
      return self.complexEntity.entityReference(eCONIC.self)
    }

    public var sub_eCURVE_REPLICA: eCURVE_REPLICA? {	// [15]
      return self.complexEntity.entityReference(eCURVE_REPLICA.self)
    }

    public var sub_eBOUNDED_SURFACE_CURVE: eBOUNDED_SURFACE_CURVE? {	// [16]
      return self.complexEntity.entityReference(eBOUNDED_SURFACE_CURVE.self)
    }

    public var sub_eSEAM_CURVE: eSEAM_CURVE? {	// [17]
      return self.complexEntity.entityReference(eSEAM_CURVE.self)
    }

    public var sub_eINTERSECTION_CURVE: eINTERSECTION_CURVE? {	// [18]
      return self.complexEntity.entityReference(eINTERSECTION_CURVE.self)
    }

    public var sub_eSURFACE_CURVE: eSURFACE_CURVE? {	// [19]
      return self.complexEntity.entityReference(eSURFACE_CURVE.self)
    }

    public var sub_eLINE: eLINE? {	// [20]
      return self.complexEntity.entityReference(eLINE.self)
    }

    public var sub_eCIRCULAR_INVOLUTE: eCIRCULAR_INVOLUTE? {	// [21]
      return self.complexEntity.entityReference(eCIRCULAR_INVOLUTE.self)
    }

    public var sub_eBOUNDED_PCURVE: eBOUNDED_PCURVE? {	// [22]
      return self.complexEntity.entityReference(eBOUNDED_PCURVE.self)
    }

    public var sub_ePCURVE: ePCURVE? {	// [23]
      return self.complexEntity.entityReference(ePCURVE.self)
    }

    public var sub_eOFFSET_CURVE_2D: eOFFSET_CURVE_2D? {	// [24]
      return self.complexEntity.entityReference(eOFFSET_CURVE_2D.self)
    }

    public var sub_eOFFSET_CURVE_3D: eOFFSET_CURVE_3D? {	// [25]
      return self.complexEntity.entityReference(eOFFSET_CURVE_3D.self)
    }

    public var sub_eOUTER_BOUNDARY_CURVE: eOUTER_BOUNDARY_CURVE? {	// [26]
      return self.complexEntity.entityReference(eOUTER_BOUNDARY_CURVE.self)
    }

    public var sub_eBOUNDARY_CURVE: eBOUNDARY_CURVE? {	// [27]
      return self.complexEntity.entityReference(eBOUNDARY_CURVE.self)
    }

    public var sub_eCOMPOSITE_CURVE_ON_SURFACE: eCOMPOSITE_CURVE_ON_SURFACE? {	// [28]
      return self.complexEntity.entityReference(eCOMPOSITE_CURVE_ON_SURFACE.self)
    }

    public var sub_eCOMPOSITE_CURVE: eCOMPOSITE_CURVE? {	// [29]
      return self.complexEntity.entityReference(eCOMPOSITE_CURVE.self)
    }

    public var sub_ePOLYLINE: ePOLYLINE? {	// [30]
      return self.complexEntity.entityReference(ePOLYLINE.self)
    }

    public var sub_eTRIMMED_CURVE: eTRIMMED_CURVE? {	// [31]
      return self.complexEntity.entityReference(eTRIMMED_CURVE.self)
    }

    public var sub_eBEZIER_CURVE: eBEZIER_CURVE? {	// [32]
      return self.complexEntity.entityReference(eBEZIER_CURVE.self)
    }

    public var sub_eB_SPLINE_CURVE_WITH_KNOTS: eB_SPLINE_CURVE_WITH_KNOTS? {	// [33]
      return self.complexEntity.entityReference(eB_SPLINE_CURVE_WITH_KNOTS.self)
    }

    public var sub_eRATIONAL_B_SPLINE_CURVE: eRATIONAL_B_SPLINE_CURVE? {	// [34]
      return self.complexEntity.entityReference(eRATIONAL_B_SPLINE_CURVE.self)
    }

    public var sub_eUNIFORM_CURVE: eUNIFORM_CURVE? {	// [35]
      return self.complexEntity.entityReference(eUNIFORM_CURVE.self)
    }

    public var sub_eQUASI_UNIFORM_CURVE: eQUASI_UNIFORM_CURVE? {	// [36]
      return self.complexEntity.entityReference(eQUASI_UNIFORM_CURVE.self)
    }

    public var sub_eB_SPLINE_CURVE: eB_SPLINE_CURVE? {	// [37]
      return self.complexEntity.entityReference(eB_SPLINE_CURVE.self)
    }

    public var sub_eRATIONAL_LOCALLY_REFINED_SPLINE_CURVE: eRATIONAL_LOCALLY_REFINED_SPLINE_CURVE? {	// [38]
      return self.complexEntity.entityReference(eRATIONAL_LOCALLY_REFINED_SPLINE_CURVE.self)
    }

    public var sub_eLOCALLY_REFINED_SPLINE_CURVE: eLOCALLY_REFINED_SPLINE_CURVE? {	// [39]
      return self.complexEntity.entityReference(eLOCALLY_REFINED_SPLINE_CURVE.self)
    }

    public var sub_eBOUNDED_CURVE: eBOUNDED_CURVE? {	// [40]
      return self.complexEntity.entityReference(eBOUNDED_CURVE.self)
    }


    //MARK: ATTRIBUTES
    // WEIGHTS_DATA: (2 AMBIGUOUS REFs)

    // CONTROL_POINTS_LIST: (2 AMBIGUOUS REFs)

    // BASIS_CURVE: (3 AMBIGUOUS REFs)

    // DISTANCE: (2 AMBIGUOUS REFs)

    // POSITION: (3 AMBIGUOUS REFs)

    // MASTER_REPRESENTATION: (2 AMBIGUOUS REFs)

    // SELF_INTERSECT: (5 AMBIGUOUS REFs)

    // BASIS_SURFACE: (3 AMBIGUOUS REFs)

    // CLOSED_CURVE: (3 AMBIGUOUS REFs)

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePCURVE`` )
    public var REFERENCE_TO_CURVE: eDEFINITIONAL_REPRESENTATION?  {
      get {
        return sub_ePCURVE?.partialEntity._reference_to_curve
      }
      set(newValue) {
        guard let partial = sub_ePCURVE?.super_ePCURVE.partialEntity else { return }
        partial._reference_to_curve = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eB_SPLINE_CURVE`` )
    public var CURVE_FORM: nB_SPLINE_CURVE_FORM?  {
      get {
        return sub_eB_SPLINE_CURVE?.partialEntity._curve_form
      }
      set(newValue) {
        guard let partial = sub_eB_SPLINE_CURVE?.super_eB_SPLINE_CURVE.partialEntity else { return }
        partial._curve_form = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eTRIMMED_CURVE`` )
    public var TRIM_1: (SDAI.SET<sTRIMMING_SELECT>/*[1:2]*/ )?  {
      get {
        return sub_eTRIMMED_CURVE?.partialEntity._trim_1
      }
      set(newValue) {
        guard let partial = sub_eTRIMMED_CURVE?.super_eTRIMMED_CURVE.partialEntity else { return }
        partial._trim_1 = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eTRIMMED_CURVE`` )
    public var TRIM_2: (SDAI.SET<sTRIMMING_SELECT>/*[1:2]*/ )?  {
      get {
        return sub_eTRIMMED_CURVE?.partialEntity._trim_2
      }
      set(newValue) {
        guard let partial = sub_eTRIMMED_CURVE?.super_eTRIMMED_CURVE.partialEntity else { return }
        partial._trim_2 = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eLOCALLY_REFINED_SPLINE_CURVE`` )
    public var LOCALLY_REFINED_SPLINE_TYPE: nLOCALLY_REFINED_SPLINE_TYPE_ENUM?  {
      get {
        return sub_eLOCALLY_REFINED_SPLINE_CURVE?.partialEntity._locally_refined_spline_type
      }
      set(newValue) {
        guard let partial = sub_eLOCALLY_REFINED_SPLINE_CURVE?.super_eLOCALLY_REFINED_SPLINE_CURVE
          .partialEntity else { return }
        partial._locally_refined_spline_type = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eB_SPLINE_CURVE_WITH_KNOTS`` )
    public var KNOTS: (SDAI.LIST<tPARAMETER_VALUE>/*[2:nil]*/ )?  {
      get {
        return sub_eB_SPLINE_CURVE_WITH_KNOTS?.partialEntity._knots
      }
      set(newValue) {
        guard let partial = sub_eB_SPLINE_CURVE_WITH_KNOTS?.super_eB_SPLINE_CURVE_WITH_KNOTS.partialEntity
          else { return }
        partial._knots = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eLINE`` )
    public var PNT: eCARTESIAN_POINT?  {
      get {
        return sub_eLINE?.partialEntity._pnt
      }
      set(newValue) {
        guard let partial = sub_eLINE?.super_eLINE.partialEntity else { return }
        partial._pnt = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eIMPLICIT_SILHOUETTE_CURVE`` )
    public var SILHOUETTED_MODEL: sSURFACE_OR_SOLID_MODEL?  {
      get {
        return sub_eIMPLICIT_SILHOUETTE_CURVE?.partialEntity._silhouetted_model
      }
      set(newValue) {
        guard let partial = sub_eIMPLICIT_SILHOUETTE_CURVE?.super_eIMPLICIT_SILHOUETTE_CURVE.partialEntity
          else { return }
        partial._silhouetted_model = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eTRIMMED_CURVE`` )
    public var SENSE_AGREEMENT: SDAI.BOOLEAN?  {
      get {
        return sub_eTRIMMED_CURVE?.partialEntity._sense_agreement
      }
      set(newValue) {
        guard let partial = sub_eTRIMMED_CURVE?.super_eTRIMMED_CURVE.partialEntity else { return }
        partial._sense_agreement = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eLOCALLY_REFINED_SPLINE_CURVE`` )
    public var KNOT_VALUES: tSPLINE_KNOT_VALUES?  {
      get {
        return sub_eLOCALLY_REFINED_SPLINE_CURVE?.partialEntity._knot_values
      }
      set(newValue) {
        guard let partial = sub_eLOCALLY_REFINED_SPLINE_CURVE?.super_eLOCALLY_REFINED_SPLINE_CURVE
          .partialEntity else { return }
        partial._knot_values = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eB_SPLINE_CURVE`` )
    public var DEGREE: SDAI.INTEGER?  {
      get {
        return sub_eB_SPLINE_CURVE?.partialEntity._degree
      }
      set(newValue) {
        guard let partial = sub_eB_SPLINE_CURVE?.super_eB_SPLINE_CURVE.partialEntity else { return }
        partial._degree = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eIMPLICIT_PLANAR_CURVE`` )
    public var USING_SKETCH: ePOSITIONED_SKETCH?  {
      get {
        return sub_eIMPLICIT_PLANAR_CURVE?.partialEntity._using_sketch
      }
      set(newValue) {
        guard let partial = sub_eIMPLICIT_PLANAR_CURVE?.super_eIMPLICIT_PLANAR_CURVE.partialEntity
          else { return }
        partial._using_sketch = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCIRCLE`` )
    public var RADIUS: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eCIRCLE?.partialEntity._radius
      }
      set(newValue) {
        guard let partial = sub_eCIRCLE?.super_eCIRCLE.partialEntity else { return }
        partial._radius = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eHYPERBOLA`` )
    public var SEMI_IMAG_AXIS: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eHYPERBOLA?.partialEntity._semi_imag_axis
      }
      set(newValue) {
        guard let partial = sub_eHYPERBOLA?.super_eHYPERBOLA.partialEntity else { return }
        partial._semi_imag_axis = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eLOCALLY_REFINED_SPLINE_CURVE`` )
    public var SCALING_FACTORS: (SDAI.LIST<SDAI.REAL>/*[2:nil]*/ )?  {
      get {
        return sub_eLOCALLY_REFINED_SPLINE_CURVE?.partialEntity._scaling_factors
      }
      set(newValue) {
        guard let partial = sub_eLOCALLY_REFINED_SPLINE_CURVE?.super_eLOCALLY_REFINED_SPLINE_CURVE
          .partialEntity else { return }
        partial._scaling_factors = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eB_SPLINE_CURVE_WITH_KNOTS`` )
    public var KNOT_MULTIPLICITIES: (SDAI.LIST<SDAI.INTEGER>/*[2:nil]*/ )?  {
      get {
        return sub_eB_SPLINE_CURVE_WITH_KNOTS?.partialEntity._knot_multiplicities
      }
      set(newValue) {
        guard let partial = sub_eB_SPLINE_CURVE_WITH_KNOTS?.super_eB_SPLINE_CURVE_WITH_KNOTS.partialEntity
          else { return }
        partial._knot_multiplicities = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCURVE_REPLICA`` )
    public var TRANSFORMATION: eCARTESIAN_TRANSFORMATION_OPERATOR?  {
      get {
        return sub_eCURVE_REPLICA?.partialEntity._transformation
      }
      set(newValue) {
        guard let partial = sub_eCURVE_REPLICA?.super_eCURVE_REPLICA.partialEntity else { return }
        partial._transformation = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCLOTHOID`` )
    public var CLOTHOID_CONSTANT: tLENGTH_MEASURE?  {
      get {
        return sub_eCLOTHOID?.partialEntity._clothoid_constant
      }
      set(newValue) {
        guard let partial = sub_eCLOTHOID?.super_eCLOTHOID.partialEntity else { return }
        partial._clothoid_constant = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eB_SPLINE_CURVE`` )
    public var UPPER_INDEX_ON_CONTROL_POINTS: SDAI.INTEGER?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"UPPER_INDEX_ON_CONTROL_POINTS") {
          return cached.value as! SDAI.INTEGER? 
        }
        guard let origin = sub_eB_SPLINE_CURVE else { return nil }
        let value = SDAI.INTEGER(origin.partialEntity._upper_index_on_control_points__getter(SELF: origin))
        updateCache(derivedAttributeName:"UPPER_INDEX_ON_CONTROL_POINTS", value:value)
        return value
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eB_SPLINE_CURVE_WITH_KNOTS`` )
    public var UPPER_INDEX_ON_KNOTS: SDAI.INTEGER?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"UPPER_INDEX_ON_KNOTS") {
          return cached.value as! SDAI.INTEGER? 
        }
        guard let origin = sub_eB_SPLINE_CURVE_WITH_KNOTS else { return nil }
        let value = SDAI.INTEGER(origin.partialEntity._upper_index_on_knots__getter(SELF: origin))
        updateCache(derivedAttributeName:"UPPER_INDEX_ON_KNOTS", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSURFACE_CURVE`` )
    public var ASSOCIATED_GEOMETRY: (SDAI.LIST<sPCURVE_OR_SURFACE>/*[1:2]*/ )?  {
      get {
        return sub_eSURFACE_CURVE?.partialEntity._associated_geometry
      }
      set(newValue) {
        guard let partial = sub_eSURFACE_CURVE?.super_eSURFACE_CURVE.partialEntity else { return }
        partial._associated_geometry = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCURVE_REPLICA`` )
    public var PARENT_CURVE: eCURVE?  {
      get {
        return sub_eCURVE_REPLICA?.partialEntity._parent_curve
      }
      set(newValue) {
        guard let partial = sub_eCURVE_REPLICA?.super_eCURVE_REPLICA.partialEntity else { return }
        partial._parent_curve = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eCOMPOSITE_CURVE`` )
    public var N_SEGMENTS: SDAI.INTEGER?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"N_SEGMENTS") {
          return cached.value as! SDAI.INTEGER? 
        }
        guard let origin = sub_eCOMPOSITE_CURVE else { return nil }
        let value = SDAI.INTEGER(origin.partialEntity._n_segments__getter(SELF: origin))
        updateCache(derivedAttributeName:"N_SEGMENTS", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eIMPLICIT_INTERSECTION_CURVE`` )
    public var EXTERNAL_SURFACE: eSURFACE?  {
      get {
        return sub_eIMPLICIT_INTERSECTION_CURVE?.partialEntity._external_surface
      }
      set(newValue) {
        guard let partial = sub_eIMPLICIT_INTERSECTION_CURVE?.super_eIMPLICIT_INTERSECTION_CURVE
          .partialEntity else { return }
        partial._external_surface = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eB_SPLINE_CURVE_WITH_KNOTS`` )
    public var KNOT_SPEC: nKNOT_TYPE?  {
      get {
        return sub_eB_SPLINE_CURVE_WITH_KNOTS?.partialEntity._knot_spec
      }
      set(newValue) {
        guard let partial = sub_eB_SPLINE_CURVE_WITH_KNOTS?.super_eB_SPLINE_CURVE_WITH_KNOTS.partialEntity
          else { return }
        partial._knot_spec = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePOLYLINE`` )
    public var POINTS: (SDAI.LIST<eCARTESIAN_POINT>/*[2:nil]*/ )?  {
      get {
        return sub_ePOLYLINE?.partialEntity._points
      }
      set(newValue) {
        guard let partial = sub_ePOLYLINE?.super_ePOLYLINE.partialEntity else { return }
        partial._points = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSURFACE_CURVE`` )
    public var CURVE_3D: eCURVE?  {
      get {
        return sub_eSURFACE_CURVE?.partialEntity._curve_3d
      }
      set(newValue) {
        guard let partial = sub_eSURFACE_CURVE?.super_eSURFACE_CURVE.partialEntity else { return }
        partial._curve_3d = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCIRCULAR_INVOLUTE`` )
    public var BASE_RADIUS: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eCIRCULAR_INVOLUTE?.partialEntity._base_radius
      }
      set(newValue) {
        guard let partial = sub_eCIRCULAR_INVOLUTE?.super_eCIRCULAR_INVOLUTE.partialEntity else { return }
        partial._base_radius = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT(OBSERVED)__ attribute
    /// - origin: SUB( ``eCOMPOSITE_CURVE`` )
    public var SEGMENTS: (SDAI.LIST<eCOMPOSITE_CURVE_SEGMENT>/*[1:nil]*/ )?  {
      get {
        return sub_eCOMPOSITE_CURVE?.partialEntity._segments
      }
      set(newValue) {
        guard let partial = sub_eCOMPOSITE_CURVE?.super_eCOMPOSITE_CURVE.partialEntity else { return }
        partial._segments = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eIMPLICIT_PLANAR_CURVE`` )
    public var CURVE_PLANE: ePLANE?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"CURVE_PLANE") {
          return cached.value as! ePLANE? 
        }
        guard let origin = sub_eIMPLICIT_PLANAR_CURVE else { return nil }
        let value = ePLANE(origin.partialEntity._curve_plane__getter(SELF: origin))
        updateCache(derivedAttributeName:"CURVE_PLANE", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eELLIPSE`` )
    public var SEMI_AXIS_1: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eELLIPSE?.partialEntity._semi_axis_1
      }
      set(newValue) {
        guard let partial = sub_eELLIPSE?.super_eELLIPSE.partialEntity else { return }
        partial._semi_axis_1 = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eLOCALLY_REFINED_SPLINE_CURVE`` )
    public var B_SPLINES: (SDAI.LIST<eLOCAL_B_SPLINE>/*[2:nil]*/ )?  {
      get {
        return sub_eLOCALLY_REFINED_SPLINE_CURVE?.partialEntity._b_splines
      }
      set(newValue) {
        guard let partial = sub_eLOCALLY_REFINED_SPLINE_CURVE?.super_eLOCALLY_REFINED_SPLINE_CURVE
          .partialEntity else { return }
        partial._b_splines = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eELLIPSE`` )
    public var SEMI_AXIS_2: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eELLIPSE?.partialEntity._semi_axis_2
      }
      set(newValue) {
        guard let partial = sub_eELLIPSE?.super_eELLIPSE.partialEntity else { return }
        partial._semi_axis_2 = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eHYPERBOLA`` )
    public var SEMI_AXIS: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eHYPERBOLA?.partialEntity._semi_axis
      }
      set(newValue) {
        guard let partial = sub_eHYPERBOLA?.super_eHYPERBOLA.partialEntity else { return }
        partial._semi_axis = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eB_SPLINE_CURVE`` )
    public var CONTROL_POINTS: (SDAI.ARRAY<eCARTESIAN_POINT>/*[0:UPPER_INDEX_ON_CONTROL_POINTS]*/ )?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"CONTROL_POINTS") {
          return cached.value as! (SDAI.ARRAY<eCARTESIAN_POINT>/*[0:UPPER_INDEX_ON_CONTROL_POINTS]*/ )? 
        }
        guard let origin = sub_eB_SPLINE_CURVE else { return nil }
        let value = SDAI.ARRAY<eCARTESIAN_POINT>(origin.partialEntity._control_points__getter(SELF: origin))
        updateCache(derivedAttributeName:"CONTROL_POINTS", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eOFFSET_CURVE_3D`` )
    public var REF_DIRECTION: eDIRECTION?  {
      get {
        return sub_eOFFSET_CURVE_3D?.partialEntity._ref_direction
      }
      set(newValue) {
        guard let partial = sub_eOFFSET_CURVE_3D?.super_eOFFSET_CURVE_3D.partialEntity else { return }
        partial._ref_direction = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eIMPLICIT_PLANAR_CURVE`` )
    public var COMPUTED_REPRESENTATION: eCURVE?  {
      get {
        return sub_eIMPLICIT_PLANAR_CURVE?.partialEntity._computed_representation
      }
      set(newValue) {
        guard let partial = sub_eIMPLICIT_PLANAR_CURVE?.super_eIMPLICIT_PLANAR_CURVE.partialEntity
          else { return }
        partial._computed_representation = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eIMPLICIT_PROJECTED_CURVE`` )
    public var EXTERNAL_CURVE: eCURVE?  {
      get {
        return sub_eIMPLICIT_PROJECTED_CURVE?.partialEntity._external_curve
      }
      set(newValue) {
        guard let partial = sub_eIMPLICIT_PROJECTED_CURVE?.super_eIMPLICIT_PROJECTED_CURVE.partialEntity
          else { return }
        partial._external_curve = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eIMPLICIT_PROJECTED_CURVE`` )
    public var PROJECTION_DIRECTION: eDIRECTION?  {
      get {
        return sub_eIMPLICIT_PROJECTED_CURVE?.partialEntity._projection_direction
      }
      set(newValue) {
        guard let partial = sub_eIMPLICIT_PROJECTED_CURVE?.super_eIMPLICIT_PROJECTED_CURVE.partialEntity
          else { return }
        partial._projection_direction = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eIMPLICIT_MODEL_INTERSECTION_CURVE`` )
    public var INTERSECTED_MODEL: sSURFACE_OR_SOLID_MODEL?  {
      get {
        return sub_eIMPLICIT_MODEL_INTERSECTION_CURVE?.partialEntity._intersected_model
      }
      set(newValue) {
        guard let partial = sub_eIMPLICIT_MODEL_INTERSECTION_CURVE?.super_eIMPLICIT_MODEL_INTERSECTION_CURVE
          .partialEntity else { return }
        partial._intersected_model = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eLINE`` )
    public var DIR: eVECTOR?  {
      get {
        return sub_eLINE?.partialEntity._dir
      }
      set(newValue) {
        guard let partial = sub_eLINE?.super_eLINE.partialEntity else { return }
        partial._dir = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePARABOLA`` )
    public var FOCAL_DIST: tLENGTH_MEASURE?  {
      get {
        return sub_ePARABOLA?.partialEntity._focal_dist
      }
      set(newValue) {
        guard let partial = sub_ePARABOLA?.super_ePARABOLA.partialEntity else { return }
        partial._focal_dist = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eLOCALLY_REFINED_SPLINE_CURVE`` )
    public var DOMAIN: (SDAI.LIST<SDAI.REAL>/*[2:2]*/ )?  {
      get {
        return sub_eLOCALLY_REFINED_SPLINE_CURVE?.partialEntity._domain
      }
      set(newValue) {
        guard let partial = sub_eLOCALLY_REFINED_SPLINE_CURVE?.super_eLOCALLY_REFINED_SPLINE_CURVE
          .partialEntity else { return }
        partial._domain = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eREPRESENTATION_ITEM`` )
    public var NAME: tLABEL {
      get {
        return SDAI.UNWRAP( super_eREPRESENTATION_ITEM.partialEntity._name )
      }
      set(newValue) {
        let partial = super_eREPRESENTATION_ITEM.partialEntity
        partial._name = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eIMPLICIT_SILHOUETTE_CURVE`` )
    public var VIEW_DIRECTION: eDIRECTION?  {
      get {
        return sub_eIMPLICIT_SILHOUETTE_CURVE?.partialEntity._view_direction
      }
      set(newValue) {
        guard let partial = sub_eIMPLICIT_SILHOUETTE_CURVE?.super_eIMPLICIT_SILHOUETTE_CURVE.partialEntity
          else { return }
        partial._view_direction = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eRATIONAL_B_SPLINE_CURVE`` )
    public var WEIGHTS: (SDAI.ARRAY<SDAI.REAL>/*[0:UPPER_INDEX_ON_CONTROL_POINTS]*/ )?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"WEIGHTS") {
          return cached.value as! (SDAI.ARRAY<SDAI.REAL>/*[0:UPPER_INDEX_ON_CONTROL_POINTS]*/ )? 
        }
        guard let origin = sub_eRATIONAL_B_SPLINE_CURVE else { return nil }
        let value = SDAI.ARRAY<SDAI.REAL>(origin.partialEntity._weights__getter(SELF: origin))
        updateCache(derivedAttributeName:"WEIGHTS", value:value)
        return value
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUPER( ``eGEOMETRIC_REPRESENTATION_ITEM`` )
    public var DIM: tDIMENSION_COUNT?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"DIM") {
          return cached.value as! tDIMENSION_COUNT? 
        }
        let origin = super_eGEOMETRIC_REPRESENTATION_ITEM
        let value = tDIMENSION_COUNT(origin.partialEntity._dim__getter(SELF: origin))
        updateCache(derivedAttributeName:"DIM", value:value)
        return value
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_curve.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eREPRESENTATION_ITEM.self) else { return nil }
      self.super_eREPRESENTATION_ITEM = super1

      guard let super2 = complexEntity?.entityReference(eGEOMETRIC_REPRESENTATION_ITEM.self) else { return nil }
      self.super_eGEOMETRIC_REPRESENTATION_ITEM = super2

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "CURVE", type: self, explicitAttributeCount: 0)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eREPRESENTATION_ITEM.self)
      entityDef.add(supertype: eGEOMETRIC_REPRESENTATION_ITEM.self)
      entityDef.add(supertype: eCURVE.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "REFERENCE_TO_CURVE", keyPath: \eCURVE.REFERENCE_TO_CURVE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "CURVE_FORM", keyPath: \eCURVE.CURVE_FORM, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "TRIM_1", keyPath: \eCURVE.TRIM_1, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "TRIM_2", keyPath: \eCURVE.TRIM_2, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "LOCALLY_REFINED_SPLINE_TYPE", keyPath: \eCURVE.LOCALLY_REFINED_SPLINE_TYPE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "KNOTS", keyPath: \eCURVE.KNOTS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "PNT", keyPath: \eCURVE.PNT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "SILHOUETTED_MODEL", keyPath: \eCURVE.SILHOUETTED_MODEL, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "SENSE_AGREEMENT", keyPath: \eCURVE.SENSE_AGREEMENT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "KNOT_VALUES", keyPath: \eCURVE.KNOT_VALUES, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "DEGREE", keyPath: \eCURVE.DEGREE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "USING_SKETCH", keyPath: \eCURVE.USING_SKETCH, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "RADIUS", keyPath: \eCURVE.RADIUS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "SEMI_IMAG_AXIS", keyPath: \eCURVE.SEMI_IMAG_AXIS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "SCALING_FACTORS", keyPath: \eCURVE.SCALING_FACTORS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "KNOT_MULTIPLICITIES", keyPath: \eCURVE.KNOT_MULTIPLICITIES, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "TRANSFORMATION", keyPath: \eCURVE.TRANSFORMATION, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "CLOTHOID_CONSTANT", keyPath: \eCURVE.CLOTHOID_CONSTANT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "UPPER_INDEX_ON_CONTROL_POINTS", keyPath: \eCURVE.UPPER_INDEX_ON_CONTROL_POINTS, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "UPPER_INDEX_ON_KNOTS", keyPath: \eCURVE.UPPER_INDEX_ON_KNOTS, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "ASSOCIATED_GEOMETRY", keyPath: \eCURVE.ASSOCIATED_GEOMETRY, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "PARENT_CURVE", keyPath: \eCURVE.PARENT_CURVE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "N_SEGMENTS", keyPath: \eCURVE.N_SEGMENTS, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "EXTERNAL_SURFACE", keyPath: \eCURVE.EXTERNAL_SURFACE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "KNOT_SPEC", keyPath: \eCURVE.KNOT_SPEC, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "POINTS", keyPath: \eCURVE.POINTS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "CURVE_3D", keyPath: \eCURVE.CURVE_3D, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "BASE_RADIUS", keyPath: \eCURVE.BASE_RADIUS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "SEGMENTS", keyPath: \eCURVE.SEGMENTS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "CURVE_PLANE", keyPath: \eCURVE.CURVE_PLANE, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "SEMI_AXIS_1", keyPath: \eCURVE.SEMI_AXIS_1, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "B_SPLINES", keyPath: \eCURVE.B_SPLINES, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "SEMI_AXIS_2", keyPath: \eCURVE.SEMI_AXIS_2, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "SEMI_AXIS", keyPath: \eCURVE.SEMI_AXIS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "CONTROL_POINTS", keyPath: \eCURVE.CONTROL_POINTS, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "REF_DIRECTION", keyPath: \eCURVE.REF_DIRECTION, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "COMPUTED_REPRESENTATION", keyPath: \eCURVE.COMPUTED_REPRESENTATION, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "EXTERNAL_CURVE", keyPath: \eCURVE.EXTERNAL_CURVE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "PROJECTION_DIRECTION", keyPath: \eCURVE.PROJECTION_DIRECTION, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "INTERSECTED_MODEL", keyPath: \eCURVE.INTERSECTED_MODEL, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "DIR", keyPath: \eCURVE.DIR, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "FOCAL_DIST", keyPath: \eCURVE.FOCAL_DIST, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "DOMAIN", keyPath: \eCURVE.DOMAIN, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "NAME", keyPath: \eCURVE.NAME, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "VIEW_DIRECTION", keyPath: \eCURVE.VIEW_DIRECTION, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "WEIGHTS", keyPath: \eCURVE.WEIGHTS, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "DIM", keyPath: \eCURVE.DIM, 
        kind: .derived, source: .superEntity, mayYieldEntityReference: false)

      return entityDef
    }

  }
}
