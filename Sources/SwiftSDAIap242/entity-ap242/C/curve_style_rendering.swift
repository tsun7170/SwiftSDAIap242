/* file: curve_style_rendering.swift 	 generated: Tue Nov 16 05:35:44 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY curve_style_rendering;
      rendering_method      : shading_curve_method;
      rendering_properties  : surface_rendering_properties;
  END_ENTITY; -- curve_style_rendering (line:11150 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  ENTITY(SELF)	curve_style_rendering
    ATTR:  rendering_method,	TYPE: shading_curve_method -- EXPLICIT

    ATTR:  rendering_properties,	TYPE: surface_rendering_properties -- EXPLICIT


*/


//MARK: - Partial Entity
  public final class _curve_style_rendering : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eCURVE_STYLE_RENDERING.self
    }

    //ATTRIBUTES
    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _rendering_method: nSHADING_CURVE_METHOD // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _rendering_properties: eSURFACE_RENDERING_PROPERTIES // PLAIN EXPLICIT ATTRIBUTE

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      //SELECT data types (indirectly) referencing the current type as a member of the select list
      members.insert(SDAI.STRING(sCURVE_OR_RENDER.typeName)) // -> Self
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._rendering_method.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._rendering_properties.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._rendering_method.value.isValueEqualOptionally(to: rhs._rendering_method.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._rendering_properties.value.isValueEqualOptionally(to: rhs._rendering_properties.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._rendering_method.value.isValueEqualOptionally(to: rhs._rendering_method.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._rendering_properties.value.isValueEqualOptionally(to: rhs._rendering_properties.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(RENDERING_METHOD: nSHADING_CURVE_METHOD, RENDERING_PROPERTIES: eSURFACE_RENDERING_PROPERTIES) {
      self._rendering_method = RENDERING_METHOD
      self._rendering_properties = RENDERING_PROPERTIES
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 2
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverRequiredParameter(as: nSHADING_CURVE_METHOD.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p1) = exchangeStructure.recoverRequiredParameter(as: 
        eSURFACE_RENDERING_PROPERTIES.self, from: parameters[1])
      else { exchangeStructure.add(errorContext: "while recovering parameter #1 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( RENDERING_METHOD: p0, RENDERING_PROPERTIES: p1 )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY curve_style_rendering;
      rendering_method      : shading_curve_method;
      rendering_properties  : surface_rendering_properties;
  END_ENTITY; -- curve_style_rendering (line:11150 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eCURVE_STYLE_RENDERING : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _curve_style_rendering.self
    }
    public let partialEntity: _curve_style_rendering

    //MARK: SUPERTYPES
    public var super_eCURVE_STYLE_RENDERING: eCURVE_STYLE_RENDERING { return self } 	// [1]

    //MARK: SUBTYPES

    //MARK: ATTRIBUTES
    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eCURVE_STYLE_RENDERING`` )
    public var RENDERING_METHOD: nSHADING_CURVE_METHOD {
      get {
        return SDAI.UNWRAP( self.partialEntity._rendering_method )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._rendering_method = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eCURVE_STYLE_RENDERING`` )
    public var RENDERING_PROPERTIES: eSURFACE_RENDERING_PROPERTIES {
      get {
        return SDAI.UNWRAP( self.partialEntity._rendering_properties )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._rendering_properties = SDAI.UNWRAP(newValue)
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_curve_style_rendering.self) else { return nil }
      self.partialEntity = partial

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }

    //SIMPLE ENTITY REFERENCE
    public convenience init?(_ partial:_curve_style_rendering) {
      let complex = SDAI.ComplexEntity(entities:[partial])
      self.init(complex: complex)
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "CURVE_STYLE_RENDERING", type: self, explicitAttributeCount: 2)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eCURVE_STYLE_RENDERING.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "RENDERING_METHOD", keyPath: \eCURVE_STYLE_RENDERING.RENDERING_METHOD, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "RENDERING_PROPERTIES", keyPath: \eCURVE_STYLE_RENDERING.RENDERING_PROPERTIES, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)

      return entityDef
    }

  }
}
