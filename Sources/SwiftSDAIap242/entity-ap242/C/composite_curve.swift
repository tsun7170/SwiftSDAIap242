/* file: composite_curve.swift 	 generated: Tue Nov 16 05:35:44 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY composite_curve
    SUBTYPE OF ( bounded_curve );
      segments        : LIST [1 : ?] OF composite_curve_segment; (* observed by
          composite_curve_segment.using_curves
          *)
      self_intersect  : LOGICAL;
    DERIVE
      n_segments    : INTEGER := SIZEOF( segments );
      closed_curve  : LOGICAL := segments[n_segments].transition <> discontinuous;
    WHERE
      wr1: ( ( ( NOT closed_curve ) AND ( SIZEOF( QUERY ( temp <* segments | ( temp.transition = 
               discontinuous ) ) ) = 1 ) ) OR ( closed_curve AND ( SIZEOF( QUERY ( temp <* segments | ( temp.
               transition = discontinuous ) ) ) = 0 ) ) );
  END_ENTITY; -- composite_curve (line:9918 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	representation_item
    ATTR:  name,	TYPE: label -- EXPLICIT


  SUPER- ENTITY(2)	geometric_representation_item
    ATTR:  dim,	TYPE: dimension_count -- DERIVED
      := dimension_of( SELF )


  SUPER- ENTITY(3)	curve
    (no local attributes)

  SUPER- ENTITY(4)	bounded_curve
    (no local attributes)

  ENTITY(SELF)	composite_curve
    ATTR:  segments,	TYPE: LIST [1 : ?] OF composite_curve_segment -- EXPLICIT
      -- observed by
        ENTITY(1): composite_curve_segment,	ATTR: using_curves,	TYPE: BAG [1 : ?] OF composite_curve

    ATTR:  self_intersect,	TYPE: LOGICAL -- EXPLICIT

    ATTR:  n_segments,	TYPE: INTEGER -- DERIVED
      := SIZEOF( segments )

    ATTR:  closed_curve,	TYPE: LOGICAL -- DERIVED
      := segments[n_segments].transition <> discontinuous


  SUB- ENTITY(6)	outer_boundary_curve
    (no local attributes)

  SUB- ENTITY(7)	boundary_curve
    (no local attributes)

  SUB- ENTITY(8)	composite_curve_on_surface
    ATTR:  basis_surface,	TYPE: SET [0 : 2] OF surface -- DERIVED
      := get_basis_surface( SELF )


*/


//MARK: - Partial Entity
  public final class _composite_curve : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eCOMPOSITE_CURVE.self
    }

    //ATTRIBUTES
    /// EXPLICIT ATTRIBUTE (OBSERVED)
    public internal(set) var _segments: SDAI.LIST<eCOMPOSITE_CURVE_SEGMENT>/*[1:nil]*/ { // OBSERVED EXPLICIT ATTRIBUTE
      get {
        return __segments.copy()
      } // getter
      set {
        var newValue = newValue
        let observer = SDAI.EntityReferenceObserver(referencer: self, observerCode: _segments__observer.self)
        newValue.configure(with: observer)
        observer.observe(removing: SDAI.UNWRAP(seq:__segments.entityReferences),
          adding: SDAI.UNWRAP(seq: newValue.entityReferences) )
      } // setter
    }

    /// backing storage for observed attribute
    private var __segments: SDAI.LIST<eCOMPOSITE_CURVE_SEGMENT>/*[1:nil]*/ 

    /// attribute observer code
    internal class _segments__observer: SDAI.EntityReferenceObserver.ObserverCode {
      final override class func observe<RemovingEntities: Sequence, AddingEntities: Sequence>(
        referencer: SDAI.PartialEntity, removing: RemovingEntities, adding: AddingEntities )
        where RemovingEntities.Element: SDAI.EntityReference, AddingEntities.Element: SDAI.EntityReference
      {
        for referencedComplex in removing.map({ $0.complexEntity }) {
          for referencerOwner in referencer.owners {
            //OBSERVING ENTITY: eCOMPOSITE_CURVE_SEGMENT
            referencedComplex.partialEntityInstance(_composite_curve_segment.self)?
              ._using_curves__observeRemovedReference(in: referencerOwner)
          }
        }

        for referencedComplex in adding.map({ $0.complexEntity }) {
          for referencerOwner in referencer.owners {
            //OBSERVING ENTITY: eCOMPOSITE_CURVE_SEGMENT
            referencedComplex.partialEntityInstance(_composite_curve_segment.self)?
              ._using_curves__observeAddedReference(in: referencerOwner)
          }
        }
      }

      final override class func observe(newReferencerOwner referencerOwner: SDAI.ComplexEntity) {
        guard let attrValue = referencerOwner.partialEntityInstance(_composite_curve.self)?._segments else { return }
        for referencedComplex in attrValue.entityReferences.map({ $0.complexEntity }) {
        //OBSERVING ENTITY: eCOMPOSITE_CURVE_SEGMENT
        referencedComplex.partialEntityInstance(_composite_curve_segment.self)?
          ._using_curves__observeAddedReference(in: referencerOwner)
        }
      }

      final override class func observe(leavingReferencerOwner referencerOwner: SDAI.ComplexEntity) {
        guard let attrValue = referencerOwner.partialEntityInstance(_composite_curve.self)?._segments else { return }
        for referencedComplex in attrValue.entityReferences.map({ $0.complexEntity }) {
        //OBSERVING ENTITY: eCOMPOSITE_CURVE_SEGMENT
        referencedComplex.partialEntityInstance(_composite_curve_segment.self)?
          ._using_curves__observe(leavingReferencerOwner: referencerOwner)
        }
      }

    }

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _self_intersect: SDAI.LOGICAL // PLAIN EXPLICIT ATTRIBUTE

    /// DERIVE ATTRIBUTE
    internal func _n_segments__getter(SELF: eCOMPOSITE_CURVE) -> SDAI.INTEGER?  {

      let _TEMP1 = SDAI.SIZEOF(SELF.SEGMENTS)
      return _TEMP1
    }

    /// DERIVE ATTRIBUTE
    internal func _closed_curve__getter(SELF: eCOMPOSITE_CURVE) -> SDAI.LOGICAL {

      let _TEMP1 = SELF.SEGMENTS[SELF.N_SEGMENTS]
      let _TEMP2 = _TEMP1?.TRANSITION
      let _TEMP3 = _TEMP2 .!=. SDAI.FORCE_OPTIONAL(DISCONTINUOUS)
      return _TEMP3
    }

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      //SELECT data types (indirectly) referencing the current type as a member of the select list
      members.insert(SDAI.STRING(sPATH_OR_COMPOSITE_CURVE.typeName)) // -> Self
      members.insert(SDAI.STRING(sEXTERNAL_IDENTIFICATION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sB_SPLINE_OR_COMPOSITE_CURVE_SELECT.typeName)) // -> Self
      members.insert(SDAI.STRING(sINSPECTED_ECDQ_ELEMENT_SELECT.typeName)) // -> sB_SPLINE_OR_COMPOSITE_CURVE_SELECT
      members.insert(SDAI.STRING(sLOCATION_OF_EXTREME_VALUE_SELECT.typeName)) // -> sINSPECTED_ECDQ_ELEMENT_SELECT
      members.insert(SDAI.STRING(sINSPECTED_SHAPE_ELEMENT_SELECT.typeName)) // -> sB_SPLINE_OR_COMPOSITE_CURVE_SELECT
      members.insert(SDAI.STRING(sINSPECTED_ELEMENT_SELECT.typeName)) // -> sB_SPLINE_OR_COMPOSITE_CURVE_SELECT
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._segments.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._self_intersect.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._segments.value.isValueEqualOptionally(to: rhs._segments.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._self_intersect.value.isValueEqualOptionally(to: rhs._self_intersect.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._segments.value.isValueEqualOptionally(to: rhs._segments.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._self_intersect.value.isValueEqualOptionally(to: rhs._self_intersect.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: eCOMPOSITE_CURVE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.SEGMENTS.QUERY{ TEMP in 

          let _TEMP1 = TEMP.TRANSITION
          let _TEMP2 = SDAI.FORCE_OPTIONAL(_TEMP1) .==. SDAI.FORCE_OPTIONAL(DISCONTINUOUS)
          return _TEMP2 }
      let _TEMP2 = SDAI.SIZEOF(_TEMP1)
      let _TEMP3 = _TEMP2 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
      let _TEMP4 = (  !SELF.CLOSED_CURVE ) && _TEMP3
      let _TEMP5 = SELF.SEGMENTS.QUERY{ TEMP in 

          let _TEMP1 = TEMP.TRANSITION
          let _TEMP2 = SDAI.FORCE_OPTIONAL(_TEMP1) .==. SDAI.FORCE_OPTIONAL(DISCONTINUOUS)
          return _TEMP2 }
      let _TEMP6 = SDAI.SIZEOF(_TEMP5)
      let _TEMP7 = _TEMP6 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      let _TEMP8 = SELF.CLOSED_CURVE && _TEMP7
      let _TEMP9 = _TEMP4 || _TEMP8
      return _TEMP9
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(SEGMENTS: SDAI.LIST<eCOMPOSITE_CURVE_SEGMENT>/*[1:nil]*/ , 
                SELF_INTERSECT: SDAI.LOGICAL) {
      self.__segments = SEGMENTS
      self._self_intersect = SELF_INTERSECT
      super.init(asAbstructSuperclass:())

      self._segments.configure(with: SDAI.EntityReferenceObserver(referencer: self, observerCode: _segments__observer.self))
    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 2
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverRequiredParameter(as: SDAI.LIST<
        eCOMPOSITE_CURVE_SEGMENT>.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p1) = exchangeStructure.recoverRequiredParameter(as: SDAI.LOGICAL.self, from: parameters[1])
      else { exchangeStructure.add(errorContext: "while recovering parameter #1 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( SEGMENTS: p0, SELF_INTERSECT: SDAI.LOGICAL(p1) )
    }

    /// broadcasting a new complex entity becoming an owner of the partial entity
    final public override func broadcast(addedToComplex complex: SDAI.ComplexEntity) {
      _segments__observer.observe(newReferencerOwner: complex)
    }

    /// broadcasting a complex entity withdrawing an owner of the partial entity
    final public override func broadcast(removedFromComplex complex: SDAI.ComplexEntity) {
      _segments__observer.observe(leavingReferencerOwner: complex)
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY composite_curve
    SUBTYPE OF ( bounded_curve );
      segments        : LIST [1 : ?] OF composite_curve_segment; (* observed by
          composite_curve_segment.using_curves
          *)
      self_intersect  : LOGICAL;
    DERIVE
      n_segments    : INTEGER := SIZEOF( segments );
      closed_curve  : LOGICAL := segments[n_segments].transition <> discontinuous;
    WHERE
      wr1: ( ( ( NOT closed_curve ) AND ( SIZEOF( QUERY ( temp <* segments | ( temp.transition = 
               discontinuous ) ) ) = 1 ) ) OR ( closed_curve AND ( SIZEOF( QUERY ( temp <* segments | ( temp.
               transition = discontinuous ) ) ) = 0 ) ) );
  END_ENTITY; -- composite_curve (line:9918 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eCOMPOSITE_CURVE : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _composite_curve.self
    }
    public let partialEntity: _composite_curve

    //MARK: SUPERTYPES
    public let super_eREPRESENTATION_ITEM: eREPRESENTATION_ITEM 	// [1]
    public let super_eGEOMETRIC_REPRESENTATION_ITEM: eGEOMETRIC_REPRESENTATION_ITEM 	// [2]
    public let super_eCURVE: eCURVE 	// [3]
    public let super_eBOUNDED_CURVE: eBOUNDED_CURVE 	// [4]
    public var super_eCOMPOSITE_CURVE: eCOMPOSITE_CURVE { return self } 	// [5]

    //MARK: SUBTYPES
    public var sub_eOUTER_BOUNDARY_CURVE: eOUTER_BOUNDARY_CURVE? {	// [6]
      return self.complexEntity.entityReference(eOUTER_BOUNDARY_CURVE.self)
    }

    public var sub_eBOUNDARY_CURVE: eBOUNDARY_CURVE? {	// [7]
      return self.complexEntity.entityReference(eBOUNDARY_CURVE.self)
    }

    public var sub_eCOMPOSITE_CURVE_ON_SURFACE: eCOMPOSITE_CURVE_ON_SURFACE? {	// [8]
      return self.complexEntity.entityReference(eCOMPOSITE_CURVE_ON_SURFACE.self)
    }


    //MARK: ATTRIBUTES
    /// __DERIVE__ attribute
    /// - origin: SELF( ``eCOMPOSITE_CURVE`` )
    public var N_SEGMENTS: SDAI.INTEGER?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"N_SEGMENTS") {
          return cached.value as! SDAI.INTEGER? 
        }
        let origin = self
        let value = origin.partialEntity._n_segments__getter(SELF: origin)
        updateCache(derivedAttributeName:"N_SEGMENTS", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eCOMPOSITE_CURVE`` )
    public var SELF_INTERSECT: SDAI.LOGICAL {
      get {
        return SDAI.UNWRAP( self.partialEntity._self_intersect )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._self_intersect = SDAI.LOGICAL(newValue)
      }
    }

    /// __EXPLICIT(OBSERVED)__ attribute
    /// - origin: SELF( ``eCOMPOSITE_CURVE`` )
    public var SEGMENTS: SDAI.LIST<eCOMPOSITE_CURVE_SEGMENT>/*[1:nil]*/  {
      get {
        return SDAI.UNWRAP( self.partialEntity._segments )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._segments = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eCOMPOSITE_CURVE_ON_SURFACE`` )
    public var BASIS_SURFACE: (SDAI.SET<eSURFACE>/*[0:2]*/ )?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"BASIS_SURFACE") {
          return cached.value as! (SDAI.SET<eSURFACE>/*[0:2]*/ )? 
        }
        guard let origin = sub_eCOMPOSITE_CURVE_ON_SURFACE else { return nil }
        let value = SDAI.SET<eSURFACE>(origin.partialEntity._basis_surface__getter(SELF: origin))
        updateCache(derivedAttributeName:"BASIS_SURFACE", value:value)
        return value
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SELF( ``eCOMPOSITE_CURVE`` )
    public var CLOSED_CURVE: SDAI.LOGICAL {
      get {
        if let cached = cachedValue(derivedAttributeName:"CLOSED_CURVE") {
          return cached.value as! SDAI.LOGICAL
        }
        let origin = self
        let value = SDAI.LOGICAL( origin.partialEntity._closed_curve__getter(SELF: origin) )
        updateCache(derivedAttributeName:"CLOSED_CURVE", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eREPRESENTATION_ITEM`` )
    public var NAME: tLABEL {
      get {
        return SDAI.UNWRAP( super_eREPRESENTATION_ITEM.partialEntity._name )
      }
      set(newValue) {
        let partial = super_eREPRESENTATION_ITEM.partialEntity
        partial._name = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUPER( ``eGEOMETRIC_REPRESENTATION_ITEM`` )
    public var DIM: tDIMENSION_COUNT?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"DIM") {
          return cached.value as! tDIMENSION_COUNT? 
        }
        let origin = super_eGEOMETRIC_REPRESENTATION_ITEM
        let value = tDIMENSION_COUNT(origin.partialEntity._dim__getter(SELF: origin))
        updateCache(derivedAttributeName:"DIM", value:value)
        return value
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_composite_curve.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eREPRESENTATION_ITEM.self) else { return nil }
      self.super_eREPRESENTATION_ITEM = super1

      guard let super2 = complexEntity?.entityReference(eGEOMETRIC_REPRESENTATION_ITEM.self) else { return nil }
      self.super_eGEOMETRIC_REPRESENTATION_ITEM = super2

      guard let super3 = complexEntity?.entityReference(eCURVE.self) else { return nil }
      self.super_eCURVE = super3

      guard let super4 = complexEntity?.entityReference(eBOUNDED_CURVE.self) else { return nil }
      self.super_eBOUNDED_CURVE = super4

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _composite_curve.WHERE_wr1(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "COMPOSITE_CURVE", type: self, explicitAttributeCount: 2)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eREPRESENTATION_ITEM.self)
      entityDef.add(supertype: eGEOMETRIC_REPRESENTATION_ITEM.self)
      entityDef.add(supertype: eCURVE.self)
      entityDef.add(supertype: eBOUNDED_CURVE.self)
      entityDef.add(supertype: eCOMPOSITE_CURVE.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "N_SEGMENTS", keyPath: \eCOMPOSITE_CURVE.N_SEGMENTS, 
        kind: .derived, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "SELF_INTERSECT", keyPath: \eCOMPOSITE_CURVE.SELF_INTERSECT, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "SEGMENTS", keyPath: \eCOMPOSITE_CURVE.SEGMENTS, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "BASIS_SURFACE", keyPath: \eCOMPOSITE_CURVE.BASIS_SURFACE, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "CLOSED_CURVE", keyPath: \eCOMPOSITE_CURVE.CLOSED_CURVE, 
        kind: .derived, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "NAME", keyPath: \eCOMPOSITE_CURVE.NAME, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "DIM", keyPath: \eCOMPOSITE_CURVE.DIM, 
        kind: .derived, source: .superEntity, mayYieldEntityReference: false)

      return entityDef
    }

  }
}
