/* file: characterized_chain_based_item_within_representation.swift 	 generated: Mon Jan  3 16:32:52 2022 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.1, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY characterized_chain_based_item_within_representation
    SUBTYPE OF ( characterized_item_within_representation );
      nodes            : LIST [2 : ?] OF UNIQUE representation;
      undirected_link  : LIST [1 : ?] OF chained_representation_link;
    DERIVE
      root           : representation := nodes[1];
      directed_link  : LIST [1 : ?] OF representation_relationship := get_directed_link( nodes, 
                         undirected_link );
      leaf           : representation := SELF\characterized_item_within_representation.rep;
    WHERE
      wr1: EXISTS( directed_link );
  END_ENTITY; -- characterized_chain_based_item_within_representation (line:9235 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	characterized_object
    ATTR:  name,	TYPE: label -- EXPLICIT (DYNAMIC)
      -- possibly overriden by
          ENTITY: shape_feature_definition_element_relationship,	TYPE: label	(as DERIVED)
          ENTITY: shape_feature_fit_relationship,	TYPE: label	(as DERIVED)
          ENTITY: characterized_representation,	TYPE: label	(as DERIVED)
          ENTITY: shape_feature_definition_relationship,	TYPE: label	(as DERIVED)

    ATTR:  description,	TYPE: OPTIONAL text -- EXPLICIT (DYNAMIC)
      -- possibly overriden by
          ENTITY: shape_feature_definition_element_relationship,	TYPE: text	(as DERIVED)
          ENTITY: shape_feature_fit_relationship,	TYPE: text	(as DERIVED)
          ENTITY: characterized_representation,	TYPE: text	(as DERIVED)
          ENTITY: shape_feature_definition_relationship,	TYPE: text	(as DERIVED)


  SUPER- ENTITY(2)	characterized_item_within_representation
    ATTR:  item,	TYPE: representation_item -- EXPLICIT
      -- possibly overriden by
          ENTITY: model_geometric_view,	TYPE: camera_model

    ATTR:  rep,	TYPE: representation -- EXPLICIT
      -- possibly overriden by
          ENTITY: model_geometric_view,	TYPE: draughting_model


  ENTITY(SELF)	characterized_chain_based_item_within_representation
    ATTR:  nodes,	TYPE: LIST [2 : ?] OF UNIQUE representation -- EXPLICIT

    ATTR:  undirected_link,	TYPE: LIST [1 : ?] OF chained_representation_link -- EXPLICIT

    ATTR:  root,	TYPE: representation -- DERIVED
      := nodes[1]

    ATTR:  directed_link,	TYPE: LIST [1 : ?] OF representation_relationship -- DERIVED
      := get_directed_link( nodes, undirected_link )

    ATTR:  leaf,	TYPE: representation -- DERIVED
      := SELF\characterized_item_within_representation.rep


*/


//MARK: - Partial Entity
  public final class _characterized_chain_based_item_within_representation : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eCHARACTERIZED_CHAIN_BASED_ITEM_WITHIN_REPRESENTATION.self
    }

    //ATTRIBUTES
    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _nodes: SDAI.LIST_UNIQUE<eREPRESENTATION>/*[2:nil]*/  // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _undirected_link: SDAI.LIST<sCHAINED_REPRESENTATION_LINK>/*[1:nil]*/  // PLAIN EXPLICIT ATTRIBUTE

    /// DERIVE ATTRIBUTE
    internal func _root__getter(SELF: eCHARACTERIZED_CHAIN_BASED_ITEM_WITHIN_REPRESENTATION) -> 
      eREPRESENTATION?  {

      let _TEMP1 = SELF.NODES[1]
      return _TEMP1
    }

    /// DERIVE ATTRIBUTE
    internal func _directed_link__getter(SELF: eCHARACTERIZED_CHAIN_BASED_ITEM_WITHIN_REPRESENTATION) -> (
      SDAI.LIST<eREPRESENTATION_RELATIONSHIP>/*[1:nil]*/ )?  {

      let _TEMP1 = GET_DIRECTED_LINK(
        NODES: SDAI.LIST<eREPRESENTATION>(/*SDAI.LIST_UNIQUE<eREPRESENTATION>[2:nil] */SELF.NODES), 
        UNDIRECTED_LINK: SDAI.LIST<sCHAINED_REPRESENTATION_LINK>(/*SDAI.LIST<sCHAINED_REPRESENTATION_LINK>[1:
        nil] */SELF.UNDIRECTED_LINK))
      return SDAI.LIST<eREPRESENTATION_RELATIONSHIP>(bound1: SDAI.UNWRAP(SDAI.INTEGER(1)), bound2: (nil as 
        SDAI.INTEGER?), /*SDAI.LIST<eREPRESENTATION_RELATIONSHIP>*/_TEMP1)
    }

    /// DERIVE ATTRIBUTE
    internal func _leaf__getter(SELF: eCHARACTERIZED_CHAIN_BASED_ITEM_WITHIN_REPRESENTATION) -> 
      eREPRESENTATION?  {

      let _TEMP1 = SELF.GROUP_REF(eCHARACTERIZED_ITEM_WITHIN_REPRESENTATION.self)
      let _TEMP2 = _TEMP1?.REP
      return _TEMP2
    }

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._nodes.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._undirected_link.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._nodes.value.isValueEqualOptionally(to: rhs._nodes.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._undirected_link.value.isValueEqualOptionally(to: rhs._undirected_link.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._nodes.value.isValueEqualOptionally(to: rhs._nodes.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._undirected_link.value.isValueEqualOptionally(to: rhs._undirected_link.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: eCHARACTERIZED_CHAIN_BASED_ITEM_WITHIN_REPRESENTATION?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.EXISTS(SELF.DIRECTED_LINK)
      return SDAI.LOGICAL(/*SDAI.BOOLEAN*/_TEMP1)
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(NODES: SDAI.LIST_UNIQUE<eREPRESENTATION>/*[2:nil]*/ , UNDIRECTED_LINK: SDAI.LIST<
                sCHAINED_REPRESENTATION_LINK>/*[1:nil]*/ ) {
      self._nodes = NODES
      self._undirected_link = UNDIRECTED_LINK
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 2
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverRequiredParameter(as: SDAI.LIST_UNIQUE<
        eREPRESENTATION>.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p1) = exchangeStructure.recoverRequiredParameter(as: SDAI.LIST<
        sCHAINED_REPRESENTATION_LINK>.self, from: parameters[1])
      else { exchangeStructure.add(errorContext: "while recovering parameter #1 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( NODES: p0, UNDIRECTED_LINK: p1 )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY characterized_chain_based_item_within_representation
    SUBTYPE OF ( characterized_item_within_representation );
      nodes            : LIST [2 : ?] OF UNIQUE representation;
      undirected_link  : LIST [1 : ?] OF chained_representation_link;
    DERIVE
      root           : representation := nodes[1];
      directed_link  : LIST [1 : ?] OF representation_relationship := get_directed_link( nodes, 
                         undirected_link );
      leaf           : representation := SELF\characterized_item_within_representation.rep;
    WHERE
      wr1: EXISTS( directed_link );
  END_ENTITY; -- characterized_chain_based_item_within_representation (line:9235 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eCHARACTERIZED_CHAIN_BASED_ITEM_WITHIN_REPRESENTATION : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _characterized_chain_based_item_within_representation.self
    }
    public let partialEntity: _characterized_chain_based_item_within_representation

    //MARK: SUPERTYPES
    public let super_eCHARACTERIZED_OBJECT: eCHARACTERIZED_OBJECT 	// [1]
    public let super_eCHARACTERIZED_ITEM_WITHIN_REPRESENTATION: eCHARACTERIZED_ITEM_WITHIN_REPRESENTATION 	// [2]
    public var super_eCHARACTERIZED_CHAIN_BASED_ITEM_WITHIN_REPRESENTATION: eCHARACTERIZED_CHAIN_BASED_ITEM_WITHIN_REPRESENTATION { return self } 	// [3]

    //MARK: SUBTYPES

    //MARK: ATTRIBUTES
    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eCHARACTERIZED_CHAIN_BASED_ITEM_WITHIN_REPRESENTATION`` )
    public var UNDIRECTED_LINK: SDAI.LIST<sCHAINED_REPRESENTATION_LINK>/*[1:nil]*/  {
      get {
        return SDAI.UNWRAP( self.partialEntity._undirected_link )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._undirected_link = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT(DYNAMIC)__ attribute
    /// - origin: SUPER( ``eCHARACTERIZED_OBJECT`` )
    public var DESCRIPTION: tTEXT?  {
      get {
        if let resolved = _characterized_object._description__provider(complex: self.complexEntity) {
          let value = resolved._description__getter(complex: self.complexEntity)
          return value
        }
        else {
          return super_eCHARACTERIZED_OBJECT.partialEntity._description
        }
      }
      set(newValue) {
        if let _ = _characterized_object._description__provider(complex: self.complexEntity) { return }

        let partial = super_eCHARACTERIZED_OBJECT.partialEntity
        partial._description = newValue
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SELF( ``eCHARACTERIZED_CHAIN_BASED_ITEM_WITHIN_REPRESENTATION`` )
    public var LEAF: eREPRESENTATION?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"LEAF") {
          return cached.value as! eREPRESENTATION? 
        }
        let origin = self
        let value = origin.partialEntity._leaf__getter(SELF: origin)
        updateCache(derivedAttributeName:"LEAF", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eCHARACTERIZED_ITEM_WITHIN_REPRESENTATION`` )
    public var ITEM: eREPRESENTATION_ITEM {
      get {
        return SDAI.UNWRAP( super_eCHARACTERIZED_ITEM_WITHIN_REPRESENTATION.partialEntity._item )
      }
      set(newValue) {
        let partial = super_eCHARACTERIZED_ITEM_WITHIN_REPRESENTATION.partialEntity
        partial._item = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eCHARACTERIZED_ITEM_WITHIN_REPRESENTATION`` )
    public var REP: eREPRESENTATION {
      get {
        return SDAI.UNWRAP( super_eCHARACTERIZED_ITEM_WITHIN_REPRESENTATION.partialEntity._rep )
      }
      set(newValue) {
        let partial = super_eCHARACTERIZED_ITEM_WITHIN_REPRESENTATION.partialEntity
        partial._rep = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SELF( ``eCHARACTERIZED_CHAIN_BASED_ITEM_WITHIN_REPRESENTATION`` )
    public var ROOT: eREPRESENTATION?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"ROOT") {
          return cached.value as! eREPRESENTATION? 
        }
        let origin = self
        let value = origin.partialEntity._root__getter(SELF: origin)
        updateCache(derivedAttributeName:"ROOT", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eCHARACTERIZED_CHAIN_BASED_ITEM_WITHIN_REPRESENTATION`` )
    public var NODES: SDAI.LIST_UNIQUE<eREPRESENTATION>/*[2:nil]*/  {
      get {
        return SDAI.UNWRAP( self.partialEntity._nodes )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._nodes = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SELF( ``eCHARACTERIZED_CHAIN_BASED_ITEM_WITHIN_REPRESENTATION`` )
    public var DIRECTED_LINK: (SDAI.LIST<eREPRESENTATION_RELATIONSHIP>/*[1:nil]*/ )?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"DIRECTED_LINK") {
          return cached.value as! (SDAI.LIST<eREPRESENTATION_RELATIONSHIP>/*[1:nil]*/ )? 
        }
        let origin = self
        let value = origin.partialEntity._directed_link__getter(SELF: origin)
        updateCache(derivedAttributeName:"DIRECTED_LINK", value:value)
        return value
      }
    }

    /// __EXPLICIT(DYNAMIC)__ attribute
    /// - origin: SUPER( ``eCHARACTERIZED_OBJECT`` )
    public var NAME: tLABEL {
      get {
        if let resolved = _characterized_object._name__provider(complex: self.complexEntity) {
          let value = resolved._name__getter(complex: self.complexEntity)
          return value
        }
        else {
          return SDAI.UNWRAP( super_eCHARACTERIZED_OBJECT.partialEntity._name )
        }
      }
      set(newValue) {
        if let _ = _characterized_object._name__provider(complex: self.complexEntity) { return }

        let partial = super_eCHARACTERIZED_OBJECT.partialEntity
        partial._name = SDAI.UNWRAP(newValue)
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_characterized_chain_based_item_within_representation.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eCHARACTERIZED_OBJECT.self) else { return nil }
      self.super_eCHARACTERIZED_OBJECT = super1

      guard let super2 = complexEntity?.entityReference(eCHARACTERIZED_ITEM_WITHIN_REPRESENTATION.self) else { return nil }
      self.super_eCHARACTERIZED_ITEM_WITHIN_REPRESENTATION = super2

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _characterized_chain_based_item_within_representation.WHERE_wr1(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "CHARACTERIZED_CHAIN_BASED_ITEM_WITHIN_REPRESENTATION", type: self, explicitAttributeCount: 2)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eCHARACTERIZED_OBJECT.self)
      entityDef.add(supertype: eCHARACTERIZED_ITEM_WITHIN_REPRESENTATION.self)
      entityDef.add(supertype: eCHARACTERIZED_CHAIN_BASED_ITEM_WITHIN_REPRESENTATION.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "UNDIRECTED_LINK", keyPath: \eCHARACTERIZED_CHAIN_BASED_ITEM_WITHIN_REPRESENTATION.UNDIRECTED_LINK, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "DESCRIPTION", keyPath: \eCHARACTERIZED_CHAIN_BASED_ITEM_WITHIN_REPRESENTATION.DESCRIPTION, 
        kind: .explicitOptional, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "LEAF", keyPath: \eCHARACTERIZED_CHAIN_BASED_ITEM_WITHIN_REPRESENTATION.LEAF, 
        kind: .derived, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "ITEM", keyPath: \eCHARACTERIZED_CHAIN_BASED_ITEM_WITHIN_REPRESENTATION.ITEM, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "REP", keyPath: \eCHARACTERIZED_CHAIN_BASED_ITEM_WITHIN_REPRESENTATION.REP, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "ROOT", keyPath: \eCHARACTERIZED_CHAIN_BASED_ITEM_WITHIN_REPRESENTATION.ROOT, 
        kind: .derived, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "NODES", keyPath: \eCHARACTERIZED_CHAIN_BASED_ITEM_WITHIN_REPRESENTATION.NODES, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "DIRECTED_LINK", keyPath: \eCHARACTERIZED_CHAIN_BASED_ITEM_WITHIN_REPRESENTATION.DIRECTED_LINK, 
        kind: .derived, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "NAME", keyPath: \eCHARACTERIZED_CHAIN_BASED_ITEM_WITHIN_REPRESENTATION.NAME, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)

      return entityDef
    }

  }
}
