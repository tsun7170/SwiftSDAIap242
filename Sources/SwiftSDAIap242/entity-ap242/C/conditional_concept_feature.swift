/* file: conditional_concept_feature.swift 	 generated: Sat Aug 14 13:46:02 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY conditional_concept_feature
    SUBTYPE OF ( product_concept_feature );
      condition  : concept_feature_relationship_with_condition;
  END_ENTITY; -- conditional_concept_feature (line:10227 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	product_concept_feature
    ATTR:  id,	TYPE: identifier -- EXPLICIT

    ATTR:  name,	TYPE: label -- EXPLICIT

    ATTR:  description,	TYPE: OPTIONAL text -- EXPLICIT


  ENTITY(SELF)	conditional_concept_feature
    ATTR:  condition,	TYPE: concept_feature_relationship_with_condition -- EXPLICIT


  SUB- ENTITY(3)	inclusion_product_concept_feature
    (no local attributes)

*/


//MARK: - Partial Entity
  public final class _conditional_concept_feature : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eCONDITIONAL_CONCEPT_FEATURE.self
    }

    //ATTRIBUTES
    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _condition: eCONCEPT_FEATURE_RELATIONSHIP_WITH_CONDITION // PLAIN EXPLICIT ATTRIBUTE

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      //SELECT data types (indirectly) referencing the current type as a member of the select list
      members.insert(SDAI.STRING(sGENERAL_ORGANIZATIONAL_DATA_SELECT.typeName)) // -> Self
      members.insert(SDAI.STRING(sEVENT_OCCURRENCE_ITEM.typeName)) // -> sGENERAL_ORGANIZATIONAL_DATA_SELECT
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._condition.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._condition.value.isValueEqualOptionally(to: rhs._condition.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._condition.value.isValueEqualOptionally(to: rhs._condition.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(CONDITION: eCONCEPT_FEATURE_RELATIONSHIP_WITH_CONDITION) {
      self._condition = CONDITION
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 1
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverRequiredParameter(as: 
        eCONCEPT_FEATURE_RELATIONSHIP_WITH_CONDITION.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( CONDITION: p0 )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY conditional_concept_feature
    SUBTYPE OF ( product_concept_feature );
      condition  : concept_feature_relationship_with_condition;
  END_ENTITY; -- conditional_concept_feature (line:10227 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eCONDITIONAL_CONCEPT_FEATURE : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _conditional_concept_feature.self
    }
    public let partialEntity: _conditional_concept_feature

    //MARK: SUPERTYPES
    public let super_ePRODUCT_CONCEPT_FEATURE: ePRODUCT_CONCEPT_FEATURE 	// [1]
    public var super_eCONDITIONAL_CONCEPT_FEATURE: eCONDITIONAL_CONCEPT_FEATURE { return self } 	// [2]

    //MARK: SUBTYPES
    public var sub_eINCLUSION_PRODUCT_CONCEPT_FEATURE: eINCLUSION_PRODUCT_CONCEPT_FEATURE? {	// [3]
      return self.complexEntity.entityReference(eINCLUSION_PRODUCT_CONCEPT_FEATURE.self)
    }


    //MARK: ATTRIBUTES
    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``ePRODUCT_CONCEPT_FEATURE`` )
    public var DESCRIPTION: tTEXT?  {
      get {
        return super_ePRODUCT_CONCEPT_FEATURE.partialEntity._description
      }
      set(newValue) {
        let partial = super_ePRODUCT_CONCEPT_FEATURE.partialEntity
        partial._description = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eCONDITIONAL_CONCEPT_FEATURE`` )
    public var CONDITION: eCONCEPT_FEATURE_RELATIONSHIP_WITH_CONDITION {
      get {
        return SDAI.UNWRAP( self.partialEntity._condition )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._condition = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``ePRODUCT_CONCEPT_FEATURE`` )
    public var ID: tIDENTIFIER {
      get {
        return SDAI.UNWRAP( super_ePRODUCT_CONCEPT_FEATURE.partialEntity._id )
      }
      set(newValue) {
        let partial = super_ePRODUCT_CONCEPT_FEATURE.partialEntity
        partial._id = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``ePRODUCT_CONCEPT_FEATURE`` )
    public var NAME: tLABEL {
      get {
        return SDAI.UNWRAP( super_ePRODUCT_CONCEPT_FEATURE.partialEntity._name )
      }
      set(newValue) {
        let partial = super_ePRODUCT_CONCEPT_FEATURE.partialEntity
        partial._name = SDAI.UNWRAP(newValue)
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_conditional_concept_feature.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(ePRODUCT_CONCEPT_FEATURE.self) else { return nil }
      self.super_ePRODUCT_CONCEPT_FEATURE = super1

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "CONDITIONAL_CONCEPT_FEATURE", type: self, explicitAttributeCount: 1)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: ePRODUCT_CONCEPT_FEATURE.self)
      entityDef.add(supertype: eCONDITIONAL_CONCEPT_FEATURE.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "DESCRIPTION", keyPath: \eCONDITIONAL_CONCEPT_FEATURE.DESCRIPTION, 
        kind: .explicitOptional, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "CONDITION", keyPath: \eCONDITIONAL_CONCEPT_FEATURE.CONDITION, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "ID", keyPath: \eCONDITIONAL_CONCEPT_FEATURE.ID, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "NAME", keyPath: \eCONDITIONAL_CONCEPT_FEATURE.NAME, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)

      return entityDef
    }

  }
}
