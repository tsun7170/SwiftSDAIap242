/* file: modified_solid_with_placed_configuration.swift 	 generated: Sat Aug 14 13:46:02 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY modified_solid_with_placed_configuration
    ABSTRACT SUPERTYPE OF ( 
        ONEOF ( 
            solid_with_depression, 
            solid_with_protrusion, 
            solid_with_shape_element_pattern ) )
    SUBTYPE OF ( modified_solid );
      placing  : axis2_placement_3d;
  END_ENTITY; -- modified_solid_with_placed_configuration (line:21611 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	representation_item
    ATTR:  name,	TYPE: label -- EXPLICIT


  SUPER- ENTITY(2)	geometric_representation_item
    ATTR:  dim,	TYPE: dimension_count -- DERIVED
      := dimension_of( SELF )


  SUPER- ENTITY(3)	solid_model
    (no local attributes)

  SUPER- ENTITY(4)	modified_solid
    ATTR:  rationale,	TYPE: text -- EXPLICIT

    ATTR:  base_solid,	TYPE: base_solid_select -- EXPLICIT


  ENTITY(SELF)	modified_solid_with_placed_configuration
    ATTR:  placing,	TYPE: axis2_placement_3d -- EXPLICIT


  SUB- ENTITY(6)	solid_with_incomplete_circular_pattern
    ATTR:  omitted_instances,	TYPE: SET [1 : ?] OF positive_integer -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(7)	solid_with_circular_pattern
    ATTR:  replicate_count,	TYPE: positive_integer -- EXPLICIT

    ATTR:  angular_spacing,	TYPE: plane_angle_measure -- EXPLICIT

    ATTR:  radial_alignment,	TYPE: BOOLEAN -- EXPLICIT

    ATTR:  reference_point,	TYPE: point -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(8)	solid_with_incomplete_rectangular_pattern
    ATTR:  omitted_instances,	TYPE: SET [1 : ?] OF LIST [2 : 2] OF positive_integer -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(9)	solid_with_rectangular_pattern
    ATTR:  row_count,	TYPE: positive_integer -- EXPLICIT

    ATTR:  column_count,	TYPE: positive_integer -- EXPLICIT

    ATTR:  row_spacing,	TYPE: length_measure -- EXPLICIT

    ATTR:  column_spacing,	TYPE: length_measure -- EXPLICIT


  SUB- ENTITY(10)	solid_with_shape_element_pattern
    ATTR:  replicated_element,	TYPE: modified_solid_with_placed_configuration -- EXPLICIT


  SUB- ENTITY(11)	solid_with_general_protrusion
    ATTR:  profile,	TYPE: positioned_sketch -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  reference_point,	TYPE: point -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(12)	solid_with_rectangular_protrusion
    ATTR:  protrusion_length,	TYPE: positive_length_measure -- EXPLICIT

    ATTR:  protrusion_width,	TYPE: positive_length_measure -- EXPLICIT

    ATTR:  protrusion_corner_radius,	TYPE: non_negative_length_measure -- EXPLICIT


  SUB- ENTITY(13)	solid_with_circular_protrusion
    ATTR:  protrusion_radius,	TYPE: positive_length_measure -- EXPLICIT


  SUB- ENTITY(14)	solid_with_protrusion
    ATTR:  protrusion_height,	TYPE: positive_length_measure -- EXPLICIT

    ATTR:  protrusion_draft_angle,	TYPE: plane_angle_measure -- EXPLICIT


  SUB- ENTITY(15)	solid_with_trapezoidal_section_slot
    ATTR:  draft_angle,	TYPE: plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  floor_fillet_radius,	TYPE: non_negative_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(16)	solid_with_tee_section_slot
    ATTR:  tee_section_width,	TYPE: positive_length_measure -- EXPLICIT

    ATTR:  collar_depth,	TYPE: positive_length_measure -- EXPLICIT


  SUB- ENTITY(17)	solid_with_straight_slot
    ATTR:  slot_length,	TYPE: positive_length_measure -- EXPLICIT


  SUB- ENTITY(18)	solid_with_curved_slot
    ATTR:  slot_centreline,	TYPE: bounded_curve -- EXPLICIT


  SUB- ENTITY(19)	solid_with_slot
    ATTR:  slot_width,	TYPE: positive_length_measure -- EXPLICIT

    ATTR:  closed_ends,	TYPE: LIST [2 : 2] OF LOGICAL -- EXPLICIT

    ATTR:  end_exit_faces,	TYPE: LIST [2 : 2] OF SET [0 : ?] OF face_surface -- EXPLICIT


  SUB- ENTITY(20)	solid_with_general_pocket
    ATTR:  profile,	TYPE: positioned_sketch -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  reference_point,	TYPE: point -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(21)	solid_with_rectangular_pocket
    ATTR:  pocket_length,	TYPE: positive_length_measure -- EXPLICIT

    ATTR:  pocket_width,	TYPE: positive_length_measure -- EXPLICIT

    ATTR:  corner_radius,	TYPE: non_negative_length_measure -- EXPLICIT


  SUB- ENTITY(22)	solid_with_circular_pocket
    ATTR:  pocket_radius,	TYPE: positive_length_measure -- EXPLICIT


  SUB- ENTITY(23)	solid_with_pocket
    ATTR:  floor_blend_radius,	TYPE: non_negative_length_measure -- EXPLICIT

    ATTR:  draft_angle,	TYPE: plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(24)	solid_with_spherical_bottom_round_hole
    ATTR:  sphere_radius,	TYPE: positive_length_measure -- EXPLICIT


  SUB- ENTITY(25)	solid_with_flat_bottom_round_hole
    ATTR:  fillet_radius,	TYPE: non_negative_length_measure -- EXPLICIT


  SUB- ENTITY(26)	solid_with_stepped_round_hole_and_conical_transitions
    ATTR:  conical_transitions,	TYPE: SET [1 : ?] OF conical_stepped_hole_transition -- EXPLICIT


  SUB- ENTITY(27)	solid_with_conical_bottom_round_hole
    ATTR:  semi_apex_angle,	TYPE: positive_plane_angle_measure -- EXPLICIT

    ATTR:  tip_radius,	TYPE: non_negative_length_measure -- EXPLICIT


  SUB- ENTITY(28)	solid_with_stepped_round_hole
    ATTR:  segments,	TYPE: positive_integer -- EXPLICIT

    ATTR:  segment_radii,	TYPE: LIST [1 : segments] OF positive_length_measure -- EXPLICIT

    ATTR:  segment_depths,	TYPE: LIST [1 : segments] OF positive_length_measure -- EXPLICIT

    REDCR: depth,	TYPE: positive_length_measure -- DERIVED (DYNAMIC)
      := compute_total_depth( SELF )
      -- OVERRIDING ENTITY: solid_with_depression


  SUB- ENTITY(29)	solid_with_hole
    (no local attributes)

  SUB- ENTITY(30)	solid_with_through_depression
    ATTR:  exit_faces,	TYPE: SET [1 : ?] OF face_surface -- EXPLICIT


  SUB- ENTITY(31)	solid_with_groove
    ATTR:  groove_radius,	TYPE: positive_length_measure -- EXPLICIT

    ATTR:  groove_width,	TYPE: positive_length_measure -- EXPLICIT

    ATTR:  draft_angle,	TYPE: plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  floor_fillet_radius,	TYPE: non_negative_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  external_groove,	TYPE: BOOLEAN -- EXPLICIT


  SUB- ENTITY(32)	solid_with_depression
    ATTR:  depth,	TYPE: positive_length_measure -- EXPLICIT (DYNAMIC)
      -- possibly overriden by
          ENTITY: solid_with_stepped_round_hole,	TYPE: positive_length_measure	(as DERIVED)


*/


//MARK: - Partial Entity
  public final class _modified_solid_with_placed_configuration : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION.self
    }

    //ATTRIBUTES
    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _placing: eAXIS2_PLACEMENT_3D // PLAIN EXPLICIT ATTRIBUTE

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._placing.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._placing.value.isValueEqualOptionally(to: rhs._placing.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._placing.value.isValueEqualOptionally(to: rhs._placing.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(PLACING: eAXIS2_PLACEMENT_3D) {
      self._placing = PLACING
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 1
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverRequiredParameter(as: eAXIS2_PLACEMENT_3D.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( PLACING: p0 )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY modified_solid_with_placed_configuration
    ABSTRACT SUPERTYPE OF ( 
        ONEOF ( 
            solid_with_depression, 
            solid_with_protrusion, 
            solid_with_shape_element_pattern ) )
    SUBTYPE OF ( modified_solid );
      placing  : axis2_placement_3d;
  END_ENTITY; -- modified_solid_with_placed_configuration (line:21611 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _modified_solid_with_placed_configuration.self
    }
    public let partialEntity: _modified_solid_with_placed_configuration

    //MARK: SUPERTYPES
    public let super_eREPRESENTATION_ITEM: eREPRESENTATION_ITEM 	// [1]
    public let super_eGEOMETRIC_REPRESENTATION_ITEM: eGEOMETRIC_REPRESENTATION_ITEM 	// [2]
    public let super_eSOLID_MODEL: eSOLID_MODEL 	// [3]
    public let super_eMODIFIED_SOLID: eMODIFIED_SOLID 	// [4]
    public var super_eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION: eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION { return self } 	// [5]

    //MARK: SUBTYPES
    public var sub_eSOLID_WITH_INCOMPLETE_CIRCULAR_PATTERN: eSOLID_WITH_INCOMPLETE_CIRCULAR_PATTERN? {	// [6]
      return self.complexEntity.entityReference(eSOLID_WITH_INCOMPLETE_CIRCULAR_PATTERN.self)
    }

    public var sub_eSOLID_WITH_CIRCULAR_PATTERN: eSOLID_WITH_CIRCULAR_PATTERN? {	// [7]
      return self.complexEntity.entityReference(eSOLID_WITH_CIRCULAR_PATTERN.self)
    }

    public var sub_eSOLID_WITH_INCOMPLETE_RECTANGULAR_PATTERN: eSOLID_WITH_INCOMPLETE_RECTANGULAR_PATTERN? {	// [8]
      return self.complexEntity.entityReference(eSOLID_WITH_INCOMPLETE_RECTANGULAR_PATTERN.self)
    }

    public var sub_eSOLID_WITH_RECTANGULAR_PATTERN: eSOLID_WITH_RECTANGULAR_PATTERN? {	// [9]
      return self.complexEntity.entityReference(eSOLID_WITH_RECTANGULAR_PATTERN.self)
    }

    public var sub_eSOLID_WITH_SHAPE_ELEMENT_PATTERN: eSOLID_WITH_SHAPE_ELEMENT_PATTERN? {	// [10]
      return self.complexEntity.entityReference(eSOLID_WITH_SHAPE_ELEMENT_PATTERN.self)
    }

    public var sub_eSOLID_WITH_GENERAL_PROTRUSION: eSOLID_WITH_GENERAL_PROTRUSION? {	// [11]
      return self.complexEntity.entityReference(eSOLID_WITH_GENERAL_PROTRUSION.self)
    }

    public var sub_eSOLID_WITH_RECTANGULAR_PROTRUSION: eSOLID_WITH_RECTANGULAR_PROTRUSION? {	// [12]
      return self.complexEntity.entityReference(eSOLID_WITH_RECTANGULAR_PROTRUSION.self)
    }

    public var sub_eSOLID_WITH_CIRCULAR_PROTRUSION: eSOLID_WITH_CIRCULAR_PROTRUSION? {	// [13]
      return self.complexEntity.entityReference(eSOLID_WITH_CIRCULAR_PROTRUSION.self)
    }

    public var sub_eSOLID_WITH_PROTRUSION: eSOLID_WITH_PROTRUSION? {	// [14]
      return self.complexEntity.entityReference(eSOLID_WITH_PROTRUSION.self)
    }

    public var sub_eSOLID_WITH_TRAPEZOIDAL_SECTION_SLOT: eSOLID_WITH_TRAPEZOIDAL_SECTION_SLOT? {	// [15]
      return self.complexEntity.entityReference(eSOLID_WITH_TRAPEZOIDAL_SECTION_SLOT.self)
    }

    public var sub_eSOLID_WITH_TEE_SECTION_SLOT: eSOLID_WITH_TEE_SECTION_SLOT? {	// [16]
      return self.complexEntity.entityReference(eSOLID_WITH_TEE_SECTION_SLOT.self)
    }

    public var sub_eSOLID_WITH_STRAIGHT_SLOT: eSOLID_WITH_STRAIGHT_SLOT? {	// [17]
      return self.complexEntity.entityReference(eSOLID_WITH_STRAIGHT_SLOT.self)
    }

    public var sub_eSOLID_WITH_CURVED_SLOT: eSOLID_WITH_CURVED_SLOT? {	// [18]
      return self.complexEntity.entityReference(eSOLID_WITH_CURVED_SLOT.self)
    }

    public var sub_eSOLID_WITH_SLOT: eSOLID_WITH_SLOT? {	// [19]
      return self.complexEntity.entityReference(eSOLID_WITH_SLOT.self)
    }

    public var sub_eSOLID_WITH_GENERAL_POCKET: eSOLID_WITH_GENERAL_POCKET? {	// [20]
      return self.complexEntity.entityReference(eSOLID_WITH_GENERAL_POCKET.self)
    }

    public var sub_eSOLID_WITH_RECTANGULAR_POCKET: eSOLID_WITH_RECTANGULAR_POCKET? {	// [21]
      return self.complexEntity.entityReference(eSOLID_WITH_RECTANGULAR_POCKET.self)
    }

    public var sub_eSOLID_WITH_CIRCULAR_POCKET: eSOLID_WITH_CIRCULAR_POCKET? {	// [22]
      return self.complexEntity.entityReference(eSOLID_WITH_CIRCULAR_POCKET.self)
    }

    public var sub_eSOLID_WITH_POCKET: eSOLID_WITH_POCKET? {	// [23]
      return self.complexEntity.entityReference(eSOLID_WITH_POCKET.self)
    }

    public var sub_eSOLID_WITH_SPHERICAL_BOTTOM_ROUND_HOLE: eSOLID_WITH_SPHERICAL_BOTTOM_ROUND_HOLE? {	// [24]
      return self.complexEntity.entityReference(eSOLID_WITH_SPHERICAL_BOTTOM_ROUND_HOLE.self)
    }

    public var sub_eSOLID_WITH_FLAT_BOTTOM_ROUND_HOLE: eSOLID_WITH_FLAT_BOTTOM_ROUND_HOLE? {	// [25]
      return self.complexEntity.entityReference(eSOLID_WITH_FLAT_BOTTOM_ROUND_HOLE.self)
    }

    public var sub_eSOLID_WITH_STEPPED_ROUND_HOLE_AND_CONICAL_TRANSITIONS: eSOLID_WITH_STEPPED_ROUND_HOLE_AND_CONICAL_TRANSITIONS? {	// [26]
      return self.complexEntity.entityReference(eSOLID_WITH_STEPPED_ROUND_HOLE_AND_CONICAL_TRANSITIONS.self)
    }

    public var sub_eSOLID_WITH_CONICAL_BOTTOM_ROUND_HOLE: eSOLID_WITH_CONICAL_BOTTOM_ROUND_HOLE? {	// [27]
      return self.complexEntity.entityReference(eSOLID_WITH_CONICAL_BOTTOM_ROUND_HOLE.self)
    }

    public var sub_eSOLID_WITH_STEPPED_ROUND_HOLE: eSOLID_WITH_STEPPED_ROUND_HOLE? {	// [28]
      return self.complexEntity.entityReference(eSOLID_WITH_STEPPED_ROUND_HOLE.self)
    }

    public var sub_eSOLID_WITH_HOLE: eSOLID_WITH_HOLE? {	// [29]
      return self.complexEntity.entityReference(eSOLID_WITH_HOLE.self)
    }

    public var sub_eSOLID_WITH_THROUGH_DEPRESSION: eSOLID_WITH_THROUGH_DEPRESSION? {	// [30]
      return self.complexEntity.entityReference(eSOLID_WITH_THROUGH_DEPRESSION.self)
    }

    public var sub_eSOLID_WITH_GROOVE: eSOLID_WITH_GROOVE? {	// [31]
      return self.complexEntity.entityReference(eSOLID_WITH_GROOVE.self)
    }

    public var sub_eSOLID_WITH_DEPRESSION: eSOLID_WITH_DEPRESSION? {	// [32]
      return self.complexEntity.entityReference(eSOLID_WITH_DEPRESSION.self)
    }


    //MARK: ATTRIBUTES
    // OMITTED_INSTANCES: (2 AMBIGUOUS REFs)

    // REFERENCE_POINT: (3 AMBIGUOUS REFs)

    // PROFILE: (2 AMBIGUOUS REFs)

    // DRAFT_ANGLE: (3 AMBIGUOUS REFs)

    // FLOOR_FILLET_RADIUS: (2 AMBIGUOUS REFs)

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_SLOT`` )
    public var SLOT_WIDTH: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eSOLID_WITH_SLOT?.partialEntity._slot_width
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_SLOT?.super_eSOLID_WITH_SLOT.partialEntity else { return }
        partial._slot_width = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_SLOT`` )
    public var END_EXIT_FACES: (SDAI.LIST<SDAI.SET<eFACE_SURFACE>/*[0:nil]*/ >/*[2:2]*/ )?  {
      get {
        return sub_eSOLID_WITH_SLOT?.partialEntity._end_exit_faces
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_SLOT?.super_eSOLID_WITH_SLOT.partialEntity else { return }
        partial._end_exit_faces = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_CIRCULAR_PATTERN`` )
    public var REPLICATE_COUNT: tPOSITIVE_INTEGER?  {
      get {
        return sub_eSOLID_WITH_CIRCULAR_PATTERN?.partialEntity._replicate_count
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_CIRCULAR_PATTERN?.super_eSOLID_WITH_CIRCULAR_PATTERN
          .partialEntity else { return }
        partial._replicate_count = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_CIRCULAR_PATTERN`` )
    public var ANGULAR_SPACING: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eSOLID_WITH_CIRCULAR_PATTERN?.partialEntity._angular_spacing
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_CIRCULAR_PATTERN?.super_eSOLID_WITH_CIRCULAR_PATTERN
          .partialEntity else { return }
        partial._angular_spacing = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_POCKET`` )
    public var FLOOR_BLEND_RADIUS: tNON_NEGATIVE_LENGTH_MEASURE?  {
      get {
        return sub_eSOLID_WITH_POCKET?.partialEntity._floor_blend_radius
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_POCKET?.super_eSOLID_WITH_POCKET.partialEntity else { return }
        partial._floor_blend_radius = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_CIRCULAR_PATTERN`` )
    public var RADIAL_ALIGNMENT: SDAI.BOOLEAN?  {
      get {
        return sub_eSOLID_WITH_CIRCULAR_PATTERN?.partialEntity._radial_alignment
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_CIRCULAR_PATTERN?.super_eSOLID_WITH_CIRCULAR_PATTERN
          .partialEntity else { return }
        partial._radial_alignment = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_STEPPED_ROUND_HOLE`` )
    public var SEGMENT_RADII: (SDAI.LIST<tPOSITIVE_LENGTH_MEASURE>/*[1:SEGMENTS]*/ )?  {
      get {
        return sub_eSOLID_WITH_STEPPED_ROUND_HOLE?.partialEntity._segment_radii
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_STEPPED_ROUND_HOLE?.super_eSOLID_WITH_STEPPED_ROUND_HOLE
          .partialEntity else { return }
        partial._segment_radii = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_RECTANGULAR_PATTERN`` )
    public var ROW_SPACING: tLENGTH_MEASURE?  {
      get {
        return sub_eSOLID_WITH_RECTANGULAR_PATTERN?.partialEntity._row_spacing
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_RECTANGULAR_PATTERN?.super_eSOLID_WITH_RECTANGULAR_PATTERN
          .partialEntity else { return }
        partial._row_spacing = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_CONICAL_BOTTOM_ROUND_HOLE`` )
    public var TIP_RADIUS: tNON_NEGATIVE_LENGTH_MEASURE?  {
      get {
        return sub_eSOLID_WITH_CONICAL_BOTTOM_ROUND_HOLE?.partialEntity._tip_radius
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_CONICAL_BOTTOM_ROUND_HOLE?.super_eSOLID_WITH_CONICAL_BOTTOM_ROUND_HOLE
          .partialEntity else { return }
        partial._tip_radius = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_TEE_SECTION_SLOT`` )
    public var TEE_SECTION_WIDTH: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eSOLID_WITH_TEE_SECTION_SLOT?.partialEntity._tee_section_width
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_TEE_SECTION_SLOT?.super_eSOLID_WITH_TEE_SECTION_SLOT
          .partialEntity else { return }
        partial._tee_section_width = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_FLAT_BOTTOM_ROUND_HOLE`` )
    public var FILLET_RADIUS: tNON_NEGATIVE_LENGTH_MEASURE?  {
      get {
        return sub_eSOLID_WITH_FLAT_BOTTOM_ROUND_HOLE?.partialEntity._fillet_radius
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_FLAT_BOTTOM_ROUND_HOLE?.super_eSOLID_WITH_FLAT_BOTTOM_ROUND_HOLE
          .partialEntity else { return }
        partial._fillet_radius = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_PROTRUSION`` )
    public var PROTRUSION_HEIGHT: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eSOLID_WITH_PROTRUSION?.partialEntity._protrusion_height
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_PROTRUSION?.super_eSOLID_WITH_PROTRUSION.partialEntity
          else { return }
        partial._protrusion_height = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_RECTANGULAR_PATTERN`` )
    public var ROW_COUNT: tPOSITIVE_INTEGER?  {
      get {
        return sub_eSOLID_WITH_RECTANGULAR_PATTERN?.partialEntity._row_count
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_RECTANGULAR_PATTERN?.super_eSOLID_WITH_RECTANGULAR_PATTERN
          .partialEntity else { return }
        partial._row_count = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_RECTANGULAR_POCKET`` )
    public var POCKET_LENGTH: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eSOLID_WITH_RECTANGULAR_POCKET?.partialEntity._pocket_length
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_RECTANGULAR_POCKET?.super_eSOLID_WITH_RECTANGULAR_POCKET
          .partialEntity else { return }
        partial._pocket_length = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_GROOVE`` )
    public var EXTERNAL_GROOVE: SDAI.BOOLEAN?  {
      get {
        return sub_eSOLID_WITH_GROOVE?.partialEntity._external_groove
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_GROOVE?.super_eSOLID_WITH_GROOVE.partialEntity else { return }
        partial._external_groove = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_SHAPE_ELEMENT_PATTERN`` )
    public var REPLICATED_ELEMENT: eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION?  {
      get {
        return sub_eSOLID_WITH_SHAPE_ELEMENT_PATTERN?.partialEntity._replicated_element
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_SHAPE_ELEMENT_PATTERN?.super_eSOLID_WITH_SHAPE_ELEMENT_PATTERN
          .partialEntity else { return }
        partial._replicated_element = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_STEPPED_ROUND_HOLE_AND_CONICAL_TRANSITIONS`` )
    public var CONICAL_TRANSITIONS: (SDAI.SET<eCONICAL_STEPPED_HOLE_TRANSITION>/*[1:nil]*/ )?  {
      get {
        return sub_eSOLID_WITH_STEPPED_ROUND_HOLE_AND_CONICAL_TRANSITIONS?.partialEntity._conical_transitions
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_STEPPED_ROUND_HOLE_AND_CONICAL_TRANSITIONS?.super_eSOLID_WITH_STEPPED_ROUND_HOLE_AND_CONICAL_TRANSITIONS
          .partialEntity else { return }
        partial._conical_transitions = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_PROTRUSION`` )
    public var PROTRUSION_DRAFT_ANGLE: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eSOLID_WITH_PROTRUSION?.partialEntity._protrusion_draft_angle
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_PROTRUSION?.super_eSOLID_WITH_PROTRUSION.partialEntity
          else { return }
        partial._protrusion_draft_angle = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_RECTANGULAR_PROTRUSION`` )
    public var PROTRUSION_LENGTH: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eSOLID_WITH_RECTANGULAR_PROTRUSION?.partialEntity._protrusion_length
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_RECTANGULAR_PROTRUSION?.super_eSOLID_WITH_RECTANGULAR_PROTRUSION
          .partialEntity else { return }
        partial._protrusion_length = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_CIRCULAR_POCKET`` )
    public var POCKET_RADIUS: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eSOLID_WITH_CIRCULAR_POCKET?.partialEntity._pocket_radius
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_CIRCULAR_POCKET?.super_eSOLID_WITH_CIRCULAR_POCKET.partialEntity
          else { return }
        partial._pocket_radius = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_RECTANGULAR_POCKET`` )
    public var CORNER_RADIUS: tNON_NEGATIVE_LENGTH_MEASURE?  {
      get {
        return sub_eSOLID_WITH_RECTANGULAR_POCKET?.partialEntity._corner_radius
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_RECTANGULAR_POCKET?.super_eSOLID_WITH_RECTANGULAR_POCKET
          .partialEntity else { return }
        partial._corner_radius = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_STRAIGHT_SLOT`` )
    public var SLOT_LENGTH: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eSOLID_WITH_STRAIGHT_SLOT?.partialEntity._slot_length
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_STRAIGHT_SLOT?.super_eSOLID_WITH_STRAIGHT_SLOT.partialEntity
          else { return }
        partial._slot_length = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eMODIFIED_SOLID`` )
    public var RATIONALE: tTEXT {
      get {
        return SDAI.UNWRAP( super_eMODIFIED_SOLID.partialEntity._rationale )
      }
      set(newValue) {
        let partial = super_eMODIFIED_SOLID.partialEntity
        partial._rationale = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_GROOVE`` )
    public var GROOVE_WIDTH: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eSOLID_WITH_GROOVE?.partialEntity._groove_width
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_GROOVE?.super_eSOLID_WITH_GROOVE.partialEntity else { return }
        partial._groove_width = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_RECTANGULAR_POCKET`` )
    public var POCKET_WIDTH: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eSOLID_WITH_RECTANGULAR_POCKET?.partialEntity._pocket_width
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_RECTANGULAR_POCKET?.super_eSOLID_WITH_RECTANGULAR_POCKET
          .partialEntity else { return }
        partial._pocket_width = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eMODIFIED_SOLID`` )
    public var BASE_SOLID: sBASE_SOLID_SELECT {
      get {
        return SDAI.UNWRAP( super_eMODIFIED_SOLID.partialEntity._base_solid )
      }
      set(newValue) {
        let partial = super_eMODIFIED_SOLID.partialEntity
        partial._base_solid = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_STEPPED_ROUND_HOLE`` )
    public var SEGMENT_DEPTHS: (SDAI.LIST<tPOSITIVE_LENGTH_MEASURE>/*[1:SEGMENTS]*/ )?  {
      get {
        return sub_eSOLID_WITH_STEPPED_ROUND_HOLE?.partialEntity._segment_depths
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_STEPPED_ROUND_HOLE?.super_eSOLID_WITH_STEPPED_ROUND_HOLE
          .partialEntity else { return }
        partial._segment_depths = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_TEE_SECTION_SLOT`` )
    public var COLLAR_DEPTH: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eSOLID_WITH_TEE_SECTION_SLOT?.partialEntity._collar_depth
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_TEE_SECTION_SLOT?.super_eSOLID_WITH_TEE_SECTION_SLOT
          .partialEntity else { return }
        partial._collar_depth = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_SLOT`` )
    public var CLOSED_ENDS: (SDAI.LIST<SDAI.LOGICAL>/*[2:2]*/ )?  {
      get {
        return sub_eSOLID_WITH_SLOT?.partialEntity._closed_ends
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_SLOT?.super_eSOLID_WITH_SLOT.partialEntity else { return }
        partial._closed_ends = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_GROOVE`` )
    public var GROOVE_RADIUS: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eSOLID_WITH_GROOVE?.partialEntity._groove_radius
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_GROOVE?.super_eSOLID_WITH_GROOVE.partialEntity else { return }
        partial._groove_radius = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_SPHERICAL_BOTTOM_ROUND_HOLE`` )
    public var SPHERE_RADIUS: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eSOLID_WITH_SPHERICAL_BOTTOM_ROUND_HOLE?.partialEntity._sphere_radius
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_SPHERICAL_BOTTOM_ROUND_HOLE?.super_eSOLID_WITH_SPHERICAL_BOTTOM_ROUND_HOLE
          .partialEntity else { return }
        partial._sphere_radius = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_RECTANGULAR_PATTERN`` )
    public var COLUMN_COUNT: tPOSITIVE_INTEGER?  {
      get {
        return sub_eSOLID_WITH_RECTANGULAR_PATTERN?.partialEntity._column_count
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_RECTANGULAR_PATTERN?.super_eSOLID_WITH_RECTANGULAR_PATTERN
          .partialEntity else { return }
        partial._column_count = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_STEPPED_ROUND_HOLE`` )
    public var SEGMENTS: tPOSITIVE_INTEGER?  {
      get {
        return sub_eSOLID_WITH_STEPPED_ROUND_HOLE?.partialEntity._segments
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_STEPPED_ROUND_HOLE?.super_eSOLID_WITH_STEPPED_ROUND_HOLE
          .partialEntity else { return }
        partial._segments = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_RECTANGULAR_PATTERN`` )
    public var COLUMN_SPACING: tLENGTH_MEASURE?  {
      get {
        return sub_eSOLID_WITH_RECTANGULAR_PATTERN?.partialEntity._column_spacing
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_RECTANGULAR_PATTERN?.super_eSOLID_WITH_RECTANGULAR_PATTERN
          .partialEntity else { return }
        partial._column_spacing = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_RECTANGULAR_PROTRUSION`` )
    public var PROTRUSION_CORNER_RADIUS: tNON_NEGATIVE_LENGTH_MEASURE?  {
      get {
        return sub_eSOLID_WITH_RECTANGULAR_PROTRUSION?.partialEntity._protrusion_corner_radius
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_RECTANGULAR_PROTRUSION?.super_eSOLID_WITH_RECTANGULAR_PROTRUSION
          .partialEntity else { return }
        partial._protrusion_corner_radius = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_RECTANGULAR_PROTRUSION`` )
    public var PROTRUSION_WIDTH: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eSOLID_WITH_RECTANGULAR_PROTRUSION?.partialEntity._protrusion_width
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_RECTANGULAR_PROTRUSION?.super_eSOLID_WITH_RECTANGULAR_PROTRUSION
          .partialEntity else { return }
        partial._protrusion_width = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_CIRCULAR_PROTRUSION`` )
    public var PROTRUSION_RADIUS: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eSOLID_WITH_CIRCULAR_PROTRUSION?.partialEntity._protrusion_radius
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_CIRCULAR_PROTRUSION?.super_eSOLID_WITH_CIRCULAR_PROTRUSION
          .partialEntity else { return }
        partial._protrusion_radius = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_CURVED_SLOT`` )
    public var SLOT_CENTRELINE: eBOUNDED_CURVE?  {
      get {
        return sub_eSOLID_WITH_CURVED_SLOT?.partialEntity._slot_centreline
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_CURVED_SLOT?.super_eSOLID_WITH_CURVED_SLOT.partialEntity
          else { return }
        partial._slot_centreline = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_CONICAL_BOTTOM_ROUND_HOLE`` )
    public var SEMI_APEX_ANGLE: tPOSITIVE_PLANE_ANGLE_MEASURE?  {
      get {
        return sub_eSOLID_WITH_CONICAL_BOTTOM_ROUND_HOLE?.partialEntity._semi_apex_angle
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_CONICAL_BOTTOM_ROUND_HOLE?.super_eSOLID_WITH_CONICAL_BOTTOM_ROUND_HOLE
          .partialEntity else { return }
        partial._semi_apex_angle = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_THROUGH_DEPRESSION`` )
    public var EXIT_FACES: (SDAI.SET<eFACE_SURFACE>/*[1:nil]*/ )?  {
      get {
        return sub_eSOLID_WITH_THROUGH_DEPRESSION?.partialEntity._exit_faces
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_THROUGH_DEPRESSION?.super_eSOLID_WITH_THROUGH_DEPRESSION
          .partialEntity else { return }
        partial._exit_faces = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION`` )
    public var PLACING: eAXIS2_PLACEMENT_3D {
      get {
        return SDAI.UNWRAP( self.partialEntity._placing )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._placing = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eREPRESENTATION_ITEM`` )
    public var NAME: tLABEL {
      get {
        return SDAI.UNWRAP( super_eREPRESENTATION_ITEM.partialEntity._name )
      }
      set(newValue) {
        let partial = super_eREPRESENTATION_ITEM.partialEntity
        partial._name = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT(DYNAMIC)__ attribute
    /// - origin: SUB( ``eSOLID_WITH_DEPRESSION`` )
    public var DEPTH: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        if let resolved = _solid_with_depression._depth__provider(complex: self.complexEntity) {
          let value = resolved._depth__getter(complex: self.complexEntity)
          return value
        }
        else {
          return sub_eSOLID_WITH_DEPRESSION?.partialEntity._depth
        }
      }
      set(newValue) {
        if let _ = _solid_with_depression._depth__provider(complex: self.complexEntity) { return }

        guard let partial = sub_eSOLID_WITH_DEPRESSION?.super_eSOLID_WITH_DEPRESSION.partialEntity
          else { return }
        partial._depth = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUPER( ``eGEOMETRIC_REPRESENTATION_ITEM`` )
    public var DIM: tDIMENSION_COUNT?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"DIM") {
          return cached.value as! tDIMENSION_COUNT? 
        }
        let origin = super_eGEOMETRIC_REPRESENTATION_ITEM
        let value = tDIMENSION_COUNT(origin.partialEntity._dim__getter(SELF: origin))
        updateCache(derivedAttributeName:"DIM", value:value)
        return value
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_modified_solid_with_placed_configuration.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eREPRESENTATION_ITEM.self) else { return nil }
      self.super_eREPRESENTATION_ITEM = super1

      guard let super2 = complexEntity?.entityReference(eGEOMETRIC_REPRESENTATION_ITEM.self) else { return nil }
      self.super_eGEOMETRIC_REPRESENTATION_ITEM = super2

      guard let super3 = complexEntity?.entityReference(eSOLID_MODEL.self) else { return nil }
      self.super_eSOLID_MODEL = super3

      guard let super4 = complexEntity?.entityReference(eMODIFIED_SOLID.self) else { return nil }
      self.super_eMODIFIED_SOLID = super4

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "MODIFIED_SOLID_WITH_PLACED_CONFIGURATION", type: self, explicitAttributeCount: 1)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eREPRESENTATION_ITEM.self)
      entityDef.add(supertype: eGEOMETRIC_REPRESENTATION_ITEM.self)
      entityDef.add(supertype: eSOLID_MODEL.self)
      entityDef.add(supertype: eMODIFIED_SOLID.self)
      entityDef.add(supertype: eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "SLOT_WIDTH", keyPath: \eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION.SLOT_WIDTH, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "END_EXIT_FACES", keyPath: \eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION.END_EXIT_FACES, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "REPLICATE_COUNT", keyPath: \eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION.REPLICATE_COUNT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "ANGULAR_SPACING", keyPath: \eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION.ANGULAR_SPACING, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "FLOOR_BLEND_RADIUS", keyPath: \eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION.FLOOR_BLEND_RADIUS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "RADIAL_ALIGNMENT", keyPath: \eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION.RADIAL_ALIGNMENT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "SEGMENT_RADII", keyPath: \eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION.SEGMENT_RADII, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "ROW_SPACING", keyPath: \eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION.ROW_SPACING, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "TIP_RADIUS", keyPath: \eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION.TIP_RADIUS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "TEE_SECTION_WIDTH", keyPath: \eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION.TEE_SECTION_WIDTH, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "FILLET_RADIUS", keyPath: \eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION.FILLET_RADIUS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "PROTRUSION_HEIGHT", keyPath: \eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION.PROTRUSION_HEIGHT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "ROW_COUNT", keyPath: \eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION.ROW_COUNT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "POCKET_LENGTH", keyPath: \eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION.POCKET_LENGTH, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "EXTERNAL_GROOVE", keyPath: \eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION.EXTERNAL_GROOVE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "REPLICATED_ELEMENT", keyPath: \eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION.REPLICATED_ELEMENT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "CONICAL_TRANSITIONS", keyPath: \eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION.CONICAL_TRANSITIONS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "PROTRUSION_DRAFT_ANGLE", keyPath: \eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION.PROTRUSION_DRAFT_ANGLE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "PROTRUSION_LENGTH", keyPath: \eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION.PROTRUSION_LENGTH, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "POCKET_RADIUS", keyPath: \eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION.POCKET_RADIUS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "CORNER_RADIUS", keyPath: \eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION.CORNER_RADIUS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "SLOT_LENGTH", keyPath: \eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION.SLOT_LENGTH, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "RATIONALE", keyPath: \eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION.RATIONALE, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "GROOVE_WIDTH", keyPath: \eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION.GROOVE_WIDTH, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "POCKET_WIDTH", keyPath: \eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION.POCKET_WIDTH, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "BASE_SOLID", keyPath: \eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION.BASE_SOLID, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "SEGMENT_DEPTHS", keyPath: \eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION.SEGMENT_DEPTHS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "COLLAR_DEPTH", keyPath: \eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION.COLLAR_DEPTH, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "CLOSED_ENDS", keyPath: \eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION.CLOSED_ENDS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "GROOVE_RADIUS", keyPath: \eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION.GROOVE_RADIUS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "SPHERE_RADIUS", keyPath: \eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION.SPHERE_RADIUS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "COLUMN_COUNT", keyPath: \eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION.COLUMN_COUNT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "SEGMENTS", keyPath: \eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION.SEGMENTS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "COLUMN_SPACING", keyPath: \eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION.COLUMN_SPACING, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "PROTRUSION_CORNER_RADIUS", keyPath: \eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION.PROTRUSION_CORNER_RADIUS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "PROTRUSION_WIDTH", keyPath: \eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION.PROTRUSION_WIDTH, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "PROTRUSION_RADIUS", keyPath: \eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION.PROTRUSION_RADIUS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "SLOT_CENTRELINE", keyPath: \eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION.SLOT_CENTRELINE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "SEMI_APEX_ANGLE", keyPath: \eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION.SEMI_APEX_ANGLE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "EXIT_FACES", keyPath: \eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION.EXIT_FACES, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "PLACING", keyPath: \eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION.PLACING, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "NAME", keyPath: \eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION.NAME, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "DEPTH", keyPath: \eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION.DEPTH, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "DIM", keyPath: \eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION.DIM, 
        kind: .derived, source: .superEntity, mayYieldEntityReference: false)

      return entityDef
    }

  }
}
