/* file: measure_with_unit.swift 	 generated: Sun Oct 31 15:32:10 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY measure_with_unit
    SUPERTYPE OF ( 
        ONEOF ( 
            length_measure_with_unit, 
            mass_measure_with_unit, 
            time_measure_with_unit, 
            electric_current_measure_with_unit, 
            thermodynamic_temperature_measure_with_unit, 
            celsius_temperature_measure_with_unit, 
            amount_of_substance_measure_with_unit, 
            luminous_intensity_measure_with_unit, 
            plane_angle_measure_with_unit, 
            solid_angle_measure_with_unit, 
            area_measure_with_unit, 
            volume_measure_with_unit, 
            ratio_measure_with_unit, 
            acceleration_measure_with_unit, 
            capacitance_measure_with_unit, 
            electric_charge_measure_with_unit, 
            conductance_measure_with_unit, 
            electric_potential_measure_with_unit, 
            energy_measure_with_unit, 
            magnetic_flux_density_measure_with_unit, 
            force_measure_with_unit, 
            frequency_measure_with_unit, 
            illuminance_measure_with_unit, 
            inductance_measure_with_unit, 
            luminous_flux_measure_with_unit, 
            magnetic_flux_measure_with_unit, 
            power_measure_with_unit, 
            pressure_measure_with_unit, 
            resistance_measure_with_unit, 
            velocity_measure_with_unit, 
            absorbed_dose_measure_with_unit, 
            radioactivity_measure_with_unit, 
            dose_equivalent_measure_with_unit ) );
      value_component  : measure_value;
      unit_component   : unit;
    WHERE
      wr1: valid_units( SELF );
  END_ENTITY; -- measure_with_unit (line:20376 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  ENTITY(SELF)	measure_with_unit
    ATTR:  value_component,	TYPE: measure_value -- EXPLICIT

    ATTR:  unit_component,	TYPE: unit -- EXPLICIT
      -- possibly overriden by
          ENTITY: currency_measure_with_unit,	TYPE: currency


  SUB- ENTITY(2)	celsius_temperature_measure_with_unit
    (no local attributes)

  SUB- ENTITY(3)	electric_potential_measure_with_unit
    (no local attributes)

  SUB- ENTITY(4)	time_measure_with_unit
    (no local attributes)

  SUB- ENTITY(5)	amount_of_substance_measure_with_unit
    (no local attributes)

  SUB- ENTITY(6)	currency_measure_with_unit
    REDCR: unit_component,	TYPE: currency -- EXPLICIT
      -- OVERRIDING ENTITY: measure_with_unit


  SUB- ENTITY(7)	acceleration_measure_with_unit
    (no local attributes)

  SUB- ENTITY(8)	capacitance_measure_with_unit
    (no local attributes)

  SUB- ENTITY(9)	area_measure_with_unit
    (no local attributes)

  SUB- ENTITY(10)	velocity_measure_with_unit
    (no local attributes)

  SUB- ENTITY(11)	shape_data_quality_upper_value_limit
    (no local attributes)

  SUB- ENTITY(12)	shape_data_quality_lower_value_limit
    (no local attributes)

  SUB- ENTITY(13)	shape_data_quality_value_limit
    (no local attributes)

  SUB- ENTITY(14)	measure_representation_item
    (no local attributes)

  SUB- ENTITY(15)	illuminance_measure_with_unit
    (no local attributes)

  SUB- ENTITY(16)	magnetic_flux_density_measure_with_unit
    (no local attributes)

  SUB- ENTITY(17)	power_measure_with_unit
    (no local attributes)

  SUB- ENTITY(18)	pressure_measure_with_unit
    (no local attributes)

  SUB- ENTITY(19)	luminous_flux_measure_with_unit
    (no local attributes)

  SUB- ENTITY(20)	radioactivity_measure_with_unit
    (no local attributes)

  SUB- ENTITY(21)	solid_angle_measure_with_unit
    (no local attributes)

  SUB- ENTITY(22)	electric_current_measure_with_unit
    (no local attributes)

  SUB- ENTITY(23)	thermodynamic_temperature_measure_with_unit
    (no local attributes)

  SUB- ENTITY(24)	thermal_resistance_measure_with_unit
    (no local attributes)

  SUB- ENTITY(25)	magnetic_flux_measure_with_unit
    (no local attributes)

  SUB- ENTITY(26)	energy_measure_with_unit
    (no local attributes)

  SUB- ENTITY(27)	dose_equivalent_measure_with_unit
    (no local attributes)

  SUB- ENTITY(28)	positive_length_measure_with_unit
    (no local attributes)

  SUB- ENTITY(29)	length_measure_with_unit
    (no local attributes)

  SUB- ENTITY(30)	mass_measure_with_unit
    (no local attributes)

  SUB- ENTITY(31)	luminous_intensity_measure_with_unit
    (no local attributes)

  SUB- ENTITY(32)	positive_plane_angle_measure_with_unit
    (no local attributes)

  SUB- ENTITY(33)	plane_angle_measure_with_unit
    (no local attributes)

  SUB- ENTITY(34)	volume_measure_with_unit
    (no local attributes)

  SUB- ENTITY(35)	dielectric_constant_measure_with_unit
    (no local attributes)

  SUB- ENTITY(36)	loss_tangent_measure_with_unit
    (no local attributes)

  SUB- ENTITY(37)	ratio_measure_with_unit
    (no local attributes)

  SUB- ENTITY(38)	electric_charge_measure_with_unit
    (no local attributes)

  SUB- ENTITY(39)	conductance_measure_with_unit
    (no local attributes)

  SUB- ENTITY(40)	force_measure_with_unit
    (no local attributes)

  SUB- ENTITY(41)	frequency_measure_with_unit
    (no local attributes)

  SUB- ENTITY(42)	inductance_measure_with_unit
    (no local attributes)

  SUB- ENTITY(43)	resistance_measure_with_unit
    (no local attributes)

  SUB- ENTITY(44)	absorbed_dose_measure_with_unit
    (no local attributes)

  SUB- ENTITY(45)	expression_extension_string
    (no local attributes)

  SUB- ENTITY(46)	uncertainty_measure_with_unit
    ATTR:  name,	TYPE: label -- EXPLICIT

    ATTR:  description,	TYPE: OPTIONAL text -- EXPLICIT


  SUB- ENTITY(47)	expression_extension_numeric
    (no local attributes)

*/


//MARK: - Partial Entity
  public final class _measure_with_unit : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eMEASURE_WITH_UNIT.self
    }

    //ATTRIBUTES
    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _value_component: sMEASURE_VALUE // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _unit_component: sUNIT // PLAIN EXPLICIT ATTRIBUTE

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      //SELECT data types (indirectly) referencing the current type as a member of the select list
      members.insert(SDAI.STRING(sCLASSIFICATION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sACTION_ITEMS.typeName)) // -> sCLASSIFICATION_ITEM
      members.insert(SDAI.STRING(sCHANGE_MANAGEMENT_OBJECT.typeName)) // -> sACTION_ITEMS
      members.insert(SDAI.STRING(sIR_USAGE_ITEM.typeName)) // -> sCLASSIFICATION_ITEM
      members.insert(SDAI.STRING(sMULTI_LANGUAGE_ATTRIBUTE_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sATTRIBUTE_CLASSIFICATION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sSIZE_SELECT.typeName)) // -> Self
      members.insert(SDAI.STRING(sSAME_AS_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sCHARACTER_SPACING_SELECT.typeName)) // -> Self
      members.insert(SDAI.STRING(sDESCRIPTION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sCHARACTERIZED_PRODUCT_COMPOSITION_VALUE.typeName)) // -> Self
      members.insert(SDAI.STRING(sGROUPABLE_ITEM.typeName)) // -> Self
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._value_component.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._unit_component.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._value_component.value.isValueEqualOptionally(to: rhs._value_component.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._unit_component.value.isValueEqualOptionally(to: rhs._unit_component.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._value_component.value.isValueEqualOptionally(to: rhs._value_component.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._unit_component.value.isValueEqualOptionally(to: rhs._unit_component.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: eMEASURE_WITH_UNIT?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = VALID_UNITS(SELF)
      return SDAI.LOGICAL(_TEMP1)
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(VALUE_COMPONENT: sMEASURE_VALUE, UNIT_COMPONENT: sUNIT) {
      self._value_component = VALUE_COMPONENT
      self._unit_component = UNIT_COMPONENT
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 2
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverRequiredParameter(as: sMEASURE_VALUE.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p1) = exchangeStructure.recoverRequiredParameter(as: sUNIT.self, from: parameters[1])
      else { exchangeStructure.add(errorContext: "while recovering parameter #1 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( VALUE_COMPONENT: p0, UNIT_COMPONENT: p1 )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY measure_with_unit
    SUPERTYPE OF ( 
        ONEOF ( 
            length_measure_with_unit, 
            mass_measure_with_unit, 
            time_measure_with_unit, 
            electric_current_measure_with_unit, 
            thermodynamic_temperature_measure_with_unit, 
            celsius_temperature_measure_with_unit, 
            amount_of_substance_measure_with_unit, 
            luminous_intensity_measure_with_unit, 
            plane_angle_measure_with_unit, 
            solid_angle_measure_with_unit, 
            area_measure_with_unit, 
            volume_measure_with_unit, 
            ratio_measure_with_unit, 
            acceleration_measure_with_unit, 
            capacitance_measure_with_unit, 
            electric_charge_measure_with_unit, 
            conductance_measure_with_unit, 
            electric_potential_measure_with_unit, 
            energy_measure_with_unit, 
            magnetic_flux_density_measure_with_unit, 
            force_measure_with_unit, 
            frequency_measure_with_unit, 
            illuminance_measure_with_unit, 
            inductance_measure_with_unit, 
            luminous_flux_measure_with_unit, 
            magnetic_flux_measure_with_unit, 
            power_measure_with_unit, 
            pressure_measure_with_unit, 
            resistance_measure_with_unit, 
            velocity_measure_with_unit, 
            absorbed_dose_measure_with_unit, 
            radioactivity_measure_with_unit, 
            dose_equivalent_measure_with_unit ) );
      value_component  : measure_value;
      unit_component   : unit;
    WHERE
      wr1: valid_units( SELF );
  END_ENTITY; -- measure_with_unit (line:20376 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eMEASURE_WITH_UNIT : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _measure_with_unit.self
    }
    public let partialEntity: _measure_with_unit

    //MARK: SUPERTYPES
    public var super_eMEASURE_WITH_UNIT: eMEASURE_WITH_UNIT { return self } 	// [1]

    //MARK: SUBTYPES
    public var sub_eCELSIUS_TEMPERATURE_MEASURE_WITH_UNIT: eCELSIUS_TEMPERATURE_MEASURE_WITH_UNIT? {	// [2]
      return self.complexEntity.entityReference(eCELSIUS_TEMPERATURE_MEASURE_WITH_UNIT.self)
    }

    public var sub_eELECTRIC_POTENTIAL_MEASURE_WITH_UNIT: eELECTRIC_POTENTIAL_MEASURE_WITH_UNIT? {	// [3]
      return self.complexEntity.entityReference(eELECTRIC_POTENTIAL_MEASURE_WITH_UNIT.self)
    }

    public var sub_eTIME_MEASURE_WITH_UNIT: eTIME_MEASURE_WITH_UNIT? {	// [4]
      return self.complexEntity.entityReference(eTIME_MEASURE_WITH_UNIT.self)
    }

    public var sub_eAMOUNT_OF_SUBSTANCE_MEASURE_WITH_UNIT: eAMOUNT_OF_SUBSTANCE_MEASURE_WITH_UNIT? {	// [5]
      return self.complexEntity.entityReference(eAMOUNT_OF_SUBSTANCE_MEASURE_WITH_UNIT.self)
    }

    public var sub_eCURRENCY_MEASURE_WITH_UNIT: eCURRENCY_MEASURE_WITH_UNIT? {	// [6]
      return self.complexEntity.entityReference(eCURRENCY_MEASURE_WITH_UNIT.self)
    }

    public var sub_eACCELERATION_MEASURE_WITH_UNIT: eACCELERATION_MEASURE_WITH_UNIT? {	// [7]
      return self.complexEntity.entityReference(eACCELERATION_MEASURE_WITH_UNIT.self)
    }

    public var sub_eCAPACITANCE_MEASURE_WITH_UNIT: eCAPACITANCE_MEASURE_WITH_UNIT? {	// [8]
      return self.complexEntity.entityReference(eCAPACITANCE_MEASURE_WITH_UNIT.self)
    }

    public var sub_eAREA_MEASURE_WITH_UNIT: eAREA_MEASURE_WITH_UNIT? {	// [9]
      return self.complexEntity.entityReference(eAREA_MEASURE_WITH_UNIT.self)
    }

    public var sub_eVELOCITY_MEASURE_WITH_UNIT: eVELOCITY_MEASURE_WITH_UNIT? {	// [10]
      return self.complexEntity.entityReference(eVELOCITY_MEASURE_WITH_UNIT.self)
    }

    public var sub_eSHAPE_DATA_QUALITY_UPPER_VALUE_LIMIT: eSHAPE_DATA_QUALITY_UPPER_VALUE_LIMIT? {	// [11]
      return self.complexEntity.entityReference(eSHAPE_DATA_QUALITY_UPPER_VALUE_LIMIT.self)
    }

    public var sub_eSHAPE_DATA_QUALITY_LOWER_VALUE_LIMIT: eSHAPE_DATA_QUALITY_LOWER_VALUE_LIMIT? {	// [12]
      return self.complexEntity.entityReference(eSHAPE_DATA_QUALITY_LOWER_VALUE_LIMIT.self)
    }

    public var sub_eSHAPE_DATA_QUALITY_VALUE_LIMIT: eSHAPE_DATA_QUALITY_VALUE_LIMIT? {	// [13]
      return self.complexEntity.entityReference(eSHAPE_DATA_QUALITY_VALUE_LIMIT.self)
    }

    public var sub_eMEASURE_REPRESENTATION_ITEM: eMEASURE_REPRESENTATION_ITEM? {	// [14]
      return self.complexEntity.entityReference(eMEASURE_REPRESENTATION_ITEM.self)
    }

    public var sub_eILLUMINANCE_MEASURE_WITH_UNIT: eILLUMINANCE_MEASURE_WITH_UNIT? {	// [15]
      return self.complexEntity.entityReference(eILLUMINANCE_MEASURE_WITH_UNIT.self)
    }

    public var sub_eMAGNETIC_FLUX_DENSITY_MEASURE_WITH_UNIT: eMAGNETIC_FLUX_DENSITY_MEASURE_WITH_UNIT? {	// [16]
      return self.complexEntity.entityReference(eMAGNETIC_FLUX_DENSITY_MEASURE_WITH_UNIT.self)
    }

    public var sub_ePOWER_MEASURE_WITH_UNIT: ePOWER_MEASURE_WITH_UNIT? {	// [17]
      return self.complexEntity.entityReference(ePOWER_MEASURE_WITH_UNIT.self)
    }

    public var sub_ePRESSURE_MEASURE_WITH_UNIT: ePRESSURE_MEASURE_WITH_UNIT? {	// [18]
      return self.complexEntity.entityReference(ePRESSURE_MEASURE_WITH_UNIT.self)
    }

    public var sub_eLUMINOUS_FLUX_MEASURE_WITH_UNIT: eLUMINOUS_FLUX_MEASURE_WITH_UNIT? {	// [19]
      return self.complexEntity.entityReference(eLUMINOUS_FLUX_MEASURE_WITH_UNIT.self)
    }

    public var sub_eRADIOACTIVITY_MEASURE_WITH_UNIT: eRADIOACTIVITY_MEASURE_WITH_UNIT? {	// [20]
      return self.complexEntity.entityReference(eRADIOACTIVITY_MEASURE_WITH_UNIT.self)
    }

    public var sub_eSOLID_ANGLE_MEASURE_WITH_UNIT: eSOLID_ANGLE_MEASURE_WITH_UNIT? {	// [21]
      return self.complexEntity.entityReference(eSOLID_ANGLE_MEASURE_WITH_UNIT.self)
    }

    public var sub_eELECTRIC_CURRENT_MEASURE_WITH_UNIT: eELECTRIC_CURRENT_MEASURE_WITH_UNIT? {	// [22]
      return self.complexEntity.entityReference(eELECTRIC_CURRENT_MEASURE_WITH_UNIT.self)
    }

    public var sub_eTHERMODYNAMIC_TEMPERATURE_MEASURE_WITH_UNIT: eTHERMODYNAMIC_TEMPERATURE_MEASURE_WITH_UNIT? {	// [23]
      return self.complexEntity.entityReference(eTHERMODYNAMIC_TEMPERATURE_MEASURE_WITH_UNIT.self)
    }

    public var sub_eTHERMAL_RESISTANCE_MEASURE_WITH_UNIT: eTHERMAL_RESISTANCE_MEASURE_WITH_UNIT? {	// [24]
      return self.complexEntity.entityReference(eTHERMAL_RESISTANCE_MEASURE_WITH_UNIT.self)
    }

    public var sub_eMAGNETIC_FLUX_MEASURE_WITH_UNIT: eMAGNETIC_FLUX_MEASURE_WITH_UNIT? {	// [25]
      return self.complexEntity.entityReference(eMAGNETIC_FLUX_MEASURE_WITH_UNIT.self)
    }

    public var sub_eENERGY_MEASURE_WITH_UNIT: eENERGY_MEASURE_WITH_UNIT? {	// [26]
      return self.complexEntity.entityReference(eENERGY_MEASURE_WITH_UNIT.self)
    }

    public var sub_eDOSE_EQUIVALENT_MEASURE_WITH_UNIT: eDOSE_EQUIVALENT_MEASURE_WITH_UNIT? {	// [27]
      return self.complexEntity.entityReference(eDOSE_EQUIVALENT_MEASURE_WITH_UNIT.self)
    }

    public var sub_ePOSITIVE_LENGTH_MEASURE_WITH_UNIT: ePOSITIVE_LENGTH_MEASURE_WITH_UNIT? {	// [28]
      return self.complexEntity.entityReference(ePOSITIVE_LENGTH_MEASURE_WITH_UNIT.self)
    }

    public var sub_eLENGTH_MEASURE_WITH_UNIT: eLENGTH_MEASURE_WITH_UNIT? {	// [29]
      return self.complexEntity.entityReference(eLENGTH_MEASURE_WITH_UNIT.self)
    }

    public var sub_eMASS_MEASURE_WITH_UNIT: eMASS_MEASURE_WITH_UNIT? {	// [30]
      return self.complexEntity.entityReference(eMASS_MEASURE_WITH_UNIT.self)
    }

    public var sub_eLUMINOUS_INTENSITY_MEASURE_WITH_UNIT: eLUMINOUS_INTENSITY_MEASURE_WITH_UNIT? {	// [31]
      return self.complexEntity.entityReference(eLUMINOUS_INTENSITY_MEASURE_WITH_UNIT.self)
    }

    public var sub_ePOSITIVE_PLANE_ANGLE_MEASURE_WITH_UNIT: ePOSITIVE_PLANE_ANGLE_MEASURE_WITH_UNIT? {	// [32]
      return self.complexEntity.entityReference(ePOSITIVE_PLANE_ANGLE_MEASURE_WITH_UNIT.self)
    }

    public var sub_ePLANE_ANGLE_MEASURE_WITH_UNIT: ePLANE_ANGLE_MEASURE_WITH_UNIT? {	// [33]
      return self.complexEntity.entityReference(ePLANE_ANGLE_MEASURE_WITH_UNIT.self)
    }

    public var sub_eVOLUME_MEASURE_WITH_UNIT: eVOLUME_MEASURE_WITH_UNIT? {	// [34]
      return self.complexEntity.entityReference(eVOLUME_MEASURE_WITH_UNIT.self)
    }

    public var sub_eDIELECTRIC_CONSTANT_MEASURE_WITH_UNIT: eDIELECTRIC_CONSTANT_MEASURE_WITH_UNIT? {	// [35]
      return self.complexEntity.entityReference(eDIELECTRIC_CONSTANT_MEASURE_WITH_UNIT.self)
    }

    public var sub_eLOSS_TANGENT_MEASURE_WITH_UNIT: eLOSS_TANGENT_MEASURE_WITH_UNIT? {	// [36]
      return self.complexEntity.entityReference(eLOSS_TANGENT_MEASURE_WITH_UNIT.self)
    }

    public var sub_eRATIO_MEASURE_WITH_UNIT: eRATIO_MEASURE_WITH_UNIT? {	// [37]
      return self.complexEntity.entityReference(eRATIO_MEASURE_WITH_UNIT.self)
    }

    public var sub_eELECTRIC_CHARGE_MEASURE_WITH_UNIT: eELECTRIC_CHARGE_MEASURE_WITH_UNIT? {	// [38]
      return self.complexEntity.entityReference(eELECTRIC_CHARGE_MEASURE_WITH_UNIT.self)
    }

    public var sub_eCONDUCTANCE_MEASURE_WITH_UNIT: eCONDUCTANCE_MEASURE_WITH_UNIT? {	// [39]
      return self.complexEntity.entityReference(eCONDUCTANCE_MEASURE_WITH_UNIT.self)
    }

    public var sub_eFORCE_MEASURE_WITH_UNIT: eFORCE_MEASURE_WITH_UNIT? {	// [40]
      return self.complexEntity.entityReference(eFORCE_MEASURE_WITH_UNIT.self)
    }

    public var sub_eFREQUENCY_MEASURE_WITH_UNIT: eFREQUENCY_MEASURE_WITH_UNIT? {	// [41]
      return self.complexEntity.entityReference(eFREQUENCY_MEASURE_WITH_UNIT.self)
    }

    public var sub_eINDUCTANCE_MEASURE_WITH_UNIT: eINDUCTANCE_MEASURE_WITH_UNIT? {	// [42]
      return self.complexEntity.entityReference(eINDUCTANCE_MEASURE_WITH_UNIT.self)
    }

    public var sub_eRESISTANCE_MEASURE_WITH_UNIT: eRESISTANCE_MEASURE_WITH_UNIT? {	// [43]
      return self.complexEntity.entityReference(eRESISTANCE_MEASURE_WITH_UNIT.self)
    }

    public var sub_eABSORBED_DOSE_MEASURE_WITH_UNIT: eABSORBED_DOSE_MEASURE_WITH_UNIT? {	// [44]
      return self.complexEntity.entityReference(eABSORBED_DOSE_MEASURE_WITH_UNIT.self)
    }

    public var sub_eEXPRESSION_EXTENSION_STRING: eEXPRESSION_EXTENSION_STRING? {	// [45]
      return self.complexEntity.entityReference(eEXPRESSION_EXTENSION_STRING.self)
    }

    public var sub_eUNCERTAINTY_MEASURE_WITH_UNIT: eUNCERTAINTY_MEASURE_WITH_UNIT? {	// [46]
      return self.complexEntity.entityReference(eUNCERTAINTY_MEASURE_WITH_UNIT.self)
    }

    public var sub_eEXPRESSION_EXTENSION_NUMERIC: eEXPRESSION_EXTENSION_NUMERIC? {	// [47]
      return self.complexEntity.entityReference(eEXPRESSION_EXTENSION_NUMERIC.self)
    }


    //MARK: ATTRIBUTES
    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eUNCERTAINTY_MEASURE_WITH_UNIT`` )
    public var DESCRIPTION: tTEXT?  {
      get {
        return sub_eUNCERTAINTY_MEASURE_WITH_UNIT?.partialEntity._description
      }
      set(newValue) {
        guard let partial = sub_eUNCERTAINTY_MEASURE_WITH_UNIT?.super_eUNCERTAINTY_MEASURE_WITH_UNIT
          .partialEntity else { return }
        partial._description = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eMEASURE_WITH_UNIT`` )
    public var UNIT_COMPONENT: sUNIT {
      get {
        return SDAI.UNWRAP( self.partialEntity._unit_component )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._unit_component = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eMEASURE_WITH_UNIT`` )
    public var VALUE_COMPONENT: sMEASURE_VALUE {
      get {
        return SDAI.UNWRAP( self.partialEntity._value_component )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._value_component = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eUNCERTAINTY_MEASURE_WITH_UNIT`` )
    public var NAME: tLABEL?  {
      get {
        return sub_eUNCERTAINTY_MEASURE_WITH_UNIT?.partialEntity._name
      }
      set(newValue) {
        guard let partial = sub_eUNCERTAINTY_MEASURE_WITH_UNIT?.super_eUNCERTAINTY_MEASURE_WITH_UNIT
          .partialEntity else { return }
        partial._name = SDAI.UNWRAP(newValue)
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_measure_with_unit.self) else { return nil }
      self.partialEntity = partial

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }

    //SIMPLE ENTITY REFERENCE
    public convenience init?(_ partial:_measure_with_unit) {
      let complex = SDAI.ComplexEntity(entities:[partial])
      self.init(complex: complex)
    }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _measure_with_unit.WHERE_wr1(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "MEASURE_WITH_UNIT", type: self, explicitAttributeCount: 2)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eMEASURE_WITH_UNIT.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "DESCRIPTION", keyPath: \eMEASURE_WITH_UNIT.DESCRIPTION, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "UNIT_COMPONENT", keyPath: \eMEASURE_WITH_UNIT.UNIT_COMPONENT, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "VALUE_COMPONENT", keyPath: \eMEASURE_WITH_UNIT.VALUE_COMPONENT, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "NAME", keyPath: \eMEASURE_WITH_UNIT.NAME, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)

      return entityDef
    }

  }
}
