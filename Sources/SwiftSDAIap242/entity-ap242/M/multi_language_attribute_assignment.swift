/* file: multi_language_attribute_assignment.swift 	 generated: Sun Oct 31 15:32:10 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY multi_language_attribute_assignment
    SUBTYPE OF ( attribute_value_assignment );
      items  : SET [1 : ?] OF multi_language_attribute_item;
    DERIVE
      translation_language  : language := language_indication[1]\attribute_classification_assignment.
                                assigned_class;
    INVERSE
      language_indication : SET [1 : 1] OF attribute_language_assignment FOR items -- defined in ENTITY: attribute_language_assignment;
    WHERE
      wr1: ( SELF\attribute_value_assignment.role.name = 'alternate language' );
      wr2: ( SIZEOF( QUERY ( ala <* language_indication | ( ( ala\attribute_classification_assignment.
               attribute_name = 'attribute_value' ) AND ( ala\attribute_classification_assignment.role.name =
               'translated' ) ) ) ) = 1 );
      wr3: ( SELF\attribute_value_assignment.attribute_name <> '' );
      wr4: ( SIZEOF( QUERY ( ci <* items | ( SIZEOF( QUERY ( ata <* USEDIN( ci, 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.MULTI_LANGUAGE_ATTRIBUTE_ASSIGNMENT.ITEMS'  )
               | ( ( ata\attribute_value_assignment.attribute_name = SELF\attribute_value_assignment.
               attribute_name ) AND ( ata.translation_language :=: translation_language ) ) ) ) > 1 ) ) ) = 0 );
      wr5: ( SIZEOF( QUERY ( ci <* items | ( SIZEOF( QUERY ( ata <* USEDIN( ci, 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ATTRIBUTE_LANGUAGE_ASSIGNMENT.ITEMS'  ) | ( 
               ( ata\attribute_classification_assignment.role.name = 'primary' ) AND ( ata\
               attribute_classification_assignment.attribute_name = SELF\attribute_value_assignment.
               attribute_name ) AND ( ata\attribute_classification_assignment.assigned_class :=: 
               translation_language ) ) ) ) > 0 ) ) ) = 0 );
  END_ENTITY; -- multi_language_attribute_assignment (line:21644 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	attribute_value_assignment
    ATTR:  attribute_name,	TYPE: label -- EXPLICIT

    ATTR:  attribute_value,	TYPE: attribute_type -- EXPLICIT

    ATTR:  role,	TYPE: attribute_value_role -- EXPLICIT


  ENTITY(SELF)	multi_language_attribute_assignment
    ATTR:  items,	TYPE: SET [1 : ?] OF multi_language_attribute_item -- EXPLICIT

    ATTR:  translation_language,	TYPE: language -- DERIVED
      := language_indication[1]\attribute_classification_assignment.assigned_class

    ATTR:  language_indication,	TYPE: SET [1 : 1] OF attribute_language_assignment -- INVERSE
      FOR items;


*/


//MARK: - Partial Entity
  public final class _multi_language_attribute_assignment : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eMULTI_LANGUAGE_ATTRIBUTE_ASSIGNMENT.self
    }

    //ATTRIBUTES
    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _items: SDAI.SET<sMULTI_LANGUAGE_ATTRIBUTE_ITEM>/*[1:nil]*/  // PLAIN EXPLICIT ATTRIBUTE

    /// DERIVE ATTRIBUTE
    internal func _translation_language__getter(SELF: eMULTI_LANGUAGE_ATTRIBUTE_ASSIGNMENT) -> eLANGUAGE?  {

      let _TEMP1 = SELF.LANGUAGE_INDICATION[1]
      let _TEMP2 = _TEMP1?.GROUP_REF(eATTRIBUTE_CLASSIFICATION_ASSIGNMENT.self)
      let _TEMP3 = _TEMP2?.ASSIGNED_CLASS
      return eLANGUAGE(/*eGROUP*/_TEMP3)
    }

    /// INVERSE AGGREGATE ATTRIBUTE
    /// observing _attribute_language_assignment ._items
    internal var _language_indication: SDAI.SET<eATTRIBUTE_LANGUAGE_ASSIGNMENT> {
      return __language_indication.map{ $0.reference }
    }
    private var __language_indication = SDAI.SET<SDAI.UnownedWrap<eATTRIBUTE_LANGUAGE_ASSIGNMENT>>(
      bound1: SDAI.UNWRAP(SDAI.INTEGER(1)), bound2: SDAI.INTEGER(1), 
      SDAI.EMPLY_AGGREGATE) // unowned backing store
    /// INVERSE AGGREGATE ATTR SUPPORT(ADDER)
    internal func _language_indication__observeAddedReference(in complex: SDAI.ComplexEntity) {
      guard let newSource = complex.entityReference(eATTRIBUTE_LANGUAGE_ASSIGNMENT.self) else { return }
      self.__language_indication.add(member: SDAI.UnownedWrap(newSource) )
    }
    /// INVERSE AGGREGATE ATTR SUPPORT(REMOVER)
    internal func _language_indication__observeRemovedReference(in complex: SDAI.ComplexEntity) {
      guard let oldSource = complex.entityReference(eATTRIBUTE_LANGUAGE_ASSIGNMENT.self) else { return }
      let success = self.__language_indication.remove(member: SDAI.UnownedWrap(oldSource) )
      assert(success, "failed to remove inverse attribute element")
    }
    /// INVERSE AGGREGATE ATTR SUPPORT(LEAVING REFERENCE OWNER)
    internal func _language_indication__observe(leavingReferencerOwner complex: SDAI.ComplexEntity) {
      guard let oldSource = complex.entityReference(eATTRIBUTE_LANGUAGE_ASSIGNMENT.self) else { return }
      let success = self.__language_indication.removeAll(member: SDAI.UnownedWrap(oldSource) )
      assert(success, "failed to remove inverse attribute elements")
    }

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      //SELECT data types (indirectly) referencing the current type as a member of the select list
      members.insert(SDAI.STRING(sCLASSIFICATION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sACTION_ITEMS.typeName)) // -> sCLASSIFICATION_ITEM
      members.insert(SDAI.STRING(sCHANGE_MANAGEMENT_OBJECT.typeName)) // -> sACTION_ITEMS
      members.insert(SDAI.STRING(sIR_USAGE_ITEM.typeName)) // -> sCLASSIFICATION_ITEM
      members.insert(SDAI.STRING(sATTRIBUTE_LANGUAGE_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sGROUPABLE_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sEFFECTIVITY_ITEM.typeName)) // -> Self
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._items.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._items.value.isValueEqualOptionally(to: rhs._items.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._items.value.isValueEqualOptionally(to: rhs._items.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: eMULTI_LANGUAGE_ATTRIBUTE_ASSIGNMENT?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.GROUP_REF(eATTRIBUTE_VALUE_ASSIGNMENT.self)
      let _TEMP2 = _TEMP1?.ROLE
      let _TEMP3 = _TEMP2?.NAME
      let _TEMP4 = _TEMP3 .==. SDAI.FORCE_OPTIONAL(SDAI.STRING("alternate language"))
      return _TEMP4
    }
    public static func WHERE_wr2(SELF: eMULTI_LANGUAGE_ATTRIBUTE_ASSIGNMENT?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.LANGUAGE_INDICATION
        .QUERY{ ALA in 

          let _TEMP1 = ALA.GROUP_REF(eATTRIBUTE_CLASSIFICATION_ASSIGNMENT.self)
          let _TEMP2 = _TEMP1?.ATTRIBUTE_NAME
          let _TEMP3 = _TEMP2 .==. SDAI.FORCE_OPTIONAL(SDAI.STRING("attribute_value"))
          let _TEMP4 = ALA.GROUP_REF(eATTRIBUTE_CLASSIFICATION_ASSIGNMENT.self)
          let _TEMP5 = _TEMP4?.ROLE
          let _TEMP6 = _TEMP5?.NAME
          let _TEMP7 = _TEMP6 .==. SDAI.FORCE_OPTIONAL(SDAI.STRING("translated"))
          let _TEMP8 = _TEMP3 && _TEMP7
          return _TEMP8 }
      let _TEMP2 = SDAI.SIZEOF(_TEMP1)
      let _TEMP3 = _TEMP2 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
      return _TEMP3
    }
    public static func WHERE_wr3(SELF: eMULTI_LANGUAGE_ATTRIBUTE_ASSIGNMENT?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.GROUP_REF(eATTRIBUTE_VALUE_ASSIGNMENT.self)
      let _TEMP2 = _TEMP1?.ATTRIBUTE_NAME
      let _TEMP3 = _TEMP2 .!=. SDAI.FORCE_OPTIONAL(SDAI.STRING(""))
      return _TEMP3
    }
    public static func WHERE_wr4(SELF: eMULTI_LANGUAGE_ATTRIBUTE_ASSIGNMENT?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.ITEMS.QUERY{ CI in 

          let _TEMP1 = SDAI.USEDIN(T: CI, ROLE: \AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF
            .eMULTI_LANGUAGE_ATTRIBUTE_ASSIGNMENT.ITEMS)
          let _TEMP2 = _TEMP1.QUERY{ ATA in 

              let _TEMP1 = /*runtime*/ATA.GROUP_REF(eATTRIBUTE_VALUE_ASSIGNMENT.self)
              let _TEMP2 = /*runtime*/_TEMP1?.ATTRIBUTE_NAME
              let _TEMP3 = SELF.GROUP_REF(eATTRIBUTE_VALUE_ASSIGNMENT.self)
              let _TEMP4 = _TEMP3?.ATTRIBUTE_NAME
              let _TEMP5 = /*runtime*/_TEMP2 .==. _TEMP4
              let _TEMP6 = /*runtime*/ATA.TRANSLATION_LANGUAGE
              let _TEMP7 = SDAI.FORCE_OPTIONAL(/*runtime*/_TEMP6) .===. SELF.TRANSLATION_LANGUAGE
              let _TEMP8 = _TEMP5 && _TEMP7
              return _TEMP8 }
          let _TEMP3 = SDAI.SIZEOF(_TEMP2)
          let _TEMP4 = _TEMP3 > SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
          return _TEMP4 }
      let _TEMP2 = SDAI.SIZEOF(_TEMP1)
      let _TEMP3 = _TEMP2 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      return _TEMP3
    }
    public static func WHERE_wr5(SELF: eMULTI_LANGUAGE_ATTRIBUTE_ASSIGNMENT?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SELF.ITEMS.QUERY{ CI in 

          let _TEMP1 = SDAI.USEDIN(T: CI, ROLE: \AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF
            .eATTRIBUTE_LANGUAGE_ASSIGNMENT.ITEMS)
          let _TEMP2 = _TEMP1.QUERY{ ATA in 

              let _TEMP1 = /*runtime*/ATA.GROUP_REF(eATTRIBUTE_CLASSIFICATION_ASSIGNMENT.self)
              let _TEMP2 = /*runtime*/_TEMP1?.ROLE
              let _TEMP3 = /*runtime*/_TEMP2?.NAME
              let _TEMP4 = /*runtime*/_TEMP3 .==. SDAI.FORCE_OPTIONAL(SDAI.STRING("primary"))
              let _TEMP5 = /*runtime*/ATA.GROUP_REF(eATTRIBUTE_CLASSIFICATION_ASSIGNMENT.self)
              let _TEMP6 = /*runtime*/_TEMP5?.ATTRIBUTE_NAME
              let _TEMP7 = SELF.GROUP_REF(eATTRIBUTE_VALUE_ASSIGNMENT.self)
              let _TEMP8 = _TEMP7?.ATTRIBUTE_NAME
              let _TEMP9 = /*runtime*/_TEMP6 .==. _TEMP8
              let _TEMP10 = _TEMP4 && _TEMP9
              let _TEMP11 = /*runtime*/ATA.GROUP_REF(eATTRIBUTE_CLASSIFICATION_ASSIGNMENT.self)
              let _TEMP12 = /*runtime*/_TEMP11?.ASSIGNED_CLASS
              let _TEMP13 = /*runtime*/_TEMP12 .===. SELF.TRANSLATION_LANGUAGE
              let _TEMP14 = _TEMP10 && _TEMP13
              return _TEMP14 }
          let _TEMP3 = SDAI.SIZEOF(_TEMP2)
          let _TEMP4 = _TEMP3 > SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
          return _TEMP4 }
      let _TEMP2 = SDAI.SIZEOF(_TEMP1)
      let _TEMP3 = _TEMP2 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      return _TEMP3
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(ITEMS: SDAI.SET<sMULTI_LANGUAGE_ATTRIBUTE_ITEM>/*[1:nil]*/ ) {
      self._items = ITEMS
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 1
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverRequiredParameter(as: SDAI.SET<
        sMULTI_LANGUAGE_ATTRIBUTE_ITEM>.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( ITEMS: p0 )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY multi_language_attribute_assignment
    SUBTYPE OF ( attribute_value_assignment );
      items  : SET [1 : ?] OF multi_language_attribute_item;
    DERIVE
      translation_language  : language := language_indication[1]\attribute_classification_assignment.
                                assigned_class;
    INVERSE
      language_indication : SET [1 : 1] OF attribute_language_assignment FOR items -- defined in ENTITY: attribute_language_assignment;
    WHERE
      wr1: ( SELF\attribute_value_assignment.role.name = 'alternate language' );
      wr2: ( SIZEOF( QUERY ( ala <* language_indication | ( ( ala\attribute_classification_assignment.
               attribute_name = 'attribute_value' ) AND ( ala\attribute_classification_assignment.role.name =
               'translated' ) ) ) ) = 1 );
      wr3: ( SELF\attribute_value_assignment.attribute_name <> '' );
      wr4: ( SIZEOF( QUERY ( ci <* items | ( SIZEOF( QUERY ( ata <* USEDIN( ci, 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.MULTI_LANGUAGE_ATTRIBUTE_ASSIGNMENT.ITEMS'  )
               | ( ( ata\attribute_value_assignment.attribute_name = SELF\attribute_value_assignment.
               attribute_name ) AND ( ata.translation_language :=: translation_language ) ) ) ) > 1 ) ) ) = 0 );
      wr5: ( SIZEOF( QUERY ( ci <* items | ( SIZEOF( QUERY ( ata <* USEDIN( ci, 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ATTRIBUTE_LANGUAGE_ASSIGNMENT.ITEMS'  ) | ( 
               ( ata\attribute_classification_assignment.role.name = 'primary' ) AND ( ata\
               attribute_classification_assignment.attribute_name = SELF\attribute_value_assignment.
               attribute_name ) AND ( ata\attribute_classification_assignment.assigned_class :=: 
               translation_language ) ) ) ) > 0 ) ) ) = 0 );
  END_ENTITY; -- multi_language_attribute_assignment (line:21644 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eMULTI_LANGUAGE_ATTRIBUTE_ASSIGNMENT : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _multi_language_attribute_assignment.self
    }
    public let partialEntity: _multi_language_attribute_assignment

    //MARK: SUPERTYPES
    public let super_eATTRIBUTE_VALUE_ASSIGNMENT: eATTRIBUTE_VALUE_ASSIGNMENT 	// [1]
    public var super_eMULTI_LANGUAGE_ATTRIBUTE_ASSIGNMENT: eMULTI_LANGUAGE_ATTRIBUTE_ASSIGNMENT { return self } 	// [2]

    //MARK: SUBTYPES

    //MARK: ATTRIBUTES
    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eATTRIBUTE_VALUE_ASSIGNMENT`` )
    public var ATTRIBUTE_VALUE: sATTRIBUTE_TYPE {
      get {
        return SDAI.UNWRAP( super_eATTRIBUTE_VALUE_ASSIGNMENT.partialEntity._attribute_value )
      }
      set(newValue) {
        let partial = super_eATTRIBUTE_VALUE_ASSIGNMENT.partialEntity
        partial._attribute_value = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SELF( ``eMULTI_LANGUAGE_ATTRIBUTE_ASSIGNMENT`` )
    public var TRANSLATION_LANGUAGE: eLANGUAGE?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"TRANSLATION_LANGUAGE") {
          return cached.value as! eLANGUAGE? 
        }
        let origin = self
        let value = origin.partialEntity._translation_language__getter(SELF: origin)
        updateCache(derivedAttributeName:"TRANSLATION_LANGUAGE", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eATTRIBUTE_VALUE_ASSIGNMENT`` )
    public var ROLE: eATTRIBUTE_VALUE_ROLE {
      get {
        return SDAI.UNWRAP( super_eATTRIBUTE_VALUE_ASSIGNMENT.partialEntity._role )
      }
      set(newValue) {
        let partial = super_eATTRIBUTE_VALUE_ASSIGNMENT.partialEntity
        partial._role = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eMULTI_LANGUAGE_ATTRIBUTE_ASSIGNMENT`` )
    public var ITEMS: SDAI.SET<sMULTI_LANGUAGE_ATTRIBUTE_ITEM>/*[1:nil]*/  {
      get {
        return SDAI.UNWRAP( self.partialEntity._items )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._items = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eATTRIBUTE_VALUE_ASSIGNMENT`` )
    public var ATTRIBUTE_NAME: tLABEL {
      get {
        return SDAI.UNWRAP( super_eATTRIBUTE_VALUE_ASSIGNMENT.partialEntity._attribute_name )
      }
      set(newValue) {
        let partial = super_eATTRIBUTE_VALUE_ASSIGNMENT.partialEntity
        partial._attribute_name = SDAI.UNWRAP(newValue)
      }
    }

    /// __INVERSE__ attribute
    /// observing eATTRIBUTE_LANGUAGE_ASSIGNMENT .ITEMS
    /// - origin: SELF( ``eMULTI_LANGUAGE_ATTRIBUTE_ASSIGNMENT`` )
    public var LANGUAGE_INDICATION: SDAI.SET<eATTRIBUTE_LANGUAGE_ASSIGNMENT>/*[1:1]*/  {
      get {
        return SDAI.UNWRAP( self.partialEntity._language_indication )
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_multi_language_attribute_assignment.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eATTRIBUTE_VALUE_ASSIGNMENT.self) else { return nil }
      self.super_eATTRIBUTE_VALUE_ASSIGNMENT = super1

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _multi_language_attribute_assignment.WHERE_wr1(SELF: instance)
      result[prefix2 + " .WHERE_wr2"] = _multi_language_attribute_assignment.WHERE_wr2(SELF: instance)
      result[prefix2 + " .WHERE_wr3"] = _multi_language_attribute_assignment.WHERE_wr3(SELF: instance)
      result[prefix2 + " .WHERE_wr4"] = _multi_language_attribute_assignment.WHERE_wr4(SELF: instance)
      result[prefix2 + " .WHERE_wr5"] = _multi_language_attribute_assignment.WHERE_wr5(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "MULTI_LANGUAGE_ATTRIBUTE_ASSIGNMENT", type: self, explicitAttributeCount: 1)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eATTRIBUTE_VALUE_ASSIGNMENT.self)
      entityDef.add(supertype: eMULTI_LANGUAGE_ATTRIBUTE_ASSIGNMENT.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "ATTRIBUTE_VALUE", keyPath: \eMULTI_LANGUAGE_ATTRIBUTE_ASSIGNMENT.ATTRIBUTE_VALUE, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "TRANSLATION_LANGUAGE", keyPath: \eMULTI_LANGUAGE_ATTRIBUTE_ASSIGNMENT.TRANSLATION_LANGUAGE, 
        kind: .derived, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "ROLE", keyPath: \eMULTI_LANGUAGE_ATTRIBUTE_ASSIGNMENT.ROLE, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "ITEMS", keyPath: \eMULTI_LANGUAGE_ATTRIBUTE_ASSIGNMENT.ITEMS, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "ATTRIBUTE_NAME", keyPath: \eMULTI_LANGUAGE_ATTRIBUTE_ASSIGNMENT.ATTRIBUTE_NAME, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "LANGUAGE_INDICATION", keyPath: \eMULTI_LANGUAGE_ATTRIBUTE_ASSIGNMENT.LANGUAGE_INDICATION, 
        kind: .inverse, source: .thisEntity, mayYieldEntityReference: true)

      return entityDef
    }

  }
}
