/* file: multiple_arity_generic_expression.swift 	 generated: Sun Oct 31 15:32:10 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY multiple_arity_generic_expression
    ABSTRACT SUPERTYPE
    SUBTYPE OF ( generic_expression );
      operands  : LIST [2 : ?] OF generic_expression;
  END_ENTITY; -- multiple_arity_generic_expression (line:21709 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	generic_expression
    (no local attributes)

  ENTITY(SELF)	multiple_arity_generic_expression
    ATTR:  operands,	TYPE: LIST [2 : ?] OF generic_expression -- EXPLICIT (DYNAMIC)
      -- possibly overriden by
          ENTITY: series_composed_function,	TYPE: LIST [2 : ?] OF maths_function
          ENTITY: concat_expression,	TYPE: LIST [2 : ?] OF string_expression
          ENTITY: multiple_arity_numeric_expression,	TYPE: LIST [2 : ?] OF numeric_expression
          ENTITY: multiple_arity_boolean_expression,	TYPE: LIST [2 : ?] OF boolean_expression
          ENTITY: basic_sparse_matrix,	TYPE: LIST [3 : 3] OF maths_function
          ENTITY: parallel_composed_function,	TYPE: LIST [2 : ?] OF generic_expression	(as DERIVED)
          ENTITY: function_application,	TYPE: LIST [2 : ?] OF generic_expression	(as DERIVED)


  SUB- ENTITY(3)	series_composed_function
    REDCR: operands,	TYPE: LIST [2 : ?] OF maths_function -- EXPLICIT
      -- OVERRIDING ENTITY: multiple_arity_generic_expression


  SUB- ENTITY(4)	interval_expression
    ATTR:  interval_low,	TYPE: generic_expression -- DERIVED
      := SELF\multiple_arity_generic_expression.operands[1]

    ATTR:  interval_item,	TYPE: generic_expression -- DERIVED
      := SELF\multiple_arity_generic_expression.operands[2]

    ATTR:  interval_high,	TYPE: generic_expression -- DERIVED
      := SELF\multiple_arity_generic_expression.operands[3]


  SUB- ENTITY(5)	concat_expression
    REDCR: operands,	TYPE: LIST [2 : ?] OF string_expression -- EXPLICIT
      -- OVERRIDING ENTITY: multiple_arity_generic_expression


  SUB- ENTITY(6)	abstracted_expression_function
    REDCR: variables,	TYPE: LIST [1 : ?] OF UNIQUE generic_variable -- DERIVED (DYNAMIC)
      := remove_first( SELF\multiple_arity_generic_expression.operands )
      -- OVERRIDING ENTITY: quantifier_expression

    ATTR:  expr,	TYPE: generic_expression -- DERIVED
      := SELF\multiple_arity_generic_expression.operands[1]


  SUB- ENTITY(7)	definite_integral_expression
    ATTR:  lower_limit_neg_infinity,	TYPE: BOOLEAN -- EXPLICIT

    ATTR:  upper_limit_pos_infinity,	TYPE: BOOLEAN -- EXPLICIT

    ATTR:  integrand,	TYPE: generic_expression -- DERIVED
      := SELF\multiple_arity_generic_expression.operands[1]

    ATTR:  variable_of_integration,	TYPE: maths_variable -- DERIVED
      := SELF\multiple_arity_generic_expression.operands[2]

    REDCR: variables,	TYPE: LIST [1 : 1] OF UNIQUE generic_variable -- DERIVED (DYNAMIC)
      := [variable_of_integration]
      -- OVERRIDING ENTITY: quantifier_expression


  SUB- ENTITY(8)	quantifier_expression
    ATTR:  variables,	TYPE: LIST [1 : ?] OF UNIQUE generic_variable -- EXPLICIT (DYNAMIC)
      -- possibly overriden by
          ENTITY: abstracted_expression_function,	TYPE: LIST [1 : ?] OF UNIQUE generic_variable	(as DERIVED)
          ENTITY: definite_integral_expression,	TYPE: LIST [1 : 1] OF UNIQUE generic_variable	(as DERIVED)


  SUB- ENTITY(9)	mult_expression
    (no local attributes)

  SUB- ENTITY(10)	plus_expression
    (no local attributes)

  SUB- ENTITY(11)	minimum_function
    (no local attributes)

  SUB- ENTITY(12)	maximum_function
    (no local attributes)

  SUB- ENTITY(13)	multiple_arity_function_call
    (no local attributes)

  SUB- ENTITY(14)	multiple_arity_numeric_expression
    REDCR: operands,	TYPE: LIST [2 : ?] OF numeric_expression -- EXPLICIT
      -- OVERRIDING ENTITY: multiple_arity_generic_expression


  SUB- ENTITY(15)	substring_expression
    ATTR:  operand,	TYPE: generic_expression -- DERIVED
      := SELF\multiple_arity_generic_expression.operands[1]

    ATTR:  index1,	TYPE: generic_expression -- DERIVED
      := SELF\multiple_arity_generic_expression.operands[2]

    ATTR:  index2,	TYPE: generic_expression -- DERIVED
      := SELF\multiple_arity_generic_expression.operands[3]


  SUB- ENTITY(16)	or_expression
    (no local attributes)

  SUB- ENTITY(17)	and_expression
    (no local attributes)

  SUB- ENTITY(18)	multiple_arity_boolean_expression
    REDCR: operands,	TYPE: LIST [2 : ?] OF boolean_expression -- EXPLICIT
      -- OVERRIDING ENTITY: multiple_arity_generic_expression


  SUB- ENTITY(19)	basic_sparse_matrix
    REDCR: operands,	TYPE: LIST [3 : 3] OF maths_function -- EXPLICIT
      -- OVERRIDING ENTITY: multiple_arity_generic_expression

    ATTR:  default_entry,	TYPE: maths_value -- EXPLICIT

    ATTR:  order,	TYPE: ordering_type -- EXPLICIT

    ATTR:  index,	TYPE: maths_function -- DERIVED
      := SELF\multiple_arity_generic_expression.operands[1]

    ATTR:  loc,	TYPE: maths_function -- DERIVED
      := SELF\multiple_arity_generic_expression.operands[2]

    ATTR:  val,	TYPE: maths_function -- DERIVED
      := SELF\multiple_arity_generic_expression.operands[3]


  SUB- ENTITY(20)	parallel_composed_function
    ATTR:  source_of_domain,	TYPE: maths_space_or_function -- EXPLICIT

    ATTR:  prep_functions,	TYPE: LIST [1 : ?] OF maths_function -- EXPLICIT

    ATTR:  final_function,	TYPE: maths_function_select -- EXPLICIT

    REDCR: operands,	TYPE: LIST [2 : ?] OF generic_expression -- DERIVED (DYNAMIC)
      := convert_to_operands_prcmfn( source_of_domain, prep_functions, final_function )
      -- OVERRIDING ENTITY: multiple_arity_generic_expression


  SUB- ENTITY(21)	function_application
    ATTR:  func,	TYPE: maths_function_select -- EXPLICIT

    ATTR:  arguments,	TYPE: LIST [1 : ?] OF maths_expression -- EXPLICIT

    REDCR: operands,	TYPE: LIST [2 : ?] OF generic_expression -- DERIVED (DYNAMIC)
      := [convert_to_maths_function( func )] + convert_to_operands( arguments )
      -- OVERRIDING ENTITY: multiple_arity_generic_expression


*/


//MARK: - Partial Entity
  public final class _multiple_arity_generic_expression : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eMULTIPLE_ARITY_GENERIC_EXPRESSION.self
    }

    //ATTRIBUTES
    /// EXPLICIT ATTRIBUTE 
    /// - see the corresponding attribute accesser in the entity reference definition for the attribute value dynamic lookup logic
    public internal(set) var _operands: (SDAI.LIST<eGENERIC_EXPRESSION>/*[2:nil]*/ )?  // PLAIN EXPLICIT ATTRIBUTE

    internal static func _operands__provider(complex: SDAI.ComplexEntity) -> eMULTIPLE_ARITY_GENERIC_EXPRESSION__OPERANDS__provider? {
      let resolved = complex.resolvePartialEntityInstance(from: [_parallel_composed_function.typeIdentity, 
        _function_application.typeIdentity])
      return resolved as? eMULTIPLE_ARITY_GENERIC_EXPRESSION__OPERANDS__provider
    }

    //PARTIAL COMPLEX ENTITY SUPPORT
    final public override class func fixupPartialComplexEntityAttributes(partialComplex: SDAI.ComplexEntity, baseComplex: SDAI.ComplexEntity) {
      guard let pe = partialComplex.partialEntityInstance(_multiple_arity_generic_expression.self) else { return }

      if pe._operands == nil, self._operands__provider(complex: partialComplex) == nil, 
        let base__operands__provider = self._operands__provider(complex: baseComplex) {
        pe._operands = base__operands__provider._operands__getter(complex: baseComplex)
      }
    }
    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._operands?.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._operands?.value.isValueEqualOptionally(to: rhs._operands?.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._operands?.value.isValueEqualOptionally(to: rhs._operands?.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(OPERANDS: (SDAI.LIST<eGENERIC_EXPRESSION>/*[2:nil]*/ )? ) {
      self._operands = OPERANDS
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 1
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverOmittableParameter(as: SDAI.LIST<
        eGENERIC_EXPRESSION>.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( OPERANDS: p0 )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY multiple_arity_generic_expression
    ABSTRACT SUPERTYPE
    SUBTYPE OF ( generic_expression );
      operands  : LIST [2 : ?] OF generic_expression;
  END_ENTITY; -- multiple_arity_generic_expression (line:21709 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eMULTIPLE_ARITY_GENERIC_EXPRESSION : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _multiple_arity_generic_expression.self
    }
    public let partialEntity: _multiple_arity_generic_expression

    //MARK: SUPERTYPES
    public let super_eGENERIC_EXPRESSION: eGENERIC_EXPRESSION 	// [1]
    public var super_eMULTIPLE_ARITY_GENERIC_EXPRESSION: eMULTIPLE_ARITY_GENERIC_EXPRESSION { return self } 	// [2]

    //MARK: SUBTYPES
    public var sub_eSERIES_COMPOSED_FUNCTION: eSERIES_COMPOSED_FUNCTION? {	// [3]
      return self.complexEntity.entityReference(eSERIES_COMPOSED_FUNCTION.self)
    }

    public var sub_eINTERVAL_EXPRESSION: eINTERVAL_EXPRESSION? {	// [4]
      return self.complexEntity.entityReference(eINTERVAL_EXPRESSION.self)
    }

    public var sub_eCONCAT_EXPRESSION: eCONCAT_EXPRESSION? {	// [5]
      return self.complexEntity.entityReference(eCONCAT_EXPRESSION.self)
    }

    public var sub_eABSTRACTED_EXPRESSION_FUNCTION: eABSTRACTED_EXPRESSION_FUNCTION? {	// [6]
      return self.complexEntity.entityReference(eABSTRACTED_EXPRESSION_FUNCTION.self)
    }

    public var sub_eDEFINITE_INTEGRAL_EXPRESSION: eDEFINITE_INTEGRAL_EXPRESSION? {	// [7]
      return self.complexEntity.entityReference(eDEFINITE_INTEGRAL_EXPRESSION.self)
    }

    public var sub_eQUANTIFIER_EXPRESSION: eQUANTIFIER_EXPRESSION? {	// [8]
      return self.complexEntity.entityReference(eQUANTIFIER_EXPRESSION.self)
    }

    public var sub_eMULT_EXPRESSION: eMULT_EXPRESSION? {	// [9]
      return self.complexEntity.entityReference(eMULT_EXPRESSION.self)
    }

    public var sub_ePLUS_EXPRESSION: ePLUS_EXPRESSION? {	// [10]
      return self.complexEntity.entityReference(ePLUS_EXPRESSION.self)
    }

    public var sub_eMINIMUM_FUNCTION: eMINIMUM_FUNCTION? {	// [11]
      return self.complexEntity.entityReference(eMINIMUM_FUNCTION.self)
    }

    public var sub_eMAXIMUM_FUNCTION: eMAXIMUM_FUNCTION? {	// [12]
      return self.complexEntity.entityReference(eMAXIMUM_FUNCTION.self)
    }

    public var sub_eMULTIPLE_ARITY_FUNCTION_CALL: eMULTIPLE_ARITY_FUNCTION_CALL? {	// [13]
      return self.complexEntity.entityReference(eMULTIPLE_ARITY_FUNCTION_CALL.self)
    }

    public var sub_eMULTIPLE_ARITY_NUMERIC_EXPRESSION: eMULTIPLE_ARITY_NUMERIC_EXPRESSION? {	// [14]
      return self.complexEntity.entityReference(eMULTIPLE_ARITY_NUMERIC_EXPRESSION.self)
    }

    public var sub_eSUBSTRING_EXPRESSION: eSUBSTRING_EXPRESSION? {	// [15]
      return self.complexEntity.entityReference(eSUBSTRING_EXPRESSION.self)
    }

    public var sub_eOR_EXPRESSION: eOR_EXPRESSION? {	// [16]
      return self.complexEntity.entityReference(eOR_EXPRESSION.self)
    }

    public var sub_eAND_EXPRESSION: eAND_EXPRESSION? {	// [17]
      return self.complexEntity.entityReference(eAND_EXPRESSION.self)
    }

    public var sub_eMULTIPLE_ARITY_BOOLEAN_EXPRESSION: eMULTIPLE_ARITY_BOOLEAN_EXPRESSION? {	// [18]
      return self.complexEntity.entityReference(eMULTIPLE_ARITY_BOOLEAN_EXPRESSION.self)
    }

    public var sub_eBASIC_SPARSE_MATRIX: eBASIC_SPARSE_MATRIX? {	// [19]
      return self.complexEntity.entityReference(eBASIC_SPARSE_MATRIX.self)
    }

    public var sub_ePARALLEL_COMPOSED_FUNCTION: ePARALLEL_COMPOSED_FUNCTION? {	// [20]
      return self.complexEntity.entityReference(ePARALLEL_COMPOSED_FUNCTION.self)
    }

    public var sub_eFUNCTION_APPLICATION: eFUNCTION_APPLICATION? {	// [21]
      return self.complexEntity.entityReference(eFUNCTION_APPLICATION.self)
    }


    //MARK: ATTRIBUTES
    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePARALLEL_COMPOSED_FUNCTION`` )
    public var FINAL_FUNCTION: sMATHS_FUNCTION_SELECT?  {
      get {
        return sub_ePARALLEL_COMPOSED_FUNCTION?.partialEntity._final_function
      }
      set(newValue) {
        guard let partial = sub_ePARALLEL_COMPOSED_FUNCTION?.super_ePARALLEL_COMPOSED_FUNCTION.partialEntity
          else { return }
        partial._final_function = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eINTERVAL_EXPRESSION`` )
    public var INTERVAL_HIGH: eGENERIC_EXPRESSION?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"INTERVAL_HIGH") {
          return cached.value as! eGENERIC_EXPRESSION? 
        }
        guard let origin = sub_eINTERVAL_EXPRESSION else { return nil }
        let value = eGENERIC_EXPRESSION(origin.partialEntity._interval_high__getter(SELF: origin))
        updateCache(derivedAttributeName:"INTERVAL_HIGH", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eBASIC_SPARSE_MATRIX`` )
    public var DEFAULT_ENTRY: sMATHS_VALUE?  {
      get {
        return sub_eBASIC_SPARSE_MATRIX?.partialEntity._default_entry
      }
      set(newValue) {
        guard let partial = sub_eBASIC_SPARSE_MATRIX?.super_eBASIC_SPARSE_MATRIX.partialEntity
          else { return }
        partial._default_entry = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eABSTRACTED_EXPRESSION_FUNCTION`` )
    public var EXPR: eGENERIC_EXPRESSION?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"EXPR") {
          return cached.value as! eGENERIC_EXPRESSION? 
        }
        guard let origin = sub_eABSTRACTED_EXPRESSION_FUNCTION else { return nil }
        let value = eGENERIC_EXPRESSION(origin.partialEntity._expr__getter(SELF: origin))
        updateCache(derivedAttributeName:"EXPR", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eFUNCTION_APPLICATION`` )
    public var FUNC: sMATHS_FUNCTION_SELECT?  {
      get {
        return sub_eFUNCTION_APPLICATION?.partialEntity._func
      }
      set(newValue) {
        guard let partial = sub_eFUNCTION_APPLICATION?.super_eFUNCTION_APPLICATION.partialEntity
          else { return }
        partial._func = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eDEFINITE_INTEGRAL_EXPRESSION`` )
    public var VARIABLE_OF_INTEGRATION: eMATHS_VARIABLE?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"VARIABLE_OF_INTEGRATION") {
          return cached.value as! eMATHS_VARIABLE? 
        }
        guard let origin = sub_eDEFINITE_INTEGRAL_EXPRESSION else { return nil }
        let value = eMATHS_VARIABLE(origin.partialEntity._variable_of_integration__getter(SELF: origin))
        updateCache(derivedAttributeName:"VARIABLE_OF_INTEGRATION", value:value)
        return value
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eINTERVAL_EXPRESSION`` )
    public var INTERVAL_LOW: eGENERIC_EXPRESSION?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"INTERVAL_LOW") {
          return cached.value as! eGENERIC_EXPRESSION? 
        }
        guard let origin = sub_eINTERVAL_EXPRESSION else { return nil }
        let value = eGENERIC_EXPRESSION(origin.partialEntity._interval_low__getter(SELF: origin))
        updateCache(derivedAttributeName:"INTERVAL_LOW", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eBASIC_SPARSE_MATRIX`` )
    public var ORDER: nORDERING_TYPE?  {
      get {
        return sub_eBASIC_SPARSE_MATRIX?.partialEntity._order
      }
      set(newValue) {
        guard let partial = sub_eBASIC_SPARSE_MATRIX?.super_eBASIC_SPARSE_MATRIX.partialEntity
          else { return }
        partial._order = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eSUBSTRING_EXPRESSION`` )
    public var INDEX2: eGENERIC_EXPRESSION?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"INDEX2") {
          return cached.value as! eGENERIC_EXPRESSION? 
        }
        guard let origin = sub_eSUBSTRING_EXPRESSION else { return nil }
        let value = eGENERIC_EXPRESSION(origin.partialEntity._index2__getter(SELF: origin))
        updateCache(derivedAttributeName:"INDEX2", value:value)
        return value
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eBASIC_SPARSE_MATRIX`` )
    public var VAL: eMATHS_FUNCTION?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"VAL") {
          return cached.value as! eMATHS_FUNCTION? 
        }
        guard let origin = sub_eBASIC_SPARSE_MATRIX else { return nil }
        let value = eMATHS_FUNCTION(origin.partialEntity._val__getter(SELF: origin))
        updateCache(derivedAttributeName:"VAL", value:value)
        return value
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eSUBSTRING_EXPRESSION`` )
    public var INDEX1: eGENERIC_EXPRESSION?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"INDEX1") {
          return cached.value as! eGENERIC_EXPRESSION? 
        }
        guard let origin = sub_eSUBSTRING_EXPRESSION else { return nil }
        let value = eGENERIC_EXPRESSION(origin.partialEntity._index1__getter(SELF: origin))
        updateCache(derivedAttributeName:"INDEX1", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePARALLEL_COMPOSED_FUNCTION`` )
    public var SOURCE_OF_DOMAIN: sMATHS_SPACE_OR_FUNCTION?  {
      get {
        return sub_ePARALLEL_COMPOSED_FUNCTION?.partialEntity._source_of_domain
      }
      set(newValue) {
        guard let partial = sub_ePARALLEL_COMPOSED_FUNCTION?.super_ePARALLEL_COMPOSED_FUNCTION.partialEntity
          else { return }
        partial._source_of_domain = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eDEFINITE_INTEGRAL_EXPRESSION`` )
    public var INTEGRAND: eGENERIC_EXPRESSION?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"INTEGRAND") {
          return cached.value as! eGENERIC_EXPRESSION? 
        }
        guard let origin = sub_eDEFINITE_INTEGRAL_EXPRESSION else { return nil }
        let value = eGENERIC_EXPRESSION(origin.partialEntity._integrand__getter(SELF: origin))
        updateCache(derivedAttributeName:"INTEGRAND", value:value)
        return value
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eBASIC_SPARSE_MATRIX`` )
    public var LOC: eMATHS_FUNCTION?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"LOC") {
          return cached.value as! eMATHS_FUNCTION? 
        }
        guard let origin = sub_eBASIC_SPARSE_MATRIX else { return nil }
        let value = eMATHS_FUNCTION(origin.partialEntity._loc__getter(SELF: origin))
        updateCache(derivedAttributeName:"LOC", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eDEFINITE_INTEGRAL_EXPRESSION`` )
    public var UPPER_LIMIT_POS_INFINITY: SDAI.BOOLEAN?  {
      get {
        return sub_eDEFINITE_INTEGRAL_EXPRESSION?.partialEntity._upper_limit_pos_infinity
      }
      set(newValue) {
        guard let partial = sub_eDEFINITE_INTEGRAL_EXPRESSION?.super_eDEFINITE_INTEGRAL_EXPRESSION
          .partialEntity else { return }
        partial._upper_limit_pos_infinity = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT(DYNAMIC)__ attribute
    /// - origin: SELF( ``eMULTIPLE_ARITY_GENERIC_EXPRESSION`` )
    public var OPERANDS: SDAI.LIST<eGENERIC_EXPRESSION>/*[2:nil]*/  {
      get {
        if let resolved = _multiple_arity_generic_expression._operands__provider(complex: self.complexEntity) {
          let value = resolved._operands__getter(complex: self.complexEntity)
          return value
        }
        else {
          return SDAI.UNWRAP( self.partialEntity._operands )
        }
      }
      set(newValue) {
        if let _ = _multiple_arity_generic_expression._operands__provider(complex: self.complexEntity) { return }

        let partial = self.partialEntity
        partial._operands = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eBASIC_SPARSE_MATRIX`` )
    public var INDEX: eMATHS_FUNCTION?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"INDEX") {
          return cached.value as! eMATHS_FUNCTION? 
        }
        guard let origin = sub_eBASIC_SPARSE_MATRIX else { return nil }
        let value = eMATHS_FUNCTION(origin.partialEntity._index__getter(SELF: origin))
        updateCache(derivedAttributeName:"INDEX", value:value)
        return value
      }
    }

    /// __EXPLICIT(DYNAMIC)__ attribute
    /// - origin: SUB( ``eQUANTIFIER_EXPRESSION`` )
    public var VARIABLES: (SDAI.LIST_UNIQUE<eGENERIC_VARIABLE>/*[1:nil]*/ )?  {
      get {
        if let resolved = _quantifier_expression._variables__provider(complex: self.complexEntity) {
          let value = resolved._variables__getter(complex: self.complexEntity)
          return value
        }
        else {
          return sub_eQUANTIFIER_EXPRESSION?.partialEntity._variables
        }
      }
      set(newValue) {
        if let _ = _quantifier_expression._variables__provider(complex: self.complexEntity) { return }

        guard let partial = sub_eQUANTIFIER_EXPRESSION?.super_eQUANTIFIER_EXPRESSION.partialEntity
          else { return }
        partial._variables = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eSUBSTRING_EXPRESSION`` )
    public var OPERAND: eGENERIC_EXPRESSION?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"OPERAND") {
          return cached.value as! eGENERIC_EXPRESSION? 
        }
        guard let origin = sub_eSUBSTRING_EXPRESSION else { return nil }
        let value = eGENERIC_EXPRESSION(origin.partialEntity._operand__getter(SELF: origin))
        updateCache(derivedAttributeName:"OPERAND", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eDEFINITE_INTEGRAL_EXPRESSION`` )
    public var LOWER_LIMIT_NEG_INFINITY: SDAI.BOOLEAN?  {
      get {
        return sub_eDEFINITE_INTEGRAL_EXPRESSION?.partialEntity._lower_limit_neg_infinity
      }
      set(newValue) {
        guard let partial = sub_eDEFINITE_INTEGRAL_EXPRESSION?.super_eDEFINITE_INTEGRAL_EXPRESSION
          .partialEntity else { return }
        partial._lower_limit_neg_infinity = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePARALLEL_COMPOSED_FUNCTION`` )
    public var PREP_FUNCTIONS: (SDAI.LIST<eMATHS_FUNCTION>/*[1:nil]*/ )?  {
      get {
        return sub_ePARALLEL_COMPOSED_FUNCTION?.partialEntity._prep_functions
      }
      set(newValue) {
        guard let partial = sub_ePARALLEL_COMPOSED_FUNCTION?.super_ePARALLEL_COMPOSED_FUNCTION.partialEntity
          else { return }
        partial._prep_functions = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eFUNCTION_APPLICATION`` )
    public var ARGUMENTS: (SDAI.LIST<sMATHS_EXPRESSION>/*[1:nil]*/ )?  {
      get {
        return sub_eFUNCTION_APPLICATION?.partialEntity._arguments
      }
      set(newValue) {
        guard let partial = sub_eFUNCTION_APPLICATION?.super_eFUNCTION_APPLICATION.partialEntity
          else { return }
        partial._arguments = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eINTERVAL_EXPRESSION`` )
    public var INTERVAL_ITEM: eGENERIC_EXPRESSION?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"INTERVAL_ITEM") {
          return cached.value as! eGENERIC_EXPRESSION? 
        }
        guard let origin = sub_eINTERVAL_EXPRESSION else { return nil }
        let value = eGENERIC_EXPRESSION(origin.partialEntity._interval_item__getter(SELF: origin))
        updateCache(derivedAttributeName:"INTERVAL_ITEM", value:value)
        return value
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_multiple_arity_generic_expression.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eGENERIC_EXPRESSION.self) else { return nil }
      self.super_eGENERIC_EXPRESSION = super1

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "MULTIPLE_ARITY_GENERIC_EXPRESSION", type: self, explicitAttributeCount: 1)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eGENERIC_EXPRESSION.self)
      entityDef.add(supertype: eMULTIPLE_ARITY_GENERIC_EXPRESSION.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "FINAL_FUNCTION", keyPath: \eMULTIPLE_ARITY_GENERIC_EXPRESSION.FINAL_FUNCTION, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "INTERVAL_HIGH", keyPath: \eMULTIPLE_ARITY_GENERIC_EXPRESSION.INTERVAL_HIGH, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "DEFAULT_ENTRY", keyPath: \eMULTIPLE_ARITY_GENERIC_EXPRESSION.DEFAULT_ENTRY, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "EXPR", keyPath: \eMULTIPLE_ARITY_GENERIC_EXPRESSION.EXPR, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "FUNC", keyPath: \eMULTIPLE_ARITY_GENERIC_EXPRESSION.FUNC, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "VARIABLE_OF_INTEGRATION", keyPath: \eMULTIPLE_ARITY_GENERIC_EXPRESSION.VARIABLE_OF_INTEGRATION, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "INTERVAL_LOW", keyPath: \eMULTIPLE_ARITY_GENERIC_EXPRESSION.INTERVAL_LOW, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "ORDER", keyPath: \eMULTIPLE_ARITY_GENERIC_EXPRESSION.ORDER, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "INDEX2", keyPath: \eMULTIPLE_ARITY_GENERIC_EXPRESSION.INDEX2, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "VAL", keyPath: \eMULTIPLE_ARITY_GENERIC_EXPRESSION.VAL, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "INDEX1", keyPath: \eMULTIPLE_ARITY_GENERIC_EXPRESSION.INDEX1, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "SOURCE_OF_DOMAIN", keyPath: \eMULTIPLE_ARITY_GENERIC_EXPRESSION.SOURCE_OF_DOMAIN, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "INTEGRAND", keyPath: \eMULTIPLE_ARITY_GENERIC_EXPRESSION.INTEGRAND, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "LOC", keyPath: \eMULTIPLE_ARITY_GENERIC_EXPRESSION.LOC, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "UPPER_LIMIT_POS_INFINITY", keyPath: \eMULTIPLE_ARITY_GENERIC_EXPRESSION.UPPER_LIMIT_POS_INFINITY, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "OPERANDS", keyPath: \eMULTIPLE_ARITY_GENERIC_EXPRESSION.OPERANDS, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "INDEX", keyPath: \eMULTIPLE_ARITY_GENERIC_EXPRESSION.INDEX, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "VARIABLES", keyPath: \eMULTIPLE_ARITY_GENERIC_EXPRESSION.VARIABLES, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "OPERAND", keyPath: \eMULTIPLE_ARITY_GENERIC_EXPRESSION.OPERAND, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "LOWER_LIMIT_NEG_INFINITY", keyPath: \eMULTIPLE_ARITY_GENERIC_EXPRESSION.LOWER_LIMIT_NEG_INFINITY, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "PREP_FUNCTIONS", keyPath: \eMULTIPLE_ARITY_GENERIC_EXPRESSION.PREP_FUNCTIONS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "ARGUMENTS", keyPath: \eMULTIPLE_ARITY_GENERIC_EXPRESSION.ARGUMENTS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "INTERVAL_ITEM", keyPath: \eMULTIPLE_ARITY_GENERIC_EXPRESSION.INTERVAL_ITEM, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: true)

      return entityDef
    }

  }
}

//MARK: - Entity Dynamic Attribute Protocols
internal protocol eMULTIPLE_ARITY_GENERIC_EXPRESSION__OPERANDS__provider {
  func _operands__getter(complex: SDAI.ComplexEntity) -> SDAI.LIST<
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGENERIC_EXPRESSION>/*[2:nil]*/ 
}
