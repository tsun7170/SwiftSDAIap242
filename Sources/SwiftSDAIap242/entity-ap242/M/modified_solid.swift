/* file: modified_solid.swift 	 generated: Mon Jan  3 16:32:52 2022 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
  derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.1, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
  will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY modified_solid
    ABSTRACT SUPERTYPE OF ( 
        ONEOF ( 
            edge_blended_solid, 
            sculptured_solid, 
            shelled_solid, 
            modified_solid_with_placed_configuration ) )
    SUBTYPE OF ( solid_model );
      rationale   : text;
      base_solid  : base_solid_select;
  END_ENTITY; -- modified_solid (line:21618 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	representation_item
    ATTR:  name,	TYPE: label -- EXPLICIT


  SUPER- ENTITY(2)	geometric_representation_item
    ATTR:  dim,	TYPE: dimension_count -- DERIVED
      := dimension_of( SELF )


  SUPER- ENTITY(3)	solid_model
    (no local attributes)

  ENTITY(SELF)	modified_solid
    ATTR:  rationale,	TYPE: text -- EXPLICIT

    ATTR:  base_solid,	TYPE: base_solid_select -- EXPLICIT


  SUB- ENTITY(5)	sculptured_solid
    ATTR:  sculpturing_element,	TYPE: generalized_surface_select -- EXPLICIT

    ATTR:  positive_side,	TYPE: BOOLEAN -- EXPLICIT


  SUB- ENTITY(6)	solid_with_single_offset_chamfer
    ATTR:  offset_distance,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(7)	solid_with_double_offset_chamfer
    ATTR:  left_offset_distance,	TYPE: positive_length_measure -- EXPLICIT

    ATTR:  right_offset_distance,	TYPE: positive_length_measure -- EXPLICIT


  SUB- ENTITY(8)	solid_with_angle_based_chamfer
    ATTR:  offset_distance,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  left_offset,	TYPE: BOOLEAN -- EXPLICIT

    ATTR:  offset_angle,	TYPE: positive_plane_angle_measure -- EXPLICIT


  SUB- ENTITY(9)	solid_with_chamfered_edges
    (no local attributes)

  SUB- ENTITY(10)	solid_with_variable_radius_edge_blend
    ATTR:  point_list,	TYPE: LIST [2 : ?] OF point -- EXPLICIT

    ATTR:  radius_list,	TYPE: LIST [2 : ?] OF positive_length_measure -- EXPLICIT

    ATTR:  edge_function_list,	TYPE: LIST [1 : ?] OF blend_radius_variation_type -- EXPLICIT


  SUB- ENTITY(11)	track_blended_solid_with_end_conditions
    ATTR:  end_conditions,	TYPE: LIST [2 : 2] OF blend_end_condition_select -- EXPLICIT


  SUB- ENTITY(12)	track_blended_solid
    (no local attributes)

  SUB- ENTITY(13)	solid_with_constant_radius_edge_blend
    ATTR:  radius,	TYPE: positive_length_measure -- EXPLICIT


  SUB- ENTITY(14)	edge_blended_solid
    ATTR:  blended_edges,	TYPE: LIST [1 : ?] OF UNIQUE edge_curve -- EXPLICIT


  SUB- ENTITY(15)	complex_shelled_solid
    ATTR:  thickened_face_list,	TYPE: LIST [1 : ?] OF SET [1 : ?] OF face_surface -- EXPLICIT

    ATTR:  thickness_list,	TYPE: LIST [1 : ?] OF length_measure -- EXPLICIT


  SUB- ENTITY(16)	double_offset_shelled_solid
    ATTR:  thickness2,	TYPE: length_measure -- EXPLICIT


  SUB- ENTITY(17)	shelled_solid
    ATTR:  deleted_face_set,	TYPE: SET [1 : ?] OF face_surface -- EXPLICIT

    ATTR:  thickness,	TYPE: length_measure -- EXPLICIT


  SUB- ENTITY(18)	solid_with_incomplete_circular_pattern
    ATTR:  omitted_instances,	TYPE: SET [1 : ?] OF positive_integer -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(19)	solid_with_circular_pattern
    ATTR:  replicate_count,	TYPE: positive_integer -- EXPLICIT

    ATTR:  angular_spacing,	TYPE: plane_angle_measure -- EXPLICIT

    ATTR:  radial_alignment,	TYPE: BOOLEAN -- EXPLICIT

    ATTR:  reference_point,	TYPE: point -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(20)	solid_with_incomplete_rectangular_pattern
    ATTR:  omitted_instances,	TYPE: SET [1 : ?] OF LIST [2 : 2] OF positive_integer -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(21)	solid_with_rectangular_pattern
    ATTR:  row_count,	TYPE: positive_integer -- EXPLICIT

    ATTR:  column_count,	TYPE: positive_integer -- EXPLICIT

    ATTR:  row_spacing,	TYPE: length_measure -- EXPLICIT

    ATTR:  column_spacing,	TYPE: length_measure -- EXPLICIT


  SUB- ENTITY(22)	solid_with_shape_element_pattern
    ATTR:  replicated_element,	TYPE: modified_solid_with_placed_configuration -- EXPLICIT


  SUB- ENTITY(23)	solid_with_general_protrusion
    ATTR:  profile,	TYPE: positioned_sketch -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  reference_point,	TYPE: point -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(24)	solid_with_rectangular_protrusion
    ATTR:  protrusion_length,	TYPE: positive_length_measure -- EXPLICIT

    ATTR:  protrusion_width,	TYPE: positive_length_measure -- EXPLICIT

    ATTR:  protrusion_corner_radius,	TYPE: non_negative_length_measure -- EXPLICIT


  SUB- ENTITY(25)	solid_with_circular_protrusion
    ATTR:  protrusion_radius,	TYPE: positive_length_measure -- EXPLICIT


  SUB- ENTITY(26)	solid_with_protrusion
    ATTR:  protrusion_height,	TYPE: positive_length_measure -- EXPLICIT

    ATTR:  protrusion_draft_angle,	TYPE: plane_angle_measure -- EXPLICIT


  SUB- ENTITY(27)	solid_with_trapezoidal_section_slot
    ATTR:  draft_angle,	TYPE: plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  floor_fillet_radius,	TYPE: non_negative_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(28)	solid_with_tee_section_slot
    ATTR:  tee_section_width,	TYPE: positive_length_measure -- EXPLICIT

    ATTR:  collar_depth,	TYPE: positive_length_measure -- EXPLICIT


  SUB- ENTITY(29)	solid_with_straight_slot
    ATTR:  slot_length,	TYPE: positive_length_measure -- EXPLICIT


  SUB- ENTITY(30)	solid_with_curved_slot
    ATTR:  slot_centreline,	TYPE: bounded_curve -- EXPLICIT


  SUB- ENTITY(31)	solid_with_slot
    ATTR:  slot_width,	TYPE: positive_length_measure -- EXPLICIT

    ATTR:  closed_ends,	TYPE: LIST [2 : 2] OF LOGICAL -- EXPLICIT

    ATTR:  end_exit_faces,	TYPE: LIST [2 : 2] OF SET [0 : ?] OF face_surface -- EXPLICIT


  SUB- ENTITY(32)	solid_with_general_pocket
    ATTR:  profile,	TYPE: positioned_sketch -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  reference_point,	TYPE: point -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(33)	solid_with_rectangular_pocket
    ATTR:  pocket_length,	TYPE: positive_length_measure -- EXPLICIT

    ATTR:  pocket_width,	TYPE: positive_length_measure -- EXPLICIT

    ATTR:  corner_radius,	TYPE: non_negative_length_measure -- EXPLICIT


  SUB- ENTITY(34)	solid_with_circular_pocket
    ATTR:  pocket_radius,	TYPE: positive_length_measure -- EXPLICIT


  SUB- ENTITY(35)	solid_with_pocket
    ATTR:  floor_blend_radius,	TYPE: non_negative_length_measure -- EXPLICIT

    ATTR:  draft_angle,	TYPE: plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(36)	solid_with_spherical_bottom_round_hole
    ATTR:  sphere_radius,	TYPE: positive_length_measure -- EXPLICIT


  SUB- ENTITY(37)	solid_with_flat_bottom_round_hole
    ATTR:  fillet_radius,	TYPE: non_negative_length_measure -- EXPLICIT


  SUB- ENTITY(38)	solid_with_stepped_round_hole_and_conical_transitions
    ATTR:  conical_transitions,	TYPE: SET [1 : ?] OF conical_stepped_hole_transition -- EXPLICIT


  SUB- ENTITY(39)	solid_with_conical_bottom_round_hole
    ATTR:  semi_apex_angle,	TYPE: positive_plane_angle_measure -- EXPLICIT

    ATTR:  tip_radius,	TYPE: non_negative_length_measure -- EXPLICIT


  SUB- ENTITY(40)	solid_with_stepped_round_hole
    ATTR:  segments,	TYPE: positive_integer -- EXPLICIT

    ATTR:  segment_radii,	TYPE: LIST [1 : segments] OF positive_length_measure -- EXPLICIT

    ATTR:  segment_depths,	TYPE: LIST [1 : segments] OF positive_length_measure -- EXPLICIT

    REDCR: depth,	TYPE: positive_length_measure -- DERIVED (DYNAMIC)
      := compute_total_depth( SELF )
      -- OVERRIDING ENTITY: solid_with_depression


  SUB- ENTITY(41)	solid_with_hole
    (no local attributes)

  SUB- ENTITY(42)	solid_with_through_depression
    ATTR:  exit_faces,	TYPE: SET [1 : ?] OF face_surface -- EXPLICIT


  SUB- ENTITY(43)	solid_with_groove
    ATTR:  groove_radius,	TYPE: positive_length_measure -- EXPLICIT

    ATTR:  groove_width,	TYPE: positive_length_measure -- EXPLICIT

    ATTR:  draft_angle,	TYPE: plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  floor_fillet_radius,	TYPE: non_negative_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  external_groove,	TYPE: BOOLEAN -- EXPLICIT


  SUB- ENTITY(44)	solid_with_depression
    ATTR:  depth,	TYPE: positive_length_measure -- EXPLICIT (DYNAMIC)
      -- possibly overriden by
          ENTITY: solid_with_stepped_round_hole,	TYPE: positive_length_measure	(as DERIVED)


  SUB- ENTITY(45)	modified_solid_with_placed_configuration
    ATTR:  placing,	TYPE: axis2_placement_3d -- EXPLICIT


*/


//MARK: - Partial Entity
  public final class _modified_solid : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eMODIFIED_SOLID.self
    }

    //ATTRIBUTES
    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _rationale: tTEXT // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _base_solid: sBASE_SOLID_SELECT // PLAIN EXPLICIT ATTRIBUTE

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._rationale.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._base_solid.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._rationale.value.isValueEqualOptionally(to: rhs._rationale.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._base_solid.value.isValueEqualOptionally(to: rhs._base_solid.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._rationale.value.isValueEqualOptionally(to: rhs._rationale.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._base_solid.value.isValueEqualOptionally(to: rhs._base_solid.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(RATIONALE: tTEXT, BASE_SOLID: sBASE_SOLID_SELECT) {
      self._rationale = RATIONALE
      self._base_solid = BASE_SOLID
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 2
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverRequiredParameter(as: tTEXT.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p1) = exchangeStructure.recoverRequiredParameter(as: sBASE_SOLID_SELECT.self, from: parameters[1])
      else { exchangeStructure.add(errorContext: "while recovering parameter #1 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( RATIONALE: p0, BASE_SOLID: p1 )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY modified_solid
    ABSTRACT SUPERTYPE OF ( 
        ONEOF ( 
            edge_blended_solid, 
            sculptured_solid, 
            shelled_solid, 
            modified_solid_with_placed_configuration ) )
    SUBTYPE OF ( solid_model );
      rationale   : text;
      base_solid  : base_solid_select;
  END_ENTITY; -- modified_solid (line:21618 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eMODIFIED_SOLID : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _modified_solid.self
    }
    public let partialEntity: _modified_solid

    //MARK: SUPERTYPES
    public let super_eREPRESENTATION_ITEM: eREPRESENTATION_ITEM 	// [1]
    public let super_eGEOMETRIC_REPRESENTATION_ITEM: eGEOMETRIC_REPRESENTATION_ITEM 	// [2]
    public let super_eSOLID_MODEL: eSOLID_MODEL 	// [3]
    public var super_eMODIFIED_SOLID: eMODIFIED_SOLID { return self } 	// [4]

    //MARK: SUBTYPES
    public var sub_eSCULPTURED_SOLID: eSCULPTURED_SOLID? {	// [5]
      return self.complexEntity.entityReference(eSCULPTURED_SOLID.self)
    }

    public var sub_eSOLID_WITH_SINGLE_OFFSET_CHAMFER: eSOLID_WITH_SINGLE_OFFSET_CHAMFER? {	// [6]
      return self.complexEntity.entityReference(eSOLID_WITH_SINGLE_OFFSET_CHAMFER.self)
    }

    public var sub_eSOLID_WITH_DOUBLE_OFFSET_CHAMFER: eSOLID_WITH_DOUBLE_OFFSET_CHAMFER? {	// [7]
      return self.complexEntity.entityReference(eSOLID_WITH_DOUBLE_OFFSET_CHAMFER.self)
    }

    public var sub_eSOLID_WITH_ANGLE_BASED_CHAMFER: eSOLID_WITH_ANGLE_BASED_CHAMFER? {	// [8]
      return self.complexEntity.entityReference(eSOLID_WITH_ANGLE_BASED_CHAMFER.self)
    }

    public var sub_eSOLID_WITH_CHAMFERED_EDGES: eSOLID_WITH_CHAMFERED_EDGES? {	// [9]
      return self.complexEntity.entityReference(eSOLID_WITH_CHAMFERED_EDGES.self)
    }

    public var sub_eSOLID_WITH_VARIABLE_RADIUS_EDGE_BLEND: eSOLID_WITH_VARIABLE_RADIUS_EDGE_BLEND? {	// [10]
      return self.complexEntity.entityReference(eSOLID_WITH_VARIABLE_RADIUS_EDGE_BLEND.self)
    }

    public var sub_eTRACK_BLENDED_SOLID_WITH_END_CONDITIONS: eTRACK_BLENDED_SOLID_WITH_END_CONDITIONS? {	// [11]
      return self.complexEntity.entityReference(eTRACK_BLENDED_SOLID_WITH_END_CONDITIONS.self)
    }

    public var sub_eTRACK_BLENDED_SOLID: eTRACK_BLENDED_SOLID? {	// [12]
      return self.complexEntity.entityReference(eTRACK_BLENDED_SOLID.self)
    }

    public var sub_eSOLID_WITH_CONSTANT_RADIUS_EDGE_BLEND: eSOLID_WITH_CONSTANT_RADIUS_EDGE_BLEND? {	// [13]
      return self.complexEntity.entityReference(eSOLID_WITH_CONSTANT_RADIUS_EDGE_BLEND.self)
    }

    public var sub_eEDGE_BLENDED_SOLID: eEDGE_BLENDED_SOLID? {	// [14]
      return self.complexEntity.entityReference(eEDGE_BLENDED_SOLID.self)
    }

    public var sub_eCOMPLEX_SHELLED_SOLID: eCOMPLEX_SHELLED_SOLID? {	// [15]
      return self.complexEntity.entityReference(eCOMPLEX_SHELLED_SOLID.self)
    }

    public var sub_eDOUBLE_OFFSET_SHELLED_SOLID: eDOUBLE_OFFSET_SHELLED_SOLID? {	// [16]
      return self.complexEntity.entityReference(eDOUBLE_OFFSET_SHELLED_SOLID.self)
    }

    public var sub_eSHELLED_SOLID: eSHELLED_SOLID? {	// [17]
      return self.complexEntity.entityReference(eSHELLED_SOLID.self)
    }

    public var sub_eSOLID_WITH_INCOMPLETE_CIRCULAR_PATTERN: eSOLID_WITH_INCOMPLETE_CIRCULAR_PATTERN? {	// [18]
      return self.complexEntity.entityReference(eSOLID_WITH_INCOMPLETE_CIRCULAR_PATTERN.self)
    }

    public var sub_eSOLID_WITH_CIRCULAR_PATTERN: eSOLID_WITH_CIRCULAR_PATTERN? {	// [19]
      return self.complexEntity.entityReference(eSOLID_WITH_CIRCULAR_PATTERN.self)
    }

    public var sub_eSOLID_WITH_INCOMPLETE_RECTANGULAR_PATTERN: eSOLID_WITH_INCOMPLETE_RECTANGULAR_PATTERN? {	// [20]
      return self.complexEntity.entityReference(eSOLID_WITH_INCOMPLETE_RECTANGULAR_PATTERN.self)
    }

    public var sub_eSOLID_WITH_RECTANGULAR_PATTERN: eSOLID_WITH_RECTANGULAR_PATTERN? {	// [21]
      return self.complexEntity.entityReference(eSOLID_WITH_RECTANGULAR_PATTERN.self)
    }

    public var sub_eSOLID_WITH_SHAPE_ELEMENT_PATTERN: eSOLID_WITH_SHAPE_ELEMENT_PATTERN? {	// [22]
      return self.complexEntity.entityReference(eSOLID_WITH_SHAPE_ELEMENT_PATTERN.self)
    }

    public var sub_eSOLID_WITH_GENERAL_PROTRUSION: eSOLID_WITH_GENERAL_PROTRUSION? {	// [23]
      return self.complexEntity.entityReference(eSOLID_WITH_GENERAL_PROTRUSION.self)
    }

    public var sub_eSOLID_WITH_RECTANGULAR_PROTRUSION: eSOLID_WITH_RECTANGULAR_PROTRUSION? {	// [24]
      return self.complexEntity.entityReference(eSOLID_WITH_RECTANGULAR_PROTRUSION.self)
    }

    public var sub_eSOLID_WITH_CIRCULAR_PROTRUSION: eSOLID_WITH_CIRCULAR_PROTRUSION? {	// [25]
      return self.complexEntity.entityReference(eSOLID_WITH_CIRCULAR_PROTRUSION.self)
    }

    public var sub_eSOLID_WITH_PROTRUSION: eSOLID_WITH_PROTRUSION? {	// [26]
      return self.complexEntity.entityReference(eSOLID_WITH_PROTRUSION.self)
    }

    public var sub_eSOLID_WITH_TRAPEZOIDAL_SECTION_SLOT: eSOLID_WITH_TRAPEZOIDAL_SECTION_SLOT? {	// [27]
      return self.complexEntity.entityReference(eSOLID_WITH_TRAPEZOIDAL_SECTION_SLOT.self)
    }

    public var sub_eSOLID_WITH_TEE_SECTION_SLOT: eSOLID_WITH_TEE_SECTION_SLOT? {	// [28]
      return self.complexEntity.entityReference(eSOLID_WITH_TEE_SECTION_SLOT.self)
    }

    public var sub_eSOLID_WITH_STRAIGHT_SLOT: eSOLID_WITH_STRAIGHT_SLOT? {	// [29]
      return self.complexEntity.entityReference(eSOLID_WITH_STRAIGHT_SLOT.self)
    }

    public var sub_eSOLID_WITH_CURVED_SLOT: eSOLID_WITH_CURVED_SLOT? {	// [30]
      return self.complexEntity.entityReference(eSOLID_WITH_CURVED_SLOT.self)
    }

    public var sub_eSOLID_WITH_SLOT: eSOLID_WITH_SLOT? {	// [31]
      return self.complexEntity.entityReference(eSOLID_WITH_SLOT.self)
    }

    public var sub_eSOLID_WITH_GENERAL_POCKET: eSOLID_WITH_GENERAL_POCKET? {	// [32]
      return self.complexEntity.entityReference(eSOLID_WITH_GENERAL_POCKET.self)
    }

    public var sub_eSOLID_WITH_RECTANGULAR_POCKET: eSOLID_WITH_RECTANGULAR_POCKET? {	// [33]
      return self.complexEntity.entityReference(eSOLID_WITH_RECTANGULAR_POCKET.self)
    }

    public var sub_eSOLID_WITH_CIRCULAR_POCKET: eSOLID_WITH_CIRCULAR_POCKET? {	// [34]
      return self.complexEntity.entityReference(eSOLID_WITH_CIRCULAR_POCKET.self)
    }

    public var sub_eSOLID_WITH_POCKET: eSOLID_WITH_POCKET? {	// [35]
      return self.complexEntity.entityReference(eSOLID_WITH_POCKET.self)
    }

    public var sub_eSOLID_WITH_SPHERICAL_BOTTOM_ROUND_HOLE: eSOLID_WITH_SPHERICAL_BOTTOM_ROUND_HOLE? {	// [36]
      return self.complexEntity.entityReference(eSOLID_WITH_SPHERICAL_BOTTOM_ROUND_HOLE.self)
    }

    public var sub_eSOLID_WITH_FLAT_BOTTOM_ROUND_HOLE: eSOLID_WITH_FLAT_BOTTOM_ROUND_HOLE? {	// [37]
      return self.complexEntity.entityReference(eSOLID_WITH_FLAT_BOTTOM_ROUND_HOLE.self)
    }

    public var sub_eSOLID_WITH_STEPPED_ROUND_HOLE_AND_CONICAL_TRANSITIONS: eSOLID_WITH_STEPPED_ROUND_HOLE_AND_CONICAL_TRANSITIONS? {	// [38]
      return self.complexEntity.entityReference(eSOLID_WITH_STEPPED_ROUND_HOLE_AND_CONICAL_TRANSITIONS.self)
    }

    public var sub_eSOLID_WITH_CONICAL_BOTTOM_ROUND_HOLE: eSOLID_WITH_CONICAL_BOTTOM_ROUND_HOLE? {	// [39]
      return self.complexEntity.entityReference(eSOLID_WITH_CONICAL_BOTTOM_ROUND_HOLE.self)
    }

    public var sub_eSOLID_WITH_STEPPED_ROUND_HOLE: eSOLID_WITH_STEPPED_ROUND_HOLE? {	// [40]
      return self.complexEntity.entityReference(eSOLID_WITH_STEPPED_ROUND_HOLE.self)
    }

    public var sub_eSOLID_WITH_HOLE: eSOLID_WITH_HOLE? {	// [41]
      return self.complexEntity.entityReference(eSOLID_WITH_HOLE.self)
    }

    public var sub_eSOLID_WITH_THROUGH_DEPRESSION: eSOLID_WITH_THROUGH_DEPRESSION? {	// [42]
      return self.complexEntity.entityReference(eSOLID_WITH_THROUGH_DEPRESSION.self)
    }

    public var sub_eSOLID_WITH_GROOVE: eSOLID_WITH_GROOVE? {	// [43]
      return self.complexEntity.entityReference(eSOLID_WITH_GROOVE.self)
    }

    public var sub_eSOLID_WITH_DEPRESSION: eSOLID_WITH_DEPRESSION? {	// [44]
      return self.complexEntity.entityReference(eSOLID_WITH_DEPRESSION.self)
    }

    public var sub_eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION: eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION? {	// [45]
      return self.complexEntity.entityReference(eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION.self)
    }


    //MARK: ATTRIBUTES
    // OFFSET_DISTANCE: (2 AMBIGUOUS REFs)

    // OMITTED_INSTANCES: (2 AMBIGUOUS REFs)

    // REFERENCE_POINT: (3 AMBIGUOUS REFs)

    // PROFILE: (2 AMBIGUOUS REFs)

    // DRAFT_ANGLE: (3 AMBIGUOUS REFs)

    // FLOOR_FILLET_RADIUS: (2 AMBIGUOUS REFs)

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_SLOT`` )
    public var SLOT_WIDTH: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eSOLID_WITH_SLOT?.partialEntity._slot_width
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_SLOT?.super_eSOLID_WITH_SLOT.partialEntity else { return }
        partial._slot_width = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_SLOT`` )
    public var END_EXIT_FACES: (SDAI.LIST<SDAI.SET<eFACE_SURFACE>/*[0:nil]*/ >/*[2:2]*/ )?  {
      get {
        return sub_eSOLID_WITH_SLOT?.partialEntity._end_exit_faces
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_SLOT?.super_eSOLID_WITH_SLOT.partialEntity else { return }
        partial._end_exit_faces = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_CIRCULAR_PATTERN`` )
    public var REPLICATE_COUNT: tPOSITIVE_INTEGER?  {
      get {
        return sub_eSOLID_WITH_CIRCULAR_PATTERN?.partialEntity._replicate_count
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_CIRCULAR_PATTERN?.super_eSOLID_WITH_CIRCULAR_PATTERN
          .partialEntity else { return }
        partial._replicate_count = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_VARIABLE_RADIUS_EDGE_BLEND`` )
    public var RADIUS_LIST: (SDAI.LIST<tPOSITIVE_LENGTH_MEASURE>/*[2:nil]*/ )?  {
      get {
        return sub_eSOLID_WITH_VARIABLE_RADIUS_EDGE_BLEND?.partialEntity._radius_list
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_VARIABLE_RADIUS_EDGE_BLEND?.super_eSOLID_WITH_VARIABLE_RADIUS_EDGE_BLEND
          .partialEntity else { return }
        partial._radius_list = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_CIRCULAR_PATTERN`` )
    public var ANGULAR_SPACING: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eSOLID_WITH_CIRCULAR_PATTERN?.partialEntity._angular_spacing
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_CIRCULAR_PATTERN?.super_eSOLID_WITH_CIRCULAR_PATTERN
          .partialEntity else { return }
        partial._angular_spacing = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_POCKET`` )
    public var FLOOR_BLEND_RADIUS: tNON_NEGATIVE_LENGTH_MEASURE?  {
      get {
        return sub_eSOLID_WITH_POCKET?.partialEntity._floor_blend_radius
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_POCKET?.super_eSOLID_WITH_POCKET.partialEntity else { return }
        partial._floor_blend_radius = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_CIRCULAR_PATTERN`` )
    public var RADIAL_ALIGNMENT: SDAI.BOOLEAN?  {
      get {
        return sub_eSOLID_WITH_CIRCULAR_PATTERN?.partialEntity._radial_alignment
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_CIRCULAR_PATTERN?.super_eSOLID_WITH_CIRCULAR_PATTERN
          .partialEntity else { return }
        partial._radial_alignment = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_STEPPED_ROUND_HOLE`` )
    public var SEGMENT_RADII: (SDAI.LIST<tPOSITIVE_LENGTH_MEASURE>/*[1:SEGMENTS]*/ )?  {
      get {
        return sub_eSOLID_WITH_STEPPED_ROUND_HOLE?.partialEntity._segment_radii
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_STEPPED_ROUND_HOLE?.super_eSOLID_WITH_STEPPED_ROUND_HOLE
          .partialEntity else { return }
        partial._segment_radii = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_ANGLE_BASED_CHAMFER`` )
    public var LEFT_OFFSET: SDAI.BOOLEAN?  {
      get {
        return sub_eSOLID_WITH_ANGLE_BASED_CHAMFER?.partialEntity._left_offset
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_ANGLE_BASED_CHAMFER?.super_eSOLID_WITH_ANGLE_BASED_CHAMFER
          .partialEntity else { return }
        partial._left_offset = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_RECTANGULAR_PATTERN`` )
    public var ROW_SPACING: tLENGTH_MEASURE?  {
      get {
        return sub_eSOLID_WITH_RECTANGULAR_PATTERN?.partialEntity._row_spacing
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_RECTANGULAR_PATTERN?.super_eSOLID_WITH_RECTANGULAR_PATTERN
          .partialEntity else { return }
        partial._row_spacing = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_CONICAL_BOTTOM_ROUND_HOLE`` )
    public var TIP_RADIUS: tNON_NEGATIVE_LENGTH_MEASURE?  {
      get {
        return sub_eSOLID_WITH_CONICAL_BOTTOM_ROUND_HOLE?.partialEntity._tip_radius
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_CONICAL_BOTTOM_ROUND_HOLE?.super_eSOLID_WITH_CONICAL_BOTTOM_ROUND_HOLE
          .partialEntity else { return }
        partial._tip_radius = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSHELLED_SOLID`` )
    public var THICKNESS: tLENGTH_MEASURE?  {
      get {
        return sub_eSHELLED_SOLID?.partialEntity._thickness
      }
      set(newValue) {
        guard let partial = sub_eSHELLED_SOLID?.super_eSHELLED_SOLID.partialEntity else { return }
        partial._thickness = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_TEE_SECTION_SLOT`` )
    public var TEE_SECTION_WIDTH: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eSOLID_WITH_TEE_SECTION_SLOT?.partialEntity._tee_section_width
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_TEE_SECTION_SLOT?.super_eSOLID_WITH_TEE_SECTION_SLOT
          .partialEntity else { return }
        partial._tee_section_width = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_FLAT_BOTTOM_ROUND_HOLE`` )
    public var FILLET_RADIUS: tNON_NEGATIVE_LENGTH_MEASURE?  {
      get {
        return sub_eSOLID_WITH_FLAT_BOTTOM_ROUND_HOLE?.partialEntity._fillet_radius
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_FLAT_BOTTOM_ROUND_HOLE?.super_eSOLID_WITH_FLAT_BOTTOM_ROUND_HOLE
          .partialEntity else { return }
        partial._fillet_radius = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_PROTRUSION`` )
    public var PROTRUSION_HEIGHT: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eSOLID_WITH_PROTRUSION?.partialEntity._protrusion_height
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_PROTRUSION?.super_eSOLID_WITH_PROTRUSION.partialEntity
          else { return }
        partial._protrusion_height = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_RECTANGULAR_PATTERN`` )
    public var ROW_COUNT: tPOSITIVE_INTEGER?  {
      get {
        return sub_eSOLID_WITH_RECTANGULAR_PATTERN?.partialEntity._row_count
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_RECTANGULAR_PATTERN?.super_eSOLID_WITH_RECTANGULAR_PATTERN
          .partialEntity else { return }
        partial._row_count = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_RECTANGULAR_POCKET`` )
    public var POCKET_LENGTH: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eSOLID_WITH_RECTANGULAR_POCKET?.partialEntity._pocket_length
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_RECTANGULAR_POCKET?.super_eSOLID_WITH_RECTANGULAR_POCKET
          .partialEntity else { return }
        partial._pocket_length = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_GROOVE`` )
    public var EXTERNAL_GROOVE: SDAI.BOOLEAN?  {
      get {
        return sub_eSOLID_WITH_GROOVE?.partialEntity._external_groove
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_GROOVE?.super_eSOLID_WITH_GROOVE.partialEntity else { return }
        partial._external_groove = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_SHAPE_ELEMENT_PATTERN`` )
    public var REPLICATED_ELEMENT: eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION?  {
      get {
        return sub_eSOLID_WITH_SHAPE_ELEMENT_PATTERN?.partialEntity._replicated_element
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_SHAPE_ELEMENT_PATTERN?.super_eSOLID_WITH_SHAPE_ELEMENT_PATTERN
          .partialEntity else { return }
        partial._replicated_element = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eTRACK_BLENDED_SOLID_WITH_END_CONDITIONS`` )
    public var END_CONDITIONS: (SDAI.LIST<sBLEND_END_CONDITION_SELECT>/*[2:2]*/ )?  {
      get {
        return sub_eTRACK_BLENDED_SOLID_WITH_END_CONDITIONS?.partialEntity._end_conditions
      }
      set(newValue) {
        guard let partial = sub_eTRACK_BLENDED_SOLID_WITH_END_CONDITIONS?.super_eTRACK_BLENDED_SOLID_WITH_END_CONDITIONS
          .partialEntity else { return }
        partial._end_conditions = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_STEPPED_ROUND_HOLE_AND_CONICAL_TRANSITIONS`` )
    public var CONICAL_TRANSITIONS: (SDAI.SET<eCONICAL_STEPPED_HOLE_TRANSITION>/*[1:nil]*/ )?  {
      get {
        return sub_eSOLID_WITH_STEPPED_ROUND_HOLE_AND_CONICAL_TRANSITIONS?.partialEntity._conical_transitions
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_STEPPED_ROUND_HOLE_AND_CONICAL_TRANSITIONS?.super_eSOLID_WITH_STEPPED_ROUND_HOLE_AND_CONICAL_TRANSITIONS
          .partialEntity else { return }
        partial._conical_transitions = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_PROTRUSION`` )
    public var PROTRUSION_DRAFT_ANGLE: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eSOLID_WITH_PROTRUSION?.partialEntity._protrusion_draft_angle
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_PROTRUSION?.super_eSOLID_WITH_PROTRUSION.partialEntity
          else { return }
        partial._protrusion_draft_angle = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_RECTANGULAR_PROTRUSION`` )
    public var PROTRUSION_LENGTH: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eSOLID_WITH_RECTANGULAR_PROTRUSION?.partialEntity._protrusion_length
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_RECTANGULAR_PROTRUSION?.super_eSOLID_WITH_RECTANGULAR_PROTRUSION
          .partialEntity else { return }
        partial._protrusion_length = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_VARIABLE_RADIUS_EDGE_BLEND`` )
    public var POINT_LIST: (SDAI.LIST<ePOINT>/*[2:nil]*/ )?  {
      get {
        return sub_eSOLID_WITH_VARIABLE_RADIUS_EDGE_BLEND?.partialEntity._point_list
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_VARIABLE_RADIUS_EDGE_BLEND?.super_eSOLID_WITH_VARIABLE_RADIUS_EDGE_BLEND
          .partialEntity else { return }
        partial._point_list = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_CIRCULAR_POCKET`` )
    public var POCKET_RADIUS: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eSOLID_WITH_CIRCULAR_POCKET?.partialEntity._pocket_radius
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_CIRCULAR_POCKET?.super_eSOLID_WITH_CIRCULAR_POCKET.partialEntity
          else { return }
        partial._pocket_radius = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCOMPLEX_SHELLED_SOLID`` )
    public var THICKENED_FACE_LIST: (SDAI.LIST<SDAI.SET<eFACE_SURFACE>/*[1:nil]*/ >/*[1:nil]*/ )?  {
      get {
        return sub_eCOMPLEX_SHELLED_SOLID?.partialEntity._thickened_face_list
      }
      set(newValue) {
        guard let partial = sub_eCOMPLEX_SHELLED_SOLID?.super_eCOMPLEX_SHELLED_SOLID.partialEntity
          else { return }
        partial._thickened_face_list = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_RECTANGULAR_POCKET`` )
    public var CORNER_RADIUS: tNON_NEGATIVE_LENGTH_MEASURE?  {
      get {
        return sub_eSOLID_WITH_RECTANGULAR_POCKET?.partialEntity._corner_radius
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_RECTANGULAR_POCKET?.super_eSOLID_WITH_RECTANGULAR_POCKET
          .partialEntity else { return }
        partial._corner_radius = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_CONSTANT_RADIUS_EDGE_BLEND`` )
    public var RADIUS: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eSOLID_WITH_CONSTANT_RADIUS_EDGE_BLEND?.partialEntity._radius
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_CONSTANT_RADIUS_EDGE_BLEND?.super_eSOLID_WITH_CONSTANT_RADIUS_EDGE_BLEND
          .partialEntity else { return }
        partial._radius = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_STRAIGHT_SLOT`` )
    public var SLOT_LENGTH: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eSOLID_WITH_STRAIGHT_SLOT?.partialEntity._slot_length
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_STRAIGHT_SLOT?.super_eSOLID_WITH_STRAIGHT_SLOT.partialEntity
          else { return }
        partial._slot_length = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eMODIFIED_SOLID`` )
    public var RATIONALE: tTEXT {
      get {
        return SDAI.UNWRAP( self.partialEntity._rationale )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._rationale = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_DOUBLE_OFFSET_CHAMFER`` )
    public var RIGHT_OFFSET_DISTANCE: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eSOLID_WITH_DOUBLE_OFFSET_CHAMFER?.partialEntity._right_offset_distance
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_DOUBLE_OFFSET_CHAMFER?.super_eSOLID_WITH_DOUBLE_OFFSET_CHAMFER
          .partialEntity else { return }
        partial._right_offset_distance = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_GROOVE`` )
    public var GROOVE_WIDTH: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eSOLID_WITH_GROOVE?.partialEntity._groove_width
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_GROOVE?.super_eSOLID_WITH_GROOVE.partialEntity else { return }
        partial._groove_width = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_RECTANGULAR_POCKET`` )
    public var POCKET_WIDTH: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eSOLID_WITH_RECTANGULAR_POCKET?.partialEntity._pocket_width
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_RECTANGULAR_POCKET?.super_eSOLID_WITH_RECTANGULAR_POCKET
          .partialEntity else { return }
        partial._pocket_width = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSCULPTURED_SOLID`` )
    public var POSITIVE_SIDE: SDAI.BOOLEAN?  {
      get {
        return sub_eSCULPTURED_SOLID?.partialEntity._positive_side
      }
      set(newValue) {
        guard let partial = sub_eSCULPTURED_SOLID?.super_eSCULPTURED_SOLID.partialEntity else { return }
        partial._positive_side = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eMODIFIED_SOLID`` )
    public var BASE_SOLID: sBASE_SOLID_SELECT {
      get {
        return SDAI.UNWRAP( self.partialEntity._base_solid )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._base_solid = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSHELLED_SOLID`` )
    public var DELETED_FACE_SET: (SDAI.SET<eFACE_SURFACE>/*[1:nil]*/ )?  {
      get {
        return sub_eSHELLED_SOLID?.partialEntity._deleted_face_set
      }
      set(newValue) {
        guard let partial = sub_eSHELLED_SOLID?.super_eSHELLED_SOLID.partialEntity else { return }
        partial._deleted_face_set = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_ANGLE_BASED_CHAMFER`` )
    public var OFFSET_ANGLE: tPOSITIVE_PLANE_ANGLE_MEASURE?  {
      get {
        return sub_eSOLID_WITH_ANGLE_BASED_CHAMFER?.partialEntity._offset_angle
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_ANGLE_BASED_CHAMFER?.super_eSOLID_WITH_ANGLE_BASED_CHAMFER
          .partialEntity else { return }
        partial._offset_angle = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_DOUBLE_OFFSET_CHAMFER`` )
    public var LEFT_OFFSET_DISTANCE: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eSOLID_WITH_DOUBLE_OFFSET_CHAMFER?.partialEntity._left_offset_distance
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_DOUBLE_OFFSET_CHAMFER?.super_eSOLID_WITH_DOUBLE_OFFSET_CHAMFER
          .partialEntity else { return }
        partial._left_offset_distance = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_STEPPED_ROUND_HOLE`` )
    public var SEGMENT_DEPTHS: (SDAI.LIST<tPOSITIVE_LENGTH_MEASURE>/*[1:SEGMENTS]*/ )?  {
      get {
        return sub_eSOLID_WITH_STEPPED_ROUND_HOLE?.partialEntity._segment_depths
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_STEPPED_ROUND_HOLE?.super_eSOLID_WITH_STEPPED_ROUND_HOLE
          .partialEntity else { return }
        partial._segment_depths = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_TEE_SECTION_SLOT`` )
    public var COLLAR_DEPTH: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eSOLID_WITH_TEE_SECTION_SLOT?.partialEntity._collar_depth
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_TEE_SECTION_SLOT?.super_eSOLID_WITH_TEE_SECTION_SLOT
          .partialEntity else { return }
        partial._collar_depth = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_SLOT`` )
    public var CLOSED_ENDS: (SDAI.LIST<SDAI.LOGICAL>/*[2:2]*/ )?  {
      get {
        return sub_eSOLID_WITH_SLOT?.partialEntity._closed_ends
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_SLOT?.super_eSOLID_WITH_SLOT.partialEntity else { return }
        partial._closed_ends = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_GROOVE`` )
    public var GROOVE_RADIUS: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eSOLID_WITH_GROOVE?.partialEntity._groove_radius
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_GROOVE?.super_eSOLID_WITH_GROOVE.partialEntity else { return }
        partial._groove_radius = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_SPHERICAL_BOTTOM_ROUND_HOLE`` )
    public var SPHERE_RADIUS: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eSOLID_WITH_SPHERICAL_BOTTOM_ROUND_HOLE?.partialEntity._sphere_radius
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_SPHERICAL_BOTTOM_ROUND_HOLE?.super_eSOLID_WITH_SPHERICAL_BOTTOM_ROUND_HOLE
          .partialEntity else { return }
        partial._sphere_radius = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_RECTANGULAR_PATTERN`` )
    public var COLUMN_COUNT: tPOSITIVE_INTEGER?  {
      get {
        return sub_eSOLID_WITH_RECTANGULAR_PATTERN?.partialEntity._column_count
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_RECTANGULAR_PATTERN?.super_eSOLID_WITH_RECTANGULAR_PATTERN
          .partialEntity else { return }
        partial._column_count = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_STEPPED_ROUND_HOLE`` )
    public var SEGMENTS: tPOSITIVE_INTEGER?  {
      get {
        return sub_eSOLID_WITH_STEPPED_ROUND_HOLE?.partialEntity._segments
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_STEPPED_ROUND_HOLE?.super_eSOLID_WITH_STEPPED_ROUND_HOLE
          .partialEntity else { return }
        partial._segments = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCOMPLEX_SHELLED_SOLID`` )
    public var THICKNESS_LIST: (SDAI.LIST<tLENGTH_MEASURE>/*[1:nil]*/ )?  {
      get {
        return sub_eCOMPLEX_SHELLED_SOLID?.partialEntity._thickness_list
      }
      set(newValue) {
        guard let partial = sub_eCOMPLEX_SHELLED_SOLID?.super_eCOMPLEX_SHELLED_SOLID.partialEntity
          else { return }
        partial._thickness_list = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_RECTANGULAR_PATTERN`` )
    public var COLUMN_SPACING: tLENGTH_MEASURE?  {
      get {
        return sub_eSOLID_WITH_RECTANGULAR_PATTERN?.partialEntity._column_spacing
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_RECTANGULAR_PATTERN?.super_eSOLID_WITH_RECTANGULAR_PATTERN
          .partialEntity else { return }
        partial._column_spacing = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_RECTANGULAR_PROTRUSION`` )
    public var PROTRUSION_CORNER_RADIUS: tNON_NEGATIVE_LENGTH_MEASURE?  {
      get {
        return sub_eSOLID_WITH_RECTANGULAR_PROTRUSION?.partialEntity._protrusion_corner_radius
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_RECTANGULAR_PROTRUSION?.super_eSOLID_WITH_RECTANGULAR_PROTRUSION
          .partialEntity else { return }
        partial._protrusion_corner_radius = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSCULPTURED_SOLID`` )
    public var SCULPTURING_ELEMENT: sGENERALIZED_SURFACE_SELECT?  {
      get {
        return sub_eSCULPTURED_SOLID?.partialEntity._sculpturing_element
      }
      set(newValue) {
        guard let partial = sub_eSCULPTURED_SOLID?.super_eSCULPTURED_SOLID.partialEntity else { return }
        partial._sculpturing_element = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eDOUBLE_OFFSET_SHELLED_SOLID`` )
    public var THICKNESS2: tLENGTH_MEASURE?  {
      get {
        return sub_eDOUBLE_OFFSET_SHELLED_SOLID?.partialEntity._thickness2
      }
      set(newValue) {
        guard let partial = sub_eDOUBLE_OFFSET_SHELLED_SOLID?.super_eDOUBLE_OFFSET_SHELLED_SOLID
          .partialEntity else { return }
        partial._thickness2 = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_RECTANGULAR_PROTRUSION`` )
    public var PROTRUSION_WIDTH: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eSOLID_WITH_RECTANGULAR_PROTRUSION?.partialEntity._protrusion_width
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_RECTANGULAR_PROTRUSION?.super_eSOLID_WITH_RECTANGULAR_PROTRUSION
          .partialEntity else { return }
        partial._protrusion_width = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_CIRCULAR_PROTRUSION`` )
    public var PROTRUSION_RADIUS: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eSOLID_WITH_CIRCULAR_PROTRUSION?.partialEntity._protrusion_radius
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_CIRCULAR_PROTRUSION?.super_eSOLID_WITH_CIRCULAR_PROTRUSION
          .partialEntity else { return }
        partial._protrusion_radius = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_CURVED_SLOT`` )
    public var SLOT_CENTRELINE: eBOUNDED_CURVE?  {
      get {
        return sub_eSOLID_WITH_CURVED_SLOT?.partialEntity._slot_centreline
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_CURVED_SLOT?.super_eSOLID_WITH_CURVED_SLOT.partialEntity
          else { return }
        partial._slot_centreline = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_CONICAL_BOTTOM_ROUND_HOLE`` )
    public var SEMI_APEX_ANGLE: tPOSITIVE_PLANE_ANGLE_MEASURE?  {
      get {
        return sub_eSOLID_WITH_CONICAL_BOTTOM_ROUND_HOLE?.partialEntity._semi_apex_angle
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_CONICAL_BOTTOM_ROUND_HOLE?.super_eSOLID_WITH_CONICAL_BOTTOM_ROUND_HOLE
          .partialEntity else { return }
        partial._semi_apex_angle = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eEDGE_BLENDED_SOLID`` )
    public var BLENDED_EDGES: (SDAI.LIST_UNIQUE<eEDGE_CURVE>/*[1:nil]*/ )?  {
      get {
        return sub_eEDGE_BLENDED_SOLID?.partialEntity._blended_edges
      }
      set(newValue) {
        guard let partial = sub_eEDGE_BLENDED_SOLID?.super_eEDGE_BLENDED_SOLID.partialEntity else { return }
        partial._blended_edges = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_VARIABLE_RADIUS_EDGE_BLEND`` )
    public var EDGE_FUNCTION_LIST: (SDAI.LIST<nBLEND_RADIUS_VARIATION_TYPE>/*[1:nil]*/ )?  {
      get {
        return sub_eSOLID_WITH_VARIABLE_RADIUS_EDGE_BLEND?.partialEntity._edge_function_list
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_VARIABLE_RADIUS_EDGE_BLEND?.super_eSOLID_WITH_VARIABLE_RADIUS_EDGE_BLEND
          .partialEntity else { return }
        partial._edge_function_list = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_THROUGH_DEPRESSION`` )
    public var EXIT_FACES: (SDAI.SET<eFACE_SURFACE>/*[1:nil]*/ )?  {
      get {
        return sub_eSOLID_WITH_THROUGH_DEPRESSION?.partialEntity._exit_faces
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_THROUGH_DEPRESSION?.super_eSOLID_WITH_THROUGH_DEPRESSION
          .partialEntity else { return }
        partial._exit_faces = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION`` )
    public var PLACING: eAXIS2_PLACEMENT_3D?  {
      get {
        return sub_eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION?.partialEntity._placing
      }
      set(newValue) {
        guard let partial = sub_eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION?.super_eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION
          .partialEntity else { return }
        partial._placing = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eREPRESENTATION_ITEM`` )
    public var NAME: tLABEL {
      get {
        return SDAI.UNWRAP( super_eREPRESENTATION_ITEM.partialEntity._name )
      }
      set(newValue) {
        let partial = super_eREPRESENTATION_ITEM.partialEntity
        partial._name = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT(DYNAMIC)__ attribute
    /// - origin: SUB( ``eSOLID_WITH_DEPRESSION`` )
    public var DEPTH: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        if let resolved = _solid_with_depression._depth__provider(complex: self.complexEntity) {
          let value = resolved._depth__getter(complex: self.complexEntity)
          return value
        }
        else {
          return sub_eSOLID_WITH_DEPRESSION?.partialEntity._depth
        }
      }
      set(newValue) {
        if let _ = _solid_with_depression._depth__provider(complex: self.complexEntity) { return }

        guard let partial = sub_eSOLID_WITH_DEPRESSION?.super_eSOLID_WITH_DEPRESSION.partialEntity
          else { return }
        partial._depth = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUPER( ``eGEOMETRIC_REPRESENTATION_ITEM`` )
    public var DIM: tDIMENSION_COUNT?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"DIM") {
          return cached.value as! tDIMENSION_COUNT? 
        }
        let origin = super_eGEOMETRIC_REPRESENTATION_ITEM
        let value = tDIMENSION_COUNT(origin.partialEntity._dim__getter(SELF: origin))
        updateCache(derivedAttributeName:"DIM", value:value)
        return value
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_modified_solid.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eREPRESENTATION_ITEM.self) else { return nil }
      self.super_eREPRESENTATION_ITEM = super1

      guard let super2 = complexEntity?.entityReference(eGEOMETRIC_REPRESENTATION_ITEM.self) else { return nil }
      self.super_eGEOMETRIC_REPRESENTATION_ITEM = super2

      guard let super3 = complexEntity?.entityReference(eSOLID_MODEL.self) else { return nil }
      self.super_eSOLID_MODEL = super3

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "MODIFIED_SOLID", type: self, explicitAttributeCount: 2)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eREPRESENTATION_ITEM.self)
      entityDef.add(supertype: eGEOMETRIC_REPRESENTATION_ITEM.self)
      entityDef.add(supertype: eSOLID_MODEL.self)
      entityDef.add(supertype: eMODIFIED_SOLID.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "SLOT_WIDTH", keyPath: \eMODIFIED_SOLID.SLOT_WIDTH, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "END_EXIT_FACES", keyPath: \eMODIFIED_SOLID.END_EXIT_FACES, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "REPLICATE_COUNT", keyPath: \eMODIFIED_SOLID.REPLICATE_COUNT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "RADIUS_LIST", keyPath: \eMODIFIED_SOLID.RADIUS_LIST, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "ANGULAR_SPACING", keyPath: \eMODIFIED_SOLID.ANGULAR_SPACING, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "FLOOR_BLEND_RADIUS", keyPath: \eMODIFIED_SOLID.FLOOR_BLEND_RADIUS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "RADIAL_ALIGNMENT", keyPath: \eMODIFIED_SOLID.RADIAL_ALIGNMENT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "SEGMENT_RADII", keyPath: \eMODIFIED_SOLID.SEGMENT_RADII, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "LEFT_OFFSET", keyPath: \eMODIFIED_SOLID.LEFT_OFFSET, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "ROW_SPACING", keyPath: \eMODIFIED_SOLID.ROW_SPACING, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "TIP_RADIUS", keyPath: \eMODIFIED_SOLID.TIP_RADIUS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "THICKNESS", keyPath: \eMODIFIED_SOLID.THICKNESS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "TEE_SECTION_WIDTH", keyPath: \eMODIFIED_SOLID.TEE_SECTION_WIDTH, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "FILLET_RADIUS", keyPath: \eMODIFIED_SOLID.FILLET_RADIUS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "PROTRUSION_HEIGHT", keyPath: \eMODIFIED_SOLID.PROTRUSION_HEIGHT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "ROW_COUNT", keyPath: \eMODIFIED_SOLID.ROW_COUNT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "POCKET_LENGTH", keyPath: \eMODIFIED_SOLID.POCKET_LENGTH, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "EXTERNAL_GROOVE", keyPath: \eMODIFIED_SOLID.EXTERNAL_GROOVE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "REPLICATED_ELEMENT", keyPath: \eMODIFIED_SOLID.REPLICATED_ELEMENT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "END_CONDITIONS", keyPath: \eMODIFIED_SOLID.END_CONDITIONS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "CONICAL_TRANSITIONS", keyPath: \eMODIFIED_SOLID.CONICAL_TRANSITIONS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "PROTRUSION_DRAFT_ANGLE", keyPath: \eMODIFIED_SOLID.PROTRUSION_DRAFT_ANGLE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "PROTRUSION_LENGTH", keyPath: \eMODIFIED_SOLID.PROTRUSION_LENGTH, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "POINT_LIST", keyPath: \eMODIFIED_SOLID.POINT_LIST, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "POCKET_RADIUS", keyPath: \eMODIFIED_SOLID.POCKET_RADIUS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "THICKENED_FACE_LIST", keyPath: \eMODIFIED_SOLID.THICKENED_FACE_LIST, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "CORNER_RADIUS", keyPath: \eMODIFIED_SOLID.CORNER_RADIUS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "RADIUS", keyPath: \eMODIFIED_SOLID.RADIUS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "SLOT_LENGTH", keyPath: \eMODIFIED_SOLID.SLOT_LENGTH, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "RATIONALE", keyPath: \eMODIFIED_SOLID.RATIONALE, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "RIGHT_OFFSET_DISTANCE", keyPath: \eMODIFIED_SOLID.RIGHT_OFFSET_DISTANCE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "GROOVE_WIDTH", keyPath: \eMODIFIED_SOLID.GROOVE_WIDTH, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "POCKET_WIDTH", keyPath: \eMODIFIED_SOLID.POCKET_WIDTH, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "POSITIVE_SIDE", keyPath: \eMODIFIED_SOLID.POSITIVE_SIDE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "BASE_SOLID", keyPath: \eMODIFIED_SOLID.BASE_SOLID, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "DELETED_FACE_SET", keyPath: \eMODIFIED_SOLID.DELETED_FACE_SET, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "OFFSET_ANGLE", keyPath: \eMODIFIED_SOLID.OFFSET_ANGLE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "LEFT_OFFSET_DISTANCE", keyPath: \eMODIFIED_SOLID.LEFT_OFFSET_DISTANCE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "SEGMENT_DEPTHS", keyPath: \eMODIFIED_SOLID.SEGMENT_DEPTHS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "COLLAR_DEPTH", keyPath: \eMODIFIED_SOLID.COLLAR_DEPTH, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "CLOSED_ENDS", keyPath: \eMODIFIED_SOLID.CLOSED_ENDS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "GROOVE_RADIUS", keyPath: \eMODIFIED_SOLID.GROOVE_RADIUS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "SPHERE_RADIUS", keyPath: \eMODIFIED_SOLID.SPHERE_RADIUS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "COLUMN_COUNT", keyPath: \eMODIFIED_SOLID.COLUMN_COUNT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "SEGMENTS", keyPath: \eMODIFIED_SOLID.SEGMENTS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "THICKNESS_LIST", keyPath: \eMODIFIED_SOLID.THICKNESS_LIST, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "COLUMN_SPACING", keyPath: \eMODIFIED_SOLID.COLUMN_SPACING, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "PROTRUSION_CORNER_RADIUS", keyPath: \eMODIFIED_SOLID.PROTRUSION_CORNER_RADIUS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "SCULPTURING_ELEMENT", keyPath: \eMODIFIED_SOLID.SCULPTURING_ELEMENT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "THICKNESS2", keyPath: \eMODIFIED_SOLID.THICKNESS2, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "PROTRUSION_WIDTH", keyPath: \eMODIFIED_SOLID.PROTRUSION_WIDTH, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "PROTRUSION_RADIUS", keyPath: \eMODIFIED_SOLID.PROTRUSION_RADIUS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "SLOT_CENTRELINE", keyPath: \eMODIFIED_SOLID.SLOT_CENTRELINE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "SEMI_APEX_ANGLE", keyPath: \eMODIFIED_SOLID.SEMI_APEX_ANGLE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "BLENDED_EDGES", keyPath: \eMODIFIED_SOLID.BLENDED_EDGES, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "EDGE_FUNCTION_LIST", keyPath: \eMODIFIED_SOLID.EDGE_FUNCTION_LIST, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "EXIT_FACES", keyPath: \eMODIFIED_SOLID.EXIT_FACES, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "PLACING", keyPath: \eMODIFIED_SOLID.PLACING, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "NAME", keyPath: \eMODIFIED_SOLID.NAME, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "DEPTH", keyPath: \eMODIFIED_SOLID.DEPTH, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "DIM", keyPath: \eMODIFIED_SOLID.DIM, 
        kind: .derived, source: .superEntity, mayYieldEntityReference: false)

      return entityDef
    }

  }
}
