/* file: geometric_representation_item.swift 	 generated: Sat Aug 14 13:46:02 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY geometric_representation_item
    SUPERTYPE OF ( 
        ONEOF ( 
            point, 
            direction, 
            vector, 
            placement, 
            cartesian_transformation_operator, 
            curve, 
            surface, 
            edge_curve, 
            face_surface, 
            poly_loop, 
            vertex_point, 
            solid_model, 
            boolean_result, 
            sphere, 
            right_circular_cone, 
            right_circular_cylinder, 
            torus, 
            block, 
            primitive_2d, 
            right_angular_wedge, 
            ellipsoid, 
            faceted_primitive, 
            rectangular_pyramid, 
            cyclide_segment_solid, 
            volume, 
            half_space_solid, 
            shell_based_surface_model, 
            face_based_surface_model, 
            shell_based_wireframe_model, 
            edge_based_wireframe_model, 
            geometric_set, 
            tessellated_item, 
            volume_with_faces, 
            scanned_data_item ) 
        ANDOR
        ONEOF ( 
            annotation_fill_area, 
            curve, 
            point, 
            text_literal ) 
        ANDOR
        ONEOF ( 
            camera_model, 
            curve, 
            direction ) 
        ANDOR
        ONEOF ( 
            curve, 
            externally_defined_hatch_style, 
            externally_defined_tile_style, 
            fill_area_style_hatching, 
            fill_area_style_tile_symbol_with_style, 
            fill_area_style_tiles, 
            one_direction_repeat_factor, 
            point, 
            vector ) 
        ANDOR
        ONEOF ( 
            curve, 
            planar_extent ) 
        ANDOR
        ONEOF ( 
            kinematic_path, 
            placement ) 
        ANDOR
        ONEOF ( 
            rotation_about_direction, 
            su_parameters ) )
    SUBTYPE OF ( representation_item );
    DERIVE
      dim  : dimension_count := dimension_of( SELF );
    WHERE
      wr1: ( SIZEOF( QUERY ( using_rep <* using_representations( SELF ) | ( NOT ( 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.GEOMETRIC_REPRESENTATION_CONTEXT'  IN 
               TYPEOF( using_rep.context_of_items ) ) ) ) ) = 0 );
  END_ENTITY; -- geometric_representation_item (line:16877 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	representation_item
    ATTR:  name,	TYPE: label -- EXPLICIT


  ENTITY(SELF)	geometric_representation_item
    ATTR:  dim,	TYPE: dimension_count -- DERIVED
      := dimension_of( SELF )


  SUB- ENTITY(3)	positioned_sketch
    ATTR:  sketch_basis,	TYPE: sketch_basis_select -- EXPLICIT

    ATTR:  auxiliary_elements,	TYPE: SET [0 : ?] OF auxiliary_geometric_representation_item -- EXPLICIT


  SUB- ENTITY(4)	point_cloud_dataset_with_normals
    ATTR:  normals,	TYPE: LIST [1 : ?] OF LIST [3 : 3] OF REAL -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(5)	point_cloud_dataset_with_colours
    ATTR:  colour_indices,	TYPE: LIST [1 : ?] OF LIST [3 : 3] OF INTEGER -- EXPLICIT


  SUB- ENTITY(6)	point_cloud_dataset_with_intensities
    ATTR:  intensities,	TYPE: LIST [1 : ?] OF REAL -- EXPLICIT


  SUB- ENTITY(7)	point_cloud_dataset
    ATTR:  point_coordinates,	TYPE: LIST [1 : ?] OF LIST [3 : 3] OF REAL -- EXPLICIT


  SUB- ENTITY(8)	point_cloud_superdataset
    ATTR:  pts_per_sublist,	TYPE: INTEGER -- EXPLICIT

    ATTR:  sublists,	TYPE: LIST [2 : ?] OF point_cloud_dataset -- EXPLICIT


  SUB- ENTITY(9)	triangulated_point_cloud_dataset
    ATTR:  points,	TYPE: point_cloud_set_or_superset -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  triangles,	TYPE: LIST [1 : ?] OF LIST [3 : 3] OF INTEGER -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(10)	scan_3d_model
    ATTR:  scanner_info,	TYPE: SET [1 : ?] OF scanner_property -- EXPLICIT

    ATTR:  scanned_points,	TYPE: SET [1 : ?] OF scanned_data_item -- EXPLICIT


  SUB- ENTITY(11)	scanned_data_item
    (no local attributes)

  SUB- ENTITY(12)	geometrical_tolerance_callout
    (no local attributes)

  SUB- ENTITY(13)	datum_feature_callout
    (no local attributes)

  SUB- ENTITY(14)	ordinate_dimension
    (no local attributes)

  SUB- ENTITY(15)	projection_directed_callout
    (no local attributes)

  SUB- ENTITY(16)	leader_directed_dimension
    (no local attributes)

  SUB- ENTITY(17)	leader_directed_callout
    (no local attributes)

  SUB- ENTITY(18)	surface_condition_callout
    (no local attributes)

  SUB- ENTITY(19)	structured_dimension_callout
    (no local attributes)

  SUB- ENTITY(20)	linear_dimension
    (no local attributes)

  SUB- ENTITY(21)	radius_dimension
    (no local attributes)

  SUB- ENTITY(22)	curve_dimension
    (no local attributes)

  SUB- ENTITY(23)	diameter_dimension
    (no local attributes)

  SUB- ENTITY(24)	angular_dimension
    (no local attributes)

  SUB- ENTITY(25)	dimension_curve_directed_callout
    (no local attributes)

  SUB- ENTITY(26)	datum_target_callout
    (no local attributes)

  SUB- ENTITY(27)	draughting_elements
    (no local attributes)

  SUB- ENTITY(28)	dimension_callout
    (no local attributes)

  SUB- ENTITY(29)	draughting_callout
    ATTR:  contents,	TYPE: SET [1 : ?] OF draughting_callout_element -- EXPLICIT
      -- observed by
        ENTITY(1): annotation_placeholder_occurrence,	ATTR: the_callout,	TYPE: draughting_callout


  SUB- ENTITY(30)	elliptic_area
    ATTR:  position,	TYPE: axis2_placement_2d -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  semi_axis_1,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  semi_axis_2,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(31)	circular_area
    ATTR:  centre,	TYPE: cartesian_point -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  radius,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(32)	rectangular_area
    ATTR:  position,	TYPE: axis2_placement_2d -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  x,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  y,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(33)	polygonal_area
    ATTR:  bounds,	TYPE: LIST [3 : ?] OF UNIQUE cartesian_point -- EXPLICIT


  SUB- ENTITY(34)	area_with_outer_boundary
    REDCR: base_curve,	TYPE: composite_curve -- EXPLICIT
      -- OVERRIDING ENTITY: half_space_2d


  SUB- ENTITY(35)	half_space_2d
    ATTR:  base_curve,	TYPE: curve -- EXPLICIT
      -- possibly overriden by
          ENTITY: area_with_outer_boundary,	TYPE: composite_curve

    ATTR:  agreement_flag,	TYPE: BOOLEAN -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(36)	primitive_2d_with_inner_boundary
    REDCR: item_element,	TYPE: compound_inner_area_boundary -- EXPLICIT
      -- OVERRIDING ENTITY: compound_representation_item

    ATTR:  inner_boundary,	TYPE: compound_inner_area_boundary -- DERIVED
      := SELF\compound_representation_item.item_element


  SUB- ENTITY(37)	path_area_with_parameters
    (no local attributes)

  SUB- ENTITY(38)	complex_area
    (no local attributes)

  SUB- ENTITY(39)	primitive_2d
    (no local attributes)

  SUB- ENTITY(40)	fill_area_style_tile_symbol_with_style
    ATTR:  symbol,	TYPE: annotation_symbol_occurrence -- EXPLICIT


  SUB- ENTITY(41)	surface_patch_set
    ATTR:  patches,	TYPE: SET [1 : ?] OF surface_patch -- EXPLICIT


  SUB- ENTITY(42)	fill_area_style_tile_curve_with_style
    ATTR:  styled_curve,	TYPE: annotation_curve_occurrence -- EXPLICIT


  SUB- ENTITY(43)	camera_model_d3_multi_clipping_union
    ATTR:  shape_clipping,	TYPE: SET [2 : ?] OF camera_model_d3_multi_clipping_union_select -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(44)	coordinates_list
    ATTR:  npoints,	TYPE: INTEGER -- EXPLICIT

    ATTR:  position_coords,	TYPE: LIST [1 : ?] OF LIST [3 : 3] OF REAL -- EXPLICIT


  SUB- ENTITY(45)	tessellated_solid
    ATTR:  items,	TYPE: SET [1 : ?] OF tessellated_structured_item -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  geometric_link,	TYPE: OPTIONAL manifold_solid_brep -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(46)	tessellated_shell
    ATTR:  items,	TYPE: SET [1 : ?] OF tessellated_structured_item -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  topological_link,	TYPE: OPTIONAL connected_face_set -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(47)	tessellated_wire
    ATTR:  items,	TYPE: SET [1 : ?] OF tessellated_edge_or_vertex -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  geometric_model_link,	TYPE: OPTIONAL path_or_composite_curve -- EXPLICIT


  SUB- ENTITY(48)	tessellated_geometric_set
    ATTR:  children,	TYPE: SET [1 : ?] OF tessellated_item -- EXPLICIT


  SUB- ENTITY(49)	tessellated_curve_set
    ATTR:  coordinates,	TYPE: coordinates_list -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  line_strips,	TYPE: LIST [1 : ?] OF LIST [2 : ?] OF INTEGER -- EXPLICIT


  SUB- ENTITY(50)	tessellated_point_set
    ATTR:  coordinates,	TYPE: coordinates_list -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  point_list,	TYPE: LIST [1 : ?] OF INTEGER -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(51)	complex_triangulated_surface_set
    ATTR:  pnindex,	TYPE: LIST [0 : ?] OF INTEGER -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  triangle_strips,	TYPE: LIST [0 : ?] OF LIST [3 : ?] OF INTEGER -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  triangle_fans,	TYPE: LIST [0 : ?] OF LIST [3 : ?] OF INTEGER -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(52)	triangulated_surface_set
    ATTR:  pnindex,	TYPE: LIST [0 : ?] OF INTEGER -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  triangles,	TYPE: LIST [1 : ?] OF LIST [3 : 3] OF INTEGER -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(53)	tessellated_surface_set
    ATTR:  coordinates,	TYPE: coordinates_list -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  pnmax,	TYPE: INTEGER -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  normals,	TYPE: LIST [0 : ?] OF LIST [3 : 3] OF REAL -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(54)	tessellated_vertex
    ATTR:  coordinates,	TYPE: coordinates_list -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  topological_link,	TYPE: OPTIONAL vertex_point -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  point_index,	TYPE: INTEGER -- EXPLICIT


  SUB- ENTITY(55)	tessellated_connecting_edge
    ATTR:  smooth,	TYPE: LOGICAL -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  face1,	TYPE: tessellated_face -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  face2,	TYPE: tessellated_face -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  line_strip_face1,	TYPE: LIST [2 : ?] OF INTEGER -- EXPLICIT

    ATTR:  line_strip_face2,	TYPE: LIST [2 : ?] OF INTEGER -- EXPLICIT


  SUB- ENTITY(56)	cubic_tessellated_connecting_edge
    ATTR:  smooth,	TYPE: LOGICAL -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  face1,	TYPE: cubic_bezier_triangulated_face -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  face2,	TYPE: cubic_bezier_triangulated_face -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(57)	cubic_bezier_tessellated_edge
    REDCR: line_strip,	TYPE: LIST [4 : ?] OF INTEGER -- EXPLICIT
      -- OVERRIDING ENTITY: tessellated_edge


  SUB- ENTITY(58)	tessellated_edge
    ATTR:  coordinates,	TYPE: coordinates_list -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  geometric_link,	TYPE: OPTIONAL edge_or_curve -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  line_strip,	TYPE: LIST [2 : ?] OF INTEGER -- EXPLICIT
      -- possibly overriden by
          ENTITY: cubic_bezier_tessellated_edge,	TYPE: LIST [4 : ?] OF INTEGER


  SUB- ENTITY(59)	triangulated_face
    ATTR:  pnindex,	TYPE: LIST [0 : ?] OF INTEGER -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  triangles,	TYPE: LIST [1 : ?] OF LIST [3 : 3] OF INTEGER -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(60)	complex_triangulated_face
    ATTR:  pnindex,	TYPE: LIST [0 : ?] OF INTEGER -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  triangle_strips,	TYPE: LIST [0 : ?] OF LIST [3 : ?] OF INTEGER -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  triangle_fans,	TYPE: LIST [0 : ?] OF LIST [3 : ?] OF INTEGER -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(61)	cubic_bezier_triangulated_face
    ATTR:  ctriangles,	TYPE: LIST [1 : ?] OF LIST [10 : 10] OF INTEGER -- EXPLICIT


  SUB- ENTITY(62)	tessellated_face
    ATTR:  coordinates,	TYPE: coordinates_list -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  pnmax,	TYPE: INTEGER -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  normals,	TYPE: LIST [0 : ?] OF LIST [3 : 3] OF REAL -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  geometric_link,	TYPE: OPTIONAL face_or_surface -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(63)	tessellated_structured_item
    (no local attributes)

  SUB- ENTITY(64)	repositioned_tessellated_item
    ATTR:  location,	TYPE: axis2_placement_3d -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(65)	tessellated_item
    (no local attributes)

  SUB- ENTITY(66)	composite_text_with_blanking_box
    ATTR:  blanking,	TYPE: planar_box -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(67)	composite_text_with_associated_curves
    ATTR:  associated_curves,	TYPE: SET [1 : ?] OF curve -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(68)	composite_text_with_extent
    ATTR:  extent,	TYPE: planar_extent -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(69)	composite_text_with_delineation
    ATTR:  delineation,	TYPE: text_delineation -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(70)	composite_text
    ATTR:  collected_text,	TYPE: SET [2 : ?] OF text_or_character -- EXPLICIT


  SUB- ENTITY(71)	advanced_face
    (no local attributes)

  SUB- ENTITY(72)	face_surface
    ATTR:  face_geometry,	TYPE: surface -- EXPLICIT

    ATTR:  same_sense,	TYPE: BOOLEAN -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(73)	text_literal_with_extent
    ATTR:  extent,	TYPE: planar_extent -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(74)	draughting_text_literal_with_delineation
    (no local attributes)

  SUB- ENTITY(75)	text_literal_with_delineation
    ATTR:  delineation,	TYPE: text_delineation -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(76)	text_literal_with_blanking_box
    ATTR:  blanking,	TYPE: planar_box -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(77)	dimension_text_associativity
    (no local attributes)

  SUB- ENTITY(78)	text_literal_with_associated_curves
    ATTR:  associated_curves,	TYPE: SET [1 : ?] OF curve -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(79)	text_literal
    ATTR:  literal,	TYPE: presentable_text -- EXPLICIT

    ATTR:  placement,	TYPE: axis2_placement -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  alignment,	TYPE: text_alignment -- EXPLICIT

    ATTR:  path,	TYPE: text_path -- EXPLICIT

    ATTR:  font,	TYPE: font_select -- EXPLICIT


  SUB- ENTITY(80)	face_based_surface_model
    ATTR:  fbsm_faces,	TYPE: SET [1 : ?] OF connected_face_set -- EXPLICIT


  SUB- ENTITY(81)	geometric_curve_set
    (no local attributes)

  SUB- ENTITY(82)	geometric_set
    ATTR:  elements,	TYPE: SET [1 : ?] OF geometric_set_select -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(83)	edge_based_wireframe_model
    ATTR:  ebwm_boundary,	TYPE: SET [1 : ?] OF connected_edge_set -- EXPLICIT


  SUB- ENTITY(84)	annotation_fill_area
    ATTR:  boundaries,	TYPE: SET [1 : ?] OF curve -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(85)	conical_stepped_hole_transition
    ATTR:  transition_number,	TYPE: positive_integer -- EXPLICIT

    ATTR:  cone_apex_angle,	TYPE: plane_angle_measure -- EXPLICIT

    ATTR:  cone_base_radius,	TYPE: positive_length_measure -- EXPLICIT


  SUB- ENTITY(86)	defined_character_glyph
    ATTR:  definition,	TYPE: defined_glyph_select -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  placement,	TYPE: axis2_placement -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(87)	right_circular_cone
    ATTR:  position,	TYPE: axis1_placement -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  height,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  radius,	TYPE: length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  semi_angle,	TYPE: plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(88)	camera_model_d2
    ATTR:  view_window,	TYPE: planar_box -- EXPLICIT

    ATTR:  view_window_clipping,	TYPE: BOOLEAN -- EXPLICIT


  SUB- ENTITY(89)	camera_model_d3_with_hlhsr
    ATTR:  hidden_line_surface_removal,	TYPE: BOOLEAN -- EXPLICIT


  SUB- ENTITY(90)	camera_model_d3_multi_clipping
    ATTR:  shape_clipping,	TYPE: SET [1 : ?] OF camera_model_d3_multi_clipping_intersection_select -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(91)	camera_model_with_light_sources
    ATTR:  sources,	TYPE: SET [1 : ?] OF light_source -- EXPLICIT


  SUB- ENTITY(92)	camera_model_d3
    ATTR:  view_reference_system,	TYPE: axis2_placement_3d -- EXPLICIT

    ATTR:  perspective_of_volume,	TYPE: view_volume -- EXPLICIT
      -- observed by
        ENTITY(1): view_volume,	ATTR: camera_usages,	TYPE: SET [1 : ?] OF camera_model_d3


  SUB- ENTITY(93)	camera_model
    (no local attributes)

  SUB- ENTITY(94)	poly_loop
    ATTR:  polygon,	TYPE: LIST [3 : ?] OF UNIQUE cartesian_point -- EXPLICIT


  SUB- ENTITY(95)	annotation_placeholder_occurrence
    REDCR: item,	TYPE: geometric_set -- EXPLICIT
      -- OVERRIDING ENTITY: styled_item

    ATTR:  role,	TYPE: annotation_placeholder_occurrence_role -- EXPLICIT

    ATTR:  line_spacing,	TYPE: positive_length_measure -- EXPLICIT

    ATTR:  the_callout,	TYPE: draughting_callout -- INVERSE
      FOR contents;

    ATTR:  the_draughting_model_item_association_with_placeholders,	TYPE: SET [0 : 1] OF draughting_model_item_association_with_placeholder -- INVERSE
      FOR annotation_placeholder;


  SUB- ENTITY(96)	point_and_vector
    REDCR: item_element,	TYPE: point_and_vector_members -- EXPLICIT
      -- OVERRIDING ENTITY: compound_representation_item


  SUB- ENTITY(97)	rotation_about_direction
    ATTR:  direction_of_axis,	TYPE: direction -- EXPLICIT

    ATTR:  rotation_angle,	TYPE: plane_angle_measure -- EXPLICIT


  SUB- ENTITY(98)	angle_direction_reference
    REDCR: relating_representation_item,	TYPE: orientation_basis_select -- EXPLICIT
      -- OVERRIDING ENTITY: representation_item_relationship

    REDCR: related_representation_item,	TYPE: angle_direction_reference_select -- EXPLICIT
      -- OVERRIDING ENTITY: representation_item_relationship


  SUB- ENTITY(99)	externally_defined_tile_style
    (no local attributes)

  SUB- ENTITY(100)	cyclide_segment_solid
    ATTR:  position,	TYPE: axis2_placement_3d -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  radius1,	TYPE: positive_length_measure -- EXPLICIT

    ATTR:  radius2,	TYPE: positive_length_measure -- EXPLICIT

    ATTR:  cone_angle1,	TYPE: plane_angle_measure -- EXPLICIT

    ATTR:  cone_angle2,	TYPE: plane_angle_measure -- EXPLICIT

    ATTR:  turn_angle,	TYPE: plane_angle_measure -- EXPLICIT


  SUB- ENTITY(101)	geometric_model_element_relationship
    REDCR: relating_representation_item,	TYPE: geometric_representation_item -- EXPLICIT
      -- OVERRIDING ENTITY: representation_item_relationship

    REDCR: related_representation_item,	TYPE: geometric_representation_item -- EXPLICIT
      -- OVERRIDING ENTITY: representation_item_relationship


  SUB- ENTITY(102)	vector
    ATTR:  orientation,	TYPE: direction -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  magnitude,	TYPE: length_measure -- EXPLICIT


  SUB- ENTITY(103)	planar_box
    ATTR:  placement,	TYPE: axis2_placement -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(104)	planar_extent
    ATTR:  size_in_x,	TYPE: length_measure -- EXPLICIT

    ATTR:  size_in_y,	TYPE: length_measure -- EXPLICIT


  SUB- ENTITY(105)	curve_segment_set
    ATTR:  segments,	TYPE: SET [1 : ?] OF composite_curve_segment -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(106)	implicit_intersection_curve
    ATTR:  external_surface,	TYPE: surface -- EXPLICIT


  SUB- ENTITY(107)	implicit_projected_curve
    ATTR:  external_curve,	TYPE: curve -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  projection_direction,	TYPE: direction -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(108)	implicit_model_intersection_curve
    ATTR:  intersected_model,	TYPE: surface_or_solid_model -- EXPLICIT


  SUB- ENTITY(109)	implicit_silhouette_curve
    ATTR:  silhouetted_model,	TYPE: surface_or_solid_model -- EXPLICIT

    ATTR:  view_direction,	TYPE: direction -- EXPLICIT


  SUB- ENTITY(110)	implicit_planar_curve
    ATTR:  using_sketch,	TYPE: positioned_sketch -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  computed_representation,	TYPE: curve -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  curve_plane,	TYPE: plane -- DERIVED
      := get_plane_of_implicit_geometry( using_sketch )


  SUB- ENTITY(111)	implicit_planar_projection_point
    ATTR:  external_point,	TYPE: point -- EXPLICIT

    ATTR:  projection_direction,	TYPE: direction -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(112)	implicit_planar_intersection_point
    ATTR:  external_curve,	TYPE: curve -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(113)	implicit_point_on_plane
    ATTR:  using_sketch,	TYPE: positioned_sketch -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  computed_representation,	TYPE: cartesian_point -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  plane_of_point,	TYPE: plane -- DERIVED
      := get_plane_of_implicit_geometry( using_sketch )


  SUB- ENTITY(114)	auxiliary_geometric_representation_item
    (no local attributes)

  SUB- ENTITY(115)	point_path
    REDCR: item_element,	TYPE: point_path_members -- EXPLICIT
      -- OVERRIDING ENTITY: compound_representation_item


  SUB- ENTITY(116)	light_source_positional
    ATTR:  position,	TYPE: cartesian_point -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  constant_attenuation,	TYPE: REAL -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  distance_attenuation,	TYPE: REAL -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(117)	light_source_directional
    ATTR:  orientation,	TYPE: direction -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(118)	light_source_spot
    ATTR:  position,	TYPE: cartesian_point -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  orientation,	TYPE: direction -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  concentration_exponent,	TYPE: REAL -- EXPLICIT

    ATTR:  constant_attenuation,	TYPE: REAL -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  distance_attenuation,	TYPE: REAL -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  spread_angle,	TYPE: positive_plane_angle_measure -- EXPLICIT


  SUB- ENTITY(119)	light_source_ambient
    (no local attributes)

  SUB- ENTITY(120)	light_source
    ATTR:  light_colour,	TYPE: colour -- EXPLICIT


  SUB- ENTITY(121)	polar_11
    (no local attributes)

  SUB- ENTITY(122)	shell_based_wireframe_model
    ATTR:  sbwm_boundary,	TYPE: SET [1 : ?] OF shell -- EXPLICIT


  SUB- ENTITY(123)	interpolated_configuration_sequence
    ATTR:  segments,	TYPE: LIST [2 : ?] OF interpolated_configuration_segment -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  n_segments,	TYPE: INTEGER -- DERIVED	(AMBIGUOUS/MASKED)
      := SIZEOF( segments )

    ATTR:  closed_interpolation,	TYPE: LOGICAL -- DERIVED
      := segments[n_segments].interpolation <> discontinuous_interpolation_type

    ATTR:  configured_mechanism,	TYPE: mechanism_representation -- DERIVED
      := segments[1].state.represented_mechanism


  SUB- ENTITY(124)	tetrahedron
    (no local attributes)

  SUB- ENTITY(125)	convex_hexahedron
    (no local attributes)

  SUB- ENTITY(126)	faceted_primitive
    ATTR:  points,	TYPE: LIST [4 : ?] OF UNIQUE cartesian_point -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(127)	fill_area_style_hatching
    ATTR:  hatch_line_appearance,	TYPE: curve_style -- EXPLICIT

    ATTR:  start_of_next_hatch_line,	TYPE: one_direction_repeat_factor -- EXPLICIT

    ATTR:  point_of_reference_hatch_line,	TYPE: cartesian_point -- EXPLICIT

    ATTR:  pattern_start,	TYPE: cartesian_point -- EXPLICIT

    ATTR:  hatch_line_angle,	TYPE: plane_angle_measure -- EXPLICIT


  SUB- ENTITY(128)	symbol_target
    ATTR:  placement,	TYPE: axis2_placement -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  x_scale,	TYPE: positive_ratio_measure -- EXPLICIT

    ATTR:  y_scale,	TYPE: positive_ratio_measure -- EXPLICIT


  SUB- ENTITY(129)	volume_with_parametric_boundary
    ATTR:  outer_bound,	TYPE: LIST [6 : 6] OF face -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(130)	volume_with_shell
    ATTR:  outer_bound,	TYPE: closed_shell -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(131)	volume_with_faces
    ATTR:  volume_geometry,	TYPE: volume -- EXPLICIT


  SUB- ENTITY(132)	shell_based_surface_model
    ATTR:  sbsm_boundary,	TYPE: SET [1 : ?] OF shell -- EXPLICIT


  SUB- ENTITY(133)	cylindrical_11
    (no local attributes)

  SUB- ENTITY(134)	sculptured_solid
    ATTR:  sculpturing_element,	TYPE: generalized_surface_select -- EXPLICIT

    ATTR:  positive_side,	TYPE: BOOLEAN -- EXPLICIT


  SUB- ENTITY(135)	solid_with_single_offset_chamfer
    ATTR:  offset_distance,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(136)	solid_with_double_offset_chamfer
    ATTR:  left_offset_distance,	TYPE: positive_length_measure -- EXPLICIT

    ATTR:  right_offset_distance,	TYPE: positive_length_measure -- EXPLICIT


  SUB- ENTITY(137)	solid_with_angle_based_chamfer
    ATTR:  offset_distance,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  left_offset,	TYPE: BOOLEAN -- EXPLICIT

    ATTR:  offset_angle,	TYPE: positive_plane_angle_measure -- EXPLICIT


  SUB- ENTITY(138)	solid_with_chamfered_edges
    (no local attributes)

  SUB- ENTITY(139)	solid_with_variable_radius_edge_blend
    ATTR:  point_list,	TYPE: LIST [2 : ?] OF point -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  radius_list,	TYPE: LIST [2 : ?] OF positive_length_measure -- EXPLICIT

    ATTR:  edge_function_list,	TYPE: LIST [1 : ?] OF blend_radius_variation_type -- EXPLICIT


  SUB- ENTITY(140)	track_blended_solid_with_end_conditions
    ATTR:  end_conditions,	TYPE: LIST [2 : 2] OF blend_end_condition_select -- EXPLICIT


  SUB- ENTITY(141)	track_blended_solid
    (no local attributes)

  SUB- ENTITY(142)	solid_with_constant_radius_edge_blend
    ATTR:  radius,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(143)	edge_blended_solid
    ATTR:  blended_edges,	TYPE: LIST [1 : ?] OF UNIQUE edge_curve -- EXPLICIT


  SUB- ENTITY(144)	complex_shelled_solid
    ATTR:  thickened_face_list,	TYPE: LIST [1 : ?] OF SET [1 : ?] OF face_surface -- EXPLICIT

    ATTR:  thickness_list,	TYPE: LIST [1 : ?] OF length_measure -- EXPLICIT


  SUB- ENTITY(145)	double_offset_shelled_solid
    ATTR:  thickness2,	TYPE: length_measure -- EXPLICIT


  SUB- ENTITY(146)	shelled_solid
    ATTR:  deleted_face_set,	TYPE: SET [1 : ?] OF face_surface -- EXPLICIT

    ATTR:  thickness,	TYPE: length_measure -- EXPLICIT


  SUB- ENTITY(147)	solid_with_incomplete_circular_pattern
    ATTR:  omitted_instances,	TYPE: SET [1 : ?] OF positive_integer -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(148)	solid_with_circular_pattern
    ATTR:  replicate_count,	TYPE: positive_integer -- EXPLICIT

    ATTR:  angular_spacing,	TYPE: plane_angle_measure -- EXPLICIT

    ATTR:  radial_alignment,	TYPE: BOOLEAN -- EXPLICIT

    ATTR:  reference_point,	TYPE: point -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(149)	solid_with_incomplete_rectangular_pattern
    ATTR:  omitted_instances,	TYPE: SET [1 : ?] OF LIST [2 : 2] OF positive_integer -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(150)	solid_with_rectangular_pattern
    ATTR:  row_count,	TYPE: positive_integer -- EXPLICIT

    ATTR:  column_count,	TYPE: positive_integer -- EXPLICIT

    ATTR:  row_spacing,	TYPE: length_measure -- EXPLICIT

    ATTR:  column_spacing,	TYPE: length_measure -- EXPLICIT


  SUB- ENTITY(151)	solid_with_shape_element_pattern
    ATTR:  replicated_element,	TYPE: modified_solid_with_placed_configuration -- EXPLICIT


  SUB- ENTITY(152)	solid_with_general_protrusion
    ATTR:  profile,	TYPE: positioned_sketch -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  reference_point,	TYPE: point -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(153)	solid_with_rectangular_protrusion
    ATTR:  protrusion_length,	TYPE: positive_length_measure -- EXPLICIT

    ATTR:  protrusion_width,	TYPE: positive_length_measure -- EXPLICIT

    ATTR:  protrusion_corner_radius,	TYPE: non_negative_length_measure -- EXPLICIT


  SUB- ENTITY(154)	solid_with_circular_protrusion
    ATTR:  protrusion_radius,	TYPE: positive_length_measure -- EXPLICIT


  SUB- ENTITY(155)	solid_with_protrusion
    ATTR:  protrusion_height,	TYPE: positive_length_measure -- EXPLICIT

    ATTR:  protrusion_draft_angle,	TYPE: plane_angle_measure -- EXPLICIT


  SUB- ENTITY(156)	solid_with_trapezoidal_section_slot
    ATTR:  draft_angle,	TYPE: plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  floor_fillet_radius,	TYPE: non_negative_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(157)	solid_with_tee_section_slot
    ATTR:  tee_section_width,	TYPE: positive_length_measure -- EXPLICIT

    ATTR:  collar_depth,	TYPE: positive_length_measure -- EXPLICIT


  SUB- ENTITY(158)	solid_with_straight_slot
    ATTR:  slot_length,	TYPE: positive_length_measure -- EXPLICIT


  SUB- ENTITY(159)	solid_with_curved_slot
    ATTR:  slot_centreline,	TYPE: bounded_curve -- EXPLICIT


  SUB- ENTITY(160)	solid_with_slot
    ATTR:  slot_width,	TYPE: positive_length_measure -- EXPLICIT

    ATTR:  closed_ends,	TYPE: LIST [2 : 2] OF LOGICAL -- EXPLICIT

    ATTR:  end_exit_faces,	TYPE: LIST [2 : 2] OF SET [0 : ?] OF face_surface -- EXPLICIT


  SUB- ENTITY(161)	solid_with_general_pocket
    ATTR:  profile,	TYPE: positioned_sketch -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  reference_point,	TYPE: point -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(162)	solid_with_rectangular_pocket
    ATTR:  pocket_length,	TYPE: positive_length_measure -- EXPLICIT

    ATTR:  pocket_width,	TYPE: positive_length_measure -- EXPLICIT

    ATTR:  corner_radius,	TYPE: non_negative_length_measure -- EXPLICIT


  SUB- ENTITY(163)	solid_with_circular_pocket
    ATTR:  pocket_radius,	TYPE: positive_length_measure -- EXPLICIT


  SUB- ENTITY(164)	solid_with_pocket
    ATTR:  floor_blend_radius,	TYPE: non_negative_length_measure -- EXPLICIT

    ATTR:  draft_angle,	TYPE: plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(165)	solid_with_spherical_bottom_round_hole
    ATTR:  sphere_radius,	TYPE: positive_length_measure -- EXPLICIT


  SUB- ENTITY(166)	solid_with_flat_bottom_round_hole
    ATTR:  fillet_radius,	TYPE: non_negative_length_measure -- EXPLICIT


  SUB- ENTITY(167)	solid_with_stepped_round_hole_and_conical_transitions
    ATTR:  conical_transitions,	TYPE: SET [1 : ?] OF conical_stepped_hole_transition -- EXPLICIT


  SUB- ENTITY(168)	solid_with_conical_bottom_round_hole
    ATTR:  semi_apex_angle,	TYPE: positive_plane_angle_measure -- EXPLICIT

    ATTR:  tip_radius,	TYPE: non_negative_length_measure -- EXPLICIT


  SUB- ENTITY(169)	solid_with_stepped_round_hole
    ATTR:  segments,	TYPE: positive_integer -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  segment_radii,	TYPE: LIST [1 : segments] OF positive_length_measure -- EXPLICIT

    ATTR:  segment_depths,	TYPE: LIST [1 : segments] OF positive_length_measure -- EXPLICIT

    REDCR: depth,	TYPE: positive_length_measure -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := compute_total_depth( SELF )
      -- OVERRIDING ENTITY: solid_with_depression


  SUB- ENTITY(170)	solid_with_hole
    (no local attributes)

  SUB- ENTITY(171)	solid_with_through_depression
    ATTR:  exit_faces,	TYPE: SET [1 : ?] OF face_surface -- EXPLICIT


  SUB- ENTITY(172)	solid_with_groove
    ATTR:  groove_radius,	TYPE: positive_length_measure -- EXPLICIT

    ATTR:  groove_width,	TYPE: positive_length_measure -- EXPLICIT

    ATTR:  draft_angle,	TYPE: plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  floor_fillet_radius,	TYPE: non_negative_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  external_groove,	TYPE: BOOLEAN -- EXPLICIT


  SUB- ENTITY(173)	solid_with_depression
    ATTR:  depth,	TYPE: positive_length_measure -- EXPLICIT (DYNAMIC)	(AMBIGUOUS/MASKED)
      -- possibly overriden by
          ENTITY: solid_with_stepped_round_hole,	TYPE: positive_length_measure	(as DERIVED)


  SUB- ENTITY(174)	modified_solid_with_placed_configuration
    ATTR:  placing,	TYPE: axis2_placement_3d -- EXPLICIT


  SUB- ENTITY(175)	modified_solid
    ATTR:  rationale,	TYPE: text -- EXPLICIT

    ATTR:  base_solid,	TYPE: base_solid_select -- EXPLICIT


  SUB- ENTITY(176)	faceted_brep
    (no local attributes)

  SUB- ENTITY(177)	brep_with_voids
    ATTR:  voids,	TYPE: SET [1 : ?] OF oriented_closed_shell -- EXPLICIT


  SUB- ENTITY(178)	manifold_solid_brep
    ATTR:  outer,	TYPE: closed_shell -- EXPLICIT


  SUB- ENTITY(179)	revolved_area_solid
    ATTR:  axis,	TYPE: axis1_placement -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  angle,	TYPE: plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  axis_line,	TYPE: line -- DERIVED	(AMBIGUOUS/MASKED)
      := representation_item( '' ) || geometric_representation_item(  ) || curve(  ) || line( axis.location, 
        representation_item( '' ) || geometric_representation_item(  ) || vector( axis.z, 1 ) )


  SUB- ENTITY(180)	ruled_surface_swept_area_solid
    (no local attributes)

  SUB- ENTITY(181)	surface_curve_swept_area_solid
    ATTR:  directrix,	TYPE: curve -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  start_param,	TYPE: REAL -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  end_param,	TYPE: REAL -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  reference_surface,	TYPE: surface -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(182)	extruded_area_solid
    ATTR:  extruded_direction,	TYPE: direction -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  depth,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(183)	swept_area_solid
    ATTR:  swept_area,	TYPE: curve_bounded_surface -- EXPLICIT


  SUB- ENTITY(184)	solid_replica
    ATTR:  parent_solid,	TYPE: solid_model -- EXPLICIT

    ATTR:  transformation,	TYPE: cartesian_transformation_operator_3d -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(185)	thickened_face_solid
    ATTR:  base_element,	TYPE: generalized_surface_select -- EXPLICIT

    ATTR:  offset1,	TYPE: length_measure -- EXPLICIT

    ATTR:  offset2,	TYPE: length_measure -- EXPLICIT


  SUB- ENTITY(186)	swept_disk_solid
    ATTR:  directrix,	TYPE: curve -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  radius,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  inner_radius,	TYPE: OPTIONAL positive_length_measure -- EXPLICIT

    ATTR:  start_param,	TYPE: REAL -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  end_param,	TYPE: REAL -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(187)	csg_primitive_solid_2d
    REDCR: tree_root_expression,	TYPE: bounded_primitive_2d -- EXPLICIT
      -- OVERRIDING ENTITY: csg_solid


  SUB- ENTITY(188)	csg_solid_2d
    REDCR: tree_root_expression,	TYPE: csg_select_2d -- EXPLICIT
      -- OVERRIDING ENTITY: csg_solid


  SUB- ENTITY(189)	csg_solid
    ATTR:  tree_root_expression,	TYPE: csg_select -- EXPLICIT
      -- possibly overriden by
          ENTITY: csg_primitive_solid_2d,	TYPE: bounded_primitive_2d
          ENTITY: csg_solid_2d,	TYPE: csg_select_2d


  SUB- ENTITY(190)	revolved_face_solid_with_trim_conditions
    ATTR:  first_trim_condition,	TYPE: trim_condition_select -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  second_trim_condition,	TYPE: trim_condition_select -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(191)	revolved_face_solid
    ATTR:  axis,	TYPE: axis1_placement -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  angle,	TYPE: plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  axis_line,	TYPE: line -- DERIVED	(AMBIGUOUS/MASKED)
      := representation_item( '' ) || geometric_representation_item(  ) || curve(  ) || line( axis.location, 
        representation_item( '' ) || geometric_representation_item(  ) || vector( axis.z, 1 ) )


  SUB- ENTITY(192)	extruded_face_solid_with_multiple_draft_angles
    ATTR:  drafted_edges,	TYPE: LIST [2 : ?] OF SET [1 : ?] OF edge_curve -- EXPLICIT

    ATTR:  draft_angles,	TYPE: LIST [2 : ?] OF plane_angle_measure -- EXPLICIT


  SUB- ENTITY(193)	extruded_face_solid_with_draft_angle
    ATTR:  draft_angle,	TYPE: plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(194)	extruded_face_solid_with_trim_conditions
    ATTR:  first_trim_condition,	TYPE: trim_condition_select -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  second_trim_condition,	TYPE: trim_condition_select -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  first_trim_intent,	TYPE: trim_intent -- EXPLICIT

    ATTR:  second_trim_intent,	TYPE: trim_intent -- EXPLICIT

    ATTR:  first_offset,	TYPE: non_negative_length_measure -- EXPLICIT

    ATTR:  second_offset,	TYPE: non_negative_length_measure -- EXPLICIT


  SUB- ENTITY(195)	extruded_face_solid
    ATTR:  extruded_direction,	TYPE: direction -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  depth,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(196)	swept_face_solid
    ATTR:  swept_face,	TYPE: face_surface -- EXPLICIT


  SUB- ENTITY(197)	solid_model
    (no local attributes)

  SUB- ENTITY(198)	cartesian_11
    (no local attributes)

  SUB- ENTITY(199)	boolean_result_2d
    REDCR: first_operand,	TYPE: boolean_operand_2d -- EXPLICIT
      -- OVERRIDING ENTITY: boolean_result

    REDCR: second_operand,	TYPE: boolean_operand_2d -- EXPLICIT
      -- OVERRIDING ENTITY: boolean_result


  SUB- ENTITY(200)	boolean_result
    ATTR:  operator,	TYPE: boolean_operator -- EXPLICIT

    ATTR:  first_operand,	TYPE: boolean_operand -- EXPLICIT
      -- possibly overriden by
          ENTITY: boolean_result_2d,	TYPE: boolean_operand_2d

    ATTR:  second_operand,	TYPE: boolean_operand -- EXPLICIT
      -- possibly overriden by
          ENTITY: boolean_result_2d,	TYPE: boolean_operand_2d


  SUB- ENTITY(201)	defined_symbol
    ATTR:  definition,	TYPE: defined_symbol_select -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  target,	TYPE: symbol_target -- EXPLICIT


  SUB- ENTITY(202)	camera_model_d3_multi_clipping_intersection
    ATTR:  shape_clipping,	TYPE: SET [2 : ?] OF camera_model_d3_multi_clipping_intersection_select -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(203)	right_angular_wedge
    ATTR:  position,	TYPE: axis2_placement_3d -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  x,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  y,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  z,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  ltx,	TYPE: length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(204)	pair_representation_relationship
    REDCR: rep_1,	TYPE: kinematic_link_representation -- EXPLICIT
      -- OVERRIDING ENTITY: representation_relationship

    REDCR: rep_2,	TYPE: kinematic_link_representation -- EXPLICIT
      -- OVERRIDING ENTITY: representation_relationship

    REDCR: transformation_operator,	TYPE: kinematic_pair -- EXPLICIT
      -- observed by
        ENTITY(1): kinematic_pair,	ATTR: link_representation_associations,	TYPE: SET [1 : ?] OF
          pair_representation_relationship
      -- OVERRIDING ENTITY: representation_relationship_with_transformation


  SUB- ENTITY(205)	axis1_placement
    ATTR:  axis,	TYPE: OPTIONAL direction -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  z,	TYPE: direction -- DERIVED	(AMBIGUOUS/MASKED)
      := NVL( normalise( axis ), dummy_gri || direction( [0, 0, 1] ) )


  SUB- ENTITY(206)	axis2_placement_3d
    ATTR:  axis,	TYPE: OPTIONAL direction -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  ref_direction,	TYPE: OPTIONAL direction -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  p,	TYPE: LIST [3 : 3] OF direction -- DERIVED	(AMBIGUOUS/MASKED)
      := build_axes( axis, ref_direction )


  SUB- ENTITY(207)	axis2_placement_2d
    ATTR:  ref_direction,	TYPE: OPTIONAL direction -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  p,	TYPE: LIST [2 : 2] OF direction -- DERIVED	(AMBIGUOUS/MASKED)
      := build_2axes( ref_direction )


  SUB- ENTITY(208)	placement
    ATTR:  location,	TYPE: cartesian_point -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(209)	clothoid
    ATTR:  position,	TYPE: axis2_placement -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  clothoid_constant,	TYPE: length_measure -- EXPLICIT


  SUB- ENTITY(210)	hyperbola
    ATTR:  semi_axis,	TYPE: positive_length_measure -- EXPLICIT

    ATTR:  semi_imag_axis,	TYPE: positive_length_measure -- EXPLICIT


  SUB- ENTITY(211)	ellipse
    ATTR:  semi_axis_1,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  semi_axis_2,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(212)	circle
    ATTR:  radius,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(213)	parabola
    ATTR:  focal_dist,	TYPE: length_measure -- EXPLICIT


  SUB- ENTITY(214)	conic
    ATTR:  position,	TYPE: axis2_placement -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(215)	curve_replica
    ATTR:  parent_curve,	TYPE: curve -- EXPLICIT

    ATTR:  transformation,	TYPE: cartesian_transformation_operator -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(216)	bounded_surface_curve
    (no local attributes)

  SUB- ENTITY(217)	seam_curve
    (no local attributes)

  SUB- ENTITY(218)	intersection_curve
    (no local attributes)

  SUB- ENTITY(219)	surface_curve
    ATTR:  curve_3d,	TYPE: curve -- EXPLICIT

    ATTR:  associated_geometry,	TYPE: LIST [1 : 2] OF pcurve_or_surface -- EXPLICIT

    ATTR:  master_representation,	TYPE: preferred_surface_curve_representation -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  basis_surface,	TYPE: SET [1 : 2] OF surface -- DERIVED	(AMBIGUOUS/MASKED)
      := get_basis_surface( SELF )


  SUB- ENTITY(220)	line
    ATTR:  pnt,	TYPE: cartesian_point -- EXPLICIT

    ATTR:  dir,	TYPE: vector -- EXPLICIT


  SUB- ENTITY(221)	circular_involute
    ATTR:  position,	TYPE: axis2_placement -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  base_radius,	TYPE: positive_length_measure -- EXPLICIT


  SUB- ENTITY(222)	bounded_pcurve
    (no local attributes)

  SUB- ENTITY(223)	pcurve
    ATTR:  basis_surface,	TYPE: surface -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  reference_to_curve,	TYPE: definitional_representation -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(224)	offset_curve_2d
    ATTR:  basis_curve,	TYPE: curve -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  distance,	TYPE: length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  self_intersect,	TYPE: LOGICAL -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(225)	offset_curve_3d
    ATTR:  basis_curve,	TYPE: curve -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  distance,	TYPE: length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  self_intersect,	TYPE: LOGICAL -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  ref_direction,	TYPE: direction -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(226)	outer_boundary_curve
    (no local attributes)

  SUB- ENTITY(227)	boundary_curve
    (no local attributes)

  SUB- ENTITY(228)	composite_curve_on_surface
    ATTR:  basis_surface,	TYPE: SET [0 : 2] OF surface -- DERIVED	(AMBIGUOUS/MASKED)
      := get_basis_surface( SELF )


  SUB- ENTITY(229)	composite_curve
    ATTR:  segments,	TYPE: LIST [1 : ?] OF composite_curve_segment -- EXPLICIT	(AMBIGUOUS/MASKED)
      -- observed by
        ENTITY(1): composite_curve_segment,	ATTR: using_curves,	TYPE: BAG [1 : ?] OF composite_curve

    ATTR:  self_intersect,	TYPE: LOGICAL -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  n_segments,	TYPE: INTEGER -- DERIVED	(AMBIGUOUS/MASKED)
      := SIZEOF( segments )

    ATTR:  closed_curve,	TYPE: LOGICAL -- DERIVED	(AMBIGUOUS/MASKED)
      := segments[n_segments].transition <> discontinuous


  SUB- ENTITY(230)	polyline
    ATTR:  points,	TYPE: LIST [2 : ?] OF cartesian_point -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(231)	trimmed_curve
    ATTR:  basis_curve,	TYPE: curve -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  trim_1,	TYPE: SET [1 : 2] OF trimming_select -- EXPLICIT

    ATTR:  trim_2,	TYPE: SET [1 : 2] OF trimming_select -- EXPLICIT

    ATTR:  sense_agreement,	TYPE: BOOLEAN -- EXPLICIT

    ATTR:  master_representation,	TYPE: trimming_preference -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(232)	bezier_curve
    (no local attributes)

  SUB- ENTITY(233)	b_spline_curve_with_knots
    ATTR:  knot_multiplicities,	TYPE: LIST [2 : ?] OF INTEGER -- EXPLICIT

    ATTR:  knots,	TYPE: LIST [2 : ?] OF parameter_value -- EXPLICIT

    ATTR:  knot_spec,	TYPE: knot_type -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  upper_index_on_knots,	TYPE: INTEGER -- DERIVED
      := SIZEOF( knots )


  SUB- ENTITY(234)	rational_b_spline_curve
    ATTR:  weights_data,	TYPE: LIST [2 : ?] OF REAL -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  weights,	TYPE: ARRAY [0 : upper_index_on_control_points] OF REAL -- DERIVED	(AMBIGUOUS/MASKED)
      := list_to_array( weights_data, 0, upper_index_on_control_points )


  SUB- ENTITY(235)	uniform_curve
    (no local attributes)

  SUB- ENTITY(236)	quasi_uniform_curve
    (no local attributes)

  SUB- ENTITY(237)	b_spline_curve
    ATTR:  degree,	TYPE: INTEGER -- EXPLICIT

    ATTR:  control_points_list,	TYPE: LIST [2 : ?] OF cartesian_point -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  curve_form,	TYPE: b_spline_curve_form -- EXPLICIT

    ATTR:  closed_curve,	TYPE: LOGICAL -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  self_intersect,	TYPE: LOGICAL -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  upper_index_on_control_points,	TYPE: INTEGER -- DERIVED
      := SIZEOF( control_points_list ) - 1

    ATTR:  control_points,	TYPE: ARRAY [0 : upper_index_on_control_points] OF cartesian_point -- DERIVED	(AMBIGUOUS/MASKED)
      := list_to_array( control_points_list, 0, upper_index_on_control_points )


  SUB- ENTITY(238)	rational_locally_refined_spline_curve
    ATTR:  weights_data,	TYPE: LIST [2 : ?] OF REAL -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(239)	locally_refined_spline_curve
    ATTR:  b_splines,	TYPE: LIST [2 : ?] OF local_b_spline -- EXPLICIT

    ATTR:  knot_values,	TYPE: spline_knot_values -- EXPLICIT

    ATTR:  control_points_list,	TYPE: LIST [2 : ?] OF cartesian_point -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  scaling_factors,	TYPE: LIST [2 : ?] OF REAL -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  closed_curve,	TYPE: LOGICAL -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  locally_refined_spline_type,	TYPE: locally_refined_spline_type_enum -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  self_intersect,	TYPE: LOGICAL -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  domain,	TYPE: LIST [2 : 2] OF REAL -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(240)	bounded_curve
    (no local attributes)

  SUB- ENTITY(241)	curve
    (no local attributes)

  SUB- ENTITY(242)	gear_pair_with_range
    ATTR:  lower_limit_actual_rotation_1,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT

    ATTR:  upper_limit_actual_rotation_1,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT


  SUB- ENTITY(243)	gear_pair
    ATTR:  radius_first_link,	TYPE: length_measure -- EXPLICIT

    ATTR:  radius_second_link,	TYPE: length_measure -- EXPLICIT

    ATTR:  bevel,	TYPE: plane_angle_measure -- EXPLICIT

    ATTR:  helical_angle,	TYPE: plane_angle_measure -- EXPLICIT

    ATTR:  gear_ratio,	TYPE: REAL -- EXPLICIT


  SUB- ENTITY(244)	linear_flexible_and_pinion_pair
    ATTR:  pinion_radius,	TYPE: length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(245)	rack_and_pinion_pair_with_range
    ATTR:  lower_limit_rack_displacement,	TYPE: OPTIONAL length_measure -- EXPLICIT

    ATTR:  upper_limit_rack_displacement,	TYPE: OPTIONAL length_measure -- EXPLICIT


  SUB- ENTITY(246)	rack_and_pinion_pair
    ATTR:  pinion_radius,	TYPE: length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(247)	screw_pair_with_range
    ATTR:  lower_limit_actual_rotation,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  upper_limit_actual_rotation,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(248)	screw_pair
    ATTR:  pitch,	TYPE: length_measure -- EXPLICIT


  SUB- ENTITY(249)	low_order_kinematic_pair_with_motion_coupling
    (no local attributes)

  SUB- ENTITY(250)	actuated_kinematic_pair
    ATTR:  t_x,	TYPE: OPTIONAL actuated_direction -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  t_y,	TYPE: OPTIONAL actuated_direction -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  t_z,	TYPE: OPTIONAL actuated_direction -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  r_x,	TYPE: OPTIONAL actuated_direction -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  r_y,	TYPE: OPTIONAL actuated_direction -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  r_z,	TYPE: OPTIONAL actuated_direction -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(251)	point_on_planar_curve_pair_with_range
    ATTR:  range_on_pair_curve,	TYPE: trimmed_curve -- EXPLICIT

    ATTR:  lower_limit_yaw,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  upper_limit_yaw,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  lower_limit_pitch,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  upper_limit_pitch,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  lower_limit_roll,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  upper_limit_roll,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(252)	point_on_planar_curve_pair
    ATTR:  pair_curve,	TYPE: curve -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  orientation,	TYPE: BOOLEAN -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(253)	sliding_curve_pair
    (no local attributes)

  SUB- ENTITY(254)	rolling_curve_pair
    (no local attributes)

  SUB- ENTITY(255)	planar_curve_pair_range
    ATTR:  range_on_curve_1,	TYPE: trimmed_curve -- EXPLICIT

    ATTR:  range_on_curve_2,	TYPE: trimmed_curve -- EXPLICIT


  SUB- ENTITY(256)	planar_curve_pair
    ATTR:  curve_1,	TYPE: curve -- EXPLICIT

    ATTR:  curve_2,	TYPE: curve -- EXPLICIT

    ATTR:  orientation,	TYPE: BOOLEAN -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(257)	linear_flexible_and_planar_curve_pair
    ATTR:  pair_curve,	TYPE: curve -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  orientation,	TYPE: BOOLEAN -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(258)	point_on_surface_pair_with_range
    ATTR:  range_on_pair_surface,	TYPE: rectangular_trimmed_surface -- EXPLICIT

    ATTR:  lower_limit_yaw,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  upper_limit_yaw,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  lower_limit_pitch,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  upper_limit_pitch,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  lower_limit_roll,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  upper_limit_roll,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(259)	point_on_surface_pair
    ATTR:  pair_surface,	TYPE: surface -- EXPLICIT


  SUB- ENTITY(260)	surface_pair_with_range
    ATTR:  range_on_surface_1,	TYPE: rectangular_trimmed_surface -- EXPLICIT

    ATTR:  range_on_surface_2,	TYPE: rectangular_trimmed_surface -- EXPLICIT

    ATTR:  lower_limit_actual_rotation,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  upper_limit_actual_rotation,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(261)	rolling_surface_pair
    (no local attributes)

  SUB- ENTITY(262)	sliding_surface_pair
    (no local attributes)

  SUB- ENTITY(263)	surface_pair
    ATTR:  surface_1,	TYPE: surface -- EXPLICIT

    ATTR:  surface_2,	TYPE: surface -- EXPLICIT

    ATTR:  orientation,	TYPE: BOOLEAN -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(264)	high_order_kinematic_pair
    (no local attributes)

  SUB- ENTITY(265)	planar_pair_with_range
    ATTR:  lower_limit_actual_rotation,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  upper_limit_actual_rotation,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  lower_limit_actual_translation_x,	TYPE: OPTIONAL length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  upper_limit_actual_translation_x,	TYPE: OPTIONAL length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  lower_limit_actual_translation_y,	TYPE: OPTIONAL length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  upper_limit_actual_translation_y,	TYPE: OPTIONAL length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(266)	planar_pair
    REDCR: t_x,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := TRUE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: t_y,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := TRUE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: t_z,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_x,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_y,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_z,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := TRUE
      -- OVERRIDING ENTITY: low_order_kinematic_pair


  SUB- ENTITY(267)	revolute_pair_with_range
    ATTR:  lower_limit_actual_rotation,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  upper_limit_actual_rotation,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(268)	revolute_pair
    REDCR: t_x,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: t_y,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: t_z,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_x,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_y,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_z,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := TRUE
      -- OVERRIDING ENTITY: low_order_kinematic_pair


  SUB- ENTITY(269)	cylindrical_pair_with_range
    ATTR:  lower_limit_actual_translation,	TYPE: OPTIONAL length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  upper_limit_actual_translation,	TYPE: OPTIONAL length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  lower_limit_actual_rotation,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  upper_limit_actual_rotation,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(270)	cylindrical_pair
    REDCR: t_x,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: t_y,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: t_z,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := TRUE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_x,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_y,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_z,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := TRUE
      -- OVERRIDING ENTITY: low_order_kinematic_pair


  SUB- ENTITY(271)	spherical_pair_with_range
    ATTR:  lower_limit_yaw,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  upper_limit_yaw,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  lower_limit_pitch,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  upper_limit_pitch,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  lower_limit_roll,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  upper_limit_roll,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(272)	spherical_pair
    REDCR: t_x,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: t_y,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: t_z,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_x,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := TRUE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_y,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := TRUE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_z,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := TRUE
      -- OVERRIDING ENTITY: low_order_kinematic_pair


  SUB- ENTITY(273)	fully_constrained_pair
    REDCR: t_x,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: t_y,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: t_z,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_x,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_y,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_z,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair


  SUB- ENTITY(274)	low_order_kinematic_pair_with_range
    ATTR:  lower_limit_actual_rotation_x,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT

    ATTR:  upper_limit_actual_rotation_x,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT

    ATTR:  lower_limit_actual_rotation_y,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT

    ATTR:  upper_limit_actual_rotation_y,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT

    ATTR:  lower_limit_actual_rotation_z,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT

    ATTR:  upper_limit_actual_rotation_z,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT

    ATTR:  lower_limit_actual_translation_x,	TYPE: OPTIONAL length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  upper_limit_actual_translation_x,	TYPE: OPTIONAL length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  lower_limit_actual_translation_y,	TYPE: OPTIONAL length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  upper_limit_actual_translation_y,	TYPE: OPTIONAL length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  lower_limit_actual_translation_z,	TYPE: OPTIONAL length_measure -- EXPLICIT

    ATTR:  upper_limit_actual_translation_z,	TYPE: OPTIONAL length_measure -- EXPLICIT


  SUB- ENTITY(275)	homokinetic_pair
    (no local attributes)

  SUB- ENTITY(276)	universal_pair_with_range
    ATTR:  lower_limit_first_rotation,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT

    ATTR:  upper_limit_first_rotation,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT

    ATTR:  lower_limit_second_rotation,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT

    ATTR:  upper_limit_second_rotation,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT


  SUB- ENTITY(277)	universal_pair
    ATTR:  input_skew_angle,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT

    REDCR: t_x,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: t_y,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: t_z,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_x,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := TRUE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_y,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_z,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := TRUE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    ATTR:  skew_angle,	TYPE: plane_angle_measure -- DERIVED
      := NVL( input_skew_angle, 0 )


  SUB- ENTITY(278)	spherical_pair_with_pin_and_range
    ATTR:  lower_limit_yaw,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  upper_limit_yaw,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  lower_limit_roll,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  upper_limit_roll,	TYPE: OPTIONAL plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(279)	spherical_pair_with_pin
    REDCR: t_x,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: t_y,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: t_z,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_x,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_y,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := TRUE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_z,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := TRUE
      -- OVERRIDING ENTITY: low_order_kinematic_pair


  SUB- ENTITY(280)	unconstrained_pair
    REDCR: t_x,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := TRUE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: t_y,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := TRUE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: t_z,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := TRUE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_x,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := TRUE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_y,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := TRUE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_z,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := TRUE
      -- OVERRIDING ENTITY: low_order_kinematic_pair


  SUB- ENTITY(281)	prismatic_pair_with_range
    ATTR:  lower_limit_actual_translation,	TYPE: OPTIONAL length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  upper_limit_actual_translation,	TYPE: OPTIONAL length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(282)	prismatic_pair
    REDCR: t_x,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := TRUE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: t_y,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: t_z,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_x,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_y,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair

    REDCR: r_z,	TYPE: BOOLEAN -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := FALSE
      -- OVERRIDING ENTITY: low_order_kinematic_pair


  SUB- ENTITY(283)	low_order_kinematic_pair
    ATTR:  t_x,	TYPE: BOOLEAN -- EXPLICIT (DYNAMIC)	(AMBIGUOUS/MASKED)
      -- possibly overriden by
          ENTITY: planar_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: revolute_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: cylindrical_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: spherical_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: fully_constrained_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: universal_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: unconstrained_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: prismatic_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: spherical_pair_with_pin,	TYPE: BOOLEAN	(as DERIVED)

    ATTR:  t_y,	TYPE: BOOLEAN -- EXPLICIT (DYNAMIC)	(AMBIGUOUS/MASKED)
      -- possibly overriden by
          ENTITY: planar_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: revolute_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: cylindrical_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: spherical_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: fully_constrained_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: universal_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: unconstrained_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: prismatic_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: spherical_pair_with_pin,	TYPE: BOOLEAN	(as DERIVED)

    ATTR:  t_z,	TYPE: BOOLEAN -- EXPLICIT (DYNAMIC)	(AMBIGUOUS/MASKED)
      -- possibly overriden by
          ENTITY: planar_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: revolute_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: cylindrical_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: spherical_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: fully_constrained_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: universal_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: unconstrained_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: prismatic_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: spherical_pair_with_pin,	TYPE: BOOLEAN	(as DERIVED)

    ATTR:  r_x,	TYPE: BOOLEAN -- EXPLICIT (DYNAMIC)	(AMBIGUOUS/MASKED)
      -- possibly overriden by
          ENTITY: planar_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: revolute_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: cylindrical_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: spherical_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: fully_constrained_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: universal_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: unconstrained_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: prismatic_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: spherical_pair_with_pin,	TYPE: BOOLEAN	(as DERIVED)

    ATTR:  r_y,	TYPE: BOOLEAN -- EXPLICIT (DYNAMIC)	(AMBIGUOUS/MASKED)
      -- possibly overriden by
          ENTITY: planar_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: revolute_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: cylindrical_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: spherical_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: fully_constrained_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: universal_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: unconstrained_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: prismatic_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: spherical_pair_with_pin,	TYPE: BOOLEAN	(as DERIVED)

    ATTR:  r_z,	TYPE: BOOLEAN -- EXPLICIT (DYNAMIC)	(AMBIGUOUS/MASKED)
      -- possibly overriden by
          ENTITY: planar_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: revolute_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: cylindrical_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: spherical_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: fully_constrained_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: universal_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: unconstrained_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: prismatic_pair,	TYPE: BOOLEAN	(as DERIVED)
          ENTITY: spherical_pair_with_pin,	TYPE: BOOLEAN	(as DERIVED)


  SUB- ENTITY(284)	kinematic_pair
    ATTR:  joint,	TYPE: kinematic_joint -- EXPLICIT

    REDCR: transform_item_1,	TYPE: rigid_placement -- EXPLICIT
      -- OVERRIDING ENTITY: item_defined_transformation

    REDCR: transform_item_2,	TYPE: rigid_placement -- EXPLICIT
      -- OVERRIDING ENTITY: item_defined_transformation

    ATTR:  associated_link_representations_1,	TYPE: SET [1 : ?] OF kinematic_link_representation -- DERIVED
      := sort_link_associations( link_representation_associations, TRUE )

    ATTR:  associated_link_representations_2,	TYPE: SET [1 : ?] OF kinematic_link_representation -- DERIVED
      := sort_link_associations( link_representation_associations, FALSE )

    REDCR: name,	TYPE: label -- DERIVED (DYNAMIC)
      := SELF\representation_item.name
      -- OVERRIDING ENTITY: item_defined_transformation

    ATTR:  link_representation_associations,	TYPE: SET [1 : ?] OF pair_representation_relationship -- INVERSE
      FOR transformation_operator;


  SUB- ENTITY(285)	cartesian_transformation_operator_3d
    ATTR:  axis3,	TYPE: OPTIONAL direction -- EXPLICIT

    ATTR:  u,	TYPE: LIST [3 : 3] OF direction -- DERIVED	(AMBIGUOUS/MASKED)
      := base_axis( 3, SELF\cartesian_transformation_operator.axis1, SELF\cartesian_transformation_operator.
        axis2, axis3 )


  SUB- ENTITY(286)	cartesian_transformation_operator_2d
    ATTR:  u,	TYPE: LIST [2 : 2] OF direction -- DERIVED	(AMBIGUOUS/MASKED)
      := base_axis( 2, SELF\cartesian_transformation_operator.axis1, SELF\cartesian_transformation_operator.
        axis2, ? )


  SUB- ENTITY(287)	cartesian_transformation_operator
    ATTR:  axis1,	TYPE: OPTIONAL direction -- EXPLICIT

    ATTR:  axis2,	TYPE: OPTIONAL direction -- EXPLICIT

    ATTR:  local_origin,	TYPE: cartesian_point -- EXPLICIT

    ATTR:  scale,	TYPE: OPTIONAL REAL -- EXPLICIT

    ATTR:  scl,	TYPE: REAL -- DERIVED
      := NVL( scale, 1 )


  SUB- ENTITY(288)	symmetry_geometric_constraint
    REDCR: constrained_elements,	TYPE: SET [2 : 2] OF geometric_representation_item -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint

    ATTR:  mirror_element,	TYPE: linear_geometry_constraint_element -- EXPLICIT


  SUB- ENTITY(289)	swept_point_curve_geometric_constraint
    REDCR: constrained_elements,	TYPE: SET [1 : ?] OF curve -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint

    REDCR: reference_elements,	TYPE: SET [1 : 1] OF swept_face_solid -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint


  SUB- ENTITY(290)	coaxial_assembly_constraint
    (no local attributes)

  SUB- ENTITY(291)	coaxial_geometric_constraint
    REDCR: constrained_elements,	TYPE: SET [1 : ?] OF axial_geometry_constraint_element -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint

    REDCR: reference_elements,	TYPE: SET [0 : 1] OF axial_geometry_constraint_element -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint


  SUB- ENTITY(292)	curve_smoothness_geometric_constraint
    REDCR: constrained_elements,	TYPE: SET [1 : 1] OF curve_segment_set -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint

    ATTR:  smoothness,	TYPE: transition_code -- EXPLICIT


  SUB- ENTITY(293)	incidence_assembly_constraint
    (no local attributes)

  SUB- ENTITY(294)	incidence_geometric_constraint
    REDCR: constrained_elements,	TYPE: SET [1 : ?] OF geometric_constraint_element -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint

    REDCR: reference_elements,	TYPE: SET [0 : ?] OF geometric_constraint_element -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint

    ATTR:  near_points,	TYPE: SET [0 : ?] OF near_point_relationship -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(295)	clgc_with_dimension
    ATTR:  length_value,	TYPE: positive_length_measure -- EXPLICIT


  SUB- ENTITY(296)	curve_length_geometric_constraint
    REDCR: constrained_elements,	TYPE: SET [1 : ?] OF bounded_curve -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint


  SUB- ENTITY(297)	surface_smoothness_geometric_constraint
    REDCR: constrained_elements,	TYPE: SET [1 : 1] OF surface_patch_set -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint

    ATTR:  u_smoothness,	TYPE: transition_code -- EXPLICIT

    ATTR:  v_smoothness,	TYPE: transition_code -- EXPLICIT


  SUB- ENTITY(298)	fixed_constituent_assembly_constraint
    ATTR:  fixed_constituent,	TYPE: representative_shape_representation -- EXPLICIT


  SUB- ENTITY(299)	fixed_element_geometric_constraint
    REDCR: constrained_elements,	TYPE: SET [1 : ?] OF geometric_constraint_element -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint


  SUB- ENTITY(300)	angle_assembly_constraint_with_dimension
    (no local attributes)

  SUB- ENTITY(301)	agc_with_dimension
    ATTR:  angle_value,	TYPE: plane_angle_measure -- EXPLICIT


  SUB- ENTITY(302)	angle_geometric_constraint
    REDCR: constrained_elements,	TYPE: SET [1 : ?] OF linear_geometry_constraint_element -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint

    REDCR: reference_elements,	TYPE: SET [0 : 1] OF linear_geometry_constraint_element -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint


  SUB- ENTITY(303)	perpendicular_assembly_constraint
    (no local attributes)

  SUB- ENTITY(304)	perpendicular_geometric_constraint
    REDCR: constrained_elements,	TYPE: SET [1 : ?] OF linear_geometry_constraint_element -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint

    REDCR: reference_elements,	TYPE: SET [0 : 2] OF linear_geometry_constraint_element -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint


  SUB- ENTITY(305)	pogc_with_dimension
    ATTR:  offset_value,	TYPE: positive_length_measure -- EXPLICIT

    ATTR:  offset_direction_constrained,	TYPE: BOOLEAN -- EXPLICIT


  SUB- ENTITY(306)	parallel_offset_geometric_constraint
    REDCR: constrained_elements,	TYPE: SET [1 : ?] OF curve_or_surface_constraint_element -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint

    REDCR: reference_elements,	TYPE: SET [0 : 1] OF curve_or_surface_constraint_element -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint

    ATTR:  offset_type,	TYPE: parallel_offset_type -- EXPLICIT


  SUB- ENTITY(307)	surface_distance_assembly_constraint_with_dimension
    (no local attributes)

  SUB- ENTITY(308)	sdgc_with_dimension
    ATTR:  distance_value,	TYPE: non_negative_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(309)	surface_distance_geometric_constraint
    REDCR: constrained_elements,	TYPE: SET [1 : 2] OF surface -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint

    REDCR: reference_elements,	TYPE: SET [0 : 4] OF point_curve_or_surface_constraint_element -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint

    ATTR:  near_points,	TYPE: SET [0 : 4] OF near_point_relationship -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(310)	parallel_assembly_constraint_with_dimension
    (no local attributes)

  SUB- ENTITY(311)	parallel_assembly_constraint
    (no local attributes)

  SUB- ENTITY(312)	pgc_with_dimension
    ATTR:  distance_value,	TYPE: non_negative_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  negative_direction,	TYPE: BOOLEAN -- EXPLICIT


  SUB- ENTITY(313)	parallel_geometric_constraint
    REDCR: constrained_elements,	TYPE: SET [1 : ?] OF linear_geometry_constraint_element -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint

    REDCR: reference_elements,	TYPE: SET [0 : 1] OF linear_geometry_constraint_element -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint


  SUB- ENTITY(314)	pdgc_with_dimension
    ATTR:  distance_value,	TYPE: non_negative_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(315)	point_distance_geometric_constraint
    REDCR: constrained_elements,	TYPE: SET [1 : ?] OF point -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint

    REDCR: reference_elements,	TYPE: SET [0 : 4] OF point_curve_or_surface_constraint_element -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint


  SUB- ENTITY(316)	rgc_with_dimension
    ATTR:  radius_value,	TYPE: positive_length_measure -- EXPLICIT


  SUB- ENTITY(317)	radius_geometric_constraint
    REDCR: constrained_elements,	TYPE: SET [1 : ?] OF radial_geometry_constraint_element -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint


  SUB- ENTITY(318)	skew_line_distance_geometric_constraint
    REDCR: constrained_elements,	TYPE: SET [1 : 2] OF line -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint

    REDCR: reference_elements,	TYPE: SET [0 : 1] OF line -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint

    ATTR:  distance_value,	TYPE: non_negative_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(319)	cdgc_with_dimension
    ATTR:  distance_value,	TYPE: non_negative_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(320)	curve_distance_geometric_constraint
    REDCR: constrained_elements,	TYPE: SET [1 : 2] OF curve -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint

    REDCR: reference_elements,	TYPE: SET [0 : 4] OF point_curve_or_surface_constraint_element -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint

    ATTR:  near_points,	TYPE: SET [0 : 4] OF near_point_relationship -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(321)	tangent_assembly_constraint
    (no local attributes)

  SUB- ENTITY(322)	tangent_geometric_constraint
    REDCR: constrained_elements,	TYPE: SET [1 : ?] OF curve_or_surface_constraint_element -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint

    REDCR: reference_elements,	TYPE: SET [0 : ?] OF curve_or_surface_constraint_element -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint

    ATTR:  near_points,	TYPE: SET [0 : ?] OF near_point_relationship -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  tangent_contact,	TYPE: tangent_contact_type -- EXPLICIT


  SUB- ENTITY(323)	swept_curve_surface_geometric_constraint
    REDCR: constrained_elements,	TYPE: SET [1 : ?] OF surface -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint

    REDCR: reference_elements,	TYPE: SET [1 : 1] OF swept_surface_or_solid -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint


  SUB- ENTITY(324)	explicit_geometric_constraint
    REDCR: constrained_elements,	TYPE: SET [1 : ?] OF geometric_representation_item -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint

    REDCR: reference_elements,	TYPE: SET [0 : ?] OF geometric_representation_item -- EXPLICIT
      -- OVERRIDING ENTITY: explicit_constraint


  SUB- ENTITY(325)	rectangular_pyramid
    ATTR:  position,	TYPE: axis2_placement_3d -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  xlength,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  ylength,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  height,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(326)	vertex_point
    ATTR:  vertex_geometry,	TYPE: point -- EXPLICIT


  SUB- ENTITY(327)	externally_defined_hatch_style
    (no local attributes)

  SUB- ENTITY(328)	repositioned_neutral_sketch
    ATTR:  map,	TYPE: representation_map -- DERIVED
      := SELF\mapped_item.mapping_source


  SUB- ENTITY(329)	curve_11
    (no local attributes)

  SUB- ENTITY(330)	oriented_surface
    ATTR:  orientation,	TYPE: BOOLEAN -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(331)	surface_replica
    ATTR:  parent_surface,	TYPE: surface -- EXPLICIT

    ATTR:  transformation,	TYPE: cartesian_transformation_operator_3d -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(332)	rectangular_composite_surface
    ATTR:  segments,	TYPE: LIST [1 : ?] OF LIST [1 : ?] OF surface_patch -- EXPLICIT	(AMBIGUOUS/MASKED)
      -- observed by
        ENTITY(1): surface_patch,	ATTR: using_surfaces,	TYPE: BAG [1 : ?] OF rectangular_composite_surface

    ATTR:  n_u,	TYPE: INTEGER -- DERIVED
      := SIZEOF( segments )

    ATTR:  n_v,	TYPE: INTEGER -- DERIVED
      := SIZEOF( segments[1] )


  SUB- ENTITY(333)	b_spline_surface_with_knots
    ATTR:  u_multiplicities,	TYPE: LIST [2 : ?] OF INTEGER -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  v_multiplicities,	TYPE: LIST [2 : ?] OF INTEGER -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  u_knots,	TYPE: LIST [2 : ?] OF parameter_value -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  v_knots,	TYPE: LIST [2 : ?] OF parameter_value -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  knot_spec,	TYPE: knot_type -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  knot_u_upper,	TYPE: INTEGER -- DERIVED	(AMBIGUOUS/MASKED)
      := SIZEOF( u_knots )

    ATTR:  knot_v_upper,	TYPE: INTEGER -- DERIVED	(AMBIGUOUS/MASKED)
      := SIZEOF( v_knots )


  SUB- ENTITY(334)	quasi_uniform_surface
    (no local attributes)

  SUB- ENTITY(335)	uniform_surface
    (no local attributes)

  SUB- ENTITY(336)	bezier_surface
    (no local attributes)

  SUB- ENTITY(337)	rational_b_spline_surface
    ATTR:  weights_data,	TYPE: LIST [2 : ?] OF LIST [2 : ?] OF REAL -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  weights,	TYPE: ARRAY [0 : u_upper] OF ARRAY [0 : v_upper] OF REAL -- DERIVED	(AMBIGUOUS/MASKED)
      := make_array_of_array( weights_data, 0, u_upper, 0, v_upper )


  SUB- ENTITY(338)	b_spline_surface
    ATTR:  u_degree,	TYPE: INTEGER -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  v_degree,	TYPE: INTEGER -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  control_points_list,	TYPE: LIST [2 : ?] OF LIST [2 : ?] OF cartesian_point -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  surface_form,	TYPE: b_spline_surface_form -- EXPLICIT

    ATTR:  u_closed,	TYPE: LOGICAL -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  v_closed,	TYPE: LOGICAL -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  self_intersect,	TYPE: LOGICAL -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  u_upper,	TYPE: INTEGER -- DERIVED	(AMBIGUOUS/MASKED)
      := SIZEOF( control_points_list ) - 1

    ATTR:  v_upper,	TYPE: INTEGER -- DERIVED	(AMBIGUOUS/MASKED)
      := SIZEOF( control_points_list[1] ) - 1

    ATTR:  control_points,	TYPE: ARRAY [0 : u_upper] OF ARRAY [0 : v_upper] OF cartesian_point -- DERIVED	(AMBIGUOUS/MASKED)
      := make_array_of_array( control_points_list, 0, u_upper, 0, v_upper )


  SUB- ENTITY(339)	rectangular_trimmed_surface
    ATTR:  basis_surface,	TYPE: surface -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  u1,	TYPE: parameter_value -- EXPLICIT

    ATTR:  u2,	TYPE: parameter_value -- EXPLICIT

    ATTR:  v1,	TYPE: parameter_value -- EXPLICIT

    ATTR:  v2,	TYPE: parameter_value -- EXPLICIT

    ATTR:  usense,	TYPE: BOOLEAN -- EXPLICIT

    ATTR:  vsense,	TYPE: BOOLEAN -- EXPLICIT


  SUB- ENTITY(340)	curve_bounded_surface
    ATTR:  basis_surface,	TYPE: surface -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  boundaries,	TYPE: SET [1 : ?] OF boundary_curve -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  implicit_outer,	TYPE: BOOLEAN -- EXPLICIT


  SUB- ENTITY(341)	rational_locally_refined_spline_surface
    ATTR:  weights_data,	TYPE: LIST [4 : ?] OF REAL -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(342)	locally_refined_spline_surface
    ATTR:  u_b_splines,	TYPE: LIST [4 : ?] OF local_b_spline -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  v_b_splines,	TYPE: LIST [4 : ?] OF local_b_spline -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  u_knots,	TYPE: spline_knot_values -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  v_knots,	TYPE: spline_knot_values -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  control_points_list,	TYPE: LIST [4 : ?] OF cartesian_point -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  scaling_factors,	TYPE: LIST [4 : ?] OF REAL -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  linearly_independent,	TYPE: linearly_independent_enum -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  locally_refined_spline_type,	TYPE: locally_refined_spline_type_enum -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  self_intersect,	TYPE: LOGICAL -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  u_closed,	TYPE: LOGICAL -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  v_closed,	TYPE: LOGICAL -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  domain,	TYPE: LIST [2 : 2] OF LIST [2 : 2] OF REAL -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(343)	bounded_surface
    (no local attributes)

  SUB- ENTITY(344)	degenerate_toroidal_surface
    ATTR:  select_outer,	TYPE: BOOLEAN -- EXPLICIT


  SUB- ENTITY(345)	toroidal_surface
    ATTR:  major_radius,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  minor_radius,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(346)	spherical_surface
    ATTR:  radius,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(347)	plane
    (no local attributes)

  SUB- ENTITY(348)	cylindrical_surface
    ATTR:  radius,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(349)	conical_surface
    ATTR:  radius,	TYPE: length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  semi_angle,	TYPE: plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(350)	dupin_cyclide_surface
    ATTR:  generalised_major_radius,	TYPE: positive_length_measure -- EXPLICIT

    ATTR:  generalised_minor_radius,	TYPE: positive_length_measure -- EXPLICIT

    ATTR:  skewness,	TYPE: length_measure -- EXPLICIT


  SUB- ENTITY(351)	elementary_surface
    ATTR:  position,	TYPE: axis2_placement_3d -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(352)	surface_of_revolution
    ATTR:  axis_position,	TYPE: axis1_placement -- EXPLICIT

    ATTR:  axis_line,	TYPE: line -- DERIVED	(AMBIGUOUS/MASKED)
      := representation_item( '' ) || geometric_representation_item(  ) || curve(  ) || line( axis_position.
        location, representation_item( '' ) || geometric_representation_item(  ) || vector( axis_position.z, 
        1 ) )


  SUB- ENTITY(353)	surface_of_linear_extrusion
    ATTR:  extrusion_axis,	TYPE: vector -- EXPLICIT


  SUB- ENTITY(354)	surface_curve_swept_surface
    ATTR:  directrix,	TYPE: curve -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  reference_surface,	TYPE: surface -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(355)	fixed_reference_swept_surface
    ATTR:  directrix,	TYPE: curve -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  fixed_reference,	TYPE: direction -- EXPLICIT


  SUB- ENTITY(356)	swept_surface
    ATTR:  swept_curve,	TYPE: curve -- EXPLICIT


  SUB- ENTITY(357)	offset_surface
    ATTR:  basis_surface,	TYPE: surface -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  distance,	TYPE: length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  self_intersect,	TYPE: LOGICAL -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(358)	surface
    (no local attributes)

  SUB- ENTITY(359)	boxed_half_space
    ATTR:  enclosure,	TYPE: box_domain -- EXPLICIT


  SUB- ENTITY(360)	half_space_solid
    ATTR:  base_surface,	TYPE: surface -- EXPLICIT

    ATTR:  agreement_flag,	TYPE: BOOLEAN -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(361)	torus
    ATTR:  position,	TYPE: axis1_placement -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  major_radius,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  minor_radius,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(362)	hexahedron_volume
    ATTR:  points,	TYPE: LIST [8 : 8] OF cartesian_point -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(363)	wedge_volume
    ATTR:  position,	TYPE: axis2_placement_3d -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  x,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  y,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  z,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  ltx,	TYPE: length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(364)	toroidal_volume
    ATTR:  position,	TYPE: axis2_placement_3d -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  major_radius,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  minor_radius,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(365)	rational_locally_refined_spline_volume
    ATTR:  weights_data,	TYPE: LIST [8 : ?] OF REAL -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(366)	locally_refined_spline_volume
    ATTR:  u_b_splines,	TYPE: LIST [8 : ?] OF local_b_spline -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  v_b_splines,	TYPE: LIST [8 : ?] OF local_b_spline -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  w_b_splines,	TYPE: LIST [8 : ?] OF local_b_spline -- EXPLICIT

    ATTR:  u_knots,	TYPE: spline_knot_values -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  v_knots,	TYPE: spline_knot_values -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  w_knots,	TYPE: spline_knot_values -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  control_points_list,	TYPE: LIST [8 : ?] OF cartesian_point -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  scaling_factors,	TYPE: LIST [8 : ?] OF REAL -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  linearly_independent,	TYPE: linearly_independent_enum -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  locally_refined_spline_type,	TYPE: locally_refined_spline_type_enum -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  domain,	TYPE: LIST [3 : 3] OF LIST [2 : 2] OF REAL -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(367)	pyramid_volume
    ATTR:  position,	TYPE: axis2_placement_3d -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  xlength,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  ylength,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  height,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(368)	spherical_volume
    ATTR:  position,	TYPE: axis2_placement_3d -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  radius,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(369)	cylindrical_volume
    ATTR:  position,	TYPE: axis2_placement_3d -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  radius,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  height,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(370)	block_volume
    ATTR:  position,	TYPE: axis2_placement_3d -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  x,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  y,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  z,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(371)	b_spline_volume_with_knots
    ATTR:  u_multiplicities,	TYPE: LIST [2 : ?] OF INTEGER -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  v_multiplicities,	TYPE: LIST [2 : ?] OF INTEGER -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  w_multiplicities,	TYPE: LIST [2 : ?] OF INTEGER -- EXPLICIT

    ATTR:  u_knots,	TYPE: LIST [2 : ?] OF parameter_value -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  v_knots,	TYPE: LIST [2 : ?] OF parameter_value -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  w_knots,	TYPE: LIST [2 : ?] OF parameter_value -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  knot_u_upper,	TYPE: INTEGER -- DERIVED	(AMBIGUOUS/MASKED)
      := SIZEOF( u_knots )

    ATTR:  knot_v_upper,	TYPE: INTEGER -- DERIVED	(AMBIGUOUS/MASKED)
      := SIZEOF( v_knots )

    ATTR:  knot_w_upper,	TYPE: INTEGER -- DERIVED
      := SIZEOF( w_knots )


  SUB- ENTITY(372)	rational_b_spline_volume
    ATTR:  weights_data,	TYPE: LIST [2 : ?] OF LIST [2 : ?] OF LIST [2 : ?] OF REAL -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  weights,	TYPE: ARRAY [0 : u_upper] OF ARRAY [0 : v_upper] OF ARRAY [0 : w_upper] OF REAL -- DERIVED	(AMBIGUOUS/MASKED)
      := make_array_of_array_of_array( weights_data, 0, u_upper, 0, v_upper, 0, w_upper )


  SUB- ENTITY(373)	quasi_uniform_volume
    (no local attributes)

  SUB- ENTITY(374)	uniform_volume
    (no local attributes)

  SUB- ENTITY(375)	bezier_volume
    (no local attributes)

  SUB- ENTITY(376)	b_spline_volume
    ATTR:  u_degree,	TYPE: INTEGER -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  v_degree,	TYPE: INTEGER -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  w_degree,	TYPE: INTEGER -- EXPLICIT

    ATTR:  control_points_list,	TYPE: LIST [2 : ?] OF LIST [2 : ?] OF LIST [2 : ?] OF cartesian_point -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  u_upper,	TYPE: INTEGER -- DERIVED	(AMBIGUOUS/MASKED)
      := SIZEOF( control_points_list ) - 1

    ATTR:  v_upper,	TYPE: INTEGER -- DERIVED	(AMBIGUOUS/MASKED)
      := SIZEOF( control_points_list[1] ) - 1

    ATTR:  w_upper,	TYPE: INTEGER -- DERIVED
      := SIZEOF( control_points_list[1][1] ) - 1

    ATTR:  control_points,	TYPE: ARRAY [0 : u_upper] OF ARRAY [0 : v_upper] OF ARRAY [0 : w_upper] OF cartesian_point -- DERIVED	(AMBIGUOUS/MASKED)
      := make_array_of_array_of_array( control_points_list, 0, u_upper, 0, v_upper, 0, w_upper )


  SUB- ENTITY(377)	eccentric_conical_volume
    ATTR:  position,	TYPE: axis2_placement_3d -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  semi_axis_1,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  semi_axis_2,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  height,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  x_offset,	TYPE: length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  y_offset,	TYPE: length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  ratio,	TYPE: REAL -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(378)	ellipsoid_volume
    ATTR:  position,	TYPE: axis2_placement_3d -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  semi_axis_1,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  semi_axis_2,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  semi_axis_3,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(379)	tetrahedron_volume
    ATTR:  point_1,	TYPE: cartesian_point -- EXPLICIT

    ATTR:  point_2,	TYPE: cartesian_point -- EXPLICIT

    ATTR:  point_3,	TYPE: cartesian_point -- EXPLICIT

    ATTR:  point_4,	TYPE: cartesian_point -- EXPLICIT


  SUB- ENTITY(380)	volume
    (no local attributes)

  SUB- ENTITY(381)	point_array
    REDCR: item_element,	TYPE: point_array_members -- EXPLICIT
      -- OVERRIDING ENTITY: compound_representation_item


  SUB- ENTITY(382)	ellipsoid
    ATTR:  position,	TYPE: axis2_placement_3d -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  semi_axis_1,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  semi_axis_2,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  semi_axis_3,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(383)	right_circular_cylinder
    ATTR:  position,	TYPE: axis1_placement -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  height,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  radius,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(384)	two_direction_repeat_factor
    ATTR:  second_repeat_factor,	TYPE: vector -- EXPLICIT


  SUB- ENTITY(385)	one_direction_repeat_factor
    ATTR:  repeat_factor,	TYPE: vector -- EXPLICIT


  SUB- ENTITY(386)	annotation_plane
    ATTR:  elements,	TYPE: OPTIONAL SET [1 : ?] OF annotation_plane_element -- EXPLICIT	(AMBIGUOUS/MASKED)

    REDCR: item,	TYPE: plane_or_planar_box -- EXPLICIT
      -- OVERRIDING ENTITY: styled_item


  SUB- ENTITY(387)	evaluated_degenerate_pcurve
    ATTR:  equivalent_point,	TYPE: cartesian_point -- EXPLICIT


  SUB- ENTITY(388)	degenerate_pcurve
    ATTR:  basis_surface,	TYPE: surface -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  reference_to_curve,	TYPE: definitional_representation -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(389)	point_on_face_surface
    ATTR:  basis_face_surface,	TYPE: face_surface -- EXPLICIT

    REDCR: basis_surface,	TYPE: surface -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := SELF.basis_face_surface.face_geometry
      -- OVERRIDING ENTITY: point_on_surface


  SUB- ENTITY(390)	point_on_surface
    ATTR:  basis_surface,	TYPE: surface -- EXPLICIT (DYNAMIC)	(AMBIGUOUS/MASKED)
      -- possibly overriden by
          ENTITY: point_on_face_surface,	TYPE: surface	(as DERIVED)

    ATTR:  point_parameter_u,	TYPE: parameter_value -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  point_parameter_v,	TYPE: parameter_value -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(391)	spherical_point
    ATTR:  r,	TYPE: length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  theta,	TYPE: plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  phi,	TYPE: plane_angle_measure -- EXPLICIT

    REDCR: coordinates,	TYPE: LIST [3 : 3] OF length_measure -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := [r * SIN( theta ) * COS( phi ), r * SIN( theta ) * SIN( phi ), r * COS( theta )]
      -- OVERRIDING ENTITY: cartesian_point


  SUB- ENTITY(392)	cylindrical_point
    ATTR:  r,	TYPE: length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  theta,	TYPE: plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  z,	TYPE: length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    REDCR: coordinates,	TYPE: LIST [3 : 3] OF length_measure -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := [r * COS( theta ), r * SIN( theta ), z]
      -- OVERRIDING ENTITY: cartesian_point


  SUB- ENTITY(393)	polar_point
    ATTR:  r,	TYPE: length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  theta,	TYPE: plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    REDCR: coordinates,	TYPE: LIST [2 : 2] OF length_measure -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := [r * COS( theta ), r * SIN( theta )]
      -- OVERRIDING ENTITY: cartesian_point


  SUB- ENTITY(394)	cartesian_point
    ATTR:  coordinates,	TYPE: LIST [1 : 3] OF length_measure -- EXPLICIT (DYNAMIC)	(AMBIGUOUS/MASKED)
      -- possibly overriden by
          ENTITY: spherical_point,	TYPE: LIST [3 : 3] OF length_measure	(as DERIVED)
          ENTITY: cylindrical_point,	TYPE: LIST [3 : 3] OF length_measure	(as DERIVED)
          ENTITY: polar_point,	TYPE: LIST [2 : 2] OF length_measure	(as DERIVED)


  SUB- ENTITY(395)	point_in_volume
    ATTR:  basis_volume,	TYPE: volume -- EXPLICIT

    ATTR:  point_parameter_u,	TYPE: parameter_value -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  point_parameter_v,	TYPE: parameter_value -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  point_parameter_w,	TYPE: parameter_value -- EXPLICIT


  SUB- ENTITY(396)	point_on_edge_curve
    ATTR:  basis_edge_curve,	TYPE: edge_curve -- EXPLICIT

    REDCR: basis_curve,	TYPE: curve -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := SELF.basis_edge_curve.edge_geometry
      -- OVERRIDING ENTITY: point_on_curve


  SUB- ENTITY(397)	point_on_curve
    ATTR:  basis_curve,	TYPE: curve -- EXPLICIT (DYNAMIC)	(AMBIGUOUS/MASKED)
      -- possibly overriden by
          ENTITY: point_on_edge_curve,	TYPE: curve	(as DERIVED)

    ATTR:  point_parameter,	TYPE: parameter_value -- EXPLICIT


  SUB- ENTITY(398)	point_replica
    ATTR:  parent_pt,	TYPE: point -- EXPLICIT

    ATTR:  transformation,	TYPE: cartesian_transformation_operator -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(399)	point
    (no local attributes)

  SUB- ENTITY(400)	spherical_pair_value
    REDCR: applies_to_pair,	TYPE: spherical_pair_select -- EXPLICIT
      -- OVERRIDING ENTITY: pair_value

    ATTR:  input_orientation,	TYPE: spatial_rotation -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  actual_orientation,	TYPE: ypr_rotation -- DERIVED	(AMBIGUOUS/MASKED)
      := convert_spatial_to_ypr_rotation( SELF\pair_value.applies_to_pair, input_orientation )


  SUB- ENTITY(401)	revolute_pair_value
    REDCR: applies_to_pair,	TYPE: revolute_pair -- EXPLICIT
      -- OVERRIDING ENTITY: pair_value

    ATTR:  actual_rotation,	TYPE: plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(402)	cylindrical_pair_value
    REDCR: applies_to_pair,	TYPE: cylindrical_pair -- EXPLICIT
      -- OVERRIDING ENTITY: pair_value

    ATTR:  actual_translation,	TYPE: length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  actual_rotation,	TYPE: plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(403)	sliding_surface_pair_value
    REDCR: applies_to_pair,	TYPE: sliding_surface_pair -- EXPLICIT
      -- OVERRIDING ENTITY: pair_value

    ATTR:  actual_point_on_surface_1,	TYPE: point_on_surface -- EXPLICIT

    ATTR:  actual_point_on_surface_2,	TYPE: point_on_surface -- EXPLICIT

    ATTR:  actual_rotation,	TYPE: plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(404)	rolling_surface_pair_value
    REDCR: applies_to_pair,	TYPE: rolling_surface_pair -- EXPLICIT
      -- OVERRIDING ENTITY: pair_value

    ATTR:  actual_point_on_surface,	TYPE: point_on_surface -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  actual_rotation,	TYPE: plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(405)	universal_pair_value
    REDCR: applies_to_pair,	TYPE: universal_pair -- EXPLICIT
      -- OVERRIDING ENTITY: pair_value

    ATTR:  first_rotation_angle,	TYPE: plane_angle_measure -- EXPLICIT

    ATTR:  second_rotation_angle,	TYPE: plane_angle_measure -- EXPLICIT


  SUB- ENTITY(406)	low_order_kinematic_pair_value
    REDCR: applies_to_pair,	TYPE: low_order_kinematic_pair -- EXPLICIT
      -- OVERRIDING ENTITY: pair_value

    ATTR:  actual_translation_x,	TYPE: length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  actual_translation_y,	TYPE: length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  actual_translation_z,	TYPE: length_measure -- EXPLICIT

    ATTR:  actual_rotation_x,	TYPE: plane_angle_measure -- EXPLICIT

    ATTR:  actual_rotation_y,	TYPE: plane_angle_measure -- EXPLICIT

    ATTR:  actual_rotation_z,	TYPE: plane_angle_measure -- EXPLICIT


  SUB- ENTITY(407)	prismatic_pair_value
    REDCR: applies_to_pair,	TYPE: prismatic_pair -- EXPLICIT
      -- OVERRIDING ENTITY: pair_value

    ATTR:  actual_translation,	TYPE: length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(408)	gear_pair_value
    REDCR: applies_to_pair,	TYPE: gear_pair -- EXPLICIT
      -- OVERRIDING ENTITY: pair_value

    ATTR:  actual_rotation_1,	TYPE: plane_angle_measure -- EXPLICIT

    ATTR:  actual_rotation_2,	TYPE: plane_angle_measure -- DERIVED
      := ( -actual_rotation_1 ) * SELF\pair_value.applies_to_pair\gear_pair.gear_ratio


  SUB- ENTITY(409)	rolling_curve_pair_value
    REDCR: applies_to_pair,	TYPE: rolling_curve_pair -- EXPLICIT
      -- OVERRIDING ENTITY: pair_value

    ATTR:  actual_point_on_curve_1,	TYPE: point_on_curve -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(410)	sliding_curve_pair_value
    REDCR: applies_to_pair,	TYPE: sliding_curve_pair -- EXPLICIT
      -- OVERRIDING ENTITY: pair_value

    ATTR:  actual_point_on_curve_1,	TYPE: point_on_curve -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  actual_point_on_curve_2,	TYPE: point_on_curve -- EXPLICIT


  SUB- ENTITY(411)	screw_pair_value
    REDCR: applies_to_pair,	TYPE: screw_pair -- EXPLICIT
      -- OVERRIDING ENTITY: pair_value

    ATTR:  actual_rotation,	TYPE: plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  actual_translation,	TYPE: length_measure -- DERIVED	(AMBIGUOUS/MASKED)
      := ( SELF\pair_value.applies_to_pair\screw_pair.pitch * plane_angle_for_pair_in_radian( SELF\pair_value
        .applies_to_pair, actual_rotation ) ) / ( 2 * PI )


  SUB- ENTITY(412)	unconstrained_pair_value
    REDCR: applies_to_pair,	TYPE: unconstrained_pair -- EXPLICIT
      -- OVERRIDING ENTITY: pair_value

    ATTR:  actual_placement,	TYPE: axis2_placement_3d -- EXPLICIT


  SUB- ENTITY(413)	planar_pair_value
    REDCR: applies_to_pair,	TYPE: planar_pair -- EXPLICIT
      -- OVERRIDING ENTITY: pair_value

    ATTR:  actual_rotation,	TYPE: plane_angle_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  actual_translation_x,	TYPE: length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  actual_translation_y,	TYPE: length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(414)	rack_and_pinion_pair_value
    REDCR: applies_to_pair,	TYPE: rack_and_pinion_pair -- EXPLICIT
      -- OVERRIDING ENTITY: pair_value

    ATTR:  actual_displacement,	TYPE: length_measure -- EXPLICIT

    ATTR:  actual_rotation,	TYPE: plane_angle_measure -- DERIVED	(AMBIGUOUS/MASKED)
      := 0


  SUB- ENTITY(415)	point_on_surface_pair_value
    REDCR: applies_to_pair,	TYPE: point_on_surface_pair -- EXPLICIT
      -- OVERRIDING ENTITY: pair_value

    ATTR:  actual_point_on_surface,	TYPE: point_on_surface -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  input_orientation,	TYPE: spatial_rotation -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  actual_orientation,	TYPE: ypr_rotation -- DERIVED	(AMBIGUOUS/MASKED)
      := convert_spatial_to_ypr_rotation( SELF\pair_value.applies_to_pair, input_orientation )


  SUB- ENTITY(416)	point_on_planar_curve_pair_value
    REDCR: applies_to_pair,	TYPE: point_on_planar_curve_pair -- EXPLICIT
      -- OVERRIDING ENTITY: pair_value

    ATTR:  actual_point_on_curve,	TYPE: point_on_curve -- EXPLICIT

    ATTR:  input_orientation,	TYPE: spatial_rotation -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  actual_orientation,	TYPE: ypr_rotation -- DERIVED	(AMBIGUOUS/MASKED)
      := convert_spatial_to_ypr_rotation( SELF\pair_value.applies_to_pair, input_orientation )


  SUB- ENTITY(417)	pair_value
    ATTR:  applies_to_pair,	TYPE: kinematic_pair -- EXPLICIT
      -- possibly overriden by
          ENTITY: spherical_pair_value,	TYPE: spherical_pair_select
          ENTITY: revolute_pair_value,	TYPE: revolute_pair
          ENTITY: cylindrical_pair_value,	TYPE: cylindrical_pair
          ENTITY: sliding_surface_pair_value,	TYPE: sliding_surface_pair
          ENTITY: rolling_surface_pair_value,	TYPE: rolling_surface_pair
          ENTITY: universal_pair_value,	TYPE: universal_pair
          ENTITY: low_order_kinematic_pair_value,	TYPE: low_order_kinematic_pair
          ENTITY: prismatic_pair_value,	TYPE: prismatic_pair
          ENTITY: gear_pair_value,	TYPE: gear_pair
          ENTITY: rolling_curve_pair_value,	TYPE: rolling_curve_pair
          ENTITY: sliding_curve_pair_value,	TYPE: sliding_curve_pair
          ENTITY: screw_pair_value,	TYPE: screw_pair
          ENTITY: unconstrained_pair_value,	TYPE: unconstrained_pair
          ENTITY: planar_pair_value,	TYPE: planar_pair
          ENTITY: point_on_planar_curve_pair_value,	TYPE: point_on_planar_curve_pair
          ENTITY: point_on_surface_pair_value,	TYPE: point_on_surface_pair
          ENTITY: rack_and_pinion_pair_value,	TYPE: rack_and_pinion_pair


  SUB- ENTITY(418)	direction
    ATTR:  direction_ratios,	TYPE: LIST [2 : 3] OF REAL -- EXPLICIT


  SUB- ENTITY(419)	procedural_solid_representation_sequence
    (no local attributes)

  SUB- ENTITY(420)	procedural_shape_representation_sequence
    REDCR: elements,	TYPE: LIST [1 : ?] OF shape_representation_item -- EXPLICIT	(AMBIGUOUS/MASKED)
      -- OVERRIDING ENTITY: procedural_representation_sequence


  SUB- ENTITY(421)	fill_area_style_tiles
    ATTR:  tiling_pattern,	TYPE: two_direction_repeat_factor -- EXPLICIT

    ATTR:  tiles,	TYPE: SET [1 : ?] OF fill_area_style_tile_shape_select -- EXPLICIT

    ATTR:  tiling_scale,	TYPE: positive_ratio_measure -- EXPLICIT


  SUB- ENTITY(422)	fill_area_style_tile_coloured_region
    ATTR:  closed_curve,	TYPE: curve_or_annotation_curve_occurrence -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  region_colour,	TYPE: colour -- EXPLICIT


  SUB- ENTITY(423)	edge_curve
    ATTR:  edge_geometry,	TYPE: curve -- EXPLICIT

    ATTR:  same_sense,	TYPE: BOOLEAN -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(424)	sphere
    ATTR:  radius,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  centre,	TYPE: point -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(425)	block
    ATTR:  position,	TYPE: axis2_placement_3d -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  x,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  y,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  z,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(426)	kinematic_path_defined_by_nodes
    REDCR: segments,	TYPE: LIST [1 : ?] OF path_node -- EXPLICIT	(AMBIGUOUS/MASKED)
      -- OVERRIDING ENTITY: kinematic_path

    ATTR:  placement_start,	TYPE: placement -- EXPLICIT


  SUB- ENTITY(427)	kinematic_path_defined_by_curves
    REDCR: segments,	TYPE: LIST [1 : ?] OF curve_based_path_with_orientation -- EXPLICIT	(AMBIGUOUS/MASKED)
      -- OVERRIDING ENTITY: kinematic_path


  SUB- ENTITY(428)	kinematic_path
    ATTR:  segments,	TYPE: LIST [1 : ?] OF kinematic_path_segment -- EXPLICIT	(AMBIGUOUS/MASKED)
      -- possibly overriden by
          ENTITY: kinematic_path_defined_by_nodes,	TYPE: LIST [1 : ?] OF path_node
          ENTITY: kinematic_path_defined_by_curves,	TYPE: LIST [1 : ?] OF curve_based_path_with_orientation

    ATTR:  t_start,	TYPE: parameter_value -- EXPLICIT

    ATTR:  n_segments,	TYPE: INTEGER -- DERIVED	(AMBIGUOUS/MASKED)
      := SIZEOF( segments )

    ATTR:  closed_path,	TYPE: LOGICAL -- DERIVED
      := segments[n_segments].transition <> discontinuous


  SUB- ENTITY(429)	su_parameters
    ATTR:  a,	TYPE: length_measure -- EXPLICIT

    ATTR:  alpha,	TYPE: plane_angle_measure -- EXPLICIT

    ATTR:  b,	TYPE: length_measure -- EXPLICIT

    ATTR:  beta,	TYPE: plane_angle_measure -- EXPLICIT

    ATTR:  c,	TYPE: length_measure -- EXPLICIT

    ATTR:  gamma,	TYPE: plane_angle_measure -- EXPLICIT


  SUB- ENTITY(430)	rigid_subsketch
    (no local attributes)

  SUB- ENTITY(431)	subsketch
    ATTR:  subsketch_elements,	TYPE: SET [1 : ?] OF sketch_element_select -- EXPLICIT

    ATTR:  owning_sketch,	TYPE: sketch_type_select -- EXPLICIT


  SUB- ENTITY(432)	eccentric_cone
    ATTR:  position,	TYPE: axis2_placement_3d -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  semi_axis_1,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  semi_axis_2,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  height,	TYPE: positive_length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  x_offset,	TYPE: length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  y_offset,	TYPE: length_measure -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  ratio,	TYPE: REAL -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(433)	min_and_major_ply_orientation_basis
    REDCR: relating_representation_item,	TYPE: axis2_placement_3d -- EXPLICIT
      -- OVERRIDING ENTITY: representation_item_relationship

    REDCR: related_representation_item,	TYPE: axis2_placement_3d -- EXPLICIT
      -- OVERRIDING ENTITY: representation_item_relationship

    ATTR:  major_orientation_basis,	TYPE: axis2_placement_3d -- DERIVED
      := SELF\representation_item_relationship.related_representation_item

    ATTR:  minor_orientation_basis,	TYPE: axis2_placement_3d -- DERIVED
      := SELF\representation_item_relationship.relating_representation_item


*/


//MARK: - Partial Entity
  public final class _geometric_representation_item : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eGEOMETRIC_REPRESENTATION_ITEM.self
    }

    //ATTRIBUTES
    /// DERIVE ATTRIBUTE
    internal func _dim__getter(SELF: eGEOMETRIC_REPRESENTATION_ITEM) -> tDIMENSION_COUNT?  {

      let _TEMP1 = DIMENSION_OF(SELF)
      return _TEMP1
    }

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      //SELECT data types (indirectly) referencing the current type as a member of the select list
      members.insert(SDAI.STRING(sMULTI_LANGUAGE_ATTRIBUTE_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sSTYLED_ITEM_TARGET.typeName)) // -> Self
      members.insert(SDAI.STRING(sATTRIBUTE_LANGUAGE_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sSHAPE_REPRESENTATION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sGROUPABLE_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sGEOMETRIC_MODEL_ITEM.typeName)) // -> Self
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: eGEOMETRIC_REPRESENTATION_ITEM?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = USING_REPRESENTATIONS(sFOUNDED_ITEM_SELECT(/*eGEOMETRIC_REPRESENTATION_ITEM*/SELF))
      let _TEMP2 = _TEMP1?.QUERY{ USING_REP in 

          let _TEMP1 = SDAI.TYPEOF(USING_REP.CONTEXT_OF_ITEMS, IS: eGEOMETRIC_REPRESENTATION_CONTEXT.self)
          let _TEMP2 =  !_TEMP1
          return _TEMP2 }
      let _TEMP3 = SDAI.SIZEOF(_TEMP2)
      let _TEMP4 = _TEMP3 .==. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      return _TEMP4
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init() {
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 0
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      self.init( )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY geometric_representation_item
    SUPERTYPE OF ( 
        ONEOF ( 
            point, 
            direction, 
            vector, 
            placement, 
            cartesian_transformation_operator, 
            curve, 
            surface, 
            edge_curve, 
            face_surface, 
            poly_loop, 
            vertex_point, 
            solid_model, 
            boolean_result, 
            sphere, 
            right_circular_cone, 
            right_circular_cylinder, 
            torus, 
            block, 
            primitive_2d, 
            right_angular_wedge, 
            ellipsoid, 
            faceted_primitive, 
            rectangular_pyramid, 
            cyclide_segment_solid, 
            volume, 
            half_space_solid, 
            shell_based_surface_model, 
            face_based_surface_model, 
            shell_based_wireframe_model, 
            edge_based_wireframe_model, 
            geometric_set, 
            tessellated_item, 
            volume_with_faces, 
            scanned_data_item ) 
        ANDOR
        ONEOF ( 
            annotation_fill_area, 
            curve, 
            point, 
            text_literal ) 
        ANDOR
        ONEOF ( 
            camera_model, 
            curve, 
            direction ) 
        ANDOR
        ONEOF ( 
            curve, 
            externally_defined_hatch_style, 
            externally_defined_tile_style, 
            fill_area_style_hatching, 
            fill_area_style_tile_symbol_with_style, 
            fill_area_style_tiles, 
            one_direction_repeat_factor, 
            point, 
            vector ) 
        ANDOR
        ONEOF ( 
            curve, 
            planar_extent ) 
        ANDOR
        ONEOF ( 
            kinematic_path, 
            placement ) 
        ANDOR
        ONEOF ( 
            rotation_about_direction, 
            su_parameters ) )
    SUBTYPE OF ( representation_item );
    DERIVE
      dim  : dimension_count := dimension_of( SELF );
    WHERE
      wr1: ( SIZEOF( QUERY ( using_rep <* using_representations( SELF ) | ( NOT ( 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.GEOMETRIC_REPRESENTATION_CONTEXT'  IN 
               TYPEOF( using_rep.context_of_items ) ) ) ) ) = 0 );
  END_ENTITY; -- geometric_representation_item (line:16877 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eGEOMETRIC_REPRESENTATION_ITEM : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _geometric_representation_item.self
    }
    public let partialEntity: _geometric_representation_item

    //MARK: SUPERTYPES
    public let super_eREPRESENTATION_ITEM: eREPRESENTATION_ITEM 	// [1]
    public var super_eGEOMETRIC_REPRESENTATION_ITEM: eGEOMETRIC_REPRESENTATION_ITEM { return self } 	// [2]

    //MARK: SUBTYPES
    public var sub_ePOSITIONED_SKETCH: ePOSITIONED_SKETCH? {	// [3]
      return self.complexEntity.entityReference(ePOSITIONED_SKETCH.self)
    }

    public var sub_ePOINT_CLOUD_DATASET_WITH_NORMALS: ePOINT_CLOUD_DATASET_WITH_NORMALS? {	// [4]
      return self.complexEntity.entityReference(ePOINT_CLOUD_DATASET_WITH_NORMALS.self)
    }

    public var sub_ePOINT_CLOUD_DATASET_WITH_COLOURS: ePOINT_CLOUD_DATASET_WITH_COLOURS? {	// [5]
      return self.complexEntity.entityReference(ePOINT_CLOUD_DATASET_WITH_COLOURS.self)
    }

    public var sub_ePOINT_CLOUD_DATASET_WITH_INTENSITIES: ePOINT_CLOUD_DATASET_WITH_INTENSITIES? {	// [6]
      return self.complexEntity.entityReference(ePOINT_CLOUD_DATASET_WITH_INTENSITIES.self)
    }

    public var sub_ePOINT_CLOUD_DATASET: ePOINT_CLOUD_DATASET? {	// [7]
      return self.complexEntity.entityReference(ePOINT_CLOUD_DATASET.self)
    }

    public var sub_ePOINT_CLOUD_SUPERDATASET: ePOINT_CLOUD_SUPERDATASET? {	// [8]
      return self.complexEntity.entityReference(ePOINT_CLOUD_SUPERDATASET.self)
    }

    public var sub_eTRIANGULATED_POINT_CLOUD_DATASET: eTRIANGULATED_POINT_CLOUD_DATASET? {	// [9]
      return self.complexEntity.entityReference(eTRIANGULATED_POINT_CLOUD_DATASET.self)
    }

    public var sub_eSCAN_3D_MODEL: eSCAN_3D_MODEL? {	// [10]
      return self.complexEntity.entityReference(eSCAN_3D_MODEL.self)
    }

    public var sub_eSCANNED_DATA_ITEM: eSCANNED_DATA_ITEM? {	// [11]
      return self.complexEntity.entityReference(eSCANNED_DATA_ITEM.self)
    }

    public var sub_eGEOMETRICAL_TOLERANCE_CALLOUT: eGEOMETRICAL_TOLERANCE_CALLOUT? {	// [12]
      return self.complexEntity.entityReference(eGEOMETRICAL_TOLERANCE_CALLOUT.self)
    }

    public var sub_eDATUM_FEATURE_CALLOUT: eDATUM_FEATURE_CALLOUT? {	// [13]
      return self.complexEntity.entityReference(eDATUM_FEATURE_CALLOUT.self)
    }

    public var sub_eORDINATE_DIMENSION: eORDINATE_DIMENSION? {	// [14]
      return self.complexEntity.entityReference(eORDINATE_DIMENSION.self)
    }

    public var sub_ePROJECTION_DIRECTED_CALLOUT: ePROJECTION_DIRECTED_CALLOUT? {	// [15]
      return self.complexEntity.entityReference(ePROJECTION_DIRECTED_CALLOUT.self)
    }

    public var sub_eLEADER_DIRECTED_DIMENSION: eLEADER_DIRECTED_DIMENSION? {	// [16]
      return self.complexEntity.entityReference(eLEADER_DIRECTED_DIMENSION.self)
    }

    public var sub_eLEADER_DIRECTED_CALLOUT: eLEADER_DIRECTED_CALLOUT? {	// [17]
      return self.complexEntity.entityReference(eLEADER_DIRECTED_CALLOUT.self)
    }

    public var sub_eSURFACE_CONDITION_CALLOUT: eSURFACE_CONDITION_CALLOUT? {	// [18]
      return self.complexEntity.entityReference(eSURFACE_CONDITION_CALLOUT.self)
    }

    public var sub_eSTRUCTURED_DIMENSION_CALLOUT: eSTRUCTURED_DIMENSION_CALLOUT? {	// [19]
      return self.complexEntity.entityReference(eSTRUCTURED_DIMENSION_CALLOUT.self)
    }

    public var sub_eLINEAR_DIMENSION: eLINEAR_DIMENSION? {	// [20]
      return self.complexEntity.entityReference(eLINEAR_DIMENSION.self)
    }

    public var sub_eRADIUS_DIMENSION: eRADIUS_DIMENSION? {	// [21]
      return self.complexEntity.entityReference(eRADIUS_DIMENSION.self)
    }

    public var sub_eCURVE_DIMENSION: eCURVE_DIMENSION? {	// [22]
      return self.complexEntity.entityReference(eCURVE_DIMENSION.self)
    }

    public var sub_eDIAMETER_DIMENSION: eDIAMETER_DIMENSION? {	// [23]
      return self.complexEntity.entityReference(eDIAMETER_DIMENSION.self)
    }

    public var sub_eANGULAR_DIMENSION: eANGULAR_DIMENSION? {	// [24]
      return self.complexEntity.entityReference(eANGULAR_DIMENSION.self)
    }

    public var sub_eDIMENSION_CURVE_DIRECTED_CALLOUT: eDIMENSION_CURVE_DIRECTED_CALLOUT? {	// [25]
      return self.complexEntity.entityReference(eDIMENSION_CURVE_DIRECTED_CALLOUT.self)
    }

    public var sub_eDATUM_TARGET_CALLOUT: eDATUM_TARGET_CALLOUT? {	// [26]
      return self.complexEntity.entityReference(eDATUM_TARGET_CALLOUT.self)
    }

    public var sub_eDRAUGHTING_ELEMENTS: eDRAUGHTING_ELEMENTS? {	// [27]
      return self.complexEntity.entityReference(eDRAUGHTING_ELEMENTS.self)
    }

    public var sub_eDIMENSION_CALLOUT: eDIMENSION_CALLOUT? {	// [28]
      return self.complexEntity.entityReference(eDIMENSION_CALLOUT.self)
    }

    public var sub_eDRAUGHTING_CALLOUT: eDRAUGHTING_CALLOUT? {	// [29]
      return self.complexEntity.entityReference(eDRAUGHTING_CALLOUT.self)
    }

    public var sub_eELLIPTIC_AREA: eELLIPTIC_AREA? {	// [30]
      return self.complexEntity.entityReference(eELLIPTIC_AREA.self)
    }

    public var sub_eCIRCULAR_AREA: eCIRCULAR_AREA? {	// [31]
      return self.complexEntity.entityReference(eCIRCULAR_AREA.self)
    }

    public var sub_eRECTANGULAR_AREA: eRECTANGULAR_AREA? {	// [32]
      return self.complexEntity.entityReference(eRECTANGULAR_AREA.self)
    }

    public var sub_ePOLYGONAL_AREA: ePOLYGONAL_AREA? {	// [33]
      return self.complexEntity.entityReference(ePOLYGONAL_AREA.self)
    }

    public var sub_eAREA_WITH_OUTER_BOUNDARY: eAREA_WITH_OUTER_BOUNDARY? {	// [34]
      return self.complexEntity.entityReference(eAREA_WITH_OUTER_BOUNDARY.self)
    }

    public var sub_eHALF_SPACE_2D: eHALF_SPACE_2D? {	// [35]
      return self.complexEntity.entityReference(eHALF_SPACE_2D.self)
    }

    public var sub_ePRIMITIVE_2D_WITH_INNER_BOUNDARY: ePRIMITIVE_2D_WITH_INNER_BOUNDARY? {	// [36]
      return self.complexEntity.entityReference(ePRIMITIVE_2D_WITH_INNER_BOUNDARY.self)
    }

    public var sub_ePATH_AREA_WITH_PARAMETERS: ePATH_AREA_WITH_PARAMETERS? {	// [37]
      return self.complexEntity.entityReference(ePATH_AREA_WITH_PARAMETERS.self)
    }

    public var sub_eCOMPLEX_AREA: eCOMPLEX_AREA? {	// [38]
      return self.complexEntity.entityReference(eCOMPLEX_AREA.self)
    }

    public var sub_ePRIMITIVE_2D: ePRIMITIVE_2D? {	// [39]
      return self.complexEntity.entityReference(ePRIMITIVE_2D.self)
    }

    public var sub_eFILL_AREA_STYLE_TILE_SYMBOL_WITH_STYLE: eFILL_AREA_STYLE_TILE_SYMBOL_WITH_STYLE? {	// [40]
      return self.complexEntity.entityReference(eFILL_AREA_STYLE_TILE_SYMBOL_WITH_STYLE.self)
    }

    public var sub_eSURFACE_PATCH_SET: eSURFACE_PATCH_SET? {	// [41]
      return self.complexEntity.entityReference(eSURFACE_PATCH_SET.self)
    }

    public var sub_eFILL_AREA_STYLE_TILE_CURVE_WITH_STYLE: eFILL_AREA_STYLE_TILE_CURVE_WITH_STYLE? {	// [42]
      return self.complexEntity.entityReference(eFILL_AREA_STYLE_TILE_CURVE_WITH_STYLE.self)
    }

    public var sub_eCAMERA_MODEL_D3_MULTI_CLIPPING_UNION: eCAMERA_MODEL_D3_MULTI_CLIPPING_UNION? {	// [43]
      return self.complexEntity.entityReference(eCAMERA_MODEL_D3_MULTI_CLIPPING_UNION.self)
    }

    public var sub_eCOORDINATES_LIST: eCOORDINATES_LIST? {	// [44]
      return self.complexEntity.entityReference(eCOORDINATES_LIST.self)
    }

    public var sub_eTESSELLATED_SOLID: eTESSELLATED_SOLID? {	// [45]
      return self.complexEntity.entityReference(eTESSELLATED_SOLID.self)
    }

    public var sub_eTESSELLATED_SHELL: eTESSELLATED_SHELL? {	// [46]
      return self.complexEntity.entityReference(eTESSELLATED_SHELL.self)
    }

    public var sub_eTESSELLATED_WIRE: eTESSELLATED_WIRE? {	// [47]
      return self.complexEntity.entityReference(eTESSELLATED_WIRE.self)
    }

    public var sub_eTESSELLATED_GEOMETRIC_SET: eTESSELLATED_GEOMETRIC_SET? {	// [48]
      return self.complexEntity.entityReference(eTESSELLATED_GEOMETRIC_SET.self)
    }

    public var sub_eTESSELLATED_CURVE_SET: eTESSELLATED_CURVE_SET? {	// [49]
      return self.complexEntity.entityReference(eTESSELLATED_CURVE_SET.self)
    }

    public var sub_eTESSELLATED_POINT_SET: eTESSELLATED_POINT_SET? {	// [50]
      return self.complexEntity.entityReference(eTESSELLATED_POINT_SET.self)
    }

    public var sub_eCOMPLEX_TRIANGULATED_SURFACE_SET: eCOMPLEX_TRIANGULATED_SURFACE_SET? {	// [51]
      return self.complexEntity.entityReference(eCOMPLEX_TRIANGULATED_SURFACE_SET.self)
    }

    public var sub_eTRIANGULATED_SURFACE_SET: eTRIANGULATED_SURFACE_SET? {	// [52]
      return self.complexEntity.entityReference(eTRIANGULATED_SURFACE_SET.self)
    }

    public var sub_eTESSELLATED_SURFACE_SET: eTESSELLATED_SURFACE_SET? {	// [53]
      return self.complexEntity.entityReference(eTESSELLATED_SURFACE_SET.self)
    }

    public var sub_eTESSELLATED_VERTEX: eTESSELLATED_VERTEX? {	// [54]
      return self.complexEntity.entityReference(eTESSELLATED_VERTEX.self)
    }

    public var sub_eTESSELLATED_CONNECTING_EDGE: eTESSELLATED_CONNECTING_EDGE? {	// [55]
      return self.complexEntity.entityReference(eTESSELLATED_CONNECTING_EDGE.self)
    }

    public var sub_eCUBIC_TESSELLATED_CONNECTING_EDGE: eCUBIC_TESSELLATED_CONNECTING_EDGE? {	// [56]
      return self.complexEntity.entityReference(eCUBIC_TESSELLATED_CONNECTING_EDGE.self)
    }

    public var sub_eCUBIC_BEZIER_TESSELLATED_EDGE: eCUBIC_BEZIER_TESSELLATED_EDGE? {	// [57]
      return self.complexEntity.entityReference(eCUBIC_BEZIER_TESSELLATED_EDGE.self)
    }

    public var sub_eTESSELLATED_EDGE: eTESSELLATED_EDGE? {	// [58]
      return self.complexEntity.entityReference(eTESSELLATED_EDGE.self)
    }

    public var sub_eTRIANGULATED_FACE: eTRIANGULATED_FACE? {	// [59]
      return self.complexEntity.entityReference(eTRIANGULATED_FACE.self)
    }

    public var sub_eCOMPLEX_TRIANGULATED_FACE: eCOMPLEX_TRIANGULATED_FACE? {	// [60]
      return self.complexEntity.entityReference(eCOMPLEX_TRIANGULATED_FACE.self)
    }

    public var sub_eCUBIC_BEZIER_TRIANGULATED_FACE: eCUBIC_BEZIER_TRIANGULATED_FACE? {	// [61]
      return self.complexEntity.entityReference(eCUBIC_BEZIER_TRIANGULATED_FACE.self)
    }

    public var sub_eTESSELLATED_FACE: eTESSELLATED_FACE? {	// [62]
      return self.complexEntity.entityReference(eTESSELLATED_FACE.self)
    }

    public var sub_eTESSELLATED_STRUCTURED_ITEM: eTESSELLATED_STRUCTURED_ITEM? {	// [63]
      return self.complexEntity.entityReference(eTESSELLATED_STRUCTURED_ITEM.self)
    }

    public var sub_eREPOSITIONED_TESSELLATED_ITEM: eREPOSITIONED_TESSELLATED_ITEM? {	// [64]
      return self.complexEntity.entityReference(eREPOSITIONED_TESSELLATED_ITEM.self)
    }

    public var sub_eTESSELLATED_ITEM: eTESSELLATED_ITEM? {	// [65]
      return self.complexEntity.entityReference(eTESSELLATED_ITEM.self)
    }

    public var sub_eCOMPOSITE_TEXT_WITH_BLANKING_BOX: eCOMPOSITE_TEXT_WITH_BLANKING_BOX? {	// [66]
      return self.complexEntity.entityReference(eCOMPOSITE_TEXT_WITH_BLANKING_BOX.self)
    }

    public var sub_eCOMPOSITE_TEXT_WITH_ASSOCIATED_CURVES: eCOMPOSITE_TEXT_WITH_ASSOCIATED_CURVES? {	// [67]
      return self.complexEntity.entityReference(eCOMPOSITE_TEXT_WITH_ASSOCIATED_CURVES.self)
    }

    public var sub_eCOMPOSITE_TEXT_WITH_EXTENT: eCOMPOSITE_TEXT_WITH_EXTENT? {	// [68]
      return self.complexEntity.entityReference(eCOMPOSITE_TEXT_WITH_EXTENT.self)
    }

    public var sub_eCOMPOSITE_TEXT_WITH_DELINEATION: eCOMPOSITE_TEXT_WITH_DELINEATION? {	// [69]
      return self.complexEntity.entityReference(eCOMPOSITE_TEXT_WITH_DELINEATION.self)
    }

    public var sub_eCOMPOSITE_TEXT: eCOMPOSITE_TEXT? {	// [70]
      return self.complexEntity.entityReference(eCOMPOSITE_TEXT.self)
    }

    public var sub_eADVANCED_FACE: eADVANCED_FACE? {	// [71]
      return self.complexEntity.entityReference(eADVANCED_FACE.self)
    }

    public var sub_eFACE_SURFACE: eFACE_SURFACE? {	// [72]
      return self.complexEntity.entityReference(eFACE_SURFACE.self)
    }

    public var sub_eTEXT_LITERAL_WITH_EXTENT: eTEXT_LITERAL_WITH_EXTENT? {	// [73]
      return self.complexEntity.entityReference(eTEXT_LITERAL_WITH_EXTENT.self)
    }

    public var sub_eDRAUGHTING_TEXT_LITERAL_WITH_DELINEATION: eDRAUGHTING_TEXT_LITERAL_WITH_DELINEATION? {	// [74]
      return self.complexEntity.entityReference(eDRAUGHTING_TEXT_LITERAL_WITH_DELINEATION.self)
    }

    public var sub_eTEXT_LITERAL_WITH_DELINEATION: eTEXT_LITERAL_WITH_DELINEATION? {	// [75]
      return self.complexEntity.entityReference(eTEXT_LITERAL_WITH_DELINEATION.self)
    }

    public var sub_eTEXT_LITERAL_WITH_BLANKING_BOX: eTEXT_LITERAL_WITH_BLANKING_BOX? {	// [76]
      return self.complexEntity.entityReference(eTEXT_LITERAL_WITH_BLANKING_BOX.self)
    }

    public var sub_eDIMENSION_TEXT_ASSOCIATIVITY: eDIMENSION_TEXT_ASSOCIATIVITY? {	// [77]
      return self.complexEntity.entityReference(eDIMENSION_TEXT_ASSOCIATIVITY.self)
    }

    public var sub_eTEXT_LITERAL_WITH_ASSOCIATED_CURVES: eTEXT_LITERAL_WITH_ASSOCIATED_CURVES? {	// [78]
      return self.complexEntity.entityReference(eTEXT_LITERAL_WITH_ASSOCIATED_CURVES.self)
    }

    public var sub_eTEXT_LITERAL: eTEXT_LITERAL? {	// [79]
      return self.complexEntity.entityReference(eTEXT_LITERAL.self)
    }

    public var sub_eFACE_BASED_SURFACE_MODEL: eFACE_BASED_SURFACE_MODEL? {	// [80]
      return self.complexEntity.entityReference(eFACE_BASED_SURFACE_MODEL.self)
    }

    public var sub_eGEOMETRIC_CURVE_SET: eGEOMETRIC_CURVE_SET? {	// [81]
      return self.complexEntity.entityReference(eGEOMETRIC_CURVE_SET.self)
    }

    public var sub_eGEOMETRIC_SET: eGEOMETRIC_SET? {	// [82]
      return self.complexEntity.entityReference(eGEOMETRIC_SET.self)
    }

    public var sub_eEDGE_BASED_WIREFRAME_MODEL: eEDGE_BASED_WIREFRAME_MODEL? {	// [83]
      return self.complexEntity.entityReference(eEDGE_BASED_WIREFRAME_MODEL.self)
    }

    public var sub_eANNOTATION_FILL_AREA: eANNOTATION_FILL_AREA? {	// [84]
      return self.complexEntity.entityReference(eANNOTATION_FILL_AREA.self)
    }

    public var sub_eCONICAL_STEPPED_HOLE_TRANSITION: eCONICAL_STEPPED_HOLE_TRANSITION? {	// [85]
      return self.complexEntity.entityReference(eCONICAL_STEPPED_HOLE_TRANSITION.self)
    }

    public var sub_eDEFINED_CHARACTER_GLYPH: eDEFINED_CHARACTER_GLYPH? {	// [86]
      return self.complexEntity.entityReference(eDEFINED_CHARACTER_GLYPH.self)
    }

    public var sub_eRIGHT_CIRCULAR_CONE: eRIGHT_CIRCULAR_CONE? {	// [87]
      return self.complexEntity.entityReference(eRIGHT_CIRCULAR_CONE.self)
    }

    public var sub_eCAMERA_MODEL_D2: eCAMERA_MODEL_D2? {	// [88]
      return self.complexEntity.entityReference(eCAMERA_MODEL_D2.self)
    }

    public var sub_eCAMERA_MODEL_D3_WITH_HLHSR: eCAMERA_MODEL_D3_WITH_HLHSR? {	// [89]
      return self.complexEntity.entityReference(eCAMERA_MODEL_D3_WITH_HLHSR.self)
    }

    public var sub_eCAMERA_MODEL_D3_MULTI_CLIPPING: eCAMERA_MODEL_D3_MULTI_CLIPPING? {	// [90]
      return self.complexEntity.entityReference(eCAMERA_MODEL_D3_MULTI_CLIPPING.self)
    }

    public var sub_eCAMERA_MODEL_WITH_LIGHT_SOURCES: eCAMERA_MODEL_WITH_LIGHT_SOURCES? {	// [91]
      return self.complexEntity.entityReference(eCAMERA_MODEL_WITH_LIGHT_SOURCES.self)
    }

    public var sub_eCAMERA_MODEL_D3: eCAMERA_MODEL_D3? {	// [92]
      return self.complexEntity.entityReference(eCAMERA_MODEL_D3.self)
    }

    public var sub_eCAMERA_MODEL: eCAMERA_MODEL? {	// [93]
      return self.complexEntity.entityReference(eCAMERA_MODEL.self)
    }

    public var sub_ePOLY_LOOP: ePOLY_LOOP? {	// [94]
      return self.complexEntity.entityReference(ePOLY_LOOP.self)
    }

    public var sub_eANNOTATION_PLACEHOLDER_OCCURRENCE: eANNOTATION_PLACEHOLDER_OCCURRENCE? {	// [95]
      return self.complexEntity.entityReference(eANNOTATION_PLACEHOLDER_OCCURRENCE.self)
    }

    public var sub_ePOINT_AND_VECTOR: ePOINT_AND_VECTOR? {	// [96]
      return self.complexEntity.entityReference(ePOINT_AND_VECTOR.self)
    }

    public var sub_eROTATION_ABOUT_DIRECTION: eROTATION_ABOUT_DIRECTION? {	// [97]
      return self.complexEntity.entityReference(eROTATION_ABOUT_DIRECTION.self)
    }

    public var sub_eANGLE_DIRECTION_REFERENCE: eANGLE_DIRECTION_REFERENCE? {	// [98]
      return self.complexEntity.entityReference(eANGLE_DIRECTION_REFERENCE.self)
    }

    public var sub_eEXTERNALLY_DEFINED_TILE_STYLE: eEXTERNALLY_DEFINED_TILE_STYLE? {	// [99]
      return self.complexEntity.entityReference(eEXTERNALLY_DEFINED_TILE_STYLE.self)
    }

    public var sub_eCYCLIDE_SEGMENT_SOLID: eCYCLIDE_SEGMENT_SOLID? {	// [100]
      return self.complexEntity.entityReference(eCYCLIDE_SEGMENT_SOLID.self)
    }

    public var sub_eGEOMETRIC_MODEL_ELEMENT_RELATIONSHIP: eGEOMETRIC_MODEL_ELEMENT_RELATIONSHIP? {	// [101]
      return self.complexEntity.entityReference(eGEOMETRIC_MODEL_ELEMENT_RELATIONSHIP.self)
    }

    public var sub_eVECTOR: eVECTOR? {	// [102]
      return self.complexEntity.entityReference(eVECTOR.self)
    }

    public var sub_ePLANAR_BOX: ePLANAR_BOX? {	// [103]
      return self.complexEntity.entityReference(ePLANAR_BOX.self)
    }

    public var sub_ePLANAR_EXTENT: ePLANAR_EXTENT? {	// [104]
      return self.complexEntity.entityReference(ePLANAR_EXTENT.self)
    }

    public var sub_eCURVE_SEGMENT_SET: eCURVE_SEGMENT_SET? {	// [105]
      return self.complexEntity.entityReference(eCURVE_SEGMENT_SET.self)
    }

    public var sub_eIMPLICIT_INTERSECTION_CURVE: eIMPLICIT_INTERSECTION_CURVE? {	// [106]
      return self.complexEntity.entityReference(eIMPLICIT_INTERSECTION_CURVE.self)
    }

    public var sub_eIMPLICIT_PROJECTED_CURVE: eIMPLICIT_PROJECTED_CURVE? {	// [107]
      return self.complexEntity.entityReference(eIMPLICIT_PROJECTED_CURVE.self)
    }

    public var sub_eIMPLICIT_MODEL_INTERSECTION_CURVE: eIMPLICIT_MODEL_INTERSECTION_CURVE? {	// [108]
      return self.complexEntity.entityReference(eIMPLICIT_MODEL_INTERSECTION_CURVE.self)
    }

    public var sub_eIMPLICIT_SILHOUETTE_CURVE: eIMPLICIT_SILHOUETTE_CURVE? {	// [109]
      return self.complexEntity.entityReference(eIMPLICIT_SILHOUETTE_CURVE.self)
    }

    public var sub_eIMPLICIT_PLANAR_CURVE: eIMPLICIT_PLANAR_CURVE? {	// [110]
      return self.complexEntity.entityReference(eIMPLICIT_PLANAR_CURVE.self)
    }

    public var sub_eIMPLICIT_PLANAR_PROJECTION_POINT: eIMPLICIT_PLANAR_PROJECTION_POINT? {	// [111]
      return self.complexEntity.entityReference(eIMPLICIT_PLANAR_PROJECTION_POINT.self)
    }

    public var sub_eIMPLICIT_PLANAR_INTERSECTION_POINT: eIMPLICIT_PLANAR_INTERSECTION_POINT? {	// [112]
      return self.complexEntity.entityReference(eIMPLICIT_PLANAR_INTERSECTION_POINT.self)
    }

    public var sub_eIMPLICIT_POINT_ON_PLANE: eIMPLICIT_POINT_ON_PLANE? {	// [113]
      return self.complexEntity.entityReference(eIMPLICIT_POINT_ON_PLANE.self)
    }

    public var sub_eAUXILIARY_GEOMETRIC_REPRESENTATION_ITEM: eAUXILIARY_GEOMETRIC_REPRESENTATION_ITEM? {	// [114]
      return self.complexEntity.entityReference(eAUXILIARY_GEOMETRIC_REPRESENTATION_ITEM.self)
    }

    public var sub_ePOINT_PATH: ePOINT_PATH? {	// [115]
      return self.complexEntity.entityReference(ePOINT_PATH.self)
    }

    public var sub_eLIGHT_SOURCE_POSITIONAL: eLIGHT_SOURCE_POSITIONAL? {	// [116]
      return self.complexEntity.entityReference(eLIGHT_SOURCE_POSITIONAL.self)
    }

    public var sub_eLIGHT_SOURCE_DIRECTIONAL: eLIGHT_SOURCE_DIRECTIONAL? {	// [117]
      return self.complexEntity.entityReference(eLIGHT_SOURCE_DIRECTIONAL.self)
    }

    public var sub_eLIGHT_SOURCE_SPOT: eLIGHT_SOURCE_SPOT? {	// [118]
      return self.complexEntity.entityReference(eLIGHT_SOURCE_SPOT.self)
    }

    public var sub_eLIGHT_SOURCE_AMBIENT: eLIGHT_SOURCE_AMBIENT? {	// [119]
      return self.complexEntity.entityReference(eLIGHT_SOURCE_AMBIENT.self)
    }

    public var sub_eLIGHT_SOURCE: eLIGHT_SOURCE? {	// [120]
      return self.complexEntity.entityReference(eLIGHT_SOURCE.self)
    }

    public var sub_ePOLAR_11: ePOLAR_11? {	// [121]
      return self.complexEntity.entityReference(ePOLAR_11.self)
    }

    public var sub_eSHELL_BASED_WIREFRAME_MODEL: eSHELL_BASED_WIREFRAME_MODEL? {	// [122]
      return self.complexEntity.entityReference(eSHELL_BASED_WIREFRAME_MODEL.self)
    }

    public var sub_eINTERPOLATED_CONFIGURATION_SEQUENCE: eINTERPOLATED_CONFIGURATION_SEQUENCE? {	// [123]
      return self.complexEntity.entityReference(eINTERPOLATED_CONFIGURATION_SEQUENCE.self)
    }

    public var sub_eTETRAHEDRON: eTETRAHEDRON? {	// [124]
      return self.complexEntity.entityReference(eTETRAHEDRON.self)
    }

    public var sub_eCONVEX_HEXAHEDRON: eCONVEX_HEXAHEDRON? {	// [125]
      return self.complexEntity.entityReference(eCONVEX_HEXAHEDRON.self)
    }

    public var sub_eFACETED_PRIMITIVE: eFACETED_PRIMITIVE? {	// [126]
      return self.complexEntity.entityReference(eFACETED_PRIMITIVE.self)
    }

    public var sub_eFILL_AREA_STYLE_HATCHING: eFILL_AREA_STYLE_HATCHING? {	// [127]
      return self.complexEntity.entityReference(eFILL_AREA_STYLE_HATCHING.self)
    }

    public var sub_eSYMBOL_TARGET: eSYMBOL_TARGET? {	// [128]
      return self.complexEntity.entityReference(eSYMBOL_TARGET.self)
    }

    public var sub_eVOLUME_WITH_PARAMETRIC_BOUNDARY: eVOLUME_WITH_PARAMETRIC_BOUNDARY? {	// [129]
      return self.complexEntity.entityReference(eVOLUME_WITH_PARAMETRIC_BOUNDARY.self)
    }

    public var sub_eVOLUME_WITH_SHELL: eVOLUME_WITH_SHELL? {	// [130]
      return self.complexEntity.entityReference(eVOLUME_WITH_SHELL.self)
    }

    public var sub_eVOLUME_WITH_FACES: eVOLUME_WITH_FACES? {	// [131]
      return self.complexEntity.entityReference(eVOLUME_WITH_FACES.self)
    }

    public var sub_eSHELL_BASED_SURFACE_MODEL: eSHELL_BASED_SURFACE_MODEL? {	// [132]
      return self.complexEntity.entityReference(eSHELL_BASED_SURFACE_MODEL.self)
    }

    public var sub_eCYLINDRICAL_11: eCYLINDRICAL_11? {	// [133]
      return self.complexEntity.entityReference(eCYLINDRICAL_11.self)
    }

    public var sub_eSCULPTURED_SOLID: eSCULPTURED_SOLID? {	// [134]
      return self.complexEntity.entityReference(eSCULPTURED_SOLID.self)
    }

    public var sub_eSOLID_WITH_SINGLE_OFFSET_CHAMFER: eSOLID_WITH_SINGLE_OFFSET_CHAMFER? {	// [135]
      return self.complexEntity.entityReference(eSOLID_WITH_SINGLE_OFFSET_CHAMFER.self)
    }

    public var sub_eSOLID_WITH_DOUBLE_OFFSET_CHAMFER: eSOLID_WITH_DOUBLE_OFFSET_CHAMFER? {	// [136]
      return self.complexEntity.entityReference(eSOLID_WITH_DOUBLE_OFFSET_CHAMFER.self)
    }

    public var sub_eSOLID_WITH_ANGLE_BASED_CHAMFER: eSOLID_WITH_ANGLE_BASED_CHAMFER? {	// [137]
      return self.complexEntity.entityReference(eSOLID_WITH_ANGLE_BASED_CHAMFER.self)
    }

    public var sub_eSOLID_WITH_CHAMFERED_EDGES: eSOLID_WITH_CHAMFERED_EDGES? {	// [138]
      return self.complexEntity.entityReference(eSOLID_WITH_CHAMFERED_EDGES.self)
    }

    public var sub_eSOLID_WITH_VARIABLE_RADIUS_EDGE_BLEND: eSOLID_WITH_VARIABLE_RADIUS_EDGE_BLEND? {	// [139]
      return self.complexEntity.entityReference(eSOLID_WITH_VARIABLE_RADIUS_EDGE_BLEND.self)
    }

    public var sub_eTRACK_BLENDED_SOLID_WITH_END_CONDITIONS: eTRACK_BLENDED_SOLID_WITH_END_CONDITIONS? {	// [140]
      return self.complexEntity.entityReference(eTRACK_BLENDED_SOLID_WITH_END_CONDITIONS.self)
    }

    public var sub_eTRACK_BLENDED_SOLID: eTRACK_BLENDED_SOLID? {	// [141]
      return self.complexEntity.entityReference(eTRACK_BLENDED_SOLID.self)
    }

    public var sub_eSOLID_WITH_CONSTANT_RADIUS_EDGE_BLEND: eSOLID_WITH_CONSTANT_RADIUS_EDGE_BLEND? {	// [142]
      return self.complexEntity.entityReference(eSOLID_WITH_CONSTANT_RADIUS_EDGE_BLEND.self)
    }

    public var sub_eEDGE_BLENDED_SOLID: eEDGE_BLENDED_SOLID? {	// [143]
      return self.complexEntity.entityReference(eEDGE_BLENDED_SOLID.self)
    }

    public var sub_eCOMPLEX_SHELLED_SOLID: eCOMPLEX_SHELLED_SOLID? {	// [144]
      return self.complexEntity.entityReference(eCOMPLEX_SHELLED_SOLID.self)
    }

    public var sub_eDOUBLE_OFFSET_SHELLED_SOLID: eDOUBLE_OFFSET_SHELLED_SOLID? {	// [145]
      return self.complexEntity.entityReference(eDOUBLE_OFFSET_SHELLED_SOLID.self)
    }

    public var sub_eSHELLED_SOLID: eSHELLED_SOLID? {	// [146]
      return self.complexEntity.entityReference(eSHELLED_SOLID.self)
    }

    public var sub_eSOLID_WITH_INCOMPLETE_CIRCULAR_PATTERN: eSOLID_WITH_INCOMPLETE_CIRCULAR_PATTERN? {	// [147]
      return self.complexEntity.entityReference(eSOLID_WITH_INCOMPLETE_CIRCULAR_PATTERN.self)
    }

    public var sub_eSOLID_WITH_CIRCULAR_PATTERN: eSOLID_WITH_CIRCULAR_PATTERN? {	// [148]
      return self.complexEntity.entityReference(eSOLID_WITH_CIRCULAR_PATTERN.self)
    }

    public var sub_eSOLID_WITH_INCOMPLETE_RECTANGULAR_PATTERN: eSOLID_WITH_INCOMPLETE_RECTANGULAR_PATTERN? {	// [149]
      return self.complexEntity.entityReference(eSOLID_WITH_INCOMPLETE_RECTANGULAR_PATTERN.self)
    }

    public var sub_eSOLID_WITH_RECTANGULAR_PATTERN: eSOLID_WITH_RECTANGULAR_PATTERN? {	// [150]
      return self.complexEntity.entityReference(eSOLID_WITH_RECTANGULAR_PATTERN.self)
    }

    public var sub_eSOLID_WITH_SHAPE_ELEMENT_PATTERN: eSOLID_WITH_SHAPE_ELEMENT_PATTERN? {	// [151]
      return self.complexEntity.entityReference(eSOLID_WITH_SHAPE_ELEMENT_PATTERN.self)
    }

    public var sub_eSOLID_WITH_GENERAL_PROTRUSION: eSOLID_WITH_GENERAL_PROTRUSION? {	// [152]
      return self.complexEntity.entityReference(eSOLID_WITH_GENERAL_PROTRUSION.self)
    }

    public var sub_eSOLID_WITH_RECTANGULAR_PROTRUSION: eSOLID_WITH_RECTANGULAR_PROTRUSION? {	// [153]
      return self.complexEntity.entityReference(eSOLID_WITH_RECTANGULAR_PROTRUSION.self)
    }

    public var sub_eSOLID_WITH_CIRCULAR_PROTRUSION: eSOLID_WITH_CIRCULAR_PROTRUSION? {	// [154]
      return self.complexEntity.entityReference(eSOLID_WITH_CIRCULAR_PROTRUSION.self)
    }

    public var sub_eSOLID_WITH_PROTRUSION: eSOLID_WITH_PROTRUSION? {	// [155]
      return self.complexEntity.entityReference(eSOLID_WITH_PROTRUSION.self)
    }

    public var sub_eSOLID_WITH_TRAPEZOIDAL_SECTION_SLOT: eSOLID_WITH_TRAPEZOIDAL_SECTION_SLOT? {	// [156]
      return self.complexEntity.entityReference(eSOLID_WITH_TRAPEZOIDAL_SECTION_SLOT.self)
    }

    public var sub_eSOLID_WITH_TEE_SECTION_SLOT: eSOLID_WITH_TEE_SECTION_SLOT? {	// [157]
      return self.complexEntity.entityReference(eSOLID_WITH_TEE_SECTION_SLOT.self)
    }

    public var sub_eSOLID_WITH_STRAIGHT_SLOT: eSOLID_WITH_STRAIGHT_SLOT? {	// [158]
      return self.complexEntity.entityReference(eSOLID_WITH_STRAIGHT_SLOT.self)
    }

    public var sub_eSOLID_WITH_CURVED_SLOT: eSOLID_WITH_CURVED_SLOT? {	// [159]
      return self.complexEntity.entityReference(eSOLID_WITH_CURVED_SLOT.self)
    }

    public var sub_eSOLID_WITH_SLOT: eSOLID_WITH_SLOT? {	// [160]
      return self.complexEntity.entityReference(eSOLID_WITH_SLOT.self)
    }

    public var sub_eSOLID_WITH_GENERAL_POCKET: eSOLID_WITH_GENERAL_POCKET? {	// [161]
      return self.complexEntity.entityReference(eSOLID_WITH_GENERAL_POCKET.self)
    }

    public var sub_eSOLID_WITH_RECTANGULAR_POCKET: eSOLID_WITH_RECTANGULAR_POCKET? {	// [162]
      return self.complexEntity.entityReference(eSOLID_WITH_RECTANGULAR_POCKET.self)
    }

    public var sub_eSOLID_WITH_CIRCULAR_POCKET: eSOLID_WITH_CIRCULAR_POCKET? {	// [163]
      return self.complexEntity.entityReference(eSOLID_WITH_CIRCULAR_POCKET.self)
    }

    public var sub_eSOLID_WITH_POCKET: eSOLID_WITH_POCKET? {	// [164]
      return self.complexEntity.entityReference(eSOLID_WITH_POCKET.self)
    }

    public var sub_eSOLID_WITH_SPHERICAL_BOTTOM_ROUND_HOLE: eSOLID_WITH_SPHERICAL_BOTTOM_ROUND_HOLE? {	// [165]
      return self.complexEntity.entityReference(eSOLID_WITH_SPHERICAL_BOTTOM_ROUND_HOLE.self)
    }

    public var sub_eSOLID_WITH_FLAT_BOTTOM_ROUND_HOLE: eSOLID_WITH_FLAT_BOTTOM_ROUND_HOLE? {	// [166]
      return self.complexEntity.entityReference(eSOLID_WITH_FLAT_BOTTOM_ROUND_HOLE.self)
    }

    public var sub_eSOLID_WITH_STEPPED_ROUND_HOLE_AND_CONICAL_TRANSITIONS: eSOLID_WITH_STEPPED_ROUND_HOLE_AND_CONICAL_TRANSITIONS? {	// [167]
      return self.complexEntity.entityReference(eSOLID_WITH_STEPPED_ROUND_HOLE_AND_CONICAL_TRANSITIONS.self)
    }

    public var sub_eSOLID_WITH_CONICAL_BOTTOM_ROUND_HOLE: eSOLID_WITH_CONICAL_BOTTOM_ROUND_HOLE? {	// [168]
      return self.complexEntity.entityReference(eSOLID_WITH_CONICAL_BOTTOM_ROUND_HOLE.self)
    }

    public var sub_eSOLID_WITH_STEPPED_ROUND_HOLE: eSOLID_WITH_STEPPED_ROUND_HOLE? {	// [169]
      return self.complexEntity.entityReference(eSOLID_WITH_STEPPED_ROUND_HOLE.self)
    }

    public var sub_eSOLID_WITH_HOLE: eSOLID_WITH_HOLE? {	// [170]
      return self.complexEntity.entityReference(eSOLID_WITH_HOLE.self)
    }

    public var sub_eSOLID_WITH_THROUGH_DEPRESSION: eSOLID_WITH_THROUGH_DEPRESSION? {	// [171]
      return self.complexEntity.entityReference(eSOLID_WITH_THROUGH_DEPRESSION.self)
    }

    public var sub_eSOLID_WITH_GROOVE: eSOLID_WITH_GROOVE? {	// [172]
      return self.complexEntity.entityReference(eSOLID_WITH_GROOVE.self)
    }

    public var sub_eSOLID_WITH_DEPRESSION: eSOLID_WITH_DEPRESSION? {	// [173]
      return self.complexEntity.entityReference(eSOLID_WITH_DEPRESSION.self)
    }

    public var sub_eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION: eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION? {	// [174]
      return self.complexEntity.entityReference(eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION.self)
    }

    public var sub_eMODIFIED_SOLID: eMODIFIED_SOLID? {	// [175]
      return self.complexEntity.entityReference(eMODIFIED_SOLID.self)
    }

    public var sub_eFACETED_BREP: eFACETED_BREP? {	// [176]
      return self.complexEntity.entityReference(eFACETED_BREP.self)
    }

    public var sub_eBREP_WITH_VOIDS: eBREP_WITH_VOIDS? {	// [177]
      return self.complexEntity.entityReference(eBREP_WITH_VOIDS.self)
    }

    public var sub_eMANIFOLD_SOLID_BREP: eMANIFOLD_SOLID_BREP? {	// [178]
      return self.complexEntity.entityReference(eMANIFOLD_SOLID_BREP.self)
    }

    public var sub_eREVOLVED_AREA_SOLID: eREVOLVED_AREA_SOLID? {	// [179]
      return self.complexEntity.entityReference(eREVOLVED_AREA_SOLID.self)
    }

    public var sub_eRULED_SURFACE_SWEPT_AREA_SOLID: eRULED_SURFACE_SWEPT_AREA_SOLID? {	// [180]
      return self.complexEntity.entityReference(eRULED_SURFACE_SWEPT_AREA_SOLID.self)
    }

    public var sub_eSURFACE_CURVE_SWEPT_AREA_SOLID: eSURFACE_CURVE_SWEPT_AREA_SOLID? {	// [181]
      return self.complexEntity.entityReference(eSURFACE_CURVE_SWEPT_AREA_SOLID.self)
    }

    public var sub_eEXTRUDED_AREA_SOLID: eEXTRUDED_AREA_SOLID? {	// [182]
      return self.complexEntity.entityReference(eEXTRUDED_AREA_SOLID.self)
    }

    public var sub_eSWEPT_AREA_SOLID: eSWEPT_AREA_SOLID? {	// [183]
      return self.complexEntity.entityReference(eSWEPT_AREA_SOLID.self)
    }

    public var sub_eSOLID_REPLICA: eSOLID_REPLICA? {	// [184]
      return self.complexEntity.entityReference(eSOLID_REPLICA.self)
    }

    public var sub_eTHICKENED_FACE_SOLID: eTHICKENED_FACE_SOLID? {	// [185]
      return self.complexEntity.entityReference(eTHICKENED_FACE_SOLID.self)
    }

    public var sub_eSWEPT_DISK_SOLID: eSWEPT_DISK_SOLID? {	// [186]
      return self.complexEntity.entityReference(eSWEPT_DISK_SOLID.self)
    }

    public var sub_eCSG_PRIMITIVE_SOLID_2D: eCSG_PRIMITIVE_SOLID_2D? {	// [187]
      return self.complexEntity.entityReference(eCSG_PRIMITIVE_SOLID_2D.self)
    }

    public var sub_eCSG_SOLID_2D: eCSG_SOLID_2D? {	// [188]
      return self.complexEntity.entityReference(eCSG_SOLID_2D.self)
    }

    public var sub_eCSG_SOLID: eCSG_SOLID? {	// [189]
      return self.complexEntity.entityReference(eCSG_SOLID.self)
    }

    public var sub_eREVOLVED_FACE_SOLID_WITH_TRIM_CONDITIONS: eREVOLVED_FACE_SOLID_WITH_TRIM_CONDITIONS? {	// [190]
      return self.complexEntity.entityReference(eREVOLVED_FACE_SOLID_WITH_TRIM_CONDITIONS.self)
    }

    public var sub_eREVOLVED_FACE_SOLID: eREVOLVED_FACE_SOLID? {	// [191]
      return self.complexEntity.entityReference(eREVOLVED_FACE_SOLID.self)
    }

    public var sub_eEXTRUDED_FACE_SOLID_WITH_MULTIPLE_DRAFT_ANGLES: eEXTRUDED_FACE_SOLID_WITH_MULTIPLE_DRAFT_ANGLES? {	// [192]
      return self.complexEntity.entityReference(eEXTRUDED_FACE_SOLID_WITH_MULTIPLE_DRAFT_ANGLES.self)
    }

    public var sub_eEXTRUDED_FACE_SOLID_WITH_DRAFT_ANGLE: eEXTRUDED_FACE_SOLID_WITH_DRAFT_ANGLE? {	// [193]
      return self.complexEntity.entityReference(eEXTRUDED_FACE_SOLID_WITH_DRAFT_ANGLE.self)
    }

    public var sub_eEXTRUDED_FACE_SOLID_WITH_TRIM_CONDITIONS: eEXTRUDED_FACE_SOLID_WITH_TRIM_CONDITIONS? {	// [194]
      return self.complexEntity.entityReference(eEXTRUDED_FACE_SOLID_WITH_TRIM_CONDITIONS.self)
    }

    public var sub_eEXTRUDED_FACE_SOLID: eEXTRUDED_FACE_SOLID? {	// [195]
      return self.complexEntity.entityReference(eEXTRUDED_FACE_SOLID.self)
    }

    public var sub_eSWEPT_FACE_SOLID: eSWEPT_FACE_SOLID? {	// [196]
      return self.complexEntity.entityReference(eSWEPT_FACE_SOLID.self)
    }

    public var sub_eSOLID_MODEL: eSOLID_MODEL? {	// [197]
      return self.complexEntity.entityReference(eSOLID_MODEL.self)
    }

    public var sub_eCARTESIAN_11: eCARTESIAN_11? {	// [198]
      return self.complexEntity.entityReference(eCARTESIAN_11.self)
    }

    public var sub_eBOOLEAN_RESULT_2D: eBOOLEAN_RESULT_2D? {	// [199]
      return self.complexEntity.entityReference(eBOOLEAN_RESULT_2D.self)
    }

    public var sub_eBOOLEAN_RESULT: eBOOLEAN_RESULT? {	// [200]
      return self.complexEntity.entityReference(eBOOLEAN_RESULT.self)
    }

    public var sub_eDEFINED_SYMBOL: eDEFINED_SYMBOL? {	// [201]
      return self.complexEntity.entityReference(eDEFINED_SYMBOL.self)
    }

    public var sub_eCAMERA_MODEL_D3_MULTI_CLIPPING_INTERSECTION: eCAMERA_MODEL_D3_MULTI_CLIPPING_INTERSECTION? {	// [202]
      return self.complexEntity.entityReference(eCAMERA_MODEL_D3_MULTI_CLIPPING_INTERSECTION.self)
    }

    public var sub_eRIGHT_ANGULAR_WEDGE: eRIGHT_ANGULAR_WEDGE? {	// [203]
      return self.complexEntity.entityReference(eRIGHT_ANGULAR_WEDGE.self)
    }

    public var sub_ePAIR_REPRESENTATION_RELATIONSHIP: ePAIR_REPRESENTATION_RELATIONSHIP? {	// [204]
      return self.complexEntity.entityReference(ePAIR_REPRESENTATION_RELATIONSHIP.self)
    }

    public var sub_eAXIS1_PLACEMENT: eAXIS1_PLACEMENT? {	// [205]
      return self.complexEntity.entityReference(eAXIS1_PLACEMENT.self)
    }

    public var sub_eAXIS2_PLACEMENT_3D: eAXIS2_PLACEMENT_3D? {	// [206]
      return self.complexEntity.entityReference(eAXIS2_PLACEMENT_3D.self)
    }

    public var sub_eAXIS2_PLACEMENT_2D: eAXIS2_PLACEMENT_2D? {	// [207]
      return self.complexEntity.entityReference(eAXIS2_PLACEMENT_2D.self)
    }

    public var sub_ePLACEMENT: ePLACEMENT? {	// [208]
      return self.complexEntity.entityReference(ePLACEMENT.self)
    }

    public var sub_eCLOTHOID: eCLOTHOID? {	// [209]
      return self.complexEntity.entityReference(eCLOTHOID.self)
    }

    public var sub_eHYPERBOLA: eHYPERBOLA? {	// [210]
      return self.complexEntity.entityReference(eHYPERBOLA.self)
    }

    public var sub_eELLIPSE: eELLIPSE? {	// [211]
      return self.complexEntity.entityReference(eELLIPSE.self)
    }

    public var sub_eCIRCLE: eCIRCLE? {	// [212]
      return self.complexEntity.entityReference(eCIRCLE.self)
    }

    public var sub_ePARABOLA: ePARABOLA? {	// [213]
      return self.complexEntity.entityReference(ePARABOLA.self)
    }

    public var sub_eCONIC: eCONIC? {	// [214]
      return self.complexEntity.entityReference(eCONIC.self)
    }

    public var sub_eCURVE_REPLICA: eCURVE_REPLICA? {	// [215]
      return self.complexEntity.entityReference(eCURVE_REPLICA.self)
    }

    public var sub_eBOUNDED_SURFACE_CURVE: eBOUNDED_SURFACE_CURVE? {	// [216]
      return self.complexEntity.entityReference(eBOUNDED_SURFACE_CURVE.self)
    }

    public var sub_eSEAM_CURVE: eSEAM_CURVE? {	// [217]
      return self.complexEntity.entityReference(eSEAM_CURVE.self)
    }

    public var sub_eINTERSECTION_CURVE: eINTERSECTION_CURVE? {	// [218]
      return self.complexEntity.entityReference(eINTERSECTION_CURVE.self)
    }

    public var sub_eSURFACE_CURVE: eSURFACE_CURVE? {	// [219]
      return self.complexEntity.entityReference(eSURFACE_CURVE.self)
    }

    public var sub_eLINE: eLINE? {	// [220]
      return self.complexEntity.entityReference(eLINE.self)
    }

    public var sub_eCIRCULAR_INVOLUTE: eCIRCULAR_INVOLUTE? {	// [221]
      return self.complexEntity.entityReference(eCIRCULAR_INVOLUTE.self)
    }

    public var sub_eBOUNDED_PCURVE: eBOUNDED_PCURVE? {	// [222]
      return self.complexEntity.entityReference(eBOUNDED_PCURVE.self)
    }

    public var sub_ePCURVE: ePCURVE? {	// [223]
      return self.complexEntity.entityReference(ePCURVE.self)
    }

    public var sub_eOFFSET_CURVE_2D: eOFFSET_CURVE_2D? {	// [224]
      return self.complexEntity.entityReference(eOFFSET_CURVE_2D.self)
    }

    public var sub_eOFFSET_CURVE_3D: eOFFSET_CURVE_3D? {	// [225]
      return self.complexEntity.entityReference(eOFFSET_CURVE_3D.self)
    }

    public var sub_eOUTER_BOUNDARY_CURVE: eOUTER_BOUNDARY_CURVE? {	// [226]
      return self.complexEntity.entityReference(eOUTER_BOUNDARY_CURVE.self)
    }

    public var sub_eBOUNDARY_CURVE: eBOUNDARY_CURVE? {	// [227]
      return self.complexEntity.entityReference(eBOUNDARY_CURVE.self)
    }

    public var sub_eCOMPOSITE_CURVE_ON_SURFACE: eCOMPOSITE_CURVE_ON_SURFACE? {	// [228]
      return self.complexEntity.entityReference(eCOMPOSITE_CURVE_ON_SURFACE.self)
    }

    public var sub_eCOMPOSITE_CURVE: eCOMPOSITE_CURVE? {	// [229]
      return self.complexEntity.entityReference(eCOMPOSITE_CURVE.self)
    }

    public var sub_ePOLYLINE: ePOLYLINE? {	// [230]
      return self.complexEntity.entityReference(ePOLYLINE.self)
    }

    public var sub_eTRIMMED_CURVE: eTRIMMED_CURVE? {	// [231]
      return self.complexEntity.entityReference(eTRIMMED_CURVE.self)
    }

    public var sub_eBEZIER_CURVE: eBEZIER_CURVE? {	// [232]
      return self.complexEntity.entityReference(eBEZIER_CURVE.self)
    }

    public var sub_eB_SPLINE_CURVE_WITH_KNOTS: eB_SPLINE_CURVE_WITH_KNOTS? {	// [233]
      return self.complexEntity.entityReference(eB_SPLINE_CURVE_WITH_KNOTS.self)
    }

    public var sub_eRATIONAL_B_SPLINE_CURVE: eRATIONAL_B_SPLINE_CURVE? {	// [234]
      return self.complexEntity.entityReference(eRATIONAL_B_SPLINE_CURVE.self)
    }

    public var sub_eUNIFORM_CURVE: eUNIFORM_CURVE? {	// [235]
      return self.complexEntity.entityReference(eUNIFORM_CURVE.self)
    }

    public var sub_eQUASI_UNIFORM_CURVE: eQUASI_UNIFORM_CURVE? {	// [236]
      return self.complexEntity.entityReference(eQUASI_UNIFORM_CURVE.self)
    }

    public var sub_eB_SPLINE_CURVE: eB_SPLINE_CURVE? {	// [237]
      return self.complexEntity.entityReference(eB_SPLINE_CURVE.self)
    }

    public var sub_eRATIONAL_LOCALLY_REFINED_SPLINE_CURVE: eRATIONAL_LOCALLY_REFINED_SPLINE_CURVE? {	// [238]
      return self.complexEntity.entityReference(eRATIONAL_LOCALLY_REFINED_SPLINE_CURVE.self)
    }

    public var sub_eLOCALLY_REFINED_SPLINE_CURVE: eLOCALLY_REFINED_SPLINE_CURVE? {	// [239]
      return self.complexEntity.entityReference(eLOCALLY_REFINED_SPLINE_CURVE.self)
    }

    public var sub_eBOUNDED_CURVE: eBOUNDED_CURVE? {	// [240]
      return self.complexEntity.entityReference(eBOUNDED_CURVE.self)
    }

    public var sub_eCURVE: eCURVE? {	// [241]
      return self.complexEntity.entityReference(eCURVE.self)
    }

    public var sub_eGEAR_PAIR_WITH_RANGE: eGEAR_PAIR_WITH_RANGE? {	// [242]
      return self.complexEntity.entityReference(eGEAR_PAIR_WITH_RANGE.self)
    }

    public var sub_eGEAR_PAIR: eGEAR_PAIR? {	// [243]
      return self.complexEntity.entityReference(eGEAR_PAIR.self)
    }

    public var sub_eLINEAR_FLEXIBLE_AND_PINION_PAIR: eLINEAR_FLEXIBLE_AND_PINION_PAIR? {	// [244]
      return self.complexEntity.entityReference(eLINEAR_FLEXIBLE_AND_PINION_PAIR.self)
    }

    public var sub_eRACK_AND_PINION_PAIR_WITH_RANGE: eRACK_AND_PINION_PAIR_WITH_RANGE? {	// [245]
      return self.complexEntity.entityReference(eRACK_AND_PINION_PAIR_WITH_RANGE.self)
    }

    public var sub_eRACK_AND_PINION_PAIR: eRACK_AND_PINION_PAIR? {	// [246]
      return self.complexEntity.entityReference(eRACK_AND_PINION_PAIR.self)
    }

    public var sub_eSCREW_PAIR_WITH_RANGE: eSCREW_PAIR_WITH_RANGE? {	// [247]
      return self.complexEntity.entityReference(eSCREW_PAIR_WITH_RANGE.self)
    }

    public var sub_eSCREW_PAIR: eSCREW_PAIR? {	// [248]
      return self.complexEntity.entityReference(eSCREW_PAIR.self)
    }

    public var sub_eLOW_ORDER_KINEMATIC_PAIR_WITH_MOTION_COUPLING: eLOW_ORDER_KINEMATIC_PAIR_WITH_MOTION_COUPLING? {	// [249]
      return self.complexEntity.entityReference(eLOW_ORDER_KINEMATIC_PAIR_WITH_MOTION_COUPLING.self)
    }

    public var sub_eACTUATED_KINEMATIC_PAIR: eACTUATED_KINEMATIC_PAIR? {	// [250]
      return self.complexEntity.entityReference(eACTUATED_KINEMATIC_PAIR.self)
    }

    public var sub_ePOINT_ON_PLANAR_CURVE_PAIR_WITH_RANGE: ePOINT_ON_PLANAR_CURVE_PAIR_WITH_RANGE? {	// [251]
      return self.complexEntity.entityReference(ePOINT_ON_PLANAR_CURVE_PAIR_WITH_RANGE.self)
    }

    public var sub_ePOINT_ON_PLANAR_CURVE_PAIR: ePOINT_ON_PLANAR_CURVE_PAIR? {	// [252]
      return self.complexEntity.entityReference(ePOINT_ON_PLANAR_CURVE_PAIR.self)
    }

    public var sub_eSLIDING_CURVE_PAIR: eSLIDING_CURVE_PAIR? {	// [253]
      return self.complexEntity.entityReference(eSLIDING_CURVE_PAIR.self)
    }

    public var sub_eROLLING_CURVE_PAIR: eROLLING_CURVE_PAIR? {	// [254]
      return self.complexEntity.entityReference(eROLLING_CURVE_PAIR.self)
    }

    public var sub_ePLANAR_CURVE_PAIR_RANGE: ePLANAR_CURVE_PAIR_RANGE? {	// [255]
      return self.complexEntity.entityReference(ePLANAR_CURVE_PAIR_RANGE.self)
    }

    public var sub_ePLANAR_CURVE_PAIR: ePLANAR_CURVE_PAIR? {	// [256]
      return self.complexEntity.entityReference(ePLANAR_CURVE_PAIR.self)
    }

    public var sub_eLINEAR_FLEXIBLE_AND_PLANAR_CURVE_PAIR: eLINEAR_FLEXIBLE_AND_PLANAR_CURVE_PAIR? {	// [257]
      return self.complexEntity.entityReference(eLINEAR_FLEXIBLE_AND_PLANAR_CURVE_PAIR.self)
    }

    public var sub_ePOINT_ON_SURFACE_PAIR_WITH_RANGE: ePOINT_ON_SURFACE_PAIR_WITH_RANGE? {	// [258]
      return self.complexEntity.entityReference(ePOINT_ON_SURFACE_PAIR_WITH_RANGE.self)
    }

    public var sub_ePOINT_ON_SURFACE_PAIR: ePOINT_ON_SURFACE_PAIR? {	// [259]
      return self.complexEntity.entityReference(ePOINT_ON_SURFACE_PAIR.self)
    }

    public var sub_eSURFACE_PAIR_WITH_RANGE: eSURFACE_PAIR_WITH_RANGE? {	// [260]
      return self.complexEntity.entityReference(eSURFACE_PAIR_WITH_RANGE.self)
    }

    public var sub_eROLLING_SURFACE_PAIR: eROLLING_SURFACE_PAIR? {	// [261]
      return self.complexEntity.entityReference(eROLLING_SURFACE_PAIR.self)
    }

    public var sub_eSLIDING_SURFACE_PAIR: eSLIDING_SURFACE_PAIR? {	// [262]
      return self.complexEntity.entityReference(eSLIDING_SURFACE_PAIR.self)
    }

    public var sub_eSURFACE_PAIR: eSURFACE_PAIR? {	// [263]
      return self.complexEntity.entityReference(eSURFACE_PAIR.self)
    }

    public var sub_eHIGH_ORDER_KINEMATIC_PAIR: eHIGH_ORDER_KINEMATIC_PAIR? {	// [264]
      return self.complexEntity.entityReference(eHIGH_ORDER_KINEMATIC_PAIR.self)
    }

    public var sub_ePLANAR_PAIR_WITH_RANGE: ePLANAR_PAIR_WITH_RANGE? {	// [265]
      return self.complexEntity.entityReference(ePLANAR_PAIR_WITH_RANGE.self)
    }

    public var sub_ePLANAR_PAIR: ePLANAR_PAIR? {	// [266]
      return self.complexEntity.entityReference(ePLANAR_PAIR.self)
    }

    public var sub_eREVOLUTE_PAIR_WITH_RANGE: eREVOLUTE_PAIR_WITH_RANGE? {	// [267]
      return self.complexEntity.entityReference(eREVOLUTE_PAIR_WITH_RANGE.self)
    }

    public var sub_eREVOLUTE_PAIR: eREVOLUTE_PAIR? {	// [268]
      return self.complexEntity.entityReference(eREVOLUTE_PAIR.self)
    }

    public var sub_eCYLINDRICAL_PAIR_WITH_RANGE: eCYLINDRICAL_PAIR_WITH_RANGE? {	// [269]
      return self.complexEntity.entityReference(eCYLINDRICAL_PAIR_WITH_RANGE.self)
    }

    public var sub_eCYLINDRICAL_PAIR: eCYLINDRICAL_PAIR? {	// [270]
      return self.complexEntity.entityReference(eCYLINDRICAL_PAIR.self)
    }

    public var sub_eSPHERICAL_PAIR_WITH_RANGE: eSPHERICAL_PAIR_WITH_RANGE? {	// [271]
      return self.complexEntity.entityReference(eSPHERICAL_PAIR_WITH_RANGE.self)
    }

    public var sub_eSPHERICAL_PAIR: eSPHERICAL_PAIR? {	// [272]
      return self.complexEntity.entityReference(eSPHERICAL_PAIR.self)
    }

    public var sub_eFULLY_CONSTRAINED_PAIR: eFULLY_CONSTRAINED_PAIR? {	// [273]
      return self.complexEntity.entityReference(eFULLY_CONSTRAINED_PAIR.self)
    }

    public var sub_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE: eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE? {	// [274]
      return self.complexEntity.entityReference(eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE.self)
    }

    public var sub_eHOMOKINETIC_PAIR: eHOMOKINETIC_PAIR? {	// [275]
      return self.complexEntity.entityReference(eHOMOKINETIC_PAIR.self)
    }

    public var sub_eUNIVERSAL_PAIR_WITH_RANGE: eUNIVERSAL_PAIR_WITH_RANGE? {	// [276]
      return self.complexEntity.entityReference(eUNIVERSAL_PAIR_WITH_RANGE.self)
    }

    public var sub_eUNIVERSAL_PAIR: eUNIVERSAL_PAIR? {	// [277]
      return self.complexEntity.entityReference(eUNIVERSAL_PAIR.self)
    }

    public var sub_eSPHERICAL_PAIR_WITH_PIN_AND_RANGE: eSPHERICAL_PAIR_WITH_PIN_AND_RANGE? {	// [278]
      return self.complexEntity.entityReference(eSPHERICAL_PAIR_WITH_PIN_AND_RANGE.self)
    }

    public var sub_eSPHERICAL_PAIR_WITH_PIN: eSPHERICAL_PAIR_WITH_PIN? {	// [279]
      return self.complexEntity.entityReference(eSPHERICAL_PAIR_WITH_PIN.self)
    }

    public var sub_eUNCONSTRAINED_PAIR: eUNCONSTRAINED_PAIR? {	// [280]
      return self.complexEntity.entityReference(eUNCONSTRAINED_PAIR.self)
    }

    public var sub_ePRISMATIC_PAIR_WITH_RANGE: ePRISMATIC_PAIR_WITH_RANGE? {	// [281]
      return self.complexEntity.entityReference(ePRISMATIC_PAIR_WITH_RANGE.self)
    }

    public var sub_ePRISMATIC_PAIR: ePRISMATIC_PAIR? {	// [282]
      return self.complexEntity.entityReference(ePRISMATIC_PAIR.self)
    }

    public var sub_eLOW_ORDER_KINEMATIC_PAIR: eLOW_ORDER_KINEMATIC_PAIR? {	// [283]
      return self.complexEntity.entityReference(eLOW_ORDER_KINEMATIC_PAIR.self)
    }

    public var sub_eKINEMATIC_PAIR: eKINEMATIC_PAIR? {	// [284]
      return self.complexEntity.entityReference(eKINEMATIC_PAIR.self)
    }

    public var sub_eCARTESIAN_TRANSFORMATION_OPERATOR_3D: eCARTESIAN_TRANSFORMATION_OPERATOR_3D? {	// [285]
      return self.complexEntity.entityReference(eCARTESIAN_TRANSFORMATION_OPERATOR_3D.self)
    }

    public var sub_eCARTESIAN_TRANSFORMATION_OPERATOR_2D: eCARTESIAN_TRANSFORMATION_OPERATOR_2D? {	// [286]
      return self.complexEntity.entityReference(eCARTESIAN_TRANSFORMATION_OPERATOR_2D.self)
    }

    public var sub_eCARTESIAN_TRANSFORMATION_OPERATOR: eCARTESIAN_TRANSFORMATION_OPERATOR? {	// [287]
      return self.complexEntity.entityReference(eCARTESIAN_TRANSFORMATION_OPERATOR.self)
    }

    public var sub_eSYMMETRY_GEOMETRIC_CONSTRAINT: eSYMMETRY_GEOMETRIC_CONSTRAINT? {	// [288]
      return self.complexEntity.entityReference(eSYMMETRY_GEOMETRIC_CONSTRAINT.self)
    }

    public var sub_eSWEPT_POINT_CURVE_GEOMETRIC_CONSTRAINT: eSWEPT_POINT_CURVE_GEOMETRIC_CONSTRAINT? {	// [289]
      return self.complexEntity.entityReference(eSWEPT_POINT_CURVE_GEOMETRIC_CONSTRAINT.self)
    }

    public var sub_eCOAXIAL_ASSEMBLY_CONSTRAINT: eCOAXIAL_ASSEMBLY_CONSTRAINT? {	// [290]
      return self.complexEntity.entityReference(eCOAXIAL_ASSEMBLY_CONSTRAINT.self)
    }

    public var sub_eCOAXIAL_GEOMETRIC_CONSTRAINT: eCOAXIAL_GEOMETRIC_CONSTRAINT? {	// [291]
      return self.complexEntity.entityReference(eCOAXIAL_GEOMETRIC_CONSTRAINT.self)
    }

    public var sub_eCURVE_SMOOTHNESS_GEOMETRIC_CONSTRAINT: eCURVE_SMOOTHNESS_GEOMETRIC_CONSTRAINT? {	// [292]
      return self.complexEntity.entityReference(eCURVE_SMOOTHNESS_GEOMETRIC_CONSTRAINT.self)
    }

    public var sub_eINCIDENCE_ASSEMBLY_CONSTRAINT: eINCIDENCE_ASSEMBLY_CONSTRAINT? {	// [293]
      return self.complexEntity.entityReference(eINCIDENCE_ASSEMBLY_CONSTRAINT.self)
    }

    public var sub_eINCIDENCE_GEOMETRIC_CONSTRAINT: eINCIDENCE_GEOMETRIC_CONSTRAINT? {	// [294]
      return self.complexEntity.entityReference(eINCIDENCE_GEOMETRIC_CONSTRAINT.self)
    }

    public var sub_eCLGC_WITH_DIMENSION: eCLGC_WITH_DIMENSION? {	// [295]
      return self.complexEntity.entityReference(eCLGC_WITH_DIMENSION.self)
    }

    public var sub_eCURVE_LENGTH_GEOMETRIC_CONSTRAINT: eCURVE_LENGTH_GEOMETRIC_CONSTRAINT? {	// [296]
      return self.complexEntity.entityReference(eCURVE_LENGTH_GEOMETRIC_CONSTRAINT.self)
    }

    public var sub_eSURFACE_SMOOTHNESS_GEOMETRIC_CONSTRAINT: eSURFACE_SMOOTHNESS_GEOMETRIC_CONSTRAINT? {	// [297]
      return self.complexEntity.entityReference(eSURFACE_SMOOTHNESS_GEOMETRIC_CONSTRAINT.self)
    }

    public var sub_eFIXED_CONSTITUENT_ASSEMBLY_CONSTRAINT: eFIXED_CONSTITUENT_ASSEMBLY_CONSTRAINT? {	// [298]
      return self.complexEntity.entityReference(eFIXED_CONSTITUENT_ASSEMBLY_CONSTRAINT.self)
    }

    public var sub_eFIXED_ELEMENT_GEOMETRIC_CONSTRAINT: eFIXED_ELEMENT_GEOMETRIC_CONSTRAINT? {	// [299]
      return self.complexEntity.entityReference(eFIXED_ELEMENT_GEOMETRIC_CONSTRAINT.self)
    }

    public var sub_eANGLE_ASSEMBLY_CONSTRAINT_WITH_DIMENSION: eANGLE_ASSEMBLY_CONSTRAINT_WITH_DIMENSION? {	// [300]
      return self.complexEntity.entityReference(eANGLE_ASSEMBLY_CONSTRAINT_WITH_DIMENSION.self)
    }

    public var sub_eAGC_WITH_DIMENSION: eAGC_WITH_DIMENSION? {	// [301]
      return self.complexEntity.entityReference(eAGC_WITH_DIMENSION.self)
    }

    public var sub_eANGLE_GEOMETRIC_CONSTRAINT: eANGLE_GEOMETRIC_CONSTRAINT? {	// [302]
      return self.complexEntity.entityReference(eANGLE_GEOMETRIC_CONSTRAINT.self)
    }

    public var sub_ePERPENDICULAR_ASSEMBLY_CONSTRAINT: ePERPENDICULAR_ASSEMBLY_CONSTRAINT? {	// [303]
      return self.complexEntity.entityReference(ePERPENDICULAR_ASSEMBLY_CONSTRAINT.self)
    }

    public var sub_ePERPENDICULAR_GEOMETRIC_CONSTRAINT: ePERPENDICULAR_GEOMETRIC_CONSTRAINT? {	// [304]
      return self.complexEntity.entityReference(ePERPENDICULAR_GEOMETRIC_CONSTRAINT.self)
    }

    public var sub_ePOGC_WITH_DIMENSION: ePOGC_WITH_DIMENSION? {	// [305]
      return self.complexEntity.entityReference(ePOGC_WITH_DIMENSION.self)
    }

    public var sub_ePARALLEL_OFFSET_GEOMETRIC_CONSTRAINT: ePARALLEL_OFFSET_GEOMETRIC_CONSTRAINT? {	// [306]
      return self.complexEntity.entityReference(ePARALLEL_OFFSET_GEOMETRIC_CONSTRAINT.self)
    }

    public var sub_eSURFACE_DISTANCE_ASSEMBLY_CONSTRAINT_WITH_DIMENSION: eSURFACE_DISTANCE_ASSEMBLY_CONSTRAINT_WITH_DIMENSION? {	// [307]
      return self.complexEntity.entityReference(eSURFACE_DISTANCE_ASSEMBLY_CONSTRAINT_WITH_DIMENSION.self)
    }

    public var sub_eSDGC_WITH_DIMENSION: eSDGC_WITH_DIMENSION? {	// [308]
      return self.complexEntity.entityReference(eSDGC_WITH_DIMENSION.self)
    }

    public var sub_eSURFACE_DISTANCE_GEOMETRIC_CONSTRAINT: eSURFACE_DISTANCE_GEOMETRIC_CONSTRAINT? {	// [309]
      return self.complexEntity.entityReference(eSURFACE_DISTANCE_GEOMETRIC_CONSTRAINT.self)
    }

    public var sub_ePARALLEL_ASSEMBLY_CONSTRAINT_WITH_DIMENSION: ePARALLEL_ASSEMBLY_CONSTRAINT_WITH_DIMENSION? {	// [310]
      return self.complexEntity.entityReference(ePARALLEL_ASSEMBLY_CONSTRAINT_WITH_DIMENSION.self)
    }

    public var sub_ePARALLEL_ASSEMBLY_CONSTRAINT: ePARALLEL_ASSEMBLY_CONSTRAINT? {	// [311]
      return self.complexEntity.entityReference(ePARALLEL_ASSEMBLY_CONSTRAINT.self)
    }

    public var sub_ePGC_WITH_DIMENSION: ePGC_WITH_DIMENSION? {	// [312]
      return self.complexEntity.entityReference(ePGC_WITH_DIMENSION.self)
    }

    public var sub_ePARALLEL_GEOMETRIC_CONSTRAINT: ePARALLEL_GEOMETRIC_CONSTRAINT? {	// [313]
      return self.complexEntity.entityReference(ePARALLEL_GEOMETRIC_CONSTRAINT.self)
    }

    public var sub_ePDGC_WITH_DIMENSION: ePDGC_WITH_DIMENSION? {	// [314]
      return self.complexEntity.entityReference(ePDGC_WITH_DIMENSION.self)
    }

    public var sub_ePOINT_DISTANCE_GEOMETRIC_CONSTRAINT: ePOINT_DISTANCE_GEOMETRIC_CONSTRAINT? {	// [315]
      return self.complexEntity.entityReference(ePOINT_DISTANCE_GEOMETRIC_CONSTRAINT.self)
    }

    public var sub_eRGC_WITH_DIMENSION: eRGC_WITH_DIMENSION? {	// [316]
      return self.complexEntity.entityReference(eRGC_WITH_DIMENSION.self)
    }

    public var sub_eRADIUS_GEOMETRIC_CONSTRAINT: eRADIUS_GEOMETRIC_CONSTRAINT? {	// [317]
      return self.complexEntity.entityReference(eRADIUS_GEOMETRIC_CONSTRAINT.self)
    }

    public var sub_eSKEW_LINE_DISTANCE_GEOMETRIC_CONSTRAINT: eSKEW_LINE_DISTANCE_GEOMETRIC_CONSTRAINT? {	// [318]
      return self.complexEntity.entityReference(eSKEW_LINE_DISTANCE_GEOMETRIC_CONSTRAINT.self)
    }

    public var sub_eCDGC_WITH_DIMENSION: eCDGC_WITH_DIMENSION? {	// [319]
      return self.complexEntity.entityReference(eCDGC_WITH_DIMENSION.self)
    }

    public var sub_eCURVE_DISTANCE_GEOMETRIC_CONSTRAINT: eCURVE_DISTANCE_GEOMETRIC_CONSTRAINT? {	// [320]
      return self.complexEntity.entityReference(eCURVE_DISTANCE_GEOMETRIC_CONSTRAINT.self)
    }

    public var sub_eTANGENT_ASSEMBLY_CONSTRAINT: eTANGENT_ASSEMBLY_CONSTRAINT? {	// [321]
      return self.complexEntity.entityReference(eTANGENT_ASSEMBLY_CONSTRAINT.self)
    }

    public var sub_eTANGENT_GEOMETRIC_CONSTRAINT: eTANGENT_GEOMETRIC_CONSTRAINT? {	// [322]
      return self.complexEntity.entityReference(eTANGENT_GEOMETRIC_CONSTRAINT.self)
    }

    public var sub_eSWEPT_CURVE_SURFACE_GEOMETRIC_CONSTRAINT: eSWEPT_CURVE_SURFACE_GEOMETRIC_CONSTRAINT? {	// [323]
      return self.complexEntity.entityReference(eSWEPT_CURVE_SURFACE_GEOMETRIC_CONSTRAINT.self)
    }

    public var sub_eEXPLICIT_GEOMETRIC_CONSTRAINT: eEXPLICIT_GEOMETRIC_CONSTRAINT? {	// [324]
      return self.complexEntity.entityReference(eEXPLICIT_GEOMETRIC_CONSTRAINT.self)
    }

    public var sub_eRECTANGULAR_PYRAMID: eRECTANGULAR_PYRAMID? {	// [325]
      return self.complexEntity.entityReference(eRECTANGULAR_PYRAMID.self)
    }

    public var sub_eVERTEX_POINT: eVERTEX_POINT? {	// [326]
      return self.complexEntity.entityReference(eVERTEX_POINT.self)
    }

    public var sub_eEXTERNALLY_DEFINED_HATCH_STYLE: eEXTERNALLY_DEFINED_HATCH_STYLE? {	// [327]
      return self.complexEntity.entityReference(eEXTERNALLY_DEFINED_HATCH_STYLE.self)
    }

    public var sub_eREPOSITIONED_NEUTRAL_SKETCH: eREPOSITIONED_NEUTRAL_SKETCH? {	// [328]
      return self.complexEntity.entityReference(eREPOSITIONED_NEUTRAL_SKETCH.self)
    }

    public var sub_eCURVE_11: eCURVE_11? {	// [329]
      return self.complexEntity.entityReference(eCURVE_11.self)
    }

    public var sub_eORIENTED_SURFACE: eORIENTED_SURFACE? {	// [330]
      return self.complexEntity.entityReference(eORIENTED_SURFACE.self)
    }

    public var sub_eSURFACE_REPLICA: eSURFACE_REPLICA? {	// [331]
      return self.complexEntity.entityReference(eSURFACE_REPLICA.self)
    }

    public var sub_eRECTANGULAR_COMPOSITE_SURFACE: eRECTANGULAR_COMPOSITE_SURFACE? {	// [332]
      return self.complexEntity.entityReference(eRECTANGULAR_COMPOSITE_SURFACE.self)
    }

    public var sub_eB_SPLINE_SURFACE_WITH_KNOTS: eB_SPLINE_SURFACE_WITH_KNOTS? {	// [333]
      return self.complexEntity.entityReference(eB_SPLINE_SURFACE_WITH_KNOTS.self)
    }

    public var sub_eQUASI_UNIFORM_SURFACE: eQUASI_UNIFORM_SURFACE? {	// [334]
      return self.complexEntity.entityReference(eQUASI_UNIFORM_SURFACE.self)
    }

    public var sub_eUNIFORM_SURFACE: eUNIFORM_SURFACE? {	// [335]
      return self.complexEntity.entityReference(eUNIFORM_SURFACE.self)
    }

    public var sub_eBEZIER_SURFACE: eBEZIER_SURFACE? {	// [336]
      return self.complexEntity.entityReference(eBEZIER_SURFACE.self)
    }

    public var sub_eRATIONAL_B_SPLINE_SURFACE: eRATIONAL_B_SPLINE_SURFACE? {	// [337]
      return self.complexEntity.entityReference(eRATIONAL_B_SPLINE_SURFACE.self)
    }

    public var sub_eB_SPLINE_SURFACE: eB_SPLINE_SURFACE? {	// [338]
      return self.complexEntity.entityReference(eB_SPLINE_SURFACE.self)
    }

    public var sub_eRECTANGULAR_TRIMMED_SURFACE: eRECTANGULAR_TRIMMED_SURFACE? {	// [339]
      return self.complexEntity.entityReference(eRECTANGULAR_TRIMMED_SURFACE.self)
    }

    public var sub_eCURVE_BOUNDED_SURFACE: eCURVE_BOUNDED_SURFACE? {	// [340]
      return self.complexEntity.entityReference(eCURVE_BOUNDED_SURFACE.self)
    }

    public var sub_eRATIONAL_LOCALLY_REFINED_SPLINE_SURFACE: eRATIONAL_LOCALLY_REFINED_SPLINE_SURFACE? {	// [341]
      return self.complexEntity.entityReference(eRATIONAL_LOCALLY_REFINED_SPLINE_SURFACE.self)
    }

    public var sub_eLOCALLY_REFINED_SPLINE_SURFACE: eLOCALLY_REFINED_SPLINE_SURFACE? {	// [342]
      return self.complexEntity.entityReference(eLOCALLY_REFINED_SPLINE_SURFACE.self)
    }

    public var sub_eBOUNDED_SURFACE: eBOUNDED_SURFACE? {	// [343]
      return self.complexEntity.entityReference(eBOUNDED_SURFACE.self)
    }

    public var sub_eDEGENERATE_TOROIDAL_SURFACE: eDEGENERATE_TOROIDAL_SURFACE? {	// [344]
      return self.complexEntity.entityReference(eDEGENERATE_TOROIDAL_SURFACE.self)
    }

    public var sub_eTOROIDAL_SURFACE: eTOROIDAL_SURFACE? {	// [345]
      return self.complexEntity.entityReference(eTOROIDAL_SURFACE.self)
    }

    public var sub_eSPHERICAL_SURFACE: eSPHERICAL_SURFACE? {	// [346]
      return self.complexEntity.entityReference(eSPHERICAL_SURFACE.self)
    }

    public var sub_ePLANE: ePLANE? {	// [347]
      return self.complexEntity.entityReference(ePLANE.self)
    }

    public var sub_eCYLINDRICAL_SURFACE: eCYLINDRICAL_SURFACE? {	// [348]
      return self.complexEntity.entityReference(eCYLINDRICAL_SURFACE.self)
    }

    public var sub_eCONICAL_SURFACE: eCONICAL_SURFACE? {	// [349]
      return self.complexEntity.entityReference(eCONICAL_SURFACE.self)
    }

    public var sub_eDUPIN_CYCLIDE_SURFACE: eDUPIN_CYCLIDE_SURFACE? {	// [350]
      return self.complexEntity.entityReference(eDUPIN_CYCLIDE_SURFACE.self)
    }

    public var sub_eELEMENTARY_SURFACE: eELEMENTARY_SURFACE? {	// [351]
      return self.complexEntity.entityReference(eELEMENTARY_SURFACE.self)
    }

    public var sub_eSURFACE_OF_REVOLUTION: eSURFACE_OF_REVOLUTION? {	// [352]
      return self.complexEntity.entityReference(eSURFACE_OF_REVOLUTION.self)
    }

    public var sub_eSURFACE_OF_LINEAR_EXTRUSION: eSURFACE_OF_LINEAR_EXTRUSION? {	// [353]
      return self.complexEntity.entityReference(eSURFACE_OF_LINEAR_EXTRUSION.self)
    }

    public var sub_eSURFACE_CURVE_SWEPT_SURFACE: eSURFACE_CURVE_SWEPT_SURFACE? {	// [354]
      return self.complexEntity.entityReference(eSURFACE_CURVE_SWEPT_SURFACE.self)
    }

    public var sub_eFIXED_REFERENCE_SWEPT_SURFACE: eFIXED_REFERENCE_SWEPT_SURFACE? {	// [355]
      return self.complexEntity.entityReference(eFIXED_REFERENCE_SWEPT_SURFACE.self)
    }

    public var sub_eSWEPT_SURFACE: eSWEPT_SURFACE? {	// [356]
      return self.complexEntity.entityReference(eSWEPT_SURFACE.self)
    }

    public var sub_eOFFSET_SURFACE: eOFFSET_SURFACE? {	// [357]
      return self.complexEntity.entityReference(eOFFSET_SURFACE.self)
    }

    public var sub_eSURFACE: eSURFACE? {	// [358]
      return self.complexEntity.entityReference(eSURFACE.self)
    }

    public var sub_eBOXED_HALF_SPACE: eBOXED_HALF_SPACE? {	// [359]
      return self.complexEntity.entityReference(eBOXED_HALF_SPACE.self)
    }

    public var sub_eHALF_SPACE_SOLID: eHALF_SPACE_SOLID? {	// [360]
      return self.complexEntity.entityReference(eHALF_SPACE_SOLID.self)
    }

    public var sub_eTORUS: eTORUS? {	// [361]
      return self.complexEntity.entityReference(eTORUS.self)
    }

    public var sub_eHEXAHEDRON_VOLUME: eHEXAHEDRON_VOLUME? {	// [362]
      return self.complexEntity.entityReference(eHEXAHEDRON_VOLUME.self)
    }

    public var sub_eWEDGE_VOLUME: eWEDGE_VOLUME? {	// [363]
      return self.complexEntity.entityReference(eWEDGE_VOLUME.self)
    }

    public var sub_eTOROIDAL_VOLUME: eTOROIDAL_VOLUME? {	// [364]
      return self.complexEntity.entityReference(eTOROIDAL_VOLUME.self)
    }

    public var sub_eRATIONAL_LOCALLY_REFINED_SPLINE_VOLUME: eRATIONAL_LOCALLY_REFINED_SPLINE_VOLUME? {	// [365]
      return self.complexEntity.entityReference(eRATIONAL_LOCALLY_REFINED_SPLINE_VOLUME.self)
    }

    public var sub_eLOCALLY_REFINED_SPLINE_VOLUME: eLOCALLY_REFINED_SPLINE_VOLUME? {	// [366]
      return self.complexEntity.entityReference(eLOCALLY_REFINED_SPLINE_VOLUME.self)
    }

    public var sub_ePYRAMID_VOLUME: ePYRAMID_VOLUME? {	// [367]
      return self.complexEntity.entityReference(ePYRAMID_VOLUME.self)
    }

    public var sub_eSPHERICAL_VOLUME: eSPHERICAL_VOLUME? {	// [368]
      return self.complexEntity.entityReference(eSPHERICAL_VOLUME.self)
    }

    public var sub_eCYLINDRICAL_VOLUME: eCYLINDRICAL_VOLUME? {	// [369]
      return self.complexEntity.entityReference(eCYLINDRICAL_VOLUME.self)
    }

    public var sub_eBLOCK_VOLUME: eBLOCK_VOLUME? {	// [370]
      return self.complexEntity.entityReference(eBLOCK_VOLUME.self)
    }

    public var sub_eB_SPLINE_VOLUME_WITH_KNOTS: eB_SPLINE_VOLUME_WITH_KNOTS? {	// [371]
      return self.complexEntity.entityReference(eB_SPLINE_VOLUME_WITH_KNOTS.self)
    }

    public var sub_eRATIONAL_B_SPLINE_VOLUME: eRATIONAL_B_SPLINE_VOLUME? {	// [372]
      return self.complexEntity.entityReference(eRATIONAL_B_SPLINE_VOLUME.self)
    }

    public var sub_eQUASI_UNIFORM_VOLUME: eQUASI_UNIFORM_VOLUME? {	// [373]
      return self.complexEntity.entityReference(eQUASI_UNIFORM_VOLUME.self)
    }

    public var sub_eUNIFORM_VOLUME: eUNIFORM_VOLUME? {	// [374]
      return self.complexEntity.entityReference(eUNIFORM_VOLUME.self)
    }

    public var sub_eBEZIER_VOLUME: eBEZIER_VOLUME? {	// [375]
      return self.complexEntity.entityReference(eBEZIER_VOLUME.self)
    }

    public var sub_eB_SPLINE_VOLUME: eB_SPLINE_VOLUME? {	// [376]
      return self.complexEntity.entityReference(eB_SPLINE_VOLUME.self)
    }

    public var sub_eECCENTRIC_CONICAL_VOLUME: eECCENTRIC_CONICAL_VOLUME? {	// [377]
      return self.complexEntity.entityReference(eECCENTRIC_CONICAL_VOLUME.self)
    }

    public var sub_eELLIPSOID_VOLUME: eELLIPSOID_VOLUME? {	// [378]
      return self.complexEntity.entityReference(eELLIPSOID_VOLUME.self)
    }

    public var sub_eTETRAHEDRON_VOLUME: eTETRAHEDRON_VOLUME? {	// [379]
      return self.complexEntity.entityReference(eTETRAHEDRON_VOLUME.self)
    }

    public var sub_eVOLUME: eVOLUME? {	// [380]
      return self.complexEntity.entityReference(eVOLUME.self)
    }

    public var sub_ePOINT_ARRAY: ePOINT_ARRAY? {	// [381]
      return self.complexEntity.entityReference(ePOINT_ARRAY.self)
    }

    public var sub_eELLIPSOID: eELLIPSOID? {	// [382]
      return self.complexEntity.entityReference(eELLIPSOID.self)
    }

    public var sub_eRIGHT_CIRCULAR_CYLINDER: eRIGHT_CIRCULAR_CYLINDER? {	// [383]
      return self.complexEntity.entityReference(eRIGHT_CIRCULAR_CYLINDER.self)
    }

    public var sub_eTWO_DIRECTION_REPEAT_FACTOR: eTWO_DIRECTION_REPEAT_FACTOR? {	// [384]
      return self.complexEntity.entityReference(eTWO_DIRECTION_REPEAT_FACTOR.self)
    }

    public var sub_eONE_DIRECTION_REPEAT_FACTOR: eONE_DIRECTION_REPEAT_FACTOR? {	// [385]
      return self.complexEntity.entityReference(eONE_DIRECTION_REPEAT_FACTOR.self)
    }

    public var sub_eANNOTATION_PLANE: eANNOTATION_PLANE? {	// [386]
      return self.complexEntity.entityReference(eANNOTATION_PLANE.self)
    }

    public var sub_eEVALUATED_DEGENERATE_PCURVE: eEVALUATED_DEGENERATE_PCURVE? {	// [387]
      return self.complexEntity.entityReference(eEVALUATED_DEGENERATE_PCURVE.self)
    }

    public var sub_eDEGENERATE_PCURVE: eDEGENERATE_PCURVE? {	// [388]
      return self.complexEntity.entityReference(eDEGENERATE_PCURVE.self)
    }

    public var sub_ePOINT_ON_FACE_SURFACE: ePOINT_ON_FACE_SURFACE? {	// [389]
      return self.complexEntity.entityReference(ePOINT_ON_FACE_SURFACE.self)
    }

    public var sub_ePOINT_ON_SURFACE: ePOINT_ON_SURFACE? {	// [390]
      return self.complexEntity.entityReference(ePOINT_ON_SURFACE.self)
    }

    public var sub_eSPHERICAL_POINT: eSPHERICAL_POINT? {	// [391]
      return self.complexEntity.entityReference(eSPHERICAL_POINT.self)
    }

    public var sub_eCYLINDRICAL_POINT: eCYLINDRICAL_POINT? {	// [392]
      return self.complexEntity.entityReference(eCYLINDRICAL_POINT.self)
    }

    public var sub_ePOLAR_POINT: ePOLAR_POINT? {	// [393]
      return self.complexEntity.entityReference(ePOLAR_POINT.self)
    }

    public var sub_eCARTESIAN_POINT: eCARTESIAN_POINT? {	// [394]
      return self.complexEntity.entityReference(eCARTESIAN_POINT.self)
    }

    public var sub_ePOINT_IN_VOLUME: ePOINT_IN_VOLUME? {	// [395]
      return self.complexEntity.entityReference(ePOINT_IN_VOLUME.self)
    }

    public var sub_ePOINT_ON_EDGE_CURVE: ePOINT_ON_EDGE_CURVE? {	// [396]
      return self.complexEntity.entityReference(ePOINT_ON_EDGE_CURVE.self)
    }

    public var sub_ePOINT_ON_CURVE: ePOINT_ON_CURVE? {	// [397]
      return self.complexEntity.entityReference(ePOINT_ON_CURVE.self)
    }

    public var sub_ePOINT_REPLICA: ePOINT_REPLICA? {	// [398]
      return self.complexEntity.entityReference(ePOINT_REPLICA.self)
    }

    public var sub_ePOINT: ePOINT? {	// [399]
      return self.complexEntity.entityReference(ePOINT.self)
    }

    public var sub_eSPHERICAL_PAIR_VALUE: eSPHERICAL_PAIR_VALUE? {	// [400]
      return self.complexEntity.entityReference(eSPHERICAL_PAIR_VALUE.self)
    }

    public var sub_eREVOLUTE_PAIR_VALUE: eREVOLUTE_PAIR_VALUE? {	// [401]
      return self.complexEntity.entityReference(eREVOLUTE_PAIR_VALUE.self)
    }

    public var sub_eCYLINDRICAL_PAIR_VALUE: eCYLINDRICAL_PAIR_VALUE? {	// [402]
      return self.complexEntity.entityReference(eCYLINDRICAL_PAIR_VALUE.self)
    }

    public var sub_eSLIDING_SURFACE_PAIR_VALUE: eSLIDING_SURFACE_PAIR_VALUE? {	// [403]
      return self.complexEntity.entityReference(eSLIDING_SURFACE_PAIR_VALUE.self)
    }

    public var sub_eROLLING_SURFACE_PAIR_VALUE: eROLLING_SURFACE_PAIR_VALUE? {	// [404]
      return self.complexEntity.entityReference(eROLLING_SURFACE_PAIR_VALUE.self)
    }

    public var sub_eUNIVERSAL_PAIR_VALUE: eUNIVERSAL_PAIR_VALUE? {	// [405]
      return self.complexEntity.entityReference(eUNIVERSAL_PAIR_VALUE.self)
    }

    public var sub_eLOW_ORDER_KINEMATIC_PAIR_VALUE: eLOW_ORDER_KINEMATIC_PAIR_VALUE? {	// [406]
      return self.complexEntity.entityReference(eLOW_ORDER_KINEMATIC_PAIR_VALUE.self)
    }

    public var sub_ePRISMATIC_PAIR_VALUE: ePRISMATIC_PAIR_VALUE? {	// [407]
      return self.complexEntity.entityReference(ePRISMATIC_PAIR_VALUE.self)
    }

    public var sub_eGEAR_PAIR_VALUE: eGEAR_PAIR_VALUE? {	// [408]
      return self.complexEntity.entityReference(eGEAR_PAIR_VALUE.self)
    }

    public var sub_eROLLING_CURVE_PAIR_VALUE: eROLLING_CURVE_PAIR_VALUE? {	// [409]
      return self.complexEntity.entityReference(eROLLING_CURVE_PAIR_VALUE.self)
    }

    public var sub_eSLIDING_CURVE_PAIR_VALUE: eSLIDING_CURVE_PAIR_VALUE? {	// [410]
      return self.complexEntity.entityReference(eSLIDING_CURVE_PAIR_VALUE.self)
    }

    public var sub_eSCREW_PAIR_VALUE: eSCREW_PAIR_VALUE? {	// [411]
      return self.complexEntity.entityReference(eSCREW_PAIR_VALUE.self)
    }

    public var sub_eUNCONSTRAINED_PAIR_VALUE: eUNCONSTRAINED_PAIR_VALUE? {	// [412]
      return self.complexEntity.entityReference(eUNCONSTRAINED_PAIR_VALUE.self)
    }

    public var sub_ePLANAR_PAIR_VALUE: ePLANAR_PAIR_VALUE? {	// [413]
      return self.complexEntity.entityReference(ePLANAR_PAIR_VALUE.self)
    }

    public var sub_eRACK_AND_PINION_PAIR_VALUE: eRACK_AND_PINION_PAIR_VALUE? {	// [414]
      return self.complexEntity.entityReference(eRACK_AND_PINION_PAIR_VALUE.self)
    }

    public var sub_ePOINT_ON_SURFACE_PAIR_VALUE: ePOINT_ON_SURFACE_PAIR_VALUE? {	// [415]
      return self.complexEntity.entityReference(ePOINT_ON_SURFACE_PAIR_VALUE.self)
    }

    public var sub_ePOINT_ON_PLANAR_CURVE_PAIR_VALUE: ePOINT_ON_PLANAR_CURVE_PAIR_VALUE? {	// [416]
      return self.complexEntity.entityReference(ePOINT_ON_PLANAR_CURVE_PAIR_VALUE.self)
    }

    public var sub_ePAIR_VALUE: ePAIR_VALUE? {	// [417]
      return self.complexEntity.entityReference(ePAIR_VALUE.self)
    }

    public var sub_eDIRECTION: eDIRECTION? {	// [418]
      return self.complexEntity.entityReference(eDIRECTION.self)
    }

    public var sub_ePROCEDURAL_SOLID_REPRESENTATION_SEQUENCE: ePROCEDURAL_SOLID_REPRESENTATION_SEQUENCE? {	// [419]
      return self.complexEntity.entityReference(ePROCEDURAL_SOLID_REPRESENTATION_SEQUENCE.self)
    }

    public var sub_ePROCEDURAL_SHAPE_REPRESENTATION_SEQUENCE: ePROCEDURAL_SHAPE_REPRESENTATION_SEQUENCE? {	// [420]
      return self.complexEntity.entityReference(ePROCEDURAL_SHAPE_REPRESENTATION_SEQUENCE.self)
    }

    public var sub_eFILL_AREA_STYLE_TILES: eFILL_AREA_STYLE_TILES? {	// [421]
      return self.complexEntity.entityReference(eFILL_AREA_STYLE_TILES.self)
    }

    public var sub_eFILL_AREA_STYLE_TILE_COLOURED_REGION: eFILL_AREA_STYLE_TILE_COLOURED_REGION? {	// [422]
      return self.complexEntity.entityReference(eFILL_AREA_STYLE_TILE_COLOURED_REGION.self)
    }

    public var sub_eEDGE_CURVE: eEDGE_CURVE? {	// [423]
      return self.complexEntity.entityReference(eEDGE_CURVE.self)
    }

    public var sub_eSPHERE: eSPHERE? {	// [424]
      return self.complexEntity.entityReference(eSPHERE.self)
    }

    public var sub_eBLOCK: eBLOCK? {	// [425]
      return self.complexEntity.entityReference(eBLOCK.self)
    }

    public var sub_eKINEMATIC_PATH_DEFINED_BY_NODES: eKINEMATIC_PATH_DEFINED_BY_NODES? {	// [426]
      return self.complexEntity.entityReference(eKINEMATIC_PATH_DEFINED_BY_NODES.self)
    }

    public var sub_eKINEMATIC_PATH_DEFINED_BY_CURVES: eKINEMATIC_PATH_DEFINED_BY_CURVES? {	// [427]
      return self.complexEntity.entityReference(eKINEMATIC_PATH_DEFINED_BY_CURVES.self)
    }

    public var sub_eKINEMATIC_PATH: eKINEMATIC_PATH? {	// [428]
      return self.complexEntity.entityReference(eKINEMATIC_PATH.self)
    }

    public var sub_eSU_PARAMETERS: eSU_PARAMETERS? {	// [429]
      return self.complexEntity.entityReference(eSU_PARAMETERS.self)
    }

    public var sub_eRIGID_SUBSKETCH: eRIGID_SUBSKETCH? {	// [430]
      return self.complexEntity.entityReference(eRIGID_SUBSKETCH.self)
    }

    public var sub_eSUBSKETCH: eSUBSKETCH? {	// [431]
      return self.complexEntity.entityReference(eSUBSKETCH.self)
    }

    public var sub_eECCENTRIC_CONE: eECCENTRIC_CONE? {	// [432]
      return self.complexEntity.entityReference(eECCENTRIC_CONE.self)
    }

    public var sub_eMIN_AND_MAJOR_PLY_ORIENTATION_BASIS: eMIN_AND_MAJOR_PLY_ORIENTATION_BASIS? {	// [433]
      return self.complexEntity.entityReference(eMIN_AND_MAJOR_PLY_ORIENTATION_BASIS.self)
    }


    //MARK: ATTRIBUTES
    // CONSTANT_ATTENUATION: (2 AMBIGUOUS REFs)

    // KNOT_V_UPPER: (2 AMBIGUOUS REFs)

    // LOWER_LIMIT_PITCH: (3 AMBIGUOUS REFs)

    // OFFSET_DISTANCE: (2 AMBIGUOUS REFs)

    // MAJOR_RADIUS: (3 AMBIGUOUS REFs)

    // ELEMENTS: (3 AMBIGUOUS REFs)

    // REFERENCE_TO_CURVE: (2 AMBIGUOUS REFs)

    // LTX: (2 AMBIGUOUS REFs)

    // ACTUAL_POINT_ON_CURVE_1: (2 AMBIGUOUS REFs)

    // SHAPE_CLIPPING: (3 AMBIGUOUS REFs)

    // U_B_SPLINES: (2 AMBIGUOUS REFs)

    // SECOND_TRIM_CONDITION: (2 AMBIGUOUS REFs)

    // U_MULTIPLICITIES: (2 AMBIGUOUS REFs)

    // WEIGHTS_DATA: (6 AMBIGUOUS REFs)

    // CONTROL_POINTS_LIST: (6 AMBIGUOUS REFs)

    // FACE1: (2 AMBIGUOUS REFs)

    // ACTUAL_ORIENTATION: (3 AMBIGUOUS REFs)

    // FACE2: (2 AMBIGUOUS REFs)

    // CENTRE: (2 AMBIGUOUS REFs)

    // BASIS_CURVE: (5 AMBIGUOUS REFs)

    // REFERENCE_SURFACE: (2 AMBIGUOUS REFs)

    // OUTER_BOUND: (2 AMBIGUOUS REFs)

    // NORMALS: (3 AMBIGUOUS REFs)

    // LINEARLY_INDEPENDENT: (2 AMBIGUOUS REFs)

    // X_OFFSET: (2 AMBIGUOUS REFs)

    // V_DEGREE: (2 AMBIGUOUS REFs)

    // LOCALLY_REFINED_SPLINE_TYPE: (3 AMBIGUOUS REFs)

    // V_MULTIPLICITIES: (2 AMBIGUOUS REFs)

    // BOUNDARIES: (2 AMBIGUOUS REFs)

    // GEOMETRIC_LINK: (3 AMBIGUOUS REFs)

    // R_Y: (11 AMBIGUOUS REFs)

    // R_X: (11 AMBIGUOUS REFs)

    // PINION_RADIUS: (2 AMBIGUOUS REFs)

    // MINOR_RADIUS: (3 AMBIGUOUS REFs)

    // R_Z: (11 AMBIGUOUS REFs)

    // ACTUAL_TRANSLATION_Y: (2 AMBIGUOUS REFs)

    // ACTUAL_TRANSLATION_X: (2 AMBIGUOUS REFs)

    // TOPOLOGICAL_LINK: (2 AMBIGUOUS REFs)

    // UPPER_LIMIT_ACTUAL_TRANSLATION_X: (2 AMBIGUOUS REFs)

    // UPPER_LIMIT_ACTUAL_TRANSLATION_Y: (2 AMBIGUOUS REFs)

    // V_UPPER: (2 AMBIGUOUS REFs)

    // ORIENTATION: (8 AMBIGUOUS REFs)

    // END_PARAM: (2 AMBIGUOUS REFs)

    // DISTANCE_ATTENUATION: (2 AMBIGUOUS REFs)

    // ITEMS: (3 AMBIGUOUS REFs)

    // P: (2 AMBIGUOUS REFs)

    // V_CLOSED: (2 AMBIGUOUS REFs)

    // R: (3 AMBIGUOUS REFs)

    // U: (2 AMBIGUOUS REFs)

    // ACTUAL_TRANSLATION: (3 AMBIGUOUS REFs)

    // COORDINATES: (10 AMBIGUOUS REFs)

    // X: (5 AMBIGUOUS REFs)

    // Y: (5 AMBIGUOUS REFs)

    // FIRST_TRIM_CONDITION: (2 AMBIGUOUS REFs)

    // Z: (6 AMBIGUOUS REFs)

    // AGREEMENT_FLAG: (2 AMBIGUOUS REFs)

    // USING_SKETCH: (2 AMBIGUOUS REFs)

    // W_KNOTS: (2 AMBIGUOUS REFs)

    // POINT_LIST: (2 AMBIGUOUS REFs)

    // RADIUS: (12 AMBIGUOUS REFs)

    // LOWER_LIMIT_ACTUAL_TRANSLATION_Y: (2 AMBIGUOUS REFs)

    // LOWER_LIMIT_ACTUAL_TRANSLATION_X: (2 AMBIGUOUS REFs)

    // SCALING_FACTORS: (3 AMBIGUOUS REFs)

    // UPPER_LIMIT_ROLL: (4 AMBIGUOUS REFs)

    // OMITTED_INSTANCES: (2 AMBIGUOUS REFs)

    // DISTANCE: (3 AMBIGUOUS REFs)

    // POSITION: (25 AMBIGUOUS REFs)

    // RATIO: (2 AMBIGUOUS REFs)

    // TRANSFORMATION: (4 AMBIGUOUS REFs)

    // LOWER_LIMIT_YAW: (4 AMBIGUOUS REFs)

    // U_CLOSED: (2 AMBIGUOUS REFs)

    // DELINEATION: (2 AMBIGUOUS REFs)

    // AXIS_LINE: (3 AMBIGUOUS REFs)

    // U_KNOTS: (4 AMBIGUOUS REFs)

    // ANGLE: (2 AMBIGUOUS REFs)

    // PLACEMENT: (4 AMBIGUOUS REFs)

    // AXIS: (4 AMBIGUOUS REFs)

    // MASTER_REPRESENTATION: (2 AMBIGUOUS REFs)

    // N_SEGMENTS: (3 AMBIGUOUS REFs)

    // SEMI_ANGLE: (2 AMBIGUOUS REFs)

    // DIRECTRIX: (4 AMBIGUOUS REFs)

    // REFERENCE_POINT: (3 AMBIGUOUS REFs)

    // KNOT_SPEC: (2 AMBIGUOUS REFs)

    // PAIR_CURVE: (2 AMBIGUOUS REFs)

    // LOWER_LIMIT_ACTUAL_ROTATION: (5 AMBIGUOUS REFs)

    // SELF_INTERSECT: (8 AMBIGUOUS REFs)

    // POINTS: (4 AMBIGUOUS REFs)

    // DISTANCE_VALUE: (5 AMBIGUOUS REFs)

    // EXTRUDED_DIRECTION: (2 AMBIGUOUS REFs)

    // SEGMENTS: (8 AMBIGUOUS REFs)

    // ACTUAL_POINT_ON_SURFACE: (2 AMBIGUOUS REFs)

    // SEMI_AXIS_1: (6 AMBIGUOUS REFs)

    // V_KNOTS: (4 AMBIGUOUS REFs)

    // SEMI_AXIS_3: (2 AMBIGUOUS REFs)

    // START_PARAM: (2 AMBIGUOUS REFs)

    // BASIS_SURFACE: (9 AMBIGUOUS REFs)

    // SEMI_AXIS_2: (6 AMBIGUOUS REFs)

    // TRIANGLE_STRIPS: (2 AMBIGUOUS REFs)

    // PROFILE: (2 AMBIGUOUS REFs)

    // EXTENT: (2 AMBIGUOUS REFs)

    // T_Z: (11 AMBIGUOUS REFs)

    // T_Y: (11 AMBIGUOUS REFs)

    // INPUT_ORIENTATION: (3 AMBIGUOUS REFs)

    // T_X: (11 AMBIGUOUS REFs)

    // UPPER_LIMIT_PITCH: (3 AMBIGUOUS REFs)

    // UPPER_LIMIT_YAW: (4 AMBIGUOUS REFs)

    // CONTROL_POINTS: (3 AMBIGUOUS REFs)

    // CLOSED_CURVE: (4 AMBIGUOUS REFs)

    // REF_DIRECTION: (3 AMBIGUOUS REFs)

    // Y_OFFSET: (2 AMBIGUOUS REFs)

    // TRIANGLES: (3 AMBIGUOUS REFs)

    // POINT_PARAMETER_U: (2 AMBIGUOUS REFs)

    // COMPUTED_REPRESENTATION: (2 AMBIGUOUS REFs)

    // DRAFT_ANGLE: (4 AMBIGUOUS REFs)

    // POINT_PARAMETER_V: (2 AMBIGUOUS REFs)

    // EXTERNAL_CURVE: (2 AMBIGUOUS REFs)

    // HEIGHT: (7 AMBIGUOUS REFs)

    // PROJECTION_DIRECTION: (2 AMBIGUOUS REFs)

    // U_DEGREE: (2 AMBIGUOUS REFs)

    // ACTUAL_ROTATION: (7 AMBIGUOUS REFs)

    // SAME_SENSE: (2 AMBIGUOUS REFs)

    // BLANKING: (2 AMBIGUOUS REFs)

    // THETA: (3 AMBIGUOUS REFs)

    // KNOT_U_UPPER: (2 AMBIGUOUS REFs)

    // UPPER_LIMIT_ACTUAL_ROTATION: (5 AMBIGUOUS REFs)

    // LOCATION: (2 AMBIGUOUS REFs)

    // U_UPPER: (2 AMBIGUOUS REFs)

    // PNINDEX: (4 AMBIGUOUS REFs)

    // DEFINITION: (2 AMBIGUOUS REFs)

    // V_B_SPLINES: (2 AMBIGUOUS REFs)

    // LOWER_LIMIT_ROLL: (4 AMBIGUOUS REFs)

    // PNMAX: (2 AMBIGUOUS REFs)

    // DOMAIN: (3 AMBIGUOUS REFs)

    // UPPER_LIMIT_ACTUAL_TRANSLATION: (2 AMBIGUOUS REFs)

    // YLENGTH: (2 AMBIGUOUS REFs)

    // NEAR_POINTS: (4 AMBIGUOUS REFs)

    // DEPTH: (4 AMBIGUOUS REFs)

    // XLENGTH: (2 AMBIGUOUS REFs)

    // SMOOTH: (2 AMBIGUOUS REFs)

    // LOWER_LIMIT_ACTUAL_TRANSLATION: (2 AMBIGUOUS REFs)

    // WEIGHTS: (3 AMBIGUOUS REFs)

    // FLOOR_FILLET_RADIUS: (2 AMBIGUOUS REFs)

    // TRIANGLE_FANS: (2 AMBIGUOUS REFs)

    // ASSOCIATED_CURVES: (2 AMBIGUOUS REFs)

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSURFACE_PAIR_WITH_RANGE`` )
    public var RANGE_ON_SURFACE_1: eRECTANGULAR_TRIMMED_SURFACE?  {
      get {
        return sub_eSURFACE_PAIR_WITH_RANGE?.partialEntity._range_on_surface_1
      }
      set(newValue) {
        guard let partial = sub_eSURFACE_PAIR_WITH_RANGE?.super_eSURFACE_PAIR_WITH_RANGE.partialEntity
          else { return }
        partial._range_on_surface_1 = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSURFACE_PAIR_WITH_RANGE`` )
    public var RANGE_ON_SURFACE_2: eRECTANGULAR_TRIMMED_SURFACE?  {
      get {
        return sub_eSURFACE_PAIR_WITH_RANGE?.partialEntity._range_on_surface_2
      }
      set(newValue) {
        guard let partial = sub_eSURFACE_PAIR_WITH_RANGE?.super_eSURFACE_PAIR_WITH_RANGE.partialEntity
          else { return }
        partial._range_on_surface_2 = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_SLOT`` )
    public var SLOT_WIDTH: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eSOLID_WITH_SLOT?.partialEntity._slot_width
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_SLOT?.super_eSOLID_WITH_SLOT.partialEntity else { return }
        partial._slot_width = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_SLOT`` )
    public var END_EXIT_FACES: (SDAI.LIST<SDAI.SET<eFACE_SURFACE>/*[0:nil]*/ >/*[2:2]*/ )?  {
      get {
        return sub_eSOLID_WITH_SLOT?.partialEntity._end_exit_faces
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_SLOT?.super_eSOLID_WITH_SLOT.partialEntity else { return }
        partial._end_exit_faces = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eLIGHT_SOURCE_SPOT`` )
    public var CONCENTRATION_EXPONENT: SDAI.REAL?  {
      get {
        return sub_eLIGHT_SOURCE_SPOT?.partialEntity._concentration_exponent
      }
      set(newValue) {
        guard let partial = sub_eLIGHT_SOURCE_SPOT?.super_eLIGHT_SOURCE_SPOT.partialEntity else { return }
        partial._concentration_exponent = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePOINT_ON_PLANAR_CURVE_PAIR_WITH_RANGE`` )
    public var RANGE_ON_PAIR_CURVE: eTRIMMED_CURVE?  {
      get {
        return sub_ePOINT_ON_PLANAR_CURVE_PAIR_WITH_RANGE?.partialEntity._range_on_pair_curve
      }
      set(newValue) {
        guard let partial = sub_ePOINT_ON_PLANAR_CURVE_PAIR_WITH_RANGE?.super_ePOINT_ON_PLANAR_CURVE_PAIR_WITH_RANGE
          .partialEntity else { return }
        partial._range_on_pair_curve = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_CIRCULAR_PATTERN`` )
    public var REPLICATE_COUNT: tPOSITIVE_INTEGER?  {
      get {
        return sub_eSOLID_WITH_CIRCULAR_PATTERN?.partialEntity._replicate_count
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_CIRCULAR_PATTERN?.super_eSOLID_WITH_CIRCULAR_PATTERN
          .partialEntity else { return }
        partial._replicate_count = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eROTATION_ABOUT_DIRECTION`` )
    public var ROTATION_ANGLE: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eROTATION_ABOUT_DIRECTION?.partialEntity._rotation_angle
      }
      set(newValue) {
        guard let partial = sub_eROTATION_ABOUT_DIRECTION?.super_eROTATION_ABOUT_DIRECTION.partialEntity
          else { return }
        partial._rotation_angle = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCUBIC_BEZIER_TRIANGULATED_FACE`` )
    public var CTRIANGLES: (SDAI.LIST<SDAI.LIST<SDAI.INTEGER>/*[10:10]*/ >/*[1:nil]*/ )?  {
      get {
        return sub_eCUBIC_BEZIER_TRIANGULATED_FACE?.partialEntity._ctriangles
      }
      set(newValue) {
        guard let partial = sub_eCUBIC_BEZIER_TRIANGULATED_FACE?.super_eCUBIC_BEZIER_TRIANGULATED_FACE
          .partialEntity else { return }
        partial._ctriangles = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_VARIABLE_RADIUS_EDGE_BLEND`` )
    public var RADIUS_LIST: (SDAI.LIST<tPOSITIVE_LENGTH_MEASURE>/*[2:nil]*/ )?  {
      get {
        return sub_eSOLID_WITH_VARIABLE_RADIUS_EDGE_BLEND?.partialEntity._radius_list
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_VARIABLE_RADIUS_EDGE_BLEND?.super_eSOLID_WITH_VARIABLE_RADIUS_EDGE_BLEND
          .partialEntity else { return }
        partial._radius_list = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eINTERPOLATED_CONFIGURATION_SEQUENCE`` )
    public var CLOSED_INTERPOLATION: SDAI.LOGICAL {
      get {
        if let cached = cachedValue(derivedAttributeName:"CLOSED_INTERPOLATION") {
          return cached.value as! SDAI.LOGICAL
        }
        guard let origin = sub_eINTERPOLATED_CONFIGURATION_SEQUENCE else { return nil }
        let value = SDAI.LOGICAL( SDAI.LOGICAL(
          origin.partialEntity._closed_interpolation__getter(SELF: origin)) )
        updateCache(derivedAttributeName:"CLOSED_INTERPOLATION", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_CIRCULAR_PATTERN`` )
    public var ANGULAR_SPACING: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eSOLID_WITH_CIRCULAR_PATTERN?.partialEntity._angular_spacing
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_CIRCULAR_PATTERN?.super_eSOLID_WITH_CIRCULAR_PATTERN
          .partialEntity else { return }
        partial._angular_spacing = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eTHICKENED_FACE_SOLID`` )
    public var OFFSET1: tLENGTH_MEASURE?  {
      get {
        return sub_eTHICKENED_FACE_SOLID?.partialEntity._offset1
      }
      set(newValue) {
        guard let partial = sub_eTHICKENED_FACE_SOLID?.super_eTHICKENED_FACE_SOLID.partialEntity
          else { return }
        partial._offset1 = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSLIDING_CURVE_PAIR_VALUE`` )
    public var ACTUAL_POINT_ON_CURVE_2: ePOINT_ON_CURVE?  {
      get {
        return sub_eSLIDING_CURVE_PAIR_VALUE?.partialEntity._actual_point_on_curve_2
      }
      set(newValue) {
        guard let partial = sub_eSLIDING_CURVE_PAIR_VALUE?.super_eSLIDING_CURVE_PAIR_VALUE.partialEntity
          else { return }
        partial._actual_point_on_curve_2 = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_POCKET`` )
    public var FLOOR_BLEND_RADIUS: tNON_NEGATIVE_LENGTH_MEASURE?  {
      get {
        return sub_eSOLID_WITH_POCKET?.partialEntity._floor_blend_radius
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_POCKET?.super_eSOLID_WITH_POCKET.partialEntity else { return }
        partial._floor_blend_radius = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eDUPIN_CYCLIDE_SURFACE`` )
    public var GENERALISED_MAJOR_RADIUS: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eDUPIN_CYCLIDE_SURFACE?.partialEntity._generalised_major_radius
      }
      set(newValue) {
        guard let partial = sub_eDUPIN_CYCLIDE_SURFACE?.super_eDUPIN_CYCLIDE_SURFACE.partialEntity
          else { return }
        partial._generalised_major_radius = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eTHICKENED_FACE_SOLID`` )
    public var OFFSET2: tLENGTH_MEASURE?  {
      get {
        return sub_eTHICKENED_FACE_SOLID?.partialEntity._offset2
      }
      set(newValue) {
        guard let partial = sub_eTHICKENED_FACE_SOLID?.super_eTHICKENED_FACE_SOLID.partialEntity
          else { return }
        partial._offset2 = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePLANAR_CURVE_PAIR`` )
    public var CURVE_1: eCURVE?  {
      get {
        return sub_ePLANAR_CURVE_PAIR?.partialEntity._curve_1
      }
      set(newValue) {
        guard let partial = sub_ePLANAR_CURVE_PAIR?.super_ePLANAR_CURVE_PAIR.partialEntity else { return }
        partial._curve_1 = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eMIN_AND_MAJOR_PLY_ORIENTATION_BASIS`` )
    public var MAJOR_ORIENTATION_BASIS: eAXIS2_PLACEMENT_3D?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"MAJOR_ORIENTATION_BASIS") {
          return cached.value as! eAXIS2_PLACEMENT_3D? 
        }
        guard let origin = sub_eMIN_AND_MAJOR_PLY_ORIENTATION_BASIS else { return nil }
        let value = eAXIS2_PLACEMENT_3D(origin.partialEntity._major_orientation_basis__getter(SELF: origin))
        updateCache(derivedAttributeName:"MAJOR_ORIENTATION_BASIS", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eTHICKENED_FACE_SOLID`` )
    public var BASE_ELEMENT: sGENERALIZED_SURFACE_SELECT?  {
      get {
        return sub_eTHICKENED_FACE_SOLID?.partialEntity._base_element
      }
      set(newValue) {
        guard let partial = sub_eTHICKENED_FACE_SOLID?.super_eTHICKENED_FACE_SOLID.partialEntity
          else { return }
        partial._base_element = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePLANAR_CURVE_PAIR`` )
    public var CURVE_2: eCURVE?  {
      get {
        return sub_ePLANAR_CURVE_PAIR?.partialEntity._curve_2
      }
      set(newValue) {
        guard let partial = sub_ePLANAR_CURVE_PAIR?.super_ePLANAR_CURVE_PAIR.partialEntity else { return }
        partial._curve_2 = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT(OBSERVED)__ attribute
    /// - origin: SUB( ``eDRAUGHTING_CALLOUT`` )
    public var CONTENTS: (SDAI.SET<sDRAUGHTING_CALLOUT_ELEMENT>/*[1:nil]*/ )?  {
      get {
        return sub_eDRAUGHTING_CALLOUT?.partialEntity._contents
      }
      set(newValue) {
        guard let partial = sub_eDRAUGHTING_CALLOUT?.super_eDRAUGHTING_CALLOUT.partialEntity else { return }
        partial._contents = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eRECTANGULAR_TRIMMED_SURFACE`` )
    public var VSENSE: SDAI.BOOLEAN?  {
      get {
        return sub_eRECTANGULAR_TRIMMED_SURFACE?.partialEntity._vsense
      }
      set(newValue) {
        guard let partial = sub_eRECTANGULAR_TRIMMED_SURFACE?.super_eRECTANGULAR_TRIMMED_SURFACE
          .partialEntity else { return }
        partial._vsense = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eFILL_AREA_STYLE_HATCHING`` )
    public var START_OF_NEXT_HATCH_LINE: eONE_DIRECTION_REPEAT_FACTOR?  {
      get {
        return sub_eFILL_AREA_STYLE_HATCHING?.partialEntity._start_of_next_hatch_line
      }
      set(newValue) {
        guard let partial = sub_eFILL_AREA_STYLE_HATCHING?.super_eFILL_AREA_STYLE_HATCHING.partialEntity
          else { return }
        partial._start_of_next_hatch_line = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eB_SPLINE_CURVE`` )
    public var CURVE_FORM: nB_SPLINE_CURVE_FORM?  {
      get {
        return sub_eB_SPLINE_CURVE?.partialEntity._curve_form
      }
      set(newValue) {
        guard let partial = sub_eB_SPLINE_CURVE?.super_eB_SPLINE_CURVE.partialEntity else { return }
        partial._curve_form = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT REDEF(OBSERVED)__ attribute
    /// - origin: SUB( ``ePAIR_REPRESENTATION_RELATIONSHIP`` )
    public var TRANSFORMATION_OPERATOR: eKINEMATIC_PAIR?  {
      get {
        return eKINEMATIC_PAIR( sub_ePAIR_REPRESENTATION_RELATIONSHIP?.super_eREPRESENTATION_RELATIONSHIP_WITH_TRANSFORMATION
          .partialEntity._transformation_operator )
      }
      set(newValue) {
        guard let partial = sub_ePAIR_REPRESENTATION_RELATIONSHIP?.super_eREPRESENTATION_RELATIONSHIP_WITH_TRANSFORMATION
          .partialEntity else { return }
        partial._transformation_operator = SDAI.UNWRAP(
          sTRANSFORMATION(newValue))
      }
    }

    /// __EXPLICIT REDEF__ attribute
    /// - origin: SUB( ``eANNOTATION_PLACEHOLDER_OCCURRENCE`` )
    public var ITEM: eGEOMETRIC_SET?  {
      get {
        return eGEOMETRIC_SET( sub_eANNOTATION_PLACEHOLDER_OCCURRENCE?.super_eSTYLED_ITEM.partialEntity
          ._item )
      }
      set(newValue) {
        guard let partial = sub_eANNOTATION_PLACEHOLDER_OCCURRENCE?.super_eSTYLED_ITEM.partialEntity
          else { return }
        partial._item = SDAI.UNWRAP(
          sSTYLED_ITEM_TARGET(newValue))
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_CIRCULAR_PATTERN`` )
    public var RADIAL_ALIGNMENT: SDAI.BOOLEAN?  {
      get {
        return sub_eSOLID_WITH_CIRCULAR_PATTERN?.partialEntity._radial_alignment
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_CIRCULAR_PATTERN?.super_eSOLID_WITH_CIRCULAR_PATTERN
          .partialEntity else { return }
        partial._radial_alignment = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eFILL_AREA_STYLE_HATCHING`` )
    public var HATCH_LINE_ANGLE: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eFILL_AREA_STYLE_HATCHING?.partialEntity._hatch_line_angle
      }
      set(newValue) {
        guard let partial = sub_eFILL_AREA_STYLE_HATCHING?.super_eFILL_AREA_STYLE_HATCHING.partialEntity
          else { return }
        partial._hatch_line_angle = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT REDEF__ attribute
    /// - origin: SUB( ``eEXPLICIT_GEOMETRIC_CONSTRAINT`` )
    public var CONSTRAINED_ELEMENTS: (SDAI.SET<eGEOMETRIC_REPRESENTATION_ITEM>/*[1:nil]*/ )?  {
      get {
        return SDAI.SET<eGEOMETRIC_REPRESENTATION_ITEM>( sub_eEXPLICIT_GEOMETRIC_CONSTRAINT?.super_eEXPLICIT_CONSTRAINT
          .partialEntity._constrained_elements )
      }
      set(newValue) {
        guard let partial = sub_eEXPLICIT_GEOMETRIC_CONSTRAINT?.super_eEXPLICIT_CONSTRAINT.partialEntity
          else { return }
        partial._constrained_elements = SDAI.UNWRAP(
          SDAI.SET<eREPRESENTATION_ITEM>(newValue))
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eTANGENT_GEOMETRIC_CONSTRAINT`` )
    public var TANGENT_CONTACT: nTANGENT_CONTACT_TYPE?  {
      get {
        return sub_eTANGENT_GEOMETRIC_CONSTRAINT?.partialEntity._tangent_contact
      }
      set(newValue) {
        guard let partial = sub_eTANGENT_GEOMETRIC_CONSTRAINT?.super_eTANGENT_GEOMETRIC_CONSTRAINT
          .partialEntity else { return }
        partial._tangent_contact = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_STEPPED_ROUND_HOLE`` )
    public var SEGMENT_RADII: (SDAI.LIST<tPOSITIVE_LENGTH_MEASURE>/*[1:SEGMENTS]*/ )?  {
      get {
        return sub_eSOLID_WITH_STEPPED_ROUND_HOLE?.partialEntity._segment_radii
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_STEPPED_ROUND_HOLE?.super_eSOLID_WITH_STEPPED_ROUND_HOLE
          .partialEntity else { return }
        partial._segment_radii = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_ANGLE_BASED_CHAMFER`` )
    public var LEFT_OFFSET: SDAI.BOOLEAN?  {
      get {
        return sub_eSOLID_WITH_ANGLE_BASED_CHAMFER?.partialEntity._left_offset
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_ANGLE_BASED_CHAMFER?.super_eSOLID_WITH_ANGLE_BASED_CHAMFER
          .partialEntity else { return }
        partial._left_offset = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSURFACE_PATCH_SET`` )
    public var PATCHES: (SDAI.SET<eSURFACE_PATCH>/*[1:nil]*/ )?  {
      get {
        return sub_eSURFACE_PATCH_SET?.partialEntity._patches
      }
      set(newValue) {
        guard let partial = sub_eSURFACE_PATCH_SET?.super_eSURFACE_PATCH_SET.partialEntity else { return }
        partial._patches = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eONE_DIRECTION_REPEAT_FACTOR`` )
    public var REPEAT_FACTOR: eVECTOR?  {
      get {
        return sub_eONE_DIRECTION_REPEAT_FACTOR?.partialEntity._repeat_factor
      }
      set(newValue) {
        guard let partial = sub_eONE_DIRECTION_REPEAT_FACTOR?.super_eONE_DIRECTION_REPEAT_FACTOR
          .partialEntity else { return }
        partial._repeat_factor = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_RECTANGULAR_PATTERN`` )
    public var ROW_SPACING: tLENGTH_MEASURE?  {
      get {
        return sub_eSOLID_WITH_RECTANGULAR_PATTERN?.partialEntity._row_spacing
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_RECTANGULAR_PATTERN?.super_eSOLID_WITH_RECTANGULAR_PATTERN
          .partialEntity else { return }
        partial._row_spacing = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_CONICAL_BOTTOM_ROUND_HOLE`` )
    public var TIP_RADIUS: tNON_NEGATIVE_LENGTH_MEASURE?  {
      get {
        return sub_eSOLID_WITH_CONICAL_BOTTOM_ROUND_HOLE?.partialEntity._tip_radius
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_CONICAL_BOTTOM_ROUND_HOLE?.super_eSOLID_WITH_CONICAL_BOTTOM_ROUND_HOLE
          .partialEntity else { return }
        partial._tip_radius = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eFILL_AREA_STYLE_HATCHING`` )
    public var HATCH_LINE_APPEARANCE: eCURVE_STYLE?  {
      get {
        return sub_eFILL_AREA_STYLE_HATCHING?.partialEntity._hatch_line_appearance
      }
      set(newValue) {
        guard let partial = sub_eFILL_AREA_STYLE_HATCHING?.super_eFILL_AREA_STYLE_HATCHING.partialEntity
          else { return }
        partial._hatch_line_appearance = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSWEPT_SURFACE`` )
    public var SWEPT_CURVE: eCURVE?  {
      get {
        return sub_eSWEPT_SURFACE?.partialEntity._swept_curve
      }
      set(newValue) {
        guard let partial = sub_eSWEPT_SURFACE?.super_eSWEPT_SURFACE.partialEntity else { return }
        partial._swept_curve = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eANNOTATION_PLACEHOLDER_OCCURRENCE`` )
    public var ROLE: nANNOTATION_PLACEHOLDER_OCCURRENCE_ROLE?  {
      get {
        return sub_eANNOTATION_PLACEHOLDER_OCCURRENCE?.partialEntity._role
      }
      set(newValue) {
        guard let partial = sub_eANNOTATION_PLACEHOLDER_OCCURRENCE?.super_eANNOTATION_PLACEHOLDER_OCCURRENCE
          .partialEntity else { return }
        partial._role = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePOLYGONAL_AREA`` )
    public var BOUNDS: (SDAI.LIST_UNIQUE<eCARTESIAN_POINT>/*[3:nil]*/ )?  {
      get {
        return sub_ePOLYGONAL_AREA?.partialEntity._bounds
      }
      set(newValue) {
        guard let partial = sub_ePOLYGONAL_AREA?.super_ePOLYGONAL_AREA.partialEntity else { return }
        partial._bounds = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePOINT_REPLICA`` )
    public var PARENT_PT: ePOINT?  {
      get {
        return sub_ePOINT_REPLICA?.partialEntity._parent_pt
      }
      set(newValue) {
        guard let partial = sub_ePOINT_REPLICA?.super_ePOINT_REPLICA.partialEntity else { return }
        partial._parent_pt = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePOGC_WITH_DIMENSION`` )
    public var OFFSET_DIRECTION_CONSTRAINED: SDAI.BOOLEAN?  {
      get {
        return sub_ePOGC_WITH_DIMENSION?.partialEntity._offset_direction_constrained
      }
      set(newValue) {
        guard let partial = sub_ePOGC_WITH_DIMENSION?.super_ePOGC_WITH_DIMENSION.partialEntity
          else { return }
        partial._offset_direction_constrained = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSHELLED_SOLID`` )
    public var THICKNESS: tLENGTH_MEASURE?  {
      get {
        return sub_eSHELLED_SOLID?.partialEntity._thickness
      }
      set(newValue) {
        guard let partial = sub_eSHELLED_SOLID?.super_eSHELLED_SOLID.partialEntity else { return }
        partial._thickness = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eRECTANGULAR_COMPOSITE_SURFACE`` )
    public var N_U: SDAI.INTEGER?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"N_U") {
          return cached.value as! SDAI.INTEGER? 
        }
        guard let origin = sub_eRECTANGULAR_COMPOSITE_SURFACE else { return nil }
        let value = SDAI.INTEGER(origin.partialEntity._n_u__getter(SELF: origin))
        updateCache(derivedAttributeName:"N_U", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eROTATION_ABOUT_DIRECTION`` )
    public var DIRECTION_OF_AXIS: eDIRECTION?  {
      get {
        return sub_eROTATION_ABOUT_DIRECTION?.partialEntity._direction_of_axis
      }
      set(newValue) {
        guard let partial = sub_eROTATION_ABOUT_DIRECTION?.super_eROTATION_ABOUT_DIRECTION.partialEntity
          else { return }
        partial._direction_of_axis = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_TEE_SECTION_SLOT`` )
    public var TEE_SECTION_WIDTH: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eSOLID_WITH_TEE_SECTION_SLOT?.partialEntity._tee_section_width
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_TEE_SECTION_SLOT?.super_eSOLID_WITH_TEE_SECTION_SLOT
          .partialEntity else { return }
        partial._tee_section_width = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_FLAT_BOTTOM_ROUND_HOLE`` )
    public var FILLET_RADIUS: tNON_NEGATIVE_LENGTH_MEASURE?  {
      get {
        return sub_eSOLID_WITH_FLAT_BOTTOM_ROUND_HOLE?.partialEntity._fillet_radius
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_FLAT_BOTTOM_ROUND_HOLE?.super_eSOLID_WITH_FLAT_BOTTOM_ROUND_HOLE
          .partialEntity else { return }
        partial._fillet_radius = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eRECTANGULAR_COMPOSITE_SURFACE`` )
    public var N_V: SDAI.INTEGER?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"N_V") {
          return cached.value as! SDAI.INTEGER? 
        }
        guard let origin = sub_eRECTANGULAR_COMPOSITE_SURFACE else { return nil }
        let value = SDAI.INTEGER(origin.partialEntity._n_v__getter(SELF: origin))
        updateCache(derivedAttributeName:"N_V", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eEXTRUDED_FACE_SOLID_WITH_TRIM_CONDITIONS`` )
    public var FIRST_TRIM_INTENT: nTRIM_INTENT?  {
      get {
        return sub_eEXTRUDED_FACE_SOLID_WITH_TRIM_CONDITIONS?.partialEntity._first_trim_intent
      }
      set(newValue) {
        guard let partial = sub_eEXTRUDED_FACE_SOLID_WITH_TRIM_CONDITIONS?.super_eEXTRUDED_FACE_SOLID_WITH_TRIM_CONDITIONS
          .partialEntity else { return }
        partial._first_trim_intent = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eBOOLEAN_RESULT`` )
    public var OPERATOR: nBOOLEAN_OPERATOR?  {
      get {
        return sub_eBOOLEAN_RESULT?.partialEntity._operator
      }
      set(newValue) {
        guard let partial = sub_eBOOLEAN_RESULT?.super_eBOOLEAN_RESULT.partialEntity else { return }
        partial._operator = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCARTESIAN_TRANSFORMATION_OPERATOR`` )
    public var SCALE: SDAI.REAL?  {
      get {
        return sub_eCARTESIAN_TRANSFORMATION_OPERATOR?.partialEntity._scale
      }
      set(newValue) {
        guard let partial = sub_eCARTESIAN_TRANSFORMATION_OPERATOR?.super_eCARTESIAN_TRANSFORMATION_OPERATOR
          .partialEntity else { return }
        partial._scale = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSUBSKETCH`` )
    public var SUBSKETCH_ELEMENTS: (SDAI.SET<sSKETCH_ELEMENT_SELECT>/*[1:nil]*/ )?  {
      get {
        return sub_eSUBSKETCH?.partialEntity._subsketch_elements
      }
      set(newValue) {
        guard let partial = sub_eSUBSKETCH?.super_eSUBSKETCH.partialEntity else { return }
        partial._subsketch_elements = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSYMBOL_TARGET`` )
    public var X_SCALE: tPOSITIVE_RATIO_MEASURE?  {
      get {
        return sub_eSYMBOL_TARGET?.partialEntity._x_scale
      }
      set(newValue) {
        guard let partial = sub_eSYMBOL_TARGET?.super_eSYMBOL_TARGET.partialEntity else { return }
        partial._x_scale = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSCAN_3D_MODEL`` )
    public var SCANNED_POINTS: (SDAI.SET<eSCANNED_DATA_ITEM>/*[1:nil]*/ )?  {
      get {
        return sub_eSCAN_3D_MODEL?.partialEntity._scanned_points
      }
      set(newValue) {
        guard let partial = sub_eSCAN_3D_MODEL?.super_eSCAN_3D_MODEL.partialEntity else { return }
        partial._scanned_points = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eBOXED_HALF_SPACE`` )
    public var ENCLOSURE: eBOX_DOMAIN?  {
      get {
        return sub_eBOXED_HALF_SPACE?.partialEntity._enclosure
      }
      set(newValue) {
        guard let partial = sub_eBOXED_HALF_SPACE?.super_eBOXED_HALF_SPACE.partialEntity else { return }
        partial._enclosure = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eEXTRUDED_FACE_SOLID_WITH_TRIM_CONDITIONS`` )
    public var SECOND_TRIM_INTENT: nTRIM_INTENT?  {
      get {
        return sub_eEXTRUDED_FACE_SOLID_WITH_TRIM_CONDITIONS?.partialEntity._second_trim_intent
      }
      set(newValue) {
        guard let partial = sub_eEXTRUDED_FACE_SOLID_WITH_TRIM_CONDITIONS?.super_eEXTRUDED_FACE_SOLID_WITH_TRIM_CONDITIONS
          .partialEntity else { return }
        partial._second_trim_intent = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eBOOLEAN_RESULT`` )
    public var SECOND_OPERAND: sBOOLEAN_OPERAND?  {
      get {
        return sub_eBOOLEAN_RESULT?.partialEntity._second_operand
      }
      set(newValue) {
        guard let partial = sub_eBOOLEAN_RESULT?.super_eBOOLEAN_RESULT.partialEntity else { return }
        partial._second_operand = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eTRIMMED_CURVE`` )
    public var TRIM_1: (SDAI.SET<sTRIMMING_SELECT>/*[1:2]*/ )?  {
      get {
        return sub_eTRIMMED_CURVE?.partialEntity._trim_1
      }
      set(newValue) {
        guard let partial = sub_eTRIMMED_CURVE?.super_eTRIMMED_CURVE.partialEntity else { return }
        partial._trim_1 = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePLANAR_CURVE_PAIR_RANGE`` )
    public var RANGE_ON_CURVE_2: eTRIMMED_CURVE?  {
      get {
        return sub_ePLANAR_CURVE_PAIR_RANGE?.partialEntity._range_on_curve_2
      }
      set(newValue) {
        guard let partial = sub_ePLANAR_CURVE_PAIR_RANGE?.super_ePLANAR_CURVE_PAIR_RANGE.partialEntity
          else { return }
        partial._range_on_curve_2 = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSWEPT_DISK_SOLID`` )
    public var INNER_RADIUS: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eSWEPT_DISK_SOLID?.partialEntity._inner_radius
      }
      set(newValue) {
        guard let partial = sub_eSWEPT_DISK_SOLID?.super_eSWEPT_DISK_SOLID.partialEntity else { return }
        partial._inner_radius = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_PROTRUSION`` )
    public var PROTRUSION_HEIGHT: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eSOLID_WITH_PROTRUSION?.partialEntity._protrusion_height
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_PROTRUSION?.super_eSOLID_WITH_PROTRUSION.partialEntity
          else { return }
        partial._protrusion_height = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCYCLIDE_SEGMENT_SOLID`` )
    public var TURN_ANGLE: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eCYCLIDE_SEGMENT_SOLID?.partialEntity._turn_angle
      }
      set(newValue) {
        guard let partial = sub_eCYCLIDE_SEGMENT_SOLID?.super_eCYCLIDE_SEGMENT_SOLID.partialEntity
          else { return }
        partial._turn_angle = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eFILL_AREA_STYLE_TILE_COLOURED_REGION`` )
    public var REGION_COLOUR: eCOLOUR?  {
      get {
        return sub_eFILL_AREA_STYLE_TILE_COLOURED_REGION?.partialEntity._region_colour
      }
      set(newValue) {
        guard let partial = sub_eFILL_AREA_STYLE_TILE_COLOURED_REGION?.super_eFILL_AREA_STYLE_TILE_COLOURED_REGION
          .partialEntity else { return }
        partial._region_colour = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eTRIMMED_CURVE`` )
    public var TRIM_2: (SDAI.SET<sTRIMMING_SELECT>/*[1:2]*/ )?  {
      get {
        return sub_eTRIMMED_CURVE?.partialEntity._trim_2
      }
      set(newValue) {
        guard let partial = sub_eTRIMMED_CURVE?.super_eTRIMMED_CURVE.partialEntity else { return }
        partial._trim_2 = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePLANAR_CURVE_PAIR_RANGE`` )
    public var RANGE_ON_CURVE_1: eTRIMMED_CURVE?  {
      get {
        return sub_ePLANAR_CURVE_PAIR_RANGE?.partialEntity._range_on_curve_1
      }
      set(newValue) {
        guard let partial = sub_ePLANAR_CURVE_PAIR_RANGE?.super_ePLANAR_CURVE_PAIR_RANGE.partialEntity
          else { return }
        partial._range_on_curve_1 = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eTEXT_LITERAL`` )
    public var PATH: nTEXT_PATH?  {
      get {
        return sub_eTEXT_LITERAL?.partialEntity._path
      }
      set(newValue) {
        guard let partial = sub_eTEXT_LITERAL?.super_eTEXT_LITERAL.partialEntity else { return }
        partial._path = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eFILL_AREA_STYLE_TILES`` )
    public var TILES: (SDAI.SET<sFILL_AREA_STYLE_TILE_SHAPE_SELECT>/*[1:nil]*/ )?  {
      get {
        return sub_eFILL_AREA_STYLE_TILES?.partialEntity._tiles
      }
      set(newValue) {
        guard let partial = sub_eFILL_AREA_STYLE_TILES?.super_eFILL_AREA_STYLE_TILES.partialEntity
          else { return }
        partial._tiles = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_RECTANGULAR_PATTERN`` )
    public var ROW_COUNT: tPOSITIVE_INTEGER?  {
      get {
        return sub_eSOLID_WITH_RECTANGULAR_PATTERN?.partialEntity._row_count
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_RECTANGULAR_PATTERN?.super_eSOLID_WITH_RECTANGULAR_PATTERN
          .partialEntity else { return }
        partial._row_count = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_RECTANGULAR_POCKET`` )
    public var POCKET_LENGTH: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eSOLID_WITH_RECTANGULAR_POCKET?.partialEntity._pocket_length
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_RECTANGULAR_POCKET?.super_eSOLID_WITH_RECTANGULAR_POCKET
          .partialEntity else { return }
        partial._pocket_length = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eDEFINED_SYMBOL`` )
    public var TARGET: eSYMBOL_TARGET?  {
      get {
        return sub_eDEFINED_SYMBOL?.partialEntity._target
      }
      set(newValue) {
        guard let partial = sub_eDEFINED_SYMBOL?.super_eDEFINED_SYMBOL.partialEntity else { return }
        partial._target = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eIMPLICIT_PLANAR_PROJECTION_POINT`` )
    public var EXTERNAL_POINT: ePOINT?  {
      get {
        return sub_eIMPLICIT_PLANAR_PROJECTION_POINT?.partialEntity._external_point
      }
      set(newValue) {
        guard let partial = sub_eIMPLICIT_PLANAR_PROJECTION_POINT?.super_eIMPLICIT_PLANAR_PROJECTION_POINT
          .partialEntity else { return }
        partial._external_point = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eGEAR_PAIR`` )
    public var GEAR_RATIO: SDAI.REAL?  {
      get {
        return sub_eGEAR_PAIR?.partialEntity._gear_ratio
      }
      set(newValue) {
        guard let partial = sub_eGEAR_PAIR?.super_eGEAR_PAIR.partialEntity else { return }
        partial._gear_ratio = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_GROOVE`` )
    public var EXTERNAL_GROOVE: SDAI.BOOLEAN?  {
      get {
        return sub_eSOLID_WITH_GROOVE?.partialEntity._external_groove
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_GROOVE?.super_eSOLID_WITH_GROOVE.partialEntity else { return }
        partial._external_groove = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_SHAPE_ELEMENT_PATTERN`` )
    public var REPLICATED_ELEMENT: eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION?  {
      get {
        return sub_eSOLID_WITH_SHAPE_ELEMENT_PATTERN?.partialEntity._replicated_element
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_SHAPE_ELEMENT_PATTERN?.super_eSOLID_WITH_SHAPE_ELEMENT_PATTERN
          .partialEntity else { return }
        partial._replicated_element = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eB_SPLINE_CURVE_WITH_KNOTS`` )
    public var KNOTS: (SDAI.LIST<tPARAMETER_VALUE>/*[2:nil]*/ )?  {
      get {
        return sub_eB_SPLINE_CURVE_WITH_KNOTS?.partialEntity._knots
      }
      set(newValue) {
        guard let partial = sub_eB_SPLINE_CURVE_WITH_KNOTS?.super_eB_SPLINE_CURVE_WITH_KNOTS.partialEntity
          else { return }
        partial._knots = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSU_PARAMETERS`` )
    public var A: tLENGTH_MEASURE?  {
      get {
        return sub_eSU_PARAMETERS?.partialEntity._a
      }
      set(newValue) {
        guard let partial = sub_eSU_PARAMETERS?.super_eSU_PARAMETERS.partialEntity else { return }
        partial._a = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eDEGENERATE_TOROIDAL_SURFACE`` )
    public var SELECT_OUTER: SDAI.BOOLEAN?  {
      get {
        return sub_eDEGENERATE_TOROIDAL_SURFACE?.partialEntity._select_outer
      }
      set(newValue) {
        guard let partial = sub_eDEGENERATE_TOROIDAL_SURFACE?.super_eDEGENERATE_TOROIDAL_SURFACE
          .partialEntity else { return }
        partial._select_outer = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSU_PARAMETERS`` )
    public var B: tLENGTH_MEASURE?  {
      get {
        return sub_eSU_PARAMETERS?.partialEntity._b
      }
      set(newValue) {
        guard let partial = sub_eSU_PARAMETERS?.super_eSU_PARAMETERS.partialEntity else { return }
        partial._b = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eLINE`` )
    public var PNT: eCARTESIAN_POINT?  {
      get {
        return sub_eLINE?.partialEntity._pnt
      }
      set(newValue) {
        guard let partial = sub_eLINE?.super_eLINE.partialEntity else { return }
        partial._pnt = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSU_PARAMETERS`` )
    public var C: tLENGTH_MEASURE?  {
      get {
        return sub_eSU_PARAMETERS?.partialEntity._c
      }
      set(newValue) {
        guard let partial = sub_eSU_PARAMETERS?.super_eSU_PARAMETERS.partialEntity else { return }
        partial._c = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSURFACE_SMOOTHNESS_GEOMETRIC_CONSTRAINT`` )
    public var V_SMOOTHNESS: nTRANSITION_CODE?  {
      get {
        return sub_eSURFACE_SMOOTHNESS_GEOMETRIC_CONSTRAINT?.partialEntity._v_smoothness
      }
      set(newValue) {
        guard let partial = sub_eSURFACE_SMOOTHNESS_GEOMETRIC_CONSTRAINT?.super_eSURFACE_SMOOTHNESS_GEOMETRIC_CONSTRAINT
          .partialEntity else { return }
        partial._v_smoothness = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSCAN_3D_MODEL`` )
    public var SCANNER_INFO: (SDAI.SET<eSCANNER_PROPERTY>/*[1:nil]*/ )?  {
      get {
        return sub_eSCAN_3D_MODEL?.partialEntity._scanner_info
      }
      set(newValue) {
        guard let partial = sub_eSCAN_3D_MODEL?.super_eSCAN_3D_MODEL.partialEntity else { return }
        partial._scanner_info = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCAMERA_MODEL_WITH_LIGHT_SOURCES`` )
    public var SOURCES: (SDAI.SET<eLIGHT_SOURCE>/*[1:nil]*/ )?  {
      get {
        return sub_eCAMERA_MODEL_WITH_LIGHT_SOURCES?.partialEntity._sources
      }
      set(newValue) {
        guard let partial = sub_eCAMERA_MODEL_WITH_LIGHT_SOURCES?.super_eCAMERA_MODEL_WITH_LIGHT_SOURCES
          .partialEntity else { return }
        partial._sources = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eIMPLICIT_SILHOUETTE_CURVE`` )
    public var SILHOUETTED_MODEL: sSURFACE_OR_SOLID_MODEL?  {
      get {
        return sub_eIMPLICIT_SILHOUETTE_CURVE?.partialEntity._silhouetted_model
      }
      set(newValue) {
        guard let partial = sub_eIMPLICIT_SILHOUETTE_CURVE?.super_eIMPLICIT_SILHOUETTE_CURVE.partialEntity
          else { return }
        partial._silhouetted_model = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eTRIMMED_CURVE`` )
    public var SENSE_AGREEMENT: SDAI.BOOLEAN?  {
      get {
        return sub_eTRIMMED_CURVE?.partialEntity._sense_agreement
      }
      set(newValue) {
        guard let partial = sub_eTRIMMED_CURVE?.super_eTRIMMED_CURVE.partialEntity else { return }
        partial._sense_agreement = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePOINT_IN_VOLUME`` )
    public var BASIS_VOLUME: eVOLUME?  {
      get {
        return sub_ePOINT_IN_VOLUME?.partialEntity._basis_volume
      }
      set(newValue) {
        guard let partial = sub_ePOINT_IN_VOLUME?.super_ePOINT_IN_VOLUME.partialEntity else { return }
        partial._basis_volume = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSWEPT_FACE_SOLID`` )
    public var SWEPT_FACE: eFACE_SURFACE?  {
      get {
        return sub_eSWEPT_FACE_SOLID?.partialEntity._swept_face
      }
      set(newValue) {
        guard let partial = sub_eSWEPT_FACE_SOLID?.super_eSWEPT_FACE_SOLID.partialEntity else { return }
        partial._swept_face = SDAI.UNWRAP(newValue)
      }
    }

    /// __INVERSE__ attribute
    /// observing ePAIR_REPRESENTATION_RELATIONSHIP .TRANSFORMATION_OPERATOR
    /// - origin: SUB( ``eKINEMATIC_PAIR`` )
    public var LINK_REPRESENTATION_ASSOCIATIONS: (SDAI.SET<ePAIR_REPRESENTATION_RELATIONSHIP>/*[1:nil]*/ )?  {
      get {
        return sub_eKINEMATIC_PAIR?.partialEntity._link_representation_associations
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE`` )
    public var UPPER_LIMIT_ACTUAL_TRANSLATION_Z: tLENGTH_MEASURE?  {
      get {
        return sub_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE?.partialEntity._upper_limit_actual_translation_z
      }
      set(newValue) {
        guard let partial = sub_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE?.super_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE
          .partialEntity else { return }
        partial._upper_limit_actual_translation_z = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eLOW_ORDER_KINEMATIC_PAIR_VALUE`` )
    public var ACTUAL_TRANSLATION_Z: tLENGTH_MEASURE?  {
      get {
        return sub_eLOW_ORDER_KINEMATIC_PAIR_VALUE?.partialEntity._actual_translation_z
      }
      set(newValue) {
        guard let partial = sub_eLOW_ORDER_KINEMATIC_PAIR_VALUE?.super_eLOW_ORDER_KINEMATIC_PAIR_VALUE
          .partialEntity else { return }
        partial._actual_translation_z = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eRACK_AND_PINION_PAIR_WITH_RANGE`` )
    public var LOWER_LIMIT_RACK_DISPLACEMENT: tLENGTH_MEASURE?  {
      get {
        return sub_eRACK_AND_PINION_PAIR_WITH_RANGE?.partialEntity._lower_limit_rack_displacement
      }
      set(newValue) {
        guard let partial = sub_eRACK_AND_PINION_PAIR_WITH_RANGE?.super_eRACK_AND_PINION_PAIR_WITH_RANGE
          .partialEntity else { return }
        partial._lower_limit_rack_displacement = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eKINEMATIC_PATH`` )
    public var T_START: tPARAMETER_VALUE?  {
      get {
        return sub_eKINEMATIC_PATH?.partialEntity._t_start
      }
      set(newValue) {
        guard let partial = sub_eKINEMATIC_PATH?.super_eKINEMATIC_PATH.partialEntity else { return }
        partial._t_start = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePOINT_CLOUD_SUPERDATASET`` )
    public var PTS_PER_SUBLIST: SDAI.INTEGER?  {
      get {
        return sub_ePOINT_CLOUD_SUPERDATASET?.partialEntity._pts_per_sublist
      }
      set(newValue) {
        guard let partial = sub_ePOINT_CLOUD_SUPERDATASET?.super_ePOINT_CLOUD_SUPERDATASET.partialEntity
          else { return }
        partial._pts_per_sublist = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eTRACK_BLENDED_SOLID_WITH_END_CONDITIONS`` )
    public var END_CONDITIONS: (SDAI.LIST<sBLEND_END_CONDITION_SELECT>/*[2:2]*/ )?  {
      get {
        return sub_eTRACK_BLENDED_SOLID_WITH_END_CONDITIONS?.partialEntity._end_conditions
      }
      set(newValue) {
        guard let partial = sub_eTRACK_BLENDED_SOLID_WITH_END_CONDITIONS?.super_eTRACK_BLENDED_SOLID_WITH_END_CONDITIONS
          .partialEntity else { return }
        partial._end_conditions = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSURFACE_OF_REVOLUTION`` )
    public var AXIS_POSITION: eAXIS1_PLACEMENT?  {
      get {
        return sub_eSURFACE_OF_REVOLUTION?.partialEntity._axis_position
      }
      set(newValue) {
        guard let partial = sub_eSURFACE_OF_REVOLUTION?.super_eSURFACE_OF_REVOLUTION.partialEntity
          else { return }
        partial._axis_position = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSHELL_BASED_WIREFRAME_MODEL`` )
    public var SBWM_BOUNDARY: (SDAI.SET<sSHELL>/*[1:nil]*/ )?  {
      get {
        return sub_eSHELL_BASED_WIREFRAME_MODEL?.partialEntity._sbwm_boundary
      }
      set(newValue) {
        guard let partial = sub_eSHELL_BASED_WIREFRAME_MODEL?.super_eSHELL_BASED_WIREFRAME_MODEL
          .partialEntity else { return }
        partial._sbwm_boundary = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eLOCALLY_REFINED_SPLINE_CURVE`` )
    public var KNOT_VALUES: tSPLINE_KNOT_VALUES?  {
      get {
        return sub_eLOCALLY_REFINED_SPLINE_CURVE?.partialEntity._knot_values
      }
      set(newValue) {
        guard let partial = sub_eLOCALLY_REFINED_SPLINE_CURVE?.super_eLOCALLY_REFINED_SPLINE_CURVE
          .partialEntity else { return }
        partial._knot_values = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSCREW_PAIR`` )
    public var PITCH: tLENGTH_MEASURE?  {
      get {
        return sub_eSCREW_PAIR?.partialEntity._pitch
      }
      set(newValue) {
        guard let partial = sub_eSCREW_PAIR?.super_eSCREW_PAIR.partialEntity else { return }
        partial._pitch = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eB_SPLINE_CURVE`` )
    public var DEGREE: SDAI.INTEGER?  {
      get {
        return sub_eB_SPLINE_CURVE?.partialEntity._degree
      }
      set(newValue) {
        guard let partial = sub_eB_SPLINE_CURVE?.super_eB_SPLINE_CURVE.partialEntity else { return }
        partial._degree = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eFILL_AREA_STYLE_TILES`` )
    public var TILING_PATTERN: eTWO_DIRECTION_REPEAT_FACTOR?  {
      get {
        return sub_eFILL_AREA_STYLE_TILES?.partialEntity._tiling_pattern
      }
      set(newValue) {
        guard let partial = sub_eFILL_AREA_STYLE_TILES?.super_eFILL_AREA_STYLE_TILES.partialEntity
          else { return }
        partial._tiling_pattern = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePAIR_VALUE`` )
    public var APPLIES_TO_PAIR: eKINEMATIC_PAIR?  {
      get {
        return sub_ePAIR_VALUE?.partialEntity._applies_to_pair
      }
      set(newValue) {
        guard let partial = sub_ePAIR_VALUE?.super_ePAIR_VALUE.partialEntity else { return }
        partial._applies_to_pair = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eGEAR_PAIR_WITH_RANGE`` )
    public var UPPER_LIMIT_ACTUAL_ROTATION_1: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eGEAR_PAIR_WITH_RANGE?.partialEntity._upper_limit_actual_rotation_1
      }
      set(newValue) {
        guard let partial = sub_eGEAR_PAIR_WITH_RANGE?.super_eGEAR_PAIR_WITH_RANGE.partialEntity
          else { return }
        partial._upper_limit_actual_rotation_1 = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_STEPPED_ROUND_HOLE_AND_CONICAL_TRANSITIONS`` )
    public var CONICAL_TRANSITIONS: (SDAI.SET<eCONICAL_STEPPED_HOLE_TRANSITION>/*[1:nil]*/ )?  {
      get {
        return sub_eSOLID_WITH_STEPPED_ROUND_HOLE_AND_CONICAL_TRANSITIONS?.partialEntity._conical_transitions
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_STEPPED_ROUND_HOLE_AND_CONICAL_TRANSITIONS?.super_eSOLID_WITH_STEPPED_ROUND_HOLE_AND_CONICAL_TRANSITIONS
          .partialEntity else { return }
        partial._conical_transitions = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eFILL_AREA_STYLE_TILE_SYMBOL_WITH_STYLE`` )
    public var SYMBOL: eANNOTATION_SYMBOL_OCCURRENCE?  {
      get {
        return sub_eFILL_AREA_STYLE_TILE_SYMBOL_WITH_STYLE?.partialEntity._symbol
      }
      set(newValue) {
        guard let partial = sub_eFILL_AREA_STYLE_TILE_SYMBOL_WITH_STYLE?.super_eFILL_AREA_STYLE_TILE_SYMBOL_WITH_STYLE
          .partialEntity else { return }
        partial._symbol = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eRECTANGULAR_TRIMMED_SURFACE`` )
    public var U1: tPARAMETER_VALUE?  {
      get {
        return sub_eRECTANGULAR_TRIMMED_SURFACE?.partialEntity._u1
      }
      set(newValue) {
        guard let partial = sub_eRECTANGULAR_TRIMMED_SURFACE?.super_eRECTANGULAR_TRIMMED_SURFACE
          .partialEntity else { return }
        partial._u1 = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eGEAR_PAIR`` )
    public var BEVEL: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eGEAR_PAIR?.partialEntity._bevel
      }
      set(newValue) {
        guard let partial = sub_eGEAR_PAIR?.super_eGEAR_PAIR.partialEntity else { return }
        partial._bevel = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eKINEMATIC_PATH`` )
    public var CLOSED_PATH: SDAI.LOGICAL {
      get {
        if let cached = cachedValue(derivedAttributeName:"CLOSED_PATH") {
          return cached.value as! SDAI.LOGICAL
        }
        guard let origin = sub_eKINEMATIC_PATH else { return nil }
        let value = SDAI.LOGICAL( SDAI.LOGICAL(origin.partialEntity._closed_path__getter(SELF: origin)) )
        updateCache(derivedAttributeName:"CLOSED_PATH", value:value)
        return value
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``ePRIMITIVE_2D_WITH_INNER_BOUNDARY`` )
    public var INNER_BOUNDARY: sCOMPOUND_INNER_AREA_BOUNDARY?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"INNER_BOUNDARY") {
          return cached.value as! sCOMPOUND_INNER_AREA_BOUNDARY? 
        }
        guard let origin = sub_ePRIMITIVE_2D_WITH_INNER_BOUNDARY else { return nil }
        let value = sCOMPOUND_INNER_AREA_BOUNDARY(origin.partialEntity._inner_boundary__getter(SELF: origin))
        updateCache(derivedAttributeName:"INNER_BOUNDARY", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eRECTANGULAR_TRIMMED_SURFACE`` )
    public var U2: tPARAMETER_VALUE?  {
      get {
        return sub_eRECTANGULAR_TRIMMED_SURFACE?.partialEntity._u2
      }
      set(newValue) {
        guard let partial = sub_eRECTANGULAR_TRIMMED_SURFACE?.super_eRECTANGULAR_TRIMMED_SURFACE
          .partialEntity else { return }
        partial._u2 = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePOINT_CLOUD_DATASET`` )
    public var POINT_COORDINATES: (SDAI.LIST<SDAI.LIST<SDAI.REAL>/*[3:3]*/ >/*[1:nil]*/ )?  {
      get {
        return sub_ePOINT_CLOUD_DATASET?.partialEntity._point_coordinates
      }
      set(newValue) {
        guard let partial = sub_ePOINT_CLOUD_DATASET?.super_ePOINT_CLOUD_DATASET.partialEntity
          else { return }
        partial._point_coordinates = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eDUPIN_CYCLIDE_SURFACE`` )
    public var SKEWNESS: tLENGTH_MEASURE?  {
      get {
        return sub_eDUPIN_CYCLIDE_SURFACE?.partialEntity._skewness
      }
      set(newValue) {
        guard let partial = sub_eDUPIN_CYCLIDE_SURFACE?.super_eDUPIN_CYCLIDE_SURFACE.partialEntity
          else { return }
        partial._skewness = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eFILL_AREA_STYLE_TILES`` )
    public var TILING_SCALE: tPOSITIVE_RATIO_MEASURE?  {
      get {
        return sub_eFILL_AREA_STYLE_TILES?.partialEntity._tiling_scale
      }
      set(newValue) {
        guard let partial = sub_eFILL_AREA_STYLE_TILES?.super_eFILL_AREA_STYLE_TILES.partialEntity
          else { return }
        partial._tiling_scale = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eVOLUME_WITH_FACES`` )
    public var VOLUME_GEOMETRY: eVOLUME?  {
      get {
        return sub_eVOLUME_WITH_FACES?.partialEntity._volume_geometry
      }
      set(newValue) {
        guard let partial = sub_eVOLUME_WITH_FACES?.super_eVOLUME_WITH_FACES.partialEntity else { return }
        partial._volume_geometry = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_PROTRUSION`` )
    public var PROTRUSION_DRAFT_ANGLE: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eSOLID_WITH_PROTRUSION?.partialEntity._protrusion_draft_angle
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_PROTRUSION?.super_eSOLID_WITH_PROTRUSION.partialEntity
          else { return }
        partial._protrusion_draft_angle = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCARTESIAN_TRANSFORMATION_OPERATOR`` )
    public var LOCAL_ORIGIN: eCARTESIAN_POINT?  {
      get {
        return sub_eCARTESIAN_TRANSFORMATION_OPERATOR?.partialEntity._local_origin
      }
      set(newValue) {
        guard let partial = sub_eCARTESIAN_TRANSFORMATION_OPERATOR?.super_eCARTESIAN_TRANSFORMATION_OPERATOR
          .partialEntity else { return }
        partial._local_origin = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eCARTESIAN_TRANSFORMATION_OPERATOR`` )
    public var SCL: SDAI.REAL?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"SCL") {
          return cached.value as! SDAI.REAL? 
        }
        guard let origin = sub_eCARTESIAN_TRANSFORMATION_OPERATOR else { return nil }
        let value = SDAI.REAL(origin.partialEntity._scl__getter(SELF: origin))
        updateCache(derivedAttributeName:"SCL", value:value)
        return value
      }
    }

    /// __EXPLICIT REDEF__ attribute
    /// - origin: SUB( ``eEXPLICIT_GEOMETRIC_CONSTRAINT`` )
    public var REFERENCE_ELEMENTS: (SDAI.SET<eGEOMETRIC_REPRESENTATION_ITEM>/*[0:nil]*/ )?  {
      get {
        return SDAI.SET<eGEOMETRIC_REPRESENTATION_ITEM>( sub_eEXPLICIT_GEOMETRIC_CONSTRAINT?.super_eEXPLICIT_CONSTRAINT
          .partialEntity._reference_elements )
      }
      set(newValue) {
        guard let partial = sub_eEXPLICIT_GEOMETRIC_CONSTRAINT?.super_eEXPLICIT_CONSTRAINT.partialEntity
          else { return }
        partial._reference_elements = SDAI.UNWRAP(
          SDAI.SET<eREPRESENTATION_ITEM>(newValue))
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eIMPLICIT_POINT_ON_PLANE`` )
    public var PLANE_OF_POINT: ePLANE?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"PLANE_OF_POINT") {
          return cached.value as! ePLANE? 
        }
        guard let origin = sub_eIMPLICIT_POINT_ON_PLANE else { return nil }
        let value = ePLANE(origin.partialEntity._plane_of_point__getter(SELF: origin))
        updateCache(derivedAttributeName:"PLANE_OF_POINT", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eFILL_AREA_STYLE_HATCHING`` )
    public var PATTERN_START: eCARTESIAN_POINT?  {
      get {
        return sub_eFILL_AREA_STYLE_HATCHING?.partialEntity._pattern_start
      }
      set(newValue) {
        guard let partial = sub_eFILL_AREA_STYLE_HATCHING?.super_eFILL_AREA_STYLE_HATCHING.partialEntity
          else { return }
        partial._pattern_start = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT REDEF__ attribute
    /// - origin: SUB( ``eKINEMATIC_PAIR`` )
    public var TRANSFORM_ITEM_1: sRIGID_PLACEMENT?  {
      get {
        return sRIGID_PLACEMENT( sub_eKINEMATIC_PAIR?.super_eITEM_DEFINED_TRANSFORMATION.partialEntity
          ._transform_item_1 )
      }
      set(newValue) {
        guard let partial = sub_eKINEMATIC_PAIR?.super_eITEM_DEFINED_TRANSFORMATION.partialEntity
          else { return }
        partial._transform_item_1 = SDAI.UNWRAP(
          eREPRESENTATION_ITEM(newValue))
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_RECTANGULAR_PROTRUSION`` )
    public var PROTRUSION_LENGTH: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eSOLID_WITH_RECTANGULAR_PROTRUSION?.partialEntity._protrusion_length
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_RECTANGULAR_PROTRUSION?.super_eSOLID_WITH_RECTANGULAR_PROTRUSION
          .partialEntity else { return }
        partial._protrusion_length = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eUNIVERSAL_PAIR_VALUE`` )
    public var SECOND_ROTATION_ANGLE: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eUNIVERSAL_PAIR_VALUE?.partialEntity._second_rotation_angle
      }
      set(newValue) {
        guard let partial = sub_eUNIVERSAL_PAIR_VALUE?.super_eUNIVERSAL_PAIR_VALUE.partialEntity
          else { return }
        partial._second_rotation_angle = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eFILL_AREA_STYLE_HATCHING`` )
    public var POINT_OF_REFERENCE_HATCH_LINE: eCARTESIAN_POINT?  {
      get {
        return sub_eFILL_AREA_STYLE_HATCHING?.partialEntity._point_of_reference_hatch_line
      }
      set(newValue) {
        guard let partial = sub_eFILL_AREA_STYLE_HATCHING?.super_eFILL_AREA_STYLE_HATCHING.partialEntity
          else { return }
        partial._point_of_reference_hatch_line = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT REDEF__ attribute
    /// - origin: SUB( ``eKINEMATIC_PAIR`` )
    public var TRANSFORM_ITEM_2: sRIGID_PLACEMENT?  {
      get {
        return sRIGID_PLACEMENT( sub_eKINEMATIC_PAIR?.super_eITEM_DEFINED_TRANSFORMATION.partialEntity
          ._transform_item_2 )
      }
      set(newValue) {
        guard let partial = sub_eKINEMATIC_PAIR?.super_eITEM_DEFINED_TRANSFORMATION.partialEntity
          else { return }
        partial._transform_item_2 = SDAI.UNWRAP(
          eREPRESENTATION_ITEM(newValue))
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eUNIVERSAL_PAIR_WITH_RANGE`` )
    public var LOWER_LIMIT_SECOND_ROTATION: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eUNIVERSAL_PAIR_WITH_RANGE?.partialEntity._lower_limit_second_rotation
      }
      set(newValue) {
        guard let partial = sub_eUNIVERSAL_PAIR_WITH_RANGE?.super_eUNIVERSAL_PAIR_WITH_RANGE.partialEntity
          else { return }
        partial._lower_limit_second_rotation = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_CIRCULAR_POCKET`` )
    public var POCKET_RADIUS: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eSOLID_WITH_CIRCULAR_POCKET?.partialEntity._pocket_radius
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_CIRCULAR_POCKET?.super_eSOLID_WITH_CIRCULAR_POCKET.partialEntity
          else { return }
        partial._pocket_radius = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePLANAR_EXTENT`` )
    public var SIZE_IN_X: tLENGTH_MEASURE?  {
      get {
        return sub_ePLANAR_EXTENT?.partialEntity._size_in_x
      }
      set(newValue) {
        guard let partial = sub_ePLANAR_EXTENT?.super_ePLANAR_EXTENT.partialEntity else { return }
        partial._size_in_x = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eGEAR_PAIR`` )
    public var RADIUS_SECOND_LINK: tLENGTH_MEASURE?  {
      get {
        return sub_eGEAR_PAIR?.partialEntity._radius_second_link
      }
      set(newValue) {
        guard let partial = sub_eGEAR_PAIR?.super_eGEAR_PAIR.partialEntity else { return }
        partial._radius_second_link = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCOMPLEX_SHELLED_SOLID`` )
    public var THICKENED_FACE_LIST: (SDAI.LIST<SDAI.SET<eFACE_SURFACE>/*[1:nil]*/ >/*[1:nil]*/ )?  {
      get {
        return sub_eCOMPLEX_SHELLED_SOLID?.partialEntity._thickened_face_list
      }
      set(newValue) {
        guard let partial = sub_eCOMPLEX_SHELLED_SOLID?.super_eCOMPLEX_SHELLED_SOLID.partialEntity
          else { return }
        partial._thickened_face_list = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eUNIVERSAL_PAIR_WITH_RANGE`` )
    public var UPPER_LIMIT_FIRST_ROTATION: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eUNIVERSAL_PAIR_WITH_RANGE?.partialEntity._upper_limit_first_rotation
      }
      set(newValue) {
        guard let partial = sub_eUNIVERSAL_PAIR_WITH_RANGE?.super_eUNIVERSAL_PAIR_WITH_RANGE.partialEntity
          else { return }
        partial._upper_limit_first_rotation = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePLANAR_EXTENT`` )
    public var SIZE_IN_Y: tLENGTH_MEASURE?  {
      get {
        return sub_ePLANAR_EXTENT?.partialEntity._size_in_y
      }
      set(newValue) {
        guard let partial = sub_ePLANAR_EXTENT?.super_ePLANAR_EXTENT.partialEntity else { return }
        partial._size_in_y = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_RECTANGULAR_POCKET`` )
    public var CORNER_RADIUS: tNON_NEGATIVE_LENGTH_MEASURE?  {
      get {
        return sub_eSOLID_WITH_RECTANGULAR_POCKET?.partialEntity._corner_radius
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_RECTANGULAR_POCKET?.super_eSOLID_WITH_RECTANGULAR_POCKET
          .partialEntity else { return }
        partial._corner_radius = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePOINT_ON_PLANAR_CURVE_PAIR_VALUE`` )
    public var ACTUAL_POINT_ON_CURVE: ePOINT_ON_CURVE?  {
      get {
        return sub_ePOINT_ON_PLANAR_CURVE_PAIR_VALUE?.partialEntity._actual_point_on_curve
      }
      set(newValue) {
        guard let partial = sub_ePOINT_ON_PLANAR_CURVE_PAIR_VALUE?.super_ePOINT_ON_PLANAR_CURVE_PAIR_VALUE
          .partialEntity else { return }
        partial._actual_point_on_curve = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePOINT_CLOUD_DATASET_WITH_INTENSITIES`` )
    public var INTENSITIES: (SDAI.LIST<SDAI.REAL>/*[1:nil]*/ )?  {
      get {
        return sub_ePOINT_CLOUD_DATASET_WITH_INTENSITIES?.partialEntity._intensities
      }
      set(newValue) {
        guard let partial = sub_ePOINT_CLOUD_DATASET_WITH_INTENSITIES?.super_ePOINT_CLOUD_DATASET_WITH_INTENSITIES
          .partialEntity else { return }
        partial._intensities = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eGEAR_PAIR_WITH_RANGE`` )
    public var LOWER_LIMIT_ACTUAL_ROTATION_1: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eGEAR_PAIR_WITH_RANGE?.partialEntity._lower_limit_actual_rotation_1
      }
      set(newValue) {
        guard let partial = sub_eGEAR_PAIR_WITH_RANGE?.super_eGEAR_PAIR_WITH_RANGE.partialEntity
          else { return }
        partial._lower_limit_actual_rotation_1 = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSURFACE_REPLICA`` )
    public var PARENT_SURFACE: eSURFACE?  {
      get {
        return sub_eSURFACE_REPLICA?.partialEntity._parent_surface
      }
      set(newValue) {
        guard let partial = sub_eSURFACE_REPLICA?.super_eSURFACE_REPLICA.partialEntity else { return }
        partial._parent_surface = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSYMBOL_TARGET`` )
    public var Y_SCALE: tPOSITIVE_RATIO_MEASURE?  {
      get {
        return sub_eSYMBOL_TARGET?.partialEntity._y_scale
      }
      set(newValue) {
        guard let partial = sub_eSYMBOL_TARGET?.super_eSYMBOL_TARGET.partialEntity else { return }
        partial._y_scale = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eINTERPOLATED_CONFIGURATION_SEQUENCE`` )
    public var CONFIGURED_MECHANISM: eMECHANISM_REPRESENTATION?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"CONFIGURED_MECHANISM") {
          return cached.value as! eMECHANISM_REPRESENTATION? 
        }
        guard let origin = sub_eINTERPOLATED_CONFIGURATION_SEQUENCE else { return nil }
        let value = eMECHANISM_REPRESENTATION(origin.partialEntity._configured_mechanism__getter(SELF: origin))
        updateCache(derivedAttributeName:"CONFIGURED_MECHANISM", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eUNCONSTRAINED_PAIR_VALUE`` )
    public var ACTUAL_PLACEMENT: eAXIS2_PLACEMENT_3D?  {
      get {
        return sub_eUNCONSTRAINED_PAIR_VALUE?.partialEntity._actual_placement
      }
      set(newValue) {
        guard let partial = sub_eUNCONSTRAINED_PAIR_VALUE?.super_eUNCONSTRAINED_PAIR_VALUE.partialEntity
          else { return }
        partial._actual_placement = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE`` )
    public var LOWER_LIMIT_ACTUAL_TRANSLATION_Z: tLENGTH_MEASURE?  {
      get {
        return sub_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE?.partialEntity._lower_limit_actual_translation_z
      }
      set(newValue) {
        guard let partial = sub_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE?.super_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE
          .partialEntity else { return }
        partial._lower_limit_actual_translation_z = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eRECTANGULAR_TRIMMED_SURFACE`` )
    public var USENSE: SDAI.BOOLEAN?  {
      get {
        return sub_eRECTANGULAR_TRIMMED_SURFACE?.partialEntity._usense
      }
      set(newValue) {
        guard let partial = sub_eRECTANGULAR_TRIMMED_SURFACE?.super_eRECTANGULAR_TRIMMED_SURFACE
          .partialEntity else { return }
        partial._usense = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eB_SPLINE_SURFACE`` )
    public var SURFACE_FORM: nB_SPLINE_SURFACE_FORM?  {
      get {
        return sub_eB_SPLINE_SURFACE?.partialEntity._surface_form
      }
      set(newValue) {
        guard let partial = sub_eB_SPLINE_SURFACE?.super_eB_SPLINE_SURFACE.partialEntity else { return }
        partial._surface_form = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eHYPERBOLA`` )
    public var SEMI_IMAG_AXIS: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eHYPERBOLA?.partialEntity._semi_imag_axis
      }
      set(newValue) {
        guard let partial = sub_eHYPERBOLA?.super_eHYPERBOLA.partialEntity else { return }
        partial._semi_imag_axis = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eEVALUATED_DEGENERATE_PCURVE`` )
    public var EQUIVALENT_POINT: eCARTESIAN_POINT?  {
      get {
        return sub_eEVALUATED_DEGENERATE_PCURVE?.partialEntity._equivalent_point
      }
      set(newValue) {
        guard let partial = sub_eEVALUATED_DEGENERATE_PCURVE?.super_eEVALUATED_DEGENERATE_PCURVE
          .partialEntity else { return }
        partial._equivalent_point = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSPHERICAL_POINT`` )
    public var PHI: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eSPHERICAL_POINT?.partialEntity._phi
      }
      set(newValue) {
        guard let partial = sub_eSPHERICAL_POINT?.super_eSPHERICAL_POINT.partialEntity else { return }
        partial._phi = SDAI.UNWRAP(newValue)
      }
    }

    /// __INVERSE__ attribute
    /// observing eDRAUGHTING_CALLOUT .CONTENTS
    /// - origin: SUB( ``eANNOTATION_PLACEHOLDER_OCCURRENCE`` )
    public var THE_CALLOUT: eDRAUGHTING_CALLOUT?  {
      get {
        return sub_eANNOTATION_PLACEHOLDER_OCCURRENCE?.partialEntity._the_callout
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_STRAIGHT_SLOT`` )
    public var SLOT_LENGTH: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eSOLID_WITH_STRAIGHT_SLOT?.partialEntity._slot_length
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_STRAIGHT_SLOT?.super_eSOLID_WITH_STRAIGHT_SLOT.partialEntity
          else { return }
        partial._slot_length = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eB_SPLINE_CURVE_WITH_KNOTS`` )
    public var KNOT_MULTIPLICITIES: (SDAI.LIST<SDAI.INTEGER>/*[2:nil]*/ )?  {
      get {
        return sub_eB_SPLINE_CURVE_WITH_KNOTS?.partialEntity._knot_multiplicities
      }
      set(newValue) {
        guard let partial = sub_eB_SPLINE_CURVE_WITH_KNOTS?.super_eB_SPLINE_CURVE_WITH_KNOTS.partialEntity
          else { return }
        partial._knot_multiplicities = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eMODIFIED_SOLID`` )
    public var RATIONALE: tTEXT?  {
      get {
        return sub_eMODIFIED_SOLID?.partialEntity._rationale
      }
      set(newValue) {
        guard let partial = sub_eMODIFIED_SOLID?.super_eMODIFIED_SOLID.partialEntity else { return }
        partial._rationale = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_DOUBLE_OFFSET_CHAMFER`` )
    public var RIGHT_OFFSET_DISTANCE: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eSOLID_WITH_DOUBLE_OFFSET_CHAMFER?.partialEntity._right_offset_distance
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_DOUBLE_OFFSET_CHAMFER?.super_eSOLID_WITH_DOUBLE_OFFSET_CHAMFER
          .partialEntity else { return }
        partial._right_offset_distance = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eDUPIN_CYCLIDE_SURFACE`` )
    public var GENERALISED_MINOR_RADIUS: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eDUPIN_CYCLIDE_SURFACE?.partialEntity._generalised_minor_radius
      }
      set(newValue) {
        guard let partial = sub_eDUPIN_CYCLIDE_SURFACE?.super_eDUPIN_CYCLIDE_SURFACE.partialEntity
          else { return }
        partial._generalised_minor_radius = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eRECTANGULAR_TRIMMED_SURFACE`` )
    public var V2: tPARAMETER_VALUE?  {
      get {
        return sub_eRECTANGULAR_TRIMMED_SURFACE?.partialEntity._v2
      }
      set(newValue) {
        guard let partial = sub_eRECTANGULAR_TRIMMED_SURFACE?.super_eRECTANGULAR_TRIMMED_SURFACE
          .partialEntity else { return }
        partial._v2 = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_GROOVE`` )
    public var GROOVE_WIDTH: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eSOLID_WITH_GROOVE?.partialEntity._groove_width
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_GROOVE?.super_eSOLID_WITH_GROOVE.partialEntity else { return }
        partial._groove_width = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eANNOTATION_PLACEHOLDER_OCCURRENCE`` )
    public var LINE_SPACING: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eANNOTATION_PLACEHOLDER_OCCURRENCE?.partialEntity._line_spacing
      }
      set(newValue) {
        guard let partial = sub_eANNOTATION_PLACEHOLDER_OCCURRENCE?.super_eANNOTATION_PLACEHOLDER_OCCURRENCE
          .partialEntity else { return }
        partial._line_spacing = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCSG_SOLID`` )
    public var TREE_ROOT_EXPRESSION: sCSG_SELECT?  {
      get {
        return sub_eCSG_SOLID?.partialEntity._tree_root_expression
      }
      set(newValue) {
        guard let partial = sub_eCSG_SOLID?.super_eCSG_SOLID.partialEntity else { return }
        partial._tree_root_expression = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePOINT_ON_CURVE`` )
    public var POINT_PARAMETER: tPARAMETER_VALUE?  {
      get {
        return sub_ePOINT_ON_CURVE?.partialEntity._point_parameter
      }
      set(newValue) {
        guard let partial = sub_ePOINT_ON_CURVE?.super_ePOINT_ON_CURVE.partialEntity else { return }
        partial._point_parameter = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePOINT_ON_EDGE_CURVE`` )
    public var BASIS_EDGE_CURVE: eEDGE_CURVE?  {
      get {
        return sub_ePOINT_ON_EDGE_CURVE?.partialEntity._basis_edge_curve
      }
      set(newValue) {
        guard let partial = sub_ePOINT_ON_EDGE_CURVE?.super_ePOINT_ON_EDGE_CURVE.partialEntity
          else { return }
        partial._basis_edge_curve = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_RECTANGULAR_POCKET`` )
    public var POCKET_WIDTH: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eSOLID_WITH_RECTANGULAR_POCKET?.partialEntity._pocket_width
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_RECTANGULAR_POCKET?.super_eSOLID_WITH_RECTANGULAR_POCKET
          .partialEntity else { return }
        partial._pocket_width = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eMIN_AND_MAJOR_PLY_ORIENTATION_BASIS`` )
    public var MINOR_ORIENTATION_BASIS: eAXIS2_PLACEMENT_3D?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"MINOR_ORIENTATION_BASIS") {
          return cached.value as! eAXIS2_PLACEMENT_3D? 
        }
        guard let origin = sub_eMIN_AND_MAJOR_PLY_ORIENTATION_BASIS else { return nil }
        let value = eAXIS2_PLACEMENT_3D(origin.partialEntity._minor_orientation_basis__getter(SELF: origin))
        updateCache(derivedAttributeName:"MINOR_ORIENTATION_BASIS", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eHALF_SPACE_2D`` )
    public var BASE_CURVE: eCURVE?  {
      get {
        return sub_eHALF_SPACE_2D?.partialEntity._base_curve
      }
      set(newValue) {
        guard let partial = sub_eHALF_SPACE_2D?.super_eHALF_SPACE_2D.partialEntity else { return }
        partial._base_curve = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eFIXED_CONSTITUENT_ASSEMBLY_CONSTRAINT`` )
    public var FIXED_CONSTITUENT: eREPRESENTATIVE_SHAPE_REPRESENTATION?  {
      get {
        return sub_eFIXED_CONSTITUENT_ASSEMBLY_CONSTRAINT?.partialEntity._fixed_constituent
      }
      set(newValue) {
        guard let partial = sub_eFIXED_CONSTITUENT_ASSEMBLY_CONSTRAINT?.super_eFIXED_CONSTITUENT_ASSEMBLY_CONSTRAINT
          .partialEntity else { return }
        partial._fixed_constituent = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eRECTANGULAR_TRIMMED_SURFACE`` )
    public var V1: tPARAMETER_VALUE?  {
      get {
        return sub_eRECTANGULAR_TRIMMED_SURFACE?.partialEntity._v1
      }
      set(newValue) {
        guard let partial = sub_eRECTANGULAR_TRIMMED_SURFACE?.super_eRECTANGULAR_TRIMMED_SURFACE
          .partialEntity else { return }
        partial._v1 = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePOINT_CLOUD_DATASET_WITH_COLOURS`` )
    public var COLOUR_INDICES: (SDAI.LIST<SDAI.LIST<SDAI.INTEGER>/*[3:3]*/ >/*[1:nil]*/ )?  {
      get {
        return sub_ePOINT_CLOUD_DATASET_WITH_COLOURS?.partialEntity._colour_indices
      }
      set(newValue) {
        guard let partial = sub_ePOINT_CLOUD_DATASET_WITH_COLOURS?.super_ePOINT_CLOUD_DATASET_WITH_COLOURS
          .partialEntity else { return }
        partial._colour_indices = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eGEAR_PAIR`` )
    public var HELICAL_ANGLE: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eGEAR_PAIR?.partialEntity._helical_angle
      }
      set(newValue) {
        guard let partial = sub_eGEAR_PAIR?.super_eGEAR_PAIR.partialEntity else { return }
        partial._helical_angle = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eTEXT_LITERAL`` )
    public var LITERAL: tPRESENTABLE_TEXT?  {
      get {
        return sub_eTEXT_LITERAL?.partialEntity._literal
      }
      set(newValue) {
        guard let partial = sub_eTEXT_LITERAL?.super_eTEXT_LITERAL.partialEntity else { return }
        partial._literal = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCLOTHOID`` )
    public var CLOTHOID_CONSTANT: tLENGTH_MEASURE?  {
      get {
        return sub_eCLOTHOID?.partialEntity._clothoid_constant
      }
      set(newValue) {
        guard let partial = sub_eCLOTHOID?.super_eCLOTHOID.partialEntity else { return }
        partial._clothoid_constant = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePOINT_ON_SURFACE_PAIR`` )
    public var PAIR_SURFACE: eSURFACE?  {
      get {
        return sub_ePOINT_ON_SURFACE_PAIR?.partialEntity._pair_surface
      }
      set(newValue) {
        guard let partial = sub_ePOINT_ON_SURFACE_PAIR?.super_ePOINT_ON_SURFACE_PAIR.partialEntity
          else { return }
        partial._pair_surface = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSCULPTURED_SOLID`` )
    public var POSITIVE_SIDE: SDAI.BOOLEAN?  {
      get {
        return sub_eSCULPTURED_SOLID?.partialEntity._positive_side
      }
      set(newValue) {
        guard let partial = sub_eSCULPTURED_SOLID?.super_eSCULPTURED_SOLID.partialEntity else { return }
        partial._positive_side = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eFILL_AREA_STYLE_TILE_CURVE_WITH_STYLE`` )
    public var STYLED_CURVE: eANNOTATION_CURVE_OCCURRENCE?  {
      get {
        return sub_eFILL_AREA_STYLE_TILE_CURVE_WITH_STYLE?.partialEntity._styled_curve
      }
      set(newValue) {
        guard let partial = sub_eFILL_AREA_STYLE_TILE_CURVE_WITH_STYLE?.super_eFILL_AREA_STYLE_TILE_CURVE_WITH_STYLE
          .partialEntity else { return }
        partial._styled_curve = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCARTESIAN_TRANSFORMATION_OPERATOR_3D`` )
    public var AXIS3: eDIRECTION?  {
      get {
        return sub_eCARTESIAN_TRANSFORMATION_OPERATOR_3D?.partialEntity._axis3
      }
      set(newValue) {
        guard let partial = sub_eCARTESIAN_TRANSFORMATION_OPERATOR_3D?.super_eCARTESIAN_TRANSFORMATION_OPERATOR_3D
          .partialEntity else { return }
        partial._axis3 = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCARTESIAN_TRANSFORMATION_OPERATOR`` )
    public var AXIS2: eDIRECTION?  {
      get {
        return sub_eCARTESIAN_TRANSFORMATION_OPERATOR?.partialEntity._axis2
      }
      set(newValue) {
        guard let partial = sub_eCARTESIAN_TRANSFORMATION_OPERATOR?.super_eCARTESIAN_TRANSFORMATION_OPERATOR
          .partialEntity else { return }
        partial._axis2 = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCARTESIAN_TRANSFORMATION_OPERATOR`` )
    public var AXIS1: eDIRECTION?  {
      get {
        return sub_eCARTESIAN_TRANSFORMATION_OPERATOR?.partialEntity._axis1
      }
      set(newValue) {
        guard let partial = sub_eCARTESIAN_TRANSFORMATION_OPERATOR?.super_eCARTESIAN_TRANSFORMATION_OPERATOR
          .partialEntity else { return }
        partial._axis1 = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePOSITIONED_SKETCH`` )
    public var AUXILIARY_ELEMENTS: (SDAI.SET<eAUXILIARY_GEOMETRIC_REPRESENTATION_ITEM>/*[0:nil]*/ )?  {
      get {
        return sub_ePOSITIONED_SKETCH?.partialEntity._auxiliary_elements
      }
      set(newValue) {
        guard let partial = sub_ePOSITIONED_SKETCH?.super_ePOSITIONED_SKETCH.partialEntity else { return }
        partial._auxiliary_elements = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eMODIFIED_SOLID`` )
    public var BASE_SOLID: sBASE_SOLID_SELECT?  {
      get {
        return sub_eMODIFIED_SOLID?.partialEntity._base_solid
      }
      set(newValue) {
        guard let partial = sub_eMODIFIED_SOLID?.super_eMODIFIED_SOLID.partialEntity else { return }
        partial._base_solid = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSHELLED_SOLID`` )
    public var DELETED_FACE_SET: (SDAI.SET<eFACE_SURFACE>/*[1:nil]*/ )?  {
      get {
        return sub_eSHELLED_SOLID?.partialEntity._deleted_face_set
      }
      set(newValue) {
        guard let partial = sub_eSHELLED_SOLID?.super_eSHELLED_SOLID.partialEntity else { return }
        partial._deleted_face_set = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eEXTRUDED_FACE_SOLID_WITH_MULTIPLE_DRAFT_ANGLES`` )
    public var DRAFTED_EDGES: (SDAI.LIST<SDAI.SET<eEDGE_CURVE>/*[1:nil]*/ >/*[2:nil]*/ )?  {
      get {
        return sub_eEXTRUDED_FACE_SOLID_WITH_MULTIPLE_DRAFT_ANGLES?.partialEntity._drafted_edges
      }
      set(newValue) {
        guard let partial = sub_eEXTRUDED_FACE_SOLID_WITH_MULTIPLE_DRAFT_ANGLES?.super_eEXTRUDED_FACE_SOLID_WITH_MULTIPLE_DRAFT_ANGLES
          .partialEntity else { return }
        partial._drafted_edges = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eB_SPLINE_CURVE`` )
    public var UPPER_INDEX_ON_CONTROL_POINTS: SDAI.INTEGER?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"UPPER_INDEX_ON_CONTROL_POINTS") {
          return cached.value as! SDAI.INTEGER? 
        }
        guard let origin = sub_eB_SPLINE_CURVE else { return nil }
        let value = SDAI.INTEGER(origin.partialEntity._upper_index_on_control_points__getter(SELF: origin))
        updateCache(derivedAttributeName:"UPPER_INDEX_ON_CONTROL_POINTS", value:value)
        return value
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eB_SPLINE_CURVE_WITH_KNOTS`` )
    public var UPPER_INDEX_ON_KNOTS: SDAI.INTEGER?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"UPPER_INDEX_ON_KNOTS") {
          return cached.value as! SDAI.INTEGER? 
        }
        guard let origin = sub_eB_SPLINE_CURVE_WITH_KNOTS else { return nil }
        let value = SDAI.INTEGER(origin.partialEntity._upper_index_on_knots__getter(SELF: origin))
        updateCache(derivedAttributeName:"UPPER_INDEX_ON_KNOTS", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_ANGLE_BASED_CHAMFER`` )
    public var OFFSET_ANGLE: tPOSITIVE_PLANE_ANGLE_MEASURE?  {
      get {
        return sub_eSOLID_WITH_ANGLE_BASED_CHAMFER?.partialEntity._offset_angle
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_ANGLE_BASED_CHAMFER?.super_eSOLID_WITH_ANGLE_BASED_CHAMFER
          .partialEntity else { return }
        partial._offset_angle = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_DOUBLE_OFFSET_CHAMFER`` )
    public var LEFT_OFFSET_DISTANCE: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eSOLID_WITH_DOUBLE_OFFSET_CHAMFER?.partialEntity._left_offset_distance
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_DOUBLE_OFFSET_CHAMFER?.super_eSOLID_WITH_DOUBLE_OFFSET_CHAMFER
          .partialEntity else { return }
        partial._left_offset_distance = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_STEPPED_ROUND_HOLE`` )
    public var SEGMENT_DEPTHS: (SDAI.LIST<tPOSITIVE_LENGTH_MEASURE>/*[1:SEGMENTS]*/ )?  {
      get {
        return sub_eSOLID_WITH_STEPPED_ROUND_HOLE?.partialEntity._segment_depths
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_STEPPED_ROUND_HOLE?.super_eSOLID_WITH_STEPPED_ROUND_HOLE
          .partialEntity else { return }
        partial._segment_depths = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eUNIVERSAL_PAIR`` )
    public var INPUT_SKEW_ANGLE: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eUNIVERSAL_PAIR?.partialEntity._input_skew_angle
      }
      set(newValue) {
        guard let partial = sub_eUNIVERSAL_PAIR?.super_eUNIVERSAL_PAIR.partialEntity else { return }
        partial._input_skew_angle = newValue
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eUNIVERSAL_PAIR`` )
    public var SKEW_ANGLE: tPLANE_ANGLE_MEASURE?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"SKEW_ANGLE") {
          return cached.value as! tPLANE_ANGLE_MEASURE? 
        }
        guard let origin = sub_eUNIVERSAL_PAIR else { return nil }
        let value = tPLANE_ANGLE_MEASURE(origin.partialEntity._skew_angle__getter(SELF: origin))
        updateCache(derivedAttributeName:"SKEW_ANGLE", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eRGC_WITH_DIMENSION`` )
    public var RADIUS_VALUE: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eRGC_WITH_DIMENSION?.partialEntity._radius_value
      }
      set(newValue) {
        guard let partial = sub_eRGC_WITH_DIMENSION?.super_eRGC_WITH_DIMENSION.partialEntity else { return }
        partial._radius_value = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_TEE_SECTION_SLOT`` )
    public var COLLAR_DEPTH: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eSOLID_WITH_TEE_SECTION_SLOT?.partialEntity._collar_depth
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_TEE_SECTION_SLOT?.super_eSOLID_WITH_TEE_SECTION_SLOT
          .partialEntity else { return }
        partial._collar_depth = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSURFACE_CURVE`` )
    public var ASSOCIATED_GEOMETRY: (SDAI.LIST<sPCURVE_OR_SURFACE>/*[1:2]*/ )?  {
      get {
        return sub_eSURFACE_CURVE?.partialEntity._associated_geometry
      }
      set(newValue) {
        guard let partial = sub_eSURFACE_CURVE?.super_eSURFACE_CURVE.partialEntity else { return }
        partial._associated_geometry = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eAGC_WITH_DIMENSION`` )
    public var ANGLE_VALUE: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eAGC_WITH_DIMENSION?.partialEntity._angle_value
      }
      set(newValue) {
        guard let partial = sub_eAGC_WITH_DIMENSION?.super_eAGC_WITH_DIMENSION.partialEntity else { return }
        partial._angle_value = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eDIRECTION`` )
    public var DIRECTION_RATIOS: (SDAI.LIST<SDAI.REAL>/*[2:3]*/ )?  {
      get {
        return sub_eDIRECTION?.partialEntity._direction_ratios
      }
      set(newValue) {
        guard let partial = sub_eDIRECTION?.super_eDIRECTION.partialEntity else { return }
        partial._direction_ratios = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_SLOT`` )
    public var CLOSED_ENDS: (SDAI.LIST<SDAI.LOGICAL>/*[2:2]*/ )?  {
      get {
        return sub_eSOLID_WITH_SLOT?.partialEntity._closed_ends
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_SLOT?.super_eSOLID_WITH_SLOT.partialEntity else { return }
        partial._closed_ends = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eFACE_BASED_SURFACE_MODEL`` )
    public var FBSM_FACES: (SDAI.SET<eCONNECTED_FACE_SET>/*[1:nil]*/ )?  {
      get {
        return sub_eFACE_BASED_SURFACE_MODEL?.partialEntity._fbsm_faces
      }
      set(newValue) {
        guard let partial = sub_eFACE_BASED_SURFACE_MODEL?.super_eFACE_BASED_SURFACE_MODEL.partialEntity
          else { return }
        partial._fbsm_faces = SDAI.UNWRAP(newValue)
      }
    }

    /// __INVERSE__ attribute
    /// observing eDRAUGHTING_MODEL_ITEM_ASSOCIATION_WITH_PLACEHOLDER .ANNOTATION_PLACEHOLDER
    /// - origin: SUB( ``eANNOTATION_PLACEHOLDER_OCCURRENCE`` )
    public var THE_DRAUGHTING_MODEL_ITEM_ASSOCIATION_WITH_PLACEHOLDERS: (SDAI.SET<
      eDRAUGHTING_MODEL_ITEM_ASSOCIATION_WITH_PLACEHOLDER>/*[0:1]*/ )?  {
      get {
        return sub_eANNOTATION_PLACEHOLDER_OCCURRENCE?.partialEntity
          ._the_draughting_model_item_association_with_placeholders
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eHALF_SPACE_SOLID`` )
    public var BASE_SURFACE: eSURFACE?  {
      get {
        return sub_eHALF_SPACE_SOLID?.partialEntity._base_surface
      }
      set(newValue) {
        guard let partial = sub_eHALF_SPACE_SOLID?.super_eHALF_SPACE_SOLID.partialEntity else { return }
        partial._base_surface = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCURVE_REPLICA`` )
    public var PARENT_CURVE: eCURVE?  {
      get {
        return sub_eCURVE_REPLICA?.partialEntity._parent_curve
      }
      set(newValue) {
        guard let partial = sub_eCURVE_REPLICA?.super_eCURVE_REPLICA.partialEntity else { return }
        partial._parent_curve = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCAMERA_MODEL_D2`` )
    public var VIEW_WINDOW: ePLANAR_BOX?  {
      get {
        return sub_eCAMERA_MODEL_D2?.partialEntity._view_window
      }
      set(newValue) {
        guard let partial = sub_eCAMERA_MODEL_D2?.super_eCAMERA_MODEL_D2.partialEntity else { return }
        partial._view_window = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE`` )
    public var UPPER_LIMIT_ACTUAL_ROTATION_Y: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE?.partialEntity._upper_limit_actual_rotation_y
      }
      set(newValue) {
        guard let partial = sub_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE?.super_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE
          .partialEntity else { return }
        partial._upper_limit_actual_rotation_y = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE`` )
    public var UPPER_LIMIT_ACTUAL_ROTATION_X: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE?.partialEntity._upper_limit_actual_rotation_x
      }
      set(newValue) {
        guard let partial = sub_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE?.super_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE
          .partialEntity else { return }
        partial._upper_limit_actual_rotation_x = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE`` )
    public var UPPER_LIMIT_ACTUAL_ROTATION_Z: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE?.partialEntity._upper_limit_actual_rotation_z
      }
      set(newValue) {
        guard let partial = sub_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE?.super_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE
          .partialEntity else { return }
        partial._upper_limit_actual_rotation_z = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eTESSELLATED_EDGE`` )
    public var LINE_STRIP: (SDAI.LIST<SDAI.INTEGER>/*[2:nil]*/ )?  {
      get {
        return sub_eTESSELLATED_EDGE?.partialEntity._line_strip
      }
      set(newValue) {
        guard let partial = sub_eTESSELLATED_EDGE?.super_eTESSELLATED_EDGE.partialEntity else { return }
        partial._line_strip = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_GROOVE`` )
    public var GROOVE_RADIUS: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eSOLID_WITH_GROOVE?.partialEntity._groove_radius
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_GROOVE?.super_eSOLID_WITH_GROOVE.partialEntity else { return }
        partial._groove_radius = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT REDEF__ attribute
    /// - origin: SUB( ``ePOINT_AND_VECTOR`` )
    public var ITEM_ELEMENT: tPOINT_AND_VECTOR_MEMBERS?  {
      get {
        return tPOINT_AND_VECTOR_MEMBERS( sub_ePOINT_AND_VECTOR?.super_eCOMPOUND_REPRESENTATION_ITEM
          .partialEntity._item_element )
      }
      set(newValue) {
        guard let partial = sub_ePOINT_AND_VECTOR?.super_eCOMPOUND_REPRESENTATION_ITEM.partialEntity
          else { return }
        partial._item_element = SDAI.UNWRAP(
          sCOMPOUND_ITEM_DEFINITION(newValue))
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eIMPLICIT_INTERSECTION_CURVE`` )
    public var EXTERNAL_SURFACE: eSURFACE?  {
      get {
        return sub_eIMPLICIT_INTERSECTION_CURVE?.partialEntity._external_surface
      }
      set(newValue) {
        guard let partial = sub_eIMPLICIT_INTERSECTION_CURVE?.super_eIMPLICIT_INTERSECTION_CURVE
          .partialEntity else { return }
        partial._external_surface = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_SPHERICAL_BOTTOM_ROUND_HOLE`` )
    public var SPHERE_RADIUS: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eSOLID_WITH_SPHERICAL_BOTTOM_ROUND_HOLE?.partialEntity._sphere_radius
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_SPHERICAL_BOTTOM_ROUND_HOLE?.super_eSOLID_WITH_SPHERICAL_BOTTOM_ROUND_HOLE
          .partialEntity else { return }
        partial._sphere_radius = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eUNIVERSAL_PAIR_VALUE`` )
    public var FIRST_ROTATION_ANGLE: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eUNIVERSAL_PAIR_VALUE?.partialEntity._first_rotation_angle
      }
      set(newValue) {
        guard let partial = sub_eUNIVERSAL_PAIR_VALUE?.super_eUNIVERSAL_PAIR_VALUE.partialEntity
          else { return }
        partial._first_rotation_angle = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePOINT_ON_SURFACE_PAIR_WITH_RANGE`` )
    public var RANGE_ON_PAIR_SURFACE: eRECTANGULAR_TRIMMED_SURFACE?  {
      get {
        return sub_ePOINT_ON_SURFACE_PAIR_WITH_RANGE?.partialEntity._range_on_pair_surface
      }
      set(newValue) {
        guard let partial = sub_ePOINT_ON_SURFACE_PAIR_WITH_RANGE?.super_ePOINT_ON_SURFACE_PAIR_WITH_RANGE
          .partialEntity else { return }
        partial._range_on_pair_surface = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eKINEMATIC_PAIR`` )
    public var JOINT: eKINEMATIC_JOINT?  {
      get {
        return sub_eKINEMATIC_PAIR?.partialEntity._joint
      }
      set(newValue) {
        guard let partial = sub_eKINEMATIC_PAIR?.super_eKINEMATIC_PAIR.partialEntity else { return }
        partial._joint = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eGEAR_PAIR_VALUE`` )
    public var ACTUAL_ROTATION_2: tPLANE_ANGLE_MEASURE?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"ACTUAL_ROTATION_2") {
          return cached.value as! tPLANE_ANGLE_MEASURE? 
        }
        guard let origin = sub_eGEAR_PAIR_VALUE else { return nil }
        let value = tPLANE_ANGLE_MEASURE(origin.partialEntity._actual_rotation_2__getter(SELF: origin))
        updateCache(derivedAttributeName:"ACTUAL_ROTATION_2", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSU_PARAMETERS`` )
    public var GAMMA: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eSU_PARAMETERS?.partialEntity._gamma
      }
      set(newValue) {
        guard let partial = sub_eSU_PARAMETERS?.super_eSU_PARAMETERS.partialEntity else { return }
        partial._gamma = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eEXTRUDED_FACE_SOLID_WITH_TRIM_CONDITIONS`` )
    public var FIRST_OFFSET: tNON_NEGATIVE_LENGTH_MEASURE?  {
      get {
        return sub_eEXTRUDED_FACE_SOLID_WITH_TRIM_CONDITIONS?.partialEntity._first_offset
      }
      set(newValue) {
        guard let partial = sub_eEXTRUDED_FACE_SOLID_WITH_TRIM_CONDITIONS?.super_eEXTRUDED_FACE_SOLID_WITH_TRIM_CONDITIONS
          .partialEntity else { return }
        partial._first_offset = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSUBSKETCH`` )
    public var OWNING_SKETCH: sSKETCH_TYPE_SELECT?  {
      get {
        return sub_eSUBSKETCH?.partialEntity._owning_sketch
      }
      set(newValue) {
        guard let partial = sub_eSUBSKETCH?.super_eSUBSKETCH.partialEntity else { return }
        partial._owning_sketch = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCAMERA_MODEL_D2`` )
    public var VIEW_WINDOW_CLIPPING: SDAI.BOOLEAN?  {
      get {
        return sub_eCAMERA_MODEL_D2?.partialEntity._view_window_clipping
      }
      set(newValue) {
        guard let partial = sub_eCAMERA_MODEL_D2?.super_eCAMERA_MODEL_D2.partialEntity else { return }
        partial._view_window_clipping = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eB_SPLINE_VOLUME`` )
    public var W_UPPER: SDAI.INTEGER?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"W_UPPER") {
          return cached.value as! SDAI.INTEGER? 
        }
        guard let origin = sub_eB_SPLINE_VOLUME else { return nil }
        let value = SDAI.INTEGER(origin.partialEntity._w_upper__getter(SELF: origin))
        updateCache(derivedAttributeName:"W_UPPER", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eGEAR_PAIR_VALUE`` )
    public var ACTUAL_ROTATION_1: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eGEAR_PAIR_VALUE?.partialEntity._actual_rotation_1
      }
      set(newValue) {
        guard let partial = sub_eGEAR_PAIR_VALUE?.super_eGEAR_PAIR_VALUE.partialEntity else { return }
        partial._actual_rotation_1 = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSURFACE_CURVE`` )
    public var CURVE_3D: eCURVE?  {
      get {
        return sub_eSURFACE_CURVE?.partialEntity._curve_3d
      }
      set(newValue) {
        guard let partial = sub_eSURFACE_CURVE?.super_eSURFACE_CURVE.partialEntity else { return }
        partial._curve_3d = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eEXTRUDED_FACE_SOLID_WITH_MULTIPLE_DRAFT_ANGLES`` )
    public var DRAFT_ANGLES: (SDAI.LIST<tPLANE_ANGLE_MEASURE>/*[2:nil]*/ )?  {
      get {
        return sub_eEXTRUDED_FACE_SOLID_WITH_MULTIPLE_DRAFT_ANGLES?.partialEntity._draft_angles
      }
      set(newValue) {
        guard let partial = sub_eEXTRUDED_FACE_SOLID_WITH_MULTIPLE_DRAFT_ANGLES?.super_eEXTRUDED_FACE_SOLID_WITH_MULTIPLE_DRAFT_ANGLES
          .partialEntity else { return }
        partial._draft_angles = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eTESSELLATED_CONNECTING_EDGE`` )
    public var LINE_STRIP_FACE2: (SDAI.LIST<SDAI.INTEGER>/*[2:nil]*/ )?  {
      get {
        return sub_eTESSELLATED_CONNECTING_EDGE?.partialEntity._line_strip_face2
      }
      set(newValue) {
        guard let partial = sub_eTESSELLATED_CONNECTING_EDGE?.super_eTESSELLATED_CONNECTING_EDGE
          .partialEntity else { return }
        partial._line_strip_face2 = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eRACK_AND_PINION_PAIR_WITH_RANGE`` )
    public var UPPER_LIMIT_RACK_DISPLACEMENT: tLENGTH_MEASURE?  {
      get {
        return sub_eRACK_AND_PINION_PAIR_WITH_RANGE?.partialEntity._upper_limit_rack_displacement
      }
      set(newValue) {
        guard let partial = sub_eRACK_AND_PINION_PAIR_WITH_RANGE?.super_eRACK_AND_PINION_PAIR_WITH_RANGE
          .partialEntity else { return }
        partial._upper_limit_rack_displacement = newValue
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eREPOSITIONED_NEUTRAL_SKETCH`` )
    public var MAP: eREPRESENTATION_MAP?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"MAP") {
          return cached.value as! eREPRESENTATION_MAP? 
        }
        guard let origin = sub_eREPOSITIONED_NEUTRAL_SKETCH else { return nil }
        let value = eREPRESENTATION_MAP(origin.partialEntity._map__getter(SELF: origin))
        updateCache(derivedAttributeName:"MAP", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eTESSELLATED_WIRE`` )
    public var GEOMETRIC_MODEL_LINK: sPATH_OR_COMPOSITE_CURVE?  {
      get {
        return sub_eTESSELLATED_WIRE?.partialEntity._geometric_model_link
      }
      set(newValue) {
        guard let partial = sub_eTESSELLATED_WIRE?.super_eTESSELLATED_WIRE.partialEntity else { return }
        partial._geometric_model_link = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eTESSELLATED_CONNECTING_EDGE`` )
    public var LINE_STRIP_FACE1: (SDAI.LIST<SDAI.INTEGER>/*[2:nil]*/ )?  {
      get {
        return sub_eTESSELLATED_CONNECTING_EDGE?.partialEntity._line_strip_face1
      }
      set(newValue) {
        guard let partial = sub_eTESSELLATED_CONNECTING_EDGE?.super_eTESSELLATED_CONNECTING_EDGE
          .partialEntity else { return }
        partial._line_strip_face1 = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eFACE_SURFACE`` )
    public var FACE_GEOMETRY: eSURFACE?  {
      get {
        return sub_eFACE_SURFACE?.partialEntity._face_geometry
      }
      set(newValue) {
        guard let partial = sub_eFACE_SURFACE?.super_eFACE_SURFACE.partialEntity else { return }
        partial._face_geometry = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCIRCULAR_INVOLUTE`` )
    public var BASE_RADIUS: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eCIRCULAR_INVOLUTE?.partialEntity._base_radius
      }
      set(newValue) {
        guard let partial = sub_eCIRCULAR_INVOLUTE?.super_eCIRCULAR_INVOLUTE.partialEntity else { return }
        partial._base_radius = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE`` )
    public var LOWER_LIMIT_ACTUAL_ROTATION_X: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE?.partialEntity._lower_limit_actual_rotation_x
      }
      set(newValue) {
        guard let partial = sub_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE?.super_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE
          .partialEntity else { return }
        partial._lower_limit_actual_rotation_x = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eVERTEX_POINT`` )
    public var VERTEX_GEOMETRY: ePOINT?  {
      get {
        return sub_eVERTEX_POINT?.partialEntity._vertex_geometry
      }
      set(newValue) {
        guard let partial = sub_eVERTEX_POINT?.super_eVERTEX_POINT.partialEntity else { return }
        partial._vertex_geometry = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE`` )
    public var LOWER_LIMIT_ACTUAL_ROTATION_Y: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE?.partialEntity._lower_limit_actual_rotation_y
      }
      set(newValue) {
        guard let partial = sub_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE?.super_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE
          .partialEntity else { return }
        partial._lower_limit_actual_rotation_y = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_RECTANGULAR_PATTERN`` )
    public var COLUMN_COUNT: tPOSITIVE_INTEGER?  {
      get {
        return sub_eSOLID_WITH_RECTANGULAR_PATTERN?.partialEntity._column_count
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_RECTANGULAR_PATTERN?.super_eSOLID_WITH_RECTANGULAR_PATTERN
          .partialEntity else { return }
        partial._column_count = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE`` )
    public var LOWER_LIMIT_ACTUAL_ROTATION_Z: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE?.partialEntity._lower_limit_actual_rotation_z
      }
      set(newValue) {
        guard let partial = sub_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE?.super_eLOW_ORDER_KINEMATIC_PAIR_WITH_RANGE
          .partialEntity else { return }
        partial._lower_limit_actual_rotation_z = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCOMPLEX_SHELLED_SOLID`` )
    public var THICKNESS_LIST: (SDAI.LIST<tLENGTH_MEASURE>/*[1:nil]*/ )?  {
      get {
        return sub_eCOMPLEX_SHELLED_SOLID?.partialEntity._thickness_list
      }
      set(newValue) {
        guard let partial = sub_eCOMPLEX_SHELLED_SOLID?.super_eCOMPLEX_SHELLED_SOLID.partialEntity
          else { return }
        partial._thickness_list = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_RECTANGULAR_PATTERN`` )
    public var COLUMN_SPACING: tLENGTH_MEASURE?  {
      get {
        return sub_eSOLID_WITH_RECTANGULAR_PATTERN?.partialEntity._column_spacing
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_RECTANGULAR_PATTERN?.super_eSOLID_WITH_RECTANGULAR_PATTERN
          .partialEntity else { return }
        partial._column_spacing = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_RECTANGULAR_PROTRUSION`` )
    public var PROTRUSION_CORNER_RADIUS: tNON_NEGATIVE_LENGTH_MEASURE?  {
      get {
        return sub_eSOLID_WITH_RECTANGULAR_PROTRUSION?.partialEntity._protrusion_corner_radius
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_RECTANGULAR_PROTRUSION?.super_eSOLID_WITH_RECTANGULAR_PROTRUSION
          .partialEntity else { return }
        partial._protrusion_corner_radius = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eVECTOR`` )
    public var MAGNITUDE: tLENGTH_MEASURE?  {
      get {
        return sub_eVECTOR?.partialEntity._magnitude
      }
      set(newValue) {
        guard let partial = sub_eVECTOR?.super_eVECTOR.partialEntity else { return }
        partial._magnitude = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eIMPLICIT_PLANAR_CURVE`` )
    public var CURVE_PLANE: ePLANE?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"CURVE_PLANE") {
          return cached.value as! ePLANE? 
        }
        guard let origin = sub_eIMPLICIT_PLANAR_CURVE else { return nil }
        let value = ePLANE(origin.partialEntity._curve_plane__getter(SELF: origin))
        updateCache(derivedAttributeName:"CURVE_PLANE", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eLIGHT_SOURCE_SPOT`` )
    public var SPREAD_ANGLE: tPOSITIVE_PLANE_ANGLE_MEASURE?  {
      get {
        return sub_eLIGHT_SOURCE_SPOT?.partialEntity._spread_angle
      }
      set(newValue) {
        guard let partial = sub_eLIGHT_SOURCE_SPOT?.super_eLIGHT_SOURCE_SPOT.partialEntity else { return }
        partial._spread_angle = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSWEPT_AREA_SOLID`` )
    public var SWEPT_AREA: eCURVE_BOUNDED_SURFACE?  {
      get {
        return sub_eSWEPT_AREA_SOLID?.partialEntity._swept_area
      }
      set(newValue) {
        guard let partial = sub_eSWEPT_AREA_SOLID?.super_eSWEPT_AREA_SOLID.partialEntity else { return }
        partial._swept_area = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSCULPTURED_SOLID`` )
    public var SCULPTURING_ELEMENT: sGENERALIZED_SURFACE_SELECT?  {
      get {
        return sub_eSCULPTURED_SOLID?.partialEntity._sculpturing_element
      }
      set(newValue) {
        guard let partial = sub_eSCULPTURED_SOLID?.super_eSCULPTURED_SOLID.partialEntity else { return }
        partial._sculpturing_element = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eUNIVERSAL_PAIR_WITH_RANGE`` )
    public var LOWER_LIMIT_FIRST_ROTATION: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eUNIVERSAL_PAIR_WITH_RANGE?.partialEntity._lower_limit_first_rotation
      }
      set(newValue) {
        guard let partial = sub_eUNIVERSAL_PAIR_WITH_RANGE?.super_eUNIVERSAL_PAIR_WITH_RANGE.partialEntity
          else { return }
        partial._lower_limit_first_rotation = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCYCLIDE_SEGMENT_SOLID`` )
    public var CONE_ANGLE1: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eCYCLIDE_SEGMENT_SOLID?.partialEntity._cone_angle1
      }
      set(newValue) {
        guard let partial = sub_eCYCLIDE_SEGMENT_SOLID?.super_eCYCLIDE_SEGMENT_SOLID.partialEntity
          else { return }
        partial._cone_angle1 = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eKINEMATIC_PATH_DEFINED_BY_NODES`` )
    public var PLACEMENT_START: ePLACEMENT?  {
      get {
        return sub_eKINEMATIC_PATH_DEFINED_BY_NODES?.partialEntity._placement_start
      }
      set(newValue) {
        guard let partial = sub_eKINEMATIC_PATH_DEFINED_BY_NODES?.super_eKINEMATIC_PATH_DEFINED_BY_NODES
          .partialEntity else { return }
        partial._placement_start = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eLOCALLY_REFINED_SPLINE_CURVE`` )
    public var B_SPLINES: (SDAI.LIST<eLOCAL_B_SPLINE>/*[2:nil]*/ )?  {
      get {
        return sub_eLOCALLY_REFINED_SPLINE_CURVE?.partialEntity._b_splines
      }
      set(newValue) {
        guard let partial = sub_eLOCALLY_REFINED_SPLINE_CURVE?.super_eLOCALLY_REFINED_SPLINE_CURVE
          .partialEntity else { return }
        partial._b_splines = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCYCLIDE_SEGMENT_SOLID`` )
    public var CONE_ANGLE2: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eCYCLIDE_SEGMENT_SOLID?.partialEntity._cone_angle2
      }
      set(newValue) {
        guard let partial = sub_eCYCLIDE_SEGMENT_SOLID?.super_eCYCLIDE_SEGMENT_SOLID.partialEntity
          else { return }
        partial._cone_angle2 = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eDOUBLE_OFFSET_SHELLED_SOLID`` )
    public var THICKNESS2: tLENGTH_MEASURE?  {
      get {
        return sub_eDOUBLE_OFFSET_SHELLED_SOLID?.partialEntity._thickness2
      }
      set(newValue) {
        guard let partial = sub_eDOUBLE_OFFSET_SHELLED_SOLID?.super_eDOUBLE_OFFSET_SHELLED_SOLID
          .partialEntity else { return }
        partial._thickness2 = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eEDGE_BASED_WIREFRAME_MODEL`` )
    public var EBWM_BOUNDARY: (SDAI.SET<eCONNECTED_EDGE_SET>/*[1:nil]*/ )?  {
      get {
        return sub_eEDGE_BASED_WIREFRAME_MODEL?.partialEntity._ebwm_boundary
      }
      set(newValue) {
        guard let partial = sub_eEDGE_BASED_WIREFRAME_MODEL?.super_eEDGE_BASED_WIREFRAME_MODEL.partialEntity
          else { return }
        partial._ebwm_boundary = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eLOCALLY_REFINED_SPLINE_VOLUME`` )
    public var W_B_SPLINES: (SDAI.LIST<eLOCAL_B_SPLINE>/*[8:nil]*/ )?  {
      get {
        return sub_eLOCALLY_REFINED_SPLINE_VOLUME?.partialEntity._w_b_splines
      }
      set(newValue) {
        guard let partial = sub_eLOCALLY_REFINED_SPLINE_VOLUME?.super_eLOCALLY_REFINED_SPLINE_VOLUME
          .partialEntity else { return }
        partial._w_b_splines = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eHYPERBOLA`` )
    public var SEMI_AXIS: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eHYPERBOLA?.partialEntity._semi_axis
      }
      set(newValue) {
        guard let partial = sub_eHYPERBOLA?.super_eHYPERBOLA.partialEntity else { return }
        partial._semi_axis = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eFIXED_REFERENCE_SWEPT_SURFACE`` )
    public var FIXED_REFERENCE: eDIRECTION?  {
      get {
        return sub_eFIXED_REFERENCE_SWEPT_SURFACE?.partialEntity._fixed_reference
      }
      set(newValue) {
        guard let partial = sub_eFIXED_REFERENCE_SWEPT_SURFACE?.super_eFIXED_REFERENCE_SWEPT_SURFACE
          .partialEntity else { return }
        partial._fixed_reference = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eEXTRUDED_FACE_SOLID_WITH_TRIM_CONDITIONS`` )
    public var SECOND_OFFSET: tNON_NEGATIVE_LENGTH_MEASURE?  {
      get {
        return sub_eEXTRUDED_FACE_SOLID_WITH_TRIM_CONDITIONS?.partialEntity._second_offset
      }
      set(newValue) {
        guard let partial = sub_eEXTRUDED_FACE_SOLID_WITH_TRIM_CONDITIONS?.super_eEXTRUDED_FACE_SOLID_WITH_TRIM_CONDITIONS
          .partialEntity else { return }
        partial._second_offset = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCOORDINATES_LIST`` )
    public var NPOINTS: SDAI.INTEGER?  {
      get {
        return sub_eCOORDINATES_LIST?.partialEntity._npoints
      }
      set(newValue) {
        guard let partial = sub_eCOORDINATES_LIST?.super_eCOORDINATES_LIST.partialEntity else { return }
        partial._npoints = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eB_SPLINE_VOLUME`` )
    public var W_DEGREE: SDAI.INTEGER?  {
      get {
        return sub_eB_SPLINE_VOLUME?.partialEntity._w_degree
      }
      set(newValue) {
        guard let partial = sub_eB_SPLINE_VOLUME?.super_eB_SPLINE_VOLUME.partialEntity else { return }
        partial._w_degree = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCAMERA_MODEL_D3_WITH_HLHSR`` )
    public var HIDDEN_LINE_SURFACE_REMOVAL: SDAI.BOOLEAN?  {
      get {
        return sub_eCAMERA_MODEL_D3_WITH_HLHSR?.partialEntity._hidden_line_surface_removal
      }
      set(newValue) {
        guard let partial = sub_eCAMERA_MODEL_D3_WITH_HLHSR?.super_eCAMERA_MODEL_D3_WITH_HLHSR.partialEntity
          else { return }
        partial._hidden_line_surface_removal = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSU_PARAMETERS`` )
    public var ALPHA: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eSU_PARAMETERS?.partialEntity._alpha
      }
      set(newValue) {
        guard let partial = sub_eSU_PARAMETERS?.super_eSU_PARAMETERS.partialEntity else { return }
        partial._alpha = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSU_PARAMETERS`` )
    public var BETA: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eSU_PARAMETERS?.partialEntity._beta
      }
      set(newValue) {
        guard let partial = sub_eSU_PARAMETERS?.super_eSU_PARAMETERS.partialEntity else { return }
        partial._beta = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePOINT_CLOUD_SUPERDATASET`` )
    public var SUBLISTS: (SDAI.LIST<ePOINT_CLOUD_DATASET>/*[2:nil]*/ )?  {
      get {
        return sub_ePOINT_CLOUD_SUPERDATASET?.partialEntity._sublists
      }
      set(newValue) {
        guard let partial = sub_ePOINT_CLOUD_SUPERDATASET?.super_ePOINT_CLOUD_SUPERDATASET.partialEntity
          else { return }
        partial._sublists = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePARALLEL_OFFSET_GEOMETRIC_CONSTRAINT`` )
    public var OFFSET_TYPE: nPARALLEL_OFFSET_TYPE?  {
      get {
        return sub_ePARALLEL_OFFSET_GEOMETRIC_CONSTRAINT?.partialEntity._offset_type
      }
      set(newValue) {
        guard let partial = sub_ePARALLEL_OFFSET_GEOMETRIC_CONSTRAINT?.super_ePARALLEL_OFFSET_GEOMETRIC_CONSTRAINT
          .partialEntity else { return }
        partial._offset_type = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSYMMETRY_GEOMETRIC_CONSTRAINT`` )
    public var MIRROR_ELEMENT: sLINEAR_GEOMETRY_CONSTRAINT_ELEMENT?  {
      get {
        return sub_eSYMMETRY_GEOMETRIC_CONSTRAINT?.partialEntity._mirror_element
      }
      set(newValue) {
        guard let partial = sub_eSYMMETRY_GEOMETRIC_CONSTRAINT?.super_eSYMMETRY_GEOMETRIC_CONSTRAINT
          .partialEntity else { return }
        partial._mirror_element = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eLIGHT_SOURCE`` )
    public var LIGHT_COLOUR: eCOLOUR?  {
      get {
        return sub_eLIGHT_SOURCE?.partialEntity._light_colour
      }
      set(newValue) {
        guard let partial = sub_eLIGHT_SOURCE?.super_eLIGHT_SOURCE.partialEntity else { return }
        partial._light_colour = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eEDGE_CURVE`` )
    public var EDGE_GEOMETRY: eCURVE?  {
      get {
        return sub_eEDGE_CURVE?.partialEntity._edge_geometry
      }
      set(newValue) {
        guard let partial = sub_eEDGE_CURVE?.super_eEDGE_CURVE.partialEntity else { return }
        partial._edge_geometry = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCLGC_WITH_DIMENSION`` )
    public var LENGTH_VALUE: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eCLGC_WITH_DIMENSION?.partialEntity._length_value
      }
      set(newValue) {
        guard let partial = sub_eCLGC_WITH_DIMENSION?.super_eCLGC_WITH_DIMENSION.partialEntity
          else { return }
        partial._length_value = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_RECTANGULAR_PROTRUSION`` )
    public var PROTRUSION_WIDTH: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eSOLID_WITH_RECTANGULAR_PROTRUSION?.partialEntity._protrusion_width
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_RECTANGULAR_PROTRUSION?.super_eSOLID_WITH_RECTANGULAR_PROTRUSION
          .partialEntity else { return }
        partial._protrusion_width = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCONICAL_STEPPED_HOLE_TRANSITION`` )
    public var TRANSITION_NUMBER: tPOSITIVE_INTEGER?  {
      get {
        return sub_eCONICAL_STEPPED_HOLE_TRANSITION?.partialEntity._transition_number
      }
      set(newValue) {
        guard let partial = sub_eCONICAL_STEPPED_HOLE_TRANSITION?.super_eCONICAL_STEPPED_HOLE_TRANSITION
          .partialEntity else { return }
        partial._transition_number = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_CIRCULAR_PROTRUSION`` )
    public var PROTRUSION_RADIUS: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eSOLID_WITH_CIRCULAR_PROTRUSION?.partialEntity._protrusion_radius
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_CIRCULAR_PROTRUSION?.super_eSOLID_WITH_CIRCULAR_PROTRUSION
          .partialEntity else { return }
        partial._protrusion_radius = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eTWO_DIRECTION_REPEAT_FACTOR`` )
    public var SECOND_REPEAT_FACTOR: eVECTOR?  {
      get {
        return sub_eTWO_DIRECTION_REPEAT_FACTOR?.partialEntity._second_repeat_factor
      }
      set(newValue) {
        guard let partial = sub_eTWO_DIRECTION_REPEAT_FACTOR?.super_eTWO_DIRECTION_REPEAT_FACTOR
          .partialEntity else { return }
        partial._second_repeat_factor = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_CURVED_SLOT`` )
    public var SLOT_CENTRELINE: eBOUNDED_CURVE?  {
      get {
        return sub_eSOLID_WITH_CURVED_SLOT?.partialEntity._slot_centreline
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_CURVED_SLOT?.super_eSOLID_WITH_CURVED_SLOT.partialEntity
          else { return }
        partial._slot_centreline = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eGEAR_PAIR`` )
    public var RADIUS_FIRST_LINK: tLENGTH_MEASURE?  {
      get {
        return sub_eGEAR_PAIR?.partialEntity._radius_first_link
      }
      set(newValue) {
        guard let partial = sub_eGEAR_PAIR?.super_eGEAR_PAIR.partialEntity else { return }
        partial._radius_first_link = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_CONICAL_BOTTOM_ROUND_HOLE`` )
    public var SEMI_APEX_ANGLE: tPOSITIVE_PLANE_ANGLE_MEASURE?  {
      get {
        return sub_eSOLID_WITH_CONICAL_BOTTOM_ROUND_HOLE?.partialEntity._semi_apex_angle
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_CONICAL_BOTTOM_ROUND_HOLE?.super_eSOLID_WITH_CONICAL_BOTTOM_ROUND_HOLE
          .partialEntity else { return }
        partial._semi_apex_angle = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eEDGE_BLENDED_SOLID`` )
    public var BLENDED_EDGES: (SDAI.LIST_UNIQUE<eEDGE_CURVE>/*[1:nil]*/ )?  {
      get {
        return sub_eEDGE_BLENDED_SOLID?.partialEntity._blended_edges
      }
      set(newValue) {
        guard let partial = sub_eEDGE_BLENDED_SOLID?.super_eEDGE_BLENDED_SOLID.partialEntity else { return }
        partial._blended_edges = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT REDEF__ attribute
    /// - origin: SUB( ``ePAIR_REPRESENTATION_RELATIONSHIP`` )
    public var REP_1: eKINEMATIC_LINK_REPRESENTATION?  {
      get {
        return eKINEMATIC_LINK_REPRESENTATION( sub_ePAIR_REPRESENTATION_RELATIONSHIP?.super_eREPRESENTATION_RELATIONSHIP
          .partialEntity._rep_1 )
      }
      set(newValue) {
        guard let partial = sub_ePAIR_REPRESENTATION_RELATIONSHIP?.super_eREPRESENTATION_RELATIONSHIP
          .partialEntity else { return }
        partial._rep_1 = SDAI.UNWRAP(
          sREPRESENTATION_OR_REPRESENTATION_REFERENCE(newValue))
      }
    }

    /// __EXPLICIT REDEF__ attribute
    /// - origin: SUB( ``ePAIR_REPRESENTATION_RELATIONSHIP`` )
    public var REP_2: eKINEMATIC_LINK_REPRESENTATION?  {
      get {
        return eKINEMATIC_LINK_REPRESENTATION( sub_ePAIR_REPRESENTATION_RELATIONSHIP?.super_eREPRESENTATION_RELATIONSHIP
          .partialEntity._rep_2 )
      }
      set(newValue) {
        guard let partial = sub_ePAIR_REPRESENTATION_RELATIONSHIP?.super_eREPRESENTATION_RELATIONSHIP
          .partialEntity else { return }
        partial._rep_2 = SDAI.UNWRAP(
          sREPRESENTATION_OR_REPRESENTATION_REFERENCE(newValue))
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePOSITIONED_SKETCH`` )
    public var SKETCH_BASIS: sSKETCH_BASIS_SELECT?  {
      get {
        return sub_ePOSITIONED_SKETCH?.partialEntity._sketch_basis
      }
      set(newValue) {
        guard let partial = sub_ePOSITIONED_SKETCH?.super_ePOSITIONED_SKETCH.partialEntity else { return }
        partial._sketch_basis = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSHELL_BASED_SURFACE_MODEL`` )
    public var SBSM_BOUNDARY: (SDAI.SET<sSHELL>/*[1:nil]*/ )?  {
      get {
        return sub_eSHELL_BASED_SURFACE_MODEL?.partialEntity._sbsm_boundary
      }
      set(newValue) {
        guard let partial = sub_eSHELL_BASED_SURFACE_MODEL?.super_eSHELL_BASED_SURFACE_MODEL.partialEntity
          else { return }
        partial._sbsm_boundary = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePOINT_IN_VOLUME`` )
    public var POINT_PARAMETER_W: tPARAMETER_VALUE?  {
      get {
        return sub_ePOINT_IN_VOLUME?.partialEntity._point_parameter_w
      }
      set(newValue) {
        guard let partial = sub_ePOINT_IN_VOLUME?.super_ePOINT_IN_VOLUME.partialEntity else { return }
        partial._point_parameter_w = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eMANIFOLD_SOLID_BREP`` )
    public var OUTER: eCLOSED_SHELL?  {
      get {
        return sub_eMANIFOLD_SOLID_BREP?.partialEntity._outer
      }
      set(newValue) {
        guard let partial = sub_eMANIFOLD_SOLID_BREP?.super_eMANIFOLD_SOLID_BREP.partialEntity
          else { return }
        partial._outer = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCOORDINATES_LIST`` )
    public var POSITION_COORDS: (SDAI.LIST<SDAI.LIST<SDAI.REAL>/*[3:3]*/ >/*[1:nil]*/ )?  {
      get {
        return sub_eCOORDINATES_LIST?.partialEntity._position_coords
      }
      set(newValue) {
        guard let partial = sub_eCOORDINATES_LIST?.super_eCOORDINATES_LIST.partialEntity else { return }
        partial._position_coords = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSURFACE_PAIR`` )
    public var SURFACE_2: eSURFACE?  {
      get {
        return sub_eSURFACE_PAIR?.partialEntity._surface_2
      }
      set(newValue) {
        guard let partial = sub_eSURFACE_PAIR?.super_eSURFACE_PAIR.partialEntity else { return }
        partial._surface_2 = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_VARIABLE_RADIUS_EDGE_BLEND`` )
    public var EDGE_FUNCTION_LIST: (SDAI.LIST<nBLEND_RADIUS_VARIATION_TYPE>/*[1:nil]*/ )?  {
      get {
        return sub_eSOLID_WITH_VARIABLE_RADIUS_EDGE_BLEND?.partialEntity._edge_function_list
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_VARIABLE_RADIUS_EDGE_BLEND?.super_eSOLID_WITH_VARIABLE_RADIUS_EDGE_BLEND
          .partialEntity else { return }
        partial._edge_function_list = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eKINEMATIC_PAIR`` )
    public var ASSOCIATED_LINK_REPRESENTATIONS_1: (SDAI.SET<eKINEMATIC_LINK_REPRESENTATION>/*[1:nil]*/ )?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"ASSOCIATED_LINK_REPRESENTATIONS_1") {
          return cached.value as! (SDAI.SET<eKINEMATIC_LINK_REPRESENTATION>/*[1:nil]*/ )? 
        }
        guard let origin = sub_eKINEMATIC_PAIR else { return nil }
        let value = SDAI.SET<eKINEMATIC_LINK_REPRESENTATION>(
          origin.partialEntity._associated_link_representations_1__getter(SELF: origin))
        updateCache(derivedAttributeName:"ASSOCIATED_LINK_REPRESENTATIONS_1", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSURFACE_PAIR`` )
    public var SURFACE_1: eSURFACE?  {
      get {
        return sub_eSURFACE_PAIR?.partialEntity._surface_1
      }
      set(newValue) {
        guard let partial = sub_eSURFACE_PAIR?.super_eSURFACE_PAIR.partialEntity else { return }
        partial._surface_1 = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCAMERA_MODEL_D3`` )
    public var VIEW_REFERENCE_SYSTEM: eAXIS2_PLACEMENT_3D?  {
      get {
        return sub_eCAMERA_MODEL_D3?.partialEntity._view_reference_system
      }
      set(newValue) {
        guard let partial = sub_eCAMERA_MODEL_D3?.super_eCAMERA_MODEL_D3.partialEntity else { return }
        partial._view_reference_system = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT REDEF__ attribute
    /// - origin: SUB( ``eANGLE_DIRECTION_REFERENCE`` )
    public var RELATED_REPRESENTATION_ITEM: sANGLE_DIRECTION_REFERENCE_SELECT?  {
      get {
        return sANGLE_DIRECTION_REFERENCE_SELECT( sub_eANGLE_DIRECTION_REFERENCE?.super_eREPRESENTATION_ITEM_RELATIONSHIP
          .partialEntity._related_representation_item )
      }
      set(newValue) {
        guard let partial = sub_eANGLE_DIRECTION_REFERENCE?.super_eREPRESENTATION_ITEM_RELATIONSHIP
          .partialEntity else { return }
        partial._related_representation_item = SDAI.UNWRAP(
          eREPRESENTATION_ITEM(newValue))
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eKINEMATIC_PAIR`` )
    public var ASSOCIATED_LINK_REPRESENTATIONS_2: (SDAI.SET<eKINEMATIC_LINK_REPRESENTATION>/*[1:nil]*/ )?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"ASSOCIATED_LINK_REPRESENTATIONS_2") {
          return cached.value as! (SDAI.SET<eKINEMATIC_LINK_REPRESENTATION>/*[1:nil]*/ )? 
        }
        guard let origin = sub_eKINEMATIC_PAIR else { return nil }
        let value = SDAI.SET<eKINEMATIC_LINK_REPRESENTATION>(
          origin.partialEntity._associated_link_representations_2__getter(SELF: origin))
        updateCache(derivedAttributeName:"ASSOCIATED_LINK_REPRESENTATIONS_2", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eIMPLICIT_MODEL_INTERSECTION_CURVE`` )
    public var INTERSECTED_MODEL: sSURFACE_OR_SOLID_MODEL?  {
      get {
        return sub_eIMPLICIT_MODEL_INTERSECTION_CURVE?.partialEntity._intersected_model
      }
      set(newValue) {
        guard let partial = sub_eIMPLICIT_MODEL_INTERSECTION_CURVE?.super_eIMPLICIT_MODEL_INTERSECTION_CURVE
          .partialEntity else { return }
        partial._intersected_model = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCURVE_BOUNDED_SURFACE`` )
    public var IMPLICIT_OUTER: SDAI.BOOLEAN?  {
      get {
        return sub_eCURVE_BOUNDED_SURFACE?.partialEntity._implicit_outer
      }
      set(newValue) {
        guard let partial = sub_eCURVE_BOUNDED_SURFACE?.super_eCURVE_BOUNDED_SURFACE.partialEntity
          else { return }
        partial._implicit_outer = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eUNIVERSAL_PAIR_WITH_RANGE`` )
    public var UPPER_LIMIT_SECOND_ROTATION: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eUNIVERSAL_PAIR_WITH_RANGE?.partialEntity._upper_limit_second_rotation
      }
      set(newValue) {
        guard let partial = sub_eUNIVERSAL_PAIR_WITH_RANGE?.super_eUNIVERSAL_PAIR_WITH_RANGE.partialEntity
          else { return }
        partial._upper_limit_second_rotation = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eB_SPLINE_VOLUME_WITH_KNOTS`` )
    public var W_MULTIPLICITIES: (SDAI.LIST<SDAI.INTEGER>/*[2:nil]*/ )?  {
      get {
        return sub_eB_SPLINE_VOLUME_WITH_KNOTS?.partialEntity._w_multiplicities
      }
      set(newValue) {
        guard let partial = sub_eB_SPLINE_VOLUME_WITH_KNOTS?.super_eB_SPLINE_VOLUME_WITH_KNOTS.partialEntity
          else { return }
        partial._w_multiplicities = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCURVE_SMOOTHNESS_GEOMETRIC_CONSTRAINT`` )
    public var SMOOTHNESS: nTRANSITION_CODE?  {
      get {
        return sub_eCURVE_SMOOTHNESS_GEOMETRIC_CONSTRAINT?.partialEntity._smoothness
      }
      set(newValue) {
        guard let partial = sub_eCURVE_SMOOTHNESS_GEOMETRIC_CONSTRAINT?.super_eCURVE_SMOOTHNESS_GEOMETRIC_CONSTRAINT
          .partialEntity else { return }
        partial._smoothness = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_WITH_THROUGH_DEPRESSION`` )
    public var EXIT_FACES: (SDAI.SET<eFACE_SURFACE>/*[1:nil]*/ )?  {
      get {
        return sub_eSOLID_WITH_THROUGH_DEPRESSION?.partialEntity._exit_faces
      }
      set(newValue) {
        guard let partial = sub_eSOLID_WITH_THROUGH_DEPRESSION?.super_eSOLID_WITH_THROUGH_DEPRESSION
          .partialEntity else { return }
        partial._exit_faces = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePOGC_WITH_DIMENSION`` )
    public var OFFSET_VALUE: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_ePOGC_WITH_DIMENSION?.partialEntity._offset_value
      }
      set(newValue) {
        guard let partial = sub_ePOGC_WITH_DIMENSION?.super_ePOGC_WITH_DIMENSION.partialEntity
          else { return }
        partial._offset_value = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eTESSELLATED_VERTEX`` )
    public var POINT_INDEX: SDAI.INTEGER?  {
      get {
        return sub_eTESSELLATED_VERTEX?.partialEntity._point_index
      }
      set(newValue) {
        guard let partial = sub_eTESSELLATED_VERTEX?.super_eTESSELLATED_VERTEX.partialEntity else { return }
        partial._point_index = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCONICAL_STEPPED_HOLE_TRANSITION`` )
    public var CONE_BASE_RADIUS: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eCONICAL_STEPPED_HOLE_TRANSITION?.partialEntity._cone_base_radius
      }
      set(newValue) {
        guard let partial = sub_eCONICAL_STEPPED_HOLE_TRANSITION?.super_eCONICAL_STEPPED_HOLE_TRANSITION
          .partialEntity else { return }
        partial._cone_base_radius = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eLOW_ORDER_KINEMATIC_PAIR_VALUE`` )
    public var ACTUAL_ROTATION_Z: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eLOW_ORDER_KINEMATIC_PAIR_VALUE?.partialEntity._actual_rotation_z
      }
      set(newValue) {
        guard let partial = sub_eLOW_ORDER_KINEMATIC_PAIR_VALUE?.super_eLOW_ORDER_KINEMATIC_PAIR_VALUE
          .partialEntity else { return }
        partial._actual_rotation_z = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eLINE`` )
    public var DIR: eVECTOR?  {
      get {
        return sub_eLINE?.partialEntity._dir
      }
      set(newValue) {
        guard let partial = sub_eLINE?.super_eLINE.partialEntity else { return }
        partial._dir = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eLOW_ORDER_KINEMATIC_PAIR_VALUE`` )
    public var ACTUAL_ROTATION_X: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eLOW_ORDER_KINEMATIC_PAIR_VALUE?.partialEntity._actual_rotation_x
      }
      set(newValue) {
        guard let partial = sub_eLOW_ORDER_KINEMATIC_PAIR_VALUE?.super_eLOW_ORDER_KINEMATIC_PAIR_VALUE
          .partialEntity else { return }
        partial._actual_rotation_x = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCOMPOSITE_TEXT`` )
    public var COLLECTED_TEXT: (SDAI.SET<sTEXT_OR_CHARACTER>/*[2:nil]*/ )?  {
      get {
        return sub_eCOMPOSITE_TEXT?.partialEntity._collected_text
      }
      set(newValue) {
        guard let partial = sub_eCOMPOSITE_TEXT?.super_eCOMPOSITE_TEXT.partialEntity else { return }
        partial._collected_text = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eLOW_ORDER_KINEMATIC_PAIR_VALUE`` )
    public var ACTUAL_ROTATION_Y: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eLOW_ORDER_KINEMATIC_PAIR_VALUE?.partialEntity._actual_rotation_y
      }
      set(newValue) {
        guard let partial = sub_eLOW_ORDER_KINEMATIC_PAIR_VALUE?.super_eLOW_ORDER_KINEMATIC_PAIR_VALUE
          .partialEntity else { return }
        partial._actual_rotation_y = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION`` )
    public var PLACING: eAXIS2_PLACEMENT_3D?  {
      get {
        return sub_eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION?.partialEntity._placing
      }
      set(newValue) {
        guard let partial = sub_eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION?.super_eMODIFIED_SOLID_WITH_PLACED_CONFIGURATION
          .partialEntity else { return }
        partial._placing = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eRACK_AND_PINION_PAIR_VALUE`` )
    public var ACTUAL_DISPLACEMENT: tLENGTH_MEASURE?  {
      get {
        return sub_eRACK_AND_PINION_PAIR_VALUE?.partialEntity._actual_displacement
      }
      set(newValue) {
        guard let partial = sub_eRACK_AND_PINION_PAIR_VALUE?.super_eRACK_AND_PINION_PAIR_VALUE.partialEntity
          else { return }
        partial._actual_displacement = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePOINT_ON_FACE_SURFACE`` )
    public var BASIS_FACE_SURFACE: eFACE_SURFACE?  {
      get {
        return sub_ePOINT_ON_FACE_SURFACE?.partialEntity._basis_face_surface
      }
      set(newValue) {
        guard let partial = sub_ePOINT_ON_FACE_SURFACE?.super_ePOINT_ON_FACE_SURFACE.partialEntity
          else { return }
        partial._basis_face_surface = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePARABOLA`` )
    public var FOCAL_DIST: tLENGTH_MEASURE?  {
      get {
        return sub_ePARABOLA?.partialEntity._focal_dist
      }
      set(newValue) {
        guard let partial = sub_ePARABOLA?.super_ePARABOLA.partialEntity else { return }
        partial._focal_dist = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCYCLIDE_SEGMENT_SOLID`` )
    public var RADIUS1: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eCYCLIDE_SEGMENT_SOLID?.partialEntity._radius1
      }
      set(newValue) {
        guard let partial = sub_eCYCLIDE_SEGMENT_SOLID?.super_eCYCLIDE_SEGMENT_SOLID.partialEntity
          else { return }
        partial._radius1 = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT(OBSERVED)__ attribute
    /// - origin: SUB( ``eCAMERA_MODEL_D3`` )
    public var PERSPECTIVE_OF_VOLUME: eVIEW_VOLUME?  {
      get {
        return sub_eCAMERA_MODEL_D3?.partialEntity._perspective_of_volume
      }
      set(newValue) {
        guard let partial = sub_eCAMERA_MODEL_D3?.super_eCAMERA_MODEL_D3.partialEntity else { return }
        partial._perspective_of_volume = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCYCLIDE_SEGMENT_SOLID`` )
    public var RADIUS2: tPOSITIVE_LENGTH_MEASURE?  {
      get {
        return sub_eCYCLIDE_SEGMENT_SOLID?.partialEntity._radius2
      }
      set(newValue) {
        guard let partial = sub_eCYCLIDE_SEGMENT_SOLID?.super_eCYCLIDE_SEGMENT_SOLID.partialEntity
          else { return }
        partial._radius2 = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eTETRAHEDRON_VOLUME`` )
    public var POINT_3: eCARTESIAN_POINT?  {
      get {
        return sub_eTETRAHEDRON_VOLUME?.partialEntity._point_3
      }
      set(newValue) {
        guard let partial = sub_eTETRAHEDRON_VOLUME?.super_eTETRAHEDRON_VOLUME.partialEntity else { return }
        partial._point_3 = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eTETRAHEDRON_VOLUME`` )
    public var POINT_2: eCARTESIAN_POINT?  {
      get {
        return sub_eTETRAHEDRON_VOLUME?.partialEntity._point_2
      }
      set(newValue) {
        guard let partial = sub_eTETRAHEDRON_VOLUME?.super_eTETRAHEDRON_VOLUME.partialEntity else { return }
        partial._point_2 = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eTETRAHEDRON_VOLUME`` )
    public var POINT_1: eCARTESIAN_POINT?  {
      get {
        return sub_eTETRAHEDRON_VOLUME?.partialEntity._point_1
      }
      set(newValue) {
        guard let partial = sub_eTETRAHEDRON_VOLUME?.super_eTETRAHEDRON_VOLUME.partialEntity else { return }
        partial._point_1 = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eREPRESENTATION_ITEM`` )
    public var NAME: tLABEL {
      get {
        return SDAI.UNWRAP( super_eREPRESENTATION_ITEM.partialEntity._name )
      }
      set(newValue) {
        let partial = super_eREPRESENTATION_ITEM.partialEntity
        partial._name = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eB_SPLINE_VOLUME_WITH_KNOTS`` )
    public var KNOT_W_UPPER: SDAI.INTEGER?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"KNOT_W_UPPER") {
          return cached.value as! SDAI.INTEGER? 
        }
        guard let origin = sub_eB_SPLINE_VOLUME_WITH_KNOTS else { return nil }
        let value = SDAI.INTEGER(origin.partialEntity._knot_w_upper__getter(SELF: origin))
        updateCache(derivedAttributeName:"KNOT_W_UPPER", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eTESSELLATED_GEOMETRIC_SET`` )
    public var CHILDREN: (SDAI.SET<eTESSELLATED_ITEM>/*[1:nil]*/ )?  {
      get {
        return sub_eTESSELLATED_GEOMETRIC_SET?.partialEntity._children
      }
      set(newValue) {
        guard let partial = sub_eTESSELLATED_GEOMETRIC_SET?.super_eTESSELLATED_GEOMETRIC_SET.partialEntity
          else { return }
        partial._children = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT REDEF__ attribute
    /// - origin: SUB( ``eANGLE_DIRECTION_REFERENCE`` )
    public var RELATING_REPRESENTATION_ITEM: sORIENTATION_BASIS_SELECT?  {
      get {
        return sORIENTATION_BASIS_SELECT( sub_eANGLE_DIRECTION_REFERENCE?.super_eREPRESENTATION_ITEM_RELATIONSHIP
          .partialEntity._relating_representation_item )
      }
      set(newValue) {
        guard let partial = sub_eANGLE_DIRECTION_REFERENCE?.super_eREPRESENTATION_ITEM_RELATIONSHIP
          .partialEntity else { return }
        partial._relating_representation_item = SDAI.UNWRAP(
          eREPRESENTATION_ITEM(newValue))
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eIMPLICIT_SILHOUETTE_CURVE`` )
    public var VIEW_DIRECTION: eDIRECTION?  {
      get {
        return sub_eIMPLICIT_SILHOUETTE_CURVE?.partialEntity._view_direction
      }
      set(newValue) {
        guard let partial = sub_eIMPLICIT_SILHOUETTE_CURVE?.super_eIMPLICIT_SILHOUETTE_CURVE.partialEntity
          else { return }
        partial._view_direction = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSOLID_REPLICA`` )
    public var PARENT_SOLID: eSOLID_MODEL?  {
      get {
        return sub_eSOLID_REPLICA?.partialEntity._parent_solid
      }
      set(newValue) {
        guard let partial = sub_eSOLID_REPLICA?.super_eSOLID_REPLICA.partialEntity else { return }
        partial._parent_solid = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eTETRAHEDRON_VOLUME`` )
    public var POINT_4: eCARTESIAN_POINT?  {
      get {
        return sub_eTETRAHEDRON_VOLUME?.partialEntity._point_4
      }
      set(newValue) {
        guard let partial = sub_eTETRAHEDRON_VOLUME?.super_eTETRAHEDRON_VOLUME.partialEntity else { return }
        partial._point_4 = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eTEXT_LITERAL`` )
    public var ALIGNMENT: tTEXT_ALIGNMENT?  {
      get {
        return sub_eTEXT_LITERAL?.partialEntity._alignment
      }
      set(newValue) {
        guard let partial = sub_eTEXT_LITERAL?.super_eTEXT_LITERAL.partialEntity else { return }
        partial._alignment = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSLIDING_SURFACE_PAIR_VALUE`` )
    public var ACTUAL_POINT_ON_SURFACE_2: ePOINT_ON_SURFACE?  {
      get {
        return sub_eSLIDING_SURFACE_PAIR_VALUE?.partialEntity._actual_point_on_surface_2
      }
      set(newValue) {
        guard let partial = sub_eSLIDING_SURFACE_PAIR_VALUE?.super_eSLIDING_SURFACE_PAIR_VALUE.partialEntity
          else { return }
        partial._actual_point_on_surface_2 = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePGC_WITH_DIMENSION`` )
    public var NEGATIVE_DIRECTION: SDAI.BOOLEAN?  {
      get {
        return sub_ePGC_WITH_DIMENSION?.partialEntity._negative_direction
      }
      set(newValue) {
        guard let partial = sub_ePGC_WITH_DIMENSION?.super_ePGC_WITH_DIMENSION.partialEntity else { return }
        partial._negative_direction = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eBOOLEAN_RESULT`` )
    public var FIRST_OPERAND: sBOOLEAN_OPERAND?  {
      get {
        return sub_eBOOLEAN_RESULT?.partialEntity._first_operand
      }
      set(newValue) {
        guard let partial = sub_eBOOLEAN_RESULT?.super_eBOOLEAN_RESULT.partialEntity else { return }
        partial._first_operand = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSLIDING_SURFACE_PAIR_VALUE`` )
    public var ACTUAL_POINT_ON_SURFACE_1: ePOINT_ON_SURFACE?  {
      get {
        return sub_eSLIDING_SURFACE_PAIR_VALUE?.partialEntity._actual_point_on_surface_1
      }
      set(newValue) {
        guard let partial = sub_eSLIDING_SURFACE_PAIR_VALUE?.super_eSLIDING_SURFACE_PAIR_VALUE.partialEntity
          else { return }
        partial._actual_point_on_surface_1 = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSURFACE_OF_LINEAR_EXTRUSION`` )
    public var EXTRUSION_AXIS: eVECTOR?  {
      get {
        return sub_eSURFACE_OF_LINEAR_EXTRUSION?.partialEntity._extrusion_axis
      }
      set(newValue) {
        guard let partial = sub_eSURFACE_OF_LINEAR_EXTRUSION?.super_eSURFACE_OF_LINEAR_EXTRUSION
          .partialEntity else { return }
        partial._extrusion_axis = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eBREP_WITH_VOIDS`` )
    public var VOIDS: (SDAI.SET<eORIENTED_CLOSED_SHELL>/*[1:nil]*/ )?  {
      get {
        return sub_eBREP_WITH_VOIDS?.partialEntity._voids
      }
      set(newValue) {
        guard let partial = sub_eBREP_WITH_VOIDS?.super_eBREP_WITH_VOIDS.partialEntity else { return }
        partial._voids = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCONICAL_STEPPED_HOLE_TRANSITION`` )
    public var CONE_APEX_ANGLE: tPLANE_ANGLE_MEASURE?  {
      get {
        return sub_eCONICAL_STEPPED_HOLE_TRANSITION?.partialEntity._cone_apex_angle
      }
      set(newValue) {
        guard let partial = sub_eCONICAL_STEPPED_HOLE_TRANSITION?.super_eCONICAL_STEPPED_HOLE_TRANSITION
          .partialEntity else { return }
        partial._cone_apex_angle = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePOLY_LOOP`` )
    public var POLYGON: (SDAI.LIST_UNIQUE<eCARTESIAN_POINT>/*[3:nil]*/ )?  {
      get {
        return sub_ePOLY_LOOP?.partialEntity._polygon
      }
      set(newValue) {
        guard let partial = sub_ePOLY_LOOP?.super_ePOLY_LOOP.partialEntity else { return }
        partial._polygon = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSURFACE_SMOOTHNESS_GEOMETRIC_CONSTRAINT`` )
    public var U_SMOOTHNESS: nTRANSITION_CODE?  {
      get {
        return sub_eSURFACE_SMOOTHNESS_GEOMETRIC_CONSTRAINT?.partialEntity._u_smoothness
      }
      set(newValue) {
        guard let partial = sub_eSURFACE_SMOOTHNESS_GEOMETRIC_CONSTRAINT?.super_eSURFACE_SMOOTHNESS_GEOMETRIC_CONSTRAINT
          .partialEntity else { return }
        partial._u_smoothness = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SELF( ``eGEOMETRIC_REPRESENTATION_ITEM`` )
    public var DIM: tDIMENSION_COUNT?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"DIM") {
          return cached.value as! tDIMENSION_COUNT? 
        }
        let origin = self
        let value = origin.partialEntity._dim__getter(SELF: origin)
        updateCache(derivedAttributeName:"DIM", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eTESSELLATED_CURVE_SET`` )
    public var LINE_STRIPS: (SDAI.LIST<SDAI.LIST<SDAI.INTEGER>/*[2:nil]*/ >/*[1:nil]*/ )?  {
      get {
        return sub_eTESSELLATED_CURVE_SET?.partialEntity._line_strips
      }
      set(newValue) {
        guard let partial = sub_eTESSELLATED_CURVE_SET?.super_eTESSELLATED_CURVE_SET.partialEntity
          else { return }
        partial._line_strips = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eTEXT_LITERAL`` )
    public var FONT: sFONT_SELECT?  {
      get {
        return sub_eTEXT_LITERAL?.partialEntity._font
      }
      set(newValue) {
        guard let partial = sub_eTEXT_LITERAL?.super_eTEXT_LITERAL.partialEntity else { return }
        partial._font = SDAI.UNWRAP(newValue)
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_geometric_representation_item.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eREPRESENTATION_ITEM.self) else { return nil }
      self.super_eREPRESENTATION_ITEM = super1

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _geometric_representation_item.WHERE_wr1(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "GEOMETRIC_REPRESENTATION_ITEM", type: self, explicitAttributeCount: 0)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eREPRESENTATION_ITEM.self)
      entityDef.add(supertype: eGEOMETRIC_REPRESENTATION_ITEM.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "RANGE_ON_SURFACE_1", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.RANGE_ON_SURFACE_1, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "RANGE_ON_SURFACE_2", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.RANGE_ON_SURFACE_2, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "SLOT_WIDTH", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.SLOT_WIDTH, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "END_EXIT_FACES", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.END_EXIT_FACES, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "CONCENTRATION_EXPONENT", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.CONCENTRATION_EXPONENT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "RANGE_ON_PAIR_CURVE", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.RANGE_ON_PAIR_CURVE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "REPLICATE_COUNT", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.REPLICATE_COUNT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "ROTATION_ANGLE", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.ROTATION_ANGLE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "CTRIANGLES", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.CTRIANGLES, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "RADIUS_LIST", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.RADIUS_LIST, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "CLOSED_INTERPOLATION", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.CLOSED_INTERPOLATION, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "ANGULAR_SPACING", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.ANGULAR_SPACING, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "OFFSET1", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.OFFSET1, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "ACTUAL_POINT_ON_CURVE_2", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.ACTUAL_POINT_ON_CURVE_2, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "FLOOR_BLEND_RADIUS", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.FLOOR_BLEND_RADIUS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "GENERALISED_MAJOR_RADIUS", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.GENERALISED_MAJOR_RADIUS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "OFFSET2", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.OFFSET2, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "CURVE_1", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.CURVE_1, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "MAJOR_ORIENTATION_BASIS", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.MAJOR_ORIENTATION_BASIS, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "BASE_ELEMENT", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.BASE_ELEMENT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "CURVE_2", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.CURVE_2, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "CONTENTS", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.CONTENTS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "VSENSE", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.VSENSE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "START_OF_NEXT_HATCH_LINE", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.START_OF_NEXT_HATCH_LINE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "CURVE_FORM", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.CURVE_FORM, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "TRANSFORMATION_OPERATOR", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.TRANSFORMATION_OPERATOR, 
        kind: .explicitRedeclaring, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "ITEM", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.ITEM, 
        kind: .explicitRedeclaring, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "RADIAL_ALIGNMENT", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.RADIAL_ALIGNMENT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "HATCH_LINE_ANGLE", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.HATCH_LINE_ANGLE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "CONSTRAINED_ELEMENTS", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.CONSTRAINED_ELEMENTS, 
        kind: .explicitRedeclaring, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "TANGENT_CONTACT", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.TANGENT_CONTACT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "SEGMENT_RADII", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.SEGMENT_RADII, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "LEFT_OFFSET", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.LEFT_OFFSET, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "PATCHES", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.PATCHES, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "REPEAT_FACTOR", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.REPEAT_FACTOR, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "ROW_SPACING", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.ROW_SPACING, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "TIP_RADIUS", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.TIP_RADIUS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "HATCH_LINE_APPEARANCE", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.HATCH_LINE_APPEARANCE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "SWEPT_CURVE", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.SWEPT_CURVE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "ROLE", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.ROLE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "BOUNDS", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.BOUNDS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "PARENT_PT", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.PARENT_PT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "OFFSET_DIRECTION_CONSTRAINED", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.OFFSET_DIRECTION_CONSTRAINED, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "THICKNESS", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.THICKNESS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "N_U", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.N_U, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "DIRECTION_OF_AXIS", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.DIRECTION_OF_AXIS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "TEE_SECTION_WIDTH", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.TEE_SECTION_WIDTH, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "FILLET_RADIUS", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.FILLET_RADIUS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "N_V", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.N_V, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "FIRST_TRIM_INTENT", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.FIRST_TRIM_INTENT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "OPERATOR", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.OPERATOR, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "SCALE", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.SCALE, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "SUBSKETCH_ELEMENTS", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.SUBSKETCH_ELEMENTS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "X_SCALE", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.X_SCALE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "SCANNED_POINTS", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.SCANNED_POINTS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "ENCLOSURE", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.ENCLOSURE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "SECOND_TRIM_INTENT", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.SECOND_TRIM_INTENT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "SECOND_OPERAND", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.SECOND_OPERAND, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "TRIM_1", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.TRIM_1, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "RANGE_ON_CURVE_2", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.RANGE_ON_CURVE_2, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "INNER_RADIUS", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.INNER_RADIUS, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "PROTRUSION_HEIGHT", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.PROTRUSION_HEIGHT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "TURN_ANGLE", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.TURN_ANGLE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "REGION_COLOUR", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.REGION_COLOUR, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "TRIM_2", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.TRIM_2, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "RANGE_ON_CURVE_1", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.RANGE_ON_CURVE_1, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "PATH", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.PATH, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "TILES", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.TILES, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "ROW_COUNT", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.ROW_COUNT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "POCKET_LENGTH", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.POCKET_LENGTH, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "TARGET", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.TARGET, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "EXTERNAL_POINT", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.EXTERNAL_POINT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "GEAR_RATIO", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.GEAR_RATIO, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "EXTERNAL_GROOVE", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.EXTERNAL_GROOVE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "REPLICATED_ELEMENT", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.REPLICATED_ELEMENT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "KNOTS", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.KNOTS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "A", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.A, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "SELECT_OUTER", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.SELECT_OUTER, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "B", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.B, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "PNT", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.PNT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "C", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.C, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "V_SMOOTHNESS", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.V_SMOOTHNESS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "SCANNER_INFO", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.SCANNER_INFO, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "SOURCES", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.SOURCES, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "SILHOUETTED_MODEL", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.SILHOUETTED_MODEL, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "SENSE_AGREEMENT", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.SENSE_AGREEMENT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "BASIS_VOLUME", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.BASIS_VOLUME, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "SWEPT_FACE", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.SWEPT_FACE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "LINK_REPRESENTATION_ASSOCIATIONS", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.LINK_REPRESENTATION_ASSOCIATIONS, 
        kind: .inverse, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "UPPER_LIMIT_ACTUAL_TRANSLATION_Z", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.UPPER_LIMIT_ACTUAL_TRANSLATION_Z, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "ACTUAL_TRANSLATION_Z", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.ACTUAL_TRANSLATION_Z, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "LOWER_LIMIT_RACK_DISPLACEMENT", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.LOWER_LIMIT_RACK_DISPLACEMENT, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "T_START", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.T_START, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "PTS_PER_SUBLIST", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.PTS_PER_SUBLIST, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "END_CONDITIONS", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.END_CONDITIONS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "AXIS_POSITION", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.AXIS_POSITION, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "SBWM_BOUNDARY", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.SBWM_BOUNDARY, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "KNOT_VALUES", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.KNOT_VALUES, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "PITCH", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.PITCH, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "DEGREE", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.DEGREE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "TILING_PATTERN", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.TILING_PATTERN, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "APPLIES_TO_PAIR", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.APPLIES_TO_PAIR, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "UPPER_LIMIT_ACTUAL_ROTATION_1", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.UPPER_LIMIT_ACTUAL_ROTATION_1, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "CONICAL_TRANSITIONS", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.CONICAL_TRANSITIONS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "SYMBOL", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.SYMBOL, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "U1", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.U1, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "BEVEL", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.BEVEL, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "CLOSED_PATH", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.CLOSED_PATH, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "INNER_BOUNDARY", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.INNER_BOUNDARY, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "U2", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.U2, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "POINT_COORDINATES", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.POINT_COORDINATES, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "SKEWNESS", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.SKEWNESS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "TILING_SCALE", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.TILING_SCALE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "VOLUME_GEOMETRY", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.VOLUME_GEOMETRY, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "PROTRUSION_DRAFT_ANGLE", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.PROTRUSION_DRAFT_ANGLE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "LOCAL_ORIGIN", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.LOCAL_ORIGIN, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "SCL", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.SCL, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "REFERENCE_ELEMENTS", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.REFERENCE_ELEMENTS, 
        kind: .explicitRedeclaring, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "PLANE_OF_POINT", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.PLANE_OF_POINT, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "PATTERN_START", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.PATTERN_START, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "TRANSFORM_ITEM_1", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.TRANSFORM_ITEM_1, 
        kind: .explicitRedeclaring, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "PROTRUSION_LENGTH", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.PROTRUSION_LENGTH, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "SECOND_ROTATION_ANGLE", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.SECOND_ROTATION_ANGLE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "POINT_OF_REFERENCE_HATCH_LINE", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.POINT_OF_REFERENCE_HATCH_LINE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "TRANSFORM_ITEM_2", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.TRANSFORM_ITEM_2, 
        kind: .explicitRedeclaring, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "LOWER_LIMIT_SECOND_ROTATION", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.LOWER_LIMIT_SECOND_ROTATION, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "POCKET_RADIUS", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.POCKET_RADIUS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "SIZE_IN_X", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.SIZE_IN_X, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "RADIUS_SECOND_LINK", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.RADIUS_SECOND_LINK, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "THICKENED_FACE_LIST", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.THICKENED_FACE_LIST, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "UPPER_LIMIT_FIRST_ROTATION", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.UPPER_LIMIT_FIRST_ROTATION, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "SIZE_IN_Y", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.SIZE_IN_Y, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "CORNER_RADIUS", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.CORNER_RADIUS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "ACTUAL_POINT_ON_CURVE", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.ACTUAL_POINT_ON_CURVE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "INTENSITIES", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.INTENSITIES, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "LOWER_LIMIT_ACTUAL_ROTATION_1", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.LOWER_LIMIT_ACTUAL_ROTATION_1, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "PARENT_SURFACE", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.PARENT_SURFACE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "Y_SCALE", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.Y_SCALE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "CONFIGURED_MECHANISM", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.CONFIGURED_MECHANISM, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "ACTUAL_PLACEMENT", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.ACTUAL_PLACEMENT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "LOWER_LIMIT_ACTUAL_TRANSLATION_Z", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.LOWER_LIMIT_ACTUAL_TRANSLATION_Z, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "USENSE", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.USENSE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "SURFACE_FORM", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.SURFACE_FORM, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "SEMI_IMAG_AXIS", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.SEMI_IMAG_AXIS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "EQUIVALENT_POINT", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.EQUIVALENT_POINT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "PHI", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.PHI, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "THE_CALLOUT", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.THE_CALLOUT, 
        kind: .inverse, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "SLOT_LENGTH", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.SLOT_LENGTH, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "KNOT_MULTIPLICITIES", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.KNOT_MULTIPLICITIES, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "RATIONALE", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.RATIONALE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "RIGHT_OFFSET_DISTANCE", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.RIGHT_OFFSET_DISTANCE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "GENERALISED_MINOR_RADIUS", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.GENERALISED_MINOR_RADIUS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "V2", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.V2, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "GROOVE_WIDTH", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.GROOVE_WIDTH, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "LINE_SPACING", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.LINE_SPACING, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "TREE_ROOT_EXPRESSION", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.TREE_ROOT_EXPRESSION, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "POINT_PARAMETER", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.POINT_PARAMETER, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "BASIS_EDGE_CURVE", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.BASIS_EDGE_CURVE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "POCKET_WIDTH", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.POCKET_WIDTH, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "MINOR_ORIENTATION_BASIS", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.MINOR_ORIENTATION_BASIS, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "BASE_CURVE", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.BASE_CURVE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "FIXED_CONSTITUENT", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.FIXED_CONSTITUENT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "V1", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.V1, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "COLOUR_INDICES", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.COLOUR_INDICES, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "HELICAL_ANGLE", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.HELICAL_ANGLE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "LITERAL", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.LITERAL, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "CLOTHOID_CONSTANT", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.CLOTHOID_CONSTANT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "PAIR_SURFACE", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.PAIR_SURFACE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "POSITIVE_SIDE", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.POSITIVE_SIDE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "STYLED_CURVE", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.STYLED_CURVE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "AXIS3", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.AXIS3, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "AXIS2", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.AXIS2, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "AXIS1", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.AXIS1, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "AUXILIARY_ELEMENTS", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.AUXILIARY_ELEMENTS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "BASE_SOLID", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.BASE_SOLID, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "DELETED_FACE_SET", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.DELETED_FACE_SET, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "DRAFTED_EDGES", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.DRAFTED_EDGES, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "UPPER_INDEX_ON_CONTROL_POINTS", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.UPPER_INDEX_ON_CONTROL_POINTS, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "UPPER_INDEX_ON_KNOTS", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.UPPER_INDEX_ON_KNOTS, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "OFFSET_ANGLE", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.OFFSET_ANGLE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "LEFT_OFFSET_DISTANCE", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.LEFT_OFFSET_DISTANCE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "SEGMENT_DEPTHS", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.SEGMENT_DEPTHS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "INPUT_SKEW_ANGLE", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.INPUT_SKEW_ANGLE, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "SKEW_ANGLE", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.SKEW_ANGLE, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "RADIUS_VALUE", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.RADIUS_VALUE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "COLLAR_DEPTH", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.COLLAR_DEPTH, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "ASSOCIATED_GEOMETRY", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.ASSOCIATED_GEOMETRY, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "ANGLE_VALUE", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.ANGLE_VALUE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "DIRECTION_RATIOS", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.DIRECTION_RATIOS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "CLOSED_ENDS", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.CLOSED_ENDS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "FBSM_FACES", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.FBSM_FACES, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "THE_DRAUGHTING_MODEL_ITEM_ASSOCIATION_WITH_PLACEHOLDERS", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.THE_DRAUGHTING_MODEL_ITEM_ASSOCIATION_WITH_PLACEHOLDERS, 
        kind: .inverse, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "BASE_SURFACE", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.BASE_SURFACE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "PARENT_CURVE", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.PARENT_CURVE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "VIEW_WINDOW", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.VIEW_WINDOW, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "UPPER_LIMIT_ACTUAL_ROTATION_Y", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.UPPER_LIMIT_ACTUAL_ROTATION_Y, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "UPPER_LIMIT_ACTUAL_ROTATION_X", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.UPPER_LIMIT_ACTUAL_ROTATION_X, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "UPPER_LIMIT_ACTUAL_ROTATION_Z", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.UPPER_LIMIT_ACTUAL_ROTATION_Z, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "LINE_STRIP", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.LINE_STRIP, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "GROOVE_RADIUS", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.GROOVE_RADIUS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "ITEM_ELEMENT", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.ITEM_ELEMENT, 
        kind: .explicitRedeclaring, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "EXTERNAL_SURFACE", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.EXTERNAL_SURFACE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "SPHERE_RADIUS", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.SPHERE_RADIUS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "FIRST_ROTATION_ANGLE", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.FIRST_ROTATION_ANGLE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "RANGE_ON_PAIR_SURFACE", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.RANGE_ON_PAIR_SURFACE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "JOINT", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.JOINT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "ACTUAL_ROTATION_2", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.ACTUAL_ROTATION_2, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "GAMMA", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.GAMMA, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "FIRST_OFFSET", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.FIRST_OFFSET, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "OWNING_SKETCH", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.OWNING_SKETCH, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "VIEW_WINDOW_CLIPPING", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.VIEW_WINDOW_CLIPPING, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "W_UPPER", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.W_UPPER, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "ACTUAL_ROTATION_1", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.ACTUAL_ROTATION_1, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "CURVE_3D", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.CURVE_3D, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "DRAFT_ANGLES", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.DRAFT_ANGLES, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "LINE_STRIP_FACE2", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.LINE_STRIP_FACE2, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "UPPER_LIMIT_RACK_DISPLACEMENT", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.UPPER_LIMIT_RACK_DISPLACEMENT, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "MAP", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.MAP, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "GEOMETRIC_MODEL_LINK", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.GEOMETRIC_MODEL_LINK, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "LINE_STRIP_FACE1", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.LINE_STRIP_FACE1, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "FACE_GEOMETRY", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.FACE_GEOMETRY, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "BASE_RADIUS", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.BASE_RADIUS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "LOWER_LIMIT_ACTUAL_ROTATION_X", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.LOWER_LIMIT_ACTUAL_ROTATION_X, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "VERTEX_GEOMETRY", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.VERTEX_GEOMETRY, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "LOWER_LIMIT_ACTUAL_ROTATION_Y", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.LOWER_LIMIT_ACTUAL_ROTATION_Y, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "COLUMN_COUNT", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.COLUMN_COUNT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "LOWER_LIMIT_ACTUAL_ROTATION_Z", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.LOWER_LIMIT_ACTUAL_ROTATION_Z, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "THICKNESS_LIST", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.THICKNESS_LIST, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "COLUMN_SPACING", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.COLUMN_SPACING, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "PROTRUSION_CORNER_RADIUS", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.PROTRUSION_CORNER_RADIUS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "MAGNITUDE", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.MAGNITUDE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "CURVE_PLANE", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.CURVE_PLANE, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "SPREAD_ANGLE", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.SPREAD_ANGLE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "SWEPT_AREA", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.SWEPT_AREA, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "SCULPTURING_ELEMENT", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.SCULPTURING_ELEMENT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "LOWER_LIMIT_FIRST_ROTATION", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.LOWER_LIMIT_FIRST_ROTATION, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "CONE_ANGLE1", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.CONE_ANGLE1, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "PLACEMENT_START", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.PLACEMENT_START, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "B_SPLINES", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.B_SPLINES, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "CONE_ANGLE2", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.CONE_ANGLE2, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "THICKNESS2", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.THICKNESS2, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "EBWM_BOUNDARY", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.EBWM_BOUNDARY, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "W_B_SPLINES", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.W_B_SPLINES, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "SEMI_AXIS", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.SEMI_AXIS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "FIXED_REFERENCE", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.FIXED_REFERENCE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "SECOND_OFFSET", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.SECOND_OFFSET, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "NPOINTS", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.NPOINTS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "W_DEGREE", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.W_DEGREE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "HIDDEN_LINE_SURFACE_REMOVAL", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.HIDDEN_LINE_SURFACE_REMOVAL, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "ALPHA", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.ALPHA, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "BETA", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.BETA, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "SUBLISTS", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.SUBLISTS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "OFFSET_TYPE", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.OFFSET_TYPE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "MIRROR_ELEMENT", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.MIRROR_ELEMENT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "LIGHT_COLOUR", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.LIGHT_COLOUR, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "EDGE_GEOMETRY", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.EDGE_GEOMETRY, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "LENGTH_VALUE", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.LENGTH_VALUE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "PROTRUSION_WIDTH", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.PROTRUSION_WIDTH, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "TRANSITION_NUMBER", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.TRANSITION_NUMBER, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "PROTRUSION_RADIUS", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.PROTRUSION_RADIUS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "SECOND_REPEAT_FACTOR", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.SECOND_REPEAT_FACTOR, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "SLOT_CENTRELINE", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.SLOT_CENTRELINE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "RADIUS_FIRST_LINK", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.RADIUS_FIRST_LINK, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "SEMI_APEX_ANGLE", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.SEMI_APEX_ANGLE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "BLENDED_EDGES", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.BLENDED_EDGES, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "REP_1", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.REP_1, 
        kind: .explicitRedeclaring, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "REP_2", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.REP_2, 
        kind: .explicitRedeclaring, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "SKETCH_BASIS", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.SKETCH_BASIS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "SBSM_BOUNDARY", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.SBSM_BOUNDARY, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "POINT_PARAMETER_W", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.POINT_PARAMETER_W, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "OUTER", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.OUTER, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "POSITION_COORDS", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.POSITION_COORDS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "SURFACE_2", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.SURFACE_2, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "EDGE_FUNCTION_LIST", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.EDGE_FUNCTION_LIST, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "ASSOCIATED_LINK_REPRESENTATIONS_1", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.ASSOCIATED_LINK_REPRESENTATIONS_1, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "SURFACE_1", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.SURFACE_1, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "VIEW_REFERENCE_SYSTEM", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.VIEW_REFERENCE_SYSTEM, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "RELATED_REPRESENTATION_ITEM", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.RELATED_REPRESENTATION_ITEM, 
        kind: .explicitRedeclaring, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "ASSOCIATED_LINK_REPRESENTATIONS_2", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.ASSOCIATED_LINK_REPRESENTATIONS_2, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "INTERSECTED_MODEL", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.INTERSECTED_MODEL, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "IMPLICIT_OUTER", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.IMPLICIT_OUTER, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "UPPER_LIMIT_SECOND_ROTATION", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.UPPER_LIMIT_SECOND_ROTATION, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "W_MULTIPLICITIES", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.W_MULTIPLICITIES, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "SMOOTHNESS", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.SMOOTHNESS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "EXIT_FACES", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.EXIT_FACES, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "OFFSET_VALUE", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.OFFSET_VALUE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "POINT_INDEX", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.POINT_INDEX, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "CONE_BASE_RADIUS", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.CONE_BASE_RADIUS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "ACTUAL_ROTATION_Z", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.ACTUAL_ROTATION_Z, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "DIR", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.DIR, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "ACTUAL_ROTATION_X", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.ACTUAL_ROTATION_X, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "COLLECTED_TEXT", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.COLLECTED_TEXT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "ACTUAL_ROTATION_Y", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.ACTUAL_ROTATION_Y, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "PLACING", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.PLACING, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "ACTUAL_DISPLACEMENT", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.ACTUAL_DISPLACEMENT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "BASIS_FACE_SURFACE", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.BASIS_FACE_SURFACE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "FOCAL_DIST", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.FOCAL_DIST, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "RADIUS1", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.RADIUS1, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "PERSPECTIVE_OF_VOLUME", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.PERSPECTIVE_OF_VOLUME, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "RADIUS2", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.RADIUS2, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "POINT_3", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.POINT_3, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "POINT_2", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.POINT_2, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "POINT_1", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.POINT_1, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "NAME", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.NAME, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "KNOT_W_UPPER", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.KNOT_W_UPPER, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "CHILDREN", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.CHILDREN, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "RELATING_REPRESENTATION_ITEM", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.RELATING_REPRESENTATION_ITEM, 
        kind: .explicitRedeclaring, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "VIEW_DIRECTION", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.VIEW_DIRECTION, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "PARENT_SOLID", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.PARENT_SOLID, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "POINT_4", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.POINT_4, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "ALIGNMENT", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.ALIGNMENT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "ACTUAL_POINT_ON_SURFACE_2", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.ACTUAL_POINT_ON_SURFACE_2, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "NEGATIVE_DIRECTION", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.NEGATIVE_DIRECTION, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "FIRST_OPERAND", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.FIRST_OPERAND, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "ACTUAL_POINT_ON_SURFACE_1", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.ACTUAL_POINT_ON_SURFACE_1, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "EXTRUSION_AXIS", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.EXTRUSION_AXIS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "VOIDS", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.VOIDS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "CONE_APEX_ANGLE", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.CONE_APEX_ANGLE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "POLYGON", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.POLYGON, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "U_SMOOTHNESS", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.U_SMOOTHNESS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "DIM", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.DIM, 
        kind: .derived, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "LINE_STRIPS", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.LINE_STRIPS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "FONT", keyPath: \eGEOMETRIC_REPRESENTATION_ITEM.FONT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)

      return entityDef
    }

  }
}
