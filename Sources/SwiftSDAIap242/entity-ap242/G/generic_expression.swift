/* file: generic_expression.swift 	 generated: Sat Aug 14 13:46:02 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY generic_expression
    ABSTRACT SUPERTYPE OF ( 
        ONEOF ( 
            simple_generic_expression, 
            unary_generic_expression, 
            binary_generic_expression, 
            multiple_arity_generic_expression ) );
    WHERE
      wr1: is_acyclic( SELF );
  END_ENTITY; -- generic_expression (line:16777 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  ENTITY(SELF)	generic_expression
    (no local attributes)

  SUB- ENTITY(2)	cartesian_complex_number_region
    ATTR:  real_constraint,	TYPE: real_interval -- EXPLICIT

    ATTR:  imag_constraint,	TYPE: real_interval -- EXPLICIT


  SUB- ENTITY(3)	finite_integer_interval
    ATTR:  min,	TYPE: INTEGER -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  max,	TYPE: INTEGER -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  size,	TYPE: positive_integer -- DERIVED
      := ( max - min ) + 1


  SUB- ENTITY(4)	elementary_space
    ATTR:  space_id,	TYPE: elementary_space_enumerators -- EXPLICIT


  SUB- ENTITY(5)	integer_interval_from_min
    ATTR:  min,	TYPE: INTEGER -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(6)	integer_interval_to_max
    ATTR:  max,	TYPE: INTEGER -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(7)	finite_real_interval
    ATTR:  min,	TYPE: REAL -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  min_closure,	TYPE: open_closed -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  max,	TYPE: REAL -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  max_closure,	TYPE: open_closed -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(8)	real_interval_from_min
    ATTR:  min,	TYPE: REAL -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  min_closure,	TYPE: open_closed -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(9)	real_interval_to_max
    ATTR:  max,	TYPE: REAL -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  max_closure,	TYPE: open_closed -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(10)	polar_complex_number_region
    ATTR:  centre,	TYPE: complex_number_literal -- EXPLICIT

    ATTR:  distance_constraint,	TYPE: real_interval -- EXPLICIT

    ATTR:  direction_constraint,	TYPE: finite_real_interval -- EXPLICIT


  SUB- ENTITY(11)	generated_finite_numeric_space
    ATTR:  start_value,	TYPE: maths_number -- EXPLICIT

    ATTR:  increment_value,	TYPE: maths_number -- EXPLICIT

    ATTR:  increment_number,	TYPE: positive_integer -- EXPLICIT

    REDCR: members,	TYPE: SET [2 : ?] OF maths_number -- DERIVED (DYNAMIC)
      := make_numeric_set( start_value, increment_value, increment_number )
      -- OVERRIDING ENTITY: finite_space


  SUB- ENTITY(12)	finite_space
    ATTR:  members,	TYPE: SET OF maths_value -- EXPLICIT (DYNAMIC)
      -- possibly overriden by
          ENTITY: generated_finite_numeric_space,	TYPE: SET [2 : ?] OF maths_number	(as DERIVED)


  SUB- ENTITY(13)	uniform_product_space
    ATTR:  base,	TYPE: maths_space -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  exponent,	TYPE: positive_integer -- EXPLICIT


  SUB- ENTITY(14)	listed_product_space
    ATTR:  factors,	TYPE: LIST OF maths_space -- EXPLICIT


  SUB- ENTITY(15)	extended_tuple_space
    ATTR:  base,	TYPE: tuple_space -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  extender,	TYPE: maths_space -- EXPLICIT


  SUB- ENTITY(16)	function_space
    ATTR:  domain_constraint,	TYPE: space_constraint_type -- EXPLICIT

    ATTR:  domain_argument,	TYPE: maths_space -- EXPLICIT

    ATTR:  range_constraint,	TYPE: space_constraint_type -- EXPLICIT

    ATTR:  range_argument,	TYPE: maths_space -- EXPLICIT


  SUB- ENTITY(17)	maths_space
    (no local attributes)

  SUB- ENTITY(18)	series_composed_function
    REDCR: operands,	TYPE: LIST [2 : ?] OF maths_function -- EXPLICIT	(AMBIGUOUS/MASKED)
      -- OVERRIDING ENTITY: multiple_arity_generic_expression


  SUB- ENTITY(19)	restriction_function
    REDCR: operand,	TYPE: maths_space -- EXPLICIT	(AMBIGUOUS/MASKED)
      -- OVERRIDING ENTITY: unary_generic_expression


  SUB- ENTITY(20)	imported_curve_function
    ATTR:  geometry,	TYPE: curve -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  parametric_domain,	TYPE: tuple_space -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(21)	repackaging_function
    REDCR: operand,	TYPE: maths_function -- EXPLICIT	(AMBIGUOUS/MASKED)
      -- OVERRIDING ENTITY: unary_generic_expression

    ATTR:  input_repack,	TYPE: repackage_options -- EXPLICIT

    ATTR:  output_repack,	TYPE: repackage_options -- EXPLICIT

    ATTR:  selected_output,	TYPE: nonnegative_integer -- EXPLICIT


  SUB- ENTITY(22)	abstracted_expression_function
    REDCR: variables,	TYPE: LIST [1 : ?] OF UNIQUE generic_variable -- DERIVED (DYNAMIC)
      := remove_first( SELF\multiple_arity_generic_expression.operands )
      -- OVERRIDING ENTITY: quantifier_expression

    ATTR:  expr,	TYPE: generic_expression -- DERIVED	(AMBIGUOUS/MASKED)
      := SELF\multiple_arity_generic_expression.operands[1]


  SUB- ENTITY(23)	b_spline_basis
    ATTR:  degree,	TYPE: nonnegative_integer -- EXPLICIT

    ATTR:  repeated_knots,	TYPE: LIST [2 : ?] OF REAL -- EXPLICIT

    ATTR:  order,	TYPE: positive_integer -- DERIVED	(AMBIGUOUS/MASKED)
      := degree + 1

    ATTR:  num_basis,	TYPE: positive_integer -- DERIVED
      := SIZEOF( repeated_knots ) - order


  SUB- ENTITY(24)	reindexed_array_function
    REDCR: operand,	TYPE: maths_function -- EXPLICIT	(AMBIGUOUS/MASKED)
      -- OVERRIDING ENTITY: unary_generic_expression

    ATTR:  starting_indices,	TYPE: LIST [1 : ?] OF INTEGER -- EXPLICIT


  SUB- ENTITY(25)	homogeneous_linear_function
    REDCR: operand,	TYPE: maths_function -- EXPLICIT	(AMBIGUOUS/MASKED)
      -- OVERRIDING ENTITY: unary_generic_expression

    ATTR:  sum_index,	TYPE: one_or_two -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  mat,	TYPE: maths_function -- DERIVED	(AMBIGUOUS/MASKED)
      := SELF\unary_generic_expression.operand


  SUB- ENTITY(26)	selector_function
    ATTR:  selector,	TYPE: input_selector -- EXPLICIT

    ATTR:  source_of_domain,	TYPE: maths_space_or_function -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(27)	finite_function
    ATTR:  pairs,	TYPE: SET [1 : ?] OF LIST [2 : 2] OF maths_value -- EXPLICIT


  SUB- ENTITY(28)	constant_function
    ATTR:  sole_output,	TYPE: maths_value -- EXPLICIT

    ATTR:  source_of_domain,	TYPE: maths_space_or_function -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(29)	elementary_function
    ATTR:  func_id,	TYPE: elementary_function_enumerators -- EXPLICIT


  SUB- ENTITY(30)	parallel_composed_function
    ATTR:  source_of_domain,	TYPE: maths_space_or_function -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  prep_functions,	TYPE: LIST [1 : ?] OF maths_function -- EXPLICIT

    ATTR:  final_function,	TYPE: maths_function_select -- EXPLICIT

    REDCR: operands,	TYPE: LIST [2 : ?] OF generic_expression -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := convert_to_operands_prcmfn( source_of_domain, prep_functions, final_function )
      -- OVERRIDING ENTITY: multiple_arity_generic_expression


  SUB- ENTITY(31)	standard_table_function
    ATTR:  order,	TYPE: ordering_type -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(32)	regular_table_function
    ATTR:  increments,	TYPE: LIST [1 : ?] OF INTEGER -- EXPLICIT


  SUB- ENTITY(33)	strict_triangular_matrix
    ATTR:  main_diagonal_value,	TYPE: maths_value -- EXPLICIT


  SUB- ENTITY(34)	triangular_matrix
    ATTR:  default_entry,	TYPE: maths_value -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  lo_up,	TYPE: lower_upper -- EXPLICIT

    ATTR:  order,	TYPE: ordering_type -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(35)	symmetric_banded_matrix
    ATTR:  default_entry,	TYPE: maths_value -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  above,	TYPE: nonnegative_integer -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(36)	symmetric_matrix
    ATTR:  symmetry,	TYPE: symmetry_type -- EXPLICIT

    ATTR:  triangle,	TYPE: lower_upper -- EXPLICIT

    ATTR:  order,	TYPE: ordering_type -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(37)	banded_matrix
    ATTR:  default_entry,	TYPE: maths_value -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  below,	TYPE: INTEGER -- EXPLICIT

    ATTR:  above,	TYPE: INTEGER -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  order,	TYPE: ordering_type -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(38)	linearized_table_function
    REDCR: operand,	TYPE: maths_function -- EXPLICIT	(AMBIGUOUS/MASKED)
      -- OVERRIDING ENTITY: unary_generic_expression

    ATTR:  first,	TYPE: INTEGER -- EXPLICIT

    ATTR:  source,	TYPE: maths_function -- DERIVED
      := SELF\unary_generic_expression.operand


  SUB- ENTITY(39)	listed_integer_data
    ATTR:  values,	TYPE: LIST [1 : ?] OF INTEGER -- EXPLICIT	(AMBIGUOUS/MASKED)

    REDCR: shape,	TYPE: LIST [1 : ?] OF positive_integer -- DERIVED (DYNAMIC)
      := [SIZEOF( values )]
      -- OVERRIDING ENTITY: explicit_table_function


  SUB- ENTITY(40)	listed_data
    ATTR:  values,	TYPE: LIST [1 : ?] OF maths_value -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  value_range,	TYPE: maths_space -- EXPLICIT	(AMBIGUOUS/MASKED)

    REDCR: shape,	TYPE: LIST [1 : ?] OF positive_integer -- DERIVED (DYNAMIC)
      := [SIZEOF( values )]
      -- OVERRIDING ENTITY: explicit_table_function


  SUB- ENTITY(41)	listed_string_data
    ATTR:  values,	TYPE: LIST [1 : ?] OF STRING -- EXPLICIT	(AMBIGUOUS/MASKED)

    REDCR: shape,	TYPE: LIST [1 : ?] OF positive_integer -- DERIVED (DYNAMIC)
      := [SIZEOF( values )]
      -- OVERRIDING ENTITY: explicit_table_function


  SUB- ENTITY(42)	listed_real_data
    ATTR:  values,	TYPE: LIST [1 : ?] OF REAL -- EXPLICIT	(AMBIGUOUS/MASKED)

    REDCR: shape,	TYPE: LIST [1 : ?] OF positive_integer -- DERIVED (DYNAMIC)
      := [SIZEOF( values )]
      -- OVERRIDING ENTITY: explicit_table_function


  SUB- ENTITY(43)	listed_logical_data
    ATTR:  values,	TYPE: LIST [1 : ?] OF LOGICAL -- EXPLICIT	(AMBIGUOUS/MASKED)

    REDCR: shape,	TYPE: LIST [1 : ?] OF positive_integer -- DERIVED (DYNAMIC)
      := [SIZEOF( values )]
      -- OVERRIDING ENTITY: explicit_table_function


  SUB- ENTITY(44)	listed_complex_number_data
    ATTR:  values,	TYPE: LIST [2 : ?] OF REAL -- EXPLICIT	(AMBIGUOUS/MASKED)

    REDCR: shape,	TYPE: LIST [1 : ?] OF positive_integer -- DERIVED (DYNAMIC)
      := [SIZEOF( values ) DIV 2]
      -- OVERRIDING ENTITY: explicit_table_function


  SUB- ENTITY(45)	externally_listed_data
    ATTR:  value_range,	TYPE: maths_space -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(46)	basic_sparse_matrix
    REDCR: operands,	TYPE: LIST [3 : 3] OF maths_function -- EXPLICIT	(AMBIGUOUS/MASKED)
      -- OVERRIDING ENTITY: multiple_arity_generic_expression

    ATTR:  default_entry,	TYPE: maths_value -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  order,	TYPE: ordering_type -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  index,	TYPE: maths_function -- DERIVED	(AMBIGUOUS/MASKED)
      := SELF\multiple_arity_generic_expression.operands[1]

    ATTR:  loc,	TYPE: maths_function -- DERIVED
      := SELF\multiple_arity_generic_expression.operands[2]

    ATTR:  val,	TYPE: maths_function -- DERIVED
      := SELF\multiple_arity_generic_expression.operands[3]


  SUB- ENTITY(47)	explicit_table_function
    ATTR:  index_base,	TYPE: zero_or_one -- EXPLICIT

    ATTR:  shape,	TYPE: LIST [1 : ?] OF positive_integer -- EXPLICIT (DYNAMIC)
      -- possibly overriden by
          ENTITY: listed_integer_data,	TYPE: LIST [1 : ?] OF positive_integer	(as DERIVED)
          ENTITY: listed_data,	TYPE: LIST [1 : ?] OF positive_integer	(as DERIVED)
          ENTITY: listed_string_data,	TYPE: LIST [1 : ?] OF positive_integer	(as DERIVED)
          ENTITY: listed_logical_data,	TYPE: LIST [1 : ?] OF positive_integer	(as DERIVED)
          ENTITY: listed_complex_number_data,	TYPE: LIST [1 : ?] OF positive_integer	(as DERIVED)
          ENTITY: listed_real_data,	TYPE: LIST [1 : ?] OF positive_integer	(as DERIVED)


  SUB- ENTITY(48)	general_linear_function
    REDCR: operand,	TYPE: maths_function -- EXPLICIT	(AMBIGUOUS/MASKED)
      -- OVERRIDING ENTITY: unary_generic_expression

    ATTR:  sum_index,	TYPE: one_or_two -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  mat,	TYPE: maths_function -- DERIVED	(AMBIGUOUS/MASKED)
      := SELF\unary_generic_expression.operand


  SUB- ENTITY(49)	b_spline_function
    REDCR: operand,	TYPE: maths_function -- EXPLICIT	(AMBIGUOUS/MASKED)
      -- OVERRIDING ENTITY: unary_generic_expression

    ATTR:  basis,	TYPE: LIST [1 : ?] OF b_spline_basis -- EXPLICIT

    ATTR:  coef,	TYPE: maths_function -- DERIVED
      := SELF\unary_generic_expression.operand


  SUB- ENTITY(50)	rationalize_function
    REDCR: operand,	TYPE: maths_function -- EXPLICIT	(AMBIGUOUS/MASKED)
      -- OVERRIDING ENTITY: unary_generic_expression

    ATTR:  fun,	TYPE: maths_function -- DERIVED
      := SELF\unary_generic_expression.operand


  SUB- ENTITY(51)	partial_derivative_function
    REDCR: operand,	TYPE: maths_function -- EXPLICIT	(AMBIGUOUS/MASKED)
      -- OVERRIDING ENTITY: unary_generic_expression

    ATTR:  d_variables,	TYPE: LIST [1 : ?] OF input_selector -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  extension,	TYPE: extension_options -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  derivand,	TYPE: maths_function -- DERIVED	(AMBIGUOUS/MASKED)
      := SELF\unary_generic_expression.operand


  SUB- ENTITY(52)	definite_integral_function
    REDCR: operand,	TYPE: maths_function -- EXPLICIT	(AMBIGUOUS/MASKED)
      -- OVERRIDING ENTITY: unary_generic_expression

    ATTR:  variable_of_integration,	TYPE: input_selector -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  lower_limit_neg_infinity,	TYPE: BOOLEAN -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  upper_limit_pos_infinity,	TYPE: BOOLEAN -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  integrand,	TYPE: maths_function -- DERIVED	(AMBIGUOUS/MASKED)
      := SELF\unary_generic_expression.operand


  SUB- ENTITY(53)	expression_denoted_function
    ATTR:  expr,	TYPE: generic_expression -- DERIVED	(AMBIGUOUS/MASKED)
      := SELF\unary_generic_expression.operand


  SUB- ENTITY(54)	imported_point_function
    ATTR:  geometry,	TYPE: point -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(55)	imported_surface_function
    ATTR:  geometry,	TYPE: surface -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  parametric_domain,	TYPE: tuple_space -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(56)	imported_volume_function
    ATTR:  geometry,	TYPE: volume -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  parametric_domain,	TYPE: tuple_space -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(57)	application_defined_function
    ATTR:  explicit_domain,	TYPE: tuple_space -- EXPLICIT

    ATTR:  explicit_range,	TYPE: tuple_space -- EXPLICIT

    ATTR:  parameters,	TYPE: LIST OF maths_value -- EXPLICIT


  SUB- ENTITY(58)	maths_function
    ATTR:  domain,	TYPE: tuple_space -- DERIVED
      := derive_function_domain( SELF )

    ATTR:  range,	TYPE: tuple_space -- DERIVED
      := derive_function_range( SELF )


  SUB- ENTITY(59)	maths_enum_literal
    ATTR:  lit_value,	TYPE: maths_enum_atom -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(60)	boolean_representation_item
    (no local attributes)

  SUB- ENTITY(61)	boolean_literal
    ATTR:  the_value,	TYPE: BOOLEAN -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(62)	integer_representation_item
    (no local attributes)

  SUB- ENTITY(63)	int_literal
    REDCR: the_value,	TYPE: INTEGER -- EXPLICIT	(AMBIGUOUS/MASKED)
      -- OVERRIDING ENTITY: literal_number


  SUB- ENTITY(64)	real_representation_item
    (no local attributes)

  SUB- ENTITY(65)	real_literal
    REDCR: the_value,	TYPE: REAL -- EXPLICIT	(AMBIGUOUS/MASKED)
      -- OVERRIDING ENTITY: literal_number


  SUB- ENTITY(66)	literal_number
    ATTR:  the_value,	TYPE: NUMBER -- EXPLICIT	(AMBIGUOUS/MASKED)
      -- possibly overriden by
          ENTITY: real_literal,	TYPE: REAL
          ENTITY: int_literal,	TYPE: INTEGER


  SUB- ENTITY(67)	integer_tuple_literal
    ATTR:  lit_value,	TYPE: LIST [1 : ?] OF INTEGER -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(68)	maths_tuple_literal
    ATTR:  lit_value,	TYPE: LIST OF maths_value -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(69)	complex_number_literal_polar
    ATTR:  modulus,	TYPE: REAL -- EXPLICIT

    ATTR:  argument,	TYPE: REAL -- EXPLICIT

    REDCR: real_part,	TYPE: REAL -- DERIVED (DYNAMIC)
      := modulus * COS( argument )
      -- OVERRIDING ENTITY: complex_number_literal

    REDCR: imag_part,	TYPE: REAL -- DERIVED (DYNAMIC)
      := modulus * SIN( argument )
      -- OVERRIDING ENTITY: complex_number_literal


  SUB- ENTITY(70)	complex_number_literal
    ATTR:  real_part,	TYPE: REAL -- EXPLICIT (DYNAMIC)
      -- possibly overriden by
          ENTITY: complex_number_literal_polar,	TYPE: REAL	(as DERIVED)

    ATTR:  imag_part,	TYPE: REAL -- EXPLICIT (DYNAMIC)
      -- possibly overriden by
          ENTITY: complex_number_literal_polar,	TYPE: REAL	(as DERIVED)


  SUB- ENTITY(71)	binary_literal
    ATTR:  lit_value,	TYPE: BINARY -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(72)	real_tuple_literal
    ATTR:  lit_value,	TYPE: LIST [1 : ?] OF REAL -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(73)	atom_based_literal
    ATTR:  lit_value,	TYPE: atom_based_value -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(74)	logical_representation_item
    (no local attributes)

  SUB- ENTITY(75)	logical_literal
    ATTR:  lit_value,	TYPE: LOGICAL -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(76)	string_literal
    ATTR:  the_value,	TYPE: STRING -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(77)	generic_literal
    (no local attributes)

  SUB- ENTITY(78)	maths_real_variable
    (no local attributes)

  SUB- ENTITY(79)	real_numeric_variable
    (no local attributes)

  SUB- ENTITY(80)	maths_integer_variable
    (no local attributes)

  SUB- ENTITY(81)	int_numeric_variable
    (no local attributes)

  SUB- ENTITY(82)	numeric_variable
    (no local attributes)

  SUB- ENTITY(83)	maths_boolean_variable
    (no local attributes)

  SUB- ENTITY(84)	boolean_variable
    (no local attributes)

  SUB- ENTITY(85)	maths_string_variable
    (no local attributes)

  SUB- ENTITY(86)	string_variable
    (no local attributes)

  SUB- ENTITY(87)	variable
    (no local attributes)

  SUB- ENTITY(88)	bound_variational_parameter
    REDCR: parameter_current_value,	TYPE: maths_value -- DERIVED (DYNAMIC)
      := ?
      -- OVERRIDING ENTITY: variational_parameter


  SUB- ENTITY(89)	unbound_variational_parameter
    (no local attributes)

  SUB- ENTITY(90)	variational_parameter
    ATTR:  parameter_description,	TYPE: OPTIONAL text -- EXPLICIT

    ATTR:  parameter_current_value,	TYPE: maths_value -- EXPLICIT (DYNAMIC)
      -- possibly overriden by
          ENTITY: bound_variational_parameter,	TYPE: maths_value	(as DERIVED)


  SUB- ENTITY(91)	maths_variable
    ATTR:  values_space,	TYPE: maths_space -- EXPLICIT

    ATTR:  name,	TYPE: label -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(92)	generic_variable
    ATTR:  interpretation,	TYPE: environment -- INVERSE
      FOR syntactic_representation;


  SUB- ENTITY(93)	simple_numeric_expression
    (no local attributes)

  SUB- ENTITY(94)	simple_boolean_expression
    (no local attributes)

  SUB- ENTITY(95)	simple_string_expression
    (no local attributes)

  SUB- ENTITY(96)	simple_generic_expression
    (no local attributes)

  SUB- ENTITY(97)	minus_expression
    (no local attributes)

  SUB- ENTITY(98)	div_expression
    (no local attributes)

  SUB- ENTITY(99)	mod_expression
    (no local attributes)

  SUB- ENTITY(100)	rational_representation_item
    (no local attributes)

  SUB- ENTITY(101)	slash_expression
    (no local attributes)

  SUB- ENTITY(102)	power_expression
    (no local attributes)

  SUB- ENTITY(103)	atan_function
    (no local attributes)

  SUB- ENTITY(104)	binary_function_call
    (no local attributes)

  SUB- ENTITY(105)	binary_numeric_expression
    REDCR: operands,	TYPE: LIST [2 : 2] OF numeric_expression -- EXPLICIT	(AMBIGUOUS/MASKED)
      -- OVERRIDING ENTITY: binary_generic_expression


  SUB- ENTITY(106)	index_expression
    ATTR:  operand,	TYPE: generic_expression -- DERIVED	(AMBIGUOUS/MASKED)
      := SELF\binary_generic_expression.operands[1]

    ATTR:  index,	TYPE: generic_expression -- DERIVED	(AMBIGUOUS/MASKED)
      := SELF\binary_generic_expression.operands[2]


  SUB- ENTITY(107)	format_function
    ATTR:  value_to_format,	TYPE: generic_expression -- DERIVED
      := SELF\binary_generic_expression.operands[1]

    ATTR:  format_string,	TYPE: generic_expression -- DERIVED
      := SELF\binary_generic_expression.operands[2]


  SUB- ENTITY(108)	equals_expression
    (no local attributes)

  SUB- ENTITY(109)	xor_expression
    REDCR: operands,	TYPE: LIST [2 : 2] OF boolean_expression -- EXPLICIT	(AMBIGUOUS/MASKED)
      -- OVERRIDING ENTITY: binary_generic_expression


  SUB- ENTITY(110)	binary_boolean_expression
    (no local attributes)

  SUB- ENTITY(111)	comparison_not_equal
    (no local attributes)

  SUB- ENTITY(112)	comparison_greater
    (no local attributes)

  SUB- ENTITY(113)	comparison_greater_equal
    (no local attributes)

  SUB- ENTITY(114)	comparison_less_equal
    (no local attributes)

  SUB- ENTITY(115)	like_expression
    (no local attributes)

  SUB- ENTITY(116)	comparison_equal
    (no local attributes)

  SUB- ENTITY(117)	comparison_less
    (no local attributes)

  SUB- ENTITY(118)	comparison_expression
    REDCR: operands,	TYPE: LIST [2 : 2] OF expression -- EXPLICIT	(AMBIGUOUS/MASKED)
      -- OVERRIDING ENTITY: binary_generic_expression


  SUB- ENTITY(119)	binary_generic_expression
    ATTR:  operands,	TYPE: LIST [2 : 2] OF generic_expression -- EXPLICIT	(AMBIGUOUS/MASKED)
      -- possibly overriden by
          ENTITY: binary_numeric_expression,	TYPE: LIST [2 : 2] OF numeric_expression
          ENTITY: xor_expression,	TYPE: LIST [2 : 2] OF boolean_expression
          ENTITY: comparison_expression,	TYPE: LIST [2 : 2] OF expression


  SUB- ENTITY(120)	concat_expression
    REDCR: operands,	TYPE: LIST [2 : ?] OF string_expression -- EXPLICIT	(AMBIGUOUS/MASKED)
      -- OVERRIDING ENTITY: multiple_arity_generic_expression


  SUB- ENTITY(121)	substring_expression
    ATTR:  operand,	TYPE: generic_expression -- DERIVED	(AMBIGUOUS/MASKED)
      := SELF\multiple_arity_generic_expression.operands[1]

    ATTR:  index1,	TYPE: generic_expression -- DERIVED
      := SELF\multiple_arity_generic_expression.operands[2]

    ATTR:  index2,	TYPE: generic_expression -- DERIVED
      := SELF\multiple_arity_generic_expression.operands[3]


  SUB- ENTITY(122)	string_defined_function
    (no local attributes)

  SUB- ENTITY(123)	expression_extension_string
    (no local attributes)

  SUB- ENTITY(124)	string_expression
    (no local attributes)

  SUB- ENTITY(125)	interval_expression
    ATTR:  interval_low,	TYPE: generic_expression -- DERIVED
      := SELF\multiple_arity_generic_expression.operands[1]

    ATTR:  interval_item,	TYPE: generic_expression -- DERIVED
      := SELF\multiple_arity_generic_expression.operands[2]

    ATTR:  interval_high,	TYPE: generic_expression -- DERIVED
      := SELF\multiple_arity_generic_expression.operands[3]


  SUB- ENTITY(126)	not_expression
    REDCR: operand,	TYPE: boolean_expression -- EXPLICIT	(AMBIGUOUS/MASKED)
      -- OVERRIDING ENTITY: unary_generic_expression


  SUB- ENTITY(127)	odd_function
    REDCR: operand,	TYPE: numeric_expression -- EXPLICIT	(AMBIGUOUS/MASKED)
      -- OVERRIDING ENTITY: unary_generic_expression


  SUB- ENTITY(128)	unary_boolean_expression
    (no local attributes)

  SUB- ENTITY(129)	boolean_defined_function
    (no local attributes)

  SUB- ENTITY(130)	or_expression
    (no local attributes)

  SUB- ENTITY(131)	and_expression
    (no local attributes)

  SUB- ENTITY(132)	multiple_arity_boolean_expression
    REDCR: operands,	TYPE: LIST [2 : ?] OF boolean_expression -- EXPLICIT	(AMBIGUOUS/MASKED)
      -- OVERRIDING ENTITY: multiple_arity_generic_expression


  SUB- ENTITY(133)	boolean_expression
    (no local attributes)

  SUB- ENTITY(134)	int_value_function
    (no local attributes)

  SUB- ENTITY(135)	value_function
    REDCR: operand,	TYPE: string_expression -- EXPLICIT	(AMBIGUOUS/MASKED)
      -- OVERRIDING ENTITY: unary_generic_expression


  SUB- ENTITY(136)	integer_defined_function
    (no local attributes)

  SUB- ENTITY(137)	real_defined_function
    (no local attributes)

  SUB- ENTITY(138)	numeric_defined_function
    (no local attributes)

  SUB- ENTITY(139)	mult_expression
    (no local attributes)

  SUB- ENTITY(140)	plus_expression
    (no local attributes)

  SUB- ENTITY(141)	minimum_function
    (no local attributes)

  SUB- ENTITY(142)	maximum_function
    (no local attributes)

  SUB- ENTITY(143)	multiple_arity_function_call
    (no local attributes)

  SUB- ENTITY(144)	multiple_arity_numeric_expression
    REDCR: operands,	TYPE: LIST [2 : ?] OF numeric_expression -- EXPLICIT	(AMBIGUOUS/MASKED)
      -- OVERRIDING ENTITY: multiple_arity_generic_expression


  SUB- ENTITY(145)	length_function
    REDCR: operand,	TYPE: string_expression -- EXPLICIT	(AMBIGUOUS/MASKED)
      -- OVERRIDING ENTITY: unary_generic_expression


  SUB- ENTITY(146)	square_root_function
    (no local attributes)

  SUB- ENTITY(147)	log2_function
    (no local attributes)

  SUB- ENTITY(148)	sin_function
    (no local attributes)

  SUB- ENTITY(149)	abs_function
    (no local attributes)

  SUB- ENTITY(150)	minus_function
    (no local attributes)

  SUB- ENTITY(151)	log_function
    (no local attributes)

  SUB- ENTITY(152)	asin_function
    (no local attributes)

  SUB- ENTITY(153)	cos_function
    (no local attributes)

  SUB- ENTITY(154)	tan_function
    (no local attributes)

  SUB- ENTITY(155)	log10_function
    (no local attributes)

  SUB- ENTITY(156)	exp_function
    (no local attributes)

  SUB- ENTITY(157)	acos_function
    (no local attributes)

  SUB- ENTITY(158)	unary_function_call
    (no local attributes)

  SUB- ENTITY(159)	unary_numeric_expression
    REDCR: operand,	TYPE: numeric_expression -- EXPLICIT	(AMBIGUOUS/MASKED)
      -- OVERRIDING ENTITY: unary_generic_expression


  SUB- ENTITY(160)	expression_extension_numeric
    (no local attributes)

  SUB- ENTITY(161)	numeric_expression
    ATTR:  is_int,	TYPE: BOOLEAN -- DERIVED
      := is_int_expr( SELF )

    ATTR:  sql_mappable,	TYPE: BOOLEAN -- DERIVED
      := is_sql_mappable( SELF )


  SUB- ENTITY(162)	expression
    (no local attributes)

  SUB- ENTITY(163)	dependent_variable_definition
    ATTR:  name,	TYPE: label -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  description,	TYPE: text -- EXPLICIT


  SUB- ENTITY(164)	partial_derivative_expression
    ATTR:  d_variables,	TYPE: LIST [1 : ?] OF maths_variable -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  extension,	TYPE: extension_options -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  derivand,	TYPE: generic_expression -- DERIVED	(AMBIGUOUS/MASKED)
      := SELF\unary_generic_expression.operand


  SUB- ENTITY(165)	unary_generic_expression
    ATTR:  operand,	TYPE: generic_expression -- EXPLICIT	(AMBIGUOUS/MASKED)
      -- possibly overriden by
          ENTITY: linearized_table_function,	TYPE: maths_function
          ENTITY: restriction_function,	TYPE: maths_space
          ENTITY: repackaging_function,	TYPE: maths_function
          ENTITY: not_expression,	TYPE: boolean_expression
          ENTITY: value_function,	TYPE: string_expression
          ENTITY: reindexed_array_function,	TYPE: maths_function
          ENTITY: homogeneous_linear_function,	TYPE: maths_function
          ENTITY: b_spline_function,	TYPE: maths_function
          ENTITY: length_function,	TYPE: string_expression
          ENTITY: partial_derivative_function,	TYPE: maths_function
          ENTITY: odd_function,	TYPE: numeric_expression
          ENTITY: rationalize_function,	TYPE: maths_function
          ENTITY: general_linear_function,	TYPE: maths_function
          ENTITY: unary_numeric_expression,	TYPE: numeric_expression
          ENTITY: definite_integral_function,	TYPE: maths_function


  SUB- ENTITY(166)	definite_integral_expression
    ATTR:  lower_limit_neg_infinity,	TYPE: BOOLEAN -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  upper_limit_pos_infinity,	TYPE: BOOLEAN -- EXPLICIT	(AMBIGUOUS/MASKED)

    ATTR:  integrand,	TYPE: generic_expression -- DERIVED	(AMBIGUOUS/MASKED)
      := SELF\multiple_arity_generic_expression.operands[1]

    ATTR:  variable_of_integration,	TYPE: maths_variable -- DERIVED	(AMBIGUOUS/MASKED)
      := SELF\multiple_arity_generic_expression.operands[2]

    REDCR: variables,	TYPE: LIST [1 : 1] OF UNIQUE generic_variable -- DERIVED (DYNAMIC)
      := [variable_of_integration]
      -- OVERRIDING ENTITY: quantifier_expression


  SUB- ENTITY(167)	quantifier_expression
    ATTR:  variables,	TYPE: LIST [1 : ?] OF UNIQUE generic_variable -- EXPLICIT (DYNAMIC)
      -- possibly overriden by
      *** ENTITY: abstracted_expression_function,	TYPE: LIST [1 : ?] OF UNIQUE generic_variable	(as DERIVED)
          ENTITY: definite_integral_expression,	TYPE: LIST [1 : 1] OF UNIQUE generic_variable	(as DERIVED)


  SUB- ENTITY(168)	function_application
    ATTR:  func,	TYPE: maths_function_select -- EXPLICIT

    ATTR:  arguments,	TYPE: LIST [1 : ?] OF maths_expression -- EXPLICIT

    REDCR: operands,	TYPE: LIST [2 : ?] OF generic_expression -- DERIVED (DYNAMIC)	(AMBIGUOUS/MASKED)
      := [convert_to_maths_function( func )] + convert_to_operands( arguments )
      -- OVERRIDING ENTITY: multiple_arity_generic_expression


  SUB- ENTITY(169)	multiple_arity_generic_expression
    ATTR:  operands,	TYPE: LIST [2 : ?] OF generic_expression -- EXPLICIT (DYNAMIC)	(AMBIGUOUS/MASKED)
      -- possibly overriden by
          ENTITY: series_composed_function,	TYPE: LIST [2 : ?] OF maths_function
          ENTITY: concat_expression,	TYPE: LIST [2 : ?] OF string_expression
          ENTITY: multiple_arity_numeric_expression,	TYPE: LIST [2 : ?] OF numeric_expression
          ENTITY: multiple_arity_boolean_expression,	TYPE: LIST [2 : ?] OF boolean_expression
          ENTITY: basic_sparse_matrix,	TYPE: LIST [3 : 3] OF maths_function
          ENTITY: parallel_composed_function,	TYPE: LIST [2 : ?] OF generic_expression	(as DERIVED)
          ENTITY: function_application,	TYPE: LIST [2 : ?] OF generic_expression	(as DERIVED)


*/


//MARK: - Partial Entity
  public final class _generic_expression : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eGENERIC_EXPRESSION.self
    }

    //ATTRIBUTES
    // (no local attributes)

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      //SELECT data types (indirectly) referencing the current type as a member of the select list
      members.insert(SDAI.STRING(sMATHS_VALUE.typeName)) // -> Self
      members.insert(SDAI.STRING(sMATHS_EXPRESSION.typeName)) // -> Self
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: eGENERIC_EXPRESSION?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = IS_ACYCLIC(SELF)
      return SDAI.LOGICAL(/*SDAI.BOOLEAN*/_TEMP1)
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init() {
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 0
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      self.init( )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY generic_expression
    ABSTRACT SUPERTYPE OF ( 
        ONEOF ( 
            simple_generic_expression, 
            unary_generic_expression, 
            binary_generic_expression, 
            multiple_arity_generic_expression ) );
    WHERE
      wr1: is_acyclic( SELF );
  END_ENTITY; -- generic_expression (line:16777 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eGENERIC_EXPRESSION : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _generic_expression.self
    }
    public let partialEntity: _generic_expression

    //MARK: SUPERTYPES
    public var super_eGENERIC_EXPRESSION: eGENERIC_EXPRESSION { return self } 	// [1]

    //MARK: SUBTYPES
    public var sub_eCARTESIAN_COMPLEX_NUMBER_REGION: eCARTESIAN_COMPLEX_NUMBER_REGION? {	// [2]
      return self.complexEntity.entityReference(eCARTESIAN_COMPLEX_NUMBER_REGION.self)
    }

    public var sub_eFINITE_INTEGER_INTERVAL: eFINITE_INTEGER_INTERVAL? {	// [3]
      return self.complexEntity.entityReference(eFINITE_INTEGER_INTERVAL.self)
    }

    public var sub_eELEMENTARY_SPACE: eELEMENTARY_SPACE? {	// [4]
      return self.complexEntity.entityReference(eELEMENTARY_SPACE.self)
    }

    public var sub_eINTEGER_INTERVAL_FROM_MIN: eINTEGER_INTERVAL_FROM_MIN? {	// [5]
      return self.complexEntity.entityReference(eINTEGER_INTERVAL_FROM_MIN.self)
    }

    public var sub_eINTEGER_INTERVAL_TO_MAX: eINTEGER_INTERVAL_TO_MAX? {	// [6]
      return self.complexEntity.entityReference(eINTEGER_INTERVAL_TO_MAX.self)
    }

    public var sub_eFINITE_REAL_INTERVAL: eFINITE_REAL_INTERVAL? {	// [7]
      return self.complexEntity.entityReference(eFINITE_REAL_INTERVAL.self)
    }

    public var sub_eREAL_INTERVAL_FROM_MIN: eREAL_INTERVAL_FROM_MIN? {	// [8]
      return self.complexEntity.entityReference(eREAL_INTERVAL_FROM_MIN.self)
    }

    public var sub_eREAL_INTERVAL_TO_MAX: eREAL_INTERVAL_TO_MAX? {	// [9]
      return self.complexEntity.entityReference(eREAL_INTERVAL_TO_MAX.self)
    }

    public var sub_ePOLAR_COMPLEX_NUMBER_REGION: ePOLAR_COMPLEX_NUMBER_REGION? {	// [10]
      return self.complexEntity.entityReference(ePOLAR_COMPLEX_NUMBER_REGION.self)
    }

    public var sub_eGENERATED_FINITE_NUMERIC_SPACE: eGENERATED_FINITE_NUMERIC_SPACE? {	// [11]
      return self.complexEntity.entityReference(eGENERATED_FINITE_NUMERIC_SPACE.self)
    }

    public var sub_eFINITE_SPACE: eFINITE_SPACE? {	// [12]
      return self.complexEntity.entityReference(eFINITE_SPACE.self)
    }

    public var sub_eUNIFORM_PRODUCT_SPACE: eUNIFORM_PRODUCT_SPACE? {	// [13]
      return self.complexEntity.entityReference(eUNIFORM_PRODUCT_SPACE.self)
    }

    public var sub_eLISTED_PRODUCT_SPACE: eLISTED_PRODUCT_SPACE? {	// [14]
      return self.complexEntity.entityReference(eLISTED_PRODUCT_SPACE.self)
    }

    public var sub_eEXTENDED_TUPLE_SPACE: eEXTENDED_TUPLE_SPACE? {	// [15]
      return self.complexEntity.entityReference(eEXTENDED_TUPLE_SPACE.self)
    }

    public var sub_eFUNCTION_SPACE: eFUNCTION_SPACE? {	// [16]
      return self.complexEntity.entityReference(eFUNCTION_SPACE.self)
    }

    public var sub_eMATHS_SPACE: eMATHS_SPACE? {	// [17]
      return self.complexEntity.entityReference(eMATHS_SPACE.self)
    }

    public var sub_eSERIES_COMPOSED_FUNCTION: eSERIES_COMPOSED_FUNCTION? {	// [18]
      return self.complexEntity.entityReference(eSERIES_COMPOSED_FUNCTION.self)
    }

    public var sub_eRESTRICTION_FUNCTION: eRESTRICTION_FUNCTION? {	// [19]
      return self.complexEntity.entityReference(eRESTRICTION_FUNCTION.self)
    }

    public var sub_eIMPORTED_CURVE_FUNCTION: eIMPORTED_CURVE_FUNCTION? {	// [20]
      return self.complexEntity.entityReference(eIMPORTED_CURVE_FUNCTION.self)
    }

    public var sub_eREPACKAGING_FUNCTION: eREPACKAGING_FUNCTION? {	// [21]
      return self.complexEntity.entityReference(eREPACKAGING_FUNCTION.self)
    }

    public var sub_eABSTRACTED_EXPRESSION_FUNCTION: eABSTRACTED_EXPRESSION_FUNCTION? {	// [22]
      return self.complexEntity.entityReference(eABSTRACTED_EXPRESSION_FUNCTION.self)
    }

    public var sub_eB_SPLINE_BASIS: eB_SPLINE_BASIS? {	// [23]
      return self.complexEntity.entityReference(eB_SPLINE_BASIS.self)
    }

    public var sub_eREINDEXED_ARRAY_FUNCTION: eREINDEXED_ARRAY_FUNCTION? {	// [24]
      return self.complexEntity.entityReference(eREINDEXED_ARRAY_FUNCTION.self)
    }

    public var sub_eHOMOGENEOUS_LINEAR_FUNCTION: eHOMOGENEOUS_LINEAR_FUNCTION? {	// [25]
      return self.complexEntity.entityReference(eHOMOGENEOUS_LINEAR_FUNCTION.self)
    }

    public var sub_eSELECTOR_FUNCTION: eSELECTOR_FUNCTION? {	// [26]
      return self.complexEntity.entityReference(eSELECTOR_FUNCTION.self)
    }

    public var sub_eFINITE_FUNCTION: eFINITE_FUNCTION? {	// [27]
      return self.complexEntity.entityReference(eFINITE_FUNCTION.self)
    }

    public var sub_eCONSTANT_FUNCTION: eCONSTANT_FUNCTION? {	// [28]
      return self.complexEntity.entityReference(eCONSTANT_FUNCTION.self)
    }

    public var sub_eELEMENTARY_FUNCTION: eELEMENTARY_FUNCTION? {	// [29]
      return self.complexEntity.entityReference(eELEMENTARY_FUNCTION.self)
    }

    public var sub_ePARALLEL_COMPOSED_FUNCTION: ePARALLEL_COMPOSED_FUNCTION? {	// [30]
      return self.complexEntity.entityReference(ePARALLEL_COMPOSED_FUNCTION.self)
    }

    public var sub_eSTANDARD_TABLE_FUNCTION: eSTANDARD_TABLE_FUNCTION? {	// [31]
      return self.complexEntity.entityReference(eSTANDARD_TABLE_FUNCTION.self)
    }

    public var sub_eREGULAR_TABLE_FUNCTION: eREGULAR_TABLE_FUNCTION? {	// [32]
      return self.complexEntity.entityReference(eREGULAR_TABLE_FUNCTION.self)
    }

    public var sub_eSTRICT_TRIANGULAR_MATRIX: eSTRICT_TRIANGULAR_MATRIX? {	// [33]
      return self.complexEntity.entityReference(eSTRICT_TRIANGULAR_MATRIX.self)
    }

    public var sub_eTRIANGULAR_MATRIX: eTRIANGULAR_MATRIX? {	// [34]
      return self.complexEntity.entityReference(eTRIANGULAR_MATRIX.self)
    }

    public var sub_eSYMMETRIC_BANDED_MATRIX: eSYMMETRIC_BANDED_MATRIX? {	// [35]
      return self.complexEntity.entityReference(eSYMMETRIC_BANDED_MATRIX.self)
    }

    public var sub_eSYMMETRIC_MATRIX: eSYMMETRIC_MATRIX? {	// [36]
      return self.complexEntity.entityReference(eSYMMETRIC_MATRIX.self)
    }

    public var sub_eBANDED_MATRIX: eBANDED_MATRIX? {	// [37]
      return self.complexEntity.entityReference(eBANDED_MATRIX.self)
    }

    public var sub_eLINEARIZED_TABLE_FUNCTION: eLINEARIZED_TABLE_FUNCTION? {	// [38]
      return self.complexEntity.entityReference(eLINEARIZED_TABLE_FUNCTION.self)
    }

    public var sub_eLISTED_INTEGER_DATA: eLISTED_INTEGER_DATA? {	// [39]
      return self.complexEntity.entityReference(eLISTED_INTEGER_DATA.self)
    }

    public var sub_eLISTED_DATA: eLISTED_DATA? {	// [40]
      return self.complexEntity.entityReference(eLISTED_DATA.self)
    }

    public var sub_eLISTED_STRING_DATA: eLISTED_STRING_DATA? {	// [41]
      return self.complexEntity.entityReference(eLISTED_STRING_DATA.self)
    }

    public var sub_eLISTED_REAL_DATA: eLISTED_REAL_DATA? {	// [42]
      return self.complexEntity.entityReference(eLISTED_REAL_DATA.self)
    }

    public var sub_eLISTED_LOGICAL_DATA: eLISTED_LOGICAL_DATA? {	// [43]
      return self.complexEntity.entityReference(eLISTED_LOGICAL_DATA.self)
    }

    public var sub_eLISTED_COMPLEX_NUMBER_DATA: eLISTED_COMPLEX_NUMBER_DATA? {	// [44]
      return self.complexEntity.entityReference(eLISTED_COMPLEX_NUMBER_DATA.self)
    }

    public var sub_eEXTERNALLY_LISTED_DATA: eEXTERNALLY_LISTED_DATA? {	// [45]
      return self.complexEntity.entityReference(eEXTERNALLY_LISTED_DATA.self)
    }

    public var sub_eBASIC_SPARSE_MATRIX: eBASIC_SPARSE_MATRIX? {	// [46]
      return self.complexEntity.entityReference(eBASIC_SPARSE_MATRIX.self)
    }

    public var sub_eEXPLICIT_TABLE_FUNCTION: eEXPLICIT_TABLE_FUNCTION? {	// [47]
      return self.complexEntity.entityReference(eEXPLICIT_TABLE_FUNCTION.self)
    }

    public var sub_eGENERAL_LINEAR_FUNCTION: eGENERAL_LINEAR_FUNCTION? {	// [48]
      return self.complexEntity.entityReference(eGENERAL_LINEAR_FUNCTION.self)
    }

    public var sub_eB_SPLINE_FUNCTION: eB_SPLINE_FUNCTION? {	// [49]
      return self.complexEntity.entityReference(eB_SPLINE_FUNCTION.self)
    }

    public var sub_eRATIONALIZE_FUNCTION: eRATIONALIZE_FUNCTION? {	// [50]
      return self.complexEntity.entityReference(eRATIONALIZE_FUNCTION.self)
    }

    public var sub_ePARTIAL_DERIVATIVE_FUNCTION: ePARTIAL_DERIVATIVE_FUNCTION? {	// [51]
      return self.complexEntity.entityReference(ePARTIAL_DERIVATIVE_FUNCTION.self)
    }

    public var sub_eDEFINITE_INTEGRAL_FUNCTION: eDEFINITE_INTEGRAL_FUNCTION? {	// [52]
      return self.complexEntity.entityReference(eDEFINITE_INTEGRAL_FUNCTION.self)
    }

    public var sub_eEXPRESSION_DENOTED_FUNCTION: eEXPRESSION_DENOTED_FUNCTION? {	// [53]
      return self.complexEntity.entityReference(eEXPRESSION_DENOTED_FUNCTION.self)
    }

    public var sub_eIMPORTED_POINT_FUNCTION: eIMPORTED_POINT_FUNCTION? {	// [54]
      return self.complexEntity.entityReference(eIMPORTED_POINT_FUNCTION.self)
    }

    public var sub_eIMPORTED_SURFACE_FUNCTION: eIMPORTED_SURFACE_FUNCTION? {	// [55]
      return self.complexEntity.entityReference(eIMPORTED_SURFACE_FUNCTION.self)
    }

    public var sub_eIMPORTED_VOLUME_FUNCTION: eIMPORTED_VOLUME_FUNCTION? {	// [56]
      return self.complexEntity.entityReference(eIMPORTED_VOLUME_FUNCTION.self)
    }

    public var sub_eAPPLICATION_DEFINED_FUNCTION: eAPPLICATION_DEFINED_FUNCTION? {	// [57]
      return self.complexEntity.entityReference(eAPPLICATION_DEFINED_FUNCTION.self)
    }

    public var sub_eMATHS_FUNCTION: eMATHS_FUNCTION? {	// [58]
      return self.complexEntity.entityReference(eMATHS_FUNCTION.self)
    }

    public var sub_eMATHS_ENUM_LITERAL: eMATHS_ENUM_LITERAL? {	// [59]
      return self.complexEntity.entityReference(eMATHS_ENUM_LITERAL.self)
    }

    public var sub_eBOOLEAN_REPRESENTATION_ITEM: eBOOLEAN_REPRESENTATION_ITEM? {	// [60]
      return self.complexEntity.entityReference(eBOOLEAN_REPRESENTATION_ITEM.self)
    }

    public var sub_eBOOLEAN_LITERAL: eBOOLEAN_LITERAL? {	// [61]
      return self.complexEntity.entityReference(eBOOLEAN_LITERAL.self)
    }

    public var sub_eINTEGER_REPRESENTATION_ITEM: eINTEGER_REPRESENTATION_ITEM? {	// [62]
      return self.complexEntity.entityReference(eINTEGER_REPRESENTATION_ITEM.self)
    }

    public var sub_eINT_LITERAL: eINT_LITERAL? {	// [63]
      return self.complexEntity.entityReference(eINT_LITERAL.self)
    }

    public var sub_eREAL_REPRESENTATION_ITEM: eREAL_REPRESENTATION_ITEM? {	// [64]
      return self.complexEntity.entityReference(eREAL_REPRESENTATION_ITEM.self)
    }

    public var sub_eREAL_LITERAL: eREAL_LITERAL? {	// [65]
      return self.complexEntity.entityReference(eREAL_LITERAL.self)
    }

    public var sub_eLITERAL_NUMBER: eLITERAL_NUMBER? {	// [66]
      return self.complexEntity.entityReference(eLITERAL_NUMBER.self)
    }

    public var sub_eINTEGER_TUPLE_LITERAL: eINTEGER_TUPLE_LITERAL? {	// [67]
      return self.complexEntity.entityReference(eINTEGER_TUPLE_LITERAL.self)
    }

    public var sub_eMATHS_TUPLE_LITERAL: eMATHS_TUPLE_LITERAL? {	// [68]
      return self.complexEntity.entityReference(eMATHS_TUPLE_LITERAL.self)
    }

    public var sub_eCOMPLEX_NUMBER_LITERAL_POLAR: eCOMPLEX_NUMBER_LITERAL_POLAR? {	// [69]
      return self.complexEntity.entityReference(eCOMPLEX_NUMBER_LITERAL_POLAR.self)
    }

    public var sub_eCOMPLEX_NUMBER_LITERAL: eCOMPLEX_NUMBER_LITERAL? {	// [70]
      return self.complexEntity.entityReference(eCOMPLEX_NUMBER_LITERAL.self)
    }

    public var sub_eBINARY_LITERAL: eBINARY_LITERAL? {	// [71]
      return self.complexEntity.entityReference(eBINARY_LITERAL.self)
    }

    public var sub_eREAL_TUPLE_LITERAL: eREAL_TUPLE_LITERAL? {	// [72]
      return self.complexEntity.entityReference(eREAL_TUPLE_LITERAL.self)
    }

    public var sub_eATOM_BASED_LITERAL: eATOM_BASED_LITERAL? {	// [73]
      return self.complexEntity.entityReference(eATOM_BASED_LITERAL.self)
    }

    public var sub_eLOGICAL_REPRESENTATION_ITEM: eLOGICAL_REPRESENTATION_ITEM? {	// [74]
      return self.complexEntity.entityReference(eLOGICAL_REPRESENTATION_ITEM.self)
    }

    public var sub_eLOGICAL_LITERAL: eLOGICAL_LITERAL? {	// [75]
      return self.complexEntity.entityReference(eLOGICAL_LITERAL.self)
    }

    public var sub_eSTRING_LITERAL: eSTRING_LITERAL? {	// [76]
      return self.complexEntity.entityReference(eSTRING_LITERAL.self)
    }

    public var sub_eGENERIC_LITERAL: eGENERIC_LITERAL? {	// [77]
      return self.complexEntity.entityReference(eGENERIC_LITERAL.self)
    }

    public var sub_eMATHS_REAL_VARIABLE: eMATHS_REAL_VARIABLE? {	// [78]
      return self.complexEntity.entityReference(eMATHS_REAL_VARIABLE.self)
    }

    public var sub_eREAL_NUMERIC_VARIABLE: eREAL_NUMERIC_VARIABLE? {	// [79]
      return self.complexEntity.entityReference(eREAL_NUMERIC_VARIABLE.self)
    }

    public var sub_eMATHS_INTEGER_VARIABLE: eMATHS_INTEGER_VARIABLE? {	// [80]
      return self.complexEntity.entityReference(eMATHS_INTEGER_VARIABLE.self)
    }

    public var sub_eINT_NUMERIC_VARIABLE: eINT_NUMERIC_VARIABLE? {	// [81]
      return self.complexEntity.entityReference(eINT_NUMERIC_VARIABLE.self)
    }

    public var sub_eNUMERIC_VARIABLE: eNUMERIC_VARIABLE? {	// [82]
      return self.complexEntity.entityReference(eNUMERIC_VARIABLE.self)
    }

    public var sub_eMATHS_BOOLEAN_VARIABLE: eMATHS_BOOLEAN_VARIABLE? {	// [83]
      return self.complexEntity.entityReference(eMATHS_BOOLEAN_VARIABLE.self)
    }

    public var sub_eBOOLEAN_VARIABLE: eBOOLEAN_VARIABLE? {	// [84]
      return self.complexEntity.entityReference(eBOOLEAN_VARIABLE.self)
    }

    public var sub_eMATHS_STRING_VARIABLE: eMATHS_STRING_VARIABLE? {	// [85]
      return self.complexEntity.entityReference(eMATHS_STRING_VARIABLE.self)
    }

    public var sub_eSTRING_VARIABLE: eSTRING_VARIABLE? {	// [86]
      return self.complexEntity.entityReference(eSTRING_VARIABLE.self)
    }

    public var sub_eVARIABLE: eVARIABLE? {	// [87]
      return self.complexEntity.entityReference(eVARIABLE.self)
    }

    public var sub_eBOUND_VARIATIONAL_PARAMETER: eBOUND_VARIATIONAL_PARAMETER? {	// [88]
      return self.complexEntity.entityReference(eBOUND_VARIATIONAL_PARAMETER.self)
    }

    public var sub_eUNBOUND_VARIATIONAL_PARAMETER: eUNBOUND_VARIATIONAL_PARAMETER? {	// [89]
      return self.complexEntity.entityReference(eUNBOUND_VARIATIONAL_PARAMETER.self)
    }

    public var sub_eVARIATIONAL_PARAMETER: eVARIATIONAL_PARAMETER? {	// [90]
      return self.complexEntity.entityReference(eVARIATIONAL_PARAMETER.self)
    }

    public var sub_eMATHS_VARIABLE: eMATHS_VARIABLE? {	// [91]
      return self.complexEntity.entityReference(eMATHS_VARIABLE.self)
    }

    public var sub_eGENERIC_VARIABLE: eGENERIC_VARIABLE? {	// [92]
      return self.complexEntity.entityReference(eGENERIC_VARIABLE.self)
    }

    public var sub_eSIMPLE_NUMERIC_EXPRESSION: eSIMPLE_NUMERIC_EXPRESSION? {	// [93]
      return self.complexEntity.entityReference(eSIMPLE_NUMERIC_EXPRESSION.self)
    }

    public var sub_eSIMPLE_BOOLEAN_EXPRESSION: eSIMPLE_BOOLEAN_EXPRESSION? {	// [94]
      return self.complexEntity.entityReference(eSIMPLE_BOOLEAN_EXPRESSION.self)
    }

    public var sub_eSIMPLE_STRING_EXPRESSION: eSIMPLE_STRING_EXPRESSION? {	// [95]
      return self.complexEntity.entityReference(eSIMPLE_STRING_EXPRESSION.self)
    }

    public var sub_eSIMPLE_GENERIC_EXPRESSION: eSIMPLE_GENERIC_EXPRESSION? {	// [96]
      return self.complexEntity.entityReference(eSIMPLE_GENERIC_EXPRESSION.self)
    }

    public var sub_eMINUS_EXPRESSION: eMINUS_EXPRESSION? {	// [97]
      return self.complexEntity.entityReference(eMINUS_EXPRESSION.self)
    }

    public var sub_eDIV_EXPRESSION: eDIV_EXPRESSION? {	// [98]
      return self.complexEntity.entityReference(eDIV_EXPRESSION.self)
    }

    public var sub_eMOD_EXPRESSION: eMOD_EXPRESSION? {	// [99]
      return self.complexEntity.entityReference(eMOD_EXPRESSION.self)
    }

    public var sub_eRATIONAL_REPRESENTATION_ITEM: eRATIONAL_REPRESENTATION_ITEM? {	// [100]
      return self.complexEntity.entityReference(eRATIONAL_REPRESENTATION_ITEM.self)
    }

    public var sub_eSLASH_EXPRESSION: eSLASH_EXPRESSION? {	// [101]
      return self.complexEntity.entityReference(eSLASH_EXPRESSION.self)
    }

    public var sub_ePOWER_EXPRESSION: ePOWER_EXPRESSION? {	// [102]
      return self.complexEntity.entityReference(ePOWER_EXPRESSION.self)
    }

    public var sub_eATAN_FUNCTION: eATAN_FUNCTION? {	// [103]
      return self.complexEntity.entityReference(eATAN_FUNCTION.self)
    }

    public var sub_eBINARY_FUNCTION_CALL: eBINARY_FUNCTION_CALL? {	// [104]
      return self.complexEntity.entityReference(eBINARY_FUNCTION_CALL.self)
    }

    public var sub_eBINARY_NUMERIC_EXPRESSION: eBINARY_NUMERIC_EXPRESSION? {	// [105]
      return self.complexEntity.entityReference(eBINARY_NUMERIC_EXPRESSION.self)
    }

    public var sub_eINDEX_EXPRESSION: eINDEX_EXPRESSION? {	// [106]
      return self.complexEntity.entityReference(eINDEX_EXPRESSION.self)
    }

    public var sub_eFORMAT_FUNCTION: eFORMAT_FUNCTION? {	// [107]
      return self.complexEntity.entityReference(eFORMAT_FUNCTION.self)
    }

    public var sub_eEQUALS_EXPRESSION: eEQUALS_EXPRESSION? {	// [108]
      return self.complexEntity.entityReference(eEQUALS_EXPRESSION.self)
    }

    public var sub_eXOR_EXPRESSION: eXOR_EXPRESSION? {	// [109]
      return self.complexEntity.entityReference(eXOR_EXPRESSION.self)
    }

    public var sub_eBINARY_BOOLEAN_EXPRESSION: eBINARY_BOOLEAN_EXPRESSION? {	// [110]
      return self.complexEntity.entityReference(eBINARY_BOOLEAN_EXPRESSION.self)
    }

    public var sub_eCOMPARISON_NOT_EQUAL: eCOMPARISON_NOT_EQUAL? {	// [111]
      return self.complexEntity.entityReference(eCOMPARISON_NOT_EQUAL.self)
    }

    public var sub_eCOMPARISON_GREATER: eCOMPARISON_GREATER? {	// [112]
      return self.complexEntity.entityReference(eCOMPARISON_GREATER.self)
    }

    public var sub_eCOMPARISON_GREATER_EQUAL: eCOMPARISON_GREATER_EQUAL? {	// [113]
      return self.complexEntity.entityReference(eCOMPARISON_GREATER_EQUAL.self)
    }

    public var sub_eCOMPARISON_LESS_EQUAL: eCOMPARISON_LESS_EQUAL? {	// [114]
      return self.complexEntity.entityReference(eCOMPARISON_LESS_EQUAL.self)
    }

    public var sub_eLIKE_EXPRESSION: eLIKE_EXPRESSION? {	// [115]
      return self.complexEntity.entityReference(eLIKE_EXPRESSION.self)
    }

    public var sub_eCOMPARISON_EQUAL: eCOMPARISON_EQUAL? {	// [116]
      return self.complexEntity.entityReference(eCOMPARISON_EQUAL.self)
    }

    public var sub_eCOMPARISON_LESS: eCOMPARISON_LESS? {	// [117]
      return self.complexEntity.entityReference(eCOMPARISON_LESS.self)
    }

    public var sub_eCOMPARISON_EXPRESSION: eCOMPARISON_EXPRESSION? {	// [118]
      return self.complexEntity.entityReference(eCOMPARISON_EXPRESSION.self)
    }

    public var sub_eBINARY_GENERIC_EXPRESSION: eBINARY_GENERIC_EXPRESSION? {	// [119]
      return self.complexEntity.entityReference(eBINARY_GENERIC_EXPRESSION.self)
    }

    public var sub_eCONCAT_EXPRESSION: eCONCAT_EXPRESSION? {	// [120]
      return self.complexEntity.entityReference(eCONCAT_EXPRESSION.self)
    }

    public var sub_eSUBSTRING_EXPRESSION: eSUBSTRING_EXPRESSION? {	// [121]
      return self.complexEntity.entityReference(eSUBSTRING_EXPRESSION.self)
    }

    public var sub_eSTRING_DEFINED_FUNCTION: eSTRING_DEFINED_FUNCTION? {	// [122]
      return self.complexEntity.entityReference(eSTRING_DEFINED_FUNCTION.self)
    }

    public var sub_eEXPRESSION_EXTENSION_STRING: eEXPRESSION_EXTENSION_STRING? {	// [123]
      return self.complexEntity.entityReference(eEXPRESSION_EXTENSION_STRING.self)
    }

    public var sub_eSTRING_EXPRESSION: eSTRING_EXPRESSION? {	// [124]
      return self.complexEntity.entityReference(eSTRING_EXPRESSION.self)
    }

    public var sub_eINTERVAL_EXPRESSION: eINTERVAL_EXPRESSION? {	// [125]
      return self.complexEntity.entityReference(eINTERVAL_EXPRESSION.self)
    }

    public var sub_eNOT_EXPRESSION: eNOT_EXPRESSION? {	// [126]
      return self.complexEntity.entityReference(eNOT_EXPRESSION.self)
    }

    public var sub_eODD_FUNCTION: eODD_FUNCTION? {	// [127]
      return self.complexEntity.entityReference(eODD_FUNCTION.self)
    }

    public var sub_eUNARY_BOOLEAN_EXPRESSION: eUNARY_BOOLEAN_EXPRESSION? {	// [128]
      return self.complexEntity.entityReference(eUNARY_BOOLEAN_EXPRESSION.self)
    }

    public var sub_eBOOLEAN_DEFINED_FUNCTION: eBOOLEAN_DEFINED_FUNCTION? {	// [129]
      return self.complexEntity.entityReference(eBOOLEAN_DEFINED_FUNCTION.self)
    }

    public var sub_eOR_EXPRESSION: eOR_EXPRESSION? {	// [130]
      return self.complexEntity.entityReference(eOR_EXPRESSION.self)
    }

    public var sub_eAND_EXPRESSION: eAND_EXPRESSION? {	// [131]
      return self.complexEntity.entityReference(eAND_EXPRESSION.self)
    }

    public var sub_eMULTIPLE_ARITY_BOOLEAN_EXPRESSION: eMULTIPLE_ARITY_BOOLEAN_EXPRESSION? {	// [132]
      return self.complexEntity.entityReference(eMULTIPLE_ARITY_BOOLEAN_EXPRESSION.self)
    }

    public var sub_eBOOLEAN_EXPRESSION: eBOOLEAN_EXPRESSION? {	// [133]
      return self.complexEntity.entityReference(eBOOLEAN_EXPRESSION.self)
    }

    public var sub_eINT_VALUE_FUNCTION: eINT_VALUE_FUNCTION? {	// [134]
      return self.complexEntity.entityReference(eINT_VALUE_FUNCTION.self)
    }

    public var sub_eVALUE_FUNCTION: eVALUE_FUNCTION? {	// [135]
      return self.complexEntity.entityReference(eVALUE_FUNCTION.self)
    }

    public var sub_eINTEGER_DEFINED_FUNCTION: eINTEGER_DEFINED_FUNCTION? {	// [136]
      return self.complexEntity.entityReference(eINTEGER_DEFINED_FUNCTION.self)
    }

    public var sub_eREAL_DEFINED_FUNCTION: eREAL_DEFINED_FUNCTION? {	// [137]
      return self.complexEntity.entityReference(eREAL_DEFINED_FUNCTION.self)
    }

    public var sub_eNUMERIC_DEFINED_FUNCTION: eNUMERIC_DEFINED_FUNCTION? {	// [138]
      return self.complexEntity.entityReference(eNUMERIC_DEFINED_FUNCTION.self)
    }

    public var sub_eMULT_EXPRESSION: eMULT_EXPRESSION? {	// [139]
      return self.complexEntity.entityReference(eMULT_EXPRESSION.self)
    }

    public var sub_ePLUS_EXPRESSION: ePLUS_EXPRESSION? {	// [140]
      return self.complexEntity.entityReference(ePLUS_EXPRESSION.self)
    }

    public var sub_eMINIMUM_FUNCTION: eMINIMUM_FUNCTION? {	// [141]
      return self.complexEntity.entityReference(eMINIMUM_FUNCTION.self)
    }

    public var sub_eMAXIMUM_FUNCTION: eMAXIMUM_FUNCTION? {	// [142]
      return self.complexEntity.entityReference(eMAXIMUM_FUNCTION.self)
    }

    public var sub_eMULTIPLE_ARITY_FUNCTION_CALL: eMULTIPLE_ARITY_FUNCTION_CALL? {	// [143]
      return self.complexEntity.entityReference(eMULTIPLE_ARITY_FUNCTION_CALL.self)
    }

    public var sub_eMULTIPLE_ARITY_NUMERIC_EXPRESSION: eMULTIPLE_ARITY_NUMERIC_EXPRESSION? {	// [144]
      return self.complexEntity.entityReference(eMULTIPLE_ARITY_NUMERIC_EXPRESSION.self)
    }

    public var sub_eLENGTH_FUNCTION: eLENGTH_FUNCTION? {	// [145]
      return self.complexEntity.entityReference(eLENGTH_FUNCTION.self)
    }

    public var sub_eSQUARE_ROOT_FUNCTION: eSQUARE_ROOT_FUNCTION? {	// [146]
      return self.complexEntity.entityReference(eSQUARE_ROOT_FUNCTION.self)
    }

    public var sub_eLOG2_FUNCTION: eLOG2_FUNCTION? {	// [147]
      return self.complexEntity.entityReference(eLOG2_FUNCTION.self)
    }

    public var sub_eSIN_FUNCTION: eSIN_FUNCTION? {	// [148]
      return self.complexEntity.entityReference(eSIN_FUNCTION.self)
    }

    public var sub_eABS_FUNCTION: eABS_FUNCTION? {	// [149]
      return self.complexEntity.entityReference(eABS_FUNCTION.self)
    }

    public var sub_eMINUS_FUNCTION: eMINUS_FUNCTION? {	// [150]
      return self.complexEntity.entityReference(eMINUS_FUNCTION.self)
    }

    public var sub_eLOG_FUNCTION: eLOG_FUNCTION? {	// [151]
      return self.complexEntity.entityReference(eLOG_FUNCTION.self)
    }

    public var sub_eASIN_FUNCTION: eASIN_FUNCTION? {	// [152]
      return self.complexEntity.entityReference(eASIN_FUNCTION.self)
    }

    public var sub_eCOS_FUNCTION: eCOS_FUNCTION? {	// [153]
      return self.complexEntity.entityReference(eCOS_FUNCTION.self)
    }

    public var sub_eTAN_FUNCTION: eTAN_FUNCTION? {	// [154]
      return self.complexEntity.entityReference(eTAN_FUNCTION.self)
    }

    public var sub_eLOG10_FUNCTION: eLOG10_FUNCTION? {	// [155]
      return self.complexEntity.entityReference(eLOG10_FUNCTION.self)
    }

    public var sub_eEXP_FUNCTION: eEXP_FUNCTION? {	// [156]
      return self.complexEntity.entityReference(eEXP_FUNCTION.self)
    }

    public var sub_eACOS_FUNCTION: eACOS_FUNCTION? {	// [157]
      return self.complexEntity.entityReference(eACOS_FUNCTION.self)
    }

    public var sub_eUNARY_FUNCTION_CALL: eUNARY_FUNCTION_CALL? {	// [158]
      return self.complexEntity.entityReference(eUNARY_FUNCTION_CALL.self)
    }

    public var sub_eUNARY_NUMERIC_EXPRESSION: eUNARY_NUMERIC_EXPRESSION? {	// [159]
      return self.complexEntity.entityReference(eUNARY_NUMERIC_EXPRESSION.self)
    }

    public var sub_eEXPRESSION_EXTENSION_NUMERIC: eEXPRESSION_EXTENSION_NUMERIC? {	// [160]
      return self.complexEntity.entityReference(eEXPRESSION_EXTENSION_NUMERIC.self)
    }

    public var sub_eNUMERIC_EXPRESSION: eNUMERIC_EXPRESSION? {	// [161]
      return self.complexEntity.entityReference(eNUMERIC_EXPRESSION.self)
    }

    public var sub_eEXPRESSION: eEXPRESSION? {	// [162]
      return self.complexEntity.entityReference(eEXPRESSION.self)
    }

    public var sub_eDEPENDENT_VARIABLE_DEFINITION: eDEPENDENT_VARIABLE_DEFINITION? {	// [163]
      return self.complexEntity.entityReference(eDEPENDENT_VARIABLE_DEFINITION.self)
    }

    public var sub_ePARTIAL_DERIVATIVE_EXPRESSION: ePARTIAL_DERIVATIVE_EXPRESSION? {	// [164]
      return self.complexEntity.entityReference(ePARTIAL_DERIVATIVE_EXPRESSION.self)
    }

    public var sub_eUNARY_GENERIC_EXPRESSION: eUNARY_GENERIC_EXPRESSION? {	// [165]
      return self.complexEntity.entityReference(eUNARY_GENERIC_EXPRESSION.self)
    }

    public var sub_eDEFINITE_INTEGRAL_EXPRESSION: eDEFINITE_INTEGRAL_EXPRESSION? {	// [166]
      return self.complexEntity.entityReference(eDEFINITE_INTEGRAL_EXPRESSION.self)
    }

    public var sub_eQUANTIFIER_EXPRESSION: eQUANTIFIER_EXPRESSION? {	// [167]
      return self.complexEntity.entityReference(eQUANTIFIER_EXPRESSION.self)
    }

    public var sub_eFUNCTION_APPLICATION: eFUNCTION_APPLICATION? {	// [168]
      return self.complexEntity.entityReference(eFUNCTION_APPLICATION.self)
    }

    public var sub_eMULTIPLE_ARITY_GENERIC_EXPRESSION: eMULTIPLE_ARITY_GENERIC_EXPRESSION? {	// [169]
      return self.complexEntity.entityReference(eMULTIPLE_ARITY_GENERIC_EXPRESSION.self)
    }


    //MARK: ATTRIBUTES
    // VALUE_RANGE: (2 AMBIGUOUS REFs)

    // DEFAULT_ENTRY: (4 AMBIGUOUS REFs)

    // MIN: (4 AMBIGUOUS REFs)

    // EXPR: (2 AMBIGUOUS REFs)

    // VARIABLE_OF_INTEGRATION: (2 AMBIGUOUS REFs)

    // EXTENSION: (2 AMBIGUOUS REFs)

    // GEOMETRY: (4 AMBIGUOUS REFs)

    // DERIVAND: (2 AMBIGUOUS REFs)

    // THE_VALUE: (5 AMBIGUOUS REFs)

    // ORDER: (6 AMBIGUOUS REFs)

    // SOURCE_OF_DOMAIN: (3 AMBIGUOUS REFs)

    // VALUES: (6 AMBIGUOUS REFs)

    // PARAMETRIC_DOMAIN: (3 AMBIGUOUS REFs)

    // INTEGRAND: (2 AMBIGUOUS REFs)

    // UPPER_LIMIT_POS_INFINITY: (2 AMBIGUOUS REFs)

    // D_VARIABLES: (2 AMBIGUOUS REFs)

    // OPERANDS: (12 AMBIGUOUS REFs)

    // MIN_CLOSURE: (2 AMBIGUOUS REFs)

    // LIT_VALUE: (7 AMBIGUOUS REFs)

    // MAT: (2 AMBIGUOUS REFs)

    // MAX: (4 AMBIGUOUS REFs)

    // BASE: (2 AMBIGUOUS REFs)

    // SUM_INDEX: (2 AMBIGUOUS REFs)

    // INDEX: (2 AMBIGUOUS REFs)

    // OPERAND: (18 AMBIGUOUS REFs)

    // ABOVE: (2 AMBIGUOUS REFs)

    // LOWER_LIMIT_NEG_INFINITY: (2 AMBIGUOUS REFs)

    // MAX_CLOSURE: (2 AMBIGUOUS REFs)

    // NAME: (2 AMBIGUOUS REFs)

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eFUNCTION_SPACE`` )
    public var RANGE_ARGUMENT: eMATHS_SPACE?  {
      get {
        return sub_eFUNCTION_SPACE?.partialEntity._range_argument
      }
      set(newValue) {
        guard let partial = sub_eFUNCTION_SPACE?.super_eFUNCTION_SPACE.partialEntity else { return }
        partial._range_argument = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eREPACKAGING_FUNCTION`` )
    public var INPUT_REPACK: nREPACKAGE_OPTIONS?  {
      get {
        return sub_eREPACKAGING_FUNCTION?.partialEntity._input_repack
      }
      set(newValue) {
        guard let partial = sub_eREPACKAGING_FUNCTION?.super_eREPACKAGING_FUNCTION.partialEntity
          else { return }
        partial._input_repack = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eEXTENDED_TUPLE_SPACE`` )
    public var EXTENDER: eMATHS_SPACE?  {
      get {
        return sub_eEXTENDED_TUPLE_SPACE?.partialEntity._extender
      }
      set(newValue) {
        guard let partial = sub_eEXTENDED_TUPLE_SPACE?.super_eEXTENDED_TUPLE_SPACE.partialEntity
          else { return }
        partial._extender = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePARALLEL_COMPOSED_FUNCTION`` )
    public var FINAL_FUNCTION: sMATHS_FUNCTION_SELECT?  {
      get {
        return sub_ePARALLEL_COMPOSED_FUNCTION?.partialEntity._final_function
      }
      set(newValue) {
        guard let partial = sub_ePARALLEL_COMPOSED_FUNCTION?.super_ePARALLEL_COMPOSED_FUNCTION.partialEntity
          else { return }
        partial._final_function = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eB_SPLINE_FUNCTION`` )
    public var COEF: eMATHS_FUNCTION?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"COEF") {
          return cached.value as! eMATHS_FUNCTION? 
        }
        guard let origin = sub_eB_SPLINE_FUNCTION else { return nil }
        let value = eMATHS_FUNCTION(origin.partialEntity._coef__getter(SELF: origin))
        updateCache(derivedAttributeName:"COEF", value:value)
        return value
      }
    }

    /// __INVERSE__ attribute
    /// observing eENVIRONMENT .SYNTACTIC_REPRESENTATION
    /// - origin: SUB( ``eGENERIC_VARIABLE`` )
    public var INTERPRETATION: eENVIRONMENT?  {
      get {
        return sub_eGENERIC_VARIABLE?.partialEntity._interpretation
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eINTERVAL_EXPRESSION`` )
    public var INTERVAL_HIGH: eGENERIC_EXPRESSION?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"INTERVAL_HIGH") {
          return cached.value as! eGENERIC_EXPRESSION? 
        }
        guard let origin = sub_eINTERVAL_EXPRESSION else { return nil }
        let value = eGENERIC_EXPRESSION(origin.partialEntity._interval_high__getter(SELF: origin))
        updateCache(derivedAttributeName:"INTERVAL_HIGH", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eDEPENDENT_VARIABLE_DEFINITION`` )
    public var DESCRIPTION: tTEXT?  {
      get {
        return sub_eDEPENDENT_VARIABLE_DEFINITION?.partialEntity._description
      }
      set(newValue) {
        guard let partial = sub_eDEPENDENT_VARIABLE_DEFINITION?.super_eDEPENDENT_VARIABLE_DEFINITION
          .partialEntity else { return }
        partial._description = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePOLAR_COMPLEX_NUMBER_REGION`` )
    public var DIRECTION_CONSTRAINT: eFINITE_REAL_INTERVAL?  {
      get {
        return sub_ePOLAR_COMPLEX_NUMBER_REGION?.partialEntity._direction_constraint
      }
      set(newValue) {
        guard let partial = sub_ePOLAR_COMPLEX_NUMBER_REGION?.super_ePOLAR_COMPLEX_NUMBER_REGION
          .partialEntity else { return }
        partial._direction_constraint = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eUNIFORM_PRODUCT_SPACE`` )
    public var EXPONENT: tPOSITIVE_INTEGER?  {
      get {
        return sub_eUNIFORM_PRODUCT_SPACE?.partialEntity._exponent
      }
      set(newValue) {
        guard let partial = sub_eUNIFORM_PRODUCT_SPACE?.super_eUNIFORM_PRODUCT_SPACE.partialEntity
          else { return }
        partial._exponent = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eFUNCTION_SPACE`` )
    public var DOMAIN_CONSTRAINT: nSPACE_CONSTRAINT_TYPE?  {
      get {
        return sub_eFUNCTION_SPACE?.partialEntity._domain_constraint
      }
      set(newValue) {
        guard let partial = sub_eFUNCTION_SPACE?.super_eFUNCTION_SPACE.partialEntity else { return }
        partial._domain_constraint = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eLISTED_PRODUCT_SPACE`` )
    public var FACTORS: SDAI.LIST<eMATHS_SPACE>?  {
      get {
        return sub_eLISTED_PRODUCT_SPACE?.partialEntity._factors
      }
      set(newValue) {
        guard let partial = sub_eLISTED_PRODUCT_SPACE?.super_eLISTED_PRODUCT_SPACE.partialEntity
          else { return }
        partial._factors = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePOLAR_COMPLEX_NUMBER_REGION`` )
    public var CENTRE: eCOMPLEX_NUMBER_LITERAL?  {
      get {
        return sub_ePOLAR_COMPLEX_NUMBER_REGION?.partialEntity._centre
      }
      set(newValue) {
        guard let partial = sub_ePOLAR_COMPLEX_NUMBER_REGION?.super_ePOLAR_COMPLEX_NUMBER_REGION
          .partialEntity else { return }
        partial._centre = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eFINITE_FUNCTION`` )
    public var PAIRS: (SDAI.SET<SDAI.LIST<sMATHS_VALUE>/*[2:2]*/ >/*[1:nil]*/ )?  {
      get {
        return sub_eFINITE_FUNCTION?.partialEntity._pairs
      }
      set(newValue) {
        guard let partial = sub_eFINITE_FUNCTION?.super_eFINITE_FUNCTION.partialEntity else { return }
        partial._pairs = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT(DYNAMIC)__ attribute
    /// - origin: SUB( ``eEXPLICIT_TABLE_FUNCTION`` )
    public var SHAPE: (SDAI.LIST<tPOSITIVE_INTEGER>/*[1:nil]*/ )?  {
      get {
        if let resolved = _explicit_table_function._shape__provider(complex: self.complexEntity) {
          let value = resolved._shape__getter(complex: self.complexEntity)
          return value
        }
        else {
          return sub_eEXPLICIT_TABLE_FUNCTION?.partialEntity._shape
        }
      }
      set(newValue) {
        if let _ = _explicit_table_function._shape__provider(complex: self.complexEntity) { return }

        guard let partial = sub_eEXPLICIT_TABLE_FUNCTION?.super_eEXPLICIT_TABLE_FUNCTION.partialEntity
          else { return }
        partial._shape = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eFORMAT_FUNCTION`` )
    public var FORMAT_STRING: eGENERIC_EXPRESSION?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"FORMAT_STRING") {
          return cached.value as! eGENERIC_EXPRESSION? 
        }
        guard let origin = sub_eFORMAT_FUNCTION else { return nil }
        let value = eGENERIC_EXPRESSION(origin.partialEntity._format_string__getter(SELF: origin))
        updateCache(derivedAttributeName:"FORMAT_STRING", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCOMPLEX_NUMBER_LITERAL_POLAR`` )
    public var MODULUS: SDAI.REAL?  {
      get {
        return sub_eCOMPLEX_NUMBER_LITERAL_POLAR?.partialEntity._modulus
      }
      set(newValue) {
        guard let partial = sub_eCOMPLEX_NUMBER_LITERAL_POLAR?.super_eCOMPLEX_NUMBER_LITERAL_POLAR
          .partialEntity else { return }
        partial._modulus = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCOMPLEX_NUMBER_LITERAL_POLAR`` )
    public var ARGUMENT: SDAI.REAL?  {
      get {
        return sub_eCOMPLEX_NUMBER_LITERAL_POLAR?.partialEntity._argument
      }
      set(newValue) {
        guard let partial = sub_eCOMPLEX_NUMBER_LITERAL_POLAR?.super_eCOMPLEX_NUMBER_LITERAL_POLAR
          .partialEntity else { return }
        partial._argument = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eVARIATIONAL_PARAMETER`` )
    public var PARAMETER_DESCRIPTION: tTEXT?  {
      get {
        return sub_eVARIATIONAL_PARAMETER?.partialEntity._parameter_description
      }
      set(newValue) {
        guard let partial = sub_eVARIATIONAL_PARAMETER?.super_eVARIATIONAL_PARAMETER.partialEntity
          else { return }
        partial._parameter_description = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eREGULAR_TABLE_FUNCTION`` )
    public var INCREMENTS: (SDAI.LIST<SDAI.INTEGER>/*[1:nil]*/ )?  {
      get {
        return sub_eREGULAR_TABLE_FUNCTION?.partialEntity._increments
      }
      set(newValue) {
        guard let partial = sub_eREGULAR_TABLE_FUNCTION?.super_eREGULAR_TABLE_FUNCTION.partialEntity
          else { return }
        partial._increments = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eB_SPLINE_BASIS`` )
    public var REPEATED_KNOTS: (SDAI.LIST<SDAI.REAL>/*[2:nil]*/ )?  {
      get {
        return sub_eB_SPLINE_BASIS?.partialEntity._repeated_knots
      }
      set(newValue) {
        guard let partial = sub_eB_SPLINE_BASIS?.super_eB_SPLINE_BASIS.partialEntity else { return }
        partial._repeated_knots = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eFUNCTION_APPLICATION`` )
    public var FUNC: sMATHS_FUNCTION_SELECT?  {
      get {
        return sub_eFUNCTION_APPLICATION?.partialEntity._func
      }
      set(newValue) {
        guard let partial = sub_eFUNCTION_APPLICATION?.super_eFUNCTION_APPLICATION.partialEntity
          else { return }
        partial._func = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eB_SPLINE_BASIS`` )
    public var DEGREE: tNONNEGATIVE_INTEGER?  {
      get {
        return sub_eB_SPLINE_BASIS?.partialEntity._degree
      }
      set(newValue) {
        guard let partial = sub_eB_SPLINE_BASIS?.super_eB_SPLINE_BASIS.partialEntity else { return }
        partial._degree = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eAPPLICATION_DEFINED_FUNCTION`` )
    public var PARAMETERS: SDAI.LIST<sMATHS_VALUE>?  {
      get {
        return sub_eAPPLICATION_DEFINED_FUNCTION?.partialEntity._parameters
      }
      set(newValue) {
        guard let partial = sub_eAPPLICATION_DEFINED_FUNCTION?.super_eAPPLICATION_DEFINED_FUNCTION
          .partialEntity else { return }
        partial._parameters = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eINTERVAL_EXPRESSION`` )
    public var INTERVAL_LOW: eGENERIC_EXPRESSION?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"INTERVAL_LOW") {
          return cached.value as! eGENERIC_EXPRESSION? 
        }
        guard let origin = sub_eINTERVAL_EXPRESSION else { return nil }
        let value = eGENERIC_EXPRESSION(origin.partialEntity._interval_low__getter(SELF: origin))
        updateCache(derivedAttributeName:"INTERVAL_LOW", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eMATHS_VARIABLE`` )
    public var VALUES_SPACE: eMATHS_SPACE?  {
      get {
        return sub_eMATHS_VARIABLE?.partialEntity._values_space
      }
      set(newValue) {
        guard let partial = sub_eMATHS_VARIABLE?.super_eMATHS_VARIABLE.partialEntity else { return }
        partial._values_space = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCONSTANT_FUNCTION`` )
    public var SOLE_OUTPUT: sMATHS_VALUE?  {
      get {
        return sub_eCONSTANT_FUNCTION?.partialEntity._sole_output
      }
      set(newValue) {
        guard let partial = sub_eCONSTANT_FUNCTION?.super_eCONSTANT_FUNCTION.partialEntity else { return }
        partial._sole_output = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eB_SPLINE_FUNCTION`` )
    public var BASIS: (SDAI.LIST<eB_SPLINE_BASIS>/*[1:nil]*/ )?  {
      get {
        return sub_eB_SPLINE_FUNCTION?.partialEntity._basis
      }
      set(newValue) {
        guard let partial = sub_eB_SPLINE_FUNCTION?.super_eB_SPLINE_FUNCTION.partialEntity else { return }
        partial._basis = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eTRIANGULAR_MATRIX`` )
    public var LO_UP: nLOWER_UPPER?  {
      get {
        return sub_eTRIANGULAR_MATRIX?.partialEntity._lo_up
      }
      set(newValue) {
        guard let partial = sub_eTRIANGULAR_MATRIX?.super_eTRIANGULAR_MATRIX.partialEntity else { return }
        partial._lo_up = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eFUNCTION_SPACE`` )
    public var RANGE_CONSTRAINT: nSPACE_CONSTRAINT_TYPE?  {
      get {
        return sub_eFUNCTION_SPACE?.partialEntity._range_constraint
      }
      set(newValue) {
        guard let partial = sub_eFUNCTION_SPACE?.super_eFUNCTION_SPACE.partialEntity else { return }
        partial._range_constraint = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSYMMETRIC_MATRIX`` )
    public var SYMMETRY: nSYMMETRY_TYPE?  {
      get {
        return sub_eSYMMETRIC_MATRIX?.partialEntity._symmetry
      }
      set(newValue) {
        guard let partial = sub_eSYMMETRIC_MATRIX?.super_eSYMMETRIC_MATRIX.partialEntity else { return }
        partial._symmetry = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eEXPLICIT_TABLE_FUNCTION`` )
    public var INDEX_BASE: tZERO_OR_ONE?  {
      get {
        return sub_eEXPLICIT_TABLE_FUNCTION?.partialEntity._index_base
      }
      set(newValue) {
        guard let partial = sub_eEXPLICIT_TABLE_FUNCTION?.super_eEXPLICIT_TABLE_FUNCTION.partialEntity
          else { return }
        partial._index_base = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCARTESIAN_COMPLEX_NUMBER_REGION`` )
    public var IMAG_CONSTRAINT: sREAL_INTERVAL?  {
      get {
        return sub_eCARTESIAN_COMPLEX_NUMBER_REGION?.partialEntity._imag_constraint
      }
      set(newValue) {
        guard let partial = sub_eCARTESIAN_COMPLEX_NUMBER_REGION?.super_eCARTESIAN_COMPLEX_NUMBER_REGION
          .partialEntity else { return }
        partial._imag_constraint = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT(DYNAMIC)__ attribute
    /// - origin: SUB( ``eCOMPLEX_NUMBER_LITERAL`` )
    public var IMAG_PART: SDAI.REAL?  {
      get {
        if let resolved = _complex_number_literal._imag_part__provider(complex: self.complexEntity) {
          let value = resolved._imag_part__getter(complex: self.complexEntity)
          return value
        }
        else {
          return sub_eCOMPLEX_NUMBER_LITERAL?.partialEntity._imag_part
        }
      }
      set(newValue) {
        if let _ = _complex_number_literal._imag_part__provider(complex: self.complexEntity) { return }

        guard let partial = sub_eCOMPLEX_NUMBER_LITERAL?.super_eCOMPLEX_NUMBER_LITERAL.partialEntity
          else { return }
        partial._imag_part = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eNUMERIC_EXPRESSION`` )
    public var IS_INT: SDAI.BOOLEAN?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"IS_INT") {
          return cached.value as! SDAI.BOOLEAN? 
        }
        guard let origin = sub_eNUMERIC_EXPRESSION else { return nil }
        let value = SDAI.BOOLEAN(origin.partialEntity._is_int__getter(SELF: origin))
        updateCache(derivedAttributeName:"IS_INT", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eBANDED_MATRIX`` )
    public var BELOW: SDAI.INTEGER?  {
      get {
        return sub_eBANDED_MATRIX?.partialEntity._below
      }
      set(newValue) {
        guard let partial = sub_eBANDED_MATRIX?.super_eBANDED_MATRIX.partialEntity else { return }
        partial._below = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eAPPLICATION_DEFINED_FUNCTION`` )
    public var EXPLICIT_RANGE: sTUPLE_SPACE?  {
      get {
        return sub_eAPPLICATION_DEFINED_FUNCTION?.partialEntity._explicit_range
      }
      set(newValue) {
        guard let partial = sub_eAPPLICATION_DEFINED_FUNCTION?.super_eAPPLICATION_DEFINED_FUNCTION
          .partialEntity else { return }
        partial._explicit_range = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eGENERATED_FINITE_NUMERIC_SPACE`` )
    public var START_VALUE: tMATHS_NUMBER?  {
      get {
        return sub_eGENERATED_FINITE_NUMERIC_SPACE?.partialEntity._start_value
      }
      set(newValue) {
        guard let partial = sub_eGENERATED_FINITE_NUMERIC_SPACE?.super_eGENERATED_FINITE_NUMERIC_SPACE
          .partialEntity else { return }
        partial._start_value = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePOLAR_COMPLEX_NUMBER_REGION`` )
    public var DISTANCE_CONSTRAINT: sREAL_INTERVAL?  {
      get {
        return sub_ePOLAR_COMPLEX_NUMBER_REGION?.partialEntity._distance_constraint
      }
      set(newValue) {
        guard let partial = sub_ePOLAR_COMPLEX_NUMBER_REGION?.super_ePOLAR_COMPLEX_NUMBER_REGION
          .partialEntity else { return }
        partial._distance_constraint = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eSUBSTRING_EXPRESSION`` )
    public var INDEX2: eGENERIC_EXPRESSION?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"INDEX2") {
          return cached.value as! eGENERIC_EXPRESSION? 
        }
        guard let origin = sub_eSUBSTRING_EXPRESSION else { return nil }
        let value = eGENERIC_EXPRESSION(origin.partialEntity._index2__getter(SELF: origin))
        updateCache(derivedAttributeName:"INDEX2", value:value)
        return value
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eBASIC_SPARSE_MATRIX`` )
    public var VAL: eMATHS_FUNCTION?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"VAL") {
          return cached.value as! eMATHS_FUNCTION? 
        }
        guard let origin = sub_eBASIC_SPARSE_MATRIX else { return nil }
        let value = eMATHS_FUNCTION(origin.partialEntity._val__getter(SELF: origin))
        updateCache(derivedAttributeName:"VAL", value:value)
        return value
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eSUBSTRING_EXPRESSION`` )
    public var INDEX1: eGENERIC_EXPRESSION?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"INDEX1") {
          return cached.value as! eGENERIC_EXPRESSION? 
        }
        guard let origin = sub_eSUBSTRING_EXPRESSION else { return nil }
        let value = eGENERIC_EXPRESSION(origin.partialEntity._index1__getter(SELF: origin))
        updateCache(derivedAttributeName:"INDEX1", value:value)
        return value
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eFINITE_INTEGER_INTERVAL`` )
    public var SIZE: tPOSITIVE_INTEGER?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"SIZE") {
          return cached.value as! tPOSITIVE_INTEGER? 
        }
        guard let origin = sub_eFINITE_INTEGER_INTERVAL else { return nil }
        let value = tPOSITIVE_INTEGER(origin.partialEntity._size__getter(SELF: origin))
        updateCache(derivedAttributeName:"SIZE", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eFUNCTION_SPACE`` )
    public var DOMAIN_ARGUMENT: eMATHS_SPACE?  {
      get {
        return sub_eFUNCTION_SPACE?.partialEntity._domain_argument
      }
      set(newValue) {
        guard let partial = sub_eFUNCTION_SPACE?.super_eFUNCTION_SPACE.partialEntity else { return }
        partial._domain_argument = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCARTESIAN_COMPLEX_NUMBER_REGION`` )
    public var REAL_CONSTRAINT: sREAL_INTERVAL?  {
      get {
        return sub_eCARTESIAN_COMPLEX_NUMBER_REGION?.partialEntity._real_constraint
      }
      set(newValue) {
        guard let partial = sub_eCARTESIAN_COMPLEX_NUMBER_REGION?.super_eCARTESIAN_COMPLEX_NUMBER_REGION
          .partialEntity else { return }
        partial._real_constraint = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eRATIONALIZE_FUNCTION`` )
    public var FUN: eMATHS_FUNCTION?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"FUN") {
          return cached.value as! eMATHS_FUNCTION? 
        }
        guard let origin = sub_eRATIONALIZE_FUNCTION else { return nil }
        let value = eMATHS_FUNCTION(origin.partialEntity._fun__getter(SELF: origin))
        updateCache(derivedAttributeName:"FUN", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eELEMENTARY_FUNCTION`` )
    public var FUNC_ID: nELEMENTARY_FUNCTION_ENUMERATORS?  {
      get {
        return sub_eELEMENTARY_FUNCTION?.partialEntity._func_id
      }
      set(newValue) {
        guard let partial = sub_eELEMENTARY_FUNCTION?.super_eELEMENTARY_FUNCTION.partialEntity
          else { return }
        partial._func_id = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eBASIC_SPARSE_MATRIX`` )
    public var LOC: eMATHS_FUNCTION?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"LOC") {
          return cached.value as! eMATHS_FUNCTION? 
        }
        guard let origin = sub_eBASIC_SPARSE_MATRIX else { return nil }
        let value = eMATHS_FUNCTION(origin.partialEntity._loc__getter(SELF: origin))
        updateCache(derivedAttributeName:"LOC", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eELEMENTARY_SPACE`` )
    public var SPACE_ID: nELEMENTARY_SPACE_ENUMERATORS?  {
      get {
        return sub_eELEMENTARY_SPACE?.partialEntity._space_id
      }
      set(newValue) {
        guard let partial = sub_eELEMENTARY_SPACE?.super_eELEMENTARY_SPACE.partialEntity else { return }
        partial._space_id = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eFORMAT_FUNCTION`` )
    public var VALUE_TO_FORMAT: eGENERIC_EXPRESSION?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"VALUE_TO_FORMAT") {
          return cached.value as! eGENERIC_EXPRESSION? 
        }
        guard let origin = sub_eFORMAT_FUNCTION else { return nil }
        let value = eGENERIC_EXPRESSION(origin.partialEntity._value_to_format__getter(SELF: origin))
        updateCache(derivedAttributeName:"VALUE_TO_FORMAT", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eLINEARIZED_TABLE_FUNCTION`` )
    public var FIRST: SDAI.INTEGER?  {
      get {
        return sub_eLINEARIZED_TABLE_FUNCTION?.partialEntity._first
      }
      set(newValue) {
        guard let partial = sub_eLINEARIZED_TABLE_FUNCTION?.super_eLINEARIZED_TABLE_FUNCTION.partialEntity
          else { return }
        partial._first = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT(DYNAMIC)__ attribute
    /// - origin: SUB( ``eVARIATIONAL_PARAMETER`` )
    public var PARAMETER_CURRENT_VALUE: sMATHS_VALUE?  {
      get {
        if let resolved = _variational_parameter._parameter_current_value__provider(complex: self.complexEntity) {
          let value = resolved._parameter_current_value__getter(complex: self.complexEntity)
          return value
        }
        else {
          return sub_eVARIATIONAL_PARAMETER?.partialEntity._parameter_current_value
        }
      }
      set(newValue) {
        if let _ = _variational_parameter._parameter_current_value__provider(complex: self.complexEntity) { return }

        guard let partial = sub_eVARIATIONAL_PARAMETER?.super_eVARIATIONAL_PARAMETER.partialEntity
          else { return }
        partial._parameter_current_value = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSELECTOR_FUNCTION`` )
    public var SELECTOR: tINPUT_SELECTOR?  {
      get {
        return sub_eSELECTOR_FUNCTION?.partialEntity._selector
      }
      set(newValue) {
        guard let partial = sub_eSELECTOR_FUNCTION?.super_eSELECTOR_FUNCTION.partialEntity else { return }
        partial._selector = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT(DYNAMIC)__ attribute
    /// - origin: SUB( ``eFINITE_SPACE`` )
    public var MEMBERS: SDAI.SET<sMATHS_VALUE>?  {
      get {
        if let resolved = _finite_space._members__provider(complex: self.complexEntity) {
          let value = resolved._members__getter(complex: self.complexEntity)
          return value
        }
        else {
          return sub_eFINITE_SPACE?.partialEntity._members
        }
      }
      set(newValue) {
        if let _ = _finite_space._members__provider(complex: self.complexEntity) { return }

        guard let partial = sub_eFINITE_SPACE?.super_eFINITE_SPACE.partialEntity else { return }
        partial._members = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eNUMERIC_EXPRESSION`` )
    public var SQL_MAPPABLE: SDAI.BOOLEAN?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"SQL_MAPPABLE") {
          return cached.value as! SDAI.BOOLEAN? 
        }
        guard let origin = sub_eNUMERIC_EXPRESSION else { return nil }
        let value = SDAI.BOOLEAN(origin.partialEntity._sql_mappable__getter(SELF: origin))
        updateCache(derivedAttributeName:"SQL_MAPPABLE", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eGENERATED_FINITE_NUMERIC_SPACE`` )
    public var INCREMENT_NUMBER: tPOSITIVE_INTEGER?  {
      get {
        return sub_eGENERATED_FINITE_NUMERIC_SPACE?.partialEntity._increment_number
      }
      set(newValue) {
        guard let partial = sub_eGENERATED_FINITE_NUMERIC_SPACE?.super_eGENERATED_FINITE_NUMERIC_SPACE
          .partialEntity else { return }
        partial._increment_number = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eREINDEXED_ARRAY_FUNCTION`` )
    public var STARTING_INDICES: (SDAI.LIST<SDAI.INTEGER>/*[1:nil]*/ )?  {
      get {
        return sub_eREINDEXED_ARRAY_FUNCTION?.partialEntity._starting_indices
      }
      set(newValue) {
        guard let partial = sub_eREINDEXED_ARRAY_FUNCTION?.super_eREINDEXED_ARRAY_FUNCTION.partialEntity
          else { return }
        partial._starting_indices = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT REDEF(DERIVE)__ attribute
    /// - origin: SUB( ``eABSTRACTED_EXPRESSION_FUNCTION`` )
    public var VARIABLES: (SDAI.LIST_UNIQUE<eGENERIC_VARIABLE>/*[1:nil]*/ )?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"VARIABLES") {
          return cached.value as! (SDAI.LIST_UNIQUE<eGENERIC_VARIABLE>/*[1:nil]*/ )? 
        }
        guard let origin = sub_eABSTRACTED_EXPRESSION_FUNCTION else { return nil }
        let value = SDAI.LIST_UNIQUE<eGENERIC_VARIABLE>(origin.partialEntity._variables__getter(SELF: origin))
        updateCache(derivedAttributeName:"VARIABLES", value:value)
        return value
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eLINEARIZED_TABLE_FUNCTION`` )
    public var SOURCE: eMATHS_FUNCTION?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"SOURCE") {
          return cached.value as! eMATHS_FUNCTION? 
        }
        guard let origin = sub_eLINEARIZED_TABLE_FUNCTION else { return nil }
        let value = eMATHS_FUNCTION(origin.partialEntity._source__getter(SELF: origin))
        updateCache(derivedAttributeName:"SOURCE", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSTRICT_TRIANGULAR_MATRIX`` )
    public var MAIN_DIAGONAL_VALUE: sMATHS_VALUE?  {
      get {
        return sub_eSTRICT_TRIANGULAR_MATRIX?.partialEntity._main_diagonal_value
      }
      set(newValue) {
        guard let partial = sub_eSTRICT_TRIANGULAR_MATRIX?.super_eSTRICT_TRIANGULAR_MATRIX.partialEntity
          else { return }
        partial._main_diagonal_value = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eB_SPLINE_BASIS`` )
    public var NUM_BASIS: tPOSITIVE_INTEGER?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"NUM_BASIS") {
          return cached.value as! tPOSITIVE_INTEGER? 
        }
        guard let origin = sub_eB_SPLINE_BASIS else { return nil }
        let value = tPOSITIVE_INTEGER(origin.partialEntity._num_basis__getter(SELF: origin))
        updateCache(derivedAttributeName:"NUM_BASIS", value:value)
        return value
      }
    }

    /// __EXPLICIT(DYNAMIC)__ attribute
    /// - origin: SUB( ``eCOMPLEX_NUMBER_LITERAL`` )
    public var REAL_PART: SDAI.REAL?  {
      get {
        if let resolved = _complex_number_literal._real_part__provider(complex: self.complexEntity) {
          let value = resolved._real_part__getter(complex: self.complexEntity)
          return value
        }
        else {
          return sub_eCOMPLEX_NUMBER_LITERAL?.partialEntity._real_part
        }
      }
      set(newValue) {
        if let _ = _complex_number_literal._real_part__provider(complex: self.complexEntity) { return }

        guard let partial = sub_eCOMPLEX_NUMBER_LITERAL?.super_eCOMPLEX_NUMBER_LITERAL.partialEntity
          else { return }
        partial._real_part = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eAPPLICATION_DEFINED_FUNCTION`` )
    public var EXPLICIT_DOMAIN: sTUPLE_SPACE?  {
      get {
        return sub_eAPPLICATION_DEFINED_FUNCTION?.partialEntity._explicit_domain
      }
      set(newValue) {
        guard let partial = sub_eAPPLICATION_DEFINED_FUNCTION?.super_eAPPLICATION_DEFINED_FUNCTION
          .partialEntity else { return }
        partial._explicit_domain = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eREPACKAGING_FUNCTION`` )
    public var SELECTED_OUTPUT: tNONNEGATIVE_INTEGER?  {
      get {
        return sub_eREPACKAGING_FUNCTION?.partialEntity._selected_output
      }
      set(newValue) {
        guard let partial = sub_eREPACKAGING_FUNCTION?.super_eREPACKAGING_FUNCTION.partialEntity
          else { return }
        partial._selected_output = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePARALLEL_COMPOSED_FUNCTION`` )
    public var PREP_FUNCTIONS: (SDAI.LIST<eMATHS_FUNCTION>/*[1:nil]*/ )?  {
      get {
        return sub_ePARALLEL_COMPOSED_FUNCTION?.partialEntity._prep_functions
      }
      set(newValue) {
        guard let partial = sub_ePARALLEL_COMPOSED_FUNCTION?.super_ePARALLEL_COMPOSED_FUNCTION.partialEntity
          else { return }
        partial._prep_functions = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eMATHS_FUNCTION`` )
    public var DOMAIN: sTUPLE_SPACE?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"DOMAIN") {
          return cached.value as! sTUPLE_SPACE? 
        }
        guard let origin = sub_eMATHS_FUNCTION else { return nil }
        let value = sTUPLE_SPACE(origin.partialEntity._domain__getter(SELF: origin))
        updateCache(derivedAttributeName:"DOMAIN", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eSYMMETRIC_MATRIX`` )
    public var TRIANGLE: nLOWER_UPPER?  {
      get {
        return sub_eSYMMETRIC_MATRIX?.partialEntity._triangle
      }
      set(newValue) {
        guard let partial = sub_eSYMMETRIC_MATRIX?.super_eSYMMETRIC_MATRIX.partialEntity else { return }
        partial._triangle = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eGENERATED_FINITE_NUMERIC_SPACE`` )
    public var INCREMENT_VALUE: tMATHS_NUMBER?  {
      get {
        return sub_eGENERATED_FINITE_NUMERIC_SPACE?.partialEntity._increment_value
      }
      set(newValue) {
        guard let partial = sub_eGENERATED_FINITE_NUMERIC_SPACE?.super_eGENERATED_FINITE_NUMERIC_SPACE
          .partialEntity else { return }
        partial._increment_value = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eMATHS_FUNCTION`` )
    public var RANGE: sTUPLE_SPACE?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"RANGE") {
          return cached.value as! sTUPLE_SPACE? 
        }
        guard let origin = sub_eMATHS_FUNCTION else { return nil }
        let value = sTUPLE_SPACE(origin.partialEntity._range__getter(SELF: origin))
        updateCache(derivedAttributeName:"RANGE", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eREPACKAGING_FUNCTION`` )
    public var OUTPUT_REPACK: nREPACKAGE_OPTIONS?  {
      get {
        return sub_eREPACKAGING_FUNCTION?.partialEntity._output_repack
      }
      set(newValue) {
        guard let partial = sub_eREPACKAGING_FUNCTION?.super_eREPACKAGING_FUNCTION.partialEntity
          else { return }
        partial._output_repack = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eFUNCTION_APPLICATION`` )
    public var ARGUMENTS: (SDAI.LIST<sMATHS_EXPRESSION>/*[1:nil]*/ )?  {
      get {
        return sub_eFUNCTION_APPLICATION?.partialEntity._arguments
      }
      set(newValue) {
        guard let partial = sub_eFUNCTION_APPLICATION?.super_eFUNCTION_APPLICATION.partialEntity
          else { return }
        partial._arguments = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUB( ``eINTERVAL_EXPRESSION`` )
    public var INTERVAL_ITEM: eGENERIC_EXPRESSION?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"INTERVAL_ITEM") {
          return cached.value as! eGENERIC_EXPRESSION? 
        }
        guard let origin = sub_eINTERVAL_EXPRESSION else { return nil }
        let value = eGENERIC_EXPRESSION(origin.partialEntity._interval_item__getter(SELF: origin))
        updateCache(derivedAttributeName:"INTERVAL_ITEM", value:value)
        return value
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_generic_expression.self) else { return nil }
      self.partialEntity = partial

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }

    //SIMPLE ENTITY REFERENCE
    public convenience init?(_ partial:_generic_expression) {
      let complex = SDAI.ComplexEntity(entities:[partial])
      self.init(complex: complex)
    }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _generic_expression.WHERE_wr1(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "GENERIC_EXPRESSION", type: self, explicitAttributeCount: 0)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eGENERIC_EXPRESSION.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "RANGE_ARGUMENT", keyPath: \eGENERIC_EXPRESSION.RANGE_ARGUMENT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "INPUT_REPACK", keyPath: \eGENERIC_EXPRESSION.INPUT_REPACK, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "EXTENDER", keyPath: \eGENERIC_EXPRESSION.EXTENDER, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "FINAL_FUNCTION", keyPath: \eGENERIC_EXPRESSION.FINAL_FUNCTION, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "COEF", keyPath: \eGENERIC_EXPRESSION.COEF, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "INTERPRETATION", keyPath: \eGENERIC_EXPRESSION.INTERPRETATION, 
        kind: .inverse, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "INTERVAL_HIGH", keyPath: \eGENERIC_EXPRESSION.INTERVAL_HIGH, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "DESCRIPTION", keyPath: \eGENERIC_EXPRESSION.DESCRIPTION, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "DIRECTION_CONSTRAINT", keyPath: \eGENERIC_EXPRESSION.DIRECTION_CONSTRAINT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "EXPONENT", keyPath: \eGENERIC_EXPRESSION.EXPONENT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "DOMAIN_CONSTRAINT", keyPath: \eGENERIC_EXPRESSION.DOMAIN_CONSTRAINT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "FACTORS", keyPath: \eGENERIC_EXPRESSION.FACTORS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "CENTRE", keyPath: \eGENERIC_EXPRESSION.CENTRE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "PAIRS", keyPath: \eGENERIC_EXPRESSION.PAIRS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "SHAPE", keyPath: \eGENERIC_EXPRESSION.SHAPE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "FORMAT_STRING", keyPath: \eGENERIC_EXPRESSION.FORMAT_STRING, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "MODULUS", keyPath: \eGENERIC_EXPRESSION.MODULUS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "ARGUMENT", keyPath: \eGENERIC_EXPRESSION.ARGUMENT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "PARAMETER_DESCRIPTION", keyPath: \eGENERIC_EXPRESSION.PARAMETER_DESCRIPTION, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "INCREMENTS", keyPath: \eGENERIC_EXPRESSION.INCREMENTS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "REPEATED_KNOTS", keyPath: \eGENERIC_EXPRESSION.REPEATED_KNOTS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "FUNC", keyPath: \eGENERIC_EXPRESSION.FUNC, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "DEGREE", keyPath: \eGENERIC_EXPRESSION.DEGREE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "PARAMETERS", keyPath: \eGENERIC_EXPRESSION.PARAMETERS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "INTERVAL_LOW", keyPath: \eGENERIC_EXPRESSION.INTERVAL_LOW, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "VALUES_SPACE", keyPath: \eGENERIC_EXPRESSION.VALUES_SPACE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "SOLE_OUTPUT", keyPath: \eGENERIC_EXPRESSION.SOLE_OUTPUT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "BASIS", keyPath: \eGENERIC_EXPRESSION.BASIS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "LO_UP", keyPath: \eGENERIC_EXPRESSION.LO_UP, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "RANGE_CONSTRAINT", keyPath: \eGENERIC_EXPRESSION.RANGE_CONSTRAINT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "SYMMETRY", keyPath: \eGENERIC_EXPRESSION.SYMMETRY, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "INDEX_BASE", keyPath: \eGENERIC_EXPRESSION.INDEX_BASE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "IMAG_CONSTRAINT", keyPath: \eGENERIC_EXPRESSION.IMAG_CONSTRAINT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "IMAG_PART", keyPath: \eGENERIC_EXPRESSION.IMAG_PART, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "IS_INT", keyPath: \eGENERIC_EXPRESSION.IS_INT, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "BELOW", keyPath: \eGENERIC_EXPRESSION.BELOW, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "EXPLICIT_RANGE", keyPath: \eGENERIC_EXPRESSION.EXPLICIT_RANGE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "START_VALUE", keyPath: \eGENERIC_EXPRESSION.START_VALUE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "DISTANCE_CONSTRAINT", keyPath: \eGENERIC_EXPRESSION.DISTANCE_CONSTRAINT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "INDEX2", keyPath: \eGENERIC_EXPRESSION.INDEX2, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "VAL", keyPath: \eGENERIC_EXPRESSION.VAL, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "INDEX1", keyPath: \eGENERIC_EXPRESSION.INDEX1, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "SIZE", keyPath: \eGENERIC_EXPRESSION.SIZE, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "DOMAIN_ARGUMENT", keyPath: \eGENERIC_EXPRESSION.DOMAIN_ARGUMENT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "REAL_CONSTRAINT", keyPath: \eGENERIC_EXPRESSION.REAL_CONSTRAINT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "FUN", keyPath: \eGENERIC_EXPRESSION.FUN, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "FUNC_ID", keyPath: \eGENERIC_EXPRESSION.FUNC_ID, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "LOC", keyPath: \eGENERIC_EXPRESSION.LOC, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "SPACE_ID", keyPath: \eGENERIC_EXPRESSION.SPACE_ID, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "VALUE_TO_FORMAT", keyPath: \eGENERIC_EXPRESSION.VALUE_TO_FORMAT, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "FIRST", keyPath: \eGENERIC_EXPRESSION.FIRST, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "PARAMETER_CURRENT_VALUE", keyPath: \eGENERIC_EXPRESSION.PARAMETER_CURRENT_VALUE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "SELECTOR", keyPath: \eGENERIC_EXPRESSION.SELECTOR, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "MEMBERS", keyPath: \eGENERIC_EXPRESSION.MEMBERS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "SQL_MAPPABLE", keyPath: \eGENERIC_EXPRESSION.SQL_MAPPABLE, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "INCREMENT_NUMBER", keyPath: \eGENERIC_EXPRESSION.INCREMENT_NUMBER, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "STARTING_INDICES", keyPath: \eGENERIC_EXPRESSION.STARTING_INDICES, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "VARIABLES", keyPath: \eGENERIC_EXPRESSION.VARIABLES, 
        kind: .derivedRedeclaring, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "SOURCE", keyPath: \eGENERIC_EXPRESSION.SOURCE, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "MAIN_DIAGONAL_VALUE", keyPath: \eGENERIC_EXPRESSION.MAIN_DIAGONAL_VALUE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "NUM_BASIS", keyPath: \eGENERIC_EXPRESSION.NUM_BASIS, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "REAL_PART", keyPath: \eGENERIC_EXPRESSION.REAL_PART, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "EXPLICIT_DOMAIN", keyPath: \eGENERIC_EXPRESSION.EXPLICIT_DOMAIN, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "SELECTED_OUTPUT", keyPath: \eGENERIC_EXPRESSION.SELECTED_OUTPUT, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "PREP_FUNCTIONS", keyPath: \eGENERIC_EXPRESSION.PREP_FUNCTIONS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "DOMAIN", keyPath: \eGENERIC_EXPRESSION.DOMAIN, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "TRIANGLE", keyPath: \eGENERIC_EXPRESSION.TRIANGLE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "INCREMENT_VALUE", keyPath: \eGENERIC_EXPRESSION.INCREMENT_VALUE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "RANGE", keyPath: \eGENERIC_EXPRESSION.RANGE, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "OUTPUT_REPACK", keyPath: \eGENERIC_EXPRESSION.OUTPUT_REPACK, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "ARGUMENTS", keyPath: \eGENERIC_EXPRESSION.ARGUMENTS, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "INTERVAL_ITEM", keyPath: \eGENERIC_EXPRESSION.INTERVAL_ITEM, 
        kind: .derived, source: .subEntity, mayYieldEntityReference: true)

      return entityDef
    }

  }
}
