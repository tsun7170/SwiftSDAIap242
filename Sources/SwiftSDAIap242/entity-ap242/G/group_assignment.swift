/* file: group_assignment.swift 	 generated: Mon Jan  3 16:32:52 2022 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.1, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY group_assignment
    ABSTRACT SUPERTYPE OF ( 
        ONEOF ( 
            current_change_element_assignment, 
            previous_change_element_assignment, 
            change_group_assignment ) );
      assigned_group  : group;
    DERIVE
      role  : object_role := get_role( SELF );
    WHERE
      wr1: ( SIZEOF( USEDIN( SELF, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ROLE_ASSOCIATION.'
               + 'ITEM_WITH_ROLE'  ) ) <= 1 );
  END_ENTITY; -- group_assignment (line:17356 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  ENTITY(SELF)	group_assignment
    ATTR:  assigned_group,	TYPE: group -- EXPLICIT (DYNAMIC)
      -- possibly overriden by
          ENTITY: product_definition_group_assignment,	TYPE: product_definition_element_relationship
          ENTITY: assigned_requirement,	TYPE: requirement_assignment
          ENTITY: current_change_element_assignment,	TYPE: current_element_assignment_select
          ENTITY: mating_material_items,	TYPE: mating_material
          ENTITY: previous_change_element_assignment,	TYPE: previous_element_assignment_select
          ENTITY: document_identifier_assignment,	TYPE: document_identifier
          ENTITY: product_group_membership_rules,	TYPE: product_group
          ENTITY: mated_part_relationship,	TYPE: mated_part_relationship	(as DERIVED)
          ENTITY: assigned_analysis,	TYPE: analysis_assignment
          ENTITY: product_concept_feature_category_usage,	TYPE: product_concept_feature_category
          ENTITY: source_for_requirement,	TYPE: requirement_source
          ENTITY: sourced_requirement,	TYPE: requirement_source
          ENTITY: containing_message,	TYPE: message_contents_group
          ENTITY: product_group_attribute_set,	TYPE: product_group
          ENTITY: satisfied_requirement,	TYPE: satisfies_requirement
          ENTITY: message_contents_assignment,	TYPE: message_contents_group
          ENTITY: breakdown_element_group_assignment,	TYPE: product_definition_element_relationship
          ENTITY: satisfying_item,	TYPE: satisfies_requirement
          ENTITY: analysis_item,	TYPE: analysis_assignment
          ENTITY: product_group_rule_assignment,	TYPE: product_group_rules
          ENTITY: product_group_attribute_assignment,	TYPE: product_group_attributes
          ENTITY: change_group_assignment,	TYPE: change_group
          ENTITY: requirement_assigned_object,	TYPE: requirement_assignment

    ATTR:  role,	TYPE: object_role -- DERIVED
      := get_role( SELF )


  SUB- ENTITY(2)	product_definition_group_assignment
    REDCR: assigned_group,	TYPE: product_definition_element_relationship -- EXPLICIT
      -- OVERRIDING ENTITY: group_assignment

    ATTR:  items,	TYPE: SET [1 : 1] OF product_definition_or_product_definition_relationship -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(3)	assigned_requirement
    REDCR: assigned_group,	TYPE: requirement_assignment -- EXPLICIT
      -- OVERRIDING ENTITY: group_assignment

    ATTR:  items,	TYPE: SET [1 : 1] OF product_definition -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(4)	current_change_element_assignment
    REDCR: assigned_group,	TYPE: current_element_assignment_select -- EXPLICIT
      -- OVERRIDING ENTITY: group_assignment

    ATTR:  items,	TYPE: SET [1 : ?] OF change_management_object -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(5)	collection_assignment
    (no local attributes)

  SUB- ENTITY(6)	collection_membership
    (no local attributes)

  SUB- ENTITY(7)	applied_group_assignment
    ATTR:  items,	TYPE: SET [1 : ?] OF groupable_item -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(8)	mating_material_items
    REDCR: assigned_group,	TYPE: mating_material -- EXPLICIT
      -- OVERRIDING ENTITY: group_assignment

    ATTR:  items,	TYPE: SET [1 : ?] OF product_definition -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(9)	previous_change_element_assignment
    REDCR: assigned_group,	TYPE: previous_element_assignment_select -- EXPLICIT
      -- OVERRIDING ENTITY: group_assignment

    ATTR:  items,	TYPE: SET [1 : ?] OF change_management_object -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(10)	change_group_assignment
    REDCR: assigned_group,	TYPE: change_group -- EXPLICIT
      -- OVERRIDING ENTITY: group_assignment

    ATTR:  item,	TYPE: change_relationship_select -- EXPLICIT


  SUB- ENTITY(11)	document_identifier_assignment
    REDCR: assigned_group,	TYPE: document_identifier -- EXPLICIT
      -- OVERRIDING ENTITY: group_assignment

    ATTR:  items,	TYPE: SET [1 : ?] OF document_identifier_assigned_item -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(12)	product_group_membership_rules
    REDCR: assigned_group,	TYPE: product_group -- EXPLICIT
      -- OVERRIDING ENTITY: group_assignment

    ATTR:  product_group_rules,	TYPE: SET [1 : 1] OF product_group_rules -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(13)	mated_part_relationship
    ATTR:  items,	TYPE: SET [0 : ?] OF product_definition -- EXPLICIT	(AMBIGUOUS/MASKED)

    REDCR: assigned_group,	TYPE: mated_part_relationship -- DERIVED (DYNAMIC)
      := SELF
      -- OVERRIDING ENTITY: group_assignment

    REDCR: definition,	TYPE: mated_part_relationship -- DERIVED (DYNAMIC)
      := SELF
      -- OVERRIDING ENTITY: property_definition

    REDCR: of_shape,	TYPE: mated_part_relationship -- DERIVED (DYNAMIC)
      := SELF
      -- OVERRIDING ENTITY: shape_aspect


  SUB- ENTITY(14)	assigned_analysis
    ATTR:  items,	TYPE: SET [1 : 1] OF product_definition_formation -- EXPLICIT	(AMBIGUOUS/MASKED)

    REDCR: assigned_group,	TYPE: analysis_assignment -- EXPLICIT
      -- OVERRIDING ENTITY: group_assignment


  SUB- ENTITY(15)	product_group_membership
    ATTR:  member,	TYPE: product_select -- EXPLICIT


  SUB- ENTITY(16)	product_concept_feature_category_usage
    REDCR: assigned_group,	TYPE: product_concept_feature_category -- EXPLICIT
      -- OVERRIDING ENTITY: group_assignment

    ATTR:  items,	TYPE: SET [1 : ?] OF category_usage_item -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(17)	evidence
    ATTR:  items,	TYPE: SET [1 : ?] OF evidence_item -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(18)	source_for_requirement
    REDCR: assigned_group,	TYPE: requirement_source -- EXPLICIT
      -- OVERRIDING ENTITY: group_assignment

    ATTR:  items,	TYPE: SET [1 : 1] OF requirement_source_item -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(19)	sourced_requirement
    REDCR: assigned_group,	TYPE: requirement_source -- EXPLICIT
      -- OVERRIDING ENTITY: group_assignment

    ATTR:  items,	TYPE: SET [1 : 1] OF product_definition -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(20)	containing_message
    ATTR:  items,	TYPE: SET [1 : 1] OF structured_message -- EXPLICIT	(AMBIGUOUS/MASKED)

    REDCR: assigned_group,	TYPE: message_contents_group -- EXPLICIT
      -- OVERRIDING ENTITY: group_assignment

    ATTR:  message_contents_group,	TYPE: message_contents_group -- DERIVED	(AMBIGUOUS/MASKED)
      := SELF\group_assignment.assigned_group


  SUB- ENTITY(21)	product_group_attribute_set
    REDCR: assigned_group,	TYPE: product_group -- EXPLICIT
      -- OVERRIDING ENTITY: group_assignment

    ATTR:  product_group_attributes,	TYPE: SET [1 : 1] OF product_group_attributes -- EXPLICIT


  SUB- ENTITY(22)	satisfied_requirement
    REDCR: assigned_group,	TYPE: satisfies_requirement -- EXPLICIT
      -- OVERRIDING ENTITY: group_assignment

    ATTR:  items,	TYPE: SET [1 : 1] OF product_definition -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(23)	message_contents_assignment
    ATTR:  items,	TYPE: SET [1 : ?] OF representation -- EXPLICIT	(AMBIGUOUS/MASKED)

    REDCR: assigned_group,	TYPE: message_contents_group -- EXPLICIT
      -- OVERRIDING ENTITY: group_assignment

    ATTR:  message_contents_group,	TYPE: message_contents_group -- DERIVED	(AMBIGUOUS/MASKED)
      := SELF\group_assignment.assigned_group


  SUB- ENTITY(24)	breakdown_element_group_assignment
    REDCR: assigned_group,	TYPE: product_definition_element_relationship -- EXPLICIT
      -- OVERRIDING ENTITY: group_assignment

    ATTR:  items,	TYPE: SET [1 : 1] OF product_definition_or_breakdown_element_usage -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(25)	satisfying_item
    REDCR: assigned_group,	TYPE: satisfies_requirement -- EXPLICIT
      -- OVERRIDING ENTITY: group_assignment

    ATTR:  items,	TYPE: SET [1 : 1] OF requirement_satisfaction_item -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(26)	analysis_item
    ATTR:  items,	TYPE: SET [1 : 1] OF analysed_item -- EXPLICIT	(AMBIGUOUS/MASKED)

    REDCR: assigned_group,	TYPE: analysis_assignment -- EXPLICIT
      -- OVERRIDING ENTITY: group_assignment


  SUB- ENTITY(27)	product_group_rule_assignment
    REDCR: assigned_group,	TYPE: product_group_rules -- EXPLICIT
      -- OVERRIDING ENTITY: group_assignment

    ATTR:  product_group_rules,	TYPE: SET [1 : ?] OF product_group_rule -- EXPLICIT	(AMBIGUOUS/MASKED)


  SUB- ENTITY(28)	product_group_attribute_assignment
    REDCR: assigned_group,	TYPE: product_group_attributes -- EXPLICIT
      -- OVERRIDING ENTITY: group_assignment

    ATTR:  attributes,	TYPE: SET [1 : 1] OF attribute_select -- EXPLICIT


  SUB- ENTITY(29)	requirement_assigned_object
    REDCR: assigned_group,	TYPE: requirement_assignment -- EXPLICIT
      -- OVERRIDING ENTITY: group_assignment

    ATTR:  items,	TYPE: SET [1 : 1] OF requirement_assigned_item -- EXPLICIT	(AMBIGUOUS/MASKED)


*/


//MARK: - Partial Entity
  public final class _group_assignment : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eGROUP_ASSIGNMENT.self
    }

    //ATTRIBUTES
    /// EXPLICIT ATTRIBUTE 
    /// - see the corresponding attribute accesser in the entity reference definition for the attribute value dynamic lookup logic
    public internal(set) var _assigned_group: eGROUP?  // PLAIN EXPLICIT ATTRIBUTE

    internal static func _assigned_group__provider(complex: SDAI.ComplexEntity) -> eGROUP_ASSIGNMENT__ASSIGNED_GROUP__provider? {
      let resolved = complex.resolvePartialEntityInstance(from: [_mated_part_relationship.typeIdentity])
      return resolved as? eGROUP_ASSIGNMENT__ASSIGNED_GROUP__provider
    }

    /// DERIVE ATTRIBUTE
    internal func _role__getter(SELF: eGROUP_ASSIGNMENT) -> eOBJECT_ROLE?  {

      let _TEMP1 = GET_ROLE(sROLE_SELECT(/*eGROUP_ASSIGNMENT*/SELF))
      return _TEMP1
    }

    //PARTIAL COMPLEX ENTITY SUPPORT
    final public override class func fixupPartialComplexEntityAttributes(partialComplex: SDAI.ComplexEntity, baseComplex: SDAI.ComplexEntity) {
      guard let pe = partialComplex.partialEntityInstance(_group_assignment.self) else { return }

      if pe._assigned_group == nil, self._assigned_group__provider(complex: partialComplex) == nil, 
        let base__assigned_group__provider = self._assigned_group__provider(complex: baseComplex) {
        pe._assigned_group = base__assigned_group__provider._assigned_group__getter(complex: baseComplex)
      }
    }
    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      //SELECT data types (indirectly) referencing the current type as a member of the select list
      members.insert(SDAI.STRING(sROLE_SELECT.typeName)) // -> Self
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._assigned_group?.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._assigned_group?.value.isValueEqualOptionally(to: rhs._assigned_group?.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._assigned_group?.value.isValueEqualOptionally(to: rhs._assigned_group?.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: eGROUP_ASSIGNMENT?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.USEDIN(T: SELF, ROLE: \AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF
        .eROLE_ASSOCIATION.ITEM_WITH_ROLE)
      let _TEMP2 = SDAI.SIZEOF(_TEMP1)
      let _TEMP3 = _TEMP2 <= SDAI.FORCE_OPTIONAL(SDAI.INTEGER(1))
      return _TEMP3
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(ASSIGNED_GROUP: eGROUP? ) {
      self._assigned_group = ASSIGNED_GROUP
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 1
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverOmittableParameter(as: eGROUP.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( ASSIGNED_GROUP: p0 )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY group_assignment
    ABSTRACT SUPERTYPE OF ( 
        ONEOF ( 
            current_change_element_assignment, 
            previous_change_element_assignment, 
            change_group_assignment ) );
      assigned_group  : group;
    DERIVE
      role  : object_role := get_role( SELF );
    WHERE
      wr1: ( SIZEOF( USEDIN( SELF, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ROLE_ASSOCIATION.'
               + 'ITEM_WITH_ROLE'  ) ) <= 1 );
  END_ENTITY; -- group_assignment (line:17356 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eGROUP_ASSIGNMENT : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _group_assignment.self
    }
    public let partialEntity: _group_assignment

    //MARK: SUPERTYPES
    public var super_eGROUP_ASSIGNMENT: eGROUP_ASSIGNMENT { return self } 	// [1]

    //MARK: SUBTYPES
    public var sub_ePRODUCT_DEFINITION_GROUP_ASSIGNMENT: ePRODUCT_DEFINITION_GROUP_ASSIGNMENT? {	// [2]
      return self.complexEntity.entityReference(ePRODUCT_DEFINITION_GROUP_ASSIGNMENT.self)
    }

    public var sub_eASSIGNED_REQUIREMENT: eASSIGNED_REQUIREMENT? {	// [3]
      return self.complexEntity.entityReference(eASSIGNED_REQUIREMENT.self)
    }

    public var sub_eCURRENT_CHANGE_ELEMENT_ASSIGNMENT: eCURRENT_CHANGE_ELEMENT_ASSIGNMENT? {	// [4]
      return self.complexEntity.entityReference(eCURRENT_CHANGE_ELEMENT_ASSIGNMENT.self)
    }

    public var sub_eCOLLECTION_ASSIGNMENT: eCOLLECTION_ASSIGNMENT? {	// [5]
      return self.complexEntity.entityReference(eCOLLECTION_ASSIGNMENT.self)
    }

    public var sub_eCOLLECTION_MEMBERSHIP: eCOLLECTION_MEMBERSHIP? {	// [6]
      return self.complexEntity.entityReference(eCOLLECTION_MEMBERSHIP.self)
    }

    public var sub_eAPPLIED_GROUP_ASSIGNMENT: eAPPLIED_GROUP_ASSIGNMENT? {	// [7]
      return self.complexEntity.entityReference(eAPPLIED_GROUP_ASSIGNMENT.self)
    }

    public var sub_eMATING_MATERIAL_ITEMS: eMATING_MATERIAL_ITEMS? {	// [8]
      return self.complexEntity.entityReference(eMATING_MATERIAL_ITEMS.self)
    }

    public var sub_ePREVIOUS_CHANGE_ELEMENT_ASSIGNMENT: ePREVIOUS_CHANGE_ELEMENT_ASSIGNMENT? {	// [9]
      return self.complexEntity.entityReference(ePREVIOUS_CHANGE_ELEMENT_ASSIGNMENT.self)
    }

    public var sub_eCHANGE_GROUP_ASSIGNMENT: eCHANGE_GROUP_ASSIGNMENT? {	// [10]
      return self.complexEntity.entityReference(eCHANGE_GROUP_ASSIGNMENT.self)
    }

    public var sub_eDOCUMENT_IDENTIFIER_ASSIGNMENT: eDOCUMENT_IDENTIFIER_ASSIGNMENT? {	// [11]
      return self.complexEntity.entityReference(eDOCUMENT_IDENTIFIER_ASSIGNMENT.self)
    }

    public var sub_ePRODUCT_GROUP_MEMBERSHIP_RULES: ePRODUCT_GROUP_MEMBERSHIP_RULES? {	// [12]
      return self.complexEntity.entityReference(ePRODUCT_GROUP_MEMBERSHIP_RULES.self)
    }

    public var sub_eMATED_PART_RELATIONSHIP: eMATED_PART_RELATIONSHIP? {	// [13]
      return self.complexEntity.entityReference(eMATED_PART_RELATIONSHIP.self)
    }

    public var sub_eASSIGNED_ANALYSIS: eASSIGNED_ANALYSIS? {	// [14]
      return self.complexEntity.entityReference(eASSIGNED_ANALYSIS.self)
    }

    public var sub_ePRODUCT_GROUP_MEMBERSHIP: ePRODUCT_GROUP_MEMBERSHIP? {	// [15]
      return self.complexEntity.entityReference(ePRODUCT_GROUP_MEMBERSHIP.self)
    }

    public var sub_ePRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE: ePRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE? {	// [16]
      return self.complexEntity.entityReference(ePRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE.self)
    }

    public var sub_eEVIDENCE: eEVIDENCE? {	// [17]
      return self.complexEntity.entityReference(eEVIDENCE.self)
    }

    public var sub_eSOURCE_FOR_REQUIREMENT: eSOURCE_FOR_REQUIREMENT? {	// [18]
      return self.complexEntity.entityReference(eSOURCE_FOR_REQUIREMENT.self)
    }

    public var sub_eSOURCED_REQUIREMENT: eSOURCED_REQUIREMENT? {	// [19]
      return self.complexEntity.entityReference(eSOURCED_REQUIREMENT.self)
    }

    public var sub_eCONTAINING_MESSAGE: eCONTAINING_MESSAGE? {	// [20]
      return self.complexEntity.entityReference(eCONTAINING_MESSAGE.self)
    }

    public var sub_ePRODUCT_GROUP_ATTRIBUTE_SET: ePRODUCT_GROUP_ATTRIBUTE_SET? {	// [21]
      return self.complexEntity.entityReference(ePRODUCT_GROUP_ATTRIBUTE_SET.self)
    }

    public var sub_eSATISFIED_REQUIREMENT: eSATISFIED_REQUIREMENT? {	// [22]
      return self.complexEntity.entityReference(eSATISFIED_REQUIREMENT.self)
    }

    public var sub_eMESSAGE_CONTENTS_ASSIGNMENT: eMESSAGE_CONTENTS_ASSIGNMENT? {	// [23]
      return self.complexEntity.entityReference(eMESSAGE_CONTENTS_ASSIGNMENT.self)
    }

    public var sub_eBREAKDOWN_ELEMENT_GROUP_ASSIGNMENT: eBREAKDOWN_ELEMENT_GROUP_ASSIGNMENT? {	// [24]
      return self.complexEntity.entityReference(eBREAKDOWN_ELEMENT_GROUP_ASSIGNMENT.self)
    }

    public var sub_eSATISFYING_ITEM: eSATISFYING_ITEM? {	// [25]
      return self.complexEntity.entityReference(eSATISFYING_ITEM.self)
    }

    public var sub_eANALYSIS_ITEM: eANALYSIS_ITEM? {	// [26]
      return self.complexEntity.entityReference(eANALYSIS_ITEM.self)
    }

    public var sub_ePRODUCT_GROUP_RULE_ASSIGNMENT: ePRODUCT_GROUP_RULE_ASSIGNMENT? {	// [27]
      return self.complexEntity.entityReference(ePRODUCT_GROUP_RULE_ASSIGNMENT.self)
    }

    public var sub_ePRODUCT_GROUP_ATTRIBUTE_ASSIGNMENT: ePRODUCT_GROUP_ATTRIBUTE_ASSIGNMENT? {	// [28]
      return self.complexEntity.entityReference(ePRODUCT_GROUP_ATTRIBUTE_ASSIGNMENT.self)
    }

    public var sub_eREQUIREMENT_ASSIGNED_OBJECT: eREQUIREMENT_ASSIGNED_OBJECT? {	// [29]
      return self.complexEntity.entityReference(eREQUIREMENT_ASSIGNED_OBJECT.self)
    }


    //MARK: ATTRIBUTES
    // PRODUCT_GROUP_RULES: (2 AMBIGUOUS REFs)

    // ITEMS: (20 AMBIGUOUS REFs)

    // MESSAGE_CONTENTS_GROUP: (2 AMBIGUOUS REFs)

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eCHANGE_GROUP_ASSIGNMENT`` )
    public var ITEM: sCHANGE_RELATIONSHIP_SELECT?  {
      get {
        return sub_eCHANGE_GROUP_ASSIGNMENT?.partialEntity._item
      }
      set(newValue) {
        guard let partial = sub_eCHANGE_GROUP_ASSIGNMENT?.super_eCHANGE_GROUP_ASSIGNMENT.partialEntity
          else { return }
        partial._item = SDAI.UNWRAP(newValue)
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SELF( ``eGROUP_ASSIGNMENT`` )
    public var ROLE: eOBJECT_ROLE?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"ROLE") {
          return cached.value as! eOBJECT_ROLE? 
        }
        let origin = self
        let value = origin.partialEntity._role__getter(SELF: origin)
        updateCache(derivedAttributeName:"ROLE", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePRODUCT_GROUP_ATTRIBUTE_SET`` )
    public var PRODUCT_GROUP_ATTRIBUTES: (SDAI.SET<ePRODUCT_GROUP_ATTRIBUTES>/*[1:1]*/ )?  {
      get {
        return sub_ePRODUCT_GROUP_ATTRIBUTE_SET?.partialEntity._product_group_attributes
      }
      set(newValue) {
        guard let partial = sub_ePRODUCT_GROUP_ATTRIBUTE_SET?.super_ePRODUCT_GROUP_ATTRIBUTE_SET
          .partialEntity else { return }
        partial._product_group_attributes = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT REDEF(DERIVE)__ attribute
    /// - origin: SUB( ``eMATED_PART_RELATIONSHIP`` )
    public var OF_SHAPE: eMATED_PART_RELATIONSHIP?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"OF_SHAPE") {
          return cached.value as! eMATED_PART_RELATIONSHIP? 
        }
        guard let origin = sub_eMATED_PART_RELATIONSHIP else { return nil }
        let value = eMATED_PART_RELATIONSHIP(origin.partialEntity._of_shape__getter(SELF: origin))
        updateCache(derivedAttributeName:"OF_SHAPE", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePRODUCT_GROUP_ATTRIBUTE_ASSIGNMENT`` )
    public var ATTRIBUTES: (SDAI.SET<sATTRIBUTE_SELECT>/*[1:1]*/ )?  {
      get {
        return sub_ePRODUCT_GROUP_ATTRIBUTE_ASSIGNMENT?.partialEntity._attributes
      }
      set(newValue) {
        guard let partial = sub_ePRODUCT_GROUP_ATTRIBUTE_ASSIGNMENT?.super_ePRODUCT_GROUP_ATTRIBUTE_ASSIGNMENT
          .partialEntity else { return }
        partial._attributes = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePRODUCT_GROUP_MEMBERSHIP`` )
    public var MEMBER: sPRODUCT_SELECT?  {
      get {
        return sub_ePRODUCT_GROUP_MEMBERSHIP?.partialEntity._member
      }
      set(newValue) {
        guard let partial = sub_ePRODUCT_GROUP_MEMBERSHIP?.super_ePRODUCT_GROUP_MEMBERSHIP.partialEntity
          else { return }
        partial._member = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT(DYNAMIC)__ attribute
    /// - origin: SELF( ``eGROUP_ASSIGNMENT`` )
    public var ASSIGNED_GROUP: eGROUP {
      get {
        if let resolved = _group_assignment._assigned_group__provider(complex: self.complexEntity) {
          let value = resolved._assigned_group__getter(complex: self.complexEntity)
          return value
        }
        else {
          return SDAI.UNWRAP( self.partialEntity._assigned_group )
        }
      }
      set(newValue) {
        if let _ = _group_assignment._assigned_group__provider(complex: self.complexEntity) { return }

        let partial = self.partialEntity
        partial._assigned_group = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT REDEF(DERIVE)__ attribute
    /// - origin: SUB( ``eMATED_PART_RELATIONSHIP`` )
    public var DEFINITION: eMATED_PART_RELATIONSHIP?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"DEFINITION") {
          return cached.value as! eMATED_PART_RELATIONSHIP? 
        }
        guard let origin = sub_eMATED_PART_RELATIONSHIP else { return nil }
        let value = eMATED_PART_RELATIONSHIP(origin.partialEntity._definition__getter(SELF: origin))
        updateCache(derivedAttributeName:"DEFINITION", value:value)
        return value
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_group_assignment.self) else { return nil }
      self.partialEntity = partial

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }

    //SIMPLE ENTITY REFERENCE
    public convenience init?(_ partial:_group_assignment) {
      let complex = SDAI.ComplexEntity(entities:[partial])
      self.init(complex: complex)
    }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _group_assignment.WHERE_wr1(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "GROUP_ASSIGNMENT", type: self, explicitAttributeCount: 1)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eGROUP_ASSIGNMENT.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "ITEM", keyPath: \eGROUP_ASSIGNMENT.ITEM, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "ROLE", keyPath: \eGROUP_ASSIGNMENT.ROLE, 
        kind: .derived, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "PRODUCT_GROUP_ATTRIBUTES", keyPath: \eGROUP_ASSIGNMENT.PRODUCT_GROUP_ATTRIBUTES, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "OF_SHAPE", keyPath: \eGROUP_ASSIGNMENT.OF_SHAPE, 
        kind: .derivedRedeclaring, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "ATTRIBUTES", keyPath: \eGROUP_ASSIGNMENT.ATTRIBUTES, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "MEMBER", keyPath: \eGROUP_ASSIGNMENT.MEMBER, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "ASSIGNED_GROUP", keyPath: \eGROUP_ASSIGNMENT.ASSIGNED_GROUP, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "DEFINITION", keyPath: \eGROUP_ASSIGNMENT.DEFINITION, 
        kind: .derivedRedeclaring, source: .subEntity, mayYieldEntityReference: true)

      return entityDef
    }

  }
}

//MARK: - Entity Dynamic Attribute Protocols
internal protocol eGROUP_ASSIGNMENT__ASSIGNED_GROUP__provider {
  func _assigned_group__getter(complex: SDAI.ComplexEntity) -> 
    AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.eGROUP
}
