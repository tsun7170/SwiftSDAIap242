/* file: geometric_tolerance_with_modifiers.swift 	 generated: Sat Aug 14 13:46:02 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY geometric_tolerance_with_modifiers
    SUBTYPE OF ( geometric_tolerance );
      modifiers  : SET [1 : ?] OF geometric_tolerance_modifier;
    WHERE
      wr1: ( ( NOT ( geometric_tolerance_modifier.circle_a IN modifiers ) ) OR ( ( 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SHAPE_ASPECT'  IN TYPEOF( SELF\
               geometric_tolerance.toleranced_shape_aspect ) ) AND ( SELF\geometric_tolerance.
               toleranced_shape_aspect\shape_aspect.product_definitional = TRUE ) ) OR ( 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.DIMENSIONAL_SIZE'  IN TYPEOF( SELF\
               geometric_tolerance.toleranced_shape_aspect ) ) );
  END_ENTITY; -- geometric_tolerance_with_modifiers (line:17029 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	geometric_tolerance
    ATTR:  name,	TYPE: label -- EXPLICIT

    ATTR:  description,	TYPE: OPTIONAL text -- EXPLICIT

    ATTR:  magnitude,	TYPE: OPTIONAL length_measure_with_unit -- EXPLICIT

    ATTR:  toleranced_shape_aspect,	TYPE: geometric_tolerance_target -- EXPLICIT

    ATTR:  controlling_shape,	TYPE: product_definition_shape -- DERIVED
      := sts_get_product_definition_shape( toleranced_shape_aspect )

    ATTR:  id,	TYPE: identifier -- DERIVED
      := get_id_value( SELF )

    ATTR:  auxiliary_classification,	TYPE: SET [0 : ?] OF geometric_tolerance_auxiliary_classification -- INVERSE
      FOR described_item;

    ATTR:  tolerance_relationship,	TYPE: SET [0 : ?] OF geometric_tolerance_relationship -- INVERSE
      FOR relating_geometric_tolerance;


  ENTITY(SELF)	geometric_tolerance_with_modifiers
    ATTR:  modifiers,	TYPE: SET [1 : ?] OF geometric_tolerance_modifier -- EXPLICIT


  SUB- ENTITY(3)	geometric_tolerance_with_maximum_tolerance
    ATTR:  maximum_upper_tolerance,	TYPE: length_measure_with_unit -- EXPLICIT


*/


//MARK: - Partial Entity
  public final class _geometric_tolerance_with_modifiers : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eGEOMETRIC_TOLERANCE_WITH_MODIFIERS.self
    }

    //ATTRIBUTES
    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _modifiers: SDAI.SET<nGEOMETRIC_TOLERANCE_MODIFIER>/*[1:nil]*/  // PLAIN EXPLICIT ATTRIBUTE

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      //SELECT data types (indirectly) referencing the current type as a member of the select list
      members.insert(SDAI.STRING(sDRAUGHTING_MODEL_ITEM_DEFINITION.typeName)) // -> Self
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._modifiers.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._modifiers.value.isValueEqualOptionally(to: rhs._modifiers.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._modifiers.value.isValueEqualOptionally(to: rhs._modifiers.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: eGEOMETRIC_TOLERANCE_WITH_MODIFIERS?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = nGEOMETRIC_TOLERANCE_MODIFIER.CIRCLE_A
      let _TEMP2 = SDAI.aggregate(SELF.MODIFIERS, contains: _TEMP1)
      let _TEMP3 =  !_TEMP2
      let _TEMP4 = SDAI.TYPEOF(SELF.GROUP_REF(eGEOMETRIC_TOLERANCE.self)?.TOLERANCED_SHAPE_ASPECT, 
        IS: eSHAPE_ASPECT.self)
      let _TEMP5 = SELF.GROUP_REF(eGEOMETRIC_TOLERANCE.self)
      let _TEMP6 = _TEMP5?.TOLERANCED_SHAPE_ASPECT
      let _TEMP7 = _TEMP6?.GROUP_REF(eSHAPE_ASPECT.self)
      let _TEMP8 = _TEMP7?.PRODUCT_DEFINITIONAL
      let _TEMP9 = _TEMP8 .==. SDAI.FORCE_OPTIONAL(SDAI.LOGICAL(SDAI.TRUE))
      let _TEMP10 = _TEMP4 && _TEMP9
      let _TEMP11 = SDAI.TYPEOF(SELF.GROUP_REF(eGEOMETRIC_TOLERANCE.self)?.TOLERANCED_SHAPE_ASPECT, 
        IS: eDIMENSIONAL_SIZE.self)
      let _TEMP12 = _TEMP10 || _TEMP11
      let _TEMP13 = _TEMP3 || _TEMP12
      return _TEMP13
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(MODIFIERS: SDAI.SET<nGEOMETRIC_TOLERANCE_MODIFIER>/*[1:nil]*/ ) {
      self._modifiers = MODIFIERS
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 1
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverRequiredParameter(as: SDAI.SET<
        nGEOMETRIC_TOLERANCE_MODIFIER>.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( MODIFIERS: p0 )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY geometric_tolerance_with_modifiers
    SUBTYPE OF ( geometric_tolerance );
      modifiers  : SET [1 : ?] OF geometric_tolerance_modifier;
    WHERE
      wr1: ( ( NOT ( geometric_tolerance_modifier.circle_a IN modifiers ) ) OR ( ( 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SHAPE_ASPECT'  IN TYPEOF( SELF\
               geometric_tolerance.toleranced_shape_aspect ) ) AND ( SELF\geometric_tolerance.
               toleranced_shape_aspect\shape_aspect.product_definitional = TRUE ) ) OR ( 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.DIMENSIONAL_SIZE'  IN TYPEOF( SELF\
               geometric_tolerance.toleranced_shape_aspect ) ) );
  END_ENTITY; -- geometric_tolerance_with_modifiers (line:17029 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eGEOMETRIC_TOLERANCE_WITH_MODIFIERS : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _geometric_tolerance_with_modifiers.self
    }
    public let partialEntity: _geometric_tolerance_with_modifiers

    //MARK: SUPERTYPES
    public let super_eGEOMETRIC_TOLERANCE: eGEOMETRIC_TOLERANCE 	// [1]
    public var super_eGEOMETRIC_TOLERANCE_WITH_MODIFIERS: eGEOMETRIC_TOLERANCE_WITH_MODIFIERS { return self } 	// [2]

    //MARK: SUBTYPES
    public var sub_eGEOMETRIC_TOLERANCE_WITH_MAXIMUM_TOLERANCE: eGEOMETRIC_TOLERANCE_WITH_MAXIMUM_TOLERANCE? {	// [3]
      return self.complexEntity.entityReference(eGEOMETRIC_TOLERANCE_WITH_MAXIMUM_TOLERANCE.self)
    }


    //MARK: ATTRIBUTES
    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eGEOMETRIC_TOLERANCE_WITH_MAXIMUM_TOLERANCE`` )
    public var MAXIMUM_UPPER_TOLERANCE: eLENGTH_MEASURE_WITH_UNIT?  {
      get {
        return sub_eGEOMETRIC_TOLERANCE_WITH_MAXIMUM_TOLERANCE?.partialEntity._maximum_upper_tolerance
      }
      set(newValue) {
        guard let partial = sub_eGEOMETRIC_TOLERANCE_WITH_MAXIMUM_TOLERANCE?.super_eGEOMETRIC_TOLERANCE_WITH_MAXIMUM_TOLERANCE
          .partialEntity else { return }
        partial._maximum_upper_tolerance = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eGEOMETRIC_TOLERANCE`` )
    public var DESCRIPTION: tTEXT?  {
      get {
        return super_eGEOMETRIC_TOLERANCE.partialEntity._description
      }
      set(newValue) {
        let partial = super_eGEOMETRIC_TOLERANCE.partialEntity
        partial._description = newValue
      }
    }

    /// __INVERSE__ attribute
    /// observing eGEOMETRIC_TOLERANCE_RELATIONSHIP .RELATING_GEOMETRIC_TOLERANCE
    /// - origin: SUPER( ``eGEOMETRIC_TOLERANCE`` )
    public var TOLERANCE_RELATIONSHIP: SDAI.SET<eGEOMETRIC_TOLERANCE_RELATIONSHIP>/*[0:nil]*/  {
      get {
        return SDAI.UNWRAP( super_eGEOMETRIC_TOLERANCE.partialEntity._tolerance_relationship )
      }
    }

    /// __INVERSE__ attribute
    /// observing eGEOMETRIC_TOLERANCE_AUXILIARY_CLASSIFICATION .DESCRIBED_ITEM
    /// - origin: SUPER( ``eGEOMETRIC_TOLERANCE`` )
    public var AUXILIARY_CLASSIFICATION: SDAI.SET<eGEOMETRIC_TOLERANCE_AUXILIARY_CLASSIFICATION>/*[0:nil]*/  {
      get {
        return SDAI.UNWRAP( super_eGEOMETRIC_TOLERANCE.partialEntity._auxiliary_classification )
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eGEOMETRIC_TOLERANCE_WITH_MODIFIERS`` )
    public var MODIFIERS: SDAI.SET<nGEOMETRIC_TOLERANCE_MODIFIER>/*[1:nil]*/  {
      get {
        return SDAI.UNWRAP( self.partialEntity._modifiers )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._modifiers = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eGEOMETRIC_TOLERANCE`` )
    public var MAGNITUDE: eLENGTH_MEASURE_WITH_UNIT?  {
      get {
        return super_eGEOMETRIC_TOLERANCE.partialEntity._magnitude
      }
      set(newValue) {
        let partial = super_eGEOMETRIC_TOLERANCE.partialEntity
        partial._magnitude = newValue
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUPER( ``eGEOMETRIC_TOLERANCE`` )
    public var ID: tIDENTIFIER?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"ID") {
          return cached.value as! tIDENTIFIER? 
        }
        let origin = super_eGEOMETRIC_TOLERANCE
        let value = tIDENTIFIER(origin.partialEntity._id__getter(SELF: origin))
        updateCache(derivedAttributeName:"ID", value:value)
        return value
      }
    }

    /// __DERIVE__ attribute
    /// - origin: SUPER( ``eGEOMETRIC_TOLERANCE`` )
    public var CONTROLLING_SHAPE: ePRODUCT_DEFINITION_SHAPE?  {
      get {
        if let cached = cachedValue(derivedAttributeName:"CONTROLLING_SHAPE") {
          return cached.value as! ePRODUCT_DEFINITION_SHAPE? 
        }
        let origin = super_eGEOMETRIC_TOLERANCE
        let value = ePRODUCT_DEFINITION_SHAPE(origin.partialEntity._controlling_shape__getter(SELF: origin))
        updateCache(derivedAttributeName:"CONTROLLING_SHAPE", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eGEOMETRIC_TOLERANCE`` )
    public var NAME: tLABEL {
      get {
        return SDAI.UNWRAP( super_eGEOMETRIC_TOLERANCE.partialEntity._name )
      }
      set(newValue) {
        let partial = super_eGEOMETRIC_TOLERANCE.partialEntity
        partial._name = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eGEOMETRIC_TOLERANCE`` )
    public var TOLERANCED_SHAPE_ASPECT: sGEOMETRIC_TOLERANCE_TARGET {
      get {
        return SDAI.UNWRAP( super_eGEOMETRIC_TOLERANCE.partialEntity._toleranced_shape_aspect )
      }
      set(newValue) {
        let partial = super_eGEOMETRIC_TOLERANCE.partialEntity
        partial._toleranced_shape_aspect = SDAI.UNWRAP(newValue)
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_geometric_tolerance_with_modifiers.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eGEOMETRIC_TOLERANCE.self) else { return nil }
      self.super_eGEOMETRIC_TOLERANCE = super1

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _geometric_tolerance_with_modifiers.WHERE_wr1(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "GEOMETRIC_TOLERANCE_WITH_MODIFIERS", type: self, explicitAttributeCount: 1)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eGEOMETRIC_TOLERANCE.self)
      entityDef.add(supertype: eGEOMETRIC_TOLERANCE_WITH_MODIFIERS.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "MAXIMUM_UPPER_TOLERANCE", keyPath: \eGEOMETRIC_TOLERANCE_WITH_MODIFIERS.MAXIMUM_UPPER_TOLERANCE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "DESCRIPTION", keyPath: \eGEOMETRIC_TOLERANCE_WITH_MODIFIERS.DESCRIPTION, 
        kind: .explicitOptional, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "TOLERANCE_RELATIONSHIP", keyPath: \eGEOMETRIC_TOLERANCE_WITH_MODIFIERS.TOLERANCE_RELATIONSHIP, 
        kind: .inverse, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "AUXILIARY_CLASSIFICATION", keyPath: \eGEOMETRIC_TOLERANCE_WITH_MODIFIERS.AUXILIARY_CLASSIFICATION, 
        kind: .inverse, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "MODIFIERS", keyPath: \eGEOMETRIC_TOLERANCE_WITH_MODIFIERS.MODIFIERS, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "MAGNITUDE", keyPath: \eGEOMETRIC_TOLERANCE_WITH_MODIFIERS.MAGNITUDE, 
        kind: .explicitOptional, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "ID", keyPath: \eGEOMETRIC_TOLERANCE_WITH_MODIFIERS.ID, 
        kind: .derived, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "CONTROLLING_SHAPE", keyPath: \eGEOMETRIC_TOLERANCE_WITH_MODIFIERS.CONTROLLING_SHAPE, 
        kind: .derived, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "NAME", keyPath: \eGEOMETRIC_TOLERANCE_WITH_MODIFIERS.NAME, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "TOLERANCED_SHAPE_ASPECT", keyPath: \eGEOMETRIC_TOLERANCE_WITH_MODIFIERS.TOLERANCED_SHAPE_ASPECT, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: true)

      return entityDef
    }

  }
}
