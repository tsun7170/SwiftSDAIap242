/* file: generic_variable.swift 	 generated: Tue Nov 16 05:35:44 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY generic_variable
    ABSTRACT SUPERTYPE
    SUBTYPE OF ( simple_generic_expression );
    INVERSE
      interpretation : environment FOR syntactic_representation -- defined in ENTITY: environment;
  END_ENTITY; -- generic_variable (line:16819 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	generic_expression
    (no local attributes)

  SUPER- ENTITY(2)	simple_generic_expression
    (no local attributes)

  ENTITY(SELF)	generic_variable
    ATTR:  interpretation,	TYPE: environment -- INVERSE
      FOR syntactic_representation;


  SUB- ENTITY(4)	maths_real_variable
    (no local attributes)

  SUB- ENTITY(5)	real_numeric_variable
    (no local attributes)

  SUB- ENTITY(6)	maths_integer_variable
    (no local attributes)

  SUB- ENTITY(7)	int_numeric_variable
    (no local attributes)

  SUB- ENTITY(8)	numeric_variable
    (no local attributes)

  SUB- ENTITY(9)	maths_boolean_variable
    (no local attributes)

  SUB- ENTITY(10)	boolean_variable
    (no local attributes)

  SUB- ENTITY(11)	maths_string_variable
    (no local attributes)

  SUB- ENTITY(12)	string_variable
    (no local attributes)

  SUB- ENTITY(13)	variable
    (no local attributes)

  SUB- ENTITY(14)	bound_variational_parameter
    REDCR: parameter_current_value,	TYPE: maths_value -- DERIVED (DYNAMIC)
      := ?
      -- OVERRIDING ENTITY: variational_parameter


  SUB- ENTITY(15)	unbound_variational_parameter
    (no local attributes)

  SUB- ENTITY(16)	variational_parameter
    ATTR:  parameter_description,	TYPE: OPTIONAL text -- EXPLICIT

    ATTR:  parameter_current_value,	TYPE: maths_value -- EXPLICIT (DYNAMIC)
      -- possibly overriden by
          ENTITY: bound_variational_parameter,	TYPE: maths_value	(as DERIVED)


  SUB- ENTITY(17)	maths_variable
    ATTR:  values_space,	TYPE: maths_space -- EXPLICIT

    ATTR:  name,	TYPE: label -- EXPLICIT


*/


//MARK: - Partial Entity
  public final class _generic_variable : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eGENERIC_VARIABLE.self
    }

    //ATTRIBUTES
    /// INVERSE SIMPLE ATTRIBUTE
    /// observing _environment ._syntactic_representation
    internal private(set) weak var _interpretation: eENVIRONMENT?
    /// INVERSE SIMPLE ATTR SUPPORT(ADDER)
    internal func _interpretation__observeAddedReference(in complex: SDAI.ComplexEntity) {
      guard let newSource = complex.entityReference(eENVIRONMENT.self) else { return }
      self._interpretation = newSource
    }
    /// INVERSE SIMPLE ATTR SUPPORT(REMOVER)
    internal func _interpretation__observeRemovedReference(in complex: SDAI.ComplexEntity) {
      guard let _ = complex.entityReference(eENVIRONMENT.self) else { return }
      self._interpretation = nil
    }
    /// INVERSE SIMPLE ATTR SUPPORT(LEAVING REFERENCE OWNER)
    internal func _interpretation__observe(leavingReferencerOwner complex: SDAI.ComplexEntity) {
      guard let _ = complex.entityReference(eENVIRONMENT.self) else { return }
      self._interpretation = nil
    }

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init() {
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 0
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      self.init( )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY generic_variable
    ABSTRACT SUPERTYPE
    SUBTYPE OF ( simple_generic_expression );
    INVERSE
      interpretation : environment FOR syntactic_representation -- defined in ENTITY: environment;
  END_ENTITY; -- generic_variable (line:16819 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eGENERIC_VARIABLE : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _generic_variable.self
    }
    public let partialEntity: _generic_variable

    //MARK: SUPERTYPES
    public let super_eGENERIC_EXPRESSION: eGENERIC_EXPRESSION 	// [1]
    public let super_eSIMPLE_GENERIC_EXPRESSION: eSIMPLE_GENERIC_EXPRESSION 	// [2]
    public var super_eGENERIC_VARIABLE: eGENERIC_VARIABLE { return self } 	// [3]

    //MARK: SUBTYPES
    public var sub_eMATHS_REAL_VARIABLE: eMATHS_REAL_VARIABLE? {	// [4]
      return self.complexEntity.entityReference(eMATHS_REAL_VARIABLE.self)
    }

    public var sub_eREAL_NUMERIC_VARIABLE: eREAL_NUMERIC_VARIABLE? {	// [5]
      return self.complexEntity.entityReference(eREAL_NUMERIC_VARIABLE.self)
    }

    public var sub_eMATHS_INTEGER_VARIABLE: eMATHS_INTEGER_VARIABLE? {	// [6]
      return self.complexEntity.entityReference(eMATHS_INTEGER_VARIABLE.self)
    }

    public var sub_eINT_NUMERIC_VARIABLE: eINT_NUMERIC_VARIABLE? {	// [7]
      return self.complexEntity.entityReference(eINT_NUMERIC_VARIABLE.self)
    }

    public var sub_eNUMERIC_VARIABLE: eNUMERIC_VARIABLE? {	// [8]
      return self.complexEntity.entityReference(eNUMERIC_VARIABLE.self)
    }

    public var sub_eMATHS_BOOLEAN_VARIABLE: eMATHS_BOOLEAN_VARIABLE? {	// [9]
      return self.complexEntity.entityReference(eMATHS_BOOLEAN_VARIABLE.self)
    }

    public var sub_eBOOLEAN_VARIABLE: eBOOLEAN_VARIABLE? {	// [10]
      return self.complexEntity.entityReference(eBOOLEAN_VARIABLE.self)
    }

    public var sub_eMATHS_STRING_VARIABLE: eMATHS_STRING_VARIABLE? {	// [11]
      return self.complexEntity.entityReference(eMATHS_STRING_VARIABLE.self)
    }

    public var sub_eSTRING_VARIABLE: eSTRING_VARIABLE? {	// [12]
      return self.complexEntity.entityReference(eSTRING_VARIABLE.self)
    }

    public var sub_eVARIABLE: eVARIABLE? {	// [13]
      return self.complexEntity.entityReference(eVARIABLE.self)
    }

    public var sub_eBOUND_VARIATIONAL_PARAMETER: eBOUND_VARIATIONAL_PARAMETER? {	// [14]
      return self.complexEntity.entityReference(eBOUND_VARIATIONAL_PARAMETER.self)
    }

    public var sub_eUNBOUND_VARIATIONAL_PARAMETER: eUNBOUND_VARIATIONAL_PARAMETER? {	// [15]
      return self.complexEntity.entityReference(eUNBOUND_VARIATIONAL_PARAMETER.self)
    }

    public var sub_eVARIATIONAL_PARAMETER: eVARIATIONAL_PARAMETER? {	// [16]
      return self.complexEntity.entityReference(eVARIATIONAL_PARAMETER.self)
    }

    public var sub_eMATHS_VARIABLE: eMATHS_VARIABLE? {	// [17]
      return self.complexEntity.entityReference(eMATHS_VARIABLE.self)
    }


    //MARK: ATTRIBUTES
    /// __INVERSE__ attribute
    /// observing eENVIRONMENT .SYNTACTIC_REPRESENTATION
    /// - origin: SELF( ``eGENERIC_VARIABLE`` )
    public var INTERPRETATION: eENVIRONMENT?  {
      get {
        return self.partialEntity._interpretation
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eVARIATIONAL_PARAMETER`` )
    public var PARAMETER_DESCRIPTION: tTEXT?  {
      get {
        return sub_eVARIATIONAL_PARAMETER?.partialEntity._parameter_description
      }
      set(newValue) {
        guard let partial = sub_eVARIATIONAL_PARAMETER?.super_eVARIATIONAL_PARAMETER.partialEntity
          else { return }
        partial._parameter_description = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eMATHS_VARIABLE`` )
    public var VALUES_SPACE: eMATHS_SPACE?  {
      get {
        return sub_eMATHS_VARIABLE?.partialEntity._values_space
      }
      set(newValue) {
        guard let partial = sub_eMATHS_VARIABLE?.super_eMATHS_VARIABLE.partialEntity else { return }
        partial._values_space = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT(DYNAMIC)__ attribute
    /// - origin: SUB( ``eVARIATIONAL_PARAMETER`` )
    public var PARAMETER_CURRENT_VALUE: sMATHS_VALUE?  {
      get {
        if let resolved = _variational_parameter._parameter_current_value__provider(complex: self.complexEntity) {
          let value = resolved._parameter_current_value__getter(complex: self.complexEntity)
          return value
        }
        else {
          return sub_eVARIATIONAL_PARAMETER?.partialEntity._parameter_current_value
        }
      }
      set(newValue) {
        if let _ = _variational_parameter._parameter_current_value__provider(complex: self.complexEntity) { return }

        guard let partial = sub_eVARIATIONAL_PARAMETER?.super_eVARIATIONAL_PARAMETER.partialEntity
          else { return }
        partial._parameter_current_value = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``eMATHS_VARIABLE`` )
    public var NAME: tLABEL?  {
      get {
        return sub_eMATHS_VARIABLE?.partialEntity._name
      }
      set(newValue) {
        guard let partial = sub_eMATHS_VARIABLE?.super_eMATHS_VARIABLE.partialEntity else { return }
        partial._name = SDAI.UNWRAP(newValue)
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_generic_variable.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eGENERIC_EXPRESSION.self) else { return nil }
      self.super_eGENERIC_EXPRESSION = super1

      guard let super2 = complexEntity?.entityReference(eSIMPLE_GENERIC_EXPRESSION.self) else { return nil }
      self.super_eSIMPLE_GENERIC_EXPRESSION = super2

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "GENERIC_VARIABLE", type: self, explicitAttributeCount: 0)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eGENERIC_EXPRESSION.self)
      entityDef.add(supertype: eSIMPLE_GENERIC_EXPRESSION.self)
      entityDef.add(supertype: eGENERIC_VARIABLE.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "INTERPRETATION", keyPath: \eGENERIC_VARIABLE.INTERPRETATION, 
        kind: .inverse, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "PARAMETER_DESCRIPTION", keyPath: \eGENERIC_VARIABLE.PARAMETER_DESCRIPTION, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "VALUES_SPACE", keyPath: \eGENERIC_VARIABLE.VALUES_SPACE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "PARAMETER_CURRENT_VALUE", keyPath: \eGENERIC_VARIABLE.PARAMETER_CURRENT_VALUE, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "NAME", keyPath: \eGENERIC_VARIABLE.NAME, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)

      return entityDef
    }

  }
}
