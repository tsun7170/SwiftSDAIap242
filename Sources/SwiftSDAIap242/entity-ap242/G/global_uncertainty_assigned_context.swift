/* file: global_uncertainty_assigned_context.swift 	 generated: Mon Jan  3 16:32:52 2022 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.1, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY global_uncertainty_assigned_context
    SUBTYPE OF ( representation_context );
      uncertainty  : SET [1 : ?] OF uncertainty_measure_with_unit;
  END_ENTITY; -- global_uncertainty_assigned_context (line:17303 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	representation_context
    ATTR:  context_identifier,	TYPE: identifier -- EXPLICIT

    ATTR:  context_type,	TYPE: text -- EXPLICIT

    ATTR:  representations_in_context,	TYPE: SET [1 : ?] OF representation -- INVERSE
      FOR context_of_items;


  ENTITY(SELF)	global_uncertainty_assigned_context
    ATTR:  uncertainty,	TYPE: SET [1 : ?] OF uncertainty_measure_with_unit -- EXPLICIT


*/


//MARK: - Partial Entity
  public final class _global_uncertainty_assigned_context : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eGLOBAL_UNCERTAINTY_ASSIGNED_CONTEXT.self
    }

    //ATTRIBUTES
    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _uncertainty: SDAI.SET<eUNCERTAINTY_MEASURE_WITH_UNIT>/*[1:nil]*/  // PLAIN EXPLICIT ATTRIBUTE

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      //SELECT data types (indirectly) referencing the current type as a member of the select list
      members.insert(SDAI.STRING(sMULTI_LANGUAGE_ATTRIBUTE_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sINSPECTED_ECDQ_ELEMENT_SELECT.typeName)) // -> Self
      members.insert(SDAI.STRING(sLOCATION_OF_EXTREME_VALUE_SELECT.typeName)) // -> sINSPECTED_ECDQ_ELEMENT_SELECT
      members.insert(SDAI.STRING(sDESCRIPTION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sINSPECTED_SHAPE_ELEMENT_SELECT.typeName)) // -> Self
      members.insert(SDAI.STRING(sINSPECTED_ELEMENT_SELECT.typeName)) // -> Self
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._uncertainty.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._uncertainty.value.isValueEqualOptionally(to: rhs._uncertainty.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._uncertainty.value.isValueEqualOptionally(to: rhs._uncertainty.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(UNCERTAINTY: SDAI.SET<eUNCERTAINTY_MEASURE_WITH_UNIT>/*[1:nil]*/ ) {
      self._uncertainty = UNCERTAINTY
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 1
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverRequiredParameter(as: SDAI.SET<
        eUNCERTAINTY_MEASURE_WITH_UNIT>.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( UNCERTAINTY: p0 )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY global_uncertainty_assigned_context
    SUBTYPE OF ( representation_context );
      uncertainty  : SET [1 : ?] OF uncertainty_measure_with_unit;
  END_ENTITY; -- global_uncertainty_assigned_context (line:17303 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eGLOBAL_UNCERTAINTY_ASSIGNED_CONTEXT : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _global_uncertainty_assigned_context.self
    }
    public let partialEntity: _global_uncertainty_assigned_context

    //MARK: SUPERTYPES
    public let super_eREPRESENTATION_CONTEXT: eREPRESENTATION_CONTEXT 	// [1]
    public var super_eGLOBAL_UNCERTAINTY_ASSIGNED_CONTEXT: eGLOBAL_UNCERTAINTY_ASSIGNED_CONTEXT { return self } 	// [2]

    //MARK: SUBTYPES

    //MARK: ATTRIBUTES
    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eREPRESENTATION_CONTEXT`` )
    public var CONTEXT_IDENTIFIER: tIDENTIFIER {
      get {
        return SDAI.UNWRAP( super_eREPRESENTATION_CONTEXT.partialEntity._context_identifier )
      }
      set(newValue) {
        let partial = super_eREPRESENTATION_CONTEXT.partialEntity
        partial._context_identifier = SDAI.UNWRAP(newValue)
      }
    }

    /// __INVERSE__ attribute
    /// observing eREPRESENTATION .CONTEXT_OF_ITEMS
    /// - origin: SUPER( ``eREPRESENTATION_CONTEXT`` )
    public var REPRESENTATIONS_IN_CONTEXT: SDAI.SET<eREPRESENTATION>/*[1:nil]*/  {
      get {
        return SDAI.UNWRAP( super_eREPRESENTATION_CONTEXT.partialEntity._representations_in_context )
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUPER( ``eREPRESENTATION_CONTEXT`` )
    public var CONTEXT_TYPE: tTEXT {
      get {
        return SDAI.UNWRAP( super_eREPRESENTATION_CONTEXT.partialEntity._context_type )
      }
      set(newValue) {
        let partial = super_eREPRESENTATION_CONTEXT.partialEntity
        partial._context_type = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eGLOBAL_UNCERTAINTY_ASSIGNED_CONTEXT`` )
    public var UNCERTAINTY: SDAI.SET<eUNCERTAINTY_MEASURE_WITH_UNIT>/*[1:nil]*/  {
      get {
        return SDAI.UNWRAP( self.partialEntity._uncertainty )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._uncertainty = SDAI.UNWRAP(newValue)
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_global_uncertainty_assigned_context.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eREPRESENTATION_CONTEXT.self) else { return nil }
      self.super_eREPRESENTATION_CONTEXT = super1

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "GLOBAL_UNCERTAINTY_ASSIGNED_CONTEXT", type: self, explicitAttributeCount: 1)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eREPRESENTATION_CONTEXT.self)
      entityDef.add(supertype: eGLOBAL_UNCERTAINTY_ASSIGNED_CONTEXT.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "CONTEXT_IDENTIFIER", keyPath: \eGLOBAL_UNCERTAINTY_ASSIGNED_CONTEXT.CONTEXT_IDENTIFIER, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "REPRESENTATIONS_IN_CONTEXT", keyPath: \eGLOBAL_UNCERTAINTY_ASSIGNED_CONTEXT.REPRESENTATIONS_IN_CONTEXT, 
        kind: .inverse, source: .superEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "CONTEXT_TYPE", keyPath: \eGLOBAL_UNCERTAINTY_ASSIGNED_CONTEXT.CONTEXT_TYPE, 
        kind: .explicit, source: .superEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "UNCERTAINTY", keyPath: \eGLOBAL_UNCERTAINTY_ASSIGNED_CONTEXT.UNCERTAINTY, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)

      return entityDef
    }

  }
}
