/* file: generic_product_definition_reference.swift 	 generated: Tue Nov 16 05:35:44 2021 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.0, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY generic_product_definition_reference
    ABSTRACT SUPERTYPE OF ( 
        ONEOF ( 
            product_definition_reference, 
            product_definition_reference_with_local_representation ) );
      source  : external_source;
  END_ENTITY; -- generic_product_definition_reference (line:16803 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  ENTITY(SELF)	generic_product_definition_reference
    ATTR:  source,	TYPE: external_source -- EXPLICIT


  SUB- ENTITY(2)	product_definition_occurrence_reference
    ATTR:  product_occurrence_id,	TYPE: identifier -- EXPLICIT


  SUB- ENTITY(3)	product_definition_reference
    ATTR:  product_id,	TYPE: identifier -- EXPLICIT

    ATTR:  product_definition_formation_id,	TYPE: identifier -- EXPLICIT

    ATTR:  product_definition_id,	TYPE: identifier -- EXPLICIT

    ATTR:  id_owning_organization_name,	TYPE: OPTIONAL label -- EXPLICIT


  SUB- ENTITY(4)	product_definition_reference_with_local_representation
    (no local attributes)

  SUB- ENTITY(5)	product_definition_occurrence_reference_with_local_representation
    (no local attributes)

*/


//MARK: - Partial Entity
  public final class _generic_product_definition_reference : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eGENERIC_PRODUCT_DEFINITION_REFERENCE.self
    }

    //ATTRIBUTES
    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _source: eEXTERNAL_SOURCE // PLAIN EXPLICIT ATTRIBUTE

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      //SELECT data types (indirectly) referencing the current type as a member of the select list
      members.insert(SDAI.STRING(sEXTERNAL_IDENTIFICATION_ITEM.typeName)) // -> Self
      members.insert(SDAI.STRING(sPRODUCT_DEFINITION_OR_REFERENCE_OR_OCCURRENCE.typeName)) // -> Self
      members.insert(SDAI.STRING(sA3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT.typeName)) // -> sPRODUCT_DEFINITION_OR_REFERENCE_OR_OCCURRENCE
      members.insert(SDAI.STRING(sEQUIVALENCE_DETECTED_DIFFERENCE_SELECT.typeName)) // -> sA3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT
      members.insert(SDAI.STRING(sEQUIVALENCE_PRODUCT_DATA_SELECT.typeName)) // -> sPRODUCT_DEFINITION_OR_REFERENCE_OR_OCCURRENCE
      members.insert(SDAI.STRING(sINSPECTED_EQUIVALENCE_ELEMENT_SELECT.typeName)) // -> sPRODUCT_DEFINITION_OR_REFERENCE_OR_OCCURRENCE
      members.insert(SDAI.STRING(sPRODUCT_DEFINITION_OR_REFERENCE.typeName)) // -> Self
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._source.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._source.value.isValueEqualOptionally(to: rhs._source.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._source.value.isValueEqualOptionally(to: rhs._source.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(SOURCE: eEXTERNAL_SOURCE) {
      self._source = SOURCE
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 1
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverRequiredParameter(as: eEXTERNAL_SOURCE.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( SOURCE: p0 )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY generic_product_definition_reference
    ABSTRACT SUPERTYPE OF ( 
        ONEOF ( 
            product_definition_reference, 
            product_definition_reference_with_local_representation ) );
      source  : external_source;
  END_ENTITY; -- generic_product_definition_reference (line:16803 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eGENERIC_PRODUCT_DEFINITION_REFERENCE : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _generic_product_definition_reference.self
    }
    public let partialEntity: _generic_product_definition_reference

    //MARK: SUPERTYPES
    public var super_eGENERIC_PRODUCT_DEFINITION_REFERENCE: eGENERIC_PRODUCT_DEFINITION_REFERENCE { return self } 	// [1]

    //MARK: SUBTYPES
    public var sub_ePRODUCT_DEFINITION_OCCURRENCE_REFERENCE: ePRODUCT_DEFINITION_OCCURRENCE_REFERENCE? {	// [2]
      return self.complexEntity.entityReference(ePRODUCT_DEFINITION_OCCURRENCE_REFERENCE.self)
    }

    public var sub_ePRODUCT_DEFINITION_REFERENCE: ePRODUCT_DEFINITION_REFERENCE? {	// [3]
      return self.complexEntity.entityReference(ePRODUCT_DEFINITION_REFERENCE.self)
    }

    public var sub_ePRODUCT_DEFINITION_REFERENCE_WITH_LOCAL_REPRESENTATION: ePRODUCT_DEFINITION_REFERENCE_WITH_LOCAL_REPRESENTATION? {	// [4]
      return self.complexEntity.entityReference(ePRODUCT_DEFINITION_REFERENCE_WITH_LOCAL_REPRESENTATION.self)
    }

    public var sub_ePRODUCT_DEFINITION_OCCURRENCE_REFERENCE_WITH_LOCAL_REPRESENTATION: ePRODUCT_DEFINITION_OCCURRENCE_REFERENCE_WITH_LOCAL_REPRESENTATION? {	// [5]
      return self.complexEntity.entityReference(ePRODUCT_DEFINITION_OCCURRENCE_REFERENCE_WITH_LOCAL_REPRESENTATION.self)
    }


    //MARK: ATTRIBUTES
    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePRODUCT_DEFINITION_REFERENCE`` )
    public var PRODUCT_DEFINITION_ID: tIDENTIFIER?  {
      get {
        return sub_ePRODUCT_DEFINITION_REFERENCE?.partialEntity._product_definition_id
      }
      set(newValue) {
        guard let partial = sub_ePRODUCT_DEFINITION_REFERENCE?.super_ePRODUCT_DEFINITION_REFERENCE
          .partialEntity else { return }
        partial._product_definition_id = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePRODUCT_DEFINITION_OCCURRENCE_REFERENCE`` )
    public var PRODUCT_OCCURRENCE_ID: tIDENTIFIER?  {
      get {
        return sub_ePRODUCT_DEFINITION_OCCURRENCE_REFERENCE?.partialEntity._product_occurrence_id
      }
      set(newValue) {
        guard let partial = sub_ePRODUCT_DEFINITION_OCCURRENCE_REFERENCE?.super_ePRODUCT_DEFINITION_OCCURRENCE_REFERENCE
          .partialEntity else { return }
        partial._product_occurrence_id = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePRODUCT_DEFINITION_REFERENCE`` )
    public var PRODUCT_DEFINITION_FORMATION_ID: tIDENTIFIER?  {
      get {
        return sub_ePRODUCT_DEFINITION_REFERENCE?.partialEntity._product_definition_formation_id
      }
      set(newValue) {
        guard let partial = sub_ePRODUCT_DEFINITION_REFERENCE?.super_ePRODUCT_DEFINITION_REFERENCE
          .partialEntity else { return }
        partial._product_definition_formation_id = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePRODUCT_DEFINITION_REFERENCE`` )
    public var ID_OWNING_ORGANIZATION_NAME: tLABEL?  {
      get {
        return sub_ePRODUCT_DEFINITION_REFERENCE?.partialEntity._id_owning_organization_name
      }
      set(newValue) {
        guard let partial = sub_ePRODUCT_DEFINITION_REFERENCE?.super_ePRODUCT_DEFINITION_REFERENCE
          .partialEntity else { return }
        partial._id_owning_organization_name = newValue
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SUB( ``ePRODUCT_DEFINITION_REFERENCE`` )
    public var PRODUCT_ID: tIDENTIFIER?  {
      get {
        return sub_ePRODUCT_DEFINITION_REFERENCE?.partialEntity._product_id
      }
      set(newValue) {
        guard let partial = sub_ePRODUCT_DEFINITION_REFERENCE?.super_ePRODUCT_DEFINITION_REFERENCE
          .partialEntity else { return }
        partial._product_id = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eGENERIC_PRODUCT_DEFINITION_REFERENCE`` )
    public var SOURCE: eEXTERNAL_SOURCE {
      get {
        return SDAI.UNWRAP( self.partialEntity._source )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._source = SDAI.UNWRAP(newValue)
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_generic_product_definition_reference.self) else { return nil }
      self.partialEntity = partial

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }

    //SIMPLE ENTITY REFERENCE
    public convenience init?(_ partial:_generic_product_definition_reference) {
      let complex = SDAI.ComplexEntity(entities:[partial])
      self.init(complex: complex)
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "GENERIC_PRODUCT_DEFINITION_REFERENCE", type: self, explicitAttributeCount: 1)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eGENERIC_PRODUCT_DEFINITION_REFERENCE.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "PRODUCT_DEFINITION_ID", keyPath: \eGENERIC_PRODUCT_DEFINITION_REFERENCE.PRODUCT_DEFINITION_ID, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "PRODUCT_OCCURRENCE_ID", keyPath: \eGENERIC_PRODUCT_DEFINITION_REFERENCE.PRODUCT_OCCURRENCE_ID, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "PRODUCT_DEFINITION_FORMATION_ID", keyPath: \eGENERIC_PRODUCT_DEFINITION_REFERENCE.PRODUCT_DEFINITION_FORMATION_ID, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "ID_OWNING_ORGANIZATION_NAME", keyPath: \eGENERIC_PRODUCT_DEFINITION_REFERENCE.ID_OWNING_ORGANIZATION_NAME, 
        kind: .explicitOptional, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "PRODUCT_ID", keyPath: \eGENERIC_PRODUCT_DEFINITION_REFERENCE.PRODUCT_ID, 
        kind: .explicit, source: .subEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "SOURCE", keyPath: \eGENERIC_PRODUCT_DEFINITION_REFERENCE.SOURCE, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)

      return entityDef
    }

  }
}
