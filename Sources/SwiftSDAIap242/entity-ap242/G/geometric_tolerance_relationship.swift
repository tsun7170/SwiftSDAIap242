/* file: geometric_tolerance_relationship.swift 	 generated: Mon Jan  3 16:32:52 2022 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.1, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY geometric_tolerance_relationship;
      name                          : label;
      description                   : text;
      relating_geometric_tolerance  : geometric_tolerance; (* observed by
          geometric_tolerance.tolerance_relationship
          *)
      related_geometric_tolerance   : geometric_tolerance;
    WHERE
      wr1: ( ( NOT ( name = 'composite tolerance' ) ) OR ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
               + 'POSITION_TOLERANCE'  IN TYPEOF( relating_geometric_tolerance ) ) AND ( 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.POSITION_TOLERANCE'  IN TYPEOF( 
               related_geometric_tolerance ) ) ) OR ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
               + 'LINE_PROFILE_TOLERANCE'  IN TYPEOF( relating_geometric_tolerance ) ) AND ( 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.LINE_PROFILE_TOLERANCE'  IN TYPEOF( 
               related_geometric_tolerance ) ) ) OR ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
               + 'SURFACE_PROFILE_TOLERANCE'  IN TYPEOF( relating_geometric_tolerance ) ) AND ( 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SURFACE_PROFILE_TOLERANCE'  IN TYPEOF( 
               related_geometric_tolerance ) ) ) );
      wr2: ( ( NOT ( name = 'composite tolerance' ) ) OR ( relating_geometric_tolerance\geometric_tolerance.
               toleranced_shape_aspect :=: related_geometric_tolerance\geometric_tolerance.
               toleranced_shape_aspect ) );
      wr3: acyclic_geometric_tolerance_relationship( SELF, [related_geometric_tolerance], 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.GEOMETRIC_TOLERANCE'  );
  END_ENTITY; -- geometric_tolerance_relationship (line:16957 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  ENTITY(SELF)	geometric_tolerance_relationship
    ATTR:  name,	TYPE: label -- EXPLICIT

    ATTR:  description,	TYPE: text -- EXPLICIT

    ATTR:  relating_geometric_tolerance,	TYPE: geometric_tolerance -- EXPLICIT
      -- observed by
        ENTITY(1): geometric_tolerance,	ATTR: tolerance_relationship,	TYPE: SET [0 : ?] OF
          geometric_tolerance_relationship

    ATTR:  related_geometric_tolerance,	TYPE: geometric_tolerance -- EXPLICIT


*/


//MARK: - Partial Entity
  public final class _geometric_tolerance_relationship : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eGEOMETRIC_TOLERANCE_RELATIONSHIP.self
    }

    //ATTRIBUTES
    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _name: tLABEL // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _description: tTEXT // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE (OBSERVED)
    public internal(set) var _relating_geometric_tolerance: eGEOMETRIC_TOLERANCE{ // OBSERVED EXPLICIT ATTRIBUTE
      get {
        return __relating_geometric_tolerance.copy()
      } // getter
      set {
        let newValue = newValue
        let observer = SDAI.EntityReferenceObserver(referencer: self, observerCode: _relating_geometric_tolerance__observer.self)
        newValue.configure(with: observer)
        observer.observe(removing: SDAI.UNWRAP(seq:__relating_geometric_tolerance.entityReferences),
          adding: SDAI.UNWRAP(seq: newValue.entityReferences) )
      } // setter
    }

    /// backing storage for observed attribute
    private var __relating_geometric_tolerance: eGEOMETRIC_TOLERANCE

    /// attribute observer code
    internal class _relating_geometric_tolerance__observer: SDAI.EntityReferenceObserver.ObserverCode {
      final override class func observe<RemovingEntities: Sequence, AddingEntities: Sequence>(
        referencer: SDAI.PartialEntity, removing: RemovingEntities, adding: AddingEntities )
        where RemovingEntities.Element: SDAI.EntityReference, AddingEntities.Element: SDAI.EntityReference
      {
        for referencedComplex in removing.map({ $0.complexEntity }) {
          for referencerOwner in referencer.owners {
            //OBSERVING ENTITY: eGEOMETRIC_TOLERANCE
            referencedComplex.partialEntityInstance(_geometric_tolerance.self)?
              ._tolerance_relationship__observeRemovedReference(in: referencerOwner)
          }
        }

        for referencedComplex in adding.map({ $0.complexEntity }) {
          for referencerOwner in referencer.owners {
            //OBSERVING ENTITY: eGEOMETRIC_TOLERANCE
            referencedComplex.partialEntityInstance(_geometric_tolerance.self)?
              ._tolerance_relationship__observeAddedReference(in: referencerOwner)
          }
        }
      }

      final override class func observe(newReferencerOwner referencerOwner: SDAI.ComplexEntity) {
        guard let attrValue = referencerOwner.partialEntityInstance(_geometric_tolerance_relationship.self)?._relating_geometric_tolerance else { return }
        for referencedComplex in attrValue.entityReferences.map({ $0.complexEntity }) {
        //OBSERVING ENTITY: eGEOMETRIC_TOLERANCE
        referencedComplex.partialEntityInstance(_geometric_tolerance.self)?
          ._tolerance_relationship__observeAddedReference(in: referencerOwner)
        }
      }

      final override class func observe(leavingReferencerOwner referencerOwner: SDAI.ComplexEntity) {
        guard let attrValue = referencerOwner.partialEntityInstance(_geometric_tolerance_relationship.self)?._relating_geometric_tolerance else { return }
        for referencedComplex in attrValue.entityReferences.map({ $0.complexEntity }) {
        //OBSERVING ENTITY: eGEOMETRIC_TOLERANCE
        referencedComplex.partialEntityInstance(_geometric_tolerance.self)?
          ._tolerance_relationship__observe(leavingReferencerOwner: referencerOwner)
        }
      }

    }

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _related_geometric_tolerance: eGEOMETRIC_TOLERANCE // PLAIN EXPLICIT ATTRIBUTE

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._name.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._description.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._relating_geometric_tolerance.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._related_geometric_tolerance.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._name.value.isValueEqualOptionally(to: rhs._name.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._description.value.isValueEqualOptionally(to: rhs._description.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._relating_geometric_tolerance.value.isValueEqualOptionally(to: rhs._relating_geometric_tolerance.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._related_geometric_tolerance.value.isValueEqualOptionally(to: rhs._related_geometric_tolerance.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._name.value.isValueEqualOptionally(to: rhs._name.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._description.value.isValueEqualOptionally(to: rhs._description.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._relating_geometric_tolerance.value.isValueEqualOptionally(to: rhs._relating_geometric_tolerance.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._related_geometric_tolerance.value.isValueEqualOptionally(to: rhs._related_geometric_tolerance.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: eGEOMETRIC_TOLERANCE_RELATIONSHIP?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.FORCE_OPTIONAL(SELF.NAME) .==. SDAI.FORCE_OPTIONAL(SDAI.STRING("composite tolerance"))
      let _TEMP2 =  !_TEMP1
      let _TEMP3 = SDAI.TYPEOF(SELF.RELATING_GEOMETRIC_TOLERANCE, IS: ePOSITION_TOLERANCE.self)
      let _TEMP4 = SDAI.TYPEOF(SELF.RELATED_GEOMETRIC_TOLERANCE, IS: ePOSITION_TOLERANCE.self)
      let _TEMP5 = _TEMP3 && _TEMP4
      let _TEMP6 = _TEMP2 || _TEMP5
      let _TEMP7 = SDAI.TYPEOF(SELF.RELATING_GEOMETRIC_TOLERANCE, IS: eLINE_PROFILE_TOLERANCE.self)
      let _TEMP8 = SDAI.TYPEOF(SELF.RELATED_GEOMETRIC_TOLERANCE, IS: eLINE_PROFILE_TOLERANCE.self)
      let _TEMP9 = _TEMP7 && _TEMP8
      let _TEMP10 = _TEMP6 || _TEMP9
      let _TEMP11 = SDAI.TYPEOF(SELF.RELATING_GEOMETRIC_TOLERANCE, IS: eSURFACE_PROFILE_TOLERANCE.self)
      let _TEMP12 = SDAI.TYPEOF(SELF.RELATED_GEOMETRIC_TOLERANCE, IS: eSURFACE_PROFILE_TOLERANCE.self)
      let _TEMP13 = _TEMP11 && _TEMP12
      let _TEMP14 = _TEMP10 || _TEMP13
      return _TEMP14
    }
    public static func WHERE_wr2(SELF: eGEOMETRIC_TOLERANCE_RELATIONSHIP?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.FORCE_OPTIONAL(SELF.NAME) .==. SDAI.FORCE_OPTIONAL(SDAI.STRING("composite tolerance"))
      let _TEMP2 =  !_TEMP1
      let _TEMP3 = SELF.RELATING_GEOMETRIC_TOLERANCE.GROUP_REF(eGEOMETRIC_TOLERANCE.self)
      let _TEMP4 = _TEMP3?.TOLERANCED_SHAPE_ASPECT
      let _TEMP5 = SELF.RELATED_GEOMETRIC_TOLERANCE.GROUP_REF(eGEOMETRIC_TOLERANCE.self)
      let _TEMP6 = _TEMP5?.TOLERANCED_SHAPE_ASPECT
      let _TEMP7 = _TEMP4 .===. _TEMP6
      let _TEMP8 = _TEMP2 || _TEMP7
      return _TEMP8
    }
    public static func WHERE_wr3(SELF: eGEOMETRIC_TOLERANCE_RELATIONSHIP?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.SET<eGEOMETRIC_TOLERANCE>(bound1: SDAI.UNWRAP(SDAI.INTEGER(1)), bound2: (nil as SDAI.INTEGER?), 
        ([SDAI.AIE(SELF.RELATED_GEOMETRIC_TOLERANCE)] as [SDAI.AggregationInitializerElement<
        eGEOMETRIC_TOLERANCE>]))
      let _TEMP2 = ACYCLIC_GEOMETRIC_TOLERANCE_RELATIONSHIP(
        RELATION: SELF, RELATIVES: _TEMP1, 
        SPECIFIC_RELATION: SDAI.STRING("AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.GEOMETRIC_TOLERANCE"))
      return SDAI.LOGICAL(_TEMP2)
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(NAME: tLABEL, DESCRIPTION: tTEXT, RELATING_GEOMETRIC_TOLERANCE: eGEOMETRIC_TOLERANCE, 
                RELATED_GEOMETRIC_TOLERANCE: eGEOMETRIC_TOLERANCE) {
      self._name = NAME
      self._description = DESCRIPTION
      self.__relating_geometric_tolerance = RELATING_GEOMETRIC_TOLERANCE
      self._related_geometric_tolerance = RELATED_GEOMETRIC_TOLERANCE
      super.init(asAbstructSuperclass:())

      self._relating_geometric_tolerance.configure(with: SDAI.EntityReferenceObserver(referencer: self, observerCode: _relating_geometric_tolerance__observer.self))
    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 4
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverRequiredParameter(as: tLABEL.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p1) = exchangeStructure.recoverRequiredParameter(as: tTEXT.self, from: parameters[1])
      else { exchangeStructure.add(errorContext: "while recovering parameter #1 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p2) = exchangeStructure.recoverRequiredParameter(as: eGEOMETRIC_TOLERANCE.self, from: parameters[2])
      else { exchangeStructure.add(errorContext: "while recovering parameter #2 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p3) = exchangeStructure.recoverRequiredParameter(as: eGEOMETRIC_TOLERANCE.self, from: parameters[3])
      else { exchangeStructure.add(errorContext: "while recovering parameter #3 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( NAME: p0, DESCRIPTION: p1, RELATING_GEOMETRIC_TOLERANCE: p2, RELATED_GEOMETRIC_TOLERANCE: p3 )
    }

    /// broadcasting a new complex entity becoming an owner of the partial entity
    final public override func broadcast(addedToComplex complex: SDAI.ComplexEntity) {
      _relating_geometric_tolerance__observer.observe(newReferencerOwner: complex)
    }

    /// broadcasting a complex entity withdrawing an owner of the partial entity
    final public override func broadcast(removedFromComplex complex: SDAI.ComplexEntity) {
      _relating_geometric_tolerance__observer.observe(leavingReferencerOwner: complex)
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY geometric_tolerance_relationship;
      name                          : label;
      description                   : text;
      relating_geometric_tolerance  : geometric_tolerance; (* observed by
          geometric_tolerance.tolerance_relationship
          *)
      related_geometric_tolerance   : geometric_tolerance;
    WHERE
      wr1: ( ( NOT ( name = 'composite tolerance' ) ) OR ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
               + 'POSITION_TOLERANCE'  IN TYPEOF( relating_geometric_tolerance ) ) AND ( 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.POSITION_TOLERANCE'  IN TYPEOF( 
               related_geometric_tolerance ) ) ) OR ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
               + 'LINE_PROFILE_TOLERANCE'  IN TYPEOF( relating_geometric_tolerance ) ) AND ( 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.LINE_PROFILE_TOLERANCE'  IN TYPEOF( 
               related_geometric_tolerance ) ) ) OR ( ( 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.'
               + 'SURFACE_PROFILE_TOLERANCE'  IN TYPEOF( relating_geometric_tolerance ) ) AND ( 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SURFACE_PROFILE_TOLERANCE'  IN TYPEOF( 
               related_geometric_tolerance ) ) ) );
      wr2: ( ( NOT ( name = 'composite tolerance' ) ) OR ( relating_geometric_tolerance\geometric_tolerance.
               toleranced_shape_aspect :=: related_geometric_tolerance\geometric_tolerance.
               toleranced_shape_aspect ) );
      wr3: acyclic_geometric_tolerance_relationship( SELF, [related_geometric_tolerance], 
               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.GEOMETRIC_TOLERANCE'  );
  END_ENTITY; -- geometric_tolerance_relationship (line:16957 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eGEOMETRIC_TOLERANCE_RELATIONSHIP : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _geometric_tolerance_relationship.self
    }
    public let partialEntity: _geometric_tolerance_relationship

    //MARK: SUPERTYPES
    public var super_eGEOMETRIC_TOLERANCE_RELATIONSHIP: eGEOMETRIC_TOLERANCE_RELATIONSHIP { return self } 	// [1]

    //MARK: SUBTYPES

    //MARK: ATTRIBUTES
    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eGEOMETRIC_TOLERANCE_RELATIONSHIP`` )
    public var DESCRIPTION: tTEXT {
      get {
        return SDAI.UNWRAP( self.partialEntity._description )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._description = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT(OBSERVED)__ attribute
    /// - origin: SELF( ``eGEOMETRIC_TOLERANCE_RELATIONSHIP`` )
    public var RELATING_GEOMETRIC_TOLERANCE: eGEOMETRIC_TOLERANCE {
      get {
        return SDAI.UNWRAP( self.partialEntity._relating_geometric_tolerance )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._relating_geometric_tolerance = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eGEOMETRIC_TOLERANCE_RELATIONSHIP`` )
    public var RELATED_GEOMETRIC_TOLERANCE: eGEOMETRIC_TOLERANCE {
      get {
        return SDAI.UNWRAP( self.partialEntity._related_geometric_tolerance )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._related_geometric_tolerance = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eGEOMETRIC_TOLERANCE_RELATIONSHIP`` )
    public var NAME: tLABEL {
      get {
        return SDAI.UNWRAP( self.partialEntity._name )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._name = SDAI.UNWRAP(newValue)
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_geometric_tolerance_relationship.self) else { return nil }
      self.partialEntity = partial

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }

    //SIMPLE ENTITY REFERENCE
    public convenience init?(_ partial:_geometric_tolerance_relationship) {
      let complex = SDAI.ComplexEntity(entities:[partial])
      self.init(complex: complex)
    }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _geometric_tolerance_relationship.WHERE_wr1(SELF: instance)
      result[prefix2 + " .WHERE_wr2"] = _geometric_tolerance_relationship.WHERE_wr2(SELF: instance)
      result[prefix2 + " .WHERE_wr3"] = _geometric_tolerance_relationship.WHERE_wr3(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "GEOMETRIC_TOLERANCE_RELATIONSHIP", type: self, explicitAttributeCount: 4)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eGEOMETRIC_TOLERANCE_RELATIONSHIP.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "DESCRIPTION", keyPath: \eGEOMETRIC_TOLERANCE_RELATIONSHIP.DESCRIPTION, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "RELATING_GEOMETRIC_TOLERANCE", keyPath: \eGEOMETRIC_TOLERANCE_RELATIONSHIP.RELATING_GEOMETRIC_TOLERANCE, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "RELATED_GEOMETRIC_TOLERANCE", keyPath: \eGEOMETRIC_TOLERANCE_RELATIONSHIP.RELATED_GEOMETRIC_TOLERANCE, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: true)
      entityDef.addAttribute(name: "NAME", keyPath: \eGEOMETRIC_TOLERANCE_RELATIONSHIP.NAME, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: false)

      return entityDef
    }

  }
}
