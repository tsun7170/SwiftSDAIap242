/* file: generated_finite_numeric_space.swift 	 generated: Mon Jan  3 16:32:52 2022 */

/* This file was generated by the EXPRESS to Swift translator "exp2swift", 
    derived from STEPcode (formerly NIST's SCL).
 exp2swift version: v.1.0.1, derived from stepcode v0.8 as of 2019/11/23 
 WARNING: You probably don't want to edit it since your modifications 
    will be lost if exp2swift is used to regenerate it.
 */

 
import SwiftSDAIcore

extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF {
//MARK: -ENTITY DEFINITION in EXPRESS
/*

  ENTITY generated_finite_numeric_space
    SUBTYPE OF ( finite_space );
      start_value       : maths_number;
      increment_value   : maths_number;
      increment_number  : positive_integer;
    DERIVE
      SELF\finite_space.members  : SET [2 : ?] OF maths_number := make_numeric_set( start_value, 
                                     increment_value, increment_number );
    WHERE
      wr1: ( increment_value <> 0 );
  END_ENTITY; -- generated_finite_numeric_space (line:16775 file:ap242ed2_mim_lf_v1.101.TY.exp)

*/


//MARK: - ALL DEFINED ATTRIBUTES
/*
  SUPER- ENTITY(1)	generic_expression
    (no local attributes)

  SUPER- ENTITY(2)	maths_space
    (no local attributes)

  SUPER- ENTITY(3)	simple_generic_expression
    (no local attributes)

  SUPER- ENTITY(4)	generic_literal
    (no local attributes)

  SUPER- ENTITY(5)	finite_space
    ATTR:  members,	TYPE: SET OF maths_value -- EXPLICIT (DYNAMIC)
      -- possibly overriden by
      *** ENTITY: generated_finite_numeric_space,	TYPE: SET [2 : ?] OF maths_number	(as DERIVED)


  ENTITY(SELF)	generated_finite_numeric_space
    ATTR:  start_value,	TYPE: maths_number -- EXPLICIT

    ATTR:  increment_value,	TYPE: maths_number -- EXPLICIT

    ATTR:  increment_number,	TYPE: positive_integer -- EXPLICIT

    REDCR: members,	TYPE: SET [2 : ?] OF maths_number -- DERIVED (DYNAMIC)
      := make_numeric_set( start_value, increment_value, increment_number )
      -- OVERRIDING ENTITY: finite_space


*/


//MARK: - Partial Entity
  public final class _generated_finite_numeric_space : SDAI.PartialEntity {
    public override class var entityReferenceType: SDAI.EntityReference.Type {
      eGENERATED_FINITE_NUMERIC_SPACE.self
    }

    //ATTRIBUTES
    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _start_value: tMATHS_NUMBER // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _increment_value: tMATHS_NUMBER // PLAIN EXPLICIT ATTRIBUTE

    /// EXPLICIT ATTRIBUTE 
    public internal(set) var _increment_number: tPOSITIVE_INTEGER // PLAIN EXPLICIT ATTRIBUTE

    /// DERIVE ATTRIBUTE REDEFINITION(origin: eFINITE_SPACE)
    /// - attribute value provider protocol conformance wrapper
    internal func _members__getter(complex: SDAI.ComplexEntity) -> SDAI.SET<sMATHS_VALUE> {
      let SELF = complex.entityReference( eGENERATED_FINITE_NUMERIC_SPACE.self )!
      return SDAI.UNWRAP( SDAI.SET<sMATHS_VALUE>(SELF.MEMBERS) )
    }
    /// DERIVE ATTRIBUTE REDEFINITION(origin: eFINITE_SPACE)
    /// - gut of derived attribute logic
    internal func _members__getter(SELF: eGENERATED_FINITE_NUMERIC_SPACE) -> SDAI.SET<tMATHS_NUMBER>/*[2:nil]*/  {

      let _TEMP1 = MAKE_NUMERIC_SET(
        START: SELF.START_VALUE, DELTA: SELF.INCREMENT_VALUE, 
        INCS: SELF.INCREMENT_NUMBER)
      let value = _TEMP1
      return SDAI.UNWRAP( value )
    }

    public override var typeMembers: Set<SDAI.STRING> {
      var members = Set<SDAI.STRING>()
      members.insert(SDAI.STRING(Self.typeName))
      return members
    }


    //VALUE COMPARISON SUPPORT
    public override func hashAsValue(into hasher: inout Hasher, visited complexEntities: inout Set<SDAI.ComplexEntity>) {
      super.hashAsValue(into: &hasher, visited: &complexEntities)
      self._start_value.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._increment_value.value.hashAsValue(into: &hasher, visited: &complexEntities)
      self._increment_number.value.hashAsValue(into: &hasher, visited: &complexEntities)
    }

    public override func isValueEqual(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool {
      guard let rhs = rhs as? Self else { return false }
      if !super.isValueEqual(to: rhs, visited: &comppairs) { return false }
      if let comp = self._start_value.value.isValueEqualOptionally(to: rhs._start_value.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._increment_value.value.isValueEqualOptionally(to: rhs._increment_value.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      if let comp = self._increment_number.value.isValueEqualOptionally(to: rhs._increment_number.value, visited: &comppairs)	{
        if !comp { return false }
      }
      else { return false }
      return true
    }

    public override func isValueEqualOptionally(to rhs: SDAI.PartialEntity, visited comppairs: inout Set<SDAI.ComplexPair>) -> Bool? {
      guard let rhs = rhs as? Self else { return false }
      var result: Bool? = true
      if let comp = super.isValueEqualOptionally(to: rhs, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._start_value.value.isValueEqualOptionally(to: rhs._start_value.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._increment_value.value.isValueEqualOptionally(to: rhs._increment_value.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      if let comp = self._increment_number.value.isValueEqualOptionally(to: rhs._increment_number.value, visited: &comppairs) {
        if !comp { return false }
      }
      else { result = nil }
      return result
    }


    //MARK: WHERE RULES (ENTITY)
    public static func WHERE_wr1(SELF: eGENERATED_FINITE_NUMERIC_SPACE?) -> SDAI.LOGICAL {
      guard let SELF = SELF else { return SDAI.UNKNOWN }

      let _TEMP1 = SDAI.FORCE_OPTIONAL(SELF.INCREMENT_VALUE) .!=. SDAI.FORCE_OPTIONAL(SDAI.INTEGER(0))
      return _TEMP1
    }

    //EXPRESS IMPLICIT PARTIAL ENTITY CONSTRUCTOR
    public init(START_VALUE: tMATHS_NUMBER, INCREMENT_VALUE: tMATHS_NUMBER, 
                INCREMENT_NUMBER: tPOSITIVE_INTEGER) {
      self._start_value = START_VALUE
      self._increment_value = INCREMENT_VALUE
      self._increment_number = INCREMENT_NUMBER
      super.init(asAbstructSuperclass:())

    }

    //p21 PARTIAL ENTITY CONSTRUCTOR
    public required convenience init?(parameters: [P21Decode.ExchangeStructure.Parameter], exchangeStructure: P21Decode.ExchangeStructure) {
      let numParams = 3
      guard parameters.count == numParams
      else { exchangeStructure.error = "number of p21 parameters(\(parameters.count)) are different from expected(\(numParams)) for entity(\(Self.entityName)) constructor"; return nil }

      guard case .success(let p0) = exchangeStructure.recoverRequiredParameter(as: tMATHS_NUMBER.self, from: parameters[0])
      else { exchangeStructure.add(errorContext: "while recovering parameter #0 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p1) = exchangeStructure.recoverRequiredParameter(as: tMATHS_NUMBER.self, from: parameters[1])
      else { exchangeStructure.add(errorContext: "while recovering parameter #1 for entity(\(Self.entityName)) constructor"); return nil }

      guard case .success(let p2) = exchangeStructure.recoverRequiredParameter(as: tPOSITIVE_INTEGER.self, from: parameters[2])
      else { exchangeStructure.add(errorContext: "while recovering parameter #2 for entity(\(Self.entityName)) constructor"); return nil }

      self.init( START_VALUE: p0, INCREMENT_VALUE: p1, INCREMENT_NUMBER: p2 )
    }
  }


//MARK: - Entity Reference

/** ENTITY reference
- EXPRESS:
```express
  ENTITY generated_finite_numeric_space
    SUBTYPE OF ( finite_space );
      start_value       : maths_number;
      increment_value   : maths_number;
      increment_number  : positive_integer;
    DERIVE
      SELF\finite_space.members  : SET [2 : ?] OF maths_number := make_numeric_set( start_value, 
                                     increment_value, increment_number );
    WHERE
      wr1: ( increment_value <> 0 );
  END_ENTITY; -- generated_finite_numeric_space (line:16775 file:ap242ed2_mim_lf_v1.101.TY.exp)

```
*/
  public final class eGENERATED_FINITE_NUMERIC_SPACE : SDAI.EntityReference {

    //MARK: PARTIAL ENTITY
    public override class var partialEntityType: SDAI.PartialEntity.Type {
      _generated_finite_numeric_space.self
    }
    public let partialEntity: _generated_finite_numeric_space

    //MARK: SUPERTYPES
    public let super_eGENERIC_EXPRESSION: eGENERIC_EXPRESSION 	// [1]
    public let super_eMATHS_SPACE: eMATHS_SPACE 	// [2]
    public let super_eSIMPLE_GENERIC_EXPRESSION: eSIMPLE_GENERIC_EXPRESSION 	// [3]
    public let super_eGENERIC_LITERAL: eGENERIC_LITERAL 	// [4]
    public let super_eFINITE_SPACE: eFINITE_SPACE 	// [5]
    public var super_eGENERATED_FINITE_NUMERIC_SPACE: eGENERATED_FINITE_NUMERIC_SPACE { return self } 	// [6]

    //MARK: SUBTYPES

    //MARK: ATTRIBUTES
    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eGENERATED_FINITE_NUMERIC_SPACE`` )
    public var START_VALUE: tMATHS_NUMBER {
      get {
        return SDAI.UNWRAP( self.partialEntity._start_value )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._start_value = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT REDEF(DERIVE)__ attribute
    /// - origin: SELF( ``eGENERATED_FINITE_NUMERIC_SPACE`` )
    public var MEMBERS: SDAI.SET<tMATHS_NUMBER>/*[2:nil]*/  {
      get {
        if let cached = cachedValue(derivedAttributeName:"MEMBERS") {
          return cached.value as! SDAI.SET<tMATHS_NUMBER>/*[2:nil]*/ 
        }
        let origin = self
        let value = SDAI.UNWRAP( origin.partialEntity._members__getter(SELF: origin) )
        updateCache(derivedAttributeName:"MEMBERS", value:value)
        return value
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eGENERATED_FINITE_NUMERIC_SPACE`` )
    public var INCREMENT_NUMBER: tPOSITIVE_INTEGER {
      get {
        return SDAI.UNWRAP( self.partialEntity._increment_number )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._increment_number = SDAI.UNWRAP(newValue)
      }
    }

    /// __EXPLICIT__ attribute
    /// - origin: SELF( ``eGENERATED_FINITE_NUMERIC_SPACE`` )
    public var INCREMENT_VALUE: tMATHS_NUMBER {
      get {
        return SDAI.UNWRAP( self.partialEntity._increment_value )
      }
      set(newValue) {
        let partial = self.partialEntity
        partial._increment_value = SDAI.UNWRAP(newValue)
      }
    }


    //MARK: INITIALIZERS
    public convenience init?(_ entityRef: SDAI.EntityReference?) {
      let complex = entityRef?.complexEntity
      self.init(complex: complex)
    }

    public required init?(complex complexEntity: SDAI.ComplexEntity?) {
      guard let partial = complexEntity?.partialEntityInstance(_generated_finite_numeric_space.self) else { return nil }
      self.partialEntity = partial

      guard let super1 = complexEntity?.entityReference(eGENERIC_EXPRESSION.self) else { return nil }
      self.super_eGENERIC_EXPRESSION = super1

      guard let super2 = complexEntity?.entityReference(eMATHS_SPACE.self) else { return nil }
      self.super_eMATHS_SPACE = super2

      guard let super3 = complexEntity?.entityReference(eSIMPLE_GENERIC_EXPRESSION.self) else { return nil }
      self.super_eSIMPLE_GENERIC_EXPRESSION = super3

      guard let super4 = complexEntity?.entityReference(eGENERIC_LITERAL.self) else { return nil }
      self.super_eGENERIC_LITERAL = super4

      guard let super5 = complexEntity?.entityReference(eFINITE_SPACE.self) else { return nil }
      self.super_eFINITE_SPACE = super5

      super.init(complex: complexEntity)
    }

    public required convenience init?<G: SDAIGenericType>(fromGeneric generic: G?) {
      guard let entityRef = generic?.entityReference else { return nil }
      self.init(complex: entityRef.complexEntity)
    }

    public convenience init?<S: SDAISelectType>(_ select: S?) { self.init(possiblyFrom: select) }
    public convenience init?(_ complex: SDAI.ComplexEntity?) { self.init(complex: complex) }


    //MARK: WHERE RULE VALIDATION (ENTITY)
    public override class func validateWhereRules(instance:SDAI.EntityReference?, prefix:SDAI.WhereLabel) -> [SDAI.WhereLabel:SDAI.LOGICAL] {
      guard let instance = instance as? Self else { return [:] }

      let prefix2 = prefix + " \(instance)"

      var result = super.validateWhereRules(instance:instance, prefix:prefix2)
      result[prefix2 + " .WHERE_wr1"] = _generated_finite_numeric_space.WHERE_wr1(SELF: instance)
      return result
    }


    //MARK: DICTIONARY DEFINITION
    public class override var entityDefinition: SDAIDictionarySchema.EntityDefinition { _entityDefinition }
    private static let _entityDefinition: SDAIDictionarySchema.EntityDefinition = createEntityDefinition()

    private static func createEntityDefinition() -> SDAIDictionarySchema.EntityDefinition {
      let entityDef = SDAIDictionarySchema.EntityDefinition(name: "GENERATED_FINITE_NUMERIC_SPACE", type: self, explicitAttributeCount: 3)

      //MARK: SUPERTYPE REGISTRATIONS
      entityDef.add(supertype: eGENERIC_EXPRESSION.self)
      entityDef.add(supertype: eMATHS_SPACE.self)
      entityDef.add(supertype: eSIMPLE_GENERIC_EXPRESSION.self)
      entityDef.add(supertype: eGENERIC_LITERAL.self)
      entityDef.add(supertype: eFINITE_SPACE.self)
      entityDef.add(supertype: eGENERATED_FINITE_NUMERIC_SPACE.self)

      //MARK: ATTRIBUTE REGISTRATIONS
      entityDef.addAttribute(name: "START_VALUE", keyPath: \eGENERATED_FINITE_NUMERIC_SPACE.START_VALUE, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "MEMBERS", keyPath: \eGENERATED_FINITE_NUMERIC_SPACE.MEMBERS, 
        kind: .derivedRedeclaring, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "INCREMENT_NUMBER", keyPath: \eGENERATED_FINITE_NUMERIC_SPACE.INCREMENT_NUMBER, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: false)
      entityDef.addAttribute(name: "INCREMENT_VALUE", keyPath: \eGENERATED_FINITE_NUMERIC_SPACE.INCREMENT_VALUE, 
        kind: .explicit, source: .thisEntity, mayYieldEntityReference: false)

      return entityDef
    }

  }
}

//MARK: - partial Entity Dynamic Attribute Protocol Conformances
extension AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF._generated_finite_numeric_space :
  eFINITE_SPACE__MEMBERS__provider {}
