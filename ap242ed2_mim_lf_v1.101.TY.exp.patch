--- ap242ed2_mim_lf_v1.101.exp	2021-11-15 05:18:05.000000000 +0900
+++ ap242ed2_mim_lf_v1.101.TY.exp	2021-12-31 17:27:58.000000000 +0900
@@ -4,6 +4,29 @@
    Supersedes ISO TC184/SC4/WG3 N10384
 *)
 
+(*
+ 	original schema file ap242ed2_mim_lf_v1.101.exp (AP242 2nd Edition - 2019) 
+ 			from 	https://www.cax-if.org/cax/cax_express.php
+ 			or 		https://www.iso.org/standard/66654.html
+ 
+ 	patch file was generated by the terminal command:
+ 			diff -u ap242ed2_mim_lf_v1.101.exp ap242ed2_mim_lf_v1.101.TY.exp > ap242ed2_mim_lf_v1.101.TY.exp.patch
+ 
+ 	patched schema file can be regenerated by the terminal command:
+ 			patch -u  --input=ap242ed2_mim_lf_v1.101.TY.exp.patch --output=ap242ed2_mim_lf_v1.101.TY.exp
+*)
+ 
+(*
+ 	patched schema file: ap242ed2_mim_lf_v1.101.TY.exp
+ 
+	2021/12/31: added missing function definitions from resource schemas. 
+  2021/08/12: fixed logic error in surface_style_rendering_with_properties.WR1
+  2021/06/10: modified FUNCTION using_items() to prevent duplicated search.
+  2021/02/28: slightly modified for exp2swift translation, plus some bug fixes on original schema definition.
+ 
+ 	by Tsutomu Yoshida, Minokamo, Japan.
+*)
+ 
 -- -*- Mode: Express -*-
 
 (* ===================================================================================== *)
@@ -6025,22 +6048,24 @@
   measured_data_type        : a3m_measured_data_type_name;
   detected_difference_types : LIST [0 : ?] OF a3m_detected_difference_type_name;
   accuracy_types            : LIST [0 : ?] OF a3m_accuracy_type_name;
+ (**TY2021/02/28 bug fix:
 WHERE
   WR1: SIZEOF(USEDIN(SELF,
                      'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.DATA_EQUIVALENCE_CRITERION_ASSESSMENT_ASSOCIATION.CRITERION')) =
-       0;
+       0;	--TY2020/12/12 NEED TO CHECK 'DATA_EQUIVALENCE_CRITERION_ASSESSMENT_ASSOCIATION'
   WR2: SIZEOF(QUERY(i1
                     <* bag_to_set(USEDIN(SELF,
                                          'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.REPRESENTATION_ITEM_RELATIONSHIP.RELATED_REPRESENTATION_ITEM'))
                     | 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.DATA_EQUIVALENCE_CRITERION_INSPECTION_ASSOCIATION' IN
                       TYPEOF(i1))) =
-       0;
+       0; --TY2021/02/28 NEED TO CHECK 'DATA_EQUIVALENCE_CRITERION_INSPECTION_ASSOCIATION'
   WR3: SIZEOF(QUERY(i1
                     <* bag_to_set(USEDIN(SELF,
                                          'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.REPRESENTATION_ITEM_RELATIONSHIP.RELATING_REPRESENTATION_ITEM'))
                     | 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.DATA_EQUIVALENCE_CRITERION_INSPECTION_ASSOCIATION' IN
                       TYPEOF(i1))) =
-       0;
+       0; --TY2021/02/28 NEED TO CHECK 'DATA_EQUIVALENCE_CRITERION_INSPECTION_ASSOCIATION'
+ *)
 END_ENTITY;
 
 ENTITY a3m_equivalence_criterion_for_assembly
@@ -7396,7 +7421,7 @@
   SUBTYPE OF (half_space_2d);
   SELF\half_space_2d.base_curve : composite_curve;
 WHERE
-  WR1: base_curve\composite_curve.closed_curve = true;
+  WR1: base_curve\composite_curve.closed_curve = true;	-- //*TY2020/11/10 need to review \composite_curve.
 END_ENTITY;
 
 ENTITY array_placement_group
@@ -14501,7 +14526,7 @@
                                                     | (('AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS') IN
                                                        TYPEOF(pdr.used_representation)))
                                            | (NOT (SIZEOF(QUERY(it
-                                                                <* impl_rep.used_representation.items
+                                                                <* impl_rep.used_representation\SHAPE_REPRESENTATION_WITH_PARAMETERS(*TY2021/01/24*).items
                                                                 | (('AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.DESCRIPTIVE_REPRESENTATION_ITEM' IN
                                                                     TYPEOF(it)) AND
                                                                    (it.name = 'removal direction') AND
@@ -14820,7 +14845,7 @@
                                                      | (('AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS') IN
                                                         TYPEOF(pdr.used_representation)))
                                             | (NOT (SIZEOF(QUERY(it
-                                                                 <* impl_rep.used_representation.items
+                                                                 <* impl_rep.used_representation\SHAPE_REPRESENTATION_WITH_PARAMETERS(*TY2021/01/24*).items
                                                                  | (('AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.DESCRIPTIVE_REPRESENTATION_ITEM' IN
                                                                      TYPEOF(it)) AND
                                                                     (it.name = 'module or diametral pitch') AND
@@ -14860,7 +14885,7 @@
                                                      | (('AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS') IN
                                                         TYPEOF(pdr.used_representation)))
                                             | (NOT (SIZEOF(QUERY(it
-                                                                 <* impl_rep.used_representation.items
+                                                                 <* impl_rep.used_representation\SHAPE_REPRESENTATION_WITH_PARAMETERS(*TY2021/01/24*).items
                                                                  | (('AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.DESCRIPTIVE_REPRESENTATION_ITEM' IN
                                                                      TYPEOF(it)) AND
                                                                     (it.name = 'internal or external gear') AND
@@ -16382,7 +16407,7 @@
                                                       | 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN
                                                         TYPEOF(pdr.used_representation))
                                              | NOT (SIZEOF(QUERY(it
-                                                                 <* impl_rep.used_representation.items
+                                                                 <* impl_rep.used_representation\SHAPE_REPRESENTATION_WITH_PARAMETERS(*TY2021/01/24*).items
                                                                  | (SIZEOF(['AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.MEASURE_REPRESENTATION_ITEM',
                                                                             'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.LENGTH_MEASURE_WITH_UNIT'] *
                                                                            TYPEOF(it)) =
@@ -16403,7 +16428,7 @@
                                                       | 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN
                                                         TYPEOF(pdr.used_representation))
                                              | NOT (SIZEOF(QUERY(it
-                                                                 <* impl_rep.used_representation.items
+                                                                 <* impl_rep.used_representation\SHAPE_REPRESENTATION_WITH_PARAMETERS(*TY2021/01/24*).items
                                                                  | ('AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.DESCRIPTIVE_REPRESENTATION_ITEM' IN
                                                                     TYPEOF(it)) AND
                                                                    (it.name = 'module or diametral pitch') AND
@@ -16424,7 +16449,7 @@
                                                       | 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN
                                                         TYPEOF(pdr.used_representation))
                                              | NOT (SIZEOF(QUERY(it
-                                                                 <* impl_rep.used_representation.items
+                                                                 <* impl_rep.used_representation\SHAPE_REPRESENTATION_WITH_PARAMETERS(*TY2021/01/24*).items
                                                                  | ('AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.DESCRIPTIVE_REPRESENTATION_ITEM' IN
                                                                     TYPEOF(it)) AND
                                                                    (it.name = 'internal or external gear') AND
@@ -16506,7 +16531,7 @@
                                                        | 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS' IN
                                                          TYPEOF(pdr.used_representation))
                                               | NOT (SIZEOF(QUERY(it
-                                                                  <* impl_rep.used_representation.items
+                                                                  <* impl_rep.used_representation\SHAPE_REPRESENTATION_WITH_PARAMETERS(*TY2021/01/24*).items
                                                                   | ('AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.DESCRIPTIVE_REPRESENTATION_ITEM' IN
                                                                      TYPEOF(it)) AND
                                                                     (it.name = 'gear tooth') AND
@@ -16615,6 +16640,8 @@
   SUBTYPE OF (shape_aspect);
   base      : datum_or_common_datum;
   modifiers : OPTIONAL SET [1 : ?] OF datum_reference_modifier;
+ DERIVE	--*TY2021/02/22
+ 	base_common_datum_list :common_datum_list := base; --*TY2021/02/22
 WHERE
   WR1: SELF\shape_aspect.name = '';
   WR2: NOT EXISTS(SELF\shape_aspect.description);
@@ -16623,7 +16650,7 @@
   WR5: NOT ('AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.DATUM' IN TYPEOF(base)) OR
            (SELF\shape_aspect.of_shape = base\shape_aspect.of_shape);
   WR6: NOT ('AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.COMMON_DATUM_LIST' IN TYPEOF(base)) OR
-           (SELF\shape_aspect.of_shape = base[1]\shape_aspect.of_shape);
+           (SELF\shape_aspect.of_shape = base_common_datum_list[1]\shape_aspect.of_shape); --*TY2021/02/22: (SELF\shape_aspect.of_shape = base[1]\shape_aspect.of_shape);
 END_ENTITY;
 
 ENTITY general_feature
@@ -26504,7 +26531,7 @@
                                                     | (('AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS') IN
                                                        TYPEOF(pdr.used_representation)))
                                            | (NOT (SIZEOF(QUERY(it
-                                                                <* impl_rep.used_representation.items
+                                                                <* impl_rep.used_representation\SHAPE_REPRESENTATION_WITH_PARAMETERS(*TY2021/01/24*).items
                                                                 | (('AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.DESCRIPTIVE_REPRESENTATION_ITEM' IN
                                                                     TYPEOF(it)) AND
                                                                    (it.name = 'shape profile floor orientation') AND
@@ -31290,7 +31317,11 @@
   SUBTYPE OF (surface_style_rendering);
   properties : SET [1 : 2] OF rendering_properties_select;
 WHERE
-  WR1: (HIINDEX(properties) = 1) XOR (TYPEOF(properties[1]) <> TYPEOF(properties[2]));
+--*TY2021/08/12  WR1: (HIINDEX(properties) = 1) XOR (TYPEOF(properties[1]) <> TYPEOF(properties[2]));
+ WR1: (HIINDEX(properties) = 1) OR (TYPEOF(properties[1]) <> TYPEOF(properties[2])); (*TY2021/08/12
+ since (ref. ISO 10303-46 (6.4.62))
+ 	WR1: All of the properties shall be of different types.
+ *)
 END_ENTITY;
 
 ENTITY surface_style_segmentation_curve
@@ -32411,7 +32442,7 @@
                                                    | (('AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS') IN
                                                       TYPEOF(pdr.used_representation)))
                                           | (NOT (SIZEOF(QUERY(it
-                                                               <* impl_rep.used_representation.items
+                                                               <* impl_rep.used_representation\SHAPE_REPRESENTATION_WITH_PARAMETERS(*TY2021/01/24*).items
                                                                | (('AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.DESCRIPTIVE_REPRESENTATION_ITEM' IN
                                                                    TYPEOF(it)) AND
                                                                   (it.name = 'hand') AND
@@ -32444,7 +32475,7 @@
                                                     | (('AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS') IN
                                                        TYPEOF(pdr.used_representation)))
                                            | (NOT (SIZEOF(QUERY(it
-                                                                <* impl_rep.used_representation.items
+                                                                <* impl_rep.used_representation\SHAPE_REPRESENTATION_WITH_PARAMETERS(*TY2021/01/24*).items
                                                                 | (('AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.DESCRIPTIVE_REPRESENTATION_ITEM' IN
                                                                     TYPEOF(it)) AND
                                                                    (it.name = 'thread side') AND
@@ -32639,7 +32670,7 @@
                                                    | (('AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS') IN
                                                       TYPEOF(pdr.used_representation)))
                                           | (NOT (SIZEOF(QUERY(it
-                                                               <* impl_rep.used_representation.items
+                                                               <* impl_rep.used_representation\SHAPE_REPRESENTATION_WITH_PARAMETERS(*TY2021/01/24*).items
                                                                | (('AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.DESCRIPTIVE_REPRESENTATION_ITEM' IN
                                                                    TYPEOF(it)) AND
                                                                   (it.name = 'pitch or dimension') AND
@@ -32657,7 +32688,7 @@
                                                    | (('AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SHAPE_REPRESENTATION_WITH_PARAMETERS') IN
                                                       TYPEOF(pdr.used_representation)))
                                           | (NOT (SIZEOF(QUERY(it
-                                                               <* impl_rep.used_representation.items
+                                                               <* impl_rep.used_representation\SHAPE_REPRESENTATION_WITH_PARAMETERS(*TY2021/01/24*).items
                                                                | (('AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.DESCRIPTIVE_REPRESENTATION_ITEM' IN
                                                                    TYPEOF(it)) AND
                                                                   (it.name = 'included or extra') AND
@@ -33923,7 +33954,7 @@
   retval   : SET OF a3ma_accuracy_type_name := [];
 END_LOCAL;
   REPEAT i := 1 TO SIZEOF(ei);
-    type_out := a3ma_get_value_limit_type(ei[i].specific_accuracy.range);
+    type_out := a3ma_get_value_limit_type(ei[i].specific_accuracy.range); --*TY2021/02/28 NEED TO REVIEW; questionable func call; result not used
     retval := retval + [atna_others];
   END_REPEAT;
   RETURN(retval);
@@ -34866,10 +34897,11 @@
 FUNCTION acyclic_composite_text(start_composite : composite_text;
                                 child_text : SET [1 : ?] OF text_or_character) : LOGICAL;
 LOCAL
-  i                     : INTEGER;
+  -- i                     : INTEGER; *TY2021/02/28 eliminated unused var
   local_composite_text  : SET [0 : ?] OF composite_text;
   local_annotation_text : SET [0 : ?] OF annotation_text;
   local_children        : SET [0 : ?] OF text_or_character;
+  set__text_or_character : SET [0 : ?] OF text_or_character; --*TY2021/02/25
 END_LOCAL;
   local_composite_text := QUERY(child
                                 <* child_text
@@ -34897,13 +34929,19 @@
   IF (SIZEOF(local_annotation_text) > 0)
   THEN
     REPEAT i := 1 TO HIINDEX(local_annotation_text);
-      local_children := local_children +
+ 			set__text_or_character := QUERY(item
+															 <* local_annotation_text[i]\mapped_item.mapping_source.mapped_representation.items
+															 | SIZEOF(['AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ANNOTATION_TEXT',
+																				 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.COMPOSITE_TEXT'] *
+																				TYPEOF(item)) >
+																 0); --*TY2021/02/25
+      local_children := local_children + set__text_or_character; (**TY2021/02/25
                         QUERY(item
                               <* local_annotation_text[i]\mapped_item.mapping_source.mapped_representation.items
                               | SIZEOF(['AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ANNOTATION_TEXT',
                                         'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.COMPOSITE_TEXT'] *
                                        TYPEOF(item)) >
-                                0);
+                                0); *)
     END_REPEAT;
   END_IF;
   IF (local_children :<>: child_text)
@@ -35039,16 +35077,16 @@
       IF SIZEOF(rms) > 0
       THEN
         REPEAT j := 1 TO HIINDEX(rms);
-          mis := bag_to_set(USEDIN(rms[i],
+          mis := bag_to_set(USEDIN(rms[j(**TY2021/02/28 bug fix: i *)],
                                    'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.MAPPED_ITEM.MAPPING_SOURCE'));
           IF SIZEOF(mis) > 0
           THEN
-            REPEAT j := 1 TO HIINDEX(mis);
-              IF mis[i] :=: mi
+            REPEAT k(**TY2021/02/28 bug fix: j *) := 1 TO HIINDEX(mis);
+              IF mis[k(**TY2021/02/28 bug fix: i *)] :=: mi
               THEN
                 RETURN(false);
               END_IF;
-              rs2 := rs2 + using_representations(mis[i]);
+              rs2 := rs2 + using_representations(mis[k(**TY2021/02/28 bug fix: i*)]);
             END_REPEAT;
           END_IF;
         END_REPEAT;
@@ -35146,6 +35184,7 @@
                                              specific_relation : STRING) : BOOLEAN;
 LOCAL
   x : SET OF representation_relationship;
+  set__representation : SET OF representation; --*TY2021/02/25
 END_LOCAL;
   IF relation.rep_1 IN relatives
   THEN
@@ -35156,7 +35195,8 @@
                                   'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.REPRESENTATION_RELATIONSHIP.REP_2'))
              | specific_relation IN TYPEOF(r));
   REPEAT i := 1 TO HIINDEX(x);
-    IF NOT acyclic_representation_relationship(x[i], relatives + relation.rep_1, specific_relation)
+ 		set__representation := relation.rep_1; --*TY2021/02/25
+    IF NOT acyclic_representation_relationship(x[i], relatives + set__representation(**TY2021/02/25: relation.rep_1 *), specific_relation)
     THEN
       RETURN(false);
     END_IF;
@@ -35803,7 +35843,7 @@
 
 FUNCTION check_continuous_edges(edges : LIST OF UNIQUE edge_curve) : BOOLEAN;
 LOCAL
-  i           : INTEGER;
+  -- i           : INTEGER; **TY2021/02/28 eliminated unused var
   next_vertex : vertex;
 END_LOCAL;
   IF (SIZEOF(edges) = 1)
@@ -35844,8 +35884,8 @@
 FUNCTION check_curve_planarity(checked_curve : curve) : BOOLEAN;
 LOCAL
   crv    : curve   := checked_curve;
-  i      : INTEGER;
-  j      : INTEGER;
+  -- i      : INTEGER;	**TY2021/02/28 eliminated unused var
+  -- j      : INTEGER;	**TY2021/02/28 eliminated unused var
   result : BOOLEAN := false;
 END_LOCAL;
   IF (SIZEOF(['AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CONIC',
@@ -36664,7 +36704,7 @@
 
 FUNCTION compute_total_depth(swsrh : solid_with_stepped_round_hole) : positive_length_measure;
 LOCAL
-  i  : positive_integer;
+  -- i  : positive_integer; **TY2021/02/28 eliminated unused var
   n  : positive_integer        := swsrh.segments;
   td : positive_length_measure := swsrh.segment_depths[1];
 END_LOCAL;
@@ -37149,6 +37189,7 @@
   bval  : maths_binary;
   tval  : maths_tuple   := the_empty_maths_tuple;
   mval  : maths_value;
+  val_list : LIST OF GENERIC; --*TY2021/02/20
 END_LOCAL;
   IF (schema_prefix + 'MATHS_VALUE') IN types
   THEN
@@ -37191,8 +37232,9 @@
   END_IF;
   IF 'LIST' IN types
   THEN
-    REPEAT i := 1 TO SIZEOF(val);
-      mval := convert_to_maths_value(val[i]);
+ 		val_list := val; --*TY2021/02/20
+    REPEAT i := 1 TO SIZEOF(val_list); --*TY2021/02/20: REPEAT i := 1 TO SIZEOF(val);
+      mval := convert_to_maths_value(val_list[i]); --*TY2021/02/20: mval := convert_to_maths_value(val[i]);
       IF NOT EXISTS(mval)
       THEN
         RETURN(?);
@@ -37439,7 +37481,7 @@
 LOCAL
   nops : INTEGER             := 2;
   vspc : maths_space;
-  dim  : nonnegative_integer;
+  -- dim  : nonnegative_integer;	**TY2021/02/28 eliminated unused var
   k    : positive_integer;
   bspc : maths_space;
 END_LOCAL;
@@ -37518,6 +37560,78 @@
    references during recursive calls to this function. The parameter
    lists already tested instances in a chain of references.
     *)
+ 
+ --*TY2021/06/23: proposed implementation
+ 
+ (*NESTED*) FUNCTION is_referenced_by_outer_world(subject  : GENERIC : CGEN;
+ 																								 in_chain : LIST OF GENERIC : CGEN) : BOOLEAN;
+   	LOCAL
+ 			set_of_referring_instances    : SET OF GENERIC : CGEN;
+ 			number_of_referring_instances : INTEGER;
+ 			child                         : GENERIC : CGEN;
+			set_of_types                  : SET OF STRING;
+ 		END_LOCAL;
+ 
+ 		IF subject IN succeededs THEN
+ 			RETURN(true);
+ 		END_IF;
+ 
+ 		IF subject IN dead_ends THEN
+ 			RETURN(false);
+ 		END_IF;
+ 
+		set_of_referring_instances := bag_to_set(USEDIN(subject, ''));
+ 		IF NOT EXISTS(set_of_referring_instances) THEN
+ 			dead_ends := dead_ends + subject;
+ 			RETURN(false);	-- origin of dead_end(1)
+ 		END_IF;
+ 
+ 		set_of_referring_instances := set_of_referring_instances - (dead_ends + in_chain);
+
+ 		number_of_referring_instances := SIZEOF(set_of_referring_instances);
+ 		REPEAT j := 1 TO number_of_referring_instances;
+ 			child := set_of_referring_instances[j];
+ 			set_of_types := TYPEOF(child);
+ 
+ 			IF NOT (set_of_types <= set_of_input_types) THEN
+ 				succeededs := succeededs + in_chain + subject + child;
+ 				RETURN(true);	-- origin of succeeded(1)
+			END_IF;
+ 
+ 			IF is_referenced_by_outer_world(child, in_chain + subject) THEN
+ 				RETURN(true);
+ 			END_IF;
+ 		END_REPEAT;
+ 
+ 		dead_ends := dead_ends + subject;
+ 		RETURN(false);	-- origin of dead_end(2)
+ END_FUNCTION (*NESTED*);
+ 
+ LOCAL
+ 	 succeededs : SET OF GENERIC : CGEN := [];
+   dead_ends : SET OF GENERIC: CGEN := [];
+   number_of_input_instances     : INTEGER;
+   input_instance_CGEN: GENERIC:CGEN;
+ END_LOCAL;
+ 
+ IF NOT EXISTS(set_of_input_instances) THEN
+ 	 RETURN(false);
+ END_IF;
+ 
+ number_of_input_instances := SIZEOF(set_of_input_instances);
+ set_of_input_types := set_of_input_types + 'GENERIC';
+ 
+ REPEAT i := 1 TO number_of_input_instances;
+  input_instance_CGEN := set_of_input_instances[i];
+  IF NOT is_referenced_by_outer_world(input_instance_CGEN, previous_in_chain) THEN
+ 		RETURN(false);
+  END_IF;
+ END_REPEAT;
+ 
+ RETURN(true);
+ 
+ 
+ (* --*TY2021/06/23: original implementation
 LOCAL
   number_of_input_instances     : INTEGER;
   number_of_referring_instances : INTEGER;
@@ -37526,6 +37640,7 @@
   previous_in_chain_plus        : LIST OF GENERIC : CGEN := [];
   result                        : BOOLEAN                := true;
   set_of_types                  : SET OF STRING          := [];
+ 	input_instance_CGEN: GENERIC:CGEN; --*TY2021/02/20
 END_LOCAL;
   IF EXISTS(set_of_input_instances)
   THEN
@@ -37543,7 +37658,8 @@
           THEN
             IF NOT (bag_of_referring_instances[j] IN previous_in_chain)
             THEN
-              previous_in_chain_plus := previous_in_chain + set_of_input_instances[i];
+ 							input_instance_CGEN := set_of_input_instances[i]; --*TY2021/02/20
+              previous_in_chain_plus := previous_in_chain + input_instance_CGEN; --*TY2021/02/20: previous_in_chain_plus := previous_in_chain + set_of_input_instances[i];
               IF dependently_instantiated([bag_of_referring_instances[j]], set_of_input_types, previous_in_chain_plus)
               THEN
                 dependently_instantiated_flag := true;
@@ -37569,8 +37685,10 @@
     RETURN(false);
   END_IF;
   RETURN(true);
+ --*TY2021/06/23: end of original implementation *)
 END_FUNCTION;
 
+ 
 FUNCTION derive_angle(placement_1 : axis2_placement_3d;
                       placement_2 : axis2_placement_3d) : plane_angle_measure;
 LOCAL
@@ -40088,7 +40206,7 @@
   factors2  : LIST OF maths_space;
   fs1       : function_space;
   fs2       : function_space;
-  cum2      : LOGICAL;
+  -- cum2      : LOGICAL; **TY2021/02/28 eliminated unused var
 END_LOCAL;
   IF spc1 = spc2
   THEN
@@ -40657,6 +40775,7 @@
   root            : SET OF product_definition;
   i               : INTEGER                         := 0;
   j               : INTEGER                         := 0;
+  pd : product_definition; --*TY2021/02/25 
 END_LOCAL;
   IF ((SIZEOF(constituent) = 1) AND assembly_root(constituent[1]))
   THEN
@@ -40688,7 +40807,8 @@
           REPEAT j := 1 TO HIINDEX(constituent);
             IF (local_relation[i].relating_product_definition <> constituent[j])
             THEN
-              local_parent := local_parent + local_relation[i].relating_product_definition;
+ 							pd := local_relation[i].relating_product_definition; --*TY2021/02/25
+              local_parent := local_parent + pd; --*TY2021/02/25: local_relation[i].relating_product_definition;
             END_IF;
           END_REPEAT;
         END_REPEAT;
@@ -40757,7 +40877,7 @@
   local_s_d_r  : SET OF shape_definition_representation := [];
   local_s_d_r2 : BAG OF shape_definition_representation := [];
   local_s_r    : SET OF shape_representation            := [];
-  i            : INTEGER;
+  -- i            : INTEGER; **TY2021/02/28 eliminated unused var
 END_LOCAL;
   local_p_d_s2 := local_p_d_s2 +
                   QUERY(pd
@@ -40790,7 +40910,7 @@
   local_s_d_r  : SET OF shape_definition_representation := [];
   local_s_d_r2 : BAG OF shape_definition_representation := [];
   local_s_r    : SET OF shape_representation            := [];
-  i            : INTEGER;
+  -- i            : INTEGER; **TY2021/02/28 eliminated unused var
 END_LOCAL;
   local_p_d := bag_to_set(USEDIN(item,
                                  'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PROPERTY_DEFINITION.DEFINITION'));
@@ -41336,7 +41456,7 @@
   adrs_raw      : SET OF applied_document_reference   := bag_to_set(USEDIN(pdc,
                                                                            'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.APPLIED_DOCUMENT_REFERENCE.ITEMS'));
   adrs_filtered : SET OF applied_document_reference   := [];
-  ras           : SET OF role_association;
+  -- ras           : SET OF role_association; **TY2021/02/28 eliminated unused var
   dpas          : SET OF document_product_association;
 END_LOCAL;
   REPEAT i := 1 TO HIINDEX(adrs_raw);
@@ -41525,6 +41645,7 @@
                             END_IF;
     END;
   END_CASE;
+ RETURN(?); --*TY2021/02/18 bug fix
 END_FUNCTION;
 
 FUNCTION get_descendant_occurrences(input : product_definition_occurrence) : SET [0 : ?] OF product_definition_specified_occurrence;
@@ -41973,7 +42094,7 @@
   reps : SET [1 : ?] OF representation                  := using_representations(item);
   svri : SET [1 : ?] OF variational_representation_item;
   iar  : instance_attribute_reference;
-  i    : INTEGER;
+  -- i    : INTEGER; **TY2021/02/28 eliminated unused var
   n    : INTEGER                                        := HIINDEX(reps);
 END_LOCAL;
   IF ('AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.BOUND_VARIATIONAL_PARAMETER' IN TYPEOF(item))
@@ -42322,10 +42443,12 @@
 FUNCTION list_of_topology_reversed(a_list : list_of_reversible_topology_item) : list_of_reversible_topology_item;
 LOCAL
   the_reverse : list_of_reversible_topology_item;
+  aggr_or_elem : GENERIC; --*TY2021/02/25
 END_LOCAL;
   the_reverse := [];
   REPEAT i := 1 TO SIZEOF(a_list);
-    the_reverse := topology_reversed(a_list[i]) + the_reverse;
+ 		aggr_or_elem := topology_reversed(a_list[i]); --*TY2021/02/25
+    the_reverse := aggr_or_elem (**TY2021/02/25: topology_reversed(a_list[i]) *) + the_reverse;
   END_REPEAT;
   RETURN(the_reverse);
 END_FUNCTION;
@@ -42537,7 +42660,7 @@
                           delta : maths_number;
                           incs : positive_integer) : SET [2 : ?] OF maths_number;
 LOCAL
-  i           : INTEGER;
+  -- i           : INTEGER; **TY2021/02/28 eliminated unused var
   numeric_set : SET [2 : ?] OF maths_number := [start,(start + delta)];
 END_LOCAL;
   IF incs > 1
@@ -42797,6 +42920,7 @@
     END_IF;
     OTHERWISE: RETURN(false);
   END_CASE;
+  RETURN(false); --*TY2021/02/28 bug fix
 END_FUNCTION;
 
 FUNCTION md_valid_content_in_geometric_set_for_placeholder(input : geometric_set) : BOOLEAN;
@@ -42806,8 +42930,28 @@
   texts      : BAG OF annotation_text := [];
   placements : BAG OF placement       := [];
   points     : BAG OF point           := [];
-END_LOCAL;
-  REPEAT i := LOINDEX(input\geometric_set.elements) TO HIINDEX(input\geometric_set.elements);
+  p_bx : planar_box; --*TY2021/02/26
+  a_tx : annotation_text; --*TY2021/02/26
+  pl : placement; --*TY2021/02/26
+  pt : point; --*TY2021/02/26
+END_LOCAL;
+  REPEAT i := LOINDEX(input\geometric_set.elements) TO HIINDEX(input\geometric_set.elements); 
+ 
+    IF ('AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.POINT' IN TYPEOF(input\geometric_set.elements[i])) 
+    THEN
+      IF NOT (SIZEOF(['AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CARTESIAN_POINT',
+								 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.POINT_ON_CURVE',
+								 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.POINT_ON_SURFACE'] *
+								TYPEOF(input\geometric_set.elements[i])) =
+				 1)
+      THEN
+	      pass := false;
+      ELSE
+   			pt := input\geometric_set.elements[i]; --*TY2021/02/26
+	      points := points + pt; --*TY2021/02/26: input\geometric_set.elements[i];
+      END_IF;
+    END_IF;
+(**TY2021/02/26 bug fix
     IF ('AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.POINT' IN TYPEOF(input\geometric_set.elements[i])) AND
        NOT (SIZEOF(['AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CARTESIAN_POINT',
                     'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.POINT_ON_CURVE',
@@ -42819,17 +42963,21 @@
     ELSE
       points := points + input\geometric_set.elements[i];
     END_IF;
+ *)
     IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PLANAR_BOX' IN TYPEOF(input\geometric_set.elements[i])
     THEN
-      boxes := boxes + input\geometric_set.elements[i];
+      p_bx := input\geometric_set.elements[i]; --*TY2021/02/26
+      boxes := boxes + p_bx; --*TY2021/02/26: input\geometric_set.elements[i];
     END_IF;
     IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ANNOTATION_TEXT' IN TYPEOF(input\geometric_set.elements[i])
     THEN
-      texts := texts + input\geometric_set.elements[i];
+ 			a_tx := input\geometric_set.elements[i]; --*TY2021/02/26
+      texts := texts + a_tx; --*TY2021/02/26: input\geometric_set.elements[i];
     END_IF;
     IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PLACEMENT' IN TYPEOF(input\geometric_set.elements[i])
     THEN
-      placements := placements + input\geometric_set.elements[i];
+			pl := input\geometric_set.elements[i]; --*TY2021/02/26
+      placements := placements + pl; --*TY2021/02/26: input\geometric_set.elements[i];
     END_IF;
   END_REPEAT;
   IF SIZEOF(boxes) > 1
@@ -42866,12 +43014,13 @@
   tmp_int   : INTEGER;
   tmp_real  : REAL;
   tmp_cmplx : complex_number_literal;
-  lgcl      : LOGICAL;
-  cum       : LOGICAL;
+  -- lgcl      : LOGICAL; **TY2021/02/28 eliminated unused var
+  cum       : LOGICAL := UNKNOWN; --*TY2021/02/28 to protect against indeterminate function inputs
   vspc      : maths_space;
   sspc      : maths_space;
   smem      : SET OF maths_value;
   factors   : LIST OF maths_space;
+ 	v_LIST : LIST OF GENERIC; --*TY2021/02/20
 END_LOCAL;
   IF NOT EXISTS(s)
   THEN
@@ -43042,12 +43191,13 @@
   THEN
     IF 'LIST' IN vtypes
     THEN
-      IF SIZEOF(v) = s\uniform_product_space.exponent
+ 			v_LIST := v; --*TY2021/02/20
+      IF SIZEOF(v_LIST) = s\uniform_product_space.exponent --*TY2021/02/20: IF SIZEOF(v) = s\uniform_product_space.exponent
       THEN
         sspc := s\uniform_product_space.base;
         cum := true;
-        REPEAT i := 1 TO SIZEOF(v);
-          cum := cum AND member_of(v[i], sspc);
+        REPEAT i := 1 TO SIZEOF(v_LIST); --*TY2021/02/20: REPEAT i := 1 TO SIZEOF(v);
+          cum := cum AND member_of(v_LIST[i], sspc); --*TY2021/02/20: cum := cum AND member_of(v[i], sspc);
           IF cum = false
           THEN
             RETURN(false);
@@ -43062,12 +43212,13 @@
   THEN
     IF 'LIST' IN vtypes
     THEN
+ 			v_LIST := v; --*TY2021/02/20
       factors := s\listed_product_space.factors;
-      IF SIZEOF(v) = SIZEOF(factors)
+      IF SIZEOF(v_LIST) = SIZEOF(factors) --*TY2021/02/20: IF SIZEOF(v) = SIZEOF(factors)
       THEN
         cum := true;
-        REPEAT i := 1 TO SIZEOF(v);
-          cum := cum AND member_of(v[i], factors[i]);
+        REPEAT i := 1 TO SIZEOF(v_LIST); --*TY2021/02/20: REPEAT i := 1 TO SIZEOF(v);
+          cum := cum AND member_of(v_LIST[i], factors[i]); --*TY2021/02/20: cum := cum AND member_of(v[i], factors[i]);
           IF cum = false
           THEN
             RETURN(false);
@@ -43082,21 +43233,22 @@
   THEN
     IF 'LIST' IN vtypes
     THEN
+ 			v_LIST := v; --*TY2021/02/20
       sspc := s\extended_tuple_space.base;
       tmp_int := space_dimension(sspc);
-      IF SIZEOF(v) >= tmp_int
+      IF SIZEOF(v_LIST) >= tmp_int --*TY2021/02/20: IF SIZEOF(v) >= tmp_int
       THEN
         cum := true;
         REPEAT i := 1 TO tmp_int;
-          cum := cum AND member_of(v[i], factor_space(sspc, i));
+          cum := cum AND member_of(v_LIST[i], factor_space(sspc, i)); --*TY2021/02/20: cum := cum AND member_of(v[i], factor_space(sspc, i));
           IF cum = false
           THEN
             RETURN(false);
           END_IF;
         END_REPEAT;
         sspc := s\extended_tuple_space.extender;
-        REPEAT i := tmp_int + 1 TO SIZEOF(v);
-          cum := cum AND member_of(v[i], sspc);
+        REPEAT i := tmp_int + 1 TO SIZEOF(v_LIST); --*TY2021/02/20: REPEAT i := tmp_int + 1 TO SIZEOF(v);
+          cum := cum AND member_of(v_LIST[i], sspc); --*TY2021/02/20: cum := cum AND member_of(v[i], sspc);
           IF cum = false
           THEN
             RETURN(false);
@@ -44024,9 +44176,7 @@
    link_rep_rel : BAG OF kinematic_link_representation_relation;
    END_LOCAL;
 
-   link_rep_rel := USEDIN (link, 'KINEMATIC_STRUCTURE_SCHEMA.'+
-   'KINEMATIC_LINK_REPRESENTATION_RELATION.'+
-   'TOPOLOGICAL_ASPECTS');
+   link_rep_rel := USEDIN (link, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.KINEMATIC_LINK_REPRESENTATION_RELATION.TOPOLOGICAL_ASPECTS');--*TY2021/12/31
    IF (SIZEOF (link_rep_rel) = 0) THEN
    RETURN (?);
    ELSE
@@ -44038,9 +44188,7 @@
      link_rep_rel : BAG OF kinematic_link_representation_relation;
      END_LOCAL;
 
-     link_rep_rel := USEDIN (link, 'KINEMATIC_STRUCTURE_SCHEMA.'+
-     'KINEMATIC_LINK_REPRESENTATION_RELATION.'+
-     'TOPOLOGICAL_ASPECTS');
+     link_rep_rel := USEDIN (link, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.KINEMATIC_LINK_REPRESENTATION_RELATION.TOPOLOGICAL_ASPECTS');--*TY2021/12/31
      IF (SIZEOF (link_rep_rel) = 0) THEN
      RETURN (?);
      ELSE
@@ -44129,10 +44277,12 @@
 FUNCTION set_of_topology_reversed(a_set : set_of_reversible_topology_item) : set_of_reversible_topology_item;
 LOCAL
   the_reverse : set_of_reversible_topology_item;
+ reversed: reversible_topology_item; --*TY2021/02/24
 END_LOCAL;
   the_reverse := [];
   REPEAT i := 1 TO SIZEOF(a_set);
-    the_reverse := the_reverse + topology_reversed(a_set[i]);
+ 		reversed := topology_reversed(a_set[i]); --*TY2021/02/24
+    the_reverse := the_reverse + reversed; --*TY2021/02/24: the_reverse := the_reverse + topology_reversed(a_set[i]);
   END_REPEAT;
   RETURN(the_reverse);
 END_FUNCTION;
@@ -44241,6 +44391,9 @@
   tpl           : LIST OF maths_value;
   tp2           : LIST OF maths_value;
   mem           : SET OF maths_value                         := [];
+  v1_string : STRING; v2_string : STRING; --*TY2021/02/18
+  tpl_integer : INTEGER; tp2_integer : INTEGER; --*TY2021/02/18
+  tpl_real : REAL; tp2_real : REAL; --*TY2021/02/18
 END_LOCAL;
   REPEAT i := 1 TO SIZEOF(expr.arguments);
     v := simplify_maths_value(expr.arguments[i]);
@@ -45093,7 +45246,8 @@
       END_IF;
       ef_like : IF ('STRING' IN TYPEOF(v1)) AND ('STRING' IN TYPEOF(v2))
       THEN
-        RETURN(ctmv(v1 LIKE v2));
+				v1_string := v1; v2_string := v2; --*TY2021/02/18
+ 				RETURN(ctmv(v1_string LIKE v2_string)); --*TY2021/02/18: RETURN(ctmv(v1 LIKE v2));
       END_IF;
       ef_subscript_b : IF ('BINARY' IN TYPEOF(v1)) AND ('INTEGER' IN TYPEOF(v2))
       THEN
@@ -45293,8 +45447,9 @@
                                THEN
                                  RETURN(?);
                                END_IF;
-                               REPEAT l := 1 TO SIZEOF(tpl);
-                                 tpl[j] := tpl[j] + tp2[j];
+                               REPEAT j := 1 TO SIZEOF(tpl); --*TY2021/02/18 bug fix: REPEAT l := 1 TO SIZEOF(tpl);
+																 tpl_integer := tpl[j]; tp2_integer := tp2[j]; --*TY2021/02/18
+ 																 tpl[j] := tpl_integer + tp2_integer; --*TY2021/02/18: tpl[j] := tpl[j] + tp2[j];
                                END_REPEAT;
                              END_IF;
                              REMOVE(vlist, i);
@@ -45322,7 +45477,8 @@
           RETURN(?);
         END_IF;
         REPEAT i := 1 TO SIZEOF(tpl);
-          tpl[i] := tpl[i] - tp2[i];
+ 				  tpl_integer := tpl[i]; tp2_integer := tp2[i]; --*TY2021/02/18
+ 					tpl[i] := tpl_integer - tp2_integer; --*TY2021/02/18: tpl[i] := tpl[i] - tp2[i];
         END_REPEAT;
         RETURN(ctmv(tpl));
       END_IF;
@@ -45345,7 +45501,8 @@
           RETURN(?);
         END_IF;
         REPEAT i := 1 TO SIZEOF(tpl);
-          j := j + tpl[i] * tp2[i];
+          tpl_integer := tpl[i]; tp2_integer := tp2[i]; --*TY2021/02/18
+          j := j + tpl_integer * tp2_integer; --*TY2021/02/18: j := j + tpl[i] * tp2[i];
         END_REPEAT;
         RETURN(ctmv(j));
       END_IF;
@@ -45382,8 +45539,9 @@
                                THEN
                                  RETURN(?);
                                END_IF;
-                               REPEAT l := 1 TO SIZEOF(tpl);
-                                 tpl[j] := tpl[j] + tp2[j];
+                               REPEAT j := 1 TO SIZEOF(tpl); --*TY2021/02/18 bug fix: REPEAT l := 1 TO SIZEOF(tpl);
+ 																 tpl_real := tpl[j]; tp2_real := tp2[j]; --*TY2021/02/18
+                                 tpl[j] := tpl_real + tp2_real; --*TY2021/02/18: tpl[j] := tpl[j] + tp2[j];
                                END_REPEAT;
                              END_IF;
                              REMOVE(vlist, i);
@@ -45411,7 +45569,8 @@
           RETURN(?);
         END_IF;
         REPEAT i := 1 TO SIZEOF(tpl);
-          tpl[i] := tpl[i] - tp2[i];
+          tpl_real := tpl[i]; tp2_real := tp2[i]; --*TY2021/02/18
+          tpl[i] := tpl_real - tp2_real; --*TY2021/02/18: tpl[i] := tpl[i] - tp2[i];
         END_REPEAT;
         RETURN(ctmv(tpl));
       END_IF;
@@ -45434,7 +45593,8 @@
           RETURN(?);
         END_IF;
         REPEAT i := 1 TO SIZEOF(tpl);
-          r := r + tpl[i] * tp2[i];
+ 					tpl_real := tpl[i]; tp2_real := tp2[i]; --*TY2021/02/18
+          r := r + tpl_real * tp2_real; --*TY2021/02/18: r := r + tpl[i] * tp2[i];
         END_REPEAT;
         RETURN(ctmv(r));
       END_IF;
@@ -45443,7 +45603,8 @@
         tpl := v1;
         r := 0.0;
         REPEAT i := 1 TO SIZEOF(tpl);
-          r := r + tpl[i] * tpl[i];
+ 					tpl_real := tpl[i]; tp2_real := tp2[i]; --*TY2021/02/18
+          r := r + tpl_real * tp2_real; --*TY2021/02/18: r := r + tpl[i] * tpl[i];
         END_REPEAT;
         RETURN(ctmv(SQRT(r)));
       END_IF;
@@ -45486,7 +45647,7 @@
                                THEN
                                  RETURN(?);
                                END_IF;
-                               REPEAT l := 1 TO SIZEOF(tpl);
+                               REPEAT j := 1 TO SIZEOF(tpl); --*TY2021/02/18 bug fix: REPEAT l := 1 TO SIZEOF(tpl);
                                  parts(tpl[j], p, q);
                                  parts(tp2[j], r, s);
                                  tpl[j] := makec(p + r, q + s);
@@ -45643,6 +45804,9 @@
   boo    : BOOLEAN;
   str    : STRING;
   nmb    : NUMBER;
+  v1_string : STRING; v2_string : STRING;	--*TY2021/02/18
+  v1_number : NUMBER; v2_number : NUMBER;	--*TY2021/02/18
+
 END_LOCAL;
   IF 'INT_LITERAL' IN types
   THEN
@@ -45799,7 +45963,9 @@
               ELSE
                 IF 'LIKE_EXPRESSION' IN types
                 THEN
-                  boo := bool(v1 LIKE v2);
+ 									v1_string := v1; v2_string := v2;	--*TY2021/02/18
+                  -- boo := bool(v1 LIKE v2);	--*TY2021/02/18
+ 									boo := bool(v1_string LIKE v2_string);	--*TY2021/02/18
                 ELSE
                   RETURN(?);
                 END_IF;
@@ -45846,7 +46012,9 @@
   END_IF;
   IF ('DIV_EXPRESSION' IN types) AND ('NUMBER' IN TYPEOF(v1)) AND ('NUMBER' IN TYPEOF(v2))
   THEN
-    RETURN(convert_to_maths_value(v1 DIV v2));
+ 		v1_number := v1; v2_number := v2; --*TY2021/02/18
+    -- RETURN(convert_to_maths_value(v1 DIV v2)); --*TY2021/02/18
+ 		RETURN(convert_to_maths_value(v1_number DIV v2_number)); --*TY2021/02/18
   END_IF;
   IF 'EQUALS_EXPRESSION' IN types
   THEN
@@ -45965,11 +46133,15 @@
   END_IF;
   IF ('MINUS_EXPRESSION' IN types) AND ('NUMBER' IN TYPEOF(v1)) AND ('NUMBER' IN TYPEOF(v2))
   THEN
-    RETURN(convert_to_maths_value(v1 - v2));
+ 		v1_number := v1; v2_number := v2; --*TY2021/02/18
+    -- RETURN(convert_to_maths_value(v1 - v2)); --*TY2021/02/18
+ 		RETURN(convert_to_maths_value(v1_number - v2_number)); --*TY2021/02/18
   END_IF;
   IF ('MOD_EXPRESSION' IN types) AND ('NUMBER' IN TYPEOF(v1)) AND ('NUMBER' IN TYPEOF(v2))
   THEN
-    RETURN(convert_to_maths_value(v1 MOD v2));
+ 		v1_number := v1; v2_number := v2; --*TY2021/02/18
+    -- RETURN(convert_to_maths_value(v1 MOD v2)); --*TY2021/02/18
+ 		RETURN(convert_to_maths_value(v1_number MOD v2_number)); --*TY2021/02/18
   END_IF;
   IF 'MULT_EXPRESSION' IN types
   THEN
@@ -46050,7 +46222,9 @@
   END_IF;
   IF ('POWER_EXPRESSION' IN types) AND ('NUMBER' IN TYPEOF(v1)) AND ('NUMBER' IN TYPEOF(v2))
   THEN
-    RETURN(convert_to_maths_value(v1 ** v2));
+ 		v1_number := v1; v2_number := v2; --*TY2021/02/18
+    -- RETURN(convert_to_maths_value(v1 ** v2)); --*TY2021/02/18
+    RETURN(convert_to_maths_value(v1_number ** v2_number)); --*TY2021/02/18
   END_IF;
   IF ('SIN_EXPRESSION' IN types) AND ('NUMBER' IN TYPEOF(v1))
   THEN
@@ -46058,7 +46232,9 @@
   END_IF;
   IF ('SLASH_EXPRESSION' IN types) AND ('NUMBER' IN TYPEOF(v1)) AND ('NUMBER' IN TYPEOF(v2))
   THEN
-    RETURN(convert_to_maths_value(v1 / v2));
+ 		v1_number := v1; v2_number := v2; --*TY2021/02/18
+    -- RETURN(convert_to_maths_value(v1 / v2)); --*TY2021/02/18
+    RETURN(convert_to_maths_value(v1_number / v2_number)); --*TY2021/02/18
   END_IF;
   IF ('SQUARE_ROOT_EXPRESSION' IN types) AND ('NUMBER' IN TYPEOF(v1))
   THEN
@@ -46361,7 +46537,7 @@
   spc2   : maths_space                  := simplify_maths_space(space2);
   types1 : SET OF STRING                := stripped_typeof(spc1);
   types2 : SET OF STRING                := stripped_typeof(spc2);
-  lgcl   : LOGICAL;
+  -- lgcl   : LOGICAL;	**TY2021/02/28 eliminated unused var
   cum    : LOGICAL;
   es_val : elementary_space_enumerators;
   bnd1   : REAL;
@@ -46989,8 +47165,8 @@
 LOCAL
   local_p_d : SET OF product_definition   := [];
   local_s_r : SET OF shape_representation := [];
-  i         : INTEGER;
-  j         : INTEGER;
+  -- i         : INTEGER;	**TY2021/02/28 eliminated unused var
+  -- j         : INTEGER;	**TY2021/02/28 eliminated unused var
 END_LOCAL;
   local_p_d := using_product_definition_of_shape_representation(item);
   IF (SIZEOF(local_p_d) <> 1)
@@ -47016,8 +47192,8 @@
 LOCAL
   local_s_a : SET OF shape_aspect         := [];
   local_s_r : SET OF shape_representation := [];
-  i         : INTEGER;
-  j         : INTEGER;
+  -- i         : INTEGER;	**TY2021/02/28 eliminated unused var
+  -- j         : INTEGER;	**TY2021/02/28 eliminated unused var
 END_LOCAL;
   local_s_a := using_shape_aspect_of_shape_representation(item);
   IF (SIZEOF(local_s_a) <> 1)
@@ -47068,10 +47244,49 @@
 
 FUNCTION using_items(item : founded_item_select;
                      checked_items : SET OF founded_item_select) : SET OF founded_item_select;
+
+ --*TY2021/06/27 alternative implementation proposal
+LOCAL
+	result_items    			: SET OF founded_item_select;
+	next_items      			: SET OF founded_item_select;
+ 	number_of_next_items 	: INTEGER;
+ 	next_item							: founded_item_select;
+ 	new_check_items 			: SET OF founded_item_select;
+	descendants     			: SET OF founded_item_select;
+END_LOCAL;
+  IF item IN checked_items THEN
+		RETURN([]);
+	END_IF;
+  checked_items := checked_items + item;
+
+  result_items := QUERY(z
+										 <* bag_to_set(USEDIN(item, ''))
+										 | ('AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.REPRESENTATION_ITEM' IN TYPEOF(z)) OR
+											 ('AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.FOUNDED_ITEM' IN TYPEOF(z)));
+	next_items := result_items - checked_items; 
+ 
+ 	number_of_next_items := SIZEOF(next_items);
+  IF number_of_next_items = 0 THEN
+ 		RETURN(result_items);
+ 	END_IF;
+
+ 	REPEAT i := 1 TO number_of_next_items;
+ 		next_item := next_items[i];
+ 		new_check_items := checked_items + (next_items - next_item);
+ 		descendants := using_items(next_item, new_check_items);
+		result_items := result_items + descendants;
+ 		checked_items := checked_items + next_item + descendants;
+ 	END_REPEAT;
+ 
+ 	RETURN(result_items);
+ 
+ 
+ (* --*TY2021/06/27 original implementation
 LOCAL
   new_check_items : SET OF founded_item_select;
   result_items    : SET OF founded_item_select;
   next_items      : SET OF founded_item_select;
+  found_descendants: SET OF founded_item_select; --*TY2021/06/10 to prevent duplicated search
 END_LOCAL;
   result_items := [];
   new_check_items := checked_items + item;
@@ -47084,11 +47299,17 @@
     REPEAT i := 1 TO HIINDEX(next_items);
       IF NOT (next_items[i] IN new_check_items)
       THEN
-        result_items := result_items + next_items[i] + using_items(next_items[i], new_check_items);
+				--*TY2021/06/10: result_items := result_items + next_items[i] + using_items(next_items[i], new_check_items);
+ 				found_descendants := next_items[i] + using_items(next_items[i], new_check_items);
+        new_check_items := new_check_items + found_descendants;
+ 				result_items := result_items + found_descendants;
+ 				--*TY2021/06/10 end modification
       END_IF;
     END_REPEAT;
   END_IF;
   RETURN(result_items);
+ --*TY2021/06/27 end of original implementation*)
+ 
 END_FUNCTION;
 
 FUNCTION using_product_definition_of_shape_aspect(item : shape_aspect) : product_definition;
@@ -47104,7 +47325,8 @@
 LOCAL
   local_s_d_r : SET OF shape_definition_representation := [];
   local_p_d   : SET OF product_definition              := [];
-  i           : INTEGER;
+  -- i           : INTEGER;	**TY2021/02/28 eliminated unused var
+  p_d : product_definition; --*TY2021/02/24
 END_LOCAL;
   local_s_d_r := QUERY(i1
                        <* bag_to_set(USEDIN(item,
@@ -47118,8 +47340,9 @@
       IF ('AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PRODUCT_DEFINITION' IN
           TYPEOF(local_s_d_r[i]\property_definition_representation.definition\property_definition.definition))
       THEN
+ 				p_d := local_s_d_r[i]\property_definition_representation.definition\property_definition.definition; --*TY2021/02/24
         local_p_d := local_p_d +
-                     local_s_d_r[i]\property_definition_representation.definition\property_definition.definition;
+                     p_d; --*TY2024/02/24: local_s_d_r[i]\property_definition_representation.definition\property_definition.definition;
       END_IF;
     END_IF;
   END_REPEAT;
@@ -47132,8 +47355,8 @@
   local_results            : SET OF representation      := [];
   local_representation_map : SET OF representation_map  := [];
   intermediate_items       : SET OF representation_item := [];
-  i                        : INTEGER;
-  j                        : INTEGER;
+  -- i                        : INTEGER;	**TY2021/02/28 eliminated unused var
+  -- j                        : INTEGER;	**TY2021/02/28 eliminated unused var
 END_LOCAL;
   local_results := QUERY(z
                          <* using_representations(item)
@@ -47155,7 +47378,7 @@
                                               'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.MAPPED_ITEM.MAPPING_SOURCE'));
     END_REPEAT;
     REPEAT j := 1 TO HIINDEX(intermediate_items);
-      results := results + bag_to_set(using_representation_with_mapping(intermediate_items[j]));
+      results := results + using_representation_with_mapping(intermediate_items[j]); --*ty2021/02/18 bug fix: results := results + bag_to_set(using_representation_with_mapping(intermediate_items[j]));
     END_REPEAT;
   END_IF;
   RETURN(results);
@@ -47197,7 +47420,8 @@
   local_s_d_r  : SET OF shape_definition_representation := [];
   local_s_d_r2 : BAG OF shape_definition_representation := [];
   local_s_a    : SET OF shape_aspect                    := [];
-  i            : INTEGER;
+  -- i            : INTEGER;	**TY2021/02/28 eliminated unused var
+  s_a : shape_aspect;--*TY2021/02/24
 END_LOCAL;
   local_s_d_r2 := local_s_d_r2 +
                   QUERY(pdr
@@ -47210,8 +47434,9 @@
     IF ('AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SHAPE_ASPECT' IN
         TYPEOF(local_s_d_r[i]\property_definition_representation.definition\property_definition.definition))
     THEN
+			s_a := local_s_d_r[i]\property_definition_representation.definition\property_definition.definition; --*TY2021/02/24
       local_s_a := local_s_a +
-                   local_s_d_r[i]\property_definition_representation.definition\property_definition.definition;
+                   s_a; --*TY2021/02/24: local_s_d_r[i]\property_definition_representation.definition\property_definition.definition;
     END_IF;
   END_REPEAT;
   RETURN(local_s_a);
@@ -47966,7 +48191,7 @@
 LOCAL
   id_length : INTEGER := LENGTH(attid);
   id_valid  : BOOLEAN := true;
-  i         : INTEGER;
+  -- i         : INTEGER;	**TY2021/02/28 eliminated unused var
 END_LOCAL;
   IF NOT (attid[1] IN letters)
   THEN
@@ -47984,7 +48209,7 @@
 
 FUNCTION validate_countersink_radii(cskhole : solid_with_stepped_round_hole_and_conical_transitions) : BOOLEAN;
 LOCAL
-  i       : INTEGER;
+  -- i       : INTEGER;	**TY2021/02/28 eliminated unused var
   j       : INTEGER;
   n       : INTEGER                 := 1 + cskhole\solid_with_stepped_round_hole.segments;
   smaller : positive_length_measure;
@@ -48854,6 +49079,7 @@
   pdpdca : SET OF product_definition                     := [];
   pdadr  : SET OF product_definition                     := [];
   pass   : BOOLEAN                                       := true;
+  pd : product_definition; --*TY2021/02/24
 END_LOCAL;
   REPEAT i := 1 TO HIINDEX(pdca);
     pdpdca := pdpdca + pdca[i]\product_definition_context_association.definition;
@@ -48869,7 +49095,8 @@
       IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PRODUCT_DEFINITION' IN
          TYPEOF(adr[i]\applied_document_reference.items[j])
       THEN
-        pdadr := pdadr + adr[i]\applied_document_reference.items[j];
+ 				pd := adr[i]\applied_document_reference.items[j]; --*TY2021/02/24
+        pdadr := pdadr + pd; --*TY2021/02/24: adr[i]\applied_document_reference.items[j];
       END_IF;
     END_REPEAT;
   END_REPEAT;
@@ -48999,9 +49226,9 @@
                         next_assembly_usage_occurrence,
                         product_related_product_category);
 LOCAL
-  i     : INTEGER;
-  j     : INTEGER;
-  k     : INTEGER;
+  -- i     : INTEGER;	**TY2021/02/28 eliminated unused var
+  -- j     : INTEGER;	**TY2021/02/28 eliminated unused var
+  -- k     : INTEGER;	**TY2021/02/28 eliminated unused var
   dkuhr : LOGICAL := true;
   nnauo : INTEGER;
   nprpc : INTEGER := 0;
@@ -49046,10 +49273,10 @@
 
 RULE ply_stock_material_select FOR (product_related_product_category, make_from_usage_option);
 LOCAL
-  i     : INTEGER;
-  j     : INTEGER;
-  k     : INTEGER;
-  kp    : INTEGER;
+  -- i     : INTEGER;	**TY2021/02/28 eliminated unused var
+  -- j     : INTEGER;	**TY2021/02/28 eliminated unused var
+  -- k     : INTEGER;	**TY2021/02/28 eliminated unused var
+  -- kp    : INTEGER;	**TY2021/02/28 eliminated unused var
   dkuhr : LOGICAL;
   nmfuo : INTEGER;
   nprpc : INTEGER := 0;
@@ -49939,4 +50166,2664 @@
 WHERE
   WR1: dependently_instantiated(all_instances, set_of_input_types, previous_in_chain);
 END_RULE;
-END_SCHEMA;
+ 
+ ---------------------------------------------------------------------------------------
+ --*TY2021/12/31 added missing functions from ISO 10303-41 action_schema
+ (*
+ $Id: action_schema.exp,v 1.32 2019/04/16 23:12:19 tom Exp $
+ ISO 10303 TC184/SC4/WG12 N10230
+
+ EXPRESS Source:
+ ISO 10303-41 ed6 Fundamentals of product description and support - Action schema
+
+ The following permission notice and disclaimer shall be included in all copies of this EXPRESS schema ("the Schema"), 
+ and derivations of the Schema:
+
+ Copyright ISO 2019  All rights reserved
+ Permission is hereby granted, free of charge in perpetuity, to any person obtaining a copy of the Schema,
+ to use, copy, modify, merge and distribute free of charge, copies of the Schema for the purposes of developing, 
+ implementing, installing and using software based on the Schema, and to permit persons to whom the Schema is furnished to do so, 
+ subject to the following conditions:
+
+ THE SCHEMA IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
+ INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
+ IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
+ DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
+ ARISING FROM, OUT OF OR IN CONNECTION WITH THE SCHEMA OR THE 
+ USE OR OTHER DEALINGS IN THE SCHEMA.
+
+ In addition, any modified copy of the Schema shall include the following notice:
+
+ THIS SCHEMA HAS BEEN MODIFIED FROM THE SCHEMA DEFINED IN
+ ISO 10303-41 ed4 Fundamentals of product description and support - Action schema
+ AND SHOULD NOT BE INTERPRETED AS COMPLYING WITH THAT STANDARD
+ *)
+
+ --SCHEMA action_schema '{iso standard 10303 part(41) version(8) object(1) action_schema(1)}';
+ FUNCTION acyclic_action_method_relationship (relation : action_method_relationship; relatives : SET [1:?] OF action_method; specific_relation : STRING):BOOLEAN;
+	 LOCAL
+		 x : SET OF action_method_relationship;
+	 END_LOCAL;
+
+	 IF relation.relating_method IN relatives THEN
+		 RETURN (FALSE);
+	 END_IF;
+	 x := QUERY(am <* bag_to_set(USEDIN(relation.relating_method, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ACTION_METHOD_RELATIONSHIP.RELATED')) | specific_relation IN TYPEOF(am));
+	 REPEAT i := 1 TO HIINDEX(x);
+		 IF NOT acyclic_action_method_relationship(x[i], relatives + relation.relating_method, specific_relation) THEN
+			 RETURN (FALSE);
+		 END_IF;
+	 END_REPEAT;
+	 RETURN (TRUE);
+ END_FUNCTION;
+
+ FUNCTION acyclic_action_relationship (relation : action_relationship; relatives : SET [1:?] OF action; specific_relation : STRING):BOOLEAN;
+	 LOCAL
+		 x : SET OF action_relationship;
+	 END_LOCAL;
+
+	 IF relation.relating_action IN relatives THEN
+		 RETURN (FALSE);
+	 END_IF;
+	 x := QUERY(actn <* bag_to_set(USEDIN(relation.relating_action, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ACTION_RELATIONSHIP.RELATED_ACTION')) | specific_relation IN TYPEOF(actn));
+	 REPEAT i := 1 TO HIINDEX(x);
+		 IF NOT acyclic_action_relationship(x[i], relatives + relation.relating_action, specific_relation) THEN
+			 RETURN (FALSE);
+		 END_IF;
+	 END_REPEAT;
+	 RETURN (TRUE);
+ END_FUNCTION;
+
+ FUNCTION acyclic_action_resource_relationship (relation : action_resource_relationship; relatives : SET [1:?] OF action_resource; specific_relation : STRING):BOOLEAN;
+	 LOCAL
+		 x : SET OF action_resource_relationship;
+	 END_LOCAL;
+
+	 IF relation.relating_resource IN relatives THEN
+		 RETURN (FALSE);
+	 END_IF;
+	 x := QUERY(ar <* bag_to_set(USEDIN(relation.relating_resource, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ACTION_RESOURCE_RELATIONSHIP.RELATED_RESOURCE')) | specific_relation IN TYPEOF(ar));
+	 REPEAT i := 1 TO HIINDEX(x);
+		 IF NOT acyclic_action_resource_relationship(x[i], relatives + relation.relating_resource, specific_relation) THEN
+			 RETURN (FALSE);
+		 END_IF;
+	 END_REPEAT;
+	 RETURN (TRUE);
+ END_FUNCTION;
+
+ FUNCTION acyclic_versioned_action_request_relationship (relation : versioned_action_request_relationship; relatives : SET OF versioned_action_request; specific_relation : STRING):BOOLEAN;
+	 LOCAL
+		 x : SET OF versioned_action_request_relationship;
+	 END_LOCAL;
+
+	 IF relation.relating_versioned_action_request IN relatives THEN
+		 RETURN (FALSE);
+	 END_IF;
+	 x := QUERY(varr <* bag_to_set(USEDIN(relation.relating_versioned_action_request, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.VERSIONED_ACTION_REQUEST_RELATIONSHIP.RELATED_VERSIONED_ACTION_REQUEST')) | specific_relation IN TYPEOF(varr));
+	 REPEAT i := 1 TO HIINDEX(x);
+		 IF NOT acyclic_versioned_action_request_relationship(x[i], relatives + relation.relating_versioned_action_request, specific_relation) THEN
+			 RETURN (FALSE);
+		 END_IF;
+	 END_REPEAT;
+	 RETURN (TRUE);
+ END_FUNCTION;
+ 
+
+--END_SCHEMA; -- action_schema
+
+ 
+ --*TY2021/12/31 added missing functions from ISO 10303-41 approval_schema
+ (*
+ $Id: approval_schema.exp,v 1.15 2014/03/04 00:30:30  Exp $
+ ISO 10303 TC184/SC4/WG12 N8369
+
+ EXPRESS Source:
+ ISO 10303-41 ed4 Fundamentals of product description and support - Approval schema
+
+ The following permission notice and disclaimer shall be included in all copies of this EXPRESS schema ("the Schema"), 
+ and derivations of the Schema:
+
+ Copyright ISO 2014  All rights reserved
+ Permission is hereby granted, free of charge in perpetuity, to any person obtaining a copy of the Schema,
+ to use, copy, modify, merge and distribute free of charge, copies of the Schema for the purposes of developing, 
+ implementing, installing and using software based on the Schema, and to permit persons to whom the Schema is furnished to do so, 
+ subject to the following conditions:
+
+ THE SCHEMA IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
+ INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
+ IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
+ DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
+ ARISING FROM, OUT OF OR IN CONNECTION WITH THE SCHEMA OR THE 
+ USE OR OTHER DEALINGS IN THE SCHEMA.
+
+ In addition, any modified copy of the Schema shall include the following notice:
+
+ THIS SCHEMA HAS BEEN MODIFIED FROM THE SCHEMA DEFINED IN
+ ISO 10303-41 ed4 Fundamentals of product description and support - Approval schema
+ AND SHOULD NOT BE INTERPRETED AS COMPLYING WITH THAT STANDARD
+ *)
+
+ --SCHEMA approval_schema '{iso standard 10303 part(41) version(7) object(1) approval_schema(3)}';
+ FUNCTION acyclic_approval_relationship (relation : approval_relationship; relatives : SET [1:?] OF approval; specific_relation : STRING):BOOLEAN;
+	 LOCAL
+		 x : SET OF approval_relationship;
+	 END_LOCAL;
+
+	 IF relation.relating_approval IN relatives THEN
+		 RETURN (FALSE);
+	 END_IF;
+	 x := QUERY(app <* bag_to_set(USEDIN(relation.relating_approval, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.APPROVAL_RELATIONSHIP.RELATED_APPROVAL')) | specific_relation IN TYPEOF(app));
+	 REPEAT i := 1 TO HIINDEX(x);
+		 IF NOT acyclic_approval_relationship(x[i], relatives + relation.relating_approval, specific_relation) THEN
+			 RETURN (FALSE);
+		 END_IF;
+	 END_REPEAT;
+	 RETURN (TRUE);
+ END_FUNCTION;
+
+--END_SCHEMA;	-- approval_schema
+
+ --*TY2021/12/31 added missing functions from ISO 10303-41 contract_schema
+ (*
+ $Id: contract_schema.exp,v 1.12 2014/03/04 00:30:32  Exp $
+ ISO 10303 TC184/SC4/WG12 N8369
+
+ EXPRESS Source:
+ ISO 10303-41 ed4 Fundamentals of product description and support - Contract schema
+
+ The following permission notice and disclaimer shall be included in all copies of this EXPRESS schema ("the Schema"), 
+ and derivations of the Schema:
+
+ Copyright ISO 2014  All rights reserved
+ Permission is hereby granted, free of charge in perpetuity, to any person obtaining a copy of the Schema,
+ to use, copy, modify, merge and distribute free of charge, copies of the Schema for the purposes of developing, 
+ implementing, installing and using software based on the Schema, and to permit persons to whom the Schema is furnished to do so, 
+ subject to the following conditions:
+
+ THE SCHEMA IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
+ INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
+ IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
+ DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
+ ARISING FROM, OUT OF OR IN CONNECTION WITH THE SCHEMA OR THE 
+ USE OR OTHER DEALINGS IN THE SCHEMA.
+
+ In addition, any modified copy of the Schema shall include the following notice:
+
+ THIS SCHEMA HAS BEEN MODIFIED FROM THE SCHEMA DEFINED IN
+ ISO 10303-41 ed4 Fundamentals of product description and support - Contract schema
+ AND SHOULD NOT BE INTERPRETED AS COMPLYING WITH THAT STANDARD
+ *)
+
+ --SCHEMA contract_schema '{iso standard 10303 part(41) version(3) object(1) contract_schema(6)}';
+ FUNCTION acyclic_contract_relationship (relation : contract_relationship; relatives : SET [1:?] OF contract; specific_relation : STRING):BOOLEAN;
+	 LOCAL
+		 x : SET OF contract_relationship;
+	 END_LOCAL;
+
+	 IF relation.relating_contract IN relatives THEN
+		 RETURN (FALSE);
+	 END_IF;
+	 x := QUERY(cont <* bag_to_set(USEDIN(relation.relating_contract, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CONTRACT_RELATIONSHIP.RELATED_CONTRACT')) | specific_relation IN TYPEOF(cont));
+	 REPEAT i := 1 TO HIINDEX(x);
+		 IF NOT acyclic_contract_relationship(x[i], relatives + relation.relating_contract, specific_relation) THEN
+			 RETURN (FALSE);
+		 END_IF;
+	 END_REPEAT;
+	 RETURN (TRUE);
+ END_FUNCTION;
+
+--END_SCHEMA; -- contract_schema
+
+ 
+ --*TY2021/12/31 added missing functions from ISO 10303-41 date_time_schema
+ (*
+ $Id$
+ ISO 10303 TC184/SC4/WG12 N8369
+
+ EXPRESS Source:
+ ISO 10303-41 ed4 Fundamentals of product description and support - Date time schema
+
+ The following permission notice and disclaimer shall be included in all copies of this EXPRESS schema ("the Schema"), 
+ and derivations of the Schema:
+
+ Copyright ISO 2014  All rights reserved
+ Permission is hereby granted, free of charge in perpetuity, to any person obtaining a copy of the Schema,
+ to use, copy, modify, merge and distribute free of charge, copies of the Schema for the purposes of developing, 
+ implementing, installing and using software based on the Schema, and to permit persons to whom the Schema is furnished to do so, 
+ subject to the following conditions:
+
+ THE SCHEMA IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
+ INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
+ IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
+ DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
+ ARISING FROM, OUT OF OR IN CONNECTION WITH THE SCHEMA OR THE 
+ USE OR OTHER DEALINGS IN THE SCHEMA.
+
+ In addition, any modified copy of the Schema shall include the following notice:
+
+ THIS SCHEMA HAS BEEN MODIFIED FROM THE SCHEMA DEFINED IN
+ ISO 10303-41 ed4 Fundamentals of product description and support - Date time schema
+ AND SHOULD NOT BE INTERPRETED AS COMPLYING WITH THAT STANDARD
+ *)
+
+ --SCHEMA date_time_schema '{iso standard 10303 part(41) version(7) object(1) date_time_schema(7)}';
+ FUNCTION acyclic_event_occurrence_relationship
+	(relation : event_occurrence_relationship; relatives : SET[1:?] OF event_occurrence; specific_relation : STRING) : BOOLEAN;
+	LOCAL
+			 x : SET OF event_occurrence_relationship;
+		 END_LOCAL;
+
+		 IF relation.relating_event IN relatives THEN
+			 RETURN (FALSE);
+		 END_IF;
+		 x := QUERY(evnt <* bag_to_set(USEDIN(relation.relating_event, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.EVENT_OCCURRENCE_RELATIONSHIP.RELATED_EVENT')) | specific_relation IN TYPEOF(evnt));
+		 REPEAT i := 1 TO HIINDEX(x);
+			 IF NOT acyclic_event_occurrence_relationship(x[i], relatives + relation.relating_event, specific_relation) THEN
+				 RETURN (FALSE);
+			 END_IF;
+		 END_REPEAT;
+		 RETURN (TRUE);
+ END_FUNCTION;
+
+ FUNCTION acyclic_time_interval_relationship
+	(relation : time_interval_relationship; relatives : SET[1:?] OF time_interval; specific_relation : STRING) : BOOLEAN;
+	 LOCAL
+			 x : SET OF time_interval_relationship;
+		 END_LOCAL;
+
+		 IF relation.relating_time_interval IN relatives THEN
+			 RETURN (FALSE);
+		 END_IF;
+		 x := QUERY(ti <* bag_to_set(USEDIN(relation.relating_time_interval, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.TIME_INTERVAL_RELATIONSHIP.RELATED_TIME_INTERVAL')) | specific_relation IN TYPEOF(ti));
+		 REPEAT i := 1 TO HIINDEX(x);
+			 IF NOT acyclic_time_interval_relationship(x[i], relatives + relation.relating_time_interval, specific_relation) THEN
+				 RETURN (FALSE);
+			 END_IF;
+		 END_REPEAT;
+		 RETURN (TRUE);
+ END_FUNCTION;
+ --END_SCHEMA; -- date_time_schema
+
+ 
+ --*TY2021/12/31 added missing functions from ISO 10303-41 document_schema
+ (*
+ $Id: document_schema.exp,v 1.15 2014/03/04 00:30:33  Exp $
+ ISO 10303 TC184/SC4/WG12 N8369
+
+ EXPRESS Source:
+ ISO 10303-41 ed4 Fundamentals of product description and support - Document schema
+
+ The following permission notice and disclaimer shall be included in all copies of this EXPRESS schema ("the Schema"), 
+ and derivations of the Schema:
+
+ Copyright ISO 2014  All rights reserved
+ Permission is hereby granted, free of charge in perpetuity, to any person obtaining a copy of the Schema,
+ to use, copy, modify, merge and distribute free of charge, copies of the Schema for the purposes of developing, 
+ implementing, installing and using software based on the Schema, and to permit persons to whom the Schema is furnished to do so, 
+ subject to the following conditions:
+
+ THE SCHEMA IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
+ INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
+ IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
+ DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
+ ARISING FROM, OUT OF OR IN CONNECTION WITH THE SCHEMA OR THE 
+ USE OR OTHER DEALINGS IN THE SCHEMA.
+
+ In addition, any modified copy of the Schema shall include the following notice:
+
+ THIS SCHEMA HAS BEEN MODIFIED FROM THE SCHEMA DEFINED IN
+ ISO 10303-41 ed4 Fundamentals of product description and support - Document schema
+ AND SHOULD NOT BE INTERPRETED AS COMPLYING WITH THAT STANDARD
+ *)
+
+ --SCHEMA document_schema '{iso standard 10303 part(41) version(4) object(1) document_schema(8)}';
+ FUNCTION acyclic_document_relationship (relation : document_relationship; relatives : SET [1:?] OF document; specific_relation : STRING):BOOLEAN;
+	 LOCAL
+		 x : SET OF document_relationship;
+	 END_LOCAL;
+
+	 IF relation.relating_document IN relatives THEN
+		 RETURN (FALSE);
+	 END_IF;
+	 x := QUERY(doc <* bag_to_set(USEDIN(relation.relating_document, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.DOCUMENT_RELATIONSHIP.RELATED_DOCUMENT')) | specific_relation IN TYPEOF(doc));
+	 REPEAT i := 1 TO HIINDEX(x);
+		 IF NOT acyclic_document_relationship(x[i], relatives + relation.relating_document, specific_relation) THEN
+			 RETURN (FALSE);
+		 END_IF;
+	 END_REPEAT;
+	 RETURN (TRUE);
+ END_FUNCTION;
+
+--END_SCHEMA; -- document_schema
+ 
+
+ --*TY2021/12/31 added missing functions from ISO 10303-41 effectivity_schema
+ (*
+ $Id: effectivity_schema.exp,v 1.19 2019/05/08 19:31:23 sjohnston Exp $
+ ISO 10303 TC184/SC4/WG12 N10232
+
+ EXPRESS Source:
+ ISO 10303-41 ed6 Fundamentals of product description and support - Effectivity schema
+
+ The following permission notice and disclaimer shall be included in all copies of this EXPRESS schema ("the Schema"), 
+ and derivations of the Schema:
+
+ Copyright ISO 2019  All rights reserved
+ Permission is hereby granted, free of charge in perpetuity, to any person obtaining a copy of the Schema,
+ to use, copy, modify, merge and distribute free of charge, copies of the Schema for the purposes of developing, 
+ implementing, installing and using software based on the Schema, and to permit persons to whom the Schema is furnished to do so, 
+ subject to the following conditions:
+
+ THE SCHEMA IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
+ INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
+ IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
+ DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
+ ARISING FROM, OUT OF OR IN CONNECTION WITH THE SCHEMA OR THE 
+ USE OR OTHER DEALINGS IN THE SCHEMA.
+
+ In addition, any modified copy of the Schema shall include the following notice:
+
+ THIS SCHEMA HAS BEEN MODIFIED FROM THE SCHEMA DEFINED IN
+ ISO 10303-41 ed4 Fundamentals of product description and support - Effectivity schema
+ AND SHOULD NOT BE INTERPRETED AS COMPLYING WITH THAT STANDARD
+ *)
+
+ --SCHEMA effectivity_schema '{iso standard 10303 part(41) version(8) object(1) effectivity_schema(9)}';
+ FUNCTION acyclic_effectivity_relationship (relation : effectivity_relationship; relatives : SET [1:?] OF effectivity; specific_relation : STRING):BOOLEAN;
+	 LOCAL
+		 x : SET OF effectivity_relationship;
+	 END_LOCAL;
+
+	 IF relation.relating_effectivity IN relatives THEN
+		 RETURN (FALSE);
+	 END_IF;
+	 x := QUERY(eff <* bag_to_set(USEDIN(relation.relating_effectivity, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.EFFECTIVITY_RELATIONSHIP.RELATED_EFFECTIVITY')) | specific_relation IN TYPEOF(eff));
+	 REPEAT i := 1 TO HIINDEX(x);
+		 IF NOT acyclic_effectivity_relationship(x[i], relatives + relation.relating_effectivity, specific_relation) THEN
+			 RETURN (FALSE);
+		 END_IF;
+	 END_REPEAT;
+	 RETURN (TRUE);
+ END_FUNCTION;
+
+--END_SCHEMA; -- effectivity_schema
+
+ 
+ 
+ --*TY2021/12/31 added missing functions from ISO 10303-41 experience_schema
+ (*
+ $Id: experience_schema.exp,v 1.19 2014/03/04 00:30:35  Exp $
+ ISO 10303 TC184/SC4/WG12 N8369
+
+ EXPRESS Source:
+ ISO 10303-41 ed4 Fundamentals of product description and support - Experience schema
+
+ The following permission notice and disclaimer shall be included in all copies of this EXPRESS schema ("the Schema"), 
+ and derivations of the Schema:
+
+ Copyright ISO 2014  All rights reserved
+ Permission is hereby granted, free of charge in perpetuity, to any person obtaining a copy of the Schema,
+ to use, copy, modify, merge and distribute free of charge, copies of the Schema for the purposes of developing, 
+ implementing, installing and using software based on the Schema, and to permit persons to whom the Schema is furnished to do so, 
+ subject to the following conditions:
+
+ THE SCHEMA IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
+ INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
+ IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
+ DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
+ ARISING FROM, OUT OF OR IN CONNECTION WITH THE SCHEMA OR THE 
+ USE OR OTHER DEALINGS IN THE SCHEMA.
+
+ In addition, any modified copy of the Schema shall include the following notice:
+
+ THIS SCHEMA HAS BEEN MODIFIED FROM THE SCHEMA DEFINED IN
+ ISO 10303-41 ed4 Fundamentals of product description and support - Experience schema
+ AND SHOULD NOT BE INTERPRETED AS COMPLYING WITH THAT STANDARD
+ *)
+
+ --SCHEMA experience_schema '{iso standard 10303 part(41) version(4) object(1) experience_schema(10)}';
+ (*--ERROR PE007: Reference to undefined type experience.
+ FUNCTION acyclic_experience_relationship (relation : experience_relationship; relatives : SET OF experience; specific_relation : STRING):BOOLEAN;
+	 LOCAL
+		 x : SET OF experience_relationship;
+	 END_LOCAL;
+
+	 IF relation.relating_experience IN relatives THEN
+		 RETURN (FALSE);
+	 END_IF;
+	 x := QUERY(expr <* bag_to_set(USEDIN(relation.relating_experience, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.EXPERIENCE_RELATIONSHIP.RELATED_EXPERIENCE')) | specific_relation IN TYPEOF(expr));
+	 REPEAT i := 1 TO HIINDEX(x);
+		 IF NOT acyclic_experience_relationship(x[i], relatives + relation.relating_experience, specific_relation) THEN
+			 RETURN (FALSE);
+		 END_IF;
+	 END_REPEAT;
+	 RETURN (TRUE);
+ END_FUNCTION;
+ *)
+
+ (*--ERROR PE007: Reference to undefined type experience_type.
+ FUNCTION acyclic_experience_type_relationship (relation : experience_type_relationship; relatives : SET OF experience_type; specific_relation : STRING):BOOLEAN;
+	 LOCAL
+		 x : SET OF experience_type_relationship;
+	 END_LOCAL;
+
+	 IF relation.relating_experience_type IN relatives THEN
+		 RETURN (FALSE);
+	 END_IF;
+	 x := QUERY(exptyp <* bag_to_set(USEDIN(relation.relating_experience_type, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.EXPERIENCE_TYPE_RELATIONSHIP.RELATED_EXPERIENCE_TYPE')) | specific_relation IN TYPEOF(exptyp));
+	 REPEAT i := 1 TO HIINDEX(x);
+		 IF NOT acyclic_experience_type_relationship(x[i], relatives + relation.relating_experience_type, specific_relation) THEN
+			 RETURN (FALSE);
+		 END_IF;
+	 END_REPEAT;
+	 RETURN (TRUE);
+ END_FUNCTION;
+ *)
+
+--END_SCHEMA; -- experience_schema
+
+ 
+ 
+ --*TY2021/12/31 added missing functions from ISO 10303-41 external_reference_schema
+ (*
+ $Id: external_reference_schema.exp,v 1.13 2014/03/04 00:30:36  Exp $
+ ISO 10303 TC184/SC4/WG12 N8369
+
+ EXPRESS Source:
+ ISO 10303-41 ed4 Fundamentals of product description and support - External reference schema
+
+ The following permission notice and disclaimer shall be included in all copies of this EXPRESS schema ("the Schema"), 
+ and derivations of the Schema:
+
+ Copyright ISO 2014  All rights reserved
+ Permission is hereby granted, free of charge in perpetuity, to any person obtaining a copy of the Schema,
+ to use, copy, modify, merge and distribute free of charge, copies of the Schema for the purposes of developing, 
+ implementing, installing and using software based on the Schema, and to permit persons to whom the Schema is furnished to do so, 
+ subject to the following conditions:
+
+ THE SCHEMA IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
+ INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
+ IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
+ DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
+ ARISING FROM, OUT OF OR IN CONNECTION WITH THE SCHEMA OR THE 
+ USE OR OTHER DEALINGS IN THE SCHEMA.
+
+ In addition, any modified copy of the Schema shall include the following notice:
+
+ THIS SCHEMA HAS BEEN MODIFIED FROM THE SCHEMA DEFINED IN
+ ISO 10303-41 ed4 Fundamentals of product description and support - External reference schema
+ AND SHOULD NOT BE INTERPRETED AS COMPLYING WITH THAT STANDARD
+ *)
+
+ --SCHEMA external_reference_schema '{iso standard 10303 part(41) version(7) object(1) external_reference_schema(11)}';
+ FUNCTION acyclic_external_source_relationship (relation : external_source_relationship; relatives : SET [1:?] OF external_source; specific_relation : STRING):BOOLEAN;
+	 LOCAL
+		 x : SET OF external_source_relationship;
+	 END_LOCAL;
+
+	 IF relation.relating_source IN relatives THEN
+		 RETURN (FALSE);
+	 END_IF;
+	 x := QUERY(es <* bag_to_set(USEDIN(relation.relating_source, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.EXTERNAL_SOURCE_RELATIONSHIP.RELATED_SOURCE')) | specific_relation IN TYPEOF(es));
+	 REPEAT i := 1 TO HIINDEX(x);
+		 IF NOT acyclic_external_source_relationship(x[i], relatives + relation.relating_source, specific_relation) THEN
+			 RETURN (FALSE);
+		 END_IF;
+	 END_REPEAT;
+	 RETURN (TRUE);
+ END_FUNCTION;
+
+ FUNCTION acyclic_externally_defined_item_relationship (relation : externally_defined_item_relationship; relatives : SET [1:?] OF externally_defined_item; specific_relation : STRING):BOOLEAN;
+	 LOCAL
+		 x : SET OF externally_defined_item_relationship;
+	 END_LOCAL;
+
+	 IF relation.relating_item IN relatives THEN
+		 RETURN (FALSE);
+	 END_IF;
+	 x := QUERY(edi <* bag_to_set(USEDIN(relation.relating_item, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.EXTERNALLY_DEFINED_ITEM_RELATIONSHIP.RELATED_ITEM')) | specific_relation IN TYPEOF(edi));
+	 REPEAT i := 1 TO HIINDEX(x);
+		 IF NOT acyclic_externally_defined_item_relationship(x[i], relatives + relation.relating_item, specific_relation) THEN
+			 RETURN (FALSE);
+		 END_IF;
+	 END_REPEAT;
+	 RETURN (TRUE);
+ END_FUNCTION;
+
+--END_SCHEMA; -- external_reference_schema
+
+ 
+ 
+ 
+ --*TY2021/12/31 added missing functions from ISO 10303-41 group_schema
+ (*
+ $Id: group_schema.exp,v 1.13 2014/03/04 00:30:37  Exp $
+ ISO 10303 TC184/SC4/WG12 N8369
+
+ EXPRESS Source:
+ ISO 10303-41 ed4 Fundamentals of product description and support - Group schema
+
+ The following permission notice and disclaimer shall be included in all copies of this EXPRESS schema ("the Schema"), 
+ and derivations of the Schema:
+
+ Copyright ISO 2014  All rights reserved
+ Permission is hereby granted, free of charge in perpetuity, to any person obtaining a copy of the Schema,
+ to use, copy, modify, merge and distribute free of charge, copies of the Schema for the purposes of developing, 
+ implementing, installing and using software based on the Schema, and to permit persons to whom the Schema is furnished to do so, 
+ subject to the following conditions:
+
+ THE SCHEMA IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
+ INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
+ IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
+ DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
+ ARISING FROM, OUT OF OR IN CONNECTION WITH THE SCHEMA OR THE 
+ USE OR OTHER DEALINGS IN THE SCHEMA.
+
+ In addition, any modified copy of the Schema shall include the following notice:
+
+ THIS SCHEMA HAS BEEN MODIFIED FROM THE SCHEMA DEFINED IN
+ ISO 10303-41 ed4 Fundamentals of product description and support - Group schema
+ AND SHOULD NOT BE INTERPRETED AS COMPLYING WITH THAT STANDARD
+ *)
+
+ --SCHEMA group_schema '{iso standard 10303 part(41) version(7) object(1) group_schema(12)}';
+ FUNCTION acyclic_group_relationship (relation : group_relationship; relatives : SET [1:?] OF group; specific_relation : STRING):BOOLEAN;
+	 LOCAL
+		 x : SET OF group_relationship;
+	 END_LOCAL;
+
+	 IF relation.relating_group IN relatives THEN
+		 RETURN (FALSE);
+	 END_IF;
+	 x := QUERY(grp <* bag_to_set(USEDIN(relation.relating_group, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.GROUP_RELATIONSHIP.RELATED_GROUP')) | specific_relation IN TYPEOF(grp));
+	 REPEAT i := 1 TO HIINDEX(x);
+		 IF NOT acyclic_group_relationship(x[i], relatives + relation.relating_group, specific_relation) THEN
+			 RETURN (FALSE);
+		 END_IF;
+	 END_REPEAT;
+	 RETURN (TRUE);
+ END_FUNCTION;
+
+--END_SCHEMA; -- group_schema
+
+ 
+ 
+ 
+ --*TY2021/12/31 added missing functions from ISO 10303-41 location_schema
+ (*
+ $Id: location_schema.exp,v 1.17 2014/03/04 00:30:38  Exp $
+ ISO 10303 TC184/SC4/WG12 N8369
+
+ EXPRESS Source:
+ ISO 10303-41 ed4 Fundamentals of product description and support - Location schema
+
+ The following permission notice and disclaimer shall be included in all copies of this EXPRESS schema ("the Schema"), 
+ and derivations of the Schema:
+
+ Copyright ISO 2014  All rights reserved
+ Permission is hereby granted, free of charge in perpetuity, to any person obtaining a copy of the Schema,
+ to use, copy, modify, merge and distribute free of charge, copies of the Schema for the purposes of developing, 
+ implementing, installing and using software based on the Schema, and to permit persons to whom the Schema is furnished to do so, 
+ subject to the following conditions:
+
+ THE SCHEMA IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
+ INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
+ IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
+ DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
+ ARISING FROM, OUT OF OR IN CONNECTION WITH THE SCHEMA OR THE 
+ USE OR OTHER DEALINGS IN THE SCHEMA.
+
+ In addition, any modified copy of the Schema shall include the following notice:
+
+ THIS SCHEMA HAS BEEN MODIFIED FROM THE SCHEMA DEFINED IN
+ ISO 10303-41 ed4 Fundamentals of product description and support - Location schema
+ AND SHOULD NOT BE INTERPRETED AS COMPLYING WITH THAT STANDARD
+ *)
+
+ --SCHEMA location_schema '{iso standard 10303 part(41) version(4) object(1) location_schema(13)}';
+ FUNCTION acyclic_location_relationship (relation : location_relationship; relatives : SET OF location; specific_relation : STRING):BOOLEAN;
+	 LOCAL
+		 x : SET OF location_relationship;
+	 END_LOCAL;
+
+	 IF relation.relating_location IN relatives THEN
+		 RETURN (FALSE);
+	 END_IF;
+	 x := QUERY(lctn <* bag_to_set(USEDIN(relation.relating_location, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.LOCATION_RELATIONSHIP.RELATED_LOCATION')) | specific_relation IN TYPEOF(lctn));
+	 REPEAT i := 1 TO HIINDEX(x);
+		 IF NOT acyclic_location_relationship(x[i], relatives + relation.relating_location, specific_relation) THEN
+			 RETURN (FALSE);
+		 END_IF;
+	 END_REPEAT;
+	 RETURN (TRUE);
+ END_FUNCTION;
+
+--END_SCHEMA; -- location_schema
+
+ 
+ 
+ --*TY2021/12/31 added missing functions from ISO 10303-41 management_resources_schema
+ (*
+ $Id: management_resources_schema.exp,v 1.40 2019/01/23 19:28:13 brandon Exp $
+ ISO 10303 TC184/SC4/WG12 N10233
+
+ EXPRESS Source:
+ ISO 10303-41 ed6 Fundamentals of product description and support - Management resources schema
+
+ The following permission notice and disclaimer shall be included in all copies of this EXPRESS schema ("the Schema"), 
+ and derivations of the Schema:
+
+ Copyright ISO 2019  All rights reserved
+ Permission is hereby granted, free of charge in perpetuity, to any person obtaining a copy of the Schema,
+ to use, copy, modify, merge and distribute free of charge, copies of the Schema for the purposes of developing, 
+ implementing, installing and using software based on the Schema, and to permit persons to whom the Schema is furnished to do so, 
+ subject to the following conditions:
+
+ THE SCHEMA IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
+ INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
+ IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
+ DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
+ ARISING FROM, OUT OF OR IN CONNECTION WITH THE SCHEMA OR THE 
+ USE OR OTHER DEALINGS IN THE SCHEMA.
+
+ In addition, any modified copy of the Schema shall include the following notice:
+
+ THIS SCHEMA HAS BEEN MODIFIED FROM THE SCHEMA DEFINED IN
+ ISO 10303-41 ed4 Fundamentals of product description and support - Management resources schema
+ AND SHOULD NOT BE INTERPRETED AS COMPLYING WITH THAT STANDARD
+ *)
+
+-- SCHEMA management_resources_schema '{iso standard 10303 part(41) version(8) object(1) management_resources_schema(15)}';
+ FUNCTION acyclic_identification_assignment_relationship (relation : identification_assignment_relationship; relatives : SET [1:?] OF identification_assignment; specific_relation : STRING):BOOLEAN;
+	 LOCAL
+		 x : SET OF identification_assignment_relationship;
+	 END_LOCAL;
+
+	 IF relation.relating_identification_assignment IN relatives THEN
+		 RETURN (FALSE);
+	 END_IF;
+	 x := QUERY(ia <* bag_to_set(USEDIN(relation.relating_identification_assignment, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.IDENTIFICATION_ASSIGNMENT_RELATIONSHIP.RELATED_IDENTIFICATION_ASSIGNMENT')) | specific_relation IN TYPEOF(ia));
+	 REPEAT i := 1 TO HIINDEX(x);
+		 IF NOT acyclic_identification_assignment_relationship(x[i], relatives + relation.relating_identification_assignment, specific_relation) THEN
+			 RETURN (FALSE);
+		 END_IF;
+	 END_REPEAT;
+	 RETURN (TRUE);
+ END_FUNCTION;
+
+--END_SCHEMA; -- management_resources_schema
+
+ 
+ 
+ --*TY2021/12/31 added missing functions from ISO 10303-41 person_organization_schema
+ (*
+ $Id: person_organization_schema.exp,v 1.32 2017/10/09 12:26:21 verodub Exp $
+ ISO 10303 TC184/SC4/WG12 N9834
+
+ EXPRESS Source:
+ ISO 10303-41 ed5 Fundamentals of product description and support - Person organization schema
+
+ The following permission notice and disclaimer shall be included in all copies of this EXPRESS schema ("the Schema"), 
+ and derivations of the Schema:
+
+ Copyright ISO 2017  All rights reserved
+ Permission is hereby granted, free of charge in perpetuity, to any person obtaining a copy of the Schema,
+ to use, copy, modify, merge and distribute free of charge, copies of the Schema for the purposes of developing, 
+ implementing, installing and using software based on the Schema, and to permit persons to whom the Schema is furnished to do so, 
+ subject to the following conditions:
+
+ THE SCHEMA IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
+ INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
+ IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
+ DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
+ ARISING FROM, OUT OF OR IN CONNECTION WITH THE SCHEMA OR THE 
+ USE OR OTHER DEALINGS IN THE SCHEMA.
+
+ In addition, any modified copy of the Schema shall include the following notice:
+
+ THIS SCHEMA HAS BEEN MODIFIED FROM THE SCHEMA DEFINED IN
+ ISO 10303-41 ed5 Fundamentals of product description and support - Person organization schema
+ AND SHOULD NOT BE INTERPRETED AS COMPLYING WITH THAT STANDARD
+ *)
+
+-- SCHEMA person_organization_schema '{iso standard 10303 part(41) version(8) object(1) person_organization_schema(16)}';
+ FUNCTION acyclic_organization_relationship (relation : organization_relationship; relatives : SET [1:?] OF organization; specific_relation : STRING):BOOLEAN;
+	 LOCAL
+		 x : SET OF organization_relationship;
+	 END_LOCAL;
+
+	 IF relation.relating_organization IN relatives THEN
+		 RETURN (FALSE);
+	 END_IF;
+	 x := QUERY(org <* bag_to_set(USEDIN(relation.relating_organization, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ORGANIZATION_RELATIONSHIP.RELATED_ORGANIZATION')) | specific_relation IN TYPEOF(org));
+	 REPEAT i := 1 TO HIINDEX(x);
+		 IF NOT acyclic_organization_relationship(x[i], relatives + relation.relating_organization, specific_relation) THEN
+			 RETURN (FALSE);
+		 END_IF;
+	 END_REPEAT;
+	 RETURN (TRUE);
+ END_FUNCTION;
+
+ (* --ERROR PE007: Reference to undefined type organization_type_relationship.
+ FUNCTION acyclic_organization_type_relationship (relation : organization_type_relationship; relatives : SET OF organization_type; specific_relation : STRING):BOOLEAN;
+	 LOCAL
+		 x : SET OF organization_type_relationship;
+	 END_LOCAL;
+
+	 IF relation.relating_organization_type IN relatives THEN
+		 RETURN (FALSE);
+	 END_IF;
+	 x := QUERY(orgtyp <* bag_to_set(USEDIN(relation.relating_organization_type, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ORGANIZATION_TYPE_RELATIONSHIP.RELATED_ORGANIZATION_TYPE')) | specific_relation IN TYPEOF(orgtyp));
+	 REPEAT i := 1 TO HIINDEX(x);
+		 IF NOT acyclic_organization_type_relationship(x[i], relatives + relation.relating_organization_type, specific_relation) THEN
+			 RETURN (FALSE);
+		 END_IF;
+	 END_REPEAT;
+	 RETURN (TRUE);
+ END_FUNCTION;
+ *)
+
+ FUNCTION acyclic_organizational_project_relationship (relation : organizational_project_relationship; relatives : SET [1:?] OF organizational_project; specific_relation : STRING):BOOLEAN;
+	 LOCAL
+		 x : SET OF organizational_project_relationship;
+	 END_LOCAL;
+
+	 IF relation.relating_organizational_project IN relatives THEN
+		 RETURN (FALSE);
+	 END_IF;
+	 x := QUERY(op <* bag_to_set(USEDIN(relation.relating_organizational_project, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.ORGANIZATIONAL_PROJECT_RELATIONSHIP.RELATED_ORGANIZATIONAL_PROJECT')) | specific_relation IN TYPEOF(op));
+	 REPEAT i := 1 TO HIINDEX(x);
+		 IF NOT acyclic_organizational_project_relationship(x[i], relatives + relation.relating_organizational_project, specific_relation) THEN
+			 RETURN (FALSE);
+		 END_IF;
+	 END_REPEAT;
+	 RETURN (TRUE);
+ END_FUNCTION;
+
+ (*--ERROR PE007: Reference to undefined type person_type_definition.
+ FUNCTION acyclic_person_type_definition_relationship (relation : person_type_definition_relationship; relatives : SET OF person_type_definition; specific_relation : STRING):BOOLEAN;
+	 LOCAL
+		 x : SET OF person_type_definition_relationship;
+	 END_LOCAL;
+
+	 IF relation.relating_person_type_definition IN relatives THEN
+		 RETURN (FALSE);
+	 END_IF;
+	 x := QUERY(ptdef <* bag_to_set(USEDIN(relation.relating_person_type_definition, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PERSON_TYPE_DEFINITION_RELATIONSHIP.RELATED_PERSON_TYPE_DEFINITION')) | specific_relation IN TYPEOF(ptdef));
+	 REPEAT i := 1 TO HIINDEX(x);
+		 IF NOT acyclic_person_type_definition_relationship(x[i], relatives + relation.relating_person_type_definition, specific_relation) THEN
+			 RETURN (FALSE);
+		 END_IF;
+	 END_REPEAT;
+	 RETURN (TRUE);
+ END_FUNCTION;
+ *)
+
+ (*--ERROR PE007: Reference to undefined type position_in_organization.
+ FUNCTION acyclic_position_in_organization_relationship (relation : position_in_organization_relationship; relatives : SET OF position_in_organization; specific_relation : STRING):BOOLEAN;
+	 LOCAL
+		 x : SET OF position_in_organization_relationship;
+	 END_LOCAL;
+
+	 IF relation.relating_position_in_organization IN relatives THEN
+		 RETURN (FALSE);
+	 END_IF;
+	 x := QUERY(piorg <* bag_to_set(USEDIN(relation.relating_position_in_organization, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.POSITION_IN_ORGANIZATION_RELATIONSHIP.RELATED_POSITION_IN_ORGANIZATION')) | specific_relation IN TYPEOF(piorg));
+	 REPEAT i := 1 TO HIINDEX(x);
+		 IF NOT acyclic_position_in_organization_relationship(x[i], relatives + relation.relating_position_in_organization, specific_relation) THEN
+			 RETURN (FALSE);
+		 END_IF;
+	 END_REPEAT;
+	 RETURN (TRUE);
+ END_FUNCTION;
+*)
+--END_SCHEMA; -- person_organization_schema
+
+ 
+ 
+ --*TY2021/12/31 added missing functions from ISO 10303-41 product_definition_schema
+ (*
+ $Id: product_definition_schema.exp,v 1.30 2019/01/10 22:26:11 brandon Exp $
+ ISO 10303 TC184/SC4/WG12 N10235
+
+ EXPRESS Source:
+ ISO 10303-41 ed6 Fundamentals of product description and support - Product definition schema
+
+ The following permission notice and disclaimer shall be included in all copies of this EXPRESS schema ("the Schema"), 
+ and derivations of the Schema:
+
+ Copyright ISO 2019  All rights reserved
+ Permission is hereby granted, free of charge in perpetuity, to any person obtaining a copy of the Schema,
+ to use, copy, modify, merge and distribute free of charge, copies of the Schema for the purposes of developing, 
+ implementing, installing and using software based on the Schema, and to permit persons to whom the Schema is furnished to do so, 
+ subject to the following conditions:
+
+ THE SCHEMA IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
+ INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
+ IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
+ DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
+ ARISING FROM, OUT OF OR IN CONNECTION WITH THE SCHEMA OR THE 
+ USE OR OTHER DEALINGS IN THE SCHEMA.
+
+ In addition, any modified copy of the Schema shall include the following notice:
+
+ THIS SCHEMA HAS BEEN MODIFIED FROM THE SCHEMA DEFINED IN
+ ISO 10303-41 ed5 Fundamentals of product description and support - Product definition schema
+ AND SHOULD NOT BE INTERPRETED AS COMPLYING WITH THAT STANDARD
+ *)
+
+ --SCHEMA product_definition_schema '{iso standard 10303 part(41) version(9) object(1) product_definition_schema(18)}';
+ FUNCTION acyclic_product_definition_formation_relationship (relation : product_definition_formation_relationship; relatives : SET [1:?] OF product_definition_formation; specific_relation : STRING):BOOLEAN;
+	 LOCAL
+		 x : SET OF product_definition_formation_relationship;
+	 END_LOCAL;
+
+	 IF relation.relating_product_definition_formation IN relatives THEN
+		 RETURN (FALSE);
+	 END_IF;
+	 x := QUERY(pdf <* bag_to_set(USEDIN(relation.relating_product_definition_formation, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PRODUCT_DEFINITION_FORMATION_RELATIONSHIP.RELATED_PRODUCT_DEFINITION_FORMATION')) | specific_relation IN TYPEOF(pdf));
+	 REPEAT i := 1 TO HIINDEX(x);
+		 IF NOT acyclic_product_definition_formation_relationship(x[i], relatives + relation.relating_product_definition_formation, specific_relation) THEN
+			 RETURN (FALSE);
+		 END_IF;
+	 END_REPEAT;
+	 RETURN (TRUE);
+ END_FUNCTION;
+
+ FUNCTION acyclic_product_relationship (relation : product_relationship; relatives : SET [1:?] OF product; specific_relation : STRING):BOOLEAN;
+	 LOCAL
+		 x : SET OF product_relationship;
+	 END_LOCAL;
+
+	 IF relation.relating_product IN relatives THEN
+		 RETURN (FALSE);
+	 END_IF;
+	 x := QUERY(prod <* bag_to_set(USEDIN(relation.relating_product, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PRODUCT_RELATIONSHIP.RELATED_PRODUCT')) | specific_relation IN TYPEOF(prod));
+	 REPEAT i := 1 TO HIINDEX(x);
+		 IF NOT acyclic_product_relationship(x[i], relatives + relation.relating_product, specific_relation) THEN
+			 RETURN (FALSE);
+		 END_IF;
+	 END_REPEAT;
+	 RETURN (TRUE);
+ END_FUNCTION;
+
+ FUNCTION get_product_definitions (c_def_instance : product):SET OF product_definition;
+	 LOCAL
+		 pd_set : SET OF product_definition_formation := [];
+		 pdr_set : SET OF product_definition := [];
+	 END_LOCAL;
+
+	 pd_set := bag_to_set(USEDIN(c_def_instance, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PRODUCT_DEFINITION_FORMATION.OF_PRODUCT'));
+	 IF (SIZEOF(pd_set) < 1) THEN
+		 RETURN (pdr_set);
+	 END_IF;
+	 REPEAT i := 1 TO HIINDEX(pd_set);
+		 pdr_set := pdr_set + bag_to_set(USEDIN(pd_set[i], 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PRODUCT_DEFINITION.FORMATION'));
+	 END_REPEAT;
+	 RETURN (pdr_set);
+ END_FUNCTION;
+
+--END_SCHEMA; -- product_definition_schema
+
+ 
+ 
+ 
+ --*TY2021/12/31 added missing functions from ISO 10303-41 product_property_definition_schema
+ (*
+ $Id: product_property_definition_schema.exp,v 1.31 2019/04/03 14:35:07 kevin Exp $
+ ISO 10303 TC184/SC4/WG12 N10467
+
+ EXPRESS Source:
+ ISO 10303-41 ed6 Fundamentals of product description and support - Product property definition schema
+
+ The following permission notice and disclaimer shall be included in all copies of this EXPRESS schema ("the Schema"), 
+ and derivations of the Schema:
+
+ Copyright ISO 2019  All rights reserved
+ Permission is hereby granted, free of charge in perpetuity, to any person obtaining a copy of the Schema,
+ to use, copy, modify, merge and distribute free of charge, copies of the Schema for the purposes of developing, 
+ implementing, installing and using software based on the Schema, and to permit persons to whom the Schema is furnished to do so, 
+ subject to the following conditions:
+
+ THE SCHEMA IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
+ INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
+ IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
+ DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
+ ARISING FROM, OUT OF OR IN CONNECTION WITH THE SCHEMA OR THE 
+ USE OR OTHER DEALINGS IN THE SCHEMA.
+
+ In addition, any modified copy of the Schema shall include the following notice:
+
+ THIS SCHEMA HAS BEEN MODIFIED FROM THE SCHEMA DEFINED IN
+ ISO 10303-41 ed6 Fundamentals of product description and support - Product property definition schema
+ AND SHOULD NOT BE INTERPRETED AS COMPLYING WITH THAT STANDARD
+ *)
+
+ --SCHEMA product_property_definition_schema '{iso standard 10303 part(41) version(9) object(1) product_property_definition_schema(19)}';
+ FUNCTION acyclic_characterized_object_relationship (relation : characterized_object_relationship; relatives : SET [1:?] OF characterized_object; specific_relation : STRING):BOOLEAN;
+	 LOCAL
+		 x : SET OF characterized_object_relationship;
+	 END_LOCAL;
+
+	 IF relation.relating_object IN relatives THEN
+		 RETURN (FALSE);
+	 END_IF;
+	 x := QUERY(ca <* bag_to_set(USEDIN(relation.relating_object, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CHARACTERIZED_OBJECT_RELATIONSHIP.RELATED_OBJECT')) | specific_relation IN TYPEOF(ca));
+	 REPEAT i := 1 TO HIINDEX(x);
+		 IF NOT acyclic_characterized_object_relationship(x[i], relatives + relation.relating_object, specific_relation) THEN
+			 RETURN (FALSE);
+		 END_IF;
+	 END_REPEAT;
+	 RETURN (TRUE);
+ END_FUNCTION;
+
+ FUNCTION acyclic_general_property_relationship (relation : general_property_relationship; relatives : SET [1:?] OF general_property; specific_relation : STRING):BOOLEAN;
+	 LOCAL
+		 x : SET OF general_property_relationship;
+	 END_LOCAL;
+
+	 IF relation.relating_property IN relatives THEN
+		 RETURN (FALSE);
+	 END_IF;
+	 x := QUERY(genp <* bag_to_set(USEDIN(relation.relating_property, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.GENERAL_PROPERTY_RELATIONSHIP.RELATED_PROPERTY')) | specific_relation IN TYPEOF(genp));
+	 REPEAT i := 1 TO HIINDEX(x);
+		 IF NOT acyclic_general_property_relationship(x[i], relatives + relation.relating_property, specific_relation) THEN
+			 RETURN (FALSE);
+		 END_IF;
+	 END_REPEAT;
+	 RETURN (TRUE);
+ END_FUNCTION; 
+--END_SCHEMA; -- product_property_definition_schema
+
+ 
+ 
+ --*TY2021/12/31 added missing functions from ISO 10303-41 product_property_representation_schema
+ (*
+ $Id: product_property_representation_schema.exp,v 1.61 2019/01/25 17:24:04 kevin Exp $
+ ISO 10303 TC184/SC4/WG12 N10355
+
+ EXPRESS Source:
+ ISO 10303-41 ed6 Fundamentals of product description and support - Product property representation schema
+
+ The following permission notice and disclaimer shall be included in all copies of this EXPRESS schema ("the Schema"), 
+ and derivations of the Schema:
+
+ Copyright ISO 2019  All rights reserved
+ Permission is hereby granted, free of charge in perpetuity, to any person obtaining a copy of the Schema,
+ to use, copy, modify, merge and distribute free of charge, copies of the Schema for the purposes of developing, 
+ implementing, installing and using software based on the Schema, and to permit persons to whom the Schema is furnished to do so, 
+ subject to the following conditions:
+
+ THE SCHEMA IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
+ INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
+ IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
+ DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
+ ARISING FROM, OUT OF OR IN CONNECTION WITH THE SCHEMA OR THE 
+ USE OR OTHER DEALINGS IN THE SCHEMA.
+
+ In addition, any modified copy of the Schema shall include the following notice:
+
+ THIS SCHEMA HAS BEEN MODIFIED FROM THE SCHEMA DEFINED IN
+ ISO 10303-41 ed5 Fundamentals of product description and support - Product property representation schema
+ AND SHOULD NOT BE INTERPRETED AS COMPLYING WITH THAT STANDARD
+ *)
+
+-- SCHEMA product_property_representation_schema '{iso standard 10303 part(41) version(9) object(1) product_property_representation_schema(20)}';
+ FUNCTION relatives_of_product_definitions (definition_set : SET OF product_definition; relation_subtype : STRING):SET OF product_definition;
+	 FUNCTION local_relatives_of_product_definitions (definition_set : SET OF product_definition; total_definitions : SET OF product_definition; relation_subtype : STRING):SET OF product_definition;
+		 LOCAL
+			 local_def : SET OF product_definition := [];
+			 local_pdr : SET OF product_definition_relationship := [];
+			 local_total : SET OF product_definition := [];
+		 END_LOCAL;
+
+		 REPEAT i := 1 TO HIINDEX(definition_set);
+			 local_pdr := local_pdr + bag_to_set(USEDIN(definition_set[i], relation_subtype + '.RELATING_PRODUCT_DEFINITION'));
+		 END_REPEAT;
+		 REPEAT i := 1 TO HIINDEX(local_pdr);
+			 local_def := local_def + local_pdr[i].related_product_definition;
+		 END_REPEAT;
+		 IF (SIZEOF(local_def) - SIZEOF(total_definitions)) = 0 THEN
+			 RETURN (local_def);
+		 ELSE
+			 local_total := total_definitions + local_def;
+			 RETURN (local_def + (local_relatives_of_product_definitions(local_def - total_definitions, local_total, relation_subtype)));
+		 END_IF;
+	 END_FUNCTION;
+
+	 RETURN (local_relatives_of_product_definitions(definition_set, definition_set, relation_subtype));
+ END_FUNCTION;
+
+ FUNCTION relatives_of_shape_representations (shape_representation_set : SET OF shape_representation):SET OF shape_representation;
+	 FUNCTION local_relatives_of_shape_representations (shape_representation_set : SET OF shape_representation; total_reps : SET OF shape_representation):SET OF shape_representation;
+		 LOCAL
+			 local_shape_rep : SET OF shape_representation := [];
+			 local_srr : SET OF shape_representation_relationship := [];
+			 local_total : SET OF shape_representation := [];
+		 END_LOCAL;
+
+		 REPEAT i := 1 TO HIINDEX(shape_representation_set);
+			 local_srr := local_srr + QUERY(rr <* bag_to_set(USEDIN(shape_representation_set[i], 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.REPRESENTATION_RELATIONSHIP.REP_1')) | 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SHAPE_REPRESENTATION_RELATIONSHIP' IN TYPEOF(rr));
+		 END_REPEAT;
+		 REPEAT i := 1 TO HIINDEX(local_srr);
+			 IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SHAPE_REPRESENTATION_RELATIONSHIP' IN TYPEOF(local_srr[i]) THEN
+				 local_shape_rep := local_shape_rep + local_srr[i].rep_2;
+			 END_IF;
+		 END_REPEAT;
+		 IF SIZEOF(local_shape_rep - total_reps) = 0 THEN
+			 RETURN (shape_representation_set);
+		 ELSE
+			 local_total := total_reps + local_shape_rep;
+			 RETURN (local_shape_rep + (local_relatives_of_shape_representations(local_shape_rep - total_reps, local_total)));
+		 END_IF;
+	 END_FUNCTION;
+
+	 RETURN (local_relatives_of_shape_representations(shape_representation_set, shape_representation_set));
+ END_FUNCTION;
+--END_SCHEMA; -- product_property_representation_schema
+ 
+ 
+ 
+ --*TY2021/12/31 added missing functions from ISO 10303-41 qualifications_schema
+ (*
+ $Id: qualifications_schema.exp,v 1.16 2014/03/04 00:30:40  Exp $
+ ISO 10303 TC184/SC4/WG12 N8369
+
+ EXPRESS Source:
+ ISO 10303-41 ed4 Fundamentals of product description and support - Qualifications schema
+
+ The following permission notice and disclaimer shall be included in all copies of this EXPRESS schema ("the Schema"), 
+ and derivations of the Schema:
+
+ Copyright ISO 2014  All rights reserved
+ Permission is hereby granted, free of charge in perpetuity, to any person obtaining a copy of the Schema,
+ to use, copy, modify, merge and distribute free of charge, copies of the Schema for the purposes of developing, 
+ implementing, installing and using software based on the Schema, and to permit persons to whom the Schema is furnished to do so, 
+ subject to the following conditions:
+
+ THE SCHEMA IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
+ INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
+ IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
+ DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
+ ARISING FROM, OUT OF OR IN CONNECTION WITH THE SCHEMA OR THE 
+ USE OR OTHER DEALINGS IN THE SCHEMA.
+
+ In addition, any modified copy of the Schema shall include the following notice:
+
+ THIS SCHEMA HAS BEEN MODIFIED FROM THE SCHEMA DEFINED IN
+ ISO 10303-41 ed4 Fundamentals of product description and support - Qualifications schema
+ AND SHOULD NOT BE INTERPRETED AS COMPLYING WITH THAT STANDARD
+ *)
+
+-- SCHEMA qualifications_schema '{iso standard 10303 part(41) version(6) object(1) qualifications_schema(20)}';
+ (*--ERROR PE007: Reference to undefined type qualification.
+ FUNCTION acyclic_qualification_relationship (relation : qualification_relationship; relatives : SET OF qualification; specific_relation : STRING):BOOLEAN;
+	 LOCAL
+		 x : SET OF qualification_relationship;
+	 END_LOCAL;
+
+	 IF relation.relating_qualification IN relatives THEN
+		 RETURN (FALSE);
+	 END_IF;
+	 x := QUERY(qual <* bag_to_set(USEDIN(relation.relating_qualification, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.QUALIFICATION_RELATIONSHIP.RELATED_QUALIFICATION')) | specific_relation IN TYPEOF(qual));
+	 REPEAT i := 1 TO HIINDEX(x);
+		 IF NOT acyclic_qualification_relationship(x[i], relatives + relation.relating_qualification, specific_relation) THEN
+			 RETURN (FALSE);
+		 END_IF;
+	 END_REPEAT;
+	 RETURN (TRUE);
+ END_FUNCTION;
+ *)
+
+ (*--ERROR PE007: Reference to undefined type qualification_type.
+ FUNCTION acyclic_qualification_type_relationship (relation : qualification_type_relationship; relatives : SET OF qualification_type; specific_relation : STRING):BOOLEAN;
+	 LOCAL
+		 x : SET OF qualification_type_relationship;
+	 END_LOCAL;
+
+	 IF relation.relating_qualification_type IN relatives THEN
+		 RETURN (FALSE);
+	 END_IF;
+	 x := QUERY(qultyp <* bag_to_set(USEDIN(relation.relating_qualification_type, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.QUALIFICATION_TYPE_RELATIONSHIP.RELATED_QUALIFICATION_TYPE')) | specific_relation IN TYPEOF(qultyp));
+	 REPEAT i := 1 TO HIINDEX(x);
+		 IF NOT acyclic_qualification_type_relationship(x[i], relatives + relation.relating_qualification_type, specific_relation) THEN
+			 RETURN (FALSE);
+		 END_IF;
+	 END_REPEAT;
+	 RETURN (TRUE);
+ END_FUNCTION;
+ *)
+
+--END_SCHEMA; -- qualifications_schema
+ 
+ 
+ 
+ 
+ --*TY2021/12/31 added missing functions from ISO 10303-42 geometric_model_schema
+ (* 
+ $Id: geometric_model_schema.exp,v 1.30 2017/10/20 15:34:36 kevletu Exp $
+ ISO 10303 TC184/SC4/WG12 N9792
+
+ EXPRESS Source:
+ ISO 10303-42 ed5 Geometric and topological representation - Geometric model schema
+
+ The following permission notice and disclaimer shall be included in all copies of this EXPRESS schema ("the Schema"), 
+ and derivations of the Schema:
+
+ Copyright ISO 2017  All rights reserved
+ Permission is hereby granted, free of charge in perpetuity, to any person obtaining a copy of the Schema,
+ to use, copy, modify, merge and distribute free of charge, copies of the Schema for the purposes of developing, 
+ implementing, installing and using software based on the Schema, and to permit persons to whom the Schema is furnished to do so, 
+ subject to the following conditions:
+
+ THE SCHEMA IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
+ INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
+ IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
+ DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
+ ARISING FROM, OUT OF OR IN CONNECTION WITH THE SCHEMA OR THE 
+ USE OR OTHER DEALINGS IN THE SCHEMA.
+
+ In addition, any modified copy of the Schema shall include the following notice:
+
+ THIS SCHEMA HAS BEEN MODIFIED FROM THE SCHEMA DEFINED IN
+ ISO 10303-42 ed5 Geometric and topological representation - Geometric model schema
+ AND SHOULD NOT BE INTERPRETED AS COMPLYING WITH THAT STANDARD
+ *)
+
+-- SCHEMA geometric_model_schema  '{iso standard 10303 part(42) version(10) object(1) geometric_model_schema(3)}';
+ (*--ERROR PE007: Reference to undefined type geometric_set_replica.
+ FUNCTION acyclic_set_replica
+	(rep : geometric_set_replica; parent : geometric_set) : BOOLEAN; 
+ IF NOT (('AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.GEOMETRIC_SET_REPLICA') IN TYPEOF(parent))
+				 THEN  RETURN (TRUE);
+		END_IF;
+	(* Return TRUE if the parent is not of type geometric_set_replica *)
+		IF (parent :=: rep) THEN
+			 RETURN (FALSE);
+	 (* Return FALSE if the parent is the same geometric_set_replica,
+			otherwise, call function again with the parents own parent_set.  *)
+		 ELSE RETURN(acyclic_set_replica(rep,
+													 parent\geometric_set_replica.parent_set));
+		 END_IF;
+	 END_FUNCTION; 
+*)
+
+ FUNCTION build_transformed_set
+	(tr : cartesian_transformation_operator; gset : geometric_set) : SET[0:?] OF geometric_set_select; 
+ LOCAL
+		s          : SET [1:?] OF geometric_set_select := gset.elements;
+		trset      : SET [0:?] OF geometric_set_select := [];
+	 END_LOCAL;
+	 REPEAT j := 1 TO SIZEOF(s);
+		 IF ('AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CURVE' IN TYPEOF(s[j])) THEN
+			trset := trset + dummy_gri || curve() ||curve_replica(s[j],tr); ELSE
+			IF ('AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.POINT' IN TYPEOF(s[j])) THEN
+				trset := trset + dummy_gri || point() || point_replica(s[j],tr);
+				ELSE
+				IF ('AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SURFACE' IN TYPEOF(s[j])) THEN
+					trset := trset + dummy_gri || surface()  || surface_replica(s[j],
+						tr || cartesian_transformation_operator_3d (?));
+				END_IF;
+			END_IF;
+		 END_IF;
+	 END_REPEAT;
+	 RETURN(trset);
+	END_FUNCTION; 
+
+ --END_SCHEMA;  -- geometric_model_schema
+
+ 
+ 
+ --*TY2021/12/31 added missing functions from ISO 10303-42 geometry_schema
+ (*
+		$Id: geometry_schema.exp,v 1.32 2019/04/03 14:35:08 kevin Exp $ *)
+ (* Geometry schema from STEPMOD with proposed isogeometry additions and changes - these are annotated with isogeometry comment
+ Part of Part 42 Edition 6 EXPRESS WG12 N10468
+
+ EXPRESS Source:
+ ISO 10303-42 ed6 Geometric and topological representation - Geometry schema
+
+ The following permission notice and disclaimer shall be included in all copies of this EXPRESS schema ("the Schema"), 
+ and derivations of the Schema:
+
+ Copyright ISO 2019  All rights reserved
+ Permission is hereby granted, free of charge in perpetuity, to any person obtaining a copy of the Schema,
+ to use, copy, modify, merge and distribute free of charge, copies of the Schema for the purposes of developing, 
+ implementing, installing and using software based on the Schema, and to permit persons to whom the Schema is furnished to do so, 
+ subject to the following conditions:
+
+ THE SCHEMA IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
+ INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
+ IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
+ DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
+ ARISING FROM, OUT OF OR IN CONNECTION WITH THE SCHEMA OR THE 
+ USE OR OTHER DEALINGS IN THE SCHEMA.
+
+ In addition, any modified copy of the Schema shall include the following notice:
+
+ THIS SCHEMA HAS BEEN MODIFIED FROM THE SCHEMA DEFINED IN
+ ISO 10303-42 ed6 Geometric and topological representation - Geometry schema
+ AND SHOULD NOT BE INTERPRETED AS COMPLYING WITH THAT STANDARD
+
+	*)
+-- SCHEMA geometry_schema '{iso standard 10303 part(42) version(11) object(1) geometry_schema(1)}';
+ FUNCTION default_b_spline_curve_weights
+	(up_cp : INTEGER) : ARRAY[0:up_cp] OF REAL; 
+ RETURN([1:up_cp + 1]);END_FUNCTION; 
+
+ FUNCTION default_b_spline_knot_mult
+	(degree : INTEGER; up_knots : INTEGER; uniform : knot_type) : LIST[2:?] OF INTEGER; 
+ LOCAL
+			knot_mult : LIST [1:up_knots] OF INTEGER;
+		END_LOCAL;
+				 
+		IF uniform = uniform_knots THEN
+			knot_mult := [1:up_knots];
+		ELSE
+			IF uniform = quasi_uniform_knots THEN
+				knot_mult := [1:up_knots];
+				knot_mult[1] := degree + 1;
+				knot_mult[up_knots] := degree + 1;
+			ELSE
+				IF uniform = piecewise_bezier_knots THEN
+					knot_mult := [degree:up_knots];
+					knot_mult[1] := degree + 1;
+					knot_mult[up_knots] := degree + 1;
+				ELSE
+					knot_mult := [0:up_knots];
+				END_IF;
+			END_IF;
+		END_IF;
+		RETURN(knot_mult);
+	END_FUNCTION; 
+
+ FUNCTION default_b_spline_knots
+	(degree : INTEGER; up_knots : INTEGER; uniform : knot_type) : LIST[2:?] OF parameter_value; 
+ LOCAL
+		 knots  : LIST [1:up_knots] OF parameter_value := [0:up_knots];
+		 ishift : INTEGER := 1;
+	 END_LOCAL;
+
+	 IF (uniform = uniform_knots) THEN
+			ishift := degree + 1;
+	 END_if;
+	 IF (uniform = uniform_knots) OR 
+			(uniform = quasi_uniform_knots) OR
+			(uniform = piecewise_bezier_knots) THEN
+		 
+		 REPEAT i := 1 TO up_knots;
+			 knots[i] := i - ishift;
+		 END_REPEAT;
+	 END_IF;
+	 RETURN(knots);
+ END_FUNCTION; 
+
+ FUNCTION default_b_spline_surface_weights
+	(u_upper : INTEGER; v_upper : INTEGER) : ARRAY[0:u_upper] OF ARRAY[0:v_upper] OF REAL; 
+ RETURN([[1:v_upper + 1]:u_upper +1]);END_FUNCTION; 
+
+
+ FUNCTION vector_sum
+	(arg1 : vector_or_direction; arg2 : vector_or_direction) : vector; 
+ LOCAL
+			result          : vector;
+			res, vec1, vec2 : direction;
+			mag, mag1, mag2 : REAL;
+			ndim            : INTEGER;
+		END_LOCAL;
+
+		IF ((NOT EXISTS (arg1)) OR (NOT EXISTS (arg2))) OR (arg1.dim <> arg2.dim)
+				THEN
+			RETURN (?) ;
+
+		ELSE
+			BEGIN
+				IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.VECTOR' IN TYPEOF(arg1) THEN
+					mag1 := arg1\vector.magnitude;
+					vec1 := arg1\vector.orientation;
+				ELSE
+					mag1 := 1.0;
+					vec1 := arg1;
+				END_IF;
+				IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.VECTOR' IN TYPEOF(arg2) THEN
+					mag2 := arg2\vector.magnitude;
+					vec2 := arg2\vector.orientation;
+				ELSE
+					mag2 := 1.0;
+					vec2 := arg2;
+				END_IF;
+				vec1 := normalise (vec1);
+				vec2 := normalise (vec2);
+				ndim := SIZEOF(vec1.direction_ratios);
+				mag := 0.0;
+				res := dummy_gri || direction(vec1.direction_ratios);
+				REPEAT i := 1 TO ndim;
+					res.direction_ratios[i] := mag1*vec1.direction_ratios[i] +
+																			 mag2*vec2.direction_ratios[i];
+					mag := mag + (res.direction_ratios[i]*res.direction_ratios[i]);
+				END_REPEAT;
+				IF (mag > 0.0 ) THEN
+				result := dummy_gri || vector( res, SQRT(mag));
+				ELSE
+					result := dummy_gri || vector( vec1,  0.0);
+				END_IF;
+			END;
+		END_IF;
+		RETURN (result);
+	END_FUNCTION; 
+-- END_SCHEMA;  -- geometry_schema
+
+ 
+ 
+ --*TY2021/12/31 added missing functions from ISO 10303-42 topology_schema
+ (*
+		$Id: topology_schema.exp,v 1.25 2019/04/10 11:27:43 kevin Exp $
+ ISO 10303 TC184/SC4/WG12 N10469
+
+ EXPRESS Source:
+ ISO 10303-42 ed6 Geometric and topological representation - Topology schema
+
+ The following permission notice and disclaimer shall be included in all copies of this EXPRESS schema ("the Schema"), 
+ and derivations of the Schema:
+
+ Copyright ISO 2019  All rights reserved
+ Permission is hereby granted, free of charge in perpetuity, to any person obtaining a copy of the Schema,
+ to use, copy, modify, merge and distribute free of charge, copies of the Schema for the purposes of developing, 
+ implementing, installing and using software based on the Schema, and to permit persons to whom the Schema is furnished to do so, 
+ subject to the following conditions:
+
+ THE SCHEMA IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
+ INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
+ IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
+ DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
+ ARISING FROM, OUT OF OR IN CONNECTION WITH THE SCHEMA OR THE 
+ USE OR OTHER DEALINGS IN THE SCHEMA.
+
+ In addition, any modified copy of the Schema shall include the following notice:
+
+ THIS SCHEMA HAS BEEN MODIFIED FROM THE SCHEMA DEFINED IN
+ ISO 10303-42 ed6 Geometric and topological representation - Topology schema
+ AND SHOULD NOT BE INTERPRETED AS COMPLYING WITH THAT STANDARD
+ *)
+
+-- SCHEMA topology_schema '{iso standard 10303 part(42) version(10) object(1) topology_schema(2)}';
+ FUNCTION edge_curve_pcurves (an_edge  : edge_curve;
+												the_surface_curves : SET OF surface_curve)
+			 : SET OF pcurve;
+ LOCAL
+	 a_curve      : curve;
+	 result       : SET OF pcurve;
+	 the_geometry : LIST[1:2] OF pcurve_or_surface;
+ END_LOCAL;
+	 a_curve := an_edge.edge_geometry;
+	 result := [];
+	 IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PCURVE' IN TYPEOF(a_curve) THEN
+		 result := result + a_curve;
+	 ELSE
+		 IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SURFACE_CURVE' IN TYPEOF(a_curve) THEN
+			 the_geometry := a_curve\surface_curve.associated_geometry;
+			 REPEAT k := 1 TO SIZEOF(the_geometry);
+					IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PCURVE' IN TYPEOF (the_geometry[k])
+					THEN
+						 result := result + the_geometry[k];
+					END_IF;
+			 END_REPEAT;
+		 ELSE
+			 REPEAT j := 1 TO SIZEOF(the_surface_curves);
+				 the_geometry := the_surface_curves[j].associated_geometry;
+				 IF the_surface_curves[j].curve_3d :=: a_curve
+				 THEN
+					 REPEAT k := 1 TO SIZEOF(the_geometry);
+						 IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PCURVE' IN TYPEOF (the_geometry[k])
+						 THEN
+							 result := result + the_geometry[k];
+						 END_IF;
+					 END_REPEAT;
+				 END_IF;
+			 END_REPEAT;
+		 END_IF;
+	 END_IF;
+
+	 RETURN (result);
+ END_FUNCTION;
+
+
+ --new
+ FUNCTION get_tri_in_representations (members : SET OF representation) : SET OF topological_representation_item;
+
+	LOCAL
+	tri_set : SET OF topological_representation_item := [];
+ END_LOCAL;
+
+ IF SIZEOF(members) = 0 THEN
+ RETURN(?);
+ END_IF;
+
+ REPEAT i := LOINDEX(members) TO HIINDEX(members);
+	 REPEAT J := LOINDEX(members[i]\representation.items) TO HIINDEX(members[i]\representation.items);
+		IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.TOPOLOGICAL_REPRESENTATION_ITEM' IN TYPEOF(members[i]\representation.items[j]) THEN
+		 tri_set := tri_set + members[i]\representation.items[j];
+		END_IF;
+	 END_REPEAT;
+ END_REPEAT;
+
+ RETURN(tri_set);
+ END_FUNCTION;
+
+	FUNCTION list_loop_edges(l: loop): LIST[0:?] OF edge;
+		LOCAL
+			edges : LIST[0:?] OF edge := [];
+		END_LOCAL;
+			 
+		IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.EDGE_LOOP' IN TYPEOF(l) THEN
+			REPEAT i := 1 TO SIZEOF(l\path.edge_list);
+				edges := edges + (l\path.edge_list[i].edge_element);
+			END_REPEAT;
+		END_IF;
+
+		RETURN(edges);
+	END_FUNCTION;
+
+
+	FUNCTION list_shell_edges(s : shell) : LIST[0:?] OF edge;
+		LOCAL
+			edges : LIST[0:?] OF edge := [];
+		END_LOCAL;
+			 
+		REPEAT i := 1 TO SIZEOF(list_shell_loops(s));
+			edges := edges + list_loop_edges(list_shell_loops(s)[i]);
+		END_REPEAT;
+		
+		RETURN(edges);
+	END_FUNCTION;
+
+	FUNCTION list_shell_faces(s : shell) : LIST[0:?] OF face;
+		LOCAL
+			faces : LIST[0:?] OF face := [];
+		END_LOCAL;
+		
+		IF ('AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CLOSED_SHELL' IN TYPEOF(s)) OR 
+			 ('AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.OPEN_SHELL' IN TYPEOF(s)) THEN
+			REPEAT i := 1 TO SIZEOF(s\connected_face_set.cfs_faces);
+				faces := faces + s\connected_face_set.cfs_faces[i];
+			END_REPEAT;
+		END_IF;
+			 
+		RETURN(faces);
+	END_FUNCTION;
+
+	FUNCTION list_shell_loops(s : shell) : LIST[0:?] OF loop;
+		LOCAL
+			loops : LIST[0:?] OF loop := [];
+		END_LOCAL;
+			 
+		IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.VERTEX_SHELL' IN TYPEOF(s) THEN
+			loops := loops + s.vertex_shell_extent;
+		END_IF;
+			 
+		IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.WIRE_SHELL' IN TYPEOF(s) THEN
+			REPEAT i := 1 TO SIZEOF(s.wire_shell_extent);
+				loops := loops + s.wire_shell_extent[i];
+			END_REPEAT;
+		END_IF;
+			 
+		IF ('AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.OPEN_SHELL' IN TYPEOF(s)) OR 
+			 ('AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.CLOSED_SHELL' IN TYPEOF(s)) THEN
+			REPEAT i := 1 TO SIZEOF(s.cfs_faces);
+				loops := loops + list_face_loops(s.cfs_faces[i]);
+			END_REPEAT;
+		END_IF;
+			 
+		RETURN(loops);
+	END_FUNCTION;
+
+
+ (*
+ The FUNCTION valid_tri_ids returns TRUE if each tri has an id and if each id is used only once in the SET of tri.
+ Note: The value of aggregate_id and of id shall be disjoint in order to support possible
+ use case where there shall be no more than one id of any kind assigned to a tri.
+ *)
+
+ FUNCTION valid_tri_ids (objs : SET OF topological_representation_item) : BOOLEAN;
+
+
+ LOCAL
+		values              : BAG OF identifier := [];
+ END_LOCAL;
+
+	 REPEAT i := LOINDEX(objs) TO HIINDEX(objs);
+ --each tri shall have at least one id.
+		IF NOT(EXISTS(objs[i]\topological_representation_item.permanent_id) OR
+					 EXISTS(objs[i]\topological_representation_item.permanent_aggregate_id)) THEN
+		 RETURN(FALSE);
+		END_IF;
+		values := values + objs[i]\topological_representation_item.permanent_id 
+												+ objs[i]\topological_representation_item.permanent_aggregate_id;
+	 END_REPEAT;
+
+ --ids are unique across both types
+	IF SIZEOF(bag_to_set(values)) <> SIZEOF(values) THEN 
+		RETURN(FALSE);
+	END_IF;
+
+	RETURN (TRUE);
+	END_FUNCTION;
+
+
+ FUNCTION vertex_point_pcurves (a_vertex  : vertex_point; 
+			 the_degenerates : SET OF evaluated_degenerate_pcurve)
+			 : SET OF degenerate_pcurve;
+ LOCAL
+	 a_point : point;
+	 result  : SET OF degenerate_pcurve;
+ END_LOCAL;
+	 a_point := a_vertex.vertex_geometry;
+	 result := [];
+	 IF 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.DEGENERATE_PCURVE' IN TYPEOF(a_point) THEN
+		 result := result + a_point;
+	 ELSE
+			 REPEAT j := 1 TO SIZEOF(the_degenerates);
+					IF (the_degenerates[j].equivalent_point :=: a_point)  THEN
+						 result := result + the_degenerates[j];
+					END_IF;
+			 END_REPEAT;
+	 END_IF;
+
+	 RETURN (result);
+ END_FUNCTION;
+
+--	END_SCHEMA; -- end TOPOLOGY schema
+ 
+ 
+ 
+ --*TY2021/12/31 added missing functions from ISO 10303-45 material_property_definition_schema
+ (*
+ $Id: material_property_definition_schema.exp,v 1.13 2019/01/10 22:26:11 brandon Exp $
+ ISO 10303 TC184/SC4/WG12 N10209
+
+ EXPRESS Source:
+ ISO 10303-45 ed5 Material and other engineering properties - Material property definition schema
+
+ The following permission notice and disclaimer shall be included in all copies of this EXPRESS schema ("the Schema"), 
+ and derivations of the Schema:
+
+ Copyright ISO 2019  All rights reserved
+ Permission is hereby granted, free of charge in perpetuity, to any person obtaining a copy of the Schema,
+ to use, copy, modify, merge and distribute free of charge, copies of the Schema for the purposes of developing, 
+ implementing, installing and using software based on the Schema, and to permit persons to whom the Schema is furnished to do so, 
+ subject to the following conditions:
+
+ THE SCHEMA IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
+ INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
+ IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
+ DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
+ ARISING FROM, OUT OF OR IN CONNECTION WITH THE SCHEMA OR THE 
+ USE OR OTHER DEALINGS IN THE SCHEMA.
+
+ In addition, any modified copy of the Schema shall include the following notice:
+
+ THIS SCHEMA HAS BEEN MODIFIED FROM THE SCHEMA DEFINED IN
+ ISO 10303-45 ed3 Material and other engineering properties - Material property definition schema
+ AND SHOULD NOT BE INTERPRETED AS COMPLYING WITH THAT STANDARD
+ *)
+
+ --SCHEMA material_property_definition_schema '{iso standard 10303 part(45) version(4) object(1) material_property_definition_schema(1)}';
+ FUNCTION acyclic_property_definition_relationship
+	 (relation          : property_definition_relationship;
+		relatives         : SET [1:?] OF property_definition;
+		specific_relation : STRING) : LOGICAL;
+	 LOCAL
+		 x                : SET OF property_definition_relationship;
+	 END_LOCAL;
+	 IF relation.relating_property_definition IN 
+						 relatives THEN
+		 RETURN (FALSE);
+	 END_IF;             -- IN is based in instance equality
+	 x := QUERY (pd <* bag_to_set (USEDIN
+				(relation.relating_property_definition,
+				 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.PROPERTY_DEFINITION_RELATIONSHIP.RELATED_PROPERTY_DEFINITION')) |
+					specific_relation IN TYPEOF (pd));
+	 REPEAT I := 1 TO HIINDEX(x);             -- pre-checked loop
+		 IF NOT acyclic_property_definition_relationship
+			 (x[i],
+				relatives + relation.relating_property_definition,
+				specific_relation) THEN
+			 RETURN(FALSE);
+		 END_IF;
+	 END_REPEAT;
+	 RETURN(TRUE);
+ END_FUNCTION;  -- acyclic_property_definition_relationship
+
+-- END_SCHEMA;    -- material_property_definition_schema
+
+
+ 
+ --*TY2021/12/31 added missing functions from ISO 10303-46 presentation_definition_schema
+ (*
+ $Id: presentation_definition_schema.exp,v 1.24 2017/09/26 11:55:04 verodub Exp $
+ ISO 10303 TC184/SC4/WG12 N9793
+
+ EXPRESS Source:
+ ISO 10303-46 ed3 Visual presentation - Presentation definition schema
+
+ The following permission notice and disclaimer shall be included in all copies of this EXPRESS schema ("the Schema"), 
+ and derivations of the Schema:
+
+ Copyright ISO 2017  All rights reserved
+ Permission is hereby granted, free of charge in perpetuity, to any person obtaining a copy of the Schema,
+ to use, copy, modify, merge and distribute free of charge, copies of the Schema for the purposes of developing, 
+ implementing, installing and using software based on the Schema, and to permit persons to whom the Schema is furnished to do so, 
+ subject to the following conditions:
+
+ THE SCHEMA IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
+ INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
+ IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
+ DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
+ ARISING FROM, OUT OF OR IN CONNECTION WITH THE SCHEMA OR THE 
+ USE OR OTHER DEALINGS IN THE SCHEMA.
+
+ In addition, any modified copy of the Schema shall include the following notice:
+
+ THIS SCHEMA HAS BEEN MODIFIED FROM THE SCHEMA DEFINED IN
+ ISO 10303-46 ed3 Visual presentation - Presentation definition schema
+ AND SHOULD NOT BE INTERPRETED AS COMPLYING WITH THAT STANDARD
+ *)
+
+-- SCHEMA presentation_definition_schema '{iso standard 10303 part(46) version(6) object(1) presentation_definition_schema(2)}';
+ (*--ERROR PE007: Reference to undefined type symbol_representation_relationship.
+ FUNCTION acyclic_symbol_representation_relationship
+	 (relation : symbol_representation_relationship;
+		children : SET OF symbol_representation ) : BOOLEAN;
+	 LOCAL
+		 x : SET OF symbol_representation_relationship;
+		 local_children : SET OF symbol_representation;
+	 END_LOCAL;
+
+	 REPEAT i:=1 TO HIINDEX(children);
+		 IF relation\representation_relationship.rep_1 :=: children[i] THEN
+			 RETURN(FALSE);
+		 END_IF;
+	 END_REPEAT;
+
+	 x := bag_to_set (USEDIN ( relation\representation_relationship.rep_1,
+								 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.REPRESENTATION_RELATIONSHIP.REP_2'));
+	 local_children := children + relation\representation_relationship.rep_1;
+
+	 IF SIZEOF (x) > 0 THEN
+		 REPEAT i:=1 TO HIINDEX (x);
+			 IF NOT acyclic_symbol_representation_relationship(x[i] ,
+																								 local_children) THEN
+				 RETURN (FALSE);
+			 END_IF;
+		 END_REPEAT;
+	 END_IF;
+
+	 RETURN (TRUE);
+
+ END_FUNCTION;
+ *)
+
+ (* --ERROR PE007: Reference to undefined type table_representation.
+ FUNCTION field_in_table (field : table_record_field_representation;
+													table : annotation_table_occurrence): BOOLEAN;
+	 LOCAL
+		 table_rep : table_representation;
+		 symbol_rep_rel_set : SET OF symbol_representation_relationship;
+		 mapped_item_set : SET OF mapped_item;
+		 table_record_rep_set : SET OF table_record_representation := [];
+	 END_LOCAL;
+
+	 table_rep := table\styled_item.item\mapped_item.mapping_source.
+		 mapped_representation;
+	 mapped_item_set := QUERY(item <* table_rep.items |
+												('AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.MAPPED_ITEM' IN
+												 TYPEOF(item))
+																	AND
+												('AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.TABLE_RECORD_REPRESENTATION' IN
+													TYPEOF(item\mapped_item.mapping_source.
+																		 mapped_representation ))
+											);
+
+	 REPEAT i := 1 TO HIINDEX(mapped_item_set);
+		 table_record_rep_set := table_record_rep_set +
+						mapped_item_set[i].mapping_source.mapped_representation;
+	 END_REPEAT;
+
+	 symbol_rep_rel_set := bag_to_set (USEDIN(table_rep,
+																'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.REPRESENTATION_RELATIONSHIP.REP_1'));
+
+	 REPEAT i := 1 TO HIINDEX(symbol_rep_rel_set);
+			table_record_rep_set := table_record_rep_set +
+							 symbol_rep_rel_set[i]\representation_relationship.rep_2;
+	 END_REPEAT;
+
+	 IF SIZEOF(QUERY( table_record_rep <* table_record_rep_set |
+							 (SIZEOF(QUERY( rep_rel <* USEDIN(table_record_rep,
+														 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.REPRESENTATION_RELATIONSHIP.REP_1') |
+												('AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SYMBOL_REPRESENTATION_RELATIONSHIP' IN TYPEOF(rep_rel)) AND
+												(rep_rel.rep_2 :=: field)
+												)) > 0)
+												OR
+							 (SIZEOF(QUERY(item <* table_record_rep.items |
+												 ('AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.MAPPED_ITEM' IN
+													TYPEOF(item))
+																	AND
+												 (field :=: item\mapped_item.mapping_source.
+																		 mapped_representation )
+													)) > 0)
+							)) = 0 THEN
+		 RETURN(FALSE);
+	 END_IF;
+
+	 RETURN(TRUE);
+
+ END_FUNCTION;
+*)
+--END_SCHEMA; -- presentation_definition_schema
+ 
+ 
+ --*TY2021/12/31 added missing functions from ISO 10303-46 presentation_organization_schema
+ (*
+ $Id: presentation_organization_schema.exp,v 1.32 2017/09/26 11:55:05 verodub Exp $
+ ISO 10303 TC184/SC4/WG12 N9772
+
+ EXPRESS Source:
+ ISO 10303-46 ed3 Visual presentation - Presentation organization schema
+
+ The following permission notice and disclaimer shall be included in all copies of this EXPRESS schema ("the Schema"), 
+ and derivations of the Schema:
+
+ Copyright ISO 2017  All rights reserved
+ Permission is hereby granted, free of charge in perpetuity, to any person obtaining a copy of the Schema,
+ to use, copy, modify, merge and distribute free of charge, copies of the Schema for the purposes of developing, 
+ implementing, installing and using software based on the Schema, and to permit persons to whom the Schema is furnished to do so, 
+ subject to the following conditions:
+
+ THE SCHEMA IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
+ INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
+ IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
+ DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
+ ARISING FROM, OUT OF OR IN CONNECTION WITH THE SCHEMA OR THE 
+ USE OR OTHER DEALINGS IN THE SCHEMA.
+
+ In addition, any modified copy of the Schema shall include the following notice:
+
+ THIS SCHEMA HAS BEEN MODIFIED FROM THE SCHEMA DEFINED IN
+ ISO 10303-46 ed3 Visual presentation - Presentation organization schema
+ AND SHOULD NOT BE INTERPRETED AS COMPLYING WITH THAT STANDARD
+ *)
+
+-- SCHEMA presentation_organization_schema '{iso standard 10303 part(46) version(6) object(1) presentation_organization_schema(1)}';
+ (*--ERROR PE007: Reference to undefined type presentation_representation_relationship.
+ FUNCTION acyclic_presentation_representation_relationship
+	 ( relation : presentation_representation_relationship;
+		 children : SET OF presentation_representation ) : BOOLEAN;
+
+	 LOCAL
+		 x : SET OF presentation_representation_relationship;
+		 local_children : SET OF presentation_representation;
+	 END_LOCAL;
+
+	 REPEAT i:=1 TO HIINDEX(children);
+		 IF relation\representation_relationship.rep_1 :=: children[i] THEN
+			 RETURN(FALSE);
+		 END_IF;
+	 END_REPEAT;
+
+	 x := bag_to_set (USEDIN ( relation\representation_relationship.rep_1,
+								 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.REPRESENTATION_RELATIONSHIP.REP_2'));
+	 local_children := children + relation\representation_relationship.rep_1;
+
+	 IF SIZEOF (x) > 0 THEN
+		 REPEAT i:=1 TO HIINDEX (x);
+			 IF NOT acyclic_presentation_representation_relationship
+				 (x[i] , local_children) THEN
+				 RETURN (FALSE);
+			 END_IF;
+		 END_REPEAT;
+	 END_IF;
+
+	 RETURN (TRUE);
+
+ END_FUNCTION;
+ *)
+-- END_SCHEMA; -- presentation_organization_schema
+ 
+ 
+ 
+ --*TY2021/12/31 added missing functions from ISO 10303-46 presentation_appearance_schema
+ (*
+
+ ISO 10303 TC184/SC4/WG12 N10472
+
+ EXPRESS Source:
+ ISO 10303-46 ed4 Visual presentation - Presentation appearance schema
+
+ The following permission notice and disclaimer shall be included in all copies of this EXPRESS schema ("the Schema"), 
+ and derivations of the Schema:
+
+ Copyright ISO 2019  All rights reserved
+ Permission is hereby granted, free of charge in perpetuity, to any person obtaining a copy of the Schema,
+ to use, copy, modify, merge and distribute free of charge, copies of the Schema for the purposes of developing, 
+ implementing, installing and using software based on the Schema, and to permit persons to whom the Schema is furnished to do so, 
+ subject to the following conditions:
+
+ THE SCHEMA IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
+ INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
+ IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
+ DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
+ ARISING FROM, OUT OF OR IN CONNECTION WITH THE SCHEMA OR THE 
+ USE OR OTHER DEALINGS IN THE SCHEMA.
+
+ In addition, any modified copy of the Schema shall include the following notice:
+
+ THIS SCHEMA HAS BEEN MODIFIED FROM THE SCHEMA DEFINED IN
+ ISO 10303-46 ed4 Visual presentation - Presentation appearance schema
+ AND SHOULD NOT BE INTERPRETED AS COMPLYING WITH THAT STANDARD
+ *)
+
+ --SCHEMA presentation_appearance_schema '{iso standard 10303 part(46) version(7) object(1) presentation_appearance_schema(3)}';
+ (*--ERROR PE007: Reference to undefined type hiding_or_blanking_select.
+ FUNCTION acyclic_occlusion_precedence
+			( relation : occlusion_precedence;
+		set_of_lower : SET OF hiding_or_blanking_select ) : BOOLEAN;
+	 LOCAL
+		 x : SET OF occlusion_precedence;
+		 local_set_of_lower : SET OF hiding_or_blanking_select;
+	 END_LOCAL;
+	 REPEAT i:=1 TO HIINDEX(set_of_lower);
+		 IF relation.higher_precedence :=: set_of_lower[i] THEN
+			 RETURN(FALSE);
+		 END_IF;
+	 END_REPEAT;
+	 x := bag_to_set (USEDIN ( relation.higher_precedence,
+									'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.OCCLUSION_PRECEDENCE.LOWER_PRECEDENCE'));
+	 local_set_of_lower := set_of_lower + relation.higher_precedence;
+	 IF SIZEOF (x) > 0 THEN
+		 REPEAT i:=1 TO HIINDEX (x);
+			 IF NOT acyclic_occlusion_precedence(x[i] ,
+																		local_set_of_lower) THEN
+					 RETURN (FALSE);
+			 END_IF;
+		 END_REPEAT;
+	 END_IF;
+	 RETURN (TRUE);
+ END_FUNCTION;
+ *)
+--END_SCHEMA; -- presentation_appearance_schema 
+
+
+ 
+ 
+ --*TY2021/12/31 added missing functions from ISO 10303-50 mathematical_functions_schema
+ (*
+ $Id: mathematical_functions_schema.exp,v 1.23 2014/05/26 12:22:03  Exp $
+ ISO 10303 TC184/SC4/WG12 N8315
+
+ EXPRESS Source:
+ ISO 10303-50 ed1 Mathematical constructs - Mathematical functions schema
+
+ The following permission notice and disclaimer shall be included in all copies of this EXPRESS schema ("the Schema"), 
+ and derivations of the Schema:
+
+ Copyright ISO 2014  All rights reserved
+ Permission is hereby granted, free of charge in perpetuity, to any person obtaining a copy of the Schema,
+ to use, copy, modify, merge and distribute free of charge, copies of the Schema for the purposes of developing, 
+ implementing, installing and using software based on the Schema, and to permit persons to whom the Schema is furnished to do so, 
+ subject to the following conditions:
+
+ THE SCHEMA IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
+ INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
+ IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
+ DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
+ ARISING FROM, OUT OF OR IN CONNECTION WITH THE SCHEMA OR THE 
+ USE OR OTHER DEALINGS IN THE SCHEMA.
+
+ In addition, any modified copy of the Schema shall include the following notice:
+
+ THIS SCHEMA HAS BEEN MODIFIED FROM THE SCHEMA DEFINED IN
+ ISO 10303-50 ed1 Mathematical constructs - Mathematical functions schema
+ AND SHOULD NOT BE INTERPRETED AS COMPLYING WITH THAT STANDARD
+ *)
+
+-- SCHEMA mathematical_functions_schema '{iso standard 10303 part(50) version(3) object(1) mathematical_functions_schema(1)}';
+ FUNCTION compare_list_and_value(lv : LIST OF GENERIC:G;
+																 op : elementary_function_enumerators;
+																 v  : GENERIC:G) : BOOLEAN;
+	 IF NOT EXISTS (lv) OR NOT EXISTS (op) OR NOT EXISTS (v) THEN
+		 RETURN (FALSE);
+	 END_IF;
+	 REPEAT i := 1 TO SIZEOF (lv);
+		 IF NOT compare_values(lv[i], op, v) THEN
+			 RETURN (FALSE);
+		 END_IF;
+	 END_REPEAT;
+	 RETURN (TRUE);
+ END_FUNCTION;  -- compare_list_and_value
+ FUNCTION compare_values(v1 : GENERIC:G;
+												 op : elementary_function_enumerators;
+												 v2 : GENERIC:G) : BOOLEAN;
+	 -- This algorithm assumes a comparison between "incompatible" types will
+	 -- produce the indeterminate value (or UNKNOWN?).
+	 LOCAL
+		 logl : LOGICAL := UNKNOWN;
+	 END_LOCAL;
+	 IF NOT EXISTS (v1) OR NOT EXISTS (op) OR NOT EXISTS (v2) THEN
+		 RETURN (FALSE);
+	 END_IF;
+	 CASE op OF
+	 ef_eq_i : logl := (v1 = v2);
+	 ef_ne_i : logl := (v1 <> v2);
+	 ef_gt_i : logl := (v1 > v2);
+	 ef_lt_i : logl := (v1 < v2);
+	 ef_ge_i : logl := (v1 >= v2);
+	 ef_le_i : logl := (v1 <= v2);
+	 END_CASE;
+	 IF EXISTS (logl) THEN
+		 IF logl = TRUE THEN  RETURN (TRUE);  END_IF;
+	 END_IF;
+	 RETURN (FALSE);
+ END_FUNCTION;  -- compare_values
+
+ FUNCTION make_abstracted_expression_function(
+																		 operands : LIST [2:?] OF generic_expression)
+																		: abstracted_expression_function;
+	 RETURN (abstracted_expression_function()
+		 || maths_function()
+			 || generic_expression()
+		 || quantifier_expression (remove_first (operands))  -- derived
+			 || multiple_arity_generic_expression (operands) );
+ END_FUNCTION;  -- make_abstracted_expression_function
+ 
+  FUNCTION make_b_spline_basis(degree         : nonnegative_integer;
+															repeated_knots : LIST [2:?] OF REAL) : b_spline_basis;
+	 RETURN (b_spline_basis (degree, repeated_knots)
+		 || maths_function()
+			 || generic_expression()
+		 || generic_literal()
+			 || simple_generic_expression() );
+ END_FUNCTION;  -- make_b_spline_basis
+ 
+ FUNCTION make_b_spline_function(coef  : maths_function;
+																 bases : LIST [1:?] OF b_spline_basis)
+																: b_spline_function;
+	 RETURN (b_spline_function (bases)
+		 || maths_function()
+			 || generic_expression()
+		 || unary_generic_expression (coef) );
+ END_FUNCTION;  -- make_b_spline_function
+ 
+ FUNCTION make_banded_matrix(index_base    : zero_or_one;
+														 shape         : LIST [1:?] OF positive_integer;
+														 source        : maths_function;
+														 first         : INTEGER;
+														 default_entry : maths_value;
+														 below         : INTEGER;
+														 above         : INTEGER;
+														 order         : ordering_type) : banded_matrix;
+	 RETURN (banded_matrix (default_entry, below, above, order)
+		 || linearized_table_function (first)
+			 || explicit_table_function (index_base, shape)
+				 || maths_function()
+					 || generic_expression()
+			 || unary_generic_expression (source) );
+ END_FUNCTION;  -- make_banded_matrix
+ 
+ FUNCTION make_basic_sparse_matrix(index_base    : zero_or_one;
+																	 shape         : LIST [1:?] OF positive_integer;
+																	 operands      : LIST [3:3] OF maths_function;
+																	 default_entry : maths_value;
+																	 order         : ordering_type)
+																	: basic_sparse_matrix;
+	 RETURN (basic_sparse_matrix (default_entry, order)
+		 || explicit_table_function (index_base, shape)
+			 || maths_function()
+				 || generic_expression()
+		 || multiple_arity_generic_expression (operands) );
+ END_FUNCTION;  -- make_basic_sparse_matrix
+
+ FUNCTION make_constant_function(sole_value   : maths_value;
+																 src_of_domn  : maths_space_or_function)
+																: constant_function;
+	 RETURN (constant_function (sole_value, src_of_domn)
+		 || maths_function()
+			 || generic_expression()
+		 || generic_literal()
+			 || simple_generic_expression() );
+ END_FUNCTION;  -- make_constant_function
+ 
+ 
+ 
+ (*--ERROR PE007: Reference to undefined type cos_expression.
+ FUNCTION make_cos_expression(operand : numeric_expression) : cos_expression;
+	 RETURN (cos_expression()
+		 || unary_numeric_call_expression()
+			 || unary_numeric_expression()
+				 || numeric_expression()
+					 || expression()
+						 || generic_expression()
+				 || unary_generic_expression (operand) );
+ END_FUNCTION;  -- make_cos_expression
+ *)
+ 
+ FUNCTION make_definite_integral_expression(
+																		operands     : LIST [2:4] OF generic_expression;
+																		loinf, upinf : BOOLEAN)
+																					 : definite_integral_expression;
+	 RETURN (definite_integral_expression (loinf, upinf)
+		 || quantifier_expression ([operands[2]])
+			 || multiple_arity_generic_expression (operands)
+				 || generic_expression() );
+ END_FUNCTION;  -- make_definite_integral_expression
+ 
+ FUNCTION make_definite_integral_function(integrand    : maths_function;
+																					varintg      : input_selector;
+																					loinf, upinf : BOOLEAN)
+																				 : definite_integral_function;
+	 RETURN (definite_integral_function (varintg, loinf, upinf)
+		 || maths_function()
+			 || generic_expression()
+		 || unary_generic_expression (integrand) );
+ END_FUNCTION;  -- make_definite_integral_function
+ 
+
+
+
+
+ FUNCTION make_environment(varbl : generic_variable;
+													 sem   : variable_semantics) : environment;
+	 RETURN (environment (varbl, sem) );
+ END_FUNCTION;  -- make_environment
+ 
+ 
+ FUNCTION make_expression_denoted_function(expression : generic_expression)
+																					: expression_denoted_function;
+	 RETURN (expression_denoted_function()
+		 || maths_function()
+			 || generic_expression()
+		 || unary_generic_expression (expression) );
+ END_FUNCTION;  -- make_expression_denoted_function
+ 
+
+ FUNCTION make_finite_function(pairs : SET [1:?] OF LIST [2:2] OF maths_value)
+															: finite_function;
+	 RETURN (finite_function (pairs)
+		 || maths_function()
+			 || generic_expression()
+		 || generic_literal()
+			 || simple_generic_expression() );
+ END_FUNCTION;  -- make_finite_function
+
+
+
+
+
+
+ FUNCTION make_general_linear_function(mat       : maths_function;
+																			 sum_index : one_or_two)
+																			: general_linear_function;
+	 RETURN (general_linear_function (sum_index)
+		 || maths_function()
+			 || generic_expression()
+		 || unary_generic_expression (mat) );
+ END_FUNCTION;  -- make_general_linear_function
+ 
+
+ FUNCTION make_integer_interval_from_min(min : INTEGER)
+	 : integer_interval_from_min;
+	 RETURN (integer_interval_from_min (min)
+		 || maths_space()
+			 || generic_expression()
+		 || generic_literal()
+			 || simple_generic_expression() );
+ END_FUNCTION;  -- make_integer_interval_from_min
+
+ FUNCTION make_listed_complex_number_data(index_base : zero_or_one;
+																					values     : LIST [2:?] OF REAL)
+																				 : listed_complex_number_data;
+	 RETURN (listed_complex_number_data (values)
+		 || explicit_table_function (index_base, [SIZEOF (values)/2])  -- 2nd derived
+			 || maths_function()
+				 || generic_expression()
+		 || generic_literal()
+			 || simple_generic_expression() );
+ END_FUNCTION;  -- make_listed_complex_number_data
+
+ FUNCTION make_listed_data(index_base  : zero_or_one;
+													 values      : LIST [2:?] OF maths_value;
+													 value_range : maths_space) : listed_data;
+	 RETURN (listed_data (values, value_range)
+		 || explicit_table_function (index_base, [SIZEOF (values)])  -- 2nd derived
+			 || maths_function()
+				 || generic_expression()
+		 || generic_literal()
+			 || simple_generic_expression() );
+ END_FUNCTION;  -- make_listed_data
+
+ FUNCTION make_listed_integer_data(index_base : zero_or_one;
+																	 values     : LIST [1:?] OF INTEGER)
+																	: listed_integer_data;
+	 RETURN (listed_integer_data (values)
+		 || explicit_table_function (index_base, [SIZEOF (values)])  -- 2nd derived
+			 || maths_function()
+				 || generic_expression()
+		 || generic_literal()
+			 || simple_generic_expression() );
+ END_FUNCTION;  -- make_listed_integer_data
+
+
+ FUNCTION make_listed_real_data(index_base : zero_or_one;
+																values     : LIST [1:?] OF REAL)
+															 : listed_real_data;
+	 RETURN (listed_real_data (values)
+		 || explicit_table_function (index_base, [SIZEOF (values)])  -- 2nd derived
+			 || maths_function()
+				 || generic_expression()
+		 || generic_literal()
+			 || simple_generic_expression() );
+ END_FUNCTION;  -- make_listed_real_data
+
+
+
+ 
+ FUNCTION make_maths_real_variable(values_space : maths_space;
+																	 name         : label) : maths_real_variable;
+		 
+		RETURN (expression() || numeric_expression() || simple_numeric_expression() 
+		||  maths_real_variable() 
+		 || maths_variable (values_space, name)
+			 || generic_variable()
+				 || simple_generic_expression()
+					 || generic_expression()
+		 || real_numeric_variable()
+			 || numeric_variable()
+				 || variable() );
+	 END_FUNCTION;
+
+
+ FUNCTION make_mult_expression(operands : LIST [2:?] OF generic_expression)
+															: mult_expression;
+	 RETURN (mult_expression()
+		 || multiple_arity_numeric_expression()
+			 || numeric_expression()
+				 || expression()
+					 || generic_expression()
+			 || multiple_arity_generic_expression (operands) );
+ END_FUNCTION;  -- make_mult_expression
+
+
+ FUNCTION make_partial_derivative_expression(derivand : generic_expression;
+																						 dvars    : LIST [1:?] OF maths_variable;
+																						 extend   : extension_options)
+																						: partial_derivative_expression;
+	 RETURN (partial_derivative_expression (dvars, extend)
+		 || unary_generic_expression (derivand)
+			 || generic_expression() );
+ END_FUNCTION;  -- make_partial_derivative_expression
+
+ FUNCTION make_partial_derivative_function(derivand : maths_function;
+																					 dvars    : LIST [1:?] OF input_selector;
+																					 extend   : extension_options)
+																					: partial_derivative_function;
+	 RETURN (partial_derivative_function (dvars, extend)
+		 || maths_function()
+			 || generic_expression()
+		 || unary_generic_expression (derivand) );
+ END_FUNCTION;  -- make_partial_derivative_function
+
+
+ FUNCTION make_rationalize_function(fun : maths_function) : rationalize_function;
+	 RETURN (rationalize_function()
+		 || maths_function()
+			 || generic_expression()
+		 || unary_generic_expression (fun) );
+ END_FUNCTION;  -- make_rationalize_function
+
+
+
+
+ FUNCTION make_regular_table_function(index_base : zero_or_one;
+																			shape      : LIST [1:?] OF positive_integer;
+																			operand    : maths_function;
+																			first      : INTEGER;
+																			increments : LIST [1:?] OF INTEGER)
+																		 : regular_table_function;
+	 RETURN (regular_table_function (increments)
+		 || linearized_table_function (first)
+			 || explicit_table_function (index_base, shape)
+				 || maths_function()
+					 || generic_expression()
+			 || unary_generic_expression (operand) );
+ END_FUNCTION;  -- make_regular_table_function
+
+ FUNCTION make_reindexed_array_function(func       : maths_function;
+																				start_idxs : LIST [1:?] OF INTEGER)
+																			 : reindexed_array_function;
+	 RETURN (reindexed_array_function(start_idxs)
+		 || maths_function()
+			 || generic_expression()
+		 || unary_generic_expression (func) );
+ END_FUNCTION;  -- make_reindexed_array_function
+
+ FUNCTION make_repackaging_function(operand         : maths_function;
+																		input_repack    : repackage_options;
+																		output_repack   : repackage_options;
+																		selected_output : nonnegative_integer)
+																	 : repackaging_function;
+	 RETURN (repackaging_function (input_repack, output_repack, selected_output)
+		 || maths_function()
+			 || generic_expression()
+		 || unary_generic_expression (operand) );
+ END_FUNCTION;  -- make_repackaging_function
+
+ FUNCTION make_selector_function(selector    : input_selector;
+																 src_of_domn : maths_space_or_function)
+																: selector_function;
+	 RETURN (selector_function (selector, src_of_domn)
+		 || maths_function()
+				|| generic_expression()
+		 || generic_literal()
+				|| simple_generic_expression() );
+ END_FUNCTION;  -- make_selector_function
+
+ FUNCTION make_series_composed_function(functions : LIST [2:?] OF maths_function)
+																			 : series_composed_function;
+	 RETURN (series_composed_function()
+		 || maths_function()
+			 || generic_expression()
+		 || multiple_arity_generic_expression (functions) );
+ END_FUNCTION;  -- make_series_composed_function
+
+ (* --ERROR PE007: Reference to undefined type sin_expression.
+ FUNCTION make_sin_expression(operand : numeric_expression) : sin_expression;
+	 RETURN (sin_expression()
+		 || unary_numeric_call_expression()
+			 || unary_numeric_expression()
+				 || numeric_expression()
+					 || expression()
+						 || generic_expression()
+				 || unary_generic_expression (operand) );
+ END_FUNCTION;  -- make_sin_expression
+*)
+ 
+ FUNCTION make_standard_table_function(index_base : zero_or_one;
+																			 shape      : LIST [1:?] OF positive_integer;
+																			 operand    : maths_function;
+																			 first      : INTEGER;
+																			 order      : ordering_type)
+																			: standard_table_function;
+	 RETURN (standard_table_function (order)
+		 || linearized_table_function (first)
+			 || explicit_table_function (index_base, shape)
+				 || maths_function()
+					 || generic_expression()
+			 || unary_generic_expression (operand) );
+ END_FUNCTION;  -- make_standard_table_function
+
+ FUNCTION make_strict_triangular_matrix(index_base    : zero_or_one;
+																				shape         : LIST [1:?] OF positive_integer;
+																				source        : maths_function;
+																				first         : INTEGER;
+																				default_entry : maths_value;
+																				lo_up         : lower_upper;
+																				order         : ordering_type;
+																				main_diagonal_value : maths_value)
+																			 : strict_triangular_matrix;
+	 RETURN (strict_triangular_matrix (main_diagonal_value)
+		 || triangular_matrix (default_entry, lo_up, order)
+			 || linearized_table_function (first)
+				 || explicit_table_function (index_base, shape)
+					 || maths_function()
+						 || generic_expression()
+				 || unary_generic_expression (source) );
+ END_FUNCTION;  -- make_strict_triangular_matrix
+
+(*--ERROR PE007: Reference to undefined type unary_minus_expression.
+ FUNCTION make_unary_minus_expression(operand : numeric_expression)
+	 : unary_minus_expression;
+	 RETURN (unary_minus_expression()
+		 || unary_numeric_call_expression()
+			 || unary_numeric_expression()
+				 || numeric_expression()
+					 || expression()
+						 || generic_expression()
+				 || unary_generic_expression (operand) );
+ END_FUNCTION;  -- make_unary_minus_expression
+ *)
+-- END_SCHEMA;  -- mathematical_functions_schema
+ 
+ 
+ 
+ --*TY2021/12/31 added missing functions from ISO 10303-52 mesh_topology_schema
+ (*
+ $Id: mesh_topology_schema.exp,v 1.18 2019/05/07 13:05:18 kevin Exp $
+ ISO 10303 TC184/SC4/WG12 N10057
+
+ EXPRESS Source:
+ ISO 10303-52 ed2 Mesh-based topology - Mesh topology schema
+
+ The following permission notice and disclaimer shall be included in all copies of this EXPRESS schema ("the Schema"), 
+ and derivations of the Schema:
+
+ Copyright ISO 2019  All rights reserved
+ Permission is hereby granted, free of charge in perpetuity, to any person obtaining a copy of the Schema,
+ to use, copy, modify, merge and distribute free of charge, copies of the Schema for the purposes of developing, 
+ implementing, installing and using software based on the Schema, and to permit persons to whom the Schema is furnished to do so, 
+ subject to the following conditions:
+
+ THE SCHEMA IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
+ INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
+ IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
+ DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
+ ARISING FROM, OUT OF OR IN CONNECTION WITH THE SCHEMA OR THE 
+ USE OR OTHER DEALINGS IN THE SCHEMA.
+
+ In addition, any modified copy of the Schema shall include the following notice:
+
+ THIS SCHEMA HAS BEEN MODIFIED FROM THE SCHEMA DEFINED IN
+ ISO 10303-52 ed2 Mesh-based topology - Mesh topology schema
+ AND SHOULD NOT BE INTERPRETED AS COMPLYING WITH THAT STANDARD
+ *)
+
+-- SCHEMA mesh_topology_schema '{iso standard 10303 part(52) version(4) object(1) mesh_topology_schema(3)}';
+ (*--ERROR PE007: Reference to undefined type vertex_defined_cell.
+ FUNCTION all_mesh_vertices(arg : array_based_unstructured_mesh_and_vertices)
+					: BOOLEAN;
+ LOCAL
+	 vertex_set : SET OF vertex := [];
+	 cell : vertex_defined_cell;
+ END_LOCAL;
+	 REPEAT i := 1 TO arg.cell_count;
+		 cell := arg.cells[i];
+		 REPEAT j := 1 TO cell.vn_count;
+			 vertex_set := vertex_set + cell.vertices[j];
+		 END_REPEAT;
+	 END_REPEAT;
+	 IF (SIZEOF(vertex_set) <> arg.index_count) THEN
+		 RETURN(FALSE);
+	 END_IF;
+	 REPEAT i := 1 TO arg.index_count;
+		 IF (NOT (arg.vertices[i] IN vertex_set) ) THEN
+			 RETURN(FALSE);
+		 END_IF;
+	 END_REPEAT;
+	 RETURN(TRUE);
+ END_FUNCTION;
+*)
+ 
+ (*--ERROR PE007: Reference to undefined type vertex_defined_cell.
+ FUNCTION cell_counts(arg : vertex_defined_cell) : ARRAY[1:3] OF INTEGER;
+ LOCAL
+	 om1    : INTEGER := 0;      -- (order - 1)
+	 om1sq  : INTEGER := om1**2; -- (order - 1) squared
+	 vts    : INTEGER;           -- number of bounding vertices
+	 eds    : INTEGER;           -- number of edges
+	 qf     : INTEGER := 0;      -- number of quadrilateral faces
+	 tf     : INTEGER := 0;      -- number of triangular faces
+	 result : ARRAY [1:3] OF INTEGER := [0,0,0];
+ END_LOCAL;
+	 CASE arg.order OF
+		 linear    : om1 := 0;
+		 quadratic : om1 := 1;
+		 cubic     : om1 := 2;
+		 OTHERWISE : RETURN(result);
+	 END_CASE;
+	 om1sq := om1**2;
+	 CASE arg.shape OF
+		 cell_shape_0D.single : 
+				 BEGIN
+					 vts := 1; eds := 0; qf := 0; tf := 0;
+					 result[1] := vts;
+					 result[2] := om1*eds;                   -- 0, 0, 0
+					 result[3] := 0;                         -- 0, 0, 0
+				 END;
+		 cell_shape_1D.line :
+				 BEGIN
+					 vts := 2; eds := 1; qf := 0; tf := 0;
+					 result[1] := vts;
+					 result[2] := om1*eds;                   -- 0, 1, 2
+					 result[3] := 0;                         -- 0, 0, 0
+				 END;
+		 cell_shape_2D.quadrilateral : 
+				 BEGIN
+					 vts := 4; eds := 4; qf := 1; tf := 0;
+					 result[1] := vts;
+					 result[2] := om1*eds;                   -- 0, 4, 8
+					 result[3] := om1sq*qf;                  -- 0, 1, 4
+				 END;
+		 cell_shape_2D.triangle : 
+				 BEGIN
+					 vts := 3; eds := 3; qf := 0; tf := 1;
+					 result[1] := vts;
+					 result[2] := om1*eds;                   -- 0, 3, 6
+					 result[3] := (om1-1)*tf;                --    0, 1
+					 CASE arg.order OF
+						 linear : result[3] := 0;              -- 0
+					 END_CASE;
+				 END;
+		 cell_shape_3D.hexahedron :
+				 BEGIN
+					 vts := 8; eds := 12; qf := 6; tf := 0;
+					 result[1] := vts;
+					 result[2] := om1*eds;                   -- 0, 12, 24
+					 result[3] := om1sq*(qf+om1);            -- 0, 7, 32
+				 END;
+		 cell_shape_3D.wedge :
+				 BEGIN
+					 vts := 6; eds := 9; qf := 3; tf := 2;
+					 result[1] := vts;
+					 result[2] := om1*eds;                   -- 0, 9,  18
+					 result[3] := om1sq*qf + om1*tf;         -- 0, 3, 16
+				 END;
+		 cell_shape_3D.tetrahedron : 
+				 BEGIN
+					 vts := 4; eds := 6; qf := 0; tf := 4;
+					 result[1] := vts;
+					 result[2] := om1*eds;                   -- 0, 6, 12
+					 result[3] := (om1-1)*tf;                --    0, 4
+					 CASE arg.order OF
+						 linear : result[3] := 0;              -- 0
+					 END_CASE;
+				 END;
+		 cell_shape_3D.pyramid : 
+				 BEGIN
+					 vts := 5; eds := 8; qf := 1; tf := 4;
+					 result[1] := vts;
+					 result[2] := om1*eds;                   -- 0, 8, 16
+					 result[3] := om1sq*qf + (om1-1)*tf;     --    1, 9
+					 CASE arg.order OF
+						 linear : result[3] := 0;              -- 0
+					 END_CASE;
+				 END;
+	 END_CASE;
+ RETURN(result);
+ END_FUNCTION;
+*)
+
+ FUNCTION shorten_array(longa : ARRAY OF GENERIC : T;
+											 oldl, newl : INTEGER) : ARRAY OF GENERIC : T;
+		LOCAL
+			shorta : ARRAY [1:newl] OF GENERIC : T;
+		END_LOCAL;
+
+		IF (newl > oldl) THEN
+			RETURN(?);
+		ELSE
+			REPEAT i := 1 TO newl;
+				shorta[i] := longa[i];
+			END_REPEAT;
+			RETURN(shorta);
+		END_IF;
+ END_FUNCTION;
+
+-- END_SCHEMA;  -- end of mesh_topology_schema
+
+ 
+ 
+ 
+ --*TY2021/12/31 added missing functions from ISO 10303-53 product_analysis_schema
+ (*
+	 $Id: product_analysis_schema.exp,v 1.10 2010/12/02 22:26:13  Exp $
+ ISO TC184/SC4/WG12 N6003 - ISO/TS 10303-53 Numerical analysis EXPRESS
+ Supersedes ISO TC184/SC4/WG12 N2170
+ *)
+
+-- SCHEMA product_analysis_schema;
+ (*--ERROR PE007: Reference to undefined type spatial_decomposition_of_temporal_spatial_domain.
+ FUNCTION definition_for_temporal_spatial_domain (domain : temporal_spatial_domain): BOOLEAN;
+	 LOCAL
+		 spatial_set : SET OF spatial_decomposition_of_temporal_spatial_domain;
+		 behavioural_set : SET OF behavioural_decomposition_of_temporal_spatial_domain;
+		 domains : SET OF temporal_spatial_domain := [];
+		 idealising : BAG OF idealisation_relationship;
+		 spatial_bag : BAG OF spatial_decomposition_of_temporal_spatial_domain;
+		 behavioural_bag : BAG OF behavioural_decomposition_of_temporal_spatial_domain;
+	 END_LOCAL;
+
+	 idealising := USEDIN(domain, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.IDEALISATION_RELATIONSHIP.IDEALISATION');
+	 IF SIZEOF(idealising) > 0 THEN
+		 RETURN (TRUE);
+	 END_IF;
+	 spatial_bag := USEDIN(domain, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SPATIAL_DECOMPOSITION_OF_TEMPORAL_SPATIAL_DOMAIN.PARTS');
+	 IF SIZEOF(spatial_bag) > 0 THEN
+		 spatial_set := bag_to_set(spatial_bag);
+		 REPEAT i := 1 TO HIINDEX(spatial_set);
+			 domains := domains + spatial_set[i].whole;
+		 END_REPEAT;
+	 END_IF;
+	 behavioural_bag := USEDIN(domain, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.BEHAVIOURAL_DECOMPOSITION_OF_TEMPORAL_SPATIAL_DOMAIN.PARTS');
+	 IF SIZEOF(behavioural_bag) > 0 THEN
+		 behavioural_set := bag_to_set(behavioural_bag);
+		 REPEAT i := 1 TO HIINDEX(behavioural_set);
+			 domains := domains + behavioural_set[i].whole;
+		 END_REPEAT;
+	 END_IF;
+	 IF SIZEOF(domains) > 0 THEN
+		 REPEAT i := 1 TO HIINDEX(domains);
+			 IF definition_for_temporal_spatial_domain(domains[i]) THEN
+				 RETURN (TRUE);
+			 END_IF;
+		 END_REPEAT;
+	 END_IF;
+	 RETURN (FALSE);
+ END_FUNCTION;
+*)
+-- END_SCHEMA; -- product_analysis_schema
+
+
+ 
+ 
+ --*TY2021/12/31 added missing functions from ISO 10303-53 analysis_schema
+ (*
+	 $Id: analysis_schema.exp,v 1.14 2010/12/02 22:24:40  Exp $
+	ISO TC184/SC4/WG12 N6003 - ISO/TS 10303-53 Numerical analysis EXPRESS
+ Supersedes ISO TC184/SC4/WG12 N2170
+ *)
+
+-- SCHEMA analysis_schema;
+ (*--ERROR PE007: Reference to undefined type spatial_decomposition_of_numerical_model.
+ FUNCTION temporal_spatial_domain_for_model (domain : numerical_model): BOOLEAN;
+	 LOCAL
+		 spatial_set : SET OF spatial_decomposition_of_numerical_model;
+		 behavioural_set : SET OF behavioural_decomposition_of_numerical_model;
+		 domains : SET OF numerical_model := [];
+		 viewing : BAG OF view_relationship;
+		 spatial_bag : BAG OF spatial_decomposition_of_numerical_model;
+		 behavioural_bag : BAG OF behavioural_decomposition_of_numerical_model;
+	 END_LOCAL;
+
+	 viewing := USEDIN(domain, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.VIEW_RELATIONSHIP.VIEW');
+	 IF SIZEOF(viewing) > 0 THEN
+		 RETURN (TRUE);
+	 END_IF;
+	 spatial_bag := USEDIN(domain, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.SPATIAL_DECOMPOSITION_OF_NUMERICAL_MODEL.PARTS');
+	 IF SIZEOF(spatial_bag) > 0 THEN
+		 spatial_set := bag_to_set(spatial_bag);
+		 REPEAT i := 1 TO HIINDEX(spatial_set);
+			 domains := domains + spatial_set[i].whole;
+		 END_REPEAT;
+	 END_IF;
+	 behavioural_bag := USEDIN(domain, 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.BEHAVIOURAL_DECOMPOSITION_OF_NUMERICAL_MODEL.PARTS');
+	 IF SIZEOF(behavioural_bag) > 0 THEN
+		 behavioural_set := bag_to_set(behavioural_bag);
+		 REPEAT i := 1 TO HIINDEX(behavioural_set);
+			 domains := domains + behavioural_set[i].whole;
+		 END_REPEAT;
+	 END_IF;
+	 IF SIZEOF(domains) > 0 THEN
+		 REPEAT i := 1 TO HIINDEX(domains);
+			 IF temporal_spatial_domain_for_model(domains[i]) THEN
+				 RETURN (TRUE);
+			 END_IF;
+		 END_REPEAT;
+	 END_IF;
+	 RETURN (FALSE);
+ END_FUNCTION;
+*)
+--END_SCHEMA; -- analysis_schema
+
+
+ 
+ --*TY2021/12/31 added missing functions from ISO 10303-56 state_observed_schema
+ (*
+ $Id: state_observed_schema.exp,v 1.20 2019/04/17 15:27:38 kevin Exp $
+ ISO 10303 TC184/SC4/WG12 N10245
+
+ EXPRESS Source:
+ ISO 10303-56 ed2 State - State observed schema
+
+ The following permission notice and disclaimer shall be included in all copies of this EXPRESS schema ("the Schema"), 
+ and derivations of the Schema:
+
+ Copyright ISO 2019  All rights reserved
+ Permission is hereby granted, free of charge in perpetuity, to any person obtaining a copy of the Schema,
+ to use, copy, modify, merge and distribute free of charge, copies of the Schema for the purposes of developing, 
+ implementing, installing and using software based on the Schema, and to permit persons to whom the Schema is furnished to do so, 
+ subject to the following conditions:
+
+ THE SCHEMA IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
+ INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
+ IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
+ DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
+ ARISING FROM, OUT OF OR IN CONNECTION WITH THE SCHEMA OR THE 
+ USE OR OTHER DEALINGS IN THE SCHEMA.
+
+ In addition, any modified copy of the Schema shall include the following notice:
+
+ THIS SCHEMA HAS BEEN MODIFIED FROM THE SCHEMA DEFINED IN
+ ISO 10303-56 ed1 State - State observed schema
+ AND SHOULD NOT BE INTERPRETED AS COMPLYING WITH THAT STANDARD
+ *)
+
+-- SCHEMA state_observed_schema '{iso standard 10303 part(56) version(2) object(1) state_observed_schema(2)}';
+ (*--ERROR PE007: Reference to undefined type hypothesis_state_to_confirmation_state_relationship.
+ FUNCTION acyclic_hypothesis_state_to_confirmation_state_relationship
+	 (relation          : hypothesis_state_to_confirmation_state_relationship;
+		relatives         : SET [1:?] OF ascribable_state;
+		specific_relation : STRING) : LOGICAL;
+	 LOCAL
+		 x                : SET OF hypothesis_state_to_confirmation_state_relationship;
+	 END_LOCAL;
+	 IF relation.confirmed_state IN
+						 relatives THEN
+		 RETURN (FALSE);
+	 END_IF;             -- IN is based in instance equality
+	 x := QUERY (hstcsr <* bag_to_set (USEDIN
+				(relation.confirmed_state,
+				 'AP242_MANAGED_MODEL_BASED_3D_ENGINEERING_MIM_LF.HYPOTHESIS_STATE_TO_CONFIRMATION_STATE_RELATIONSHIP.HYPOTHESIZED_STATE')) |
+					specific_relation IN TYPEOF (hstcsr));
+	 REPEAT I := 1 TO HIINDEX(x);             -- pre-checked loop
+		 IF NOT acyclic_hypothesis_state_to_confirmation_state_relationship
+			 (x[i],
+				relatives + relation.confirmed_state,
+				specific_relation) THEN
+			 RETURN(FALSE);
+		 END_IF;
+	 END_REPEAT;
+	 RETURN(TRUE);
+ END_FUNCTION;
+*)
+--END_SCHEMA;  -- state_observed_schema
+ 
+
+END_SCHEMA; -- Ap242_managed_model_based_3d_engineering_mim_LF
